
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
Loading required package: future
[10:30:55.899] plan(): Setting new future strategy stack:
[10:30:55.899] List of future strategies:
[10:30:55.899] 1. sequential:
[10:30:55.899]    - args: function (..., envir = parent.frame())
[10:30:55.899]    - tweaked: FALSE
[10:30:55.899]    - call: future::plan("sequential")
[10:30:55.914] plan(): nbrOfWorkers() = 1
> 
> message("*** future_replicate() ...")
*** future_replicate() ...
> 
> for (strategy in supportedStrategies()) {
+   message(sprintf("*** strategy = %s ...", sQuote(strategy)))
+   plan(strategy)
+   
+   y0 <- replicate(5L, sample(10L, size = 1L))
+   y1 <- future_replicate(5L, sample(10L, size = 1L))
+   stopifnot(length(y0) == length(y1))
+   
+   set.seed(0xBEEF)
+   y1 <- future_replicate(5L, sample(10L, size = 1L))
+   set.seed(0xBEEF)
+   y2 <- future_replicate(5L, sample(10L, size = 1L))
+   stopifnot(all.equal(y2, y1))
+   
+   y3 <- future_replicate(5L, sample(10L, size = 1L), future.seed = 0xBEEF)
+   y4 <- future_replicate(5L, sample(10L, size = 1L), future.seed = 0xBEEF)
+   stopifnot(all.equal(y4, y3))
+   
+   
+   message("- example(replicate) ...")
+   
+   foo <- function(x = 1, y = 2) c(x, y)
+   bar0 <- function(n, x) replicate(n, foo(x = x))
+   y0 <- bar0(5, x = 3)
+   
+   bar1 <- function(n, x) future_replicate(n, foo(x = x))
+   y1 <- bar1(5, x = 3)
+   stopifnot(all.equal(y1, y0))
+   
+   plan(sequential)
+   message(sprintf("*** strategy = %s ... done", sQuote(strategy)))
+ } ## for (strategy in ...) 
*** strategy = ‘sequential’ ...
[10:30:55.939] plan(): Setting new future strategy stack:
[10:30:55.939] List of future strategies:
[10:30:55.939] 1. sequential:
[10:30:55.939]    - args: function (..., envir = parent.frame())
[10:30:55.939]    - tweaked: FALSE
[10:30:55.939]    - call: plan(strategy)
[10:30:55.952] plan(): nbrOfWorkers() = 1
[10:30:55.953] future_lapply() ...
[10:30:55.957] Generating random seeds ...
[10:30:55.957] Generating random seed streams for 5 elements ...
[10:30:55.958] Generating random seed streams for 5 elements ... DONE
[10:30:55.958] Generating random seeds ... DONE
[10:30:55.958] Will set RNG state on exit: 10403, 14, -846849076, 31706914, -1310584451, -985965961, 1546683294, 1437864536, -540697669, 1743482201, -1941182744, 1856575254, 1770813585, -444836541, 741216338, -836332828, 1594754343, 1438367101, -11561868, -1214153126, 1237019301, 1176113343, -1154682042, -465624624, -196492301, -253109487, -174503104, 490058526, 819444713, -1923821285, -1343075542, 2124991564, 1751221263, 1860054853, 959301884, 1194669906, 1176598733, 2146642055, -107267218, -2021249720, 1759983947, -900207447, 1779256824, 320607526, 2054309441, -1420767277, -1208466046, -711038540, 427832631, -1244790739, 1240747332, 831801962, -1001036587, 1399640687, -524961930, 741677216, 706171235, 385614337, -1519578768, 1227223310, -520150151, 1830087435, 164107322, -683117764, 1408346239, -286864427, -189815316, 1588078402, -713586531, -248655593, 660064382, 39444536, 246257435, -1597074311, 1663155400, -46215946, -1560007375, 885198179, 1860751154, 90744964, -756853561, 1064818589, -445070572, 839791034, 1232422917, -1296425505, -737783706, -1419812880, 2029975827, 2029487793, 2004431200, -1791940866, -1508457847, 1403411899, -538720374, 1422249580, 1793708015, -1432074203, 1848895708, -940912974, 1812324781, 2076165479, 1818645134, 1325284200, 1533936491, -241050359, -1604832360, 1802404550, 914294817, -955999053, 970137122, -1811972076, -56777577, -660894067, 188596132, -995819126, 650305013, 1396043855, -827865258, -1374519808, -174018749, 521479905, 552526928, -433886034, 863361113, -1404250005, 847003098, -707942756, 1198848159, -1932168459, 914370444, -132972958, -1987845571, 1776987319, 1165734750, 934057624, 1113085435, -552122471, -611405784, -1065584426, -783680175, -1842017277, 1855935378, 1040007460, -1358661657, 1319603261, -1570063692, -493102822, -1880507803, -1868304641, 254653318, -472197872, -1211331149, -59298223, 982060544, -2078586146, -578467543, -1319938853, 599946218, -671374452, -1874418481, 1426279557, 1061144380, 2096395794, 14013709, -44990905, -78937042, 87091592, 1688768651, -13604247, 1827518008, -1260859674, 349055617, 938227219, -203431486, -2096723340, -1982075785, 204789101, -610194940, 327747882, -884711787, 553088303, -1416261578, 1710933088, 1669474979, -1969078847, 898931120, -1706473266, 1635284537, -291788725, -1764017670, -171870980, 227711295, -108710379, -391133908, -1464343038, -1429250851, -181344297, 1510699710, 92128504, 50846427, 1304895801, -1902861176, -460241866, 996040817, 1859023523, -1155545102, -748803260, -2068241401, -726859299, -1701060908, -163249670, -1271812795, 1742657951, -1859286234, 2127983536, 1899216979, -298747023, -1356305760, 1925824062, 744125769, 1012362235, 1472892874, 2037358892, 29441327, -1980914715, -454452580, -1335877902, -1825362067, 2059576464, 1054234348, 1482899028, -26196334, -1380255968, 1285924812, 674742496, 797163202, 923272232, 892521388, -1841562948, -556217870, -1907239376, -397826140, -469282376, 1843409754, 1944646800, -331793540, -1993631980, 239668546, 1664458496, -2077895748, 722399056, -2050557662, 826016328, 1324167180, -809118628, -1928134190, 1495244288, 410866004, -28823320, 1610715386, -443726128, 383086892, -444395276, 1061866898, 167774560, -1626093556, -1071742240, -849839518, -1142230360, 1238706764, -911155332, -625588942, 1534809712, -1898572988, -1028642856, -66529414, -730061264, 1939298236, 1065686612, 2025594946, 1568026784, 329586364, -164537904, 684700514, 481276648, 1362518220, 1847788028, 504799730, -1856173440, -1395835404, -143579512, -1047748806, 516043600, 805203052, 1667674516, -60550062, -1778187808, 1060048076, -123927392, -303405694, -487356184, -1182648596, 1680672060, 448765042, -1446021008, 1405169700, 281328696, 1005874970, 2047929552, 276922172, -767993964, -812661886, 1405364672, -1790484932, -756382320, 138108450, -1108712184, -1776558452, 258395932, 2083553426, 1691900288, 2146899476, -154398936, -1903637958, -1956274736, -1440126612, -937630796, 2075752466, -283687456, 1180628940, -576028448, -1177208798, 1664692520, 474844684, -722024644, -17419278, -1985606928, -318697916, 150409816, -817512646, -987884048, -1664231748, -1982695148, 1303909058, 1493427296, -1181961348, 1690159056, 1926476066, -1399244120, -1142301812, -138540868, -1914872014, -1481283008, -1568170828, -604974520, -475580998, -50757104, -1790532884, 558104916, 337010962, -1678504544, 122884812, -1577460128, -1814284350, 1098815272, -438628436, 400855868, -253630094, -1375429840, 1296964900, 20998968, 394645210, 467552144, -165646596, 208665492, -414773182, -1272343296, -1647664068, 349299024, -2019835742, -1873735352, -1031436532, 1878885084, -1959977646, -256961408, -2134060972, 359641064, 746907898, -1085318320, 1354768172, -1588393612, -1889105006, 1717803104, 642776460, -915727520, -1396377118, -872008792, -315689780, -930336772, 1245906354, 341562864, -1120760892, 632821080, 1336883578, 945398704, 1295710652, 1000974420, 1471170498, 639365152, 2091002044, -946716080, -2102795294, -2055765912, -400919476, -1152595716, -546141198, 1038649600, -1918373516, -252511224, -381833286, 753435088, -1808258068, 1766658452, -1191915054, -236895904, 108445516, -618571488, 813395842, 421109480, -1758850836, -1485122500, 197389170, 345226864, -1129163740, 2139638584, -331731814, 674345680, -449281860, 292425364, 924755586, 663910592, 2041721660, -1423852400, -891412958, 386695176, 1499315468, -1716462436, 2030665234, -1482727552, 120376852, -283874776, -524516038, 1714772432, -151874452, 1966774580, 1030695589, -474581182, 821265712, 2008470873, -1571531061, -677998788, 9766762, -527514209, 1316232233, -1046331714, -1770836052, 1910772989, -248393657, 1475424048, -1035782066, -53947269, 1303648221, 1040737802, -717882584, -1420425839, 676731779, 1841537156, 2013515442, 1389416967, 1230316113, -183666218, -838867788, 2045198533, 1149424143, -1097577848, -1239371866, -769284269, -109922123, -124578286, -2022063136, -186288567, 2086110331, 91891020, -1002041126, 1489289423, -1704174439, -851484498, -1509564996, 1684538925, 507060695, 439019552, -494629506, 75330379, -1806403251, -432720006, 519469496, -138474655, 1195510547, -735886540, -379862718, -1687513769, 138014881, -674817690, 1033227108, -614473067, -1129053249, 1469454168, -1588646538, 1523429251, 235255237, -1362654494, 1414755152, 1457016441, -1799351893, -2005571812, -803884982, 1869616191, -347417463, 1862951070, 951061836, -1473618659, -196740953, -75327536, 817823598, -665479653, 1715347325, -299096726, -982115320, 1786053809, 99197731, 1361530916, -1884101934, -176625881, -1801774735, 1622720438, 927200084, -216998427, 1683490799, -1392908504, -319627386, 303270835, -1485456619, 1921897842, -399414848, -62780887, -1008046437, -1841670292, -1854558342, 861960367, 127472569, -1647626802, -6676196, 335373453, -937285385, 2056856576, 347481694, 1974335787, -614299091, 402807450, -95451560, -1904678463, 1930991219, 1851544468, 188697122, -1855326921, -534776831, 1308260614, -1655730876, 2046308469, -971365921, 274369848, -815382762, 1860722467, -1055105819, 269805826, 797584240, -264158439, -1994009845, -2024579076, -1628316630, 1761939551, 1807325161, 569759998, 628361452, 1483672637, -25182201, -974750736, 1609897870, -974297669, 46343069, 1367480650, 1847882088, 700888913, -1830788029, 1190890820, 440724978, 1429350343, -1993135727, 317635862, 846865780, 1659462661, -1284586417, 861526088, 236834278, -567450861, -467929995, -686649774, -883906400, 597320073, 510570939, -2000490996, -339462246, 1833303823, -692075175, -1947338454
[10:30:55.959] Number of chunks: 1
[10:30:55.959] getGlobalsAndPackagesXApply() ...
[10:30:55.959]  - future.globals: TRUE
[10:30:55.960] getGlobalsAndPackages() ...
[10:30:55.960] Searching for globals...
[10:30:55.962] - globals found: [2] ‘FUN’, ‘sample’
[10:30:55.962] Searching for globals ... DONE
[10:30:55.962] Resolving globals: FALSE
[10:30:55.963] The total size of the 1 globals is 616 bytes (616 bytes)
[10:30:55.964] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[10:30:55.964] - globals: [1] ‘FUN’
[10:30:55.964] 
[10:30:55.964] getGlobalsAndPackages() ... DONE
[10:30:55.964]  - globals found/used: [n=1] ‘FUN’
[10:30:55.964]  - needed namespaces: [n=0] 
[10:30:55.965] Finding globals ... DONE
[10:30:55.965]  - use_args: TRUE
[10:30:55.965]  - Getting '...' globals ...
[10:30:55.966] resolve() on list ...
[10:30:55.966]  recursive: 0
[10:30:55.966]  length: 1
[10:30:55.966]  elements: ‘...’
[10:30:55.966]  length: 0 (resolved future 1)
[10:30:55.966] resolve() on list ... DONE
[10:30:55.966]    - '...' content: [n=0] 
[10:30:55.967] List of 1
[10:30:55.967]  $ ...: list()
[10:30:55.967]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:55.967]  - attr(*, "where")=List of 1
[10:30:55.967]   ..$ ...:<environment: 0x55aba1344868> 
[10:30:55.967]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:55.967]  - attr(*, "resolved")= logi TRUE
[10:30:55.967]  - attr(*, "total_size")= num NA
[10:30:55.971]  - Getting '...' globals ... DONE
[10:30:55.972] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:30:55.972] List of 2
[10:30:55.972]  $ ...future.FUN:function (...)  
[10:30:55.972]  $ ...          : list()
[10:30:55.972]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:55.972]  - attr(*, "where")=List of 2
[10:30:55.972]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:30:55.972]   ..$ ...          :<environment: 0x55aba1344868> 
[10:30:55.972]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:55.972]  - attr(*, "resolved")= logi FALSE
[10:30:55.972]  - attr(*, "total_size")= num 616
[10:30:55.974] Packages to be attached in all futures: [n=0] 
[10:30:55.974] getGlobalsAndPackagesXApply() ... DONE
[10:30:55.975] Number of futures (= number of chunks): 1
[10:30:55.975] Launching 1 futures (chunks) ...
[10:30:55.975] Chunk #1 of 1 ...
[10:30:55.975]  - Finding globals in 'X' for chunk #1 ...
[10:30:55.975] getGlobalsAndPackages() ...
[10:30:55.975] Searching for globals...
[10:30:55.976] 
[10:30:55.976] Searching for globals ... DONE
[10:30:55.976] - globals: [0] <none>
[10:30:55.976] getGlobalsAndPackages() ... DONE
[10:30:55.976]    + additional globals found: [n=0] 
[10:30:55.976]    + additional namespaces needed: [n=0] 
[10:30:55.976]  - Finding globals in 'X' for chunk #1 ... DONE
[10:30:55.976]  - seeds: [5] <seeds>
[10:30:55.977]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:55.977] getGlobalsAndPackages() ...
[10:30:55.977] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:55.977] Resolving globals: FALSE
[10:30:55.977] Tweak future expression to call with '...' arguments ...
[10:30:55.980] {
[10:30:55.980]     do.call(function(...) {
[10:30:55.980]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:55.980]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:55.980]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:55.980]             on.exit(options(oopts), add = TRUE)
[10:30:55.980]         }
[10:30:55.980]         {
[10:30:55.980]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:55.980]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:55.980]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:55.980]                   envir = globalenv(), inherits = FALSE)
[10:30:55.980]                 ...future.FUN(...future.X_jj, ...)
[10:30:55.980]             })
[10:30:55.980]         }
[10:30:55.980]     }, args = future.call.arguments)
[10:30:55.980] }
[10:30:55.980] Tweak future expression to call with '...' arguments ... DONE
[10:30:55.980] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:55.980] 
[10:30:55.980] getGlobalsAndPackages() ... DONE
[10:30:55.981] run() for ‘Future’ ...
[10:30:55.981] - state: ‘created’
[10:30:55.982] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:30:55.982] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:30:55.982] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:30:55.982]   - Field: ‘label’
[10:30:55.982]   - Field: ‘local’
[10:30:55.982]   - Field: ‘owner’
[10:30:55.983]   - Field: ‘envir’
[10:30:55.983]   - Field: ‘packages’
[10:30:55.983]   - Field: ‘gc’
[10:30:55.983]   - Field: ‘conditions’
[10:30:55.983]   - Field: ‘expr’
[10:30:55.983]   - Field: ‘uuid’
[10:30:55.983]   - Field: ‘seed’
[10:30:55.983]   - Field: ‘version’
[10:30:55.983]   - Field: ‘result’
[10:30:55.983]   - Field: ‘asynchronous’
[10:30:55.983]   - Field: ‘calls’
[10:30:55.984]   - Field: ‘globals’
[10:30:55.984]   - Field: ‘stdout’
[10:30:55.984]   - Field: ‘earlySignal’
[10:30:55.984]   - Field: ‘lazy’
[10:30:55.984]   - Field: ‘state’
[10:30:55.984] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:30:55.984] - Launch lazy future ...
[10:30:55.985] Packages needed by the future expression (n = 0): <none>
[10:30:55.985] Packages needed by future strategies (n = 0): <none>
[10:30:55.986] {
[10:30:55.986]     {
[10:30:55.986]         {
[10:30:55.986]             ...future.startTime <- base::Sys.time()
[10:30:55.986]             {
[10:30:55.986]                 {
[10:30:55.986]                   {
[10:30:55.986]                     base::local({
[10:30:55.986]                       has_future <- base::requireNamespace("future", 
[10:30:55.986]                         quietly = TRUE)
[10:30:55.986]                       if (has_future) {
[10:30:55.986]                         ns <- base::getNamespace("future")
[10:30:55.986]                         version <- ns[[".package"]][["version"]]
[10:30:55.986]                         if (is.null(version)) 
[10:30:55.986]                           version <- utils::packageVersion("future")
[10:30:55.986]                       }
[10:30:55.986]                       else {
[10:30:55.986]                         version <- NULL
[10:30:55.986]                       }
[10:30:55.986]                       if (!has_future || version < "1.8.0") {
[10:30:55.986]                         info <- base::c(r_version = base::gsub("R version ", 
[10:30:55.986]                           "", base::R.version$version.string), 
[10:30:55.986]                           platform = base::sprintf("%s (%s-bit)", 
[10:30:55.986]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:30:55.986]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:30:55.986]                             "release", "version")], collapse = " "), 
[10:30:55.986]                           hostname = base::Sys.info()[["nodename"]])
[10:30:55.986]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:30:55.986]                           info)
[10:30:55.986]                         info <- base::paste(info, collapse = "; ")
[10:30:55.986]                         if (!has_future) {
[10:30:55.986]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:30:55.986]                             info)
[10:30:55.986]                         }
[10:30:55.986]                         else {
[10:30:55.986]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:30:55.986]                             info, version)
[10:30:55.986]                         }
[10:30:55.986]                         base::stop(msg)
[10:30:55.986]                       }
[10:30:55.986]                     })
[10:30:55.986]                   }
[10:30:55.986]                   ...future.strategy.old <- future::plan("list")
[10:30:55.986]                   options(future.plan = NULL)
[10:30:55.986]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:30:55.986]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:30:55.986]                 }
[10:30:55.986]                 ...future.workdir <- getwd()
[10:30:55.986]             }
[10:30:55.986]             ...future.oldOptions <- base::as.list(base::.Options)
[10:30:55.986]             ...future.oldEnvVars <- base::Sys.getenv()
[10:30:55.986]         }
[10:30:55.986]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:30:55.986]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:30:55.986]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:30:55.986]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:30:55.986]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:30:55.986]             future.stdout.windows.reencode = NULL, width = 80L)
[10:30:55.986]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:30:55.986]             base::names(...future.oldOptions))
[10:30:55.986]     }
[10:30:55.986]     if (FALSE) {
[10:30:55.986]     }
[10:30:55.986]     else {
[10:30:55.986]         if (TRUE) {
[10:30:55.986]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:30:55.986]                 open = "w")
[10:30:55.986]         }
[10:30:55.986]         else {
[10:30:55.986]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:30:55.986]                 windows = "NUL", "/dev/null"), open = "w")
[10:30:55.986]         }
[10:30:55.986]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:30:55.986]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:30:55.986]             base::sink(type = "output", split = FALSE)
[10:30:55.986]             base::close(...future.stdout)
[10:30:55.986]         }, add = TRUE)
[10:30:55.986]     }
[10:30:55.986]     ...future.frame <- base::sys.nframe()
[10:30:55.986]     ...future.conditions <- base::list()
[10:30:55.986]     ...future.rng <- base::globalenv()$.Random.seed
[10:30:55.986]     if (FALSE) {
[10:30:55.986]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:30:55.986]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:30:55.986]     }
[10:30:55.986]     ...future.result <- base::tryCatch({
[10:30:55.986]         base::withCallingHandlers({
[10:30:55.986]             ...future.value <- base::withVisible(base::local({
[10:30:55.986]                 do.call(function(...) {
[10:30:55.986]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:55.986]                   if (!identical(...future.globals.maxSize.org, 
[10:30:55.986]                     ...future.globals.maxSize)) {
[10:30:55.986]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:55.986]                     on.exit(options(oopts), add = TRUE)
[10:30:55.986]                   }
[10:30:55.986]                   {
[10:30:55.986]                     lapply(seq_along(...future.elements_ii), 
[10:30:55.986]                       FUN = function(jj) {
[10:30:55.986]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:55.986]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:55.986]                           envir = globalenv(), inherits = FALSE)
[10:30:55.986]                         ...future.FUN(...future.X_jj, ...)
[10:30:55.986]                       })
[10:30:55.986]                   }
[10:30:55.986]                 }, args = future.call.arguments)
[10:30:55.986]             }))
[10:30:55.986]             future::FutureResult(value = ...future.value$value, 
[10:30:55.986]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:55.986]                   ...future.rng), globalenv = if (FALSE) 
[10:30:55.986]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:30:55.986]                     ...future.globalenv.names))
[10:30:55.986]                 else NULL, started = ...future.startTime, version = "1.8")
[10:30:55.986]         }, condition = base::local({
[10:30:55.986]             c <- base::c
[10:30:55.986]             inherits <- base::inherits
[10:30:55.986]             invokeRestart <- base::invokeRestart
[10:30:55.986]             length <- base::length
[10:30:55.986]             list <- base::list
[10:30:55.986]             seq.int <- base::seq.int
[10:30:55.986]             signalCondition <- base::signalCondition
[10:30:55.986]             sys.calls <- base::sys.calls
[10:30:55.986]             `[[` <- base::`[[`
[10:30:55.986]             `+` <- base::`+`
[10:30:55.986]             `<<-` <- base::`<<-`
[10:30:55.986]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:30:55.986]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:30:55.986]                   3L)]
[10:30:55.986]             }
[10:30:55.986]             function(cond) {
[10:30:55.986]                 is_error <- inherits(cond, "error")
[10:30:55.986]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:30:55.986]                   NULL)
[10:30:55.986]                 if (is_error) {
[10:30:55.986]                   sessionInformation <- function() {
[10:30:55.986]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:30:55.986]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:30:55.986]                       search = base::search(), system = base::Sys.info())
[10:30:55.986]                   }
[10:30:55.986]                   ...future.conditions[[length(...future.conditions) + 
[10:30:55.986]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:30:55.986]                     cond$call), session = sessionInformation(), 
[10:30:55.986]                     timestamp = base::Sys.time(), signaled = 0L)
[10:30:55.986]                   signalCondition(cond)
[10:30:55.986]                 }
[10:30:55.986]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:30:55.986]                 "immediateCondition"))) {
[10:30:55.986]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:30:55.986]                   ...future.conditions[[length(...future.conditions) + 
[10:30:55.986]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:30:55.986]                   if (TRUE && !signal) {
[10:30:55.986]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:55.986]                     {
[10:30:55.986]                       inherits <- base::inherits
[10:30:55.986]                       invokeRestart <- base::invokeRestart
[10:30:55.986]                       is.null <- base::is.null
[10:30:55.986]                       muffled <- FALSE
[10:30:55.986]                       if (inherits(cond, "message")) {
[10:30:55.986]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:55.986]                         if (muffled) 
[10:30:55.986]                           invokeRestart("muffleMessage")
[10:30:55.986]                       }
[10:30:55.986]                       else if (inherits(cond, "warning")) {
[10:30:55.986]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:55.986]                         if (muffled) 
[10:30:55.986]                           invokeRestart("muffleWarning")
[10:30:55.986]                       }
[10:30:55.986]                       else if (inherits(cond, "condition")) {
[10:30:55.986]                         if (!is.null(pattern)) {
[10:30:55.986]                           computeRestarts <- base::computeRestarts
[10:30:55.986]                           grepl <- base::grepl
[10:30:55.986]                           restarts <- computeRestarts(cond)
[10:30:55.986]                           for (restart in restarts) {
[10:30:55.986]                             name <- restart$name
[10:30:55.986]                             if (is.null(name)) 
[10:30:55.986]                               next
[10:30:55.986]                             if (!grepl(pattern, name)) 
[10:30:55.986]                               next
[10:30:55.986]                             invokeRestart(restart)
[10:30:55.986]                             muffled <- TRUE
[10:30:55.986]                             break
[10:30:55.986]                           }
[10:30:55.986]                         }
[10:30:55.986]                       }
[10:30:55.986]                       invisible(muffled)
[10:30:55.986]                     }
[10:30:55.986]                     muffleCondition(cond, pattern = "^muffle")
[10:30:55.986]                   }
[10:30:55.986]                 }
[10:30:55.986]                 else {
[10:30:55.986]                   if (TRUE) {
[10:30:55.986]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:55.986]                     {
[10:30:55.986]                       inherits <- base::inherits
[10:30:55.986]                       invokeRestart <- base::invokeRestart
[10:30:55.986]                       is.null <- base::is.null
[10:30:55.986]                       muffled <- FALSE
[10:30:55.986]                       if (inherits(cond, "message")) {
[10:30:55.986]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:55.986]                         if (muffled) 
[10:30:55.986]                           invokeRestart("muffleMessage")
[10:30:55.986]                       }
[10:30:55.986]                       else if (inherits(cond, "warning")) {
[10:30:55.986]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:55.986]                         if (muffled) 
[10:30:55.986]                           invokeRestart("muffleWarning")
[10:30:55.986]                       }
[10:30:55.986]                       else if (inherits(cond, "condition")) {
[10:30:55.986]                         if (!is.null(pattern)) {
[10:30:55.986]                           computeRestarts <- base::computeRestarts
[10:30:55.986]                           grepl <- base::grepl
[10:30:55.986]                           restarts <- computeRestarts(cond)
[10:30:55.986]                           for (restart in restarts) {
[10:30:55.986]                             name <- restart$name
[10:30:55.986]                             if (is.null(name)) 
[10:30:55.986]                               next
[10:30:55.986]                             if (!grepl(pattern, name)) 
[10:30:55.986]                               next
[10:30:55.986]                             invokeRestart(restart)
[10:30:55.986]                             muffled <- TRUE
[10:30:55.986]                             break
[10:30:55.986]                           }
[10:30:55.986]                         }
[10:30:55.986]                       }
[10:30:55.986]                       invisible(muffled)
[10:30:55.986]                     }
[10:30:55.986]                     muffleCondition(cond, pattern = "^muffle")
[10:30:55.986]                   }
[10:30:55.986]                 }
[10:30:55.986]             }
[10:30:55.986]         }))
[10:30:55.986]     }, error = function(ex) {
[10:30:55.986]         base::structure(base::list(value = NULL, visible = NULL, 
[10:30:55.986]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:55.986]                 ...future.rng), started = ...future.startTime, 
[10:30:55.986]             finished = Sys.time(), session_uuid = NA_character_, 
[10:30:55.986]             version = "1.8"), class = "FutureResult")
[10:30:55.986]     }, finally = {
[10:30:55.986]         if (!identical(...future.workdir, getwd())) 
[10:30:55.986]             setwd(...future.workdir)
[10:30:55.986]         {
[10:30:55.986]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:30:55.986]                 ...future.oldOptions$nwarnings <- NULL
[10:30:55.986]             }
[10:30:55.986]             base::options(...future.oldOptions)
[10:30:55.986]             if (.Platform$OS.type == "windows") {
[10:30:55.986]                 old_names <- names(...future.oldEnvVars)
[10:30:55.986]                 envs <- base::Sys.getenv()
[10:30:55.986]                 names <- names(envs)
[10:30:55.986]                 common <- intersect(names, old_names)
[10:30:55.986]                 added <- setdiff(names, old_names)
[10:30:55.986]                 removed <- setdiff(old_names, names)
[10:30:55.986]                 changed <- common[...future.oldEnvVars[common] != 
[10:30:55.986]                   envs[common]]
[10:30:55.986]                 NAMES <- toupper(changed)
[10:30:55.986]                 args <- list()
[10:30:55.986]                 for (kk in seq_along(NAMES)) {
[10:30:55.986]                   name <- changed[[kk]]
[10:30:55.986]                   NAME <- NAMES[[kk]]
[10:30:55.986]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:55.986]                     next
[10:30:55.986]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:55.986]                 }
[10:30:55.986]                 NAMES <- toupper(added)
[10:30:55.986]                 for (kk in seq_along(NAMES)) {
[10:30:55.986]                   name <- added[[kk]]
[10:30:55.986]                   NAME <- NAMES[[kk]]
[10:30:55.986]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:55.986]                     next
[10:30:55.986]                   args[[name]] <- ""
[10:30:55.986]                 }
[10:30:55.986]                 NAMES <- toupper(removed)
[10:30:55.986]                 for (kk in seq_along(NAMES)) {
[10:30:55.986]                   name <- removed[[kk]]
[10:30:55.986]                   NAME <- NAMES[[kk]]
[10:30:55.986]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:55.986]                     next
[10:30:55.986]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:55.986]                 }
[10:30:55.986]                 if (length(args) > 0) 
[10:30:55.986]                   base::do.call(base::Sys.setenv, args = args)
[10:30:55.986]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:30:55.986]             }
[10:30:55.986]             else {
[10:30:55.986]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:30:55.986]             }
[10:30:55.986]             {
[10:30:55.986]                 if (base::length(...future.futureOptionsAdded) > 
[10:30:55.986]                   0L) {
[10:30:55.986]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:30:55.986]                   base::names(opts) <- ...future.futureOptionsAdded
[10:30:55.986]                   base::options(opts)
[10:30:55.986]                 }
[10:30:55.986]                 {
[10:30:55.986]                   {
[10:30:55.986]                     base::assign(".Random.seed", c(10403L, 14L, 
[10:30:55.986]                     -846849076L, 31706914L, -1310584451L, -985965961L, 
[10:30:55.986]                     1546683294L, 1437864536L, -540697669L, 1743482201L, 
[10:30:55.986]                     -1941182744L, 1856575254L, 1770813585L, -444836541L, 
[10:30:55.986]                     741216338L, -836332828L, 1594754343L, 1438367101L, 
[10:30:55.986]                     -11561868L, -1214153126L, 1237019301L, 1176113343L, 
[10:30:55.986]                     -1154682042L, -465624624L, -196492301L, -253109487L, 
[10:30:55.986]                     -174503104L, 490058526L, 819444713L, -1923821285L, 
[10:30:55.986]                     -1343075542L, 2124991564L, 1751221263L, 1860054853L, 
[10:30:55.986]                     959301884L, 1194669906L, 1176598733L, 2146642055L, 
[10:30:55.986]                     -107267218L, -2021249720L, 1759983947L, -900207447L, 
[10:30:55.986]                     1779256824L, 320607526L, 2054309441L, -1420767277L, 
[10:30:55.986]                     -1208466046L, -711038540L, 427832631L, -1244790739L, 
[10:30:55.986]                     1240747332L, 831801962L, -1001036587L, 1399640687L, 
[10:30:55.986]                     -524961930L, 741677216L, 706171235L, 385614337L, 
[10:30:55.986]                     -1519578768L, 1227223310L, -520150151L, 1830087435L, 
[10:30:55.986]                     164107322L, -683117764L, 1408346239L, -286864427L, 
[10:30:55.986]                     -189815316L, 1588078402L, -713586531L, -248655593L, 
[10:30:55.986]                     660064382L, 39444536L, 246257435L, -1597074311L, 
[10:30:55.986]                     1663155400L, -46215946L, -1560007375L, 885198179L, 
[10:30:55.986]                     1860751154L, 90744964L, -756853561L, 1064818589L, 
[10:30:55.986]                     -445070572L, 839791034L, 1232422917L, -1296425505L, 
[10:30:55.986]                     -737783706L, -1419812880L, 2029975827L, 2029487793L, 
[10:30:55.986]                     2004431200L, -1791940866L, -1508457847L, 
[10:30:55.986]                     1403411899L, -538720374L, 1422249580L, 1793708015L, 
[10:30:55.986]                     -1432074203L, 1848895708L, -940912974L, 1812324781L, 
[10:30:55.986]                     2076165479L, 1818645134L, 1325284200L, 1533936491L, 
[10:30:55.986]                     -241050359L, -1604832360L, 1802404550L, 914294817L, 
[10:30:55.986]                     -955999053L, 970137122L, -1811972076L, -56777577L, 
[10:30:55.986]                     -660894067L, 188596132L, -995819126L, 650305013L, 
[10:30:55.986]                     1396043855L, -827865258L, -1374519808L, -174018749L, 
[10:30:55.986]                     521479905L, 552526928L, -433886034L, 863361113L, 
[10:30:55.986]                     -1404250005L, 847003098L, -707942756L, 1198848159L, 
[10:30:55.986]                     -1932168459L, 914370444L, -132972958L, -1987845571L, 
[10:30:55.986]                     1776987319L, 1165734750L, 934057624L, 1113085435L, 
[10:30:55.986]                     -552122471L, -611405784L, -1065584426L, -783680175L, 
[10:30:55.986]                     -1842017277L, 1855935378L, 1040007460L, -1358661657L, 
[10:30:55.986]                     1319603261L, -1570063692L, -493102822L, -1880507803L, 
[10:30:55.986]                     -1868304641L, 254653318L, -472197872L, -1211331149L, 
[10:30:55.986]                     -59298223L, 982060544L, -2078586146L, -578467543L, 
[10:30:55.986]                     -1319938853L, 599946218L, -671374452L, -1874418481L, 
[10:30:55.986]                     1426279557L, 1061144380L, 2096395794L, 14013709L, 
[10:30:55.986]                     -44990905L, -78937042L, 87091592L, 1688768651L, 
[10:30:55.986]                     -13604247L, 1827518008L, -1260859674L, 349055617L, 
[10:30:55.986]                     938227219L, -203431486L, -2096723340L, -1982075785L, 
[10:30:55.986]                     204789101L, -610194940L, 327747882L, -884711787L, 
[10:30:55.986]                     553088303L, -1416261578L, 1710933088L, 1669474979L, 
[10:30:55.986]                     -1969078847L, 898931120L, -1706473266L, 1635284537L, 
[10:30:55.986]                     -291788725L, -1764017670L, -171870980L, 227711295L, 
[10:30:55.986]                     -108710379L, -391133908L, -1464343038L, -1429250851L, 
[10:30:55.986]                     -181344297L, 1510699710L, 92128504L, 50846427L, 
[10:30:55.986]                     1304895801L, -1902861176L, -460241866L, 996040817L, 
[10:30:55.986]                     1859023523L, -1155545102L, -748803260L, -2068241401L, 
[10:30:55.986]                     -726859299L, -1701060908L, -163249670L, -1271812795L, 
[10:30:55.986]                     1742657951L, -1859286234L, 2127983536L, 1899216979L, 
[10:30:55.986]                     -298747023L, -1356305760L, 1925824062L, 744125769L, 
[10:30:55.986]                     1012362235L, 1472892874L, 2037358892L, 29441327L, 
[10:30:55.986]                     -1980914715L, -454452580L, -1335877902L, 
[10:30:55.986]                     -1825362067L, 2059576464L, 1054234348L, 1482899028L, 
[10:30:55.986]                     -26196334L, -1380255968L, 1285924812L, 674742496L, 
[10:30:55.986]                     797163202L, 923272232L, 892521388L, -1841562948L, 
[10:30:55.986]                     -556217870L, -1907239376L, -397826140L, -469282376L, 
[10:30:55.986]                     1843409754L, 1944646800L, -331793540L, -1993631980L, 
[10:30:55.986]                     239668546L, 1664458496L, -2077895748L, 722399056L, 
[10:30:55.986]                     -2050557662L, 826016328L, 1324167180L, -809118628L, 
[10:30:55.986]                     -1928134190L, 1495244288L, 410866004L, -28823320L, 
[10:30:55.986]                     1610715386L, -443726128L, 383086892L, -444395276L, 
[10:30:55.986]                     1061866898L, 167774560L, -1626093556L, -1071742240L, 
[10:30:55.986]                     -849839518L, -1142230360L, 1238706764L, -911155332L, 
[10:30:55.986]                     -625588942L, 1534809712L, -1898572988L, -1028642856L, 
[10:30:55.986]                     -66529414L, -730061264L, 1939298236L, 1065686612L, 
[10:30:55.986]                     2025594946L, 1568026784L, 329586364L, -164537904L, 
[10:30:55.986]                     684700514L, 481276648L, 1362518220L, 1847788028L, 
[10:30:55.986]                     504799730L, -1856173440L, -1395835404L, -143579512L, 
[10:30:55.986]                     -1047748806L, 516043600L, 805203052L, 1667674516L, 
[10:30:55.986]                     -60550062L, -1778187808L, 1060048076L, -123927392L, 
[10:30:55.986]                     -303405694L, -487356184L, -1182648596L, 1680672060L, 
[10:30:55.986]                     448765042L, -1446021008L, 1405169700L, 281328696L, 
[10:30:55.986]                     1005874970L, 2047929552L, 276922172L, -767993964L, 
[10:30:55.986]                     -812661886L, 1405364672L, -1790484932L, -756382320L, 
[10:30:55.986]                     138108450L, -1108712184L, -1776558452L, 258395932L, 
[10:30:55.986]                     2083553426L, 1691900288L, 2146899476L, -154398936L, 
[10:30:55.986]                     -1903637958L, -1956274736L, -1440126612L, 
[10:30:55.986]                     -937630796L, 2075752466L, -283687456L, 1180628940L, 
[10:30:55.986]                     -576028448L, -1177208798L, 1664692520L, 474844684L, 
[10:30:55.986]                     -722024644L, -17419278L, -1985606928L, -318697916L, 
[10:30:55.986]                     150409816L, -817512646L, -987884048L, -1664231748L, 
[10:30:55.986]                     -1982695148L, 1303909058L, 1493427296L, -1181961348L, 
[10:30:55.986]                     1690159056L, 1926476066L, -1399244120L, -1142301812L, 
[10:30:55.986]                     -138540868L, -1914872014L, -1481283008L, 
[10:30:55.986]                     -1568170828L, -604974520L, -475580998L, -50757104L, 
[10:30:55.986]                     -1790532884L, 558104916L, 337010962L, -1678504544L, 
[10:30:55.986]                     122884812L, -1577460128L, -1814284350L, 1098815272L, 
[10:30:55.986]                     -438628436L, 400855868L, -253630094L, -1375429840L, 
[10:30:55.986]                     1296964900L, 20998968L, 394645210L, 467552144L, 
[10:30:55.986]                     -165646596L, 208665492L, -414773182L, -1272343296L, 
[10:30:55.986]                     -1647664068L, 349299024L, -2019835742L, -1873735352L, 
[10:30:55.986]                     -1031436532L, 1878885084L, -1959977646L, 
[10:30:55.986]                     -256961408L, -2134060972L, 359641064L, 746907898L, 
[10:30:55.986]                     -1085318320L, 1354768172L, -1588393612L, 
[10:30:55.986]                     -1889105006L, 1717803104L, 642776460L, -915727520L, 
[10:30:55.986]                     -1396377118L, -872008792L, -315689780L, -930336772L, 
[10:30:55.986]                     1245906354L, 341562864L, -1120760892L, 632821080L, 
[10:30:55.986]                     1336883578L, 945398704L, 1295710652L, 1000974420L, 
[10:30:55.986]                     1471170498L, 639365152L, 2091002044L, -946716080L, 
[10:30:55.986]                     -2102795294L, -2055765912L, -400919476L, 
[10:30:55.986]                     -1152595716L, -546141198L, 1038649600L, -1918373516L, 
[10:30:55.986]                     -252511224L, -381833286L, 753435088L, -1808258068L, 
[10:30:55.986]                     1766658452L, -1191915054L, -236895904L, 108445516L, 
[10:30:55.986]                     -618571488L, 813395842L, 421109480L, -1758850836L, 
[10:30:55.986]                     -1485122500L, 197389170L, 345226864L, -1129163740L, 
[10:30:55.986]                     2139638584L, -331731814L, 674345680L, -449281860L, 
[10:30:55.986]                     292425364L, 924755586L, 663910592L, 2041721660L, 
[10:30:55.986]                     -1423852400L, -891412958L, 386695176L, 1499315468L, 
[10:30:55.986]                     -1716462436L, 2030665234L, -1482727552L, 
[10:30:55.986]                     120376852L, -283874776L, -524516038L, 1714772432L, 
[10:30:55.986]                     -151874452L, 1966774580L, 1030695589L, -474581182L, 
[10:30:55.986]                     821265712L, 2008470873L, -1571531061L, -677998788L, 
[10:30:55.986]                     9766762L, -527514209L, 1316232233L, -1046331714L, 
[10:30:55.986]                     -1770836052L, 1910772989L, -248393657L, 1475424048L, 
[10:30:55.986]                     -1035782066L, -53947269L, 1303648221L, 1040737802L, 
[10:30:55.986]                     -717882584L, -1420425839L, 676731779L, 1841537156L, 
[10:30:55.986]                     2013515442L, 1389416967L, 1230316113L, -183666218L, 
[10:30:55.986]                     -838867788L, 2045198533L, 1149424143L, -1097577848L, 
[10:30:55.986]                     -1239371866L, -769284269L, -109922123L, -124578286L, 
[10:30:55.986]                     -2022063136L, -186288567L, 2086110331L, 91891020L, 
[10:30:55.986]                     -1002041126L, 1489289423L, -1704174439L, 
[10:30:55.986]                     -851484498L, -1509564996L, 1684538925L, 507060695L, 
[10:30:55.986]                     439019552L, -494629506L, 75330379L, -1806403251L, 
[10:30:55.986]                     -432720006L, 519469496L, -138474655L, 1195510547L, 
[10:30:55.986]                     -735886540L, -379862718L, -1687513769L, 138014881L, 
[10:30:55.986]                     -674817690L, 1033227108L, -614473067L, -1129053249L, 
[10:30:55.986]                     1469454168L, -1588646538L, 1523429251L, 235255237L, 
[10:30:55.986]                     -1362654494L, 1414755152L, 1457016441L, -1799351893L, 
[10:30:55.986]                     -2005571812L, -803884982L, 1869616191L, -347417463L, 
[10:30:55.986]                     1862951070L, 951061836L, -1473618659L, -196740953L, 
[10:30:55.986]                     -75327536L, 817823598L, -665479653L, 1715347325L, 
[10:30:55.986]                     -299096726L, -982115320L, 1786053809L, 99197731L, 
[10:30:55.986]                     1361530916L, -1884101934L, -176625881L, -1801774735L, 
[10:30:55.986]                     1622720438L, 927200084L, -216998427L, 1683490799L, 
[10:30:55.986]                     -1392908504L, -319627386L, 303270835L, -1485456619L, 
[10:30:55.986]                     1921897842L, -399414848L, -62780887L, -1008046437L, 
[10:30:55.986]                     -1841670292L, -1854558342L, 861960367L, 127472569L, 
[10:30:55.986]                     -1647626802L, -6676196L, 335373453L, -937285385L, 
[10:30:55.986]                     2056856576L, 347481694L, 1974335787L, -614299091L, 
[10:30:55.986]                     402807450L, -95451560L, -1904678463L, 1930991219L, 
[10:30:55.986]                     1851544468L, 188697122L, -1855326921L, -534776831L, 
[10:30:55.986]                     1308260614L, -1655730876L, 2046308469L, -971365921L, 
[10:30:55.986]                     274369848L, -815382762L, 1860722467L, -1055105819L, 
[10:30:55.986]                     269805826L, 797584240L, -264158439L, -1994009845L, 
[10:30:55.986]                     -2024579076L, -1628316630L, 1761939551L, 
[10:30:55.986]                     1807325161L, 569759998L, 628361452L, 1483672637L, 
[10:30:55.986]                     -25182201L, -974750736L, 1609897870L, -974297669L, 
[10:30:55.986]                     46343069L, 1367480650L, 1847882088L, 700888913L, 
[10:30:55.986]                     -1830788029L, 1190890820L, 440724978L, 1429350343L, 
[10:30:55.986]                     -1993135727L, 317635862L, 846865780L, 1659462661L, 
[10:30:55.986]                     -1284586417L, 861526088L, 236834278L, -567450861L, 
[10:30:55.986]                     -467929995L, -686649774L, -883906400L, 597320073L, 
[10:30:55.986]                     510570939L, -2000490996L, -339462246L, 1833303823L, 
[10:30:55.986]                     -692075175L, -1947338454L), envir = base::globalenv(), 
[10:30:55.986]                       inherits = FALSE)
[10:30:55.986]                     NULL
[10:30:55.986]                   }
[10:30:55.986]                   options(future.plan = NULL)
[10:30:55.986]                   if (is.na(NA_character_)) 
[10:30:55.986]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:30:55.986]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:30:55.986]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:30:55.986]                     .init = FALSE)
[10:30:55.986]                 }
[10:30:55.986]             }
[10:30:55.986]         }
[10:30:55.986]     })
[10:30:55.986]     if (TRUE) {
[10:30:55.986]         base::sink(type = "output", split = FALSE)
[10:30:55.986]         if (TRUE) {
[10:30:55.986]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:30:55.986]         }
[10:30:55.986]         else {
[10:30:55.986]             ...future.result["stdout"] <- base::list(NULL)
[10:30:55.986]         }
[10:30:55.986]         base::close(...future.stdout)
[10:30:55.986]         ...future.stdout <- NULL
[10:30:55.986]     }
[10:30:55.986]     ...future.result$conditions <- ...future.conditions
[10:30:55.986]     ...future.result$finished <- base::Sys.time()
[10:30:55.986]     ...future.result
[10:30:55.986] }
[10:30:55.989] assign_globals() ...
[10:30:55.989] List of 5
[10:30:55.989]  $ ...future.FUN            :function (...)  
[10:30:55.989]  $ future.call.arguments    : list()
[10:30:55.989]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:55.989]  $ ...future.elements_ii    :List of 5
[10:30:55.989]   ..$ : int 0
[10:30:55.989]   ..$ : int 0
[10:30:55.989]   ..$ : int 0
[10:30:55.989]   ..$ : int 0
[10:30:55.989]   ..$ : int 0
[10:30:55.989]  $ ...future.seeds_ii       :List of 5
[10:30:55.989]   ..$ : int [1:7] 10407 -842755301 -617324534 -95387564 -778923391 -1639309189 478869087
[10:30:55.989]   ..$ : int [1:7] 10407 -1389420816 -2013086206 1406396574 -163001507 1380534491 -782049712
[10:30:55.989]   ..$ : int [1:7] 10407 2124493798 -1593818405 586033345 1785873761 1750645546 -473426191
[10:30:55.989]   ..$ : int [1:7] 10407 -453001412 -1987879141 1029530298 167564807 2140584429 1400917673
[10:30:55.989]   ..$ : int [1:7] 10407 2099234795 -1669659773 -826633638 2067619461 1196397441 -1731047635
[10:30:55.989]  $ ...future.globals.maxSize: NULL
[10:30:55.989]  - attr(*, "where")=List of 5
[10:30:55.989]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:30:55.989]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:30:55.989]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:30:55.989]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:30:55.989]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:30:55.989]  - attr(*, "resolved")= logi FALSE
[10:30:55.989]  - attr(*, "total_size")= num 616
[10:30:55.989]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:55.989]  - attr(*, "already-done")= logi TRUE
[10:30:55.996] - reassign environment for ‘...future.FUN’
[10:30:55.996] - copied ‘...future.FUN’ to environment
[10:30:55.996] - copied ‘future.call.arguments’ to environment
[10:30:55.996] - copied ‘...future.elements_ii’ to environment
[10:30:55.997] - copied ‘...future.seeds_ii’ to environment
[10:30:55.997] - copied ‘...future.globals.maxSize’ to environment
[10:30:55.997] assign_globals() ... done
[10:30:55.997] plan(): Setting new future strategy stack:
[10:30:55.997] List of future strategies:
[10:30:55.997] 1. sequential:
[10:30:55.997]    - args: function (..., envir = parent.frame())
[10:30:55.997]    - tweaked: FALSE
[10:30:55.997]    - call: NULL
[10:30:55.998] plan(): nbrOfWorkers() = 1
[10:30:55.999] plan(): Setting new future strategy stack:
[10:30:55.999] List of future strategies:
[10:30:55.999] 1. sequential:
[10:30:55.999]    - args: function (..., envir = parent.frame())
[10:30:55.999]    - tweaked: FALSE
[10:30:55.999]    - call: plan(strategy)
[10:30:55.999] plan(): nbrOfWorkers() = 1
[10:30:55.999] SequentialFuture started (and completed)
[10:30:56.000] - Launch lazy future ... done
[10:30:56.000] run() for ‘SequentialFuture’ ... done
[10:30:56.000] Created future:
[10:30:56.000] SequentialFuture:
[10:30:56.000] Label: ‘future_replicate-1’
[10:30:56.000] Expression:
[10:30:56.000] {
[10:30:56.000]     do.call(function(...) {
[10:30:56.000]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.000]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:56.000]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.000]             on.exit(options(oopts), add = TRUE)
[10:30:56.000]         }
[10:30:56.000]         {
[10:30:56.000]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:56.000]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.000]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.000]                   envir = globalenv(), inherits = FALSE)
[10:30:56.000]                 ...future.FUN(...future.X_jj, ...)
[10:30:56.000]             })
[10:30:56.000]         }
[10:30:56.000]     }, args = future.call.arguments)
[10:30:56.000] }
[10:30:56.000] Lazy evaluation: FALSE
[10:30:56.000] Asynchronous evaluation: FALSE
[10:30:56.000] Local evaluation: TRUE
[10:30:56.000] Environment: R_GlobalEnv
[10:30:56.000] Capture standard output: TRUE
[10:30:56.000] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:30:56.000] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:30:56.000] Packages: <none>
[10:30:56.000] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:30:56.000] Resolved: TRUE
[10:30:56.000] Value: 280 bytes of class ‘list’
[10:30:56.000] Early signaling: FALSE
[10:30:56.000] Owner process: 7cdcbd4b-6c47-ca9a-dc3f-e18236d134b8
[10:30:56.000] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:30:56.002] Chunk #1 of 1 ... DONE
[10:30:56.002] Launching 1 futures (chunks) ... DONE
[10:30:56.002] Resolving 1 futures (chunks) ...
[10:30:56.002] resolve() on list ...
[10:30:56.002]  recursive: 0
[10:30:56.002]  length: 1
[10:30:56.003] 
[10:30:56.003] resolved() for ‘SequentialFuture’ ...
[10:30:56.003] - state: ‘finished’
[10:30:56.003] - run: TRUE
[10:30:56.003] - result: ‘FutureResult’
[10:30:56.003] resolved() for ‘SequentialFuture’ ... done
[10:30:56.003] Future #1
[10:30:56.004] signalConditionsASAP(SequentialFuture, pos=1) ...
[10:30:56.004] - nx: 1
[10:30:56.004] - relay: TRUE
[10:30:56.004] - stdout: TRUE
[10:30:56.004] - signal: TRUE
[10:30:56.004] - resignal: FALSE
[10:30:56.004] - force: TRUE
[10:30:56.004] - relayed: [n=1] FALSE
[10:30:56.004] - queued futures: [n=1] FALSE
[10:30:56.004]  - until=1
[10:30:56.005]  - relaying element #1
[10:30:56.005] - relayed: [n=1] TRUE
[10:30:56.005] - queued futures: [n=1] TRUE
[10:30:56.005] signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:30:56.005]  length: 0 (resolved future 1)
[10:30:56.005] Relaying remaining futures
[10:30:56.005] signalConditionsASAP(NULL, pos=0) ...
[10:30:56.005] - nx: 1
[10:30:56.006] - relay: TRUE
[10:30:56.006] - stdout: TRUE
[10:30:56.006] - signal: TRUE
[10:30:56.006] - resignal: FALSE
[10:30:56.006] - force: TRUE
[10:30:56.006] - relayed: [n=1] TRUE
[10:30:56.006] - queued futures: [n=1] TRUE
 - flush all
[10:30:56.006] - relayed: [n=1] TRUE
[10:30:56.006] - queued futures: [n=1] TRUE
[10:30:56.006] signalConditionsASAP(NULL, pos=0) ... done
[10:30:56.006] resolve() on list ... DONE
[10:30:56.007]  - Number of value chunks collected: 1
[10:30:56.007] Resolving 1 futures (chunks) ... DONE
[10:30:56.007] Reducing values from 1 chunks ...
[10:30:56.007]  - Number of values collected after concatenation: 5
[10:30:56.007]  - Number of values expected: 5
[10:30:56.007] Reducing values from 1 chunks ... DONE
[10:30:56.007] future_lapply() ... DONE
[10:30:56.007] future_lapply() ...
[10:30:56.008] Generating random seeds ...
[10:30:56.008] Generating random seed streams for 5 elements ...
[10:30:56.008] Generating random seed streams for 5 elements ... DONE
[10:30:56.008] Generating random seeds ... DONE
[10:30:56.008] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:30:56.009] Number of chunks: 1
[10:30:56.009] getGlobalsAndPackagesXApply() ...
[10:30:56.009]  - future.globals: TRUE
[10:30:56.009] getGlobalsAndPackages() ...
[10:30:56.009] Searching for globals...
[10:30:56.012] - globals found: [2] ‘FUN’, ‘sample’
[10:30:56.012] Searching for globals ... DONE
[10:30:56.012] Resolving globals: FALSE
[10:30:56.013] The total size of the 1 globals is 616 bytes (616 bytes)
[10:30:56.013] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[10:30:56.013] - globals: [1] ‘FUN’
[10:30:56.013] 
[10:30:56.013] getGlobalsAndPackages() ... DONE
[10:30:56.014]  - globals found/used: [n=1] ‘FUN’
[10:30:56.014]  - needed namespaces: [n=0] 
[10:30:56.014] Finding globals ... DONE
[10:30:56.014]  - use_args: TRUE
[10:30:56.014]  - Getting '...' globals ...
[10:30:56.014] resolve() on list ...
[10:30:56.014]  recursive: 0
[10:30:56.014]  length: 1
[10:30:56.015]  elements: ‘...’
[10:30:56.015]  length: 0 (resolved future 1)
[10:30:56.015] resolve() on list ... DONE
[10:30:56.015]    - '...' content: [n=0] 
[10:30:56.015] List of 1
[10:30:56.015]  $ ...: list()
[10:30:56.015]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:56.015]  - attr(*, "where")=List of 1
[10:30:56.015]   ..$ ...:<environment: 0x55aba331c9c0> 
[10:30:56.015]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:56.015]  - attr(*, "resolved")= logi TRUE
[10:30:56.015]  - attr(*, "total_size")= num NA
[10:30:56.017]  - Getting '...' globals ... DONE
[10:30:56.018] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:30:56.018] List of 2
[10:30:56.018]  $ ...future.FUN:function (...)  
[10:30:56.018]  $ ...          : list()
[10:30:56.018]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:56.018]  - attr(*, "where")=List of 2
[10:30:56.018]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:30:56.018]   ..$ ...          :<environment: 0x55aba331c9c0> 
[10:30:56.018]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:56.018]  - attr(*, "resolved")= logi FALSE
[10:30:56.018]  - attr(*, "total_size")= num 616
[10:30:56.020] Packages to be attached in all futures: [n=0] 
[10:30:56.020] getGlobalsAndPackagesXApply() ... DONE
[10:30:56.021] Number of futures (= number of chunks): 1
[10:30:56.021] Launching 1 futures (chunks) ...
[10:30:56.021] Chunk #1 of 1 ...
[10:30:56.021]  - Finding globals in 'X' for chunk #1 ...
[10:30:56.021] getGlobalsAndPackages() ...
[10:30:56.021] Searching for globals...
[10:30:56.021] 
[10:30:56.022] Searching for globals ... DONE
[10:30:56.022] - globals: [0] <none>
[10:30:56.022] getGlobalsAndPackages() ... DONE
[10:30:56.022]    + additional globals found: [n=0] 
[10:30:56.022]    + additional namespaces needed: [n=0] 
[10:30:56.022]  - Finding globals in 'X' for chunk #1 ... DONE
[10:30:56.022]  - seeds: [5] <seeds>
[10:30:56.022]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.022] getGlobalsAndPackages() ...
[10:30:56.022] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.023] Resolving globals: FALSE
[10:30:56.023] Tweak future expression to call with '...' arguments ...
[10:30:56.023] {
[10:30:56.023]     do.call(function(...) {
[10:30:56.023]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.023]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:56.023]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.023]             on.exit(options(oopts), add = TRUE)
[10:30:56.023]         }
[10:30:56.023]         {
[10:30:56.023]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:56.023]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.023]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.023]                   envir = globalenv(), inherits = FALSE)
[10:30:56.023]                 ...future.FUN(...future.X_jj, ...)
[10:30:56.023]             })
[10:30:56.023]         }
[10:30:56.023]     }, args = future.call.arguments)
[10:30:56.023] }
[10:30:56.023] Tweak future expression to call with '...' arguments ... DONE
[10:30:56.023] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.023] 
[10:30:56.024] getGlobalsAndPackages() ... DONE
[10:30:56.024] run() for ‘Future’ ...
[10:30:56.024] - state: ‘created’
[10:30:56.024] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:30:56.024] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:30:56.025] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:30:56.025]   - Field: ‘label’
[10:30:56.025]   - Field: ‘local’
[10:30:56.025]   - Field: ‘owner’
[10:30:56.025]   - Field: ‘envir’
[10:30:56.025]   - Field: ‘packages’
[10:30:56.025]   - Field: ‘gc’
[10:30:56.025]   - Field: ‘conditions’
[10:30:56.025]   - Field: ‘expr’
[10:30:56.025]   - Field: ‘uuid’
[10:30:56.026]   - Field: ‘seed’
[10:30:56.026]   - Field: ‘version’
[10:30:56.026]   - Field: ‘result’
[10:30:56.026]   - Field: ‘asynchronous’
[10:30:56.026]   - Field: ‘calls’
[10:30:56.026]   - Field: ‘globals’
[10:30:56.026]   - Field: ‘stdout’
[10:30:56.026]   - Field: ‘earlySignal’
[10:30:56.026]   - Field: ‘lazy’
[10:30:56.026]   - Field: ‘state’
[10:30:56.026] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:30:56.027] - Launch lazy future ...
[10:30:56.027] Packages needed by the future expression (n = 0): <none>
[10:30:56.027] Packages needed by future strategies (n = 0): <none>
[10:30:56.027] {
[10:30:56.027]     {
[10:30:56.027]         {
[10:30:56.027]             ...future.startTime <- base::Sys.time()
[10:30:56.027]             {
[10:30:56.027]                 {
[10:30:56.027]                   {
[10:30:56.027]                     base::local({
[10:30:56.027]                       has_future <- base::requireNamespace("future", 
[10:30:56.027]                         quietly = TRUE)
[10:30:56.027]                       if (has_future) {
[10:30:56.027]                         ns <- base::getNamespace("future")
[10:30:56.027]                         version <- ns[[".package"]][["version"]]
[10:30:56.027]                         if (is.null(version)) 
[10:30:56.027]                           version <- utils::packageVersion("future")
[10:30:56.027]                       }
[10:30:56.027]                       else {
[10:30:56.027]                         version <- NULL
[10:30:56.027]                       }
[10:30:56.027]                       if (!has_future || version < "1.8.0") {
[10:30:56.027]                         info <- base::c(r_version = base::gsub("R version ", 
[10:30:56.027]                           "", base::R.version$version.string), 
[10:30:56.027]                           platform = base::sprintf("%s (%s-bit)", 
[10:30:56.027]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:30:56.027]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:30:56.027]                             "release", "version")], collapse = " "), 
[10:30:56.027]                           hostname = base::Sys.info()[["nodename"]])
[10:30:56.027]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:30:56.027]                           info)
[10:30:56.027]                         info <- base::paste(info, collapse = "; ")
[10:30:56.027]                         if (!has_future) {
[10:30:56.027]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:30:56.027]                             info)
[10:30:56.027]                         }
[10:30:56.027]                         else {
[10:30:56.027]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:30:56.027]                             info, version)
[10:30:56.027]                         }
[10:30:56.027]                         base::stop(msg)
[10:30:56.027]                       }
[10:30:56.027]                     })
[10:30:56.027]                   }
[10:30:56.027]                   ...future.strategy.old <- future::plan("list")
[10:30:56.027]                   options(future.plan = NULL)
[10:30:56.027]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:30:56.027]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:30:56.027]                 }
[10:30:56.027]                 ...future.workdir <- getwd()
[10:30:56.027]             }
[10:30:56.027]             ...future.oldOptions <- base::as.list(base::.Options)
[10:30:56.027]             ...future.oldEnvVars <- base::Sys.getenv()
[10:30:56.027]         }
[10:30:56.027]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:30:56.027]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:30:56.027]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:30:56.027]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:30:56.027]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:30:56.027]             future.stdout.windows.reencode = NULL, width = 80L)
[10:30:56.027]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:30:56.027]             base::names(...future.oldOptions))
[10:30:56.027]     }
[10:30:56.027]     if (FALSE) {
[10:30:56.027]     }
[10:30:56.027]     else {
[10:30:56.027]         if (TRUE) {
[10:30:56.027]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:30:56.027]                 open = "w")
[10:30:56.027]         }
[10:30:56.027]         else {
[10:30:56.027]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:30:56.027]                 windows = "NUL", "/dev/null"), open = "w")
[10:30:56.027]         }
[10:30:56.027]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:30:56.027]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:30:56.027]             base::sink(type = "output", split = FALSE)
[10:30:56.027]             base::close(...future.stdout)
[10:30:56.027]         }, add = TRUE)
[10:30:56.027]     }
[10:30:56.027]     ...future.frame <- base::sys.nframe()
[10:30:56.027]     ...future.conditions <- base::list()
[10:30:56.027]     ...future.rng <- base::globalenv()$.Random.seed
[10:30:56.027]     if (FALSE) {
[10:30:56.027]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:30:56.027]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:30:56.027]     }
[10:30:56.027]     ...future.result <- base::tryCatch({
[10:30:56.027]         base::withCallingHandlers({
[10:30:56.027]             ...future.value <- base::withVisible(base::local({
[10:30:56.027]                 do.call(function(...) {
[10:30:56.027]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.027]                   if (!identical(...future.globals.maxSize.org, 
[10:30:56.027]                     ...future.globals.maxSize)) {
[10:30:56.027]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.027]                     on.exit(options(oopts), add = TRUE)
[10:30:56.027]                   }
[10:30:56.027]                   {
[10:30:56.027]                     lapply(seq_along(...future.elements_ii), 
[10:30:56.027]                       FUN = function(jj) {
[10:30:56.027]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.027]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.027]                           envir = globalenv(), inherits = FALSE)
[10:30:56.027]                         ...future.FUN(...future.X_jj, ...)
[10:30:56.027]                       })
[10:30:56.027]                   }
[10:30:56.027]                 }, args = future.call.arguments)
[10:30:56.027]             }))
[10:30:56.027]             future::FutureResult(value = ...future.value$value, 
[10:30:56.027]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:56.027]                   ...future.rng), globalenv = if (FALSE) 
[10:30:56.027]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:30:56.027]                     ...future.globalenv.names))
[10:30:56.027]                 else NULL, started = ...future.startTime, version = "1.8")
[10:30:56.027]         }, condition = base::local({
[10:30:56.027]             c <- base::c
[10:30:56.027]             inherits <- base::inherits
[10:30:56.027]             invokeRestart <- base::invokeRestart
[10:30:56.027]             length <- base::length
[10:30:56.027]             list <- base::list
[10:30:56.027]             seq.int <- base::seq.int
[10:30:56.027]             signalCondition <- base::signalCondition
[10:30:56.027]             sys.calls <- base::sys.calls
[10:30:56.027]             `[[` <- base::`[[`
[10:30:56.027]             `+` <- base::`+`
[10:30:56.027]             `<<-` <- base::`<<-`
[10:30:56.027]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:30:56.027]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:30:56.027]                   3L)]
[10:30:56.027]             }
[10:30:56.027]             function(cond) {
[10:30:56.027]                 is_error <- inherits(cond, "error")
[10:30:56.027]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:30:56.027]                   NULL)
[10:30:56.027]                 if (is_error) {
[10:30:56.027]                   sessionInformation <- function() {
[10:30:56.027]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:30:56.027]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:30:56.027]                       search = base::search(), system = base::Sys.info())
[10:30:56.027]                   }
[10:30:56.027]                   ...future.conditions[[length(...future.conditions) + 
[10:30:56.027]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:30:56.027]                     cond$call), session = sessionInformation(), 
[10:30:56.027]                     timestamp = base::Sys.time(), signaled = 0L)
[10:30:56.027]                   signalCondition(cond)
[10:30:56.027]                 }
[10:30:56.027]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:30:56.027]                 "immediateCondition"))) {
[10:30:56.027]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:30:56.027]                   ...future.conditions[[length(...future.conditions) + 
[10:30:56.027]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:30:56.027]                   if (TRUE && !signal) {
[10:30:56.027]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.027]                     {
[10:30:56.027]                       inherits <- base::inherits
[10:30:56.027]                       invokeRestart <- base::invokeRestart
[10:30:56.027]                       is.null <- base::is.null
[10:30:56.027]                       muffled <- FALSE
[10:30:56.027]                       if (inherits(cond, "message")) {
[10:30:56.027]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:56.027]                         if (muffled) 
[10:30:56.027]                           invokeRestart("muffleMessage")
[10:30:56.027]                       }
[10:30:56.027]                       else if (inherits(cond, "warning")) {
[10:30:56.027]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:56.027]                         if (muffled) 
[10:30:56.027]                           invokeRestart("muffleWarning")
[10:30:56.027]                       }
[10:30:56.027]                       else if (inherits(cond, "condition")) {
[10:30:56.027]                         if (!is.null(pattern)) {
[10:30:56.027]                           computeRestarts <- base::computeRestarts
[10:30:56.027]                           grepl <- base::grepl
[10:30:56.027]                           restarts <- computeRestarts(cond)
[10:30:56.027]                           for (restart in restarts) {
[10:30:56.027]                             name <- restart$name
[10:30:56.027]                             if (is.null(name)) 
[10:30:56.027]                               next
[10:30:56.027]                             if (!grepl(pattern, name)) 
[10:30:56.027]                               next
[10:30:56.027]                             invokeRestart(restart)
[10:30:56.027]                             muffled <- TRUE
[10:30:56.027]                             break
[10:30:56.027]                           }
[10:30:56.027]                         }
[10:30:56.027]                       }
[10:30:56.027]                       invisible(muffled)
[10:30:56.027]                     }
[10:30:56.027]                     muffleCondition(cond, pattern = "^muffle")
[10:30:56.027]                   }
[10:30:56.027]                 }
[10:30:56.027]                 else {
[10:30:56.027]                   if (TRUE) {
[10:30:56.027]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.027]                     {
[10:30:56.027]                       inherits <- base::inherits
[10:30:56.027]                       invokeRestart <- base::invokeRestart
[10:30:56.027]                       is.null <- base::is.null
[10:30:56.027]                       muffled <- FALSE
[10:30:56.027]                       if (inherits(cond, "message")) {
[10:30:56.027]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:56.027]                         if (muffled) 
[10:30:56.027]                           invokeRestart("muffleMessage")
[10:30:56.027]                       }
[10:30:56.027]                       else if (inherits(cond, "warning")) {
[10:30:56.027]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:56.027]                         if (muffled) 
[10:30:56.027]                           invokeRestart("muffleWarning")
[10:30:56.027]                       }
[10:30:56.027]                       else if (inherits(cond, "condition")) {
[10:30:56.027]                         if (!is.null(pattern)) {
[10:30:56.027]                           computeRestarts <- base::computeRestarts
[10:30:56.027]                           grepl <- base::grepl
[10:30:56.027]                           restarts <- computeRestarts(cond)
[10:30:56.027]                           for (restart in restarts) {
[10:30:56.027]                             name <- restart$name
[10:30:56.027]                             if (is.null(name)) 
[10:30:56.027]                               next
[10:30:56.027]                             if (!grepl(pattern, name)) 
[10:30:56.027]                               next
[10:30:56.027]                             invokeRestart(restart)
[10:30:56.027]                             muffled <- TRUE
[10:30:56.027]                             break
[10:30:56.027]                           }
[10:30:56.027]                         }
[10:30:56.027]                       }
[10:30:56.027]                       invisible(muffled)
[10:30:56.027]                     }
[10:30:56.027]                     muffleCondition(cond, pattern = "^muffle")
[10:30:56.027]                   }
[10:30:56.027]                 }
[10:30:56.027]             }
[10:30:56.027]         }))
[10:30:56.027]     }, error = function(ex) {
[10:30:56.027]         base::structure(base::list(value = NULL, visible = NULL, 
[10:30:56.027]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:56.027]                 ...future.rng), started = ...future.startTime, 
[10:30:56.027]             finished = Sys.time(), session_uuid = NA_character_, 
[10:30:56.027]             version = "1.8"), class = "FutureResult")
[10:30:56.027]     }, finally = {
[10:30:56.027]         if (!identical(...future.workdir, getwd())) 
[10:30:56.027]             setwd(...future.workdir)
[10:30:56.027]         {
[10:30:56.027]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:30:56.027]                 ...future.oldOptions$nwarnings <- NULL
[10:30:56.027]             }
[10:30:56.027]             base::options(...future.oldOptions)
[10:30:56.027]             if (.Platform$OS.type == "windows") {
[10:30:56.027]                 old_names <- names(...future.oldEnvVars)
[10:30:56.027]                 envs <- base::Sys.getenv()
[10:30:56.027]                 names <- names(envs)
[10:30:56.027]                 common <- intersect(names, old_names)
[10:30:56.027]                 added <- setdiff(names, old_names)
[10:30:56.027]                 removed <- setdiff(old_names, names)
[10:30:56.027]                 changed <- common[...future.oldEnvVars[common] != 
[10:30:56.027]                   envs[common]]
[10:30:56.027]                 NAMES <- toupper(changed)
[10:30:56.027]                 args <- list()
[10:30:56.027]                 for (kk in seq_along(NAMES)) {
[10:30:56.027]                   name <- changed[[kk]]
[10:30:56.027]                   NAME <- NAMES[[kk]]
[10:30:56.027]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.027]                     next
[10:30:56.027]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:56.027]                 }
[10:30:56.027]                 NAMES <- toupper(added)
[10:30:56.027]                 for (kk in seq_along(NAMES)) {
[10:30:56.027]                   name <- added[[kk]]
[10:30:56.027]                   NAME <- NAMES[[kk]]
[10:30:56.027]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.027]                     next
[10:30:56.027]                   args[[name]] <- ""
[10:30:56.027]                 }
[10:30:56.027]                 NAMES <- toupper(removed)
[10:30:56.027]                 for (kk in seq_along(NAMES)) {
[10:30:56.027]                   name <- removed[[kk]]
[10:30:56.027]                   NAME <- NAMES[[kk]]
[10:30:56.027]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.027]                     next
[10:30:56.027]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:56.027]                 }
[10:30:56.027]                 if (length(args) > 0) 
[10:30:56.027]                   base::do.call(base::Sys.setenv, args = args)
[10:30:56.027]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:30:56.027]             }
[10:30:56.027]             else {
[10:30:56.027]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:30:56.027]             }
[10:30:56.027]             {
[10:30:56.027]                 if (base::length(...future.futureOptionsAdded) > 
[10:30:56.027]                   0L) {
[10:30:56.027]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:30:56.027]                   base::names(opts) <- ...future.futureOptionsAdded
[10:30:56.027]                   base::options(opts)
[10:30:56.027]                 }
[10:30:56.027]                 {
[10:30:56.027]                   {
[10:30:56.027]                     base::assign(".Random.seed", c(10403L, 2L, 
[10:30:56.027]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[10:30:56.027]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[10:30:56.027]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[10:30:56.027]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[10:30:56.027]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[10:30:56.027]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[10:30:56.027]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[10:30:56.027]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[10:30:56.027]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[10:30:56.027]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[10:30:56.027]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[10:30:56.027]                     -1512233174L, -1985955764L, -425390065L, 
[10:30:56.027]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[10:30:56.027]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[10:30:56.027]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[10:30:56.027]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[10:30:56.027]                     1818328109L, -1284085436L, -1981489558L, 
[10:30:56.027]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[10:30:56.027]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[10:30:56.027]                     -1718567047L, -793788661L, -1133789126L, 
[10:30:56.027]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[10:30:56.027]                     -1823521982L, -1345991523L, -1672661737L, 
[10:30:56.027]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[10:30:56.027]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[10:30:56.027]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[10:30:56.027]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[10:30:56.027]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[10:30:56.027]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[10:30:56.027]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[10:30:56.027]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[10:30:56.027]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[10:30:56.027]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[10:30:56.027]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[10:30:56.027]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[10:30:56.027]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[10:30:56.027]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[10:30:56.027]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[10:30:56.027]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[10:30:56.027]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[10:30:56.027]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[10:30:56.027]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[10:30:56.027]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[10:30:56.027]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[10:30:56.027]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[10:30:56.027]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[10:30:56.027]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[10:30:56.027]                     -1119334354L, -1521015416L, -2041922421L, 
[10:30:56.027]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[10:30:56.027]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[10:30:56.027]                     1232111981L, -1801753084L, -1608606422L, 
[10:30:56.027]                     -1172096363L, 1420874031L, -1210473418L, 
[10:30:56.027]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[10:30:56.027]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[10:30:56.027]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[10:30:56.027]                     679371266L, -591318819L, -104578089L, -172818754L, 
[10:30:56.027]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[10:30:56.027]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[10:30:56.027]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[10:30:56.027]                     -332493318L, -1978392251L, -1691039632L, 
[10:30:56.027]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[10:30:56.027]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[10:30:56.027]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[10:30:56.027]                     87560756L, -87565624L, 426345146L, -699970416L, 
[10:30:56.027]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[10:30:56.027]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[10:30:56.027]                     -1178330196L, -687617348L, -1701912078L, 
[10:30:56.027]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[10:30:56.027]                     -1345416048L, 1816730492L, -1570431212L, 
[10:30:56.027]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[10:30:56.027]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[10:30:56.027]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[10:30:56.027]                     -1493184262L, -1943836976L, -590788308L, 
[10:30:56.027]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[10:30:56.027]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[10:30:56.027]                     1274857340L, -1205842638L, -1938479504L, 
[10:30:56.027]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[10:30:56.027]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[10:30:56.027]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[10:30:56.027]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[10:30:56.027]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[10:30:56.027]                     -1460751252L, 1201879444L, -1459788718L, 
[10:30:56.027]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[10:30:56.027]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[10:30:56.027]                     -420945808L, -1997735900L, -1838404552L, 
[10:30:56.027]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[10:30:56.027]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[10:30:56.027]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[10:30:56.027]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[10:30:56.027]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[10:30:56.027]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[10:30:56.027]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[10:30:56.027]                     942193650L, 751741680L, 689743428L, -18455976L, 
[10:30:56.027]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[10:30:56.027]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[10:30:56.027]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[10:30:56.027]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[10:30:56.027]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[10:30:56.027]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[10:30:56.027]                     -1357570110L, 1896595240L, -2066952276L, 
[10:30:56.027]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[10:30:56.027]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[10:30:56.027]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[10:30:56.027]                     769655120L, 236357794L, 181393736L, -13334772L, 
[10:30:56.027]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[10:30:56.027]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[10:30:56.027]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[10:30:56.027]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[10:30:56.027]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[10:30:56.027]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[10:30:56.027]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[10:30:56.027]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[10:30:56.027]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[10:30:56.027]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[10:30:56.027]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[10:30:56.027]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[10:30:56.027]                     -1365842884L, -438961294L, -1851472272L, 
[10:30:56.027]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[10:30:56.027]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[10:30:56.027]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[10:30:56.027]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[10:30:56.027]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[10:30:56.027]                     -594809770L, -2146766621L, -2013964635L, 
[10:30:56.027]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[10:30:56.027]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[10:30:56.027]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[10:30:56.027]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[10:30:56.027]                     -1426021878L, -1285634264L, 1507547537L, 
[10:30:56.027]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[10:30:56.027]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[10:30:56.027]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[10:30:56.027]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[10:30:56.027]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[10:30:56.027]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[10:30:56.027]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[10:30:56.027]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[10:30:56.027]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[10:30:56.027]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[10:30:56.027]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[10:30:56.027]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[10:30:56.027]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[10:30:56.027]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[10:30:56.027]                     -1604604761L, 1421229008L, -1268333714L, 
[10:30:56.027]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[10:30:56.027]                     -2070476623L, -2099222749L, 1141171236L, 
[10:30:56.027]                     -146426158L, -1797385433L, -1129376399L, 
[10:30:56.027]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[10:30:56.027]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[10:30:56.027]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[10:30:56.027]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[10:30:56.027]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[10:30:56.027]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[10:30:56.027]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[10:30:56.027]                     -1092079724L, -1765622238L, -1882554057L, 
[10:30:56.027]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[10:30:56.027]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[10:30:56.027]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[10:30:56.027]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[10:30:56.027]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[10:30:56.027]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[10:30:56.027]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[10:30:56.027]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[10:30:56.027]                     865377681L, -1127426242L), envir = base::globalenv(), 
[10:30:56.027]                       inherits = FALSE)
[10:30:56.027]                     NULL
[10:30:56.027]                   }
[10:30:56.027]                   options(future.plan = NULL)
[10:30:56.027]                   if (is.na(NA_character_)) 
[10:30:56.027]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:30:56.027]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:30:56.027]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:30:56.027]                     .init = FALSE)
[10:30:56.027]                 }
[10:30:56.027]             }
[10:30:56.027]         }
[10:30:56.027]     })
[10:30:56.027]     if (TRUE) {
[10:30:56.027]         base::sink(type = "output", split = FALSE)
[10:30:56.027]         if (TRUE) {
[10:30:56.027]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:30:56.027]         }
[10:30:56.027]         else {
[10:30:56.027]             ...future.result["stdout"] <- base::list(NULL)
[10:30:56.027]         }
[10:30:56.027]         base::close(...future.stdout)
[10:30:56.027]         ...future.stdout <- NULL
[10:30:56.027]     }
[10:30:56.027]     ...future.result$conditions <- ...future.conditions
[10:30:56.027]     ...future.result$finished <- base::Sys.time()
[10:30:56.027]     ...future.result
[10:30:56.027] }
[10:30:56.030] assign_globals() ...
[10:30:56.030] List of 5
[10:30:56.030]  $ ...future.FUN            :function (...)  
[10:30:56.030]  $ future.call.arguments    : list()
[10:30:56.030]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:56.030]  $ ...future.elements_ii    :List of 5
[10:30:56.030]   ..$ : int 0
[10:30:56.030]   ..$ : int 0
[10:30:56.030]   ..$ : int 0
[10:30:56.030]   ..$ : int 0
[10:30:56.030]   ..$ : int 0
[10:30:56.030]  $ ...future.seeds_ii       :List of 5
[10:30:56.030]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[10:30:56.030]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[10:30:56.030]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[10:30:56.030]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[10:30:56.030]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[10:30:56.030]  $ ...future.globals.maxSize: NULL
[10:30:56.030]  - attr(*, "where")=List of 5
[10:30:56.030]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:30:56.030]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:30:56.030]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:30:56.030]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:30:56.030]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:30:56.030]  - attr(*, "resolved")= logi FALSE
[10:30:56.030]  - attr(*, "total_size")= num 616
[10:30:56.030]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:56.030]  - attr(*, "already-done")= logi TRUE
[10:30:56.039] - reassign environment for ‘...future.FUN’
[10:30:56.039] - copied ‘...future.FUN’ to environment
[10:30:56.039] - copied ‘future.call.arguments’ to environment
[10:30:56.039] - copied ‘...future.elements_ii’ to environment
[10:30:56.039] - copied ‘...future.seeds_ii’ to environment
[10:30:56.040] - copied ‘...future.globals.maxSize’ to environment
[10:30:56.040] assign_globals() ... done
[10:30:56.040] plan(): Setting new future strategy stack:
[10:30:56.040] List of future strategies:
[10:30:56.040] 1. sequential:
[10:30:56.040]    - args: function (..., envir = parent.frame())
[10:30:56.040]    - tweaked: FALSE
[10:30:56.040]    - call: NULL
[10:30:56.040] plan(): nbrOfWorkers() = 1
[10:30:56.041] plan(): Setting new future strategy stack:
[10:30:56.041] List of future strategies:
[10:30:56.041] 1. sequential:
[10:30:56.041]    - args: function (..., envir = parent.frame())
[10:30:56.041]    - tweaked: FALSE
[10:30:56.041]    - call: plan(strategy)
[10:30:56.042] plan(): nbrOfWorkers() = 1
[10:30:56.042] SequentialFuture started (and completed)
[10:30:56.042] - Launch lazy future ... done
[10:30:56.042] run() for ‘SequentialFuture’ ... done
[10:30:56.042] Created future:
[10:30:56.042] SequentialFuture:
[10:30:56.042] Label: ‘future_replicate-1’
[10:30:56.042] Expression:
[10:30:56.042] {
[10:30:56.042]     do.call(function(...) {
[10:30:56.042]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.042]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:56.042]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.042]             on.exit(options(oopts), add = TRUE)
[10:30:56.042]         }
[10:30:56.042]         {
[10:30:56.042]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:56.042]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.042]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.042]                   envir = globalenv(), inherits = FALSE)
[10:30:56.042]                 ...future.FUN(...future.X_jj, ...)
[10:30:56.042]             })
[10:30:56.042]         }
[10:30:56.042]     }, args = future.call.arguments)
[10:30:56.042] }
[10:30:56.042] Lazy evaluation: FALSE
[10:30:56.042] Asynchronous evaluation: FALSE
[10:30:56.042] Local evaluation: TRUE
[10:30:56.042] Environment: R_GlobalEnv
[10:30:56.042] Capture standard output: TRUE
[10:30:56.042] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:30:56.042] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:30:56.042] Packages: <none>
[10:30:56.042] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:30:56.042] Resolved: TRUE
[10:30:56.042] Value: 280 bytes of class ‘list’
[10:30:56.042] Early signaling: FALSE
[10:30:56.042] Owner process: 7cdcbd4b-6c47-ca9a-dc3f-e18236d134b8
[10:30:56.042] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:30:56.043] Chunk #1 of 1 ... DONE
[10:30:56.044] Launching 1 futures (chunks) ... DONE
[10:30:56.044] Resolving 1 futures (chunks) ...
[10:30:56.044] resolve() on list ...
[10:30:56.044]  recursive: 0
[10:30:56.044]  length: 1
[10:30:56.044] 
[10:30:56.044] resolved() for ‘SequentialFuture’ ...
[10:30:56.044] - state: ‘finished’
[10:30:56.044] - run: TRUE
[10:30:56.044] - result: ‘FutureResult’
[10:30:56.044] resolved() for ‘SequentialFuture’ ... done
[10:30:56.045] Future #1
[10:30:56.045] signalConditionsASAP(SequentialFuture, pos=1) ...
[10:30:56.045] - nx: 1
[10:30:56.045] - relay: TRUE
[10:30:56.045] - stdout: TRUE
[10:30:56.045] - signal: TRUE
[10:30:56.045] - resignal: FALSE
[10:30:56.045] - force: TRUE
[10:30:56.045] - relayed: [n=1] FALSE
[10:30:56.046] - queued futures: [n=1] FALSE
[10:30:56.046]  - until=1
[10:30:56.046]  - relaying element #1
[10:30:56.046] - relayed: [n=1] TRUE
[10:30:56.046] - queued futures: [n=1] TRUE
[10:30:56.046] signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:30:56.046]  length: 0 (resolved future 1)
[10:30:56.046] Relaying remaining futures
[10:30:56.046] signalConditionsASAP(NULL, pos=0) ...
[10:30:56.046] - nx: 1
[10:30:56.047] - relay: TRUE
[10:30:56.047] - stdout: TRUE
[10:30:56.047] - signal: TRUE
[10:30:56.047] - resignal: FALSE
[10:30:56.047] - force: TRUE
[10:30:56.047] - relayed: [n=1] TRUE
[10:30:56.047] - queued futures: [n=1] TRUE
 - flush all
[10:30:56.047] - relayed: [n=1] TRUE
[10:30:56.047] - queued futures: [n=1] TRUE
[10:30:56.047] signalConditionsASAP(NULL, pos=0) ... done
[10:30:56.047] resolve() on list ... DONE
[10:30:56.048]  - Number of value chunks collected: 1
[10:30:56.048] Resolving 1 futures (chunks) ... DONE
[10:30:56.048] Reducing values from 1 chunks ...
[10:30:56.048]  - Number of values collected after concatenation: 5
[10:30:56.048]  - Number of values expected: 5
[10:30:56.048] Reducing values from 1 chunks ... DONE
[10:30:56.048] future_lapply() ... DONE
[10:30:56.048] future_lapply() ...
[10:30:56.049] Generating random seeds ...
[10:30:56.049] Generating random seed streams for 5 elements ...
[10:30:56.049] Generating random seed streams for 5 elements ... DONE
[10:30:56.049] Generating random seeds ... DONE
[10:30:56.049] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:30:56.050] Number of chunks: 1
[10:30:56.050] getGlobalsAndPackagesXApply() ...
[10:30:56.050]  - future.globals: TRUE
[10:30:56.050] getGlobalsAndPackages() ...
[10:30:56.050] Searching for globals...
[10:30:56.051] - globals found: [2] ‘FUN’, ‘sample’
[10:30:56.051] Searching for globals ... DONE
[10:30:56.052] Resolving globals: FALSE
[10:30:56.052] The total size of the 1 globals is 616 bytes (616 bytes)
[10:30:56.052] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[10:30:56.052] - globals: [1] ‘FUN’
[10:30:56.052] 
[10:30:56.053] getGlobalsAndPackages() ... DONE
[10:30:56.053]  - globals found/used: [n=1] ‘FUN’
[10:30:56.053]  - needed namespaces: [n=0] 
[10:30:56.053] Finding globals ... DONE
[10:30:56.053]  - use_args: TRUE
[10:30:56.053]  - Getting '...' globals ...
[10:30:56.053] resolve() on list ...
[10:30:56.053]  recursive: 0
[10:30:56.054]  length: 1
[10:30:56.054]  elements: ‘...’
[10:30:56.054]  length: 0 (resolved future 1)
[10:30:56.054] resolve() on list ... DONE
[10:30:56.054]    - '...' content: [n=0] 
[10:30:56.054] List of 1
[10:30:56.054]  $ ...: list()
[10:30:56.054]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:56.054]  - attr(*, "where")=List of 1
[10:30:56.054]   ..$ ...:<environment: 0x55aba11a3660> 
[10:30:56.054]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:56.054]  - attr(*, "resolved")= logi TRUE
[10:30:56.054]  - attr(*, "total_size")= num NA
[10:30:56.057]  - Getting '...' globals ... DONE
[10:30:56.057] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:30:56.057] List of 2
[10:30:56.057]  $ ...future.FUN:function (...)  
[10:30:56.057]  $ ...          : list()
[10:30:56.057]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:56.057]  - attr(*, "where")=List of 2
[10:30:56.057]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:30:56.057]   ..$ ...          :<environment: 0x55aba11a3660> 
[10:30:56.057]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:56.057]  - attr(*, "resolved")= logi FALSE
[10:30:56.057]  - attr(*, "total_size")= num 616
[10:30:56.060] Packages to be attached in all futures: [n=0] 
[10:30:56.060] getGlobalsAndPackagesXApply() ... DONE
[10:30:56.060] Number of futures (= number of chunks): 1
[10:30:56.060] Launching 1 futures (chunks) ...
[10:30:56.060] Chunk #1 of 1 ...
[10:30:56.060]  - Finding globals in 'X' for chunk #1 ...
[10:30:56.060] getGlobalsAndPackages() ...
[10:30:56.060] Searching for globals...
[10:30:56.061] 
[10:30:56.061] Searching for globals ... DONE
[10:30:56.061] - globals: [0] <none>
[10:30:56.061] getGlobalsAndPackages() ... DONE
[10:30:56.061]    + additional globals found: [n=0] 
[10:30:56.061]    + additional namespaces needed: [n=0] 
[10:30:56.061]  - Finding globals in 'X' for chunk #1 ... DONE
[10:30:56.061]  - seeds: [5] <seeds>
[10:30:56.061]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.062] getGlobalsAndPackages() ...
[10:30:56.062] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.062] Resolving globals: FALSE
[10:30:56.062] Tweak future expression to call with '...' arguments ...
[10:30:56.064] {
[10:30:56.064]     do.call(function(...) {
[10:30:56.064]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.064]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:56.064]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.064]             on.exit(options(oopts), add = TRUE)
[10:30:56.064]         }
[10:30:56.064]         {
[10:30:56.064]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:56.064]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.064]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.064]                   envir = globalenv(), inherits = FALSE)
[10:30:56.064]                 ...future.FUN(...future.X_jj, ...)
[10:30:56.064]             })
[10:30:56.064]         }
[10:30:56.064]     }, args = future.call.arguments)
[10:30:56.064] }
[10:30:56.064] Tweak future expression to call with '...' arguments ... DONE
[10:30:56.064] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.065] 
[10:30:56.065] getGlobalsAndPackages() ... DONE
[10:30:56.065] run() for ‘Future’ ...
[10:30:56.065] - state: ‘created’
[10:30:56.065] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:30:56.066] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:30:56.066] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:30:56.066]   - Field: ‘label’
[10:30:56.066]   - Field: ‘local’
[10:30:56.066]   - Field: ‘owner’
[10:30:56.066]   - Field: ‘envir’
[10:30:56.066]   - Field: ‘packages’
[10:30:56.066]   - Field: ‘gc’
[10:30:56.066]   - Field: ‘conditions’
[10:30:56.066]   - Field: ‘expr’
[10:30:56.067]   - Field: ‘uuid’
[10:30:56.067]   - Field: ‘seed’
[10:30:56.067]   - Field: ‘version’
[10:30:56.067]   - Field: ‘result’
[10:30:56.067]   - Field: ‘asynchronous’
[10:30:56.067]   - Field: ‘calls’
[10:30:56.067]   - Field: ‘globals’
[10:30:56.067]   - Field: ‘stdout’
[10:30:56.067]   - Field: ‘earlySignal’
[10:30:56.067]   - Field: ‘lazy’
[10:30:56.068]   - Field: ‘state’
[10:30:56.068] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:30:56.068] - Launch lazy future ...
[10:30:56.068] Packages needed by the future expression (n = 0): <none>
[10:30:56.068] Packages needed by future strategies (n = 0): <none>
[10:30:56.068] {
[10:30:56.068]     {
[10:30:56.068]         {
[10:30:56.068]             ...future.startTime <- base::Sys.time()
[10:30:56.068]             {
[10:30:56.068]                 {
[10:30:56.068]                   {
[10:30:56.068]                     base::local({
[10:30:56.068]                       has_future <- base::requireNamespace("future", 
[10:30:56.068]                         quietly = TRUE)
[10:30:56.068]                       if (has_future) {
[10:30:56.068]                         ns <- base::getNamespace("future")
[10:30:56.068]                         version <- ns[[".package"]][["version"]]
[10:30:56.068]                         if (is.null(version)) 
[10:30:56.068]                           version <- utils::packageVersion("future")
[10:30:56.068]                       }
[10:30:56.068]                       else {
[10:30:56.068]                         version <- NULL
[10:30:56.068]                       }
[10:30:56.068]                       if (!has_future || version < "1.8.0") {
[10:30:56.068]                         info <- base::c(r_version = base::gsub("R version ", 
[10:30:56.068]                           "", base::R.version$version.string), 
[10:30:56.068]                           platform = base::sprintf("%s (%s-bit)", 
[10:30:56.068]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:30:56.068]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:30:56.068]                             "release", "version")], collapse = " "), 
[10:30:56.068]                           hostname = base::Sys.info()[["nodename"]])
[10:30:56.068]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:30:56.068]                           info)
[10:30:56.068]                         info <- base::paste(info, collapse = "; ")
[10:30:56.068]                         if (!has_future) {
[10:30:56.068]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:30:56.068]                             info)
[10:30:56.068]                         }
[10:30:56.068]                         else {
[10:30:56.068]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:30:56.068]                             info, version)
[10:30:56.068]                         }
[10:30:56.068]                         base::stop(msg)
[10:30:56.068]                       }
[10:30:56.068]                     })
[10:30:56.068]                   }
[10:30:56.068]                   ...future.strategy.old <- future::plan("list")
[10:30:56.068]                   options(future.plan = NULL)
[10:30:56.068]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:30:56.068]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:30:56.068]                 }
[10:30:56.068]                 ...future.workdir <- getwd()
[10:30:56.068]             }
[10:30:56.068]             ...future.oldOptions <- base::as.list(base::.Options)
[10:30:56.068]             ...future.oldEnvVars <- base::Sys.getenv()
[10:30:56.068]         }
[10:30:56.068]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:30:56.068]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:30:56.068]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:30:56.068]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:30:56.068]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:30:56.068]             future.stdout.windows.reencode = NULL, width = 80L)
[10:30:56.068]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:30:56.068]             base::names(...future.oldOptions))
[10:30:56.068]     }
[10:30:56.068]     if (FALSE) {
[10:30:56.068]     }
[10:30:56.068]     else {
[10:30:56.068]         if (TRUE) {
[10:30:56.068]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:30:56.068]                 open = "w")
[10:30:56.068]         }
[10:30:56.068]         else {
[10:30:56.068]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:30:56.068]                 windows = "NUL", "/dev/null"), open = "w")
[10:30:56.068]         }
[10:30:56.068]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:30:56.068]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:30:56.068]             base::sink(type = "output", split = FALSE)
[10:30:56.068]             base::close(...future.stdout)
[10:30:56.068]         }, add = TRUE)
[10:30:56.068]     }
[10:30:56.068]     ...future.frame <- base::sys.nframe()
[10:30:56.068]     ...future.conditions <- base::list()
[10:30:56.068]     ...future.rng <- base::globalenv()$.Random.seed
[10:30:56.068]     if (FALSE) {
[10:30:56.068]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:30:56.068]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:30:56.068]     }
[10:30:56.068]     ...future.result <- base::tryCatch({
[10:30:56.068]         base::withCallingHandlers({
[10:30:56.068]             ...future.value <- base::withVisible(base::local({
[10:30:56.068]                 do.call(function(...) {
[10:30:56.068]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.068]                   if (!identical(...future.globals.maxSize.org, 
[10:30:56.068]                     ...future.globals.maxSize)) {
[10:30:56.068]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.068]                     on.exit(options(oopts), add = TRUE)
[10:30:56.068]                   }
[10:30:56.068]                   {
[10:30:56.068]                     lapply(seq_along(...future.elements_ii), 
[10:30:56.068]                       FUN = function(jj) {
[10:30:56.068]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.068]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.068]                           envir = globalenv(), inherits = FALSE)
[10:30:56.068]                         ...future.FUN(...future.X_jj, ...)
[10:30:56.068]                       })
[10:30:56.068]                   }
[10:30:56.068]                 }, args = future.call.arguments)
[10:30:56.068]             }))
[10:30:56.068]             future::FutureResult(value = ...future.value$value, 
[10:30:56.068]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:56.068]                   ...future.rng), globalenv = if (FALSE) 
[10:30:56.068]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:30:56.068]                     ...future.globalenv.names))
[10:30:56.068]                 else NULL, started = ...future.startTime, version = "1.8")
[10:30:56.068]         }, condition = base::local({
[10:30:56.068]             c <- base::c
[10:30:56.068]             inherits <- base::inherits
[10:30:56.068]             invokeRestart <- base::invokeRestart
[10:30:56.068]             length <- base::length
[10:30:56.068]             list <- base::list
[10:30:56.068]             seq.int <- base::seq.int
[10:30:56.068]             signalCondition <- base::signalCondition
[10:30:56.068]             sys.calls <- base::sys.calls
[10:30:56.068]             `[[` <- base::`[[`
[10:30:56.068]             `+` <- base::`+`
[10:30:56.068]             `<<-` <- base::`<<-`
[10:30:56.068]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:30:56.068]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:30:56.068]                   3L)]
[10:30:56.068]             }
[10:30:56.068]             function(cond) {
[10:30:56.068]                 is_error <- inherits(cond, "error")
[10:30:56.068]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:30:56.068]                   NULL)
[10:30:56.068]                 if (is_error) {
[10:30:56.068]                   sessionInformation <- function() {
[10:30:56.068]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:30:56.068]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:30:56.068]                       search = base::search(), system = base::Sys.info())
[10:30:56.068]                   }
[10:30:56.068]                   ...future.conditions[[length(...future.conditions) + 
[10:30:56.068]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:30:56.068]                     cond$call), session = sessionInformation(), 
[10:30:56.068]                     timestamp = base::Sys.time(), signaled = 0L)
[10:30:56.068]                   signalCondition(cond)
[10:30:56.068]                 }
[10:30:56.068]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:30:56.068]                 "immediateCondition"))) {
[10:30:56.068]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:30:56.068]                   ...future.conditions[[length(...future.conditions) + 
[10:30:56.068]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:30:56.068]                   if (TRUE && !signal) {
[10:30:56.068]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.068]                     {
[10:30:56.068]                       inherits <- base::inherits
[10:30:56.068]                       invokeRestart <- base::invokeRestart
[10:30:56.068]                       is.null <- base::is.null
[10:30:56.068]                       muffled <- FALSE
[10:30:56.068]                       if (inherits(cond, "message")) {
[10:30:56.068]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:56.068]                         if (muffled) 
[10:30:56.068]                           invokeRestart("muffleMessage")
[10:30:56.068]                       }
[10:30:56.068]                       else if (inherits(cond, "warning")) {
[10:30:56.068]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:56.068]                         if (muffled) 
[10:30:56.068]                           invokeRestart("muffleWarning")
[10:30:56.068]                       }
[10:30:56.068]                       else if (inherits(cond, "condition")) {
[10:30:56.068]                         if (!is.null(pattern)) {
[10:30:56.068]                           computeRestarts <- base::computeRestarts
[10:30:56.068]                           grepl <- base::grepl
[10:30:56.068]                           restarts <- computeRestarts(cond)
[10:30:56.068]                           for (restart in restarts) {
[10:30:56.068]                             name <- restart$name
[10:30:56.068]                             if (is.null(name)) 
[10:30:56.068]                               next
[10:30:56.068]                             if (!grepl(pattern, name)) 
[10:30:56.068]                               next
[10:30:56.068]                             invokeRestart(restart)
[10:30:56.068]                             muffled <- TRUE
[10:30:56.068]                             break
[10:30:56.068]                           }
[10:30:56.068]                         }
[10:30:56.068]                       }
[10:30:56.068]                       invisible(muffled)
[10:30:56.068]                     }
[10:30:56.068]                     muffleCondition(cond, pattern = "^muffle")
[10:30:56.068]                   }
[10:30:56.068]                 }
[10:30:56.068]                 else {
[10:30:56.068]                   if (TRUE) {
[10:30:56.068]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.068]                     {
[10:30:56.068]                       inherits <- base::inherits
[10:30:56.068]                       invokeRestart <- base::invokeRestart
[10:30:56.068]                       is.null <- base::is.null
[10:30:56.068]                       muffled <- FALSE
[10:30:56.068]                       if (inherits(cond, "message")) {
[10:30:56.068]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:56.068]                         if (muffled) 
[10:30:56.068]                           invokeRestart("muffleMessage")
[10:30:56.068]                       }
[10:30:56.068]                       else if (inherits(cond, "warning")) {
[10:30:56.068]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:56.068]                         if (muffled) 
[10:30:56.068]                           invokeRestart("muffleWarning")
[10:30:56.068]                       }
[10:30:56.068]                       else if (inherits(cond, "condition")) {
[10:30:56.068]                         if (!is.null(pattern)) {
[10:30:56.068]                           computeRestarts <- base::computeRestarts
[10:30:56.068]                           grepl <- base::grepl
[10:30:56.068]                           restarts <- computeRestarts(cond)
[10:30:56.068]                           for (restart in restarts) {
[10:30:56.068]                             name <- restart$name
[10:30:56.068]                             if (is.null(name)) 
[10:30:56.068]                               next
[10:30:56.068]                             if (!grepl(pattern, name)) 
[10:30:56.068]                               next
[10:30:56.068]                             invokeRestart(restart)
[10:30:56.068]                             muffled <- TRUE
[10:30:56.068]                             break
[10:30:56.068]                           }
[10:30:56.068]                         }
[10:30:56.068]                       }
[10:30:56.068]                       invisible(muffled)
[10:30:56.068]                     }
[10:30:56.068]                     muffleCondition(cond, pattern = "^muffle")
[10:30:56.068]                   }
[10:30:56.068]                 }
[10:30:56.068]             }
[10:30:56.068]         }))
[10:30:56.068]     }, error = function(ex) {
[10:30:56.068]         base::structure(base::list(value = NULL, visible = NULL, 
[10:30:56.068]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:56.068]                 ...future.rng), started = ...future.startTime, 
[10:30:56.068]             finished = Sys.time(), session_uuid = NA_character_, 
[10:30:56.068]             version = "1.8"), class = "FutureResult")
[10:30:56.068]     }, finally = {
[10:30:56.068]         if (!identical(...future.workdir, getwd())) 
[10:30:56.068]             setwd(...future.workdir)
[10:30:56.068]         {
[10:30:56.068]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:30:56.068]                 ...future.oldOptions$nwarnings <- NULL
[10:30:56.068]             }
[10:30:56.068]             base::options(...future.oldOptions)
[10:30:56.068]             if (.Platform$OS.type == "windows") {
[10:30:56.068]                 old_names <- names(...future.oldEnvVars)
[10:30:56.068]                 envs <- base::Sys.getenv()
[10:30:56.068]                 names <- names(envs)
[10:30:56.068]                 common <- intersect(names, old_names)
[10:30:56.068]                 added <- setdiff(names, old_names)
[10:30:56.068]                 removed <- setdiff(old_names, names)
[10:30:56.068]                 changed <- common[...future.oldEnvVars[common] != 
[10:30:56.068]                   envs[common]]
[10:30:56.068]                 NAMES <- toupper(changed)
[10:30:56.068]                 args <- list()
[10:30:56.068]                 for (kk in seq_along(NAMES)) {
[10:30:56.068]                   name <- changed[[kk]]
[10:30:56.068]                   NAME <- NAMES[[kk]]
[10:30:56.068]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.068]                     next
[10:30:56.068]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:56.068]                 }
[10:30:56.068]                 NAMES <- toupper(added)
[10:30:56.068]                 for (kk in seq_along(NAMES)) {
[10:30:56.068]                   name <- added[[kk]]
[10:30:56.068]                   NAME <- NAMES[[kk]]
[10:30:56.068]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.068]                     next
[10:30:56.068]                   args[[name]] <- ""
[10:30:56.068]                 }
[10:30:56.068]                 NAMES <- toupper(removed)
[10:30:56.068]                 for (kk in seq_along(NAMES)) {
[10:30:56.068]                   name <- removed[[kk]]
[10:30:56.068]                   NAME <- NAMES[[kk]]
[10:30:56.068]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.068]                     next
[10:30:56.068]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:56.068]                 }
[10:30:56.068]                 if (length(args) > 0) 
[10:30:56.068]                   base::do.call(base::Sys.setenv, args = args)
[10:30:56.068]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:30:56.068]             }
[10:30:56.068]             else {
[10:30:56.068]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:30:56.068]             }
[10:30:56.068]             {
[10:30:56.068]                 if (base::length(...future.futureOptionsAdded) > 
[10:30:56.068]                   0L) {
[10:30:56.068]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:30:56.068]                   base::names(opts) <- ...future.futureOptionsAdded
[10:30:56.068]                   base::options(opts)
[10:30:56.068]                 }
[10:30:56.068]                 {
[10:30:56.068]                   {
[10:30:56.068]                     base::assign(".Random.seed", c(10403L, 2L, 
[10:30:56.068]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[10:30:56.068]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[10:30:56.068]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[10:30:56.068]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[10:30:56.068]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[10:30:56.068]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[10:30:56.068]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[10:30:56.068]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[10:30:56.068]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[10:30:56.068]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[10:30:56.068]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[10:30:56.068]                     -1512233174L, -1985955764L, -425390065L, 
[10:30:56.068]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[10:30:56.068]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[10:30:56.068]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[10:30:56.068]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[10:30:56.068]                     1818328109L, -1284085436L, -1981489558L, 
[10:30:56.068]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[10:30:56.068]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[10:30:56.068]                     -1718567047L, -793788661L, -1133789126L, 
[10:30:56.068]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[10:30:56.068]                     -1823521982L, -1345991523L, -1672661737L, 
[10:30:56.068]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[10:30:56.068]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[10:30:56.068]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[10:30:56.068]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[10:30:56.068]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[10:30:56.068]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[10:30:56.068]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[10:30:56.068]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[10:30:56.068]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[10:30:56.068]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[10:30:56.068]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[10:30:56.068]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[10:30:56.068]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[10:30:56.068]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[10:30:56.068]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[10:30:56.068]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[10:30:56.068]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[10:30:56.068]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[10:30:56.068]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[10:30:56.068]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[10:30:56.068]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[10:30:56.068]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[10:30:56.068]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[10:30:56.068]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[10:30:56.068]                     -1119334354L, -1521015416L, -2041922421L, 
[10:30:56.068]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[10:30:56.068]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[10:30:56.068]                     1232111981L, -1801753084L, -1608606422L, 
[10:30:56.068]                     -1172096363L, 1420874031L, -1210473418L, 
[10:30:56.068]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[10:30:56.068]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[10:30:56.068]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[10:30:56.068]                     679371266L, -591318819L, -104578089L, -172818754L, 
[10:30:56.068]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[10:30:56.068]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[10:30:56.068]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[10:30:56.068]                     -332493318L, -1978392251L, -1691039632L, 
[10:30:56.068]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[10:30:56.068]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[10:30:56.068]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[10:30:56.068]                     87560756L, -87565624L, 426345146L, -699970416L, 
[10:30:56.068]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[10:30:56.068]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[10:30:56.068]                     -1178330196L, -687617348L, -1701912078L, 
[10:30:56.068]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[10:30:56.068]                     -1345416048L, 1816730492L, -1570431212L, 
[10:30:56.068]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[10:30:56.068]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[10:30:56.068]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[10:30:56.068]                     -1493184262L, -1943836976L, -590788308L, 
[10:30:56.068]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[10:30:56.068]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[10:30:56.068]                     1274857340L, -1205842638L, -1938479504L, 
[10:30:56.068]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[10:30:56.068]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[10:30:56.068]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[10:30:56.068]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[10:30:56.068]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[10:30:56.068]                     -1460751252L, 1201879444L, -1459788718L, 
[10:30:56.068]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[10:30:56.068]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[10:30:56.068]                     -420945808L, -1997735900L, -1838404552L, 
[10:30:56.068]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[10:30:56.068]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[10:30:56.068]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[10:30:56.068]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[10:30:56.068]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[10:30:56.068]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[10:30:56.068]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[10:30:56.068]                     942193650L, 751741680L, 689743428L, -18455976L, 
[10:30:56.068]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[10:30:56.068]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[10:30:56.068]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[10:30:56.068]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[10:30:56.068]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[10:30:56.068]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[10:30:56.068]                     -1357570110L, 1896595240L, -2066952276L, 
[10:30:56.068]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[10:30:56.068]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[10:30:56.068]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[10:30:56.068]                     769655120L, 236357794L, 181393736L, -13334772L, 
[10:30:56.068]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[10:30:56.068]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[10:30:56.068]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[10:30:56.068]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[10:30:56.068]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[10:30:56.068]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[10:30:56.068]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[10:30:56.068]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[10:30:56.068]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[10:30:56.068]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[10:30:56.068]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[10:30:56.068]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[10:30:56.068]                     -1365842884L, -438961294L, -1851472272L, 
[10:30:56.068]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[10:30:56.068]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[10:30:56.068]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[10:30:56.068]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[10:30:56.068]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[10:30:56.068]                     -594809770L, -2146766621L, -2013964635L, 
[10:30:56.068]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[10:30:56.068]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[10:30:56.068]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[10:30:56.068]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[10:30:56.068]                     -1426021878L, -1285634264L, 1507547537L, 
[10:30:56.068]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[10:30:56.068]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[10:30:56.068]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[10:30:56.068]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[10:30:56.068]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[10:30:56.068]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[10:30:56.068]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[10:30:56.068]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[10:30:56.068]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[10:30:56.068]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[10:30:56.068]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[10:30:56.068]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[10:30:56.068]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[10:30:56.068]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[10:30:56.068]                     -1604604761L, 1421229008L, -1268333714L, 
[10:30:56.068]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[10:30:56.068]                     -2070476623L, -2099222749L, 1141171236L, 
[10:30:56.068]                     -146426158L, -1797385433L, -1129376399L, 
[10:30:56.068]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[10:30:56.068]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[10:30:56.068]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[10:30:56.068]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[10:30:56.068]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[10:30:56.068]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[10:30:56.068]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[10:30:56.068]                     -1092079724L, -1765622238L, -1882554057L, 
[10:30:56.068]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[10:30:56.068]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[10:30:56.068]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[10:30:56.068]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[10:30:56.068]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[10:30:56.068]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[10:30:56.068]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[10:30:56.068]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[10:30:56.068]                     865377681L, -1127426242L), envir = base::globalenv(), 
[10:30:56.068]                       inherits = FALSE)
[10:30:56.068]                     NULL
[10:30:56.068]                   }
[10:30:56.068]                   options(future.plan = NULL)
[10:30:56.068]                   if (is.na(NA_character_)) 
[10:30:56.068]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:30:56.068]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:30:56.068]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:30:56.068]                     .init = FALSE)
[10:30:56.068]                 }
[10:30:56.068]             }
[10:30:56.068]         }
[10:30:56.068]     })
[10:30:56.068]     if (TRUE) {
[10:30:56.068]         base::sink(type = "output", split = FALSE)
[10:30:56.068]         if (TRUE) {
[10:30:56.068]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:30:56.068]         }
[10:30:56.068]         else {
[10:30:56.068]             ...future.result["stdout"] <- base::list(NULL)
[10:30:56.068]         }
[10:30:56.068]         base::close(...future.stdout)
[10:30:56.068]         ...future.stdout <- NULL
[10:30:56.068]     }
[10:30:56.068]     ...future.result$conditions <- ...future.conditions
[10:30:56.068]     ...future.result$finished <- base::Sys.time()
[10:30:56.068]     ...future.result
[10:30:56.068] }
[10:30:56.071] assign_globals() ...
[10:30:56.071] List of 5
[10:30:56.071]  $ ...future.FUN            :function (...)  
[10:30:56.071]  $ future.call.arguments    : list()
[10:30:56.071]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:56.071]  $ ...future.elements_ii    :List of 5
[10:30:56.071]   ..$ : int 0
[10:30:56.071]   ..$ : int 0
[10:30:56.071]   ..$ : int 0
[10:30:56.071]   ..$ : int 0
[10:30:56.071]   ..$ : int 0
[10:30:56.071]  $ ...future.seeds_ii       :List of 5
[10:30:56.071]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[10:30:56.071]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[10:30:56.071]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[10:30:56.071]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[10:30:56.071]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[10:30:56.071]  $ ...future.globals.maxSize: NULL
[10:30:56.071]  - attr(*, "where")=List of 5
[10:30:56.071]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:30:56.071]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:30:56.071]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:30:56.071]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:30:56.071]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:30:56.071]  - attr(*, "resolved")= logi FALSE
[10:30:56.071]  - attr(*, "total_size")= num 616
[10:30:56.071]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:56.071]  - attr(*, "already-done")= logi TRUE
[10:30:56.078] - reassign environment for ‘...future.FUN’
[10:30:56.079] - copied ‘...future.FUN’ to environment
[10:30:56.079] - copied ‘future.call.arguments’ to environment
[10:30:56.079] - copied ‘...future.elements_ii’ to environment
[10:30:56.079] - copied ‘...future.seeds_ii’ to environment
[10:30:56.079] - copied ‘...future.globals.maxSize’ to environment
[10:30:56.079] assign_globals() ... done
[10:30:56.079] plan(): Setting new future strategy stack:
[10:30:56.079] List of future strategies:
[10:30:56.079] 1. sequential:
[10:30:56.079]    - args: function (..., envir = parent.frame())
[10:30:56.079]    - tweaked: FALSE
[10:30:56.079]    - call: NULL
[10:30:56.080] plan(): nbrOfWorkers() = 1
[10:30:56.081] plan(): Setting new future strategy stack:
[10:30:56.081] List of future strategies:
[10:30:56.081] 1. sequential:
[10:30:56.081]    - args: function (..., envir = parent.frame())
[10:30:56.081]    - tweaked: FALSE
[10:30:56.081]    - call: plan(strategy)
[10:30:56.081] plan(): nbrOfWorkers() = 1
[10:30:56.081] SequentialFuture started (and completed)
[10:30:56.081] - Launch lazy future ... done
[10:30:56.082] run() for ‘SequentialFuture’ ... done
[10:30:56.082] Created future:
[10:30:56.082] SequentialFuture:
[10:30:56.082] Label: ‘future_replicate-1’
[10:30:56.082] Expression:
[10:30:56.082] {
[10:30:56.082]     do.call(function(...) {
[10:30:56.082]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.082]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:56.082]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.082]             on.exit(options(oopts), add = TRUE)
[10:30:56.082]         }
[10:30:56.082]         {
[10:30:56.082]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:56.082]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.082]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.082]                   envir = globalenv(), inherits = FALSE)
[10:30:56.082]                 ...future.FUN(...future.X_jj, ...)
[10:30:56.082]             })
[10:30:56.082]         }
[10:30:56.082]     }, args = future.call.arguments)
[10:30:56.082] }
[10:30:56.082] Lazy evaluation: FALSE
[10:30:56.082] Asynchronous evaluation: FALSE
[10:30:56.082] Local evaluation: TRUE
[10:30:56.082] Environment: R_GlobalEnv
[10:30:56.082] Capture standard output: TRUE
[10:30:56.082] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:30:56.082] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:30:56.082] Packages: <none>
[10:30:56.082] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:30:56.082] Resolved: TRUE
[10:30:56.082] Value: 280 bytes of class ‘list’
[10:30:56.082] Early signaling: FALSE
[10:30:56.082] Owner process: 7cdcbd4b-6c47-ca9a-dc3f-e18236d134b8
[10:30:56.082] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:30:56.083] Chunk #1 of 1 ... DONE
[10:30:56.083] Launching 1 futures (chunks) ... DONE
[10:30:56.083] Resolving 1 futures (chunks) ...
[10:30:56.083] resolve() on list ...
[10:30:56.083]  recursive: 0
[10:30:56.083]  length: 1
[10:30:56.083] 
[10:30:56.083] resolved() for ‘SequentialFuture’ ...
[10:30:56.084] - state: ‘finished’
[10:30:56.084] - run: TRUE
[10:30:56.084] - result: ‘FutureResult’
[10:30:56.084] resolved() for ‘SequentialFuture’ ... done
[10:30:56.084] Future #1
[10:30:56.084] signalConditionsASAP(SequentialFuture, pos=1) ...
[10:30:56.084] - nx: 1
[10:30:56.084] - relay: TRUE
[10:30:56.084] - stdout: TRUE
[10:30:56.084] - signal: TRUE
[10:30:56.085] - resignal: FALSE
[10:30:56.085] - force: TRUE
[10:30:56.085] - relayed: [n=1] FALSE
[10:30:56.085] - queued futures: [n=1] FALSE
[10:30:56.085]  - until=1
[10:30:56.085]  - relaying element #1
[10:30:56.085] - relayed: [n=1] TRUE
[10:30:56.085] - queued futures: [n=1] TRUE
[10:30:56.085] signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:30:56.086]  length: 0 (resolved future 1)
[10:30:56.086] Relaying remaining futures
[10:30:56.086] signalConditionsASAP(NULL, pos=0) ...
[10:30:56.086] - nx: 1
[10:30:56.086] - relay: TRUE
[10:30:56.086] - stdout: TRUE
[10:30:56.086] - signal: TRUE
[10:30:56.086] - resignal: FALSE
[10:30:56.086] - force: TRUE
[10:30:56.086] - relayed: [n=1] TRUE
[10:30:56.086] - queued futures: [n=1] TRUE
 - flush all
[10:30:56.087] - relayed: [n=1] TRUE
[10:30:56.087] - queued futures: [n=1] TRUE
[10:30:56.087] signalConditionsASAP(NULL, pos=0) ... done
[10:30:56.087] resolve() on list ... DONE
[10:30:56.087]  - Number of value chunks collected: 1
[10:30:56.087] Resolving 1 futures (chunks) ... DONE
[10:30:56.087] Reducing values from 1 chunks ...
[10:30:56.087]  - Number of values collected after concatenation: 5
[10:30:56.087]  - Number of values expected: 5
[10:30:56.087] Reducing values from 1 chunks ... DONE
[10:30:56.087] future_lapply() ... DONE
[10:30:56.088] future_lapply() ...
[10:30:56.088] Generating random seeds ...
[10:30:56.089] Generating random seed streams for 5 elements ...
[10:30:56.089] Generating random seed streams for 5 elements ... DONE
[10:30:56.089] Generating random seeds ... DONE
[10:30:56.089] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:30:56.090] Number of chunks: 1
[10:30:56.090] getGlobalsAndPackagesXApply() ...
[10:30:56.090]  - future.globals: TRUE
[10:30:56.092] getGlobalsAndPackages() ...
[10:30:56.092] Searching for globals...
[10:30:56.093] - globals found: [2] ‘FUN’, ‘sample’
[10:30:56.093] Searching for globals ... DONE
[10:30:56.093] Resolving globals: FALSE
[10:30:56.093] The total size of the 1 globals is 616 bytes (616 bytes)
[10:30:56.094] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[10:30:56.094] - globals: [1] ‘FUN’
[10:30:56.094] 
[10:30:56.094] getGlobalsAndPackages() ... DONE
[10:30:56.094]  - globals found/used: [n=1] ‘FUN’
[10:30:56.094]  - needed namespaces: [n=0] 
[10:30:56.094] Finding globals ... DONE
[10:30:56.095]  - use_args: TRUE
[10:30:56.095]  - Getting '...' globals ...
[10:30:56.095] resolve() on list ...
[10:30:56.095]  recursive: 0
[10:30:56.095]  length: 1
[10:30:56.095]  elements: ‘...’
[10:30:56.095]  length: 0 (resolved future 1)
[10:30:56.095] resolve() on list ... DONE
[10:30:56.096]    - '...' content: [n=0] 
[10:30:56.096] List of 1
[10:30:56.096]  $ ...: list()
[10:30:56.096]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:56.096]  - attr(*, "where")=List of 1
[10:30:56.096]   ..$ ...:<environment: 0x55aba3339bf8> 
[10:30:56.096]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:56.096]  - attr(*, "resolved")= logi TRUE
[10:30:56.096]  - attr(*, "total_size")= num NA
[10:30:56.098]  - Getting '...' globals ... DONE
[10:30:56.098] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:30:56.098] List of 2
[10:30:56.098]  $ ...future.FUN:function (...)  
[10:30:56.098]  $ ...          : list()
[10:30:56.098]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:56.098]  - attr(*, "where")=List of 2
[10:30:56.098]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:30:56.098]   ..$ ...          :<environment: 0x55aba3339bf8> 
[10:30:56.098]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:56.098]  - attr(*, "resolved")= logi FALSE
[10:30:56.098]  - attr(*, "total_size")= num 616
[10:30:56.101] Packages to be attached in all futures: [n=0] 
[10:30:56.101] getGlobalsAndPackagesXApply() ... DONE
[10:30:56.101] Number of futures (= number of chunks): 1
[10:30:56.102] Launching 1 futures (chunks) ...
[10:30:56.102] Chunk #1 of 1 ...
[10:30:56.102]  - Finding globals in 'X' for chunk #1 ...
[10:30:56.102] getGlobalsAndPackages() ...
[10:30:56.102] Searching for globals...
[10:30:56.102] 
[10:30:56.102] Searching for globals ... DONE
[10:30:56.103] - globals: [0] <none>
[10:30:56.103] getGlobalsAndPackages() ... DONE
[10:30:56.103]    + additional globals found: [n=0] 
[10:30:56.103]    + additional namespaces needed: [n=0] 
[10:30:56.103]  - Finding globals in 'X' for chunk #1 ... DONE
[10:30:56.103]  - seeds: [5] <seeds>
[10:30:56.103]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.103] getGlobalsAndPackages() ...
[10:30:56.103] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.103] Resolving globals: FALSE
[10:30:56.104] Tweak future expression to call with '...' arguments ...
[10:30:56.104] {
[10:30:56.104]     do.call(function(...) {
[10:30:56.104]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.104]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:56.104]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.104]             on.exit(options(oopts), add = TRUE)
[10:30:56.104]         }
[10:30:56.104]         {
[10:30:56.104]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:56.104]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.104]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.104]                   envir = globalenv(), inherits = FALSE)
[10:30:56.104]                 ...future.FUN(...future.X_jj, ...)
[10:30:56.104]             })
[10:30:56.104]         }
[10:30:56.104]     }, args = future.call.arguments)
[10:30:56.104] }
[10:30:56.104] Tweak future expression to call with '...' arguments ... DONE
[10:30:56.104] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.104] 
[10:30:56.105] getGlobalsAndPackages() ... DONE
[10:30:56.105] run() for ‘Future’ ...
[10:30:56.105] - state: ‘created’
[10:30:56.105] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:30:56.105] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:30:56.106] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:30:56.106]   - Field: ‘label’
[10:30:56.106]   - Field: ‘local’
[10:30:56.106]   - Field: ‘owner’
[10:30:56.106]   - Field: ‘envir’
[10:30:56.106]   - Field: ‘packages’
[10:30:56.106]   - Field: ‘gc’
[10:30:56.106]   - Field: ‘conditions’
[10:30:56.106]   - Field: ‘expr’
[10:30:56.106]   - Field: ‘uuid’
[10:30:56.107]   - Field: ‘seed’
[10:30:56.107]   - Field: ‘version’
[10:30:56.107]   - Field: ‘result’
[10:30:56.107]   - Field: ‘asynchronous’
[10:30:56.107]   - Field: ‘calls’
[10:30:56.107]   - Field: ‘globals’
[10:30:56.107]   - Field: ‘stdout’
[10:30:56.107]   - Field: ‘earlySignal’
[10:30:56.107]   - Field: ‘lazy’
[10:30:56.107]   - Field: ‘state’
[10:30:56.108] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:30:56.108] - Launch lazy future ...
[10:30:56.108] Packages needed by the future expression (n = 0): <none>
[10:30:56.108] Packages needed by future strategies (n = 0): <none>
[10:30:56.108] {
[10:30:56.108]     {
[10:30:56.108]         {
[10:30:56.108]             ...future.startTime <- base::Sys.time()
[10:30:56.108]             {
[10:30:56.108]                 {
[10:30:56.108]                   {
[10:30:56.108]                     base::local({
[10:30:56.108]                       has_future <- base::requireNamespace("future", 
[10:30:56.108]                         quietly = TRUE)
[10:30:56.108]                       if (has_future) {
[10:30:56.108]                         ns <- base::getNamespace("future")
[10:30:56.108]                         version <- ns[[".package"]][["version"]]
[10:30:56.108]                         if (is.null(version)) 
[10:30:56.108]                           version <- utils::packageVersion("future")
[10:30:56.108]                       }
[10:30:56.108]                       else {
[10:30:56.108]                         version <- NULL
[10:30:56.108]                       }
[10:30:56.108]                       if (!has_future || version < "1.8.0") {
[10:30:56.108]                         info <- base::c(r_version = base::gsub("R version ", 
[10:30:56.108]                           "", base::R.version$version.string), 
[10:30:56.108]                           platform = base::sprintf("%s (%s-bit)", 
[10:30:56.108]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:30:56.108]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:30:56.108]                             "release", "version")], collapse = " "), 
[10:30:56.108]                           hostname = base::Sys.info()[["nodename"]])
[10:30:56.108]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:30:56.108]                           info)
[10:30:56.108]                         info <- base::paste(info, collapse = "; ")
[10:30:56.108]                         if (!has_future) {
[10:30:56.108]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:30:56.108]                             info)
[10:30:56.108]                         }
[10:30:56.108]                         else {
[10:30:56.108]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:30:56.108]                             info, version)
[10:30:56.108]                         }
[10:30:56.108]                         base::stop(msg)
[10:30:56.108]                       }
[10:30:56.108]                     })
[10:30:56.108]                   }
[10:30:56.108]                   ...future.strategy.old <- future::plan("list")
[10:30:56.108]                   options(future.plan = NULL)
[10:30:56.108]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:30:56.108]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:30:56.108]                 }
[10:30:56.108]                 ...future.workdir <- getwd()
[10:30:56.108]             }
[10:30:56.108]             ...future.oldOptions <- base::as.list(base::.Options)
[10:30:56.108]             ...future.oldEnvVars <- base::Sys.getenv()
[10:30:56.108]         }
[10:30:56.108]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:30:56.108]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:30:56.108]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:30:56.108]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:30:56.108]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:30:56.108]             future.stdout.windows.reencode = NULL, width = 80L)
[10:30:56.108]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:30:56.108]             base::names(...future.oldOptions))
[10:30:56.108]     }
[10:30:56.108]     if (FALSE) {
[10:30:56.108]     }
[10:30:56.108]     else {
[10:30:56.108]         if (TRUE) {
[10:30:56.108]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:30:56.108]                 open = "w")
[10:30:56.108]         }
[10:30:56.108]         else {
[10:30:56.108]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:30:56.108]                 windows = "NUL", "/dev/null"), open = "w")
[10:30:56.108]         }
[10:30:56.108]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:30:56.108]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:30:56.108]             base::sink(type = "output", split = FALSE)
[10:30:56.108]             base::close(...future.stdout)
[10:30:56.108]         }, add = TRUE)
[10:30:56.108]     }
[10:30:56.108]     ...future.frame <- base::sys.nframe()
[10:30:56.108]     ...future.conditions <- base::list()
[10:30:56.108]     ...future.rng <- base::globalenv()$.Random.seed
[10:30:56.108]     if (FALSE) {
[10:30:56.108]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:30:56.108]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:30:56.108]     }
[10:30:56.108]     ...future.result <- base::tryCatch({
[10:30:56.108]         base::withCallingHandlers({
[10:30:56.108]             ...future.value <- base::withVisible(base::local({
[10:30:56.108]                 do.call(function(...) {
[10:30:56.108]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.108]                   if (!identical(...future.globals.maxSize.org, 
[10:30:56.108]                     ...future.globals.maxSize)) {
[10:30:56.108]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.108]                     on.exit(options(oopts), add = TRUE)
[10:30:56.108]                   }
[10:30:56.108]                   {
[10:30:56.108]                     lapply(seq_along(...future.elements_ii), 
[10:30:56.108]                       FUN = function(jj) {
[10:30:56.108]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.108]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.108]                           envir = globalenv(), inherits = FALSE)
[10:30:56.108]                         ...future.FUN(...future.X_jj, ...)
[10:30:56.108]                       })
[10:30:56.108]                   }
[10:30:56.108]                 }, args = future.call.arguments)
[10:30:56.108]             }))
[10:30:56.108]             future::FutureResult(value = ...future.value$value, 
[10:30:56.108]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:56.108]                   ...future.rng), globalenv = if (FALSE) 
[10:30:56.108]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:30:56.108]                     ...future.globalenv.names))
[10:30:56.108]                 else NULL, started = ...future.startTime, version = "1.8")
[10:30:56.108]         }, condition = base::local({
[10:30:56.108]             c <- base::c
[10:30:56.108]             inherits <- base::inherits
[10:30:56.108]             invokeRestart <- base::invokeRestart
[10:30:56.108]             length <- base::length
[10:30:56.108]             list <- base::list
[10:30:56.108]             seq.int <- base::seq.int
[10:30:56.108]             signalCondition <- base::signalCondition
[10:30:56.108]             sys.calls <- base::sys.calls
[10:30:56.108]             `[[` <- base::`[[`
[10:30:56.108]             `+` <- base::`+`
[10:30:56.108]             `<<-` <- base::`<<-`
[10:30:56.108]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:30:56.108]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:30:56.108]                   3L)]
[10:30:56.108]             }
[10:30:56.108]             function(cond) {
[10:30:56.108]                 is_error <- inherits(cond, "error")
[10:30:56.108]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:30:56.108]                   NULL)
[10:30:56.108]                 if (is_error) {
[10:30:56.108]                   sessionInformation <- function() {
[10:30:56.108]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:30:56.108]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:30:56.108]                       search = base::search(), system = base::Sys.info())
[10:30:56.108]                   }
[10:30:56.108]                   ...future.conditions[[length(...future.conditions) + 
[10:30:56.108]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:30:56.108]                     cond$call), session = sessionInformation(), 
[10:30:56.108]                     timestamp = base::Sys.time(), signaled = 0L)
[10:30:56.108]                   signalCondition(cond)
[10:30:56.108]                 }
[10:30:56.108]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:30:56.108]                 "immediateCondition"))) {
[10:30:56.108]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:30:56.108]                   ...future.conditions[[length(...future.conditions) + 
[10:30:56.108]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:30:56.108]                   if (TRUE && !signal) {
[10:30:56.108]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.108]                     {
[10:30:56.108]                       inherits <- base::inherits
[10:30:56.108]                       invokeRestart <- base::invokeRestart
[10:30:56.108]                       is.null <- base::is.null
[10:30:56.108]                       muffled <- FALSE
[10:30:56.108]                       if (inherits(cond, "message")) {
[10:30:56.108]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:56.108]                         if (muffled) 
[10:30:56.108]                           invokeRestart("muffleMessage")
[10:30:56.108]                       }
[10:30:56.108]                       else if (inherits(cond, "warning")) {
[10:30:56.108]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:56.108]                         if (muffled) 
[10:30:56.108]                           invokeRestart("muffleWarning")
[10:30:56.108]                       }
[10:30:56.108]                       else if (inherits(cond, "condition")) {
[10:30:56.108]                         if (!is.null(pattern)) {
[10:30:56.108]                           computeRestarts <- base::computeRestarts
[10:30:56.108]                           grepl <- base::grepl
[10:30:56.108]                           restarts <- computeRestarts(cond)
[10:30:56.108]                           for (restart in restarts) {
[10:30:56.108]                             name <- restart$name
[10:30:56.108]                             if (is.null(name)) 
[10:30:56.108]                               next
[10:30:56.108]                             if (!grepl(pattern, name)) 
[10:30:56.108]                               next
[10:30:56.108]                             invokeRestart(restart)
[10:30:56.108]                             muffled <- TRUE
[10:30:56.108]                             break
[10:30:56.108]                           }
[10:30:56.108]                         }
[10:30:56.108]                       }
[10:30:56.108]                       invisible(muffled)
[10:30:56.108]                     }
[10:30:56.108]                     muffleCondition(cond, pattern = "^muffle")
[10:30:56.108]                   }
[10:30:56.108]                 }
[10:30:56.108]                 else {
[10:30:56.108]                   if (TRUE) {
[10:30:56.108]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.108]                     {
[10:30:56.108]                       inherits <- base::inherits
[10:30:56.108]                       invokeRestart <- base::invokeRestart
[10:30:56.108]                       is.null <- base::is.null
[10:30:56.108]                       muffled <- FALSE
[10:30:56.108]                       if (inherits(cond, "message")) {
[10:30:56.108]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:56.108]                         if (muffled) 
[10:30:56.108]                           invokeRestart("muffleMessage")
[10:30:56.108]                       }
[10:30:56.108]                       else if (inherits(cond, "warning")) {
[10:30:56.108]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:56.108]                         if (muffled) 
[10:30:56.108]                           invokeRestart("muffleWarning")
[10:30:56.108]                       }
[10:30:56.108]                       else if (inherits(cond, "condition")) {
[10:30:56.108]                         if (!is.null(pattern)) {
[10:30:56.108]                           computeRestarts <- base::computeRestarts
[10:30:56.108]                           grepl <- base::grepl
[10:30:56.108]                           restarts <- computeRestarts(cond)
[10:30:56.108]                           for (restart in restarts) {
[10:30:56.108]                             name <- restart$name
[10:30:56.108]                             if (is.null(name)) 
[10:30:56.108]                               next
[10:30:56.108]                             if (!grepl(pattern, name)) 
[10:30:56.108]                               next
[10:30:56.108]                             invokeRestart(restart)
[10:30:56.108]                             muffled <- TRUE
[10:30:56.108]                             break
[10:30:56.108]                           }
[10:30:56.108]                         }
[10:30:56.108]                       }
[10:30:56.108]                       invisible(muffled)
[10:30:56.108]                     }
[10:30:56.108]                     muffleCondition(cond, pattern = "^muffle")
[10:30:56.108]                   }
[10:30:56.108]                 }
[10:30:56.108]             }
[10:30:56.108]         }))
[10:30:56.108]     }, error = function(ex) {
[10:30:56.108]         base::structure(base::list(value = NULL, visible = NULL, 
[10:30:56.108]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:56.108]                 ...future.rng), started = ...future.startTime, 
[10:30:56.108]             finished = Sys.time(), session_uuid = NA_character_, 
[10:30:56.108]             version = "1.8"), class = "FutureResult")
[10:30:56.108]     }, finally = {
[10:30:56.108]         if (!identical(...future.workdir, getwd())) 
[10:30:56.108]             setwd(...future.workdir)
[10:30:56.108]         {
[10:30:56.108]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:30:56.108]                 ...future.oldOptions$nwarnings <- NULL
[10:30:56.108]             }
[10:30:56.108]             base::options(...future.oldOptions)
[10:30:56.108]             if (.Platform$OS.type == "windows") {
[10:30:56.108]                 old_names <- names(...future.oldEnvVars)
[10:30:56.108]                 envs <- base::Sys.getenv()
[10:30:56.108]                 names <- names(envs)
[10:30:56.108]                 common <- intersect(names, old_names)
[10:30:56.108]                 added <- setdiff(names, old_names)
[10:30:56.108]                 removed <- setdiff(old_names, names)
[10:30:56.108]                 changed <- common[...future.oldEnvVars[common] != 
[10:30:56.108]                   envs[common]]
[10:30:56.108]                 NAMES <- toupper(changed)
[10:30:56.108]                 args <- list()
[10:30:56.108]                 for (kk in seq_along(NAMES)) {
[10:30:56.108]                   name <- changed[[kk]]
[10:30:56.108]                   NAME <- NAMES[[kk]]
[10:30:56.108]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.108]                     next
[10:30:56.108]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:56.108]                 }
[10:30:56.108]                 NAMES <- toupper(added)
[10:30:56.108]                 for (kk in seq_along(NAMES)) {
[10:30:56.108]                   name <- added[[kk]]
[10:30:56.108]                   NAME <- NAMES[[kk]]
[10:30:56.108]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.108]                     next
[10:30:56.108]                   args[[name]] <- ""
[10:30:56.108]                 }
[10:30:56.108]                 NAMES <- toupper(removed)
[10:30:56.108]                 for (kk in seq_along(NAMES)) {
[10:30:56.108]                   name <- removed[[kk]]
[10:30:56.108]                   NAME <- NAMES[[kk]]
[10:30:56.108]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.108]                     next
[10:30:56.108]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:56.108]                 }
[10:30:56.108]                 if (length(args) > 0) 
[10:30:56.108]                   base::do.call(base::Sys.setenv, args = args)
[10:30:56.108]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:30:56.108]             }
[10:30:56.108]             else {
[10:30:56.108]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:30:56.108]             }
[10:30:56.108]             {
[10:30:56.108]                 if (base::length(...future.futureOptionsAdded) > 
[10:30:56.108]                   0L) {
[10:30:56.108]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:30:56.108]                   base::names(opts) <- ...future.futureOptionsAdded
[10:30:56.108]                   base::options(opts)
[10:30:56.108]                 }
[10:30:56.108]                 {
[10:30:56.108]                   {
[10:30:56.108]                     base::assign(".Random.seed", c(10403L, 4L, 
[10:30:56.108]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[10:30:56.108]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[10:30:56.108]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[10:30:56.108]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[10:30:56.108]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[10:30:56.108]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[10:30:56.108]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[10:30:56.108]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[10:30:56.108]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[10:30:56.108]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[10:30:56.108]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[10:30:56.108]                     -1512233174L, -1985955764L, -425390065L, 
[10:30:56.108]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[10:30:56.108]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[10:30:56.108]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[10:30:56.108]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[10:30:56.108]                     1818328109L, -1284085436L, -1981489558L, 
[10:30:56.108]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[10:30:56.108]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[10:30:56.108]                     -1718567047L, -793788661L, -1133789126L, 
[10:30:56.108]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[10:30:56.108]                     -1823521982L, -1345991523L, -1672661737L, 
[10:30:56.108]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[10:30:56.108]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[10:30:56.108]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[10:30:56.108]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[10:30:56.108]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[10:30:56.108]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[10:30:56.108]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[10:30:56.108]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[10:30:56.108]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[10:30:56.108]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[10:30:56.108]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[10:30:56.108]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[10:30:56.108]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[10:30:56.108]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[10:30:56.108]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[10:30:56.108]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[10:30:56.108]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[10:30:56.108]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[10:30:56.108]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[10:30:56.108]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[10:30:56.108]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[10:30:56.108]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[10:30:56.108]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[10:30:56.108]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[10:30:56.108]                     -1119334354L, -1521015416L, -2041922421L, 
[10:30:56.108]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[10:30:56.108]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[10:30:56.108]                     1232111981L, -1801753084L, -1608606422L, 
[10:30:56.108]                     -1172096363L, 1420874031L, -1210473418L, 
[10:30:56.108]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[10:30:56.108]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[10:30:56.108]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[10:30:56.108]                     679371266L, -591318819L, -104578089L, -172818754L, 
[10:30:56.108]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[10:30:56.108]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[10:30:56.108]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[10:30:56.108]                     -332493318L, -1978392251L, -1691039632L, 
[10:30:56.108]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[10:30:56.108]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[10:30:56.108]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[10:30:56.108]                     87560756L, -87565624L, 426345146L, -699970416L, 
[10:30:56.108]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[10:30:56.108]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[10:30:56.108]                     -1178330196L, -687617348L, -1701912078L, 
[10:30:56.108]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[10:30:56.108]                     -1345416048L, 1816730492L, -1570431212L, 
[10:30:56.108]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[10:30:56.108]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[10:30:56.108]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[10:30:56.108]                     -1493184262L, -1943836976L, -590788308L, 
[10:30:56.108]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[10:30:56.108]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[10:30:56.108]                     1274857340L, -1205842638L, -1938479504L, 
[10:30:56.108]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[10:30:56.108]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[10:30:56.108]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[10:30:56.108]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[10:30:56.108]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[10:30:56.108]                     -1460751252L, 1201879444L, -1459788718L, 
[10:30:56.108]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[10:30:56.108]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[10:30:56.108]                     -420945808L, -1997735900L, -1838404552L, 
[10:30:56.108]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[10:30:56.108]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[10:30:56.108]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[10:30:56.108]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[10:30:56.108]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[10:30:56.108]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[10:30:56.108]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[10:30:56.108]                     942193650L, 751741680L, 689743428L, -18455976L, 
[10:30:56.108]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[10:30:56.108]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[10:30:56.108]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[10:30:56.108]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[10:30:56.108]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[10:30:56.108]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[10:30:56.108]                     -1357570110L, 1896595240L, -2066952276L, 
[10:30:56.108]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[10:30:56.108]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[10:30:56.108]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[10:30:56.108]                     769655120L, 236357794L, 181393736L, -13334772L, 
[10:30:56.108]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[10:30:56.108]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[10:30:56.108]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[10:30:56.108]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[10:30:56.108]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[10:30:56.108]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[10:30:56.108]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[10:30:56.108]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[10:30:56.108]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[10:30:56.108]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[10:30:56.108]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[10:30:56.108]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[10:30:56.108]                     -1365842884L, -438961294L, -1851472272L, 
[10:30:56.108]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[10:30:56.108]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[10:30:56.108]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[10:30:56.108]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[10:30:56.108]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[10:30:56.108]                     -594809770L, -2146766621L, -2013964635L, 
[10:30:56.108]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[10:30:56.108]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[10:30:56.108]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[10:30:56.108]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[10:30:56.108]                     -1426021878L, -1285634264L, 1507547537L, 
[10:30:56.108]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[10:30:56.108]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[10:30:56.108]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[10:30:56.108]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[10:30:56.108]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[10:30:56.108]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[10:30:56.108]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[10:30:56.108]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[10:30:56.108]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[10:30:56.108]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[10:30:56.108]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[10:30:56.108]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[10:30:56.108]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[10:30:56.108]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[10:30:56.108]                     -1604604761L, 1421229008L, -1268333714L, 
[10:30:56.108]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[10:30:56.108]                     -2070476623L, -2099222749L, 1141171236L, 
[10:30:56.108]                     -146426158L, -1797385433L, -1129376399L, 
[10:30:56.108]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[10:30:56.108]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[10:30:56.108]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[10:30:56.108]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[10:30:56.108]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[10:30:56.108]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[10:30:56.108]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[10:30:56.108]                     -1092079724L, -1765622238L, -1882554057L, 
[10:30:56.108]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[10:30:56.108]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[10:30:56.108]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[10:30:56.108]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[10:30:56.108]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[10:30:56.108]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[10:30:56.108]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[10:30:56.108]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[10:30:56.108]                     865377681L, -1127426242L), envir = base::globalenv(), 
[10:30:56.108]                       inherits = FALSE)
[10:30:56.108]                     NULL
[10:30:56.108]                   }
[10:30:56.108]                   options(future.plan = NULL)
[10:30:56.108]                   if (is.na(NA_character_)) 
[10:30:56.108]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:30:56.108]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:30:56.108]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:30:56.108]                     .init = FALSE)
[10:30:56.108]                 }
[10:30:56.108]             }
[10:30:56.108]         }
[10:30:56.108]     })
[10:30:56.108]     if (TRUE) {
[10:30:56.108]         base::sink(type = "output", split = FALSE)
[10:30:56.108]         if (TRUE) {
[10:30:56.108]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:30:56.108]         }
[10:30:56.108]         else {
[10:30:56.108]             ...future.result["stdout"] <- base::list(NULL)
[10:30:56.108]         }
[10:30:56.108]         base::close(...future.stdout)
[10:30:56.108]         ...future.stdout <- NULL
[10:30:56.108]     }
[10:30:56.108]     ...future.result$conditions <- ...future.conditions
[10:30:56.108]     ...future.result$finished <- base::Sys.time()
[10:30:56.108]     ...future.result
[10:30:56.108] }
[10:30:56.111] assign_globals() ...
[10:30:56.111] List of 5
[10:30:56.111]  $ ...future.FUN            :function (...)  
[10:30:56.111]  $ future.call.arguments    : list()
[10:30:56.111]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:56.111]  $ ...future.elements_ii    :List of 5
[10:30:56.111]   ..$ : int 0
[10:30:56.111]   ..$ : int 0
[10:30:56.111]   ..$ : int 0
[10:30:56.111]   ..$ : int 0
[10:30:56.111]   ..$ : int 0
[10:30:56.111]  $ ...future.seeds_ii       :List of 5
[10:30:56.111]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[10:30:56.111]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[10:30:56.111]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[10:30:56.111]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[10:30:56.111]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[10:30:56.111]  $ ...future.globals.maxSize: NULL
[10:30:56.111]  - attr(*, "where")=List of 5
[10:30:56.111]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:30:56.111]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:30:56.111]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:30:56.111]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:30:56.111]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:30:56.111]  - attr(*, "resolved")= logi FALSE
[10:30:56.111]  - attr(*, "total_size")= num 616
[10:30:56.111]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:56.111]  - attr(*, "already-done")= logi TRUE
[10:30:56.120] - reassign environment for ‘...future.FUN’
[10:30:56.121] - copied ‘...future.FUN’ to environment
[10:30:56.121] - copied ‘future.call.arguments’ to environment
[10:30:56.121] - copied ‘...future.elements_ii’ to environment
[10:30:56.121] - copied ‘...future.seeds_ii’ to environment
[10:30:56.121] - copied ‘...future.globals.maxSize’ to environment
[10:30:56.121] assign_globals() ... done
[10:30:56.121] plan(): Setting new future strategy stack:
[10:30:56.121] List of future strategies:
[10:30:56.121] 1. sequential:
[10:30:56.121]    - args: function (..., envir = parent.frame())
[10:30:56.121]    - tweaked: FALSE
[10:30:56.121]    - call: NULL
[10:30:56.122] plan(): nbrOfWorkers() = 1
[10:30:56.123] plan(): Setting new future strategy stack:
[10:30:56.123] List of future strategies:
[10:30:56.123] 1. sequential:
[10:30:56.123]    - args: function (..., envir = parent.frame())
[10:30:56.123]    - tweaked: FALSE
[10:30:56.123]    - call: plan(strategy)
[10:30:56.123] plan(): nbrOfWorkers() = 1
[10:30:56.123] SequentialFuture started (and completed)
[10:30:56.123] - Launch lazy future ... done
[10:30:56.124] run() for ‘SequentialFuture’ ... done
[10:30:56.124] Created future:
[10:30:56.124] SequentialFuture:
[10:30:56.124] Label: ‘future_replicate-1’
[10:30:56.124] Expression:
[10:30:56.124] {
[10:30:56.124]     do.call(function(...) {
[10:30:56.124]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.124]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:56.124]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.124]             on.exit(options(oopts), add = TRUE)
[10:30:56.124]         }
[10:30:56.124]         {
[10:30:56.124]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:56.124]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.124]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.124]                   envir = globalenv(), inherits = FALSE)
[10:30:56.124]                 ...future.FUN(...future.X_jj, ...)
[10:30:56.124]             })
[10:30:56.124]         }
[10:30:56.124]     }, args = future.call.arguments)
[10:30:56.124] }
[10:30:56.124] Lazy evaluation: FALSE
[10:30:56.124] Asynchronous evaluation: FALSE
[10:30:56.124] Local evaluation: TRUE
[10:30:56.124] Environment: R_GlobalEnv
[10:30:56.124] Capture standard output: TRUE
[10:30:56.124] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:30:56.124] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:30:56.124] Packages: <none>
[10:30:56.124] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:30:56.124] Resolved: TRUE
[10:30:56.124] Value: 280 bytes of class ‘list’
[10:30:56.124] Early signaling: FALSE
[10:30:56.124] Owner process: 7cdcbd4b-6c47-ca9a-dc3f-e18236d134b8
[10:30:56.124] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:30:56.125] Chunk #1 of 1 ... DONE
[10:30:56.125] Launching 1 futures (chunks) ... DONE
[10:30:56.125] Resolving 1 futures (chunks) ...
[10:30:56.125] resolve() on list ...
[10:30:56.125]  recursive: 0
[10:30:56.125]  length: 1
[10:30:56.125] 
[10:30:56.126] resolved() for ‘SequentialFuture’ ...
[10:30:56.126] - state: ‘finished’
[10:30:56.126] - run: TRUE
[10:30:56.126] - result: ‘FutureResult’
[10:30:56.126] resolved() for ‘SequentialFuture’ ... done
[10:30:56.126] Future #1
[10:30:56.126] signalConditionsASAP(SequentialFuture, pos=1) ...
[10:30:56.126] - nx: 1
[10:30:56.126] - relay: TRUE
[10:30:56.126] - stdout: TRUE
[10:30:56.127] - signal: TRUE
[10:30:56.127] - resignal: FALSE
[10:30:56.127] - force: TRUE
[10:30:56.127] - relayed: [n=1] FALSE
[10:30:56.127] - queued futures: [n=1] FALSE
[10:30:56.127]  - until=1
[10:30:56.127]  - relaying element #1
[10:30:56.127] - relayed: [n=1] TRUE
[10:30:56.127] - queued futures: [n=1] TRUE
[10:30:56.127] signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:30:56.128]  length: 0 (resolved future 1)
[10:30:56.128] Relaying remaining futures
[10:30:56.128] signalConditionsASAP(NULL, pos=0) ...
[10:30:56.128] - nx: 1
[10:30:56.128] - relay: TRUE
[10:30:56.128] - stdout: TRUE
[10:30:56.128] - signal: TRUE
[10:30:56.128] - resignal: FALSE
[10:30:56.128] - force: TRUE
[10:30:56.128] - relayed: [n=1] TRUE
[10:30:56.128] - queued futures: [n=1] TRUE
 - flush all
[10:30:56.129] - relayed: [n=1] TRUE
[10:30:56.129] - queued futures: [n=1] TRUE
[10:30:56.129] signalConditionsASAP(NULL, pos=0) ... done
[10:30:56.129] resolve() on list ... DONE
[10:30:56.129]  - Number of value chunks collected: 1
[10:30:56.129] Resolving 1 futures (chunks) ... DONE
[10:30:56.129] Reducing values from 1 chunks ...
[10:30:56.129]  - Number of values collected after concatenation: 5
[10:30:56.129]  - Number of values expected: 5
[10:30:56.129] Reducing values from 1 chunks ... DONE
[10:30:56.130] future_lapply() ... DONE
[10:30:56.130] future_lapply() ...
[10:30:56.130] Generating random seeds ...
[10:30:56.130] Generating random seed streams for 5 elements ...
[10:30:56.130] Generating random seed streams for 5 elements ... DONE
[10:30:56.131] Generating random seeds ... DONE
[10:30:56.131] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:30:56.131] Number of chunks: 1
[10:30:56.131] getGlobalsAndPackagesXApply() ...
[10:30:56.131]  - future.globals: TRUE
[10:30:56.131] getGlobalsAndPackages() ...
[10:30:56.132] Searching for globals...
[10:30:56.133] - globals found: [2] ‘FUN’, ‘sample’
[10:30:56.133] Searching for globals ... DONE
[10:30:56.133] Resolving globals: FALSE
[10:30:56.133] The total size of the 1 globals is 616 bytes (616 bytes)
[10:30:56.133] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[10:30:56.134] - globals: [1] ‘FUN’
[10:30:56.134] 
[10:30:56.134] getGlobalsAndPackages() ... DONE
[10:30:56.134]  - globals found/used: [n=1] ‘FUN’
[10:30:56.134]  - needed namespaces: [n=0] 
[10:30:56.134] Finding globals ... DONE
[10:30:56.134]  - use_args: TRUE
[10:30:56.134]  - Getting '...' globals ...
[10:30:56.135] resolve() on list ...
[10:30:56.135]  recursive: 0
[10:30:56.135]  length: 1
[10:30:56.135]  elements: ‘...’
[10:30:56.135]  length: 0 (resolved future 1)
[10:30:56.135] resolve() on list ... DONE
[10:30:56.135]    - '...' content: [n=0] 
[10:30:56.135] List of 1
[10:30:56.135]  $ ...: list()
[10:30:56.135]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:56.135]  - attr(*, "where")=List of 1
[10:30:56.135]   ..$ ...:<environment: 0x55aba2613a20> 
[10:30:56.135]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:56.135]  - attr(*, "resolved")= logi TRUE
[10:30:56.135]  - attr(*, "total_size")= num NA
[10:30:56.138]  - Getting '...' globals ... DONE
[10:30:56.138] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:30:56.138] List of 2
[10:30:56.138]  $ ...future.FUN:function (...)  
[10:30:56.138]  $ ...          : list()
[10:30:56.138]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:56.138]  - attr(*, "where")=List of 2
[10:30:56.138]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:30:56.138]   ..$ ...          :<environment: 0x55aba2613a20> 
[10:30:56.138]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:56.138]  - attr(*, "resolved")= logi FALSE
[10:30:56.138]  - attr(*, "total_size")= num 616
[10:30:56.141] Packages to be attached in all futures: [n=0] 
[10:30:56.141] getGlobalsAndPackagesXApply() ... DONE
[10:30:56.141] Number of futures (= number of chunks): 1
[10:30:56.141] Launching 1 futures (chunks) ...
[10:30:56.141] Chunk #1 of 1 ...
[10:30:56.143]  - Finding globals in 'X' for chunk #1 ...
[10:30:56.143] getGlobalsAndPackages() ...
[10:30:56.143] Searching for globals...
[10:30:56.144] 
[10:30:56.144] Searching for globals ... DONE
[10:30:56.144] - globals: [0] <none>
[10:30:56.144] getGlobalsAndPackages() ... DONE
[10:30:56.144]    + additional globals found: [n=0] 
[10:30:56.144]    + additional namespaces needed: [n=0] 
[10:30:56.144]  - Finding globals in 'X' for chunk #1 ... DONE
[10:30:56.144]  - seeds: [5] <seeds>
[10:30:56.144]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.145] getGlobalsAndPackages() ...
[10:30:56.145] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.145] Resolving globals: FALSE
[10:30:56.145] Tweak future expression to call with '...' arguments ...
[10:30:56.145] {
[10:30:56.145]     do.call(function(...) {
[10:30:56.145]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.145]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:56.145]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.145]             on.exit(options(oopts), add = TRUE)
[10:30:56.145]         }
[10:30:56.145]         {
[10:30:56.145]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:56.145]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.145]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.145]                   envir = globalenv(), inherits = FALSE)
[10:30:56.145]                 ...future.FUN(...future.X_jj, ...)
[10:30:56.145]             })
[10:30:56.145]         }
[10:30:56.145]     }, args = future.call.arguments)
[10:30:56.145] }
[10:30:56.145] Tweak future expression to call with '...' arguments ... DONE
[10:30:56.146] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.146] 
[10:30:56.146] getGlobalsAndPackages() ... DONE
[10:30:56.146] run() for ‘Future’ ...
[10:30:56.146] - state: ‘created’
[10:30:56.146] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:30:56.147] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:30:56.147] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:30:56.147]   - Field: ‘label’
[10:30:56.147]   - Field: ‘local’
[10:30:56.147]   - Field: ‘owner’
[10:30:56.147]   - Field: ‘envir’
[10:30:56.147]   - Field: ‘packages’
[10:30:56.147]   - Field: ‘gc’
[10:30:56.148]   - Field: ‘conditions’
[10:30:56.148]   - Field: ‘expr’
[10:30:56.148]   - Field: ‘uuid’
[10:30:56.148]   - Field: ‘seed’
[10:30:56.148]   - Field: ‘version’
[10:30:56.148]   - Field: ‘result’
[10:30:56.148]   - Field: ‘asynchronous’
[10:30:56.148]   - Field: ‘calls’
[10:30:56.148]   - Field: ‘globals’
[10:30:56.148]   - Field: ‘stdout’
[10:30:56.148]   - Field: ‘earlySignal’
[10:30:56.149]   - Field: ‘lazy’
[10:30:56.149]   - Field: ‘state’
[10:30:56.149] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:30:56.149] - Launch lazy future ...
[10:30:56.149] Packages needed by the future expression (n = 0): <none>
[10:30:56.149] Packages needed by future strategies (n = 0): <none>
[10:30:56.150] {
[10:30:56.150]     {
[10:30:56.150]         {
[10:30:56.150]             ...future.startTime <- base::Sys.time()
[10:30:56.150]             {
[10:30:56.150]                 {
[10:30:56.150]                   {
[10:30:56.150]                     base::local({
[10:30:56.150]                       has_future <- base::requireNamespace("future", 
[10:30:56.150]                         quietly = TRUE)
[10:30:56.150]                       if (has_future) {
[10:30:56.150]                         ns <- base::getNamespace("future")
[10:30:56.150]                         version <- ns[[".package"]][["version"]]
[10:30:56.150]                         if (is.null(version)) 
[10:30:56.150]                           version <- utils::packageVersion("future")
[10:30:56.150]                       }
[10:30:56.150]                       else {
[10:30:56.150]                         version <- NULL
[10:30:56.150]                       }
[10:30:56.150]                       if (!has_future || version < "1.8.0") {
[10:30:56.150]                         info <- base::c(r_version = base::gsub("R version ", 
[10:30:56.150]                           "", base::R.version$version.string), 
[10:30:56.150]                           platform = base::sprintf("%s (%s-bit)", 
[10:30:56.150]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:30:56.150]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:30:56.150]                             "release", "version")], collapse = " "), 
[10:30:56.150]                           hostname = base::Sys.info()[["nodename"]])
[10:30:56.150]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:30:56.150]                           info)
[10:30:56.150]                         info <- base::paste(info, collapse = "; ")
[10:30:56.150]                         if (!has_future) {
[10:30:56.150]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:30:56.150]                             info)
[10:30:56.150]                         }
[10:30:56.150]                         else {
[10:30:56.150]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:30:56.150]                             info, version)
[10:30:56.150]                         }
[10:30:56.150]                         base::stop(msg)
[10:30:56.150]                       }
[10:30:56.150]                     })
[10:30:56.150]                   }
[10:30:56.150]                   ...future.strategy.old <- future::plan("list")
[10:30:56.150]                   options(future.plan = NULL)
[10:30:56.150]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:30:56.150]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:30:56.150]                 }
[10:30:56.150]                 ...future.workdir <- getwd()
[10:30:56.150]             }
[10:30:56.150]             ...future.oldOptions <- base::as.list(base::.Options)
[10:30:56.150]             ...future.oldEnvVars <- base::Sys.getenv()
[10:30:56.150]         }
[10:30:56.150]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:30:56.150]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:30:56.150]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:30:56.150]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:30:56.150]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:30:56.150]             future.stdout.windows.reencode = NULL, width = 80L)
[10:30:56.150]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:30:56.150]             base::names(...future.oldOptions))
[10:30:56.150]     }
[10:30:56.150]     if (FALSE) {
[10:30:56.150]     }
[10:30:56.150]     else {
[10:30:56.150]         if (TRUE) {
[10:30:56.150]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:30:56.150]                 open = "w")
[10:30:56.150]         }
[10:30:56.150]         else {
[10:30:56.150]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:30:56.150]                 windows = "NUL", "/dev/null"), open = "w")
[10:30:56.150]         }
[10:30:56.150]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:30:56.150]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:30:56.150]             base::sink(type = "output", split = FALSE)
[10:30:56.150]             base::close(...future.stdout)
[10:30:56.150]         }, add = TRUE)
[10:30:56.150]     }
[10:30:56.150]     ...future.frame <- base::sys.nframe()
[10:30:56.150]     ...future.conditions <- base::list()
[10:30:56.150]     ...future.rng <- base::globalenv()$.Random.seed
[10:30:56.150]     if (FALSE) {
[10:30:56.150]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:30:56.150]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:30:56.150]     }
[10:30:56.150]     ...future.result <- base::tryCatch({
[10:30:56.150]         base::withCallingHandlers({
[10:30:56.150]             ...future.value <- base::withVisible(base::local({
[10:30:56.150]                 do.call(function(...) {
[10:30:56.150]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.150]                   if (!identical(...future.globals.maxSize.org, 
[10:30:56.150]                     ...future.globals.maxSize)) {
[10:30:56.150]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.150]                     on.exit(options(oopts), add = TRUE)
[10:30:56.150]                   }
[10:30:56.150]                   {
[10:30:56.150]                     lapply(seq_along(...future.elements_ii), 
[10:30:56.150]                       FUN = function(jj) {
[10:30:56.150]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.150]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.150]                           envir = globalenv(), inherits = FALSE)
[10:30:56.150]                         ...future.FUN(...future.X_jj, ...)
[10:30:56.150]                       })
[10:30:56.150]                   }
[10:30:56.150]                 }, args = future.call.arguments)
[10:30:56.150]             }))
[10:30:56.150]             future::FutureResult(value = ...future.value$value, 
[10:30:56.150]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:56.150]                   ...future.rng), globalenv = if (FALSE) 
[10:30:56.150]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:30:56.150]                     ...future.globalenv.names))
[10:30:56.150]                 else NULL, started = ...future.startTime, version = "1.8")
[10:30:56.150]         }, condition = base::local({
[10:30:56.150]             c <- base::c
[10:30:56.150]             inherits <- base::inherits
[10:30:56.150]             invokeRestart <- base::invokeRestart
[10:30:56.150]             length <- base::length
[10:30:56.150]             list <- base::list
[10:30:56.150]             seq.int <- base::seq.int
[10:30:56.150]             signalCondition <- base::signalCondition
[10:30:56.150]             sys.calls <- base::sys.calls
[10:30:56.150]             `[[` <- base::`[[`
[10:30:56.150]             `+` <- base::`+`
[10:30:56.150]             `<<-` <- base::`<<-`
[10:30:56.150]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:30:56.150]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:30:56.150]                   3L)]
[10:30:56.150]             }
[10:30:56.150]             function(cond) {
[10:30:56.150]                 is_error <- inherits(cond, "error")
[10:30:56.150]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:30:56.150]                   NULL)
[10:30:56.150]                 if (is_error) {
[10:30:56.150]                   sessionInformation <- function() {
[10:30:56.150]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:30:56.150]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:30:56.150]                       search = base::search(), system = base::Sys.info())
[10:30:56.150]                   }
[10:30:56.150]                   ...future.conditions[[length(...future.conditions) + 
[10:30:56.150]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:30:56.150]                     cond$call), session = sessionInformation(), 
[10:30:56.150]                     timestamp = base::Sys.time(), signaled = 0L)
[10:30:56.150]                   signalCondition(cond)
[10:30:56.150]                 }
[10:30:56.150]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:30:56.150]                 "immediateCondition"))) {
[10:30:56.150]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:30:56.150]                   ...future.conditions[[length(...future.conditions) + 
[10:30:56.150]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:30:56.150]                   if (TRUE && !signal) {
[10:30:56.150]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.150]                     {
[10:30:56.150]                       inherits <- base::inherits
[10:30:56.150]                       invokeRestart <- base::invokeRestart
[10:30:56.150]                       is.null <- base::is.null
[10:30:56.150]                       muffled <- FALSE
[10:30:56.150]                       if (inherits(cond, "message")) {
[10:30:56.150]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:56.150]                         if (muffled) 
[10:30:56.150]                           invokeRestart("muffleMessage")
[10:30:56.150]                       }
[10:30:56.150]                       else if (inherits(cond, "warning")) {
[10:30:56.150]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:56.150]                         if (muffled) 
[10:30:56.150]                           invokeRestart("muffleWarning")
[10:30:56.150]                       }
[10:30:56.150]                       else if (inherits(cond, "condition")) {
[10:30:56.150]                         if (!is.null(pattern)) {
[10:30:56.150]                           computeRestarts <- base::computeRestarts
[10:30:56.150]                           grepl <- base::grepl
[10:30:56.150]                           restarts <- computeRestarts(cond)
[10:30:56.150]                           for (restart in restarts) {
[10:30:56.150]                             name <- restart$name
[10:30:56.150]                             if (is.null(name)) 
[10:30:56.150]                               next
[10:30:56.150]                             if (!grepl(pattern, name)) 
[10:30:56.150]                               next
[10:30:56.150]                             invokeRestart(restart)
[10:30:56.150]                             muffled <- TRUE
[10:30:56.150]                             break
[10:30:56.150]                           }
[10:30:56.150]                         }
[10:30:56.150]                       }
[10:30:56.150]                       invisible(muffled)
[10:30:56.150]                     }
[10:30:56.150]                     muffleCondition(cond, pattern = "^muffle")
[10:30:56.150]                   }
[10:30:56.150]                 }
[10:30:56.150]                 else {
[10:30:56.150]                   if (TRUE) {
[10:30:56.150]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.150]                     {
[10:30:56.150]                       inherits <- base::inherits
[10:30:56.150]                       invokeRestart <- base::invokeRestart
[10:30:56.150]                       is.null <- base::is.null
[10:30:56.150]                       muffled <- FALSE
[10:30:56.150]                       if (inherits(cond, "message")) {
[10:30:56.150]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:56.150]                         if (muffled) 
[10:30:56.150]                           invokeRestart("muffleMessage")
[10:30:56.150]                       }
[10:30:56.150]                       else if (inherits(cond, "warning")) {
[10:30:56.150]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:56.150]                         if (muffled) 
[10:30:56.150]                           invokeRestart("muffleWarning")
[10:30:56.150]                       }
[10:30:56.150]                       else if (inherits(cond, "condition")) {
[10:30:56.150]                         if (!is.null(pattern)) {
[10:30:56.150]                           computeRestarts <- base::computeRestarts
[10:30:56.150]                           grepl <- base::grepl
[10:30:56.150]                           restarts <- computeRestarts(cond)
[10:30:56.150]                           for (restart in restarts) {
[10:30:56.150]                             name <- restart$name
[10:30:56.150]                             if (is.null(name)) 
[10:30:56.150]                               next
[10:30:56.150]                             if (!grepl(pattern, name)) 
[10:30:56.150]                               next
[10:30:56.150]                             invokeRestart(restart)
[10:30:56.150]                             muffled <- TRUE
[10:30:56.150]                             break
[10:30:56.150]                           }
[10:30:56.150]                         }
[10:30:56.150]                       }
[10:30:56.150]                       invisible(muffled)
[10:30:56.150]                     }
[10:30:56.150]                     muffleCondition(cond, pattern = "^muffle")
[10:30:56.150]                   }
[10:30:56.150]                 }
[10:30:56.150]             }
[10:30:56.150]         }))
[10:30:56.150]     }, error = function(ex) {
[10:30:56.150]         base::structure(base::list(value = NULL, visible = NULL, 
[10:30:56.150]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:56.150]                 ...future.rng), started = ...future.startTime, 
[10:30:56.150]             finished = Sys.time(), session_uuid = NA_character_, 
[10:30:56.150]             version = "1.8"), class = "FutureResult")
[10:30:56.150]     }, finally = {
[10:30:56.150]         if (!identical(...future.workdir, getwd())) 
[10:30:56.150]             setwd(...future.workdir)
[10:30:56.150]         {
[10:30:56.150]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:30:56.150]                 ...future.oldOptions$nwarnings <- NULL
[10:30:56.150]             }
[10:30:56.150]             base::options(...future.oldOptions)
[10:30:56.150]             if (.Platform$OS.type == "windows") {
[10:30:56.150]                 old_names <- names(...future.oldEnvVars)
[10:30:56.150]                 envs <- base::Sys.getenv()
[10:30:56.150]                 names <- names(envs)
[10:30:56.150]                 common <- intersect(names, old_names)
[10:30:56.150]                 added <- setdiff(names, old_names)
[10:30:56.150]                 removed <- setdiff(old_names, names)
[10:30:56.150]                 changed <- common[...future.oldEnvVars[common] != 
[10:30:56.150]                   envs[common]]
[10:30:56.150]                 NAMES <- toupper(changed)
[10:30:56.150]                 args <- list()
[10:30:56.150]                 for (kk in seq_along(NAMES)) {
[10:30:56.150]                   name <- changed[[kk]]
[10:30:56.150]                   NAME <- NAMES[[kk]]
[10:30:56.150]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.150]                     next
[10:30:56.150]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:56.150]                 }
[10:30:56.150]                 NAMES <- toupper(added)
[10:30:56.150]                 for (kk in seq_along(NAMES)) {
[10:30:56.150]                   name <- added[[kk]]
[10:30:56.150]                   NAME <- NAMES[[kk]]
[10:30:56.150]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.150]                     next
[10:30:56.150]                   args[[name]] <- ""
[10:30:56.150]                 }
[10:30:56.150]                 NAMES <- toupper(removed)
[10:30:56.150]                 for (kk in seq_along(NAMES)) {
[10:30:56.150]                   name <- removed[[kk]]
[10:30:56.150]                   NAME <- NAMES[[kk]]
[10:30:56.150]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.150]                     next
[10:30:56.150]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:56.150]                 }
[10:30:56.150]                 if (length(args) > 0) 
[10:30:56.150]                   base::do.call(base::Sys.setenv, args = args)
[10:30:56.150]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:30:56.150]             }
[10:30:56.150]             else {
[10:30:56.150]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:30:56.150]             }
[10:30:56.150]             {
[10:30:56.150]                 if (base::length(...future.futureOptionsAdded) > 
[10:30:56.150]                   0L) {
[10:30:56.150]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:30:56.150]                   base::names(opts) <- ...future.futureOptionsAdded
[10:30:56.150]                   base::options(opts)
[10:30:56.150]                 }
[10:30:56.150]                 {
[10:30:56.150]                   {
[10:30:56.150]                     base::assign(".Random.seed", c(10403L, 6L, 
[10:30:56.150]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[10:30:56.150]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[10:30:56.150]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[10:30:56.150]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[10:30:56.150]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[10:30:56.150]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[10:30:56.150]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[10:30:56.150]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[10:30:56.150]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[10:30:56.150]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[10:30:56.150]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[10:30:56.150]                     -1512233174L, -1985955764L, -425390065L, 
[10:30:56.150]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[10:30:56.150]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[10:30:56.150]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[10:30:56.150]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[10:30:56.150]                     1818328109L, -1284085436L, -1981489558L, 
[10:30:56.150]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[10:30:56.150]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[10:30:56.150]                     -1718567047L, -793788661L, -1133789126L, 
[10:30:56.150]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[10:30:56.150]                     -1823521982L, -1345991523L, -1672661737L, 
[10:30:56.150]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[10:30:56.150]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[10:30:56.150]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[10:30:56.150]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[10:30:56.150]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[10:30:56.150]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[10:30:56.150]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[10:30:56.150]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[10:30:56.150]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[10:30:56.150]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[10:30:56.150]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[10:30:56.150]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[10:30:56.150]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[10:30:56.150]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[10:30:56.150]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[10:30:56.150]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[10:30:56.150]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[10:30:56.150]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[10:30:56.150]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[10:30:56.150]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[10:30:56.150]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[10:30:56.150]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[10:30:56.150]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[10:30:56.150]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[10:30:56.150]                     -1119334354L, -1521015416L, -2041922421L, 
[10:30:56.150]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[10:30:56.150]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[10:30:56.150]                     1232111981L, -1801753084L, -1608606422L, 
[10:30:56.150]                     -1172096363L, 1420874031L, -1210473418L, 
[10:30:56.150]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[10:30:56.150]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[10:30:56.150]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[10:30:56.150]                     679371266L, -591318819L, -104578089L, -172818754L, 
[10:30:56.150]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[10:30:56.150]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[10:30:56.150]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[10:30:56.150]                     -332493318L, -1978392251L, -1691039632L, 
[10:30:56.150]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[10:30:56.150]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[10:30:56.150]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[10:30:56.150]                     87560756L, -87565624L, 426345146L, -699970416L, 
[10:30:56.150]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[10:30:56.150]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[10:30:56.150]                     -1178330196L, -687617348L, -1701912078L, 
[10:30:56.150]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[10:30:56.150]                     -1345416048L, 1816730492L, -1570431212L, 
[10:30:56.150]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[10:30:56.150]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[10:30:56.150]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[10:30:56.150]                     -1493184262L, -1943836976L, -590788308L, 
[10:30:56.150]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[10:30:56.150]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[10:30:56.150]                     1274857340L, -1205842638L, -1938479504L, 
[10:30:56.150]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[10:30:56.150]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[10:30:56.150]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[10:30:56.150]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[10:30:56.150]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[10:30:56.150]                     -1460751252L, 1201879444L, -1459788718L, 
[10:30:56.150]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[10:30:56.150]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[10:30:56.150]                     -420945808L, -1997735900L, -1838404552L, 
[10:30:56.150]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[10:30:56.150]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[10:30:56.150]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[10:30:56.150]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[10:30:56.150]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[10:30:56.150]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[10:30:56.150]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[10:30:56.150]                     942193650L, 751741680L, 689743428L, -18455976L, 
[10:30:56.150]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[10:30:56.150]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[10:30:56.150]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[10:30:56.150]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[10:30:56.150]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[10:30:56.150]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[10:30:56.150]                     -1357570110L, 1896595240L, -2066952276L, 
[10:30:56.150]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[10:30:56.150]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[10:30:56.150]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[10:30:56.150]                     769655120L, 236357794L, 181393736L, -13334772L, 
[10:30:56.150]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[10:30:56.150]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[10:30:56.150]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[10:30:56.150]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[10:30:56.150]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[10:30:56.150]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[10:30:56.150]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[10:30:56.150]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[10:30:56.150]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[10:30:56.150]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[10:30:56.150]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[10:30:56.150]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[10:30:56.150]                     -1365842884L, -438961294L, -1851472272L, 
[10:30:56.150]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[10:30:56.150]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[10:30:56.150]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[10:30:56.150]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[10:30:56.150]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[10:30:56.150]                     -594809770L, -2146766621L, -2013964635L, 
[10:30:56.150]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[10:30:56.150]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[10:30:56.150]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[10:30:56.150]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[10:30:56.150]                     -1426021878L, -1285634264L, 1507547537L, 
[10:30:56.150]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[10:30:56.150]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[10:30:56.150]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[10:30:56.150]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[10:30:56.150]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[10:30:56.150]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[10:30:56.150]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[10:30:56.150]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[10:30:56.150]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[10:30:56.150]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[10:30:56.150]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[10:30:56.150]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[10:30:56.150]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[10:30:56.150]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[10:30:56.150]                     -1604604761L, 1421229008L, -1268333714L, 
[10:30:56.150]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[10:30:56.150]                     -2070476623L, -2099222749L, 1141171236L, 
[10:30:56.150]                     -146426158L, -1797385433L, -1129376399L, 
[10:30:56.150]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[10:30:56.150]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[10:30:56.150]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[10:30:56.150]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[10:30:56.150]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[10:30:56.150]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[10:30:56.150]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[10:30:56.150]                     -1092079724L, -1765622238L, -1882554057L, 
[10:30:56.150]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[10:30:56.150]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[10:30:56.150]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[10:30:56.150]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[10:30:56.150]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[10:30:56.150]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[10:30:56.150]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[10:30:56.150]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[10:30:56.150]                     865377681L, -1127426242L), envir = base::globalenv(), 
[10:30:56.150]                       inherits = FALSE)
[10:30:56.150]                     NULL
[10:30:56.150]                   }
[10:30:56.150]                   options(future.plan = NULL)
[10:30:56.150]                   if (is.na(NA_character_)) 
[10:30:56.150]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:30:56.150]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:30:56.150]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:30:56.150]                     .init = FALSE)
[10:30:56.150]                 }
[10:30:56.150]             }
[10:30:56.150]         }
[10:30:56.150]     })
[10:30:56.150]     if (TRUE) {
[10:30:56.150]         base::sink(type = "output", split = FALSE)
[10:30:56.150]         if (TRUE) {
[10:30:56.150]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:30:56.150]         }
[10:30:56.150]         else {
[10:30:56.150]             ...future.result["stdout"] <- base::list(NULL)
[10:30:56.150]         }
[10:30:56.150]         base::close(...future.stdout)
[10:30:56.150]         ...future.stdout <- NULL
[10:30:56.150]     }
[10:30:56.150]     ...future.result$conditions <- ...future.conditions
[10:30:56.150]     ...future.result$finished <- base::Sys.time()
[10:30:56.150]     ...future.result
[10:30:56.150] }
[10:30:56.152] assign_globals() ...
[10:30:56.152] List of 5
[10:30:56.152]  $ ...future.FUN            :function (...)  
[10:30:56.152]  $ future.call.arguments    : list()
[10:30:56.152]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:56.152]  $ ...future.elements_ii    :List of 5
[10:30:56.152]   ..$ : int 0
[10:30:56.152]   ..$ : int 0
[10:30:56.152]   ..$ : int 0
[10:30:56.152]   ..$ : int 0
[10:30:56.152]   ..$ : int 0
[10:30:56.152]  $ ...future.seeds_ii       :List of 5
[10:30:56.152]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[10:30:56.152]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[10:30:56.152]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[10:30:56.152]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[10:30:56.152]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[10:30:56.152]  $ ...future.globals.maxSize: NULL
[10:30:56.152]  - attr(*, "where")=List of 5
[10:30:56.152]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:30:56.152]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:30:56.152]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:30:56.152]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:30:56.152]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:30:56.152]  - attr(*, "resolved")= logi FALSE
[10:30:56.152]  - attr(*, "total_size")= num 616
[10:30:56.152]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:56.152]  - attr(*, "already-done")= logi TRUE
[10:30:56.160] - reassign environment for ‘...future.FUN’
[10:30:56.160] - copied ‘...future.FUN’ to environment
[10:30:56.160] - copied ‘future.call.arguments’ to environment
[10:30:56.160] - copied ‘...future.elements_ii’ to environment
[10:30:56.160] - copied ‘...future.seeds_ii’ to environment
[10:30:56.160] - copied ‘...future.globals.maxSize’ to environment
[10:30:56.160] assign_globals() ... done
[10:30:56.161] plan(): Setting new future strategy stack:
[10:30:56.161] List of future strategies:
[10:30:56.161] 1. sequential:
[10:30:56.161]    - args: function (..., envir = parent.frame())
[10:30:56.161]    - tweaked: FALSE
[10:30:56.161]    - call: NULL
[10:30:56.161] plan(): nbrOfWorkers() = 1
[10:30:56.162] plan(): Setting new future strategy stack:
[10:30:56.162] List of future strategies:
[10:30:56.162] 1. sequential:
[10:30:56.162]    - args: function (..., envir = parent.frame())
[10:30:56.162]    - tweaked: FALSE
[10:30:56.162]    - call: plan(strategy)
[10:30:56.162] plan(): nbrOfWorkers() = 1
[10:30:56.163] SequentialFuture started (and completed)
[10:30:56.163] - Launch lazy future ... done
[10:30:56.163] run() for ‘SequentialFuture’ ... done
[10:30:56.163] Created future:
[10:30:56.163] SequentialFuture:
[10:30:56.163] Label: ‘future_replicate-1’
[10:30:56.163] Expression:
[10:30:56.163] {
[10:30:56.163]     do.call(function(...) {
[10:30:56.163]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.163]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:56.163]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.163]             on.exit(options(oopts), add = TRUE)
[10:30:56.163]         }
[10:30:56.163]         {
[10:30:56.163]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:56.163]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.163]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.163]                   envir = globalenv(), inherits = FALSE)
[10:30:56.163]                 ...future.FUN(...future.X_jj, ...)
[10:30:56.163]             })
[10:30:56.163]         }
[10:30:56.163]     }, args = future.call.arguments)
[10:30:56.163] }
[10:30:56.163] Lazy evaluation: FALSE
[10:30:56.163] Asynchronous evaluation: FALSE
[10:30:56.163] Local evaluation: TRUE
[10:30:56.163] Environment: R_GlobalEnv
[10:30:56.163] Capture standard output: TRUE
[10:30:56.163] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:30:56.163] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:30:56.163] Packages: <none>
[10:30:56.163] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:30:56.163] Resolved: TRUE
[10:30:56.163] Value: 280 bytes of class ‘list’
[10:30:56.163] Early signaling: FALSE
[10:30:56.163] Owner process: 7cdcbd4b-6c47-ca9a-dc3f-e18236d134b8
[10:30:56.163] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:30:56.164] Chunk #1 of 1 ... DONE
[10:30:56.164] Launching 1 futures (chunks) ... DONE
[10:30:56.164] Resolving 1 futures (chunks) ...
[10:30:56.164] resolve() on list ...
[10:30:56.165]  recursive: 0
[10:30:56.165]  length: 1
[10:30:56.165] 
[10:30:56.165] resolved() for ‘SequentialFuture’ ...
[10:30:56.165] - state: ‘finished’
[10:30:56.165] - run: TRUE
[10:30:56.165] - result: ‘FutureResult’
[10:30:56.165] resolved() for ‘SequentialFuture’ ... done
[10:30:56.165] Future #1
[10:30:56.165] signalConditionsASAP(SequentialFuture, pos=1) ...
[10:30:56.166] - nx: 1
[10:30:56.166] - relay: TRUE
[10:30:56.166] - stdout: TRUE
[10:30:56.166] - signal: TRUE
[10:30:56.166] - resignal: FALSE
[10:30:56.166] - force: TRUE
[10:30:56.166] - relayed: [n=1] FALSE
[10:30:56.166] - queued futures: [n=1] FALSE
[10:30:56.166]  - until=1
[10:30:56.166]  - relaying element #1
[10:30:56.167] - relayed: [n=1] TRUE
[10:30:56.167] - queued futures: [n=1] TRUE
[10:30:56.167] signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:30:56.167]  length: 0 (resolved future 1)
[10:30:56.167] Relaying remaining futures
[10:30:56.167] signalConditionsASAP(NULL, pos=0) ...
[10:30:56.167] - nx: 1
[10:30:56.167] - relay: TRUE
[10:30:56.167] - stdout: TRUE
[10:30:56.167] - signal: TRUE
[10:30:56.167] - resignal: FALSE
[10:30:56.168] - force: TRUE
[10:30:56.168] - relayed: [n=1] TRUE
[10:30:56.168] - queued futures: [n=1] TRUE
 - flush all
[10:30:56.168] - relayed: [n=1] TRUE
[10:30:56.170] - queued futures: [n=1] TRUE
[10:30:56.170] signalConditionsASAP(NULL, pos=0) ... done
[10:30:56.170] resolve() on list ... DONE
[10:30:56.170]  - Number of value chunks collected: 1
[10:30:56.170] Resolving 1 futures (chunks) ... DONE
[10:30:56.170] Reducing values from 1 chunks ...
[10:30:56.170]  - Number of values collected after concatenation: 5
[10:30:56.170]  - Number of values expected: 5
[10:30:56.171] Reducing values from 1 chunks ... DONE
[10:30:56.171] future_lapply() ... DONE
- example(replicate) ...
[10:30:56.171] future_lapply() ...
[10:30:56.172] Generating random seeds ...
[10:30:56.172] Generating random seed streams for 5 elements ...
[10:30:56.172] Generating random seed streams for 5 elements ... DONE
[10:30:56.172] Generating random seeds ... DONE
[10:30:56.172] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:30:56.173] Number of chunks: 1
[10:30:56.173] getGlobalsAndPackagesXApply() ...
[10:30:56.173]  - future.globals: TRUE
[10:30:56.173] getGlobalsAndPackages() ...
[10:30:56.173] Searching for globals...
[10:30:56.175] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[10:30:56.175] Searching for globals ... DONE
[10:30:56.175] Resolving globals: FALSE
[10:30:56.175] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[10:30:56.176] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[10:30:56.176] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[10:30:56.176] 
[10:30:56.176] getGlobalsAndPackages() ... DONE
[10:30:56.176]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[10:30:56.176]  - needed namespaces: [n=0] 
[10:30:56.176] Finding globals ... DONE
[10:30:56.177]  - use_args: TRUE
[10:30:56.177]  - Getting '...' globals ...
[10:30:56.177] resolve() on list ...
[10:30:56.177]  recursive: 0
[10:30:56.177]  length: 1
[10:30:56.177]  elements: ‘...’
[10:30:56.177]  length: 0 (resolved future 1)
[10:30:56.177] resolve() on list ... DONE
[10:30:56.178]    - '...' content: [n=0] 
[10:30:56.178] List of 1
[10:30:56.178]  $ ...: list()
[10:30:56.178]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:56.178]  - attr(*, "where")=List of 1
[10:30:56.178]   ..$ ...:<environment: 0x55aba1af0d40> 
[10:30:56.178]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:56.178]  - attr(*, "resolved")= logi TRUE
[10:30:56.178]  - attr(*, "total_size")= num NA
[10:30:56.180]  - Getting '...' globals ... DONE
[10:30:56.180] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[10:30:56.180] List of 4
[10:30:56.180]  $ ...future.FUN:function (...)  
[10:30:56.180]  $ foo          :function (x = 1, y = 2)  
[10:30:56.180]  $ x            : num 3
[10:30:56.180]  $ ...          : list()
[10:30:56.180]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:56.180]  - attr(*, "where")=List of 4
[10:30:56.180]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:30:56.180]   ..$ foo          :<environment: R_EmptyEnv> 
[10:30:56.180]   ..$ x            :<environment: R_EmptyEnv> 
[10:30:56.180]   ..$ ...          :<environment: 0x55aba1af0d40> 
[10:30:56.180]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:56.180]  - attr(*, "resolved")= logi FALSE
[10:30:56.180]  - attr(*, "total_size")= num 2200
[10:30:56.184] Packages to be attached in all futures: [n=0] 
[10:30:56.184] getGlobalsAndPackagesXApply() ... DONE
[10:30:56.184] Number of futures (= number of chunks): 1
[10:30:56.185] Launching 1 futures (chunks) ...
[10:30:56.185] Chunk #1 of 1 ...
[10:30:56.185]  - Finding globals in 'X' for chunk #1 ...
[10:30:56.185] getGlobalsAndPackages() ...
[10:30:56.185] Searching for globals...
[10:30:56.185] 
[10:30:56.185] Searching for globals ... DONE
[10:30:56.185] - globals: [0] <none>
[10:30:56.185] getGlobalsAndPackages() ... DONE
[10:30:56.186]    + additional globals found: [n=0] 
[10:30:56.186]    + additional namespaces needed: [n=0] 
[10:30:56.186]  - Finding globals in 'X' for chunk #1 ... DONE
[10:30:56.186]  - seeds: [5] <seeds>
[10:30:56.186]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.186] getGlobalsAndPackages() ...
[10:30:56.186] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.186] Resolving globals: FALSE
[10:30:56.186] Tweak future expression to call with '...' arguments ...
[10:30:56.187] {
[10:30:56.187]     do.call(function(...) {
[10:30:56.187]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.187]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:56.187]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.187]             on.exit(options(oopts), add = TRUE)
[10:30:56.187]         }
[10:30:56.187]         {
[10:30:56.187]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:56.187]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.187]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.187]                   envir = globalenv(), inherits = FALSE)
[10:30:56.187]                 ...future.FUN(...future.X_jj, ...)
[10:30:56.187]             })
[10:30:56.187]         }
[10:30:56.187]     }, args = future.call.arguments)
[10:30:56.187] }
[10:30:56.187] Tweak future expression to call with '...' arguments ... DONE
[10:30:56.187] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.187] 
[10:30:56.187] getGlobalsAndPackages() ... DONE
[10:30:56.188] run() for ‘Future’ ...
[10:30:56.188] - state: ‘created’
[10:30:56.188] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:30:56.188] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:30:56.188] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:30:56.188]   - Field: ‘label’
[10:30:56.189]   - Field: ‘local’
[10:30:56.189]   - Field: ‘owner’
[10:30:56.189]   - Field: ‘envir’
[10:30:56.189]   - Field: ‘packages’
[10:30:56.189]   - Field: ‘gc’
[10:30:56.189]   - Field: ‘conditions’
[10:30:56.189]   - Field: ‘expr’
[10:30:56.189]   - Field: ‘uuid’
[10:30:56.189]   - Field: ‘seed’
[10:30:56.189]   - Field: ‘version’
[10:30:56.190]   - Field: ‘result’
[10:30:56.190]   - Field: ‘asynchronous’
[10:30:56.190]   - Field: ‘calls’
[10:30:56.190]   - Field: ‘globals’
[10:30:56.190]   - Field: ‘stdout’
[10:30:56.190]   - Field: ‘earlySignal’
[10:30:56.190]   - Field: ‘lazy’
[10:30:56.190]   - Field: ‘state’
[10:30:56.190] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:30:56.190] - Launch lazy future ...
[10:30:56.191] Packages needed by the future expression (n = 0): <none>
[10:30:56.191] Packages needed by future strategies (n = 0): <none>
[10:30:56.191] {
[10:30:56.191]     {
[10:30:56.191]         {
[10:30:56.191]             ...future.startTime <- base::Sys.time()
[10:30:56.191]             {
[10:30:56.191]                 {
[10:30:56.191]                   {
[10:30:56.191]                     base::local({
[10:30:56.191]                       has_future <- base::requireNamespace("future", 
[10:30:56.191]                         quietly = TRUE)
[10:30:56.191]                       if (has_future) {
[10:30:56.191]                         ns <- base::getNamespace("future")
[10:30:56.191]                         version <- ns[[".package"]][["version"]]
[10:30:56.191]                         if (is.null(version)) 
[10:30:56.191]                           version <- utils::packageVersion("future")
[10:30:56.191]                       }
[10:30:56.191]                       else {
[10:30:56.191]                         version <- NULL
[10:30:56.191]                       }
[10:30:56.191]                       if (!has_future || version < "1.8.0") {
[10:30:56.191]                         info <- base::c(r_version = base::gsub("R version ", 
[10:30:56.191]                           "", base::R.version$version.string), 
[10:30:56.191]                           platform = base::sprintf("%s (%s-bit)", 
[10:30:56.191]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:30:56.191]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:30:56.191]                             "release", "version")], collapse = " "), 
[10:30:56.191]                           hostname = base::Sys.info()[["nodename"]])
[10:30:56.191]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:30:56.191]                           info)
[10:30:56.191]                         info <- base::paste(info, collapse = "; ")
[10:30:56.191]                         if (!has_future) {
[10:30:56.191]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:30:56.191]                             info)
[10:30:56.191]                         }
[10:30:56.191]                         else {
[10:30:56.191]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:30:56.191]                             info, version)
[10:30:56.191]                         }
[10:30:56.191]                         base::stop(msg)
[10:30:56.191]                       }
[10:30:56.191]                     })
[10:30:56.191]                   }
[10:30:56.191]                   ...future.strategy.old <- future::plan("list")
[10:30:56.191]                   options(future.plan = NULL)
[10:30:56.191]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:30:56.191]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:30:56.191]                 }
[10:30:56.191]                 ...future.workdir <- getwd()
[10:30:56.191]             }
[10:30:56.191]             ...future.oldOptions <- base::as.list(base::.Options)
[10:30:56.191]             ...future.oldEnvVars <- base::Sys.getenv()
[10:30:56.191]         }
[10:30:56.191]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:30:56.191]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:30:56.191]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:30:56.191]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:30:56.191]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:30:56.191]             future.stdout.windows.reencode = NULL, width = 80L)
[10:30:56.191]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:30:56.191]             base::names(...future.oldOptions))
[10:30:56.191]     }
[10:30:56.191]     if (FALSE) {
[10:30:56.191]     }
[10:30:56.191]     else {
[10:30:56.191]         if (TRUE) {
[10:30:56.191]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:30:56.191]                 open = "w")
[10:30:56.191]         }
[10:30:56.191]         else {
[10:30:56.191]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:30:56.191]                 windows = "NUL", "/dev/null"), open = "w")
[10:30:56.191]         }
[10:30:56.191]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:30:56.191]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:30:56.191]             base::sink(type = "output", split = FALSE)
[10:30:56.191]             base::close(...future.stdout)
[10:30:56.191]         }, add = TRUE)
[10:30:56.191]     }
[10:30:56.191]     ...future.frame <- base::sys.nframe()
[10:30:56.191]     ...future.conditions <- base::list()
[10:30:56.191]     ...future.rng <- base::globalenv()$.Random.seed
[10:30:56.191]     if (FALSE) {
[10:30:56.191]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:30:56.191]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:30:56.191]     }
[10:30:56.191]     ...future.result <- base::tryCatch({
[10:30:56.191]         base::withCallingHandlers({
[10:30:56.191]             ...future.value <- base::withVisible(base::local({
[10:30:56.191]                 do.call(function(...) {
[10:30:56.191]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.191]                   if (!identical(...future.globals.maxSize.org, 
[10:30:56.191]                     ...future.globals.maxSize)) {
[10:30:56.191]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.191]                     on.exit(options(oopts), add = TRUE)
[10:30:56.191]                   }
[10:30:56.191]                   {
[10:30:56.191]                     lapply(seq_along(...future.elements_ii), 
[10:30:56.191]                       FUN = function(jj) {
[10:30:56.191]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.191]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.191]                           envir = globalenv(), inherits = FALSE)
[10:30:56.191]                         ...future.FUN(...future.X_jj, ...)
[10:30:56.191]                       })
[10:30:56.191]                   }
[10:30:56.191]                 }, args = future.call.arguments)
[10:30:56.191]             }))
[10:30:56.191]             future::FutureResult(value = ...future.value$value, 
[10:30:56.191]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:56.191]                   ...future.rng), globalenv = if (FALSE) 
[10:30:56.191]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:30:56.191]                     ...future.globalenv.names))
[10:30:56.191]                 else NULL, started = ...future.startTime, version = "1.8")
[10:30:56.191]         }, condition = base::local({
[10:30:56.191]             c <- base::c
[10:30:56.191]             inherits <- base::inherits
[10:30:56.191]             invokeRestart <- base::invokeRestart
[10:30:56.191]             length <- base::length
[10:30:56.191]             list <- base::list
[10:30:56.191]             seq.int <- base::seq.int
[10:30:56.191]             signalCondition <- base::signalCondition
[10:30:56.191]             sys.calls <- base::sys.calls
[10:30:56.191]             `[[` <- base::`[[`
[10:30:56.191]             `+` <- base::`+`
[10:30:56.191]             `<<-` <- base::`<<-`
[10:30:56.191]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:30:56.191]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:30:56.191]                   3L)]
[10:30:56.191]             }
[10:30:56.191]             function(cond) {
[10:30:56.191]                 is_error <- inherits(cond, "error")
[10:30:56.191]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:30:56.191]                   NULL)
[10:30:56.191]                 if (is_error) {
[10:30:56.191]                   sessionInformation <- function() {
[10:30:56.191]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:30:56.191]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:30:56.191]                       search = base::search(), system = base::Sys.info())
[10:30:56.191]                   }
[10:30:56.191]                   ...future.conditions[[length(...future.conditions) + 
[10:30:56.191]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:30:56.191]                     cond$call), session = sessionInformation(), 
[10:30:56.191]                     timestamp = base::Sys.time(), signaled = 0L)
[10:30:56.191]                   signalCondition(cond)
[10:30:56.191]                 }
[10:30:56.191]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:30:56.191]                 "immediateCondition"))) {
[10:30:56.191]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:30:56.191]                   ...future.conditions[[length(...future.conditions) + 
[10:30:56.191]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:30:56.191]                   if (TRUE && !signal) {
[10:30:56.191]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.191]                     {
[10:30:56.191]                       inherits <- base::inherits
[10:30:56.191]                       invokeRestart <- base::invokeRestart
[10:30:56.191]                       is.null <- base::is.null
[10:30:56.191]                       muffled <- FALSE
[10:30:56.191]                       if (inherits(cond, "message")) {
[10:30:56.191]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:56.191]                         if (muffled) 
[10:30:56.191]                           invokeRestart("muffleMessage")
[10:30:56.191]                       }
[10:30:56.191]                       else if (inherits(cond, "warning")) {
[10:30:56.191]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:56.191]                         if (muffled) 
[10:30:56.191]                           invokeRestart("muffleWarning")
[10:30:56.191]                       }
[10:30:56.191]                       else if (inherits(cond, "condition")) {
[10:30:56.191]                         if (!is.null(pattern)) {
[10:30:56.191]                           computeRestarts <- base::computeRestarts
[10:30:56.191]                           grepl <- base::grepl
[10:30:56.191]                           restarts <- computeRestarts(cond)
[10:30:56.191]                           for (restart in restarts) {
[10:30:56.191]                             name <- restart$name
[10:30:56.191]                             if (is.null(name)) 
[10:30:56.191]                               next
[10:30:56.191]                             if (!grepl(pattern, name)) 
[10:30:56.191]                               next
[10:30:56.191]                             invokeRestart(restart)
[10:30:56.191]                             muffled <- TRUE
[10:30:56.191]                             break
[10:30:56.191]                           }
[10:30:56.191]                         }
[10:30:56.191]                       }
[10:30:56.191]                       invisible(muffled)
[10:30:56.191]                     }
[10:30:56.191]                     muffleCondition(cond, pattern = "^muffle")
[10:30:56.191]                   }
[10:30:56.191]                 }
[10:30:56.191]                 else {
[10:30:56.191]                   if (TRUE) {
[10:30:56.191]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.191]                     {
[10:30:56.191]                       inherits <- base::inherits
[10:30:56.191]                       invokeRestart <- base::invokeRestart
[10:30:56.191]                       is.null <- base::is.null
[10:30:56.191]                       muffled <- FALSE
[10:30:56.191]                       if (inherits(cond, "message")) {
[10:30:56.191]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:56.191]                         if (muffled) 
[10:30:56.191]                           invokeRestart("muffleMessage")
[10:30:56.191]                       }
[10:30:56.191]                       else if (inherits(cond, "warning")) {
[10:30:56.191]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:56.191]                         if (muffled) 
[10:30:56.191]                           invokeRestart("muffleWarning")
[10:30:56.191]                       }
[10:30:56.191]                       else if (inherits(cond, "condition")) {
[10:30:56.191]                         if (!is.null(pattern)) {
[10:30:56.191]                           computeRestarts <- base::computeRestarts
[10:30:56.191]                           grepl <- base::grepl
[10:30:56.191]                           restarts <- computeRestarts(cond)
[10:30:56.191]                           for (restart in restarts) {
[10:30:56.191]                             name <- restart$name
[10:30:56.191]                             if (is.null(name)) 
[10:30:56.191]                               next
[10:30:56.191]                             if (!grepl(pattern, name)) 
[10:30:56.191]                               next
[10:30:56.191]                             invokeRestart(restart)
[10:30:56.191]                             muffled <- TRUE
[10:30:56.191]                             break
[10:30:56.191]                           }
[10:30:56.191]                         }
[10:30:56.191]                       }
[10:30:56.191]                       invisible(muffled)
[10:30:56.191]                     }
[10:30:56.191]                     muffleCondition(cond, pattern = "^muffle")
[10:30:56.191]                   }
[10:30:56.191]                 }
[10:30:56.191]             }
[10:30:56.191]         }))
[10:30:56.191]     }, error = function(ex) {
[10:30:56.191]         base::structure(base::list(value = NULL, visible = NULL, 
[10:30:56.191]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:56.191]                 ...future.rng), started = ...future.startTime, 
[10:30:56.191]             finished = Sys.time(), session_uuid = NA_character_, 
[10:30:56.191]             version = "1.8"), class = "FutureResult")
[10:30:56.191]     }, finally = {
[10:30:56.191]         if (!identical(...future.workdir, getwd())) 
[10:30:56.191]             setwd(...future.workdir)
[10:30:56.191]         {
[10:30:56.191]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:30:56.191]                 ...future.oldOptions$nwarnings <- NULL
[10:30:56.191]             }
[10:30:56.191]             base::options(...future.oldOptions)
[10:30:56.191]             if (.Platform$OS.type == "windows") {
[10:30:56.191]                 old_names <- names(...future.oldEnvVars)
[10:30:56.191]                 envs <- base::Sys.getenv()
[10:30:56.191]                 names <- names(envs)
[10:30:56.191]                 common <- intersect(names, old_names)
[10:30:56.191]                 added <- setdiff(names, old_names)
[10:30:56.191]                 removed <- setdiff(old_names, names)
[10:30:56.191]                 changed <- common[...future.oldEnvVars[common] != 
[10:30:56.191]                   envs[common]]
[10:30:56.191]                 NAMES <- toupper(changed)
[10:30:56.191]                 args <- list()
[10:30:56.191]                 for (kk in seq_along(NAMES)) {
[10:30:56.191]                   name <- changed[[kk]]
[10:30:56.191]                   NAME <- NAMES[[kk]]
[10:30:56.191]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.191]                     next
[10:30:56.191]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:56.191]                 }
[10:30:56.191]                 NAMES <- toupper(added)
[10:30:56.191]                 for (kk in seq_along(NAMES)) {
[10:30:56.191]                   name <- added[[kk]]
[10:30:56.191]                   NAME <- NAMES[[kk]]
[10:30:56.191]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.191]                     next
[10:30:56.191]                   args[[name]] <- ""
[10:30:56.191]                 }
[10:30:56.191]                 NAMES <- toupper(removed)
[10:30:56.191]                 for (kk in seq_along(NAMES)) {
[10:30:56.191]                   name <- removed[[kk]]
[10:30:56.191]                   NAME <- NAMES[[kk]]
[10:30:56.191]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.191]                     next
[10:30:56.191]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:56.191]                 }
[10:30:56.191]                 if (length(args) > 0) 
[10:30:56.191]                   base::do.call(base::Sys.setenv, args = args)
[10:30:56.191]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:30:56.191]             }
[10:30:56.191]             else {
[10:30:56.191]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:30:56.191]             }
[10:30:56.191]             {
[10:30:56.191]                 if (base::length(...future.futureOptionsAdded) > 
[10:30:56.191]                   0L) {
[10:30:56.191]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:30:56.191]                   base::names(opts) <- ...future.futureOptionsAdded
[10:30:56.191]                   base::options(opts)
[10:30:56.191]                 }
[10:30:56.191]                 {
[10:30:56.191]                   {
[10:30:56.191]                     base::assign(".Random.seed", c(10403L, 8L, 
[10:30:56.191]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[10:30:56.191]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[10:30:56.191]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[10:30:56.191]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[10:30:56.191]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[10:30:56.191]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[10:30:56.191]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[10:30:56.191]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[10:30:56.191]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[10:30:56.191]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[10:30:56.191]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[10:30:56.191]                     -1512233174L, -1985955764L, -425390065L, 
[10:30:56.191]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[10:30:56.191]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[10:30:56.191]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[10:30:56.191]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[10:30:56.191]                     1818328109L, -1284085436L, -1981489558L, 
[10:30:56.191]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[10:30:56.191]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[10:30:56.191]                     -1718567047L, -793788661L, -1133789126L, 
[10:30:56.191]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[10:30:56.191]                     -1823521982L, -1345991523L, -1672661737L, 
[10:30:56.191]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[10:30:56.191]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[10:30:56.191]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[10:30:56.191]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[10:30:56.191]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[10:30:56.191]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[10:30:56.191]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[10:30:56.191]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[10:30:56.191]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[10:30:56.191]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[10:30:56.191]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[10:30:56.191]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[10:30:56.191]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[10:30:56.191]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[10:30:56.191]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[10:30:56.191]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[10:30:56.191]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[10:30:56.191]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[10:30:56.191]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[10:30:56.191]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[10:30:56.191]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[10:30:56.191]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[10:30:56.191]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[10:30:56.191]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[10:30:56.191]                     -1119334354L, -1521015416L, -2041922421L, 
[10:30:56.191]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[10:30:56.191]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[10:30:56.191]                     1232111981L, -1801753084L, -1608606422L, 
[10:30:56.191]                     -1172096363L, 1420874031L, -1210473418L, 
[10:30:56.191]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[10:30:56.191]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[10:30:56.191]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[10:30:56.191]                     679371266L, -591318819L, -104578089L, -172818754L, 
[10:30:56.191]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[10:30:56.191]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[10:30:56.191]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[10:30:56.191]                     -332493318L, -1978392251L, -1691039632L, 
[10:30:56.191]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[10:30:56.191]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[10:30:56.191]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[10:30:56.191]                     87560756L, -87565624L, 426345146L, -699970416L, 
[10:30:56.191]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[10:30:56.191]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[10:30:56.191]                     -1178330196L, -687617348L, -1701912078L, 
[10:30:56.191]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[10:30:56.191]                     -1345416048L, 1816730492L, -1570431212L, 
[10:30:56.191]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[10:30:56.191]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[10:30:56.191]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[10:30:56.191]                     -1493184262L, -1943836976L, -590788308L, 
[10:30:56.191]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[10:30:56.191]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[10:30:56.191]                     1274857340L, -1205842638L, -1938479504L, 
[10:30:56.191]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[10:30:56.191]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[10:30:56.191]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[10:30:56.191]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[10:30:56.191]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[10:30:56.191]                     -1460751252L, 1201879444L, -1459788718L, 
[10:30:56.191]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[10:30:56.191]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[10:30:56.191]                     -420945808L, -1997735900L, -1838404552L, 
[10:30:56.191]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[10:30:56.191]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[10:30:56.191]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[10:30:56.191]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[10:30:56.191]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[10:30:56.191]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[10:30:56.191]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[10:30:56.191]                     942193650L, 751741680L, 689743428L, -18455976L, 
[10:30:56.191]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[10:30:56.191]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[10:30:56.191]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[10:30:56.191]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[10:30:56.191]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[10:30:56.191]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[10:30:56.191]                     -1357570110L, 1896595240L, -2066952276L, 
[10:30:56.191]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[10:30:56.191]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[10:30:56.191]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[10:30:56.191]                     769655120L, 236357794L, 181393736L, -13334772L, 
[10:30:56.191]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[10:30:56.191]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[10:30:56.191]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[10:30:56.191]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[10:30:56.191]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[10:30:56.191]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[10:30:56.191]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[10:30:56.191]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[10:30:56.191]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[10:30:56.191]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[10:30:56.191]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[10:30:56.191]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[10:30:56.191]                     -1365842884L, -438961294L, -1851472272L, 
[10:30:56.191]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[10:30:56.191]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[10:30:56.191]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[10:30:56.191]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[10:30:56.191]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[10:30:56.191]                     -594809770L, -2146766621L, -2013964635L, 
[10:30:56.191]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[10:30:56.191]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[10:30:56.191]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[10:30:56.191]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[10:30:56.191]                     -1426021878L, -1285634264L, 1507547537L, 
[10:30:56.191]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[10:30:56.191]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[10:30:56.191]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[10:30:56.191]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[10:30:56.191]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[10:30:56.191]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[10:30:56.191]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[10:30:56.191]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[10:30:56.191]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[10:30:56.191]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[10:30:56.191]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[10:30:56.191]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[10:30:56.191]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[10:30:56.191]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[10:30:56.191]                     -1604604761L, 1421229008L, -1268333714L, 
[10:30:56.191]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[10:30:56.191]                     -2070476623L, -2099222749L, 1141171236L, 
[10:30:56.191]                     -146426158L, -1797385433L, -1129376399L, 
[10:30:56.191]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[10:30:56.191]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[10:30:56.191]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[10:30:56.191]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[10:30:56.191]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[10:30:56.191]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[10:30:56.191]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[10:30:56.191]                     -1092079724L, -1765622238L, -1882554057L, 
[10:30:56.191]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[10:30:56.191]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[10:30:56.191]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[10:30:56.191]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[10:30:56.191]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[10:30:56.191]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[10:30:56.191]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[10:30:56.191]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[10:30:56.191]                     865377681L, -1127426242L), envir = base::globalenv(), 
[10:30:56.191]                       inherits = FALSE)
[10:30:56.191]                     NULL
[10:30:56.191]                   }
[10:30:56.191]                   options(future.plan = NULL)
[10:30:56.191]                   if (is.na(NA_character_)) 
[10:30:56.191]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:30:56.191]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:30:56.191]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:30:56.191]                     .init = FALSE)
[10:30:56.191]                 }
[10:30:56.191]             }
[10:30:56.191]         }
[10:30:56.191]     })
[10:30:56.191]     if (TRUE) {
[10:30:56.191]         base::sink(type = "output", split = FALSE)
[10:30:56.191]         if (TRUE) {
[10:30:56.191]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:30:56.191]         }
[10:30:56.191]         else {
[10:30:56.191]             ...future.result["stdout"] <- base::list(NULL)
[10:30:56.191]         }
[10:30:56.191]         base::close(...future.stdout)
[10:30:56.191]         ...future.stdout <- NULL
[10:30:56.191]     }
[10:30:56.191]     ...future.result$conditions <- ...future.conditions
[10:30:56.191]     ...future.result$finished <- base::Sys.time()
[10:30:56.191]     ...future.result
[10:30:56.191] }
[10:30:56.194] assign_globals() ...
[10:30:56.194] List of 7
[10:30:56.194]  $ ...future.FUN            :function (...)  
[10:30:56.194]  $ foo                      :function (x = 1, y = 2)  
[10:30:56.194]  $ x                        : num 3
[10:30:56.194]  $ future.call.arguments    : list()
[10:30:56.194]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:56.194]  $ ...future.elements_ii    :List of 5
[10:30:56.194]   ..$ : int 0
[10:30:56.194]   ..$ : int 0
[10:30:56.194]   ..$ : int 0
[10:30:56.194]   ..$ : int 0
[10:30:56.194]   ..$ : int 0
[10:30:56.194]  $ ...future.seeds_ii       :List of 5
[10:30:56.194]   ..$ : int [1:7] 10407 2118672648 973015440 1612380474 -529784560 -1301423278 1609721430
[10:30:56.194]   ..$ : int [1:7] 10407 -919798402 -1810630142 -850731864 -613657701 1060945587 1656143537
[10:30:56.194]   ..$ : int [1:7] 10407 1666123668 -918032954 1563303830 744861469 2009520167 369843810
[10:30:56.194]   ..$ : int [1:7] 10407 1310441948 2080683693 652639441 1795850730 1953532141 354730309
[10:30:56.194]   ..$ : int [1:7] 10407 -346794781 -526954742 61882141 1694204077 -404066420 2102686045
[10:30:56.194]  $ ...future.globals.maxSize: NULL
[10:30:56.194]  - attr(*, "where")=List of 7
[10:30:56.194]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:30:56.194]   ..$ foo                      :<environment: R_EmptyEnv> 
[10:30:56.194]   ..$ x                        :<environment: R_EmptyEnv> 
[10:30:56.194]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:30:56.194]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:30:56.194]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:30:56.194]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:30:56.194]  - attr(*, "resolved")= logi FALSE
[10:30:56.194]  - attr(*, "total_size")= num 2200
[10:30:56.194]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:56.194]  - attr(*, "already-done")= logi TRUE
[10:30:56.204] - reassign environment for ‘...future.FUN’
[10:30:56.204] - copied ‘...future.FUN’ to environment
[10:30:56.204] - reassign environment for ‘foo’
[10:30:56.204] - copied ‘foo’ to environment
[10:30:56.204] - copied ‘x’ to environment
[10:30:56.204] - copied ‘future.call.arguments’ to environment
[10:30:56.205] - copied ‘...future.elements_ii’ to environment
[10:30:56.205] - copied ‘...future.seeds_ii’ to environment
[10:30:56.205] - copied ‘...future.globals.maxSize’ to environment
[10:30:56.205] assign_globals() ... done
[10:30:56.205] plan(): Setting new future strategy stack:
[10:30:56.205] List of future strategies:
[10:30:56.205] 1. sequential:
[10:30:56.205]    - args: function (..., envir = parent.frame())
[10:30:56.205]    - tweaked: FALSE
[10:30:56.205]    - call: NULL
[10:30:56.206] plan(): nbrOfWorkers() = 1
[10:30:56.206] plan(): Setting new future strategy stack:
[10:30:56.207] List of future strategies:
[10:30:56.207] 1. sequential:
[10:30:56.207]    - args: function (..., envir = parent.frame())
[10:30:56.207]    - tweaked: FALSE
[10:30:56.207]    - call: plan(strategy)
[10:30:56.207] plan(): nbrOfWorkers() = 1
[10:30:56.207] SequentialFuture started (and completed)
[10:30:56.207] - Launch lazy future ... done
[10:30:56.207] run() for ‘SequentialFuture’ ... done
[10:30:56.207] Created future:
[10:30:56.208] SequentialFuture:
[10:30:56.208] Label: ‘future_replicate-1’
[10:30:56.208] Expression:
[10:30:56.208] {
[10:30:56.208]     do.call(function(...) {
[10:30:56.208]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.208]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:56.208]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.208]             on.exit(options(oopts), add = TRUE)
[10:30:56.208]         }
[10:30:56.208]         {
[10:30:56.208]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:56.208]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.208]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.208]                   envir = globalenv(), inherits = FALSE)
[10:30:56.208]                 ...future.FUN(...future.X_jj, ...)
[10:30:56.208]             })
[10:30:56.208]         }
[10:30:56.208]     }, args = future.call.arguments)
[10:30:56.208] }
[10:30:56.208] Lazy evaluation: FALSE
[10:30:56.208] Asynchronous evaluation: FALSE
[10:30:56.208] Local evaluation: TRUE
[10:30:56.208] Environment: 0x55aba1b10f90
[10:30:56.208] Capture standard output: TRUE
[10:30:56.208] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:30:56.208] Globals: 7 objects totaling 2.81 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, ...)
[10:30:56.208] Packages: <none>
[10:30:56.208] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:30:56.208] Resolved: TRUE
[10:30:56.208] Value: 320 bytes of class ‘list’
[10:30:56.208] Early signaling: FALSE
[10:30:56.208] Owner process: 7cdcbd4b-6c47-ca9a-dc3f-e18236d134b8
[10:30:56.208] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:30:56.209] Chunk #1 of 1 ... DONE
[10:30:56.209] Launching 1 futures (chunks) ... DONE
[10:30:56.209] Resolving 1 futures (chunks) ...
[10:30:56.209] resolve() on list ...
[10:30:56.209]  recursive: 0
[10:30:56.209]  length: 1
[10:30:56.209] 
[10:30:56.209] resolved() for ‘SequentialFuture’ ...
[10:30:56.210] - state: ‘finished’
[10:30:56.210] - run: TRUE
[10:30:56.210] - result: ‘FutureResult’
[10:30:56.210] resolved() for ‘SequentialFuture’ ... done
[10:30:56.210] Future #1
[10:30:56.210] signalConditionsASAP(SequentialFuture, pos=1) ...
[10:30:56.210] - nx: 1
[10:30:56.210] - relay: TRUE
[10:30:56.210] - stdout: TRUE
[10:30:56.211] - signal: TRUE
[10:30:56.211] - resignal: FALSE
[10:30:56.211] - force: TRUE
[10:30:56.211] - relayed: [n=1] FALSE
[10:30:56.211] - queued futures: [n=1] FALSE
[10:30:56.211]  - until=1
[10:30:56.211]  - relaying element #1
[10:30:56.211] - relayed: [n=1] TRUE
[10:30:56.211] - queued futures: [n=1] TRUE
[10:30:56.211] signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:30:56.212]  length: 0 (resolved future 1)
[10:30:56.212] Relaying remaining futures
[10:30:56.212] signalConditionsASAP(NULL, pos=0) ...
[10:30:56.212] - nx: 1
[10:30:56.212] - relay: TRUE
[10:30:56.212] - stdout: TRUE
[10:30:56.212] - signal: TRUE
[10:30:56.212] - resignal: FALSE
[10:30:56.212] - force: TRUE
[10:30:56.212] - relayed: [n=1] TRUE
[10:30:56.212] - queued futures: [n=1] TRUE
 - flush all
[10:30:56.213] - relayed: [n=1] TRUE
[10:30:56.213] - queued futures: [n=1] TRUE
[10:30:56.213] signalConditionsASAP(NULL, pos=0) ... done
[10:30:56.213] resolve() on list ... DONE
[10:30:56.213]  - Number of value chunks collected: 1
[10:30:56.213] Resolving 1 futures (chunks) ... DONE
[10:30:56.213] Reducing values from 1 chunks ...
[10:30:56.213]  - Number of values collected after concatenation: 5
[10:30:56.213]  - Number of values expected: 5
[10:30:56.213] Reducing values from 1 chunks ... DONE
[10:30:56.214] future_lapply() ... DONE
[10:30:56.214] plan(): Setting new future strategy stack:
[10:30:56.214] List of future strategies:
[10:30:56.214] 1. sequential:
[10:30:56.214]    - args: function (..., envir = parent.frame())
[10:30:56.214]    - tweaked: FALSE
[10:30:56.214]    - call: plan(sequential)
[10:30:56.215] plan(): nbrOfWorkers() = 1
*** strategy = ‘sequential’ ... done
*** strategy = ‘multicore’ ...
[10:30:56.215] plan(): Setting new future strategy stack:
[10:30:56.215] List of future strategies:
[10:30:56.215] 1. multicore:
[10:30:56.215]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:30:56.215]    - tweaked: FALSE
[10:30:56.215]    - call: plan(strategy)
[10:30:56.219] plan(): nbrOfWorkers() = 2
[10:30:56.219] future_lapply() ...
[10:30:56.220] Generating random seeds ...
[10:30:56.220] Generating random seed streams for 5 elements ...
[10:30:56.220] Generating random seed streams for 5 elements ... DONE
[10:30:56.220] Generating random seeds ... DONE
[10:30:56.220] Will set RNG state on exit: 10403, 17, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:30:56.228] Number of chunks: 2
[10:30:56.228] getGlobalsAndPackagesXApply() ...
[10:30:56.228]  - future.globals: TRUE
[10:30:56.228] getGlobalsAndPackages() ...
[10:30:56.228] Searching for globals...
[10:30:56.229] - globals found: [2] ‘FUN’, ‘sample’
[10:30:56.229] Searching for globals ... DONE
[10:30:56.229] Resolving globals: FALSE
[10:30:56.230] The total size of the 1 globals is 616 bytes (616 bytes)
[10:30:56.230] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[10:30:56.230] - globals: [1] ‘FUN’
[10:30:56.230] 
[10:30:56.231] getGlobalsAndPackages() ... DONE
[10:30:56.231]  - globals found/used: [n=1] ‘FUN’
[10:30:56.231]  - needed namespaces: [n=0] 
[10:30:56.231] Finding globals ... DONE
[10:30:56.231]  - use_args: TRUE
[10:30:56.231]  - Getting '...' globals ...
[10:30:56.231] resolve() on list ...
[10:30:56.231]  recursive: 0
[10:30:56.231]  length: 1
[10:30:56.232]  elements: ‘...’
[10:30:56.232]  length: 0 (resolved future 1)
[10:30:56.232] resolve() on list ... DONE
[10:30:56.232]    - '...' content: [n=0] 
[10:30:56.232] List of 1
[10:30:56.232]  $ ...: list()
[10:30:56.232]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:56.232]  - attr(*, "where")=List of 1
[10:30:56.232]   ..$ ...:<environment: 0x55aba3208910> 
[10:30:56.232]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:56.232]  - attr(*, "resolved")= logi TRUE
[10:30:56.232]  - attr(*, "total_size")= num NA
[10:30:56.235]  - Getting '...' globals ... DONE
[10:30:56.235] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:30:56.235] List of 2
[10:30:56.235]  $ ...future.FUN:function (...)  
[10:30:56.235]  $ ...          : list()
[10:30:56.235]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:56.235]  - attr(*, "where")=List of 2
[10:30:56.235]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:30:56.235]   ..$ ...          :<environment: 0x55aba3208910> 
[10:30:56.235]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:56.235]  - attr(*, "resolved")= logi FALSE
[10:30:56.235]  - attr(*, "total_size")= num 616
[10:30:56.238] Packages to be attached in all futures: [n=0] 
[10:30:56.238] getGlobalsAndPackagesXApply() ... DONE
[10:30:56.238] Number of futures (= number of chunks): 2
[10:30:56.238] Launching 2 futures (chunks) ...
[10:30:56.238] Chunk #1 of 2 ...
[10:30:56.238]  - Finding globals in 'X' for chunk #1 ...
[10:30:56.238] getGlobalsAndPackages() ...
[10:30:56.238] Searching for globals...
[10:30:56.239] 
[10:30:56.239] Searching for globals ... DONE
[10:30:56.239] - globals: [0] <none>
[10:30:56.239] getGlobalsAndPackages() ... DONE
[10:30:56.239]    + additional globals found: [n=0] 
[10:30:56.239]    + additional namespaces needed: [n=0] 
[10:30:56.239]  - Finding globals in 'X' for chunk #1 ... DONE
[10:30:56.239]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:30:56.239]  - seeds: [2] <seeds>
[10:30:56.240]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.240] getGlobalsAndPackages() ...
[10:30:56.240] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.240] Resolving globals: FALSE
[10:30:56.240] Tweak future expression to call with '...' arguments ...
[10:30:56.240] {
[10:30:56.240]     do.call(function(...) {
[10:30:56.240]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.240]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:56.240]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.240]             on.exit(options(oopts), add = TRUE)
[10:30:56.240]         }
[10:30:56.240]         {
[10:30:56.240]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:56.240]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.240]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.240]                   envir = globalenv(), inherits = FALSE)
[10:30:56.240]                 ...future.FUN(...future.X_jj, ...)
[10:30:56.240]             })
[10:30:56.240]         }
[10:30:56.240]     }, args = future.call.arguments)
[10:30:56.240] }
[10:30:56.240] Tweak future expression to call with '...' arguments ... DONE
[10:30:56.241] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.241] 
[10:30:56.241] getGlobalsAndPackages() ... DONE
[10:30:56.241] run() for ‘Future’ ...
[10:30:56.241] - state: ‘created’
[10:30:56.241] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:30:56.245] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:56.245] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:30:56.246]   - Field: ‘label’
[10:30:56.246]   - Field: ‘local’
[10:30:56.246]   - Field: ‘owner’
[10:30:56.246]   - Field: ‘envir’
[10:30:56.246]   - Field: ‘workers’
[10:30:56.246]   - Field: ‘packages’
[10:30:56.246]   - Field: ‘gc’
[10:30:56.246]   - Field: ‘job’
[10:30:56.246]   - Field: ‘conditions’
[10:30:56.246]   - Field: ‘expr’
[10:30:56.247]   - Field: ‘uuid’
[10:30:56.247]   - Field: ‘seed’
[10:30:56.247]   - Field: ‘version’
[10:30:56.247]   - Field: ‘result’
[10:30:56.247]   - Field: ‘asynchronous’
[10:30:56.247]   - Field: ‘calls’
[10:30:56.247]   - Field: ‘globals’
[10:30:56.247]   - Field: ‘stdout’
[10:30:56.247]   - Field: ‘earlySignal’
[10:30:56.247]   - Field: ‘lazy’
[10:30:56.247]   - Field: ‘state’
[10:30:56.248] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:30:56.248] - Launch lazy future ...
[10:30:56.249] Packages needed by the future expression (n = 0): <none>
[10:30:56.249] Packages needed by future strategies (n = 0): <none>
[10:30:56.249] {
[10:30:56.249]     {
[10:30:56.249]         {
[10:30:56.249]             ...future.startTime <- base::Sys.time()
[10:30:56.249]             {
[10:30:56.249]                 {
[10:30:56.249]                   {
[10:30:56.249]                     {
[10:30:56.249]                       base::local({
[10:30:56.249]                         has_future <- base::requireNamespace("future", 
[10:30:56.249]                           quietly = TRUE)
[10:30:56.249]                         if (has_future) {
[10:30:56.249]                           ns <- base::getNamespace("future")
[10:30:56.249]                           version <- ns[[".package"]][["version"]]
[10:30:56.249]                           if (is.null(version)) 
[10:30:56.249]                             version <- utils::packageVersion("future")
[10:30:56.249]                         }
[10:30:56.249]                         else {
[10:30:56.249]                           version <- NULL
[10:30:56.249]                         }
[10:30:56.249]                         if (!has_future || version < "1.8.0") {
[10:30:56.249]                           info <- base::c(r_version = base::gsub("R version ", 
[10:30:56.249]                             "", base::R.version$version.string), 
[10:30:56.249]                             platform = base::sprintf("%s (%s-bit)", 
[10:30:56.249]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:30:56.249]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:30:56.249]                               "release", "version")], collapse = " "), 
[10:30:56.249]                             hostname = base::Sys.info()[["nodename"]])
[10:30:56.249]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:30:56.249]                             info)
[10:30:56.249]                           info <- base::paste(info, collapse = "; ")
[10:30:56.249]                           if (!has_future) {
[10:30:56.249]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:30:56.249]                               info)
[10:30:56.249]                           }
[10:30:56.249]                           else {
[10:30:56.249]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:30:56.249]                               info, version)
[10:30:56.249]                           }
[10:30:56.249]                           base::stop(msg)
[10:30:56.249]                         }
[10:30:56.249]                       })
[10:30:56.249]                     }
[10:30:56.249]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:30:56.249]                     base::options(mc.cores = 1L)
[10:30:56.249]                   }
[10:30:56.249]                   ...future.strategy.old <- future::plan("list")
[10:30:56.249]                   options(future.plan = NULL)
[10:30:56.249]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:30:56.249]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:30:56.249]                 }
[10:30:56.249]                 ...future.workdir <- getwd()
[10:30:56.249]             }
[10:30:56.249]             ...future.oldOptions <- base::as.list(base::.Options)
[10:30:56.249]             ...future.oldEnvVars <- base::Sys.getenv()
[10:30:56.249]         }
[10:30:56.249]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:30:56.249]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:30:56.249]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:30:56.249]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:30:56.249]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:30:56.249]             future.stdout.windows.reencode = NULL, width = 80L)
[10:30:56.249]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:30:56.249]             base::names(...future.oldOptions))
[10:30:56.249]     }
[10:30:56.249]     if (FALSE) {
[10:30:56.249]     }
[10:30:56.249]     else {
[10:30:56.249]         if (TRUE) {
[10:30:56.249]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:30:56.249]                 open = "w")
[10:30:56.249]         }
[10:30:56.249]         else {
[10:30:56.249]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:30:56.249]                 windows = "NUL", "/dev/null"), open = "w")
[10:30:56.249]         }
[10:30:56.249]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:30:56.249]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:30:56.249]             base::sink(type = "output", split = FALSE)
[10:30:56.249]             base::close(...future.stdout)
[10:30:56.249]         }, add = TRUE)
[10:30:56.249]     }
[10:30:56.249]     ...future.frame <- base::sys.nframe()
[10:30:56.249]     ...future.conditions <- base::list()
[10:30:56.249]     ...future.rng <- base::globalenv()$.Random.seed
[10:30:56.249]     if (FALSE) {
[10:30:56.249]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:30:56.249]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:30:56.249]     }
[10:30:56.249]     ...future.result <- base::tryCatch({
[10:30:56.249]         base::withCallingHandlers({
[10:30:56.249]             ...future.value <- base::withVisible(base::local({
[10:30:56.249]                 withCallingHandlers({
[10:30:56.249]                   {
[10:30:56.249]                     do.call(function(...) {
[10:30:56.249]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.249]                       if (!identical(...future.globals.maxSize.org, 
[10:30:56.249]                         ...future.globals.maxSize)) {
[10:30:56.249]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.249]                         on.exit(options(oopts), add = TRUE)
[10:30:56.249]                       }
[10:30:56.249]                       {
[10:30:56.249]                         lapply(seq_along(...future.elements_ii), 
[10:30:56.249]                           FUN = function(jj) {
[10:30:56.249]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.249]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.249]                               envir = globalenv(), inherits = FALSE)
[10:30:56.249]                             ...future.FUN(...future.X_jj, ...)
[10:30:56.249]                           })
[10:30:56.249]                       }
[10:30:56.249]                     }, args = future.call.arguments)
[10:30:56.249]                   }
[10:30:56.249]                 }, immediateCondition = function(cond) {
[10:30:56.249]                   save_rds <- function (object, pathname, ...) 
[10:30:56.249]                   {
[10:30:56.249]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:30:56.249]                     if (file_test("-f", pathname_tmp)) {
[10:30:56.249]                       fi_tmp <- file.info(pathname_tmp)
[10:30:56.249]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:30:56.249]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:30:56.249]                         fi_tmp[["mtime"]])
[10:30:56.249]                     }
[10:30:56.249]                     tryCatch({
[10:30:56.249]                       saveRDS(object, file = pathname_tmp, ...)
[10:30:56.249]                     }, error = function(ex) {
[10:30:56.249]                       msg <- conditionMessage(ex)
[10:30:56.249]                       fi_tmp <- file.info(pathname_tmp)
[10:30:56.249]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:30:56.249]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:30:56.249]                         fi_tmp[["mtime"]], msg)
[10:30:56.249]                       ex$message <- msg
[10:30:56.249]                       stop(ex)
[10:30:56.249]                     })
[10:30:56.249]                     stopifnot(file_test("-f", pathname_tmp))
[10:30:56.249]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:30:56.249]                     if (!res || file_test("-f", pathname_tmp)) {
[10:30:56.249]                       fi_tmp <- file.info(pathname_tmp)
[10:30:56.249]                       fi <- file.info(pathname)
[10:30:56.249]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:30:56.249]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:30:56.249]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:30:56.249]                         fi[["size"]], fi[["mtime"]])
[10:30:56.249]                       stop(msg)
[10:30:56.249]                     }
[10:30:56.249]                     invisible(pathname)
[10:30:56.249]                   }
[10:30:56.249]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:30:56.249]                     rootPath = tempdir()) 
[10:30:56.249]                   {
[10:30:56.249]                     obj <- list(time = Sys.time(), condition = cond)
[10:30:56.249]                     file <- tempfile(pattern = class(cond)[1], 
[10:30:56.249]                       tmpdir = path, fileext = ".rds")
[10:30:56.249]                     save_rds(obj, file)
[10:30:56.249]                   }
[10:30:56.249]                   saveImmediateCondition(cond, path = "/tmp/RtmpkDVBSn/.future/immediateConditions")
[10:30:56.249]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.249]                   {
[10:30:56.249]                     inherits <- base::inherits
[10:30:56.249]                     invokeRestart <- base::invokeRestart
[10:30:56.249]                     is.null <- base::is.null
[10:30:56.249]                     muffled <- FALSE
[10:30:56.249]                     if (inherits(cond, "message")) {
[10:30:56.249]                       muffled <- grepl(pattern, "muffleMessage")
[10:30:56.249]                       if (muffled) 
[10:30:56.249]                         invokeRestart("muffleMessage")
[10:30:56.249]                     }
[10:30:56.249]                     else if (inherits(cond, "warning")) {
[10:30:56.249]                       muffled <- grepl(pattern, "muffleWarning")
[10:30:56.249]                       if (muffled) 
[10:30:56.249]                         invokeRestart("muffleWarning")
[10:30:56.249]                     }
[10:30:56.249]                     else if (inherits(cond, "condition")) {
[10:30:56.249]                       if (!is.null(pattern)) {
[10:30:56.249]                         computeRestarts <- base::computeRestarts
[10:30:56.249]                         grepl <- base::grepl
[10:30:56.249]                         restarts <- computeRestarts(cond)
[10:30:56.249]                         for (restart in restarts) {
[10:30:56.249]                           name <- restart$name
[10:30:56.249]                           if (is.null(name)) 
[10:30:56.249]                             next
[10:30:56.249]                           if (!grepl(pattern, name)) 
[10:30:56.249]                             next
[10:30:56.249]                           invokeRestart(restart)
[10:30:56.249]                           muffled <- TRUE
[10:30:56.249]                           break
[10:30:56.249]                         }
[10:30:56.249]                       }
[10:30:56.249]                     }
[10:30:56.249]                     invisible(muffled)
[10:30:56.249]                   }
[10:30:56.249]                   muffleCondition(cond)
[10:30:56.249]                 })
[10:30:56.249]             }))
[10:30:56.249]             future::FutureResult(value = ...future.value$value, 
[10:30:56.249]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:56.249]                   ...future.rng), globalenv = if (FALSE) 
[10:30:56.249]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:30:56.249]                     ...future.globalenv.names))
[10:30:56.249]                 else NULL, started = ...future.startTime, version = "1.8")
[10:30:56.249]         }, condition = base::local({
[10:30:56.249]             c <- base::c
[10:30:56.249]             inherits <- base::inherits
[10:30:56.249]             invokeRestart <- base::invokeRestart
[10:30:56.249]             length <- base::length
[10:30:56.249]             list <- base::list
[10:30:56.249]             seq.int <- base::seq.int
[10:30:56.249]             signalCondition <- base::signalCondition
[10:30:56.249]             sys.calls <- base::sys.calls
[10:30:56.249]             `[[` <- base::`[[`
[10:30:56.249]             `+` <- base::`+`
[10:30:56.249]             `<<-` <- base::`<<-`
[10:30:56.249]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:30:56.249]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:30:56.249]                   3L)]
[10:30:56.249]             }
[10:30:56.249]             function(cond) {
[10:30:56.249]                 is_error <- inherits(cond, "error")
[10:30:56.249]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:30:56.249]                   NULL)
[10:30:56.249]                 if (is_error) {
[10:30:56.249]                   sessionInformation <- function() {
[10:30:56.249]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:30:56.249]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:30:56.249]                       search = base::search(), system = base::Sys.info())
[10:30:56.249]                   }
[10:30:56.249]                   ...future.conditions[[length(...future.conditions) + 
[10:30:56.249]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:30:56.249]                     cond$call), session = sessionInformation(), 
[10:30:56.249]                     timestamp = base::Sys.time(), signaled = 0L)
[10:30:56.249]                   signalCondition(cond)
[10:30:56.249]                 }
[10:30:56.249]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:30:56.249]                 "immediateCondition"))) {
[10:30:56.249]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:30:56.249]                   ...future.conditions[[length(...future.conditions) + 
[10:30:56.249]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:30:56.249]                   if (TRUE && !signal) {
[10:30:56.249]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.249]                     {
[10:30:56.249]                       inherits <- base::inherits
[10:30:56.249]                       invokeRestart <- base::invokeRestart
[10:30:56.249]                       is.null <- base::is.null
[10:30:56.249]                       muffled <- FALSE
[10:30:56.249]                       if (inherits(cond, "message")) {
[10:30:56.249]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:56.249]                         if (muffled) 
[10:30:56.249]                           invokeRestart("muffleMessage")
[10:30:56.249]                       }
[10:30:56.249]                       else if (inherits(cond, "warning")) {
[10:30:56.249]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:56.249]                         if (muffled) 
[10:30:56.249]                           invokeRestart("muffleWarning")
[10:30:56.249]                       }
[10:30:56.249]                       else if (inherits(cond, "condition")) {
[10:30:56.249]                         if (!is.null(pattern)) {
[10:30:56.249]                           computeRestarts <- base::computeRestarts
[10:30:56.249]                           grepl <- base::grepl
[10:30:56.249]                           restarts <- computeRestarts(cond)
[10:30:56.249]                           for (restart in restarts) {
[10:30:56.249]                             name <- restart$name
[10:30:56.249]                             if (is.null(name)) 
[10:30:56.249]                               next
[10:30:56.249]                             if (!grepl(pattern, name)) 
[10:30:56.249]                               next
[10:30:56.249]                             invokeRestart(restart)
[10:30:56.249]                             muffled <- TRUE
[10:30:56.249]                             break
[10:30:56.249]                           }
[10:30:56.249]                         }
[10:30:56.249]                       }
[10:30:56.249]                       invisible(muffled)
[10:30:56.249]                     }
[10:30:56.249]                     muffleCondition(cond, pattern = "^muffle")
[10:30:56.249]                   }
[10:30:56.249]                 }
[10:30:56.249]                 else {
[10:30:56.249]                   if (TRUE) {
[10:30:56.249]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.249]                     {
[10:30:56.249]                       inherits <- base::inherits
[10:30:56.249]                       invokeRestart <- base::invokeRestart
[10:30:56.249]                       is.null <- base::is.null
[10:30:56.249]                       muffled <- FALSE
[10:30:56.249]                       if (inherits(cond, "message")) {
[10:30:56.249]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:56.249]                         if (muffled) 
[10:30:56.249]                           invokeRestart("muffleMessage")
[10:30:56.249]                       }
[10:30:56.249]                       else if (inherits(cond, "warning")) {
[10:30:56.249]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:56.249]                         if (muffled) 
[10:30:56.249]                           invokeRestart("muffleWarning")
[10:30:56.249]                       }
[10:30:56.249]                       else if (inherits(cond, "condition")) {
[10:30:56.249]                         if (!is.null(pattern)) {
[10:30:56.249]                           computeRestarts <- base::computeRestarts
[10:30:56.249]                           grepl <- base::grepl
[10:30:56.249]                           restarts <- computeRestarts(cond)
[10:30:56.249]                           for (restart in restarts) {
[10:30:56.249]                             name <- restart$name
[10:30:56.249]                             if (is.null(name)) 
[10:30:56.249]                               next
[10:30:56.249]                             if (!grepl(pattern, name)) 
[10:30:56.249]                               next
[10:30:56.249]                             invokeRestart(restart)
[10:30:56.249]                             muffled <- TRUE
[10:30:56.249]                             break
[10:30:56.249]                           }
[10:30:56.249]                         }
[10:30:56.249]                       }
[10:30:56.249]                       invisible(muffled)
[10:30:56.249]                     }
[10:30:56.249]                     muffleCondition(cond, pattern = "^muffle")
[10:30:56.249]                   }
[10:30:56.249]                 }
[10:30:56.249]             }
[10:30:56.249]         }))
[10:30:56.249]     }, error = function(ex) {
[10:30:56.249]         base::structure(base::list(value = NULL, visible = NULL, 
[10:30:56.249]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:56.249]                 ...future.rng), started = ...future.startTime, 
[10:30:56.249]             finished = Sys.time(), session_uuid = NA_character_, 
[10:30:56.249]             version = "1.8"), class = "FutureResult")
[10:30:56.249]     }, finally = {
[10:30:56.249]         if (!identical(...future.workdir, getwd())) 
[10:30:56.249]             setwd(...future.workdir)
[10:30:56.249]         {
[10:30:56.249]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:30:56.249]                 ...future.oldOptions$nwarnings <- NULL
[10:30:56.249]             }
[10:30:56.249]             base::options(...future.oldOptions)
[10:30:56.249]             if (.Platform$OS.type == "windows") {
[10:30:56.249]                 old_names <- names(...future.oldEnvVars)
[10:30:56.249]                 envs <- base::Sys.getenv()
[10:30:56.249]                 names <- names(envs)
[10:30:56.249]                 common <- intersect(names, old_names)
[10:30:56.249]                 added <- setdiff(names, old_names)
[10:30:56.249]                 removed <- setdiff(old_names, names)
[10:30:56.249]                 changed <- common[...future.oldEnvVars[common] != 
[10:30:56.249]                   envs[common]]
[10:30:56.249]                 NAMES <- toupper(changed)
[10:30:56.249]                 args <- list()
[10:30:56.249]                 for (kk in seq_along(NAMES)) {
[10:30:56.249]                   name <- changed[[kk]]
[10:30:56.249]                   NAME <- NAMES[[kk]]
[10:30:56.249]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.249]                     next
[10:30:56.249]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:56.249]                 }
[10:30:56.249]                 NAMES <- toupper(added)
[10:30:56.249]                 for (kk in seq_along(NAMES)) {
[10:30:56.249]                   name <- added[[kk]]
[10:30:56.249]                   NAME <- NAMES[[kk]]
[10:30:56.249]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.249]                     next
[10:30:56.249]                   args[[name]] <- ""
[10:30:56.249]                 }
[10:30:56.249]                 NAMES <- toupper(removed)
[10:30:56.249]                 for (kk in seq_along(NAMES)) {
[10:30:56.249]                   name <- removed[[kk]]
[10:30:56.249]                   NAME <- NAMES[[kk]]
[10:30:56.249]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.249]                     next
[10:30:56.249]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:56.249]                 }
[10:30:56.249]                 if (length(args) > 0) 
[10:30:56.249]                   base::do.call(base::Sys.setenv, args = args)
[10:30:56.249]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:30:56.249]             }
[10:30:56.249]             else {
[10:30:56.249]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:30:56.249]             }
[10:30:56.249]             {
[10:30:56.249]                 if (base::length(...future.futureOptionsAdded) > 
[10:30:56.249]                   0L) {
[10:30:56.249]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:30:56.249]                   base::names(opts) <- ...future.futureOptionsAdded
[10:30:56.249]                   base::options(opts)
[10:30:56.249]                 }
[10:30:56.249]                 {
[10:30:56.249]                   {
[10:30:56.249]                     base::options(mc.cores = ...future.mc.cores.old)
[10:30:56.249]                     NULL
[10:30:56.249]                   }
[10:30:56.249]                   options(future.plan = NULL)
[10:30:56.249]                   if (is.na(NA_character_)) 
[10:30:56.249]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:30:56.249]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:30:56.249]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:30:56.249]                     .init = FALSE)
[10:30:56.249]                 }
[10:30:56.249]             }
[10:30:56.249]         }
[10:30:56.249]     })
[10:30:56.249]     if (TRUE) {
[10:30:56.249]         base::sink(type = "output", split = FALSE)
[10:30:56.249]         if (TRUE) {
[10:30:56.249]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:30:56.249]         }
[10:30:56.249]         else {
[10:30:56.249]             ...future.result["stdout"] <- base::list(NULL)
[10:30:56.249]         }
[10:30:56.249]         base::close(...future.stdout)
[10:30:56.249]         ...future.stdout <- NULL
[10:30:56.249]     }
[10:30:56.249]     ...future.result$conditions <- ...future.conditions
[10:30:56.249]     ...future.result$finished <- base::Sys.time()
[10:30:56.249]     ...future.result
[10:30:56.249] }
[10:30:56.252] assign_globals() ...
[10:30:56.252] List of 5
[10:30:56.252]  $ ...future.FUN            :function (...)  
[10:30:56.252]  $ future.call.arguments    : list()
[10:30:56.252]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:56.252]  $ ...future.elements_ii    :List of 2
[10:30:56.252]   ..$ : int 0
[10:30:56.252]   ..$ : int 0
[10:30:56.252]  $ ...future.seeds_ii       :List of 2
[10:30:56.252]   ..$ : int [1:7] 10407 800596211 191202253 -1245543361 -1911991084 -470201595 630973807
[10:30:56.252]   ..$ : int [1:7] 10407 336362669 -1847432762 -712550016 1068830663 1731026700 1489470838
[10:30:56.252]  $ ...future.globals.maxSize: NULL
[10:30:56.252]  - attr(*, "where")=List of 5
[10:30:56.252]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:30:56.252]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:30:56.252]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:30:56.252]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:30:56.252]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:30:56.252]  - attr(*, "resolved")= logi FALSE
[10:30:56.252]  - attr(*, "total_size")= num 616
[10:30:56.252]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:56.252]  - attr(*, "already-done")= logi TRUE
[10:30:56.259] - reassign environment for ‘...future.FUN’
[10:30:56.259] - copied ‘...future.FUN’ to environment
[10:30:56.260] - copied ‘future.call.arguments’ to environment
[10:30:56.260] - copied ‘...future.elements_ii’ to environment
[10:30:56.260] - copied ‘...future.seeds_ii’ to environment
[10:30:56.260] - copied ‘...future.globals.maxSize’ to environment
[10:30:56.260] assign_globals() ... done
[10:30:56.260] requestCore(): workers = 2
[10:30:56.263] MulticoreFuture started
[10:30:56.264] - Launch lazy future ... done
[10:30:56.264] run() for ‘MulticoreFuture’ ... done
[10:30:56.264] plan(): Setting new future strategy stack:
[10:30:56.264] Created future:
[10:30:56.264] List of future strategies:
[10:30:56.264] 1. sequential:
[10:30:56.264]    - args: function (..., envir = parent.frame())
[10:30:56.264]    - tweaked: FALSE
[10:30:56.264]    - call: NULL
[10:30:56.265] plan(): nbrOfWorkers() = 1
[10:30:56.267] plan(): Setting new future strategy stack:
[10:30:56.268] List of future strategies:
[10:30:56.268] 1. multicore:
[10:30:56.268]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:30:56.268]    - tweaked: FALSE
[10:30:56.268]    - call: plan(strategy)
[10:30:56.273] plan(): nbrOfWorkers() = 2
[10:30:56.265] MulticoreFuture:
[10:30:56.265] Label: ‘future_replicate-1’
[10:30:56.265] Expression:
[10:30:56.265] {
[10:30:56.265]     do.call(function(...) {
[10:30:56.265]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.265]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:56.265]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.265]             on.exit(options(oopts), add = TRUE)
[10:30:56.265]         }
[10:30:56.265]         {
[10:30:56.265]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:56.265]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.265]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.265]                   envir = globalenv(), inherits = FALSE)
[10:30:56.265]                 ...future.FUN(...future.X_jj, ...)
[10:30:56.265]             })
[10:30:56.265]         }
[10:30:56.265]     }, args = future.call.arguments)
[10:30:56.265] }
[10:30:56.265] Lazy evaluation: FALSE
[10:30:56.265] Asynchronous evaluation: TRUE
[10:30:56.265] Local evaluation: TRUE
[10:30:56.265] Environment: R_GlobalEnv
[10:30:56.265] Capture standard output: TRUE
[10:30:56.265] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:30:56.265] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:30:56.265] Packages: <none>
[10:30:56.265] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:30:56.265] Resolved: TRUE
[10:30:56.265] Value: <not collected>
[10:30:56.265] Conditions captured: <none>
[10:30:56.265] Early signaling: FALSE
[10:30:56.265] Owner process: 7cdcbd4b-6c47-ca9a-dc3f-e18236d134b8
[10:30:56.265] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:56.274] Chunk #1 of 2 ... DONE
[10:30:56.275] Chunk #2 of 2 ...
[10:30:56.275]  - Finding globals in 'X' for chunk #2 ...
[10:30:56.275] getGlobalsAndPackages() ...
[10:30:56.275] Searching for globals...
[10:30:56.276] 
[10:30:56.276] Searching for globals ... DONE
[10:30:56.276] - globals: [0] <none>
[10:30:56.276] getGlobalsAndPackages() ... DONE
[10:30:56.276]    + additional globals found: [n=0] 
[10:30:56.276]    + additional namespaces needed: [n=0] 
[10:30:56.276]  - Finding globals in 'X' for chunk #2 ... DONE
[10:30:56.277]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:30:56.277]  - seeds: [3] <seeds>
[10:30:56.277]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.277] getGlobalsAndPackages() ...
[10:30:56.277] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.277] Resolving globals: FALSE
[10:30:56.278] Tweak future expression to call with '...' arguments ...
[10:30:56.278] {
[10:30:56.278]     do.call(function(...) {
[10:30:56.278]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.278]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:56.278]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.278]             on.exit(options(oopts), add = TRUE)
[10:30:56.278]         }
[10:30:56.278]         {
[10:30:56.278]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:56.278]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.278]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.278]                   envir = globalenv(), inherits = FALSE)
[10:30:56.278]                 ...future.FUN(...future.X_jj, ...)
[10:30:56.278]             })
[10:30:56.278]         }
[10:30:56.278]     }, args = future.call.arguments)
[10:30:56.278] }
[10:30:56.278] Tweak future expression to call with '...' arguments ... DONE
[10:30:56.279] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.279] 
[10:30:56.279] getGlobalsAndPackages() ... DONE
[10:30:56.280] run() for ‘Future’ ...
[10:30:56.280] - state: ‘created’
[10:30:56.280] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:30:56.285] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:56.285] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:30:56.285]   - Field: ‘label’
[10:30:56.286]   - Field: ‘local’
[10:30:56.286]   - Field: ‘owner’
[10:30:56.286]   - Field: ‘envir’
[10:30:56.286]   - Field: ‘workers’
[10:30:56.286]   - Field: ‘packages’
[10:30:56.286]   - Field: ‘gc’
[10:30:56.287]   - Field: ‘job’
[10:30:56.287]   - Field: ‘conditions’
[10:30:56.287]   - Field: ‘expr’
[10:30:56.287]   - Field: ‘uuid’
[10:30:56.287]   - Field: ‘seed’
[10:30:56.287]   - Field: ‘version’
[10:30:56.287]   - Field: ‘result’
[10:30:56.287]   - Field: ‘asynchronous’
[10:30:56.288]   - Field: ‘calls’
[10:30:56.288]   - Field: ‘globals’
[10:30:56.288]   - Field: ‘stdout’
[10:30:56.288]   - Field: ‘earlySignal’
[10:30:56.288]   - Field: ‘lazy’
[10:30:56.288]   - Field: ‘state’
[10:30:56.288] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:30:56.289] - Launch lazy future ...
[10:30:56.289] Packages needed by the future expression (n = 0): <none>
[10:30:56.289] Packages needed by future strategies (n = 0): <none>
[10:30:56.290] {
[10:30:56.290]     {
[10:30:56.290]         {
[10:30:56.290]             ...future.startTime <- base::Sys.time()
[10:30:56.290]             {
[10:30:56.290]                 {
[10:30:56.290]                   {
[10:30:56.290]                     {
[10:30:56.290]                       base::local({
[10:30:56.290]                         has_future <- base::requireNamespace("future", 
[10:30:56.290]                           quietly = TRUE)
[10:30:56.290]                         if (has_future) {
[10:30:56.290]                           ns <- base::getNamespace("future")
[10:30:56.290]                           version <- ns[[".package"]][["version"]]
[10:30:56.290]                           if (is.null(version)) 
[10:30:56.290]                             version <- utils::packageVersion("future")
[10:30:56.290]                         }
[10:30:56.290]                         else {
[10:30:56.290]                           version <- NULL
[10:30:56.290]                         }
[10:30:56.290]                         if (!has_future || version < "1.8.0") {
[10:30:56.290]                           info <- base::c(r_version = base::gsub("R version ", 
[10:30:56.290]                             "", base::R.version$version.string), 
[10:30:56.290]                             platform = base::sprintf("%s (%s-bit)", 
[10:30:56.290]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:30:56.290]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:30:56.290]                               "release", "version")], collapse = " "), 
[10:30:56.290]                             hostname = base::Sys.info()[["nodename"]])
[10:30:56.290]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:30:56.290]                             info)
[10:30:56.290]                           info <- base::paste(info, collapse = "; ")
[10:30:56.290]                           if (!has_future) {
[10:30:56.290]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:30:56.290]                               info)
[10:30:56.290]                           }
[10:30:56.290]                           else {
[10:30:56.290]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:30:56.290]                               info, version)
[10:30:56.290]                           }
[10:30:56.290]                           base::stop(msg)
[10:30:56.290]                         }
[10:30:56.290]                       })
[10:30:56.290]                     }
[10:30:56.290]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:30:56.290]                     base::options(mc.cores = 1L)
[10:30:56.290]                   }
[10:30:56.290]                   ...future.strategy.old <- future::plan("list")
[10:30:56.290]                   options(future.plan = NULL)
[10:30:56.290]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:30:56.290]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:30:56.290]                 }
[10:30:56.290]                 ...future.workdir <- getwd()
[10:30:56.290]             }
[10:30:56.290]             ...future.oldOptions <- base::as.list(base::.Options)
[10:30:56.290]             ...future.oldEnvVars <- base::Sys.getenv()
[10:30:56.290]         }
[10:30:56.290]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:30:56.290]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:30:56.290]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:30:56.290]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:30:56.290]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:30:56.290]             future.stdout.windows.reencode = NULL, width = 80L)
[10:30:56.290]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:30:56.290]             base::names(...future.oldOptions))
[10:30:56.290]     }
[10:30:56.290]     if (FALSE) {
[10:30:56.290]     }
[10:30:56.290]     else {
[10:30:56.290]         if (TRUE) {
[10:30:56.290]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:30:56.290]                 open = "w")
[10:30:56.290]         }
[10:30:56.290]         else {
[10:30:56.290]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:30:56.290]                 windows = "NUL", "/dev/null"), open = "w")
[10:30:56.290]         }
[10:30:56.290]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:30:56.290]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:30:56.290]             base::sink(type = "output", split = FALSE)
[10:30:56.290]             base::close(...future.stdout)
[10:30:56.290]         }, add = TRUE)
[10:30:56.290]     }
[10:30:56.290]     ...future.frame <- base::sys.nframe()
[10:30:56.290]     ...future.conditions <- base::list()
[10:30:56.290]     ...future.rng <- base::globalenv()$.Random.seed
[10:30:56.290]     if (FALSE) {
[10:30:56.290]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:30:56.290]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:30:56.290]     }
[10:30:56.290]     ...future.result <- base::tryCatch({
[10:30:56.290]         base::withCallingHandlers({
[10:30:56.290]             ...future.value <- base::withVisible(base::local({
[10:30:56.290]                 withCallingHandlers({
[10:30:56.290]                   {
[10:30:56.290]                     do.call(function(...) {
[10:30:56.290]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.290]                       if (!identical(...future.globals.maxSize.org, 
[10:30:56.290]                         ...future.globals.maxSize)) {
[10:30:56.290]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.290]                         on.exit(options(oopts), add = TRUE)
[10:30:56.290]                       }
[10:30:56.290]                       {
[10:30:56.290]                         lapply(seq_along(...future.elements_ii), 
[10:30:56.290]                           FUN = function(jj) {
[10:30:56.290]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.290]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.290]                               envir = globalenv(), inherits = FALSE)
[10:30:56.290]                             ...future.FUN(...future.X_jj, ...)
[10:30:56.290]                           })
[10:30:56.290]                       }
[10:30:56.290]                     }, args = future.call.arguments)
[10:30:56.290]                   }
[10:30:56.290]                 }, immediateCondition = function(cond) {
[10:30:56.290]                   save_rds <- function (object, pathname, ...) 
[10:30:56.290]                   {
[10:30:56.290]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:30:56.290]                     if (file_test("-f", pathname_tmp)) {
[10:30:56.290]                       fi_tmp <- file.info(pathname_tmp)
[10:30:56.290]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:30:56.290]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:30:56.290]                         fi_tmp[["mtime"]])
[10:30:56.290]                     }
[10:30:56.290]                     tryCatch({
[10:30:56.290]                       saveRDS(object, file = pathname_tmp, ...)
[10:30:56.290]                     }, error = function(ex) {
[10:30:56.290]                       msg <- conditionMessage(ex)
[10:30:56.290]                       fi_tmp <- file.info(pathname_tmp)
[10:30:56.290]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:30:56.290]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:30:56.290]                         fi_tmp[["mtime"]], msg)
[10:30:56.290]                       ex$message <- msg
[10:30:56.290]                       stop(ex)
[10:30:56.290]                     })
[10:30:56.290]                     stopifnot(file_test("-f", pathname_tmp))
[10:30:56.290]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:30:56.290]                     if (!res || file_test("-f", pathname_tmp)) {
[10:30:56.290]                       fi_tmp <- file.info(pathname_tmp)
[10:30:56.290]                       fi <- file.info(pathname)
[10:30:56.290]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:30:56.290]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:30:56.290]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:30:56.290]                         fi[["size"]], fi[["mtime"]])
[10:30:56.290]                       stop(msg)
[10:30:56.290]                     }
[10:30:56.290]                     invisible(pathname)
[10:30:56.290]                   }
[10:30:56.290]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:30:56.290]                     rootPath = tempdir()) 
[10:30:56.290]                   {
[10:30:56.290]                     obj <- list(time = Sys.time(), condition = cond)
[10:30:56.290]                     file <- tempfile(pattern = class(cond)[1], 
[10:30:56.290]                       tmpdir = path, fileext = ".rds")
[10:30:56.290]                     save_rds(obj, file)
[10:30:56.290]                   }
[10:30:56.290]                   saveImmediateCondition(cond, path = "/tmp/RtmpkDVBSn/.future/immediateConditions")
[10:30:56.290]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.290]                   {
[10:30:56.290]                     inherits <- base::inherits
[10:30:56.290]                     invokeRestart <- base::invokeRestart
[10:30:56.290]                     is.null <- base::is.null
[10:30:56.290]                     muffled <- FALSE
[10:30:56.290]                     if (inherits(cond, "message")) {
[10:30:56.290]                       muffled <- grepl(pattern, "muffleMessage")
[10:30:56.290]                       if (muffled) 
[10:30:56.290]                         invokeRestart("muffleMessage")
[10:30:56.290]                     }
[10:30:56.290]                     else if (inherits(cond, "warning")) {
[10:30:56.290]                       muffled <- grepl(pattern, "muffleWarning")
[10:30:56.290]                       if (muffled) 
[10:30:56.290]                         invokeRestart("muffleWarning")
[10:30:56.290]                     }
[10:30:56.290]                     else if (inherits(cond, "condition")) {
[10:30:56.290]                       if (!is.null(pattern)) {
[10:30:56.290]                         computeRestarts <- base::computeRestarts
[10:30:56.290]                         grepl <- base::grepl
[10:30:56.290]                         restarts <- computeRestarts(cond)
[10:30:56.290]                         for (restart in restarts) {
[10:30:56.290]                           name <- restart$name
[10:30:56.290]                           if (is.null(name)) 
[10:30:56.290]                             next
[10:30:56.290]                           if (!grepl(pattern, name)) 
[10:30:56.290]                             next
[10:30:56.290]                           invokeRestart(restart)
[10:30:56.290]                           muffled <- TRUE
[10:30:56.290]                           break
[10:30:56.290]                         }
[10:30:56.290]                       }
[10:30:56.290]                     }
[10:30:56.290]                     invisible(muffled)
[10:30:56.290]                   }
[10:30:56.290]                   muffleCondition(cond)
[10:30:56.290]                 })
[10:30:56.290]             }))
[10:30:56.290]             future::FutureResult(value = ...future.value$value, 
[10:30:56.290]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:56.290]                   ...future.rng), globalenv = if (FALSE) 
[10:30:56.290]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:30:56.290]                     ...future.globalenv.names))
[10:30:56.290]                 else NULL, started = ...future.startTime, version = "1.8")
[10:30:56.290]         }, condition = base::local({
[10:30:56.290]             c <- base::c
[10:30:56.290]             inherits <- base::inherits
[10:30:56.290]             invokeRestart <- base::invokeRestart
[10:30:56.290]             length <- base::length
[10:30:56.290]             list <- base::list
[10:30:56.290]             seq.int <- base::seq.int
[10:30:56.290]             signalCondition <- base::signalCondition
[10:30:56.290]             sys.calls <- base::sys.calls
[10:30:56.290]             `[[` <- base::`[[`
[10:30:56.290]             `+` <- base::`+`
[10:30:56.290]             `<<-` <- base::`<<-`
[10:30:56.290]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:30:56.290]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:30:56.290]                   3L)]
[10:30:56.290]             }
[10:30:56.290]             function(cond) {
[10:30:56.290]                 is_error <- inherits(cond, "error")
[10:30:56.290]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:30:56.290]                   NULL)
[10:30:56.290]                 if (is_error) {
[10:30:56.290]                   sessionInformation <- function() {
[10:30:56.290]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:30:56.290]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:30:56.290]                       search = base::search(), system = base::Sys.info())
[10:30:56.290]                   }
[10:30:56.290]                   ...future.conditions[[length(...future.conditions) + 
[10:30:56.290]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:30:56.290]                     cond$call), session = sessionInformation(), 
[10:30:56.290]                     timestamp = base::Sys.time(), signaled = 0L)
[10:30:56.290]                   signalCondition(cond)
[10:30:56.290]                 }
[10:30:56.290]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:30:56.290]                 "immediateCondition"))) {
[10:30:56.290]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:30:56.290]                   ...future.conditions[[length(...future.conditions) + 
[10:30:56.290]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:30:56.290]                   if (TRUE && !signal) {
[10:30:56.290]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.290]                     {
[10:30:56.290]                       inherits <- base::inherits
[10:30:56.290]                       invokeRestart <- base::invokeRestart
[10:30:56.290]                       is.null <- base::is.null
[10:30:56.290]                       muffled <- FALSE
[10:30:56.290]                       if (inherits(cond, "message")) {
[10:30:56.290]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:56.290]                         if (muffled) 
[10:30:56.290]                           invokeRestart("muffleMessage")
[10:30:56.290]                       }
[10:30:56.290]                       else if (inherits(cond, "warning")) {
[10:30:56.290]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:56.290]                         if (muffled) 
[10:30:56.290]                           invokeRestart("muffleWarning")
[10:30:56.290]                       }
[10:30:56.290]                       else if (inherits(cond, "condition")) {
[10:30:56.290]                         if (!is.null(pattern)) {
[10:30:56.290]                           computeRestarts <- base::computeRestarts
[10:30:56.290]                           grepl <- base::grepl
[10:30:56.290]                           restarts <- computeRestarts(cond)
[10:30:56.290]                           for (restart in restarts) {
[10:30:56.290]                             name <- restart$name
[10:30:56.290]                             if (is.null(name)) 
[10:30:56.290]                               next
[10:30:56.290]                             if (!grepl(pattern, name)) 
[10:30:56.290]                               next
[10:30:56.290]                             invokeRestart(restart)
[10:30:56.290]                             muffled <- TRUE
[10:30:56.290]                             break
[10:30:56.290]                           }
[10:30:56.290]                         }
[10:30:56.290]                       }
[10:30:56.290]                       invisible(muffled)
[10:30:56.290]                     }
[10:30:56.290]                     muffleCondition(cond, pattern = "^muffle")
[10:30:56.290]                   }
[10:30:56.290]                 }
[10:30:56.290]                 else {
[10:30:56.290]                   if (TRUE) {
[10:30:56.290]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.290]                     {
[10:30:56.290]                       inherits <- base::inherits
[10:30:56.290]                       invokeRestart <- base::invokeRestart
[10:30:56.290]                       is.null <- base::is.null
[10:30:56.290]                       muffled <- FALSE
[10:30:56.290]                       if (inherits(cond, "message")) {
[10:30:56.290]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:56.290]                         if (muffled) 
[10:30:56.290]                           invokeRestart("muffleMessage")
[10:30:56.290]                       }
[10:30:56.290]                       else if (inherits(cond, "warning")) {
[10:30:56.290]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:56.290]                         if (muffled) 
[10:30:56.290]                           invokeRestart("muffleWarning")
[10:30:56.290]                       }
[10:30:56.290]                       else if (inherits(cond, "condition")) {
[10:30:56.290]                         if (!is.null(pattern)) {
[10:30:56.290]                           computeRestarts <- base::computeRestarts
[10:30:56.290]                           grepl <- base::grepl
[10:30:56.290]                           restarts <- computeRestarts(cond)
[10:30:56.290]                           for (restart in restarts) {
[10:30:56.290]                             name <- restart$name
[10:30:56.290]                             if (is.null(name)) 
[10:30:56.290]                               next
[10:30:56.290]                             if (!grepl(pattern, name)) 
[10:30:56.290]                               next
[10:30:56.290]                             invokeRestart(restart)
[10:30:56.290]                             muffled <- TRUE
[10:30:56.290]                             break
[10:30:56.290]                           }
[10:30:56.290]                         }
[10:30:56.290]                       }
[10:30:56.290]                       invisible(muffled)
[10:30:56.290]                     }
[10:30:56.290]                     muffleCondition(cond, pattern = "^muffle")
[10:30:56.290]                   }
[10:30:56.290]                 }
[10:30:56.290]             }
[10:30:56.290]         }))
[10:30:56.290]     }, error = function(ex) {
[10:30:56.290]         base::structure(base::list(value = NULL, visible = NULL, 
[10:30:56.290]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:56.290]                 ...future.rng), started = ...future.startTime, 
[10:30:56.290]             finished = Sys.time(), session_uuid = NA_character_, 
[10:30:56.290]             version = "1.8"), class = "FutureResult")
[10:30:56.290]     }, finally = {
[10:30:56.290]         if (!identical(...future.workdir, getwd())) 
[10:30:56.290]             setwd(...future.workdir)
[10:30:56.290]         {
[10:30:56.290]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:30:56.290]                 ...future.oldOptions$nwarnings <- NULL
[10:30:56.290]             }
[10:30:56.290]             base::options(...future.oldOptions)
[10:30:56.290]             if (.Platform$OS.type == "windows") {
[10:30:56.290]                 old_names <- names(...future.oldEnvVars)
[10:30:56.290]                 envs <- base::Sys.getenv()
[10:30:56.290]                 names <- names(envs)
[10:30:56.290]                 common <- intersect(names, old_names)
[10:30:56.290]                 added <- setdiff(names, old_names)
[10:30:56.290]                 removed <- setdiff(old_names, names)
[10:30:56.290]                 changed <- common[...future.oldEnvVars[common] != 
[10:30:56.290]                   envs[common]]
[10:30:56.290]                 NAMES <- toupper(changed)
[10:30:56.290]                 args <- list()
[10:30:56.290]                 for (kk in seq_along(NAMES)) {
[10:30:56.290]                   name <- changed[[kk]]
[10:30:56.290]                   NAME <- NAMES[[kk]]
[10:30:56.290]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.290]                     next
[10:30:56.290]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:56.290]                 }
[10:30:56.290]                 NAMES <- toupper(added)
[10:30:56.290]                 for (kk in seq_along(NAMES)) {
[10:30:56.290]                   name <- added[[kk]]
[10:30:56.290]                   NAME <- NAMES[[kk]]
[10:30:56.290]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.290]                     next
[10:30:56.290]                   args[[name]] <- ""
[10:30:56.290]                 }
[10:30:56.290]                 NAMES <- toupper(removed)
[10:30:56.290]                 for (kk in seq_along(NAMES)) {
[10:30:56.290]                   name <- removed[[kk]]
[10:30:56.290]                   NAME <- NAMES[[kk]]
[10:30:56.290]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.290]                     next
[10:30:56.290]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:56.290]                 }
[10:30:56.290]                 if (length(args) > 0) 
[10:30:56.290]                   base::do.call(base::Sys.setenv, args = args)
[10:30:56.290]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:30:56.290]             }
[10:30:56.290]             else {
[10:30:56.290]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:30:56.290]             }
[10:30:56.290]             {
[10:30:56.290]                 if (base::length(...future.futureOptionsAdded) > 
[10:30:56.290]                   0L) {
[10:30:56.290]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:30:56.290]                   base::names(opts) <- ...future.futureOptionsAdded
[10:30:56.290]                   base::options(opts)
[10:30:56.290]                 }
[10:30:56.290]                 {
[10:30:56.290]                   {
[10:30:56.290]                     base::options(mc.cores = ...future.mc.cores.old)
[10:30:56.290]                     NULL
[10:30:56.290]                   }
[10:30:56.290]                   options(future.plan = NULL)
[10:30:56.290]                   if (is.na(NA_character_)) 
[10:30:56.290]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:30:56.290]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:30:56.290]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:30:56.290]                     .init = FALSE)
[10:30:56.290]                 }
[10:30:56.290]             }
[10:30:56.290]         }
[10:30:56.290]     })
[10:30:56.290]     if (TRUE) {
[10:30:56.290]         base::sink(type = "output", split = FALSE)
[10:30:56.290]         if (TRUE) {
[10:30:56.290]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:30:56.290]         }
[10:30:56.290]         else {
[10:30:56.290]             ...future.result["stdout"] <- base::list(NULL)
[10:30:56.290]         }
[10:30:56.290]         base::close(...future.stdout)
[10:30:56.290]         ...future.stdout <- NULL
[10:30:56.290]     }
[10:30:56.290]     ...future.result$conditions <- ...future.conditions
[10:30:56.290]     ...future.result$finished <- base::Sys.time()
[10:30:56.290]     ...future.result
[10:30:56.290] }
[10:30:56.293] assign_globals() ...
[10:30:56.294] List of 5
[10:30:56.294]  $ ...future.FUN            :function (...)  
[10:30:56.294]  $ future.call.arguments    : list()
[10:30:56.294]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:56.294]  $ ...future.elements_ii    :List of 3
[10:30:56.294]   ..$ : int 0
[10:30:56.294]   ..$ : int 0
[10:30:56.294]   ..$ : int 0
[10:30:56.294]  $ ...future.seeds_ii       :List of 3
[10:30:56.294]   ..$ : int [1:7] 10407 2000585943 1277356830 -2089408352 -860958827 226502925 99834792
[10:30:56.294]   ..$ : int [1:7] 10407 -1366366742 -1587533199 -987670999 1146693195 -372746989 -1779846945
[10:30:56.294]   ..$ : int [1:7] 10407 -1326244930 -121340665 862160877 1069041468 -111293265 1245428870
[10:30:56.294]  $ ...future.globals.maxSize: NULL
[10:30:56.294]  - attr(*, "where")=List of 5
[10:30:56.294]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:30:56.294]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:30:56.294]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:30:56.294]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:30:56.294]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:30:56.294]  - attr(*, "resolved")= logi FALSE
[10:30:56.294]  - attr(*, "total_size")= num 616
[10:30:56.294]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:56.294]  - attr(*, "already-done")= logi TRUE
[10:30:56.306] - reassign environment for ‘...future.FUN’
[10:30:56.306] - copied ‘...future.FUN’ to environment
[10:30:56.306] - copied ‘future.call.arguments’ to environment
[10:30:56.307] - copied ‘...future.elements_ii’ to environment
[10:30:56.307] - copied ‘...future.seeds_ii’ to environment
[10:30:56.307] - copied ‘...future.globals.maxSize’ to environment
[10:30:56.307] assign_globals() ... done
[10:30:56.307] requestCore(): workers = 2
[10:30:56.313] MulticoreFuture started
[10:30:56.314] - Launch lazy future ... done
[10:30:56.314] run() for ‘MulticoreFuture’ ... done
[10:30:56.314] Created future:
[10:30:56.314] plan(): Setting new future strategy stack:
[10:30:56.315] List of future strategies:
[10:30:56.315] 1. sequential:
[10:30:56.315]    - args: function (..., envir = parent.frame())
[10:30:56.315]    - tweaked: FALSE
[10:30:56.315]    - call: NULL
[10:30:56.315] plan(): nbrOfWorkers() = 1
[10:30:56.318] plan(): Setting new future strategy stack:
[10:30:56.318] List of future strategies:
[10:30:56.318] 1. multicore:
[10:30:56.318]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:30:56.318]    - tweaked: FALSE
[10:30:56.318]    - call: plan(strategy)
[10:30:56.323] plan(): nbrOfWorkers() = 2
[10:30:56.314] MulticoreFuture:
[10:30:56.314] Label: ‘future_replicate-2’
[10:30:56.314] Expression:
[10:30:56.314] {
[10:30:56.314]     do.call(function(...) {
[10:30:56.314]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.314]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:56.314]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.314]             on.exit(options(oopts), add = TRUE)
[10:30:56.314]         }
[10:30:56.314]         {
[10:30:56.314]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:56.314]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.314]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.314]                   envir = globalenv(), inherits = FALSE)
[10:30:56.314]                 ...future.FUN(...future.X_jj, ...)
[10:30:56.314]             })
[10:30:56.314]         }
[10:30:56.314]     }, args = future.call.arguments)
[10:30:56.314] }
[10:30:56.314] Lazy evaluation: FALSE
[10:30:56.314] Asynchronous evaluation: TRUE
[10:30:56.314] Local evaluation: TRUE
[10:30:56.314] Environment: R_GlobalEnv
[10:30:56.314] Capture standard output: TRUE
[10:30:56.314] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:30:56.314] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:30:56.314] Packages: <none>
[10:30:56.314] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:30:56.314] Resolved: TRUE
[10:30:56.314] Value: <not collected>
[10:30:56.314] Conditions captured: <none>
[10:30:56.314] Early signaling: FALSE
[10:30:56.314] Owner process: 7cdcbd4b-6c47-ca9a-dc3f-e18236d134b8
[10:30:56.314] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:56.324] Chunk #2 of 2 ... DONE
[10:30:56.324] Launching 2 futures (chunks) ... DONE
[10:30:56.324] Resolving 2 futures (chunks) ...
[10:30:56.325] resolve() on list ...
[10:30:56.325]  recursive: 0
[10:30:56.325]  length: 2
[10:30:56.325] 
[10:30:56.325] Future #1
[10:30:56.326] result() for MulticoreFuture ...
[10:30:56.328] result() for MulticoreFuture ...
[10:30:56.328] result() for MulticoreFuture ... done
[10:30:56.328] result() for MulticoreFuture ... done
[10:30:56.329] result() for MulticoreFuture ...
[10:30:56.329] result() for MulticoreFuture ... done
[10:30:56.329] signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:30:56.329] - nx: 2
[10:30:56.330] - relay: TRUE
[10:30:56.330] - stdout: TRUE
[10:30:56.330] - signal: TRUE
[10:30:56.330] - resignal: FALSE
[10:30:56.330] - force: TRUE
[10:30:56.330] - relayed: [n=2] FALSE, FALSE
[10:30:56.331] - queued futures: [n=2] FALSE, FALSE
[10:30:56.331]  - until=1
[10:30:56.331]  - relaying element #1
[10:30:56.331] result() for MulticoreFuture ...
[10:30:56.332] result() for MulticoreFuture ... done
[10:30:56.332] result() for MulticoreFuture ...
[10:30:56.332] result() for MulticoreFuture ... done
[10:30:56.332] result() for MulticoreFuture ...
[10:30:56.332] result() for MulticoreFuture ... done
[10:30:56.332] result() for MulticoreFuture ...
[10:30:56.333] result() for MulticoreFuture ... done
[10:30:56.333] - relayed: [n=2] TRUE, FALSE
[10:30:56.333] - queued futures: [n=2] TRUE, FALSE
[10:30:56.333] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:30:56.333]  length: 1 (resolved future 1)
[10:30:56.334] Future #2
[10:30:56.334] result() for MulticoreFuture ...
[10:30:56.334] result() for MulticoreFuture ...
[10:30:56.335] result() for MulticoreFuture ... done
[10:30:56.335] result() for MulticoreFuture ... done
[10:30:56.335] result() for MulticoreFuture ...
[10:30:56.335] result() for MulticoreFuture ... done
[10:30:56.335] signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:30:56.335] - nx: 2
[10:30:56.335] - relay: TRUE
[10:30:56.336] - stdout: TRUE
[10:30:56.336] - signal: TRUE
[10:30:56.336] - resignal: FALSE
[10:30:56.336] - force: TRUE
[10:30:56.336] - relayed: [n=2] TRUE, FALSE
[10:30:56.336] - queued futures: [n=2] TRUE, FALSE
[10:30:56.336]  - until=2
[10:30:56.336]  - relaying element #2
[10:30:56.336] result() for MulticoreFuture ...
[10:30:56.337] result() for MulticoreFuture ... done
[10:30:56.337] result() for MulticoreFuture ...
[10:30:56.337] result() for MulticoreFuture ... done
[10:30:56.337] result() for MulticoreFuture ...
[10:30:56.337] result() for MulticoreFuture ... done
[10:30:56.337] result() for MulticoreFuture ...
[10:30:56.337] result() for MulticoreFuture ... done
[10:30:56.337] - relayed: [n=2] TRUE, TRUE
[10:30:56.338] - queued futures: [n=2] TRUE, TRUE
[10:30:56.338] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:30:56.338]  length: 0 (resolved future 2)
[10:30:56.338] Relaying remaining futures
[10:30:56.338] signalConditionsASAP(NULL, pos=0) ...
[10:30:56.338] - nx: 2
[10:30:56.338] - relay: TRUE
[10:30:56.338] - stdout: TRUE
[10:30:56.338] - signal: TRUE
[10:30:56.339] - resignal: FALSE
[10:30:56.339] - force: TRUE
[10:30:56.339] - relayed: [n=2] TRUE, TRUE
[10:30:56.339] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:30:56.339] - relayed: [n=2] TRUE, TRUE
[10:30:56.339] - queued futures: [n=2] TRUE, TRUE
[10:30:56.339] signalConditionsASAP(NULL, pos=0) ... done
[10:30:56.339] resolve() on list ... DONE
[10:30:56.339] result() for MulticoreFuture ...
[10:30:56.340] result() for MulticoreFuture ... done
[10:30:56.340] result() for MulticoreFuture ...
[10:30:56.340] result() for MulticoreFuture ... done
[10:30:56.340] result() for MulticoreFuture ...
[10:30:56.340] result() for MulticoreFuture ... done
[10:30:56.340] result() for MulticoreFuture ...
[10:30:56.340] result() for MulticoreFuture ... done
[10:30:56.340]  - Number of value chunks collected: 2
[10:30:56.340] Resolving 2 futures (chunks) ... DONE
[10:30:56.341] Reducing values from 2 chunks ...
[10:30:56.341]  - Number of values collected after concatenation: 5
[10:30:56.341]  - Number of values expected: 5
[10:30:56.341] Reducing values from 2 chunks ... DONE
[10:30:56.341] future_lapply() ... DONE
[10:30:56.341] future_lapply() ...
[10:30:56.342] Generating random seeds ...
[10:30:56.342] Generating random seed streams for 5 elements ...
[10:30:56.342] Generating random seed streams for 5 elements ... DONE
[10:30:56.342] Generating random seeds ... DONE
[10:30:56.342] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:30:56.347] Number of chunks: 2
[10:30:56.347] getGlobalsAndPackagesXApply() ...
[10:30:56.347]  - future.globals: TRUE
[10:30:56.350] getGlobalsAndPackages() ...
[10:30:56.350] Searching for globals...
[10:30:56.351] - globals found: [2] ‘FUN’, ‘sample’
[10:30:56.352] Searching for globals ... DONE
[10:30:56.352] Resolving globals: FALSE
[10:30:56.352] The total size of the 1 globals is 616 bytes (616 bytes)
[10:30:56.353] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[10:30:56.353] - globals: [1] ‘FUN’
[10:30:56.353] 
[10:30:56.353] getGlobalsAndPackages() ... DONE
[10:30:56.353]  - globals found/used: [n=1] ‘FUN’
[10:30:56.353]  - needed namespaces: [n=0] 
[10:30:56.354] Finding globals ... DONE
[10:30:56.354]  - use_args: TRUE
[10:30:56.354]  - Getting '...' globals ...
[10:30:56.354] resolve() on list ...
[10:30:56.354]  recursive: 0
[10:30:56.354]  length: 1
[10:30:56.355]  elements: ‘...’
[10:30:56.355]  length: 0 (resolved future 1)
[10:30:56.355] resolve() on list ... DONE
[10:30:56.355]    - '...' content: [n=0] 
[10:30:56.355] List of 1
[10:30:56.355]  $ ...: list()
[10:30:56.355]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:56.355]  - attr(*, "where")=List of 1
[10:30:56.355]   ..$ ...:<environment: 0x55aba30f9b50> 
[10:30:56.355]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:56.355]  - attr(*, "resolved")= logi TRUE
[10:30:56.355]  - attr(*, "total_size")= num NA
[10:30:56.358]  - Getting '...' globals ... DONE
[10:30:56.358] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:30:56.359] List of 2
[10:30:56.359]  $ ...future.FUN:function (...)  
[10:30:56.359]  $ ...          : list()
[10:30:56.359]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:56.359]  - attr(*, "where")=List of 2
[10:30:56.359]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:30:56.359]   ..$ ...          :<environment: 0x55aba30f9b50> 
[10:30:56.359]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:56.359]  - attr(*, "resolved")= logi FALSE
[10:30:56.359]  - attr(*, "total_size")= num 616
[10:30:56.361] Packages to be attached in all futures: [n=0] 
[10:30:56.361] getGlobalsAndPackagesXApply() ... DONE
[10:30:56.362] Number of futures (= number of chunks): 2
[10:30:56.362] Launching 2 futures (chunks) ...
[10:30:56.362] Chunk #1 of 2 ...
[10:30:56.362]  - Finding globals in 'X' for chunk #1 ...
[10:30:56.362] getGlobalsAndPackages() ...
[10:30:56.362] Searching for globals...
[10:30:56.362] 
[10:30:56.362] Searching for globals ... DONE
[10:30:56.363] - globals: [0] <none>
[10:30:56.363] getGlobalsAndPackages() ... DONE
[10:30:56.363]    + additional globals found: [n=0] 
[10:30:56.363]    + additional namespaces needed: [n=0] 
[10:30:56.363]  - Finding globals in 'X' for chunk #1 ... DONE
[10:30:56.363]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:30:56.363]  - seeds: [2] <seeds>
[10:30:56.363]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.363] getGlobalsAndPackages() ...
[10:30:56.363] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.364] Resolving globals: FALSE
[10:30:56.364] Tweak future expression to call with '...' arguments ...
[10:30:56.364] {
[10:30:56.364]     do.call(function(...) {
[10:30:56.364]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.364]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:56.364]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.364]             on.exit(options(oopts), add = TRUE)
[10:30:56.364]         }
[10:30:56.364]         {
[10:30:56.364]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:56.364]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.364]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.364]                   envir = globalenv(), inherits = FALSE)
[10:30:56.364]                 ...future.FUN(...future.X_jj, ...)
[10:30:56.364]             })
[10:30:56.364]         }
[10:30:56.364]     }, args = future.call.arguments)
[10:30:56.364] }
[10:30:56.364] Tweak future expression to call with '...' arguments ... DONE
[10:30:56.364] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.365] 
[10:30:56.365] getGlobalsAndPackages() ... DONE
[10:30:56.365] run() for ‘Future’ ...
[10:30:56.365] - state: ‘created’
[10:30:56.365] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:30:56.370] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:56.370] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:30:56.370]   - Field: ‘label’
[10:30:56.370]   - Field: ‘local’
[10:30:56.370]   - Field: ‘owner’
[10:30:56.370]   - Field: ‘envir’
[10:30:56.370]   - Field: ‘workers’
[10:30:56.370]   - Field: ‘packages’
[10:30:56.371]   - Field: ‘gc’
[10:30:56.371]   - Field: ‘job’
[10:30:56.371]   - Field: ‘conditions’
[10:30:56.371]   - Field: ‘expr’
[10:30:56.371]   - Field: ‘uuid’
[10:30:56.371]   - Field: ‘seed’
[10:30:56.371]   - Field: ‘version’
[10:30:56.371]   - Field: ‘result’
[10:30:56.371]   - Field: ‘asynchronous’
[10:30:56.372]   - Field: ‘calls’
[10:30:56.372]   - Field: ‘globals’
[10:30:56.372]   - Field: ‘stdout’
[10:30:56.372]   - Field: ‘earlySignal’
[10:30:56.372]   - Field: ‘lazy’
[10:30:56.372]   - Field: ‘state’
[10:30:56.372] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:30:56.372] - Launch lazy future ...
[10:30:56.373] Packages needed by the future expression (n = 0): <none>
[10:30:56.373] Packages needed by future strategies (n = 0): <none>
[10:30:56.373] {
[10:30:56.373]     {
[10:30:56.373]         {
[10:30:56.373]             ...future.startTime <- base::Sys.time()
[10:30:56.373]             {
[10:30:56.373]                 {
[10:30:56.373]                   {
[10:30:56.373]                     {
[10:30:56.373]                       base::local({
[10:30:56.373]                         has_future <- base::requireNamespace("future", 
[10:30:56.373]                           quietly = TRUE)
[10:30:56.373]                         if (has_future) {
[10:30:56.373]                           ns <- base::getNamespace("future")
[10:30:56.373]                           version <- ns[[".package"]][["version"]]
[10:30:56.373]                           if (is.null(version)) 
[10:30:56.373]                             version <- utils::packageVersion("future")
[10:30:56.373]                         }
[10:30:56.373]                         else {
[10:30:56.373]                           version <- NULL
[10:30:56.373]                         }
[10:30:56.373]                         if (!has_future || version < "1.8.0") {
[10:30:56.373]                           info <- base::c(r_version = base::gsub("R version ", 
[10:30:56.373]                             "", base::R.version$version.string), 
[10:30:56.373]                             platform = base::sprintf("%s (%s-bit)", 
[10:30:56.373]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:30:56.373]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:30:56.373]                               "release", "version")], collapse = " "), 
[10:30:56.373]                             hostname = base::Sys.info()[["nodename"]])
[10:30:56.373]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:30:56.373]                             info)
[10:30:56.373]                           info <- base::paste(info, collapse = "; ")
[10:30:56.373]                           if (!has_future) {
[10:30:56.373]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:30:56.373]                               info)
[10:30:56.373]                           }
[10:30:56.373]                           else {
[10:30:56.373]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:30:56.373]                               info, version)
[10:30:56.373]                           }
[10:30:56.373]                           base::stop(msg)
[10:30:56.373]                         }
[10:30:56.373]                       })
[10:30:56.373]                     }
[10:30:56.373]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:30:56.373]                     base::options(mc.cores = 1L)
[10:30:56.373]                   }
[10:30:56.373]                   ...future.strategy.old <- future::plan("list")
[10:30:56.373]                   options(future.plan = NULL)
[10:30:56.373]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:30:56.373]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:30:56.373]                 }
[10:30:56.373]                 ...future.workdir <- getwd()
[10:30:56.373]             }
[10:30:56.373]             ...future.oldOptions <- base::as.list(base::.Options)
[10:30:56.373]             ...future.oldEnvVars <- base::Sys.getenv()
[10:30:56.373]         }
[10:30:56.373]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:30:56.373]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:30:56.373]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:30:56.373]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:30:56.373]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:30:56.373]             future.stdout.windows.reencode = NULL, width = 80L)
[10:30:56.373]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:30:56.373]             base::names(...future.oldOptions))
[10:30:56.373]     }
[10:30:56.373]     if (FALSE) {
[10:30:56.373]     }
[10:30:56.373]     else {
[10:30:56.373]         if (TRUE) {
[10:30:56.373]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:30:56.373]                 open = "w")
[10:30:56.373]         }
[10:30:56.373]         else {
[10:30:56.373]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:30:56.373]                 windows = "NUL", "/dev/null"), open = "w")
[10:30:56.373]         }
[10:30:56.373]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:30:56.373]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:30:56.373]             base::sink(type = "output", split = FALSE)
[10:30:56.373]             base::close(...future.stdout)
[10:30:56.373]         }, add = TRUE)
[10:30:56.373]     }
[10:30:56.373]     ...future.frame <- base::sys.nframe()
[10:30:56.373]     ...future.conditions <- base::list()
[10:30:56.373]     ...future.rng <- base::globalenv()$.Random.seed
[10:30:56.373]     if (FALSE) {
[10:30:56.373]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:30:56.373]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:30:56.373]     }
[10:30:56.373]     ...future.result <- base::tryCatch({
[10:30:56.373]         base::withCallingHandlers({
[10:30:56.373]             ...future.value <- base::withVisible(base::local({
[10:30:56.373]                 withCallingHandlers({
[10:30:56.373]                   {
[10:30:56.373]                     do.call(function(...) {
[10:30:56.373]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.373]                       if (!identical(...future.globals.maxSize.org, 
[10:30:56.373]                         ...future.globals.maxSize)) {
[10:30:56.373]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.373]                         on.exit(options(oopts), add = TRUE)
[10:30:56.373]                       }
[10:30:56.373]                       {
[10:30:56.373]                         lapply(seq_along(...future.elements_ii), 
[10:30:56.373]                           FUN = function(jj) {
[10:30:56.373]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.373]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.373]                               envir = globalenv(), inherits = FALSE)
[10:30:56.373]                             ...future.FUN(...future.X_jj, ...)
[10:30:56.373]                           })
[10:30:56.373]                       }
[10:30:56.373]                     }, args = future.call.arguments)
[10:30:56.373]                   }
[10:30:56.373]                 }, immediateCondition = function(cond) {
[10:30:56.373]                   save_rds <- function (object, pathname, ...) 
[10:30:56.373]                   {
[10:30:56.373]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:30:56.373]                     if (file_test("-f", pathname_tmp)) {
[10:30:56.373]                       fi_tmp <- file.info(pathname_tmp)
[10:30:56.373]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:30:56.373]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:30:56.373]                         fi_tmp[["mtime"]])
[10:30:56.373]                     }
[10:30:56.373]                     tryCatch({
[10:30:56.373]                       saveRDS(object, file = pathname_tmp, ...)
[10:30:56.373]                     }, error = function(ex) {
[10:30:56.373]                       msg <- conditionMessage(ex)
[10:30:56.373]                       fi_tmp <- file.info(pathname_tmp)
[10:30:56.373]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:30:56.373]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:30:56.373]                         fi_tmp[["mtime"]], msg)
[10:30:56.373]                       ex$message <- msg
[10:30:56.373]                       stop(ex)
[10:30:56.373]                     })
[10:30:56.373]                     stopifnot(file_test("-f", pathname_tmp))
[10:30:56.373]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:30:56.373]                     if (!res || file_test("-f", pathname_tmp)) {
[10:30:56.373]                       fi_tmp <- file.info(pathname_tmp)
[10:30:56.373]                       fi <- file.info(pathname)
[10:30:56.373]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:30:56.373]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:30:56.373]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:30:56.373]                         fi[["size"]], fi[["mtime"]])
[10:30:56.373]                       stop(msg)
[10:30:56.373]                     }
[10:30:56.373]                     invisible(pathname)
[10:30:56.373]                   }
[10:30:56.373]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:30:56.373]                     rootPath = tempdir()) 
[10:30:56.373]                   {
[10:30:56.373]                     obj <- list(time = Sys.time(), condition = cond)
[10:30:56.373]                     file <- tempfile(pattern = class(cond)[1], 
[10:30:56.373]                       tmpdir = path, fileext = ".rds")
[10:30:56.373]                     save_rds(obj, file)
[10:30:56.373]                   }
[10:30:56.373]                   saveImmediateCondition(cond, path = "/tmp/RtmpkDVBSn/.future/immediateConditions")
[10:30:56.373]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.373]                   {
[10:30:56.373]                     inherits <- base::inherits
[10:30:56.373]                     invokeRestart <- base::invokeRestart
[10:30:56.373]                     is.null <- base::is.null
[10:30:56.373]                     muffled <- FALSE
[10:30:56.373]                     if (inherits(cond, "message")) {
[10:30:56.373]                       muffled <- grepl(pattern, "muffleMessage")
[10:30:56.373]                       if (muffled) 
[10:30:56.373]                         invokeRestart("muffleMessage")
[10:30:56.373]                     }
[10:30:56.373]                     else if (inherits(cond, "warning")) {
[10:30:56.373]                       muffled <- grepl(pattern, "muffleWarning")
[10:30:56.373]                       if (muffled) 
[10:30:56.373]                         invokeRestart("muffleWarning")
[10:30:56.373]                     }
[10:30:56.373]                     else if (inherits(cond, "condition")) {
[10:30:56.373]                       if (!is.null(pattern)) {
[10:30:56.373]                         computeRestarts <- base::computeRestarts
[10:30:56.373]                         grepl <- base::grepl
[10:30:56.373]                         restarts <- computeRestarts(cond)
[10:30:56.373]                         for (restart in restarts) {
[10:30:56.373]                           name <- restart$name
[10:30:56.373]                           if (is.null(name)) 
[10:30:56.373]                             next
[10:30:56.373]                           if (!grepl(pattern, name)) 
[10:30:56.373]                             next
[10:30:56.373]                           invokeRestart(restart)
[10:30:56.373]                           muffled <- TRUE
[10:30:56.373]                           break
[10:30:56.373]                         }
[10:30:56.373]                       }
[10:30:56.373]                     }
[10:30:56.373]                     invisible(muffled)
[10:30:56.373]                   }
[10:30:56.373]                   muffleCondition(cond)
[10:30:56.373]                 })
[10:30:56.373]             }))
[10:30:56.373]             future::FutureResult(value = ...future.value$value, 
[10:30:56.373]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:56.373]                   ...future.rng), globalenv = if (FALSE) 
[10:30:56.373]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:30:56.373]                     ...future.globalenv.names))
[10:30:56.373]                 else NULL, started = ...future.startTime, version = "1.8")
[10:30:56.373]         }, condition = base::local({
[10:30:56.373]             c <- base::c
[10:30:56.373]             inherits <- base::inherits
[10:30:56.373]             invokeRestart <- base::invokeRestart
[10:30:56.373]             length <- base::length
[10:30:56.373]             list <- base::list
[10:30:56.373]             seq.int <- base::seq.int
[10:30:56.373]             signalCondition <- base::signalCondition
[10:30:56.373]             sys.calls <- base::sys.calls
[10:30:56.373]             `[[` <- base::`[[`
[10:30:56.373]             `+` <- base::`+`
[10:30:56.373]             `<<-` <- base::`<<-`
[10:30:56.373]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:30:56.373]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:30:56.373]                   3L)]
[10:30:56.373]             }
[10:30:56.373]             function(cond) {
[10:30:56.373]                 is_error <- inherits(cond, "error")
[10:30:56.373]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:30:56.373]                   NULL)
[10:30:56.373]                 if (is_error) {
[10:30:56.373]                   sessionInformation <- function() {
[10:30:56.373]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:30:56.373]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:30:56.373]                       search = base::search(), system = base::Sys.info())
[10:30:56.373]                   }
[10:30:56.373]                   ...future.conditions[[length(...future.conditions) + 
[10:30:56.373]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:30:56.373]                     cond$call), session = sessionInformation(), 
[10:30:56.373]                     timestamp = base::Sys.time(), signaled = 0L)
[10:30:56.373]                   signalCondition(cond)
[10:30:56.373]                 }
[10:30:56.373]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:30:56.373]                 "immediateCondition"))) {
[10:30:56.373]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:30:56.373]                   ...future.conditions[[length(...future.conditions) + 
[10:30:56.373]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:30:56.373]                   if (TRUE && !signal) {
[10:30:56.373]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.373]                     {
[10:30:56.373]                       inherits <- base::inherits
[10:30:56.373]                       invokeRestart <- base::invokeRestart
[10:30:56.373]                       is.null <- base::is.null
[10:30:56.373]                       muffled <- FALSE
[10:30:56.373]                       if (inherits(cond, "message")) {
[10:30:56.373]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:56.373]                         if (muffled) 
[10:30:56.373]                           invokeRestart("muffleMessage")
[10:30:56.373]                       }
[10:30:56.373]                       else if (inherits(cond, "warning")) {
[10:30:56.373]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:56.373]                         if (muffled) 
[10:30:56.373]                           invokeRestart("muffleWarning")
[10:30:56.373]                       }
[10:30:56.373]                       else if (inherits(cond, "condition")) {
[10:30:56.373]                         if (!is.null(pattern)) {
[10:30:56.373]                           computeRestarts <- base::computeRestarts
[10:30:56.373]                           grepl <- base::grepl
[10:30:56.373]                           restarts <- computeRestarts(cond)
[10:30:56.373]                           for (restart in restarts) {
[10:30:56.373]                             name <- restart$name
[10:30:56.373]                             if (is.null(name)) 
[10:30:56.373]                               next
[10:30:56.373]                             if (!grepl(pattern, name)) 
[10:30:56.373]                               next
[10:30:56.373]                             invokeRestart(restart)
[10:30:56.373]                             muffled <- TRUE
[10:30:56.373]                             break
[10:30:56.373]                           }
[10:30:56.373]                         }
[10:30:56.373]                       }
[10:30:56.373]                       invisible(muffled)
[10:30:56.373]                     }
[10:30:56.373]                     muffleCondition(cond, pattern = "^muffle")
[10:30:56.373]                   }
[10:30:56.373]                 }
[10:30:56.373]                 else {
[10:30:56.373]                   if (TRUE) {
[10:30:56.373]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.373]                     {
[10:30:56.373]                       inherits <- base::inherits
[10:30:56.373]                       invokeRestart <- base::invokeRestart
[10:30:56.373]                       is.null <- base::is.null
[10:30:56.373]                       muffled <- FALSE
[10:30:56.373]                       if (inherits(cond, "message")) {
[10:30:56.373]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:56.373]                         if (muffled) 
[10:30:56.373]                           invokeRestart("muffleMessage")
[10:30:56.373]                       }
[10:30:56.373]                       else if (inherits(cond, "warning")) {
[10:30:56.373]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:56.373]                         if (muffled) 
[10:30:56.373]                           invokeRestart("muffleWarning")
[10:30:56.373]                       }
[10:30:56.373]                       else if (inherits(cond, "condition")) {
[10:30:56.373]                         if (!is.null(pattern)) {
[10:30:56.373]                           computeRestarts <- base::computeRestarts
[10:30:56.373]                           grepl <- base::grepl
[10:30:56.373]                           restarts <- computeRestarts(cond)
[10:30:56.373]                           for (restart in restarts) {
[10:30:56.373]                             name <- restart$name
[10:30:56.373]                             if (is.null(name)) 
[10:30:56.373]                               next
[10:30:56.373]                             if (!grepl(pattern, name)) 
[10:30:56.373]                               next
[10:30:56.373]                             invokeRestart(restart)
[10:30:56.373]                             muffled <- TRUE
[10:30:56.373]                             break
[10:30:56.373]                           }
[10:30:56.373]                         }
[10:30:56.373]                       }
[10:30:56.373]                       invisible(muffled)
[10:30:56.373]                     }
[10:30:56.373]                     muffleCondition(cond, pattern = "^muffle")
[10:30:56.373]                   }
[10:30:56.373]                 }
[10:30:56.373]             }
[10:30:56.373]         }))
[10:30:56.373]     }, error = function(ex) {
[10:30:56.373]         base::structure(base::list(value = NULL, visible = NULL, 
[10:30:56.373]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:56.373]                 ...future.rng), started = ...future.startTime, 
[10:30:56.373]             finished = Sys.time(), session_uuid = NA_character_, 
[10:30:56.373]             version = "1.8"), class = "FutureResult")
[10:30:56.373]     }, finally = {
[10:30:56.373]         if (!identical(...future.workdir, getwd())) 
[10:30:56.373]             setwd(...future.workdir)
[10:30:56.373]         {
[10:30:56.373]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:30:56.373]                 ...future.oldOptions$nwarnings <- NULL
[10:30:56.373]             }
[10:30:56.373]             base::options(...future.oldOptions)
[10:30:56.373]             if (.Platform$OS.type == "windows") {
[10:30:56.373]                 old_names <- names(...future.oldEnvVars)
[10:30:56.373]                 envs <- base::Sys.getenv()
[10:30:56.373]                 names <- names(envs)
[10:30:56.373]                 common <- intersect(names, old_names)
[10:30:56.373]                 added <- setdiff(names, old_names)
[10:30:56.373]                 removed <- setdiff(old_names, names)
[10:30:56.373]                 changed <- common[...future.oldEnvVars[common] != 
[10:30:56.373]                   envs[common]]
[10:30:56.373]                 NAMES <- toupper(changed)
[10:30:56.373]                 args <- list()
[10:30:56.373]                 for (kk in seq_along(NAMES)) {
[10:30:56.373]                   name <- changed[[kk]]
[10:30:56.373]                   NAME <- NAMES[[kk]]
[10:30:56.373]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.373]                     next
[10:30:56.373]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:56.373]                 }
[10:30:56.373]                 NAMES <- toupper(added)
[10:30:56.373]                 for (kk in seq_along(NAMES)) {
[10:30:56.373]                   name <- added[[kk]]
[10:30:56.373]                   NAME <- NAMES[[kk]]
[10:30:56.373]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.373]                     next
[10:30:56.373]                   args[[name]] <- ""
[10:30:56.373]                 }
[10:30:56.373]                 NAMES <- toupper(removed)
[10:30:56.373]                 for (kk in seq_along(NAMES)) {
[10:30:56.373]                   name <- removed[[kk]]
[10:30:56.373]                   NAME <- NAMES[[kk]]
[10:30:56.373]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.373]                     next
[10:30:56.373]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:56.373]                 }
[10:30:56.373]                 if (length(args) > 0) 
[10:30:56.373]                   base::do.call(base::Sys.setenv, args = args)
[10:30:56.373]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:30:56.373]             }
[10:30:56.373]             else {
[10:30:56.373]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:30:56.373]             }
[10:30:56.373]             {
[10:30:56.373]                 if (base::length(...future.futureOptionsAdded) > 
[10:30:56.373]                   0L) {
[10:30:56.373]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:30:56.373]                   base::names(opts) <- ...future.futureOptionsAdded
[10:30:56.373]                   base::options(opts)
[10:30:56.373]                 }
[10:30:56.373]                 {
[10:30:56.373]                   {
[10:30:56.373]                     base::options(mc.cores = ...future.mc.cores.old)
[10:30:56.373]                     NULL
[10:30:56.373]                   }
[10:30:56.373]                   options(future.plan = NULL)
[10:30:56.373]                   if (is.na(NA_character_)) 
[10:30:56.373]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:30:56.373]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:30:56.373]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:30:56.373]                     .init = FALSE)
[10:30:56.373]                 }
[10:30:56.373]             }
[10:30:56.373]         }
[10:30:56.373]     })
[10:30:56.373]     if (TRUE) {
[10:30:56.373]         base::sink(type = "output", split = FALSE)
[10:30:56.373]         if (TRUE) {
[10:30:56.373]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:30:56.373]         }
[10:30:56.373]         else {
[10:30:56.373]             ...future.result["stdout"] <- base::list(NULL)
[10:30:56.373]         }
[10:30:56.373]         base::close(...future.stdout)
[10:30:56.373]         ...future.stdout <- NULL
[10:30:56.373]     }
[10:30:56.373]     ...future.result$conditions <- ...future.conditions
[10:30:56.373]     ...future.result$finished <- base::Sys.time()
[10:30:56.373]     ...future.result
[10:30:56.373] }
[10:30:56.376] assign_globals() ...
[10:30:56.376] List of 5
[10:30:56.376]  $ ...future.FUN            :function (...)  
[10:30:56.376]  $ future.call.arguments    : list()
[10:30:56.376]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:56.376]  $ ...future.elements_ii    :List of 2
[10:30:56.376]   ..$ : int 0
[10:30:56.376]   ..$ : int 0
[10:30:56.376]  $ ...future.seeds_ii       :List of 2
[10:30:56.376]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[10:30:56.376]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[10:30:56.376]  $ ...future.globals.maxSize: NULL
[10:30:56.376]  - attr(*, "where")=List of 5
[10:30:56.376]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:30:56.376]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:30:56.376]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:30:56.376]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:30:56.376]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:30:56.376]  - attr(*, "resolved")= logi FALSE
[10:30:56.376]  - attr(*, "total_size")= num 616
[10:30:56.376]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:56.376]  - attr(*, "already-done")= logi TRUE
[10:30:56.383] - reassign environment for ‘...future.FUN’
[10:30:56.383] - copied ‘...future.FUN’ to environment
[10:30:56.384] - copied ‘future.call.arguments’ to environment
[10:30:56.384] - copied ‘...future.elements_ii’ to environment
[10:30:56.384] - copied ‘...future.seeds_ii’ to environment
[10:30:56.384] - copied ‘...future.globals.maxSize’ to environment
[10:30:56.384] assign_globals() ... done
[10:30:56.384] requestCore(): workers = 2
[10:30:56.386] MulticoreFuture started
[10:30:56.387] - Launch lazy future ... done
[10:30:56.387] run() for ‘MulticoreFuture’ ... done
[10:30:56.387] Created future:
[10:30:56.387] plan(): Setting new future strategy stack:
[10:30:56.388] List of future strategies:
[10:30:56.388] 1. sequential:
[10:30:56.388]    - args: function (..., envir = parent.frame())
[10:30:56.388]    - tweaked: FALSE
[10:30:56.388]    - call: NULL
[10:30:56.388] plan(): nbrOfWorkers() = 1
[10:30:56.390] plan(): Setting new future strategy stack:
[10:30:56.391] List of future strategies:
[10:30:56.391] 1. multicore:
[10:30:56.391]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:30:56.391]    - tweaked: FALSE
[10:30:56.391]    - call: plan(strategy)
[10:30:56.396] plan(): nbrOfWorkers() = 2
[10:30:56.387] MulticoreFuture:
[10:30:56.387] Label: ‘future_replicate-1’
[10:30:56.387] Expression:
[10:30:56.387] {
[10:30:56.387]     do.call(function(...) {
[10:30:56.387]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.387]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:56.387]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.387]             on.exit(options(oopts), add = TRUE)
[10:30:56.387]         }
[10:30:56.387]         {
[10:30:56.387]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:56.387]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.387]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.387]                   envir = globalenv(), inherits = FALSE)
[10:30:56.387]                 ...future.FUN(...future.X_jj, ...)
[10:30:56.387]             })
[10:30:56.387]         }
[10:30:56.387]     }, args = future.call.arguments)
[10:30:56.387] }
[10:30:56.387] Lazy evaluation: FALSE
[10:30:56.387] Asynchronous evaluation: TRUE
[10:30:56.387] Local evaluation: TRUE
[10:30:56.387] Environment: R_GlobalEnv
[10:30:56.387] Capture standard output: TRUE
[10:30:56.387] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:30:56.387] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:30:56.387] Packages: <none>
[10:30:56.387] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:30:56.387] Resolved: TRUE
[10:30:56.387] Value: <not collected>
[10:30:56.387] Conditions captured: <none>
[10:30:56.387] Early signaling: FALSE
[10:30:56.387] Owner process: 7cdcbd4b-6c47-ca9a-dc3f-e18236d134b8
[10:30:56.387] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:56.397] Chunk #1 of 2 ... DONE
[10:30:56.397] Chunk #2 of 2 ...
[10:30:56.397]  - Finding globals in 'X' for chunk #2 ...
[10:30:56.398] getGlobalsAndPackages() ...
[10:30:56.398] Searching for globals...
[10:30:56.398] 
[10:30:56.398] Searching for globals ... DONE
[10:30:56.399] - globals: [0] <none>
[10:30:56.399] getGlobalsAndPackages() ... DONE
[10:30:56.399]    + additional globals found: [n=0] 
[10:30:56.399]    + additional namespaces needed: [n=0] 
[10:30:56.399]  - Finding globals in 'X' for chunk #2 ... DONE
[10:30:56.399]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:30:56.399]  - seeds: [3] <seeds>
[10:30:56.400]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.400] getGlobalsAndPackages() ...
[10:30:56.400] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.400] Resolving globals: FALSE
[10:30:56.400] Tweak future expression to call with '...' arguments ...
[10:30:56.400] {
[10:30:56.400]     do.call(function(...) {
[10:30:56.400]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.400]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:56.400]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.400]             on.exit(options(oopts), add = TRUE)
[10:30:56.400]         }
[10:30:56.400]         {
[10:30:56.400]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:56.400]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.400]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.400]                   envir = globalenv(), inherits = FALSE)
[10:30:56.400]                 ...future.FUN(...future.X_jj, ...)
[10:30:56.400]             })
[10:30:56.400]         }
[10:30:56.400]     }, args = future.call.arguments)
[10:30:56.400] }
[10:30:56.401] Tweak future expression to call with '...' arguments ... DONE
[10:30:56.402] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.402] 
[10:30:56.402] getGlobalsAndPackages() ... DONE
[10:30:56.403] run() for ‘Future’ ...
[10:30:56.403] - state: ‘created’
[10:30:56.403] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:30:56.408] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:56.408] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:30:56.408]   - Field: ‘label’
[10:30:56.408]   - Field: ‘local’
[10:30:56.408]   - Field: ‘owner’
[10:30:56.408]   - Field: ‘envir’
[10:30:56.409]   - Field: ‘workers’
[10:30:56.409]   - Field: ‘packages’
[10:30:56.409]   - Field: ‘gc’
[10:30:56.409]   - Field: ‘job’
[10:30:56.409]   - Field: ‘conditions’
[10:30:56.409]   - Field: ‘expr’
[10:30:56.410]   - Field: ‘uuid’
[10:30:56.410]   - Field: ‘seed’
[10:30:56.410]   - Field: ‘version’
[10:30:56.410]   - Field: ‘result’
[10:30:56.410]   - Field: ‘asynchronous’
[10:30:56.410]   - Field: ‘calls’
[10:30:56.410]   - Field: ‘globals’
[10:30:56.411]   - Field: ‘stdout’
[10:30:56.411]   - Field: ‘earlySignal’
[10:30:56.411]   - Field: ‘lazy’
[10:30:56.411]   - Field: ‘state’
[10:30:56.411] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:30:56.411] - Launch lazy future ...
[10:30:56.412] Packages needed by the future expression (n = 0): <none>
[10:30:56.412] Packages needed by future strategies (n = 0): <none>
[10:30:56.413] {
[10:30:56.413]     {
[10:30:56.413]         {
[10:30:56.413]             ...future.startTime <- base::Sys.time()
[10:30:56.413]             {
[10:30:56.413]                 {
[10:30:56.413]                   {
[10:30:56.413]                     {
[10:30:56.413]                       base::local({
[10:30:56.413]                         has_future <- base::requireNamespace("future", 
[10:30:56.413]                           quietly = TRUE)
[10:30:56.413]                         if (has_future) {
[10:30:56.413]                           ns <- base::getNamespace("future")
[10:30:56.413]                           version <- ns[[".package"]][["version"]]
[10:30:56.413]                           if (is.null(version)) 
[10:30:56.413]                             version <- utils::packageVersion("future")
[10:30:56.413]                         }
[10:30:56.413]                         else {
[10:30:56.413]                           version <- NULL
[10:30:56.413]                         }
[10:30:56.413]                         if (!has_future || version < "1.8.0") {
[10:30:56.413]                           info <- base::c(r_version = base::gsub("R version ", 
[10:30:56.413]                             "", base::R.version$version.string), 
[10:30:56.413]                             platform = base::sprintf("%s (%s-bit)", 
[10:30:56.413]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:30:56.413]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:30:56.413]                               "release", "version")], collapse = " "), 
[10:30:56.413]                             hostname = base::Sys.info()[["nodename"]])
[10:30:56.413]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:30:56.413]                             info)
[10:30:56.413]                           info <- base::paste(info, collapse = "; ")
[10:30:56.413]                           if (!has_future) {
[10:30:56.413]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:30:56.413]                               info)
[10:30:56.413]                           }
[10:30:56.413]                           else {
[10:30:56.413]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:30:56.413]                               info, version)
[10:30:56.413]                           }
[10:30:56.413]                           base::stop(msg)
[10:30:56.413]                         }
[10:30:56.413]                       })
[10:30:56.413]                     }
[10:30:56.413]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:30:56.413]                     base::options(mc.cores = 1L)
[10:30:56.413]                   }
[10:30:56.413]                   ...future.strategy.old <- future::plan("list")
[10:30:56.413]                   options(future.plan = NULL)
[10:30:56.413]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:30:56.413]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:30:56.413]                 }
[10:30:56.413]                 ...future.workdir <- getwd()
[10:30:56.413]             }
[10:30:56.413]             ...future.oldOptions <- base::as.list(base::.Options)
[10:30:56.413]             ...future.oldEnvVars <- base::Sys.getenv()
[10:30:56.413]         }
[10:30:56.413]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:30:56.413]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:30:56.413]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:30:56.413]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:30:56.413]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:30:56.413]             future.stdout.windows.reencode = NULL, width = 80L)
[10:30:56.413]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:30:56.413]             base::names(...future.oldOptions))
[10:30:56.413]     }
[10:30:56.413]     if (FALSE) {
[10:30:56.413]     }
[10:30:56.413]     else {
[10:30:56.413]         if (TRUE) {
[10:30:56.413]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:30:56.413]                 open = "w")
[10:30:56.413]         }
[10:30:56.413]         else {
[10:30:56.413]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:30:56.413]                 windows = "NUL", "/dev/null"), open = "w")
[10:30:56.413]         }
[10:30:56.413]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:30:56.413]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:30:56.413]             base::sink(type = "output", split = FALSE)
[10:30:56.413]             base::close(...future.stdout)
[10:30:56.413]         }, add = TRUE)
[10:30:56.413]     }
[10:30:56.413]     ...future.frame <- base::sys.nframe()
[10:30:56.413]     ...future.conditions <- base::list()
[10:30:56.413]     ...future.rng <- base::globalenv()$.Random.seed
[10:30:56.413]     if (FALSE) {
[10:30:56.413]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:30:56.413]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:30:56.413]     }
[10:30:56.413]     ...future.result <- base::tryCatch({
[10:30:56.413]         base::withCallingHandlers({
[10:30:56.413]             ...future.value <- base::withVisible(base::local({
[10:30:56.413]                 withCallingHandlers({
[10:30:56.413]                   {
[10:30:56.413]                     do.call(function(...) {
[10:30:56.413]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.413]                       if (!identical(...future.globals.maxSize.org, 
[10:30:56.413]                         ...future.globals.maxSize)) {
[10:30:56.413]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.413]                         on.exit(options(oopts), add = TRUE)
[10:30:56.413]                       }
[10:30:56.413]                       {
[10:30:56.413]                         lapply(seq_along(...future.elements_ii), 
[10:30:56.413]                           FUN = function(jj) {
[10:30:56.413]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.413]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.413]                               envir = globalenv(), inherits = FALSE)
[10:30:56.413]                             ...future.FUN(...future.X_jj, ...)
[10:30:56.413]                           })
[10:30:56.413]                       }
[10:30:56.413]                     }, args = future.call.arguments)
[10:30:56.413]                   }
[10:30:56.413]                 }, immediateCondition = function(cond) {
[10:30:56.413]                   save_rds <- function (object, pathname, ...) 
[10:30:56.413]                   {
[10:30:56.413]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:30:56.413]                     if (file_test("-f", pathname_tmp)) {
[10:30:56.413]                       fi_tmp <- file.info(pathname_tmp)
[10:30:56.413]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:30:56.413]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:30:56.413]                         fi_tmp[["mtime"]])
[10:30:56.413]                     }
[10:30:56.413]                     tryCatch({
[10:30:56.413]                       saveRDS(object, file = pathname_tmp, ...)
[10:30:56.413]                     }, error = function(ex) {
[10:30:56.413]                       msg <- conditionMessage(ex)
[10:30:56.413]                       fi_tmp <- file.info(pathname_tmp)
[10:30:56.413]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:30:56.413]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:30:56.413]                         fi_tmp[["mtime"]], msg)
[10:30:56.413]                       ex$message <- msg
[10:30:56.413]                       stop(ex)
[10:30:56.413]                     })
[10:30:56.413]                     stopifnot(file_test("-f", pathname_tmp))
[10:30:56.413]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:30:56.413]                     if (!res || file_test("-f", pathname_tmp)) {
[10:30:56.413]                       fi_tmp <- file.info(pathname_tmp)
[10:30:56.413]                       fi <- file.info(pathname)
[10:30:56.413]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:30:56.413]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:30:56.413]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:30:56.413]                         fi[["size"]], fi[["mtime"]])
[10:30:56.413]                       stop(msg)
[10:30:56.413]                     }
[10:30:56.413]                     invisible(pathname)
[10:30:56.413]                   }
[10:30:56.413]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:30:56.413]                     rootPath = tempdir()) 
[10:30:56.413]                   {
[10:30:56.413]                     obj <- list(time = Sys.time(), condition = cond)
[10:30:56.413]                     file <- tempfile(pattern = class(cond)[1], 
[10:30:56.413]                       tmpdir = path, fileext = ".rds")
[10:30:56.413]                     save_rds(obj, file)
[10:30:56.413]                   }
[10:30:56.413]                   saveImmediateCondition(cond, path = "/tmp/RtmpkDVBSn/.future/immediateConditions")
[10:30:56.413]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.413]                   {
[10:30:56.413]                     inherits <- base::inherits
[10:30:56.413]                     invokeRestart <- base::invokeRestart
[10:30:56.413]                     is.null <- base::is.null
[10:30:56.413]                     muffled <- FALSE
[10:30:56.413]                     if (inherits(cond, "message")) {
[10:30:56.413]                       muffled <- grepl(pattern, "muffleMessage")
[10:30:56.413]                       if (muffled) 
[10:30:56.413]                         invokeRestart("muffleMessage")
[10:30:56.413]                     }
[10:30:56.413]                     else if (inherits(cond, "warning")) {
[10:30:56.413]                       muffled <- grepl(pattern, "muffleWarning")
[10:30:56.413]                       if (muffled) 
[10:30:56.413]                         invokeRestart("muffleWarning")
[10:30:56.413]                     }
[10:30:56.413]                     else if (inherits(cond, "condition")) {
[10:30:56.413]                       if (!is.null(pattern)) {
[10:30:56.413]                         computeRestarts <- base::computeRestarts
[10:30:56.413]                         grepl <- base::grepl
[10:30:56.413]                         restarts <- computeRestarts(cond)
[10:30:56.413]                         for (restart in restarts) {
[10:30:56.413]                           name <- restart$name
[10:30:56.413]                           if (is.null(name)) 
[10:30:56.413]                             next
[10:30:56.413]                           if (!grepl(pattern, name)) 
[10:30:56.413]                             next
[10:30:56.413]                           invokeRestart(restart)
[10:30:56.413]                           muffled <- TRUE
[10:30:56.413]                           break
[10:30:56.413]                         }
[10:30:56.413]                       }
[10:30:56.413]                     }
[10:30:56.413]                     invisible(muffled)
[10:30:56.413]                   }
[10:30:56.413]                   muffleCondition(cond)
[10:30:56.413]                 })
[10:30:56.413]             }))
[10:30:56.413]             future::FutureResult(value = ...future.value$value, 
[10:30:56.413]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:56.413]                   ...future.rng), globalenv = if (FALSE) 
[10:30:56.413]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:30:56.413]                     ...future.globalenv.names))
[10:30:56.413]                 else NULL, started = ...future.startTime, version = "1.8")
[10:30:56.413]         }, condition = base::local({
[10:30:56.413]             c <- base::c
[10:30:56.413]             inherits <- base::inherits
[10:30:56.413]             invokeRestart <- base::invokeRestart
[10:30:56.413]             length <- base::length
[10:30:56.413]             list <- base::list
[10:30:56.413]             seq.int <- base::seq.int
[10:30:56.413]             signalCondition <- base::signalCondition
[10:30:56.413]             sys.calls <- base::sys.calls
[10:30:56.413]             `[[` <- base::`[[`
[10:30:56.413]             `+` <- base::`+`
[10:30:56.413]             `<<-` <- base::`<<-`
[10:30:56.413]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:30:56.413]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:30:56.413]                   3L)]
[10:30:56.413]             }
[10:30:56.413]             function(cond) {
[10:30:56.413]                 is_error <- inherits(cond, "error")
[10:30:56.413]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:30:56.413]                   NULL)
[10:30:56.413]                 if (is_error) {
[10:30:56.413]                   sessionInformation <- function() {
[10:30:56.413]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:30:56.413]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:30:56.413]                       search = base::search(), system = base::Sys.info())
[10:30:56.413]                   }
[10:30:56.413]                   ...future.conditions[[length(...future.conditions) + 
[10:30:56.413]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:30:56.413]                     cond$call), session = sessionInformation(), 
[10:30:56.413]                     timestamp = base::Sys.time(), signaled = 0L)
[10:30:56.413]                   signalCondition(cond)
[10:30:56.413]                 }
[10:30:56.413]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:30:56.413]                 "immediateCondition"))) {
[10:30:56.413]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:30:56.413]                   ...future.conditions[[length(...future.conditions) + 
[10:30:56.413]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:30:56.413]                   if (TRUE && !signal) {
[10:30:56.413]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.413]                     {
[10:30:56.413]                       inherits <- base::inherits
[10:30:56.413]                       invokeRestart <- base::invokeRestart
[10:30:56.413]                       is.null <- base::is.null
[10:30:56.413]                       muffled <- FALSE
[10:30:56.413]                       if (inherits(cond, "message")) {
[10:30:56.413]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:56.413]                         if (muffled) 
[10:30:56.413]                           invokeRestart("muffleMessage")
[10:30:56.413]                       }
[10:30:56.413]                       else if (inherits(cond, "warning")) {
[10:30:56.413]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:56.413]                         if (muffled) 
[10:30:56.413]                           invokeRestart("muffleWarning")
[10:30:56.413]                       }
[10:30:56.413]                       else if (inherits(cond, "condition")) {
[10:30:56.413]                         if (!is.null(pattern)) {
[10:30:56.413]                           computeRestarts <- base::computeRestarts
[10:30:56.413]                           grepl <- base::grepl
[10:30:56.413]                           restarts <- computeRestarts(cond)
[10:30:56.413]                           for (restart in restarts) {
[10:30:56.413]                             name <- restart$name
[10:30:56.413]                             if (is.null(name)) 
[10:30:56.413]                               next
[10:30:56.413]                             if (!grepl(pattern, name)) 
[10:30:56.413]                               next
[10:30:56.413]                             invokeRestart(restart)
[10:30:56.413]                             muffled <- TRUE
[10:30:56.413]                             break
[10:30:56.413]                           }
[10:30:56.413]                         }
[10:30:56.413]                       }
[10:30:56.413]                       invisible(muffled)
[10:30:56.413]                     }
[10:30:56.413]                     muffleCondition(cond, pattern = "^muffle")
[10:30:56.413]                   }
[10:30:56.413]                 }
[10:30:56.413]                 else {
[10:30:56.413]                   if (TRUE) {
[10:30:56.413]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.413]                     {
[10:30:56.413]                       inherits <- base::inherits
[10:30:56.413]                       invokeRestart <- base::invokeRestart
[10:30:56.413]                       is.null <- base::is.null
[10:30:56.413]                       muffled <- FALSE
[10:30:56.413]                       if (inherits(cond, "message")) {
[10:30:56.413]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:56.413]                         if (muffled) 
[10:30:56.413]                           invokeRestart("muffleMessage")
[10:30:56.413]                       }
[10:30:56.413]                       else if (inherits(cond, "warning")) {
[10:30:56.413]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:56.413]                         if (muffled) 
[10:30:56.413]                           invokeRestart("muffleWarning")
[10:30:56.413]                       }
[10:30:56.413]                       else if (inherits(cond, "condition")) {
[10:30:56.413]                         if (!is.null(pattern)) {
[10:30:56.413]                           computeRestarts <- base::computeRestarts
[10:30:56.413]                           grepl <- base::grepl
[10:30:56.413]                           restarts <- computeRestarts(cond)
[10:30:56.413]                           for (restart in restarts) {
[10:30:56.413]                             name <- restart$name
[10:30:56.413]                             if (is.null(name)) 
[10:30:56.413]                               next
[10:30:56.413]                             if (!grepl(pattern, name)) 
[10:30:56.413]                               next
[10:30:56.413]                             invokeRestart(restart)
[10:30:56.413]                             muffled <- TRUE
[10:30:56.413]                             break
[10:30:56.413]                           }
[10:30:56.413]                         }
[10:30:56.413]                       }
[10:30:56.413]                       invisible(muffled)
[10:30:56.413]                     }
[10:30:56.413]                     muffleCondition(cond, pattern = "^muffle")
[10:30:56.413]                   }
[10:30:56.413]                 }
[10:30:56.413]             }
[10:30:56.413]         }))
[10:30:56.413]     }, error = function(ex) {
[10:30:56.413]         base::structure(base::list(value = NULL, visible = NULL, 
[10:30:56.413]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:56.413]                 ...future.rng), started = ...future.startTime, 
[10:30:56.413]             finished = Sys.time(), session_uuid = NA_character_, 
[10:30:56.413]             version = "1.8"), class = "FutureResult")
[10:30:56.413]     }, finally = {
[10:30:56.413]         if (!identical(...future.workdir, getwd())) 
[10:30:56.413]             setwd(...future.workdir)
[10:30:56.413]         {
[10:30:56.413]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:30:56.413]                 ...future.oldOptions$nwarnings <- NULL
[10:30:56.413]             }
[10:30:56.413]             base::options(...future.oldOptions)
[10:30:56.413]             if (.Platform$OS.type == "windows") {
[10:30:56.413]                 old_names <- names(...future.oldEnvVars)
[10:30:56.413]                 envs <- base::Sys.getenv()
[10:30:56.413]                 names <- names(envs)
[10:30:56.413]                 common <- intersect(names, old_names)
[10:30:56.413]                 added <- setdiff(names, old_names)
[10:30:56.413]                 removed <- setdiff(old_names, names)
[10:30:56.413]                 changed <- common[...future.oldEnvVars[common] != 
[10:30:56.413]                   envs[common]]
[10:30:56.413]                 NAMES <- toupper(changed)
[10:30:56.413]                 args <- list()
[10:30:56.413]                 for (kk in seq_along(NAMES)) {
[10:30:56.413]                   name <- changed[[kk]]
[10:30:56.413]                   NAME <- NAMES[[kk]]
[10:30:56.413]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.413]                     next
[10:30:56.413]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:56.413]                 }
[10:30:56.413]                 NAMES <- toupper(added)
[10:30:56.413]                 for (kk in seq_along(NAMES)) {
[10:30:56.413]                   name <- added[[kk]]
[10:30:56.413]                   NAME <- NAMES[[kk]]
[10:30:56.413]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.413]                     next
[10:30:56.413]                   args[[name]] <- ""
[10:30:56.413]                 }
[10:30:56.413]                 NAMES <- toupper(removed)
[10:30:56.413]                 for (kk in seq_along(NAMES)) {
[10:30:56.413]                   name <- removed[[kk]]
[10:30:56.413]                   NAME <- NAMES[[kk]]
[10:30:56.413]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.413]                     next
[10:30:56.413]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:56.413]                 }
[10:30:56.413]                 if (length(args) > 0) 
[10:30:56.413]                   base::do.call(base::Sys.setenv, args = args)
[10:30:56.413]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:30:56.413]             }
[10:30:56.413]             else {
[10:30:56.413]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:30:56.413]             }
[10:30:56.413]             {
[10:30:56.413]                 if (base::length(...future.futureOptionsAdded) > 
[10:30:56.413]                   0L) {
[10:30:56.413]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:30:56.413]                   base::names(opts) <- ...future.futureOptionsAdded
[10:30:56.413]                   base::options(opts)
[10:30:56.413]                 }
[10:30:56.413]                 {
[10:30:56.413]                   {
[10:30:56.413]                     base::options(mc.cores = ...future.mc.cores.old)
[10:30:56.413]                     NULL
[10:30:56.413]                   }
[10:30:56.413]                   options(future.plan = NULL)
[10:30:56.413]                   if (is.na(NA_character_)) 
[10:30:56.413]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:30:56.413]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:30:56.413]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:30:56.413]                     .init = FALSE)
[10:30:56.413]                 }
[10:30:56.413]             }
[10:30:56.413]         }
[10:30:56.413]     })
[10:30:56.413]     if (TRUE) {
[10:30:56.413]         base::sink(type = "output", split = FALSE)
[10:30:56.413]         if (TRUE) {
[10:30:56.413]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:30:56.413]         }
[10:30:56.413]         else {
[10:30:56.413]             ...future.result["stdout"] <- base::list(NULL)
[10:30:56.413]         }
[10:30:56.413]         base::close(...future.stdout)
[10:30:56.413]         ...future.stdout <- NULL
[10:30:56.413]     }
[10:30:56.413]     ...future.result$conditions <- ...future.conditions
[10:30:56.413]     ...future.result$finished <- base::Sys.time()
[10:30:56.413]     ...future.result
[10:30:56.413] }
[10:30:56.416] assign_globals() ...
[10:30:56.416] List of 5
[10:30:56.416]  $ ...future.FUN            :function (...)  
[10:30:56.416]  $ future.call.arguments    : list()
[10:30:56.416]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:56.416]  $ ...future.elements_ii    :List of 3
[10:30:56.416]   ..$ : int 0
[10:30:56.416]   ..$ : int 0
[10:30:56.416]   ..$ : int 0
[10:30:56.416]  $ ...future.seeds_ii       :List of 3
[10:30:56.416]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[10:30:56.416]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[10:30:56.416]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[10:30:56.416]  $ ...future.globals.maxSize: NULL
[10:30:56.416]  - attr(*, "where")=List of 5
[10:30:56.416]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:30:56.416]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:30:56.416]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:30:56.416]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:30:56.416]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:30:56.416]  - attr(*, "resolved")= logi FALSE
[10:30:56.416]  - attr(*, "total_size")= num 616
[10:30:56.416]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:56.416]  - attr(*, "already-done")= logi TRUE
[10:30:56.429] - reassign environment for ‘...future.FUN’
[10:30:56.429] - copied ‘...future.FUN’ to environment
[10:30:56.429] - copied ‘future.call.arguments’ to environment
[10:30:56.429] - copied ‘...future.elements_ii’ to environment
[10:30:56.430] - copied ‘...future.seeds_ii’ to environment
[10:30:56.430] - copied ‘...future.globals.maxSize’ to environment
[10:30:56.430] assign_globals() ... done
[10:30:56.430] requestCore(): workers = 2
[10:30:56.432] MulticoreFuture started
[10:30:56.433] - Launch lazy future ... done
[10:30:56.433] run() for ‘MulticoreFuture’ ... done
[10:30:56.433] Created future:
[10:30:56.434] plan(): Setting new future strategy stack:
[10:30:56.434] List of future strategies:
[10:30:56.434] 1. sequential:
[10:30:56.434]    - args: function (..., envir = parent.frame())
[10:30:56.434]    - tweaked: FALSE
[10:30:56.434]    - call: NULL
[10:30:56.435] plan(): nbrOfWorkers() = 1
[10:30:56.437] plan(): Setting new future strategy stack:
[10:30:56.437] List of future strategies:
[10:30:56.437] 1. multicore:
[10:30:56.437]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:30:56.437]    - tweaked: FALSE
[10:30:56.437]    - call: plan(strategy)
[10:30:56.443] plan(): nbrOfWorkers() = 2
[10:30:56.434] MulticoreFuture:
[10:30:56.434] Label: ‘future_replicate-2’
[10:30:56.434] Expression:
[10:30:56.434] {
[10:30:56.434]     do.call(function(...) {
[10:30:56.434]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.434]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:56.434]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.434]             on.exit(options(oopts), add = TRUE)
[10:30:56.434]         }
[10:30:56.434]         {
[10:30:56.434]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:56.434]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.434]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.434]                   envir = globalenv(), inherits = FALSE)
[10:30:56.434]                 ...future.FUN(...future.X_jj, ...)
[10:30:56.434]             })
[10:30:56.434]         }
[10:30:56.434]     }, args = future.call.arguments)
[10:30:56.434] }
[10:30:56.434] Lazy evaluation: FALSE
[10:30:56.434] Asynchronous evaluation: TRUE
[10:30:56.434] Local evaluation: TRUE
[10:30:56.434] Environment: R_GlobalEnv
[10:30:56.434] Capture standard output: TRUE
[10:30:56.434] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:30:56.434] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:30:56.434] Packages: <none>
[10:30:56.434] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:30:56.434] Resolved: TRUE
[10:30:56.434] Value: <not collected>
[10:30:56.434] Conditions captured: <none>
[10:30:56.434] Early signaling: FALSE
[10:30:56.434] Owner process: 7cdcbd4b-6c47-ca9a-dc3f-e18236d134b8
[10:30:56.434] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:56.444] Chunk #2 of 2 ... DONE
[10:30:56.444] Launching 2 futures (chunks) ... DONE
[10:30:56.444] Resolving 2 futures (chunks) ...
[10:30:56.444] resolve() on list ...
[10:30:56.444]  recursive: 0
[10:30:56.444]  length: 2
[10:30:56.445] 
[10:30:56.445] Future #1
[10:30:56.445] result() for MulticoreFuture ...
[10:30:56.446] result() for MulticoreFuture ...
[10:30:56.446] result() for MulticoreFuture ... done
[10:30:56.446] result() for MulticoreFuture ... done
[10:30:56.446] result() for MulticoreFuture ...
[10:30:56.447] result() for MulticoreFuture ... done
[10:30:56.447] signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:30:56.447] - nx: 2
[10:30:56.447] - relay: TRUE
[10:30:56.447] - stdout: TRUE
[10:30:56.447] - signal: TRUE
[10:30:56.447] - resignal: FALSE
[10:30:56.448] - force: TRUE
[10:30:56.448] - relayed: [n=2] FALSE, FALSE
[10:30:56.448] - queued futures: [n=2] FALSE, FALSE
[10:30:56.448]  - until=1
[10:30:56.448]  - relaying element #1
[10:30:56.448] result() for MulticoreFuture ...
[10:30:56.448] result() for MulticoreFuture ... done
[10:30:56.449] result() for MulticoreFuture ...
[10:30:56.449] result() for MulticoreFuture ... done
[10:30:56.449] result() for MulticoreFuture ...
[10:30:56.449] result() for MulticoreFuture ... done
[10:30:56.449] result() for MulticoreFuture ...
[10:30:56.450] result() for MulticoreFuture ... done
[10:30:56.450] - relayed: [n=2] TRUE, FALSE
[10:30:56.450] - queued futures: [n=2] TRUE, FALSE
[10:30:56.450] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:30:56.450]  length: 1 (resolved future 1)
[10:30:56.451] Future #2
[10:30:56.451] result() for MulticoreFuture ...
[10:30:56.452] result() for MulticoreFuture ...
[10:30:56.452] result() for MulticoreFuture ... done
[10:30:56.452] result() for MulticoreFuture ... done
[10:30:56.452] result() for MulticoreFuture ...
[10:30:56.452] result() for MulticoreFuture ... done
[10:30:56.452] signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:30:56.453] - nx: 2
[10:30:56.453] - relay: TRUE
[10:30:56.453] - stdout: TRUE
[10:30:56.453] - signal: TRUE
[10:30:56.453] - resignal: FALSE
[10:30:56.453] - force: TRUE
[10:30:56.453] - relayed: [n=2] TRUE, FALSE
[10:30:56.453] - queued futures: [n=2] TRUE, FALSE
[10:30:56.454]  - until=2
[10:30:56.454]  - relaying element #2
[10:30:56.454] result() for MulticoreFuture ...
[10:30:56.454] result() for MulticoreFuture ... done
[10:30:56.454] result() for MulticoreFuture ...
[10:30:56.454] result() for MulticoreFuture ... done
[10:30:56.454] result() for MulticoreFuture ...
[10:30:56.454] result() for MulticoreFuture ... done
[10:30:56.455] result() for MulticoreFuture ...
[10:30:56.455] result() for MulticoreFuture ... done
[10:30:56.455] - relayed: [n=2] TRUE, TRUE
[10:30:56.455] - queued futures: [n=2] TRUE, TRUE
[10:30:56.455] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:30:56.455]  length: 0 (resolved future 2)
[10:30:56.455] Relaying remaining futures
[10:30:56.455] signalConditionsASAP(NULL, pos=0) ...
[10:30:56.455] - nx: 2
[10:30:56.456] - relay: TRUE
[10:30:56.456] - stdout: TRUE
[10:30:56.456] - signal: TRUE
[10:30:56.456] - resignal: FALSE
[10:30:56.456] - force: TRUE
[10:30:56.456] - relayed: [n=2] TRUE, TRUE
[10:30:56.456] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:30:56.456] - relayed: [n=2] TRUE, TRUE
[10:30:56.456] - queued futures: [n=2] TRUE, TRUE
[10:30:56.457] signalConditionsASAP(NULL, pos=0) ... done
[10:30:56.457] resolve() on list ... DONE
[10:30:56.457] result() for MulticoreFuture ...
[10:30:56.457] result() for MulticoreFuture ... done
[10:30:56.457] result() for MulticoreFuture ...
[10:30:56.457] result() for MulticoreFuture ... done
[10:30:56.457] result() for MulticoreFuture ...
[10:30:56.457] result() for MulticoreFuture ... done
[10:30:56.458] result() for MulticoreFuture ...
[10:30:56.458] result() for MulticoreFuture ... done
[10:30:56.458]  - Number of value chunks collected: 2
[10:30:56.458] Resolving 2 futures (chunks) ... DONE
[10:30:56.458] Reducing values from 2 chunks ...
[10:30:56.458]  - Number of values collected after concatenation: 5
[10:30:56.458]  - Number of values expected: 5
[10:30:56.458] Reducing values from 2 chunks ... DONE
[10:30:56.458] future_lapply() ... DONE
[10:30:56.459] future_lapply() ...
[10:30:56.459] Generating random seeds ...
[10:30:56.459] Generating random seed streams for 5 elements ...
[10:30:56.460] Generating random seed streams for 5 elements ... DONE
[10:30:56.460] Generating random seeds ... DONE
[10:30:56.460] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:30:56.465] Number of chunks: 2
[10:30:56.465] getGlobalsAndPackagesXApply() ...
[10:30:56.465]  - future.globals: TRUE
[10:30:56.465] getGlobalsAndPackages() ...
[10:30:56.466] Searching for globals...
[10:30:56.467] - globals found: [2] ‘FUN’, ‘sample’
[10:30:56.467] Searching for globals ... DONE
[10:30:56.469] Resolving globals: FALSE
[10:30:56.470] The total size of the 1 globals is 616 bytes (616 bytes)
[10:30:56.470] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[10:30:56.471] - globals: [1] ‘FUN’
[10:30:56.471] 
[10:30:56.471] getGlobalsAndPackages() ... DONE
[10:30:56.471]  - globals found/used: [n=1] ‘FUN’
[10:30:56.471]  - needed namespaces: [n=0] 
[10:30:56.471] Finding globals ... DONE
[10:30:56.471]  - use_args: TRUE
[10:30:56.472]  - Getting '...' globals ...
[10:30:56.472] resolve() on list ...
[10:30:56.472]  recursive: 0
[10:30:56.472]  length: 1
[10:30:56.472]  elements: ‘...’
[10:30:56.473]  length: 0 (resolved future 1)
[10:30:56.473] resolve() on list ... DONE
[10:30:56.473]    - '...' content: [n=0] 
[10:30:56.473] List of 1
[10:30:56.473]  $ ...: list()
[10:30:56.473]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:56.473]  - attr(*, "where")=List of 1
[10:30:56.473]   ..$ ...:<environment: 0x55aba2fa6f30> 
[10:30:56.473]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:56.473]  - attr(*, "resolved")= logi TRUE
[10:30:56.473]  - attr(*, "total_size")= num NA
[10:30:56.476]  - Getting '...' globals ... DONE
[10:30:56.476] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:30:56.476] List of 2
[10:30:56.476]  $ ...future.FUN:function (...)  
[10:30:56.476]  $ ...          : list()
[10:30:56.476]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:56.476]  - attr(*, "where")=List of 2
[10:30:56.476]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:30:56.476]   ..$ ...          :<environment: 0x55aba2fa6f30> 
[10:30:56.476]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:56.476]  - attr(*, "resolved")= logi FALSE
[10:30:56.476]  - attr(*, "total_size")= num 616
[10:30:56.479] Packages to be attached in all futures: [n=0] 
[10:30:56.479] getGlobalsAndPackagesXApply() ... DONE
[10:30:56.479] Number of futures (= number of chunks): 2
[10:30:56.480] Launching 2 futures (chunks) ...
[10:30:56.480] Chunk #1 of 2 ...
[10:30:56.480]  - Finding globals in 'X' for chunk #1 ...
[10:30:56.480] getGlobalsAndPackages() ...
[10:30:56.480] Searching for globals...
[10:30:56.480] 
[10:30:56.480] Searching for globals ... DONE
[10:30:56.480] - globals: [0] <none>
[10:30:56.481] getGlobalsAndPackages() ... DONE
[10:30:56.481]    + additional globals found: [n=0] 
[10:30:56.481]    + additional namespaces needed: [n=0] 
[10:30:56.481]  - Finding globals in 'X' for chunk #1 ... DONE
[10:30:56.481]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:30:56.481]  - seeds: [2] <seeds>
[10:30:56.481]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.481] getGlobalsAndPackages() ...
[10:30:56.481] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.482] Resolving globals: FALSE
[10:30:56.482] Tweak future expression to call with '...' arguments ...
[10:30:56.482] {
[10:30:56.482]     do.call(function(...) {
[10:30:56.482]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.482]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:56.482]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.482]             on.exit(options(oopts), add = TRUE)
[10:30:56.482]         }
[10:30:56.482]         {
[10:30:56.482]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:56.482]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.482]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.482]                   envir = globalenv(), inherits = FALSE)
[10:30:56.482]                 ...future.FUN(...future.X_jj, ...)
[10:30:56.482]             })
[10:30:56.482]         }
[10:30:56.482]     }, args = future.call.arguments)
[10:30:56.482] }
[10:30:56.482] Tweak future expression to call with '...' arguments ... DONE
[10:30:56.482] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.483] 
[10:30:56.483] getGlobalsAndPackages() ... DONE
[10:30:56.483] run() for ‘Future’ ...
[10:30:56.483] - state: ‘created’
[10:30:56.483] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:30:56.487] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:56.487] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:30:56.487]   - Field: ‘label’
[10:30:56.487]   - Field: ‘local’
[10:30:56.488]   - Field: ‘owner’
[10:30:56.488]   - Field: ‘envir’
[10:30:56.488]   - Field: ‘workers’
[10:30:56.488]   - Field: ‘packages’
[10:30:56.488]   - Field: ‘gc’
[10:30:56.488]   - Field: ‘job’
[10:30:56.488]   - Field: ‘conditions’
[10:30:56.488]   - Field: ‘expr’
[10:30:56.488]   - Field: ‘uuid’
[10:30:56.488]   - Field: ‘seed’
[10:30:56.489]   - Field: ‘version’
[10:30:56.489]   - Field: ‘result’
[10:30:56.489]   - Field: ‘asynchronous’
[10:30:56.489]   - Field: ‘calls’
[10:30:56.489]   - Field: ‘globals’
[10:30:56.489]   - Field: ‘stdout’
[10:30:56.489]   - Field: ‘earlySignal’
[10:30:56.489]   - Field: ‘lazy’
[10:30:56.489]   - Field: ‘state’
[10:30:56.489] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:30:56.490] - Launch lazy future ...
[10:30:56.490] Packages needed by the future expression (n = 0): <none>
[10:30:56.490] Packages needed by future strategies (n = 0): <none>
[10:30:56.490] {
[10:30:56.490]     {
[10:30:56.490]         {
[10:30:56.490]             ...future.startTime <- base::Sys.time()
[10:30:56.490]             {
[10:30:56.490]                 {
[10:30:56.490]                   {
[10:30:56.490]                     {
[10:30:56.490]                       base::local({
[10:30:56.490]                         has_future <- base::requireNamespace("future", 
[10:30:56.490]                           quietly = TRUE)
[10:30:56.490]                         if (has_future) {
[10:30:56.490]                           ns <- base::getNamespace("future")
[10:30:56.490]                           version <- ns[[".package"]][["version"]]
[10:30:56.490]                           if (is.null(version)) 
[10:30:56.490]                             version <- utils::packageVersion("future")
[10:30:56.490]                         }
[10:30:56.490]                         else {
[10:30:56.490]                           version <- NULL
[10:30:56.490]                         }
[10:30:56.490]                         if (!has_future || version < "1.8.0") {
[10:30:56.490]                           info <- base::c(r_version = base::gsub("R version ", 
[10:30:56.490]                             "", base::R.version$version.string), 
[10:30:56.490]                             platform = base::sprintf("%s (%s-bit)", 
[10:30:56.490]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:30:56.490]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:30:56.490]                               "release", "version")], collapse = " "), 
[10:30:56.490]                             hostname = base::Sys.info()[["nodename"]])
[10:30:56.490]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:30:56.490]                             info)
[10:30:56.490]                           info <- base::paste(info, collapse = "; ")
[10:30:56.490]                           if (!has_future) {
[10:30:56.490]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:30:56.490]                               info)
[10:30:56.490]                           }
[10:30:56.490]                           else {
[10:30:56.490]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:30:56.490]                               info, version)
[10:30:56.490]                           }
[10:30:56.490]                           base::stop(msg)
[10:30:56.490]                         }
[10:30:56.490]                       })
[10:30:56.490]                     }
[10:30:56.490]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:30:56.490]                     base::options(mc.cores = 1L)
[10:30:56.490]                   }
[10:30:56.490]                   ...future.strategy.old <- future::plan("list")
[10:30:56.490]                   options(future.plan = NULL)
[10:30:56.490]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:30:56.490]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:30:56.490]                 }
[10:30:56.490]                 ...future.workdir <- getwd()
[10:30:56.490]             }
[10:30:56.490]             ...future.oldOptions <- base::as.list(base::.Options)
[10:30:56.490]             ...future.oldEnvVars <- base::Sys.getenv()
[10:30:56.490]         }
[10:30:56.490]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:30:56.490]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:30:56.490]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:30:56.490]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:30:56.490]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:30:56.490]             future.stdout.windows.reencode = NULL, width = 80L)
[10:30:56.490]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:30:56.490]             base::names(...future.oldOptions))
[10:30:56.490]     }
[10:30:56.490]     if (FALSE) {
[10:30:56.490]     }
[10:30:56.490]     else {
[10:30:56.490]         if (TRUE) {
[10:30:56.490]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:30:56.490]                 open = "w")
[10:30:56.490]         }
[10:30:56.490]         else {
[10:30:56.490]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:30:56.490]                 windows = "NUL", "/dev/null"), open = "w")
[10:30:56.490]         }
[10:30:56.490]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:30:56.490]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:30:56.490]             base::sink(type = "output", split = FALSE)
[10:30:56.490]             base::close(...future.stdout)
[10:30:56.490]         }, add = TRUE)
[10:30:56.490]     }
[10:30:56.490]     ...future.frame <- base::sys.nframe()
[10:30:56.490]     ...future.conditions <- base::list()
[10:30:56.490]     ...future.rng <- base::globalenv()$.Random.seed
[10:30:56.490]     if (FALSE) {
[10:30:56.490]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:30:56.490]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:30:56.490]     }
[10:30:56.490]     ...future.result <- base::tryCatch({
[10:30:56.490]         base::withCallingHandlers({
[10:30:56.490]             ...future.value <- base::withVisible(base::local({
[10:30:56.490]                 withCallingHandlers({
[10:30:56.490]                   {
[10:30:56.490]                     do.call(function(...) {
[10:30:56.490]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.490]                       if (!identical(...future.globals.maxSize.org, 
[10:30:56.490]                         ...future.globals.maxSize)) {
[10:30:56.490]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.490]                         on.exit(options(oopts), add = TRUE)
[10:30:56.490]                       }
[10:30:56.490]                       {
[10:30:56.490]                         lapply(seq_along(...future.elements_ii), 
[10:30:56.490]                           FUN = function(jj) {
[10:30:56.490]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.490]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.490]                               envir = globalenv(), inherits = FALSE)
[10:30:56.490]                             ...future.FUN(...future.X_jj, ...)
[10:30:56.490]                           })
[10:30:56.490]                       }
[10:30:56.490]                     }, args = future.call.arguments)
[10:30:56.490]                   }
[10:30:56.490]                 }, immediateCondition = function(cond) {
[10:30:56.490]                   save_rds <- function (object, pathname, ...) 
[10:30:56.490]                   {
[10:30:56.490]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:30:56.490]                     if (file_test("-f", pathname_tmp)) {
[10:30:56.490]                       fi_tmp <- file.info(pathname_tmp)
[10:30:56.490]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:30:56.490]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:30:56.490]                         fi_tmp[["mtime"]])
[10:30:56.490]                     }
[10:30:56.490]                     tryCatch({
[10:30:56.490]                       saveRDS(object, file = pathname_tmp, ...)
[10:30:56.490]                     }, error = function(ex) {
[10:30:56.490]                       msg <- conditionMessage(ex)
[10:30:56.490]                       fi_tmp <- file.info(pathname_tmp)
[10:30:56.490]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:30:56.490]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:30:56.490]                         fi_tmp[["mtime"]], msg)
[10:30:56.490]                       ex$message <- msg
[10:30:56.490]                       stop(ex)
[10:30:56.490]                     })
[10:30:56.490]                     stopifnot(file_test("-f", pathname_tmp))
[10:30:56.490]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:30:56.490]                     if (!res || file_test("-f", pathname_tmp)) {
[10:30:56.490]                       fi_tmp <- file.info(pathname_tmp)
[10:30:56.490]                       fi <- file.info(pathname)
[10:30:56.490]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:30:56.490]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:30:56.490]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:30:56.490]                         fi[["size"]], fi[["mtime"]])
[10:30:56.490]                       stop(msg)
[10:30:56.490]                     }
[10:30:56.490]                     invisible(pathname)
[10:30:56.490]                   }
[10:30:56.490]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:30:56.490]                     rootPath = tempdir()) 
[10:30:56.490]                   {
[10:30:56.490]                     obj <- list(time = Sys.time(), condition = cond)
[10:30:56.490]                     file <- tempfile(pattern = class(cond)[1], 
[10:30:56.490]                       tmpdir = path, fileext = ".rds")
[10:30:56.490]                     save_rds(obj, file)
[10:30:56.490]                   }
[10:30:56.490]                   saveImmediateCondition(cond, path = "/tmp/RtmpkDVBSn/.future/immediateConditions")
[10:30:56.490]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.490]                   {
[10:30:56.490]                     inherits <- base::inherits
[10:30:56.490]                     invokeRestart <- base::invokeRestart
[10:30:56.490]                     is.null <- base::is.null
[10:30:56.490]                     muffled <- FALSE
[10:30:56.490]                     if (inherits(cond, "message")) {
[10:30:56.490]                       muffled <- grepl(pattern, "muffleMessage")
[10:30:56.490]                       if (muffled) 
[10:30:56.490]                         invokeRestart("muffleMessage")
[10:30:56.490]                     }
[10:30:56.490]                     else if (inherits(cond, "warning")) {
[10:30:56.490]                       muffled <- grepl(pattern, "muffleWarning")
[10:30:56.490]                       if (muffled) 
[10:30:56.490]                         invokeRestart("muffleWarning")
[10:30:56.490]                     }
[10:30:56.490]                     else if (inherits(cond, "condition")) {
[10:30:56.490]                       if (!is.null(pattern)) {
[10:30:56.490]                         computeRestarts <- base::computeRestarts
[10:30:56.490]                         grepl <- base::grepl
[10:30:56.490]                         restarts <- computeRestarts(cond)
[10:30:56.490]                         for (restart in restarts) {
[10:30:56.490]                           name <- restart$name
[10:30:56.490]                           if (is.null(name)) 
[10:30:56.490]                             next
[10:30:56.490]                           if (!grepl(pattern, name)) 
[10:30:56.490]                             next
[10:30:56.490]                           invokeRestart(restart)
[10:30:56.490]                           muffled <- TRUE
[10:30:56.490]                           break
[10:30:56.490]                         }
[10:30:56.490]                       }
[10:30:56.490]                     }
[10:30:56.490]                     invisible(muffled)
[10:30:56.490]                   }
[10:30:56.490]                   muffleCondition(cond)
[10:30:56.490]                 })
[10:30:56.490]             }))
[10:30:56.490]             future::FutureResult(value = ...future.value$value, 
[10:30:56.490]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:56.490]                   ...future.rng), globalenv = if (FALSE) 
[10:30:56.490]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:30:56.490]                     ...future.globalenv.names))
[10:30:56.490]                 else NULL, started = ...future.startTime, version = "1.8")
[10:30:56.490]         }, condition = base::local({
[10:30:56.490]             c <- base::c
[10:30:56.490]             inherits <- base::inherits
[10:30:56.490]             invokeRestart <- base::invokeRestart
[10:30:56.490]             length <- base::length
[10:30:56.490]             list <- base::list
[10:30:56.490]             seq.int <- base::seq.int
[10:30:56.490]             signalCondition <- base::signalCondition
[10:30:56.490]             sys.calls <- base::sys.calls
[10:30:56.490]             `[[` <- base::`[[`
[10:30:56.490]             `+` <- base::`+`
[10:30:56.490]             `<<-` <- base::`<<-`
[10:30:56.490]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:30:56.490]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:30:56.490]                   3L)]
[10:30:56.490]             }
[10:30:56.490]             function(cond) {
[10:30:56.490]                 is_error <- inherits(cond, "error")
[10:30:56.490]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:30:56.490]                   NULL)
[10:30:56.490]                 if (is_error) {
[10:30:56.490]                   sessionInformation <- function() {
[10:30:56.490]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:30:56.490]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:30:56.490]                       search = base::search(), system = base::Sys.info())
[10:30:56.490]                   }
[10:30:56.490]                   ...future.conditions[[length(...future.conditions) + 
[10:30:56.490]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:30:56.490]                     cond$call), session = sessionInformation(), 
[10:30:56.490]                     timestamp = base::Sys.time(), signaled = 0L)
[10:30:56.490]                   signalCondition(cond)
[10:30:56.490]                 }
[10:30:56.490]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:30:56.490]                 "immediateCondition"))) {
[10:30:56.490]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:30:56.490]                   ...future.conditions[[length(...future.conditions) + 
[10:30:56.490]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:30:56.490]                   if (TRUE && !signal) {
[10:30:56.490]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.490]                     {
[10:30:56.490]                       inherits <- base::inherits
[10:30:56.490]                       invokeRestart <- base::invokeRestart
[10:30:56.490]                       is.null <- base::is.null
[10:30:56.490]                       muffled <- FALSE
[10:30:56.490]                       if (inherits(cond, "message")) {
[10:30:56.490]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:56.490]                         if (muffled) 
[10:30:56.490]                           invokeRestart("muffleMessage")
[10:30:56.490]                       }
[10:30:56.490]                       else if (inherits(cond, "warning")) {
[10:30:56.490]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:56.490]                         if (muffled) 
[10:30:56.490]                           invokeRestart("muffleWarning")
[10:30:56.490]                       }
[10:30:56.490]                       else if (inherits(cond, "condition")) {
[10:30:56.490]                         if (!is.null(pattern)) {
[10:30:56.490]                           computeRestarts <- base::computeRestarts
[10:30:56.490]                           grepl <- base::grepl
[10:30:56.490]                           restarts <- computeRestarts(cond)
[10:30:56.490]                           for (restart in restarts) {
[10:30:56.490]                             name <- restart$name
[10:30:56.490]                             if (is.null(name)) 
[10:30:56.490]                               next
[10:30:56.490]                             if (!grepl(pattern, name)) 
[10:30:56.490]                               next
[10:30:56.490]                             invokeRestart(restart)
[10:30:56.490]                             muffled <- TRUE
[10:30:56.490]                             break
[10:30:56.490]                           }
[10:30:56.490]                         }
[10:30:56.490]                       }
[10:30:56.490]                       invisible(muffled)
[10:30:56.490]                     }
[10:30:56.490]                     muffleCondition(cond, pattern = "^muffle")
[10:30:56.490]                   }
[10:30:56.490]                 }
[10:30:56.490]                 else {
[10:30:56.490]                   if (TRUE) {
[10:30:56.490]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.490]                     {
[10:30:56.490]                       inherits <- base::inherits
[10:30:56.490]                       invokeRestart <- base::invokeRestart
[10:30:56.490]                       is.null <- base::is.null
[10:30:56.490]                       muffled <- FALSE
[10:30:56.490]                       if (inherits(cond, "message")) {
[10:30:56.490]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:56.490]                         if (muffled) 
[10:30:56.490]                           invokeRestart("muffleMessage")
[10:30:56.490]                       }
[10:30:56.490]                       else if (inherits(cond, "warning")) {
[10:30:56.490]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:56.490]                         if (muffled) 
[10:30:56.490]                           invokeRestart("muffleWarning")
[10:30:56.490]                       }
[10:30:56.490]                       else if (inherits(cond, "condition")) {
[10:30:56.490]                         if (!is.null(pattern)) {
[10:30:56.490]                           computeRestarts <- base::computeRestarts
[10:30:56.490]                           grepl <- base::grepl
[10:30:56.490]                           restarts <- computeRestarts(cond)
[10:30:56.490]                           for (restart in restarts) {
[10:30:56.490]                             name <- restart$name
[10:30:56.490]                             if (is.null(name)) 
[10:30:56.490]                               next
[10:30:56.490]                             if (!grepl(pattern, name)) 
[10:30:56.490]                               next
[10:30:56.490]                             invokeRestart(restart)
[10:30:56.490]                             muffled <- TRUE
[10:30:56.490]                             break
[10:30:56.490]                           }
[10:30:56.490]                         }
[10:30:56.490]                       }
[10:30:56.490]                       invisible(muffled)
[10:30:56.490]                     }
[10:30:56.490]                     muffleCondition(cond, pattern = "^muffle")
[10:30:56.490]                   }
[10:30:56.490]                 }
[10:30:56.490]             }
[10:30:56.490]         }))
[10:30:56.490]     }, error = function(ex) {
[10:30:56.490]         base::structure(base::list(value = NULL, visible = NULL, 
[10:30:56.490]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:56.490]                 ...future.rng), started = ...future.startTime, 
[10:30:56.490]             finished = Sys.time(), session_uuid = NA_character_, 
[10:30:56.490]             version = "1.8"), class = "FutureResult")
[10:30:56.490]     }, finally = {
[10:30:56.490]         if (!identical(...future.workdir, getwd())) 
[10:30:56.490]             setwd(...future.workdir)
[10:30:56.490]         {
[10:30:56.490]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:30:56.490]                 ...future.oldOptions$nwarnings <- NULL
[10:30:56.490]             }
[10:30:56.490]             base::options(...future.oldOptions)
[10:30:56.490]             if (.Platform$OS.type == "windows") {
[10:30:56.490]                 old_names <- names(...future.oldEnvVars)
[10:30:56.490]                 envs <- base::Sys.getenv()
[10:30:56.490]                 names <- names(envs)
[10:30:56.490]                 common <- intersect(names, old_names)
[10:30:56.490]                 added <- setdiff(names, old_names)
[10:30:56.490]                 removed <- setdiff(old_names, names)
[10:30:56.490]                 changed <- common[...future.oldEnvVars[common] != 
[10:30:56.490]                   envs[common]]
[10:30:56.490]                 NAMES <- toupper(changed)
[10:30:56.490]                 args <- list()
[10:30:56.490]                 for (kk in seq_along(NAMES)) {
[10:30:56.490]                   name <- changed[[kk]]
[10:30:56.490]                   NAME <- NAMES[[kk]]
[10:30:56.490]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.490]                     next
[10:30:56.490]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:56.490]                 }
[10:30:56.490]                 NAMES <- toupper(added)
[10:30:56.490]                 for (kk in seq_along(NAMES)) {
[10:30:56.490]                   name <- added[[kk]]
[10:30:56.490]                   NAME <- NAMES[[kk]]
[10:30:56.490]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.490]                     next
[10:30:56.490]                   args[[name]] <- ""
[10:30:56.490]                 }
[10:30:56.490]                 NAMES <- toupper(removed)
[10:30:56.490]                 for (kk in seq_along(NAMES)) {
[10:30:56.490]                   name <- removed[[kk]]
[10:30:56.490]                   NAME <- NAMES[[kk]]
[10:30:56.490]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.490]                     next
[10:30:56.490]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:56.490]                 }
[10:30:56.490]                 if (length(args) > 0) 
[10:30:56.490]                   base::do.call(base::Sys.setenv, args = args)
[10:30:56.490]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:30:56.490]             }
[10:30:56.490]             else {
[10:30:56.490]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:30:56.490]             }
[10:30:56.490]             {
[10:30:56.490]                 if (base::length(...future.futureOptionsAdded) > 
[10:30:56.490]                   0L) {
[10:30:56.490]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:30:56.490]                   base::names(opts) <- ...future.futureOptionsAdded
[10:30:56.490]                   base::options(opts)
[10:30:56.490]                 }
[10:30:56.490]                 {
[10:30:56.490]                   {
[10:30:56.490]                     base::options(mc.cores = ...future.mc.cores.old)
[10:30:56.490]                     NULL
[10:30:56.490]                   }
[10:30:56.490]                   options(future.plan = NULL)
[10:30:56.490]                   if (is.na(NA_character_)) 
[10:30:56.490]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:30:56.490]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:30:56.490]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:30:56.490]                     .init = FALSE)
[10:30:56.490]                 }
[10:30:56.490]             }
[10:30:56.490]         }
[10:30:56.490]     })
[10:30:56.490]     if (TRUE) {
[10:30:56.490]         base::sink(type = "output", split = FALSE)
[10:30:56.490]         if (TRUE) {
[10:30:56.490]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:30:56.490]         }
[10:30:56.490]         else {
[10:30:56.490]             ...future.result["stdout"] <- base::list(NULL)
[10:30:56.490]         }
[10:30:56.490]         base::close(...future.stdout)
[10:30:56.490]         ...future.stdout <- NULL
[10:30:56.490]     }
[10:30:56.490]     ...future.result$conditions <- ...future.conditions
[10:30:56.490]     ...future.result$finished <- base::Sys.time()
[10:30:56.490]     ...future.result
[10:30:56.490] }
[10:30:56.493] assign_globals() ...
[10:30:56.493] List of 5
[10:30:56.493]  $ ...future.FUN            :function (...)  
[10:30:56.493]  $ future.call.arguments    : list()
[10:30:56.493]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:56.493]  $ ...future.elements_ii    :List of 2
[10:30:56.493]   ..$ : int 0
[10:30:56.493]   ..$ : int 0
[10:30:56.493]  $ ...future.seeds_ii       :List of 2
[10:30:56.493]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[10:30:56.493]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[10:30:56.493]  $ ...future.globals.maxSize: NULL
[10:30:56.493]  - attr(*, "where")=List of 5
[10:30:56.493]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:30:56.493]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:30:56.493]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:30:56.493]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:30:56.493]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:30:56.493]  - attr(*, "resolved")= logi FALSE
[10:30:56.493]  - attr(*, "total_size")= num 616
[10:30:56.493]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:56.493]  - attr(*, "already-done")= logi TRUE
[10:30:56.501] - reassign environment for ‘...future.FUN’
[10:30:56.501] - copied ‘...future.FUN’ to environment
[10:30:56.501] - copied ‘future.call.arguments’ to environment
[10:30:56.501] - copied ‘...future.elements_ii’ to environment
[10:30:56.501] - copied ‘...future.seeds_ii’ to environment
[10:30:56.501] - copied ‘...future.globals.maxSize’ to environment
[10:30:56.501] assign_globals() ... done
[10:30:56.502] requestCore(): workers = 2
[10:30:56.504] MulticoreFuture started
[10:30:56.504] - Launch lazy future ... done
[10:30:56.504] run() for ‘MulticoreFuture’ ... done
[10:30:56.505] Created future:
[10:30:56.505] plan(): Setting new future strategy stack:
[10:30:56.505] List of future strategies:
[10:30:56.505] 1. sequential:
[10:30:56.505]    - args: function (..., envir = parent.frame())
[10:30:56.505]    - tweaked: FALSE
[10:30:56.505]    - call: NULL
[10:30:56.506] plan(): nbrOfWorkers() = 1
[10:30:56.508] plan(): Setting new future strategy stack:
[10:30:56.508] List of future strategies:
[10:30:56.508] 1. multicore:
[10:30:56.508]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:30:56.508]    - tweaked: FALSE
[10:30:56.508]    - call: plan(strategy)
[10:30:56.514] plan(): nbrOfWorkers() = 2
[10:30:56.505] MulticoreFuture:
[10:30:56.505] Label: ‘future_replicate-1’
[10:30:56.505] Expression:
[10:30:56.505] {
[10:30:56.505]     do.call(function(...) {
[10:30:56.505]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.505]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:56.505]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.505]             on.exit(options(oopts), add = TRUE)
[10:30:56.505]         }
[10:30:56.505]         {
[10:30:56.505]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:56.505]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.505]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.505]                   envir = globalenv(), inherits = FALSE)
[10:30:56.505]                 ...future.FUN(...future.X_jj, ...)
[10:30:56.505]             })
[10:30:56.505]         }
[10:30:56.505]     }, args = future.call.arguments)
[10:30:56.505] }
[10:30:56.505] Lazy evaluation: FALSE
[10:30:56.505] Asynchronous evaluation: TRUE
[10:30:56.505] Local evaluation: TRUE
[10:30:56.505] Environment: R_GlobalEnv
[10:30:56.505] Capture standard output: TRUE
[10:30:56.505] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:30:56.505] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:30:56.505] Packages: <none>
[10:30:56.505] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:30:56.505] Resolved: TRUE
[10:30:56.505] Value: <not collected>
[10:30:56.505] Conditions captured: <none>
[10:30:56.505] Early signaling: FALSE
[10:30:56.505] Owner process: 7cdcbd4b-6c47-ca9a-dc3f-e18236d134b8
[10:30:56.505] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:56.515] Chunk #1 of 2 ... DONE
[10:30:56.515] Chunk #2 of 2 ...
[10:30:56.515]  - Finding globals in 'X' for chunk #2 ...
[10:30:56.515] getGlobalsAndPackages() ...
[10:30:56.515] Searching for globals...
[10:30:56.516] 
[10:30:56.516] Searching for globals ... DONE
[10:30:56.516] - globals: [0] <none>
[10:30:56.516] getGlobalsAndPackages() ... DONE
[10:30:56.516]    + additional globals found: [n=0] 
[10:30:56.517]    + additional namespaces needed: [n=0] 
[10:30:56.517]  - Finding globals in 'X' for chunk #2 ... DONE
[10:30:56.517]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:30:56.517]  - seeds: [3] <seeds>
[10:30:56.517]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.517] getGlobalsAndPackages() ...
[10:30:56.517] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.518] Resolving globals: FALSE
[10:30:56.518] Tweak future expression to call with '...' arguments ...
[10:30:56.518] {
[10:30:56.518]     do.call(function(...) {
[10:30:56.518]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.518]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:56.518]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.518]             on.exit(options(oopts), add = TRUE)
[10:30:56.518]         }
[10:30:56.518]         {
[10:30:56.518]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:56.518]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.518]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.518]                   envir = globalenv(), inherits = FALSE)
[10:30:56.518]                 ...future.FUN(...future.X_jj, ...)
[10:30:56.518]             })
[10:30:56.518]         }
[10:30:56.518]     }, args = future.call.arguments)
[10:30:56.518] }
[10:30:56.518] Tweak future expression to call with '...' arguments ... DONE
[10:30:56.519] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.519] 
[10:30:56.520] getGlobalsAndPackages() ... DONE
[10:30:56.520] run() for ‘Future’ ...
[10:30:56.520] - state: ‘created’
[10:30:56.521] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:30:56.526] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:56.526] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:30:56.526]   - Field: ‘label’
[10:30:56.526]   - Field: ‘local’
[10:30:56.527]   - Field: ‘owner’
[10:30:56.527]   - Field: ‘envir’
[10:30:56.527]   - Field: ‘workers’
[10:30:56.527]   - Field: ‘packages’
[10:30:56.527]   - Field: ‘gc’
[10:30:56.527]   - Field: ‘job’
[10:30:56.528]   - Field: ‘conditions’
[10:30:56.528]   - Field: ‘expr’
[10:30:56.528]   - Field: ‘uuid’
[10:30:56.528]   - Field: ‘seed’
[10:30:56.528]   - Field: ‘version’
[10:30:56.528]   - Field: ‘result’
[10:30:56.528]   - Field: ‘asynchronous’
[10:30:56.529]   - Field: ‘calls’
[10:30:56.529]   - Field: ‘globals’
[10:30:56.529]   - Field: ‘stdout’
[10:30:56.529]   - Field: ‘earlySignal’
[10:30:56.529]   - Field: ‘lazy’
[10:30:56.529]   - Field: ‘state’
[10:30:56.530] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:30:56.530] - Launch lazy future ...
[10:30:56.530] Packages needed by the future expression (n = 0): <none>
[10:30:56.530] Packages needed by future strategies (n = 0): <none>
[10:30:56.531] {
[10:30:56.531]     {
[10:30:56.531]         {
[10:30:56.531]             ...future.startTime <- base::Sys.time()
[10:30:56.531]             {
[10:30:56.531]                 {
[10:30:56.531]                   {
[10:30:56.531]                     {
[10:30:56.531]                       base::local({
[10:30:56.531]                         has_future <- base::requireNamespace("future", 
[10:30:56.531]                           quietly = TRUE)
[10:30:56.531]                         if (has_future) {
[10:30:56.531]                           ns <- base::getNamespace("future")
[10:30:56.531]                           version <- ns[[".package"]][["version"]]
[10:30:56.531]                           if (is.null(version)) 
[10:30:56.531]                             version <- utils::packageVersion("future")
[10:30:56.531]                         }
[10:30:56.531]                         else {
[10:30:56.531]                           version <- NULL
[10:30:56.531]                         }
[10:30:56.531]                         if (!has_future || version < "1.8.0") {
[10:30:56.531]                           info <- base::c(r_version = base::gsub("R version ", 
[10:30:56.531]                             "", base::R.version$version.string), 
[10:30:56.531]                             platform = base::sprintf("%s (%s-bit)", 
[10:30:56.531]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:30:56.531]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:30:56.531]                               "release", "version")], collapse = " "), 
[10:30:56.531]                             hostname = base::Sys.info()[["nodename"]])
[10:30:56.531]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:30:56.531]                             info)
[10:30:56.531]                           info <- base::paste(info, collapse = "; ")
[10:30:56.531]                           if (!has_future) {
[10:30:56.531]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:30:56.531]                               info)
[10:30:56.531]                           }
[10:30:56.531]                           else {
[10:30:56.531]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:30:56.531]                               info, version)
[10:30:56.531]                           }
[10:30:56.531]                           base::stop(msg)
[10:30:56.531]                         }
[10:30:56.531]                       })
[10:30:56.531]                     }
[10:30:56.531]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:30:56.531]                     base::options(mc.cores = 1L)
[10:30:56.531]                   }
[10:30:56.531]                   ...future.strategy.old <- future::plan("list")
[10:30:56.531]                   options(future.plan = NULL)
[10:30:56.531]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:30:56.531]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:30:56.531]                 }
[10:30:56.531]                 ...future.workdir <- getwd()
[10:30:56.531]             }
[10:30:56.531]             ...future.oldOptions <- base::as.list(base::.Options)
[10:30:56.531]             ...future.oldEnvVars <- base::Sys.getenv()
[10:30:56.531]         }
[10:30:56.531]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:30:56.531]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:30:56.531]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:30:56.531]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:30:56.531]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:30:56.531]             future.stdout.windows.reencode = NULL, width = 80L)
[10:30:56.531]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:30:56.531]             base::names(...future.oldOptions))
[10:30:56.531]     }
[10:30:56.531]     if (FALSE) {
[10:30:56.531]     }
[10:30:56.531]     else {
[10:30:56.531]         if (TRUE) {
[10:30:56.531]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:30:56.531]                 open = "w")
[10:30:56.531]         }
[10:30:56.531]         else {
[10:30:56.531]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:30:56.531]                 windows = "NUL", "/dev/null"), open = "w")
[10:30:56.531]         }
[10:30:56.531]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:30:56.531]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:30:56.531]             base::sink(type = "output", split = FALSE)
[10:30:56.531]             base::close(...future.stdout)
[10:30:56.531]         }, add = TRUE)
[10:30:56.531]     }
[10:30:56.531]     ...future.frame <- base::sys.nframe()
[10:30:56.531]     ...future.conditions <- base::list()
[10:30:56.531]     ...future.rng <- base::globalenv()$.Random.seed
[10:30:56.531]     if (FALSE) {
[10:30:56.531]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:30:56.531]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:30:56.531]     }
[10:30:56.531]     ...future.result <- base::tryCatch({
[10:30:56.531]         base::withCallingHandlers({
[10:30:56.531]             ...future.value <- base::withVisible(base::local({
[10:30:56.531]                 withCallingHandlers({
[10:30:56.531]                   {
[10:30:56.531]                     do.call(function(...) {
[10:30:56.531]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.531]                       if (!identical(...future.globals.maxSize.org, 
[10:30:56.531]                         ...future.globals.maxSize)) {
[10:30:56.531]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.531]                         on.exit(options(oopts), add = TRUE)
[10:30:56.531]                       }
[10:30:56.531]                       {
[10:30:56.531]                         lapply(seq_along(...future.elements_ii), 
[10:30:56.531]                           FUN = function(jj) {
[10:30:56.531]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.531]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.531]                               envir = globalenv(), inherits = FALSE)
[10:30:56.531]                             ...future.FUN(...future.X_jj, ...)
[10:30:56.531]                           })
[10:30:56.531]                       }
[10:30:56.531]                     }, args = future.call.arguments)
[10:30:56.531]                   }
[10:30:56.531]                 }, immediateCondition = function(cond) {
[10:30:56.531]                   save_rds <- function (object, pathname, ...) 
[10:30:56.531]                   {
[10:30:56.531]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:30:56.531]                     if (file_test("-f", pathname_tmp)) {
[10:30:56.531]                       fi_tmp <- file.info(pathname_tmp)
[10:30:56.531]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:30:56.531]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:30:56.531]                         fi_tmp[["mtime"]])
[10:30:56.531]                     }
[10:30:56.531]                     tryCatch({
[10:30:56.531]                       saveRDS(object, file = pathname_tmp, ...)
[10:30:56.531]                     }, error = function(ex) {
[10:30:56.531]                       msg <- conditionMessage(ex)
[10:30:56.531]                       fi_tmp <- file.info(pathname_tmp)
[10:30:56.531]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:30:56.531]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:30:56.531]                         fi_tmp[["mtime"]], msg)
[10:30:56.531]                       ex$message <- msg
[10:30:56.531]                       stop(ex)
[10:30:56.531]                     })
[10:30:56.531]                     stopifnot(file_test("-f", pathname_tmp))
[10:30:56.531]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:30:56.531]                     if (!res || file_test("-f", pathname_tmp)) {
[10:30:56.531]                       fi_tmp <- file.info(pathname_tmp)
[10:30:56.531]                       fi <- file.info(pathname)
[10:30:56.531]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:30:56.531]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:30:56.531]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:30:56.531]                         fi[["size"]], fi[["mtime"]])
[10:30:56.531]                       stop(msg)
[10:30:56.531]                     }
[10:30:56.531]                     invisible(pathname)
[10:30:56.531]                   }
[10:30:56.531]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:30:56.531]                     rootPath = tempdir()) 
[10:30:56.531]                   {
[10:30:56.531]                     obj <- list(time = Sys.time(), condition = cond)
[10:30:56.531]                     file <- tempfile(pattern = class(cond)[1], 
[10:30:56.531]                       tmpdir = path, fileext = ".rds")
[10:30:56.531]                     save_rds(obj, file)
[10:30:56.531]                   }
[10:30:56.531]                   saveImmediateCondition(cond, path = "/tmp/RtmpkDVBSn/.future/immediateConditions")
[10:30:56.531]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.531]                   {
[10:30:56.531]                     inherits <- base::inherits
[10:30:56.531]                     invokeRestart <- base::invokeRestart
[10:30:56.531]                     is.null <- base::is.null
[10:30:56.531]                     muffled <- FALSE
[10:30:56.531]                     if (inherits(cond, "message")) {
[10:30:56.531]                       muffled <- grepl(pattern, "muffleMessage")
[10:30:56.531]                       if (muffled) 
[10:30:56.531]                         invokeRestart("muffleMessage")
[10:30:56.531]                     }
[10:30:56.531]                     else if (inherits(cond, "warning")) {
[10:30:56.531]                       muffled <- grepl(pattern, "muffleWarning")
[10:30:56.531]                       if (muffled) 
[10:30:56.531]                         invokeRestart("muffleWarning")
[10:30:56.531]                     }
[10:30:56.531]                     else if (inherits(cond, "condition")) {
[10:30:56.531]                       if (!is.null(pattern)) {
[10:30:56.531]                         computeRestarts <- base::computeRestarts
[10:30:56.531]                         grepl <- base::grepl
[10:30:56.531]                         restarts <- computeRestarts(cond)
[10:30:56.531]                         for (restart in restarts) {
[10:30:56.531]                           name <- restart$name
[10:30:56.531]                           if (is.null(name)) 
[10:30:56.531]                             next
[10:30:56.531]                           if (!grepl(pattern, name)) 
[10:30:56.531]                             next
[10:30:56.531]                           invokeRestart(restart)
[10:30:56.531]                           muffled <- TRUE
[10:30:56.531]                           break
[10:30:56.531]                         }
[10:30:56.531]                       }
[10:30:56.531]                     }
[10:30:56.531]                     invisible(muffled)
[10:30:56.531]                   }
[10:30:56.531]                   muffleCondition(cond)
[10:30:56.531]                 })
[10:30:56.531]             }))
[10:30:56.531]             future::FutureResult(value = ...future.value$value, 
[10:30:56.531]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:56.531]                   ...future.rng), globalenv = if (FALSE) 
[10:30:56.531]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:30:56.531]                     ...future.globalenv.names))
[10:30:56.531]                 else NULL, started = ...future.startTime, version = "1.8")
[10:30:56.531]         }, condition = base::local({
[10:30:56.531]             c <- base::c
[10:30:56.531]             inherits <- base::inherits
[10:30:56.531]             invokeRestart <- base::invokeRestart
[10:30:56.531]             length <- base::length
[10:30:56.531]             list <- base::list
[10:30:56.531]             seq.int <- base::seq.int
[10:30:56.531]             signalCondition <- base::signalCondition
[10:30:56.531]             sys.calls <- base::sys.calls
[10:30:56.531]             `[[` <- base::`[[`
[10:30:56.531]             `+` <- base::`+`
[10:30:56.531]             `<<-` <- base::`<<-`
[10:30:56.531]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:30:56.531]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:30:56.531]                   3L)]
[10:30:56.531]             }
[10:30:56.531]             function(cond) {
[10:30:56.531]                 is_error <- inherits(cond, "error")
[10:30:56.531]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:30:56.531]                   NULL)
[10:30:56.531]                 if (is_error) {
[10:30:56.531]                   sessionInformation <- function() {
[10:30:56.531]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:30:56.531]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:30:56.531]                       search = base::search(), system = base::Sys.info())
[10:30:56.531]                   }
[10:30:56.531]                   ...future.conditions[[length(...future.conditions) + 
[10:30:56.531]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:30:56.531]                     cond$call), session = sessionInformation(), 
[10:30:56.531]                     timestamp = base::Sys.time(), signaled = 0L)
[10:30:56.531]                   signalCondition(cond)
[10:30:56.531]                 }
[10:30:56.531]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:30:56.531]                 "immediateCondition"))) {
[10:30:56.531]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:30:56.531]                   ...future.conditions[[length(...future.conditions) + 
[10:30:56.531]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:30:56.531]                   if (TRUE && !signal) {
[10:30:56.531]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.531]                     {
[10:30:56.531]                       inherits <- base::inherits
[10:30:56.531]                       invokeRestart <- base::invokeRestart
[10:30:56.531]                       is.null <- base::is.null
[10:30:56.531]                       muffled <- FALSE
[10:30:56.531]                       if (inherits(cond, "message")) {
[10:30:56.531]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:56.531]                         if (muffled) 
[10:30:56.531]                           invokeRestart("muffleMessage")
[10:30:56.531]                       }
[10:30:56.531]                       else if (inherits(cond, "warning")) {
[10:30:56.531]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:56.531]                         if (muffled) 
[10:30:56.531]                           invokeRestart("muffleWarning")
[10:30:56.531]                       }
[10:30:56.531]                       else if (inherits(cond, "condition")) {
[10:30:56.531]                         if (!is.null(pattern)) {
[10:30:56.531]                           computeRestarts <- base::computeRestarts
[10:30:56.531]                           grepl <- base::grepl
[10:30:56.531]                           restarts <- computeRestarts(cond)
[10:30:56.531]                           for (restart in restarts) {
[10:30:56.531]                             name <- restart$name
[10:30:56.531]                             if (is.null(name)) 
[10:30:56.531]                               next
[10:30:56.531]                             if (!grepl(pattern, name)) 
[10:30:56.531]                               next
[10:30:56.531]                             invokeRestart(restart)
[10:30:56.531]                             muffled <- TRUE
[10:30:56.531]                             break
[10:30:56.531]                           }
[10:30:56.531]                         }
[10:30:56.531]                       }
[10:30:56.531]                       invisible(muffled)
[10:30:56.531]                     }
[10:30:56.531]                     muffleCondition(cond, pattern = "^muffle")
[10:30:56.531]                   }
[10:30:56.531]                 }
[10:30:56.531]                 else {
[10:30:56.531]                   if (TRUE) {
[10:30:56.531]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.531]                     {
[10:30:56.531]                       inherits <- base::inherits
[10:30:56.531]                       invokeRestart <- base::invokeRestart
[10:30:56.531]                       is.null <- base::is.null
[10:30:56.531]                       muffled <- FALSE
[10:30:56.531]                       if (inherits(cond, "message")) {
[10:30:56.531]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:56.531]                         if (muffled) 
[10:30:56.531]                           invokeRestart("muffleMessage")
[10:30:56.531]                       }
[10:30:56.531]                       else if (inherits(cond, "warning")) {
[10:30:56.531]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:56.531]                         if (muffled) 
[10:30:56.531]                           invokeRestart("muffleWarning")
[10:30:56.531]                       }
[10:30:56.531]                       else if (inherits(cond, "condition")) {
[10:30:56.531]                         if (!is.null(pattern)) {
[10:30:56.531]                           computeRestarts <- base::computeRestarts
[10:30:56.531]                           grepl <- base::grepl
[10:30:56.531]                           restarts <- computeRestarts(cond)
[10:30:56.531]                           for (restart in restarts) {
[10:30:56.531]                             name <- restart$name
[10:30:56.531]                             if (is.null(name)) 
[10:30:56.531]                               next
[10:30:56.531]                             if (!grepl(pattern, name)) 
[10:30:56.531]                               next
[10:30:56.531]                             invokeRestart(restart)
[10:30:56.531]                             muffled <- TRUE
[10:30:56.531]                             break
[10:30:56.531]                           }
[10:30:56.531]                         }
[10:30:56.531]                       }
[10:30:56.531]                       invisible(muffled)
[10:30:56.531]                     }
[10:30:56.531]                     muffleCondition(cond, pattern = "^muffle")
[10:30:56.531]                   }
[10:30:56.531]                 }
[10:30:56.531]             }
[10:30:56.531]         }))
[10:30:56.531]     }, error = function(ex) {
[10:30:56.531]         base::structure(base::list(value = NULL, visible = NULL, 
[10:30:56.531]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:56.531]                 ...future.rng), started = ...future.startTime, 
[10:30:56.531]             finished = Sys.time(), session_uuid = NA_character_, 
[10:30:56.531]             version = "1.8"), class = "FutureResult")
[10:30:56.531]     }, finally = {
[10:30:56.531]         if (!identical(...future.workdir, getwd())) 
[10:30:56.531]             setwd(...future.workdir)
[10:30:56.531]         {
[10:30:56.531]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:30:56.531]                 ...future.oldOptions$nwarnings <- NULL
[10:30:56.531]             }
[10:30:56.531]             base::options(...future.oldOptions)
[10:30:56.531]             if (.Platform$OS.type == "windows") {
[10:30:56.531]                 old_names <- names(...future.oldEnvVars)
[10:30:56.531]                 envs <- base::Sys.getenv()
[10:30:56.531]                 names <- names(envs)
[10:30:56.531]                 common <- intersect(names, old_names)
[10:30:56.531]                 added <- setdiff(names, old_names)
[10:30:56.531]                 removed <- setdiff(old_names, names)
[10:30:56.531]                 changed <- common[...future.oldEnvVars[common] != 
[10:30:56.531]                   envs[common]]
[10:30:56.531]                 NAMES <- toupper(changed)
[10:30:56.531]                 args <- list()
[10:30:56.531]                 for (kk in seq_along(NAMES)) {
[10:30:56.531]                   name <- changed[[kk]]
[10:30:56.531]                   NAME <- NAMES[[kk]]
[10:30:56.531]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.531]                     next
[10:30:56.531]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:56.531]                 }
[10:30:56.531]                 NAMES <- toupper(added)
[10:30:56.531]                 for (kk in seq_along(NAMES)) {
[10:30:56.531]                   name <- added[[kk]]
[10:30:56.531]                   NAME <- NAMES[[kk]]
[10:30:56.531]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.531]                     next
[10:30:56.531]                   args[[name]] <- ""
[10:30:56.531]                 }
[10:30:56.531]                 NAMES <- toupper(removed)
[10:30:56.531]                 for (kk in seq_along(NAMES)) {
[10:30:56.531]                   name <- removed[[kk]]
[10:30:56.531]                   NAME <- NAMES[[kk]]
[10:30:56.531]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.531]                     next
[10:30:56.531]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:56.531]                 }
[10:30:56.531]                 if (length(args) > 0) 
[10:30:56.531]                   base::do.call(base::Sys.setenv, args = args)
[10:30:56.531]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:30:56.531]             }
[10:30:56.531]             else {
[10:30:56.531]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:30:56.531]             }
[10:30:56.531]             {
[10:30:56.531]                 if (base::length(...future.futureOptionsAdded) > 
[10:30:56.531]                   0L) {
[10:30:56.531]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:30:56.531]                   base::names(opts) <- ...future.futureOptionsAdded
[10:30:56.531]                   base::options(opts)
[10:30:56.531]                 }
[10:30:56.531]                 {
[10:30:56.531]                   {
[10:30:56.531]                     base::options(mc.cores = ...future.mc.cores.old)
[10:30:56.531]                     NULL
[10:30:56.531]                   }
[10:30:56.531]                   options(future.plan = NULL)
[10:30:56.531]                   if (is.na(NA_character_)) 
[10:30:56.531]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:30:56.531]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:30:56.531]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:30:56.531]                     .init = FALSE)
[10:30:56.531]                 }
[10:30:56.531]             }
[10:30:56.531]         }
[10:30:56.531]     })
[10:30:56.531]     if (TRUE) {
[10:30:56.531]         base::sink(type = "output", split = FALSE)
[10:30:56.531]         if (TRUE) {
[10:30:56.531]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:30:56.531]         }
[10:30:56.531]         else {
[10:30:56.531]             ...future.result["stdout"] <- base::list(NULL)
[10:30:56.531]         }
[10:30:56.531]         base::close(...future.stdout)
[10:30:56.531]         ...future.stdout <- NULL
[10:30:56.531]     }
[10:30:56.531]     ...future.result$conditions <- ...future.conditions
[10:30:56.531]     ...future.result$finished <- base::Sys.time()
[10:30:56.531]     ...future.result
[10:30:56.531] }
[10:30:56.535] assign_globals() ...
[10:30:56.535] List of 5
[10:30:56.535]  $ ...future.FUN            :function (...)  
[10:30:56.535]  $ future.call.arguments    : list()
[10:30:56.535]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:56.535]  $ ...future.elements_ii    :List of 3
[10:30:56.535]   ..$ : int 0
[10:30:56.535]   ..$ : int 0
[10:30:56.535]   ..$ : int 0
[10:30:56.535]  $ ...future.seeds_ii       :List of 3
[10:30:56.535]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[10:30:56.535]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[10:30:56.535]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[10:30:56.535]  $ ...future.globals.maxSize: NULL
[10:30:56.535]  - attr(*, "where")=List of 5
[10:30:56.535]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:30:56.535]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:30:56.535]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:30:56.535]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:30:56.535]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:30:56.535]  - attr(*, "resolved")= logi FALSE
[10:30:56.535]  - attr(*, "total_size")= num 616
[10:30:56.535]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:56.535]  - attr(*, "already-done")= logi TRUE
[10:30:56.582] - reassign environment for ‘...future.FUN’
[10:30:56.583] - copied ‘...future.FUN’ to environment
[10:30:56.583] - copied ‘future.call.arguments’ to environment
[10:30:56.583] - copied ‘...future.elements_ii’ to environment
[10:30:56.583] - copied ‘...future.seeds_ii’ to environment
[10:30:56.583] - copied ‘...future.globals.maxSize’ to environment
[10:30:56.583] assign_globals() ... done
[10:30:56.583] requestCore(): workers = 2
[10:30:56.586] MulticoreFuture started
[10:30:56.586] - Launch lazy future ... done
[10:30:56.586] run() for ‘MulticoreFuture’ ... done
[10:30:56.587] Created future:
[10:30:56.587] plan(): Setting new future strategy stack:
[10:30:56.587] List of future strategies:
[10:30:56.587] 1. sequential:
[10:30:56.587]    - args: function (..., envir = parent.frame())
[10:30:56.587]    - tweaked: FALSE
[10:30:56.587]    - call: NULL
[10:30:56.588] plan(): nbrOfWorkers() = 1
[10:30:56.590] plan(): Setting new future strategy stack:
[10:30:56.591] List of future strategies:
[10:30:56.591] 1. multicore:
[10:30:56.591]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:30:56.591]    - tweaked: FALSE
[10:30:56.591]    - call: plan(strategy)
[10:30:56.596] plan(): nbrOfWorkers() = 2
[10:30:56.587] MulticoreFuture:
[10:30:56.587] Label: ‘future_replicate-2’
[10:30:56.587] Expression:
[10:30:56.587] {
[10:30:56.587]     do.call(function(...) {
[10:30:56.587]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.587]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:56.587]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.587]             on.exit(options(oopts), add = TRUE)
[10:30:56.587]         }
[10:30:56.587]         {
[10:30:56.587]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:56.587]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.587]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.587]                   envir = globalenv(), inherits = FALSE)
[10:30:56.587]                 ...future.FUN(...future.X_jj, ...)
[10:30:56.587]             })
[10:30:56.587]         }
[10:30:56.587]     }, args = future.call.arguments)
[10:30:56.587] }
[10:30:56.587] Lazy evaluation: FALSE
[10:30:56.587] Asynchronous evaluation: TRUE
[10:30:56.587] Local evaluation: TRUE
[10:30:56.587] Environment: R_GlobalEnv
[10:30:56.587] Capture standard output: TRUE
[10:30:56.587] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:30:56.587] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:30:56.587] Packages: <none>
[10:30:56.587] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:30:56.587] Resolved: TRUE
[10:30:56.587] Value: <not collected>
[10:30:56.587] Conditions captured: <none>
[10:30:56.587] Early signaling: FALSE
[10:30:56.587] Owner process: 7cdcbd4b-6c47-ca9a-dc3f-e18236d134b8
[10:30:56.587] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:56.597] Chunk #2 of 2 ... DONE
[10:30:56.597] Launching 2 futures (chunks) ... DONE
[10:30:56.597] Resolving 2 futures (chunks) ...
[10:30:56.598] resolve() on list ...
[10:30:56.598]  recursive: 0
[10:30:56.598]  length: 2
[10:30:56.598] 
[10:30:56.598] Future #1
[10:30:56.598] result() for MulticoreFuture ...
[10:30:56.599] result() for MulticoreFuture ...
[10:30:56.600] result() for MulticoreFuture ... done
[10:30:56.600] result() for MulticoreFuture ... done
[10:30:56.600] result() for MulticoreFuture ...
[10:30:56.600] result() for MulticoreFuture ... done
[10:30:56.600] signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:30:56.600] - nx: 2
[10:30:56.600] - relay: TRUE
[10:30:56.601] - stdout: TRUE
[10:30:56.601] - signal: TRUE
[10:30:56.601] - resignal: FALSE
[10:30:56.601] - force: TRUE
[10:30:56.601] - relayed: [n=2] FALSE, FALSE
[10:30:56.601] - queued futures: [n=2] FALSE, FALSE
[10:30:56.602]  - until=1
[10:30:56.602]  - relaying element #1
[10:30:56.602] result() for MulticoreFuture ...
[10:30:56.602] result() for MulticoreFuture ... done
[10:30:56.602] result() for MulticoreFuture ...
[10:30:56.602] result() for MulticoreFuture ... done
[10:30:56.603] result() for MulticoreFuture ...
[10:30:56.603] result() for MulticoreFuture ... done
[10:30:56.603] result() for MulticoreFuture ...
[10:30:56.603] result() for MulticoreFuture ... done
[10:30:56.603] - relayed: [n=2] TRUE, FALSE
[10:30:56.603] - queued futures: [n=2] TRUE, FALSE
[10:30:56.603] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:30:56.604]  length: 1 (resolved future 1)
[10:30:56.604] Future #2
[10:30:56.604] result() for MulticoreFuture ...
[10:30:56.605] result() for MulticoreFuture ...
[10:30:56.605] result() for MulticoreFuture ... done
[10:30:56.605] result() for MulticoreFuture ... done
[10:30:56.605] result() for MulticoreFuture ...
[10:30:56.605] result() for MulticoreFuture ... done
[10:30:56.606] signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:30:56.606] - nx: 2
[10:30:56.606] - relay: TRUE
[10:30:56.606] - stdout: TRUE
[10:30:56.606] - signal: TRUE
[10:30:56.606] - resignal: FALSE
[10:30:56.606] - force: TRUE
[10:30:56.606] - relayed: [n=2] TRUE, FALSE
[10:30:56.606] - queued futures: [n=2] TRUE, FALSE
[10:30:56.607]  - until=2
[10:30:56.607]  - relaying element #2
[10:30:56.607] result() for MulticoreFuture ...
[10:30:56.607] result() for MulticoreFuture ... done
[10:30:56.607] result() for MulticoreFuture ...
[10:30:56.607] result() for MulticoreFuture ... done
[10:30:56.607] result() for MulticoreFuture ...
[10:30:56.608] result() for MulticoreFuture ... done
[10:30:56.608] result() for MulticoreFuture ...
[10:30:56.608] result() for MulticoreFuture ... done
[10:30:56.608] - relayed: [n=2] TRUE, TRUE
[10:30:56.608] - queued futures: [n=2] TRUE, TRUE
[10:30:56.608] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:30:56.608]  length: 0 (resolved future 2)
[10:30:56.608] Relaying remaining futures
[10:30:56.608] signalConditionsASAP(NULL, pos=0) ...
[10:30:56.609] - nx: 2
[10:30:56.609] - relay: TRUE
[10:30:56.609] - stdout: TRUE
[10:30:56.609] - signal: TRUE
[10:30:56.609] - resignal: FALSE
[10:30:56.609] - force: TRUE
[10:30:56.609] - relayed: [n=2] TRUE, TRUE
[10:30:56.609] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:30:56.610] - relayed: [n=2] TRUE, TRUE
[10:30:56.610] - queued futures: [n=2] TRUE, TRUE
[10:30:56.610] signalConditionsASAP(NULL, pos=0) ... done
[10:30:56.610] resolve() on list ... DONE
[10:30:56.610] result() for MulticoreFuture ...
[10:30:56.610] result() for MulticoreFuture ... done
[10:30:56.610] result() for MulticoreFuture ...
[10:30:56.610] result() for MulticoreFuture ... done
[10:30:56.611] result() for MulticoreFuture ...
[10:30:56.611] result() for MulticoreFuture ... done
[10:30:56.611] result() for MulticoreFuture ...
[10:30:56.611] result() for MulticoreFuture ... done
[10:30:56.611]  - Number of value chunks collected: 2
[10:30:56.611] Resolving 2 futures (chunks) ... DONE
[10:30:56.611] Reducing values from 2 chunks ...
[10:30:56.611]  - Number of values collected after concatenation: 5
[10:30:56.611]  - Number of values expected: 5
[10:30:56.612] Reducing values from 2 chunks ... DONE
[10:30:56.612] future_lapply() ... DONE
[10:30:56.612] future_lapply() ...
[10:30:56.613] Generating random seeds ...
[10:30:56.613] Generating random seed streams for 5 elements ...
[10:30:56.613] Generating random seed streams for 5 elements ... DONE
[10:30:56.613] Generating random seeds ... DONE
[10:30:56.613] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:30:56.619] Number of chunks: 2
[10:30:56.619] getGlobalsAndPackagesXApply() ...
[10:30:56.619]  - future.globals: TRUE
[10:30:56.619] getGlobalsAndPackages() ...
[10:30:56.619] Searching for globals...
[10:30:56.620] - globals found: [2] ‘FUN’, ‘sample’
[10:30:56.621] Searching for globals ... DONE
[10:30:56.621] Resolving globals: FALSE
[10:30:56.621] The total size of the 1 globals is 616 bytes (616 bytes)
[10:30:56.622] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[10:30:56.622] - globals: [1] ‘FUN’
[10:30:56.622] 
[10:30:56.622] getGlobalsAndPackages() ... DONE
[10:30:56.622]  - globals found/used: [n=1] ‘FUN’
[10:30:56.622]  - needed namespaces: [n=0] 
[10:30:56.622] Finding globals ... DONE
[10:30:56.622]  - use_args: TRUE
[10:30:56.623]  - Getting '...' globals ...
[10:30:56.623] resolve() on list ...
[10:30:56.623]  recursive: 0
[10:30:56.623]  length: 1
[10:30:56.623]  elements: ‘...’
[10:30:56.623]  length: 0 (resolved future 1)
[10:30:56.624] resolve() on list ... DONE
[10:30:56.624]    - '...' content: [n=0] 
[10:30:56.624] List of 1
[10:30:56.624]  $ ...: list()
[10:30:56.624]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:56.624]  - attr(*, "where")=List of 1
[10:30:56.624]   ..$ ...:<environment: 0x55aba2d2b1b0> 
[10:30:56.624]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:56.624]  - attr(*, "resolved")= logi TRUE
[10:30:56.624]  - attr(*, "total_size")= num NA
[10:30:56.629]  - Getting '...' globals ... DONE
[10:30:56.629] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:30:56.629] List of 2
[10:30:56.629]  $ ...future.FUN:function (...)  
[10:30:56.629]  $ ...          : list()
[10:30:56.629]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:56.629]  - attr(*, "where")=List of 2
[10:30:56.629]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:30:56.629]   ..$ ...          :<environment: 0x55aba2d2b1b0> 
[10:30:56.629]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:56.629]  - attr(*, "resolved")= logi FALSE
[10:30:56.629]  - attr(*, "total_size")= num 616
[10:30:56.632] Packages to be attached in all futures: [n=0] 
[10:30:56.633] getGlobalsAndPackagesXApply() ... DONE
[10:30:56.633] Number of futures (= number of chunks): 2
[10:30:56.633] Launching 2 futures (chunks) ...
[10:30:56.633] Chunk #1 of 2 ...
[10:30:56.633]  - Finding globals in 'X' for chunk #1 ...
[10:30:56.633] getGlobalsAndPackages() ...
[10:30:56.633] Searching for globals...
[10:30:56.634] 
[10:30:56.634] Searching for globals ... DONE
[10:30:56.634] - globals: [0] <none>
[10:30:56.634] getGlobalsAndPackages() ... DONE
[10:30:56.634]    + additional globals found: [n=0] 
[10:30:56.634]    + additional namespaces needed: [n=0] 
[10:30:56.634]  - Finding globals in 'X' for chunk #1 ... DONE
[10:30:56.634]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:30:56.634]  - seeds: [2] <seeds>
[10:30:56.634]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.635] getGlobalsAndPackages() ...
[10:30:56.635] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.635] Resolving globals: FALSE
[10:30:56.635] Tweak future expression to call with '...' arguments ...
[10:30:56.635] {
[10:30:56.635]     do.call(function(...) {
[10:30:56.635]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.635]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:56.635]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.635]             on.exit(options(oopts), add = TRUE)
[10:30:56.635]         }
[10:30:56.635]         {
[10:30:56.635]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:56.635]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.635]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.635]                   envir = globalenv(), inherits = FALSE)
[10:30:56.635]                 ...future.FUN(...future.X_jj, ...)
[10:30:56.635]             })
[10:30:56.635]         }
[10:30:56.635]     }, args = future.call.arguments)
[10:30:56.635] }
[10:30:56.635] Tweak future expression to call with '...' arguments ... DONE
[10:30:56.636] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.636] 
[10:30:56.636] getGlobalsAndPackages() ... DONE
[10:30:56.636] run() for ‘Future’ ...
[10:30:56.636] - state: ‘created’
[10:30:56.636] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:30:56.641] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:56.641] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:30:56.641]   - Field: ‘label’
[10:30:56.641]   - Field: ‘local’
[10:30:56.641]   - Field: ‘owner’
[10:30:56.641]   - Field: ‘envir’
[10:30:56.641]   - Field: ‘workers’
[10:30:56.642]   - Field: ‘packages’
[10:30:56.642]   - Field: ‘gc’
[10:30:56.642]   - Field: ‘job’
[10:30:56.642]   - Field: ‘conditions’
[10:30:56.642]   - Field: ‘expr’
[10:30:56.642]   - Field: ‘uuid’
[10:30:56.642]   - Field: ‘seed’
[10:30:56.642]   - Field: ‘version’
[10:30:56.643]   - Field: ‘result’
[10:30:56.643]   - Field: ‘asynchronous’
[10:30:56.643]   - Field: ‘calls’
[10:30:56.643]   - Field: ‘globals’
[10:30:56.643]   - Field: ‘stdout’
[10:30:56.643]   - Field: ‘earlySignal’
[10:30:56.643]   - Field: ‘lazy’
[10:30:56.643]   - Field: ‘state’
[10:30:56.643] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:30:56.643] - Launch lazy future ...
[10:30:56.644] Packages needed by the future expression (n = 0): <none>
[10:30:56.644] Packages needed by future strategies (n = 0): <none>
[10:30:56.644] {
[10:30:56.644]     {
[10:30:56.644]         {
[10:30:56.644]             ...future.startTime <- base::Sys.time()
[10:30:56.644]             {
[10:30:56.644]                 {
[10:30:56.644]                   {
[10:30:56.644]                     {
[10:30:56.644]                       base::local({
[10:30:56.644]                         has_future <- base::requireNamespace("future", 
[10:30:56.644]                           quietly = TRUE)
[10:30:56.644]                         if (has_future) {
[10:30:56.644]                           ns <- base::getNamespace("future")
[10:30:56.644]                           version <- ns[[".package"]][["version"]]
[10:30:56.644]                           if (is.null(version)) 
[10:30:56.644]                             version <- utils::packageVersion("future")
[10:30:56.644]                         }
[10:30:56.644]                         else {
[10:30:56.644]                           version <- NULL
[10:30:56.644]                         }
[10:30:56.644]                         if (!has_future || version < "1.8.0") {
[10:30:56.644]                           info <- base::c(r_version = base::gsub("R version ", 
[10:30:56.644]                             "", base::R.version$version.string), 
[10:30:56.644]                             platform = base::sprintf("%s (%s-bit)", 
[10:30:56.644]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:30:56.644]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:30:56.644]                               "release", "version")], collapse = " "), 
[10:30:56.644]                             hostname = base::Sys.info()[["nodename"]])
[10:30:56.644]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:30:56.644]                             info)
[10:30:56.644]                           info <- base::paste(info, collapse = "; ")
[10:30:56.644]                           if (!has_future) {
[10:30:56.644]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:30:56.644]                               info)
[10:30:56.644]                           }
[10:30:56.644]                           else {
[10:30:56.644]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:30:56.644]                               info, version)
[10:30:56.644]                           }
[10:30:56.644]                           base::stop(msg)
[10:30:56.644]                         }
[10:30:56.644]                       })
[10:30:56.644]                     }
[10:30:56.644]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:30:56.644]                     base::options(mc.cores = 1L)
[10:30:56.644]                   }
[10:30:56.644]                   ...future.strategy.old <- future::plan("list")
[10:30:56.644]                   options(future.plan = NULL)
[10:30:56.644]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:30:56.644]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:30:56.644]                 }
[10:30:56.644]                 ...future.workdir <- getwd()
[10:30:56.644]             }
[10:30:56.644]             ...future.oldOptions <- base::as.list(base::.Options)
[10:30:56.644]             ...future.oldEnvVars <- base::Sys.getenv()
[10:30:56.644]         }
[10:30:56.644]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:30:56.644]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:30:56.644]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:30:56.644]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:30:56.644]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:30:56.644]             future.stdout.windows.reencode = NULL, width = 80L)
[10:30:56.644]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:30:56.644]             base::names(...future.oldOptions))
[10:30:56.644]     }
[10:30:56.644]     if (FALSE) {
[10:30:56.644]     }
[10:30:56.644]     else {
[10:30:56.644]         if (TRUE) {
[10:30:56.644]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:30:56.644]                 open = "w")
[10:30:56.644]         }
[10:30:56.644]         else {
[10:30:56.644]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:30:56.644]                 windows = "NUL", "/dev/null"), open = "w")
[10:30:56.644]         }
[10:30:56.644]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:30:56.644]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:30:56.644]             base::sink(type = "output", split = FALSE)
[10:30:56.644]             base::close(...future.stdout)
[10:30:56.644]         }, add = TRUE)
[10:30:56.644]     }
[10:30:56.644]     ...future.frame <- base::sys.nframe()
[10:30:56.644]     ...future.conditions <- base::list()
[10:30:56.644]     ...future.rng <- base::globalenv()$.Random.seed
[10:30:56.644]     if (FALSE) {
[10:30:56.644]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:30:56.644]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:30:56.644]     }
[10:30:56.644]     ...future.result <- base::tryCatch({
[10:30:56.644]         base::withCallingHandlers({
[10:30:56.644]             ...future.value <- base::withVisible(base::local({
[10:30:56.644]                 withCallingHandlers({
[10:30:56.644]                   {
[10:30:56.644]                     do.call(function(...) {
[10:30:56.644]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.644]                       if (!identical(...future.globals.maxSize.org, 
[10:30:56.644]                         ...future.globals.maxSize)) {
[10:30:56.644]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.644]                         on.exit(options(oopts), add = TRUE)
[10:30:56.644]                       }
[10:30:56.644]                       {
[10:30:56.644]                         lapply(seq_along(...future.elements_ii), 
[10:30:56.644]                           FUN = function(jj) {
[10:30:56.644]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.644]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.644]                               envir = globalenv(), inherits = FALSE)
[10:30:56.644]                             ...future.FUN(...future.X_jj, ...)
[10:30:56.644]                           })
[10:30:56.644]                       }
[10:30:56.644]                     }, args = future.call.arguments)
[10:30:56.644]                   }
[10:30:56.644]                 }, immediateCondition = function(cond) {
[10:30:56.644]                   save_rds <- function (object, pathname, ...) 
[10:30:56.644]                   {
[10:30:56.644]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:30:56.644]                     if (file_test("-f", pathname_tmp)) {
[10:30:56.644]                       fi_tmp <- file.info(pathname_tmp)
[10:30:56.644]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:30:56.644]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:30:56.644]                         fi_tmp[["mtime"]])
[10:30:56.644]                     }
[10:30:56.644]                     tryCatch({
[10:30:56.644]                       saveRDS(object, file = pathname_tmp, ...)
[10:30:56.644]                     }, error = function(ex) {
[10:30:56.644]                       msg <- conditionMessage(ex)
[10:30:56.644]                       fi_tmp <- file.info(pathname_tmp)
[10:30:56.644]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:30:56.644]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:30:56.644]                         fi_tmp[["mtime"]], msg)
[10:30:56.644]                       ex$message <- msg
[10:30:56.644]                       stop(ex)
[10:30:56.644]                     })
[10:30:56.644]                     stopifnot(file_test("-f", pathname_tmp))
[10:30:56.644]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:30:56.644]                     if (!res || file_test("-f", pathname_tmp)) {
[10:30:56.644]                       fi_tmp <- file.info(pathname_tmp)
[10:30:56.644]                       fi <- file.info(pathname)
[10:30:56.644]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:30:56.644]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:30:56.644]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:30:56.644]                         fi[["size"]], fi[["mtime"]])
[10:30:56.644]                       stop(msg)
[10:30:56.644]                     }
[10:30:56.644]                     invisible(pathname)
[10:30:56.644]                   }
[10:30:56.644]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:30:56.644]                     rootPath = tempdir()) 
[10:30:56.644]                   {
[10:30:56.644]                     obj <- list(time = Sys.time(), condition = cond)
[10:30:56.644]                     file <- tempfile(pattern = class(cond)[1], 
[10:30:56.644]                       tmpdir = path, fileext = ".rds")
[10:30:56.644]                     save_rds(obj, file)
[10:30:56.644]                   }
[10:30:56.644]                   saveImmediateCondition(cond, path = "/tmp/RtmpkDVBSn/.future/immediateConditions")
[10:30:56.644]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.644]                   {
[10:30:56.644]                     inherits <- base::inherits
[10:30:56.644]                     invokeRestart <- base::invokeRestart
[10:30:56.644]                     is.null <- base::is.null
[10:30:56.644]                     muffled <- FALSE
[10:30:56.644]                     if (inherits(cond, "message")) {
[10:30:56.644]                       muffled <- grepl(pattern, "muffleMessage")
[10:30:56.644]                       if (muffled) 
[10:30:56.644]                         invokeRestart("muffleMessage")
[10:30:56.644]                     }
[10:30:56.644]                     else if (inherits(cond, "warning")) {
[10:30:56.644]                       muffled <- grepl(pattern, "muffleWarning")
[10:30:56.644]                       if (muffled) 
[10:30:56.644]                         invokeRestart("muffleWarning")
[10:30:56.644]                     }
[10:30:56.644]                     else if (inherits(cond, "condition")) {
[10:30:56.644]                       if (!is.null(pattern)) {
[10:30:56.644]                         computeRestarts <- base::computeRestarts
[10:30:56.644]                         grepl <- base::grepl
[10:30:56.644]                         restarts <- computeRestarts(cond)
[10:30:56.644]                         for (restart in restarts) {
[10:30:56.644]                           name <- restart$name
[10:30:56.644]                           if (is.null(name)) 
[10:30:56.644]                             next
[10:30:56.644]                           if (!grepl(pattern, name)) 
[10:30:56.644]                             next
[10:30:56.644]                           invokeRestart(restart)
[10:30:56.644]                           muffled <- TRUE
[10:30:56.644]                           break
[10:30:56.644]                         }
[10:30:56.644]                       }
[10:30:56.644]                     }
[10:30:56.644]                     invisible(muffled)
[10:30:56.644]                   }
[10:30:56.644]                   muffleCondition(cond)
[10:30:56.644]                 })
[10:30:56.644]             }))
[10:30:56.644]             future::FutureResult(value = ...future.value$value, 
[10:30:56.644]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:56.644]                   ...future.rng), globalenv = if (FALSE) 
[10:30:56.644]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:30:56.644]                     ...future.globalenv.names))
[10:30:56.644]                 else NULL, started = ...future.startTime, version = "1.8")
[10:30:56.644]         }, condition = base::local({
[10:30:56.644]             c <- base::c
[10:30:56.644]             inherits <- base::inherits
[10:30:56.644]             invokeRestart <- base::invokeRestart
[10:30:56.644]             length <- base::length
[10:30:56.644]             list <- base::list
[10:30:56.644]             seq.int <- base::seq.int
[10:30:56.644]             signalCondition <- base::signalCondition
[10:30:56.644]             sys.calls <- base::sys.calls
[10:30:56.644]             `[[` <- base::`[[`
[10:30:56.644]             `+` <- base::`+`
[10:30:56.644]             `<<-` <- base::`<<-`
[10:30:56.644]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:30:56.644]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:30:56.644]                   3L)]
[10:30:56.644]             }
[10:30:56.644]             function(cond) {
[10:30:56.644]                 is_error <- inherits(cond, "error")
[10:30:56.644]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:30:56.644]                   NULL)
[10:30:56.644]                 if (is_error) {
[10:30:56.644]                   sessionInformation <- function() {
[10:30:56.644]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:30:56.644]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:30:56.644]                       search = base::search(), system = base::Sys.info())
[10:30:56.644]                   }
[10:30:56.644]                   ...future.conditions[[length(...future.conditions) + 
[10:30:56.644]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:30:56.644]                     cond$call), session = sessionInformation(), 
[10:30:56.644]                     timestamp = base::Sys.time(), signaled = 0L)
[10:30:56.644]                   signalCondition(cond)
[10:30:56.644]                 }
[10:30:56.644]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:30:56.644]                 "immediateCondition"))) {
[10:30:56.644]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:30:56.644]                   ...future.conditions[[length(...future.conditions) + 
[10:30:56.644]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:30:56.644]                   if (TRUE && !signal) {
[10:30:56.644]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.644]                     {
[10:30:56.644]                       inherits <- base::inherits
[10:30:56.644]                       invokeRestart <- base::invokeRestart
[10:30:56.644]                       is.null <- base::is.null
[10:30:56.644]                       muffled <- FALSE
[10:30:56.644]                       if (inherits(cond, "message")) {
[10:30:56.644]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:56.644]                         if (muffled) 
[10:30:56.644]                           invokeRestart("muffleMessage")
[10:30:56.644]                       }
[10:30:56.644]                       else if (inherits(cond, "warning")) {
[10:30:56.644]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:56.644]                         if (muffled) 
[10:30:56.644]                           invokeRestart("muffleWarning")
[10:30:56.644]                       }
[10:30:56.644]                       else if (inherits(cond, "condition")) {
[10:30:56.644]                         if (!is.null(pattern)) {
[10:30:56.644]                           computeRestarts <- base::computeRestarts
[10:30:56.644]                           grepl <- base::grepl
[10:30:56.644]                           restarts <- computeRestarts(cond)
[10:30:56.644]                           for (restart in restarts) {
[10:30:56.644]                             name <- restart$name
[10:30:56.644]                             if (is.null(name)) 
[10:30:56.644]                               next
[10:30:56.644]                             if (!grepl(pattern, name)) 
[10:30:56.644]                               next
[10:30:56.644]                             invokeRestart(restart)
[10:30:56.644]                             muffled <- TRUE
[10:30:56.644]                             break
[10:30:56.644]                           }
[10:30:56.644]                         }
[10:30:56.644]                       }
[10:30:56.644]                       invisible(muffled)
[10:30:56.644]                     }
[10:30:56.644]                     muffleCondition(cond, pattern = "^muffle")
[10:30:56.644]                   }
[10:30:56.644]                 }
[10:30:56.644]                 else {
[10:30:56.644]                   if (TRUE) {
[10:30:56.644]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.644]                     {
[10:30:56.644]                       inherits <- base::inherits
[10:30:56.644]                       invokeRestart <- base::invokeRestart
[10:30:56.644]                       is.null <- base::is.null
[10:30:56.644]                       muffled <- FALSE
[10:30:56.644]                       if (inherits(cond, "message")) {
[10:30:56.644]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:56.644]                         if (muffled) 
[10:30:56.644]                           invokeRestart("muffleMessage")
[10:30:56.644]                       }
[10:30:56.644]                       else if (inherits(cond, "warning")) {
[10:30:56.644]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:56.644]                         if (muffled) 
[10:30:56.644]                           invokeRestart("muffleWarning")
[10:30:56.644]                       }
[10:30:56.644]                       else if (inherits(cond, "condition")) {
[10:30:56.644]                         if (!is.null(pattern)) {
[10:30:56.644]                           computeRestarts <- base::computeRestarts
[10:30:56.644]                           grepl <- base::grepl
[10:30:56.644]                           restarts <- computeRestarts(cond)
[10:30:56.644]                           for (restart in restarts) {
[10:30:56.644]                             name <- restart$name
[10:30:56.644]                             if (is.null(name)) 
[10:30:56.644]                               next
[10:30:56.644]                             if (!grepl(pattern, name)) 
[10:30:56.644]                               next
[10:30:56.644]                             invokeRestart(restart)
[10:30:56.644]                             muffled <- TRUE
[10:30:56.644]                             break
[10:30:56.644]                           }
[10:30:56.644]                         }
[10:30:56.644]                       }
[10:30:56.644]                       invisible(muffled)
[10:30:56.644]                     }
[10:30:56.644]                     muffleCondition(cond, pattern = "^muffle")
[10:30:56.644]                   }
[10:30:56.644]                 }
[10:30:56.644]             }
[10:30:56.644]         }))
[10:30:56.644]     }, error = function(ex) {
[10:30:56.644]         base::structure(base::list(value = NULL, visible = NULL, 
[10:30:56.644]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:56.644]                 ...future.rng), started = ...future.startTime, 
[10:30:56.644]             finished = Sys.time(), session_uuid = NA_character_, 
[10:30:56.644]             version = "1.8"), class = "FutureResult")
[10:30:56.644]     }, finally = {
[10:30:56.644]         if (!identical(...future.workdir, getwd())) 
[10:30:56.644]             setwd(...future.workdir)
[10:30:56.644]         {
[10:30:56.644]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:30:56.644]                 ...future.oldOptions$nwarnings <- NULL
[10:30:56.644]             }
[10:30:56.644]             base::options(...future.oldOptions)
[10:30:56.644]             if (.Platform$OS.type == "windows") {
[10:30:56.644]                 old_names <- names(...future.oldEnvVars)
[10:30:56.644]                 envs <- base::Sys.getenv()
[10:30:56.644]                 names <- names(envs)
[10:30:56.644]                 common <- intersect(names, old_names)
[10:30:56.644]                 added <- setdiff(names, old_names)
[10:30:56.644]                 removed <- setdiff(old_names, names)
[10:30:56.644]                 changed <- common[...future.oldEnvVars[common] != 
[10:30:56.644]                   envs[common]]
[10:30:56.644]                 NAMES <- toupper(changed)
[10:30:56.644]                 args <- list()
[10:30:56.644]                 for (kk in seq_along(NAMES)) {
[10:30:56.644]                   name <- changed[[kk]]
[10:30:56.644]                   NAME <- NAMES[[kk]]
[10:30:56.644]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.644]                     next
[10:30:56.644]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:56.644]                 }
[10:30:56.644]                 NAMES <- toupper(added)
[10:30:56.644]                 for (kk in seq_along(NAMES)) {
[10:30:56.644]                   name <- added[[kk]]
[10:30:56.644]                   NAME <- NAMES[[kk]]
[10:30:56.644]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.644]                     next
[10:30:56.644]                   args[[name]] <- ""
[10:30:56.644]                 }
[10:30:56.644]                 NAMES <- toupper(removed)
[10:30:56.644]                 for (kk in seq_along(NAMES)) {
[10:30:56.644]                   name <- removed[[kk]]
[10:30:56.644]                   NAME <- NAMES[[kk]]
[10:30:56.644]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.644]                     next
[10:30:56.644]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:56.644]                 }
[10:30:56.644]                 if (length(args) > 0) 
[10:30:56.644]                   base::do.call(base::Sys.setenv, args = args)
[10:30:56.644]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:30:56.644]             }
[10:30:56.644]             else {
[10:30:56.644]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:30:56.644]             }
[10:30:56.644]             {
[10:30:56.644]                 if (base::length(...future.futureOptionsAdded) > 
[10:30:56.644]                   0L) {
[10:30:56.644]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:30:56.644]                   base::names(opts) <- ...future.futureOptionsAdded
[10:30:56.644]                   base::options(opts)
[10:30:56.644]                 }
[10:30:56.644]                 {
[10:30:56.644]                   {
[10:30:56.644]                     base::options(mc.cores = ...future.mc.cores.old)
[10:30:56.644]                     NULL
[10:30:56.644]                   }
[10:30:56.644]                   options(future.plan = NULL)
[10:30:56.644]                   if (is.na(NA_character_)) 
[10:30:56.644]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:30:56.644]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:30:56.644]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:30:56.644]                     .init = FALSE)
[10:30:56.644]                 }
[10:30:56.644]             }
[10:30:56.644]         }
[10:30:56.644]     })
[10:30:56.644]     if (TRUE) {
[10:30:56.644]         base::sink(type = "output", split = FALSE)
[10:30:56.644]         if (TRUE) {
[10:30:56.644]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:30:56.644]         }
[10:30:56.644]         else {
[10:30:56.644]             ...future.result["stdout"] <- base::list(NULL)
[10:30:56.644]         }
[10:30:56.644]         base::close(...future.stdout)
[10:30:56.644]         ...future.stdout <- NULL
[10:30:56.644]     }
[10:30:56.644]     ...future.result$conditions <- ...future.conditions
[10:30:56.644]     ...future.result$finished <- base::Sys.time()
[10:30:56.644]     ...future.result
[10:30:56.644] }
[10:30:56.647] assign_globals() ...
[10:30:56.647] List of 5
[10:30:56.647]  $ ...future.FUN            :function (...)  
[10:30:56.647]  $ future.call.arguments    : list()
[10:30:56.647]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:56.647]  $ ...future.elements_ii    :List of 2
[10:30:56.647]   ..$ : int 0
[10:30:56.647]   ..$ : int 0
[10:30:56.647]  $ ...future.seeds_ii       :List of 2
[10:30:56.647]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[10:30:56.647]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[10:30:56.647]  $ ...future.globals.maxSize: NULL
[10:30:56.647]  - attr(*, "where")=List of 5
[10:30:56.647]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:30:56.647]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:30:56.647]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:30:56.647]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:30:56.647]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:30:56.647]  - attr(*, "resolved")= logi FALSE
[10:30:56.647]  - attr(*, "total_size")= num 616
[10:30:56.647]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:56.647]  - attr(*, "already-done")= logi TRUE
[10:30:56.653] - reassign environment for ‘...future.FUN’
[10:30:56.653] - copied ‘...future.FUN’ to environment
[10:30:56.653] - copied ‘future.call.arguments’ to environment
[10:30:56.653] - copied ‘...future.elements_ii’ to environment
[10:30:56.653] - copied ‘...future.seeds_ii’ to environment
[10:30:56.654] - copied ‘...future.globals.maxSize’ to environment
[10:30:56.654] assign_globals() ... done
[10:30:56.654] requestCore(): workers = 2
[10:30:56.656] MulticoreFuture started
[10:30:56.656] - Launch lazy future ... done
[10:30:56.657] run() for ‘MulticoreFuture’ ... done
[10:30:56.657] Created future:
[10:30:56.657] plan(): Setting new future strategy stack:
[10:30:56.658] List of future strategies:
[10:30:56.658] 1. sequential:
[10:30:56.658]    - args: function (..., envir = parent.frame())
[10:30:56.658]    - tweaked: FALSE
[10:30:56.658]    - call: NULL
[10:30:56.659] plan(): nbrOfWorkers() = 1
[10:30:56.661] plan(): Setting new future strategy stack:
[10:30:56.661] List of future strategies:
[10:30:56.661] 1. multicore:
[10:30:56.661]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:30:56.661]    - tweaked: FALSE
[10:30:56.661]    - call: plan(strategy)
[10:30:56.657] MulticoreFuture:
[10:30:56.657] Label: ‘future_replicate-1’
[10:30:56.657] Expression:
[10:30:56.657] {
[10:30:56.657]     do.call(function(...) {
[10:30:56.657]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.657]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:56.657]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.657]             on.exit(options(oopts), add = TRUE)
[10:30:56.657]         }
[10:30:56.657]         {
[10:30:56.657]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:56.657]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.657]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.657]                   envir = globalenv(), inherits = FALSE)
[10:30:56.657]                 ...future.FUN(...future.X_jj, ...)
[10:30:56.657]             })
[10:30:56.657]         }
[10:30:56.657]     }, args = future.call.arguments)
[10:30:56.657] }
[10:30:56.657] Lazy evaluation: FALSE
[10:30:56.657] Asynchronous evaluation: TRUE
[10:30:56.657] Local evaluation: TRUE
[10:30:56.657] Environment: R_GlobalEnv
[10:30:56.657] Capture standard output: TRUE
[10:30:56.657] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:30:56.657] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:30:56.657] Packages: <none>
[10:30:56.657] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:30:56.657] Resolved: FALSE
[10:30:56.657] Value: <not collected>
[10:30:56.657] Conditions captured: <none>
[10:30:56.657] Early signaling: FALSE
[10:30:56.657] Owner process: 7cdcbd4b-6c47-ca9a-dc3f-e18236d134b8
[10:30:56.657] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:56.670] Chunk #1 of 2 ... DONE
[10:30:56.671] Chunk #2 of 2 ...
[10:30:56.671]  - Finding globals in 'X' for chunk #2 ...
[10:30:56.671] getGlobalsAndPackages() ...
[10:30:56.671] Searching for globals...
[10:30:56.672] plan(): nbrOfWorkers() = 2
[10:30:56.674] 
[10:30:56.674] Searching for globals ... DONE
[10:30:56.675] - globals: [0] <none>
[10:30:56.675] getGlobalsAndPackages() ... DONE
[10:30:56.675]    + additional globals found: [n=0] 
[10:30:56.675]    + additional namespaces needed: [n=0] 
[10:30:56.675]  - Finding globals in 'X' for chunk #2 ... DONE
[10:30:56.676]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:30:56.676]  - seeds: [3] <seeds>
[10:30:56.676]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.677] getGlobalsAndPackages() ...
[10:30:56.677] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.677] Resolving globals: FALSE
[10:30:56.678] Tweak future expression to call with '...' arguments ...
[10:30:56.678] {
[10:30:56.678]     do.call(function(...) {
[10:30:56.678]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.678]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:56.678]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.678]             on.exit(options(oopts), add = TRUE)
[10:30:56.678]         }
[10:30:56.678]         {
[10:30:56.678]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:56.678]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.678]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.678]                   envir = globalenv(), inherits = FALSE)
[10:30:56.678]                 ...future.FUN(...future.X_jj, ...)
[10:30:56.678]             })
[10:30:56.678]         }
[10:30:56.678]     }, args = future.call.arguments)
[10:30:56.678] }
[10:30:56.679] Tweak future expression to call with '...' arguments ... DONE
[10:30:56.679] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.680] 
[10:30:56.680] getGlobalsAndPackages() ... DONE
[10:30:56.680] run() for ‘Future’ ...
[10:30:56.681] - state: ‘created’
[10:30:56.681] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:30:56.686] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:56.686] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:30:56.686]   - Field: ‘label’
[10:30:56.686]   - Field: ‘local’
[10:30:56.686]   - Field: ‘owner’
[10:30:56.686]   - Field: ‘envir’
[10:30:56.687]   - Field: ‘workers’
[10:30:56.687]   - Field: ‘packages’
[10:30:56.687]   - Field: ‘gc’
[10:30:56.687]   - Field: ‘job’
[10:30:56.687]   - Field: ‘conditions’
[10:30:56.687]   - Field: ‘expr’
[10:30:56.688]   - Field: ‘uuid’
[10:30:56.688]   - Field: ‘seed’
[10:30:56.688]   - Field: ‘version’
[10:30:56.688]   - Field: ‘result’
[10:30:56.688]   - Field: ‘asynchronous’
[10:30:56.688]   - Field: ‘calls’
[10:30:56.688]   - Field: ‘globals’
[10:30:56.688]   - Field: ‘stdout’
[10:30:56.689]   - Field: ‘earlySignal’
[10:30:56.689]   - Field: ‘lazy’
[10:30:56.689]   - Field: ‘state’
[10:30:56.689] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:30:56.689] - Launch lazy future ...
[10:30:56.690] Packages needed by the future expression (n = 0): <none>
[10:30:56.690] Packages needed by future strategies (n = 0): <none>
[10:30:56.691] {
[10:30:56.691]     {
[10:30:56.691]         {
[10:30:56.691]             ...future.startTime <- base::Sys.time()
[10:30:56.691]             {
[10:30:56.691]                 {
[10:30:56.691]                   {
[10:30:56.691]                     {
[10:30:56.691]                       base::local({
[10:30:56.691]                         has_future <- base::requireNamespace("future", 
[10:30:56.691]                           quietly = TRUE)
[10:30:56.691]                         if (has_future) {
[10:30:56.691]                           ns <- base::getNamespace("future")
[10:30:56.691]                           version <- ns[[".package"]][["version"]]
[10:30:56.691]                           if (is.null(version)) 
[10:30:56.691]                             version <- utils::packageVersion("future")
[10:30:56.691]                         }
[10:30:56.691]                         else {
[10:30:56.691]                           version <- NULL
[10:30:56.691]                         }
[10:30:56.691]                         if (!has_future || version < "1.8.0") {
[10:30:56.691]                           info <- base::c(r_version = base::gsub("R version ", 
[10:30:56.691]                             "", base::R.version$version.string), 
[10:30:56.691]                             platform = base::sprintf("%s (%s-bit)", 
[10:30:56.691]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:30:56.691]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:30:56.691]                               "release", "version")], collapse = " "), 
[10:30:56.691]                             hostname = base::Sys.info()[["nodename"]])
[10:30:56.691]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:30:56.691]                             info)
[10:30:56.691]                           info <- base::paste(info, collapse = "; ")
[10:30:56.691]                           if (!has_future) {
[10:30:56.691]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:30:56.691]                               info)
[10:30:56.691]                           }
[10:30:56.691]                           else {
[10:30:56.691]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:30:56.691]                               info, version)
[10:30:56.691]                           }
[10:30:56.691]                           base::stop(msg)
[10:30:56.691]                         }
[10:30:56.691]                       })
[10:30:56.691]                     }
[10:30:56.691]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:30:56.691]                     base::options(mc.cores = 1L)
[10:30:56.691]                   }
[10:30:56.691]                   ...future.strategy.old <- future::plan("list")
[10:30:56.691]                   options(future.plan = NULL)
[10:30:56.691]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:30:56.691]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:30:56.691]                 }
[10:30:56.691]                 ...future.workdir <- getwd()
[10:30:56.691]             }
[10:30:56.691]             ...future.oldOptions <- base::as.list(base::.Options)
[10:30:56.691]             ...future.oldEnvVars <- base::Sys.getenv()
[10:30:56.691]         }
[10:30:56.691]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:30:56.691]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:30:56.691]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:30:56.691]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:30:56.691]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:30:56.691]             future.stdout.windows.reencode = NULL, width = 80L)
[10:30:56.691]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:30:56.691]             base::names(...future.oldOptions))
[10:30:56.691]     }
[10:30:56.691]     if (FALSE) {
[10:30:56.691]     }
[10:30:56.691]     else {
[10:30:56.691]         if (TRUE) {
[10:30:56.691]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:30:56.691]                 open = "w")
[10:30:56.691]         }
[10:30:56.691]         else {
[10:30:56.691]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:30:56.691]                 windows = "NUL", "/dev/null"), open = "w")
[10:30:56.691]         }
[10:30:56.691]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:30:56.691]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:30:56.691]             base::sink(type = "output", split = FALSE)
[10:30:56.691]             base::close(...future.stdout)
[10:30:56.691]         }, add = TRUE)
[10:30:56.691]     }
[10:30:56.691]     ...future.frame <- base::sys.nframe()
[10:30:56.691]     ...future.conditions <- base::list()
[10:30:56.691]     ...future.rng <- base::globalenv()$.Random.seed
[10:30:56.691]     if (FALSE) {
[10:30:56.691]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:30:56.691]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:30:56.691]     }
[10:30:56.691]     ...future.result <- base::tryCatch({
[10:30:56.691]         base::withCallingHandlers({
[10:30:56.691]             ...future.value <- base::withVisible(base::local({
[10:30:56.691]                 withCallingHandlers({
[10:30:56.691]                   {
[10:30:56.691]                     do.call(function(...) {
[10:30:56.691]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.691]                       if (!identical(...future.globals.maxSize.org, 
[10:30:56.691]                         ...future.globals.maxSize)) {
[10:30:56.691]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.691]                         on.exit(options(oopts), add = TRUE)
[10:30:56.691]                       }
[10:30:56.691]                       {
[10:30:56.691]                         lapply(seq_along(...future.elements_ii), 
[10:30:56.691]                           FUN = function(jj) {
[10:30:56.691]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.691]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.691]                               envir = globalenv(), inherits = FALSE)
[10:30:56.691]                             ...future.FUN(...future.X_jj, ...)
[10:30:56.691]                           })
[10:30:56.691]                       }
[10:30:56.691]                     }, args = future.call.arguments)
[10:30:56.691]                   }
[10:30:56.691]                 }, immediateCondition = function(cond) {
[10:30:56.691]                   save_rds <- function (object, pathname, ...) 
[10:30:56.691]                   {
[10:30:56.691]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:30:56.691]                     if (file_test("-f", pathname_tmp)) {
[10:30:56.691]                       fi_tmp <- file.info(pathname_tmp)
[10:30:56.691]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:30:56.691]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:30:56.691]                         fi_tmp[["mtime"]])
[10:30:56.691]                     }
[10:30:56.691]                     tryCatch({
[10:30:56.691]                       saveRDS(object, file = pathname_tmp, ...)
[10:30:56.691]                     }, error = function(ex) {
[10:30:56.691]                       msg <- conditionMessage(ex)
[10:30:56.691]                       fi_tmp <- file.info(pathname_tmp)
[10:30:56.691]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:30:56.691]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:30:56.691]                         fi_tmp[["mtime"]], msg)
[10:30:56.691]                       ex$message <- msg
[10:30:56.691]                       stop(ex)
[10:30:56.691]                     })
[10:30:56.691]                     stopifnot(file_test("-f", pathname_tmp))
[10:30:56.691]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:30:56.691]                     if (!res || file_test("-f", pathname_tmp)) {
[10:30:56.691]                       fi_tmp <- file.info(pathname_tmp)
[10:30:56.691]                       fi <- file.info(pathname)
[10:30:56.691]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:30:56.691]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:30:56.691]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:30:56.691]                         fi[["size"]], fi[["mtime"]])
[10:30:56.691]                       stop(msg)
[10:30:56.691]                     }
[10:30:56.691]                     invisible(pathname)
[10:30:56.691]                   }
[10:30:56.691]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:30:56.691]                     rootPath = tempdir()) 
[10:30:56.691]                   {
[10:30:56.691]                     obj <- list(time = Sys.time(), condition = cond)
[10:30:56.691]                     file <- tempfile(pattern = class(cond)[1], 
[10:30:56.691]                       tmpdir = path, fileext = ".rds")
[10:30:56.691]                     save_rds(obj, file)
[10:30:56.691]                   }
[10:30:56.691]                   saveImmediateCondition(cond, path = "/tmp/RtmpkDVBSn/.future/immediateConditions")
[10:30:56.691]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.691]                   {
[10:30:56.691]                     inherits <- base::inherits
[10:30:56.691]                     invokeRestart <- base::invokeRestart
[10:30:56.691]                     is.null <- base::is.null
[10:30:56.691]                     muffled <- FALSE
[10:30:56.691]                     if (inherits(cond, "message")) {
[10:30:56.691]                       muffled <- grepl(pattern, "muffleMessage")
[10:30:56.691]                       if (muffled) 
[10:30:56.691]                         invokeRestart("muffleMessage")
[10:30:56.691]                     }
[10:30:56.691]                     else if (inherits(cond, "warning")) {
[10:30:56.691]                       muffled <- grepl(pattern, "muffleWarning")
[10:30:56.691]                       if (muffled) 
[10:30:56.691]                         invokeRestart("muffleWarning")
[10:30:56.691]                     }
[10:30:56.691]                     else if (inherits(cond, "condition")) {
[10:30:56.691]                       if (!is.null(pattern)) {
[10:30:56.691]                         computeRestarts <- base::computeRestarts
[10:30:56.691]                         grepl <- base::grepl
[10:30:56.691]                         restarts <- computeRestarts(cond)
[10:30:56.691]                         for (restart in restarts) {
[10:30:56.691]                           name <- restart$name
[10:30:56.691]                           if (is.null(name)) 
[10:30:56.691]                             next
[10:30:56.691]                           if (!grepl(pattern, name)) 
[10:30:56.691]                             next
[10:30:56.691]                           invokeRestart(restart)
[10:30:56.691]                           muffled <- TRUE
[10:30:56.691]                           break
[10:30:56.691]                         }
[10:30:56.691]                       }
[10:30:56.691]                     }
[10:30:56.691]                     invisible(muffled)
[10:30:56.691]                   }
[10:30:56.691]                   muffleCondition(cond)
[10:30:56.691]                 })
[10:30:56.691]             }))
[10:30:56.691]             future::FutureResult(value = ...future.value$value, 
[10:30:56.691]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:56.691]                   ...future.rng), globalenv = if (FALSE) 
[10:30:56.691]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:30:56.691]                     ...future.globalenv.names))
[10:30:56.691]                 else NULL, started = ...future.startTime, version = "1.8")
[10:30:56.691]         }, condition = base::local({
[10:30:56.691]             c <- base::c
[10:30:56.691]             inherits <- base::inherits
[10:30:56.691]             invokeRestart <- base::invokeRestart
[10:30:56.691]             length <- base::length
[10:30:56.691]             list <- base::list
[10:30:56.691]             seq.int <- base::seq.int
[10:30:56.691]             signalCondition <- base::signalCondition
[10:30:56.691]             sys.calls <- base::sys.calls
[10:30:56.691]             `[[` <- base::`[[`
[10:30:56.691]             `+` <- base::`+`
[10:30:56.691]             `<<-` <- base::`<<-`
[10:30:56.691]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:30:56.691]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:30:56.691]                   3L)]
[10:30:56.691]             }
[10:30:56.691]             function(cond) {
[10:30:56.691]                 is_error <- inherits(cond, "error")
[10:30:56.691]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:30:56.691]                   NULL)
[10:30:56.691]                 if (is_error) {
[10:30:56.691]                   sessionInformation <- function() {
[10:30:56.691]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:30:56.691]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:30:56.691]                       search = base::search(), system = base::Sys.info())
[10:30:56.691]                   }
[10:30:56.691]                   ...future.conditions[[length(...future.conditions) + 
[10:30:56.691]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:30:56.691]                     cond$call), session = sessionInformation(), 
[10:30:56.691]                     timestamp = base::Sys.time(), signaled = 0L)
[10:30:56.691]                   signalCondition(cond)
[10:30:56.691]                 }
[10:30:56.691]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:30:56.691]                 "immediateCondition"))) {
[10:30:56.691]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:30:56.691]                   ...future.conditions[[length(...future.conditions) + 
[10:30:56.691]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:30:56.691]                   if (TRUE && !signal) {
[10:30:56.691]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.691]                     {
[10:30:56.691]                       inherits <- base::inherits
[10:30:56.691]                       invokeRestart <- base::invokeRestart
[10:30:56.691]                       is.null <- base::is.null
[10:30:56.691]                       muffled <- FALSE
[10:30:56.691]                       if (inherits(cond, "message")) {
[10:30:56.691]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:56.691]                         if (muffled) 
[10:30:56.691]                           invokeRestart("muffleMessage")
[10:30:56.691]                       }
[10:30:56.691]                       else if (inherits(cond, "warning")) {
[10:30:56.691]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:56.691]                         if (muffled) 
[10:30:56.691]                           invokeRestart("muffleWarning")
[10:30:56.691]                       }
[10:30:56.691]                       else if (inherits(cond, "condition")) {
[10:30:56.691]                         if (!is.null(pattern)) {
[10:30:56.691]                           computeRestarts <- base::computeRestarts
[10:30:56.691]                           grepl <- base::grepl
[10:30:56.691]                           restarts <- computeRestarts(cond)
[10:30:56.691]                           for (restart in restarts) {
[10:30:56.691]                             name <- restart$name
[10:30:56.691]                             if (is.null(name)) 
[10:30:56.691]                               next
[10:30:56.691]                             if (!grepl(pattern, name)) 
[10:30:56.691]                               next
[10:30:56.691]                             invokeRestart(restart)
[10:30:56.691]                             muffled <- TRUE
[10:30:56.691]                             break
[10:30:56.691]                           }
[10:30:56.691]                         }
[10:30:56.691]                       }
[10:30:56.691]                       invisible(muffled)
[10:30:56.691]                     }
[10:30:56.691]                     muffleCondition(cond, pattern = "^muffle")
[10:30:56.691]                   }
[10:30:56.691]                 }
[10:30:56.691]                 else {
[10:30:56.691]                   if (TRUE) {
[10:30:56.691]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.691]                     {
[10:30:56.691]                       inherits <- base::inherits
[10:30:56.691]                       invokeRestart <- base::invokeRestart
[10:30:56.691]                       is.null <- base::is.null
[10:30:56.691]                       muffled <- FALSE
[10:30:56.691]                       if (inherits(cond, "message")) {
[10:30:56.691]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:56.691]                         if (muffled) 
[10:30:56.691]                           invokeRestart("muffleMessage")
[10:30:56.691]                       }
[10:30:56.691]                       else if (inherits(cond, "warning")) {
[10:30:56.691]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:56.691]                         if (muffled) 
[10:30:56.691]                           invokeRestart("muffleWarning")
[10:30:56.691]                       }
[10:30:56.691]                       else if (inherits(cond, "condition")) {
[10:30:56.691]                         if (!is.null(pattern)) {
[10:30:56.691]                           computeRestarts <- base::computeRestarts
[10:30:56.691]                           grepl <- base::grepl
[10:30:56.691]                           restarts <- computeRestarts(cond)
[10:30:56.691]                           for (restart in restarts) {
[10:30:56.691]                             name <- restart$name
[10:30:56.691]                             if (is.null(name)) 
[10:30:56.691]                               next
[10:30:56.691]                             if (!grepl(pattern, name)) 
[10:30:56.691]                               next
[10:30:56.691]                             invokeRestart(restart)
[10:30:56.691]                             muffled <- TRUE
[10:30:56.691]                             break
[10:30:56.691]                           }
[10:30:56.691]                         }
[10:30:56.691]                       }
[10:30:56.691]                       invisible(muffled)
[10:30:56.691]                     }
[10:30:56.691]                     muffleCondition(cond, pattern = "^muffle")
[10:30:56.691]                   }
[10:30:56.691]                 }
[10:30:56.691]             }
[10:30:56.691]         }))
[10:30:56.691]     }, error = function(ex) {
[10:30:56.691]         base::structure(base::list(value = NULL, visible = NULL, 
[10:30:56.691]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:56.691]                 ...future.rng), started = ...future.startTime, 
[10:30:56.691]             finished = Sys.time(), session_uuid = NA_character_, 
[10:30:56.691]             version = "1.8"), class = "FutureResult")
[10:30:56.691]     }, finally = {
[10:30:56.691]         if (!identical(...future.workdir, getwd())) 
[10:30:56.691]             setwd(...future.workdir)
[10:30:56.691]         {
[10:30:56.691]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:30:56.691]                 ...future.oldOptions$nwarnings <- NULL
[10:30:56.691]             }
[10:30:56.691]             base::options(...future.oldOptions)
[10:30:56.691]             if (.Platform$OS.type == "windows") {
[10:30:56.691]                 old_names <- names(...future.oldEnvVars)
[10:30:56.691]                 envs <- base::Sys.getenv()
[10:30:56.691]                 names <- names(envs)
[10:30:56.691]                 common <- intersect(names, old_names)
[10:30:56.691]                 added <- setdiff(names, old_names)
[10:30:56.691]                 removed <- setdiff(old_names, names)
[10:30:56.691]                 changed <- common[...future.oldEnvVars[common] != 
[10:30:56.691]                   envs[common]]
[10:30:56.691]                 NAMES <- toupper(changed)
[10:30:56.691]                 args <- list()
[10:30:56.691]                 for (kk in seq_along(NAMES)) {
[10:30:56.691]                   name <- changed[[kk]]
[10:30:56.691]                   NAME <- NAMES[[kk]]
[10:30:56.691]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.691]                     next
[10:30:56.691]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:56.691]                 }
[10:30:56.691]                 NAMES <- toupper(added)
[10:30:56.691]                 for (kk in seq_along(NAMES)) {
[10:30:56.691]                   name <- added[[kk]]
[10:30:56.691]                   NAME <- NAMES[[kk]]
[10:30:56.691]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.691]                     next
[10:30:56.691]                   args[[name]] <- ""
[10:30:56.691]                 }
[10:30:56.691]                 NAMES <- toupper(removed)
[10:30:56.691]                 for (kk in seq_along(NAMES)) {
[10:30:56.691]                   name <- removed[[kk]]
[10:30:56.691]                   NAME <- NAMES[[kk]]
[10:30:56.691]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.691]                     next
[10:30:56.691]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:56.691]                 }
[10:30:56.691]                 if (length(args) > 0) 
[10:30:56.691]                   base::do.call(base::Sys.setenv, args = args)
[10:30:56.691]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:30:56.691]             }
[10:30:56.691]             else {
[10:30:56.691]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:30:56.691]             }
[10:30:56.691]             {
[10:30:56.691]                 if (base::length(...future.futureOptionsAdded) > 
[10:30:56.691]                   0L) {
[10:30:56.691]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:30:56.691]                   base::names(opts) <- ...future.futureOptionsAdded
[10:30:56.691]                   base::options(opts)
[10:30:56.691]                 }
[10:30:56.691]                 {
[10:30:56.691]                   {
[10:30:56.691]                     base::options(mc.cores = ...future.mc.cores.old)
[10:30:56.691]                     NULL
[10:30:56.691]                   }
[10:30:56.691]                   options(future.plan = NULL)
[10:30:56.691]                   if (is.na(NA_character_)) 
[10:30:56.691]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:30:56.691]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:30:56.691]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:30:56.691]                     .init = FALSE)
[10:30:56.691]                 }
[10:30:56.691]             }
[10:30:56.691]         }
[10:30:56.691]     })
[10:30:56.691]     if (TRUE) {
[10:30:56.691]         base::sink(type = "output", split = FALSE)
[10:30:56.691]         if (TRUE) {
[10:30:56.691]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:30:56.691]         }
[10:30:56.691]         else {
[10:30:56.691]             ...future.result["stdout"] <- base::list(NULL)
[10:30:56.691]         }
[10:30:56.691]         base::close(...future.stdout)
[10:30:56.691]         ...future.stdout <- NULL
[10:30:56.691]     }
[10:30:56.691]     ...future.result$conditions <- ...future.conditions
[10:30:56.691]     ...future.result$finished <- base::Sys.time()
[10:30:56.691]     ...future.result
[10:30:56.691] }
[10:30:56.693] assign_globals() ...
[10:30:56.693] List of 5
[10:30:56.693]  $ ...future.FUN            :function (...)  
[10:30:56.693]  $ future.call.arguments    : list()
[10:30:56.693]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:56.693]  $ ...future.elements_ii    :List of 3
[10:30:56.693]   ..$ : int 0
[10:30:56.693]   ..$ : int 0
[10:30:56.693]   ..$ : int 0
[10:30:56.693]  $ ...future.seeds_ii       :List of 3
[10:30:56.693]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[10:30:56.693]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[10:30:56.693]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[10:30:56.693]  $ ...future.globals.maxSize: NULL
[10:30:56.693]  - attr(*, "where")=List of 5
[10:30:56.693]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:30:56.693]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:30:56.693]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:30:56.693]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:30:56.693]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:30:56.693]  - attr(*, "resolved")= logi FALSE
[10:30:56.693]  - attr(*, "total_size")= num 616
[10:30:56.693]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:56.693]  - attr(*, "already-done")= logi TRUE
[10:30:56.702] - reassign environment for ‘...future.FUN’
[10:30:56.702] - copied ‘...future.FUN’ to environment
[10:30:56.702] - copied ‘future.call.arguments’ to environment
[10:30:56.702] - copied ‘...future.elements_ii’ to environment
[10:30:56.703] - copied ‘...future.seeds_ii’ to environment
[10:30:56.703] - copied ‘...future.globals.maxSize’ to environment
[10:30:56.703] assign_globals() ... done
[10:30:56.703] requestCore(): workers = 2
[10:30:56.705] MulticoreFuture started
[10:30:56.706] - Launch lazy future ... done
[10:30:56.706] run() for ‘MulticoreFuture’ ... done
[10:30:56.706] Created future:
[10:30:56.707] plan(): Setting new future strategy stack:
[10:30:56.707] List of future strategies:
[10:30:56.707] 1. sequential:
[10:30:56.707]    - args: function (..., envir = parent.frame())
[10:30:56.707]    - tweaked: FALSE
[10:30:56.707]    - call: NULL
[10:30:56.708] plan(): nbrOfWorkers() = 1
[10:30:56.710] plan(): Setting new future strategy stack:
[10:30:56.710] List of future strategies:
[10:30:56.710] 1. multicore:
[10:30:56.710]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:30:56.710]    - tweaked: FALSE
[10:30:56.710]    - call: plan(strategy)
[10:30:56.716] plan(): nbrOfWorkers() = 2
[10:30:56.707] MulticoreFuture:
[10:30:56.707] Label: ‘future_replicate-2’
[10:30:56.707] Expression:
[10:30:56.707] {
[10:30:56.707]     do.call(function(...) {
[10:30:56.707]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.707]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:56.707]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.707]             on.exit(options(oopts), add = TRUE)
[10:30:56.707]         }
[10:30:56.707]         {
[10:30:56.707]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:56.707]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.707]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.707]                   envir = globalenv(), inherits = FALSE)
[10:30:56.707]                 ...future.FUN(...future.X_jj, ...)
[10:30:56.707]             })
[10:30:56.707]         }
[10:30:56.707]     }, args = future.call.arguments)
[10:30:56.707] }
[10:30:56.707] Lazy evaluation: FALSE
[10:30:56.707] Asynchronous evaluation: TRUE
[10:30:56.707] Local evaluation: TRUE
[10:30:56.707] Environment: R_GlobalEnv
[10:30:56.707] Capture standard output: TRUE
[10:30:56.707] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:30:56.707] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:30:56.707] Packages: <none>
[10:30:56.707] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:30:56.707] Resolved: TRUE
[10:30:56.707] Value: <not collected>
[10:30:56.707] Conditions captured: <none>
[10:30:56.707] Early signaling: FALSE
[10:30:56.707] Owner process: 7cdcbd4b-6c47-ca9a-dc3f-e18236d134b8
[10:30:56.707] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:56.717] Chunk #2 of 2 ... DONE
[10:30:56.717] Launching 2 futures (chunks) ... DONE
[10:30:56.717] Resolving 2 futures (chunks) ...
[10:30:56.717] resolve() on list ...
[10:30:56.718]  recursive: 0
[10:30:56.718]  length: 2
[10:30:56.718] 
[10:30:56.718] Future #1
[10:30:56.718] result() for MulticoreFuture ...
[10:30:56.719] result() for MulticoreFuture ...
[10:30:56.720] result() for MulticoreFuture ... done
[10:30:56.720] result() for MulticoreFuture ... done
[10:30:56.720] result() for MulticoreFuture ...
[10:30:56.720] result() for MulticoreFuture ... done
[10:30:56.720] signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:30:56.721] - nx: 2
[10:30:56.721] - relay: TRUE
[10:30:56.721] - stdout: TRUE
[10:30:56.721] - signal: TRUE
[10:30:56.721] - resignal: FALSE
[10:30:56.722] - force: TRUE
[10:30:56.722] - relayed: [n=2] FALSE, FALSE
[10:30:56.722] - queued futures: [n=2] FALSE, FALSE
[10:30:56.722]  - until=1
[10:30:56.722]  - relaying element #1
[10:30:56.722] result() for MulticoreFuture ...
[10:30:56.723] result() for MulticoreFuture ... done
[10:30:56.723] result() for MulticoreFuture ...
[10:30:56.723] result() for MulticoreFuture ... done
[10:30:56.723] result() for MulticoreFuture ...
[10:30:56.724] result() for MulticoreFuture ... done
[10:30:56.724] result() for MulticoreFuture ...
[10:30:56.724] result() for MulticoreFuture ... done
[10:30:56.724] - relayed: [n=2] TRUE, FALSE
[10:30:56.724] - queued futures: [n=2] TRUE, FALSE
[10:30:56.724] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:30:56.724]  length: 1 (resolved future 1)
[10:30:56.725] Future #2
[10:30:56.725] result() for MulticoreFuture ...
[10:30:56.726] result() for MulticoreFuture ...
[10:30:56.726] result() for MulticoreFuture ... done
[10:30:56.726] result() for MulticoreFuture ... done
[10:30:56.726] result() for MulticoreFuture ...
[10:30:56.726] result() for MulticoreFuture ... done
[10:30:56.727] signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:30:56.727] - nx: 2
[10:30:56.727] - relay: TRUE
[10:30:56.727] - stdout: TRUE
[10:30:56.727] - signal: TRUE
[10:30:56.729] - resignal: FALSE
[10:30:56.730] - force: TRUE
[10:30:56.730] - relayed: [n=2] TRUE, FALSE
[10:30:56.730] - queued futures: [n=2] TRUE, FALSE
[10:30:56.730]  - until=2
[10:30:56.730]  - relaying element #2
[10:30:56.731] result() for MulticoreFuture ...
[10:30:56.731] result() for MulticoreFuture ... done
[10:30:56.731] result() for MulticoreFuture ...
[10:30:56.731] result() for MulticoreFuture ... done
[10:30:56.731] result() for MulticoreFuture ...
[10:30:56.731] result() for MulticoreFuture ... done
[10:30:56.732] result() for MulticoreFuture ...
[10:30:56.732] result() for MulticoreFuture ... done
[10:30:56.732] - relayed: [n=2] TRUE, TRUE
[10:30:56.732] - queued futures: [n=2] TRUE, TRUE
[10:30:56.732] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:30:56.732]  length: 0 (resolved future 2)
[10:30:56.732] Relaying remaining futures
[10:30:56.733] signalConditionsASAP(NULL, pos=0) ...
[10:30:56.733] - nx: 2
[10:30:56.733] - relay: TRUE
[10:30:56.733] - stdout: TRUE
[10:30:56.733] - signal: TRUE
[10:30:56.733] - resignal: FALSE
[10:30:56.733] - force: TRUE
[10:30:56.733] - relayed: [n=2] TRUE, TRUE
[10:30:56.733] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:30:56.734] - relayed: [n=2] TRUE, TRUE
[10:30:56.734] - queued futures: [n=2] TRUE, TRUE
[10:30:56.734] signalConditionsASAP(NULL, pos=0) ... done
[10:30:56.734] resolve() on list ... DONE
[10:30:56.734] result() for MulticoreFuture ...
[10:30:56.734] result() for MulticoreFuture ... done
[10:30:56.734] result() for MulticoreFuture ...
[10:30:56.735] result() for MulticoreFuture ... done
[10:30:56.735] result() for MulticoreFuture ...
[10:30:56.735] result() for MulticoreFuture ... done
[10:30:56.735] result() for MulticoreFuture ...
[10:30:56.735] result() for MulticoreFuture ... done
[10:30:56.735]  - Number of value chunks collected: 2
[10:30:56.735] Resolving 2 futures (chunks) ... DONE
[10:30:56.735] Reducing values from 2 chunks ...
[10:30:56.736]  - Number of values collected after concatenation: 5
[10:30:56.736]  - Number of values expected: 5
[10:30:56.736] Reducing values from 2 chunks ... DONE
[10:30:56.736] future_lapply() ... DONE
[10:30:56.736] future_lapply() ...
[10:30:56.737] Generating random seeds ...
[10:30:56.737] Generating random seed streams for 5 elements ...
[10:30:56.737] Generating random seed streams for 5 elements ... DONE
[10:30:56.737] Generating random seeds ... DONE
[10:30:56.737] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:30:56.742] Number of chunks: 2
[10:30:56.742] getGlobalsAndPackagesXApply() ...
[10:30:56.742]  - future.globals: TRUE
[10:30:56.742] getGlobalsAndPackages() ...
[10:30:56.742] Searching for globals...
[10:30:56.744] - globals found: [2] ‘FUN’, ‘sample’
[10:30:56.744] Searching for globals ... DONE
[10:30:56.744] Resolving globals: FALSE
[10:30:56.744] The total size of the 1 globals is 616 bytes (616 bytes)
[10:30:56.745] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[10:30:56.745] - globals: [1] ‘FUN’
[10:30:56.745] 
[10:30:56.745] getGlobalsAndPackages() ... DONE
[10:30:56.745]  - globals found/used: [n=1] ‘FUN’
[10:30:56.745]  - needed namespaces: [n=0] 
[10:30:56.745] Finding globals ... DONE
[10:30:56.746]  - use_args: TRUE
[10:30:56.746]  - Getting '...' globals ...
[10:30:56.746] resolve() on list ...
[10:30:56.746]  recursive: 0
[10:30:56.746]  length: 1
[10:30:56.746]  elements: ‘...’
[10:30:56.746]  length: 0 (resolved future 1)
[10:30:56.747] resolve() on list ... DONE
[10:30:56.747]    - '...' content: [n=0] 
[10:30:56.747] List of 1
[10:30:56.747]  $ ...: list()
[10:30:56.747]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:56.747]  - attr(*, "where")=List of 1
[10:30:56.747]   ..$ ...:<environment: 0x55aba15f8f30> 
[10:30:56.747]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:56.747]  - attr(*, "resolved")= logi TRUE
[10:30:56.747]  - attr(*, "total_size")= num NA
[10:30:56.750]  - Getting '...' globals ... DONE
[10:30:56.750] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:30:56.750] List of 2
[10:30:56.750]  $ ...future.FUN:function (...)  
[10:30:56.750]  $ ...          : list()
[10:30:56.750]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:56.750]  - attr(*, "where")=List of 2
[10:30:56.750]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:30:56.750]   ..$ ...          :<environment: 0x55aba15f8f30> 
[10:30:56.750]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:56.750]  - attr(*, "resolved")= logi FALSE
[10:30:56.750]  - attr(*, "total_size")= num 616
[10:30:56.753] Packages to be attached in all futures: [n=0] 
[10:30:56.753] getGlobalsAndPackagesXApply() ... DONE
[10:30:56.753] Number of futures (= number of chunks): 2
[10:30:56.753] Launching 2 futures (chunks) ...
[10:30:56.753] Chunk #1 of 2 ...
[10:30:56.754]  - Finding globals in 'X' for chunk #1 ...
[10:30:56.754] getGlobalsAndPackages() ...
[10:30:56.754] Searching for globals...
[10:30:56.754] 
[10:30:56.754] Searching for globals ... DONE
[10:30:56.754] - globals: [0] <none>
[10:30:56.754] getGlobalsAndPackages() ... DONE
[10:30:56.754]    + additional globals found: [n=0] 
[10:30:56.755]    + additional namespaces needed: [n=0] 
[10:30:56.755]  - Finding globals in 'X' for chunk #1 ... DONE
[10:30:56.755]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:30:56.755]  - seeds: [2] <seeds>
[10:30:56.755]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.755] getGlobalsAndPackages() ...
[10:30:56.755] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.755] Resolving globals: FALSE
[10:30:56.755] Tweak future expression to call with '...' arguments ...
[10:30:56.756] {
[10:30:56.756]     do.call(function(...) {
[10:30:56.756]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.756]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:56.756]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.756]             on.exit(options(oopts), add = TRUE)
[10:30:56.756]         }
[10:30:56.756]         {
[10:30:56.756]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:56.756]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.756]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.756]                   envir = globalenv(), inherits = FALSE)
[10:30:56.756]                 ...future.FUN(...future.X_jj, ...)
[10:30:56.756]             })
[10:30:56.756]         }
[10:30:56.756]     }, args = future.call.arguments)
[10:30:56.756] }
[10:30:56.756] Tweak future expression to call with '...' arguments ... DONE
[10:30:56.756] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.756] 
[10:30:56.756] getGlobalsAndPackages() ... DONE
[10:30:56.757] run() for ‘Future’ ...
[10:30:56.757] - state: ‘created’
[10:30:56.757] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:30:56.761] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:56.761] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:30:56.763]   - Field: ‘label’
[10:30:56.763]   - Field: ‘local’
[10:30:56.763]   - Field: ‘owner’
[10:30:56.763]   - Field: ‘envir’
[10:30:56.763]   - Field: ‘workers’
[10:30:56.763]   - Field: ‘packages’
[10:30:56.764]   - Field: ‘gc’
[10:30:56.764]   - Field: ‘job’
[10:30:56.764]   - Field: ‘conditions’
[10:30:56.764]   - Field: ‘expr’
[10:30:56.764]   - Field: ‘uuid’
[10:30:56.764]   - Field: ‘seed’
[10:30:56.764]   - Field: ‘version’
[10:30:56.764]   - Field: ‘result’
[10:30:56.764]   - Field: ‘asynchronous’
[10:30:56.765]   - Field: ‘calls’
[10:30:56.765]   - Field: ‘globals’
[10:30:56.765]   - Field: ‘stdout’
[10:30:56.765]   - Field: ‘earlySignal’
[10:30:56.765]   - Field: ‘lazy’
[10:30:56.765]   - Field: ‘state’
[10:30:56.765] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:30:56.765] - Launch lazy future ...
[10:30:56.766] Packages needed by the future expression (n = 0): <none>
[10:30:56.766] Packages needed by future strategies (n = 0): <none>
[10:30:56.766] {
[10:30:56.766]     {
[10:30:56.766]         {
[10:30:56.766]             ...future.startTime <- base::Sys.time()
[10:30:56.766]             {
[10:30:56.766]                 {
[10:30:56.766]                   {
[10:30:56.766]                     {
[10:30:56.766]                       base::local({
[10:30:56.766]                         has_future <- base::requireNamespace("future", 
[10:30:56.766]                           quietly = TRUE)
[10:30:56.766]                         if (has_future) {
[10:30:56.766]                           ns <- base::getNamespace("future")
[10:30:56.766]                           version <- ns[[".package"]][["version"]]
[10:30:56.766]                           if (is.null(version)) 
[10:30:56.766]                             version <- utils::packageVersion("future")
[10:30:56.766]                         }
[10:30:56.766]                         else {
[10:30:56.766]                           version <- NULL
[10:30:56.766]                         }
[10:30:56.766]                         if (!has_future || version < "1.8.0") {
[10:30:56.766]                           info <- base::c(r_version = base::gsub("R version ", 
[10:30:56.766]                             "", base::R.version$version.string), 
[10:30:56.766]                             platform = base::sprintf("%s (%s-bit)", 
[10:30:56.766]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:30:56.766]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:30:56.766]                               "release", "version")], collapse = " "), 
[10:30:56.766]                             hostname = base::Sys.info()[["nodename"]])
[10:30:56.766]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:30:56.766]                             info)
[10:30:56.766]                           info <- base::paste(info, collapse = "; ")
[10:30:56.766]                           if (!has_future) {
[10:30:56.766]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:30:56.766]                               info)
[10:30:56.766]                           }
[10:30:56.766]                           else {
[10:30:56.766]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:30:56.766]                               info, version)
[10:30:56.766]                           }
[10:30:56.766]                           base::stop(msg)
[10:30:56.766]                         }
[10:30:56.766]                       })
[10:30:56.766]                     }
[10:30:56.766]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:30:56.766]                     base::options(mc.cores = 1L)
[10:30:56.766]                   }
[10:30:56.766]                   ...future.strategy.old <- future::plan("list")
[10:30:56.766]                   options(future.plan = NULL)
[10:30:56.766]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:30:56.766]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:30:56.766]                 }
[10:30:56.766]                 ...future.workdir <- getwd()
[10:30:56.766]             }
[10:30:56.766]             ...future.oldOptions <- base::as.list(base::.Options)
[10:30:56.766]             ...future.oldEnvVars <- base::Sys.getenv()
[10:30:56.766]         }
[10:30:56.766]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:30:56.766]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:30:56.766]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:30:56.766]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:30:56.766]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:30:56.766]             future.stdout.windows.reencode = NULL, width = 80L)
[10:30:56.766]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:30:56.766]             base::names(...future.oldOptions))
[10:30:56.766]     }
[10:30:56.766]     if (FALSE) {
[10:30:56.766]     }
[10:30:56.766]     else {
[10:30:56.766]         if (TRUE) {
[10:30:56.766]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:30:56.766]                 open = "w")
[10:30:56.766]         }
[10:30:56.766]         else {
[10:30:56.766]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:30:56.766]                 windows = "NUL", "/dev/null"), open = "w")
[10:30:56.766]         }
[10:30:56.766]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:30:56.766]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:30:56.766]             base::sink(type = "output", split = FALSE)
[10:30:56.766]             base::close(...future.stdout)
[10:30:56.766]         }, add = TRUE)
[10:30:56.766]     }
[10:30:56.766]     ...future.frame <- base::sys.nframe()
[10:30:56.766]     ...future.conditions <- base::list()
[10:30:56.766]     ...future.rng <- base::globalenv()$.Random.seed
[10:30:56.766]     if (FALSE) {
[10:30:56.766]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:30:56.766]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:30:56.766]     }
[10:30:56.766]     ...future.result <- base::tryCatch({
[10:30:56.766]         base::withCallingHandlers({
[10:30:56.766]             ...future.value <- base::withVisible(base::local({
[10:30:56.766]                 withCallingHandlers({
[10:30:56.766]                   {
[10:30:56.766]                     do.call(function(...) {
[10:30:56.766]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.766]                       if (!identical(...future.globals.maxSize.org, 
[10:30:56.766]                         ...future.globals.maxSize)) {
[10:30:56.766]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.766]                         on.exit(options(oopts), add = TRUE)
[10:30:56.766]                       }
[10:30:56.766]                       {
[10:30:56.766]                         lapply(seq_along(...future.elements_ii), 
[10:30:56.766]                           FUN = function(jj) {
[10:30:56.766]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.766]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.766]                               envir = globalenv(), inherits = FALSE)
[10:30:56.766]                             ...future.FUN(...future.X_jj, ...)
[10:30:56.766]                           })
[10:30:56.766]                       }
[10:30:56.766]                     }, args = future.call.arguments)
[10:30:56.766]                   }
[10:30:56.766]                 }, immediateCondition = function(cond) {
[10:30:56.766]                   save_rds <- function (object, pathname, ...) 
[10:30:56.766]                   {
[10:30:56.766]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:30:56.766]                     if (file_test("-f", pathname_tmp)) {
[10:30:56.766]                       fi_tmp <- file.info(pathname_tmp)
[10:30:56.766]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:30:56.766]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:30:56.766]                         fi_tmp[["mtime"]])
[10:30:56.766]                     }
[10:30:56.766]                     tryCatch({
[10:30:56.766]                       saveRDS(object, file = pathname_tmp, ...)
[10:30:56.766]                     }, error = function(ex) {
[10:30:56.766]                       msg <- conditionMessage(ex)
[10:30:56.766]                       fi_tmp <- file.info(pathname_tmp)
[10:30:56.766]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:30:56.766]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:30:56.766]                         fi_tmp[["mtime"]], msg)
[10:30:56.766]                       ex$message <- msg
[10:30:56.766]                       stop(ex)
[10:30:56.766]                     })
[10:30:56.766]                     stopifnot(file_test("-f", pathname_tmp))
[10:30:56.766]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:30:56.766]                     if (!res || file_test("-f", pathname_tmp)) {
[10:30:56.766]                       fi_tmp <- file.info(pathname_tmp)
[10:30:56.766]                       fi <- file.info(pathname)
[10:30:56.766]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:30:56.766]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:30:56.766]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:30:56.766]                         fi[["size"]], fi[["mtime"]])
[10:30:56.766]                       stop(msg)
[10:30:56.766]                     }
[10:30:56.766]                     invisible(pathname)
[10:30:56.766]                   }
[10:30:56.766]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:30:56.766]                     rootPath = tempdir()) 
[10:30:56.766]                   {
[10:30:56.766]                     obj <- list(time = Sys.time(), condition = cond)
[10:30:56.766]                     file <- tempfile(pattern = class(cond)[1], 
[10:30:56.766]                       tmpdir = path, fileext = ".rds")
[10:30:56.766]                     save_rds(obj, file)
[10:30:56.766]                   }
[10:30:56.766]                   saveImmediateCondition(cond, path = "/tmp/RtmpkDVBSn/.future/immediateConditions")
[10:30:56.766]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.766]                   {
[10:30:56.766]                     inherits <- base::inherits
[10:30:56.766]                     invokeRestart <- base::invokeRestart
[10:30:56.766]                     is.null <- base::is.null
[10:30:56.766]                     muffled <- FALSE
[10:30:56.766]                     if (inherits(cond, "message")) {
[10:30:56.766]                       muffled <- grepl(pattern, "muffleMessage")
[10:30:56.766]                       if (muffled) 
[10:30:56.766]                         invokeRestart("muffleMessage")
[10:30:56.766]                     }
[10:30:56.766]                     else if (inherits(cond, "warning")) {
[10:30:56.766]                       muffled <- grepl(pattern, "muffleWarning")
[10:30:56.766]                       if (muffled) 
[10:30:56.766]                         invokeRestart("muffleWarning")
[10:30:56.766]                     }
[10:30:56.766]                     else if (inherits(cond, "condition")) {
[10:30:56.766]                       if (!is.null(pattern)) {
[10:30:56.766]                         computeRestarts <- base::computeRestarts
[10:30:56.766]                         grepl <- base::grepl
[10:30:56.766]                         restarts <- computeRestarts(cond)
[10:30:56.766]                         for (restart in restarts) {
[10:30:56.766]                           name <- restart$name
[10:30:56.766]                           if (is.null(name)) 
[10:30:56.766]                             next
[10:30:56.766]                           if (!grepl(pattern, name)) 
[10:30:56.766]                             next
[10:30:56.766]                           invokeRestart(restart)
[10:30:56.766]                           muffled <- TRUE
[10:30:56.766]                           break
[10:30:56.766]                         }
[10:30:56.766]                       }
[10:30:56.766]                     }
[10:30:56.766]                     invisible(muffled)
[10:30:56.766]                   }
[10:30:56.766]                   muffleCondition(cond)
[10:30:56.766]                 })
[10:30:56.766]             }))
[10:30:56.766]             future::FutureResult(value = ...future.value$value, 
[10:30:56.766]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:56.766]                   ...future.rng), globalenv = if (FALSE) 
[10:30:56.766]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:30:56.766]                     ...future.globalenv.names))
[10:30:56.766]                 else NULL, started = ...future.startTime, version = "1.8")
[10:30:56.766]         }, condition = base::local({
[10:30:56.766]             c <- base::c
[10:30:56.766]             inherits <- base::inherits
[10:30:56.766]             invokeRestart <- base::invokeRestart
[10:30:56.766]             length <- base::length
[10:30:56.766]             list <- base::list
[10:30:56.766]             seq.int <- base::seq.int
[10:30:56.766]             signalCondition <- base::signalCondition
[10:30:56.766]             sys.calls <- base::sys.calls
[10:30:56.766]             `[[` <- base::`[[`
[10:30:56.766]             `+` <- base::`+`
[10:30:56.766]             `<<-` <- base::`<<-`
[10:30:56.766]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:30:56.766]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:30:56.766]                   3L)]
[10:30:56.766]             }
[10:30:56.766]             function(cond) {
[10:30:56.766]                 is_error <- inherits(cond, "error")
[10:30:56.766]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:30:56.766]                   NULL)
[10:30:56.766]                 if (is_error) {
[10:30:56.766]                   sessionInformation <- function() {
[10:30:56.766]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:30:56.766]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:30:56.766]                       search = base::search(), system = base::Sys.info())
[10:30:56.766]                   }
[10:30:56.766]                   ...future.conditions[[length(...future.conditions) + 
[10:30:56.766]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:30:56.766]                     cond$call), session = sessionInformation(), 
[10:30:56.766]                     timestamp = base::Sys.time(), signaled = 0L)
[10:30:56.766]                   signalCondition(cond)
[10:30:56.766]                 }
[10:30:56.766]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:30:56.766]                 "immediateCondition"))) {
[10:30:56.766]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:30:56.766]                   ...future.conditions[[length(...future.conditions) + 
[10:30:56.766]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:30:56.766]                   if (TRUE && !signal) {
[10:30:56.766]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.766]                     {
[10:30:56.766]                       inherits <- base::inherits
[10:30:56.766]                       invokeRestart <- base::invokeRestart
[10:30:56.766]                       is.null <- base::is.null
[10:30:56.766]                       muffled <- FALSE
[10:30:56.766]                       if (inherits(cond, "message")) {
[10:30:56.766]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:56.766]                         if (muffled) 
[10:30:56.766]                           invokeRestart("muffleMessage")
[10:30:56.766]                       }
[10:30:56.766]                       else if (inherits(cond, "warning")) {
[10:30:56.766]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:56.766]                         if (muffled) 
[10:30:56.766]                           invokeRestart("muffleWarning")
[10:30:56.766]                       }
[10:30:56.766]                       else if (inherits(cond, "condition")) {
[10:30:56.766]                         if (!is.null(pattern)) {
[10:30:56.766]                           computeRestarts <- base::computeRestarts
[10:30:56.766]                           grepl <- base::grepl
[10:30:56.766]                           restarts <- computeRestarts(cond)
[10:30:56.766]                           for (restart in restarts) {
[10:30:56.766]                             name <- restart$name
[10:30:56.766]                             if (is.null(name)) 
[10:30:56.766]                               next
[10:30:56.766]                             if (!grepl(pattern, name)) 
[10:30:56.766]                               next
[10:30:56.766]                             invokeRestart(restart)
[10:30:56.766]                             muffled <- TRUE
[10:30:56.766]                             break
[10:30:56.766]                           }
[10:30:56.766]                         }
[10:30:56.766]                       }
[10:30:56.766]                       invisible(muffled)
[10:30:56.766]                     }
[10:30:56.766]                     muffleCondition(cond, pattern = "^muffle")
[10:30:56.766]                   }
[10:30:56.766]                 }
[10:30:56.766]                 else {
[10:30:56.766]                   if (TRUE) {
[10:30:56.766]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.766]                     {
[10:30:56.766]                       inherits <- base::inherits
[10:30:56.766]                       invokeRestart <- base::invokeRestart
[10:30:56.766]                       is.null <- base::is.null
[10:30:56.766]                       muffled <- FALSE
[10:30:56.766]                       if (inherits(cond, "message")) {
[10:30:56.766]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:56.766]                         if (muffled) 
[10:30:56.766]                           invokeRestart("muffleMessage")
[10:30:56.766]                       }
[10:30:56.766]                       else if (inherits(cond, "warning")) {
[10:30:56.766]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:56.766]                         if (muffled) 
[10:30:56.766]                           invokeRestart("muffleWarning")
[10:30:56.766]                       }
[10:30:56.766]                       else if (inherits(cond, "condition")) {
[10:30:56.766]                         if (!is.null(pattern)) {
[10:30:56.766]                           computeRestarts <- base::computeRestarts
[10:30:56.766]                           grepl <- base::grepl
[10:30:56.766]                           restarts <- computeRestarts(cond)
[10:30:56.766]                           for (restart in restarts) {
[10:30:56.766]                             name <- restart$name
[10:30:56.766]                             if (is.null(name)) 
[10:30:56.766]                               next
[10:30:56.766]                             if (!grepl(pattern, name)) 
[10:30:56.766]                               next
[10:30:56.766]                             invokeRestart(restart)
[10:30:56.766]                             muffled <- TRUE
[10:30:56.766]                             break
[10:30:56.766]                           }
[10:30:56.766]                         }
[10:30:56.766]                       }
[10:30:56.766]                       invisible(muffled)
[10:30:56.766]                     }
[10:30:56.766]                     muffleCondition(cond, pattern = "^muffle")
[10:30:56.766]                   }
[10:30:56.766]                 }
[10:30:56.766]             }
[10:30:56.766]         }))
[10:30:56.766]     }, error = function(ex) {
[10:30:56.766]         base::structure(base::list(value = NULL, visible = NULL, 
[10:30:56.766]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:56.766]                 ...future.rng), started = ...future.startTime, 
[10:30:56.766]             finished = Sys.time(), session_uuid = NA_character_, 
[10:30:56.766]             version = "1.8"), class = "FutureResult")
[10:30:56.766]     }, finally = {
[10:30:56.766]         if (!identical(...future.workdir, getwd())) 
[10:30:56.766]             setwd(...future.workdir)
[10:30:56.766]         {
[10:30:56.766]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:30:56.766]                 ...future.oldOptions$nwarnings <- NULL
[10:30:56.766]             }
[10:30:56.766]             base::options(...future.oldOptions)
[10:30:56.766]             if (.Platform$OS.type == "windows") {
[10:30:56.766]                 old_names <- names(...future.oldEnvVars)
[10:30:56.766]                 envs <- base::Sys.getenv()
[10:30:56.766]                 names <- names(envs)
[10:30:56.766]                 common <- intersect(names, old_names)
[10:30:56.766]                 added <- setdiff(names, old_names)
[10:30:56.766]                 removed <- setdiff(old_names, names)
[10:30:56.766]                 changed <- common[...future.oldEnvVars[common] != 
[10:30:56.766]                   envs[common]]
[10:30:56.766]                 NAMES <- toupper(changed)
[10:30:56.766]                 args <- list()
[10:30:56.766]                 for (kk in seq_along(NAMES)) {
[10:30:56.766]                   name <- changed[[kk]]
[10:30:56.766]                   NAME <- NAMES[[kk]]
[10:30:56.766]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.766]                     next
[10:30:56.766]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:56.766]                 }
[10:30:56.766]                 NAMES <- toupper(added)
[10:30:56.766]                 for (kk in seq_along(NAMES)) {
[10:30:56.766]                   name <- added[[kk]]
[10:30:56.766]                   NAME <- NAMES[[kk]]
[10:30:56.766]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.766]                     next
[10:30:56.766]                   args[[name]] <- ""
[10:30:56.766]                 }
[10:30:56.766]                 NAMES <- toupper(removed)
[10:30:56.766]                 for (kk in seq_along(NAMES)) {
[10:30:56.766]                   name <- removed[[kk]]
[10:30:56.766]                   NAME <- NAMES[[kk]]
[10:30:56.766]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.766]                     next
[10:30:56.766]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:56.766]                 }
[10:30:56.766]                 if (length(args) > 0) 
[10:30:56.766]                   base::do.call(base::Sys.setenv, args = args)
[10:30:56.766]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:30:56.766]             }
[10:30:56.766]             else {
[10:30:56.766]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:30:56.766]             }
[10:30:56.766]             {
[10:30:56.766]                 if (base::length(...future.futureOptionsAdded) > 
[10:30:56.766]                   0L) {
[10:30:56.766]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:30:56.766]                   base::names(opts) <- ...future.futureOptionsAdded
[10:30:56.766]                   base::options(opts)
[10:30:56.766]                 }
[10:30:56.766]                 {
[10:30:56.766]                   {
[10:30:56.766]                     base::options(mc.cores = ...future.mc.cores.old)
[10:30:56.766]                     NULL
[10:30:56.766]                   }
[10:30:56.766]                   options(future.plan = NULL)
[10:30:56.766]                   if (is.na(NA_character_)) 
[10:30:56.766]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:30:56.766]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:30:56.766]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:30:56.766]                     .init = FALSE)
[10:30:56.766]                 }
[10:30:56.766]             }
[10:30:56.766]         }
[10:30:56.766]     })
[10:30:56.766]     if (TRUE) {
[10:30:56.766]         base::sink(type = "output", split = FALSE)
[10:30:56.766]         if (TRUE) {
[10:30:56.766]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:30:56.766]         }
[10:30:56.766]         else {
[10:30:56.766]             ...future.result["stdout"] <- base::list(NULL)
[10:30:56.766]         }
[10:30:56.766]         base::close(...future.stdout)
[10:30:56.766]         ...future.stdout <- NULL
[10:30:56.766]     }
[10:30:56.766]     ...future.result$conditions <- ...future.conditions
[10:30:56.766]     ...future.result$finished <- base::Sys.time()
[10:30:56.766]     ...future.result
[10:30:56.766] }
[10:30:56.769] assign_globals() ...
[10:30:56.769] List of 5
[10:30:56.769]  $ ...future.FUN            :function (...)  
[10:30:56.769]  $ future.call.arguments    : list()
[10:30:56.769]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:56.769]  $ ...future.elements_ii    :List of 2
[10:30:56.769]   ..$ : int 0
[10:30:56.769]   ..$ : int 0
[10:30:56.769]  $ ...future.seeds_ii       :List of 2
[10:30:56.769]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[10:30:56.769]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[10:30:56.769]  $ ...future.globals.maxSize: NULL
[10:30:56.769]  - attr(*, "where")=List of 5
[10:30:56.769]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:30:56.769]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:30:56.769]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:30:56.769]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:30:56.769]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:30:56.769]  - attr(*, "resolved")= logi FALSE
[10:30:56.769]  - attr(*, "total_size")= num 616
[10:30:56.769]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:56.769]  - attr(*, "already-done")= logi TRUE
[10:30:56.775] - reassign environment for ‘...future.FUN’
[10:30:56.775] - copied ‘...future.FUN’ to environment
[10:30:56.775] - copied ‘future.call.arguments’ to environment
[10:30:56.775] - copied ‘...future.elements_ii’ to environment
[10:30:56.775] - copied ‘...future.seeds_ii’ to environment
[10:30:56.775] - copied ‘...future.globals.maxSize’ to environment
[10:30:56.775] assign_globals() ... done
[10:30:56.776] requestCore(): workers = 2
[10:30:56.778] MulticoreFuture started
[10:30:56.778] - Launch lazy future ... done
[10:30:56.778] run() for ‘MulticoreFuture’ ... done
[10:30:56.779] Created future:
[10:30:56.779] plan(): Setting new future strategy stack:
[10:30:56.779] List of future strategies:
[10:30:56.779] 1. sequential:
[10:30:56.779]    - args: function (..., envir = parent.frame())
[10:30:56.779]    - tweaked: FALSE
[10:30:56.779]    - call: NULL
[10:30:56.780] plan(): nbrOfWorkers() = 1
[10:30:56.782] plan(): Setting new future strategy stack:
[10:30:56.783] List of future strategies:
[10:30:56.783] 1. multicore:
[10:30:56.783]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:30:56.783]    - tweaked: FALSE
[10:30:56.783]    - call: plan(strategy)
[10:30:56.788] plan(): nbrOfWorkers() = 2
[10:30:56.779] MulticoreFuture:
[10:30:56.779] Label: ‘future_replicate-1’
[10:30:56.779] Expression:
[10:30:56.779] {
[10:30:56.779]     do.call(function(...) {
[10:30:56.779]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.779]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:56.779]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.779]             on.exit(options(oopts), add = TRUE)
[10:30:56.779]         }
[10:30:56.779]         {
[10:30:56.779]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:56.779]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.779]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.779]                   envir = globalenv(), inherits = FALSE)
[10:30:56.779]                 ...future.FUN(...future.X_jj, ...)
[10:30:56.779]             })
[10:30:56.779]         }
[10:30:56.779]     }, args = future.call.arguments)
[10:30:56.779] }
[10:30:56.779] Lazy evaluation: FALSE
[10:30:56.779] Asynchronous evaluation: TRUE
[10:30:56.779] Local evaluation: TRUE
[10:30:56.779] Environment: R_GlobalEnv
[10:30:56.779] Capture standard output: TRUE
[10:30:56.779] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:30:56.779] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:30:56.779] Packages: <none>
[10:30:56.779] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:30:56.779] Resolved: TRUE
[10:30:56.779] Value: <not collected>
[10:30:56.779] Conditions captured: <none>
[10:30:56.779] Early signaling: FALSE
[10:30:56.779] Owner process: 7cdcbd4b-6c47-ca9a-dc3f-e18236d134b8
[10:30:56.779] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:56.790] Chunk #1 of 2 ... DONE
[10:30:56.790] Chunk #2 of 2 ...
[10:30:56.790]  - Finding globals in 'X' for chunk #2 ...
[10:30:56.790] getGlobalsAndPackages() ...
[10:30:56.790] Searching for globals...
[10:30:56.791] 
[10:30:56.791] Searching for globals ... DONE
[10:30:56.791] - globals: [0] <none>
[10:30:56.791] getGlobalsAndPackages() ... DONE
[10:30:56.791]    + additional globals found: [n=0] 
[10:30:56.791]    + additional namespaces needed: [n=0] 
[10:30:56.792]  - Finding globals in 'X' for chunk #2 ... DONE
[10:30:56.792]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:30:56.792]  - seeds: [3] <seeds>
[10:30:56.792]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.792] getGlobalsAndPackages() ...
[10:30:56.792] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.793] Resolving globals: FALSE
[10:30:56.793] Tweak future expression to call with '...' arguments ...
[10:30:56.793] {
[10:30:56.793]     do.call(function(...) {
[10:30:56.793]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.793]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:56.793]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.793]             on.exit(options(oopts), add = TRUE)
[10:30:56.793]         }
[10:30:56.793]         {
[10:30:56.793]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:56.793]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.793]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.793]                   envir = globalenv(), inherits = FALSE)
[10:30:56.793]                 ...future.FUN(...future.X_jj, ...)
[10:30:56.793]             })
[10:30:56.793]         }
[10:30:56.793]     }, args = future.call.arguments)
[10:30:56.793] }
[10:30:56.794] Tweak future expression to call with '...' arguments ... DONE
[10:30:56.794] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.794] 
[10:30:56.795] getGlobalsAndPackages() ... DONE
[10:30:56.795] run() for ‘Future’ ...
[10:30:56.795] - state: ‘created’
[10:30:56.796] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:30:56.800] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:56.801] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:30:56.801]   - Field: ‘label’
[10:30:56.801]   - Field: ‘local’
[10:30:56.801]   - Field: ‘owner’
[10:30:56.801]   - Field: ‘envir’
[10:30:56.801]   - Field: ‘workers’
[10:30:56.802]   - Field: ‘packages’
[10:30:56.802]   - Field: ‘gc’
[10:30:56.802]   - Field: ‘job’
[10:30:56.802]   - Field: ‘conditions’
[10:30:56.802]   - Field: ‘expr’
[10:30:56.802]   - Field: ‘uuid’
[10:30:56.803]   - Field: ‘seed’
[10:30:56.803]   - Field: ‘version’
[10:30:56.803]   - Field: ‘result’
[10:30:56.803]   - Field: ‘asynchronous’
[10:30:56.803]   - Field: ‘calls’
[10:30:56.803]   - Field: ‘globals’
[10:30:56.803]   - Field: ‘stdout’
[10:30:56.804]   - Field: ‘earlySignal’
[10:30:56.804]   - Field: ‘lazy’
[10:30:56.804]   - Field: ‘state’
[10:30:56.804] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:30:56.804] - Launch lazy future ...
[10:30:56.805] Packages needed by the future expression (n = 0): <none>
[10:30:56.805] Packages needed by future strategies (n = 0): <none>
[10:30:56.806] {
[10:30:56.806]     {
[10:30:56.806]         {
[10:30:56.806]             ...future.startTime <- base::Sys.time()
[10:30:56.806]             {
[10:30:56.806]                 {
[10:30:56.806]                   {
[10:30:56.806]                     {
[10:30:56.806]                       base::local({
[10:30:56.806]                         has_future <- base::requireNamespace("future", 
[10:30:56.806]                           quietly = TRUE)
[10:30:56.806]                         if (has_future) {
[10:30:56.806]                           ns <- base::getNamespace("future")
[10:30:56.806]                           version <- ns[[".package"]][["version"]]
[10:30:56.806]                           if (is.null(version)) 
[10:30:56.806]                             version <- utils::packageVersion("future")
[10:30:56.806]                         }
[10:30:56.806]                         else {
[10:30:56.806]                           version <- NULL
[10:30:56.806]                         }
[10:30:56.806]                         if (!has_future || version < "1.8.0") {
[10:30:56.806]                           info <- base::c(r_version = base::gsub("R version ", 
[10:30:56.806]                             "", base::R.version$version.string), 
[10:30:56.806]                             platform = base::sprintf("%s (%s-bit)", 
[10:30:56.806]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:30:56.806]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:30:56.806]                               "release", "version")], collapse = " "), 
[10:30:56.806]                             hostname = base::Sys.info()[["nodename"]])
[10:30:56.806]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:30:56.806]                             info)
[10:30:56.806]                           info <- base::paste(info, collapse = "; ")
[10:30:56.806]                           if (!has_future) {
[10:30:56.806]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:30:56.806]                               info)
[10:30:56.806]                           }
[10:30:56.806]                           else {
[10:30:56.806]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:30:56.806]                               info, version)
[10:30:56.806]                           }
[10:30:56.806]                           base::stop(msg)
[10:30:56.806]                         }
[10:30:56.806]                       })
[10:30:56.806]                     }
[10:30:56.806]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:30:56.806]                     base::options(mc.cores = 1L)
[10:30:56.806]                   }
[10:30:56.806]                   ...future.strategy.old <- future::plan("list")
[10:30:56.806]                   options(future.plan = NULL)
[10:30:56.806]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:30:56.806]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:30:56.806]                 }
[10:30:56.806]                 ...future.workdir <- getwd()
[10:30:56.806]             }
[10:30:56.806]             ...future.oldOptions <- base::as.list(base::.Options)
[10:30:56.806]             ...future.oldEnvVars <- base::Sys.getenv()
[10:30:56.806]         }
[10:30:56.806]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:30:56.806]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:30:56.806]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:30:56.806]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:30:56.806]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:30:56.806]             future.stdout.windows.reencode = NULL, width = 80L)
[10:30:56.806]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:30:56.806]             base::names(...future.oldOptions))
[10:30:56.806]     }
[10:30:56.806]     if (FALSE) {
[10:30:56.806]     }
[10:30:56.806]     else {
[10:30:56.806]         if (TRUE) {
[10:30:56.806]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:30:56.806]                 open = "w")
[10:30:56.806]         }
[10:30:56.806]         else {
[10:30:56.806]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:30:56.806]                 windows = "NUL", "/dev/null"), open = "w")
[10:30:56.806]         }
[10:30:56.806]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:30:56.806]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:30:56.806]             base::sink(type = "output", split = FALSE)
[10:30:56.806]             base::close(...future.stdout)
[10:30:56.806]         }, add = TRUE)
[10:30:56.806]     }
[10:30:56.806]     ...future.frame <- base::sys.nframe()
[10:30:56.806]     ...future.conditions <- base::list()
[10:30:56.806]     ...future.rng <- base::globalenv()$.Random.seed
[10:30:56.806]     if (FALSE) {
[10:30:56.806]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:30:56.806]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:30:56.806]     }
[10:30:56.806]     ...future.result <- base::tryCatch({
[10:30:56.806]         base::withCallingHandlers({
[10:30:56.806]             ...future.value <- base::withVisible(base::local({
[10:30:56.806]                 withCallingHandlers({
[10:30:56.806]                   {
[10:30:56.806]                     do.call(function(...) {
[10:30:56.806]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.806]                       if (!identical(...future.globals.maxSize.org, 
[10:30:56.806]                         ...future.globals.maxSize)) {
[10:30:56.806]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.806]                         on.exit(options(oopts), add = TRUE)
[10:30:56.806]                       }
[10:30:56.806]                       {
[10:30:56.806]                         lapply(seq_along(...future.elements_ii), 
[10:30:56.806]                           FUN = function(jj) {
[10:30:56.806]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.806]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.806]                               envir = globalenv(), inherits = FALSE)
[10:30:56.806]                             ...future.FUN(...future.X_jj, ...)
[10:30:56.806]                           })
[10:30:56.806]                       }
[10:30:56.806]                     }, args = future.call.arguments)
[10:30:56.806]                   }
[10:30:56.806]                 }, immediateCondition = function(cond) {
[10:30:56.806]                   save_rds <- function (object, pathname, ...) 
[10:30:56.806]                   {
[10:30:56.806]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:30:56.806]                     if (file_test("-f", pathname_tmp)) {
[10:30:56.806]                       fi_tmp <- file.info(pathname_tmp)
[10:30:56.806]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:30:56.806]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:30:56.806]                         fi_tmp[["mtime"]])
[10:30:56.806]                     }
[10:30:56.806]                     tryCatch({
[10:30:56.806]                       saveRDS(object, file = pathname_tmp, ...)
[10:30:56.806]                     }, error = function(ex) {
[10:30:56.806]                       msg <- conditionMessage(ex)
[10:30:56.806]                       fi_tmp <- file.info(pathname_tmp)
[10:30:56.806]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:30:56.806]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:30:56.806]                         fi_tmp[["mtime"]], msg)
[10:30:56.806]                       ex$message <- msg
[10:30:56.806]                       stop(ex)
[10:30:56.806]                     })
[10:30:56.806]                     stopifnot(file_test("-f", pathname_tmp))
[10:30:56.806]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:30:56.806]                     if (!res || file_test("-f", pathname_tmp)) {
[10:30:56.806]                       fi_tmp <- file.info(pathname_tmp)
[10:30:56.806]                       fi <- file.info(pathname)
[10:30:56.806]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:30:56.806]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:30:56.806]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:30:56.806]                         fi[["size"]], fi[["mtime"]])
[10:30:56.806]                       stop(msg)
[10:30:56.806]                     }
[10:30:56.806]                     invisible(pathname)
[10:30:56.806]                   }
[10:30:56.806]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:30:56.806]                     rootPath = tempdir()) 
[10:30:56.806]                   {
[10:30:56.806]                     obj <- list(time = Sys.time(), condition = cond)
[10:30:56.806]                     file <- tempfile(pattern = class(cond)[1], 
[10:30:56.806]                       tmpdir = path, fileext = ".rds")
[10:30:56.806]                     save_rds(obj, file)
[10:30:56.806]                   }
[10:30:56.806]                   saveImmediateCondition(cond, path = "/tmp/RtmpkDVBSn/.future/immediateConditions")
[10:30:56.806]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.806]                   {
[10:30:56.806]                     inherits <- base::inherits
[10:30:56.806]                     invokeRestart <- base::invokeRestart
[10:30:56.806]                     is.null <- base::is.null
[10:30:56.806]                     muffled <- FALSE
[10:30:56.806]                     if (inherits(cond, "message")) {
[10:30:56.806]                       muffled <- grepl(pattern, "muffleMessage")
[10:30:56.806]                       if (muffled) 
[10:30:56.806]                         invokeRestart("muffleMessage")
[10:30:56.806]                     }
[10:30:56.806]                     else if (inherits(cond, "warning")) {
[10:30:56.806]                       muffled <- grepl(pattern, "muffleWarning")
[10:30:56.806]                       if (muffled) 
[10:30:56.806]                         invokeRestart("muffleWarning")
[10:30:56.806]                     }
[10:30:56.806]                     else if (inherits(cond, "condition")) {
[10:30:56.806]                       if (!is.null(pattern)) {
[10:30:56.806]                         computeRestarts <- base::computeRestarts
[10:30:56.806]                         grepl <- base::grepl
[10:30:56.806]                         restarts <- computeRestarts(cond)
[10:30:56.806]                         for (restart in restarts) {
[10:30:56.806]                           name <- restart$name
[10:30:56.806]                           if (is.null(name)) 
[10:30:56.806]                             next
[10:30:56.806]                           if (!grepl(pattern, name)) 
[10:30:56.806]                             next
[10:30:56.806]                           invokeRestart(restart)
[10:30:56.806]                           muffled <- TRUE
[10:30:56.806]                           break
[10:30:56.806]                         }
[10:30:56.806]                       }
[10:30:56.806]                     }
[10:30:56.806]                     invisible(muffled)
[10:30:56.806]                   }
[10:30:56.806]                   muffleCondition(cond)
[10:30:56.806]                 })
[10:30:56.806]             }))
[10:30:56.806]             future::FutureResult(value = ...future.value$value, 
[10:30:56.806]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:56.806]                   ...future.rng), globalenv = if (FALSE) 
[10:30:56.806]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:30:56.806]                     ...future.globalenv.names))
[10:30:56.806]                 else NULL, started = ...future.startTime, version = "1.8")
[10:30:56.806]         }, condition = base::local({
[10:30:56.806]             c <- base::c
[10:30:56.806]             inherits <- base::inherits
[10:30:56.806]             invokeRestart <- base::invokeRestart
[10:30:56.806]             length <- base::length
[10:30:56.806]             list <- base::list
[10:30:56.806]             seq.int <- base::seq.int
[10:30:56.806]             signalCondition <- base::signalCondition
[10:30:56.806]             sys.calls <- base::sys.calls
[10:30:56.806]             `[[` <- base::`[[`
[10:30:56.806]             `+` <- base::`+`
[10:30:56.806]             `<<-` <- base::`<<-`
[10:30:56.806]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:30:56.806]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:30:56.806]                   3L)]
[10:30:56.806]             }
[10:30:56.806]             function(cond) {
[10:30:56.806]                 is_error <- inherits(cond, "error")
[10:30:56.806]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:30:56.806]                   NULL)
[10:30:56.806]                 if (is_error) {
[10:30:56.806]                   sessionInformation <- function() {
[10:30:56.806]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:30:56.806]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:30:56.806]                       search = base::search(), system = base::Sys.info())
[10:30:56.806]                   }
[10:30:56.806]                   ...future.conditions[[length(...future.conditions) + 
[10:30:56.806]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:30:56.806]                     cond$call), session = sessionInformation(), 
[10:30:56.806]                     timestamp = base::Sys.time(), signaled = 0L)
[10:30:56.806]                   signalCondition(cond)
[10:30:56.806]                 }
[10:30:56.806]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:30:56.806]                 "immediateCondition"))) {
[10:30:56.806]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:30:56.806]                   ...future.conditions[[length(...future.conditions) + 
[10:30:56.806]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:30:56.806]                   if (TRUE && !signal) {
[10:30:56.806]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.806]                     {
[10:30:56.806]                       inherits <- base::inherits
[10:30:56.806]                       invokeRestart <- base::invokeRestart
[10:30:56.806]                       is.null <- base::is.null
[10:30:56.806]                       muffled <- FALSE
[10:30:56.806]                       if (inherits(cond, "message")) {
[10:30:56.806]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:56.806]                         if (muffled) 
[10:30:56.806]                           invokeRestart("muffleMessage")
[10:30:56.806]                       }
[10:30:56.806]                       else if (inherits(cond, "warning")) {
[10:30:56.806]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:56.806]                         if (muffled) 
[10:30:56.806]                           invokeRestart("muffleWarning")
[10:30:56.806]                       }
[10:30:56.806]                       else if (inherits(cond, "condition")) {
[10:30:56.806]                         if (!is.null(pattern)) {
[10:30:56.806]                           computeRestarts <- base::computeRestarts
[10:30:56.806]                           grepl <- base::grepl
[10:30:56.806]                           restarts <- computeRestarts(cond)
[10:30:56.806]                           for (restart in restarts) {
[10:30:56.806]                             name <- restart$name
[10:30:56.806]                             if (is.null(name)) 
[10:30:56.806]                               next
[10:30:56.806]                             if (!grepl(pattern, name)) 
[10:30:56.806]                               next
[10:30:56.806]                             invokeRestart(restart)
[10:30:56.806]                             muffled <- TRUE
[10:30:56.806]                             break
[10:30:56.806]                           }
[10:30:56.806]                         }
[10:30:56.806]                       }
[10:30:56.806]                       invisible(muffled)
[10:30:56.806]                     }
[10:30:56.806]                     muffleCondition(cond, pattern = "^muffle")
[10:30:56.806]                   }
[10:30:56.806]                 }
[10:30:56.806]                 else {
[10:30:56.806]                   if (TRUE) {
[10:30:56.806]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.806]                     {
[10:30:56.806]                       inherits <- base::inherits
[10:30:56.806]                       invokeRestart <- base::invokeRestart
[10:30:56.806]                       is.null <- base::is.null
[10:30:56.806]                       muffled <- FALSE
[10:30:56.806]                       if (inherits(cond, "message")) {
[10:30:56.806]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:56.806]                         if (muffled) 
[10:30:56.806]                           invokeRestart("muffleMessage")
[10:30:56.806]                       }
[10:30:56.806]                       else if (inherits(cond, "warning")) {
[10:30:56.806]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:56.806]                         if (muffled) 
[10:30:56.806]                           invokeRestart("muffleWarning")
[10:30:56.806]                       }
[10:30:56.806]                       else if (inherits(cond, "condition")) {
[10:30:56.806]                         if (!is.null(pattern)) {
[10:30:56.806]                           computeRestarts <- base::computeRestarts
[10:30:56.806]                           grepl <- base::grepl
[10:30:56.806]                           restarts <- computeRestarts(cond)
[10:30:56.806]                           for (restart in restarts) {
[10:30:56.806]                             name <- restart$name
[10:30:56.806]                             if (is.null(name)) 
[10:30:56.806]                               next
[10:30:56.806]                             if (!grepl(pattern, name)) 
[10:30:56.806]                               next
[10:30:56.806]                             invokeRestart(restart)
[10:30:56.806]                             muffled <- TRUE
[10:30:56.806]                             break
[10:30:56.806]                           }
[10:30:56.806]                         }
[10:30:56.806]                       }
[10:30:56.806]                       invisible(muffled)
[10:30:56.806]                     }
[10:30:56.806]                     muffleCondition(cond, pattern = "^muffle")
[10:30:56.806]                   }
[10:30:56.806]                 }
[10:30:56.806]             }
[10:30:56.806]         }))
[10:30:56.806]     }, error = function(ex) {
[10:30:56.806]         base::structure(base::list(value = NULL, visible = NULL, 
[10:30:56.806]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:56.806]                 ...future.rng), started = ...future.startTime, 
[10:30:56.806]             finished = Sys.time(), session_uuid = NA_character_, 
[10:30:56.806]             version = "1.8"), class = "FutureResult")
[10:30:56.806]     }, finally = {
[10:30:56.806]         if (!identical(...future.workdir, getwd())) 
[10:30:56.806]             setwd(...future.workdir)
[10:30:56.806]         {
[10:30:56.806]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:30:56.806]                 ...future.oldOptions$nwarnings <- NULL
[10:30:56.806]             }
[10:30:56.806]             base::options(...future.oldOptions)
[10:30:56.806]             if (.Platform$OS.type == "windows") {
[10:30:56.806]                 old_names <- names(...future.oldEnvVars)
[10:30:56.806]                 envs <- base::Sys.getenv()
[10:30:56.806]                 names <- names(envs)
[10:30:56.806]                 common <- intersect(names, old_names)
[10:30:56.806]                 added <- setdiff(names, old_names)
[10:30:56.806]                 removed <- setdiff(old_names, names)
[10:30:56.806]                 changed <- common[...future.oldEnvVars[common] != 
[10:30:56.806]                   envs[common]]
[10:30:56.806]                 NAMES <- toupper(changed)
[10:30:56.806]                 args <- list()
[10:30:56.806]                 for (kk in seq_along(NAMES)) {
[10:30:56.806]                   name <- changed[[kk]]
[10:30:56.806]                   NAME <- NAMES[[kk]]
[10:30:56.806]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.806]                     next
[10:30:56.806]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:56.806]                 }
[10:30:56.806]                 NAMES <- toupper(added)
[10:30:56.806]                 for (kk in seq_along(NAMES)) {
[10:30:56.806]                   name <- added[[kk]]
[10:30:56.806]                   NAME <- NAMES[[kk]]
[10:30:56.806]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.806]                     next
[10:30:56.806]                   args[[name]] <- ""
[10:30:56.806]                 }
[10:30:56.806]                 NAMES <- toupper(removed)
[10:30:56.806]                 for (kk in seq_along(NAMES)) {
[10:30:56.806]                   name <- removed[[kk]]
[10:30:56.806]                   NAME <- NAMES[[kk]]
[10:30:56.806]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.806]                     next
[10:30:56.806]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:56.806]                 }
[10:30:56.806]                 if (length(args) > 0) 
[10:30:56.806]                   base::do.call(base::Sys.setenv, args = args)
[10:30:56.806]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:30:56.806]             }
[10:30:56.806]             else {
[10:30:56.806]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:30:56.806]             }
[10:30:56.806]             {
[10:30:56.806]                 if (base::length(...future.futureOptionsAdded) > 
[10:30:56.806]                   0L) {
[10:30:56.806]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:30:56.806]                   base::names(opts) <- ...future.futureOptionsAdded
[10:30:56.806]                   base::options(opts)
[10:30:56.806]                 }
[10:30:56.806]                 {
[10:30:56.806]                   {
[10:30:56.806]                     base::options(mc.cores = ...future.mc.cores.old)
[10:30:56.806]                     NULL
[10:30:56.806]                   }
[10:30:56.806]                   options(future.plan = NULL)
[10:30:56.806]                   if (is.na(NA_character_)) 
[10:30:56.806]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:30:56.806]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:30:56.806]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:30:56.806]                     .init = FALSE)
[10:30:56.806]                 }
[10:30:56.806]             }
[10:30:56.806]         }
[10:30:56.806]     })
[10:30:56.806]     if (TRUE) {
[10:30:56.806]         base::sink(type = "output", split = FALSE)
[10:30:56.806]         if (TRUE) {
[10:30:56.806]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:30:56.806]         }
[10:30:56.806]         else {
[10:30:56.806]             ...future.result["stdout"] <- base::list(NULL)
[10:30:56.806]         }
[10:30:56.806]         base::close(...future.stdout)
[10:30:56.806]         ...future.stdout <- NULL
[10:30:56.806]     }
[10:30:56.806]     ...future.result$conditions <- ...future.conditions
[10:30:56.806]     ...future.result$finished <- base::Sys.time()
[10:30:56.806]     ...future.result
[10:30:56.806] }
[10:30:56.809] assign_globals() ...
[10:30:56.809] List of 5
[10:30:56.809]  $ ...future.FUN            :function (...)  
[10:30:56.809]  $ future.call.arguments    : list()
[10:30:56.809]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:56.809]  $ ...future.elements_ii    :List of 3
[10:30:56.809]   ..$ : int 0
[10:30:56.809]   ..$ : int 0
[10:30:56.809]   ..$ : int 0
[10:30:56.809]  $ ...future.seeds_ii       :List of 3
[10:30:56.809]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[10:30:56.809]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[10:30:56.809]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[10:30:56.809]  $ ...future.globals.maxSize: NULL
[10:30:56.809]  - attr(*, "where")=List of 5
[10:30:56.809]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:30:56.809]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:30:56.809]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:30:56.809]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:30:56.809]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:30:56.809]  - attr(*, "resolved")= logi FALSE
[10:30:56.809]  - attr(*, "total_size")= num 616
[10:30:56.809]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:56.809]  - attr(*, "already-done")= logi TRUE
[10:30:56.823] - reassign environment for ‘...future.FUN’
[10:30:56.823] - copied ‘...future.FUN’ to environment
[10:30:56.824] - copied ‘future.call.arguments’ to environment
[10:30:56.824] - copied ‘...future.elements_ii’ to environment
[10:30:56.824] - copied ‘...future.seeds_ii’ to environment
[10:30:56.824] - copied ‘...future.globals.maxSize’ to environment
[10:30:56.824] assign_globals() ... done
[10:30:56.825] requestCore(): workers = 2
[10:30:56.827] MulticoreFuture started
[10:30:56.828] - Launch lazy future ... done
[10:30:56.828] run() for ‘MulticoreFuture’ ... done
[10:30:56.828] Created future:
[10:30:56.829] plan(): Setting new future strategy stack:
[10:30:56.829] List of future strategies:
[10:30:56.829] 1. sequential:
[10:30:56.829]    - args: function (..., envir = parent.frame())
[10:30:56.829]    - tweaked: FALSE
[10:30:56.829]    - call: NULL
[10:30:56.830] plan(): nbrOfWorkers() = 1
[10:30:56.833] plan(): Setting new future strategy stack:
[10:30:56.833] List of future strategies:
[10:30:56.833] 1. multicore:
[10:30:56.833]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:30:56.833]    - tweaked: FALSE
[10:30:56.833]    - call: plan(strategy)
[10:30:56.838] plan(): nbrOfWorkers() = 2
[10:30:56.829] MulticoreFuture:
[10:30:56.829] Label: ‘future_replicate-2’
[10:30:56.829] Expression:
[10:30:56.829] {
[10:30:56.829]     do.call(function(...) {
[10:30:56.829]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.829]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:56.829]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.829]             on.exit(options(oopts), add = TRUE)
[10:30:56.829]         }
[10:30:56.829]         {
[10:30:56.829]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:56.829]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.829]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.829]                   envir = globalenv(), inherits = FALSE)
[10:30:56.829]                 ...future.FUN(...future.X_jj, ...)
[10:30:56.829]             })
[10:30:56.829]         }
[10:30:56.829]     }, args = future.call.arguments)
[10:30:56.829] }
[10:30:56.829] Lazy evaluation: FALSE
[10:30:56.829] Asynchronous evaluation: TRUE
[10:30:56.829] Local evaluation: TRUE
[10:30:56.829] Environment: R_GlobalEnv
[10:30:56.829] Capture standard output: TRUE
[10:30:56.829] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:30:56.829] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:30:56.829] Packages: <none>
[10:30:56.829] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:30:56.829] Resolved: TRUE
[10:30:56.829] Value: <not collected>
[10:30:56.829] Conditions captured: <none>
[10:30:56.829] Early signaling: FALSE
[10:30:56.829] Owner process: 7cdcbd4b-6c47-ca9a-dc3f-e18236d134b8
[10:30:56.829] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:56.839] Chunk #2 of 2 ... DONE
[10:30:56.840] Launching 2 futures (chunks) ... DONE
[10:30:56.840] Resolving 2 futures (chunks) ...
[10:30:56.840] resolve() on list ...
[10:30:56.840]  recursive: 0
[10:30:56.840]  length: 2
[10:30:56.840] 
[10:30:56.841] Future #1
[10:30:56.841] result() for MulticoreFuture ...
[10:30:56.842] result() for MulticoreFuture ...
[10:30:56.842] result() for MulticoreFuture ... done
[10:30:56.842] result() for MulticoreFuture ... done
[10:30:56.842] result() for MulticoreFuture ...
[10:30:56.843] result() for MulticoreFuture ... done
[10:30:56.843] signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:30:56.843] - nx: 2
[10:30:56.843] - relay: TRUE
[10:30:56.843] - stdout: TRUE
[10:30:56.843] - signal: TRUE
[10:30:56.843] - resignal: FALSE
[10:30:56.843] - force: TRUE
[10:30:56.844] - relayed: [n=2] FALSE, FALSE
[10:30:56.844] - queued futures: [n=2] FALSE, FALSE
[10:30:56.844]  - until=1
[10:30:56.844]  - relaying element #1
[10:30:56.844] result() for MulticoreFuture ...
[10:30:56.844] result() for MulticoreFuture ... done
[10:30:56.844] result() for MulticoreFuture ...
[10:30:56.845] result() for MulticoreFuture ... done
[10:30:56.845] result() for MulticoreFuture ...
[10:30:56.845] result() for MulticoreFuture ... done
[10:30:56.845] result() for MulticoreFuture ...
[10:30:56.845] result() for MulticoreFuture ... done
[10:30:56.845] - relayed: [n=2] TRUE, FALSE
[10:30:56.846] - queued futures: [n=2] TRUE, FALSE
[10:30:56.846] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:30:56.846]  length: 1 (resolved future 1)
[10:30:56.846] Future #2
[10:30:56.847] result() for MulticoreFuture ...
[10:30:56.847] result() for MulticoreFuture ...
[10:30:56.848] result() for MulticoreFuture ... done
[10:30:56.848] result() for MulticoreFuture ... done
[10:30:56.848] result() for MulticoreFuture ...
[10:30:56.848] result() for MulticoreFuture ... done
[10:30:56.849] signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:30:56.849] - nx: 2
[10:30:56.849] - relay: TRUE
[10:30:56.849] - stdout: TRUE
[10:30:56.849] - signal: TRUE
[10:30:56.849] - resignal: FALSE
[10:30:56.850] - force: TRUE
[10:30:56.850] - relayed: [n=2] TRUE, FALSE
[10:30:56.850] - queued futures: [n=2] TRUE, FALSE
[10:30:56.850]  - until=2
[10:30:56.850]  - relaying element #2
[10:30:56.850] result() for MulticoreFuture ...
[10:30:56.851] result() for MulticoreFuture ... done
[10:30:56.851] result() for MulticoreFuture ...
[10:30:56.851] result() for MulticoreFuture ... done
[10:30:56.851] result() for MulticoreFuture ...
[10:30:56.851] result() for MulticoreFuture ... done
[10:30:56.851] result() for MulticoreFuture ...
[10:30:56.851] result() for MulticoreFuture ... done
[10:30:56.851] - relayed: [n=2] TRUE, TRUE
[10:30:56.852] - queued futures: [n=2] TRUE, TRUE
[10:30:56.852] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:30:56.852]  length: 0 (resolved future 2)
[10:30:56.852] Relaying remaining futures
[10:30:56.852] signalConditionsASAP(NULL, pos=0) ...
[10:30:56.852] - nx: 2
[10:30:56.852] - relay: TRUE
[10:30:56.852] - stdout: TRUE
[10:30:56.852] - signal: TRUE
[10:30:56.852] - resignal: FALSE
[10:30:56.853] - force: TRUE
[10:30:56.853] - relayed: [n=2] TRUE, TRUE
[10:30:56.853] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:30:56.853] - relayed: [n=2] TRUE, TRUE
[10:30:56.853] - queued futures: [n=2] TRUE, TRUE
[10:30:56.853] signalConditionsASAP(NULL, pos=0) ... done
[10:30:56.853] resolve() on list ... DONE
[10:30:56.853] result() for MulticoreFuture ...
[10:30:56.854] result() for MulticoreFuture ... done
[10:30:56.854] result() for MulticoreFuture ...
[10:30:56.854] result() for MulticoreFuture ... done
[10:30:56.854] result() for MulticoreFuture ...
[10:30:56.854] result() for MulticoreFuture ... done
[10:30:56.854] result() for MulticoreFuture ...
[10:30:56.854] result() for MulticoreFuture ... done
[10:30:56.854]  - Number of value chunks collected: 2
[10:30:56.855] Resolving 2 futures (chunks) ... DONE
[10:30:56.855] Reducing values from 2 chunks ...
[10:30:56.855]  - Number of values collected after concatenation: 5
[10:30:56.855]  - Number of values expected: 5
[10:30:56.855] Reducing values from 2 chunks ... DONE
[10:30:56.855] future_lapply() ... DONE
- example(replicate) ...
[10:30:56.856] future_lapply() ...
[10:30:56.856] Generating random seeds ...
[10:30:56.856] Generating random seed streams for 5 elements ...
[10:30:56.857] Generating random seed streams for 5 elements ... DONE
[10:30:56.857] Generating random seeds ... DONE
[10:30:56.857] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:30:56.862] Number of chunks: 2
[10:30:56.862] getGlobalsAndPackagesXApply() ...
[10:30:56.862]  - future.globals: TRUE
[10:30:56.862] getGlobalsAndPackages() ...
[10:30:56.862] Searching for globals...
[10:30:56.866] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[10:30:56.867] Searching for globals ... DONE
[10:30:56.867] Resolving globals: FALSE
[10:30:56.867] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[10:30:56.868] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[10:30:56.868] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[10:30:56.868] 
[10:30:56.868] getGlobalsAndPackages() ... DONE
[10:30:56.868]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[10:30:56.869]  - needed namespaces: [n=0] 
[10:30:56.869] Finding globals ... DONE
[10:30:56.869]  - use_args: TRUE
[10:30:56.869]  - Getting '...' globals ...
[10:30:56.869] resolve() on list ...
[10:30:56.869]  recursive: 0
[10:30:56.870]  length: 1
[10:30:56.870]  elements: ‘...’
[10:30:56.870]  length: 0 (resolved future 1)
[10:30:56.870] resolve() on list ... DONE
[10:30:56.870]    - '...' content: [n=0] 
[10:30:56.870] List of 1
[10:30:56.870]  $ ...: list()
[10:30:56.870]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:56.870]  - attr(*, "where")=List of 1
[10:30:56.870]   ..$ ...:<environment: 0x55aba2ffaa60> 
[10:30:56.870]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:56.870]  - attr(*, "resolved")= logi TRUE
[10:30:56.870]  - attr(*, "total_size")= num NA
[10:30:56.873]  - Getting '...' globals ... DONE
[10:30:56.874] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[10:30:56.874] List of 4
[10:30:56.874]  $ ...future.FUN:function (...)  
[10:30:56.874]  $ foo          :function (x = 1, y = 2)  
[10:30:56.874]  $ x            : num 3
[10:30:56.874]  $ ...          : list()
[10:30:56.874]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:56.874]  - attr(*, "where")=List of 4
[10:30:56.874]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:30:56.874]   ..$ foo          :<environment: R_EmptyEnv> 
[10:30:56.874]   ..$ x            :<environment: R_EmptyEnv> 
[10:30:56.874]   ..$ ...          :<environment: 0x55aba2ffaa60> 
[10:30:56.874]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:56.874]  - attr(*, "resolved")= logi FALSE
[10:30:56.874]  - attr(*, "total_size")= num 2200
[10:30:56.878] Packages to be attached in all futures: [n=0] 
[10:30:56.878] getGlobalsAndPackagesXApply() ... DONE
[10:30:56.878] Number of futures (= number of chunks): 2
[10:30:56.878] Launching 2 futures (chunks) ...
[10:30:56.878] Chunk #1 of 2 ...
[10:30:56.878]  - Finding globals in 'X' for chunk #1 ...
[10:30:56.878] getGlobalsAndPackages() ...
[10:30:56.878] Searching for globals...
[10:30:56.879] 
[10:30:56.879] Searching for globals ... DONE
[10:30:56.879] - globals: [0] <none>
[10:30:56.879] getGlobalsAndPackages() ... DONE
[10:30:56.879]    + additional globals found: [n=0] 
[10:30:56.879]    + additional namespaces needed: [n=0] 
[10:30:56.879]  - Finding globals in 'X' for chunk #1 ... DONE
[10:30:56.879]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:30:56.879]  - seeds: [2] <seeds>
[10:30:56.880]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.880] getGlobalsAndPackages() ...
[10:30:56.880] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.880] Resolving globals: FALSE
[10:30:56.880] Tweak future expression to call with '...' arguments ...
[10:30:56.880] {
[10:30:56.880]     do.call(function(...) {
[10:30:56.880]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.880]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:56.880]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.880]             on.exit(options(oopts), add = TRUE)
[10:30:56.880]         }
[10:30:56.880]         {
[10:30:56.880]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:56.880]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.880]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.880]                   envir = globalenv(), inherits = FALSE)
[10:30:56.880]                 ...future.FUN(...future.X_jj, ...)
[10:30:56.880]             })
[10:30:56.880]         }
[10:30:56.880]     }, args = future.call.arguments)
[10:30:56.880] }
[10:30:56.880] Tweak future expression to call with '...' arguments ... DONE
[10:30:56.881] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.881] 
[10:30:56.881] getGlobalsAndPackages() ... DONE
[10:30:56.881] run() for ‘Future’ ...
[10:30:56.882] - state: ‘created’
[10:30:56.882] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:30:56.886] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:56.886] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:30:56.886]   - Field: ‘label’
[10:30:56.886]   - Field: ‘local’
[10:30:56.886]   - Field: ‘owner’
[10:30:56.886]   - Field: ‘envir’
[10:30:56.886]   - Field: ‘workers’
[10:30:56.886]   - Field: ‘packages’
[10:30:56.886]   - Field: ‘gc’
[10:30:56.887]   - Field: ‘job’
[10:30:56.887]   - Field: ‘conditions’
[10:30:56.887]   - Field: ‘expr’
[10:30:56.887]   - Field: ‘uuid’
[10:30:56.887]   - Field: ‘seed’
[10:30:56.887]   - Field: ‘version’
[10:30:56.887]   - Field: ‘result’
[10:30:56.887]   - Field: ‘asynchronous’
[10:30:56.887]   - Field: ‘calls’
[10:30:56.887]   - Field: ‘globals’
[10:30:56.887]   - Field: ‘stdout’
[10:30:56.888]   - Field: ‘earlySignal’
[10:30:56.888]   - Field: ‘lazy’
[10:30:56.888]   - Field: ‘state’
[10:30:56.888] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:30:56.888] - Launch lazy future ...
[10:30:56.888] Packages needed by the future expression (n = 0): <none>
[10:30:56.888] Packages needed by future strategies (n = 0): <none>
[10:30:56.889] {
[10:30:56.889]     {
[10:30:56.889]         {
[10:30:56.889]             ...future.startTime <- base::Sys.time()
[10:30:56.889]             {
[10:30:56.889]                 {
[10:30:56.889]                   {
[10:30:56.889]                     {
[10:30:56.889]                       base::local({
[10:30:56.889]                         has_future <- base::requireNamespace("future", 
[10:30:56.889]                           quietly = TRUE)
[10:30:56.889]                         if (has_future) {
[10:30:56.889]                           ns <- base::getNamespace("future")
[10:30:56.889]                           version <- ns[[".package"]][["version"]]
[10:30:56.889]                           if (is.null(version)) 
[10:30:56.889]                             version <- utils::packageVersion("future")
[10:30:56.889]                         }
[10:30:56.889]                         else {
[10:30:56.889]                           version <- NULL
[10:30:56.889]                         }
[10:30:56.889]                         if (!has_future || version < "1.8.0") {
[10:30:56.889]                           info <- base::c(r_version = base::gsub("R version ", 
[10:30:56.889]                             "", base::R.version$version.string), 
[10:30:56.889]                             platform = base::sprintf("%s (%s-bit)", 
[10:30:56.889]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:30:56.889]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:30:56.889]                               "release", "version")], collapse = " "), 
[10:30:56.889]                             hostname = base::Sys.info()[["nodename"]])
[10:30:56.889]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:30:56.889]                             info)
[10:30:56.889]                           info <- base::paste(info, collapse = "; ")
[10:30:56.889]                           if (!has_future) {
[10:30:56.889]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:30:56.889]                               info)
[10:30:56.889]                           }
[10:30:56.889]                           else {
[10:30:56.889]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:30:56.889]                               info, version)
[10:30:56.889]                           }
[10:30:56.889]                           base::stop(msg)
[10:30:56.889]                         }
[10:30:56.889]                       })
[10:30:56.889]                     }
[10:30:56.889]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:30:56.889]                     base::options(mc.cores = 1L)
[10:30:56.889]                   }
[10:30:56.889]                   ...future.strategy.old <- future::plan("list")
[10:30:56.889]                   options(future.plan = NULL)
[10:30:56.889]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:30:56.889]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:30:56.889]                 }
[10:30:56.889]                 ...future.workdir <- getwd()
[10:30:56.889]             }
[10:30:56.889]             ...future.oldOptions <- base::as.list(base::.Options)
[10:30:56.889]             ...future.oldEnvVars <- base::Sys.getenv()
[10:30:56.889]         }
[10:30:56.889]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:30:56.889]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:30:56.889]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:30:56.889]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:30:56.889]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:30:56.889]             future.stdout.windows.reencode = NULL, width = 80L)
[10:30:56.889]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:30:56.889]             base::names(...future.oldOptions))
[10:30:56.889]     }
[10:30:56.889]     if (FALSE) {
[10:30:56.889]     }
[10:30:56.889]     else {
[10:30:56.889]         if (TRUE) {
[10:30:56.889]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:30:56.889]                 open = "w")
[10:30:56.889]         }
[10:30:56.889]         else {
[10:30:56.889]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:30:56.889]                 windows = "NUL", "/dev/null"), open = "w")
[10:30:56.889]         }
[10:30:56.889]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:30:56.889]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:30:56.889]             base::sink(type = "output", split = FALSE)
[10:30:56.889]             base::close(...future.stdout)
[10:30:56.889]         }, add = TRUE)
[10:30:56.889]     }
[10:30:56.889]     ...future.frame <- base::sys.nframe()
[10:30:56.889]     ...future.conditions <- base::list()
[10:30:56.889]     ...future.rng <- base::globalenv()$.Random.seed
[10:30:56.889]     if (FALSE) {
[10:30:56.889]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:30:56.889]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:30:56.889]     }
[10:30:56.889]     ...future.result <- base::tryCatch({
[10:30:56.889]         base::withCallingHandlers({
[10:30:56.889]             ...future.value <- base::withVisible(base::local({
[10:30:56.889]                 withCallingHandlers({
[10:30:56.889]                   {
[10:30:56.889]                     do.call(function(...) {
[10:30:56.889]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.889]                       if (!identical(...future.globals.maxSize.org, 
[10:30:56.889]                         ...future.globals.maxSize)) {
[10:30:56.889]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.889]                         on.exit(options(oopts), add = TRUE)
[10:30:56.889]                       }
[10:30:56.889]                       {
[10:30:56.889]                         lapply(seq_along(...future.elements_ii), 
[10:30:56.889]                           FUN = function(jj) {
[10:30:56.889]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.889]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.889]                               envir = globalenv(), inherits = FALSE)
[10:30:56.889]                             ...future.FUN(...future.X_jj, ...)
[10:30:56.889]                           })
[10:30:56.889]                       }
[10:30:56.889]                     }, args = future.call.arguments)
[10:30:56.889]                   }
[10:30:56.889]                 }, immediateCondition = function(cond) {
[10:30:56.889]                   save_rds <- function (object, pathname, ...) 
[10:30:56.889]                   {
[10:30:56.889]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:30:56.889]                     if (file_test("-f", pathname_tmp)) {
[10:30:56.889]                       fi_tmp <- file.info(pathname_tmp)
[10:30:56.889]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:30:56.889]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:30:56.889]                         fi_tmp[["mtime"]])
[10:30:56.889]                     }
[10:30:56.889]                     tryCatch({
[10:30:56.889]                       saveRDS(object, file = pathname_tmp, ...)
[10:30:56.889]                     }, error = function(ex) {
[10:30:56.889]                       msg <- conditionMessage(ex)
[10:30:56.889]                       fi_tmp <- file.info(pathname_tmp)
[10:30:56.889]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:30:56.889]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:30:56.889]                         fi_tmp[["mtime"]], msg)
[10:30:56.889]                       ex$message <- msg
[10:30:56.889]                       stop(ex)
[10:30:56.889]                     })
[10:30:56.889]                     stopifnot(file_test("-f", pathname_tmp))
[10:30:56.889]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:30:56.889]                     if (!res || file_test("-f", pathname_tmp)) {
[10:30:56.889]                       fi_tmp <- file.info(pathname_tmp)
[10:30:56.889]                       fi <- file.info(pathname)
[10:30:56.889]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:30:56.889]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:30:56.889]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:30:56.889]                         fi[["size"]], fi[["mtime"]])
[10:30:56.889]                       stop(msg)
[10:30:56.889]                     }
[10:30:56.889]                     invisible(pathname)
[10:30:56.889]                   }
[10:30:56.889]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:30:56.889]                     rootPath = tempdir()) 
[10:30:56.889]                   {
[10:30:56.889]                     obj <- list(time = Sys.time(), condition = cond)
[10:30:56.889]                     file <- tempfile(pattern = class(cond)[1], 
[10:30:56.889]                       tmpdir = path, fileext = ".rds")
[10:30:56.889]                     save_rds(obj, file)
[10:30:56.889]                   }
[10:30:56.889]                   saveImmediateCondition(cond, path = "/tmp/RtmpkDVBSn/.future/immediateConditions")
[10:30:56.889]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.889]                   {
[10:30:56.889]                     inherits <- base::inherits
[10:30:56.889]                     invokeRestart <- base::invokeRestart
[10:30:56.889]                     is.null <- base::is.null
[10:30:56.889]                     muffled <- FALSE
[10:30:56.889]                     if (inherits(cond, "message")) {
[10:30:56.889]                       muffled <- grepl(pattern, "muffleMessage")
[10:30:56.889]                       if (muffled) 
[10:30:56.889]                         invokeRestart("muffleMessage")
[10:30:56.889]                     }
[10:30:56.889]                     else if (inherits(cond, "warning")) {
[10:30:56.889]                       muffled <- grepl(pattern, "muffleWarning")
[10:30:56.889]                       if (muffled) 
[10:30:56.889]                         invokeRestart("muffleWarning")
[10:30:56.889]                     }
[10:30:56.889]                     else if (inherits(cond, "condition")) {
[10:30:56.889]                       if (!is.null(pattern)) {
[10:30:56.889]                         computeRestarts <- base::computeRestarts
[10:30:56.889]                         grepl <- base::grepl
[10:30:56.889]                         restarts <- computeRestarts(cond)
[10:30:56.889]                         for (restart in restarts) {
[10:30:56.889]                           name <- restart$name
[10:30:56.889]                           if (is.null(name)) 
[10:30:56.889]                             next
[10:30:56.889]                           if (!grepl(pattern, name)) 
[10:30:56.889]                             next
[10:30:56.889]                           invokeRestart(restart)
[10:30:56.889]                           muffled <- TRUE
[10:30:56.889]                           break
[10:30:56.889]                         }
[10:30:56.889]                       }
[10:30:56.889]                     }
[10:30:56.889]                     invisible(muffled)
[10:30:56.889]                   }
[10:30:56.889]                   muffleCondition(cond)
[10:30:56.889]                 })
[10:30:56.889]             }))
[10:30:56.889]             future::FutureResult(value = ...future.value$value, 
[10:30:56.889]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:56.889]                   ...future.rng), globalenv = if (FALSE) 
[10:30:56.889]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:30:56.889]                     ...future.globalenv.names))
[10:30:56.889]                 else NULL, started = ...future.startTime, version = "1.8")
[10:30:56.889]         }, condition = base::local({
[10:30:56.889]             c <- base::c
[10:30:56.889]             inherits <- base::inherits
[10:30:56.889]             invokeRestart <- base::invokeRestart
[10:30:56.889]             length <- base::length
[10:30:56.889]             list <- base::list
[10:30:56.889]             seq.int <- base::seq.int
[10:30:56.889]             signalCondition <- base::signalCondition
[10:30:56.889]             sys.calls <- base::sys.calls
[10:30:56.889]             `[[` <- base::`[[`
[10:30:56.889]             `+` <- base::`+`
[10:30:56.889]             `<<-` <- base::`<<-`
[10:30:56.889]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:30:56.889]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:30:56.889]                   3L)]
[10:30:56.889]             }
[10:30:56.889]             function(cond) {
[10:30:56.889]                 is_error <- inherits(cond, "error")
[10:30:56.889]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:30:56.889]                   NULL)
[10:30:56.889]                 if (is_error) {
[10:30:56.889]                   sessionInformation <- function() {
[10:30:56.889]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:30:56.889]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:30:56.889]                       search = base::search(), system = base::Sys.info())
[10:30:56.889]                   }
[10:30:56.889]                   ...future.conditions[[length(...future.conditions) + 
[10:30:56.889]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:30:56.889]                     cond$call), session = sessionInformation(), 
[10:30:56.889]                     timestamp = base::Sys.time(), signaled = 0L)
[10:30:56.889]                   signalCondition(cond)
[10:30:56.889]                 }
[10:30:56.889]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:30:56.889]                 "immediateCondition"))) {
[10:30:56.889]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:30:56.889]                   ...future.conditions[[length(...future.conditions) + 
[10:30:56.889]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:30:56.889]                   if (TRUE && !signal) {
[10:30:56.889]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.889]                     {
[10:30:56.889]                       inherits <- base::inherits
[10:30:56.889]                       invokeRestart <- base::invokeRestart
[10:30:56.889]                       is.null <- base::is.null
[10:30:56.889]                       muffled <- FALSE
[10:30:56.889]                       if (inherits(cond, "message")) {
[10:30:56.889]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:56.889]                         if (muffled) 
[10:30:56.889]                           invokeRestart("muffleMessage")
[10:30:56.889]                       }
[10:30:56.889]                       else if (inherits(cond, "warning")) {
[10:30:56.889]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:56.889]                         if (muffled) 
[10:30:56.889]                           invokeRestart("muffleWarning")
[10:30:56.889]                       }
[10:30:56.889]                       else if (inherits(cond, "condition")) {
[10:30:56.889]                         if (!is.null(pattern)) {
[10:30:56.889]                           computeRestarts <- base::computeRestarts
[10:30:56.889]                           grepl <- base::grepl
[10:30:56.889]                           restarts <- computeRestarts(cond)
[10:30:56.889]                           for (restart in restarts) {
[10:30:56.889]                             name <- restart$name
[10:30:56.889]                             if (is.null(name)) 
[10:30:56.889]                               next
[10:30:56.889]                             if (!grepl(pattern, name)) 
[10:30:56.889]                               next
[10:30:56.889]                             invokeRestart(restart)
[10:30:56.889]                             muffled <- TRUE
[10:30:56.889]                             break
[10:30:56.889]                           }
[10:30:56.889]                         }
[10:30:56.889]                       }
[10:30:56.889]                       invisible(muffled)
[10:30:56.889]                     }
[10:30:56.889]                     muffleCondition(cond, pattern = "^muffle")
[10:30:56.889]                   }
[10:30:56.889]                 }
[10:30:56.889]                 else {
[10:30:56.889]                   if (TRUE) {
[10:30:56.889]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.889]                     {
[10:30:56.889]                       inherits <- base::inherits
[10:30:56.889]                       invokeRestart <- base::invokeRestart
[10:30:56.889]                       is.null <- base::is.null
[10:30:56.889]                       muffled <- FALSE
[10:30:56.889]                       if (inherits(cond, "message")) {
[10:30:56.889]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:56.889]                         if (muffled) 
[10:30:56.889]                           invokeRestart("muffleMessage")
[10:30:56.889]                       }
[10:30:56.889]                       else if (inherits(cond, "warning")) {
[10:30:56.889]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:56.889]                         if (muffled) 
[10:30:56.889]                           invokeRestart("muffleWarning")
[10:30:56.889]                       }
[10:30:56.889]                       else if (inherits(cond, "condition")) {
[10:30:56.889]                         if (!is.null(pattern)) {
[10:30:56.889]                           computeRestarts <- base::computeRestarts
[10:30:56.889]                           grepl <- base::grepl
[10:30:56.889]                           restarts <- computeRestarts(cond)
[10:30:56.889]                           for (restart in restarts) {
[10:30:56.889]                             name <- restart$name
[10:30:56.889]                             if (is.null(name)) 
[10:30:56.889]                               next
[10:30:56.889]                             if (!grepl(pattern, name)) 
[10:30:56.889]                               next
[10:30:56.889]                             invokeRestart(restart)
[10:30:56.889]                             muffled <- TRUE
[10:30:56.889]                             break
[10:30:56.889]                           }
[10:30:56.889]                         }
[10:30:56.889]                       }
[10:30:56.889]                       invisible(muffled)
[10:30:56.889]                     }
[10:30:56.889]                     muffleCondition(cond, pattern = "^muffle")
[10:30:56.889]                   }
[10:30:56.889]                 }
[10:30:56.889]             }
[10:30:56.889]         }))
[10:30:56.889]     }, error = function(ex) {
[10:30:56.889]         base::structure(base::list(value = NULL, visible = NULL, 
[10:30:56.889]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:56.889]                 ...future.rng), started = ...future.startTime, 
[10:30:56.889]             finished = Sys.time(), session_uuid = NA_character_, 
[10:30:56.889]             version = "1.8"), class = "FutureResult")
[10:30:56.889]     }, finally = {
[10:30:56.889]         if (!identical(...future.workdir, getwd())) 
[10:30:56.889]             setwd(...future.workdir)
[10:30:56.889]         {
[10:30:56.889]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:30:56.889]                 ...future.oldOptions$nwarnings <- NULL
[10:30:56.889]             }
[10:30:56.889]             base::options(...future.oldOptions)
[10:30:56.889]             if (.Platform$OS.type == "windows") {
[10:30:56.889]                 old_names <- names(...future.oldEnvVars)
[10:30:56.889]                 envs <- base::Sys.getenv()
[10:30:56.889]                 names <- names(envs)
[10:30:56.889]                 common <- intersect(names, old_names)
[10:30:56.889]                 added <- setdiff(names, old_names)
[10:30:56.889]                 removed <- setdiff(old_names, names)
[10:30:56.889]                 changed <- common[...future.oldEnvVars[common] != 
[10:30:56.889]                   envs[common]]
[10:30:56.889]                 NAMES <- toupper(changed)
[10:30:56.889]                 args <- list()
[10:30:56.889]                 for (kk in seq_along(NAMES)) {
[10:30:56.889]                   name <- changed[[kk]]
[10:30:56.889]                   NAME <- NAMES[[kk]]
[10:30:56.889]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.889]                     next
[10:30:56.889]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:56.889]                 }
[10:30:56.889]                 NAMES <- toupper(added)
[10:30:56.889]                 for (kk in seq_along(NAMES)) {
[10:30:56.889]                   name <- added[[kk]]
[10:30:56.889]                   NAME <- NAMES[[kk]]
[10:30:56.889]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.889]                     next
[10:30:56.889]                   args[[name]] <- ""
[10:30:56.889]                 }
[10:30:56.889]                 NAMES <- toupper(removed)
[10:30:56.889]                 for (kk in seq_along(NAMES)) {
[10:30:56.889]                   name <- removed[[kk]]
[10:30:56.889]                   NAME <- NAMES[[kk]]
[10:30:56.889]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.889]                     next
[10:30:56.889]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:56.889]                 }
[10:30:56.889]                 if (length(args) > 0) 
[10:30:56.889]                   base::do.call(base::Sys.setenv, args = args)
[10:30:56.889]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:30:56.889]             }
[10:30:56.889]             else {
[10:30:56.889]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:30:56.889]             }
[10:30:56.889]             {
[10:30:56.889]                 if (base::length(...future.futureOptionsAdded) > 
[10:30:56.889]                   0L) {
[10:30:56.889]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:30:56.889]                   base::names(opts) <- ...future.futureOptionsAdded
[10:30:56.889]                   base::options(opts)
[10:30:56.889]                 }
[10:30:56.889]                 {
[10:30:56.889]                   {
[10:30:56.889]                     base::options(mc.cores = ...future.mc.cores.old)
[10:30:56.889]                     NULL
[10:30:56.889]                   }
[10:30:56.889]                   options(future.plan = NULL)
[10:30:56.889]                   if (is.na(NA_character_)) 
[10:30:56.889]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:30:56.889]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:30:56.889]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:30:56.889]                     .init = FALSE)
[10:30:56.889]                 }
[10:30:56.889]             }
[10:30:56.889]         }
[10:30:56.889]     })
[10:30:56.889]     if (TRUE) {
[10:30:56.889]         base::sink(type = "output", split = FALSE)
[10:30:56.889]         if (TRUE) {
[10:30:56.889]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:30:56.889]         }
[10:30:56.889]         else {
[10:30:56.889]             ...future.result["stdout"] <- base::list(NULL)
[10:30:56.889]         }
[10:30:56.889]         base::close(...future.stdout)
[10:30:56.889]         ...future.stdout <- NULL
[10:30:56.889]     }
[10:30:56.889]     ...future.result$conditions <- ...future.conditions
[10:30:56.889]     ...future.result$finished <- base::Sys.time()
[10:30:56.889]     ...future.result
[10:30:56.889] }
[10:30:56.891] assign_globals() ...
[10:30:56.891] List of 7
[10:30:56.891]  $ ...future.FUN            :function (...)  
[10:30:56.891]  $ foo                      :function (x = 1, y = 2)  
[10:30:56.891]  $ x                        : num 3
[10:30:56.891]  $ future.call.arguments    : list()
[10:30:56.891]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:56.891]  $ ...future.elements_ii    :List of 2
[10:30:56.891]   ..$ : int 0
[10:30:56.891]   ..$ : int 0
[10:30:56.891]  $ ...future.seeds_ii       :List of 2
[10:30:56.891]   ..$ : int [1:7] 10407 2118672648 973015440 1612380474 -529784560 -1301423278 1609721430
[10:30:56.891]   ..$ : int [1:7] 10407 -919798402 -1810630142 -850731864 -613657701 1060945587 1656143537
[10:30:56.891]  $ ...future.globals.maxSize: NULL
[10:30:56.891]  - attr(*, "where")=List of 7
[10:30:56.891]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:30:56.891]   ..$ foo                      :<environment: R_EmptyEnv> 
[10:30:56.891]   ..$ x                        :<environment: R_EmptyEnv> 
[10:30:56.891]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:30:56.891]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:30:56.891]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:30:56.891]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:30:56.891]  - attr(*, "resolved")= logi FALSE
[10:30:56.891]  - attr(*, "total_size")= num 2200
[10:30:56.891]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:56.891]  - attr(*, "already-done")= logi TRUE
[10:30:56.901] - reassign environment for ‘...future.FUN’
[10:30:56.901] - copied ‘...future.FUN’ to environment
[10:30:56.901] - reassign environment for ‘foo’
[10:30:56.901] - copied ‘foo’ to environment
[10:30:56.901] - copied ‘x’ to environment
[10:30:56.901] - copied ‘future.call.arguments’ to environment
[10:30:56.901] - copied ‘...future.elements_ii’ to environment
[10:30:56.901] - copied ‘...future.seeds_ii’ to environment
[10:30:56.901] - copied ‘...future.globals.maxSize’ to environment
[10:30:56.902] assign_globals() ... done
[10:30:56.902] requestCore(): workers = 2
[10:30:56.904] MulticoreFuture started
[10:30:56.904] - Launch lazy future ... done
[10:30:56.905] run() for ‘MulticoreFuture’ ... done
[10:30:56.905] Created future:
[10:30:56.905] plan(): Setting new future strategy stack:
[10:30:56.906] List of future strategies:
[10:30:56.906] 1. sequential:
[10:30:56.906]    - args: function (..., envir = parent.frame())
[10:30:56.906]    - tweaked: FALSE
[10:30:56.906]    - call: NULL
[10:30:56.907] plan(): nbrOfWorkers() = 1
[10:30:56.909] plan(): Setting new future strategy stack:
[10:30:56.909] List of future strategies:
[10:30:56.909] 1. multicore:
[10:30:56.909]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:30:56.909]    - tweaked: FALSE
[10:30:56.909]    - call: plan(strategy)
[10:30:56.914] plan(): nbrOfWorkers() = 2
[10:30:56.905] MulticoreFuture:
[10:30:56.905] Label: ‘future_replicate-1’
[10:30:56.905] Expression:
[10:30:56.905] {
[10:30:56.905]     do.call(function(...) {
[10:30:56.905]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.905]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:56.905]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.905]             on.exit(options(oopts), add = TRUE)
[10:30:56.905]         }
[10:30:56.905]         {
[10:30:56.905]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:56.905]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.905]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.905]                   envir = globalenv(), inherits = FALSE)
[10:30:56.905]                 ...future.FUN(...future.X_jj, ...)
[10:30:56.905]             })
[10:30:56.905]         }
[10:30:56.905]     }, args = future.call.arguments)
[10:30:56.905] }
[10:30:56.905] Lazy evaluation: FALSE
[10:30:56.905] Asynchronous evaluation: TRUE
[10:30:56.905] Local evaluation: TRUE
[10:30:56.905] Environment: 0x55aba2ff2c58
[10:30:56.905] Capture standard output: TRUE
[10:30:56.905] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:30:56.905] Globals: 7 objects totaling 2.41 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, ...)
[10:30:56.905] Packages: <none>
[10:30:56.905] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:30:56.905] Resolved: TRUE
[10:30:56.905] Value: <not collected>
[10:30:56.905] Conditions captured: <none>
[10:30:56.905] Early signaling: FALSE
[10:30:56.905] Owner process: 7cdcbd4b-6c47-ca9a-dc3f-e18236d134b8
[10:30:56.905] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:56.915] Chunk #1 of 2 ... DONE
[10:30:56.916] Chunk #2 of 2 ...
[10:30:56.916]  - Finding globals in 'X' for chunk #2 ...
[10:30:56.916] getGlobalsAndPackages() ...
[10:30:56.916] Searching for globals...
[10:30:56.917] 
[10:30:56.917] Searching for globals ... DONE
[10:30:56.917] - globals: [0] <none>
[10:30:56.917] getGlobalsAndPackages() ... DONE
[10:30:56.917]    + additional globals found: [n=0] 
[10:30:56.917]    + additional namespaces needed: [n=0] 
[10:30:56.918]  - Finding globals in 'X' for chunk #2 ... DONE
[10:30:56.918]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:30:56.918]  - seeds: [3] <seeds>
[10:30:56.918]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.918] getGlobalsAndPackages() ...
[10:30:56.918] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.919] Resolving globals: FALSE
[10:30:56.919] Tweak future expression to call with '...' arguments ...
[10:30:56.919] {
[10:30:56.919]     do.call(function(...) {
[10:30:56.919]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.919]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:56.919]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.919]             on.exit(options(oopts), add = TRUE)
[10:30:56.919]         }
[10:30:56.919]         {
[10:30:56.919]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:56.919]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.919]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.919]                   envir = globalenv(), inherits = FALSE)
[10:30:56.919]                 ...future.FUN(...future.X_jj, ...)
[10:30:56.919]             })
[10:30:56.919]         }
[10:30:56.919]     }, args = future.call.arguments)
[10:30:56.919] }
[10:30:56.920] Tweak future expression to call with '...' arguments ... DONE
[10:30:56.920] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:56.921] 
[10:30:56.921] getGlobalsAndPackages() ... DONE
[10:30:56.921] run() for ‘Future’ ...
[10:30:56.921] - state: ‘created’
[10:30:56.922] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:30:56.927] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:56.927] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:30:56.927]   - Field: ‘label’
[10:30:56.927]   - Field: ‘local’
[10:30:56.927]   - Field: ‘owner’
[10:30:56.928]   - Field: ‘envir’
[10:30:56.928]   - Field: ‘workers’
[10:30:56.928]   - Field: ‘packages’
[10:30:56.928]   - Field: ‘gc’
[10:30:56.928]   - Field: ‘job’
[10:30:56.928]   - Field: ‘conditions’
[10:30:56.929]   - Field: ‘expr’
[10:30:56.929]   - Field: ‘uuid’
[10:30:56.929]   - Field: ‘seed’
[10:30:56.929]   - Field: ‘version’
[10:30:56.929]   - Field: ‘result’
[10:30:56.929]   - Field: ‘asynchronous’
[10:30:56.930]   - Field: ‘calls’
[10:30:56.930]   - Field: ‘globals’
[10:30:56.930]   - Field: ‘stdout’
[10:30:56.930]   - Field: ‘earlySignal’
[10:30:56.930]   - Field: ‘lazy’
[10:30:56.930]   - Field: ‘state’
[10:30:56.930] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:30:56.931] - Launch lazy future ...
[10:30:56.931] Packages needed by the future expression (n = 0): <none>
[10:30:56.931] Packages needed by future strategies (n = 0): <none>
[10:30:56.932] {
[10:30:56.932]     {
[10:30:56.932]         {
[10:30:56.932]             ...future.startTime <- base::Sys.time()
[10:30:56.932]             {
[10:30:56.932]                 {
[10:30:56.932]                   {
[10:30:56.932]                     {
[10:30:56.932]                       base::local({
[10:30:56.932]                         has_future <- base::requireNamespace("future", 
[10:30:56.932]                           quietly = TRUE)
[10:30:56.932]                         if (has_future) {
[10:30:56.932]                           ns <- base::getNamespace("future")
[10:30:56.932]                           version <- ns[[".package"]][["version"]]
[10:30:56.932]                           if (is.null(version)) 
[10:30:56.932]                             version <- utils::packageVersion("future")
[10:30:56.932]                         }
[10:30:56.932]                         else {
[10:30:56.932]                           version <- NULL
[10:30:56.932]                         }
[10:30:56.932]                         if (!has_future || version < "1.8.0") {
[10:30:56.932]                           info <- base::c(r_version = base::gsub("R version ", 
[10:30:56.932]                             "", base::R.version$version.string), 
[10:30:56.932]                             platform = base::sprintf("%s (%s-bit)", 
[10:30:56.932]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:30:56.932]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:30:56.932]                               "release", "version")], collapse = " "), 
[10:30:56.932]                             hostname = base::Sys.info()[["nodename"]])
[10:30:56.932]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:30:56.932]                             info)
[10:30:56.932]                           info <- base::paste(info, collapse = "; ")
[10:30:56.932]                           if (!has_future) {
[10:30:56.932]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:30:56.932]                               info)
[10:30:56.932]                           }
[10:30:56.932]                           else {
[10:30:56.932]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:30:56.932]                               info, version)
[10:30:56.932]                           }
[10:30:56.932]                           base::stop(msg)
[10:30:56.932]                         }
[10:30:56.932]                       })
[10:30:56.932]                     }
[10:30:56.932]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:30:56.932]                     base::options(mc.cores = 1L)
[10:30:56.932]                   }
[10:30:56.932]                   ...future.strategy.old <- future::plan("list")
[10:30:56.932]                   options(future.plan = NULL)
[10:30:56.932]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:30:56.932]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:30:56.932]                 }
[10:30:56.932]                 ...future.workdir <- getwd()
[10:30:56.932]             }
[10:30:56.932]             ...future.oldOptions <- base::as.list(base::.Options)
[10:30:56.932]             ...future.oldEnvVars <- base::Sys.getenv()
[10:30:56.932]         }
[10:30:56.932]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:30:56.932]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:30:56.932]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:30:56.932]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:30:56.932]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:30:56.932]             future.stdout.windows.reencode = NULL, width = 80L)
[10:30:56.932]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:30:56.932]             base::names(...future.oldOptions))
[10:30:56.932]     }
[10:30:56.932]     if (FALSE) {
[10:30:56.932]     }
[10:30:56.932]     else {
[10:30:56.932]         if (TRUE) {
[10:30:56.932]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:30:56.932]                 open = "w")
[10:30:56.932]         }
[10:30:56.932]         else {
[10:30:56.932]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:30:56.932]                 windows = "NUL", "/dev/null"), open = "w")
[10:30:56.932]         }
[10:30:56.932]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:30:56.932]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:30:56.932]             base::sink(type = "output", split = FALSE)
[10:30:56.932]             base::close(...future.stdout)
[10:30:56.932]         }, add = TRUE)
[10:30:56.932]     }
[10:30:56.932]     ...future.frame <- base::sys.nframe()
[10:30:56.932]     ...future.conditions <- base::list()
[10:30:56.932]     ...future.rng <- base::globalenv()$.Random.seed
[10:30:56.932]     if (FALSE) {
[10:30:56.932]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:30:56.932]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:30:56.932]     }
[10:30:56.932]     ...future.result <- base::tryCatch({
[10:30:56.932]         base::withCallingHandlers({
[10:30:56.932]             ...future.value <- base::withVisible(base::local({
[10:30:56.932]                 withCallingHandlers({
[10:30:56.932]                   {
[10:30:56.932]                     do.call(function(...) {
[10:30:56.932]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.932]                       if (!identical(...future.globals.maxSize.org, 
[10:30:56.932]                         ...future.globals.maxSize)) {
[10:30:56.932]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.932]                         on.exit(options(oopts), add = TRUE)
[10:30:56.932]                       }
[10:30:56.932]                       {
[10:30:56.932]                         lapply(seq_along(...future.elements_ii), 
[10:30:56.932]                           FUN = function(jj) {
[10:30:56.932]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.932]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.932]                               envir = globalenv(), inherits = FALSE)
[10:30:56.932]                             ...future.FUN(...future.X_jj, ...)
[10:30:56.932]                           })
[10:30:56.932]                       }
[10:30:56.932]                     }, args = future.call.arguments)
[10:30:56.932]                   }
[10:30:56.932]                 }, immediateCondition = function(cond) {
[10:30:56.932]                   save_rds <- function (object, pathname, ...) 
[10:30:56.932]                   {
[10:30:56.932]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:30:56.932]                     if (file_test("-f", pathname_tmp)) {
[10:30:56.932]                       fi_tmp <- file.info(pathname_tmp)
[10:30:56.932]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:30:56.932]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:30:56.932]                         fi_tmp[["mtime"]])
[10:30:56.932]                     }
[10:30:56.932]                     tryCatch({
[10:30:56.932]                       saveRDS(object, file = pathname_tmp, ...)
[10:30:56.932]                     }, error = function(ex) {
[10:30:56.932]                       msg <- conditionMessage(ex)
[10:30:56.932]                       fi_tmp <- file.info(pathname_tmp)
[10:30:56.932]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:30:56.932]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:30:56.932]                         fi_tmp[["mtime"]], msg)
[10:30:56.932]                       ex$message <- msg
[10:30:56.932]                       stop(ex)
[10:30:56.932]                     })
[10:30:56.932]                     stopifnot(file_test("-f", pathname_tmp))
[10:30:56.932]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:30:56.932]                     if (!res || file_test("-f", pathname_tmp)) {
[10:30:56.932]                       fi_tmp <- file.info(pathname_tmp)
[10:30:56.932]                       fi <- file.info(pathname)
[10:30:56.932]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:30:56.932]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:30:56.932]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:30:56.932]                         fi[["size"]], fi[["mtime"]])
[10:30:56.932]                       stop(msg)
[10:30:56.932]                     }
[10:30:56.932]                     invisible(pathname)
[10:30:56.932]                   }
[10:30:56.932]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:30:56.932]                     rootPath = tempdir()) 
[10:30:56.932]                   {
[10:30:56.932]                     obj <- list(time = Sys.time(), condition = cond)
[10:30:56.932]                     file <- tempfile(pattern = class(cond)[1], 
[10:30:56.932]                       tmpdir = path, fileext = ".rds")
[10:30:56.932]                     save_rds(obj, file)
[10:30:56.932]                   }
[10:30:56.932]                   saveImmediateCondition(cond, path = "/tmp/RtmpkDVBSn/.future/immediateConditions")
[10:30:56.932]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.932]                   {
[10:30:56.932]                     inherits <- base::inherits
[10:30:56.932]                     invokeRestart <- base::invokeRestart
[10:30:56.932]                     is.null <- base::is.null
[10:30:56.932]                     muffled <- FALSE
[10:30:56.932]                     if (inherits(cond, "message")) {
[10:30:56.932]                       muffled <- grepl(pattern, "muffleMessage")
[10:30:56.932]                       if (muffled) 
[10:30:56.932]                         invokeRestart("muffleMessage")
[10:30:56.932]                     }
[10:30:56.932]                     else if (inherits(cond, "warning")) {
[10:30:56.932]                       muffled <- grepl(pattern, "muffleWarning")
[10:30:56.932]                       if (muffled) 
[10:30:56.932]                         invokeRestart("muffleWarning")
[10:30:56.932]                     }
[10:30:56.932]                     else if (inherits(cond, "condition")) {
[10:30:56.932]                       if (!is.null(pattern)) {
[10:30:56.932]                         computeRestarts <- base::computeRestarts
[10:30:56.932]                         grepl <- base::grepl
[10:30:56.932]                         restarts <- computeRestarts(cond)
[10:30:56.932]                         for (restart in restarts) {
[10:30:56.932]                           name <- restart$name
[10:30:56.932]                           if (is.null(name)) 
[10:30:56.932]                             next
[10:30:56.932]                           if (!grepl(pattern, name)) 
[10:30:56.932]                             next
[10:30:56.932]                           invokeRestart(restart)
[10:30:56.932]                           muffled <- TRUE
[10:30:56.932]                           break
[10:30:56.932]                         }
[10:30:56.932]                       }
[10:30:56.932]                     }
[10:30:56.932]                     invisible(muffled)
[10:30:56.932]                   }
[10:30:56.932]                   muffleCondition(cond)
[10:30:56.932]                 })
[10:30:56.932]             }))
[10:30:56.932]             future::FutureResult(value = ...future.value$value, 
[10:30:56.932]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:56.932]                   ...future.rng), globalenv = if (FALSE) 
[10:30:56.932]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:30:56.932]                     ...future.globalenv.names))
[10:30:56.932]                 else NULL, started = ...future.startTime, version = "1.8")
[10:30:56.932]         }, condition = base::local({
[10:30:56.932]             c <- base::c
[10:30:56.932]             inherits <- base::inherits
[10:30:56.932]             invokeRestart <- base::invokeRestart
[10:30:56.932]             length <- base::length
[10:30:56.932]             list <- base::list
[10:30:56.932]             seq.int <- base::seq.int
[10:30:56.932]             signalCondition <- base::signalCondition
[10:30:56.932]             sys.calls <- base::sys.calls
[10:30:56.932]             `[[` <- base::`[[`
[10:30:56.932]             `+` <- base::`+`
[10:30:56.932]             `<<-` <- base::`<<-`
[10:30:56.932]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:30:56.932]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:30:56.932]                   3L)]
[10:30:56.932]             }
[10:30:56.932]             function(cond) {
[10:30:56.932]                 is_error <- inherits(cond, "error")
[10:30:56.932]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:30:56.932]                   NULL)
[10:30:56.932]                 if (is_error) {
[10:30:56.932]                   sessionInformation <- function() {
[10:30:56.932]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:30:56.932]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:30:56.932]                       search = base::search(), system = base::Sys.info())
[10:30:56.932]                   }
[10:30:56.932]                   ...future.conditions[[length(...future.conditions) + 
[10:30:56.932]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:30:56.932]                     cond$call), session = sessionInformation(), 
[10:30:56.932]                     timestamp = base::Sys.time(), signaled = 0L)
[10:30:56.932]                   signalCondition(cond)
[10:30:56.932]                 }
[10:30:56.932]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:30:56.932]                 "immediateCondition"))) {
[10:30:56.932]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:30:56.932]                   ...future.conditions[[length(...future.conditions) + 
[10:30:56.932]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:30:56.932]                   if (TRUE && !signal) {
[10:30:56.932]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.932]                     {
[10:30:56.932]                       inherits <- base::inherits
[10:30:56.932]                       invokeRestart <- base::invokeRestart
[10:30:56.932]                       is.null <- base::is.null
[10:30:56.932]                       muffled <- FALSE
[10:30:56.932]                       if (inherits(cond, "message")) {
[10:30:56.932]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:56.932]                         if (muffled) 
[10:30:56.932]                           invokeRestart("muffleMessage")
[10:30:56.932]                       }
[10:30:56.932]                       else if (inherits(cond, "warning")) {
[10:30:56.932]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:56.932]                         if (muffled) 
[10:30:56.932]                           invokeRestart("muffleWarning")
[10:30:56.932]                       }
[10:30:56.932]                       else if (inherits(cond, "condition")) {
[10:30:56.932]                         if (!is.null(pattern)) {
[10:30:56.932]                           computeRestarts <- base::computeRestarts
[10:30:56.932]                           grepl <- base::grepl
[10:30:56.932]                           restarts <- computeRestarts(cond)
[10:30:56.932]                           for (restart in restarts) {
[10:30:56.932]                             name <- restart$name
[10:30:56.932]                             if (is.null(name)) 
[10:30:56.932]                               next
[10:30:56.932]                             if (!grepl(pattern, name)) 
[10:30:56.932]                               next
[10:30:56.932]                             invokeRestart(restart)
[10:30:56.932]                             muffled <- TRUE
[10:30:56.932]                             break
[10:30:56.932]                           }
[10:30:56.932]                         }
[10:30:56.932]                       }
[10:30:56.932]                       invisible(muffled)
[10:30:56.932]                     }
[10:30:56.932]                     muffleCondition(cond, pattern = "^muffle")
[10:30:56.932]                   }
[10:30:56.932]                 }
[10:30:56.932]                 else {
[10:30:56.932]                   if (TRUE) {
[10:30:56.932]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:56.932]                     {
[10:30:56.932]                       inherits <- base::inherits
[10:30:56.932]                       invokeRestart <- base::invokeRestart
[10:30:56.932]                       is.null <- base::is.null
[10:30:56.932]                       muffled <- FALSE
[10:30:56.932]                       if (inherits(cond, "message")) {
[10:30:56.932]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:56.932]                         if (muffled) 
[10:30:56.932]                           invokeRestart("muffleMessage")
[10:30:56.932]                       }
[10:30:56.932]                       else if (inherits(cond, "warning")) {
[10:30:56.932]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:56.932]                         if (muffled) 
[10:30:56.932]                           invokeRestart("muffleWarning")
[10:30:56.932]                       }
[10:30:56.932]                       else if (inherits(cond, "condition")) {
[10:30:56.932]                         if (!is.null(pattern)) {
[10:30:56.932]                           computeRestarts <- base::computeRestarts
[10:30:56.932]                           grepl <- base::grepl
[10:30:56.932]                           restarts <- computeRestarts(cond)
[10:30:56.932]                           for (restart in restarts) {
[10:30:56.932]                             name <- restart$name
[10:30:56.932]                             if (is.null(name)) 
[10:30:56.932]                               next
[10:30:56.932]                             if (!grepl(pattern, name)) 
[10:30:56.932]                               next
[10:30:56.932]                             invokeRestart(restart)
[10:30:56.932]                             muffled <- TRUE
[10:30:56.932]                             break
[10:30:56.932]                           }
[10:30:56.932]                         }
[10:30:56.932]                       }
[10:30:56.932]                       invisible(muffled)
[10:30:56.932]                     }
[10:30:56.932]                     muffleCondition(cond, pattern = "^muffle")
[10:30:56.932]                   }
[10:30:56.932]                 }
[10:30:56.932]             }
[10:30:56.932]         }))
[10:30:56.932]     }, error = function(ex) {
[10:30:56.932]         base::structure(base::list(value = NULL, visible = NULL, 
[10:30:56.932]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:56.932]                 ...future.rng), started = ...future.startTime, 
[10:30:56.932]             finished = Sys.time(), session_uuid = NA_character_, 
[10:30:56.932]             version = "1.8"), class = "FutureResult")
[10:30:56.932]     }, finally = {
[10:30:56.932]         if (!identical(...future.workdir, getwd())) 
[10:30:56.932]             setwd(...future.workdir)
[10:30:56.932]         {
[10:30:56.932]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:30:56.932]                 ...future.oldOptions$nwarnings <- NULL
[10:30:56.932]             }
[10:30:56.932]             base::options(...future.oldOptions)
[10:30:56.932]             if (.Platform$OS.type == "windows") {
[10:30:56.932]                 old_names <- names(...future.oldEnvVars)
[10:30:56.932]                 envs <- base::Sys.getenv()
[10:30:56.932]                 names <- names(envs)
[10:30:56.932]                 common <- intersect(names, old_names)
[10:30:56.932]                 added <- setdiff(names, old_names)
[10:30:56.932]                 removed <- setdiff(old_names, names)
[10:30:56.932]                 changed <- common[...future.oldEnvVars[common] != 
[10:30:56.932]                   envs[common]]
[10:30:56.932]                 NAMES <- toupper(changed)
[10:30:56.932]                 args <- list()
[10:30:56.932]                 for (kk in seq_along(NAMES)) {
[10:30:56.932]                   name <- changed[[kk]]
[10:30:56.932]                   NAME <- NAMES[[kk]]
[10:30:56.932]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.932]                     next
[10:30:56.932]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:56.932]                 }
[10:30:56.932]                 NAMES <- toupper(added)
[10:30:56.932]                 for (kk in seq_along(NAMES)) {
[10:30:56.932]                   name <- added[[kk]]
[10:30:56.932]                   NAME <- NAMES[[kk]]
[10:30:56.932]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.932]                     next
[10:30:56.932]                   args[[name]] <- ""
[10:30:56.932]                 }
[10:30:56.932]                 NAMES <- toupper(removed)
[10:30:56.932]                 for (kk in seq_along(NAMES)) {
[10:30:56.932]                   name <- removed[[kk]]
[10:30:56.932]                   NAME <- NAMES[[kk]]
[10:30:56.932]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:56.932]                     next
[10:30:56.932]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:56.932]                 }
[10:30:56.932]                 if (length(args) > 0) 
[10:30:56.932]                   base::do.call(base::Sys.setenv, args = args)
[10:30:56.932]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:30:56.932]             }
[10:30:56.932]             else {
[10:30:56.932]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:30:56.932]             }
[10:30:56.932]             {
[10:30:56.932]                 if (base::length(...future.futureOptionsAdded) > 
[10:30:56.932]                   0L) {
[10:30:56.932]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:30:56.932]                   base::names(opts) <- ...future.futureOptionsAdded
[10:30:56.932]                   base::options(opts)
[10:30:56.932]                 }
[10:30:56.932]                 {
[10:30:56.932]                   {
[10:30:56.932]                     base::options(mc.cores = ...future.mc.cores.old)
[10:30:56.932]                     NULL
[10:30:56.932]                   }
[10:30:56.932]                   options(future.plan = NULL)
[10:30:56.932]                   if (is.na(NA_character_)) 
[10:30:56.932]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:30:56.932]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:30:56.932]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:30:56.932]                     .init = FALSE)
[10:30:56.932]                 }
[10:30:56.932]             }
[10:30:56.932]         }
[10:30:56.932]     })
[10:30:56.932]     if (TRUE) {
[10:30:56.932]         base::sink(type = "output", split = FALSE)
[10:30:56.932]         if (TRUE) {
[10:30:56.932]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:30:56.932]         }
[10:30:56.932]         else {
[10:30:56.932]             ...future.result["stdout"] <- base::list(NULL)
[10:30:56.932]         }
[10:30:56.932]         base::close(...future.stdout)
[10:30:56.932]         ...future.stdout <- NULL
[10:30:56.932]     }
[10:30:56.932]     ...future.result$conditions <- ...future.conditions
[10:30:56.932]     ...future.result$finished <- base::Sys.time()
[10:30:56.932]     ...future.result
[10:30:56.932] }
[10:30:56.936] assign_globals() ...
[10:30:56.936] List of 7
[10:30:56.936]  $ ...future.FUN            :function (...)  
[10:30:56.936]  $ foo                      :function (x = 1, y = 2)  
[10:30:56.936]  $ x                        : num 3
[10:30:56.936]  $ future.call.arguments    : list()
[10:30:56.936]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:56.936]  $ ...future.elements_ii    :List of 3
[10:30:56.936]   ..$ : int 0
[10:30:56.936]   ..$ : int 0
[10:30:56.936]   ..$ : int 0
[10:30:56.936]  $ ...future.seeds_ii       :List of 3
[10:30:56.936]   ..$ : int [1:7] 10407 1666123668 -918032954 1563303830 744861469 2009520167 369843810
[10:30:56.936]   ..$ : int [1:7] 10407 1310441948 2080683693 652639441 1795850730 1953532141 354730309
[10:30:56.936]   ..$ : int [1:7] 10407 -346794781 -526954742 61882141 1694204077 -404066420 2102686045
[10:30:56.936]  $ ...future.globals.maxSize: NULL
[10:30:56.936]  - attr(*, "where")=List of 7
[10:30:56.936]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[10:30:56.936]   ..$ foo                      :<environment: R_EmptyEnv> 
[10:30:56.936]   ..$ x                        :<environment: R_EmptyEnv> 
[10:30:56.936]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[10:30:56.936]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[10:30:56.936]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[10:30:56.936]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[10:30:56.936]  - attr(*, "resolved")= logi FALSE
[10:30:56.936]  - attr(*, "total_size")= num 2200
[10:30:56.936]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:56.936]  - attr(*, "already-done")= logi TRUE
[10:30:56.950] - reassign environment for ‘...future.FUN’
[10:30:56.950] - copied ‘...future.FUN’ to environment
[10:30:56.950] - reassign environment for ‘foo’
[10:30:56.951] - copied ‘foo’ to environment
[10:30:56.951] - copied ‘x’ to environment
[10:30:56.951] - copied ‘future.call.arguments’ to environment
[10:30:56.951] - copied ‘...future.elements_ii’ to environment
[10:30:56.951] - copied ‘...future.seeds_ii’ to environment
[10:30:56.951] - copied ‘...future.globals.maxSize’ to environment
[10:30:56.951] assign_globals() ... done
[10:30:56.952] requestCore(): workers = 2
[10:30:56.954] MulticoreFuture started
[10:30:56.955] - Launch lazy future ... done
[10:30:56.955] run() for ‘MulticoreFuture’ ... done
[10:30:56.955] Created future:
[10:30:56.955] plan(): Setting new future strategy stack:
[10:30:56.956] List of future strategies:
[10:30:56.956] 1. sequential:
[10:30:56.956]    - args: function (..., envir = parent.frame())
[10:30:56.956]    - tweaked: FALSE
[10:30:56.956]    - call: NULL
[10:30:56.957] plan(): nbrOfWorkers() = 1
[10:30:56.959] plan(): Setting new future strategy stack:
[10:30:56.959] List of future strategies:
[10:30:56.959] 1. multicore:
[10:30:56.959]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:30:56.959]    - tweaked: FALSE
[10:30:56.959]    - call: plan(strategy)
[10:30:56.965] plan(): nbrOfWorkers() = 2
[10:30:56.955] MulticoreFuture:
[10:30:56.955] Label: ‘future_replicate-2’
[10:30:56.955] Expression:
[10:30:56.955] {
[10:30:56.955]     do.call(function(...) {
[10:30:56.955]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:56.955]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:56.955]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:56.955]             on.exit(options(oopts), add = TRUE)
[10:30:56.955]         }
[10:30:56.955]         {
[10:30:56.955]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:56.955]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:56.955]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:56.955]                   envir = globalenv(), inherits = FALSE)
[10:30:56.955]                 ...future.FUN(...future.X_jj, ...)
[10:30:56.955]             })
[10:30:56.955]         }
[10:30:56.955]     }, args = future.call.arguments)
[10:30:56.955] }
[10:30:56.955] Lazy evaluation: FALSE
[10:30:56.955] Asynchronous evaluation: TRUE
[10:30:56.955] Local evaluation: TRUE
[10:30:56.955] Environment: 0x55aba2ff2c58
[10:30:56.955] Capture standard output: TRUE
[10:30:56.955] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:30:56.955] Globals: 7 objects totaling 2.55 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, ...)
[10:30:56.955] Packages: <none>
[10:30:56.955] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:30:56.955] Resolved: TRUE
[10:30:56.955] Value: <not collected>
[10:30:56.955] Conditions captured: <none>
[10:30:56.955] Early signaling: FALSE
[10:30:56.955] Owner process: 7cdcbd4b-6c47-ca9a-dc3f-e18236d134b8
[10:30:56.955] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:56.966] Chunk #2 of 2 ... DONE
[10:30:56.966] Launching 2 futures (chunks) ... DONE
[10:30:56.966] Resolving 2 futures (chunks) ...
[10:30:56.967] resolve() on list ...
[10:30:56.967]  recursive: 0
[10:30:56.967]  length: 2
[10:30:56.967] 
[10:30:56.967] Future #1
[10:30:56.968] result() for MulticoreFuture ...
[10:30:56.968] result() for MulticoreFuture ...
[10:30:56.969] result() for MulticoreFuture ... done
[10:30:56.969] result() for MulticoreFuture ... done
[10:30:56.969] result() for MulticoreFuture ...
[10:30:56.969] result() for MulticoreFuture ... done
[10:30:56.969] signalConditionsASAP(MulticoreFuture, pos=1) ...
[10:30:56.969] - nx: 2
[10:30:56.970] - relay: TRUE
[10:30:56.970] - stdout: TRUE
[10:30:56.970] - signal: TRUE
[10:30:56.970] - resignal: FALSE
[10:30:56.970] - force: TRUE
[10:30:56.970] - relayed: [n=2] FALSE, FALSE
[10:30:56.970] - queued futures: [n=2] FALSE, FALSE
[10:30:56.971]  - until=1
[10:30:56.971]  - relaying element #1
[10:30:56.971] result() for MulticoreFuture ...
[10:30:56.971] result() for MulticoreFuture ... done
[10:30:56.971] result() for MulticoreFuture ...
[10:30:56.971] result() for MulticoreFuture ... done
[10:30:56.972] result() for MulticoreFuture ...
[10:30:56.972] result() for MulticoreFuture ... done
[10:30:56.972] result() for MulticoreFuture ...
[10:30:56.972] result() for MulticoreFuture ... done
[10:30:56.972] - relayed: [n=2] TRUE, FALSE
[10:30:56.972] - queued futures: [n=2] TRUE, FALSE
[10:30:56.972] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[10:30:56.973]  length: 1 (resolved future 1)
[10:30:56.973] Future #2
[10:30:56.973] result() for MulticoreFuture ...
[10:30:56.974] result() for MulticoreFuture ...
[10:30:56.974] result() for MulticoreFuture ... done
[10:30:56.974] result() for MulticoreFuture ... done
[10:30:56.974] result() for MulticoreFuture ...
[10:30:56.975] result() for MulticoreFuture ... done
[10:30:56.975] signalConditionsASAP(MulticoreFuture, pos=2) ...
[10:30:56.975] - nx: 2
[10:30:56.975] - relay: TRUE
[10:30:56.975] - stdout: TRUE
[10:30:56.975] - signal: TRUE
[10:30:56.975] - resignal: FALSE
[10:30:56.976] - force: TRUE
[10:30:56.976] - relayed: [n=2] TRUE, FALSE
[10:30:56.976] - queued futures: [n=2] TRUE, FALSE
[10:30:56.976]  - until=2
[10:30:56.976]  - relaying element #2
[10:30:56.976] result() for MulticoreFuture ...
[10:30:56.976] result() for MulticoreFuture ... done
[10:30:56.976] result() for MulticoreFuture ...
[10:30:56.977] result() for MulticoreFuture ... done
[10:30:56.977] result() for MulticoreFuture ...
[10:30:56.977] result() for MulticoreFuture ... done
[10:30:56.977] result() for MulticoreFuture ...
[10:30:56.977] result() for MulticoreFuture ... done
[10:30:56.977] - relayed: [n=2] TRUE, TRUE
[10:30:56.977] - queued futures: [n=2] TRUE, TRUE
[10:30:56.977] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[10:30:56.978]  length: 0 (resolved future 2)
[10:30:56.978] Relaying remaining futures
[10:30:56.978] signalConditionsASAP(NULL, pos=0) ...
[10:30:56.978] - nx: 2
[10:30:56.978] - relay: TRUE
[10:30:56.978] - stdout: TRUE
[10:30:56.978] - signal: TRUE
[10:30:56.978] - resignal: FALSE
[10:30:56.978] - force: TRUE
[10:30:56.979] - relayed: [n=2] TRUE, TRUE
[10:30:56.979] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:30:56.979] - relayed: [n=2] TRUE, TRUE
[10:30:56.979] - queued futures: [n=2] TRUE, TRUE
[10:30:56.979] signalConditionsASAP(NULL, pos=0) ... done
[10:30:56.979] resolve() on list ... DONE
[10:30:56.979] result() for MulticoreFuture ...
[10:30:56.979] result() for MulticoreFuture ... done
[10:30:56.980] result() for MulticoreFuture ...
[10:30:56.980] result() for MulticoreFuture ... done
[10:30:56.980] result() for MulticoreFuture ...
[10:30:56.980] result() for MulticoreFuture ... done
[10:30:56.980] result() for MulticoreFuture ...
[10:30:56.980] result() for MulticoreFuture ... done
[10:30:56.980]  - Number of value chunks collected: 2
[10:30:56.980] Resolving 2 futures (chunks) ... DONE
[10:30:56.980] Reducing values from 2 chunks ...
[10:30:56.981]  - Number of values collected after concatenation: 5
[10:30:56.981]  - Number of values expected: 5
[10:30:56.981] Reducing values from 2 chunks ... DONE
[10:30:56.981] future_lapply() ... DONE
[10:30:56.982] plan(): Setting new future strategy stack:
[10:30:56.982] List of future strategies:
[10:30:56.982] 1. sequential:
[10:30:56.982]    - args: function (..., envir = parent.frame())
[10:30:56.982]    - tweaked: FALSE
[10:30:56.982]    - call: plan(sequential)
[10:30:56.982] plan(): nbrOfWorkers() = 1
*** strategy = ‘multicore’ ... done
*** strategy = ‘multisession’ ...
[10:30:56.983] plan(): Setting new future strategy stack:
[10:30:56.983] List of future strategies:
[10:30:56.983] 1. multisession:
[10:30:56.983]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:30:56.983]    - tweaked: FALSE
[10:30:56.983]    - call: plan(strategy)
[10:30:56.983] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:30:56.983] multisession:
[10:30:56.983] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:30:56.983] - tweaked: FALSE
[10:30:56.983] - call: plan(strategy)
[10:30:56.991] getGlobalsAndPackages() ...
[10:30:56.991] Not searching for globals
[10:30:56.991] - globals: [0] <none>
[10:30:56.991] getGlobalsAndPackages() ... DONE
[10:30:56.992] [local output] makeClusterPSOCK() ...
[10:30:57.038] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[10:30:57.039] [local output] Base port: 11804
[10:30:57.039] [local output] Getting setup options for 2 cluster nodes ...
[10:30:57.040] [local output]  - Node 1 of 2 ...
[10:30:57.040] [local output] localMachine=TRUE => revtunnel=FALSE

[10:30:57.041] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpkDVBSn/worker.rank=1.parallelly.parent=74656.123a061377778.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpkDVBSn/worker.rank=1.parallelly.parent=74656.123a061377778.pid")'’
[10:30:57.235] - Possible to infer worker's PID: TRUE
[10:30:57.235] [local output] Rscript port: 11804

[10:30:57.236] [local output]  - Node 2 of 2 ...
[10:30:57.236] [local output] localMachine=TRUE => revtunnel=FALSE

[10:30:57.237] [local output] Rscript port: 11804

[10:30:57.237] [local output] Getting setup options for 2 cluster nodes ... done
[10:30:57.237] [local output]  - Parallel setup requested for some PSOCK nodes
[10:30:57.238] [local output] Setting up PSOCK nodes in parallel
[10:30:57.238] List of 36
[10:30:57.238]  $ worker          : chr "localhost"
[10:30:57.238]   ..- attr(*, "localhost")= logi TRUE
[10:30:57.238]  $ master          : chr "localhost"
[10:30:57.238]  $ port            : int 11804
[10:30:57.238]  $ connectTimeout  : num 120
[10:30:57.238]  $ timeout         : num 2592000
[10:30:57.238]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:30:57.238]  $ homogeneous     : logi TRUE
[10:30:57.238]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:30:57.238]  $ rscript_envs    : NULL
[10:30:57.238]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:30:57.238]  $ rscript_startup : NULL
[10:30:57.238]  $ rscript_sh      : chr "sh"
[10:30:57.238]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:30:57.238]  $ methods         : logi TRUE
[10:30:57.238]  $ socketOptions   : chr "no-delay"
[10:30:57.238]  $ useXDR          : logi FALSE
[10:30:57.238]  $ outfile         : chr "/dev/null"
[10:30:57.238]  $ renice          : int NA
[10:30:57.238]  $ rshcmd          : NULL
[10:30:57.238]  $ user            : chr(0) 
[10:30:57.238]  $ revtunnel       : logi FALSE
[10:30:57.238]  $ rshlogfile      : NULL
[10:30:57.238]  $ rshopts         : chr(0) 
[10:30:57.238]  $ rank            : int 1
[10:30:57.238]  $ manual          : logi FALSE
[10:30:57.238]  $ dryrun          : logi FALSE
[10:30:57.238]  $ quiet           : logi FALSE
[10:30:57.238]  $ setup_strategy  : chr "parallel"
[10:30:57.238]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:30:57.238]  $ pidfile         : chr "/tmp/RtmpkDVBSn/worker.rank=1.parallelly.parent=74656.123a061377778.pid"
[10:30:57.238]  $ rshcmd_label    : NULL
[10:30:57.238]  $ rsh_call        : NULL
[10:30:57.238]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:30:57.238]  $ localMachine    : logi TRUE
[10:30:57.238]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:30:57.238]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:30:57.238]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:30:57.238]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:30:57.238]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:30:57.238]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:30:57.238]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:30:57.238]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:30:57.238]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:30:57.238]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:30:57.238]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:30:57.238]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:30:57.238]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:30:57.238]  $ arguments       :List of 28
[10:30:57.238]   ..$ worker          : chr "localhost"
[10:30:57.238]   ..$ master          : NULL
[10:30:57.238]   ..$ port            : int 11804
[10:30:57.238]   ..$ connectTimeout  : num 120
[10:30:57.238]   ..$ timeout         : num 2592000
[10:30:57.238]   ..$ rscript         : NULL
[10:30:57.238]   ..$ homogeneous     : NULL
[10:30:57.238]   ..$ rscript_args    : NULL
[10:30:57.238]   ..$ rscript_envs    : NULL
[10:30:57.238]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:30:57.238]   ..$ rscript_startup : NULL
[10:30:57.238]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:30:57.238]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:30:57.238]   ..$ methods         : logi TRUE
[10:30:57.238]   ..$ socketOptions   : chr "no-delay"
[10:30:57.238]   ..$ useXDR          : logi FALSE
[10:30:57.238]   ..$ outfile         : chr "/dev/null"
[10:30:57.238]   ..$ renice          : int NA
[10:30:57.238]   ..$ rshcmd          : NULL
[10:30:57.238]   ..$ user            : NULL
[10:30:57.238]   ..$ revtunnel       : logi NA
[10:30:57.238]   ..$ rshlogfile      : NULL
[10:30:57.238]   ..$ rshopts         : NULL
[10:30:57.238]   ..$ rank            : int 1
[10:30:57.238]   ..$ manual          : logi FALSE
[10:30:57.238]   ..$ dryrun          : logi FALSE
[10:30:57.238]   ..$ quiet           : logi FALSE
[10:30:57.238]   ..$ setup_strategy  : chr "parallel"
[10:30:57.238]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:30:57.255] [local output] System call to launch all workers:
[10:30:57.255] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpkDVBSn/worker.rank=1.parallelly.parent=74656.123a061377778.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11804 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:30:57.255] [local output] Starting PSOCK main server
[10:30:57.261] [local output] Workers launched
[10:30:57.261] [local output] Waiting for workers to connect back
[10:30:57.261]  - [local output] 0 workers out of 2 ready
[10:30:57.508]  - [local output] 0 workers out of 2 ready
[10:30:57.509]  - [local output] 1 workers out of 2 ready
[10:30:57.512]  - [local output] 1 workers out of 2 ready
[10:30:57.513]  - [local output] 2 workers out of 2 ready
[10:30:57.513] [local output] Launching of workers completed
[10:30:57.513] [local output] Collecting session information from workers
[10:30:57.514] [local output]  - Worker #1 of 2
[10:30:57.514] [local output]  - Worker #2 of 2
[10:30:57.515] [local output] makeClusterPSOCK() ... done
[10:30:57.526] Packages needed by the future expression (n = 0): <none>
[10:30:57.526] Packages needed by future strategies (n = 0): <none>
[10:30:57.527] {
[10:30:57.527]     {
[10:30:57.527]         {
[10:30:57.527]             ...future.startTime <- base::Sys.time()
[10:30:57.527]             {
[10:30:57.527]                 {
[10:30:57.527]                   {
[10:30:57.527]                     {
[10:30:57.527]                       base::local({
[10:30:57.527]                         has_future <- base::requireNamespace("future", 
[10:30:57.527]                           quietly = TRUE)
[10:30:57.527]                         if (has_future) {
[10:30:57.527]                           ns <- base::getNamespace("future")
[10:30:57.527]                           version <- ns[[".package"]][["version"]]
[10:30:57.527]                           if (is.null(version)) 
[10:30:57.527]                             version <- utils::packageVersion("future")
[10:30:57.527]                         }
[10:30:57.527]                         else {
[10:30:57.527]                           version <- NULL
[10:30:57.527]                         }
[10:30:57.527]                         if (!has_future || version < "1.8.0") {
[10:30:57.527]                           info <- base::c(r_version = base::gsub("R version ", 
[10:30:57.527]                             "", base::R.version$version.string), 
[10:30:57.527]                             platform = base::sprintf("%s (%s-bit)", 
[10:30:57.527]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:30:57.527]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:30:57.527]                               "release", "version")], collapse = " "), 
[10:30:57.527]                             hostname = base::Sys.info()[["nodename"]])
[10:30:57.527]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:30:57.527]                             info)
[10:30:57.527]                           info <- base::paste(info, collapse = "; ")
[10:30:57.527]                           if (!has_future) {
[10:30:57.527]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:30:57.527]                               info)
[10:30:57.527]                           }
[10:30:57.527]                           else {
[10:30:57.527]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:30:57.527]                               info, version)
[10:30:57.527]                           }
[10:30:57.527]                           base::stop(msg)
[10:30:57.527]                         }
[10:30:57.527]                       })
[10:30:57.527]                     }
[10:30:57.527]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:30:57.527]                     base::options(mc.cores = 1L)
[10:30:57.527]                   }
[10:30:57.527]                   ...future.strategy.old <- future::plan("list")
[10:30:57.527]                   options(future.plan = NULL)
[10:30:57.527]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:30:57.527]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:30:57.527]                 }
[10:30:57.527]                 ...future.workdir <- getwd()
[10:30:57.527]             }
[10:30:57.527]             ...future.oldOptions <- base::as.list(base::.Options)
[10:30:57.527]             ...future.oldEnvVars <- base::Sys.getenv()
[10:30:57.527]         }
[10:30:57.527]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:30:57.527]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:30:57.527]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:30:57.527]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:30:57.527]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:30:57.527]             future.stdout.windows.reencode = NULL, width = 80L)
[10:30:57.527]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:30:57.527]             base::names(...future.oldOptions))
[10:30:57.527]     }
[10:30:57.527]     if (FALSE) {
[10:30:57.527]     }
[10:30:57.527]     else {
[10:30:57.527]         if (TRUE) {
[10:30:57.527]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:30:57.527]                 open = "w")
[10:30:57.527]         }
[10:30:57.527]         else {
[10:30:57.527]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:30:57.527]                 windows = "NUL", "/dev/null"), open = "w")
[10:30:57.527]         }
[10:30:57.527]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:30:57.527]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:30:57.527]             base::sink(type = "output", split = FALSE)
[10:30:57.527]             base::close(...future.stdout)
[10:30:57.527]         }, add = TRUE)
[10:30:57.527]     }
[10:30:57.527]     ...future.frame <- base::sys.nframe()
[10:30:57.527]     ...future.conditions <- base::list()
[10:30:57.527]     ...future.rng <- base::globalenv()$.Random.seed
[10:30:57.527]     if (FALSE) {
[10:30:57.527]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:30:57.527]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:30:57.527]     }
[10:30:57.527]     ...future.result <- base::tryCatch({
[10:30:57.527]         base::withCallingHandlers({
[10:30:57.527]             ...future.value <- base::withVisible(base::local({
[10:30:57.527]                 ...future.makeSendCondition <- base::local({
[10:30:57.527]                   sendCondition <- NULL
[10:30:57.527]                   function(frame = 1L) {
[10:30:57.527]                     if (is.function(sendCondition)) 
[10:30:57.527]                       return(sendCondition)
[10:30:57.527]                     ns <- getNamespace("parallel")
[10:30:57.527]                     if (exists("sendData", mode = "function", 
[10:30:57.527]                       envir = ns)) {
[10:30:57.527]                       parallel_sendData <- get("sendData", mode = "function", 
[10:30:57.527]                         envir = ns)
[10:30:57.527]                       envir <- sys.frame(frame)
[10:30:57.527]                       master <- NULL
[10:30:57.527]                       while (!identical(envir, .GlobalEnv) && 
[10:30:57.527]                         !identical(envir, emptyenv())) {
[10:30:57.527]                         if (exists("master", mode = "list", envir = envir, 
[10:30:57.527]                           inherits = FALSE)) {
[10:30:57.527]                           master <- get("master", mode = "list", 
[10:30:57.527]                             envir = envir, inherits = FALSE)
[10:30:57.527]                           if (inherits(master, c("SOCKnode", 
[10:30:57.527]                             "SOCK0node"))) {
[10:30:57.527]                             sendCondition <<- function(cond) {
[10:30:57.527]                               data <- list(type = "VALUE", value = cond, 
[10:30:57.527]                                 success = TRUE)
[10:30:57.527]                               parallel_sendData(master, data)
[10:30:57.527]                             }
[10:30:57.527]                             return(sendCondition)
[10:30:57.527]                           }
[10:30:57.527]                         }
[10:30:57.527]                         frame <- frame + 1L
[10:30:57.527]                         envir <- sys.frame(frame)
[10:30:57.527]                       }
[10:30:57.527]                     }
[10:30:57.527]                     sendCondition <<- function(cond) NULL
[10:30:57.527]                   }
[10:30:57.527]                 })
[10:30:57.527]                 withCallingHandlers({
[10:30:57.527]                   NA
[10:30:57.527]                 }, immediateCondition = function(cond) {
[10:30:57.527]                   sendCondition <- ...future.makeSendCondition()
[10:30:57.527]                   sendCondition(cond)
[10:30:57.527]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:57.527]                   {
[10:30:57.527]                     inherits <- base::inherits
[10:30:57.527]                     invokeRestart <- base::invokeRestart
[10:30:57.527]                     is.null <- base::is.null
[10:30:57.527]                     muffled <- FALSE
[10:30:57.527]                     if (inherits(cond, "message")) {
[10:30:57.527]                       muffled <- grepl(pattern, "muffleMessage")
[10:30:57.527]                       if (muffled) 
[10:30:57.527]                         invokeRestart("muffleMessage")
[10:30:57.527]                     }
[10:30:57.527]                     else if (inherits(cond, "warning")) {
[10:30:57.527]                       muffled <- grepl(pattern, "muffleWarning")
[10:30:57.527]                       if (muffled) 
[10:30:57.527]                         invokeRestart("muffleWarning")
[10:30:57.527]                     }
[10:30:57.527]                     else if (inherits(cond, "condition")) {
[10:30:57.527]                       if (!is.null(pattern)) {
[10:30:57.527]                         computeRestarts <- base::computeRestarts
[10:30:57.527]                         grepl <- base::grepl
[10:30:57.527]                         restarts <- computeRestarts(cond)
[10:30:57.527]                         for (restart in restarts) {
[10:30:57.527]                           name <- restart$name
[10:30:57.527]                           if (is.null(name)) 
[10:30:57.527]                             next
[10:30:57.527]                           if (!grepl(pattern, name)) 
[10:30:57.527]                             next
[10:30:57.527]                           invokeRestart(restart)
[10:30:57.527]                           muffled <- TRUE
[10:30:57.527]                           break
[10:30:57.527]                         }
[10:30:57.527]                       }
[10:30:57.527]                     }
[10:30:57.527]                     invisible(muffled)
[10:30:57.527]                   }
[10:30:57.527]                   muffleCondition(cond)
[10:30:57.527]                 })
[10:30:57.527]             }))
[10:30:57.527]             future::FutureResult(value = ...future.value$value, 
[10:30:57.527]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:57.527]                   ...future.rng), globalenv = if (FALSE) 
[10:30:57.527]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:30:57.527]                     ...future.globalenv.names))
[10:30:57.527]                 else NULL, started = ...future.startTime, version = "1.8")
[10:30:57.527]         }, condition = base::local({
[10:30:57.527]             c <- base::c
[10:30:57.527]             inherits <- base::inherits
[10:30:57.527]             invokeRestart <- base::invokeRestart
[10:30:57.527]             length <- base::length
[10:30:57.527]             list <- base::list
[10:30:57.527]             seq.int <- base::seq.int
[10:30:57.527]             signalCondition <- base::signalCondition
[10:30:57.527]             sys.calls <- base::sys.calls
[10:30:57.527]             `[[` <- base::`[[`
[10:30:57.527]             `+` <- base::`+`
[10:30:57.527]             `<<-` <- base::`<<-`
[10:30:57.527]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:30:57.527]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:30:57.527]                   3L)]
[10:30:57.527]             }
[10:30:57.527]             function(cond) {
[10:30:57.527]                 is_error <- inherits(cond, "error")
[10:30:57.527]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:30:57.527]                   NULL)
[10:30:57.527]                 if (is_error) {
[10:30:57.527]                   sessionInformation <- function() {
[10:30:57.527]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:30:57.527]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:30:57.527]                       search = base::search(), system = base::Sys.info())
[10:30:57.527]                   }
[10:30:57.527]                   ...future.conditions[[length(...future.conditions) + 
[10:30:57.527]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:30:57.527]                     cond$call), session = sessionInformation(), 
[10:30:57.527]                     timestamp = base::Sys.time(), signaled = 0L)
[10:30:57.527]                   signalCondition(cond)
[10:30:57.527]                 }
[10:30:57.527]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:30:57.527]                 "immediateCondition"))) {
[10:30:57.527]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:30:57.527]                   ...future.conditions[[length(...future.conditions) + 
[10:30:57.527]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:30:57.527]                   if (TRUE && !signal) {
[10:30:57.527]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:57.527]                     {
[10:30:57.527]                       inherits <- base::inherits
[10:30:57.527]                       invokeRestart <- base::invokeRestart
[10:30:57.527]                       is.null <- base::is.null
[10:30:57.527]                       muffled <- FALSE
[10:30:57.527]                       if (inherits(cond, "message")) {
[10:30:57.527]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:57.527]                         if (muffled) 
[10:30:57.527]                           invokeRestart("muffleMessage")
[10:30:57.527]                       }
[10:30:57.527]                       else if (inherits(cond, "warning")) {
[10:30:57.527]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:57.527]                         if (muffled) 
[10:30:57.527]                           invokeRestart("muffleWarning")
[10:30:57.527]                       }
[10:30:57.527]                       else if (inherits(cond, "condition")) {
[10:30:57.527]                         if (!is.null(pattern)) {
[10:30:57.527]                           computeRestarts <- base::computeRestarts
[10:30:57.527]                           grepl <- base::grepl
[10:30:57.527]                           restarts <- computeRestarts(cond)
[10:30:57.527]                           for (restart in restarts) {
[10:30:57.527]                             name <- restart$name
[10:30:57.527]                             if (is.null(name)) 
[10:30:57.527]                               next
[10:30:57.527]                             if (!grepl(pattern, name)) 
[10:30:57.527]                               next
[10:30:57.527]                             invokeRestart(restart)
[10:30:57.527]                             muffled <- TRUE
[10:30:57.527]                             break
[10:30:57.527]                           }
[10:30:57.527]                         }
[10:30:57.527]                       }
[10:30:57.527]                       invisible(muffled)
[10:30:57.527]                     }
[10:30:57.527]                     muffleCondition(cond, pattern = "^muffle")
[10:30:57.527]                   }
[10:30:57.527]                 }
[10:30:57.527]                 else {
[10:30:57.527]                   if (TRUE) {
[10:30:57.527]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:57.527]                     {
[10:30:57.527]                       inherits <- base::inherits
[10:30:57.527]                       invokeRestart <- base::invokeRestart
[10:30:57.527]                       is.null <- base::is.null
[10:30:57.527]                       muffled <- FALSE
[10:30:57.527]                       if (inherits(cond, "message")) {
[10:30:57.527]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:57.527]                         if (muffled) 
[10:30:57.527]                           invokeRestart("muffleMessage")
[10:30:57.527]                       }
[10:30:57.527]                       else if (inherits(cond, "warning")) {
[10:30:57.527]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:57.527]                         if (muffled) 
[10:30:57.527]                           invokeRestart("muffleWarning")
[10:30:57.527]                       }
[10:30:57.527]                       else if (inherits(cond, "condition")) {
[10:30:57.527]                         if (!is.null(pattern)) {
[10:30:57.527]                           computeRestarts <- base::computeRestarts
[10:30:57.527]                           grepl <- base::grepl
[10:30:57.527]                           restarts <- computeRestarts(cond)
[10:30:57.527]                           for (restart in restarts) {
[10:30:57.527]                             name <- restart$name
[10:30:57.527]                             if (is.null(name)) 
[10:30:57.527]                               next
[10:30:57.527]                             if (!grepl(pattern, name)) 
[10:30:57.527]                               next
[10:30:57.527]                             invokeRestart(restart)
[10:30:57.527]                             muffled <- TRUE
[10:30:57.527]                             break
[10:30:57.527]                           }
[10:30:57.527]                         }
[10:30:57.527]                       }
[10:30:57.527]                       invisible(muffled)
[10:30:57.527]                     }
[10:30:57.527]                     muffleCondition(cond, pattern = "^muffle")
[10:30:57.527]                   }
[10:30:57.527]                 }
[10:30:57.527]             }
[10:30:57.527]         }))
[10:30:57.527]     }, error = function(ex) {
[10:30:57.527]         base::structure(base::list(value = NULL, visible = NULL, 
[10:30:57.527]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:57.527]                 ...future.rng), started = ...future.startTime, 
[10:30:57.527]             finished = Sys.time(), session_uuid = NA_character_, 
[10:30:57.527]             version = "1.8"), class = "FutureResult")
[10:30:57.527]     }, finally = {
[10:30:57.527]         if (!identical(...future.workdir, getwd())) 
[10:30:57.527]             setwd(...future.workdir)
[10:30:57.527]         {
[10:30:57.527]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:30:57.527]                 ...future.oldOptions$nwarnings <- NULL
[10:30:57.527]             }
[10:30:57.527]             base::options(...future.oldOptions)
[10:30:57.527]             if (.Platform$OS.type == "windows") {
[10:30:57.527]                 old_names <- names(...future.oldEnvVars)
[10:30:57.527]                 envs <- base::Sys.getenv()
[10:30:57.527]                 names <- names(envs)
[10:30:57.527]                 common <- intersect(names, old_names)
[10:30:57.527]                 added <- setdiff(names, old_names)
[10:30:57.527]                 removed <- setdiff(old_names, names)
[10:30:57.527]                 changed <- common[...future.oldEnvVars[common] != 
[10:30:57.527]                   envs[common]]
[10:30:57.527]                 NAMES <- toupper(changed)
[10:30:57.527]                 args <- list()
[10:30:57.527]                 for (kk in seq_along(NAMES)) {
[10:30:57.527]                   name <- changed[[kk]]
[10:30:57.527]                   NAME <- NAMES[[kk]]
[10:30:57.527]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:57.527]                     next
[10:30:57.527]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:57.527]                 }
[10:30:57.527]                 NAMES <- toupper(added)
[10:30:57.527]                 for (kk in seq_along(NAMES)) {
[10:30:57.527]                   name <- added[[kk]]
[10:30:57.527]                   NAME <- NAMES[[kk]]
[10:30:57.527]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:57.527]                     next
[10:30:57.527]                   args[[name]] <- ""
[10:30:57.527]                 }
[10:30:57.527]                 NAMES <- toupper(removed)
[10:30:57.527]                 for (kk in seq_along(NAMES)) {
[10:30:57.527]                   name <- removed[[kk]]
[10:30:57.527]                   NAME <- NAMES[[kk]]
[10:30:57.527]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:57.527]                     next
[10:30:57.527]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:57.527]                 }
[10:30:57.527]                 if (length(args) > 0) 
[10:30:57.527]                   base::do.call(base::Sys.setenv, args = args)
[10:30:57.527]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:30:57.527]             }
[10:30:57.527]             else {
[10:30:57.527]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:30:57.527]             }
[10:30:57.527]             {
[10:30:57.527]                 if (base::length(...future.futureOptionsAdded) > 
[10:30:57.527]                   0L) {
[10:30:57.527]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:30:57.527]                   base::names(opts) <- ...future.futureOptionsAdded
[10:30:57.527]                   base::options(opts)
[10:30:57.527]                 }
[10:30:57.527]                 {
[10:30:57.527]                   {
[10:30:57.527]                     base::options(mc.cores = ...future.mc.cores.old)
[10:30:57.527]                     NULL
[10:30:57.527]                   }
[10:30:57.527]                   options(future.plan = NULL)
[10:30:57.527]                   if (is.na(NA_character_)) 
[10:30:57.527]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:30:57.527]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:30:57.527]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:30:57.527]                     .init = FALSE)
[10:30:57.527]                 }
[10:30:57.527]             }
[10:30:57.527]         }
[10:30:57.527]     })
[10:30:57.527]     if (TRUE) {
[10:30:57.527]         base::sink(type = "output", split = FALSE)
[10:30:57.527]         if (TRUE) {
[10:30:57.527]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:30:57.527]         }
[10:30:57.527]         else {
[10:30:57.527]             ...future.result["stdout"] <- base::list(NULL)
[10:30:57.527]         }
[10:30:57.527]         base::close(...future.stdout)
[10:30:57.527]         ...future.stdout <- NULL
[10:30:57.527]     }
[10:30:57.527]     ...future.result$conditions <- ...future.conditions
[10:30:57.527]     ...future.result$finished <- base::Sys.time()
[10:30:57.527]     ...future.result
[10:30:57.527] }
[10:30:57.582] MultisessionFuture started
[10:30:57.582] result() for ClusterFuture ...
[10:30:57.583] receiveMessageFromWorker() for ClusterFuture ...
[10:30:57.583] - Validating connection of MultisessionFuture
[10:30:57.616] - received message: FutureResult
[10:30:57.617] - Received FutureResult
[10:30:57.617] - Erased future from FutureRegistry
[10:30:57.617] result() for ClusterFuture ...
[10:30:57.617] - result already collected: FutureResult
[10:30:57.617] result() for ClusterFuture ... done
[10:30:57.617] receiveMessageFromWorker() for ClusterFuture ... done
[10:30:57.618] result() for ClusterFuture ... done
[10:30:57.618] result() for ClusterFuture ...
[10:30:57.618] - result already collected: FutureResult
[10:30:57.618] result() for ClusterFuture ... done
[10:30:57.618] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:30:57.622] plan(): nbrOfWorkers() = 2
[10:30:57.622] future_lapply() ...
[10:30:57.623] Generating random seeds ...
[10:30:57.623] Generating random seed streams for 5 elements ...
[10:30:57.623] Generating random seed streams for 5 elements ... DONE
[10:30:57.623] Generating random seeds ... DONE
[10:30:57.624] Will set RNG state on exit: 10403, 17, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:30:57.628] Number of chunks: 2
[10:30:57.628] getGlobalsAndPackagesXApply() ...
[10:30:57.628]  - future.globals: TRUE
[10:30:57.628] getGlobalsAndPackages() ...
[10:30:57.628] Searching for globals...
[10:30:57.630] - globals found: [2] ‘FUN’, ‘sample’
[10:30:57.630] Searching for globals ... DONE
[10:30:57.630] Resolving globals: FALSE
[10:30:57.630] The total size of the 1 globals is 616 bytes (616 bytes)
[10:30:57.631] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[10:30:57.631] - globals: [1] ‘FUN’
[10:30:57.631] 
[10:30:57.631] getGlobalsAndPackages() ... DONE
[10:30:57.631]  - globals found/used: [n=1] ‘FUN’
[10:30:57.631]  - needed namespaces: [n=0] 
[10:30:57.631] Finding globals ... DONE
[10:30:57.632]  - use_args: TRUE
[10:30:57.632]  - Getting '...' globals ...
[10:30:57.632] resolve() on list ...
[10:30:57.632]  recursive: 0
[10:30:57.632]  length: 1
[10:30:57.632]  elements: ‘...’
[10:30:57.633]  length: 0 (resolved future 1)
[10:30:57.633] resolve() on list ... DONE
[10:30:57.633]    - '...' content: [n=0] 
[10:30:57.633] List of 1
[10:30:57.633]  $ ...: list()
[10:30:57.633]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:57.633]  - attr(*, "where")=List of 1
[10:30:57.633]   ..$ ...:<environment: 0x55aba3ea2708> 
[10:30:57.633]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:57.633]  - attr(*, "resolved")= logi TRUE
[10:30:57.633]  - attr(*, "total_size")= num NA
[10:30:57.636]  - Getting '...' globals ... DONE
[10:30:57.636] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:30:57.637] List of 2
[10:30:57.637]  $ ...future.FUN:function (...)  
[10:30:57.637]  $ ...          : list()
[10:30:57.637]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:57.637]  - attr(*, "where")=List of 2
[10:30:57.637]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:30:57.637]   ..$ ...          :<environment: 0x55aba3ea2708> 
[10:30:57.637]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:57.637]  - attr(*, "resolved")= logi FALSE
[10:30:57.637]  - attr(*, "total_size")= num 616
[10:30:57.640] Packages to be attached in all futures: [n=0] 
[10:30:57.640] getGlobalsAndPackagesXApply() ... DONE
[10:30:57.640] Number of futures (= number of chunks): 2
[10:30:57.640] Launching 2 futures (chunks) ...
[10:30:57.641] Chunk #1 of 2 ...
[10:30:57.641]  - Finding globals in 'X' for chunk #1 ...
[10:30:57.641] getGlobalsAndPackages() ...
[10:30:57.641] Searching for globals...
[10:30:57.641] 
[10:30:57.641] Searching for globals ... DONE
[10:30:57.642] - globals: [0] <none>
[10:30:57.642] getGlobalsAndPackages() ... DONE
[10:30:57.642]    + additional globals found: [n=0] 
[10:30:57.642]    + additional namespaces needed: [n=0] 
[10:30:57.642]  - Finding globals in 'X' for chunk #1 ... DONE
[10:30:57.642]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:30:57.642]  - seeds: [2] <seeds>
[10:30:57.642]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:57.643] getGlobalsAndPackages() ...
[10:30:57.643] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:57.643] Resolving globals: FALSE
[10:30:57.643] Tweak future expression to call with '...' arguments ...
[10:30:57.643] {
[10:30:57.643]     do.call(function(...) {
[10:30:57.643]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:57.643]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:57.643]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:57.643]             on.exit(options(oopts), add = TRUE)
[10:30:57.643]         }
[10:30:57.643]         {
[10:30:57.643]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:57.643]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:57.643]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:57.643]                   envir = globalenv(), inherits = FALSE)
[10:30:57.643]                 ...future.FUN(...future.X_jj, ...)
[10:30:57.643]             })
[10:30:57.643]         }
[10:30:57.643]     }, args = future.call.arguments)
[10:30:57.643] }
[10:30:57.643] Tweak future expression to call with '...' arguments ... DONE
[10:30:57.644] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:57.644] 
[10:30:57.644] getGlobalsAndPackages() ... DONE
[10:30:57.644] run() for ‘Future’ ...
[10:30:57.645] - state: ‘created’
[10:30:57.645] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:30:57.660] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:57.660] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:30:57.660]   - Field: ‘node’
[10:30:57.660]   - Field: ‘label’
[10:30:57.660]   - Field: ‘local’
[10:30:57.660]   - Field: ‘owner’
[10:30:57.661]   - Field: ‘envir’
[10:30:57.661]   - Field: ‘workers’
[10:30:57.661]   - Field: ‘packages’
[10:30:57.661]   - Field: ‘gc’
[10:30:57.661]   - Field: ‘conditions’
[10:30:57.661]   - Field: ‘persistent’
[10:30:57.661]   - Field: ‘expr’
[10:30:57.661]   - Field: ‘uuid’
[10:30:57.661]   - Field: ‘seed’
[10:30:57.662]   - Field: ‘version’
[10:30:57.662]   - Field: ‘result’
[10:30:57.662]   - Field: ‘asynchronous’
[10:30:57.662]   - Field: ‘calls’
[10:30:57.662]   - Field: ‘globals’
[10:30:57.662]   - Field: ‘stdout’
[10:30:57.662]   - Field: ‘earlySignal’
[10:30:57.662]   - Field: ‘lazy’
[10:30:57.662]   - Field: ‘state’
[10:30:57.663] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:30:57.663] - Launch lazy future ...
[10:30:57.663] Packages needed by the future expression (n = 0): <none>
[10:30:57.663] Packages needed by future strategies (n = 0): <none>
[10:30:57.664] {
[10:30:57.664]     {
[10:30:57.664]         {
[10:30:57.664]             ...future.startTime <- base::Sys.time()
[10:30:57.664]             {
[10:30:57.664]                 {
[10:30:57.664]                   {
[10:30:57.664]                     {
[10:30:57.664]                       base::local({
[10:30:57.664]                         has_future <- base::requireNamespace("future", 
[10:30:57.664]                           quietly = TRUE)
[10:30:57.664]                         if (has_future) {
[10:30:57.664]                           ns <- base::getNamespace("future")
[10:30:57.664]                           version <- ns[[".package"]][["version"]]
[10:30:57.664]                           if (is.null(version)) 
[10:30:57.664]                             version <- utils::packageVersion("future")
[10:30:57.664]                         }
[10:30:57.664]                         else {
[10:30:57.664]                           version <- NULL
[10:30:57.664]                         }
[10:30:57.664]                         if (!has_future || version < "1.8.0") {
[10:30:57.664]                           info <- base::c(r_version = base::gsub("R version ", 
[10:30:57.664]                             "", base::R.version$version.string), 
[10:30:57.664]                             platform = base::sprintf("%s (%s-bit)", 
[10:30:57.664]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:30:57.664]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:30:57.664]                               "release", "version")], collapse = " "), 
[10:30:57.664]                             hostname = base::Sys.info()[["nodename"]])
[10:30:57.664]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:30:57.664]                             info)
[10:30:57.664]                           info <- base::paste(info, collapse = "; ")
[10:30:57.664]                           if (!has_future) {
[10:30:57.664]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:30:57.664]                               info)
[10:30:57.664]                           }
[10:30:57.664]                           else {
[10:30:57.664]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:30:57.664]                               info, version)
[10:30:57.664]                           }
[10:30:57.664]                           base::stop(msg)
[10:30:57.664]                         }
[10:30:57.664]                       })
[10:30:57.664]                     }
[10:30:57.664]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:30:57.664]                     base::options(mc.cores = 1L)
[10:30:57.664]                   }
[10:30:57.664]                   ...future.strategy.old <- future::plan("list")
[10:30:57.664]                   options(future.plan = NULL)
[10:30:57.664]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:30:57.664]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:30:57.664]                 }
[10:30:57.664]                 ...future.workdir <- getwd()
[10:30:57.664]             }
[10:30:57.664]             ...future.oldOptions <- base::as.list(base::.Options)
[10:30:57.664]             ...future.oldEnvVars <- base::Sys.getenv()
[10:30:57.664]         }
[10:30:57.664]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:30:57.664]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:30:57.664]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:30:57.664]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:30:57.664]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:30:57.664]             future.stdout.windows.reencode = NULL, width = 80L)
[10:30:57.664]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:30:57.664]             base::names(...future.oldOptions))
[10:30:57.664]     }
[10:30:57.664]     if (FALSE) {
[10:30:57.664]     }
[10:30:57.664]     else {
[10:30:57.664]         if (TRUE) {
[10:30:57.664]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:30:57.664]                 open = "w")
[10:30:57.664]         }
[10:30:57.664]         else {
[10:30:57.664]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:30:57.664]                 windows = "NUL", "/dev/null"), open = "w")
[10:30:57.664]         }
[10:30:57.664]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:30:57.664]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:30:57.664]             base::sink(type = "output", split = FALSE)
[10:30:57.664]             base::close(...future.stdout)
[10:30:57.664]         }, add = TRUE)
[10:30:57.664]     }
[10:30:57.664]     ...future.frame <- base::sys.nframe()
[10:30:57.664]     ...future.conditions <- base::list()
[10:30:57.664]     ...future.rng <- base::globalenv()$.Random.seed
[10:30:57.664]     if (FALSE) {
[10:30:57.664]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:30:57.664]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:30:57.664]     }
[10:30:57.664]     ...future.result <- base::tryCatch({
[10:30:57.664]         base::withCallingHandlers({
[10:30:57.664]             ...future.value <- base::withVisible(base::local({
[10:30:57.664]                 ...future.makeSendCondition <- base::local({
[10:30:57.664]                   sendCondition <- NULL
[10:30:57.664]                   function(frame = 1L) {
[10:30:57.664]                     if (is.function(sendCondition)) 
[10:30:57.664]                       return(sendCondition)
[10:30:57.664]                     ns <- getNamespace("parallel")
[10:30:57.664]                     if (exists("sendData", mode = "function", 
[10:30:57.664]                       envir = ns)) {
[10:30:57.664]                       parallel_sendData <- get("sendData", mode = "function", 
[10:30:57.664]                         envir = ns)
[10:30:57.664]                       envir <- sys.frame(frame)
[10:30:57.664]                       master <- NULL
[10:30:57.664]                       while (!identical(envir, .GlobalEnv) && 
[10:30:57.664]                         !identical(envir, emptyenv())) {
[10:30:57.664]                         if (exists("master", mode = "list", envir = envir, 
[10:30:57.664]                           inherits = FALSE)) {
[10:30:57.664]                           master <- get("master", mode = "list", 
[10:30:57.664]                             envir = envir, inherits = FALSE)
[10:30:57.664]                           if (inherits(master, c("SOCKnode", 
[10:30:57.664]                             "SOCK0node"))) {
[10:30:57.664]                             sendCondition <<- function(cond) {
[10:30:57.664]                               data <- list(type = "VALUE", value = cond, 
[10:30:57.664]                                 success = TRUE)
[10:30:57.664]                               parallel_sendData(master, data)
[10:30:57.664]                             }
[10:30:57.664]                             return(sendCondition)
[10:30:57.664]                           }
[10:30:57.664]                         }
[10:30:57.664]                         frame <- frame + 1L
[10:30:57.664]                         envir <- sys.frame(frame)
[10:30:57.664]                       }
[10:30:57.664]                     }
[10:30:57.664]                     sendCondition <<- function(cond) NULL
[10:30:57.664]                   }
[10:30:57.664]                 })
[10:30:57.664]                 withCallingHandlers({
[10:30:57.664]                   {
[10:30:57.664]                     do.call(function(...) {
[10:30:57.664]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:57.664]                       if (!identical(...future.globals.maxSize.org, 
[10:30:57.664]                         ...future.globals.maxSize)) {
[10:30:57.664]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:57.664]                         on.exit(options(oopts), add = TRUE)
[10:30:57.664]                       }
[10:30:57.664]                       {
[10:30:57.664]                         lapply(seq_along(...future.elements_ii), 
[10:30:57.664]                           FUN = function(jj) {
[10:30:57.664]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:57.664]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:57.664]                               envir = globalenv(), inherits = FALSE)
[10:30:57.664]                             ...future.FUN(...future.X_jj, ...)
[10:30:57.664]                           })
[10:30:57.664]                       }
[10:30:57.664]                     }, args = future.call.arguments)
[10:30:57.664]                   }
[10:30:57.664]                 }, immediateCondition = function(cond) {
[10:30:57.664]                   sendCondition <- ...future.makeSendCondition()
[10:30:57.664]                   sendCondition(cond)
[10:30:57.664]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:57.664]                   {
[10:30:57.664]                     inherits <- base::inherits
[10:30:57.664]                     invokeRestart <- base::invokeRestart
[10:30:57.664]                     is.null <- base::is.null
[10:30:57.664]                     muffled <- FALSE
[10:30:57.664]                     if (inherits(cond, "message")) {
[10:30:57.664]                       muffled <- grepl(pattern, "muffleMessage")
[10:30:57.664]                       if (muffled) 
[10:30:57.664]                         invokeRestart("muffleMessage")
[10:30:57.664]                     }
[10:30:57.664]                     else if (inherits(cond, "warning")) {
[10:30:57.664]                       muffled <- grepl(pattern, "muffleWarning")
[10:30:57.664]                       if (muffled) 
[10:30:57.664]                         invokeRestart("muffleWarning")
[10:30:57.664]                     }
[10:30:57.664]                     else if (inherits(cond, "condition")) {
[10:30:57.664]                       if (!is.null(pattern)) {
[10:30:57.664]                         computeRestarts <- base::computeRestarts
[10:30:57.664]                         grepl <- base::grepl
[10:30:57.664]                         restarts <- computeRestarts(cond)
[10:30:57.664]                         for (restart in restarts) {
[10:30:57.664]                           name <- restart$name
[10:30:57.664]                           if (is.null(name)) 
[10:30:57.664]                             next
[10:30:57.664]                           if (!grepl(pattern, name)) 
[10:30:57.664]                             next
[10:30:57.664]                           invokeRestart(restart)
[10:30:57.664]                           muffled <- TRUE
[10:30:57.664]                           break
[10:30:57.664]                         }
[10:30:57.664]                       }
[10:30:57.664]                     }
[10:30:57.664]                     invisible(muffled)
[10:30:57.664]                   }
[10:30:57.664]                   muffleCondition(cond)
[10:30:57.664]                 })
[10:30:57.664]             }))
[10:30:57.664]             future::FutureResult(value = ...future.value$value, 
[10:30:57.664]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:57.664]                   ...future.rng), globalenv = if (FALSE) 
[10:30:57.664]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:30:57.664]                     ...future.globalenv.names))
[10:30:57.664]                 else NULL, started = ...future.startTime, version = "1.8")
[10:30:57.664]         }, condition = base::local({
[10:30:57.664]             c <- base::c
[10:30:57.664]             inherits <- base::inherits
[10:30:57.664]             invokeRestart <- base::invokeRestart
[10:30:57.664]             length <- base::length
[10:30:57.664]             list <- base::list
[10:30:57.664]             seq.int <- base::seq.int
[10:30:57.664]             signalCondition <- base::signalCondition
[10:30:57.664]             sys.calls <- base::sys.calls
[10:30:57.664]             `[[` <- base::`[[`
[10:30:57.664]             `+` <- base::`+`
[10:30:57.664]             `<<-` <- base::`<<-`
[10:30:57.664]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:30:57.664]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:30:57.664]                   3L)]
[10:30:57.664]             }
[10:30:57.664]             function(cond) {
[10:30:57.664]                 is_error <- inherits(cond, "error")
[10:30:57.664]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:30:57.664]                   NULL)
[10:30:57.664]                 if (is_error) {
[10:30:57.664]                   sessionInformation <- function() {
[10:30:57.664]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:30:57.664]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:30:57.664]                       search = base::search(), system = base::Sys.info())
[10:30:57.664]                   }
[10:30:57.664]                   ...future.conditions[[length(...future.conditions) + 
[10:30:57.664]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:30:57.664]                     cond$call), session = sessionInformation(), 
[10:30:57.664]                     timestamp = base::Sys.time(), signaled = 0L)
[10:30:57.664]                   signalCondition(cond)
[10:30:57.664]                 }
[10:30:57.664]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:30:57.664]                 "immediateCondition"))) {
[10:30:57.664]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:30:57.664]                   ...future.conditions[[length(...future.conditions) + 
[10:30:57.664]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:30:57.664]                   if (TRUE && !signal) {
[10:30:57.664]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:57.664]                     {
[10:30:57.664]                       inherits <- base::inherits
[10:30:57.664]                       invokeRestart <- base::invokeRestart
[10:30:57.664]                       is.null <- base::is.null
[10:30:57.664]                       muffled <- FALSE
[10:30:57.664]                       if (inherits(cond, "message")) {
[10:30:57.664]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:57.664]                         if (muffled) 
[10:30:57.664]                           invokeRestart("muffleMessage")
[10:30:57.664]                       }
[10:30:57.664]                       else if (inherits(cond, "warning")) {
[10:30:57.664]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:57.664]                         if (muffled) 
[10:30:57.664]                           invokeRestart("muffleWarning")
[10:30:57.664]                       }
[10:30:57.664]                       else if (inherits(cond, "condition")) {
[10:30:57.664]                         if (!is.null(pattern)) {
[10:30:57.664]                           computeRestarts <- base::computeRestarts
[10:30:57.664]                           grepl <- base::grepl
[10:30:57.664]                           restarts <- computeRestarts(cond)
[10:30:57.664]                           for (restart in restarts) {
[10:30:57.664]                             name <- restart$name
[10:30:57.664]                             if (is.null(name)) 
[10:30:57.664]                               next
[10:30:57.664]                             if (!grepl(pattern, name)) 
[10:30:57.664]                               next
[10:30:57.664]                             invokeRestart(restart)
[10:30:57.664]                             muffled <- TRUE
[10:30:57.664]                             break
[10:30:57.664]                           }
[10:30:57.664]                         }
[10:30:57.664]                       }
[10:30:57.664]                       invisible(muffled)
[10:30:57.664]                     }
[10:30:57.664]                     muffleCondition(cond, pattern = "^muffle")
[10:30:57.664]                   }
[10:30:57.664]                 }
[10:30:57.664]                 else {
[10:30:57.664]                   if (TRUE) {
[10:30:57.664]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:57.664]                     {
[10:30:57.664]                       inherits <- base::inherits
[10:30:57.664]                       invokeRestart <- base::invokeRestart
[10:30:57.664]                       is.null <- base::is.null
[10:30:57.664]                       muffled <- FALSE
[10:30:57.664]                       if (inherits(cond, "message")) {
[10:30:57.664]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:57.664]                         if (muffled) 
[10:30:57.664]                           invokeRestart("muffleMessage")
[10:30:57.664]                       }
[10:30:57.664]                       else if (inherits(cond, "warning")) {
[10:30:57.664]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:57.664]                         if (muffled) 
[10:30:57.664]                           invokeRestart("muffleWarning")
[10:30:57.664]                       }
[10:30:57.664]                       else if (inherits(cond, "condition")) {
[10:30:57.664]                         if (!is.null(pattern)) {
[10:30:57.664]                           computeRestarts <- base::computeRestarts
[10:30:57.664]                           grepl <- base::grepl
[10:30:57.664]                           restarts <- computeRestarts(cond)
[10:30:57.664]                           for (restart in restarts) {
[10:30:57.664]                             name <- restart$name
[10:30:57.664]                             if (is.null(name)) 
[10:30:57.664]                               next
[10:30:57.664]                             if (!grepl(pattern, name)) 
[10:30:57.664]                               next
[10:30:57.664]                             invokeRestart(restart)
[10:30:57.664]                             muffled <- TRUE
[10:30:57.664]                             break
[10:30:57.664]                           }
[10:30:57.664]                         }
[10:30:57.664]                       }
[10:30:57.664]                       invisible(muffled)
[10:30:57.664]                     }
[10:30:57.664]                     muffleCondition(cond, pattern = "^muffle")
[10:30:57.664]                   }
[10:30:57.664]                 }
[10:30:57.664]             }
[10:30:57.664]         }))
[10:30:57.664]     }, error = function(ex) {
[10:30:57.664]         base::structure(base::list(value = NULL, visible = NULL, 
[10:30:57.664]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:57.664]                 ...future.rng), started = ...future.startTime, 
[10:30:57.664]             finished = Sys.time(), session_uuid = NA_character_, 
[10:30:57.664]             version = "1.8"), class = "FutureResult")
[10:30:57.664]     }, finally = {
[10:30:57.664]         if (!identical(...future.workdir, getwd())) 
[10:30:57.664]             setwd(...future.workdir)
[10:30:57.664]         {
[10:30:57.664]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:30:57.664]                 ...future.oldOptions$nwarnings <- NULL
[10:30:57.664]             }
[10:30:57.664]             base::options(...future.oldOptions)
[10:30:57.664]             if (.Platform$OS.type == "windows") {
[10:30:57.664]                 old_names <- names(...future.oldEnvVars)
[10:30:57.664]                 envs <- base::Sys.getenv()
[10:30:57.664]                 names <- names(envs)
[10:30:57.664]                 common <- intersect(names, old_names)
[10:30:57.664]                 added <- setdiff(names, old_names)
[10:30:57.664]                 removed <- setdiff(old_names, names)
[10:30:57.664]                 changed <- common[...future.oldEnvVars[common] != 
[10:30:57.664]                   envs[common]]
[10:30:57.664]                 NAMES <- toupper(changed)
[10:30:57.664]                 args <- list()
[10:30:57.664]                 for (kk in seq_along(NAMES)) {
[10:30:57.664]                   name <- changed[[kk]]
[10:30:57.664]                   NAME <- NAMES[[kk]]
[10:30:57.664]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:57.664]                     next
[10:30:57.664]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:57.664]                 }
[10:30:57.664]                 NAMES <- toupper(added)
[10:30:57.664]                 for (kk in seq_along(NAMES)) {
[10:30:57.664]                   name <- added[[kk]]
[10:30:57.664]                   NAME <- NAMES[[kk]]
[10:30:57.664]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:57.664]                     next
[10:30:57.664]                   args[[name]] <- ""
[10:30:57.664]                 }
[10:30:57.664]                 NAMES <- toupper(removed)
[10:30:57.664]                 for (kk in seq_along(NAMES)) {
[10:30:57.664]                   name <- removed[[kk]]
[10:30:57.664]                   NAME <- NAMES[[kk]]
[10:30:57.664]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:57.664]                     next
[10:30:57.664]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:57.664]                 }
[10:30:57.664]                 if (length(args) > 0) 
[10:30:57.664]                   base::do.call(base::Sys.setenv, args = args)
[10:30:57.664]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:30:57.664]             }
[10:30:57.664]             else {
[10:30:57.664]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:30:57.664]             }
[10:30:57.664]             {
[10:30:57.664]                 if (base::length(...future.futureOptionsAdded) > 
[10:30:57.664]                   0L) {
[10:30:57.664]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:30:57.664]                   base::names(opts) <- ...future.futureOptionsAdded
[10:30:57.664]                   base::options(opts)
[10:30:57.664]                 }
[10:30:57.664]                 {
[10:30:57.664]                   {
[10:30:57.664]                     base::options(mc.cores = ...future.mc.cores.old)
[10:30:57.664]                     NULL
[10:30:57.664]                   }
[10:30:57.664]                   options(future.plan = NULL)
[10:30:57.664]                   if (is.na(NA_character_)) 
[10:30:57.664]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:30:57.664]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:30:57.664]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:30:57.664]                     .init = FALSE)
[10:30:57.664]                 }
[10:30:57.664]             }
[10:30:57.664]         }
[10:30:57.664]     })
[10:30:57.664]     if (TRUE) {
[10:30:57.664]         base::sink(type = "output", split = FALSE)
[10:30:57.664]         if (TRUE) {
[10:30:57.664]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:30:57.664]         }
[10:30:57.664]         else {
[10:30:57.664]             ...future.result["stdout"] <- base::list(NULL)
[10:30:57.664]         }
[10:30:57.664]         base::close(...future.stdout)
[10:30:57.664]         ...future.stdout <- NULL
[10:30:57.664]     }
[10:30:57.664]     ...future.result$conditions <- ...future.conditions
[10:30:57.664]     ...future.result$finished <- base::Sys.time()
[10:30:57.664]     ...future.result
[10:30:57.664] }
[10:30:57.667] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[10:30:57.667] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[10:30:57.668] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[10:30:57.668] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[10:30:57.668] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[10:30:57.669] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[10:30:57.669] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[10:30:57.669] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[10:30:57.670] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[10:30:57.670] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[10:30:57.670] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[10:30:57.670] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[10:30:57.671] MultisessionFuture started
[10:30:57.671] - Launch lazy future ... done
[10:30:57.671] run() for ‘MultisessionFuture’ ... done
[10:30:57.671] Created future:
[10:30:57.672] MultisessionFuture:
[10:30:57.672] Label: ‘future_replicate-1’
[10:30:57.672] Expression:
[10:30:57.672] {
[10:30:57.672]     do.call(function(...) {
[10:30:57.672]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:57.672]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:57.672]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:57.672]             on.exit(options(oopts), add = TRUE)
[10:30:57.672]         }
[10:30:57.672]         {
[10:30:57.672]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:57.672]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:57.672]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:57.672]                   envir = globalenv(), inherits = FALSE)
[10:30:57.672]                 ...future.FUN(...future.X_jj, ...)
[10:30:57.672]             })
[10:30:57.672]         }
[10:30:57.672]     }, args = future.call.arguments)
[10:30:57.672] }
[10:30:57.672] Lazy evaluation: FALSE
[10:30:57.672] Asynchronous evaluation: TRUE
[10:30:57.672] Local evaluation: TRUE
[10:30:57.672] Environment: R_GlobalEnv
[10:30:57.672] Capture standard output: TRUE
[10:30:57.672] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:30:57.672] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:30:57.672] Packages: <none>
[10:30:57.672] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:30:57.672] Resolved: FALSE
[10:30:57.672] Value: <not collected>
[10:30:57.672] Conditions captured: <none>
[10:30:57.672] Early signaling: FALSE
[10:30:57.672] Owner process: 7cdcbd4b-6c47-ca9a-dc3f-e18236d134b8
[10:30:57.672] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:57.684] Chunk #1 of 2 ... DONE
[10:30:57.684] Chunk #2 of 2 ...
[10:30:57.684]  - Finding globals in 'X' for chunk #2 ...
[10:30:57.684] getGlobalsAndPackages() ...
[10:30:57.684] Searching for globals...
[10:30:57.685] 
[10:30:57.685] Searching for globals ... DONE
[10:30:57.685] - globals: [0] <none>
[10:30:57.685] getGlobalsAndPackages() ... DONE
[10:30:57.685]    + additional globals found: [n=0] 
[10:30:57.685]    + additional namespaces needed: [n=0] 
[10:30:57.686]  - Finding globals in 'X' for chunk #2 ... DONE
[10:30:57.686]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:30:57.686]  - seeds: [3] <seeds>
[10:30:57.686]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:57.686] getGlobalsAndPackages() ...
[10:30:57.686] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:57.686] Resolving globals: FALSE
[10:30:57.686] Tweak future expression to call with '...' arguments ...
[10:30:57.687] {
[10:30:57.687]     do.call(function(...) {
[10:30:57.687]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:57.687]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:57.687]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:57.687]             on.exit(options(oopts), add = TRUE)
[10:30:57.687]         }
[10:30:57.687]         {
[10:30:57.687]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:57.687]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:57.687]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:57.687]                   envir = globalenv(), inherits = FALSE)
[10:30:57.687]                 ...future.FUN(...future.X_jj, ...)
[10:30:57.687]             })
[10:30:57.687]         }
[10:30:57.687]     }, args = future.call.arguments)
[10:30:57.687] }
[10:30:57.687] Tweak future expression to call with '...' arguments ... DONE
[10:30:57.687] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:57.688] 
[10:30:57.688] getGlobalsAndPackages() ... DONE
[10:30:57.688] run() for ‘Future’ ...
[10:30:57.688] - state: ‘created’
[10:30:57.688] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:30:57.703] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:57.703] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:30:57.703]   - Field: ‘node’
[10:30:57.703]   - Field: ‘label’
[10:30:57.704]   - Field: ‘local’
[10:30:57.704]   - Field: ‘owner’
[10:30:57.704]   - Field: ‘envir’
[10:30:57.704]   - Field: ‘workers’
[10:30:57.704]   - Field: ‘packages’
[10:30:57.704]   - Field: ‘gc’
[10:30:57.704]   - Field: ‘conditions’
[10:30:57.704]   - Field: ‘persistent’
[10:30:57.704]   - Field: ‘expr’
[10:30:57.705]   - Field: ‘uuid’
[10:30:57.705]   - Field: ‘seed’
[10:30:57.705]   - Field: ‘version’
[10:30:57.705]   - Field: ‘result’
[10:30:57.705]   - Field: ‘asynchronous’
[10:30:57.705]   - Field: ‘calls’
[10:30:57.705]   - Field: ‘globals’
[10:30:57.705]   - Field: ‘stdout’
[10:30:57.705]   - Field: ‘earlySignal’
[10:30:57.706]   - Field: ‘lazy’
[10:30:57.706]   - Field: ‘state’
[10:30:57.706] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:30:57.706] - Launch lazy future ...
[10:30:57.706] Packages needed by the future expression (n = 0): <none>
[10:30:57.706] Packages needed by future strategies (n = 0): <none>
[10:30:57.707] {
[10:30:57.707]     {
[10:30:57.707]         {
[10:30:57.707]             ...future.startTime <- base::Sys.time()
[10:30:57.707]             {
[10:30:57.707]                 {
[10:30:57.707]                   {
[10:30:57.707]                     {
[10:30:57.707]                       base::local({
[10:30:57.707]                         has_future <- base::requireNamespace("future", 
[10:30:57.707]                           quietly = TRUE)
[10:30:57.707]                         if (has_future) {
[10:30:57.707]                           ns <- base::getNamespace("future")
[10:30:57.707]                           version <- ns[[".package"]][["version"]]
[10:30:57.707]                           if (is.null(version)) 
[10:30:57.707]                             version <- utils::packageVersion("future")
[10:30:57.707]                         }
[10:30:57.707]                         else {
[10:30:57.707]                           version <- NULL
[10:30:57.707]                         }
[10:30:57.707]                         if (!has_future || version < "1.8.0") {
[10:30:57.707]                           info <- base::c(r_version = base::gsub("R version ", 
[10:30:57.707]                             "", base::R.version$version.string), 
[10:30:57.707]                             platform = base::sprintf("%s (%s-bit)", 
[10:30:57.707]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:30:57.707]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:30:57.707]                               "release", "version")], collapse = " "), 
[10:30:57.707]                             hostname = base::Sys.info()[["nodename"]])
[10:30:57.707]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:30:57.707]                             info)
[10:30:57.707]                           info <- base::paste(info, collapse = "; ")
[10:30:57.707]                           if (!has_future) {
[10:30:57.707]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:30:57.707]                               info)
[10:30:57.707]                           }
[10:30:57.707]                           else {
[10:30:57.707]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:30:57.707]                               info, version)
[10:30:57.707]                           }
[10:30:57.707]                           base::stop(msg)
[10:30:57.707]                         }
[10:30:57.707]                       })
[10:30:57.707]                     }
[10:30:57.707]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:30:57.707]                     base::options(mc.cores = 1L)
[10:30:57.707]                   }
[10:30:57.707]                   ...future.strategy.old <- future::plan("list")
[10:30:57.707]                   options(future.plan = NULL)
[10:30:57.707]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:30:57.707]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:30:57.707]                 }
[10:30:57.707]                 ...future.workdir <- getwd()
[10:30:57.707]             }
[10:30:57.707]             ...future.oldOptions <- base::as.list(base::.Options)
[10:30:57.707]             ...future.oldEnvVars <- base::Sys.getenv()
[10:30:57.707]         }
[10:30:57.707]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:30:57.707]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:30:57.707]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:30:57.707]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:30:57.707]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:30:57.707]             future.stdout.windows.reencode = NULL, width = 80L)
[10:30:57.707]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:30:57.707]             base::names(...future.oldOptions))
[10:30:57.707]     }
[10:30:57.707]     if (FALSE) {
[10:30:57.707]     }
[10:30:57.707]     else {
[10:30:57.707]         if (TRUE) {
[10:30:57.707]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:30:57.707]                 open = "w")
[10:30:57.707]         }
[10:30:57.707]         else {
[10:30:57.707]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:30:57.707]                 windows = "NUL", "/dev/null"), open = "w")
[10:30:57.707]         }
[10:30:57.707]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:30:57.707]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:30:57.707]             base::sink(type = "output", split = FALSE)
[10:30:57.707]             base::close(...future.stdout)
[10:30:57.707]         }, add = TRUE)
[10:30:57.707]     }
[10:30:57.707]     ...future.frame <- base::sys.nframe()
[10:30:57.707]     ...future.conditions <- base::list()
[10:30:57.707]     ...future.rng <- base::globalenv()$.Random.seed
[10:30:57.707]     if (FALSE) {
[10:30:57.707]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:30:57.707]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:30:57.707]     }
[10:30:57.707]     ...future.result <- base::tryCatch({
[10:30:57.707]         base::withCallingHandlers({
[10:30:57.707]             ...future.value <- base::withVisible(base::local({
[10:30:57.707]                 ...future.makeSendCondition <- base::local({
[10:30:57.707]                   sendCondition <- NULL
[10:30:57.707]                   function(frame = 1L) {
[10:30:57.707]                     if (is.function(sendCondition)) 
[10:30:57.707]                       return(sendCondition)
[10:30:57.707]                     ns <- getNamespace("parallel")
[10:30:57.707]                     if (exists("sendData", mode = "function", 
[10:30:57.707]                       envir = ns)) {
[10:30:57.707]                       parallel_sendData <- get("sendData", mode = "function", 
[10:30:57.707]                         envir = ns)
[10:30:57.707]                       envir <- sys.frame(frame)
[10:30:57.707]                       master <- NULL
[10:30:57.707]                       while (!identical(envir, .GlobalEnv) && 
[10:30:57.707]                         !identical(envir, emptyenv())) {
[10:30:57.707]                         if (exists("master", mode = "list", envir = envir, 
[10:30:57.707]                           inherits = FALSE)) {
[10:30:57.707]                           master <- get("master", mode = "list", 
[10:30:57.707]                             envir = envir, inherits = FALSE)
[10:30:57.707]                           if (inherits(master, c("SOCKnode", 
[10:30:57.707]                             "SOCK0node"))) {
[10:30:57.707]                             sendCondition <<- function(cond) {
[10:30:57.707]                               data <- list(type = "VALUE", value = cond, 
[10:30:57.707]                                 success = TRUE)
[10:30:57.707]                               parallel_sendData(master, data)
[10:30:57.707]                             }
[10:30:57.707]                             return(sendCondition)
[10:30:57.707]                           }
[10:30:57.707]                         }
[10:30:57.707]                         frame <- frame + 1L
[10:30:57.707]                         envir <- sys.frame(frame)
[10:30:57.707]                       }
[10:30:57.707]                     }
[10:30:57.707]                     sendCondition <<- function(cond) NULL
[10:30:57.707]                   }
[10:30:57.707]                 })
[10:30:57.707]                 withCallingHandlers({
[10:30:57.707]                   {
[10:30:57.707]                     do.call(function(...) {
[10:30:57.707]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:57.707]                       if (!identical(...future.globals.maxSize.org, 
[10:30:57.707]                         ...future.globals.maxSize)) {
[10:30:57.707]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:57.707]                         on.exit(options(oopts), add = TRUE)
[10:30:57.707]                       }
[10:30:57.707]                       {
[10:30:57.707]                         lapply(seq_along(...future.elements_ii), 
[10:30:57.707]                           FUN = function(jj) {
[10:30:57.707]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:57.707]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:57.707]                               envir = globalenv(), inherits = FALSE)
[10:30:57.707]                             ...future.FUN(...future.X_jj, ...)
[10:30:57.707]                           })
[10:30:57.707]                       }
[10:30:57.707]                     }, args = future.call.arguments)
[10:30:57.707]                   }
[10:30:57.707]                 }, immediateCondition = function(cond) {
[10:30:57.707]                   sendCondition <- ...future.makeSendCondition()
[10:30:57.707]                   sendCondition(cond)
[10:30:57.707]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:57.707]                   {
[10:30:57.707]                     inherits <- base::inherits
[10:30:57.707]                     invokeRestart <- base::invokeRestart
[10:30:57.707]                     is.null <- base::is.null
[10:30:57.707]                     muffled <- FALSE
[10:30:57.707]                     if (inherits(cond, "message")) {
[10:30:57.707]                       muffled <- grepl(pattern, "muffleMessage")
[10:30:57.707]                       if (muffled) 
[10:30:57.707]                         invokeRestart("muffleMessage")
[10:30:57.707]                     }
[10:30:57.707]                     else if (inherits(cond, "warning")) {
[10:30:57.707]                       muffled <- grepl(pattern, "muffleWarning")
[10:30:57.707]                       if (muffled) 
[10:30:57.707]                         invokeRestart("muffleWarning")
[10:30:57.707]                     }
[10:30:57.707]                     else if (inherits(cond, "condition")) {
[10:30:57.707]                       if (!is.null(pattern)) {
[10:30:57.707]                         computeRestarts <- base::computeRestarts
[10:30:57.707]                         grepl <- base::grepl
[10:30:57.707]                         restarts <- computeRestarts(cond)
[10:30:57.707]                         for (restart in restarts) {
[10:30:57.707]                           name <- restart$name
[10:30:57.707]                           if (is.null(name)) 
[10:30:57.707]                             next
[10:30:57.707]                           if (!grepl(pattern, name)) 
[10:30:57.707]                             next
[10:30:57.707]                           invokeRestart(restart)
[10:30:57.707]                           muffled <- TRUE
[10:30:57.707]                           break
[10:30:57.707]                         }
[10:30:57.707]                       }
[10:30:57.707]                     }
[10:30:57.707]                     invisible(muffled)
[10:30:57.707]                   }
[10:30:57.707]                   muffleCondition(cond)
[10:30:57.707]                 })
[10:30:57.707]             }))
[10:30:57.707]             future::FutureResult(value = ...future.value$value, 
[10:30:57.707]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:57.707]                   ...future.rng), globalenv = if (FALSE) 
[10:30:57.707]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:30:57.707]                     ...future.globalenv.names))
[10:30:57.707]                 else NULL, started = ...future.startTime, version = "1.8")
[10:30:57.707]         }, condition = base::local({
[10:30:57.707]             c <- base::c
[10:30:57.707]             inherits <- base::inherits
[10:30:57.707]             invokeRestart <- base::invokeRestart
[10:30:57.707]             length <- base::length
[10:30:57.707]             list <- base::list
[10:30:57.707]             seq.int <- base::seq.int
[10:30:57.707]             signalCondition <- base::signalCondition
[10:30:57.707]             sys.calls <- base::sys.calls
[10:30:57.707]             `[[` <- base::`[[`
[10:30:57.707]             `+` <- base::`+`
[10:30:57.707]             `<<-` <- base::`<<-`
[10:30:57.707]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:30:57.707]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:30:57.707]                   3L)]
[10:30:57.707]             }
[10:30:57.707]             function(cond) {
[10:30:57.707]                 is_error <- inherits(cond, "error")
[10:30:57.707]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:30:57.707]                   NULL)
[10:30:57.707]                 if (is_error) {
[10:30:57.707]                   sessionInformation <- function() {
[10:30:57.707]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:30:57.707]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:30:57.707]                       search = base::search(), system = base::Sys.info())
[10:30:57.707]                   }
[10:30:57.707]                   ...future.conditions[[length(...future.conditions) + 
[10:30:57.707]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:30:57.707]                     cond$call), session = sessionInformation(), 
[10:30:57.707]                     timestamp = base::Sys.time(), signaled = 0L)
[10:30:57.707]                   signalCondition(cond)
[10:30:57.707]                 }
[10:30:57.707]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:30:57.707]                 "immediateCondition"))) {
[10:30:57.707]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:30:57.707]                   ...future.conditions[[length(...future.conditions) + 
[10:30:57.707]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:30:57.707]                   if (TRUE && !signal) {
[10:30:57.707]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:57.707]                     {
[10:30:57.707]                       inherits <- base::inherits
[10:30:57.707]                       invokeRestart <- base::invokeRestart
[10:30:57.707]                       is.null <- base::is.null
[10:30:57.707]                       muffled <- FALSE
[10:30:57.707]                       if (inherits(cond, "message")) {
[10:30:57.707]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:57.707]                         if (muffled) 
[10:30:57.707]                           invokeRestart("muffleMessage")
[10:30:57.707]                       }
[10:30:57.707]                       else if (inherits(cond, "warning")) {
[10:30:57.707]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:57.707]                         if (muffled) 
[10:30:57.707]                           invokeRestart("muffleWarning")
[10:30:57.707]                       }
[10:30:57.707]                       else if (inherits(cond, "condition")) {
[10:30:57.707]                         if (!is.null(pattern)) {
[10:30:57.707]                           computeRestarts <- base::computeRestarts
[10:30:57.707]                           grepl <- base::grepl
[10:30:57.707]                           restarts <- computeRestarts(cond)
[10:30:57.707]                           for (restart in restarts) {
[10:30:57.707]                             name <- restart$name
[10:30:57.707]                             if (is.null(name)) 
[10:30:57.707]                               next
[10:30:57.707]                             if (!grepl(pattern, name)) 
[10:30:57.707]                               next
[10:30:57.707]                             invokeRestart(restart)
[10:30:57.707]                             muffled <- TRUE
[10:30:57.707]                             break
[10:30:57.707]                           }
[10:30:57.707]                         }
[10:30:57.707]                       }
[10:30:57.707]                       invisible(muffled)
[10:30:57.707]                     }
[10:30:57.707]                     muffleCondition(cond, pattern = "^muffle")
[10:30:57.707]                   }
[10:30:57.707]                 }
[10:30:57.707]                 else {
[10:30:57.707]                   if (TRUE) {
[10:30:57.707]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:57.707]                     {
[10:30:57.707]                       inherits <- base::inherits
[10:30:57.707]                       invokeRestart <- base::invokeRestart
[10:30:57.707]                       is.null <- base::is.null
[10:30:57.707]                       muffled <- FALSE
[10:30:57.707]                       if (inherits(cond, "message")) {
[10:30:57.707]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:57.707]                         if (muffled) 
[10:30:57.707]                           invokeRestart("muffleMessage")
[10:30:57.707]                       }
[10:30:57.707]                       else if (inherits(cond, "warning")) {
[10:30:57.707]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:57.707]                         if (muffled) 
[10:30:57.707]                           invokeRestart("muffleWarning")
[10:30:57.707]                       }
[10:30:57.707]                       else if (inherits(cond, "condition")) {
[10:30:57.707]                         if (!is.null(pattern)) {
[10:30:57.707]                           computeRestarts <- base::computeRestarts
[10:30:57.707]                           grepl <- base::grepl
[10:30:57.707]                           restarts <- computeRestarts(cond)
[10:30:57.707]                           for (restart in restarts) {
[10:30:57.707]                             name <- restart$name
[10:30:57.707]                             if (is.null(name)) 
[10:30:57.707]                               next
[10:30:57.707]                             if (!grepl(pattern, name)) 
[10:30:57.707]                               next
[10:30:57.707]                             invokeRestart(restart)
[10:30:57.707]                             muffled <- TRUE
[10:30:57.707]                             break
[10:30:57.707]                           }
[10:30:57.707]                         }
[10:30:57.707]                       }
[10:30:57.707]                       invisible(muffled)
[10:30:57.707]                     }
[10:30:57.707]                     muffleCondition(cond, pattern = "^muffle")
[10:30:57.707]                   }
[10:30:57.707]                 }
[10:30:57.707]             }
[10:30:57.707]         }))
[10:30:57.707]     }, error = function(ex) {
[10:30:57.707]         base::structure(base::list(value = NULL, visible = NULL, 
[10:30:57.707]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:57.707]                 ...future.rng), started = ...future.startTime, 
[10:30:57.707]             finished = Sys.time(), session_uuid = NA_character_, 
[10:30:57.707]             version = "1.8"), class = "FutureResult")
[10:30:57.707]     }, finally = {
[10:30:57.707]         if (!identical(...future.workdir, getwd())) 
[10:30:57.707]             setwd(...future.workdir)
[10:30:57.707]         {
[10:30:57.707]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:30:57.707]                 ...future.oldOptions$nwarnings <- NULL
[10:30:57.707]             }
[10:30:57.707]             base::options(...future.oldOptions)
[10:30:57.707]             if (.Platform$OS.type == "windows") {
[10:30:57.707]                 old_names <- names(...future.oldEnvVars)
[10:30:57.707]                 envs <- base::Sys.getenv()
[10:30:57.707]                 names <- names(envs)
[10:30:57.707]                 common <- intersect(names, old_names)
[10:30:57.707]                 added <- setdiff(names, old_names)
[10:30:57.707]                 removed <- setdiff(old_names, names)
[10:30:57.707]                 changed <- common[...future.oldEnvVars[common] != 
[10:30:57.707]                   envs[common]]
[10:30:57.707]                 NAMES <- toupper(changed)
[10:30:57.707]                 args <- list()
[10:30:57.707]                 for (kk in seq_along(NAMES)) {
[10:30:57.707]                   name <- changed[[kk]]
[10:30:57.707]                   NAME <- NAMES[[kk]]
[10:30:57.707]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:57.707]                     next
[10:30:57.707]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:57.707]                 }
[10:30:57.707]                 NAMES <- toupper(added)
[10:30:57.707]                 for (kk in seq_along(NAMES)) {
[10:30:57.707]                   name <- added[[kk]]
[10:30:57.707]                   NAME <- NAMES[[kk]]
[10:30:57.707]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:57.707]                     next
[10:30:57.707]                   args[[name]] <- ""
[10:30:57.707]                 }
[10:30:57.707]                 NAMES <- toupper(removed)
[10:30:57.707]                 for (kk in seq_along(NAMES)) {
[10:30:57.707]                   name <- removed[[kk]]
[10:30:57.707]                   NAME <- NAMES[[kk]]
[10:30:57.707]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:57.707]                     next
[10:30:57.707]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:57.707]                 }
[10:30:57.707]                 if (length(args) > 0) 
[10:30:57.707]                   base::do.call(base::Sys.setenv, args = args)
[10:30:57.707]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:30:57.707]             }
[10:30:57.707]             else {
[10:30:57.707]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:30:57.707]             }
[10:30:57.707]             {
[10:30:57.707]                 if (base::length(...future.futureOptionsAdded) > 
[10:30:57.707]                   0L) {
[10:30:57.707]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:30:57.707]                   base::names(opts) <- ...future.futureOptionsAdded
[10:30:57.707]                   base::options(opts)
[10:30:57.707]                 }
[10:30:57.707]                 {
[10:30:57.707]                   {
[10:30:57.707]                     base::options(mc.cores = ...future.mc.cores.old)
[10:30:57.707]                     NULL
[10:30:57.707]                   }
[10:30:57.707]                   options(future.plan = NULL)
[10:30:57.707]                   if (is.na(NA_character_)) 
[10:30:57.707]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:30:57.707]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:30:57.707]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:30:57.707]                     .init = FALSE)
[10:30:57.707]                 }
[10:30:57.707]             }
[10:30:57.707]         }
[10:30:57.707]     })
[10:30:57.707]     if (TRUE) {
[10:30:57.707]         base::sink(type = "output", split = FALSE)
[10:30:57.707]         if (TRUE) {
[10:30:57.707]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:30:57.707]         }
[10:30:57.707]         else {
[10:30:57.707]             ...future.result["stdout"] <- base::list(NULL)
[10:30:57.707]         }
[10:30:57.707]         base::close(...future.stdout)
[10:30:57.707]         ...future.stdout <- NULL
[10:30:57.707]     }
[10:30:57.707]     ...future.result$conditions <- ...future.conditions
[10:30:57.707]     ...future.result$finished <- base::Sys.time()
[10:30:57.707]     ...future.result
[10:30:57.707] }
[10:30:57.760] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[10:30:57.761] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[10:30:57.761] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[10:30:57.762] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[10:30:57.762] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[10:30:57.762] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[10:30:57.762] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[10:30:57.763] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[10:30:57.763] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[10:30:57.763] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[10:30:57.763] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[10:30:57.764] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[10:30:57.764] MultisessionFuture started
[10:30:57.764] - Launch lazy future ... done
[10:30:57.764] run() for ‘MultisessionFuture’ ... done
[10:30:57.765] Created future:
[10:30:57.765] MultisessionFuture:
[10:30:57.765] Label: ‘future_replicate-2’
[10:30:57.765] Expression:
[10:30:57.765] {
[10:30:57.765]     do.call(function(...) {
[10:30:57.765]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:57.765]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:57.765]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:57.765]             on.exit(options(oopts), add = TRUE)
[10:30:57.765]         }
[10:30:57.765]         {
[10:30:57.765]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:57.765]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:57.765]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:57.765]                   envir = globalenv(), inherits = FALSE)
[10:30:57.765]                 ...future.FUN(...future.X_jj, ...)
[10:30:57.765]             })
[10:30:57.765]         }
[10:30:57.765]     }, args = future.call.arguments)
[10:30:57.765] }
[10:30:57.765] Lazy evaluation: FALSE
[10:30:57.765] Asynchronous evaluation: TRUE
[10:30:57.765] Local evaluation: TRUE
[10:30:57.765] Environment: R_GlobalEnv
[10:30:57.765] Capture standard output: TRUE
[10:30:57.765] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:30:57.765] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:30:57.765] Packages: <none>
[10:30:57.765] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:30:57.765] Resolved: FALSE
[10:30:57.765] Value: <not collected>
[10:30:57.765] Conditions captured: <none>
[10:30:57.765] Early signaling: FALSE
[10:30:57.765] Owner process: 7cdcbd4b-6c47-ca9a-dc3f-e18236d134b8
[10:30:57.765] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:57.777] Chunk #2 of 2 ... DONE
[10:30:57.777] Launching 2 futures (chunks) ... DONE
[10:30:57.777] Resolving 2 futures (chunks) ...
[10:30:57.777] resolve() on list ...
[10:30:57.777]  recursive: 0
[10:30:57.777]  length: 2
[10:30:57.777] 
[10:30:57.778] receiveMessageFromWorker() for ClusterFuture ...
[10:30:57.780] - Validating connection of MultisessionFuture
[10:30:57.780] - received message: FutureResult
[10:30:57.781] - Received FutureResult
[10:30:57.781] - Erased future from FutureRegistry
[10:30:57.781] result() for ClusterFuture ...
[10:30:57.781] - result already collected: FutureResult
[10:30:57.781] result() for ClusterFuture ... done
[10:30:57.781] receiveMessageFromWorker() for ClusterFuture ... done
[10:30:57.781] Future #1
[10:30:57.781] result() for ClusterFuture ...
[10:30:57.781] - result already collected: FutureResult
[10:30:57.781] result() for ClusterFuture ... done
[10:30:57.782] result() for ClusterFuture ...
[10:30:57.782] - result already collected: FutureResult
[10:30:57.782] result() for ClusterFuture ... done
[10:30:57.782] signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:30:57.782] - nx: 2
[10:30:57.782] - relay: TRUE
[10:30:57.782] - stdout: TRUE
[10:30:57.782] - signal: TRUE
[10:30:57.782] - resignal: FALSE
[10:30:57.782] - force: TRUE
[10:30:57.782] - relayed: [n=2] FALSE, FALSE
[10:30:57.782] - queued futures: [n=2] FALSE, FALSE
[10:30:57.783]  - until=1
[10:30:57.783]  - relaying element #1
[10:30:57.783] result() for ClusterFuture ...
[10:30:57.783] - result already collected: FutureResult
[10:30:57.783] result() for ClusterFuture ... done
[10:30:57.783] result() for ClusterFuture ...
[10:30:57.783] - result already collected: FutureResult
[10:30:57.783] result() for ClusterFuture ... done
[10:30:57.783] result() for ClusterFuture ...
[10:30:57.783] - result already collected: FutureResult
[10:30:57.783] result() for ClusterFuture ... done
[10:30:57.784] result() for ClusterFuture ...
[10:30:57.784] - result already collected: FutureResult
[10:30:57.784] result() for ClusterFuture ... done
[10:30:57.784] - relayed: [n=2] TRUE, FALSE
[10:30:57.784] - queued futures: [n=2] TRUE, FALSE
[10:30:57.784] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:30:57.784]  length: 1 (resolved future 1)
[10:30:57.847] receiveMessageFromWorker() for ClusterFuture ...
[10:30:57.847] - Validating connection of MultisessionFuture
[10:30:57.847] - received message: FutureResult
[10:30:57.847] - Received FutureResult
[10:30:57.847] - Erased future from FutureRegistry
[10:30:57.848] result() for ClusterFuture ...
[10:30:57.848] - result already collected: FutureResult
[10:30:57.848] result() for ClusterFuture ... done
[10:30:57.848] receiveMessageFromWorker() for ClusterFuture ... done
[10:30:57.848] Future #2
[10:30:57.848] result() for ClusterFuture ...
[10:30:57.848] - result already collected: FutureResult
[10:30:57.848] result() for ClusterFuture ... done
[10:30:57.848] result() for ClusterFuture ...
[10:30:57.848] - result already collected: FutureResult
[10:30:57.848] result() for ClusterFuture ... done
[10:30:57.849] signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:30:57.849] - nx: 2
[10:30:57.849] - relay: TRUE
[10:30:57.849] - stdout: TRUE
[10:30:57.849] - signal: TRUE
[10:30:57.849] - resignal: FALSE
[10:30:57.849] - force: TRUE
[10:30:57.849] - relayed: [n=2] TRUE, FALSE
[10:30:57.849] - queued futures: [n=2] TRUE, FALSE
[10:30:57.849]  - until=2
[10:30:57.849]  - relaying element #2
[10:30:57.850] result() for ClusterFuture ...
[10:30:57.850] - result already collected: FutureResult
[10:30:57.850] result() for ClusterFuture ... done
[10:30:57.850] result() for ClusterFuture ...
[10:30:57.850] - result already collected: FutureResult
[10:30:57.850] result() for ClusterFuture ... done
[10:30:57.850] result() for ClusterFuture ...
[10:30:57.850] - result already collected: FutureResult
[10:30:57.850] result() for ClusterFuture ... done
[10:30:57.850] result() for ClusterFuture ...
[10:30:57.850] - result already collected: FutureResult
[10:30:57.851] result() for ClusterFuture ... done
[10:30:57.851] - relayed: [n=2] TRUE, TRUE
[10:30:57.851] - queued futures: [n=2] TRUE, TRUE
[10:30:57.851] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:30:57.851]  length: 0 (resolved future 2)
[10:30:57.851] Relaying remaining futures
[10:30:57.851] signalConditionsASAP(NULL, pos=0) ...
[10:30:57.851] - nx: 2
[10:30:57.851] - relay: TRUE
[10:30:57.851] - stdout: TRUE
[10:30:57.851] - signal: TRUE
[10:30:57.852] - resignal: FALSE
[10:30:57.852] - force: TRUE
[10:30:57.852] - relayed: [n=2] TRUE, TRUE
[10:30:57.852] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:30:57.852] - relayed: [n=2] TRUE, TRUE
[10:30:57.852] - queued futures: [n=2] TRUE, TRUE
[10:30:57.852] signalConditionsASAP(NULL, pos=0) ... done
[10:30:57.852] resolve() on list ... DONE
[10:30:57.852] result() for ClusterFuture ...
[10:30:57.852] - result already collected: FutureResult
[10:30:57.852] result() for ClusterFuture ... done
[10:30:57.853] result() for ClusterFuture ...
[10:30:57.853] - result already collected: FutureResult
[10:30:57.853] result() for ClusterFuture ... done
[10:30:57.853] result() for ClusterFuture ...
[10:30:57.853] - result already collected: FutureResult
[10:30:57.853] result() for ClusterFuture ... done
[10:30:57.853] result() for ClusterFuture ...
[10:30:57.853] - result already collected: FutureResult
[10:30:57.853] result() for ClusterFuture ... done
[10:30:57.853]  - Number of value chunks collected: 2
[10:30:57.854] Resolving 2 futures (chunks) ... DONE
[10:30:57.854] Reducing values from 2 chunks ...
[10:30:57.854]  - Number of values collected after concatenation: 5
[10:30:57.854]  - Number of values expected: 5
[10:30:57.854] Reducing values from 2 chunks ... DONE
[10:30:57.854] future_lapply() ... DONE
[10:30:57.854] future_lapply() ...
[10:30:57.855] Generating random seeds ...
[10:30:57.855] Generating random seed streams for 5 elements ...
[10:30:57.855] Generating random seed streams for 5 elements ... DONE
[10:30:57.855] Generating random seeds ... DONE
[10:30:57.855] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:30:57.859] Number of chunks: 2
[10:30:57.859] getGlobalsAndPackagesXApply() ...
[10:30:57.859]  - future.globals: TRUE
[10:30:57.860] getGlobalsAndPackages() ...
[10:30:57.860] Searching for globals...
[10:30:57.861] - globals found: [2] ‘FUN’, ‘sample’
[10:30:57.861] Searching for globals ... DONE
[10:30:57.861] Resolving globals: FALSE
[10:30:57.861] The total size of the 1 globals is 616 bytes (616 bytes)
[10:30:57.862] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[10:30:57.862] - globals: [1] ‘FUN’
[10:30:57.862] 
[10:30:57.862] getGlobalsAndPackages() ... DONE
[10:30:57.862]  - globals found/used: [n=1] ‘FUN’
[10:30:57.862]  - needed namespaces: [n=0] 
[10:30:57.862] Finding globals ... DONE
[10:30:57.862]  - use_args: TRUE
[10:30:57.863]  - Getting '...' globals ...
[10:30:57.863] resolve() on list ...
[10:30:57.863]  recursive: 0
[10:30:57.863]  length: 1
[10:30:57.863]  elements: ‘...’
[10:30:57.863]  length: 0 (resolved future 1)
[10:30:57.863] resolve() on list ... DONE
[10:30:57.863]    - '...' content: [n=0] 
[10:30:57.864] List of 1
[10:30:57.864]  $ ...: list()
[10:30:57.864]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:57.864]  - attr(*, "where")=List of 1
[10:30:57.864]   ..$ ...:<environment: 0x55aba2cfc1f8> 
[10:30:57.864]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:57.864]  - attr(*, "resolved")= logi TRUE
[10:30:57.864]  - attr(*, "total_size")= num NA
[10:30:57.866]  - Getting '...' globals ... DONE
[10:30:57.866] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:30:57.866] List of 2
[10:30:57.866]  $ ...future.FUN:function (...)  
[10:30:57.866]  $ ...          : list()
[10:30:57.866]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:57.866]  - attr(*, "where")=List of 2
[10:30:57.866]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:30:57.866]   ..$ ...          :<environment: 0x55aba2cfc1f8> 
[10:30:57.866]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:57.866]  - attr(*, "resolved")= logi FALSE
[10:30:57.866]  - attr(*, "total_size")= num 616
[10:30:57.869] Packages to be attached in all futures: [n=0] 
[10:30:57.869] getGlobalsAndPackagesXApply() ... DONE
[10:30:57.869] Number of futures (= number of chunks): 2
[10:30:57.869] Launching 2 futures (chunks) ...
[10:30:57.869] Chunk #1 of 2 ...
[10:30:57.870]  - Finding globals in 'X' for chunk #1 ...
[10:30:57.870] getGlobalsAndPackages() ...
[10:30:57.870] Searching for globals...
[10:30:57.870] 
[10:30:57.870] Searching for globals ... DONE
[10:30:57.870] - globals: [0] <none>
[10:30:57.870] getGlobalsAndPackages() ... DONE
[10:30:57.870]    + additional globals found: [n=0] 
[10:30:57.871]    + additional namespaces needed: [n=0] 
[10:30:57.871]  - Finding globals in 'X' for chunk #1 ... DONE
[10:30:57.871]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:30:57.871]  - seeds: [2] <seeds>
[10:30:57.871]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:57.871] getGlobalsAndPackages() ...
[10:30:57.871] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:57.871] Resolving globals: FALSE
[10:30:57.871] Tweak future expression to call with '...' arguments ...
[10:30:57.871] {
[10:30:57.871]     do.call(function(...) {
[10:30:57.871]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:57.871]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:57.871]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:57.871]             on.exit(options(oopts), add = TRUE)
[10:30:57.871]         }
[10:30:57.871]         {
[10:30:57.871]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:57.871]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:57.871]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:57.871]                   envir = globalenv(), inherits = FALSE)
[10:30:57.871]                 ...future.FUN(...future.X_jj, ...)
[10:30:57.871]             })
[10:30:57.871]         }
[10:30:57.871]     }, args = future.call.arguments)
[10:30:57.871] }
[10:30:57.872] Tweak future expression to call with '...' arguments ... DONE
[10:30:57.872] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:57.872] 
[10:30:57.872] getGlobalsAndPackages() ... DONE
[10:30:57.873] run() for ‘Future’ ...
[10:30:57.873] - state: ‘created’
[10:30:57.873] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:30:57.886] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:57.887] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:30:57.887]   - Field: ‘node’
[10:30:57.887]   - Field: ‘label’
[10:30:57.887]   - Field: ‘local’
[10:30:57.887]   - Field: ‘owner’
[10:30:57.887]   - Field: ‘envir’
[10:30:57.887]   - Field: ‘workers’
[10:30:57.887]   - Field: ‘packages’
[10:30:57.887]   - Field: ‘gc’
[10:30:57.887]   - Field: ‘conditions’
[10:30:57.888]   - Field: ‘persistent’
[10:30:57.888]   - Field: ‘expr’
[10:30:57.888]   - Field: ‘uuid’
[10:30:57.888]   - Field: ‘seed’
[10:30:57.888]   - Field: ‘version’
[10:30:57.888]   - Field: ‘result’
[10:30:57.888]   - Field: ‘asynchronous’
[10:30:57.888]   - Field: ‘calls’
[10:30:57.888]   - Field: ‘globals’
[10:30:57.888]   - Field: ‘stdout’
[10:30:57.888]   - Field: ‘earlySignal’
[10:30:57.889]   - Field: ‘lazy’
[10:30:57.889]   - Field: ‘state’
[10:30:57.889] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:30:57.889] - Launch lazy future ...
[10:30:57.889] Packages needed by the future expression (n = 0): <none>
[10:30:57.889] Packages needed by future strategies (n = 0): <none>
[10:30:57.890] {
[10:30:57.890]     {
[10:30:57.890]         {
[10:30:57.890]             ...future.startTime <- base::Sys.time()
[10:30:57.890]             {
[10:30:57.890]                 {
[10:30:57.890]                   {
[10:30:57.890]                     {
[10:30:57.890]                       base::local({
[10:30:57.890]                         has_future <- base::requireNamespace("future", 
[10:30:57.890]                           quietly = TRUE)
[10:30:57.890]                         if (has_future) {
[10:30:57.890]                           ns <- base::getNamespace("future")
[10:30:57.890]                           version <- ns[[".package"]][["version"]]
[10:30:57.890]                           if (is.null(version)) 
[10:30:57.890]                             version <- utils::packageVersion("future")
[10:30:57.890]                         }
[10:30:57.890]                         else {
[10:30:57.890]                           version <- NULL
[10:30:57.890]                         }
[10:30:57.890]                         if (!has_future || version < "1.8.0") {
[10:30:57.890]                           info <- base::c(r_version = base::gsub("R version ", 
[10:30:57.890]                             "", base::R.version$version.string), 
[10:30:57.890]                             platform = base::sprintf("%s (%s-bit)", 
[10:30:57.890]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:30:57.890]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:30:57.890]                               "release", "version")], collapse = " "), 
[10:30:57.890]                             hostname = base::Sys.info()[["nodename"]])
[10:30:57.890]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:30:57.890]                             info)
[10:30:57.890]                           info <- base::paste(info, collapse = "; ")
[10:30:57.890]                           if (!has_future) {
[10:30:57.890]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:30:57.890]                               info)
[10:30:57.890]                           }
[10:30:57.890]                           else {
[10:30:57.890]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:30:57.890]                               info, version)
[10:30:57.890]                           }
[10:30:57.890]                           base::stop(msg)
[10:30:57.890]                         }
[10:30:57.890]                       })
[10:30:57.890]                     }
[10:30:57.890]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:30:57.890]                     base::options(mc.cores = 1L)
[10:30:57.890]                   }
[10:30:57.890]                   ...future.strategy.old <- future::plan("list")
[10:30:57.890]                   options(future.plan = NULL)
[10:30:57.890]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:30:57.890]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:30:57.890]                 }
[10:30:57.890]                 ...future.workdir <- getwd()
[10:30:57.890]             }
[10:30:57.890]             ...future.oldOptions <- base::as.list(base::.Options)
[10:30:57.890]             ...future.oldEnvVars <- base::Sys.getenv()
[10:30:57.890]         }
[10:30:57.890]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:30:57.890]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:30:57.890]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:30:57.890]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:30:57.890]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:30:57.890]             future.stdout.windows.reencode = NULL, width = 80L)
[10:30:57.890]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:30:57.890]             base::names(...future.oldOptions))
[10:30:57.890]     }
[10:30:57.890]     if (FALSE) {
[10:30:57.890]     }
[10:30:57.890]     else {
[10:30:57.890]         if (TRUE) {
[10:30:57.890]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:30:57.890]                 open = "w")
[10:30:57.890]         }
[10:30:57.890]         else {
[10:30:57.890]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:30:57.890]                 windows = "NUL", "/dev/null"), open = "w")
[10:30:57.890]         }
[10:30:57.890]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:30:57.890]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:30:57.890]             base::sink(type = "output", split = FALSE)
[10:30:57.890]             base::close(...future.stdout)
[10:30:57.890]         }, add = TRUE)
[10:30:57.890]     }
[10:30:57.890]     ...future.frame <- base::sys.nframe()
[10:30:57.890]     ...future.conditions <- base::list()
[10:30:57.890]     ...future.rng <- base::globalenv()$.Random.seed
[10:30:57.890]     if (FALSE) {
[10:30:57.890]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:30:57.890]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:30:57.890]     }
[10:30:57.890]     ...future.result <- base::tryCatch({
[10:30:57.890]         base::withCallingHandlers({
[10:30:57.890]             ...future.value <- base::withVisible(base::local({
[10:30:57.890]                 ...future.makeSendCondition <- base::local({
[10:30:57.890]                   sendCondition <- NULL
[10:30:57.890]                   function(frame = 1L) {
[10:30:57.890]                     if (is.function(sendCondition)) 
[10:30:57.890]                       return(sendCondition)
[10:30:57.890]                     ns <- getNamespace("parallel")
[10:30:57.890]                     if (exists("sendData", mode = "function", 
[10:30:57.890]                       envir = ns)) {
[10:30:57.890]                       parallel_sendData <- get("sendData", mode = "function", 
[10:30:57.890]                         envir = ns)
[10:30:57.890]                       envir <- sys.frame(frame)
[10:30:57.890]                       master <- NULL
[10:30:57.890]                       while (!identical(envir, .GlobalEnv) && 
[10:30:57.890]                         !identical(envir, emptyenv())) {
[10:30:57.890]                         if (exists("master", mode = "list", envir = envir, 
[10:30:57.890]                           inherits = FALSE)) {
[10:30:57.890]                           master <- get("master", mode = "list", 
[10:30:57.890]                             envir = envir, inherits = FALSE)
[10:30:57.890]                           if (inherits(master, c("SOCKnode", 
[10:30:57.890]                             "SOCK0node"))) {
[10:30:57.890]                             sendCondition <<- function(cond) {
[10:30:57.890]                               data <- list(type = "VALUE", value = cond, 
[10:30:57.890]                                 success = TRUE)
[10:30:57.890]                               parallel_sendData(master, data)
[10:30:57.890]                             }
[10:30:57.890]                             return(sendCondition)
[10:30:57.890]                           }
[10:30:57.890]                         }
[10:30:57.890]                         frame <- frame + 1L
[10:30:57.890]                         envir <- sys.frame(frame)
[10:30:57.890]                       }
[10:30:57.890]                     }
[10:30:57.890]                     sendCondition <<- function(cond) NULL
[10:30:57.890]                   }
[10:30:57.890]                 })
[10:30:57.890]                 withCallingHandlers({
[10:30:57.890]                   {
[10:30:57.890]                     do.call(function(...) {
[10:30:57.890]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:57.890]                       if (!identical(...future.globals.maxSize.org, 
[10:30:57.890]                         ...future.globals.maxSize)) {
[10:30:57.890]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:57.890]                         on.exit(options(oopts), add = TRUE)
[10:30:57.890]                       }
[10:30:57.890]                       {
[10:30:57.890]                         lapply(seq_along(...future.elements_ii), 
[10:30:57.890]                           FUN = function(jj) {
[10:30:57.890]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:57.890]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:57.890]                               envir = globalenv(), inherits = FALSE)
[10:30:57.890]                             ...future.FUN(...future.X_jj, ...)
[10:30:57.890]                           })
[10:30:57.890]                       }
[10:30:57.890]                     }, args = future.call.arguments)
[10:30:57.890]                   }
[10:30:57.890]                 }, immediateCondition = function(cond) {
[10:30:57.890]                   sendCondition <- ...future.makeSendCondition()
[10:30:57.890]                   sendCondition(cond)
[10:30:57.890]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:57.890]                   {
[10:30:57.890]                     inherits <- base::inherits
[10:30:57.890]                     invokeRestart <- base::invokeRestart
[10:30:57.890]                     is.null <- base::is.null
[10:30:57.890]                     muffled <- FALSE
[10:30:57.890]                     if (inherits(cond, "message")) {
[10:30:57.890]                       muffled <- grepl(pattern, "muffleMessage")
[10:30:57.890]                       if (muffled) 
[10:30:57.890]                         invokeRestart("muffleMessage")
[10:30:57.890]                     }
[10:30:57.890]                     else if (inherits(cond, "warning")) {
[10:30:57.890]                       muffled <- grepl(pattern, "muffleWarning")
[10:30:57.890]                       if (muffled) 
[10:30:57.890]                         invokeRestart("muffleWarning")
[10:30:57.890]                     }
[10:30:57.890]                     else if (inherits(cond, "condition")) {
[10:30:57.890]                       if (!is.null(pattern)) {
[10:30:57.890]                         computeRestarts <- base::computeRestarts
[10:30:57.890]                         grepl <- base::grepl
[10:30:57.890]                         restarts <- computeRestarts(cond)
[10:30:57.890]                         for (restart in restarts) {
[10:30:57.890]                           name <- restart$name
[10:30:57.890]                           if (is.null(name)) 
[10:30:57.890]                             next
[10:30:57.890]                           if (!grepl(pattern, name)) 
[10:30:57.890]                             next
[10:30:57.890]                           invokeRestart(restart)
[10:30:57.890]                           muffled <- TRUE
[10:30:57.890]                           break
[10:30:57.890]                         }
[10:30:57.890]                       }
[10:30:57.890]                     }
[10:30:57.890]                     invisible(muffled)
[10:30:57.890]                   }
[10:30:57.890]                   muffleCondition(cond)
[10:30:57.890]                 })
[10:30:57.890]             }))
[10:30:57.890]             future::FutureResult(value = ...future.value$value, 
[10:30:57.890]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:57.890]                   ...future.rng), globalenv = if (FALSE) 
[10:30:57.890]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:30:57.890]                     ...future.globalenv.names))
[10:30:57.890]                 else NULL, started = ...future.startTime, version = "1.8")
[10:30:57.890]         }, condition = base::local({
[10:30:57.890]             c <- base::c
[10:30:57.890]             inherits <- base::inherits
[10:30:57.890]             invokeRestart <- base::invokeRestart
[10:30:57.890]             length <- base::length
[10:30:57.890]             list <- base::list
[10:30:57.890]             seq.int <- base::seq.int
[10:30:57.890]             signalCondition <- base::signalCondition
[10:30:57.890]             sys.calls <- base::sys.calls
[10:30:57.890]             `[[` <- base::`[[`
[10:30:57.890]             `+` <- base::`+`
[10:30:57.890]             `<<-` <- base::`<<-`
[10:30:57.890]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:30:57.890]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:30:57.890]                   3L)]
[10:30:57.890]             }
[10:30:57.890]             function(cond) {
[10:30:57.890]                 is_error <- inherits(cond, "error")
[10:30:57.890]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:30:57.890]                   NULL)
[10:30:57.890]                 if (is_error) {
[10:30:57.890]                   sessionInformation <- function() {
[10:30:57.890]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:30:57.890]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:30:57.890]                       search = base::search(), system = base::Sys.info())
[10:30:57.890]                   }
[10:30:57.890]                   ...future.conditions[[length(...future.conditions) + 
[10:30:57.890]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:30:57.890]                     cond$call), session = sessionInformation(), 
[10:30:57.890]                     timestamp = base::Sys.time(), signaled = 0L)
[10:30:57.890]                   signalCondition(cond)
[10:30:57.890]                 }
[10:30:57.890]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:30:57.890]                 "immediateCondition"))) {
[10:30:57.890]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:30:57.890]                   ...future.conditions[[length(...future.conditions) + 
[10:30:57.890]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:30:57.890]                   if (TRUE && !signal) {
[10:30:57.890]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:57.890]                     {
[10:30:57.890]                       inherits <- base::inherits
[10:30:57.890]                       invokeRestart <- base::invokeRestart
[10:30:57.890]                       is.null <- base::is.null
[10:30:57.890]                       muffled <- FALSE
[10:30:57.890]                       if (inherits(cond, "message")) {
[10:30:57.890]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:57.890]                         if (muffled) 
[10:30:57.890]                           invokeRestart("muffleMessage")
[10:30:57.890]                       }
[10:30:57.890]                       else if (inherits(cond, "warning")) {
[10:30:57.890]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:57.890]                         if (muffled) 
[10:30:57.890]                           invokeRestart("muffleWarning")
[10:30:57.890]                       }
[10:30:57.890]                       else if (inherits(cond, "condition")) {
[10:30:57.890]                         if (!is.null(pattern)) {
[10:30:57.890]                           computeRestarts <- base::computeRestarts
[10:30:57.890]                           grepl <- base::grepl
[10:30:57.890]                           restarts <- computeRestarts(cond)
[10:30:57.890]                           for (restart in restarts) {
[10:30:57.890]                             name <- restart$name
[10:30:57.890]                             if (is.null(name)) 
[10:30:57.890]                               next
[10:30:57.890]                             if (!grepl(pattern, name)) 
[10:30:57.890]                               next
[10:30:57.890]                             invokeRestart(restart)
[10:30:57.890]                             muffled <- TRUE
[10:30:57.890]                             break
[10:30:57.890]                           }
[10:30:57.890]                         }
[10:30:57.890]                       }
[10:30:57.890]                       invisible(muffled)
[10:30:57.890]                     }
[10:30:57.890]                     muffleCondition(cond, pattern = "^muffle")
[10:30:57.890]                   }
[10:30:57.890]                 }
[10:30:57.890]                 else {
[10:30:57.890]                   if (TRUE) {
[10:30:57.890]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:57.890]                     {
[10:30:57.890]                       inherits <- base::inherits
[10:30:57.890]                       invokeRestart <- base::invokeRestart
[10:30:57.890]                       is.null <- base::is.null
[10:30:57.890]                       muffled <- FALSE
[10:30:57.890]                       if (inherits(cond, "message")) {
[10:30:57.890]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:57.890]                         if (muffled) 
[10:30:57.890]                           invokeRestart("muffleMessage")
[10:30:57.890]                       }
[10:30:57.890]                       else if (inherits(cond, "warning")) {
[10:30:57.890]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:57.890]                         if (muffled) 
[10:30:57.890]                           invokeRestart("muffleWarning")
[10:30:57.890]                       }
[10:30:57.890]                       else if (inherits(cond, "condition")) {
[10:30:57.890]                         if (!is.null(pattern)) {
[10:30:57.890]                           computeRestarts <- base::computeRestarts
[10:30:57.890]                           grepl <- base::grepl
[10:30:57.890]                           restarts <- computeRestarts(cond)
[10:30:57.890]                           for (restart in restarts) {
[10:30:57.890]                             name <- restart$name
[10:30:57.890]                             if (is.null(name)) 
[10:30:57.890]                               next
[10:30:57.890]                             if (!grepl(pattern, name)) 
[10:30:57.890]                               next
[10:30:57.890]                             invokeRestart(restart)
[10:30:57.890]                             muffled <- TRUE
[10:30:57.890]                             break
[10:30:57.890]                           }
[10:30:57.890]                         }
[10:30:57.890]                       }
[10:30:57.890]                       invisible(muffled)
[10:30:57.890]                     }
[10:30:57.890]                     muffleCondition(cond, pattern = "^muffle")
[10:30:57.890]                   }
[10:30:57.890]                 }
[10:30:57.890]             }
[10:30:57.890]         }))
[10:30:57.890]     }, error = function(ex) {
[10:30:57.890]         base::structure(base::list(value = NULL, visible = NULL, 
[10:30:57.890]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:57.890]                 ...future.rng), started = ...future.startTime, 
[10:30:57.890]             finished = Sys.time(), session_uuid = NA_character_, 
[10:30:57.890]             version = "1.8"), class = "FutureResult")
[10:30:57.890]     }, finally = {
[10:30:57.890]         if (!identical(...future.workdir, getwd())) 
[10:30:57.890]             setwd(...future.workdir)
[10:30:57.890]         {
[10:30:57.890]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:30:57.890]                 ...future.oldOptions$nwarnings <- NULL
[10:30:57.890]             }
[10:30:57.890]             base::options(...future.oldOptions)
[10:30:57.890]             if (.Platform$OS.type == "windows") {
[10:30:57.890]                 old_names <- names(...future.oldEnvVars)
[10:30:57.890]                 envs <- base::Sys.getenv()
[10:30:57.890]                 names <- names(envs)
[10:30:57.890]                 common <- intersect(names, old_names)
[10:30:57.890]                 added <- setdiff(names, old_names)
[10:30:57.890]                 removed <- setdiff(old_names, names)
[10:30:57.890]                 changed <- common[...future.oldEnvVars[common] != 
[10:30:57.890]                   envs[common]]
[10:30:57.890]                 NAMES <- toupper(changed)
[10:30:57.890]                 args <- list()
[10:30:57.890]                 for (kk in seq_along(NAMES)) {
[10:30:57.890]                   name <- changed[[kk]]
[10:30:57.890]                   NAME <- NAMES[[kk]]
[10:30:57.890]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:57.890]                     next
[10:30:57.890]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:57.890]                 }
[10:30:57.890]                 NAMES <- toupper(added)
[10:30:57.890]                 for (kk in seq_along(NAMES)) {
[10:30:57.890]                   name <- added[[kk]]
[10:30:57.890]                   NAME <- NAMES[[kk]]
[10:30:57.890]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:57.890]                     next
[10:30:57.890]                   args[[name]] <- ""
[10:30:57.890]                 }
[10:30:57.890]                 NAMES <- toupper(removed)
[10:30:57.890]                 for (kk in seq_along(NAMES)) {
[10:30:57.890]                   name <- removed[[kk]]
[10:30:57.890]                   NAME <- NAMES[[kk]]
[10:30:57.890]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:57.890]                     next
[10:30:57.890]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:57.890]                 }
[10:30:57.890]                 if (length(args) > 0) 
[10:30:57.890]                   base::do.call(base::Sys.setenv, args = args)
[10:30:57.890]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:30:57.890]             }
[10:30:57.890]             else {
[10:30:57.890]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:30:57.890]             }
[10:30:57.890]             {
[10:30:57.890]                 if (base::length(...future.futureOptionsAdded) > 
[10:30:57.890]                   0L) {
[10:30:57.890]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:30:57.890]                   base::names(opts) <- ...future.futureOptionsAdded
[10:30:57.890]                   base::options(opts)
[10:30:57.890]                 }
[10:30:57.890]                 {
[10:30:57.890]                   {
[10:30:57.890]                     base::options(mc.cores = ...future.mc.cores.old)
[10:30:57.890]                     NULL
[10:30:57.890]                   }
[10:30:57.890]                   options(future.plan = NULL)
[10:30:57.890]                   if (is.na(NA_character_)) 
[10:30:57.890]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:30:57.890]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:30:57.890]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:30:57.890]                     .init = FALSE)
[10:30:57.890]                 }
[10:30:57.890]             }
[10:30:57.890]         }
[10:30:57.890]     })
[10:30:57.890]     if (TRUE) {
[10:30:57.890]         base::sink(type = "output", split = FALSE)
[10:30:57.890]         if (TRUE) {
[10:30:57.890]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:30:57.890]         }
[10:30:57.890]         else {
[10:30:57.890]             ...future.result["stdout"] <- base::list(NULL)
[10:30:57.890]         }
[10:30:57.890]         base::close(...future.stdout)
[10:30:57.890]         ...future.stdout <- NULL
[10:30:57.890]     }
[10:30:57.890]     ...future.result$conditions <- ...future.conditions
[10:30:57.890]     ...future.result$finished <- base::Sys.time()
[10:30:57.890]     ...future.result
[10:30:57.890] }
[10:30:57.892] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[10:30:57.893] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[10:30:57.893] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[10:30:57.893] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[10:30:57.894] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[10:30:57.894] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[10:30:57.894] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[10:30:57.894] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[10:30:57.895] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[10:30:57.895] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[10:30:57.895] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[10:30:57.895] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[10:30:57.896] MultisessionFuture started
[10:30:57.896] - Launch lazy future ... done
[10:30:57.896] run() for ‘MultisessionFuture’ ... done
[10:30:57.896] Created future:
[10:30:57.896] MultisessionFuture:
[10:30:57.896] Label: ‘future_replicate-1’
[10:30:57.896] Expression:
[10:30:57.896] {
[10:30:57.896]     do.call(function(...) {
[10:30:57.896]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:57.896]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:57.896]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:57.896]             on.exit(options(oopts), add = TRUE)
[10:30:57.896]         }
[10:30:57.896]         {
[10:30:57.896]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:57.896]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:57.896]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:57.896]                   envir = globalenv(), inherits = FALSE)
[10:30:57.896]                 ...future.FUN(...future.X_jj, ...)
[10:30:57.896]             })
[10:30:57.896]         }
[10:30:57.896]     }, args = future.call.arguments)
[10:30:57.896] }
[10:30:57.896] Lazy evaluation: FALSE
[10:30:57.896] Asynchronous evaluation: TRUE
[10:30:57.896] Local evaluation: TRUE
[10:30:57.896] Environment: R_GlobalEnv
[10:30:57.896] Capture standard output: TRUE
[10:30:57.896] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:30:57.896] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:30:57.896] Packages: <none>
[10:30:57.896] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:30:57.896] Resolved: FALSE
[10:30:57.896] Value: <not collected>
[10:30:57.896] Conditions captured: <none>
[10:30:57.896] Early signaling: FALSE
[10:30:57.896] Owner process: 7cdcbd4b-6c47-ca9a-dc3f-e18236d134b8
[10:30:57.896] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:57.908] Chunk #1 of 2 ... DONE
[10:30:57.908] Chunk #2 of 2 ...
[10:30:57.908]  - Finding globals in 'X' for chunk #2 ...
[10:30:57.908] getGlobalsAndPackages() ...
[10:30:57.908] Searching for globals...
[10:30:57.909] 
[10:30:57.909] Searching for globals ... DONE
[10:30:57.909] - globals: [0] <none>
[10:30:57.909] getGlobalsAndPackages() ... DONE
[10:30:57.909]    + additional globals found: [n=0] 
[10:30:57.909]    + additional namespaces needed: [n=0] 
[10:30:57.909]  - Finding globals in 'X' for chunk #2 ... DONE
[10:30:57.909]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:30:57.909]  - seeds: [3] <seeds>
[10:30:57.910]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:57.910] getGlobalsAndPackages() ...
[10:30:57.910] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:57.910] Resolving globals: FALSE
[10:30:57.910] Tweak future expression to call with '...' arguments ...
[10:30:57.910] {
[10:30:57.910]     do.call(function(...) {
[10:30:57.910]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:57.910]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:57.910]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:57.910]             on.exit(options(oopts), add = TRUE)
[10:30:57.910]         }
[10:30:57.910]         {
[10:30:57.910]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:57.910]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:57.910]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:57.910]                   envir = globalenv(), inherits = FALSE)
[10:30:57.910]                 ...future.FUN(...future.X_jj, ...)
[10:30:57.910]             })
[10:30:57.910]         }
[10:30:57.910]     }, args = future.call.arguments)
[10:30:57.910] }
[10:30:57.910] Tweak future expression to call with '...' arguments ... DONE
[10:30:57.911] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:57.911] 
[10:30:57.911] getGlobalsAndPackages() ... DONE
[10:30:57.911] run() for ‘Future’ ...
[10:30:57.911] - state: ‘created’
[10:30:57.911] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:30:57.925] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:57.925] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:30:57.926]   - Field: ‘node’
[10:30:57.926]   - Field: ‘label’
[10:30:57.926]   - Field: ‘local’
[10:30:57.926]   - Field: ‘owner’
[10:30:57.926]   - Field: ‘envir’
[10:30:57.926]   - Field: ‘workers’
[10:30:57.926]   - Field: ‘packages’
[10:30:57.926]   - Field: ‘gc’
[10:30:57.926]   - Field: ‘conditions’
[10:30:57.926]   - Field: ‘persistent’
[10:30:57.927]   - Field: ‘expr’
[10:30:57.927]   - Field: ‘uuid’
[10:30:57.927]   - Field: ‘seed’
[10:30:57.927]   - Field: ‘version’
[10:30:57.927]   - Field: ‘result’
[10:30:57.927]   - Field: ‘asynchronous’
[10:30:57.927]   - Field: ‘calls’
[10:30:57.927]   - Field: ‘globals’
[10:30:57.927]   - Field: ‘stdout’
[10:30:57.927]   - Field: ‘earlySignal’
[10:30:57.927]   - Field: ‘lazy’
[10:30:57.928]   - Field: ‘state’
[10:30:57.928] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:30:57.928] - Launch lazy future ...
[10:30:57.928] Packages needed by the future expression (n = 0): <none>
[10:30:57.928] Packages needed by future strategies (n = 0): <none>
[10:30:57.929] {
[10:30:57.929]     {
[10:30:57.929]         {
[10:30:57.929]             ...future.startTime <- base::Sys.time()
[10:30:57.929]             {
[10:30:57.929]                 {
[10:30:57.929]                   {
[10:30:57.929]                     {
[10:30:57.929]                       base::local({
[10:30:57.929]                         has_future <- base::requireNamespace("future", 
[10:30:57.929]                           quietly = TRUE)
[10:30:57.929]                         if (has_future) {
[10:30:57.929]                           ns <- base::getNamespace("future")
[10:30:57.929]                           version <- ns[[".package"]][["version"]]
[10:30:57.929]                           if (is.null(version)) 
[10:30:57.929]                             version <- utils::packageVersion("future")
[10:30:57.929]                         }
[10:30:57.929]                         else {
[10:30:57.929]                           version <- NULL
[10:30:57.929]                         }
[10:30:57.929]                         if (!has_future || version < "1.8.0") {
[10:30:57.929]                           info <- base::c(r_version = base::gsub("R version ", 
[10:30:57.929]                             "", base::R.version$version.string), 
[10:30:57.929]                             platform = base::sprintf("%s (%s-bit)", 
[10:30:57.929]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:30:57.929]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:30:57.929]                               "release", "version")], collapse = " "), 
[10:30:57.929]                             hostname = base::Sys.info()[["nodename"]])
[10:30:57.929]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:30:57.929]                             info)
[10:30:57.929]                           info <- base::paste(info, collapse = "; ")
[10:30:57.929]                           if (!has_future) {
[10:30:57.929]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:30:57.929]                               info)
[10:30:57.929]                           }
[10:30:57.929]                           else {
[10:30:57.929]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:30:57.929]                               info, version)
[10:30:57.929]                           }
[10:30:57.929]                           base::stop(msg)
[10:30:57.929]                         }
[10:30:57.929]                       })
[10:30:57.929]                     }
[10:30:57.929]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:30:57.929]                     base::options(mc.cores = 1L)
[10:30:57.929]                   }
[10:30:57.929]                   ...future.strategy.old <- future::plan("list")
[10:30:57.929]                   options(future.plan = NULL)
[10:30:57.929]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:30:57.929]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:30:57.929]                 }
[10:30:57.929]                 ...future.workdir <- getwd()
[10:30:57.929]             }
[10:30:57.929]             ...future.oldOptions <- base::as.list(base::.Options)
[10:30:57.929]             ...future.oldEnvVars <- base::Sys.getenv()
[10:30:57.929]         }
[10:30:57.929]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:30:57.929]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:30:57.929]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:30:57.929]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:30:57.929]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:30:57.929]             future.stdout.windows.reencode = NULL, width = 80L)
[10:30:57.929]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:30:57.929]             base::names(...future.oldOptions))
[10:30:57.929]     }
[10:30:57.929]     if (FALSE) {
[10:30:57.929]     }
[10:30:57.929]     else {
[10:30:57.929]         if (TRUE) {
[10:30:57.929]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:30:57.929]                 open = "w")
[10:30:57.929]         }
[10:30:57.929]         else {
[10:30:57.929]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:30:57.929]                 windows = "NUL", "/dev/null"), open = "w")
[10:30:57.929]         }
[10:30:57.929]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:30:57.929]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:30:57.929]             base::sink(type = "output", split = FALSE)
[10:30:57.929]             base::close(...future.stdout)
[10:30:57.929]         }, add = TRUE)
[10:30:57.929]     }
[10:30:57.929]     ...future.frame <- base::sys.nframe()
[10:30:57.929]     ...future.conditions <- base::list()
[10:30:57.929]     ...future.rng <- base::globalenv()$.Random.seed
[10:30:57.929]     if (FALSE) {
[10:30:57.929]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:30:57.929]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:30:57.929]     }
[10:30:57.929]     ...future.result <- base::tryCatch({
[10:30:57.929]         base::withCallingHandlers({
[10:30:57.929]             ...future.value <- base::withVisible(base::local({
[10:30:57.929]                 ...future.makeSendCondition <- base::local({
[10:30:57.929]                   sendCondition <- NULL
[10:30:57.929]                   function(frame = 1L) {
[10:30:57.929]                     if (is.function(sendCondition)) 
[10:30:57.929]                       return(sendCondition)
[10:30:57.929]                     ns <- getNamespace("parallel")
[10:30:57.929]                     if (exists("sendData", mode = "function", 
[10:30:57.929]                       envir = ns)) {
[10:30:57.929]                       parallel_sendData <- get("sendData", mode = "function", 
[10:30:57.929]                         envir = ns)
[10:30:57.929]                       envir <- sys.frame(frame)
[10:30:57.929]                       master <- NULL
[10:30:57.929]                       while (!identical(envir, .GlobalEnv) && 
[10:30:57.929]                         !identical(envir, emptyenv())) {
[10:30:57.929]                         if (exists("master", mode = "list", envir = envir, 
[10:30:57.929]                           inherits = FALSE)) {
[10:30:57.929]                           master <- get("master", mode = "list", 
[10:30:57.929]                             envir = envir, inherits = FALSE)
[10:30:57.929]                           if (inherits(master, c("SOCKnode", 
[10:30:57.929]                             "SOCK0node"))) {
[10:30:57.929]                             sendCondition <<- function(cond) {
[10:30:57.929]                               data <- list(type = "VALUE", value = cond, 
[10:30:57.929]                                 success = TRUE)
[10:30:57.929]                               parallel_sendData(master, data)
[10:30:57.929]                             }
[10:30:57.929]                             return(sendCondition)
[10:30:57.929]                           }
[10:30:57.929]                         }
[10:30:57.929]                         frame <- frame + 1L
[10:30:57.929]                         envir <- sys.frame(frame)
[10:30:57.929]                       }
[10:30:57.929]                     }
[10:30:57.929]                     sendCondition <<- function(cond) NULL
[10:30:57.929]                   }
[10:30:57.929]                 })
[10:30:57.929]                 withCallingHandlers({
[10:30:57.929]                   {
[10:30:57.929]                     do.call(function(...) {
[10:30:57.929]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:57.929]                       if (!identical(...future.globals.maxSize.org, 
[10:30:57.929]                         ...future.globals.maxSize)) {
[10:30:57.929]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:57.929]                         on.exit(options(oopts), add = TRUE)
[10:30:57.929]                       }
[10:30:57.929]                       {
[10:30:57.929]                         lapply(seq_along(...future.elements_ii), 
[10:30:57.929]                           FUN = function(jj) {
[10:30:57.929]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:57.929]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:57.929]                               envir = globalenv(), inherits = FALSE)
[10:30:57.929]                             ...future.FUN(...future.X_jj, ...)
[10:30:57.929]                           })
[10:30:57.929]                       }
[10:30:57.929]                     }, args = future.call.arguments)
[10:30:57.929]                   }
[10:30:57.929]                 }, immediateCondition = function(cond) {
[10:30:57.929]                   sendCondition <- ...future.makeSendCondition()
[10:30:57.929]                   sendCondition(cond)
[10:30:57.929]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:57.929]                   {
[10:30:57.929]                     inherits <- base::inherits
[10:30:57.929]                     invokeRestart <- base::invokeRestart
[10:30:57.929]                     is.null <- base::is.null
[10:30:57.929]                     muffled <- FALSE
[10:30:57.929]                     if (inherits(cond, "message")) {
[10:30:57.929]                       muffled <- grepl(pattern, "muffleMessage")
[10:30:57.929]                       if (muffled) 
[10:30:57.929]                         invokeRestart("muffleMessage")
[10:30:57.929]                     }
[10:30:57.929]                     else if (inherits(cond, "warning")) {
[10:30:57.929]                       muffled <- grepl(pattern, "muffleWarning")
[10:30:57.929]                       if (muffled) 
[10:30:57.929]                         invokeRestart("muffleWarning")
[10:30:57.929]                     }
[10:30:57.929]                     else if (inherits(cond, "condition")) {
[10:30:57.929]                       if (!is.null(pattern)) {
[10:30:57.929]                         computeRestarts <- base::computeRestarts
[10:30:57.929]                         grepl <- base::grepl
[10:30:57.929]                         restarts <- computeRestarts(cond)
[10:30:57.929]                         for (restart in restarts) {
[10:30:57.929]                           name <- restart$name
[10:30:57.929]                           if (is.null(name)) 
[10:30:57.929]                             next
[10:30:57.929]                           if (!grepl(pattern, name)) 
[10:30:57.929]                             next
[10:30:57.929]                           invokeRestart(restart)
[10:30:57.929]                           muffled <- TRUE
[10:30:57.929]                           break
[10:30:57.929]                         }
[10:30:57.929]                       }
[10:30:57.929]                     }
[10:30:57.929]                     invisible(muffled)
[10:30:57.929]                   }
[10:30:57.929]                   muffleCondition(cond)
[10:30:57.929]                 })
[10:30:57.929]             }))
[10:30:57.929]             future::FutureResult(value = ...future.value$value, 
[10:30:57.929]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:57.929]                   ...future.rng), globalenv = if (FALSE) 
[10:30:57.929]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:30:57.929]                     ...future.globalenv.names))
[10:30:57.929]                 else NULL, started = ...future.startTime, version = "1.8")
[10:30:57.929]         }, condition = base::local({
[10:30:57.929]             c <- base::c
[10:30:57.929]             inherits <- base::inherits
[10:30:57.929]             invokeRestart <- base::invokeRestart
[10:30:57.929]             length <- base::length
[10:30:57.929]             list <- base::list
[10:30:57.929]             seq.int <- base::seq.int
[10:30:57.929]             signalCondition <- base::signalCondition
[10:30:57.929]             sys.calls <- base::sys.calls
[10:30:57.929]             `[[` <- base::`[[`
[10:30:57.929]             `+` <- base::`+`
[10:30:57.929]             `<<-` <- base::`<<-`
[10:30:57.929]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:30:57.929]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:30:57.929]                   3L)]
[10:30:57.929]             }
[10:30:57.929]             function(cond) {
[10:30:57.929]                 is_error <- inherits(cond, "error")
[10:30:57.929]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:30:57.929]                   NULL)
[10:30:57.929]                 if (is_error) {
[10:30:57.929]                   sessionInformation <- function() {
[10:30:57.929]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:30:57.929]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:30:57.929]                       search = base::search(), system = base::Sys.info())
[10:30:57.929]                   }
[10:30:57.929]                   ...future.conditions[[length(...future.conditions) + 
[10:30:57.929]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:30:57.929]                     cond$call), session = sessionInformation(), 
[10:30:57.929]                     timestamp = base::Sys.time(), signaled = 0L)
[10:30:57.929]                   signalCondition(cond)
[10:30:57.929]                 }
[10:30:57.929]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:30:57.929]                 "immediateCondition"))) {
[10:30:57.929]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:30:57.929]                   ...future.conditions[[length(...future.conditions) + 
[10:30:57.929]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:30:57.929]                   if (TRUE && !signal) {
[10:30:57.929]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:57.929]                     {
[10:30:57.929]                       inherits <- base::inherits
[10:30:57.929]                       invokeRestart <- base::invokeRestart
[10:30:57.929]                       is.null <- base::is.null
[10:30:57.929]                       muffled <- FALSE
[10:30:57.929]                       if (inherits(cond, "message")) {
[10:30:57.929]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:57.929]                         if (muffled) 
[10:30:57.929]                           invokeRestart("muffleMessage")
[10:30:57.929]                       }
[10:30:57.929]                       else if (inherits(cond, "warning")) {
[10:30:57.929]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:57.929]                         if (muffled) 
[10:30:57.929]                           invokeRestart("muffleWarning")
[10:30:57.929]                       }
[10:30:57.929]                       else if (inherits(cond, "condition")) {
[10:30:57.929]                         if (!is.null(pattern)) {
[10:30:57.929]                           computeRestarts <- base::computeRestarts
[10:30:57.929]                           grepl <- base::grepl
[10:30:57.929]                           restarts <- computeRestarts(cond)
[10:30:57.929]                           for (restart in restarts) {
[10:30:57.929]                             name <- restart$name
[10:30:57.929]                             if (is.null(name)) 
[10:30:57.929]                               next
[10:30:57.929]                             if (!grepl(pattern, name)) 
[10:30:57.929]                               next
[10:30:57.929]                             invokeRestart(restart)
[10:30:57.929]                             muffled <- TRUE
[10:30:57.929]                             break
[10:30:57.929]                           }
[10:30:57.929]                         }
[10:30:57.929]                       }
[10:30:57.929]                       invisible(muffled)
[10:30:57.929]                     }
[10:30:57.929]                     muffleCondition(cond, pattern = "^muffle")
[10:30:57.929]                   }
[10:30:57.929]                 }
[10:30:57.929]                 else {
[10:30:57.929]                   if (TRUE) {
[10:30:57.929]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:57.929]                     {
[10:30:57.929]                       inherits <- base::inherits
[10:30:57.929]                       invokeRestart <- base::invokeRestart
[10:30:57.929]                       is.null <- base::is.null
[10:30:57.929]                       muffled <- FALSE
[10:30:57.929]                       if (inherits(cond, "message")) {
[10:30:57.929]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:57.929]                         if (muffled) 
[10:30:57.929]                           invokeRestart("muffleMessage")
[10:30:57.929]                       }
[10:30:57.929]                       else if (inherits(cond, "warning")) {
[10:30:57.929]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:57.929]                         if (muffled) 
[10:30:57.929]                           invokeRestart("muffleWarning")
[10:30:57.929]                       }
[10:30:57.929]                       else if (inherits(cond, "condition")) {
[10:30:57.929]                         if (!is.null(pattern)) {
[10:30:57.929]                           computeRestarts <- base::computeRestarts
[10:30:57.929]                           grepl <- base::grepl
[10:30:57.929]                           restarts <- computeRestarts(cond)
[10:30:57.929]                           for (restart in restarts) {
[10:30:57.929]                             name <- restart$name
[10:30:57.929]                             if (is.null(name)) 
[10:30:57.929]                               next
[10:30:57.929]                             if (!grepl(pattern, name)) 
[10:30:57.929]                               next
[10:30:57.929]                             invokeRestart(restart)
[10:30:57.929]                             muffled <- TRUE
[10:30:57.929]                             break
[10:30:57.929]                           }
[10:30:57.929]                         }
[10:30:57.929]                       }
[10:30:57.929]                       invisible(muffled)
[10:30:57.929]                     }
[10:30:57.929]                     muffleCondition(cond, pattern = "^muffle")
[10:30:57.929]                   }
[10:30:57.929]                 }
[10:30:57.929]             }
[10:30:57.929]         }))
[10:30:57.929]     }, error = function(ex) {
[10:30:57.929]         base::structure(base::list(value = NULL, visible = NULL, 
[10:30:57.929]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:57.929]                 ...future.rng), started = ...future.startTime, 
[10:30:57.929]             finished = Sys.time(), session_uuid = NA_character_, 
[10:30:57.929]             version = "1.8"), class = "FutureResult")
[10:30:57.929]     }, finally = {
[10:30:57.929]         if (!identical(...future.workdir, getwd())) 
[10:30:57.929]             setwd(...future.workdir)
[10:30:57.929]         {
[10:30:57.929]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:30:57.929]                 ...future.oldOptions$nwarnings <- NULL
[10:30:57.929]             }
[10:30:57.929]             base::options(...future.oldOptions)
[10:30:57.929]             if (.Platform$OS.type == "windows") {
[10:30:57.929]                 old_names <- names(...future.oldEnvVars)
[10:30:57.929]                 envs <- base::Sys.getenv()
[10:30:57.929]                 names <- names(envs)
[10:30:57.929]                 common <- intersect(names, old_names)
[10:30:57.929]                 added <- setdiff(names, old_names)
[10:30:57.929]                 removed <- setdiff(old_names, names)
[10:30:57.929]                 changed <- common[...future.oldEnvVars[common] != 
[10:30:57.929]                   envs[common]]
[10:30:57.929]                 NAMES <- toupper(changed)
[10:30:57.929]                 args <- list()
[10:30:57.929]                 for (kk in seq_along(NAMES)) {
[10:30:57.929]                   name <- changed[[kk]]
[10:30:57.929]                   NAME <- NAMES[[kk]]
[10:30:57.929]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:57.929]                     next
[10:30:57.929]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:57.929]                 }
[10:30:57.929]                 NAMES <- toupper(added)
[10:30:57.929]                 for (kk in seq_along(NAMES)) {
[10:30:57.929]                   name <- added[[kk]]
[10:30:57.929]                   NAME <- NAMES[[kk]]
[10:30:57.929]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:57.929]                     next
[10:30:57.929]                   args[[name]] <- ""
[10:30:57.929]                 }
[10:30:57.929]                 NAMES <- toupper(removed)
[10:30:57.929]                 for (kk in seq_along(NAMES)) {
[10:30:57.929]                   name <- removed[[kk]]
[10:30:57.929]                   NAME <- NAMES[[kk]]
[10:30:57.929]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:57.929]                     next
[10:30:57.929]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:57.929]                 }
[10:30:57.929]                 if (length(args) > 0) 
[10:30:57.929]                   base::do.call(base::Sys.setenv, args = args)
[10:30:57.929]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:30:57.929]             }
[10:30:57.929]             else {
[10:30:57.929]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:30:57.929]             }
[10:30:57.929]             {
[10:30:57.929]                 if (base::length(...future.futureOptionsAdded) > 
[10:30:57.929]                   0L) {
[10:30:57.929]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:30:57.929]                   base::names(opts) <- ...future.futureOptionsAdded
[10:30:57.929]                   base::options(opts)
[10:30:57.929]                 }
[10:30:57.929]                 {
[10:30:57.929]                   {
[10:30:57.929]                     base::options(mc.cores = ...future.mc.cores.old)
[10:30:57.929]                     NULL
[10:30:57.929]                   }
[10:30:57.929]                   options(future.plan = NULL)
[10:30:57.929]                   if (is.na(NA_character_)) 
[10:30:57.929]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:30:57.929]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:30:57.929]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:30:57.929]                     .init = FALSE)
[10:30:57.929]                 }
[10:30:57.929]             }
[10:30:57.929]         }
[10:30:57.929]     })
[10:30:57.929]     if (TRUE) {
[10:30:57.929]         base::sink(type = "output", split = FALSE)
[10:30:57.929]         if (TRUE) {
[10:30:57.929]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:30:57.929]         }
[10:30:57.929]         else {
[10:30:57.929]             ...future.result["stdout"] <- base::list(NULL)
[10:30:57.929]         }
[10:30:57.929]         base::close(...future.stdout)
[10:30:57.929]         ...future.stdout <- NULL
[10:30:57.929]     }
[10:30:57.929]     ...future.result$conditions <- ...future.conditions
[10:30:57.929]     ...future.result$finished <- base::Sys.time()
[10:30:57.929]     ...future.result
[10:30:57.929] }
[10:30:57.931] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[10:30:57.931] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[10:30:57.932] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[10:30:57.932] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[10:30:57.932] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[10:30:57.933] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[10:30:57.933] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[10:30:57.933] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[10:30:57.933] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[10:30:57.933] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[10:30:57.934] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[10:30:57.934] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[10:30:57.934] MultisessionFuture started
[10:30:57.934] - Launch lazy future ... done
[10:30:57.935] run() for ‘MultisessionFuture’ ... done
[10:30:57.935] Created future:
[10:30:57.935] MultisessionFuture:
[10:30:57.935] Label: ‘future_replicate-2’
[10:30:57.935] Expression:
[10:30:57.935] {
[10:30:57.935]     do.call(function(...) {
[10:30:57.935]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:57.935]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:57.935]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:57.935]             on.exit(options(oopts), add = TRUE)
[10:30:57.935]         }
[10:30:57.935]         {
[10:30:57.935]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:57.935]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:57.935]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:57.935]                   envir = globalenv(), inherits = FALSE)
[10:30:57.935]                 ...future.FUN(...future.X_jj, ...)
[10:30:57.935]             })
[10:30:57.935]         }
[10:30:57.935]     }, args = future.call.arguments)
[10:30:57.935] }
[10:30:57.935] Lazy evaluation: FALSE
[10:30:57.935] Asynchronous evaluation: TRUE
[10:30:57.935] Local evaluation: TRUE
[10:30:57.935] Environment: R_GlobalEnv
[10:30:57.935] Capture standard output: TRUE
[10:30:57.935] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:30:57.935] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:30:57.935] Packages: <none>
[10:30:57.935] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:30:57.935] Resolved: FALSE
[10:30:57.935] Value: <not collected>
[10:30:57.935] Conditions captured: <none>
[10:30:57.935] Early signaling: FALSE
[10:30:57.935] Owner process: 7cdcbd4b-6c47-ca9a-dc3f-e18236d134b8
[10:30:57.935] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:57.946] Chunk #2 of 2 ... DONE
[10:30:57.946] Launching 2 futures (chunks) ... DONE
[10:30:57.946] Resolving 2 futures (chunks) ...
[10:30:57.947] resolve() on list ...
[10:30:57.947]  recursive: 0
[10:30:57.947]  length: 2
[10:30:57.947] 
[10:30:57.947] receiveMessageFromWorker() for ClusterFuture ...
[10:30:57.947] - Validating connection of MultisessionFuture
[10:30:57.948] - received message: FutureResult
[10:30:57.948] - Received FutureResult
[10:30:57.948] - Erased future from FutureRegistry
[10:30:57.948] result() for ClusterFuture ...
[10:30:57.948] - result already collected: FutureResult
[10:30:57.948] result() for ClusterFuture ... done
[10:30:57.948] receiveMessageFromWorker() for ClusterFuture ... done
[10:30:57.948] Future #1
[10:30:57.948] result() for ClusterFuture ...
[10:30:57.948] - result already collected: FutureResult
[10:30:57.949] result() for ClusterFuture ... done
[10:30:57.949] result() for ClusterFuture ...
[10:30:57.949] - result already collected: FutureResult
[10:30:57.949] result() for ClusterFuture ... done
[10:30:57.949] signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:30:57.949] - nx: 2
[10:30:57.949] - relay: TRUE
[10:30:57.949] - stdout: TRUE
[10:30:57.949] - signal: TRUE
[10:30:57.949] - resignal: FALSE
[10:30:57.949] - force: TRUE
[10:30:57.950] - relayed: [n=2] FALSE, FALSE
[10:30:57.950] - queued futures: [n=2] FALSE, FALSE
[10:30:57.950]  - until=1
[10:30:57.950]  - relaying element #1
[10:30:57.950] result() for ClusterFuture ...
[10:30:57.950] - result already collected: FutureResult
[10:30:57.950] result() for ClusterFuture ... done
[10:30:57.950] result() for ClusterFuture ...
[10:30:57.950] - result already collected: FutureResult
[10:30:57.950] result() for ClusterFuture ... done
[10:30:57.950] result() for ClusterFuture ...
[10:30:57.951] - result already collected: FutureResult
[10:30:57.951] result() for ClusterFuture ... done
[10:30:57.951] result() for ClusterFuture ...
[10:30:57.951] - result already collected: FutureResult
[10:30:57.951] result() for ClusterFuture ... done
[10:30:57.951] - relayed: [n=2] TRUE, FALSE
[10:30:57.951] - queued futures: [n=2] TRUE, FALSE
[10:30:57.951] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:30:57.951]  length: 1 (resolved future 1)
[10:30:57.978] receiveMessageFromWorker() for ClusterFuture ...
[10:30:57.979] - Validating connection of MultisessionFuture
[10:30:57.979] - received message: FutureResult
[10:30:57.979] - Received FutureResult
[10:30:57.979] - Erased future from FutureRegistry
[10:30:57.979] result() for ClusterFuture ...
[10:30:57.979] - result already collected: FutureResult
[10:30:57.979] result() for ClusterFuture ... done
[10:30:57.980] receiveMessageFromWorker() for ClusterFuture ... done
[10:30:57.980] Future #2
[10:30:57.980] result() for ClusterFuture ...
[10:30:57.980] - result already collected: FutureResult
[10:30:57.980] result() for ClusterFuture ... done
[10:30:57.980] result() for ClusterFuture ...
[10:30:57.980] - result already collected: FutureResult
[10:30:57.980] result() for ClusterFuture ... done
[10:30:57.980] signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:30:57.980] - nx: 2
[10:30:57.980] - relay: TRUE
[10:30:57.981] - stdout: TRUE
[10:30:57.981] - signal: TRUE
[10:30:57.981] - resignal: FALSE
[10:30:57.981] - force: TRUE
[10:30:57.981] - relayed: [n=2] TRUE, FALSE
[10:30:57.981] - queued futures: [n=2] TRUE, FALSE
[10:30:57.981]  - until=2
[10:30:57.981]  - relaying element #2
[10:30:57.981] result() for ClusterFuture ...
[10:30:57.981] - result already collected: FutureResult
[10:30:57.981] result() for ClusterFuture ... done
[10:30:57.982] result() for ClusterFuture ...
[10:30:57.982] - result already collected: FutureResult
[10:30:57.982] result() for ClusterFuture ... done
[10:30:57.982] result() for ClusterFuture ...
[10:30:57.982] - result already collected: FutureResult
[10:30:57.982] result() for ClusterFuture ... done
[10:30:57.982] result() for ClusterFuture ...
[10:30:57.982] - result already collected: FutureResult
[10:30:57.982] result() for ClusterFuture ... done
[10:30:57.982] - relayed: [n=2] TRUE, TRUE
[10:30:57.983] - queued futures: [n=2] TRUE, TRUE
[10:30:57.983] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:30:57.983]  length: 0 (resolved future 2)
[10:30:57.983] Relaying remaining futures
[10:30:57.983] signalConditionsASAP(NULL, pos=0) ...
[10:30:57.983] - nx: 2
[10:30:57.983] - relay: TRUE
[10:30:57.983] - stdout: TRUE
[10:30:57.983] - signal: TRUE
[10:30:57.983] - resignal: FALSE
[10:30:57.983] - force: TRUE
[10:30:57.983] - relayed: [n=2] TRUE, TRUE
[10:30:57.984] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:30:57.984] - relayed: [n=2] TRUE, TRUE
[10:30:57.984] - queued futures: [n=2] TRUE, TRUE
[10:30:57.984] signalConditionsASAP(NULL, pos=0) ... done
[10:30:57.984] resolve() on list ... DONE
[10:30:57.984] result() for ClusterFuture ...
[10:30:57.984] - result already collected: FutureResult
[10:30:57.984] result() for ClusterFuture ... done
[10:30:57.984] result() for ClusterFuture ...
[10:30:57.984] - result already collected: FutureResult
[10:30:57.984] result() for ClusterFuture ... done
[10:30:57.985] result() for ClusterFuture ...
[10:30:57.985] - result already collected: FutureResult
[10:30:57.985] result() for ClusterFuture ... done
[10:30:57.985] result() for ClusterFuture ...
[10:30:57.985] - result already collected: FutureResult
[10:30:57.985] result() for ClusterFuture ... done
[10:30:57.985]  - Number of value chunks collected: 2
[10:30:57.985] Resolving 2 futures (chunks) ... DONE
[10:30:57.985] Reducing values from 2 chunks ...
[10:30:57.985]  - Number of values collected after concatenation: 5
[10:30:57.986]  - Number of values expected: 5
[10:30:57.986] Reducing values from 2 chunks ... DONE
[10:30:57.986] future_lapply() ... DONE
[10:30:57.986] future_lapply() ...
[10:30:57.986] Generating random seeds ...
[10:30:57.986] Generating random seed streams for 5 elements ...
[10:30:57.987] Generating random seed streams for 5 elements ... DONE
[10:30:57.987] Generating random seeds ... DONE
[10:30:57.987] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:30:57.991] Number of chunks: 2
[10:30:57.991] getGlobalsAndPackagesXApply() ...
[10:30:57.991]  - future.globals: TRUE
[10:30:57.991] getGlobalsAndPackages() ...
[10:30:57.991] Searching for globals...
[10:30:57.992] - globals found: [2] ‘FUN’, ‘sample’
[10:30:57.993] Searching for globals ... DONE
[10:30:57.993] Resolving globals: FALSE
[10:30:57.993] The total size of the 1 globals is 616 bytes (616 bytes)
[10:30:57.993] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[10:30:57.994] - globals: [1] ‘FUN’
[10:30:57.994] 
[10:30:57.994] getGlobalsAndPackages() ... DONE
[10:30:57.994]  - globals found/used: [n=1] ‘FUN’
[10:30:57.994]  - needed namespaces: [n=0] 
[10:30:57.994] Finding globals ... DONE
[10:30:57.994]  - use_args: TRUE
[10:30:57.994]  - Getting '...' globals ...
[10:30:57.995] resolve() on list ...
[10:30:57.995]  recursive: 0
[10:30:57.995]  length: 1
[10:30:57.995]  elements: ‘...’
[10:30:57.995]  length: 0 (resolved future 1)
[10:30:57.995] resolve() on list ... DONE
[10:30:57.995]    - '...' content: [n=0] 
[10:30:57.995] List of 1
[10:30:57.995]  $ ...: list()
[10:30:57.995]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:57.995]  - attr(*, "where")=List of 1
[10:30:57.995]   ..$ ...:<environment: 0x55aba4d5be80> 
[10:30:57.995]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:57.995]  - attr(*, "resolved")= logi TRUE
[10:30:57.995]  - attr(*, "total_size")= num NA
[10:30:58.000]  - Getting '...' globals ... DONE
[10:30:58.000] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:30:58.000] List of 2
[10:30:58.000]  $ ...future.FUN:function (...)  
[10:30:58.000]  $ ...          : list()
[10:30:58.000]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:58.000]  - attr(*, "where")=List of 2
[10:30:58.000]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:30:58.000]   ..$ ...          :<environment: 0x55aba4d5be80> 
[10:30:58.000]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:58.000]  - attr(*, "resolved")= logi FALSE
[10:30:58.000]  - attr(*, "total_size")= num 616
[10:30:58.002] Packages to be attached in all futures: [n=0] 
[10:30:58.002] getGlobalsAndPackagesXApply() ... DONE
[10:30:58.003] Number of futures (= number of chunks): 2
[10:30:58.003] Launching 2 futures (chunks) ...
[10:30:58.003] Chunk #1 of 2 ...
[10:30:58.003]  - Finding globals in 'X' for chunk #1 ...
[10:30:58.003] getGlobalsAndPackages() ...
[10:30:58.003] Searching for globals...
[10:30:58.003] 
[10:30:58.003] Searching for globals ... DONE
[10:30:58.004] - globals: [0] <none>
[10:30:58.004] getGlobalsAndPackages() ... DONE
[10:30:58.004]    + additional globals found: [n=0] 
[10:30:58.004]    + additional namespaces needed: [n=0] 
[10:30:58.004]  - Finding globals in 'X' for chunk #1 ... DONE
[10:30:58.004]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:30:58.004]  - seeds: [2] <seeds>
[10:30:58.004]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:58.004] getGlobalsAndPackages() ...
[10:30:58.004] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:58.005] Resolving globals: FALSE
[10:30:58.005] Tweak future expression to call with '...' arguments ...
[10:30:58.005] {
[10:30:58.005]     do.call(function(...) {
[10:30:58.005]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:58.005]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:58.005]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:58.005]             on.exit(options(oopts), add = TRUE)
[10:30:58.005]         }
[10:30:58.005]         {
[10:30:58.005]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:58.005]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:58.005]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:58.005]                   envir = globalenv(), inherits = FALSE)
[10:30:58.005]                 ...future.FUN(...future.X_jj, ...)
[10:30:58.005]             })
[10:30:58.005]         }
[10:30:58.005]     }, args = future.call.arguments)
[10:30:58.005] }
[10:30:58.005] Tweak future expression to call with '...' arguments ... DONE
[10:30:58.005] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:58.005] 
[10:30:58.006] getGlobalsAndPackages() ... DONE
[10:30:58.006] run() for ‘Future’ ...
[10:30:58.006] - state: ‘created’
[10:30:58.006] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:30:58.020] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:58.020] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:30:58.021]   - Field: ‘node’
[10:30:58.021]   - Field: ‘label’
[10:30:58.021]   - Field: ‘local’
[10:30:58.021]   - Field: ‘owner’
[10:30:58.021]   - Field: ‘envir’
[10:30:58.021]   - Field: ‘workers’
[10:30:58.021]   - Field: ‘packages’
[10:30:58.021]   - Field: ‘gc’
[10:30:58.021]   - Field: ‘conditions’
[10:30:58.022]   - Field: ‘persistent’
[10:30:58.022]   - Field: ‘expr’
[10:30:58.022]   - Field: ‘uuid’
[10:30:58.022]   - Field: ‘seed’
[10:30:58.022]   - Field: ‘version’
[10:30:58.022]   - Field: ‘result’
[10:30:58.022]   - Field: ‘asynchronous’
[10:30:58.022]   - Field: ‘calls’
[10:30:58.022]   - Field: ‘globals’
[10:30:58.022]   - Field: ‘stdout’
[10:30:58.022]   - Field: ‘earlySignal’
[10:30:58.023]   - Field: ‘lazy’
[10:30:58.023]   - Field: ‘state’
[10:30:58.023] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:30:58.023] - Launch lazy future ...
[10:30:58.023] Packages needed by the future expression (n = 0): <none>
[10:30:58.023] Packages needed by future strategies (n = 0): <none>
[10:30:58.024] {
[10:30:58.024]     {
[10:30:58.024]         {
[10:30:58.024]             ...future.startTime <- base::Sys.time()
[10:30:58.024]             {
[10:30:58.024]                 {
[10:30:58.024]                   {
[10:30:58.024]                     {
[10:30:58.024]                       base::local({
[10:30:58.024]                         has_future <- base::requireNamespace("future", 
[10:30:58.024]                           quietly = TRUE)
[10:30:58.024]                         if (has_future) {
[10:30:58.024]                           ns <- base::getNamespace("future")
[10:30:58.024]                           version <- ns[[".package"]][["version"]]
[10:30:58.024]                           if (is.null(version)) 
[10:30:58.024]                             version <- utils::packageVersion("future")
[10:30:58.024]                         }
[10:30:58.024]                         else {
[10:30:58.024]                           version <- NULL
[10:30:58.024]                         }
[10:30:58.024]                         if (!has_future || version < "1.8.0") {
[10:30:58.024]                           info <- base::c(r_version = base::gsub("R version ", 
[10:30:58.024]                             "", base::R.version$version.string), 
[10:30:58.024]                             platform = base::sprintf("%s (%s-bit)", 
[10:30:58.024]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:30:58.024]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:30:58.024]                               "release", "version")], collapse = " "), 
[10:30:58.024]                             hostname = base::Sys.info()[["nodename"]])
[10:30:58.024]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:30:58.024]                             info)
[10:30:58.024]                           info <- base::paste(info, collapse = "; ")
[10:30:58.024]                           if (!has_future) {
[10:30:58.024]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:30:58.024]                               info)
[10:30:58.024]                           }
[10:30:58.024]                           else {
[10:30:58.024]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:30:58.024]                               info, version)
[10:30:58.024]                           }
[10:30:58.024]                           base::stop(msg)
[10:30:58.024]                         }
[10:30:58.024]                       })
[10:30:58.024]                     }
[10:30:58.024]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:30:58.024]                     base::options(mc.cores = 1L)
[10:30:58.024]                   }
[10:30:58.024]                   ...future.strategy.old <- future::plan("list")
[10:30:58.024]                   options(future.plan = NULL)
[10:30:58.024]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:30:58.024]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:30:58.024]                 }
[10:30:58.024]                 ...future.workdir <- getwd()
[10:30:58.024]             }
[10:30:58.024]             ...future.oldOptions <- base::as.list(base::.Options)
[10:30:58.024]             ...future.oldEnvVars <- base::Sys.getenv()
[10:30:58.024]         }
[10:30:58.024]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:30:58.024]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:30:58.024]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:30:58.024]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:30:58.024]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:30:58.024]             future.stdout.windows.reencode = NULL, width = 80L)
[10:30:58.024]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:30:58.024]             base::names(...future.oldOptions))
[10:30:58.024]     }
[10:30:58.024]     if (FALSE) {
[10:30:58.024]     }
[10:30:58.024]     else {
[10:30:58.024]         if (TRUE) {
[10:30:58.024]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:30:58.024]                 open = "w")
[10:30:58.024]         }
[10:30:58.024]         else {
[10:30:58.024]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:30:58.024]                 windows = "NUL", "/dev/null"), open = "w")
[10:30:58.024]         }
[10:30:58.024]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:30:58.024]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:30:58.024]             base::sink(type = "output", split = FALSE)
[10:30:58.024]             base::close(...future.stdout)
[10:30:58.024]         }, add = TRUE)
[10:30:58.024]     }
[10:30:58.024]     ...future.frame <- base::sys.nframe()
[10:30:58.024]     ...future.conditions <- base::list()
[10:30:58.024]     ...future.rng <- base::globalenv()$.Random.seed
[10:30:58.024]     if (FALSE) {
[10:30:58.024]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:30:58.024]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:30:58.024]     }
[10:30:58.024]     ...future.result <- base::tryCatch({
[10:30:58.024]         base::withCallingHandlers({
[10:30:58.024]             ...future.value <- base::withVisible(base::local({
[10:30:58.024]                 ...future.makeSendCondition <- base::local({
[10:30:58.024]                   sendCondition <- NULL
[10:30:58.024]                   function(frame = 1L) {
[10:30:58.024]                     if (is.function(sendCondition)) 
[10:30:58.024]                       return(sendCondition)
[10:30:58.024]                     ns <- getNamespace("parallel")
[10:30:58.024]                     if (exists("sendData", mode = "function", 
[10:30:58.024]                       envir = ns)) {
[10:30:58.024]                       parallel_sendData <- get("sendData", mode = "function", 
[10:30:58.024]                         envir = ns)
[10:30:58.024]                       envir <- sys.frame(frame)
[10:30:58.024]                       master <- NULL
[10:30:58.024]                       while (!identical(envir, .GlobalEnv) && 
[10:30:58.024]                         !identical(envir, emptyenv())) {
[10:30:58.024]                         if (exists("master", mode = "list", envir = envir, 
[10:30:58.024]                           inherits = FALSE)) {
[10:30:58.024]                           master <- get("master", mode = "list", 
[10:30:58.024]                             envir = envir, inherits = FALSE)
[10:30:58.024]                           if (inherits(master, c("SOCKnode", 
[10:30:58.024]                             "SOCK0node"))) {
[10:30:58.024]                             sendCondition <<- function(cond) {
[10:30:58.024]                               data <- list(type = "VALUE", value = cond, 
[10:30:58.024]                                 success = TRUE)
[10:30:58.024]                               parallel_sendData(master, data)
[10:30:58.024]                             }
[10:30:58.024]                             return(sendCondition)
[10:30:58.024]                           }
[10:30:58.024]                         }
[10:30:58.024]                         frame <- frame + 1L
[10:30:58.024]                         envir <- sys.frame(frame)
[10:30:58.024]                       }
[10:30:58.024]                     }
[10:30:58.024]                     sendCondition <<- function(cond) NULL
[10:30:58.024]                   }
[10:30:58.024]                 })
[10:30:58.024]                 withCallingHandlers({
[10:30:58.024]                   {
[10:30:58.024]                     do.call(function(...) {
[10:30:58.024]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:58.024]                       if (!identical(...future.globals.maxSize.org, 
[10:30:58.024]                         ...future.globals.maxSize)) {
[10:30:58.024]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:58.024]                         on.exit(options(oopts), add = TRUE)
[10:30:58.024]                       }
[10:30:58.024]                       {
[10:30:58.024]                         lapply(seq_along(...future.elements_ii), 
[10:30:58.024]                           FUN = function(jj) {
[10:30:58.024]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:58.024]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:58.024]                               envir = globalenv(), inherits = FALSE)
[10:30:58.024]                             ...future.FUN(...future.X_jj, ...)
[10:30:58.024]                           })
[10:30:58.024]                       }
[10:30:58.024]                     }, args = future.call.arguments)
[10:30:58.024]                   }
[10:30:58.024]                 }, immediateCondition = function(cond) {
[10:30:58.024]                   sendCondition <- ...future.makeSendCondition()
[10:30:58.024]                   sendCondition(cond)
[10:30:58.024]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:58.024]                   {
[10:30:58.024]                     inherits <- base::inherits
[10:30:58.024]                     invokeRestart <- base::invokeRestart
[10:30:58.024]                     is.null <- base::is.null
[10:30:58.024]                     muffled <- FALSE
[10:30:58.024]                     if (inherits(cond, "message")) {
[10:30:58.024]                       muffled <- grepl(pattern, "muffleMessage")
[10:30:58.024]                       if (muffled) 
[10:30:58.024]                         invokeRestart("muffleMessage")
[10:30:58.024]                     }
[10:30:58.024]                     else if (inherits(cond, "warning")) {
[10:30:58.024]                       muffled <- grepl(pattern, "muffleWarning")
[10:30:58.024]                       if (muffled) 
[10:30:58.024]                         invokeRestart("muffleWarning")
[10:30:58.024]                     }
[10:30:58.024]                     else if (inherits(cond, "condition")) {
[10:30:58.024]                       if (!is.null(pattern)) {
[10:30:58.024]                         computeRestarts <- base::computeRestarts
[10:30:58.024]                         grepl <- base::grepl
[10:30:58.024]                         restarts <- computeRestarts(cond)
[10:30:58.024]                         for (restart in restarts) {
[10:30:58.024]                           name <- restart$name
[10:30:58.024]                           if (is.null(name)) 
[10:30:58.024]                             next
[10:30:58.024]                           if (!grepl(pattern, name)) 
[10:30:58.024]                             next
[10:30:58.024]                           invokeRestart(restart)
[10:30:58.024]                           muffled <- TRUE
[10:30:58.024]                           break
[10:30:58.024]                         }
[10:30:58.024]                       }
[10:30:58.024]                     }
[10:30:58.024]                     invisible(muffled)
[10:30:58.024]                   }
[10:30:58.024]                   muffleCondition(cond)
[10:30:58.024]                 })
[10:30:58.024]             }))
[10:30:58.024]             future::FutureResult(value = ...future.value$value, 
[10:30:58.024]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:58.024]                   ...future.rng), globalenv = if (FALSE) 
[10:30:58.024]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:30:58.024]                     ...future.globalenv.names))
[10:30:58.024]                 else NULL, started = ...future.startTime, version = "1.8")
[10:30:58.024]         }, condition = base::local({
[10:30:58.024]             c <- base::c
[10:30:58.024]             inherits <- base::inherits
[10:30:58.024]             invokeRestart <- base::invokeRestart
[10:30:58.024]             length <- base::length
[10:30:58.024]             list <- base::list
[10:30:58.024]             seq.int <- base::seq.int
[10:30:58.024]             signalCondition <- base::signalCondition
[10:30:58.024]             sys.calls <- base::sys.calls
[10:30:58.024]             `[[` <- base::`[[`
[10:30:58.024]             `+` <- base::`+`
[10:30:58.024]             `<<-` <- base::`<<-`
[10:30:58.024]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:30:58.024]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:30:58.024]                   3L)]
[10:30:58.024]             }
[10:30:58.024]             function(cond) {
[10:30:58.024]                 is_error <- inherits(cond, "error")
[10:30:58.024]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:30:58.024]                   NULL)
[10:30:58.024]                 if (is_error) {
[10:30:58.024]                   sessionInformation <- function() {
[10:30:58.024]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:30:58.024]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:30:58.024]                       search = base::search(), system = base::Sys.info())
[10:30:58.024]                   }
[10:30:58.024]                   ...future.conditions[[length(...future.conditions) + 
[10:30:58.024]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:30:58.024]                     cond$call), session = sessionInformation(), 
[10:30:58.024]                     timestamp = base::Sys.time(), signaled = 0L)
[10:30:58.024]                   signalCondition(cond)
[10:30:58.024]                 }
[10:30:58.024]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:30:58.024]                 "immediateCondition"))) {
[10:30:58.024]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:30:58.024]                   ...future.conditions[[length(...future.conditions) + 
[10:30:58.024]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:30:58.024]                   if (TRUE && !signal) {
[10:30:58.024]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:58.024]                     {
[10:30:58.024]                       inherits <- base::inherits
[10:30:58.024]                       invokeRestart <- base::invokeRestart
[10:30:58.024]                       is.null <- base::is.null
[10:30:58.024]                       muffled <- FALSE
[10:30:58.024]                       if (inherits(cond, "message")) {
[10:30:58.024]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:58.024]                         if (muffled) 
[10:30:58.024]                           invokeRestart("muffleMessage")
[10:30:58.024]                       }
[10:30:58.024]                       else if (inherits(cond, "warning")) {
[10:30:58.024]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:58.024]                         if (muffled) 
[10:30:58.024]                           invokeRestart("muffleWarning")
[10:30:58.024]                       }
[10:30:58.024]                       else if (inherits(cond, "condition")) {
[10:30:58.024]                         if (!is.null(pattern)) {
[10:30:58.024]                           computeRestarts <- base::computeRestarts
[10:30:58.024]                           grepl <- base::grepl
[10:30:58.024]                           restarts <- computeRestarts(cond)
[10:30:58.024]                           for (restart in restarts) {
[10:30:58.024]                             name <- restart$name
[10:30:58.024]                             if (is.null(name)) 
[10:30:58.024]                               next
[10:30:58.024]                             if (!grepl(pattern, name)) 
[10:30:58.024]                               next
[10:30:58.024]                             invokeRestart(restart)
[10:30:58.024]                             muffled <- TRUE
[10:30:58.024]                             break
[10:30:58.024]                           }
[10:30:58.024]                         }
[10:30:58.024]                       }
[10:30:58.024]                       invisible(muffled)
[10:30:58.024]                     }
[10:30:58.024]                     muffleCondition(cond, pattern = "^muffle")
[10:30:58.024]                   }
[10:30:58.024]                 }
[10:30:58.024]                 else {
[10:30:58.024]                   if (TRUE) {
[10:30:58.024]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:58.024]                     {
[10:30:58.024]                       inherits <- base::inherits
[10:30:58.024]                       invokeRestart <- base::invokeRestart
[10:30:58.024]                       is.null <- base::is.null
[10:30:58.024]                       muffled <- FALSE
[10:30:58.024]                       if (inherits(cond, "message")) {
[10:30:58.024]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:58.024]                         if (muffled) 
[10:30:58.024]                           invokeRestart("muffleMessage")
[10:30:58.024]                       }
[10:30:58.024]                       else if (inherits(cond, "warning")) {
[10:30:58.024]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:58.024]                         if (muffled) 
[10:30:58.024]                           invokeRestart("muffleWarning")
[10:30:58.024]                       }
[10:30:58.024]                       else if (inherits(cond, "condition")) {
[10:30:58.024]                         if (!is.null(pattern)) {
[10:30:58.024]                           computeRestarts <- base::computeRestarts
[10:30:58.024]                           grepl <- base::grepl
[10:30:58.024]                           restarts <- computeRestarts(cond)
[10:30:58.024]                           for (restart in restarts) {
[10:30:58.024]                             name <- restart$name
[10:30:58.024]                             if (is.null(name)) 
[10:30:58.024]                               next
[10:30:58.024]                             if (!grepl(pattern, name)) 
[10:30:58.024]                               next
[10:30:58.024]                             invokeRestart(restart)
[10:30:58.024]                             muffled <- TRUE
[10:30:58.024]                             break
[10:30:58.024]                           }
[10:30:58.024]                         }
[10:30:58.024]                       }
[10:30:58.024]                       invisible(muffled)
[10:30:58.024]                     }
[10:30:58.024]                     muffleCondition(cond, pattern = "^muffle")
[10:30:58.024]                   }
[10:30:58.024]                 }
[10:30:58.024]             }
[10:30:58.024]         }))
[10:30:58.024]     }, error = function(ex) {
[10:30:58.024]         base::structure(base::list(value = NULL, visible = NULL, 
[10:30:58.024]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:58.024]                 ...future.rng), started = ...future.startTime, 
[10:30:58.024]             finished = Sys.time(), session_uuid = NA_character_, 
[10:30:58.024]             version = "1.8"), class = "FutureResult")
[10:30:58.024]     }, finally = {
[10:30:58.024]         if (!identical(...future.workdir, getwd())) 
[10:30:58.024]             setwd(...future.workdir)
[10:30:58.024]         {
[10:30:58.024]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:30:58.024]                 ...future.oldOptions$nwarnings <- NULL
[10:30:58.024]             }
[10:30:58.024]             base::options(...future.oldOptions)
[10:30:58.024]             if (.Platform$OS.type == "windows") {
[10:30:58.024]                 old_names <- names(...future.oldEnvVars)
[10:30:58.024]                 envs <- base::Sys.getenv()
[10:30:58.024]                 names <- names(envs)
[10:30:58.024]                 common <- intersect(names, old_names)
[10:30:58.024]                 added <- setdiff(names, old_names)
[10:30:58.024]                 removed <- setdiff(old_names, names)
[10:30:58.024]                 changed <- common[...future.oldEnvVars[common] != 
[10:30:58.024]                   envs[common]]
[10:30:58.024]                 NAMES <- toupper(changed)
[10:30:58.024]                 args <- list()
[10:30:58.024]                 for (kk in seq_along(NAMES)) {
[10:30:58.024]                   name <- changed[[kk]]
[10:30:58.024]                   NAME <- NAMES[[kk]]
[10:30:58.024]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:58.024]                     next
[10:30:58.024]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:58.024]                 }
[10:30:58.024]                 NAMES <- toupper(added)
[10:30:58.024]                 for (kk in seq_along(NAMES)) {
[10:30:58.024]                   name <- added[[kk]]
[10:30:58.024]                   NAME <- NAMES[[kk]]
[10:30:58.024]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:58.024]                     next
[10:30:58.024]                   args[[name]] <- ""
[10:30:58.024]                 }
[10:30:58.024]                 NAMES <- toupper(removed)
[10:30:58.024]                 for (kk in seq_along(NAMES)) {
[10:30:58.024]                   name <- removed[[kk]]
[10:30:58.024]                   NAME <- NAMES[[kk]]
[10:30:58.024]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:58.024]                     next
[10:30:58.024]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:58.024]                 }
[10:30:58.024]                 if (length(args) > 0) 
[10:30:58.024]                   base::do.call(base::Sys.setenv, args = args)
[10:30:58.024]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:30:58.024]             }
[10:30:58.024]             else {
[10:30:58.024]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:30:58.024]             }
[10:30:58.024]             {
[10:30:58.024]                 if (base::length(...future.futureOptionsAdded) > 
[10:30:58.024]                   0L) {
[10:30:58.024]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:30:58.024]                   base::names(opts) <- ...future.futureOptionsAdded
[10:30:58.024]                   base::options(opts)
[10:30:58.024]                 }
[10:30:58.024]                 {
[10:30:58.024]                   {
[10:30:58.024]                     base::options(mc.cores = ...future.mc.cores.old)
[10:30:58.024]                     NULL
[10:30:58.024]                   }
[10:30:58.024]                   options(future.plan = NULL)
[10:30:58.024]                   if (is.na(NA_character_)) 
[10:30:58.024]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:30:58.024]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:30:58.024]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:30:58.024]                     .init = FALSE)
[10:30:58.024]                 }
[10:30:58.024]             }
[10:30:58.024]         }
[10:30:58.024]     })
[10:30:58.024]     if (TRUE) {
[10:30:58.024]         base::sink(type = "output", split = FALSE)
[10:30:58.024]         if (TRUE) {
[10:30:58.024]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:30:58.024]         }
[10:30:58.024]         else {
[10:30:58.024]             ...future.result["stdout"] <- base::list(NULL)
[10:30:58.024]         }
[10:30:58.024]         base::close(...future.stdout)
[10:30:58.024]         ...future.stdout <- NULL
[10:30:58.024]     }
[10:30:58.024]     ...future.result$conditions <- ...future.conditions
[10:30:58.024]     ...future.result$finished <- base::Sys.time()
[10:30:58.024]     ...future.result
[10:30:58.024] }
[10:30:58.026] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[10:30:58.027] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[10:30:58.027] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[10:30:58.027] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[10:30:58.027] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[10:30:58.028] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[10:30:58.028] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[10:30:58.028] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[10:30:58.028] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[10:30:58.028] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[10:30:58.029] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[10:30:58.029] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[10:30:58.029] MultisessionFuture started
[10:30:58.030] - Launch lazy future ... done
[10:30:58.030] run() for ‘MultisessionFuture’ ... done
[10:30:58.030] Created future:
[10:30:58.030] MultisessionFuture:
[10:30:58.030] Label: ‘future_replicate-1’
[10:30:58.030] Expression:
[10:30:58.030] {
[10:30:58.030]     do.call(function(...) {
[10:30:58.030]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:58.030]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:58.030]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:58.030]             on.exit(options(oopts), add = TRUE)
[10:30:58.030]         }
[10:30:58.030]         {
[10:30:58.030]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:58.030]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:58.030]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:58.030]                   envir = globalenv(), inherits = FALSE)
[10:30:58.030]                 ...future.FUN(...future.X_jj, ...)
[10:30:58.030]             })
[10:30:58.030]         }
[10:30:58.030]     }, args = future.call.arguments)
[10:30:58.030] }
[10:30:58.030] Lazy evaluation: FALSE
[10:30:58.030] Asynchronous evaluation: TRUE
[10:30:58.030] Local evaluation: TRUE
[10:30:58.030] Environment: R_GlobalEnv
[10:30:58.030] Capture standard output: TRUE
[10:30:58.030] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:30:58.030] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:30:58.030] Packages: <none>
[10:30:58.030] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:30:58.030] Resolved: FALSE
[10:30:58.030] Value: <not collected>
[10:30:58.030] Conditions captured: <none>
[10:30:58.030] Early signaling: FALSE
[10:30:58.030] Owner process: 7cdcbd4b-6c47-ca9a-dc3f-e18236d134b8
[10:30:58.030] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:58.042] Chunk #1 of 2 ... DONE
[10:30:58.042] Chunk #2 of 2 ...
[10:30:58.042]  - Finding globals in 'X' for chunk #2 ...
[10:30:58.042] getGlobalsAndPackages() ...
[10:30:58.042] Searching for globals...
[10:30:58.042] 
[10:30:58.042] Searching for globals ... DONE
[10:30:58.042] - globals: [0] <none>
[10:30:58.043] getGlobalsAndPackages() ... DONE
[10:30:58.043]    + additional globals found: [n=0] 
[10:30:58.043]    + additional namespaces needed: [n=0] 
[10:30:58.043]  - Finding globals in 'X' for chunk #2 ... DONE
[10:30:58.043]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:30:58.043]  - seeds: [3] <seeds>
[10:30:58.043]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:58.043] getGlobalsAndPackages() ...
[10:30:58.043] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:58.044] Resolving globals: FALSE
[10:30:58.044] Tweak future expression to call with '...' arguments ...
[10:30:58.044] {
[10:30:58.044]     do.call(function(...) {
[10:30:58.044]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:58.044]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:58.044]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:58.044]             on.exit(options(oopts), add = TRUE)
[10:30:58.044]         }
[10:30:58.044]         {
[10:30:58.044]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:58.044]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:58.044]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:58.044]                   envir = globalenv(), inherits = FALSE)
[10:30:58.044]                 ...future.FUN(...future.X_jj, ...)
[10:30:58.044]             })
[10:30:58.044]         }
[10:30:58.044]     }, args = future.call.arguments)
[10:30:58.044] }
[10:30:58.044] Tweak future expression to call with '...' arguments ... DONE
[10:30:58.044] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:58.045] 
[10:30:58.045] getGlobalsAndPackages() ... DONE
[10:30:58.045] run() for ‘Future’ ...
[10:30:58.045] - state: ‘created’
[10:30:58.045] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:30:58.060] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:58.061] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:30:58.061]   - Field: ‘node’
[10:30:58.061]   - Field: ‘label’
[10:30:58.061]   - Field: ‘local’
[10:30:58.061]   - Field: ‘owner’
[10:30:58.061]   - Field: ‘envir’
[10:30:58.061]   - Field: ‘workers’
[10:30:58.061]   - Field: ‘packages’
[10:30:58.062]   - Field: ‘gc’
[10:30:58.062]   - Field: ‘conditions’
[10:30:58.062]   - Field: ‘persistent’
[10:30:58.062]   - Field: ‘expr’
[10:30:58.062]   - Field: ‘uuid’
[10:30:58.062]   - Field: ‘seed’
[10:30:58.062]   - Field: ‘version’
[10:30:58.062]   - Field: ‘result’
[10:30:58.062]   - Field: ‘asynchronous’
[10:30:58.062]   - Field: ‘calls’
[10:30:58.062]   - Field: ‘globals’
[10:30:58.063]   - Field: ‘stdout’
[10:30:58.063]   - Field: ‘earlySignal’
[10:30:58.063]   - Field: ‘lazy’
[10:30:58.063]   - Field: ‘state’
[10:30:58.063] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:30:58.063] - Launch lazy future ...
[10:30:58.063] Packages needed by the future expression (n = 0): <none>
[10:30:58.063] Packages needed by future strategies (n = 0): <none>
[10:30:58.064] {
[10:30:58.064]     {
[10:30:58.064]         {
[10:30:58.064]             ...future.startTime <- base::Sys.time()
[10:30:58.064]             {
[10:30:58.064]                 {
[10:30:58.064]                   {
[10:30:58.064]                     {
[10:30:58.064]                       base::local({
[10:30:58.064]                         has_future <- base::requireNamespace("future", 
[10:30:58.064]                           quietly = TRUE)
[10:30:58.064]                         if (has_future) {
[10:30:58.064]                           ns <- base::getNamespace("future")
[10:30:58.064]                           version <- ns[[".package"]][["version"]]
[10:30:58.064]                           if (is.null(version)) 
[10:30:58.064]                             version <- utils::packageVersion("future")
[10:30:58.064]                         }
[10:30:58.064]                         else {
[10:30:58.064]                           version <- NULL
[10:30:58.064]                         }
[10:30:58.064]                         if (!has_future || version < "1.8.0") {
[10:30:58.064]                           info <- base::c(r_version = base::gsub("R version ", 
[10:30:58.064]                             "", base::R.version$version.string), 
[10:30:58.064]                             platform = base::sprintf("%s (%s-bit)", 
[10:30:58.064]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:30:58.064]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:30:58.064]                               "release", "version")], collapse = " "), 
[10:30:58.064]                             hostname = base::Sys.info()[["nodename"]])
[10:30:58.064]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:30:58.064]                             info)
[10:30:58.064]                           info <- base::paste(info, collapse = "; ")
[10:30:58.064]                           if (!has_future) {
[10:30:58.064]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:30:58.064]                               info)
[10:30:58.064]                           }
[10:30:58.064]                           else {
[10:30:58.064]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:30:58.064]                               info, version)
[10:30:58.064]                           }
[10:30:58.064]                           base::stop(msg)
[10:30:58.064]                         }
[10:30:58.064]                       })
[10:30:58.064]                     }
[10:30:58.064]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:30:58.064]                     base::options(mc.cores = 1L)
[10:30:58.064]                   }
[10:30:58.064]                   ...future.strategy.old <- future::plan("list")
[10:30:58.064]                   options(future.plan = NULL)
[10:30:58.064]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:30:58.064]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:30:58.064]                 }
[10:30:58.064]                 ...future.workdir <- getwd()
[10:30:58.064]             }
[10:30:58.064]             ...future.oldOptions <- base::as.list(base::.Options)
[10:30:58.064]             ...future.oldEnvVars <- base::Sys.getenv()
[10:30:58.064]         }
[10:30:58.064]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:30:58.064]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:30:58.064]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:30:58.064]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:30:58.064]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:30:58.064]             future.stdout.windows.reencode = NULL, width = 80L)
[10:30:58.064]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:30:58.064]             base::names(...future.oldOptions))
[10:30:58.064]     }
[10:30:58.064]     if (FALSE) {
[10:30:58.064]     }
[10:30:58.064]     else {
[10:30:58.064]         if (TRUE) {
[10:30:58.064]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:30:58.064]                 open = "w")
[10:30:58.064]         }
[10:30:58.064]         else {
[10:30:58.064]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:30:58.064]                 windows = "NUL", "/dev/null"), open = "w")
[10:30:58.064]         }
[10:30:58.064]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:30:58.064]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:30:58.064]             base::sink(type = "output", split = FALSE)
[10:30:58.064]             base::close(...future.stdout)
[10:30:58.064]         }, add = TRUE)
[10:30:58.064]     }
[10:30:58.064]     ...future.frame <- base::sys.nframe()
[10:30:58.064]     ...future.conditions <- base::list()
[10:30:58.064]     ...future.rng <- base::globalenv()$.Random.seed
[10:30:58.064]     if (FALSE) {
[10:30:58.064]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:30:58.064]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:30:58.064]     }
[10:30:58.064]     ...future.result <- base::tryCatch({
[10:30:58.064]         base::withCallingHandlers({
[10:30:58.064]             ...future.value <- base::withVisible(base::local({
[10:30:58.064]                 ...future.makeSendCondition <- base::local({
[10:30:58.064]                   sendCondition <- NULL
[10:30:58.064]                   function(frame = 1L) {
[10:30:58.064]                     if (is.function(sendCondition)) 
[10:30:58.064]                       return(sendCondition)
[10:30:58.064]                     ns <- getNamespace("parallel")
[10:30:58.064]                     if (exists("sendData", mode = "function", 
[10:30:58.064]                       envir = ns)) {
[10:30:58.064]                       parallel_sendData <- get("sendData", mode = "function", 
[10:30:58.064]                         envir = ns)
[10:30:58.064]                       envir <- sys.frame(frame)
[10:30:58.064]                       master <- NULL
[10:30:58.064]                       while (!identical(envir, .GlobalEnv) && 
[10:30:58.064]                         !identical(envir, emptyenv())) {
[10:30:58.064]                         if (exists("master", mode = "list", envir = envir, 
[10:30:58.064]                           inherits = FALSE)) {
[10:30:58.064]                           master <- get("master", mode = "list", 
[10:30:58.064]                             envir = envir, inherits = FALSE)
[10:30:58.064]                           if (inherits(master, c("SOCKnode", 
[10:30:58.064]                             "SOCK0node"))) {
[10:30:58.064]                             sendCondition <<- function(cond) {
[10:30:58.064]                               data <- list(type = "VALUE", value = cond, 
[10:30:58.064]                                 success = TRUE)
[10:30:58.064]                               parallel_sendData(master, data)
[10:30:58.064]                             }
[10:30:58.064]                             return(sendCondition)
[10:30:58.064]                           }
[10:30:58.064]                         }
[10:30:58.064]                         frame <- frame + 1L
[10:30:58.064]                         envir <- sys.frame(frame)
[10:30:58.064]                       }
[10:30:58.064]                     }
[10:30:58.064]                     sendCondition <<- function(cond) NULL
[10:30:58.064]                   }
[10:30:58.064]                 })
[10:30:58.064]                 withCallingHandlers({
[10:30:58.064]                   {
[10:30:58.064]                     do.call(function(...) {
[10:30:58.064]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:58.064]                       if (!identical(...future.globals.maxSize.org, 
[10:30:58.064]                         ...future.globals.maxSize)) {
[10:30:58.064]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:58.064]                         on.exit(options(oopts), add = TRUE)
[10:30:58.064]                       }
[10:30:58.064]                       {
[10:30:58.064]                         lapply(seq_along(...future.elements_ii), 
[10:30:58.064]                           FUN = function(jj) {
[10:30:58.064]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:58.064]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:58.064]                               envir = globalenv(), inherits = FALSE)
[10:30:58.064]                             ...future.FUN(...future.X_jj, ...)
[10:30:58.064]                           })
[10:30:58.064]                       }
[10:30:58.064]                     }, args = future.call.arguments)
[10:30:58.064]                   }
[10:30:58.064]                 }, immediateCondition = function(cond) {
[10:30:58.064]                   sendCondition <- ...future.makeSendCondition()
[10:30:58.064]                   sendCondition(cond)
[10:30:58.064]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:58.064]                   {
[10:30:58.064]                     inherits <- base::inherits
[10:30:58.064]                     invokeRestart <- base::invokeRestart
[10:30:58.064]                     is.null <- base::is.null
[10:30:58.064]                     muffled <- FALSE
[10:30:58.064]                     if (inherits(cond, "message")) {
[10:30:58.064]                       muffled <- grepl(pattern, "muffleMessage")
[10:30:58.064]                       if (muffled) 
[10:30:58.064]                         invokeRestart("muffleMessage")
[10:30:58.064]                     }
[10:30:58.064]                     else if (inherits(cond, "warning")) {
[10:30:58.064]                       muffled <- grepl(pattern, "muffleWarning")
[10:30:58.064]                       if (muffled) 
[10:30:58.064]                         invokeRestart("muffleWarning")
[10:30:58.064]                     }
[10:30:58.064]                     else if (inherits(cond, "condition")) {
[10:30:58.064]                       if (!is.null(pattern)) {
[10:30:58.064]                         computeRestarts <- base::computeRestarts
[10:30:58.064]                         grepl <- base::grepl
[10:30:58.064]                         restarts <- computeRestarts(cond)
[10:30:58.064]                         for (restart in restarts) {
[10:30:58.064]                           name <- restart$name
[10:30:58.064]                           if (is.null(name)) 
[10:30:58.064]                             next
[10:30:58.064]                           if (!grepl(pattern, name)) 
[10:30:58.064]                             next
[10:30:58.064]                           invokeRestart(restart)
[10:30:58.064]                           muffled <- TRUE
[10:30:58.064]                           break
[10:30:58.064]                         }
[10:30:58.064]                       }
[10:30:58.064]                     }
[10:30:58.064]                     invisible(muffled)
[10:30:58.064]                   }
[10:30:58.064]                   muffleCondition(cond)
[10:30:58.064]                 })
[10:30:58.064]             }))
[10:30:58.064]             future::FutureResult(value = ...future.value$value, 
[10:30:58.064]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:58.064]                   ...future.rng), globalenv = if (FALSE) 
[10:30:58.064]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:30:58.064]                     ...future.globalenv.names))
[10:30:58.064]                 else NULL, started = ...future.startTime, version = "1.8")
[10:30:58.064]         }, condition = base::local({
[10:30:58.064]             c <- base::c
[10:30:58.064]             inherits <- base::inherits
[10:30:58.064]             invokeRestart <- base::invokeRestart
[10:30:58.064]             length <- base::length
[10:30:58.064]             list <- base::list
[10:30:58.064]             seq.int <- base::seq.int
[10:30:58.064]             signalCondition <- base::signalCondition
[10:30:58.064]             sys.calls <- base::sys.calls
[10:30:58.064]             `[[` <- base::`[[`
[10:30:58.064]             `+` <- base::`+`
[10:30:58.064]             `<<-` <- base::`<<-`
[10:30:58.064]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:30:58.064]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:30:58.064]                   3L)]
[10:30:58.064]             }
[10:30:58.064]             function(cond) {
[10:30:58.064]                 is_error <- inherits(cond, "error")
[10:30:58.064]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:30:58.064]                   NULL)
[10:30:58.064]                 if (is_error) {
[10:30:58.064]                   sessionInformation <- function() {
[10:30:58.064]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:30:58.064]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:30:58.064]                       search = base::search(), system = base::Sys.info())
[10:30:58.064]                   }
[10:30:58.064]                   ...future.conditions[[length(...future.conditions) + 
[10:30:58.064]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:30:58.064]                     cond$call), session = sessionInformation(), 
[10:30:58.064]                     timestamp = base::Sys.time(), signaled = 0L)
[10:30:58.064]                   signalCondition(cond)
[10:30:58.064]                 }
[10:30:58.064]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:30:58.064]                 "immediateCondition"))) {
[10:30:58.064]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:30:58.064]                   ...future.conditions[[length(...future.conditions) + 
[10:30:58.064]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:30:58.064]                   if (TRUE && !signal) {
[10:30:58.064]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:58.064]                     {
[10:30:58.064]                       inherits <- base::inherits
[10:30:58.064]                       invokeRestart <- base::invokeRestart
[10:30:58.064]                       is.null <- base::is.null
[10:30:58.064]                       muffled <- FALSE
[10:30:58.064]                       if (inherits(cond, "message")) {
[10:30:58.064]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:58.064]                         if (muffled) 
[10:30:58.064]                           invokeRestart("muffleMessage")
[10:30:58.064]                       }
[10:30:58.064]                       else if (inherits(cond, "warning")) {
[10:30:58.064]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:58.064]                         if (muffled) 
[10:30:58.064]                           invokeRestart("muffleWarning")
[10:30:58.064]                       }
[10:30:58.064]                       else if (inherits(cond, "condition")) {
[10:30:58.064]                         if (!is.null(pattern)) {
[10:30:58.064]                           computeRestarts <- base::computeRestarts
[10:30:58.064]                           grepl <- base::grepl
[10:30:58.064]                           restarts <- computeRestarts(cond)
[10:30:58.064]                           for (restart in restarts) {
[10:30:58.064]                             name <- restart$name
[10:30:58.064]                             if (is.null(name)) 
[10:30:58.064]                               next
[10:30:58.064]                             if (!grepl(pattern, name)) 
[10:30:58.064]                               next
[10:30:58.064]                             invokeRestart(restart)
[10:30:58.064]                             muffled <- TRUE
[10:30:58.064]                             break
[10:30:58.064]                           }
[10:30:58.064]                         }
[10:30:58.064]                       }
[10:30:58.064]                       invisible(muffled)
[10:30:58.064]                     }
[10:30:58.064]                     muffleCondition(cond, pattern = "^muffle")
[10:30:58.064]                   }
[10:30:58.064]                 }
[10:30:58.064]                 else {
[10:30:58.064]                   if (TRUE) {
[10:30:58.064]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:58.064]                     {
[10:30:58.064]                       inherits <- base::inherits
[10:30:58.064]                       invokeRestart <- base::invokeRestart
[10:30:58.064]                       is.null <- base::is.null
[10:30:58.064]                       muffled <- FALSE
[10:30:58.064]                       if (inherits(cond, "message")) {
[10:30:58.064]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:58.064]                         if (muffled) 
[10:30:58.064]                           invokeRestart("muffleMessage")
[10:30:58.064]                       }
[10:30:58.064]                       else if (inherits(cond, "warning")) {
[10:30:58.064]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:58.064]                         if (muffled) 
[10:30:58.064]                           invokeRestart("muffleWarning")
[10:30:58.064]                       }
[10:30:58.064]                       else if (inherits(cond, "condition")) {
[10:30:58.064]                         if (!is.null(pattern)) {
[10:30:58.064]                           computeRestarts <- base::computeRestarts
[10:30:58.064]                           grepl <- base::grepl
[10:30:58.064]                           restarts <- computeRestarts(cond)
[10:30:58.064]                           for (restart in restarts) {
[10:30:58.064]                             name <- restart$name
[10:30:58.064]                             if (is.null(name)) 
[10:30:58.064]                               next
[10:30:58.064]                             if (!grepl(pattern, name)) 
[10:30:58.064]                               next
[10:30:58.064]                             invokeRestart(restart)
[10:30:58.064]                             muffled <- TRUE
[10:30:58.064]                             break
[10:30:58.064]                           }
[10:30:58.064]                         }
[10:30:58.064]                       }
[10:30:58.064]                       invisible(muffled)
[10:30:58.064]                     }
[10:30:58.064]                     muffleCondition(cond, pattern = "^muffle")
[10:30:58.064]                   }
[10:30:58.064]                 }
[10:30:58.064]             }
[10:30:58.064]         }))
[10:30:58.064]     }, error = function(ex) {
[10:30:58.064]         base::structure(base::list(value = NULL, visible = NULL, 
[10:30:58.064]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:58.064]                 ...future.rng), started = ...future.startTime, 
[10:30:58.064]             finished = Sys.time(), session_uuid = NA_character_, 
[10:30:58.064]             version = "1.8"), class = "FutureResult")
[10:30:58.064]     }, finally = {
[10:30:58.064]         if (!identical(...future.workdir, getwd())) 
[10:30:58.064]             setwd(...future.workdir)
[10:30:58.064]         {
[10:30:58.064]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:30:58.064]                 ...future.oldOptions$nwarnings <- NULL
[10:30:58.064]             }
[10:30:58.064]             base::options(...future.oldOptions)
[10:30:58.064]             if (.Platform$OS.type == "windows") {
[10:30:58.064]                 old_names <- names(...future.oldEnvVars)
[10:30:58.064]                 envs <- base::Sys.getenv()
[10:30:58.064]                 names <- names(envs)
[10:30:58.064]                 common <- intersect(names, old_names)
[10:30:58.064]                 added <- setdiff(names, old_names)
[10:30:58.064]                 removed <- setdiff(old_names, names)
[10:30:58.064]                 changed <- common[...future.oldEnvVars[common] != 
[10:30:58.064]                   envs[common]]
[10:30:58.064]                 NAMES <- toupper(changed)
[10:30:58.064]                 args <- list()
[10:30:58.064]                 for (kk in seq_along(NAMES)) {
[10:30:58.064]                   name <- changed[[kk]]
[10:30:58.064]                   NAME <- NAMES[[kk]]
[10:30:58.064]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:58.064]                     next
[10:30:58.064]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:58.064]                 }
[10:30:58.064]                 NAMES <- toupper(added)
[10:30:58.064]                 for (kk in seq_along(NAMES)) {
[10:30:58.064]                   name <- added[[kk]]
[10:30:58.064]                   NAME <- NAMES[[kk]]
[10:30:58.064]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:58.064]                     next
[10:30:58.064]                   args[[name]] <- ""
[10:30:58.064]                 }
[10:30:58.064]                 NAMES <- toupper(removed)
[10:30:58.064]                 for (kk in seq_along(NAMES)) {
[10:30:58.064]                   name <- removed[[kk]]
[10:30:58.064]                   NAME <- NAMES[[kk]]
[10:30:58.064]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:58.064]                     next
[10:30:58.064]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:58.064]                 }
[10:30:58.064]                 if (length(args) > 0) 
[10:30:58.064]                   base::do.call(base::Sys.setenv, args = args)
[10:30:58.064]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:30:58.064]             }
[10:30:58.064]             else {
[10:30:58.064]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:30:58.064]             }
[10:30:58.064]             {
[10:30:58.064]                 if (base::length(...future.futureOptionsAdded) > 
[10:30:58.064]                   0L) {
[10:30:58.064]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:30:58.064]                   base::names(opts) <- ...future.futureOptionsAdded
[10:30:58.064]                   base::options(opts)
[10:30:58.064]                 }
[10:30:58.064]                 {
[10:30:58.064]                   {
[10:30:58.064]                     base::options(mc.cores = ...future.mc.cores.old)
[10:30:58.064]                     NULL
[10:30:58.064]                   }
[10:30:58.064]                   options(future.plan = NULL)
[10:30:58.064]                   if (is.na(NA_character_)) 
[10:30:58.064]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:30:58.064]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:30:58.064]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:30:58.064]                     .init = FALSE)
[10:30:58.064]                 }
[10:30:58.064]             }
[10:30:58.064]         }
[10:30:58.064]     })
[10:30:58.064]     if (TRUE) {
[10:30:58.064]         base::sink(type = "output", split = FALSE)
[10:30:58.064]         if (TRUE) {
[10:30:58.064]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:30:58.064]         }
[10:30:58.064]         else {
[10:30:58.064]             ...future.result["stdout"] <- base::list(NULL)
[10:30:58.064]         }
[10:30:58.064]         base::close(...future.stdout)
[10:30:58.064]         ...future.stdout <- NULL
[10:30:58.064]     }
[10:30:58.064]     ...future.result$conditions <- ...future.conditions
[10:30:58.064]     ...future.result$finished <- base::Sys.time()
[10:30:58.064]     ...future.result
[10:30:58.064] }
[10:30:58.067] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[10:30:58.067] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[10:30:58.067] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[10:30:58.068] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[10:30:58.068] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[10:30:58.068] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[10:30:58.069] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[10:30:58.069] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[10:30:58.069] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[10:30:58.069] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[10:30:58.070] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[10:30:58.070] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[10:30:58.070] MultisessionFuture started
[10:30:58.070] - Launch lazy future ... done
[10:30:58.071] run() for ‘MultisessionFuture’ ... done
[10:30:58.071] Created future:
[10:30:58.071] MultisessionFuture:
[10:30:58.071] Label: ‘future_replicate-2’
[10:30:58.071] Expression:
[10:30:58.071] {
[10:30:58.071]     do.call(function(...) {
[10:30:58.071]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:58.071]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:58.071]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:58.071]             on.exit(options(oopts), add = TRUE)
[10:30:58.071]         }
[10:30:58.071]         {
[10:30:58.071]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:58.071]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:58.071]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:58.071]                   envir = globalenv(), inherits = FALSE)
[10:30:58.071]                 ...future.FUN(...future.X_jj, ...)
[10:30:58.071]             })
[10:30:58.071]         }
[10:30:58.071]     }, args = future.call.arguments)
[10:30:58.071] }
[10:30:58.071] Lazy evaluation: FALSE
[10:30:58.071] Asynchronous evaluation: TRUE
[10:30:58.071] Local evaluation: TRUE
[10:30:58.071] Environment: R_GlobalEnv
[10:30:58.071] Capture standard output: TRUE
[10:30:58.071] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:30:58.071] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:30:58.071] Packages: <none>
[10:30:58.071] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:30:58.071] Resolved: FALSE
[10:30:58.071] Value: <not collected>
[10:30:58.071] Conditions captured: <none>
[10:30:58.071] Early signaling: FALSE
[10:30:58.071] Owner process: 7cdcbd4b-6c47-ca9a-dc3f-e18236d134b8
[10:30:58.071] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:58.082] Chunk #2 of 2 ... DONE
[10:30:58.083] Launching 2 futures (chunks) ... DONE
[10:30:58.083] Resolving 2 futures (chunks) ...
[10:30:58.083] resolve() on list ...
[10:30:58.083]  recursive: 0
[10:30:58.083]  length: 2
[10:30:58.083] 
[10:30:58.083] receiveMessageFromWorker() for ClusterFuture ...
[10:30:58.084] - Validating connection of MultisessionFuture
[10:30:58.084] - received message: FutureResult
[10:30:58.084] - Received FutureResult
[10:30:58.084] - Erased future from FutureRegistry
[10:30:58.084] result() for ClusterFuture ...
[10:30:58.084] - result already collected: FutureResult
[10:30:58.084] result() for ClusterFuture ... done
[10:30:58.084] receiveMessageFromWorker() for ClusterFuture ... done
[10:30:58.084] Future #1
[10:30:58.085] result() for ClusterFuture ...
[10:30:58.085] - result already collected: FutureResult
[10:30:58.085] result() for ClusterFuture ... done
[10:30:58.085] result() for ClusterFuture ...
[10:30:58.085] - result already collected: FutureResult
[10:30:58.085] result() for ClusterFuture ... done
[10:30:58.085] signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:30:58.085] - nx: 2
[10:30:58.085] - relay: TRUE
[10:30:58.085] - stdout: TRUE
[10:30:58.085] - signal: TRUE
[10:30:58.086] - resignal: FALSE
[10:30:58.086] - force: TRUE
[10:30:58.086] - relayed: [n=2] FALSE, FALSE
[10:30:58.086] - queued futures: [n=2] FALSE, FALSE
[10:30:58.086]  - until=1
[10:30:58.086]  - relaying element #1
[10:30:58.086] result() for ClusterFuture ...
[10:30:58.086] - result already collected: FutureResult
[10:30:58.086] result() for ClusterFuture ... done
[10:30:58.086] result() for ClusterFuture ...
[10:30:58.086] - result already collected: FutureResult
[10:30:58.087] result() for ClusterFuture ... done
[10:30:58.087] result() for ClusterFuture ...
[10:30:58.087] - result already collected: FutureResult
[10:30:58.087] result() for ClusterFuture ... done
[10:30:58.087] result() for ClusterFuture ...
[10:30:58.087] - result already collected: FutureResult
[10:30:58.087] result() for ClusterFuture ... done
[10:30:58.087] - relayed: [n=2] TRUE, FALSE
[10:30:58.087] - queued futures: [n=2] TRUE, FALSE
[10:30:58.087] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:30:58.087]  length: 1 (resolved future 1)
[10:30:58.115] receiveMessageFromWorker() for ClusterFuture ...
[10:30:58.115] - Validating connection of MultisessionFuture
[10:30:58.115] - received message: FutureResult
[10:30:58.115] - Received FutureResult
[10:30:58.115] - Erased future from FutureRegistry
[10:30:58.115] result() for ClusterFuture ...
[10:30:58.115] - result already collected: FutureResult
[10:30:58.116] result() for ClusterFuture ... done
[10:30:58.116] receiveMessageFromWorker() for ClusterFuture ... done
[10:30:58.116] Future #2
[10:30:58.116] result() for ClusterFuture ...
[10:30:58.116] - result already collected: FutureResult
[10:30:58.116] result() for ClusterFuture ... done
[10:30:58.116] result() for ClusterFuture ...
[10:30:58.116] - result already collected: FutureResult
[10:30:58.116] result() for ClusterFuture ... done
[10:30:58.116] signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:30:58.116] - nx: 2
[10:30:58.117] - relay: TRUE
[10:30:58.117] - stdout: TRUE
[10:30:58.117] - signal: TRUE
[10:30:58.117] - resignal: FALSE
[10:30:58.117] - force: TRUE
[10:30:58.117] - relayed: [n=2] TRUE, FALSE
[10:30:58.117] - queued futures: [n=2] TRUE, FALSE
[10:30:58.117]  - until=2
[10:30:58.117]  - relaying element #2
[10:30:58.117] result() for ClusterFuture ...
[10:30:58.117] - result already collected: FutureResult
[10:30:58.118] result() for ClusterFuture ... done
[10:30:58.118] result() for ClusterFuture ...
[10:30:58.118] - result already collected: FutureResult
[10:30:58.118] result() for ClusterFuture ... done
[10:30:58.118] result() for ClusterFuture ...
[10:30:58.118] - result already collected: FutureResult
[10:30:58.118] result() for ClusterFuture ... done
[10:30:58.118] result() for ClusterFuture ...
[10:30:58.118] - result already collected: FutureResult
[10:30:58.118] result() for ClusterFuture ... done
[10:30:58.118] - relayed: [n=2] TRUE, TRUE
[10:30:58.119] - queued futures: [n=2] TRUE, TRUE
[10:30:58.119] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:30:58.119]  length: 0 (resolved future 2)
[10:30:58.119] Relaying remaining futures
[10:30:58.119] signalConditionsASAP(NULL, pos=0) ...
[10:30:58.119] - nx: 2
[10:30:58.119] - relay: TRUE
[10:30:58.119] - stdout: TRUE
[10:30:58.119] - signal: TRUE
[10:30:58.119] - resignal: FALSE
[10:30:58.119] - force: TRUE
[10:30:58.119] - relayed: [n=2] TRUE, TRUE
[10:30:58.120] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:30:58.120] - relayed: [n=2] TRUE, TRUE
[10:30:58.120] - queued futures: [n=2] TRUE, TRUE
[10:30:58.120] signalConditionsASAP(NULL, pos=0) ... done
[10:30:58.120] resolve() on list ... DONE
[10:30:58.120] result() for ClusterFuture ...
[10:30:58.120] - result already collected: FutureResult
[10:30:58.120] result() for ClusterFuture ... done
[10:30:58.120] result() for ClusterFuture ...
[10:30:58.120] - result already collected: FutureResult
[10:30:58.121] result() for ClusterFuture ... done
[10:30:58.121] result() for ClusterFuture ...
[10:30:58.121] - result already collected: FutureResult
[10:30:58.121] result() for ClusterFuture ... done
[10:30:58.121] result() for ClusterFuture ...
[10:30:58.121] - result already collected: FutureResult
[10:30:58.121] result() for ClusterFuture ... done
[10:30:58.121]  - Number of value chunks collected: 2
[10:30:58.121] Resolving 2 futures (chunks) ... DONE
[10:30:58.121] Reducing values from 2 chunks ...
[10:30:58.121]  - Number of values collected after concatenation: 5
[10:30:58.122]  - Number of values expected: 5
[10:30:58.122] Reducing values from 2 chunks ... DONE
[10:30:58.122] future_lapply() ... DONE
[10:30:58.122] future_lapply() ...
[10:30:58.122] Generating random seeds ...
[10:30:58.123] Generating random seed streams for 5 elements ...
[10:30:58.123] Generating random seed streams for 5 elements ... DONE
[10:30:58.123] Generating random seeds ... DONE
[10:30:58.123] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:30:58.127] Number of chunks: 2
[10:30:58.127] getGlobalsAndPackagesXApply() ...
[10:30:58.127]  - future.globals: TRUE
[10:30:58.127] getGlobalsAndPackages() ...
[10:30:58.128] Searching for globals...
[10:30:58.129] - globals found: [2] ‘FUN’, ‘sample’
[10:30:58.129] Searching for globals ... DONE
[10:30:58.129] Resolving globals: FALSE
[10:30:58.129] The total size of the 1 globals is 616 bytes (616 bytes)
[10:30:58.130] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[10:30:58.130] - globals: [1] ‘FUN’
[10:30:58.130] 
[10:30:58.130] getGlobalsAndPackages() ... DONE
[10:30:58.130]  - globals found/used: [n=1] ‘FUN’
[10:30:58.130]  - needed namespaces: [n=0] 
[10:30:58.130] Finding globals ... DONE
[10:30:58.130]  - use_args: TRUE
[10:30:58.130]  - Getting '...' globals ...
[10:30:58.131] resolve() on list ...
[10:30:58.131]  recursive: 0
[10:30:58.131]  length: 1
[10:30:58.131]  elements: ‘...’
[10:30:58.131]  length: 0 (resolved future 1)
[10:30:58.131] resolve() on list ... DONE
[10:30:58.131]    - '...' content: [n=0] 
[10:30:58.131] List of 1
[10:30:58.131]  $ ...: list()
[10:30:58.131]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:58.131]  - attr(*, "where")=List of 1
[10:30:58.131]   ..$ ...:<environment: 0x55aba42ef630> 
[10:30:58.131]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:58.131]  - attr(*, "resolved")= logi TRUE
[10:30:58.131]  - attr(*, "total_size")= num NA
[10:30:58.134]  - Getting '...' globals ... DONE
[10:30:58.134] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:30:58.134] List of 2
[10:30:58.134]  $ ...future.FUN:function (...)  
[10:30:58.134]  $ ...          : list()
[10:30:58.134]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:58.134]  - attr(*, "where")=List of 2
[10:30:58.134]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:30:58.134]   ..$ ...          :<environment: 0x55aba42ef630> 
[10:30:58.134]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:58.134]  - attr(*, "resolved")= logi FALSE
[10:30:58.134]  - attr(*, "total_size")= num 616
[10:30:58.137] Packages to be attached in all futures: [n=0] 
[10:30:58.137] getGlobalsAndPackagesXApply() ... DONE
[10:30:58.137] Number of futures (= number of chunks): 2
[10:30:58.137] Launching 2 futures (chunks) ...
[10:30:58.138] Chunk #1 of 2 ...
[10:30:58.138]  - Finding globals in 'X' for chunk #1 ...
[10:30:58.138] getGlobalsAndPackages() ...
[10:30:58.138] Searching for globals...
[10:30:58.138] 
[10:30:58.138] Searching for globals ... DONE
[10:30:58.138] - globals: [0] <none>
[10:30:58.138] getGlobalsAndPackages() ... DONE
[10:30:58.138]    + additional globals found: [n=0] 
[10:30:58.139]    + additional namespaces needed: [n=0] 
[10:30:58.139]  - Finding globals in 'X' for chunk #1 ... DONE
[10:30:58.139]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:30:58.139]  - seeds: [2] <seeds>
[10:30:58.139]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:58.139] getGlobalsAndPackages() ...
[10:30:58.139] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:58.139] Resolving globals: FALSE
[10:30:58.139] Tweak future expression to call with '...' arguments ...
[10:30:58.139] {
[10:30:58.139]     do.call(function(...) {
[10:30:58.139]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:58.139]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:58.139]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:58.139]             on.exit(options(oopts), add = TRUE)
[10:30:58.139]         }
[10:30:58.139]         {
[10:30:58.139]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:58.139]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:58.139]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:58.139]                   envir = globalenv(), inherits = FALSE)
[10:30:58.139]                 ...future.FUN(...future.X_jj, ...)
[10:30:58.139]             })
[10:30:58.139]         }
[10:30:58.139]     }, args = future.call.arguments)
[10:30:58.139] }
[10:30:58.140] Tweak future expression to call with '...' arguments ... DONE
[10:30:58.140] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:58.140] 
[10:30:58.140] getGlobalsAndPackages() ... DONE
[10:30:58.141] run() for ‘Future’ ...
[10:30:58.141] - state: ‘created’
[10:30:58.141] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:30:58.154] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:58.154] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:30:58.155]   - Field: ‘node’
[10:30:58.155]   - Field: ‘label’
[10:30:58.155]   - Field: ‘local’
[10:30:58.155]   - Field: ‘owner’
[10:30:58.155]   - Field: ‘envir’
[10:30:58.155]   - Field: ‘workers’
[10:30:58.155]   - Field: ‘packages’
[10:30:58.155]   - Field: ‘gc’
[10:30:58.155]   - Field: ‘conditions’
[10:30:58.155]   - Field: ‘persistent’
[10:30:58.156]   - Field: ‘expr’
[10:30:58.156]   - Field: ‘uuid’
[10:30:58.156]   - Field: ‘seed’
[10:30:58.156]   - Field: ‘version’
[10:30:58.156]   - Field: ‘result’
[10:30:58.156]   - Field: ‘asynchronous’
[10:30:58.156]   - Field: ‘calls’
[10:30:58.156]   - Field: ‘globals’
[10:30:58.156]   - Field: ‘stdout’
[10:30:58.156]   - Field: ‘earlySignal’
[10:30:58.156]   - Field: ‘lazy’
[10:30:58.157]   - Field: ‘state’
[10:30:58.157] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:30:58.157] - Launch lazy future ...
[10:30:58.157] Packages needed by the future expression (n = 0): <none>
[10:30:58.157] Packages needed by future strategies (n = 0): <none>
[10:30:58.158] {
[10:30:58.158]     {
[10:30:58.158]         {
[10:30:58.158]             ...future.startTime <- base::Sys.time()
[10:30:58.158]             {
[10:30:58.158]                 {
[10:30:58.158]                   {
[10:30:58.158]                     {
[10:30:58.158]                       base::local({
[10:30:58.158]                         has_future <- base::requireNamespace("future", 
[10:30:58.158]                           quietly = TRUE)
[10:30:58.158]                         if (has_future) {
[10:30:58.158]                           ns <- base::getNamespace("future")
[10:30:58.158]                           version <- ns[[".package"]][["version"]]
[10:30:58.158]                           if (is.null(version)) 
[10:30:58.158]                             version <- utils::packageVersion("future")
[10:30:58.158]                         }
[10:30:58.158]                         else {
[10:30:58.158]                           version <- NULL
[10:30:58.158]                         }
[10:30:58.158]                         if (!has_future || version < "1.8.0") {
[10:30:58.158]                           info <- base::c(r_version = base::gsub("R version ", 
[10:30:58.158]                             "", base::R.version$version.string), 
[10:30:58.158]                             platform = base::sprintf("%s (%s-bit)", 
[10:30:58.158]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:30:58.158]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:30:58.158]                               "release", "version")], collapse = " "), 
[10:30:58.158]                             hostname = base::Sys.info()[["nodename"]])
[10:30:58.158]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:30:58.158]                             info)
[10:30:58.158]                           info <- base::paste(info, collapse = "; ")
[10:30:58.158]                           if (!has_future) {
[10:30:58.158]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:30:58.158]                               info)
[10:30:58.158]                           }
[10:30:58.158]                           else {
[10:30:58.158]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:30:58.158]                               info, version)
[10:30:58.158]                           }
[10:30:58.158]                           base::stop(msg)
[10:30:58.158]                         }
[10:30:58.158]                       })
[10:30:58.158]                     }
[10:30:58.158]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:30:58.158]                     base::options(mc.cores = 1L)
[10:30:58.158]                   }
[10:30:58.158]                   ...future.strategy.old <- future::plan("list")
[10:30:58.158]                   options(future.plan = NULL)
[10:30:58.158]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:30:58.158]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:30:58.158]                 }
[10:30:58.158]                 ...future.workdir <- getwd()
[10:30:58.158]             }
[10:30:58.158]             ...future.oldOptions <- base::as.list(base::.Options)
[10:30:58.158]             ...future.oldEnvVars <- base::Sys.getenv()
[10:30:58.158]         }
[10:30:58.158]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:30:58.158]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:30:58.158]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:30:58.158]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:30:58.158]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:30:58.158]             future.stdout.windows.reencode = NULL, width = 80L)
[10:30:58.158]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:30:58.158]             base::names(...future.oldOptions))
[10:30:58.158]     }
[10:30:58.158]     if (FALSE) {
[10:30:58.158]     }
[10:30:58.158]     else {
[10:30:58.158]         if (TRUE) {
[10:30:58.158]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:30:58.158]                 open = "w")
[10:30:58.158]         }
[10:30:58.158]         else {
[10:30:58.158]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:30:58.158]                 windows = "NUL", "/dev/null"), open = "w")
[10:30:58.158]         }
[10:30:58.158]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:30:58.158]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:30:58.158]             base::sink(type = "output", split = FALSE)
[10:30:58.158]             base::close(...future.stdout)
[10:30:58.158]         }, add = TRUE)
[10:30:58.158]     }
[10:30:58.158]     ...future.frame <- base::sys.nframe()
[10:30:58.158]     ...future.conditions <- base::list()
[10:30:58.158]     ...future.rng <- base::globalenv()$.Random.seed
[10:30:58.158]     if (FALSE) {
[10:30:58.158]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:30:58.158]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:30:58.158]     }
[10:30:58.158]     ...future.result <- base::tryCatch({
[10:30:58.158]         base::withCallingHandlers({
[10:30:58.158]             ...future.value <- base::withVisible(base::local({
[10:30:58.158]                 ...future.makeSendCondition <- base::local({
[10:30:58.158]                   sendCondition <- NULL
[10:30:58.158]                   function(frame = 1L) {
[10:30:58.158]                     if (is.function(sendCondition)) 
[10:30:58.158]                       return(sendCondition)
[10:30:58.158]                     ns <- getNamespace("parallel")
[10:30:58.158]                     if (exists("sendData", mode = "function", 
[10:30:58.158]                       envir = ns)) {
[10:30:58.158]                       parallel_sendData <- get("sendData", mode = "function", 
[10:30:58.158]                         envir = ns)
[10:30:58.158]                       envir <- sys.frame(frame)
[10:30:58.158]                       master <- NULL
[10:30:58.158]                       while (!identical(envir, .GlobalEnv) && 
[10:30:58.158]                         !identical(envir, emptyenv())) {
[10:30:58.158]                         if (exists("master", mode = "list", envir = envir, 
[10:30:58.158]                           inherits = FALSE)) {
[10:30:58.158]                           master <- get("master", mode = "list", 
[10:30:58.158]                             envir = envir, inherits = FALSE)
[10:30:58.158]                           if (inherits(master, c("SOCKnode", 
[10:30:58.158]                             "SOCK0node"))) {
[10:30:58.158]                             sendCondition <<- function(cond) {
[10:30:58.158]                               data <- list(type = "VALUE", value = cond, 
[10:30:58.158]                                 success = TRUE)
[10:30:58.158]                               parallel_sendData(master, data)
[10:30:58.158]                             }
[10:30:58.158]                             return(sendCondition)
[10:30:58.158]                           }
[10:30:58.158]                         }
[10:30:58.158]                         frame <- frame + 1L
[10:30:58.158]                         envir <- sys.frame(frame)
[10:30:58.158]                       }
[10:30:58.158]                     }
[10:30:58.158]                     sendCondition <<- function(cond) NULL
[10:30:58.158]                   }
[10:30:58.158]                 })
[10:30:58.158]                 withCallingHandlers({
[10:30:58.158]                   {
[10:30:58.158]                     do.call(function(...) {
[10:30:58.158]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:58.158]                       if (!identical(...future.globals.maxSize.org, 
[10:30:58.158]                         ...future.globals.maxSize)) {
[10:30:58.158]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:58.158]                         on.exit(options(oopts), add = TRUE)
[10:30:58.158]                       }
[10:30:58.158]                       {
[10:30:58.158]                         lapply(seq_along(...future.elements_ii), 
[10:30:58.158]                           FUN = function(jj) {
[10:30:58.158]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:58.158]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:58.158]                               envir = globalenv(), inherits = FALSE)
[10:30:58.158]                             ...future.FUN(...future.X_jj, ...)
[10:30:58.158]                           })
[10:30:58.158]                       }
[10:30:58.158]                     }, args = future.call.arguments)
[10:30:58.158]                   }
[10:30:58.158]                 }, immediateCondition = function(cond) {
[10:30:58.158]                   sendCondition <- ...future.makeSendCondition()
[10:30:58.158]                   sendCondition(cond)
[10:30:58.158]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:58.158]                   {
[10:30:58.158]                     inherits <- base::inherits
[10:30:58.158]                     invokeRestart <- base::invokeRestart
[10:30:58.158]                     is.null <- base::is.null
[10:30:58.158]                     muffled <- FALSE
[10:30:58.158]                     if (inherits(cond, "message")) {
[10:30:58.158]                       muffled <- grepl(pattern, "muffleMessage")
[10:30:58.158]                       if (muffled) 
[10:30:58.158]                         invokeRestart("muffleMessage")
[10:30:58.158]                     }
[10:30:58.158]                     else if (inherits(cond, "warning")) {
[10:30:58.158]                       muffled <- grepl(pattern, "muffleWarning")
[10:30:58.158]                       if (muffled) 
[10:30:58.158]                         invokeRestart("muffleWarning")
[10:30:58.158]                     }
[10:30:58.158]                     else if (inherits(cond, "condition")) {
[10:30:58.158]                       if (!is.null(pattern)) {
[10:30:58.158]                         computeRestarts <- base::computeRestarts
[10:30:58.158]                         grepl <- base::grepl
[10:30:58.158]                         restarts <- computeRestarts(cond)
[10:30:58.158]                         for (restart in restarts) {
[10:30:58.158]                           name <- restart$name
[10:30:58.158]                           if (is.null(name)) 
[10:30:58.158]                             next
[10:30:58.158]                           if (!grepl(pattern, name)) 
[10:30:58.158]                             next
[10:30:58.158]                           invokeRestart(restart)
[10:30:58.158]                           muffled <- TRUE
[10:30:58.158]                           break
[10:30:58.158]                         }
[10:30:58.158]                       }
[10:30:58.158]                     }
[10:30:58.158]                     invisible(muffled)
[10:30:58.158]                   }
[10:30:58.158]                   muffleCondition(cond)
[10:30:58.158]                 })
[10:30:58.158]             }))
[10:30:58.158]             future::FutureResult(value = ...future.value$value, 
[10:30:58.158]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:58.158]                   ...future.rng), globalenv = if (FALSE) 
[10:30:58.158]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:30:58.158]                     ...future.globalenv.names))
[10:30:58.158]                 else NULL, started = ...future.startTime, version = "1.8")
[10:30:58.158]         }, condition = base::local({
[10:30:58.158]             c <- base::c
[10:30:58.158]             inherits <- base::inherits
[10:30:58.158]             invokeRestart <- base::invokeRestart
[10:30:58.158]             length <- base::length
[10:30:58.158]             list <- base::list
[10:30:58.158]             seq.int <- base::seq.int
[10:30:58.158]             signalCondition <- base::signalCondition
[10:30:58.158]             sys.calls <- base::sys.calls
[10:30:58.158]             `[[` <- base::`[[`
[10:30:58.158]             `+` <- base::`+`
[10:30:58.158]             `<<-` <- base::`<<-`
[10:30:58.158]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:30:58.158]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:30:58.158]                   3L)]
[10:30:58.158]             }
[10:30:58.158]             function(cond) {
[10:30:58.158]                 is_error <- inherits(cond, "error")
[10:30:58.158]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:30:58.158]                   NULL)
[10:30:58.158]                 if (is_error) {
[10:30:58.158]                   sessionInformation <- function() {
[10:30:58.158]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:30:58.158]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:30:58.158]                       search = base::search(), system = base::Sys.info())
[10:30:58.158]                   }
[10:30:58.158]                   ...future.conditions[[length(...future.conditions) + 
[10:30:58.158]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:30:58.158]                     cond$call), session = sessionInformation(), 
[10:30:58.158]                     timestamp = base::Sys.time(), signaled = 0L)
[10:30:58.158]                   signalCondition(cond)
[10:30:58.158]                 }
[10:30:58.158]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:30:58.158]                 "immediateCondition"))) {
[10:30:58.158]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:30:58.158]                   ...future.conditions[[length(...future.conditions) + 
[10:30:58.158]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:30:58.158]                   if (TRUE && !signal) {
[10:30:58.158]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:58.158]                     {
[10:30:58.158]                       inherits <- base::inherits
[10:30:58.158]                       invokeRestart <- base::invokeRestart
[10:30:58.158]                       is.null <- base::is.null
[10:30:58.158]                       muffled <- FALSE
[10:30:58.158]                       if (inherits(cond, "message")) {
[10:30:58.158]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:58.158]                         if (muffled) 
[10:30:58.158]                           invokeRestart("muffleMessage")
[10:30:58.158]                       }
[10:30:58.158]                       else if (inherits(cond, "warning")) {
[10:30:58.158]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:58.158]                         if (muffled) 
[10:30:58.158]                           invokeRestart("muffleWarning")
[10:30:58.158]                       }
[10:30:58.158]                       else if (inherits(cond, "condition")) {
[10:30:58.158]                         if (!is.null(pattern)) {
[10:30:58.158]                           computeRestarts <- base::computeRestarts
[10:30:58.158]                           grepl <- base::grepl
[10:30:58.158]                           restarts <- computeRestarts(cond)
[10:30:58.158]                           for (restart in restarts) {
[10:30:58.158]                             name <- restart$name
[10:30:58.158]                             if (is.null(name)) 
[10:30:58.158]                               next
[10:30:58.158]                             if (!grepl(pattern, name)) 
[10:30:58.158]                               next
[10:30:58.158]                             invokeRestart(restart)
[10:30:58.158]                             muffled <- TRUE
[10:30:58.158]                             break
[10:30:58.158]                           }
[10:30:58.158]                         }
[10:30:58.158]                       }
[10:30:58.158]                       invisible(muffled)
[10:30:58.158]                     }
[10:30:58.158]                     muffleCondition(cond, pattern = "^muffle")
[10:30:58.158]                   }
[10:30:58.158]                 }
[10:30:58.158]                 else {
[10:30:58.158]                   if (TRUE) {
[10:30:58.158]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:58.158]                     {
[10:30:58.158]                       inherits <- base::inherits
[10:30:58.158]                       invokeRestart <- base::invokeRestart
[10:30:58.158]                       is.null <- base::is.null
[10:30:58.158]                       muffled <- FALSE
[10:30:58.158]                       if (inherits(cond, "message")) {
[10:30:58.158]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:58.158]                         if (muffled) 
[10:30:58.158]                           invokeRestart("muffleMessage")
[10:30:58.158]                       }
[10:30:58.158]                       else if (inherits(cond, "warning")) {
[10:30:58.158]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:58.158]                         if (muffled) 
[10:30:58.158]                           invokeRestart("muffleWarning")
[10:30:58.158]                       }
[10:30:58.158]                       else if (inherits(cond, "condition")) {
[10:30:58.158]                         if (!is.null(pattern)) {
[10:30:58.158]                           computeRestarts <- base::computeRestarts
[10:30:58.158]                           grepl <- base::grepl
[10:30:58.158]                           restarts <- computeRestarts(cond)
[10:30:58.158]                           for (restart in restarts) {
[10:30:58.158]                             name <- restart$name
[10:30:58.158]                             if (is.null(name)) 
[10:30:58.158]                               next
[10:30:58.158]                             if (!grepl(pattern, name)) 
[10:30:58.158]                               next
[10:30:58.158]                             invokeRestart(restart)
[10:30:58.158]                             muffled <- TRUE
[10:30:58.158]                             break
[10:30:58.158]                           }
[10:30:58.158]                         }
[10:30:58.158]                       }
[10:30:58.158]                       invisible(muffled)
[10:30:58.158]                     }
[10:30:58.158]                     muffleCondition(cond, pattern = "^muffle")
[10:30:58.158]                   }
[10:30:58.158]                 }
[10:30:58.158]             }
[10:30:58.158]         }))
[10:30:58.158]     }, error = function(ex) {
[10:30:58.158]         base::structure(base::list(value = NULL, visible = NULL, 
[10:30:58.158]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:58.158]                 ...future.rng), started = ...future.startTime, 
[10:30:58.158]             finished = Sys.time(), session_uuid = NA_character_, 
[10:30:58.158]             version = "1.8"), class = "FutureResult")
[10:30:58.158]     }, finally = {
[10:30:58.158]         if (!identical(...future.workdir, getwd())) 
[10:30:58.158]             setwd(...future.workdir)
[10:30:58.158]         {
[10:30:58.158]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:30:58.158]                 ...future.oldOptions$nwarnings <- NULL
[10:30:58.158]             }
[10:30:58.158]             base::options(...future.oldOptions)
[10:30:58.158]             if (.Platform$OS.type == "windows") {
[10:30:58.158]                 old_names <- names(...future.oldEnvVars)
[10:30:58.158]                 envs <- base::Sys.getenv()
[10:30:58.158]                 names <- names(envs)
[10:30:58.158]                 common <- intersect(names, old_names)
[10:30:58.158]                 added <- setdiff(names, old_names)
[10:30:58.158]                 removed <- setdiff(old_names, names)
[10:30:58.158]                 changed <- common[...future.oldEnvVars[common] != 
[10:30:58.158]                   envs[common]]
[10:30:58.158]                 NAMES <- toupper(changed)
[10:30:58.158]                 args <- list()
[10:30:58.158]                 for (kk in seq_along(NAMES)) {
[10:30:58.158]                   name <- changed[[kk]]
[10:30:58.158]                   NAME <- NAMES[[kk]]
[10:30:58.158]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:58.158]                     next
[10:30:58.158]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:58.158]                 }
[10:30:58.158]                 NAMES <- toupper(added)
[10:30:58.158]                 for (kk in seq_along(NAMES)) {
[10:30:58.158]                   name <- added[[kk]]
[10:30:58.158]                   NAME <- NAMES[[kk]]
[10:30:58.158]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:58.158]                     next
[10:30:58.158]                   args[[name]] <- ""
[10:30:58.158]                 }
[10:30:58.158]                 NAMES <- toupper(removed)
[10:30:58.158]                 for (kk in seq_along(NAMES)) {
[10:30:58.158]                   name <- removed[[kk]]
[10:30:58.158]                   NAME <- NAMES[[kk]]
[10:30:58.158]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:58.158]                     next
[10:30:58.158]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:58.158]                 }
[10:30:58.158]                 if (length(args) > 0) 
[10:30:58.158]                   base::do.call(base::Sys.setenv, args = args)
[10:30:58.158]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:30:58.158]             }
[10:30:58.158]             else {
[10:30:58.158]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:30:58.158]             }
[10:30:58.158]             {
[10:30:58.158]                 if (base::length(...future.futureOptionsAdded) > 
[10:30:58.158]                   0L) {
[10:30:58.158]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:30:58.158]                   base::names(opts) <- ...future.futureOptionsAdded
[10:30:58.158]                   base::options(opts)
[10:30:58.158]                 }
[10:30:58.158]                 {
[10:30:58.158]                   {
[10:30:58.158]                     base::options(mc.cores = ...future.mc.cores.old)
[10:30:58.158]                     NULL
[10:30:58.158]                   }
[10:30:58.158]                   options(future.plan = NULL)
[10:30:58.158]                   if (is.na(NA_character_)) 
[10:30:58.158]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:30:58.158]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:30:58.158]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:30:58.158]                     .init = FALSE)
[10:30:58.158]                 }
[10:30:58.158]             }
[10:30:58.158]         }
[10:30:58.158]     })
[10:30:58.158]     if (TRUE) {
[10:30:58.158]         base::sink(type = "output", split = FALSE)
[10:30:58.158]         if (TRUE) {
[10:30:58.158]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:30:58.158]         }
[10:30:58.158]         else {
[10:30:58.158]             ...future.result["stdout"] <- base::list(NULL)
[10:30:58.158]         }
[10:30:58.158]         base::close(...future.stdout)
[10:30:58.158]         ...future.stdout <- NULL
[10:30:58.158]     }
[10:30:58.158]     ...future.result$conditions <- ...future.conditions
[10:30:58.158]     ...future.result$finished <- base::Sys.time()
[10:30:58.158]     ...future.result
[10:30:58.158] }
[10:30:58.160] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[10:30:58.161] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[10:30:58.161] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[10:30:58.161] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[10:30:58.162] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[10:30:58.162] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[10:30:58.162] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[10:30:58.162] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[10:30:58.162] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[10:30:58.163] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[10:30:58.163] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[10:30:58.163] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[10:30:58.163] MultisessionFuture started
[10:30:58.164] - Launch lazy future ... done
[10:30:58.164] run() for ‘MultisessionFuture’ ... done
[10:30:58.164] Created future:
[10:30:58.164] MultisessionFuture:
[10:30:58.164] Label: ‘future_replicate-1’
[10:30:58.164] Expression:
[10:30:58.164] {
[10:30:58.164]     do.call(function(...) {
[10:30:58.164]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:58.164]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:58.164]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:58.164]             on.exit(options(oopts), add = TRUE)
[10:30:58.164]         }
[10:30:58.164]         {
[10:30:58.164]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:58.164]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:58.164]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:58.164]                   envir = globalenv(), inherits = FALSE)
[10:30:58.164]                 ...future.FUN(...future.X_jj, ...)
[10:30:58.164]             })
[10:30:58.164]         }
[10:30:58.164]     }, args = future.call.arguments)
[10:30:58.164] }
[10:30:58.164] Lazy evaluation: FALSE
[10:30:58.164] Asynchronous evaluation: TRUE
[10:30:58.164] Local evaluation: TRUE
[10:30:58.164] Environment: R_GlobalEnv
[10:30:58.164] Capture standard output: TRUE
[10:30:58.164] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:30:58.164] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:30:58.164] Packages: <none>
[10:30:58.164] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:30:58.164] Resolved: FALSE
[10:30:58.164] Value: <not collected>
[10:30:58.164] Conditions captured: <none>
[10:30:58.164] Early signaling: FALSE
[10:30:58.164] Owner process: 7cdcbd4b-6c47-ca9a-dc3f-e18236d134b8
[10:30:58.164] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:58.175] Chunk #1 of 2 ... DONE
[10:30:58.176] Chunk #2 of 2 ...
[10:30:58.176]  - Finding globals in 'X' for chunk #2 ...
[10:30:58.176] getGlobalsAndPackages() ...
[10:30:58.176] Searching for globals...
[10:30:58.176] 
[10:30:58.176] Searching for globals ... DONE
[10:30:58.176] - globals: [0] <none>
[10:30:58.176] getGlobalsAndPackages() ... DONE
[10:30:58.177]    + additional globals found: [n=0] 
[10:30:58.177]    + additional namespaces needed: [n=0] 
[10:30:58.177]  - Finding globals in 'X' for chunk #2 ... DONE
[10:30:58.177]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:30:58.177]  - seeds: [3] <seeds>
[10:30:58.177]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:58.177] getGlobalsAndPackages() ...
[10:30:58.177] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:58.177] Resolving globals: FALSE
[10:30:58.178] Tweak future expression to call with '...' arguments ...
[10:30:58.178] {
[10:30:58.178]     do.call(function(...) {
[10:30:58.178]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:58.178]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:58.178]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:58.178]             on.exit(options(oopts), add = TRUE)
[10:30:58.178]         }
[10:30:58.178]         {
[10:30:58.178]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:58.178]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:58.178]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:58.178]                   envir = globalenv(), inherits = FALSE)
[10:30:58.178]                 ...future.FUN(...future.X_jj, ...)
[10:30:58.178]             })
[10:30:58.178]         }
[10:30:58.178]     }, args = future.call.arguments)
[10:30:58.178] }
[10:30:58.178] Tweak future expression to call with '...' arguments ... DONE
[10:30:58.180] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:58.180] 
[10:30:58.180] getGlobalsAndPackages() ... DONE
[10:30:58.181] run() for ‘Future’ ...
[10:30:58.181] - state: ‘created’
[10:30:58.181] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:30:58.195] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:58.195] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:30:58.195]   - Field: ‘node’
[10:30:58.195]   - Field: ‘label’
[10:30:58.196]   - Field: ‘local’
[10:30:58.196]   - Field: ‘owner’
[10:30:58.196]   - Field: ‘envir’
[10:30:58.196]   - Field: ‘workers’
[10:30:58.196]   - Field: ‘packages’
[10:30:58.196]   - Field: ‘gc’
[10:30:58.196]   - Field: ‘conditions’
[10:30:58.196]   - Field: ‘persistent’
[10:30:58.196]   - Field: ‘expr’
[10:30:58.196]   - Field: ‘uuid’
[10:30:58.196]   - Field: ‘seed’
[10:30:58.197]   - Field: ‘version’
[10:30:58.197]   - Field: ‘result’
[10:30:58.197]   - Field: ‘asynchronous’
[10:30:58.197]   - Field: ‘calls’
[10:30:58.197]   - Field: ‘globals’
[10:30:58.197]   - Field: ‘stdout’
[10:30:58.197]   - Field: ‘earlySignal’
[10:30:58.197]   - Field: ‘lazy’
[10:30:58.197]   - Field: ‘state’
[10:30:58.197] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:30:58.197] - Launch lazy future ...
[10:30:58.198] Packages needed by the future expression (n = 0): <none>
[10:30:58.198] Packages needed by future strategies (n = 0): <none>
[10:30:58.198] {
[10:30:58.198]     {
[10:30:58.198]         {
[10:30:58.198]             ...future.startTime <- base::Sys.time()
[10:30:58.198]             {
[10:30:58.198]                 {
[10:30:58.198]                   {
[10:30:58.198]                     {
[10:30:58.198]                       base::local({
[10:30:58.198]                         has_future <- base::requireNamespace("future", 
[10:30:58.198]                           quietly = TRUE)
[10:30:58.198]                         if (has_future) {
[10:30:58.198]                           ns <- base::getNamespace("future")
[10:30:58.198]                           version <- ns[[".package"]][["version"]]
[10:30:58.198]                           if (is.null(version)) 
[10:30:58.198]                             version <- utils::packageVersion("future")
[10:30:58.198]                         }
[10:30:58.198]                         else {
[10:30:58.198]                           version <- NULL
[10:30:58.198]                         }
[10:30:58.198]                         if (!has_future || version < "1.8.0") {
[10:30:58.198]                           info <- base::c(r_version = base::gsub("R version ", 
[10:30:58.198]                             "", base::R.version$version.string), 
[10:30:58.198]                             platform = base::sprintf("%s (%s-bit)", 
[10:30:58.198]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:30:58.198]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:30:58.198]                               "release", "version")], collapse = " "), 
[10:30:58.198]                             hostname = base::Sys.info()[["nodename"]])
[10:30:58.198]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:30:58.198]                             info)
[10:30:58.198]                           info <- base::paste(info, collapse = "; ")
[10:30:58.198]                           if (!has_future) {
[10:30:58.198]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:30:58.198]                               info)
[10:30:58.198]                           }
[10:30:58.198]                           else {
[10:30:58.198]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:30:58.198]                               info, version)
[10:30:58.198]                           }
[10:30:58.198]                           base::stop(msg)
[10:30:58.198]                         }
[10:30:58.198]                       })
[10:30:58.198]                     }
[10:30:58.198]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:30:58.198]                     base::options(mc.cores = 1L)
[10:30:58.198]                   }
[10:30:58.198]                   ...future.strategy.old <- future::plan("list")
[10:30:58.198]                   options(future.plan = NULL)
[10:30:58.198]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:30:58.198]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:30:58.198]                 }
[10:30:58.198]                 ...future.workdir <- getwd()
[10:30:58.198]             }
[10:30:58.198]             ...future.oldOptions <- base::as.list(base::.Options)
[10:30:58.198]             ...future.oldEnvVars <- base::Sys.getenv()
[10:30:58.198]         }
[10:30:58.198]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:30:58.198]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:30:58.198]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:30:58.198]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:30:58.198]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:30:58.198]             future.stdout.windows.reencode = NULL, width = 80L)
[10:30:58.198]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:30:58.198]             base::names(...future.oldOptions))
[10:30:58.198]     }
[10:30:58.198]     if (FALSE) {
[10:30:58.198]     }
[10:30:58.198]     else {
[10:30:58.198]         if (TRUE) {
[10:30:58.198]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:30:58.198]                 open = "w")
[10:30:58.198]         }
[10:30:58.198]         else {
[10:30:58.198]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:30:58.198]                 windows = "NUL", "/dev/null"), open = "w")
[10:30:58.198]         }
[10:30:58.198]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:30:58.198]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:30:58.198]             base::sink(type = "output", split = FALSE)
[10:30:58.198]             base::close(...future.stdout)
[10:30:58.198]         }, add = TRUE)
[10:30:58.198]     }
[10:30:58.198]     ...future.frame <- base::sys.nframe()
[10:30:58.198]     ...future.conditions <- base::list()
[10:30:58.198]     ...future.rng <- base::globalenv()$.Random.seed
[10:30:58.198]     if (FALSE) {
[10:30:58.198]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:30:58.198]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:30:58.198]     }
[10:30:58.198]     ...future.result <- base::tryCatch({
[10:30:58.198]         base::withCallingHandlers({
[10:30:58.198]             ...future.value <- base::withVisible(base::local({
[10:30:58.198]                 ...future.makeSendCondition <- base::local({
[10:30:58.198]                   sendCondition <- NULL
[10:30:58.198]                   function(frame = 1L) {
[10:30:58.198]                     if (is.function(sendCondition)) 
[10:30:58.198]                       return(sendCondition)
[10:30:58.198]                     ns <- getNamespace("parallel")
[10:30:58.198]                     if (exists("sendData", mode = "function", 
[10:30:58.198]                       envir = ns)) {
[10:30:58.198]                       parallel_sendData <- get("sendData", mode = "function", 
[10:30:58.198]                         envir = ns)
[10:30:58.198]                       envir <- sys.frame(frame)
[10:30:58.198]                       master <- NULL
[10:30:58.198]                       while (!identical(envir, .GlobalEnv) && 
[10:30:58.198]                         !identical(envir, emptyenv())) {
[10:30:58.198]                         if (exists("master", mode = "list", envir = envir, 
[10:30:58.198]                           inherits = FALSE)) {
[10:30:58.198]                           master <- get("master", mode = "list", 
[10:30:58.198]                             envir = envir, inherits = FALSE)
[10:30:58.198]                           if (inherits(master, c("SOCKnode", 
[10:30:58.198]                             "SOCK0node"))) {
[10:30:58.198]                             sendCondition <<- function(cond) {
[10:30:58.198]                               data <- list(type = "VALUE", value = cond, 
[10:30:58.198]                                 success = TRUE)
[10:30:58.198]                               parallel_sendData(master, data)
[10:30:58.198]                             }
[10:30:58.198]                             return(sendCondition)
[10:30:58.198]                           }
[10:30:58.198]                         }
[10:30:58.198]                         frame <- frame + 1L
[10:30:58.198]                         envir <- sys.frame(frame)
[10:30:58.198]                       }
[10:30:58.198]                     }
[10:30:58.198]                     sendCondition <<- function(cond) NULL
[10:30:58.198]                   }
[10:30:58.198]                 })
[10:30:58.198]                 withCallingHandlers({
[10:30:58.198]                   {
[10:30:58.198]                     do.call(function(...) {
[10:30:58.198]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:58.198]                       if (!identical(...future.globals.maxSize.org, 
[10:30:58.198]                         ...future.globals.maxSize)) {
[10:30:58.198]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:58.198]                         on.exit(options(oopts), add = TRUE)
[10:30:58.198]                       }
[10:30:58.198]                       {
[10:30:58.198]                         lapply(seq_along(...future.elements_ii), 
[10:30:58.198]                           FUN = function(jj) {
[10:30:58.198]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:58.198]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:58.198]                               envir = globalenv(), inherits = FALSE)
[10:30:58.198]                             ...future.FUN(...future.X_jj, ...)
[10:30:58.198]                           })
[10:30:58.198]                       }
[10:30:58.198]                     }, args = future.call.arguments)
[10:30:58.198]                   }
[10:30:58.198]                 }, immediateCondition = function(cond) {
[10:30:58.198]                   sendCondition <- ...future.makeSendCondition()
[10:30:58.198]                   sendCondition(cond)
[10:30:58.198]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:58.198]                   {
[10:30:58.198]                     inherits <- base::inherits
[10:30:58.198]                     invokeRestart <- base::invokeRestart
[10:30:58.198]                     is.null <- base::is.null
[10:30:58.198]                     muffled <- FALSE
[10:30:58.198]                     if (inherits(cond, "message")) {
[10:30:58.198]                       muffled <- grepl(pattern, "muffleMessage")
[10:30:58.198]                       if (muffled) 
[10:30:58.198]                         invokeRestart("muffleMessage")
[10:30:58.198]                     }
[10:30:58.198]                     else if (inherits(cond, "warning")) {
[10:30:58.198]                       muffled <- grepl(pattern, "muffleWarning")
[10:30:58.198]                       if (muffled) 
[10:30:58.198]                         invokeRestart("muffleWarning")
[10:30:58.198]                     }
[10:30:58.198]                     else if (inherits(cond, "condition")) {
[10:30:58.198]                       if (!is.null(pattern)) {
[10:30:58.198]                         computeRestarts <- base::computeRestarts
[10:30:58.198]                         grepl <- base::grepl
[10:30:58.198]                         restarts <- computeRestarts(cond)
[10:30:58.198]                         for (restart in restarts) {
[10:30:58.198]                           name <- restart$name
[10:30:58.198]                           if (is.null(name)) 
[10:30:58.198]                             next
[10:30:58.198]                           if (!grepl(pattern, name)) 
[10:30:58.198]                             next
[10:30:58.198]                           invokeRestart(restart)
[10:30:58.198]                           muffled <- TRUE
[10:30:58.198]                           break
[10:30:58.198]                         }
[10:30:58.198]                       }
[10:30:58.198]                     }
[10:30:58.198]                     invisible(muffled)
[10:30:58.198]                   }
[10:30:58.198]                   muffleCondition(cond)
[10:30:58.198]                 })
[10:30:58.198]             }))
[10:30:58.198]             future::FutureResult(value = ...future.value$value, 
[10:30:58.198]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:58.198]                   ...future.rng), globalenv = if (FALSE) 
[10:30:58.198]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:30:58.198]                     ...future.globalenv.names))
[10:30:58.198]                 else NULL, started = ...future.startTime, version = "1.8")
[10:30:58.198]         }, condition = base::local({
[10:30:58.198]             c <- base::c
[10:30:58.198]             inherits <- base::inherits
[10:30:58.198]             invokeRestart <- base::invokeRestart
[10:30:58.198]             length <- base::length
[10:30:58.198]             list <- base::list
[10:30:58.198]             seq.int <- base::seq.int
[10:30:58.198]             signalCondition <- base::signalCondition
[10:30:58.198]             sys.calls <- base::sys.calls
[10:30:58.198]             `[[` <- base::`[[`
[10:30:58.198]             `+` <- base::`+`
[10:30:58.198]             `<<-` <- base::`<<-`
[10:30:58.198]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:30:58.198]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:30:58.198]                   3L)]
[10:30:58.198]             }
[10:30:58.198]             function(cond) {
[10:30:58.198]                 is_error <- inherits(cond, "error")
[10:30:58.198]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:30:58.198]                   NULL)
[10:30:58.198]                 if (is_error) {
[10:30:58.198]                   sessionInformation <- function() {
[10:30:58.198]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:30:58.198]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:30:58.198]                       search = base::search(), system = base::Sys.info())
[10:30:58.198]                   }
[10:30:58.198]                   ...future.conditions[[length(...future.conditions) + 
[10:30:58.198]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:30:58.198]                     cond$call), session = sessionInformation(), 
[10:30:58.198]                     timestamp = base::Sys.time(), signaled = 0L)
[10:30:58.198]                   signalCondition(cond)
[10:30:58.198]                 }
[10:30:58.198]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:30:58.198]                 "immediateCondition"))) {
[10:30:58.198]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:30:58.198]                   ...future.conditions[[length(...future.conditions) + 
[10:30:58.198]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:30:58.198]                   if (TRUE && !signal) {
[10:30:58.198]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:58.198]                     {
[10:30:58.198]                       inherits <- base::inherits
[10:30:58.198]                       invokeRestart <- base::invokeRestart
[10:30:58.198]                       is.null <- base::is.null
[10:30:58.198]                       muffled <- FALSE
[10:30:58.198]                       if (inherits(cond, "message")) {
[10:30:58.198]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:58.198]                         if (muffled) 
[10:30:58.198]                           invokeRestart("muffleMessage")
[10:30:58.198]                       }
[10:30:58.198]                       else if (inherits(cond, "warning")) {
[10:30:58.198]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:58.198]                         if (muffled) 
[10:30:58.198]                           invokeRestart("muffleWarning")
[10:30:58.198]                       }
[10:30:58.198]                       else if (inherits(cond, "condition")) {
[10:30:58.198]                         if (!is.null(pattern)) {
[10:30:58.198]                           computeRestarts <- base::computeRestarts
[10:30:58.198]                           grepl <- base::grepl
[10:30:58.198]                           restarts <- computeRestarts(cond)
[10:30:58.198]                           for (restart in restarts) {
[10:30:58.198]                             name <- restart$name
[10:30:58.198]                             if (is.null(name)) 
[10:30:58.198]                               next
[10:30:58.198]                             if (!grepl(pattern, name)) 
[10:30:58.198]                               next
[10:30:58.198]                             invokeRestart(restart)
[10:30:58.198]                             muffled <- TRUE
[10:30:58.198]                             break
[10:30:58.198]                           }
[10:30:58.198]                         }
[10:30:58.198]                       }
[10:30:58.198]                       invisible(muffled)
[10:30:58.198]                     }
[10:30:58.198]                     muffleCondition(cond, pattern = "^muffle")
[10:30:58.198]                   }
[10:30:58.198]                 }
[10:30:58.198]                 else {
[10:30:58.198]                   if (TRUE) {
[10:30:58.198]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:58.198]                     {
[10:30:58.198]                       inherits <- base::inherits
[10:30:58.198]                       invokeRestart <- base::invokeRestart
[10:30:58.198]                       is.null <- base::is.null
[10:30:58.198]                       muffled <- FALSE
[10:30:58.198]                       if (inherits(cond, "message")) {
[10:30:58.198]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:58.198]                         if (muffled) 
[10:30:58.198]                           invokeRestart("muffleMessage")
[10:30:58.198]                       }
[10:30:58.198]                       else if (inherits(cond, "warning")) {
[10:30:58.198]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:58.198]                         if (muffled) 
[10:30:58.198]                           invokeRestart("muffleWarning")
[10:30:58.198]                       }
[10:30:58.198]                       else if (inherits(cond, "condition")) {
[10:30:58.198]                         if (!is.null(pattern)) {
[10:30:58.198]                           computeRestarts <- base::computeRestarts
[10:30:58.198]                           grepl <- base::grepl
[10:30:58.198]                           restarts <- computeRestarts(cond)
[10:30:58.198]                           for (restart in restarts) {
[10:30:58.198]                             name <- restart$name
[10:30:58.198]                             if (is.null(name)) 
[10:30:58.198]                               next
[10:30:58.198]                             if (!grepl(pattern, name)) 
[10:30:58.198]                               next
[10:30:58.198]                             invokeRestart(restart)
[10:30:58.198]                             muffled <- TRUE
[10:30:58.198]                             break
[10:30:58.198]                           }
[10:30:58.198]                         }
[10:30:58.198]                       }
[10:30:58.198]                       invisible(muffled)
[10:30:58.198]                     }
[10:30:58.198]                     muffleCondition(cond, pattern = "^muffle")
[10:30:58.198]                   }
[10:30:58.198]                 }
[10:30:58.198]             }
[10:30:58.198]         }))
[10:30:58.198]     }, error = function(ex) {
[10:30:58.198]         base::structure(base::list(value = NULL, visible = NULL, 
[10:30:58.198]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:58.198]                 ...future.rng), started = ...future.startTime, 
[10:30:58.198]             finished = Sys.time(), session_uuid = NA_character_, 
[10:30:58.198]             version = "1.8"), class = "FutureResult")
[10:30:58.198]     }, finally = {
[10:30:58.198]         if (!identical(...future.workdir, getwd())) 
[10:30:58.198]             setwd(...future.workdir)
[10:30:58.198]         {
[10:30:58.198]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:30:58.198]                 ...future.oldOptions$nwarnings <- NULL
[10:30:58.198]             }
[10:30:58.198]             base::options(...future.oldOptions)
[10:30:58.198]             if (.Platform$OS.type == "windows") {
[10:30:58.198]                 old_names <- names(...future.oldEnvVars)
[10:30:58.198]                 envs <- base::Sys.getenv()
[10:30:58.198]                 names <- names(envs)
[10:30:58.198]                 common <- intersect(names, old_names)
[10:30:58.198]                 added <- setdiff(names, old_names)
[10:30:58.198]                 removed <- setdiff(old_names, names)
[10:30:58.198]                 changed <- common[...future.oldEnvVars[common] != 
[10:30:58.198]                   envs[common]]
[10:30:58.198]                 NAMES <- toupper(changed)
[10:30:58.198]                 args <- list()
[10:30:58.198]                 for (kk in seq_along(NAMES)) {
[10:30:58.198]                   name <- changed[[kk]]
[10:30:58.198]                   NAME <- NAMES[[kk]]
[10:30:58.198]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:58.198]                     next
[10:30:58.198]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:58.198]                 }
[10:30:58.198]                 NAMES <- toupper(added)
[10:30:58.198]                 for (kk in seq_along(NAMES)) {
[10:30:58.198]                   name <- added[[kk]]
[10:30:58.198]                   NAME <- NAMES[[kk]]
[10:30:58.198]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:58.198]                     next
[10:30:58.198]                   args[[name]] <- ""
[10:30:58.198]                 }
[10:30:58.198]                 NAMES <- toupper(removed)
[10:30:58.198]                 for (kk in seq_along(NAMES)) {
[10:30:58.198]                   name <- removed[[kk]]
[10:30:58.198]                   NAME <- NAMES[[kk]]
[10:30:58.198]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:58.198]                     next
[10:30:58.198]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:58.198]                 }
[10:30:58.198]                 if (length(args) > 0) 
[10:30:58.198]                   base::do.call(base::Sys.setenv, args = args)
[10:30:58.198]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:30:58.198]             }
[10:30:58.198]             else {
[10:30:58.198]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:30:58.198]             }
[10:30:58.198]             {
[10:30:58.198]                 if (base::length(...future.futureOptionsAdded) > 
[10:30:58.198]                   0L) {
[10:30:58.198]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:30:58.198]                   base::names(opts) <- ...future.futureOptionsAdded
[10:30:58.198]                   base::options(opts)
[10:30:58.198]                 }
[10:30:58.198]                 {
[10:30:58.198]                   {
[10:30:58.198]                     base::options(mc.cores = ...future.mc.cores.old)
[10:30:58.198]                     NULL
[10:30:58.198]                   }
[10:30:58.198]                   options(future.plan = NULL)
[10:30:58.198]                   if (is.na(NA_character_)) 
[10:30:58.198]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:30:58.198]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:30:58.198]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:30:58.198]                     .init = FALSE)
[10:30:58.198]                 }
[10:30:58.198]             }
[10:30:58.198]         }
[10:30:58.198]     })
[10:30:58.198]     if (TRUE) {
[10:30:58.198]         base::sink(type = "output", split = FALSE)
[10:30:58.198]         if (TRUE) {
[10:30:58.198]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:30:58.198]         }
[10:30:58.198]         else {
[10:30:58.198]             ...future.result["stdout"] <- base::list(NULL)
[10:30:58.198]         }
[10:30:58.198]         base::close(...future.stdout)
[10:30:58.198]         ...future.stdout <- NULL
[10:30:58.198]     }
[10:30:58.198]     ...future.result$conditions <- ...future.conditions
[10:30:58.198]     ...future.result$finished <- base::Sys.time()
[10:30:58.198]     ...future.result
[10:30:58.198] }
[10:30:58.201] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[10:30:58.201] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[10:30:58.202] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[10:30:58.202] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[10:30:58.202] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[10:30:58.202] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[10:30:58.203] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[10:30:58.203] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[10:30:58.203] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[10:30:58.203] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[10:30:58.204] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[10:30:58.204] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[10:30:58.204] MultisessionFuture started
[10:30:58.204] - Launch lazy future ... done
[10:30:58.205] run() for ‘MultisessionFuture’ ... done
[10:30:58.205] Created future:
[10:30:58.205] MultisessionFuture:
[10:30:58.205] Label: ‘future_replicate-2’
[10:30:58.205] Expression:
[10:30:58.205] {
[10:30:58.205]     do.call(function(...) {
[10:30:58.205]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:58.205]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:58.205]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:58.205]             on.exit(options(oopts), add = TRUE)
[10:30:58.205]         }
[10:30:58.205]         {
[10:30:58.205]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:58.205]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:58.205]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:58.205]                   envir = globalenv(), inherits = FALSE)
[10:30:58.205]                 ...future.FUN(...future.X_jj, ...)
[10:30:58.205]             })
[10:30:58.205]         }
[10:30:58.205]     }, args = future.call.arguments)
[10:30:58.205] }
[10:30:58.205] Lazy evaluation: FALSE
[10:30:58.205] Asynchronous evaluation: TRUE
[10:30:58.205] Local evaluation: TRUE
[10:30:58.205] Environment: R_GlobalEnv
[10:30:58.205] Capture standard output: TRUE
[10:30:58.205] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:30:58.205] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:30:58.205] Packages: <none>
[10:30:58.205] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:30:58.205] Resolved: FALSE
[10:30:58.205] Value: <not collected>
[10:30:58.205] Conditions captured: <none>
[10:30:58.205] Early signaling: FALSE
[10:30:58.205] Owner process: 7cdcbd4b-6c47-ca9a-dc3f-e18236d134b8
[10:30:58.205] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:58.216] Chunk #2 of 2 ... DONE
[10:30:58.217] Launching 2 futures (chunks) ... DONE
[10:30:58.217] Resolving 2 futures (chunks) ...
[10:30:58.217] resolve() on list ...
[10:30:58.217]  recursive: 0
[10:30:58.217]  length: 2
[10:30:58.217] 
[10:30:58.218] receiveMessageFromWorker() for ClusterFuture ...
[10:30:58.218] - Validating connection of MultisessionFuture
[10:30:58.218] - received message: FutureResult
[10:30:58.218] - Received FutureResult
[10:30:58.218] - Erased future from FutureRegistry
[10:30:58.218] result() for ClusterFuture ...
[10:30:58.218] - result already collected: FutureResult
[10:30:58.218] result() for ClusterFuture ... done
[10:30:58.218] receiveMessageFromWorker() for ClusterFuture ... done
[10:30:58.219] Future #1
[10:30:58.219] result() for ClusterFuture ...
[10:30:58.219] - result already collected: FutureResult
[10:30:58.219] result() for ClusterFuture ... done
[10:30:58.219] result() for ClusterFuture ...
[10:30:58.219] - result already collected: FutureResult
[10:30:58.219] result() for ClusterFuture ... done
[10:30:58.219] signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:30:58.219] - nx: 2
[10:30:58.219] - relay: TRUE
[10:30:58.219] - stdout: TRUE
[10:30:58.220] - signal: TRUE
[10:30:58.220] - resignal: FALSE
[10:30:58.220] - force: TRUE
[10:30:58.220] - relayed: [n=2] FALSE, FALSE
[10:30:58.220] - queued futures: [n=2] FALSE, FALSE
[10:30:58.220]  - until=1
[10:30:58.220]  - relaying element #1
[10:30:58.220] result() for ClusterFuture ...
[10:30:58.220] - result already collected: FutureResult
[10:30:58.220] result() for ClusterFuture ... done
[10:30:58.220] result() for ClusterFuture ...
[10:30:58.220] - result already collected: FutureResult
[10:30:58.221] result() for ClusterFuture ... done
[10:30:58.221] result() for ClusterFuture ...
[10:30:58.221] - result already collected: FutureResult
[10:30:58.221] result() for ClusterFuture ... done
[10:30:58.221] result() for ClusterFuture ...
[10:30:58.221] - result already collected: FutureResult
[10:30:58.221] result() for ClusterFuture ... done
[10:30:58.221] - relayed: [n=2] TRUE, FALSE
[10:30:58.221] - queued futures: [n=2] TRUE, FALSE
[10:30:58.221] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:30:58.222]  length: 1 (resolved future 1)
[10:30:58.246] receiveMessageFromWorker() for ClusterFuture ...
[10:30:58.247] - Validating connection of MultisessionFuture
[10:30:58.247] - received message: FutureResult
[10:30:58.247] - Received FutureResult
[10:30:58.247] - Erased future from FutureRegistry
[10:30:58.247] result() for ClusterFuture ...
[10:30:58.247] - result already collected: FutureResult
[10:30:58.247] result() for ClusterFuture ... done
[10:30:58.248] receiveMessageFromWorker() for ClusterFuture ... done
[10:30:58.248] Future #2
[10:30:58.248] result() for ClusterFuture ...
[10:30:58.248] - result already collected: FutureResult
[10:30:58.248] result() for ClusterFuture ... done
[10:30:58.248] result() for ClusterFuture ...
[10:30:58.248] - result already collected: FutureResult
[10:30:58.248] result() for ClusterFuture ... done
[10:30:58.248] signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:30:58.248] - nx: 2
[10:30:58.249] - relay: TRUE
[10:30:58.249] - stdout: TRUE
[10:30:58.249] - signal: TRUE
[10:30:58.249] - resignal: FALSE
[10:30:58.249] - force: TRUE
[10:30:58.249] - relayed: [n=2] TRUE, FALSE
[10:30:58.249] - queued futures: [n=2] TRUE, FALSE
[10:30:58.249]  - until=2
[10:30:58.249]  - relaying element #2
[10:30:58.249] result() for ClusterFuture ...
[10:30:58.249] - result already collected: FutureResult
[10:30:58.250] result() for ClusterFuture ... done
[10:30:58.250] result() for ClusterFuture ...
[10:30:58.250] - result already collected: FutureResult
[10:30:58.250] result() for ClusterFuture ... done
[10:30:58.250] result() for ClusterFuture ...
[10:30:58.250] - result already collected: FutureResult
[10:30:58.250] result() for ClusterFuture ... done
[10:30:58.250] result() for ClusterFuture ...
[10:30:58.250] - result already collected: FutureResult
[10:30:58.250] result() for ClusterFuture ... done
[10:30:58.250] - relayed: [n=2] TRUE, TRUE
[10:30:58.251] - queued futures: [n=2] TRUE, TRUE
[10:30:58.251] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:30:58.251]  length: 0 (resolved future 2)
[10:30:58.251] Relaying remaining futures
[10:30:58.251] signalConditionsASAP(NULL, pos=0) ...
[10:30:58.251] - nx: 2
[10:30:58.251] - relay: TRUE
[10:30:58.251] - stdout: TRUE
[10:30:58.251] - signal: TRUE
[10:30:58.251] - resignal: FALSE
[10:30:58.251] - force: TRUE
[10:30:58.251] - relayed: [n=2] TRUE, TRUE
[10:30:58.252] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:30:58.252] - relayed: [n=2] TRUE, TRUE
[10:30:58.252] - queued futures: [n=2] TRUE, TRUE
[10:30:58.252] signalConditionsASAP(NULL, pos=0) ... done
[10:30:58.252] resolve() on list ... DONE
[10:30:58.252] result() for ClusterFuture ...
[10:30:58.252] - result already collected: FutureResult
[10:30:58.252] result() for ClusterFuture ... done
[10:30:58.252] result() for ClusterFuture ...
[10:30:58.252] - result already collected: FutureResult
[10:30:58.253] result() for ClusterFuture ... done
[10:30:58.253] result() for ClusterFuture ...
[10:30:58.253] - result already collected: FutureResult
[10:30:58.253] result() for ClusterFuture ... done
[10:30:58.253] result() for ClusterFuture ...
[10:30:58.253] - result already collected: FutureResult
[10:30:58.253] result() for ClusterFuture ... done
[10:30:58.253]  - Number of value chunks collected: 2
[10:30:58.253] Resolving 2 futures (chunks) ... DONE
[10:30:58.253] Reducing values from 2 chunks ...
[10:30:58.253]  - Number of values collected after concatenation: 5
[10:30:58.254]  - Number of values expected: 5
[10:30:58.254] Reducing values from 2 chunks ... DONE
[10:30:58.254] future_lapply() ... DONE
[10:30:58.254] future_lapply() ...
[10:30:58.254] Generating random seeds ...
[10:30:58.254] Generating random seed streams for 5 elements ...
[10:30:58.255] Generating random seed streams for 5 elements ... DONE
[10:30:58.255] Generating random seeds ... DONE
[10:30:58.255] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:30:58.259] Number of chunks: 2
[10:30:58.259] getGlobalsAndPackagesXApply() ...
[10:30:58.260]  - future.globals: TRUE
[10:30:58.260] getGlobalsAndPackages() ...
[10:30:58.260] Searching for globals...
[10:30:58.261] - globals found: [2] ‘FUN’, ‘sample’
[10:30:58.261] Searching for globals ... DONE
[10:30:58.261] Resolving globals: FALSE
[10:30:58.262] The total size of the 1 globals is 616 bytes (616 bytes)
[10:30:58.262] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[10:30:58.262] - globals: [1] ‘FUN’
[10:30:58.262] 
[10:30:58.262] getGlobalsAndPackages() ... DONE
[10:30:58.262]  - globals found/used: [n=1] ‘FUN’
[10:30:58.263]  - needed namespaces: [n=0] 
[10:30:58.263] Finding globals ... DONE
[10:30:58.263]  - use_args: TRUE
[10:30:58.263]  - Getting '...' globals ...
[10:30:58.263] resolve() on list ...
[10:30:58.263]  recursive: 0
[10:30:58.263]  length: 1
[10:30:58.263]  elements: ‘...’
[10:30:58.264]  length: 0 (resolved future 1)
[10:30:58.264] resolve() on list ... DONE
[10:30:58.264]    - '...' content: [n=0] 
[10:30:58.264] List of 1
[10:30:58.264]  $ ...: list()
[10:30:58.264]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:58.264]  - attr(*, "where")=List of 1
[10:30:58.264]   ..$ ...:<environment: 0x55aba14e6100> 
[10:30:58.264]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:58.264]  - attr(*, "resolved")= logi TRUE
[10:30:58.264]  - attr(*, "total_size")= num NA
[10:30:58.266]  - Getting '...' globals ... DONE
[10:30:58.267] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[10:30:58.267] List of 2
[10:30:58.267]  $ ...future.FUN:function (...)  
[10:30:58.267]  $ ...          : list()
[10:30:58.267]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:58.267]  - attr(*, "where")=List of 2
[10:30:58.267]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:30:58.267]   ..$ ...          :<environment: 0x55aba14e6100> 
[10:30:58.267]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:58.267]  - attr(*, "resolved")= logi FALSE
[10:30:58.267]  - attr(*, "total_size")= num 616
[10:30:58.269] Packages to be attached in all futures: [n=0] 
[10:30:58.269] getGlobalsAndPackagesXApply() ... DONE
[10:30:58.270] Number of futures (= number of chunks): 2
[10:30:58.270] Launching 2 futures (chunks) ...
[10:30:58.270] Chunk #1 of 2 ...
[10:30:58.270]  - Finding globals in 'X' for chunk #1 ...
[10:30:58.270] getGlobalsAndPackages() ...
[10:30:58.270] Searching for globals...
[10:30:58.270] 
[10:30:58.270] Searching for globals ... DONE
[10:30:58.271] - globals: [0] <none>
[10:30:58.271] getGlobalsAndPackages() ... DONE
[10:30:58.271]    + additional globals found: [n=0] 
[10:30:58.271]    + additional namespaces needed: [n=0] 
[10:30:58.271]  - Finding globals in 'X' for chunk #1 ... DONE
[10:30:58.271]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:30:58.271]  - seeds: [2] <seeds>
[10:30:58.271]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:58.271] getGlobalsAndPackages() ...
[10:30:58.271] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:58.272] Resolving globals: FALSE
[10:30:58.272] Tweak future expression to call with '...' arguments ...
[10:30:58.272] {
[10:30:58.272]     do.call(function(...) {
[10:30:58.272]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:58.272]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:58.272]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:58.272]             on.exit(options(oopts), add = TRUE)
[10:30:58.272]         }
[10:30:58.272]         {
[10:30:58.272]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:58.272]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:58.272]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:58.272]                   envir = globalenv(), inherits = FALSE)
[10:30:58.272]                 ...future.FUN(...future.X_jj, ...)
[10:30:58.272]             })
[10:30:58.272]         }
[10:30:58.272]     }, args = future.call.arguments)
[10:30:58.272] }
[10:30:58.272] Tweak future expression to call with '...' arguments ... DONE
[10:30:58.272] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:58.273] 
[10:30:58.273] getGlobalsAndPackages() ... DONE
[10:30:58.273] run() for ‘Future’ ...
[10:30:58.273] - state: ‘created’
[10:30:58.273] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:30:58.287] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:58.287] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:30:58.287]   - Field: ‘node’
[10:30:58.287]   - Field: ‘label’
[10:30:58.287]   - Field: ‘local’
[10:30:58.287]   - Field: ‘owner’
[10:30:58.288]   - Field: ‘envir’
[10:30:58.288]   - Field: ‘workers’
[10:30:58.288]   - Field: ‘packages’
[10:30:58.288]   - Field: ‘gc’
[10:30:58.288]   - Field: ‘conditions’
[10:30:58.288]   - Field: ‘persistent’
[10:30:58.288]   - Field: ‘expr’
[10:30:58.288]   - Field: ‘uuid’
[10:30:58.288]   - Field: ‘seed’
[10:30:58.288]   - Field: ‘version’
[10:30:58.288]   - Field: ‘result’
[10:30:58.289]   - Field: ‘asynchronous’
[10:30:58.289]   - Field: ‘calls’
[10:30:58.289]   - Field: ‘globals’
[10:30:58.289]   - Field: ‘stdout’
[10:30:58.289]   - Field: ‘earlySignal’
[10:30:58.289]   - Field: ‘lazy’
[10:30:58.289]   - Field: ‘state’
[10:30:58.289] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:30:58.289] - Launch lazy future ...
[10:30:58.290] Packages needed by the future expression (n = 0): <none>
[10:30:58.290] Packages needed by future strategies (n = 0): <none>
[10:30:58.290] {
[10:30:58.290]     {
[10:30:58.290]         {
[10:30:58.290]             ...future.startTime <- base::Sys.time()
[10:30:58.290]             {
[10:30:58.290]                 {
[10:30:58.290]                   {
[10:30:58.290]                     {
[10:30:58.290]                       base::local({
[10:30:58.290]                         has_future <- base::requireNamespace("future", 
[10:30:58.290]                           quietly = TRUE)
[10:30:58.290]                         if (has_future) {
[10:30:58.290]                           ns <- base::getNamespace("future")
[10:30:58.290]                           version <- ns[[".package"]][["version"]]
[10:30:58.290]                           if (is.null(version)) 
[10:30:58.290]                             version <- utils::packageVersion("future")
[10:30:58.290]                         }
[10:30:58.290]                         else {
[10:30:58.290]                           version <- NULL
[10:30:58.290]                         }
[10:30:58.290]                         if (!has_future || version < "1.8.0") {
[10:30:58.290]                           info <- base::c(r_version = base::gsub("R version ", 
[10:30:58.290]                             "", base::R.version$version.string), 
[10:30:58.290]                             platform = base::sprintf("%s (%s-bit)", 
[10:30:58.290]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:30:58.290]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:30:58.290]                               "release", "version")], collapse = " "), 
[10:30:58.290]                             hostname = base::Sys.info()[["nodename"]])
[10:30:58.290]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:30:58.290]                             info)
[10:30:58.290]                           info <- base::paste(info, collapse = "; ")
[10:30:58.290]                           if (!has_future) {
[10:30:58.290]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:30:58.290]                               info)
[10:30:58.290]                           }
[10:30:58.290]                           else {
[10:30:58.290]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:30:58.290]                               info, version)
[10:30:58.290]                           }
[10:30:58.290]                           base::stop(msg)
[10:30:58.290]                         }
[10:30:58.290]                       })
[10:30:58.290]                     }
[10:30:58.290]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:30:58.290]                     base::options(mc.cores = 1L)
[10:30:58.290]                   }
[10:30:58.290]                   ...future.strategy.old <- future::plan("list")
[10:30:58.290]                   options(future.plan = NULL)
[10:30:58.290]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:30:58.290]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:30:58.290]                 }
[10:30:58.290]                 ...future.workdir <- getwd()
[10:30:58.290]             }
[10:30:58.290]             ...future.oldOptions <- base::as.list(base::.Options)
[10:30:58.290]             ...future.oldEnvVars <- base::Sys.getenv()
[10:30:58.290]         }
[10:30:58.290]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:30:58.290]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:30:58.290]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:30:58.290]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:30:58.290]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:30:58.290]             future.stdout.windows.reencode = NULL, width = 80L)
[10:30:58.290]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:30:58.290]             base::names(...future.oldOptions))
[10:30:58.290]     }
[10:30:58.290]     if (FALSE) {
[10:30:58.290]     }
[10:30:58.290]     else {
[10:30:58.290]         if (TRUE) {
[10:30:58.290]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:30:58.290]                 open = "w")
[10:30:58.290]         }
[10:30:58.290]         else {
[10:30:58.290]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:30:58.290]                 windows = "NUL", "/dev/null"), open = "w")
[10:30:58.290]         }
[10:30:58.290]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:30:58.290]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:30:58.290]             base::sink(type = "output", split = FALSE)
[10:30:58.290]             base::close(...future.stdout)
[10:30:58.290]         }, add = TRUE)
[10:30:58.290]     }
[10:30:58.290]     ...future.frame <- base::sys.nframe()
[10:30:58.290]     ...future.conditions <- base::list()
[10:30:58.290]     ...future.rng <- base::globalenv()$.Random.seed
[10:30:58.290]     if (FALSE) {
[10:30:58.290]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:30:58.290]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:30:58.290]     }
[10:30:58.290]     ...future.result <- base::tryCatch({
[10:30:58.290]         base::withCallingHandlers({
[10:30:58.290]             ...future.value <- base::withVisible(base::local({
[10:30:58.290]                 ...future.makeSendCondition <- base::local({
[10:30:58.290]                   sendCondition <- NULL
[10:30:58.290]                   function(frame = 1L) {
[10:30:58.290]                     if (is.function(sendCondition)) 
[10:30:58.290]                       return(sendCondition)
[10:30:58.290]                     ns <- getNamespace("parallel")
[10:30:58.290]                     if (exists("sendData", mode = "function", 
[10:30:58.290]                       envir = ns)) {
[10:30:58.290]                       parallel_sendData <- get("sendData", mode = "function", 
[10:30:58.290]                         envir = ns)
[10:30:58.290]                       envir <- sys.frame(frame)
[10:30:58.290]                       master <- NULL
[10:30:58.290]                       while (!identical(envir, .GlobalEnv) && 
[10:30:58.290]                         !identical(envir, emptyenv())) {
[10:30:58.290]                         if (exists("master", mode = "list", envir = envir, 
[10:30:58.290]                           inherits = FALSE)) {
[10:30:58.290]                           master <- get("master", mode = "list", 
[10:30:58.290]                             envir = envir, inherits = FALSE)
[10:30:58.290]                           if (inherits(master, c("SOCKnode", 
[10:30:58.290]                             "SOCK0node"))) {
[10:30:58.290]                             sendCondition <<- function(cond) {
[10:30:58.290]                               data <- list(type = "VALUE", value = cond, 
[10:30:58.290]                                 success = TRUE)
[10:30:58.290]                               parallel_sendData(master, data)
[10:30:58.290]                             }
[10:30:58.290]                             return(sendCondition)
[10:30:58.290]                           }
[10:30:58.290]                         }
[10:30:58.290]                         frame <- frame + 1L
[10:30:58.290]                         envir <- sys.frame(frame)
[10:30:58.290]                       }
[10:30:58.290]                     }
[10:30:58.290]                     sendCondition <<- function(cond) NULL
[10:30:58.290]                   }
[10:30:58.290]                 })
[10:30:58.290]                 withCallingHandlers({
[10:30:58.290]                   {
[10:30:58.290]                     do.call(function(...) {
[10:30:58.290]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:58.290]                       if (!identical(...future.globals.maxSize.org, 
[10:30:58.290]                         ...future.globals.maxSize)) {
[10:30:58.290]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:58.290]                         on.exit(options(oopts), add = TRUE)
[10:30:58.290]                       }
[10:30:58.290]                       {
[10:30:58.290]                         lapply(seq_along(...future.elements_ii), 
[10:30:58.290]                           FUN = function(jj) {
[10:30:58.290]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:58.290]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:58.290]                               envir = globalenv(), inherits = FALSE)
[10:30:58.290]                             ...future.FUN(...future.X_jj, ...)
[10:30:58.290]                           })
[10:30:58.290]                       }
[10:30:58.290]                     }, args = future.call.arguments)
[10:30:58.290]                   }
[10:30:58.290]                 }, immediateCondition = function(cond) {
[10:30:58.290]                   sendCondition <- ...future.makeSendCondition()
[10:30:58.290]                   sendCondition(cond)
[10:30:58.290]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:58.290]                   {
[10:30:58.290]                     inherits <- base::inherits
[10:30:58.290]                     invokeRestart <- base::invokeRestart
[10:30:58.290]                     is.null <- base::is.null
[10:30:58.290]                     muffled <- FALSE
[10:30:58.290]                     if (inherits(cond, "message")) {
[10:30:58.290]                       muffled <- grepl(pattern, "muffleMessage")
[10:30:58.290]                       if (muffled) 
[10:30:58.290]                         invokeRestart("muffleMessage")
[10:30:58.290]                     }
[10:30:58.290]                     else if (inherits(cond, "warning")) {
[10:30:58.290]                       muffled <- grepl(pattern, "muffleWarning")
[10:30:58.290]                       if (muffled) 
[10:30:58.290]                         invokeRestart("muffleWarning")
[10:30:58.290]                     }
[10:30:58.290]                     else if (inherits(cond, "condition")) {
[10:30:58.290]                       if (!is.null(pattern)) {
[10:30:58.290]                         computeRestarts <- base::computeRestarts
[10:30:58.290]                         grepl <- base::grepl
[10:30:58.290]                         restarts <- computeRestarts(cond)
[10:30:58.290]                         for (restart in restarts) {
[10:30:58.290]                           name <- restart$name
[10:30:58.290]                           if (is.null(name)) 
[10:30:58.290]                             next
[10:30:58.290]                           if (!grepl(pattern, name)) 
[10:30:58.290]                             next
[10:30:58.290]                           invokeRestart(restart)
[10:30:58.290]                           muffled <- TRUE
[10:30:58.290]                           break
[10:30:58.290]                         }
[10:30:58.290]                       }
[10:30:58.290]                     }
[10:30:58.290]                     invisible(muffled)
[10:30:58.290]                   }
[10:30:58.290]                   muffleCondition(cond)
[10:30:58.290]                 })
[10:30:58.290]             }))
[10:30:58.290]             future::FutureResult(value = ...future.value$value, 
[10:30:58.290]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:58.290]                   ...future.rng), globalenv = if (FALSE) 
[10:30:58.290]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:30:58.290]                     ...future.globalenv.names))
[10:30:58.290]                 else NULL, started = ...future.startTime, version = "1.8")
[10:30:58.290]         }, condition = base::local({
[10:30:58.290]             c <- base::c
[10:30:58.290]             inherits <- base::inherits
[10:30:58.290]             invokeRestart <- base::invokeRestart
[10:30:58.290]             length <- base::length
[10:30:58.290]             list <- base::list
[10:30:58.290]             seq.int <- base::seq.int
[10:30:58.290]             signalCondition <- base::signalCondition
[10:30:58.290]             sys.calls <- base::sys.calls
[10:30:58.290]             `[[` <- base::`[[`
[10:30:58.290]             `+` <- base::`+`
[10:30:58.290]             `<<-` <- base::`<<-`
[10:30:58.290]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:30:58.290]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:30:58.290]                   3L)]
[10:30:58.290]             }
[10:30:58.290]             function(cond) {
[10:30:58.290]                 is_error <- inherits(cond, "error")
[10:30:58.290]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:30:58.290]                   NULL)
[10:30:58.290]                 if (is_error) {
[10:30:58.290]                   sessionInformation <- function() {
[10:30:58.290]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:30:58.290]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:30:58.290]                       search = base::search(), system = base::Sys.info())
[10:30:58.290]                   }
[10:30:58.290]                   ...future.conditions[[length(...future.conditions) + 
[10:30:58.290]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:30:58.290]                     cond$call), session = sessionInformation(), 
[10:30:58.290]                     timestamp = base::Sys.time(), signaled = 0L)
[10:30:58.290]                   signalCondition(cond)
[10:30:58.290]                 }
[10:30:58.290]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:30:58.290]                 "immediateCondition"))) {
[10:30:58.290]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:30:58.290]                   ...future.conditions[[length(...future.conditions) + 
[10:30:58.290]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:30:58.290]                   if (TRUE && !signal) {
[10:30:58.290]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:58.290]                     {
[10:30:58.290]                       inherits <- base::inherits
[10:30:58.290]                       invokeRestart <- base::invokeRestart
[10:30:58.290]                       is.null <- base::is.null
[10:30:58.290]                       muffled <- FALSE
[10:30:58.290]                       if (inherits(cond, "message")) {
[10:30:58.290]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:58.290]                         if (muffled) 
[10:30:58.290]                           invokeRestart("muffleMessage")
[10:30:58.290]                       }
[10:30:58.290]                       else if (inherits(cond, "warning")) {
[10:30:58.290]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:58.290]                         if (muffled) 
[10:30:58.290]                           invokeRestart("muffleWarning")
[10:30:58.290]                       }
[10:30:58.290]                       else if (inherits(cond, "condition")) {
[10:30:58.290]                         if (!is.null(pattern)) {
[10:30:58.290]                           computeRestarts <- base::computeRestarts
[10:30:58.290]                           grepl <- base::grepl
[10:30:58.290]                           restarts <- computeRestarts(cond)
[10:30:58.290]                           for (restart in restarts) {
[10:30:58.290]                             name <- restart$name
[10:30:58.290]                             if (is.null(name)) 
[10:30:58.290]                               next
[10:30:58.290]                             if (!grepl(pattern, name)) 
[10:30:58.290]                               next
[10:30:58.290]                             invokeRestart(restart)
[10:30:58.290]                             muffled <- TRUE
[10:30:58.290]                             break
[10:30:58.290]                           }
[10:30:58.290]                         }
[10:30:58.290]                       }
[10:30:58.290]                       invisible(muffled)
[10:30:58.290]                     }
[10:30:58.290]                     muffleCondition(cond, pattern = "^muffle")
[10:30:58.290]                   }
[10:30:58.290]                 }
[10:30:58.290]                 else {
[10:30:58.290]                   if (TRUE) {
[10:30:58.290]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:58.290]                     {
[10:30:58.290]                       inherits <- base::inherits
[10:30:58.290]                       invokeRestart <- base::invokeRestart
[10:30:58.290]                       is.null <- base::is.null
[10:30:58.290]                       muffled <- FALSE
[10:30:58.290]                       if (inherits(cond, "message")) {
[10:30:58.290]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:58.290]                         if (muffled) 
[10:30:58.290]                           invokeRestart("muffleMessage")
[10:30:58.290]                       }
[10:30:58.290]                       else if (inherits(cond, "warning")) {
[10:30:58.290]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:58.290]                         if (muffled) 
[10:30:58.290]                           invokeRestart("muffleWarning")
[10:30:58.290]                       }
[10:30:58.290]                       else if (inherits(cond, "condition")) {
[10:30:58.290]                         if (!is.null(pattern)) {
[10:30:58.290]                           computeRestarts <- base::computeRestarts
[10:30:58.290]                           grepl <- base::grepl
[10:30:58.290]                           restarts <- computeRestarts(cond)
[10:30:58.290]                           for (restart in restarts) {
[10:30:58.290]                             name <- restart$name
[10:30:58.290]                             if (is.null(name)) 
[10:30:58.290]                               next
[10:30:58.290]                             if (!grepl(pattern, name)) 
[10:30:58.290]                               next
[10:30:58.290]                             invokeRestart(restart)
[10:30:58.290]                             muffled <- TRUE
[10:30:58.290]                             break
[10:30:58.290]                           }
[10:30:58.290]                         }
[10:30:58.290]                       }
[10:30:58.290]                       invisible(muffled)
[10:30:58.290]                     }
[10:30:58.290]                     muffleCondition(cond, pattern = "^muffle")
[10:30:58.290]                   }
[10:30:58.290]                 }
[10:30:58.290]             }
[10:30:58.290]         }))
[10:30:58.290]     }, error = function(ex) {
[10:30:58.290]         base::structure(base::list(value = NULL, visible = NULL, 
[10:30:58.290]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:58.290]                 ...future.rng), started = ...future.startTime, 
[10:30:58.290]             finished = Sys.time(), session_uuid = NA_character_, 
[10:30:58.290]             version = "1.8"), class = "FutureResult")
[10:30:58.290]     }, finally = {
[10:30:58.290]         if (!identical(...future.workdir, getwd())) 
[10:30:58.290]             setwd(...future.workdir)
[10:30:58.290]         {
[10:30:58.290]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:30:58.290]                 ...future.oldOptions$nwarnings <- NULL
[10:30:58.290]             }
[10:30:58.290]             base::options(...future.oldOptions)
[10:30:58.290]             if (.Platform$OS.type == "windows") {
[10:30:58.290]                 old_names <- names(...future.oldEnvVars)
[10:30:58.290]                 envs <- base::Sys.getenv()
[10:30:58.290]                 names <- names(envs)
[10:30:58.290]                 common <- intersect(names, old_names)
[10:30:58.290]                 added <- setdiff(names, old_names)
[10:30:58.290]                 removed <- setdiff(old_names, names)
[10:30:58.290]                 changed <- common[...future.oldEnvVars[common] != 
[10:30:58.290]                   envs[common]]
[10:30:58.290]                 NAMES <- toupper(changed)
[10:30:58.290]                 args <- list()
[10:30:58.290]                 for (kk in seq_along(NAMES)) {
[10:30:58.290]                   name <- changed[[kk]]
[10:30:58.290]                   NAME <- NAMES[[kk]]
[10:30:58.290]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:58.290]                     next
[10:30:58.290]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:58.290]                 }
[10:30:58.290]                 NAMES <- toupper(added)
[10:30:58.290]                 for (kk in seq_along(NAMES)) {
[10:30:58.290]                   name <- added[[kk]]
[10:30:58.290]                   NAME <- NAMES[[kk]]
[10:30:58.290]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:58.290]                     next
[10:30:58.290]                   args[[name]] <- ""
[10:30:58.290]                 }
[10:30:58.290]                 NAMES <- toupper(removed)
[10:30:58.290]                 for (kk in seq_along(NAMES)) {
[10:30:58.290]                   name <- removed[[kk]]
[10:30:58.290]                   NAME <- NAMES[[kk]]
[10:30:58.290]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:58.290]                     next
[10:30:58.290]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:58.290]                 }
[10:30:58.290]                 if (length(args) > 0) 
[10:30:58.290]                   base::do.call(base::Sys.setenv, args = args)
[10:30:58.290]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:30:58.290]             }
[10:30:58.290]             else {
[10:30:58.290]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:30:58.290]             }
[10:30:58.290]             {
[10:30:58.290]                 if (base::length(...future.futureOptionsAdded) > 
[10:30:58.290]                   0L) {
[10:30:58.290]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:30:58.290]                   base::names(opts) <- ...future.futureOptionsAdded
[10:30:58.290]                   base::options(opts)
[10:30:58.290]                 }
[10:30:58.290]                 {
[10:30:58.290]                   {
[10:30:58.290]                     base::options(mc.cores = ...future.mc.cores.old)
[10:30:58.290]                     NULL
[10:30:58.290]                   }
[10:30:58.290]                   options(future.plan = NULL)
[10:30:58.290]                   if (is.na(NA_character_)) 
[10:30:58.290]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:30:58.290]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:30:58.290]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:30:58.290]                     .init = FALSE)
[10:30:58.290]                 }
[10:30:58.290]             }
[10:30:58.290]         }
[10:30:58.290]     })
[10:30:58.290]     if (TRUE) {
[10:30:58.290]         base::sink(type = "output", split = FALSE)
[10:30:58.290]         if (TRUE) {
[10:30:58.290]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:30:58.290]         }
[10:30:58.290]         else {
[10:30:58.290]             ...future.result["stdout"] <- base::list(NULL)
[10:30:58.290]         }
[10:30:58.290]         base::close(...future.stdout)
[10:30:58.290]         ...future.stdout <- NULL
[10:30:58.290]     }
[10:30:58.290]     ...future.result$conditions <- ...future.conditions
[10:30:58.290]     ...future.result$finished <- base::Sys.time()
[10:30:58.290]     ...future.result
[10:30:58.290] }
[10:30:58.293] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[10:30:58.293] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[10:30:58.294] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[10:30:58.294] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[10:30:58.294] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[10:30:58.294] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[10:30:58.295] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[10:30:58.295] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[10:30:58.295] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[10:30:58.295] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[10:30:58.296] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[10:30:58.296] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[10:30:58.296] MultisessionFuture started
[10:30:58.296] - Launch lazy future ... done
[10:30:58.297] run() for ‘MultisessionFuture’ ... done
[10:30:58.297] Created future:
[10:30:58.297] MultisessionFuture:
[10:30:58.297] Label: ‘future_replicate-1’
[10:30:58.297] Expression:
[10:30:58.297] {
[10:30:58.297]     do.call(function(...) {
[10:30:58.297]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:58.297]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:58.297]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:58.297]             on.exit(options(oopts), add = TRUE)
[10:30:58.297]         }
[10:30:58.297]         {
[10:30:58.297]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:58.297]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:58.297]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:58.297]                   envir = globalenv(), inherits = FALSE)
[10:30:58.297]                 ...future.FUN(...future.X_jj, ...)
[10:30:58.297]             })
[10:30:58.297]         }
[10:30:58.297]     }, args = future.call.arguments)
[10:30:58.297] }
[10:30:58.297] Lazy evaluation: FALSE
[10:30:58.297] Asynchronous evaluation: TRUE
[10:30:58.297] Local evaluation: TRUE
[10:30:58.297] Environment: R_GlobalEnv
[10:30:58.297] Capture standard output: TRUE
[10:30:58.297] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:30:58.297] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:30:58.297] Packages: <none>
[10:30:58.297] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:30:58.297] Resolved: FALSE
[10:30:58.297] Value: <not collected>
[10:30:58.297] Conditions captured: <none>
[10:30:58.297] Early signaling: FALSE
[10:30:58.297] Owner process: 7cdcbd4b-6c47-ca9a-dc3f-e18236d134b8
[10:30:58.297] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:58.308] Chunk #1 of 2 ... DONE
[10:30:58.309] Chunk #2 of 2 ...
[10:30:58.309]  - Finding globals in 'X' for chunk #2 ...
[10:30:58.309] getGlobalsAndPackages() ...
[10:30:58.309] Searching for globals...
[10:30:58.309] 
[10:30:58.309] Searching for globals ... DONE
[10:30:58.310] - globals: [0] <none>
[10:30:58.310] getGlobalsAndPackages() ... DONE
[10:30:58.310]    + additional globals found: [n=0] 
[10:30:58.310]    + additional namespaces needed: [n=0] 
[10:30:58.310]  - Finding globals in 'X' for chunk #2 ... DONE
[10:30:58.310]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:30:58.310]  - seeds: [3] <seeds>
[10:30:58.310]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:58.310] getGlobalsAndPackages() ...
[10:30:58.311] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:58.311] Resolving globals: FALSE
[10:30:58.311] Tweak future expression to call with '...' arguments ...
[10:30:58.311] {
[10:30:58.311]     do.call(function(...) {
[10:30:58.311]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:58.311]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:58.311]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:58.311]             on.exit(options(oopts), add = TRUE)
[10:30:58.311]         }
[10:30:58.311]         {
[10:30:58.311]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:58.311]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:58.311]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:58.311]                   envir = globalenv(), inherits = FALSE)
[10:30:58.311]                 ...future.FUN(...future.X_jj, ...)
[10:30:58.311]             })
[10:30:58.311]         }
[10:30:58.311]     }, args = future.call.arguments)
[10:30:58.311] }
[10:30:58.311] Tweak future expression to call with '...' arguments ... DONE
[10:30:58.311] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:58.312] 
[10:30:58.312] getGlobalsAndPackages() ... DONE
[10:30:58.312] run() for ‘Future’ ...
[10:30:58.312] - state: ‘created’
[10:30:58.312] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:30:58.326] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:58.326] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:30:58.326]   - Field: ‘node’
[10:30:58.326]   - Field: ‘label’
[10:30:58.326]   - Field: ‘local’
[10:30:58.327]   - Field: ‘owner’
[10:30:58.327]   - Field: ‘envir’
[10:30:58.327]   - Field: ‘workers’
[10:30:58.327]   - Field: ‘packages’
[10:30:58.327]   - Field: ‘gc’
[10:30:58.327]   - Field: ‘conditions’
[10:30:58.327]   - Field: ‘persistent’
[10:30:58.327]   - Field: ‘expr’
[10:30:58.327]   - Field: ‘uuid’
[10:30:58.327]   - Field: ‘seed’
[10:30:58.327]   - Field: ‘version’
[10:30:58.328]   - Field: ‘result’
[10:30:58.328]   - Field: ‘asynchronous’
[10:30:58.328]   - Field: ‘calls’
[10:30:58.328]   - Field: ‘globals’
[10:30:58.328]   - Field: ‘stdout’
[10:30:58.328]   - Field: ‘earlySignal’
[10:30:58.328]   - Field: ‘lazy’
[10:30:58.328]   - Field: ‘state’
[10:30:58.328] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:30:58.328] - Launch lazy future ...
[10:30:58.329] Packages needed by the future expression (n = 0): <none>
[10:30:58.329] Packages needed by future strategies (n = 0): <none>
[10:30:58.329] {
[10:30:58.329]     {
[10:30:58.329]         {
[10:30:58.329]             ...future.startTime <- base::Sys.time()
[10:30:58.329]             {
[10:30:58.329]                 {
[10:30:58.329]                   {
[10:30:58.329]                     {
[10:30:58.329]                       base::local({
[10:30:58.329]                         has_future <- base::requireNamespace("future", 
[10:30:58.329]                           quietly = TRUE)
[10:30:58.329]                         if (has_future) {
[10:30:58.329]                           ns <- base::getNamespace("future")
[10:30:58.329]                           version <- ns[[".package"]][["version"]]
[10:30:58.329]                           if (is.null(version)) 
[10:30:58.329]                             version <- utils::packageVersion("future")
[10:30:58.329]                         }
[10:30:58.329]                         else {
[10:30:58.329]                           version <- NULL
[10:30:58.329]                         }
[10:30:58.329]                         if (!has_future || version < "1.8.0") {
[10:30:58.329]                           info <- base::c(r_version = base::gsub("R version ", 
[10:30:58.329]                             "", base::R.version$version.string), 
[10:30:58.329]                             platform = base::sprintf("%s (%s-bit)", 
[10:30:58.329]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:30:58.329]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:30:58.329]                               "release", "version")], collapse = " "), 
[10:30:58.329]                             hostname = base::Sys.info()[["nodename"]])
[10:30:58.329]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:30:58.329]                             info)
[10:30:58.329]                           info <- base::paste(info, collapse = "; ")
[10:30:58.329]                           if (!has_future) {
[10:30:58.329]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:30:58.329]                               info)
[10:30:58.329]                           }
[10:30:58.329]                           else {
[10:30:58.329]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:30:58.329]                               info, version)
[10:30:58.329]                           }
[10:30:58.329]                           base::stop(msg)
[10:30:58.329]                         }
[10:30:58.329]                       })
[10:30:58.329]                     }
[10:30:58.329]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:30:58.329]                     base::options(mc.cores = 1L)
[10:30:58.329]                   }
[10:30:58.329]                   ...future.strategy.old <- future::plan("list")
[10:30:58.329]                   options(future.plan = NULL)
[10:30:58.329]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:30:58.329]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:30:58.329]                 }
[10:30:58.329]                 ...future.workdir <- getwd()
[10:30:58.329]             }
[10:30:58.329]             ...future.oldOptions <- base::as.list(base::.Options)
[10:30:58.329]             ...future.oldEnvVars <- base::Sys.getenv()
[10:30:58.329]         }
[10:30:58.329]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:30:58.329]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:30:58.329]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:30:58.329]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:30:58.329]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:30:58.329]             future.stdout.windows.reencode = NULL, width = 80L)
[10:30:58.329]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:30:58.329]             base::names(...future.oldOptions))
[10:30:58.329]     }
[10:30:58.329]     if (FALSE) {
[10:30:58.329]     }
[10:30:58.329]     else {
[10:30:58.329]         if (TRUE) {
[10:30:58.329]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:30:58.329]                 open = "w")
[10:30:58.329]         }
[10:30:58.329]         else {
[10:30:58.329]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:30:58.329]                 windows = "NUL", "/dev/null"), open = "w")
[10:30:58.329]         }
[10:30:58.329]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:30:58.329]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:30:58.329]             base::sink(type = "output", split = FALSE)
[10:30:58.329]             base::close(...future.stdout)
[10:30:58.329]         }, add = TRUE)
[10:30:58.329]     }
[10:30:58.329]     ...future.frame <- base::sys.nframe()
[10:30:58.329]     ...future.conditions <- base::list()
[10:30:58.329]     ...future.rng <- base::globalenv()$.Random.seed
[10:30:58.329]     if (FALSE) {
[10:30:58.329]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:30:58.329]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:30:58.329]     }
[10:30:58.329]     ...future.result <- base::tryCatch({
[10:30:58.329]         base::withCallingHandlers({
[10:30:58.329]             ...future.value <- base::withVisible(base::local({
[10:30:58.329]                 ...future.makeSendCondition <- base::local({
[10:30:58.329]                   sendCondition <- NULL
[10:30:58.329]                   function(frame = 1L) {
[10:30:58.329]                     if (is.function(sendCondition)) 
[10:30:58.329]                       return(sendCondition)
[10:30:58.329]                     ns <- getNamespace("parallel")
[10:30:58.329]                     if (exists("sendData", mode = "function", 
[10:30:58.329]                       envir = ns)) {
[10:30:58.329]                       parallel_sendData <- get("sendData", mode = "function", 
[10:30:58.329]                         envir = ns)
[10:30:58.329]                       envir <- sys.frame(frame)
[10:30:58.329]                       master <- NULL
[10:30:58.329]                       while (!identical(envir, .GlobalEnv) && 
[10:30:58.329]                         !identical(envir, emptyenv())) {
[10:30:58.329]                         if (exists("master", mode = "list", envir = envir, 
[10:30:58.329]                           inherits = FALSE)) {
[10:30:58.329]                           master <- get("master", mode = "list", 
[10:30:58.329]                             envir = envir, inherits = FALSE)
[10:30:58.329]                           if (inherits(master, c("SOCKnode", 
[10:30:58.329]                             "SOCK0node"))) {
[10:30:58.329]                             sendCondition <<- function(cond) {
[10:30:58.329]                               data <- list(type = "VALUE", value = cond, 
[10:30:58.329]                                 success = TRUE)
[10:30:58.329]                               parallel_sendData(master, data)
[10:30:58.329]                             }
[10:30:58.329]                             return(sendCondition)
[10:30:58.329]                           }
[10:30:58.329]                         }
[10:30:58.329]                         frame <- frame + 1L
[10:30:58.329]                         envir <- sys.frame(frame)
[10:30:58.329]                       }
[10:30:58.329]                     }
[10:30:58.329]                     sendCondition <<- function(cond) NULL
[10:30:58.329]                   }
[10:30:58.329]                 })
[10:30:58.329]                 withCallingHandlers({
[10:30:58.329]                   {
[10:30:58.329]                     do.call(function(...) {
[10:30:58.329]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:58.329]                       if (!identical(...future.globals.maxSize.org, 
[10:30:58.329]                         ...future.globals.maxSize)) {
[10:30:58.329]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:58.329]                         on.exit(options(oopts), add = TRUE)
[10:30:58.329]                       }
[10:30:58.329]                       {
[10:30:58.329]                         lapply(seq_along(...future.elements_ii), 
[10:30:58.329]                           FUN = function(jj) {
[10:30:58.329]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:58.329]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:58.329]                               envir = globalenv(), inherits = FALSE)
[10:30:58.329]                             ...future.FUN(...future.X_jj, ...)
[10:30:58.329]                           })
[10:30:58.329]                       }
[10:30:58.329]                     }, args = future.call.arguments)
[10:30:58.329]                   }
[10:30:58.329]                 }, immediateCondition = function(cond) {
[10:30:58.329]                   sendCondition <- ...future.makeSendCondition()
[10:30:58.329]                   sendCondition(cond)
[10:30:58.329]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:58.329]                   {
[10:30:58.329]                     inherits <- base::inherits
[10:30:58.329]                     invokeRestart <- base::invokeRestart
[10:30:58.329]                     is.null <- base::is.null
[10:30:58.329]                     muffled <- FALSE
[10:30:58.329]                     if (inherits(cond, "message")) {
[10:30:58.329]                       muffled <- grepl(pattern, "muffleMessage")
[10:30:58.329]                       if (muffled) 
[10:30:58.329]                         invokeRestart("muffleMessage")
[10:30:58.329]                     }
[10:30:58.329]                     else if (inherits(cond, "warning")) {
[10:30:58.329]                       muffled <- grepl(pattern, "muffleWarning")
[10:30:58.329]                       if (muffled) 
[10:30:58.329]                         invokeRestart("muffleWarning")
[10:30:58.329]                     }
[10:30:58.329]                     else if (inherits(cond, "condition")) {
[10:30:58.329]                       if (!is.null(pattern)) {
[10:30:58.329]                         computeRestarts <- base::computeRestarts
[10:30:58.329]                         grepl <- base::grepl
[10:30:58.329]                         restarts <- computeRestarts(cond)
[10:30:58.329]                         for (restart in restarts) {
[10:30:58.329]                           name <- restart$name
[10:30:58.329]                           if (is.null(name)) 
[10:30:58.329]                             next
[10:30:58.329]                           if (!grepl(pattern, name)) 
[10:30:58.329]                             next
[10:30:58.329]                           invokeRestart(restart)
[10:30:58.329]                           muffled <- TRUE
[10:30:58.329]                           break
[10:30:58.329]                         }
[10:30:58.329]                       }
[10:30:58.329]                     }
[10:30:58.329]                     invisible(muffled)
[10:30:58.329]                   }
[10:30:58.329]                   muffleCondition(cond)
[10:30:58.329]                 })
[10:30:58.329]             }))
[10:30:58.329]             future::FutureResult(value = ...future.value$value, 
[10:30:58.329]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:58.329]                   ...future.rng), globalenv = if (FALSE) 
[10:30:58.329]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:30:58.329]                     ...future.globalenv.names))
[10:30:58.329]                 else NULL, started = ...future.startTime, version = "1.8")
[10:30:58.329]         }, condition = base::local({
[10:30:58.329]             c <- base::c
[10:30:58.329]             inherits <- base::inherits
[10:30:58.329]             invokeRestart <- base::invokeRestart
[10:30:58.329]             length <- base::length
[10:30:58.329]             list <- base::list
[10:30:58.329]             seq.int <- base::seq.int
[10:30:58.329]             signalCondition <- base::signalCondition
[10:30:58.329]             sys.calls <- base::sys.calls
[10:30:58.329]             `[[` <- base::`[[`
[10:30:58.329]             `+` <- base::`+`
[10:30:58.329]             `<<-` <- base::`<<-`
[10:30:58.329]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:30:58.329]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:30:58.329]                   3L)]
[10:30:58.329]             }
[10:30:58.329]             function(cond) {
[10:30:58.329]                 is_error <- inherits(cond, "error")
[10:30:58.329]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:30:58.329]                   NULL)
[10:30:58.329]                 if (is_error) {
[10:30:58.329]                   sessionInformation <- function() {
[10:30:58.329]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:30:58.329]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:30:58.329]                       search = base::search(), system = base::Sys.info())
[10:30:58.329]                   }
[10:30:58.329]                   ...future.conditions[[length(...future.conditions) + 
[10:30:58.329]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:30:58.329]                     cond$call), session = sessionInformation(), 
[10:30:58.329]                     timestamp = base::Sys.time(), signaled = 0L)
[10:30:58.329]                   signalCondition(cond)
[10:30:58.329]                 }
[10:30:58.329]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:30:58.329]                 "immediateCondition"))) {
[10:30:58.329]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:30:58.329]                   ...future.conditions[[length(...future.conditions) + 
[10:30:58.329]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:30:58.329]                   if (TRUE && !signal) {
[10:30:58.329]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:58.329]                     {
[10:30:58.329]                       inherits <- base::inherits
[10:30:58.329]                       invokeRestart <- base::invokeRestart
[10:30:58.329]                       is.null <- base::is.null
[10:30:58.329]                       muffled <- FALSE
[10:30:58.329]                       if (inherits(cond, "message")) {
[10:30:58.329]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:58.329]                         if (muffled) 
[10:30:58.329]                           invokeRestart("muffleMessage")
[10:30:58.329]                       }
[10:30:58.329]                       else if (inherits(cond, "warning")) {
[10:30:58.329]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:58.329]                         if (muffled) 
[10:30:58.329]                           invokeRestart("muffleWarning")
[10:30:58.329]                       }
[10:30:58.329]                       else if (inherits(cond, "condition")) {
[10:30:58.329]                         if (!is.null(pattern)) {
[10:30:58.329]                           computeRestarts <- base::computeRestarts
[10:30:58.329]                           grepl <- base::grepl
[10:30:58.329]                           restarts <- computeRestarts(cond)
[10:30:58.329]                           for (restart in restarts) {
[10:30:58.329]                             name <- restart$name
[10:30:58.329]                             if (is.null(name)) 
[10:30:58.329]                               next
[10:30:58.329]                             if (!grepl(pattern, name)) 
[10:30:58.329]                               next
[10:30:58.329]                             invokeRestart(restart)
[10:30:58.329]                             muffled <- TRUE
[10:30:58.329]                             break
[10:30:58.329]                           }
[10:30:58.329]                         }
[10:30:58.329]                       }
[10:30:58.329]                       invisible(muffled)
[10:30:58.329]                     }
[10:30:58.329]                     muffleCondition(cond, pattern = "^muffle")
[10:30:58.329]                   }
[10:30:58.329]                 }
[10:30:58.329]                 else {
[10:30:58.329]                   if (TRUE) {
[10:30:58.329]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:58.329]                     {
[10:30:58.329]                       inherits <- base::inherits
[10:30:58.329]                       invokeRestart <- base::invokeRestart
[10:30:58.329]                       is.null <- base::is.null
[10:30:58.329]                       muffled <- FALSE
[10:30:58.329]                       if (inherits(cond, "message")) {
[10:30:58.329]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:58.329]                         if (muffled) 
[10:30:58.329]                           invokeRestart("muffleMessage")
[10:30:58.329]                       }
[10:30:58.329]                       else if (inherits(cond, "warning")) {
[10:30:58.329]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:58.329]                         if (muffled) 
[10:30:58.329]                           invokeRestart("muffleWarning")
[10:30:58.329]                       }
[10:30:58.329]                       else if (inherits(cond, "condition")) {
[10:30:58.329]                         if (!is.null(pattern)) {
[10:30:58.329]                           computeRestarts <- base::computeRestarts
[10:30:58.329]                           grepl <- base::grepl
[10:30:58.329]                           restarts <- computeRestarts(cond)
[10:30:58.329]                           for (restart in restarts) {
[10:30:58.329]                             name <- restart$name
[10:30:58.329]                             if (is.null(name)) 
[10:30:58.329]                               next
[10:30:58.329]                             if (!grepl(pattern, name)) 
[10:30:58.329]                               next
[10:30:58.329]                             invokeRestart(restart)
[10:30:58.329]                             muffled <- TRUE
[10:30:58.329]                             break
[10:30:58.329]                           }
[10:30:58.329]                         }
[10:30:58.329]                       }
[10:30:58.329]                       invisible(muffled)
[10:30:58.329]                     }
[10:30:58.329]                     muffleCondition(cond, pattern = "^muffle")
[10:30:58.329]                   }
[10:30:58.329]                 }
[10:30:58.329]             }
[10:30:58.329]         }))
[10:30:58.329]     }, error = function(ex) {
[10:30:58.329]         base::structure(base::list(value = NULL, visible = NULL, 
[10:30:58.329]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:58.329]                 ...future.rng), started = ...future.startTime, 
[10:30:58.329]             finished = Sys.time(), session_uuid = NA_character_, 
[10:30:58.329]             version = "1.8"), class = "FutureResult")
[10:30:58.329]     }, finally = {
[10:30:58.329]         if (!identical(...future.workdir, getwd())) 
[10:30:58.329]             setwd(...future.workdir)
[10:30:58.329]         {
[10:30:58.329]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:30:58.329]                 ...future.oldOptions$nwarnings <- NULL
[10:30:58.329]             }
[10:30:58.329]             base::options(...future.oldOptions)
[10:30:58.329]             if (.Platform$OS.type == "windows") {
[10:30:58.329]                 old_names <- names(...future.oldEnvVars)
[10:30:58.329]                 envs <- base::Sys.getenv()
[10:30:58.329]                 names <- names(envs)
[10:30:58.329]                 common <- intersect(names, old_names)
[10:30:58.329]                 added <- setdiff(names, old_names)
[10:30:58.329]                 removed <- setdiff(old_names, names)
[10:30:58.329]                 changed <- common[...future.oldEnvVars[common] != 
[10:30:58.329]                   envs[common]]
[10:30:58.329]                 NAMES <- toupper(changed)
[10:30:58.329]                 args <- list()
[10:30:58.329]                 for (kk in seq_along(NAMES)) {
[10:30:58.329]                   name <- changed[[kk]]
[10:30:58.329]                   NAME <- NAMES[[kk]]
[10:30:58.329]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:58.329]                     next
[10:30:58.329]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:58.329]                 }
[10:30:58.329]                 NAMES <- toupper(added)
[10:30:58.329]                 for (kk in seq_along(NAMES)) {
[10:30:58.329]                   name <- added[[kk]]
[10:30:58.329]                   NAME <- NAMES[[kk]]
[10:30:58.329]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:58.329]                     next
[10:30:58.329]                   args[[name]] <- ""
[10:30:58.329]                 }
[10:30:58.329]                 NAMES <- toupper(removed)
[10:30:58.329]                 for (kk in seq_along(NAMES)) {
[10:30:58.329]                   name <- removed[[kk]]
[10:30:58.329]                   NAME <- NAMES[[kk]]
[10:30:58.329]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:58.329]                     next
[10:30:58.329]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:58.329]                 }
[10:30:58.329]                 if (length(args) > 0) 
[10:30:58.329]                   base::do.call(base::Sys.setenv, args = args)
[10:30:58.329]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:30:58.329]             }
[10:30:58.329]             else {
[10:30:58.329]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:30:58.329]             }
[10:30:58.329]             {
[10:30:58.329]                 if (base::length(...future.futureOptionsAdded) > 
[10:30:58.329]                   0L) {
[10:30:58.329]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:30:58.329]                   base::names(opts) <- ...future.futureOptionsAdded
[10:30:58.329]                   base::options(opts)
[10:30:58.329]                 }
[10:30:58.329]                 {
[10:30:58.329]                   {
[10:30:58.329]                     base::options(mc.cores = ...future.mc.cores.old)
[10:30:58.329]                     NULL
[10:30:58.329]                   }
[10:30:58.329]                   options(future.plan = NULL)
[10:30:58.329]                   if (is.na(NA_character_)) 
[10:30:58.329]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:30:58.329]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:30:58.329]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:30:58.329]                     .init = FALSE)
[10:30:58.329]                 }
[10:30:58.329]             }
[10:30:58.329]         }
[10:30:58.329]     })
[10:30:58.329]     if (TRUE) {
[10:30:58.329]         base::sink(type = "output", split = FALSE)
[10:30:58.329]         if (TRUE) {
[10:30:58.329]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:30:58.329]         }
[10:30:58.329]         else {
[10:30:58.329]             ...future.result["stdout"] <- base::list(NULL)
[10:30:58.329]         }
[10:30:58.329]         base::close(...future.stdout)
[10:30:58.329]         ...future.stdout <- NULL
[10:30:58.329]     }
[10:30:58.329]     ...future.result$conditions <- ...future.conditions
[10:30:58.329]     ...future.result$finished <- base::Sys.time()
[10:30:58.329]     ...future.result
[10:30:58.329] }
[10:30:58.332] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[10:30:58.332] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[10:30:58.333] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[10:30:58.333] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[10:30:58.333] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[10:30:58.333] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[10:30:58.334] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[10:30:58.334] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[10:30:58.334] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[10:30:58.334] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[10:30:58.335] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[10:30:58.335] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[10:30:58.335] MultisessionFuture started
[10:30:58.336] - Launch lazy future ... done
[10:30:58.336] run() for ‘MultisessionFuture’ ... done
[10:30:58.336] Created future:
[10:30:58.336] MultisessionFuture:
[10:30:58.336] Label: ‘future_replicate-2’
[10:30:58.336] Expression:
[10:30:58.336] {
[10:30:58.336]     do.call(function(...) {
[10:30:58.336]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:58.336]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:58.336]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:58.336]             on.exit(options(oopts), add = TRUE)
[10:30:58.336]         }
[10:30:58.336]         {
[10:30:58.336]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:58.336]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:58.336]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:58.336]                   envir = globalenv(), inherits = FALSE)
[10:30:58.336]                 ...future.FUN(...future.X_jj, ...)
[10:30:58.336]             })
[10:30:58.336]         }
[10:30:58.336]     }, args = future.call.arguments)
[10:30:58.336] }
[10:30:58.336] Lazy evaluation: FALSE
[10:30:58.336] Asynchronous evaluation: TRUE
[10:30:58.336] Local evaluation: TRUE
[10:30:58.336] Environment: R_GlobalEnv
[10:30:58.336] Capture standard output: TRUE
[10:30:58.336] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:30:58.336] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[10:30:58.336] Packages: <none>
[10:30:58.336] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:30:58.336] Resolved: FALSE
[10:30:58.336] Value: <not collected>
[10:30:58.336] Conditions captured: <none>
[10:30:58.336] Early signaling: FALSE
[10:30:58.336] Owner process: 7cdcbd4b-6c47-ca9a-dc3f-e18236d134b8
[10:30:58.336] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:58.348] Chunk #2 of 2 ... DONE
[10:30:58.348] Launching 2 futures (chunks) ... DONE
[10:30:58.348] Resolving 2 futures (chunks) ...
[10:30:58.348] resolve() on list ...
[10:30:58.348]  recursive: 0
[10:30:58.348]  length: 2
[10:30:58.348] 
[10:30:58.349] receiveMessageFromWorker() for ClusterFuture ...
[10:30:58.349] - Validating connection of MultisessionFuture
[10:30:58.349] - received message: FutureResult
[10:30:58.349] - Received FutureResult
[10:30:58.349] - Erased future from FutureRegistry
[10:30:58.349] result() for ClusterFuture ...
[10:30:58.350] - result already collected: FutureResult
[10:30:58.350] result() for ClusterFuture ... done
[10:30:58.350] receiveMessageFromWorker() for ClusterFuture ... done
[10:30:58.350] Future #1
[10:30:58.350] result() for ClusterFuture ...
[10:30:58.350] - result already collected: FutureResult
[10:30:58.350] result() for ClusterFuture ... done
[10:30:58.350] result() for ClusterFuture ...
[10:30:58.350] - result already collected: FutureResult
[10:30:58.350] result() for ClusterFuture ... done
[10:30:58.350] signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:30:58.351] - nx: 2
[10:30:58.351] - relay: TRUE
[10:30:58.351] - stdout: TRUE
[10:30:58.351] - signal: TRUE
[10:30:58.351] - resignal: FALSE
[10:30:58.351] - force: TRUE
[10:30:58.351] - relayed: [n=2] FALSE, FALSE
[10:30:58.351] - queued futures: [n=2] FALSE, FALSE
[10:30:58.351]  - until=1
[10:30:58.351]  - relaying element #1
[10:30:58.351] result() for ClusterFuture ...
[10:30:58.352] - result already collected: FutureResult
[10:30:58.352] result() for ClusterFuture ... done
[10:30:58.352] result() for ClusterFuture ...
[10:30:58.352] - result already collected: FutureResult
[10:30:58.352] result() for ClusterFuture ... done
[10:30:58.352] result() for ClusterFuture ...
[10:30:58.352] - result already collected: FutureResult
[10:30:58.352] result() for ClusterFuture ... done
[10:30:58.352] result() for ClusterFuture ...
[10:30:58.352] - result already collected: FutureResult
[10:30:58.352] result() for ClusterFuture ... done
[10:30:58.353] - relayed: [n=2] TRUE, FALSE
[10:30:58.353] - queued futures: [n=2] TRUE, FALSE
[10:30:58.353] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:30:58.353]  length: 1 (resolved future 1)
[10:30:58.378] receiveMessageFromWorker() for ClusterFuture ...
[10:30:58.379] - Validating connection of MultisessionFuture
[10:30:58.379] - received message: FutureResult
[10:30:58.379] - Received FutureResult
[10:30:58.379] - Erased future from FutureRegistry
[10:30:58.379] result() for ClusterFuture ...
[10:30:58.379] - result already collected: FutureResult
[10:30:58.379] result() for ClusterFuture ... done
[10:30:58.379] receiveMessageFromWorker() for ClusterFuture ... done
[10:30:58.379] Future #2
[10:30:58.380] result() for ClusterFuture ...
[10:30:58.380] - result already collected: FutureResult
[10:30:58.380] result() for ClusterFuture ... done
[10:30:58.380] result() for ClusterFuture ...
[10:30:58.380] - result already collected: FutureResult
[10:30:58.380] result() for ClusterFuture ... done
[10:30:58.380] signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:30:58.380] - nx: 2
[10:30:58.380] - relay: TRUE
[10:30:58.380] - stdout: TRUE
[10:30:58.380] - signal: TRUE
[10:30:58.381] - resignal: FALSE
[10:30:58.381] - force: TRUE
[10:30:58.381] - relayed: [n=2] TRUE, FALSE
[10:30:58.381] - queued futures: [n=2] TRUE, FALSE
[10:30:58.381]  - until=2
[10:30:58.381]  - relaying element #2
[10:30:58.381] result() for ClusterFuture ...
[10:30:58.381] - result already collected: FutureResult
[10:30:58.381] result() for ClusterFuture ... done
[10:30:58.381] result() for ClusterFuture ...
[10:30:58.381] - result already collected: FutureResult
[10:30:58.382] result() for ClusterFuture ... done
[10:30:58.382] result() for ClusterFuture ...
[10:30:58.382] - result already collected: FutureResult
[10:30:58.384] result() for ClusterFuture ... done
[10:30:58.384] result() for ClusterFuture ...
[10:30:58.384] - result already collected: FutureResult
[10:30:58.384] result() for ClusterFuture ... done
[10:30:58.384] - relayed: [n=2] TRUE, TRUE
[10:30:58.384] - queued futures: [n=2] TRUE, TRUE
[10:30:58.384] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:30:58.385]  length: 0 (resolved future 2)
[10:30:58.385] Relaying remaining futures
[10:30:58.385] signalConditionsASAP(NULL, pos=0) ...
[10:30:58.385] - nx: 2
[10:30:58.385] - relay: TRUE
[10:30:58.385] - stdout: TRUE
[10:30:58.385] - signal: TRUE
[10:30:58.385] - resignal: FALSE
[10:30:58.385] - force: TRUE
[10:30:58.385] - relayed: [n=2] TRUE, TRUE
[10:30:58.385] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:30:58.386] - relayed: [n=2] TRUE, TRUE
[10:30:58.386] - queued futures: [n=2] TRUE, TRUE
[10:30:58.386] signalConditionsASAP(NULL, pos=0) ... done
[10:30:58.386] resolve() on list ... DONE
[10:30:58.386] result() for ClusterFuture ...
[10:30:58.386] - result already collected: FutureResult
[10:30:58.386] result() for ClusterFuture ... done
[10:30:58.386] result() for ClusterFuture ...
[10:30:58.386] - result already collected: FutureResult
[10:30:58.386] result() for ClusterFuture ... done
[10:30:58.386] result() for ClusterFuture ...
[10:30:58.387] - result already collected: FutureResult
[10:30:58.387] result() for ClusterFuture ... done
[10:30:58.387] result() for ClusterFuture ...
[10:30:58.387] - result already collected: FutureResult
[10:30:58.387] result() for ClusterFuture ... done
[10:30:58.387]  - Number of value chunks collected: 2
[10:30:58.387] Resolving 2 futures (chunks) ... DONE
[10:30:58.387] Reducing values from 2 chunks ...
[10:30:58.387]  - Number of values collected after concatenation: 5
[10:30:58.387]  - Number of values expected: 5
[10:30:58.387] Reducing values from 2 chunks ... DONE
[10:30:58.388] future_lapply() ... DONE
- example(replicate) ...
[10:30:58.388] future_lapply() ...
[10:30:58.388] Generating random seeds ...
[10:30:58.388] Generating random seed streams for 5 elements ...
[10:30:58.389] Generating random seed streams for 5 elements ... DONE
[10:30:58.389] Generating random seeds ... DONE
[10:30:58.389] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[10:30:58.393] Number of chunks: 2
[10:30:58.393] getGlobalsAndPackagesXApply() ...
[10:30:58.393]  - future.globals: TRUE
[10:30:58.393] getGlobalsAndPackages() ...
[10:30:58.394] Searching for globals...
[10:30:58.395] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[10:30:58.395] Searching for globals ... DONE
[10:30:58.395] Resolving globals: FALSE
[10:30:58.396] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[10:30:58.396] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[10:30:58.396] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[10:30:58.397] 
[10:30:58.397] getGlobalsAndPackages() ... DONE
[10:30:58.397]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[10:30:58.397]  - needed namespaces: [n=0] 
[10:30:58.397] Finding globals ... DONE
[10:30:58.397]  - use_args: TRUE
[10:30:58.397]  - Getting '...' globals ...
[10:30:58.397] resolve() on list ...
[10:30:58.398]  recursive: 0
[10:30:58.398]  length: 1
[10:30:58.398]  elements: ‘...’
[10:30:58.398]  length: 0 (resolved future 1)
[10:30:58.398] resolve() on list ... DONE
[10:30:58.398]    - '...' content: [n=0] 
[10:30:58.398] List of 1
[10:30:58.398]  $ ...: list()
[10:30:58.398]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:58.398]  - attr(*, "where")=List of 1
[10:30:58.398]   ..$ ...:<environment: 0x55aba3421fb8> 
[10:30:58.398]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:58.398]  - attr(*, "resolved")= logi TRUE
[10:30:58.398]  - attr(*, "total_size")= num NA
[10:30:58.401]  - Getting '...' globals ... DONE
[10:30:58.401] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[10:30:58.401] List of 4
[10:30:58.401]  $ ...future.FUN:function (...)  
[10:30:58.401]  $ foo          :function (x = 1, y = 2)  
[10:30:58.401]  $ x            : num 3
[10:30:58.401]  $ ...          : list()
[10:30:58.401]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:30:58.401]  - attr(*, "where")=List of 4
[10:30:58.401]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[10:30:58.401]   ..$ foo          :<environment: R_EmptyEnv> 
[10:30:58.401]   ..$ x            :<environment: R_EmptyEnv> 
[10:30:58.401]   ..$ ...          :<environment: 0x55aba3421fb8> 
[10:30:58.401]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:30:58.401]  - attr(*, "resolved")= logi FALSE
[10:30:58.401]  - attr(*, "total_size")= num 2200
[10:30:58.404] Packages to be attached in all futures: [n=0] 
[10:30:58.404] getGlobalsAndPackagesXApply() ... DONE
[10:30:58.405] Number of futures (= number of chunks): 2
[10:30:58.405] Launching 2 futures (chunks) ...
[10:30:58.405] Chunk #1 of 2 ...
[10:30:58.405]  - Finding globals in 'X' for chunk #1 ...
[10:30:58.405] getGlobalsAndPackages() ...
[10:30:58.405] Searching for globals...
[10:30:58.406] 
[10:30:58.406] Searching for globals ... DONE
[10:30:58.406] - globals: [0] <none>
[10:30:58.406] getGlobalsAndPackages() ... DONE
[10:30:58.406]    + additional globals found: [n=0] 
[10:30:58.406]    + additional namespaces needed: [n=0] 
[10:30:58.406]  - Finding globals in 'X' for chunk #1 ... DONE
[10:30:58.406]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:30:58.406]  - seeds: [2] <seeds>
[10:30:58.406]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:58.406] getGlobalsAndPackages() ...
[10:30:58.407] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:58.407] Resolving globals: FALSE
[10:30:58.407] Tweak future expression to call with '...' arguments ...
[10:30:58.407] {
[10:30:58.407]     do.call(function(...) {
[10:30:58.407]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:58.407]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:58.407]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:58.407]             on.exit(options(oopts), add = TRUE)
[10:30:58.407]         }
[10:30:58.407]         {
[10:30:58.407]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:58.407]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:58.407]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:58.407]                   envir = globalenv(), inherits = FALSE)
[10:30:58.407]                 ...future.FUN(...future.X_jj, ...)
[10:30:58.407]             })
[10:30:58.407]         }
[10:30:58.407]     }, args = future.call.arguments)
[10:30:58.407] }
[10:30:58.407] Tweak future expression to call with '...' arguments ... DONE
[10:30:58.408] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:58.408] 
[10:30:58.408] getGlobalsAndPackages() ... DONE
[10:30:58.408] run() for ‘Future’ ...
[10:30:58.408] - state: ‘created’
[10:30:58.408] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:30:58.424] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:58.424] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:30:58.425]   - Field: ‘node’
[10:30:58.425]   - Field: ‘label’
[10:30:58.425]   - Field: ‘local’
[10:30:58.425]   - Field: ‘owner’
[10:30:58.425]   - Field: ‘envir’
[10:30:58.425]   - Field: ‘workers’
[10:30:58.425]   - Field: ‘packages’
[10:30:58.425]   - Field: ‘gc’
[10:30:58.425]   - Field: ‘conditions’
[10:30:58.425]   - Field: ‘persistent’
[10:30:58.426]   - Field: ‘expr’
[10:30:58.426]   - Field: ‘uuid’
[10:30:58.426]   - Field: ‘seed’
[10:30:58.426]   - Field: ‘version’
[10:30:58.426]   - Field: ‘result’
[10:30:58.426]   - Field: ‘asynchronous’
[10:30:58.426]   - Field: ‘calls’
[10:30:58.426]   - Field: ‘globals’
[10:30:58.426]   - Field: ‘stdout’
[10:30:58.426]   - Field: ‘earlySignal’
[10:30:58.426]   - Field: ‘lazy’
[10:30:58.427]   - Field: ‘state’
[10:30:58.427] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:30:58.427] - Launch lazy future ...
[10:30:58.427] Packages needed by the future expression (n = 0): <none>
[10:30:58.427] Packages needed by future strategies (n = 0): <none>
[10:30:58.428] {
[10:30:58.428]     {
[10:30:58.428]         {
[10:30:58.428]             ...future.startTime <- base::Sys.time()
[10:30:58.428]             {
[10:30:58.428]                 {
[10:30:58.428]                   {
[10:30:58.428]                     {
[10:30:58.428]                       base::local({
[10:30:58.428]                         has_future <- base::requireNamespace("future", 
[10:30:58.428]                           quietly = TRUE)
[10:30:58.428]                         if (has_future) {
[10:30:58.428]                           ns <- base::getNamespace("future")
[10:30:58.428]                           version <- ns[[".package"]][["version"]]
[10:30:58.428]                           if (is.null(version)) 
[10:30:58.428]                             version <- utils::packageVersion("future")
[10:30:58.428]                         }
[10:30:58.428]                         else {
[10:30:58.428]                           version <- NULL
[10:30:58.428]                         }
[10:30:58.428]                         if (!has_future || version < "1.8.0") {
[10:30:58.428]                           info <- base::c(r_version = base::gsub("R version ", 
[10:30:58.428]                             "", base::R.version$version.string), 
[10:30:58.428]                             platform = base::sprintf("%s (%s-bit)", 
[10:30:58.428]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:30:58.428]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:30:58.428]                               "release", "version")], collapse = " "), 
[10:30:58.428]                             hostname = base::Sys.info()[["nodename"]])
[10:30:58.428]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:30:58.428]                             info)
[10:30:58.428]                           info <- base::paste(info, collapse = "; ")
[10:30:58.428]                           if (!has_future) {
[10:30:58.428]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:30:58.428]                               info)
[10:30:58.428]                           }
[10:30:58.428]                           else {
[10:30:58.428]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:30:58.428]                               info, version)
[10:30:58.428]                           }
[10:30:58.428]                           base::stop(msg)
[10:30:58.428]                         }
[10:30:58.428]                       })
[10:30:58.428]                     }
[10:30:58.428]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:30:58.428]                     base::options(mc.cores = 1L)
[10:30:58.428]                   }
[10:30:58.428]                   ...future.strategy.old <- future::plan("list")
[10:30:58.428]                   options(future.plan = NULL)
[10:30:58.428]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:30:58.428]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:30:58.428]                 }
[10:30:58.428]                 ...future.workdir <- getwd()
[10:30:58.428]             }
[10:30:58.428]             ...future.oldOptions <- base::as.list(base::.Options)
[10:30:58.428]             ...future.oldEnvVars <- base::Sys.getenv()
[10:30:58.428]         }
[10:30:58.428]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:30:58.428]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:30:58.428]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:30:58.428]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:30:58.428]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:30:58.428]             future.stdout.windows.reencode = NULL, width = 80L)
[10:30:58.428]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:30:58.428]             base::names(...future.oldOptions))
[10:30:58.428]     }
[10:30:58.428]     if (FALSE) {
[10:30:58.428]     }
[10:30:58.428]     else {
[10:30:58.428]         if (TRUE) {
[10:30:58.428]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:30:58.428]                 open = "w")
[10:30:58.428]         }
[10:30:58.428]         else {
[10:30:58.428]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:30:58.428]                 windows = "NUL", "/dev/null"), open = "w")
[10:30:58.428]         }
[10:30:58.428]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:30:58.428]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:30:58.428]             base::sink(type = "output", split = FALSE)
[10:30:58.428]             base::close(...future.stdout)
[10:30:58.428]         }, add = TRUE)
[10:30:58.428]     }
[10:30:58.428]     ...future.frame <- base::sys.nframe()
[10:30:58.428]     ...future.conditions <- base::list()
[10:30:58.428]     ...future.rng <- base::globalenv()$.Random.seed
[10:30:58.428]     if (FALSE) {
[10:30:58.428]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:30:58.428]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:30:58.428]     }
[10:30:58.428]     ...future.result <- base::tryCatch({
[10:30:58.428]         base::withCallingHandlers({
[10:30:58.428]             ...future.value <- base::withVisible(base::local({
[10:30:58.428]                 ...future.makeSendCondition <- base::local({
[10:30:58.428]                   sendCondition <- NULL
[10:30:58.428]                   function(frame = 1L) {
[10:30:58.428]                     if (is.function(sendCondition)) 
[10:30:58.428]                       return(sendCondition)
[10:30:58.428]                     ns <- getNamespace("parallel")
[10:30:58.428]                     if (exists("sendData", mode = "function", 
[10:30:58.428]                       envir = ns)) {
[10:30:58.428]                       parallel_sendData <- get("sendData", mode = "function", 
[10:30:58.428]                         envir = ns)
[10:30:58.428]                       envir <- sys.frame(frame)
[10:30:58.428]                       master <- NULL
[10:30:58.428]                       while (!identical(envir, .GlobalEnv) && 
[10:30:58.428]                         !identical(envir, emptyenv())) {
[10:30:58.428]                         if (exists("master", mode = "list", envir = envir, 
[10:30:58.428]                           inherits = FALSE)) {
[10:30:58.428]                           master <- get("master", mode = "list", 
[10:30:58.428]                             envir = envir, inherits = FALSE)
[10:30:58.428]                           if (inherits(master, c("SOCKnode", 
[10:30:58.428]                             "SOCK0node"))) {
[10:30:58.428]                             sendCondition <<- function(cond) {
[10:30:58.428]                               data <- list(type = "VALUE", value = cond, 
[10:30:58.428]                                 success = TRUE)
[10:30:58.428]                               parallel_sendData(master, data)
[10:30:58.428]                             }
[10:30:58.428]                             return(sendCondition)
[10:30:58.428]                           }
[10:30:58.428]                         }
[10:30:58.428]                         frame <- frame + 1L
[10:30:58.428]                         envir <- sys.frame(frame)
[10:30:58.428]                       }
[10:30:58.428]                     }
[10:30:58.428]                     sendCondition <<- function(cond) NULL
[10:30:58.428]                   }
[10:30:58.428]                 })
[10:30:58.428]                 withCallingHandlers({
[10:30:58.428]                   {
[10:30:58.428]                     do.call(function(...) {
[10:30:58.428]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:58.428]                       if (!identical(...future.globals.maxSize.org, 
[10:30:58.428]                         ...future.globals.maxSize)) {
[10:30:58.428]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:58.428]                         on.exit(options(oopts), add = TRUE)
[10:30:58.428]                       }
[10:30:58.428]                       {
[10:30:58.428]                         lapply(seq_along(...future.elements_ii), 
[10:30:58.428]                           FUN = function(jj) {
[10:30:58.428]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:58.428]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:58.428]                               envir = globalenv(), inherits = FALSE)
[10:30:58.428]                             ...future.FUN(...future.X_jj, ...)
[10:30:58.428]                           })
[10:30:58.428]                       }
[10:30:58.428]                     }, args = future.call.arguments)
[10:30:58.428]                   }
[10:30:58.428]                 }, immediateCondition = function(cond) {
[10:30:58.428]                   sendCondition <- ...future.makeSendCondition()
[10:30:58.428]                   sendCondition(cond)
[10:30:58.428]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:58.428]                   {
[10:30:58.428]                     inherits <- base::inherits
[10:30:58.428]                     invokeRestart <- base::invokeRestart
[10:30:58.428]                     is.null <- base::is.null
[10:30:58.428]                     muffled <- FALSE
[10:30:58.428]                     if (inherits(cond, "message")) {
[10:30:58.428]                       muffled <- grepl(pattern, "muffleMessage")
[10:30:58.428]                       if (muffled) 
[10:30:58.428]                         invokeRestart("muffleMessage")
[10:30:58.428]                     }
[10:30:58.428]                     else if (inherits(cond, "warning")) {
[10:30:58.428]                       muffled <- grepl(pattern, "muffleWarning")
[10:30:58.428]                       if (muffled) 
[10:30:58.428]                         invokeRestart("muffleWarning")
[10:30:58.428]                     }
[10:30:58.428]                     else if (inherits(cond, "condition")) {
[10:30:58.428]                       if (!is.null(pattern)) {
[10:30:58.428]                         computeRestarts <- base::computeRestarts
[10:30:58.428]                         grepl <- base::grepl
[10:30:58.428]                         restarts <- computeRestarts(cond)
[10:30:58.428]                         for (restart in restarts) {
[10:30:58.428]                           name <- restart$name
[10:30:58.428]                           if (is.null(name)) 
[10:30:58.428]                             next
[10:30:58.428]                           if (!grepl(pattern, name)) 
[10:30:58.428]                             next
[10:30:58.428]                           invokeRestart(restart)
[10:30:58.428]                           muffled <- TRUE
[10:30:58.428]                           break
[10:30:58.428]                         }
[10:30:58.428]                       }
[10:30:58.428]                     }
[10:30:58.428]                     invisible(muffled)
[10:30:58.428]                   }
[10:30:58.428]                   muffleCondition(cond)
[10:30:58.428]                 })
[10:30:58.428]             }))
[10:30:58.428]             future::FutureResult(value = ...future.value$value, 
[10:30:58.428]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:58.428]                   ...future.rng), globalenv = if (FALSE) 
[10:30:58.428]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:30:58.428]                     ...future.globalenv.names))
[10:30:58.428]                 else NULL, started = ...future.startTime, version = "1.8")
[10:30:58.428]         }, condition = base::local({
[10:30:58.428]             c <- base::c
[10:30:58.428]             inherits <- base::inherits
[10:30:58.428]             invokeRestart <- base::invokeRestart
[10:30:58.428]             length <- base::length
[10:30:58.428]             list <- base::list
[10:30:58.428]             seq.int <- base::seq.int
[10:30:58.428]             signalCondition <- base::signalCondition
[10:30:58.428]             sys.calls <- base::sys.calls
[10:30:58.428]             `[[` <- base::`[[`
[10:30:58.428]             `+` <- base::`+`
[10:30:58.428]             `<<-` <- base::`<<-`
[10:30:58.428]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:30:58.428]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:30:58.428]                   3L)]
[10:30:58.428]             }
[10:30:58.428]             function(cond) {
[10:30:58.428]                 is_error <- inherits(cond, "error")
[10:30:58.428]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:30:58.428]                   NULL)
[10:30:58.428]                 if (is_error) {
[10:30:58.428]                   sessionInformation <- function() {
[10:30:58.428]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:30:58.428]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:30:58.428]                       search = base::search(), system = base::Sys.info())
[10:30:58.428]                   }
[10:30:58.428]                   ...future.conditions[[length(...future.conditions) + 
[10:30:58.428]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:30:58.428]                     cond$call), session = sessionInformation(), 
[10:30:58.428]                     timestamp = base::Sys.time(), signaled = 0L)
[10:30:58.428]                   signalCondition(cond)
[10:30:58.428]                 }
[10:30:58.428]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:30:58.428]                 "immediateCondition"))) {
[10:30:58.428]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:30:58.428]                   ...future.conditions[[length(...future.conditions) + 
[10:30:58.428]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:30:58.428]                   if (TRUE && !signal) {
[10:30:58.428]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:58.428]                     {
[10:30:58.428]                       inherits <- base::inherits
[10:30:58.428]                       invokeRestart <- base::invokeRestart
[10:30:58.428]                       is.null <- base::is.null
[10:30:58.428]                       muffled <- FALSE
[10:30:58.428]                       if (inherits(cond, "message")) {
[10:30:58.428]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:58.428]                         if (muffled) 
[10:30:58.428]                           invokeRestart("muffleMessage")
[10:30:58.428]                       }
[10:30:58.428]                       else if (inherits(cond, "warning")) {
[10:30:58.428]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:58.428]                         if (muffled) 
[10:30:58.428]                           invokeRestart("muffleWarning")
[10:30:58.428]                       }
[10:30:58.428]                       else if (inherits(cond, "condition")) {
[10:30:58.428]                         if (!is.null(pattern)) {
[10:30:58.428]                           computeRestarts <- base::computeRestarts
[10:30:58.428]                           grepl <- base::grepl
[10:30:58.428]                           restarts <- computeRestarts(cond)
[10:30:58.428]                           for (restart in restarts) {
[10:30:58.428]                             name <- restart$name
[10:30:58.428]                             if (is.null(name)) 
[10:30:58.428]                               next
[10:30:58.428]                             if (!grepl(pattern, name)) 
[10:30:58.428]                               next
[10:30:58.428]                             invokeRestart(restart)
[10:30:58.428]                             muffled <- TRUE
[10:30:58.428]                             break
[10:30:58.428]                           }
[10:30:58.428]                         }
[10:30:58.428]                       }
[10:30:58.428]                       invisible(muffled)
[10:30:58.428]                     }
[10:30:58.428]                     muffleCondition(cond, pattern = "^muffle")
[10:30:58.428]                   }
[10:30:58.428]                 }
[10:30:58.428]                 else {
[10:30:58.428]                   if (TRUE) {
[10:30:58.428]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:58.428]                     {
[10:30:58.428]                       inherits <- base::inherits
[10:30:58.428]                       invokeRestart <- base::invokeRestart
[10:30:58.428]                       is.null <- base::is.null
[10:30:58.428]                       muffled <- FALSE
[10:30:58.428]                       if (inherits(cond, "message")) {
[10:30:58.428]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:58.428]                         if (muffled) 
[10:30:58.428]                           invokeRestart("muffleMessage")
[10:30:58.428]                       }
[10:30:58.428]                       else if (inherits(cond, "warning")) {
[10:30:58.428]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:58.428]                         if (muffled) 
[10:30:58.428]                           invokeRestart("muffleWarning")
[10:30:58.428]                       }
[10:30:58.428]                       else if (inherits(cond, "condition")) {
[10:30:58.428]                         if (!is.null(pattern)) {
[10:30:58.428]                           computeRestarts <- base::computeRestarts
[10:30:58.428]                           grepl <- base::grepl
[10:30:58.428]                           restarts <- computeRestarts(cond)
[10:30:58.428]                           for (restart in restarts) {
[10:30:58.428]                             name <- restart$name
[10:30:58.428]                             if (is.null(name)) 
[10:30:58.428]                               next
[10:30:58.428]                             if (!grepl(pattern, name)) 
[10:30:58.428]                               next
[10:30:58.428]                             invokeRestart(restart)
[10:30:58.428]                             muffled <- TRUE
[10:30:58.428]                             break
[10:30:58.428]                           }
[10:30:58.428]                         }
[10:30:58.428]                       }
[10:30:58.428]                       invisible(muffled)
[10:30:58.428]                     }
[10:30:58.428]                     muffleCondition(cond, pattern = "^muffle")
[10:30:58.428]                   }
[10:30:58.428]                 }
[10:30:58.428]             }
[10:30:58.428]         }))
[10:30:58.428]     }, error = function(ex) {
[10:30:58.428]         base::structure(base::list(value = NULL, visible = NULL, 
[10:30:58.428]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:58.428]                 ...future.rng), started = ...future.startTime, 
[10:30:58.428]             finished = Sys.time(), session_uuid = NA_character_, 
[10:30:58.428]             version = "1.8"), class = "FutureResult")
[10:30:58.428]     }, finally = {
[10:30:58.428]         if (!identical(...future.workdir, getwd())) 
[10:30:58.428]             setwd(...future.workdir)
[10:30:58.428]         {
[10:30:58.428]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:30:58.428]                 ...future.oldOptions$nwarnings <- NULL
[10:30:58.428]             }
[10:30:58.428]             base::options(...future.oldOptions)
[10:30:58.428]             if (.Platform$OS.type == "windows") {
[10:30:58.428]                 old_names <- names(...future.oldEnvVars)
[10:30:58.428]                 envs <- base::Sys.getenv()
[10:30:58.428]                 names <- names(envs)
[10:30:58.428]                 common <- intersect(names, old_names)
[10:30:58.428]                 added <- setdiff(names, old_names)
[10:30:58.428]                 removed <- setdiff(old_names, names)
[10:30:58.428]                 changed <- common[...future.oldEnvVars[common] != 
[10:30:58.428]                   envs[common]]
[10:30:58.428]                 NAMES <- toupper(changed)
[10:30:58.428]                 args <- list()
[10:30:58.428]                 for (kk in seq_along(NAMES)) {
[10:30:58.428]                   name <- changed[[kk]]
[10:30:58.428]                   NAME <- NAMES[[kk]]
[10:30:58.428]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:58.428]                     next
[10:30:58.428]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:58.428]                 }
[10:30:58.428]                 NAMES <- toupper(added)
[10:30:58.428]                 for (kk in seq_along(NAMES)) {
[10:30:58.428]                   name <- added[[kk]]
[10:30:58.428]                   NAME <- NAMES[[kk]]
[10:30:58.428]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:58.428]                     next
[10:30:58.428]                   args[[name]] <- ""
[10:30:58.428]                 }
[10:30:58.428]                 NAMES <- toupper(removed)
[10:30:58.428]                 for (kk in seq_along(NAMES)) {
[10:30:58.428]                   name <- removed[[kk]]
[10:30:58.428]                   NAME <- NAMES[[kk]]
[10:30:58.428]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:58.428]                     next
[10:30:58.428]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:58.428]                 }
[10:30:58.428]                 if (length(args) > 0) 
[10:30:58.428]                   base::do.call(base::Sys.setenv, args = args)
[10:30:58.428]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:30:58.428]             }
[10:30:58.428]             else {
[10:30:58.428]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:30:58.428]             }
[10:30:58.428]             {
[10:30:58.428]                 if (base::length(...future.futureOptionsAdded) > 
[10:30:58.428]                   0L) {
[10:30:58.428]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:30:58.428]                   base::names(opts) <- ...future.futureOptionsAdded
[10:30:58.428]                   base::options(opts)
[10:30:58.428]                 }
[10:30:58.428]                 {
[10:30:58.428]                   {
[10:30:58.428]                     base::options(mc.cores = ...future.mc.cores.old)
[10:30:58.428]                     NULL
[10:30:58.428]                   }
[10:30:58.428]                   options(future.plan = NULL)
[10:30:58.428]                   if (is.na(NA_character_)) 
[10:30:58.428]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:30:58.428]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:30:58.428]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:30:58.428]                     .init = FALSE)
[10:30:58.428]                 }
[10:30:58.428]             }
[10:30:58.428]         }
[10:30:58.428]     })
[10:30:58.428]     if (TRUE) {
[10:30:58.428]         base::sink(type = "output", split = FALSE)
[10:30:58.428]         if (TRUE) {
[10:30:58.428]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:30:58.428]         }
[10:30:58.428]         else {
[10:30:58.428]             ...future.result["stdout"] <- base::list(NULL)
[10:30:58.428]         }
[10:30:58.428]         base::close(...future.stdout)
[10:30:58.428]         ...future.stdout <- NULL
[10:30:58.428]     }
[10:30:58.428]     ...future.result$conditions <- ...future.conditions
[10:30:58.428]     ...future.result$finished <- base::Sys.time()
[10:30:58.428]     ...future.result
[10:30:58.428] }
[10:30:58.430] Exporting 7 global objects (2.15 KiB) to cluster node #1 ...
[10:30:58.431] Exporting ‘...future.FUN’ (504 bytes) to cluster node #1 ...
[10:30:58.431] Exporting ‘...future.FUN’ (504 bytes) to cluster node #1 ... DONE
[10:30:58.431] Exporting ‘foo’ (1.60 KiB) to cluster node #1 ...
[10:30:58.431] Exporting ‘foo’ (1.60 KiB) to cluster node #1 ... DONE
[10:30:58.432] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[10:30:58.432] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[10:30:58.432] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[10:30:58.432] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[10:30:58.432] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[10:30:58.433] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[10:30:58.433] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[10:30:58.433] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[10:30:58.433] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[10:30:58.434] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[10:30:58.434] Exporting 7 global objects (2.15 KiB) to cluster node #1 ... DONE
[10:30:58.434] MultisessionFuture started
[10:30:58.434] - Launch lazy future ... done
[10:30:58.434] run() for ‘MultisessionFuture’ ... done
[10:30:58.435] Created future:
[10:30:58.435] MultisessionFuture:
[10:30:58.435] Label: ‘future_replicate-1’
[10:30:58.435] Expression:
[10:30:58.435] {
[10:30:58.435]     do.call(function(...) {
[10:30:58.435]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:58.435]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:58.435]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:58.435]             on.exit(options(oopts), add = TRUE)
[10:30:58.435]         }
[10:30:58.435]         {
[10:30:58.435]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:58.435]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:58.435]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:58.435]                   envir = globalenv(), inherits = FALSE)
[10:30:58.435]                 ...future.FUN(...future.X_jj, ...)
[10:30:58.435]             })
[10:30:58.435]         }
[10:30:58.435]     }, args = future.call.arguments)
[10:30:58.435] }
[10:30:58.435] Lazy evaluation: FALSE
[10:30:58.435] Asynchronous evaluation: TRUE
[10:30:58.435] Local evaluation: TRUE
[10:30:58.435] Environment: 0x55aba34245d8
[10:30:58.435] Capture standard output: TRUE
[10:30:58.435] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:30:58.435] Globals: 7 objects totaling 2.41 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, ...)
[10:30:58.435] Packages: <none>
[10:30:58.435] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:30:58.435] Resolved: FALSE
[10:30:58.435] Value: <not collected>
[10:30:58.435] Conditions captured: <none>
[10:30:58.435] Early signaling: FALSE
[10:30:58.435] Owner process: 7cdcbd4b-6c47-ca9a-dc3f-e18236d134b8
[10:30:58.435] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:58.446] Chunk #1 of 2 ... DONE
[10:30:58.446] Chunk #2 of 2 ...
[10:30:58.447]  - Finding globals in 'X' for chunk #2 ...
[10:30:58.447] getGlobalsAndPackages() ...
[10:30:58.447] Searching for globals...
[10:30:58.447] 
[10:30:58.447] Searching for globals ... DONE
[10:30:58.447] - globals: [0] <none>
[10:30:58.447] getGlobalsAndPackages() ... DONE
[10:30:58.447]    + additional globals found: [n=0] 
[10:30:58.448]    + additional namespaces needed: [n=0] 
[10:30:58.448]  - Finding globals in 'X' for chunk #2 ... DONE
[10:30:58.448]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[10:30:58.448]  - seeds: [3] <seeds>
[10:30:58.448]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:58.448] getGlobalsAndPackages() ...
[10:30:58.448] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:58.448] Resolving globals: FALSE
[10:30:58.448] Tweak future expression to call with '...' arguments ...
[10:30:58.449] {
[10:30:58.449]     do.call(function(...) {
[10:30:58.449]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:58.449]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:58.449]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:58.449]             on.exit(options(oopts), add = TRUE)
[10:30:58.449]         }
[10:30:58.449]         {
[10:30:58.449]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:58.449]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:58.449]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:58.449]                   envir = globalenv(), inherits = FALSE)
[10:30:58.449]                 ...future.FUN(...future.X_jj, ...)
[10:30:58.449]             })
[10:30:58.449]         }
[10:30:58.449]     }, args = future.call.arguments)
[10:30:58.449] }
[10:30:58.449] Tweak future expression to call with '...' arguments ... DONE
[10:30:58.449] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[10:30:58.449] 
[10:30:58.449] getGlobalsAndPackages() ... DONE
[10:30:58.450] run() for ‘Future’ ...
[10:30:58.450] - state: ‘created’
[10:30:58.450] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:30:58.464] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:58.464] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:30:58.464]   - Field: ‘node’
[10:30:58.464]   - Field: ‘label’
[10:30:58.464]   - Field: ‘local’
[10:30:58.464]   - Field: ‘owner’
[10:30:58.464]   - Field: ‘envir’
[10:30:58.464]   - Field: ‘workers’
[10:30:58.465]   - Field: ‘packages’
[10:30:58.465]   - Field: ‘gc’
[10:30:58.465]   - Field: ‘conditions’
[10:30:58.465]   - Field: ‘persistent’
[10:30:58.465]   - Field: ‘expr’
[10:30:58.465]   - Field: ‘uuid’
[10:30:58.465]   - Field: ‘seed’
[10:30:58.465]   - Field: ‘version’
[10:30:58.465]   - Field: ‘result’
[10:30:58.465]   - Field: ‘asynchronous’
[10:30:58.466]   - Field: ‘calls’
[10:30:58.466]   - Field: ‘globals’
[10:30:58.466]   - Field: ‘stdout’
[10:30:58.466]   - Field: ‘earlySignal’
[10:30:58.466]   - Field: ‘lazy’
[10:30:58.466]   - Field: ‘state’
[10:30:58.466] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:30:58.466] - Launch lazy future ...
[10:30:58.466] Packages needed by the future expression (n = 0): <none>
[10:30:58.467] Packages needed by future strategies (n = 0): <none>
[10:30:58.467] {
[10:30:58.467]     {
[10:30:58.467]         {
[10:30:58.467]             ...future.startTime <- base::Sys.time()
[10:30:58.467]             {
[10:30:58.467]                 {
[10:30:58.467]                   {
[10:30:58.467]                     {
[10:30:58.467]                       base::local({
[10:30:58.467]                         has_future <- base::requireNamespace("future", 
[10:30:58.467]                           quietly = TRUE)
[10:30:58.467]                         if (has_future) {
[10:30:58.467]                           ns <- base::getNamespace("future")
[10:30:58.467]                           version <- ns[[".package"]][["version"]]
[10:30:58.467]                           if (is.null(version)) 
[10:30:58.467]                             version <- utils::packageVersion("future")
[10:30:58.467]                         }
[10:30:58.467]                         else {
[10:30:58.467]                           version <- NULL
[10:30:58.467]                         }
[10:30:58.467]                         if (!has_future || version < "1.8.0") {
[10:30:58.467]                           info <- base::c(r_version = base::gsub("R version ", 
[10:30:58.467]                             "", base::R.version$version.string), 
[10:30:58.467]                             platform = base::sprintf("%s (%s-bit)", 
[10:30:58.467]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:30:58.467]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:30:58.467]                               "release", "version")], collapse = " "), 
[10:30:58.467]                             hostname = base::Sys.info()[["nodename"]])
[10:30:58.467]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:30:58.467]                             info)
[10:30:58.467]                           info <- base::paste(info, collapse = "; ")
[10:30:58.467]                           if (!has_future) {
[10:30:58.467]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:30:58.467]                               info)
[10:30:58.467]                           }
[10:30:58.467]                           else {
[10:30:58.467]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:30:58.467]                               info, version)
[10:30:58.467]                           }
[10:30:58.467]                           base::stop(msg)
[10:30:58.467]                         }
[10:30:58.467]                       })
[10:30:58.467]                     }
[10:30:58.467]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:30:58.467]                     base::options(mc.cores = 1L)
[10:30:58.467]                   }
[10:30:58.467]                   ...future.strategy.old <- future::plan("list")
[10:30:58.467]                   options(future.plan = NULL)
[10:30:58.467]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:30:58.467]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:30:58.467]                 }
[10:30:58.467]                 ...future.workdir <- getwd()
[10:30:58.467]             }
[10:30:58.467]             ...future.oldOptions <- base::as.list(base::.Options)
[10:30:58.467]             ...future.oldEnvVars <- base::Sys.getenv()
[10:30:58.467]         }
[10:30:58.467]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:30:58.467]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[10:30:58.467]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:30:58.467]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:30:58.467]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:30:58.467]             future.stdout.windows.reencode = NULL, width = 80L)
[10:30:58.467]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:30:58.467]             base::names(...future.oldOptions))
[10:30:58.467]     }
[10:30:58.467]     if (FALSE) {
[10:30:58.467]     }
[10:30:58.467]     else {
[10:30:58.467]         if (TRUE) {
[10:30:58.467]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:30:58.467]                 open = "w")
[10:30:58.467]         }
[10:30:58.467]         else {
[10:30:58.467]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:30:58.467]                 windows = "NUL", "/dev/null"), open = "w")
[10:30:58.467]         }
[10:30:58.467]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:30:58.467]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:30:58.467]             base::sink(type = "output", split = FALSE)
[10:30:58.467]             base::close(...future.stdout)
[10:30:58.467]         }, add = TRUE)
[10:30:58.467]     }
[10:30:58.467]     ...future.frame <- base::sys.nframe()
[10:30:58.467]     ...future.conditions <- base::list()
[10:30:58.467]     ...future.rng <- base::globalenv()$.Random.seed
[10:30:58.467]     if (FALSE) {
[10:30:58.467]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:30:58.467]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:30:58.467]     }
[10:30:58.467]     ...future.result <- base::tryCatch({
[10:30:58.467]         base::withCallingHandlers({
[10:30:58.467]             ...future.value <- base::withVisible(base::local({
[10:30:58.467]                 ...future.makeSendCondition <- base::local({
[10:30:58.467]                   sendCondition <- NULL
[10:30:58.467]                   function(frame = 1L) {
[10:30:58.467]                     if (is.function(sendCondition)) 
[10:30:58.467]                       return(sendCondition)
[10:30:58.467]                     ns <- getNamespace("parallel")
[10:30:58.467]                     if (exists("sendData", mode = "function", 
[10:30:58.467]                       envir = ns)) {
[10:30:58.467]                       parallel_sendData <- get("sendData", mode = "function", 
[10:30:58.467]                         envir = ns)
[10:30:58.467]                       envir <- sys.frame(frame)
[10:30:58.467]                       master <- NULL
[10:30:58.467]                       while (!identical(envir, .GlobalEnv) && 
[10:30:58.467]                         !identical(envir, emptyenv())) {
[10:30:58.467]                         if (exists("master", mode = "list", envir = envir, 
[10:30:58.467]                           inherits = FALSE)) {
[10:30:58.467]                           master <- get("master", mode = "list", 
[10:30:58.467]                             envir = envir, inherits = FALSE)
[10:30:58.467]                           if (inherits(master, c("SOCKnode", 
[10:30:58.467]                             "SOCK0node"))) {
[10:30:58.467]                             sendCondition <<- function(cond) {
[10:30:58.467]                               data <- list(type = "VALUE", value = cond, 
[10:30:58.467]                                 success = TRUE)
[10:30:58.467]                               parallel_sendData(master, data)
[10:30:58.467]                             }
[10:30:58.467]                             return(sendCondition)
[10:30:58.467]                           }
[10:30:58.467]                         }
[10:30:58.467]                         frame <- frame + 1L
[10:30:58.467]                         envir <- sys.frame(frame)
[10:30:58.467]                       }
[10:30:58.467]                     }
[10:30:58.467]                     sendCondition <<- function(cond) NULL
[10:30:58.467]                   }
[10:30:58.467]                 })
[10:30:58.467]                 withCallingHandlers({
[10:30:58.467]                   {
[10:30:58.467]                     do.call(function(...) {
[10:30:58.467]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:58.467]                       if (!identical(...future.globals.maxSize.org, 
[10:30:58.467]                         ...future.globals.maxSize)) {
[10:30:58.467]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:58.467]                         on.exit(options(oopts), add = TRUE)
[10:30:58.467]                       }
[10:30:58.467]                       {
[10:30:58.467]                         lapply(seq_along(...future.elements_ii), 
[10:30:58.467]                           FUN = function(jj) {
[10:30:58.467]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:58.467]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:58.467]                               envir = globalenv(), inherits = FALSE)
[10:30:58.467]                             ...future.FUN(...future.X_jj, ...)
[10:30:58.467]                           })
[10:30:58.467]                       }
[10:30:58.467]                     }, args = future.call.arguments)
[10:30:58.467]                   }
[10:30:58.467]                 }, immediateCondition = function(cond) {
[10:30:58.467]                   sendCondition <- ...future.makeSendCondition()
[10:30:58.467]                   sendCondition(cond)
[10:30:58.467]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:58.467]                   {
[10:30:58.467]                     inherits <- base::inherits
[10:30:58.467]                     invokeRestart <- base::invokeRestart
[10:30:58.467]                     is.null <- base::is.null
[10:30:58.467]                     muffled <- FALSE
[10:30:58.467]                     if (inherits(cond, "message")) {
[10:30:58.467]                       muffled <- grepl(pattern, "muffleMessage")
[10:30:58.467]                       if (muffled) 
[10:30:58.467]                         invokeRestart("muffleMessage")
[10:30:58.467]                     }
[10:30:58.467]                     else if (inherits(cond, "warning")) {
[10:30:58.467]                       muffled <- grepl(pattern, "muffleWarning")
[10:30:58.467]                       if (muffled) 
[10:30:58.467]                         invokeRestart("muffleWarning")
[10:30:58.467]                     }
[10:30:58.467]                     else if (inherits(cond, "condition")) {
[10:30:58.467]                       if (!is.null(pattern)) {
[10:30:58.467]                         computeRestarts <- base::computeRestarts
[10:30:58.467]                         grepl <- base::grepl
[10:30:58.467]                         restarts <- computeRestarts(cond)
[10:30:58.467]                         for (restart in restarts) {
[10:30:58.467]                           name <- restart$name
[10:30:58.467]                           if (is.null(name)) 
[10:30:58.467]                             next
[10:30:58.467]                           if (!grepl(pattern, name)) 
[10:30:58.467]                             next
[10:30:58.467]                           invokeRestart(restart)
[10:30:58.467]                           muffled <- TRUE
[10:30:58.467]                           break
[10:30:58.467]                         }
[10:30:58.467]                       }
[10:30:58.467]                     }
[10:30:58.467]                     invisible(muffled)
[10:30:58.467]                   }
[10:30:58.467]                   muffleCondition(cond)
[10:30:58.467]                 })
[10:30:58.467]             }))
[10:30:58.467]             future::FutureResult(value = ...future.value$value, 
[10:30:58.467]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:58.467]                   ...future.rng), globalenv = if (FALSE) 
[10:30:58.467]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:30:58.467]                     ...future.globalenv.names))
[10:30:58.467]                 else NULL, started = ...future.startTime, version = "1.8")
[10:30:58.467]         }, condition = base::local({
[10:30:58.467]             c <- base::c
[10:30:58.467]             inherits <- base::inherits
[10:30:58.467]             invokeRestart <- base::invokeRestart
[10:30:58.467]             length <- base::length
[10:30:58.467]             list <- base::list
[10:30:58.467]             seq.int <- base::seq.int
[10:30:58.467]             signalCondition <- base::signalCondition
[10:30:58.467]             sys.calls <- base::sys.calls
[10:30:58.467]             `[[` <- base::`[[`
[10:30:58.467]             `+` <- base::`+`
[10:30:58.467]             `<<-` <- base::`<<-`
[10:30:58.467]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:30:58.467]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:30:58.467]                   3L)]
[10:30:58.467]             }
[10:30:58.467]             function(cond) {
[10:30:58.467]                 is_error <- inherits(cond, "error")
[10:30:58.467]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:30:58.467]                   NULL)
[10:30:58.467]                 if (is_error) {
[10:30:58.467]                   sessionInformation <- function() {
[10:30:58.467]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:30:58.467]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:30:58.467]                       search = base::search(), system = base::Sys.info())
[10:30:58.467]                   }
[10:30:58.467]                   ...future.conditions[[length(...future.conditions) + 
[10:30:58.467]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:30:58.467]                     cond$call), session = sessionInformation(), 
[10:30:58.467]                     timestamp = base::Sys.time(), signaled = 0L)
[10:30:58.467]                   signalCondition(cond)
[10:30:58.467]                 }
[10:30:58.467]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:30:58.467]                 "immediateCondition"))) {
[10:30:58.467]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:30:58.467]                   ...future.conditions[[length(...future.conditions) + 
[10:30:58.467]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:30:58.467]                   if (TRUE && !signal) {
[10:30:58.467]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:58.467]                     {
[10:30:58.467]                       inherits <- base::inherits
[10:30:58.467]                       invokeRestart <- base::invokeRestart
[10:30:58.467]                       is.null <- base::is.null
[10:30:58.467]                       muffled <- FALSE
[10:30:58.467]                       if (inherits(cond, "message")) {
[10:30:58.467]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:58.467]                         if (muffled) 
[10:30:58.467]                           invokeRestart("muffleMessage")
[10:30:58.467]                       }
[10:30:58.467]                       else if (inherits(cond, "warning")) {
[10:30:58.467]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:58.467]                         if (muffled) 
[10:30:58.467]                           invokeRestart("muffleWarning")
[10:30:58.467]                       }
[10:30:58.467]                       else if (inherits(cond, "condition")) {
[10:30:58.467]                         if (!is.null(pattern)) {
[10:30:58.467]                           computeRestarts <- base::computeRestarts
[10:30:58.467]                           grepl <- base::grepl
[10:30:58.467]                           restarts <- computeRestarts(cond)
[10:30:58.467]                           for (restart in restarts) {
[10:30:58.467]                             name <- restart$name
[10:30:58.467]                             if (is.null(name)) 
[10:30:58.467]                               next
[10:30:58.467]                             if (!grepl(pattern, name)) 
[10:30:58.467]                               next
[10:30:58.467]                             invokeRestart(restart)
[10:30:58.467]                             muffled <- TRUE
[10:30:58.467]                             break
[10:30:58.467]                           }
[10:30:58.467]                         }
[10:30:58.467]                       }
[10:30:58.467]                       invisible(muffled)
[10:30:58.467]                     }
[10:30:58.467]                     muffleCondition(cond, pattern = "^muffle")
[10:30:58.467]                   }
[10:30:58.467]                 }
[10:30:58.467]                 else {
[10:30:58.467]                   if (TRUE) {
[10:30:58.467]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:30:58.467]                     {
[10:30:58.467]                       inherits <- base::inherits
[10:30:58.467]                       invokeRestart <- base::invokeRestart
[10:30:58.467]                       is.null <- base::is.null
[10:30:58.467]                       muffled <- FALSE
[10:30:58.467]                       if (inherits(cond, "message")) {
[10:30:58.467]                         muffled <- grepl(pattern, "muffleMessage")
[10:30:58.467]                         if (muffled) 
[10:30:58.467]                           invokeRestart("muffleMessage")
[10:30:58.467]                       }
[10:30:58.467]                       else if (inherits(cond, "warning")) {
[10:30:58.467]                         muffled <- grepl(pattern, "muffleWarning")
[10:30:58.467]                         if (muffled) 
[10:30:58.467]                           invokeRestart("muffleWarning")
[10:30:58.467]                       }
[10:30:58.467]                       else if (inherits(cond, "condition")) {
[10:30:58.467]                         if (!is.null(pattern)) {
[10:30:58.467]                           computeRestarts <- base::computeRestarts
[10:30:58.467]                           grepl <- base::grepl
[10:30:58.467]                           restarts <- computeRestarts(cond)
[10:30:58.467]                           for (restart in restarts) {
[10:30:58.467]                             name <- restart$name
[10:30:58.467]                             if (is.null(name)) 
[10:30:58.467]                               next
[10:30:58.467]                             if (!grepl(pattern, name)) 
[10:30:58.467]                               next
[10:30:58.467]                             invokeRestart(restart)
[10:30:58.467]                             muffled <- TRUE
[10:30:58.467]                             break
[10:30:58.467]                           }
[10:30:58.467]                         }
[10:30:58.467]                       }
[10:30:58.467]                       invisible(muffled)
[10:30:58.467]                     }
[10:30:58.467]                     muffleCondition(cond, pattern = "^muffle")
[10:30:58.467]                   }
[10:30:58.467]                 }
[10:30:58.467]             }
[10:30:58.467]         }))
[10:30:58.467]     }, error = function(ex) {
[10:30:58.467]         base::structure(base::list(value = NULL, visible = NULL, 
[10:30:58.467]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:30:58.467]                 ...future.rng), started = ...future.startTime, 
[10:30:58.467]             finished = Sys.time(), session_uuid = NA_character_, 
[10:30:58.467]             version = "1.8"), class = "FutureResult")
[10:30:58.467]     }, finally = {
[10:30:58.467]         if (!identical(...future.workdir, getwd())) 
[10:30:58.467]             setwd(...future.workdir)
[10:30:58.467]         {
[10:30:58.467]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:30:58.467]                 ...future.oldOptions$nwarnings <- NULL
[10:30:58.467]             }
[10:30:58.467]             base::options(...future.oldOptions)
[10:30:58.467]             if (.Platform$OS.type == "windows") {
[10:30:58.467]                 old_names <- names(...future.oldEnvVars)
[10:30:58.467]                 envs <- base::Sys.getenv()
[10:30:58.467]                 names <- names(envs)
[10:30:58.467]                 common <- intersect(names, old_names)
[10:30:58.467]                 added <- setdiff(names, old_names)
[10:30:58.467]                 removed <- setdiff(old_names, names)
[10:30:58.467]                 changed <- common[...future.oldEnvVars[common] != 
[10:30:58.467]                   envs[common]]
[10:30:58.467]                 NAMES <- toupper(changed)
[10:30:58.467]                 args <- list()
[10:30:58.467]                 for (kk in seq_along(NAMES)) {
[10:30:58.467]                   name <- changed[[kk]]
[10:30:58.467]                   NAME <- NAMES[[kk]]
[10:30:58.467]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:58.467]                     next
[10:30:58.467]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:58.467]                 }
[10:30:58.467]                 NAMES <- toupper(added)
[10:30:58.467]                 for (kk in seq_along(NAMES)) {
[10:30:58.467]                   name <- added[[kk]]
[10:30:58.467]                   NAME <- NAMES[[kk]]
[10:30:58.467]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:58.467]                     next
[10:30:58.467]                   args[[name]] <- ""
[10:30:58.467]                 }
[10:30:58.467]                 NAMES <- toupper(removed)
[10:30:58.467]                 for (kk in seq_along(NAMES)) {
[10:30:58.467]                   name <- removed[[kk]]
[10:30:58.467]                   NAME <- NAMES[[kk]]
[10:30:58.467]                   if (name != NAME && is.element(NAME, old_names)) 
[10:30:58.467]                     next
[10:30:58.467]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:30:58.467]                 }
[10:30:58.467]                 if (length(args) > 0) 
[10:30:58.467]                   base::do.call(base::Sys.setenv, args = args)
[10:30:58.467]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:30:58.467]             }
[10:30:58.467]             else {
[10:30:58.467]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:30:58.467]             }
[10:30:58.467]             {
[10:30:58.467]                 if (base::length(...future.futureOptionsAdded) > 
[10:30:58.467]                   0L) {
[10:30:58.467]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:30:58.467]                   base::names(opts) <- ...future.futureOptionsAdded
[10:30:58.467]                   base::options(opts)
[10:30:58.467]                 }
[10:30:58.467]                 {
[10:30:58.467]                   {
[10:30:58.467]                     base::options(mc.cores = ...future.mc.cores.old)
[10:30:58.467]                     NULL
[10:30:58.467]                   }
[10:30:58.467]                   options(future.plan = NULL)
[10:30:58.467]                   if (is.na(NA_character_)) 
[10:30:58.467]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:30:58.467]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:30:58.467]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:30:58.467]                     .init = FALSE)
[10:30:58.467]                 }
[10:30:58.467]             }
[10:30:58.467]         }
[10:30:58.467]     })
[10:30:58.467]     if (TRUE) {
[10:30:58.467]         base::sink(type = "output", split = FALSE)
[10:30:58.467]         if (TRUE) {
[10:30:58.467]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:30:58.467]         }
[10:30:58.467]         else {
[10:30:58.467]             ...future.result["stdout"] <- base::list(NULL)
[10:30:58.467]         }
[10:30:58.467]         base::close(...future.stdout)
[10:30:58.467]         ...future.stdout <- NULL
[10:30:58.467]     }
[10:30:58.467]     ...future.result$conditions <- ...future.conditions
[10:30:58.467]     ...future.result$finished <- base::Sys.time()
[10:30:58.467]     ...future.result
[10:30:58.467] }
[10:30:58.470] Exporting 7 global objects (2.15 KiB) to cluster node #2 ...
[10:30:58.470] Exporting ‘...future.FUN’ (504 bytes) to cluster node #2 ...
[10:30:58.470] Exporting ‘...future.FUN’ (504 bytes) to cluster node #2 ... DONE
[10:30:58.471] Exporting ‘foo’ (1.60 KiB) to cluster node #2 ...
[10:30:58.471] Exporting ‘foo’ (1.60 KiB) to cluster node #2 ... DONE
[10:30:58.471] Exporting ‘x’ (56 bytes) to cluster node #2 ...
[10:30:58.471] Exporting ‘x’ (56 bytes) to cluster node #2 ... DONE
[10:30:58.471] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[10:30:58.472] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[10:30:58.472] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[10:30:58.472] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[10:30:58.472] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[10:30:58.473] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[10:30:58.473] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[10:30:58.473] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[10:30:58.473] Exporting 7 global objects (2.15 KiB) to cluster node #2 ... DONE
[10:30:58.474] MultisessionFuture started
[10:30:58.474] - Launch lazy future ... done
[10:30:58.474] run() for ‘MultisessionFuture’ ... done
[10:30:58.474] Created future:
[10:30:58.474] MultisessionFuture:
[10:30:58.474] Label: ‘future_replicate-2’
[10:30:58.474] Expression:
[10:30:58.474] {
[10:30:58.474]     do.call(function(...) {
[10:30:58.474]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[10:30:58.474]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[10:30:58.474]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[10:30:58.474]             on.exit(options(oopts), add = TRUE)
[10:30:58.474]         }
[10:30:58.474]         {
[10:30:58.474]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[10:30:58.474]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[10:30:58.474]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[10:30:58.474]                   envir = globalenv(), inherits = FALSE)
[10:30:58.474]                 ...future.FUN(...future.X_jj, ...)
[10:30:58.474]             })
[10:30:58.474]         }
[10:30:58.474]     }, args = future.call.arguments)
[10:30:58.474] }
[10:30:58.474] Lazy evaluation: FALSE
[10:30:58.474] Asynchronous evaluation: TRUE
[10:30:58.474] Local evaluation: TRUE
[10:30:58.474] Environment: 0x55aba34245d8
[10:30:58.474] Capture standard output: TRUE
[10:30:58.474] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:30:58.474] Globals: 7 objects totaling 2.55 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, ...)
[10:30:58.474] Packages: <none>
[10:30:58.474] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[10:30:58.474] Resolved: FALSE
[10:30:58.474] Value: <not collected>
[10:30:58.474] Conditions captured: <none>
[10:30:58.474] Early signaling: FALSE
[10:30:58.474] Owner process: 7cdcbd4b-6c47-ca9a-dc3f-e18236d134b8
[10:30:58.474] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:30:58.486] Chunk #2 of 2 ... DONE
[10:30:58.486] Launching 2 futures (chunks) ... DONE
[10:30:58.486] Resolving 2 futures (chunks) ...
[10:30:58.486] resolve() on list ...
[10:30:58.486]  recursive: 0
[10:30:58.486]  length: 2
[10:30:58.487] 
[10:30:58.487] receiveMessageFromWorker() for ClusterFuture ...
[10:30:58.487] - Validating connection of MultisessionFuture
[10:30:58.487] - received message: FutureResult
[10:30:58.487] - Received FutureResult
[10:30:58.488] - Erased future from FutureRegistry
[10:30:58.488] result() for ClusterFuture ...
[10:30:58.488] - result already collected: FutureResult
[10:30:58.488] result() for ClusterFuture ... done
[10:30:58.488] receiveMessageFromWorker() for ClusterFuture ... done
[10:30:58.488] Future #1
[10:30:58.488] result() for ClusterFuture ...
[10:30:58.488] - result already collected: FutureResult
[10:30:58.488] result() for ClusterFuture ... done
[10:30:58.488] result() for ClusterFuture ...
[10:30:58.488] - result already collected: FutureResult
[10:30:58.489] result() for ClusterFuture ... done
[10:30:58.489] signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:30:58.489] - nx: 2
[10:30:58.489] - relay: TRUE
[10:30:58.489] - stdout: TRUE
[10:30:58.489] - signal: TRUE
[10:30:58.489] - resignal: FALSE
[10:30:58.489] - force: TRUE
[10:30:58.489] - relayed: [n=2] FALSE, FALSE
[10:30:58.489] - queued futures: [n=2] FALSE, FALSE
[10:30:58.489]  - until=1
[10:30:58.490]  - relaying element #1
[10:30:58.490] result() for ClusterFuture ...
[10:30:58.490] - result already collected: FutureResult
[10:30:58.490] result() for ClusterFuture ... done
[10:30:58.490] result() for ClusterFuture ...
[10:30:58.490] - result already collected: FutureResult
[10:30:58.490] result() for ClusterFuture ... done
[10:30:58.490] result() for ClusterFuture ...
[10:30:58.490] - result already collected: FutureResult
[10:30:58.490] result() for ClusterFuture ... done
[10:30:58.490] result() for ClusterFuture ...
[10:30:58.491] - result already collected: FutureResult
[10:30:58.491] result() for ClusterFuture ... done
[10:30:58.491] - relayed: [n=2] TRUE, FALSE
[10:30:58.491] - queued futures: [n=2] TRUE, FALSE
[10:30:58.491] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:30:58.491]  length: 1 (resolved future 1)
[10:30:58.518] receiveMessageFromWorker() for ClusterFuture ...
[10:30:58.518] - Validating connection of MultisessionFuture
[10:30:58.519] - received message: FutureResult
[10:30:58.519] - Received FutureResult
[10:30:58.519] - Erased future from FutureRegistry
[10:30:58.519] result() for ClusterFuture ...
[10:30:58.519] - result already collected: FutureResult
[10:30:58.519] result() for ClusterFuture ... done
[10:30:58.519] receiveMessageFromWorker() for ClusterFuture ... done
[10:30:58.520] Future #2
[10:30:58.520] result() for ClusterFuture ...
[10:30:58.520] - result already collected: FutureResult
[10:30:58.520] result() for ClusterFuture ... done
[10:30:58.520] result() for ClusterFuture ...
[10:30:58.520] - result already collected: FutureResult
[10:30:58.520] result() for ClusterFuture ... done
[10:30:58.520] signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:30:58.520] - nx: 2
[10:30:58.520] - relay: TRUE
[10:30:58.520] - stdout: TRUE
[10:30:58.521] - signal: TRUE
[10:30:58.521] - resignal: FALSE
[10:30:58.521] - force: TRUE
[10:30:58.521] - relayed: [n=2] TRUE, FALSE
[10:30:58.521] - queued futures: [n=2] TRUE, FALSE
[10:30:58.521]  - until=2
[10:30:58.521]  - relaying element #2
[10:30:58.521] result() for ClusterFuture ...
[10:30:58.521] - result already collected: FutureResult
[10:30:58.521] result() for ClusterFuture ... done
[10:30:58.521] result() for ClusterFuture ...
[10:30:58.522] - result already collected: FutureResult
[10:30:58.522] result() for ClusterFuture ... done
[10:30:58.522] result() for ClusterFuture ...
[10:30:58.522] - result already collected: FutureResult
[10:30:58.522] result() for ClusterFuture ... done
[10:30:58.522] result() for ClusterFuture ...
[10:30:58.522] - result already collected: FutureResult
[10:30:58.522] result() for ClusterFuture ... done
[10:30:58.522] - relayed: [n=2] TRUE, TRUE
[10:30:58.522] - queued futures: [n=2] TRUE, TRUE
[10:30:58.522] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:30:58.523]  length: 0 (resolved future 2)
[10:30:58.523] Relaying remaining futures
[10:30:58.523] signalConditionsASAP(NULL, pos=0) ...
[10:30:58.523] - nx: 2
[10:30:58.523] - relay: TRUE
[10:30:58.523] - stdout: TRUE
[10:30:58.523] - signal: TRUE
[10:30:58.523] - resignal: FALSE
[10:30:58.523] - force: TRUE
[10:30:58.523] - relayed: [n=2] TRUE, TRUE
[10:30:58.523] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:30:58.524] - relayed: [n=2] TRUE, TRUE
[10:30:58.524] - queued futures: [n=2] TRUE, TRUE
[10:30:58.524] signalConditionsASAP(NULL, pos=0) ... done
[10:30:58.524] resolve() on list ... DONE
[10:30:58.524] result() for ClusterFuture ...
[10:30:58.524] - result already collected: FutureResult
[10:30:58.524] result() for ClusterFuture ... done
[10:30:58.524] result() for ClusterFuture ...
[10:30:58.524] - result already collected: FutureResult
[10:30:58.524] result() for ClusterFuture ... done
[10:30:58.524] result() for ClusterFuture ...
[10:30:58.525] - result already collected: FutureResult
[10:30:58.525] result() for ClusterFuture ... done
[10:30:58.525] result() for ClusterFuture ...
[10:30:58.525] - result already collected: FutureResult
[10:30:58.525] result() for ClusterFuture ... done
[10:30:58.525]  - Number of value chunks collected: 2
[10:30:58.525] Resolving 2 futures (chunks) ... DONE
[10:30:58.525] Reducing values from 2 chunks ...
[10:30:58.525]  - Number of values collected after concatenation: 5
[10:30:58.525]  - Number of values expected: 5
[10:30:58.525] Reducing values from 2 chunks ... DONE
[10:30:58.526] future_lapply() ... DONE
[10:30:58.526] plan(): Setting new future strategy stack:
[10:30:58.526] List of future strategies:
[10:30:58.526] 1. sequential:
[10:30:58.526]    - args: function (..., envir = parent.frame())
[10:30:58.526]    - tweaked: FALSE
[10:30:58.526]    - call: plan(sequential)
[10:30:58.527] plan(): nbrOfWorkers() = 1
*** strategy = ‘multisession’ ... done
> 
> message("*** future_replicate() ... DONE")
*** future_replicate() ... DONE
> 
> source("incl/end.R")
[10:30:58.528] plan(): Setting new future strategy stack:
[10:30:58.528] List of future strategies:
[10:30:58.528] 1. FutureStrategy:
[10:30:58.528]    - args: function (..., envir = parent.frame())
[10:30:58.528]    - tweaked: FALSE
[10:30:58.528]    - call: future::plan(oplan)
[10:30:58.528] plan(): nbrOfWorkers() = 1
> 
