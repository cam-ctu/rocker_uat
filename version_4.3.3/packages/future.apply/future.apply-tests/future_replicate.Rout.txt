
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
Loading required package: future
[13:34:41.394] plan(): Setting new future strategy stack:
[13:34:41.395] List of future strategies:
[13:34:41.395] 1. sequential:
[13:34:41.395]    - args: function (..., envir = parent.frame())
[13:34:41.395]    - tweaked: FALSE
[13:34:41.395]    - call: future::plan("sequential")
[13:34:41.408] plan(): nbrOfWorkers() = 1
> 
> message("*** future_replicate() ...")
*** future_replicate() ...
> 
> for (strategy in supportedStrategies()) {
+   message(sprintf("*** strategy = %s ...", sQuote(strategy)))
+   plan(strategy)
+   
+   y0 <- replicate(5L, sample(10L, size = 1L))
+   y1 <- future_replicate(5L, sample(10L, size = 1L))
+   stopifnot(length(y0) == length(y1))
+   
+   set.seed(0xBEEF)
+   y1 <- future_replicate(5L, sample(10L, size = 1L))
+   set.seed(0xBEEF)
+   y2 <- future_replicate(5L, sample(10L, size = 1L))
+   stopifnot(all.equal(y2, y1))
+   
+   y3 <- future_replicate(5L, sample(10L, size = 1L), future.seed = 0xBEEF)
+   y4 <- future_replicate(5L, sample(10L, size = 1L), future.seed = 0xBEEF)
+   stopifnot(all.equal(y4, y3))
+   
+   
+   message("- example(replicate) ...")
+   
+   foo <- function(x = 1, y = 2) c(x, y)
+   bar0 <- function(n, x) replicate(n, foo(x = x))
+   y0 <- bar0(5, x = 3)
+   
+   bar1 <- function(n, x) future_replicate(n, foo(x = x))
+   y1 <- bar1(5, x = 3)
+   stopifnot(all.equal(y1, y0))
+   
+   plan(sequential)
+   message(sprintf("*** strategy = %s ... done", sQuote(strategy)))
+ } ## for (strategy in ...) 
*** strategy = ‘sequential’ ...
[13:34:41.432] plan(): Setting new future strategy stack:
[13:34:41.432] List of future strategies:
[13:34:41.432] 1. sequential:
[13:34:41.432]    - args: function (..., envir = parent.frame())
[13:34:41.432]    - tweaked: FALSE
[13:34:41.432]    - call: plan(strategy)
[13:34:41.443] plan(): nbrOfWorkers() = 1
[13:34:41.444] future_lapply() ...
[13:34:41.448] Generating random seeds ...
[13:34:41.448] Generating random seed streams for 5 elements ...
[13:34:41.449] Generating random seed streams for 5 elements ... DONE
[13:34:41.449] Generating random seeds ... DONE
[13:34:41.449] Will set RNG state on exit: 10403, 10, 735860579, -635536383, -634017936, -1589842162, -442365575, 1776434443, 1545127482, -1073341124, -42593665, -264070699, 259676140, -406656702, 762541725, 1623876375, 1802875518, 1273938488, 1338021147, 281502329, 1039179464, 1875334902, -2059993295, 1044051811, 921857330, 1336512132, 1508600519, -376993379, 1250237716, -1305381958, 728241669, 1930287071, -1878839706, 456129008, 1317132051, 673257649, -800830624, 972798206, 2024663177, -1210615877, -445320822, -363175828, -782171665, -1335813595, 1674981084, -1442577230, -1964505171, 2079144807, 1704138894, 1081267560, -1658059413, -1598626039, 1489836440, -1832812346, 1399104033, -678221133, -84879326, 934371860, -640129385, -988219251, 1463885220, 915758986, -1509422091, -346627505, -1548495530, 1538756608, 985149763, -393151263, 27383376, -471962962, 1419095641, -222759317, 897792986, 924994716, -40171873, 893766901, -515543668, -2117191582, -832415683, -1038048585, 522676574, 1560129688, -1049117701, -1382798951, -2037622232, 1193343702, -2146521263, 2146365955, 1066894738, -1241300188, 1112413671, 1935335997, 1079139508, -12477670, -2112704411, -1756989185, -888637050, -875884784, -132506701, -1575315375, -1482978304, -459584290, -392716503, 1557676763, 388004330, -504643188, -23992625, 1787820677, -885419716, 448740370, 1609044749, 625074247, -334949842, -1600201848, 185955979, -258996119, 292787256, -1988471578, 1806261377, -380404717, 379624386, -879975308, 1191778935, -121568403, 1488802820, -145240278, -1682420587, 924617519, -1465132490, 1388584544, 94157987, 2083755969, -436329552, -470399282, 227873849, -533435829, -818397190, -1672488196, 413167423, -851312619, -887155924, -790087678, -326565155, 1567844823, 510960830, -1591927048, -584430373, 916082489, -573445496, -1516974538, -2065121679, 829234339, -363588110, -690481852, 1968952839, 1238488029, -54805292, -39164934, -1979673787, 2112784287, 1489276198, -174926416, 494063187, -1014494863, -1706991456, -2140458946, -570271927, 684735995, -842931766, -1232793812, -2068418769, -29205019, -20586340, -1856158478, -1004880531, 1390250663, -2061228850, -1702622680, -182592981, 1325969481, -1176080040, 1298081798, 125852129, -1241799821, -2140686366, -1096343724, 1000526423, 1445446221, -787405340, -1220870198, -2008890827, 1513408655, 1782004118, -1627912896, 2041501699, 1777060385, 1928006928, 375423726, 1851252377, 1707368235, -241198566, 202819804, -671480609, 1150354101, 1476760652, -737417054, -700536835, -918432521, 2070856222, -1581679400, -1886502853, -1948988967, -841175192, -344972650, 342141969, -1912930877, -1101217326, 479889508, 142813095, 1786194173, 510196980, 814898138, 1850044197, -1351698881, -1002914362, -205858224, -79899021, -578069871, 1962615488, -382689840, -259754142, 946811624, -1328606004, 54644220, 825063922, -1402759552, -1265416716, 1838998152, -673876166, -1932943536, -2107827092, -2117898860, 1908120658, -201725472, 692778188, -571064160, 1095149954, -859883288, 1540403948, 1307489596, 634584178, -1014274960, 414559268, -1861615560, -1141875942, -1582900016, -527299780, -2131953772, 1489063810, 1206134208, 1188573756, -149231216, 1256270370, 4197640, 660331148, -1404713188, -745037678, 377364864, -1979874796, 1040302888, -1578760646, -1151301168, -834251412, 1791058868, 927386642, -467619360, 664912844, 922206432, -2060953566, -1355092696, -1886161396, -1565658308, -1964506126, 1711357680, 1067940420, 837639768, -1826114758, -1653128720, 828858044, 386927892, -810058046, 546431072, 2037647228, -1082319920, -1286206174, -755964248, -158643316, -2057216836, -1323272398, -1920888256, 646318260, 1488661064, 758918586, 320123408, -247054612, 481992020, -1010850542, -1588700768, 541818572, 1833858656, -1261018174, 1035191080, 437033900, 670129980, 85241202, -162062544, -1293114076, -1819309256, 489340634, -658246768, -1854375172, 1302500244, -1288454078, 2002993408, -1926155204, 664548688, -27209566, 1912667464, -265979124, 224752348, 1958347090, -644890496, -1809990572, 1594354664, 1312015610, 1784176464, 472002348, -538956428, 2115424146, 924171360, -291142260, -1790330016, -1767348766, -298720344, -1272287028, -41092100, -1583165006, -749593104, -1416024124, -1962319528, -292158086, -727453776, -1141844548, 2047808596, 1871210434, 1570088992, 541305020, -1924753840, 1838526434, 2011244648, -1301159860, -2029300484, -367101966, 851819776, -1572514444, -2031220728, -1982319686, 1709041104, -398110740, 1550822804, 1469258194, -871177888, -565060788, 404392224, 450324354, 156190440, -117509908, 1879009340, 1350569842, 1006100080, -148169692, -64288968, 1726911642, 1981981392, -1110456132, 896177812, 1218821762, -1182005056, -1228218564, -185601904, -1918978526, 1812511752, -701080308, 327621788, 1319907858, 987349888, -70683116, 472004136, -769811142, 1100649936, -1078431636, 952575284, 1436238482, 1747097440, -229437620, 1221332960, 2118437794, 2023484328, 2121898380, -2147302212, -1820118670, 647557360, -162316220, -1858499240, 374530618, 2029100912, -879006660, 76974868, 781211074, -1843112224, -743492740, -227208496, 595334306, -74487768, 361433356, -758901828, 1696613682, 1317142976, 1899950644, 837699528, 852092090, -270476912, -1283743252, 516406868, -2066223982, -655672544, -1199611444, 1186315744, -1428771134, 563605544, -515809620, -1538953028, -1327835662, 1538252080, 1428096164, -1520639304, 489929050, -912961136, 974425980, -332961516, -1178357950, 1364578048, -372513860, 79444816, -1199648990, -1643748024, -101802174, 1677180759, 1518407329, 1742298982, 508041572, -43565931, -827181633, 133372248, 1541822326, 1604478339, -1408016443, 819815650, -1765449392, -470744967, -1094515797, -266589924, -1715413430, -1661519297, -556732791, -2062902626, 1140598604, -1268465891, -1519190361, -64358960, -1739887250, 1270808603, -1059688067, 337864554, -360783352, -696662351, 1663025443, -756526556, -1090897710, -150965977, 476478321, -887526986, -1642561196, 487981029, 241949167, 1330749736, 942782854, 1565894067, -1321146091, 919772018, 826521536, -1353942999, -907889509, -91631252, 1846925690, 1574288047, -137793095, 537099214, -710245604, 1915148941, 1860240119, -1676892672, 470810718, 94346027, -1114892243, -1361330022, 615892056, 1190708161, 317140083, -571615852, -1360860126, 519858999, -790090239, 389136134, -34614460, 2136483445, -269453345, -1124971720, 235322646, -638885597, 191343333, 1831527170, 76736880, 14270745, -2127699701, -2119876100, 2022808106, 1648831071, 881113577, -294767874, 2099346156, -1401566659, -904697337, 1511570928, -798413426, -121457733, -6623843, 1853911882, 742049640, 1383311697, 1750141507, 6434628, 1197163506, 805984711, 1112657809, 710833942, 1819067252, -910001659, -306271665, 903546440, 1632233446, -1341052653, 1250342517, -933884846, -1409104224, -1717902455, 536461243, 849412108, -1953124966, 1975766287, -805924007, 1933602286, -1202435972, 1536122093, -719299689, 1340933216, -417323458, 176877323, -1741286003, 250814138, 1817881848, -2093921631, 2087701075, -1212631692, -884614398, -1132917865, 2142936417, 1708342694, -734920796, 2131782229, 392510207, 725499800, -270282570, 1007072579, 464663685, 1338838306, 401708560, -1666910791, -1120663957, 1001716060, 1972899978, -1361872769, 778058185, 677919326, 1433563404, -268688163, 692220391, 182250000, -505788626, -2057221157, 1486834877, 627510826, 480469704, -1110419471, -300476061, 930548068, -1861186414, 913465703, 499970865, 1850521718, 1057644948, -1911945819, 265485999, 730572648, 84593478, 1593509460
[13:34:41.449] Number of chunks: 1
[13:34:41.450] getGlobalsAndPackagesXApply() ...
[13:34:41.450]  - future.globals: TRUE
[13:34:41.451] getGlobalsAndPackages() ...
[13:34:41.451] Searching for globals...
[13:34:41.453] - globals found: [2] ‘FUN’, ‘sample’
[13:34:41.453] Searching for globals ... DONE
[13:34:41.453] Resolving globals: FALSE
[13:34:41.454] The total size of the 1 globals is 616 bytes (616 bytes)
[13:34:41.455] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:34:41.455] - globals: [1] ‘FUN’
[13:34:41.455] 
[13:34:41.455] getGlobalsAndPackages() ... DONE
[13:34:41.455]  - globals found/used: [n=1] ‘FUN’
[13:34:41.455]  - needed namespaces: [n=0] 
[13:34:41.455] Finding globals ... DONE
[13:34:41.455]  - use_args: TRUE
[13:34:41.455]  - Getting '...' globals ...
[13:34:41.456] resolve() on list ...
[13:34:41.456]  recursive: 0
[13:34:41.457]  length: 1
[13:34:41.457]  elements: ‘...’
[13:34:41.457]  length: 0 (resolved future 1)
[13:34:41.457] resolve() on list ... DONE
[13:34:41.457]    - '...' content: [n=0] 
[13:34:41.457] List of 1
[13:34:41.457]  $ ...: list()
[13:34:41.457]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:41.457]  - attr(*, "where")=List of 1
[13:34:41.457]   ..$ ...:<environment: 0x5627bd8c2718> 
[13:34:41.457]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:41.457]  - attr(*, "resolved")= logi TRUE
[13:34:41.457]  - attr(*, "total_size")= num NA
[13:34:41.462]  - Getting '...' globals ... DONE
[13:34:41.462] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:34:41.462] List of 2
[13:34:41.462]  $ ...future.FUN:function (...)  
[13:34:41.462]  $ ...          : list()
[13:34:41.462]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:41.462]  - attr(*, "where")=List of 2
[13:34:41.462]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:34:41.462]   ..$ ...          :<environment: 0x5627bd8c2718> 
[13:34:41.462]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:41.462]  - attr(*, "resolved")= logi FALSE
[13:34:41.462]  - attr(*, "total_size")= num 616
[13:34:41.465] Packages to be attached in all futures: [n=0] 
[13:34:41.465] getGlobalsAndPackagesXApply() ... DONE
[13:34:41.465] Number of futures (= number of chunks): 1
[13:34:41.465] Launching 1 futures (chunks) ...
[13:34:41.465] Chunk #1 of 1 ...
[13:34:41.466]  - Finding globals in 'X' for chunk #1 ...
[13:34:41.466] getGlobalsAndPackages() ...
[13:34:41.466] Searching for globals...
[13:34:41.466] 
[13:34:41.466] Searching for globals ... DONE
[13:34:41.466] - globals: [0] <none>
[13:34:41.466] getGlobalsAndPackages() ... DONE
[13:34:41.467]    + additional globals found: [n=0] 
[13:34:41.467]    + additional namespaces needed: [n=0] 
[13:34:41.467]  - Finding globals in 'X' for chunk #1 ... DONE
[13:34:41.467]  - seeds: [5] <seeds>
[13:34:41.467]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:41.467] getGlobalsAndPackages() ...
[13:34:41.467] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:41.467] Resolving globals: FALSE
[13:34:41.467] Tweak future expression to call with '...' arguments ...
[13:34:41.469] {
[13:34:41.469]     do.call(function(...) {
[13:34:41.469]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:41.469]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:41.469]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:41.469]             on.exit(options(oopts), add = TRUE)
[13:34:41.469]         }
[13:34:41.469]         {
[13:34:41.469]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:41.469]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:41.469]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:41.469]                   envir = globalenv(), inherits = FALSE)
[13:34:41.469]                 ...future.FUN(...future.X_jj, ...)
[13:34:41.469]             })
[13:34:41.469]         }
[13:34:41.469]     }, args = future.call.arguments)
[13:34:41.469] }
[13:34:41.469] Tweak future expression to call with '...' arguments ... DONE
[13:34:41.470] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:41.470] 
[13:34:41.470] getGlobalsAndPackages() ... DONE
[13:34:41.471] run() for ‘Future’ ...
[13:34:41.471] - state: ‘created’
[13:34:41.471] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:34:41.471] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:34:41.472] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:34:41.472]   - Field: ‘label’
[13:34:41.472]   - Field: ‘local’
[13:34:41.472]   - Field: ‘owner’
[13:34:41.472]   - Field: ‘envir’
[13:34:41.472]   - Field: ‘packages’
[13:34:41.472]   - Field: ‘gc’
[13:34:41.472]   - Field: ‘conditions’
[13:34:41.472]   - Field: ‘expr’
[13:34:41.472]   - Field: ‘uuid’
[13:34:41.472]   - Field: ‘seed’
[13:34:41.473]   - Field: ‘version’
[13:34:41.473]   - Field: ‘result’
[13:34:41.473]   - Field: ‘asynchronous’
[13:34:41.473]   - Field: ‘calls’
[13:34:41.473]   - Field: ‘globals’
[13:34:41.473]   - Field: ‘stdout’
[13:34:41.473]   - Field: ‘earlySignal’
[13:34:41.473]   - Field: ‘lazy’
[13:34:41.473]   - Field: ‘state’
[13:34:41.473] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:34:41.473] - Launch lazy future ...
[13:34:41.474] Packages needed by the future expression (n = 0): <none>
[13:34:41.474] Packages needed by future strategies (n = 0): <none>
[13:34:41.475] {
[13:34:41.475]     {
[13:34:41.475]         {
[13:34:41.475]             ...future.startTime <- base::Sys.time()
[13:34:41.475]             {
[13:34:41.475]                 {
[13:34:41.475]                   {
[13:34:41.475]                     base::local({
[13:34:41.475]                       has_future <- base::requireNamespace("future", 
[13:34:41.475]                         quietly = TRUE)
[13:34:41.475]                       if (has_future) {
[13:34:41.475]                         ns <- base::getNamespace("future")
[13:34:41.475]                         version <- ns[[".package"]][["version"]]
[13:34:41.475]                         if (is.null(version)) 
[13:34:41.475]                           version <- utils::packageVersion("future")
[13:34:41.475]                       }
[13:34:41.475]                       else {
[13:34:41.475]                         version <- NULL
[13:34:41.475]                       }
[13:34:41.475]                       if (!has_future || version < "1.8.0") {
[13:34:41.475]                         info <- base::c(r_version = base::gsub("R version ", 
[13:34:41.475]                           "", base::R.version$version.string), 
[13:34:41.475]                           platform = base::sprintf("%s (%s-bit)", 
[13:34:41.475]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:34:41.475]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:34:41.475]                             "release", "version")], collapse = " "), 
[13:34:41.475]                           hostname = base::Sys.info()[["nodename"]])
[13:34:41.475]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:34:41.475]                           info)
[13:34:41.475]                         info <- base::paste(info, collapse = "; ")
[13:34:41.475]                         if (!has_future) {
[13:34:41.475]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:34:41.475]                             info)
[13:34:41.475]                         }
[13:34:41.475]                         else {
[13:34:41.475]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:34:41.475]                             info, version)
[13:34:41.475]                         }
[13:34:41.475]                         base::stop(msg)
[13:34:41.475]                       }
[13:34:41.475]                     })
[13:34:41.475]                   }
[13:34:41.475]                   ...future.strategy.old <- future::plan("list")
[13:34:41.475]                   options(future.plan = NULL)
[13:34:41.475]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:34:41.475]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:34:41.475]                 }
[13:34:41.475]                 ...future.workdir <- getwd()
[13:34:41.475]             }
[13:34:41.475]             ...future.oldOptions <- base::as.list(base::.Options)
[13:34:41.475]             ...future.oldEnvVars <- base::Sys.getenv()
[13:34:41.475]         }
[13:34:41.475]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:34:41.475]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:34:41.475]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:34:41.475]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:34:41.475]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:34:41.475]             future.stdout.windows.reencode = NULL, width = 80L)
[13:34:41.475]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:34:41.475]             base::names(...future.oldOptions))
[13:34:41.475]     }
[13:34:41.475]     if (FALSE) {
[13:34:41.475]     }
[13:34:41.475]     else {
[13:34:41.475]         if (TRUE) {
[13:34:41.475]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:34:41.475]                 open = "w")
[13:34:41.475]         }
[13:34:41.475]         else {
[13:34:41.475]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:34:41.475]                 windows = "NUL", "/dev/null"), open = "w")
[13:34:41.475]         }
[13:34:41.475]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:34:41.475]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:34:41.475]             base::sink(type = "output", split = FALSE)
[13:34:41.475]             base::close(...future.stdout)
[13:34:41.475]         }, add = TRUE)
[13:34:41.475]     }
[13:34:41.475]     ...future.frame <- base::sys.nframe()
[13:34:41.475]     ...future.conditions <- base::list()
[13:34:41.475]     ...future.rng <- base::globalenv()$.Random.seed
[13:34:41.475]     if (FALSE) {
[13:34:41.475]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:34:41.475]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:34:41.475]     }
[13:34:41.475]     ...future.result <- base::tryCatch({
[13:34:41.475]         base::withCallingHandlers({
[13:34:41.475]             ...future.value <- base::withVisible(base::local({
[13:34:41.475]                 do.call(function(...) {
[13:34:41.475]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:41.475]                   if (!identical(...future.globals.maxSize.org, 
[13:34:41.475]                     ...future.globals.maxSize)) {
[13:34:41.475]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:41.475]                     on.exit(options(oopts), add = TRUE)
[13:34:41.475]                   }
[13:34:41.475]                   {
[13:34:41.475]                     lapply(seq_along(...future.elements_ii), 
[13:34:41.475]                       FUN = function(jj) {
[13:34:41.475]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:41.475]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:41.475]                           envir = globalenv(), inherits = FALSE)
[13:34:41.475]                         ...future.FUN(...future.X_jj, ...)
[13:34:41.475]                       })
[13:34:41.475]                   }
[13:34:41.475]                 }, args = future.call.arguments)
[13:34:41.475]             }))
[13:34:41.475]             future::FutureResult(value = ...future.value$value, 
[13:34:41.475]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:41.475]                   ...future.rng), globalenv = if (FALSE) 
[13:34:41.475]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:34:41.475]                     ...future.globalenv.names))
[13:34:41.475]                 else NULL, started = ...future.startTime, version = "1.8")
[13:34:41.475]         }, condition = base::local({
[13:34:41.475]             c <- base::c
[13:34:41.475]             inherits <- base::inherits
[13:34:41.475]             invokeRestart <- base::invokeRestart
[13:34:41.475]             length <- base::length
[13:34:41.475]             list <- base::list
[13:34:41.475]             seq.int <- base::seq.int
[13:34:41.475]             signalCondition <- base::signalCondition
[13:34:41.475]             sys.calls <- base::sys.calls
[13:34:41.475]             `[[` <- base::`[[`
[13:34:41.475]             `+` <- base::`+`
[13:34:41.475]             `<<-` <- base::`<<-`
[13:34:41.475]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:34:41.475]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:34:41.475]                   3L)]
[13:34:41.475]             }
[13:34:41.475]             function(cond) {
[13:34:41.475]                 is_error <- inherits(cond, "error")
[13:34:41.475]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:34:41.475]                   NULL)
[13:34:41.475]                 if (is_error) {
[13:34:41.475]                   sessionInformation <- function() {
[13:34:41.475]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:34:41.475]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:34:41.475]                       search = base::search(), system = base::Sys.info())
[13:34:41.475]                   }
[13:34:41.475]                   ...future.conditions[[length(...future.conditions) + 
[13:34:41.475]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:34:41.475]                     cond$call), session = sessionInformation(), 
[13:34:41.475]                     timestamp = base::Sys.time(), signaled = 0L)
[13:34:41.475]                   signalCondition(cond)
[13:34:41.475]                 }
[13:34:41.475]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:34:41.475]                 "immediateCondition"))) {
[13:34:41.475]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:34:41.475]                   ...future.conditions[[length(...future.conditions) + 
[13:34:41.475]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:34:41.475]                   if (TRUE && !signal) {
[13:34:41.475]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:41.475]                     {
[13:34:41.475]                       inherits <- base::inherits
[13:34:41.475]                       invokeRestart <- base::invokeRestart
[13:34:41.475]                       is.null <- base::is.null
[13:34:41.475]                       muffled <- FALSE
[13:34:41.475]                       if (inherits(cond, "message")) {
[13:34:41.475]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:41.475]                         if (muffled) 
[13:34:41.475]                           invokeRestart("muffleMessage")
[13:34:41.475]                       }
[13:34:41.475]                       else if (inherits(cond, "warning")) {
[13:34:41.475]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:41.475]                         if (muffled) 
[13:34:41.475]                           invokeRestart("muffleWarning")
[13:34:41.475]                       }
[13:34:41.475]                       else if (inherits(cond, "condition")) {
[13:34:41.475]                         if (!is.null(pattern)) {
[13:34:41.475]                           computeRestarts <- base::computeRestarts
[13:34:41.475]                           grepl <- base::grepl
[13:34:41.475]                           restarts <- computeRestarts(cond)
[13:34:41.475]                           for (restart in restarts) {
[13:34:41.475]                             name <- restart$name
[13:34:41.475]                             if (is.null(name)) 
[13:34:41.475]                               next
[13:34:41.475]                             if (!grepl(pattern, name)) 
[13:34:41.475]                               next
[13:34:41.475]                             invokeRestart(restart)
[13:34:41.475]                             muffled <- TRUE
[13:34:41.475]                             break
[13:34:41.475]                           }
[13:34:41.475]                         }
[13:34:41.475]                       }
[13:34:41.475]                       invisible(muffled)
[13:34:41.475]                     }
[13:34:41.475]                     muffleCondition(cond, pattern = "^muffle")
[13:34:41.475]                   }
[13:34:41.475]                 }
[13:34:41.475]                 else {
[13:34:41.475]                   if (TRUE) {
[13:34:41.475]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:41.475]                     {
[13:34:41.475]                       inherits <- base::inherits
[13:34:41.475]                       invokeRestart <- base::invokeRestart
[13:34:41.475]                       is.null <- base::is.null
[13:34:41.475]                       muffled <- FALSE
[13:34:41.475]                       if (inherits(cond, "message")) {
[13:34:41.475]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:41.475]                         if (muffled) 
[13:34:41.475]                           invokeRestart("muffleMessage")
[13:34:41.475]                       }
[13:34:41.475]                       else if (inherits(cond, "warning")) {
[13:34:41.475]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:41.475]                         if (muffled) 
[13:34:41.475]                           invokeRestart("muffleWarning")
[13:34:41.475]                       }
[13:34:41.475]                       else if (inherits(cond, "condition")) {
[13:34:41.475]                         if (!is.null(pattern)) {
[13:34:41.475]                           computeRestarts <- base::computeRestarts
[13:34:41.475]                           grepl <- base::grepl
[13:34:41.475]                           restarts <- computeRestarts(cond)
[13:34:41.475]                           for (restart in restarts) {
[13:34:41.475]                             name <- restart$name
[13:34:41.475]                             if (is.null(name)) 
[13:34:41.475]                               next
[13:34:41.475]                             if (!grepl(pattern, name)) 
[13:34:41.475]                               next
[13:34:41.475]                             invokeRestart(restart)
[13:34:41.475]                             muffled <- TRUE
[13:34:41.475]                             break
[13:34:41.475]                           }
[13:34:41.475]                         }
[13:34:41.475]                       }
[13:34:41.475]                       invisible(muffled)
[13:34:41.475]                     }
[13:34:41.475]                     muffleCondition(cond, pattern = "^muffle")
[13:34:41.475]                   }
[13:34:41.475]                 }
[13:34:41.475]             }
[13:34:41.475]         }))
[13:34:41.475]     }, error = function(ex) {
[13:34:41.475]         base::structure(base::list(value = NULL, visible = NULL, 
[13:34:41.475]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:41.475]                 ...future.rng), started = ...future.startTime, 
[13:34:41.475]             finished = Sys.time(), session_uuid = NA_character_, 
[13:34:41.475]             version = "1.8"), class = "FutureResult")
[13:34:41.475]     }, finally = {
[13:34:41.475]         if (!identical(...future.workdir, getwd())) 
[13:34:41.475]             setwd(...future.workdir)
[13:34:41.475]         {
[13:34:41.475]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:34:41.475]                 ...future.oldOptions$nwarnings <- NULL
[13:34:41.475]             }
[13:34:41.475]             base::options(...future.oldOptions)
[13:34:41.475]             if (.Platform$OS.type == "windows") {
[13:34:41.475]                 old_names <- names(...future.oldEnvVars)
[13:34:41.475]                 envs <- base::Sys.getenv()
[13:34:41.475]                 names <- names(envs)
[13:34:41.475]                 common <- intersect(names, old_names)
[13:34:41.475]                 added <- setdiff(names, old_names)
[13:34:41.475]                 removed <- setdiff(old_names, names)
[13:34:41.475]                 changed <- common[...future.oldEnvVars[common] != 
[13:34:41.475]                   envs[common]]
[13:34:41.475]                 NAMES <- toupper(changed)
[13:34:41.475]                 args <- list()
[13:34:41.475]                 for (kk in seq_along(NAMES)) {
[13:34:41.475]                   name <- changed[[kk]]
[13:34:41.475]                   NAME <- NAMES[[kk]]
[13:34:41.475]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:41.475]                     next
[13:34:41.475]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:41.475]                 }
[13:34:41.475]                 NAMES <- toupper(added)
[13:34:41.475]                 for (kk in seq_along(NAMES)) {
[13:34:41.475]                   name <- added[[kk]]
[13:34:41.475]                   NAME <- NAMES[[kk]]
[13:34:41.475]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:41.475]                     next
[13:34:41.475]                   args[[name]] <- ""
[13:34:41.475]                 }
[13:34:41.475]                 NAMES <- toupper(removed)
[13:34:41.475]                 for (kk in seq_along(NAMES)) {
[13:34:41.475]                   name <- removed[[kk]]
[13:34:41.475]                   NAME <- NAMES[[kk]]
[13:34:41.475]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:41.475]                     next
[13:34:41.475]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:41.475]                 }
[13:34:41.475]                 if (length(args) > 0) 
[13:34:41.475]                   base::do.call(base::Sys.setenv, args = args)
[13:34:41.475]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:34:41.475]             }
[13:34:41.475]             else {
[13:34:41.475]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:34:41.475]             }
[13:34:41.475]             {
[13:34:41.475]                 if (base::length(...future.futureOptionsAdded) > 
[13:34:41.475]                   0L) {
[13:34:41.475]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:34:41.475]                   base::names(opts) <- ...future.futureOptionsAdded
[13:34:41.475]                   base::options(opts)
[13:34:41.475]                 }
[13:34:41.475]                 {
[13:34:41.475]                   {
[13:34:41.475]                     base::assign(".Random.seed", c(10403L, 10L, 
[13:34:41.475]                     735860579L, -635536383L, -634017936L, -1589842162L, 
[13:34:41.475]                     -442365575L, 1776434443L, 1545127482L, -1073341124L, 
[13:34:41.475]                     -42593665L, -264070699L, 259676140L, -406656702L, 
[13:34:41.475]                     762541725L, 1623876375L, 1802875518L, 1273938488L, 
[13:34:41.475]                     1338021147L, 281502329L, 1039179464L, 1875334902L, 
[13:34:41.475]                     -2059993295L, 1044051811L, 921857330L, 1336512132L, 
[13:34:41.475]                     1508600519L, -376993379L, 1250237716L, -1305381958L, 
[13:34:41.475]                     728241669L, 1930287071L, -1878839706L, 456129008L, 
[13:34:41.475]                     1317132051L, 673257649L, -800830624L, 972798206L, 
[13:34:41.475]                     2024663177L, -1210615877L, -445320822L, -363175828L, 
[13:34:41.475]                     -782171665L, -1335813595L, 1674981084L, -1442577230L, 
[13:34:41.475]                     -1964505171L, 2079144807L, 1704138894L, 1081267560L, 
[13:34:41.475]                     -1658059413L, -1598626039L, 1489836440L, 
[13:34:41.475]                     -1832812346L, 1399104033L, -678221133L, -84879326L, 
[13:34:41.475]                     934371860L, -640129385L, -988219251L, 1463885220L, 
[13:34:41.475]                     915758986L, -1509422091L, -346627505L, -1548495530L, 
[13:34:41.475]                     1538756608L, 985149763L, -393151263L, 27383376L, 
[13:34:41.475]                     -471962962L, 1419095641L, -222759317L, 897792986L, 
[13:34:41.475]                     924994716L, -40171873L, 893766901L, -515543668L, 
[13:34:41.475]                     -2117191582L, -832415683L, -1038048585L, 
[13:34:41.475]                     522676574L, 1560129688L, -1049117701L, -1382798951L, 
[13:34:41.475]                     -2037622232L, 1193343702L, -2146521263L, 
[13:34:41.475]                     2146365955L, 1066894738L, -1241300188L, 1112413671L, 
[13:34:41.475]                     1935335997L, 1079139508L, -12477670L, -2112704411L, 
[13:34:41.475]                     -1756989185L, -888637050L, -875884784L, -132506701L, 
[13:34:41.475]                     -1575315375L, -1482978304L, -459584290L, 
[13:34:41.475]                     -392716503L, 1557676763L, 388004330L, -504643188L, 
[13:34:41.475]                     -23992625L, 1787820677L, -885419716L, 448740370L, 
[13:34:41.475]                     1609044749L, 625074247L, -334949842L, -1600201848L, 
[13:34:41.475]                     185955979L, -258996119L, 292787256L, -1988471578L, 
[13:34:41.475]                     1806261377L, -380404717L, 379624386L, -879975308L, 
[13:34:41.475]                     1191778935L, -121568403L, 1488802820L, -145240278L, 
[13:34:41.475]                     -1682420587L, 924617519L, -1465132490L, 1388584544L, 
[13:34:41.475]                     94157987L, 2083755969L, -436329552L, -470399282L, 
[13:34:41.475]                     227873849L, -533435829L, -818397190L, -1672488196L, 
[13:34:41.475]                     413167423L, -851312619L, -887155924L, -790087678L, 
[13:34:41.475]                     -326565155L, 1567844823L, 510960830L, -1591927048L, 
[13:34:41.475]                     -584430373L, 916082489L, -573445496L, -1516974538L, 
[13:34:41.475]                     -2065121679L, 829234339L, -363588110L, -690481852L, 
[13:34:41.475]                     1968952839L, 1238488029L, -54805292L, -39164934L, 
[13:34:41.475]                     -1979673787L, 2112784287L, 1489276198L, -174926416L, 
[13:34:41.475]                     494063187L, -1014494863L, -1706991456L, -2140458946L, 
[13:34:41.475]                     -570271927L, 684735995L, -842931766L, -1232793812L, 
[13:34:41.475]                     -2068418769L, -29205019L, -20586340L, -1856158478L, 
[13:34:41.475]                     -1004880531L, 1390250663L, -2061228850L, 
[13:34:41.475]                     -1702622680L, -182592981L, 1325969481L, -1176080040L, 
[13:34:41.475]                     1298081798L, 125852129L, -1241799821L, -2140686366L, 
[13:34:41.475]                     -1096343724L, 1000526423L, 1445446221L, -787405340L, 
[13:34:41.475]                     -1220870198L, -2008890827L, 1513408655L, 
[13:34:41.475]                     1782004118L, -1627912896L, 2041501699L, 1777060385L, 
[13:34:41.475]                     1928006928L, 375423726L, 1851252377L, 1707368235L, 
[13:34:41.475]                     -241198566L, 202819804L, -671480609L, 1150354101L, 
[13:34:41.475]                     1476760652L, -737417054L, -700536835L, -918432521L, 
[13:34:41.475]                     2070856222L, -1581679400L, -1886502853L, 
[13:34:41.475]                     -1948988967L, -841175192L, -344972650L, 342141969L, 
[13:34:41.475]                     -1912930877L, -1101217326L, 479889508L, 142813095L, 
[13:34:41.475]                     1786194173L, 510196980L, 814898138L, 1850044197L, 
[13:34:41.475]                     -1351698881L, -1002914362L, -205858224L, 
[13:34:41.475]                     -79899021L, -578069871L, 1962615488L, -382689840L, 
[13:34:41.475]                     -259754142L, 946811624L, -1328606004L, 54644220L, 
[13:34:41.475]                     825063922L, -1402759552L, -1265416716L, 1838998152L, 
[13:34:41.475]                     -673876166L, -1932943536L, -2107827092L, 
[13:34:41.475]                     -2117898860L, 1908120658L, -201725472L, 692778188L, 
[13:34:41.475]                     -571064160L, 1095149954L, -859883288L, 1540403948L, 
[13:34:41.475]                     1307489596L, 634584178L, -1014274960L, 414559268L, 
[13:34:41.475]                     -1861615560L, -1141875942L, -1582900016L, 
[13:34:41.475]                     -527299780L, -2131953772L, 1489063810L, 1206134208L, 
[13:34:41.475]                     1188573756L, -149231216L, 1256270370L, 4197640L, 
[13:34:41.475]                     660331148L, -1404713188L, -745037678L, 377364864L, 
[13:34:41.475]                     -1979874796L, 1040302888L, -1578760646L, 
[13:34:41.475]                     -1151301168L, -834251412L, 1791058868L, 927386642L, 
[13:34:41.475]                     -467619360L, 664912844L, 922206432L, -2060953566L, 
[13:34:41.475]                     -1355092696L, -1886161396L, -1565658308L, 
[13:34:41.475]                     -1964506126L, 1711357680L, 1067940420L, 837639768L, 
[13:34:41.475]                     -1826114758L, -1653128720L, 828858044L, 386927892L, 
[13:34:41.475]                     -810058046L, 546431072L, 2037647228L, -1082319920L, 
[13:34:41.475]                     -1286206174L, -755964248L, -158643316L, -2057216836L, 
[13:34:41.475]                     -1323272398L, -1920888256L, 646318260L, 1488661064L, 
[13:34:41.475]                     758918586L, 320123408L, -247054612L, 481992020L, 
[13:34:41.475]                     -1010850542L, -1588700768L, 541818572L, 1833858656L, 
[13:34:41.475]                     -1261018174L, 1035191080L, 437033900L, 670129980L, 
[13:34:41.475]                     85241202L, -162062544L, -1293114076L, -1819309256L, 
[13:34:41.475]                     489340634L, -658246768L, -1854375172L, 1302500244L, 
[13:34:41.475]                     -1288454078L, 2002993408L, -1926155204L, 
[13:34:41.475]                     664548688L, -27209566L, 1912667464L, -265979124L, 
[13:34:41.475]                     224752348L, 1958347090L, -644890496L, -1809990572L, 
[13:34:41.475]                     1594354664L, 1312015610L, 1784176464L, 472002348L, 
[13:34:41.475]                     -538956428L, 2115424146L, 924171360L, -291142260L, 
[13:34:41.475]                     -1790330016L, -1767348766L, -298720344L, 
[13:34:41.475]                     -1272287028L, -41092100L, -1583165006L, -749593104L, 
[13:34:41.475]                     -1416024124L, -1962319528L, -292158086L, 
[13:34:41.475]                     -727453776L, -1141844548L, 2047808596L, 1871210434L, 
[13:34:41.475]                     1570088992L, 541305020L, -1924753840L, 1838526434L, 
[13:34:41.475]                     2011244648L, -1301159860L, -2029300484L, 
[13:34:41.475]                     -367101966L, 851819776L, -1572514444L, -2031220728L, 
[13:34:41.475]                     -1982319686L, 1709041104L, -398110740L, 1550822804L, 
[13:34:41.475]                     1469258194L, -871177888L, -565060788L, 404392224L, 
[13:34:41.475]                     450324354L, 156190440L, -117509908L, 1879009340L, 
[13:34:41.475]                     1350569842L, 1006100080L, -148169692L, -64288968L, 
[13:34:41.475]                     1726911642L, 1981981392L, -1110456132L, 896177812L, 
[13:34:41.475]                     1218821762L, -1182005056L, -1228218564L, 
[13:34:41.475]                     -185601904L, -1918978526L, 1812511752L, -701080308L, 
[13:34:41.475]                     327621788L, 1319907858L, 987349888L, -70683116L, 
[13:34:41.475]                     472004136L, -769811142L, 1100649936L, -1078431636L, 
[13:34:41.475]                     952575284L, 1436238482L, 1747097440L, -229437620L, 
[13:34:41.475]                     1221332960L, 2118437794L, 2023484328L, 2121898380L, 
[13:34:41.475]                     -2147302212L, -1820118670L, 647557360L, -162316220L, 
[13:34:41.475]                     -1858499240L, 374530618L, 2029100912L, -879006660L, 
[13:34:41.475]                     76974868L, 781211074L, -1843112224L, -743492740L, 
[13:34:41.475]                     -227208496L, 595334306L, -74487768L, 361433356L, 
[13:34:41.475]                     -758901828L, 1696613682L, 1317142976L, 1899950644L, 
[13:34:41.475]                     837699528L, 852092090L, -270476912L, -1283743252L, 
[13:34:41.475]                     516406868L, -2066223982L, -655672544L, -1199611444L, 
[13:34:41.475]                     1186315744L, -1428771134L, 563605544L, -515809620L, 
[13:34:41.475]                     -1538953028L, -1327835662L, 1538252080L, 
[13:34:41.475]                     1428096164L, -1520639304L, 489929050L, -912961136L, 
[13:34:41.475]                     974425980L, -332961516L, -1178357950L, 1364578048L, 
[13:34:41.475]                     -372513860L, 79444816L, -1199648990L, -1643748024L, 
[13:34:41.475]                     -101802174L, 1677180759L, 1518407329L, 1742298982L, 
[13:34:41.475]                     508041572L, -43565931L, -827181633L, 133372248L, 
[13:34:41.475]                     1541822326L, 1604478339L, -1408016443L, 819815650L, 
[13:34:41.475]                     -1765449392L, -470744967L, -1094515797L, 
[13:34:41.475]                     -266589924L, -1715413430L, -1661519297L, 
[13:34:41.475]                     -556732791L, -2062902626L, 1140598604L, -1268465891L, 
[13:34:41.475]                     -1519190361L, -64358960L, -1739887250L, 1270808603L, 
[13:34:41.475]                     -1059688067L, 337864554L, -360783352L, -696662351L, 
[13:34:41.475]                     1663025443L, -756526556L, -1090897710L, -150965977L, 
[13:34:41.475]                     476478321L, -887526986L, -1642561196L, 487981029L, 
[13:34:41.475]                     241949167L, 1330749736L, 942782854L, 1565894067L, 
[13:34:41.475]                     -1321146091L, 919772018L, 826521536L, -1353942999L, 
[13:34:41.475]                     -907889509L, -91631252L, 1846925690L, 1574288047L, 
[13:34:41.475]                     -137793095L, 537099214L, -710245604L, 1915148941L, 
[13:34:41.475]                     1860240119L, -1676892672L, 470810718L, 94346027L, 
[13:34:41.475]                     -1114892243L, -1361330022L, 615892056L, 1190708161L, 
[13:34:41.475]                     317140083L, -571615852L, -1360860126L, 519858999L, 
[13:34:41.475]                     -790090239L, 389136134L, -34614460L, 2136483445L, 
[13:34:41.475]                     -269453345L, -1124971720L, 235322646L, -638885597L, 
[13:34:41.475]                     191343333L, 1831527170L, 76736880L, 14270745L, 
[13:34:41.475]                     -2127699701L, -2119876100L, 2022808106L, 
[13:34:41.475]                     1648831071L, 881113577L, -294767874L, 2099346156L, 
[13:34:41.475]                     -1401566659L, -904697337L, 1511570928L, -798413426L, 
[13:34:41.475]                     -121457733L, -6623843L, 1853911882L, 742049640L, 
[13:34:41.475]                     1383311697L, 1750141507L, 6434628L, 1197163506L, 
[13:34:41.475]                     805984711L, 1112657809L, 710833942L, 1819067252L, 
[13:34:41.475]                     -910001659L, -306271665L, 903546440L, 1632233446L, 
[13:34:41.475]                     -1341052653L, 1250342517L, -933884846L, -1409104224L, 
[13:34:41.475]                     -1717902455L, 536461243L, 849412108L, -1953124966L, 
[13:34:41.475]                     1975766287L, -805924007L, 1933602286L, -1202435972L, 
[13:34:41.475]                     1536122093L, -719299689L, 1340933216L, -417323458L, 
[13:34:41.475]                     176877323L, -1741286003L, 250814138L, 1817881848L, 
[13:34:41.475]                     -2093921631L, 2087701075L, -1212631692L, 
[13:34:41.475]                     -884614398L, -1132917865L, 2142936417L, 1708342694L, 
[13:34:41.475]                     -734920796L, 2131782229L, 392510207L, 725499800L, 
[13:34:41.475]                     -270282570L, 1007072579L, 464663685L, 1338838306L, 
[13:34:41.475]                     401708560L, -1666910791L, -1120663957L, 1001716060L, 
[13:34:41.475]                     1972899978L, -1361872769L, 778058185L, 677919326L, 
[13:34:41.475]                     1433563404L, -268688163L, 692220391L, 182250000L, 
[13:34:41.475]                     -505788626L, -2057221157L, 1486834877L, 627510826L, 
[13:34:41.475]                     480469704L, -1110419471L, -300476061L, 930548068L, 
[13:34:41.475]                     -1861186414L, 913465703L, 499970865L, 1850521718L, 
[13:34:41.475]                     1057644948L, -1911945819L, 265485999L, 730572648L, 
[13:34:41.475]                     84593478L, 1593509460L), envir = base::globalenv(), 
[13:34:41.475]                       inherits = FALSE)
[13:34:41.475]                     NULL
[13:34:41.475]                   }
[13:34:41.475]                   options(future.plan = NULL)
[13:34:41.475]                   if (is.na(NA_character_)) 
[13:34:41.475]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:34:41.475]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:34:41.475]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:34:41.475]                     .init = FALSE)
[13:34:41.475]                 }
[13:34:41.475]             }
[13:34:41.475]         }
[13:34:41.475]     })
[13:34:41.475]     if (TRUE) {
[13:34:41.475]         base::sink(type = "output", split = FALSE)
[13:34:41.475]         if (TRUE) {
[13:34:41.475]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:34:41.475]         }
[13:34:41.475]         else {
[13:34:41.475]             ...future.result["stdout"] <- base::list(NULL)
[13:34:41.475]         }
[13:34:41.475]         base::close(...future.stdout)
[13:34:41.475]         ...future.stdout <- NULL
[13:34:41.475]     }
[13:34:41.475]     ...future.result$conditions <- ...future.conditions
[13:34:41.475]     ...future.result$finished <- base::Sys.time()
[13:34:41.475]     ...future.result
[13:34:41.475] }
[13:34:41.478] assign_globals() ...
[13:34:41.478] List of 5
[13:34:41.478]  $ ...future.FUN            :function (...)  
[13:34:41.478]  $ future.call.arguments    : list()
[13:34:41.478]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:41.478]  $ ...future.elements_ii    :List of 5
[13:34:41.478]   ..$ : int 0
[13:34:41.478]   ..$ : int 0
[13:34:41.478]   ..$ : int 0
[13:34:41.478]   ..$ : int 0
[13:34:41.478]   ..$ : int 0
[13:34:41.478]  $ ...future.seeds_ii       :List of 5
[13:34:41.478]   ..$ : int [1:7] 10407 1787869531 1529547935 -2008587823 -1848076983 1531603671 1321109784
[13:34:41.478]   ..$ : int [1:7] 10407 -694159621 1995829455 -1932841830 992176862 -1218006185 -1642354679
[13:34:41.478]   ..$ : int [1:7] 10407 -329832398 1821470702 1699250980 -1031196978 -1803110910 1967854227
[13:34:41.478]   ..$ : int [1:7] 10407 -2027961467 -1798625939 -241372396 1490188058 304858694 1371848659
[13:34:41.478]   ..$ : int [1:7] 10407 -823985153 -907826652 786606040 -961955337 -834515641 1386555278
[13:34:41.478]  $ ...future.globals.maxSize: NULL
[13:34:41.478]  - attr(*, "where")=List of 5
[13:34:41.478]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:34:41.478]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:34:41.478]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:34:41.478]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:34:41.478]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:34:41.478]  - attr(*, "resolved")= logi FALSE
[13:34:41.478]  - attr(*, "total_size")= num 616
[13:34:41.478]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:41.478]  - attr(*, "already-done")= logi TRUE
[13:34:41.485] - reassign environment for ‘...future.FUN’
[13:34:41.485] - copied ‘...future.FUN’ to environment
[13:34:41.485] - copied ‘future.call.arguments’ to environment
[13:34:41.485] - copied ‘...future.elements_ii’ to environment
[13:34:41.485] - copied ‘...future.seeds_ii’ to environment
[13:34:41.485] - copied ‘...future.globals.maxSize’ to environment
[13:34:41.485] assign_globals() ... done
[13:34:41.486] plan(): Setting new future strategy stack:
[13:34:41.486] List of future strategies:
[13:34:41.486] 1. sequential:
[13:34:41.486]    - args: function (..., envir = parent.frame())
[13:34:41.486]    - tweaked: FALSE
[13:34:41.486]    - call: NULL
[13:34:41.486] plan(): nbrOfWorkers() = 1
[13:34:41.487] plan(): Setting new future strategy stack:
[13:34:41.487] List of future strategies:
[13:34:41.487] 1. sequential:
[13:34:41.487]    - args: function (..., envir = parent.frame())
[13:34:41.487]    - tweaked: FALSE
[13:34:41.487]    - call: plan(strategy)
[13:34:41.488] plan(): nbrOfWorkers() = 1
[13:34:41.488] SequentialFuture started (and completed)
[13:34:41.488] - Launch lazy future ... done
[13:34:41.488] run() for ‘SequentialFuture’ ... done
[13:34:41.489] Created future:
[13:34:41.489] SequentialFuture:
[13:34:41.489] Label: ‘future_replicate-1’
[13:34:41.489] Expression:
[13:34:41.489] {
[13:34:41.489]     do.call(function(...) {
[13:34:41.489]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:41.489]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:41.489]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:41.489]             on.exit(options(oopts), add = TRUE)
[13:34:41.489]         }
[13:34:41.489]         {
[13:34:41.489]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:41.489]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:41.489]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:41.489]                   envir = globalenv(), inherits = FALSE)
[13:34:41.489]                 ...future.FUN(...future.X_jj, ...)
[13:34:41.489]             })
[13:34:41.489]         }
[13:34:41.489]     }, args = future.call.arguments)
[13:34:41.489] }
[13:34:41.489] Lazy evaluation: FALSE
[13:34:41.489] Asynchronous evaluation: FALSE
[13:34:41.489] Local evaluation: TRUE
[13:34:41.489] Environment: R_GlobalEnv
[13:34:41.489] Capture standard output: TRUE
[13:34:41.489] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:34:41.489] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:34:41.489] Packages: <none>
[13:34:41.489] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:34:41.489] Resolved: TRUE
[13:34:41.489] Value: 280 bytes of class ‘list’
[13:34:41.489] Early signaling: FALSE
[13:34:41.489] Owner process: b8cf10c3-b112-c8f9-9398-a44000e21728
[13:34:41.489] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:34:41.490] Chunk #1 of 1 ... DONE
[13:34:41.490] Launching 1 futures (chunks) ... DONE
[13:34:41.490] Resolving 1 futures (chunks) ...
[13:34:41.490] resolve() on list ...
[13:34:41.491]  recursive: 0
[13:34:41.491]  length: 1
[13:34:41.491] 
[13:34:41.491] resolved() for ‘SequentialFuture’ ...
[13:34:41.491] - state: ‘finished’
[13:34:41.491] - run: TRUE
[13:34:41.491] - result: ‘FutureResult’
[13:34:41.491] resolved() for ‘SequentialFuture’ ... done
[13:34:41.491] Future #1
[13:34:41.492] signalConditionsASAP(SequentialFuture, pos=1) ...
[13:34:41.492] - nx: 1
[13:34:41.492] - relay: TRUE
[13:34:41.492] - stdout: TRUE
[13:34:41.492] - signal: TRUE
[13:34:41.492] - resignal: FALSE
[13:34:41.492] - force: TRUE
[13:34:41.492] - relayed: [n=1] FALSE
[13:34:41.492] - queued futures: [n=1] FALSE
[13:34:41.493]  - until=1
[13:34:41.493]  - relaying element #1
[13:34:41.493] - relayed: [n=1] TRUE
[13:34:41.493] - queued futures: [n=1] TRUE
[13:34:41.493] signalConditionsASAP(SequentialFuture, pos=1) ... done
[13:34:41.493]  length: 0 (resolved future 1)
[13:34:41.493] Relaying remaining futures
[13:34:41.493] signalConditionsASAP(NULL, pos=0) ...
[13:34:41.493] - nx: 1
[13:34:41.494] - relay: TRUE
[13:34:41.494] - stdout: TRUE
[13:34:41.494] - signal: TRUE
[13:34:41.494] - resignal: FALSE
[13:34:41.494] - force: TRUE
[13:34:41.494] - relayed: [n=1] TRUE
[13:34:41.494] - queued futures: [n=1] TRUE
 - flush all
[13:34:41.494] - relayed: [n=1] TRUE
[13:34:41.494] - queued futures: [n=1] TRUE
[13:34:41.494] signalConditionsASAP(NULL, pos=0) ... done
[13:34:41.494] resolve() on list ... DONE
[13:34:41.495]  - Number of value chunks collected: 1
[13:34:41.495] Resolving 1 futures (chunks) ... DONE
[13:34:41.495] Reducing values from 1 chunks ...
[13:34:41.495]  - Number of values collected after concatenation: 5
[13:34:41.495]  - Number of values expected: 5
[13:34:41.495] Reducing values from 1 chunks ... DONE
[13:34:41.495] future_lapply() ... DONE
[13:34:41.495] future_lapply() ...
[13:34:41.496] Generating random seeds ...
[13:34:41.496] Generating random seed streams for 5 elements ...
[13:34:41.496] Generating random seed streams for 5 elements ... DONE
[13:34:41.496] Generating random seeds ... DONE
[13:34:41.496] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:34:41.497] Number of chunks: 1
[13:34:41.497] getGlobalsAndPackagesXApply() ...
[13:34:41.497]  - future.globals: TRUE
[13:34:41.497] getGlobalsAndPackages() ...
[13:34:41.497] Searching for globals...
[13:34:41.499] - globals found: [2] ‘FUN’, ‘sample’
[13:34:41.499] Searching for globals ... DONE
[13:34:41.500] Resolving globals: FALSE
[13:34:41.500] The total size of the 1 globals is 616 bytes (616 bytes)
[13:34:41.500] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:34:41.500] - globals: [1] ‘FUN’
[13:34:41.500] 
[13:34:41.501] getGlobalsAndPackages() ... DONE
[13:34:41.501]  - globals found/used: [n=1] ‘FUN’
[13:34:41.501]  - needed namespaces: [n=0] 
[13:34:41.501] Finding globals ... DONE
[13:34:41.501]  - use_args: TRUE
[13:34:41.501]  - Getting '...' globals ...
[13:34:41.501] resolve() on list ...
[13:34:41.501]  recursive: 0
[13:34:41.501]  length: 1
[13:34:41.502]  elements: ‘...’
[13:34:41.502]  length: 0 (resolved future 1)
[13:34:41.502] resolve() on list ... DONE
[13:34:41.502]    - '...' content: [n=0] 
[13:34:41.502] List of 1
[13:34:41.502]  $ ...: list()
[13:34:41.502]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:41.502]  - attr(*, "where")=List of 1
[13:34:41.502]   ..$ ...:<environment: 0x5627bf89a988> 
[13:34:41.502]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:41.502]  - attr(*, "resolved")= logi TRUE
[13:34:41.502]  - attr(*, "total_size")= num NA
[13:34:41.504]  - Getting '...' globals ... DONE
[13:34:41.504] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:34:41.504] List of 2
[13:34:41.504]  $ ...future.FUN:function (...)  
[13:34:41.504]  $ ...          : list()
[13:34:41.504]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:41.504]  - attr(*, "where")=List of 2
[13:34:41.504]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:34:41.504]   ..$ ...          :<environment: 0x5627bf89a988> 
[13:34:41.504]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:41.504]  - attr(*, "resolved")= logi FALSE
[13:34:41.504]  - attr(*, "total_size")= num 616
[13:34:41.507] Packages to be attached in all futures: [n=0] 
[13:34:41.507] getGlobalsAndPackagesXApply() ... DONE
[13:34:41.507] Number of futures (= number of chunks): 1
[13:34:41.507] Launching 1 futures (chunks) ...
[13:34:41.507] Chunk #1 of 1 ...
[13:34:41.508]  - Finding globals in 'X' for chunk #1 ...
[13:34:41.508] getGlobalsAndPackages() ...
[13:34:41.508] Searching for globals...
[13:34:41.508] 
[13:34:41.508] Searching for globals ... DONE
[13:34:41.508] - globals: [0] <none>
[13:34:41.508] getGlobalsAndPackages() ... DONE
[13:34:41.508]    + additional globals found: [n=0] 
[13:34:41.508]    + additional namespaces needed: [n=0] 
[13:34:41.508]  - Finding globals in 'X' for chunk #1 ... DONE
[13:34:41.509]  - seeds: [5] <seeds>
[13:34:41.509]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:41.509] getGlobalsAndPackages() ...
[13:34:41.509] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:41.509] Resolving globals: FALSE
[13:34:41.509] Tweak future expression to call with '...' arguments ...
[13:34:41.509] {
[13:34:41.509]     do.call(function(...) {
[13:34:41.509]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:41.509]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:41.509]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:41.509]             on.exit(options(oopts), add = TRUE)
[13:34:41.509]         }
[13:34:41.509]         {
[13:34:41.509]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:41.509]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:41.509]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:41.509]                   envir = globalenv(), inherits = FALSE)
[13:34:41.509]                 ...future.FUN(...future.X_jj, ...)
[13:34:41.509]             })
[13:34:41.509]         }
[13:34:41.509]     }, args = future.call.arguments)
[13:34:41.509] }
[13:34:41.509] Tweak future expression to call with '...' arguments ... DONE
[13:34:41.510] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:41.510] 
[13:34:41.510] getGlobalsAndPackages() ... DONE
[13:34:41.510] run() for ‘Future’ ...
[13:34:41.510] - state: ‘created’
[13:34:41.510] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:34:41.511] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:34:41.511] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:34:41.511]   - Field: ‘label’
[13:34:41.511]   - Field: ‘local’
[13:34:41.511]   - Field: ‘owner’
[13:34:41.511]   - Field: ‘envir’
[13:34:41.511]   - Field: ‘packages’
[13:34:41.511]   - Field: ‘gc’
[13:34:41.511]   - Field: ‘conditions’
[13:34:41.512]   - Field: ‘expr’
[13:34:41.512]   - Field: ‘uuid’
[13:34:41.512]   - Field: ‘seed’
[13:34:41.512]   - Field: ‘version’
[13:34:41.512]   - Field: ‘result’
[13:34:41.512]   - Field: ‘asynchronous’
[13:34:41.512]   - Field: ‘calls’
[13:34:41.512]   - Field: ‘globals’
[13:34:41.512]   - Field: ‘stdout’
[13:34:41.512]   - Field: ‘earlySignal’
[13:34:41.512]   - Field: ‘lazy’
[13:34:41.512]   - Field: ‘state’
[13:34:41.513] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:34:41.513] - Launch lazy future ...
[13:34:41.513] Packages needed by the future expression (n = 0): <none>
[13:34:41.513] Packages needed by future strategies (n = 0): <none>
[13:34:41.513] {
[13:34:41.513]     {
[13:34:41.513]         {
[13:34:41.513]             ...future.startTime <- base::Sys.time()
[13:34:41.513]             {
[13:34:41.513]                 {
[13:34:41.513]                   {
[13:34:41.513]                     base::local({
[13:34:41.513]                       has_future <- base::requireNamespace("future", 
[13:34:41.513]                         quietly = TRUE)
[13:34:41.513]                       if (has_future) {
[13:34:41.513]                         ns <- base::getNamespace("future")
[13:34:41.513]                         version <- ns[[".package"]][["version"]]
[13:34:41.513]                         if (is.null(version)) 
[13:34:41.513]                           version <- utils::packageVersion("future")
[13:34:41.513]                       }
[13:34:41.513]                       else {
[13:34:41.513]                         version <- NULL
[13:34:41.513]                       }
[13:34:41.513]                       if (!has_future || version < "1.8.0") {
[13:34:41.513]                         info <- base::c(r_version = base::gsub("R version ", 
[13:34:41.513]                           "", base::R.version$version.string), 
[13:34:41.513]                           platform = base::sprintf("%s (%s-bit)", 
[13:34:41.513]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:34:41.513]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:34:41.513]                             "release", "version")], collapse = " "), 
[13:34:41.513]                           hostname = base::Sys.info()[["nodename"]])
[13:34:41.513]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:34:41.513]                           info)
[13:34:41.513]                         info <- base::paste(info, collapse = "; ")
[13:34:41.513]                         if (!has_future) {
[13:34:41.513]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:34:41.513]                             info)
[13:34:41.513]                         }
[13:34:41.513]                         else {
[13:34:41.513]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:34:41.513]                             info, version)
[13:34:41.513]                         }
[13:34:41.513]                         base::stop(msg)
[13:34:41.513]                       }
[13:34:41.513]                     })
[13:34:41.513]                   }
[13:34:41.513]                   ...future.strategy.old <- future::plan("list")
[13:34:41.513]                   options(future.plan = NULL)
[13:34:41.513]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:34:41.513]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:34:41.513]                 }
[13:34:41.513]                 ...future.workdir <- getwd()
[13:34:41.513]             }
[13:34:41.513]             ...future.oldOptions <- base::as.list(base::.Options)
[13:34:41.513]             ...future.oldEnvVars <- base::Sys.getenv()
[13:34:41.513]         }
[13:34:41.513]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:34:41.513]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:34:41.513]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:34:41.513]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:34:41.513]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:34:41.513]             future.stdout.windows.reencode = NULL, width = 80L)
[13:34:41.513]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:34:41.513]             base::names(...future.oldOptions))
[13:34:41.513]     }
[13:34:41.513]     if (FALSE) {
[13:34:41.513]     }
[13:34:41.513]     else {
[13:34:41.513]         if (TRUE) {
[13:34:41.513]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:34:41.513]                 open = "w")
[13:34:41.513]         }
[13:34:41.513]         else {
[13:34:41.513]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:34:41.513]                 windows = "NUL", "/dev/null"), open = "w")
[13:34:41.513]         }
[13:34:41.513]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:34:41.513]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:34:41.513]             base::sink(type = "output", split = FALSE)
[13:34:41.513]             base::close(...future.stdout)
[13:34:41.513]         }, add = TRUE)
[13:34:41.513]     }
[13:34:41.513]     ...future.frame <- base::sys.nframe()
[13:34:41.513]     ...future.conditions <- base::list()
[13:34:41.513]     ...future.rng <- base::globalenv()$.Random.seed
[13:34:41.513]     if (FALSE) {
[13:34:41.513]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:34:41.513]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:34:41.513]     }
[13:34:41.513]     ...future.result <- base::tryCatch({
[13:34:41.513]         base::withCallingHandlers({
[13:34:41.513]             ...future.value <- base::withVisible(base::local({
[13:34:41.513]                 do.call(function(...) {
[13:34:41.513]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:41.513]                   if (!identical(...future.globals.maxSize.org, 
[13:34:41.513]                     ...future.globals.maxSize)) {
[13:34:41.513]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:41.513]                     on.exit(options(oopts), add = TRUE)
[13:34:41.513]                   }
[13:34:41.513]                   {
[13:34:41.513]                     lapply(seq_along(...future.elements_ii), 
[13:34:41.513]                       FUN = function(jj) {
[13:34:41.513]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:41.513]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:41.513]                           envir = globalenv(), inherits = FALSE)
[13:34:41.513]                         ...future.FUN(...future.X_jj, ...)
[13:34:41.513]                       })
[13:34:41.513]                   }
[13:34:41.513]                 }, args = future.call.arguments)
[13:34:41.513]             }))
[13:34:41.513]             future::FutureResult(value = ...future.value$value, 
[13:34:41.513]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:41.513]                   ...future.rng), globalenv = if (FALSE) 
[13:34:41.513]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:34:41.513]                     ...future.globalenv.names))
[13:34:41.513]                 else NULL, started = ...future.startTime, version = "1.8")
[13:34:41.513]         }, condition = base::local({
[13:34:41.513]             c <- base::c
[13:34:41.513]             inherits <- base::inherits
[13:34:41.513]             invokeRestart <- base::invokeRestart
[13:34:41.513]             length <- base::length
[13:34:41.513]             list <- base::list
[13:34:41.513]             seq.int <- base::seq.int
[13:34:41.513]             signalCondition <- base::signalCondition
[13:34:41.513]             sys.calls <- base::sys.calls
[13:34:41.513]             `[[` <- base::`[[`
[13:34:41.513]             `+` <- base::`+`
[13:34:41.513]             `<<-` <- base::`<<-`
[13:34:41.513]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:34:41.513]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:34:41.513]                   3L)]
[13:34:41.513]             }
[13:34:41.513]             function(cond) {
[13:34:41.513]                 is_error <- inherits(cond, "error")
[13:34:41.513]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:34:41.513]                   NULL)
[13:34:41.513]                 if (is_error) {
[13:34:41.513]                   sessionInformation <- function() {
[13:34:41.513]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:34:41.513]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:34:41.513]                       search = base::search(), system = base::Sys.info())
[13:34:41.513]                   }
[13:34:41.513]                   ...future.conditions[[length(...future.conditions) + 
[13:34:41.513]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:34:41.513]                     cond$call), session = sessionInformation(), 
[13:34:41.513]                     timestamp = base::Sys.time(), signaled = 0L)
[13:34:41.513]                   signalCondition(cond)
[13:34:41.513]                 }
[13:34:41.513]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:34:41.513]                 "immediateCondition"))) {
[13:34:41.513]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:34:41.513]                   ...future.conditions[[length(...future.conditions) + 
[13:34:41.513]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:34:41.513]                   if (TRUE && !signal) {
[13:34:41.513]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:41.513]                     {
[13:34:41.513]                       inherits <- base::inherits
[13:34:41.513]                       invokeRestart <- base::invokeRestart
[13:34:41.513]                       is.null <- base::is.null
[13:34:41.513]                       muffled <- FALSE
[13:34:41.513]                       if (inherits(cond, "message")) {
[13:34:41.513]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:41.513]                         if (muffled) 
[13:34:41.513]                           invokeRestart("muffleMessage")
[13:34:41.513]                       }
[13:34:41.513]                       else if (inherits(cond, "warning")) {
[13:34:41.513]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:41.513]                         if (muffled) 
[13:34:41.513]                           invokeRestart("muffleWarning")
[13:34:41.513]                       }
[13:34:41.513]                       else if (inherits(cond, "condition")) {
[13:34:41.513]                         if (!is.null(pattern)) {
[13:34:41.513]                           computeRestarts <- base::computeRestarts
[13:34:41.513]                           grepl <- base::grepl
[13:34:41.513]                           restarts <- computeRestarts(cond)
[13:34:41.513]                           for (restart in restarts) {
[13:34:41.513]                             name <- restart$name
[13:34:41.513]                             if (is.null(name)) 
[13:34:41.513]                               next
[13:34:41.513]                             if (!grepl(pattern, name)) 
[13:34:41.513]                               next
[13:34:41.513]                             invokeRestart(restart)
[13:34:41.513]                             muffled <- TRUE
[13:34:41.513]                             break
[13:34:41.513]                           }
[13:34:41.513]                         }
[13:34:41.513]                       }
[13:34:41.513]                       invisible(muffled)
[13:34:41.513]                     }
[13:34:41.513]                     muffleCondition(cond, pattern = "^muffle")
[13:34:41.513]                   }
[13:34:41.513]                 }
[13:34:41.513]                 else {
[13:34:41.513]                   if (TRUE) {
[13:34:41.513]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:41.513]                     {
[13:34:41.513]                       inherits <- base::inherits
[13:34:41.513]                       invokeRestart <- base::invokeRestart
[13:34:41.513]                       is.null <- base::is.null
[13:34:41.513]                       muffled <- FALSE
[13:34:41.513]                       if (inherits(cond, "message")) {
[13:34:41.513]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:41.513]                         if (muffled) 
[13:34:41.513]                           invokeRestart("muffleMessage")
[13:34:41.513]                       }
[13:34:41.513]                       else if (inherits(cond, "warning")) {
[13:34:41.513]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:41.513]                         if (muffled) 
[13:34:41.513]                           invokeRestart("muffleWarning")
[13:34:41.513]                       }
[13:34:41.513]                       else if (inherits(cond, "condition")) {
[13:34:41.513]                         if (!is.null(pattern)) {
[13:34:41.513]                           computeRestarts <- base::computeRestarts
[13:34:41.513]                           grepl <- base::grepl
[13:34:41.513]                           restarts <- computeRestarts(cond)
[13:34:41.513]                           for (restart in restarts) {
[13:34:41.513]                             name <- restart$name
[13:34:41.513]                             if (is.null(name)) 
[13:34:41.513]                               next
[13:34:41.513]                             if (!grepl(pattern, name)) 
[13:34:41.513]                               next
[13:34:41.513]                             invokeRestart(restart)
[13:34:41.513]                             muffled <- TRUE
[13:34:41.513]                             break
[13:34:41.513]                           }
[13:34:41.513]                         }
[13:34:41.513]                       }
[13:34:41.513]                       invisible(muffled)
[13:34:41.513]                     }
[13:34:41.513]                     muffleCondition(cond, pattern = "^muffle")
[13:34:41.513]                   }
[13:34:41.513]                 }
[13:34:41.513]             }
[13:34:41.513]         }))
[13:34:41.513]     }, error = function(ex) {
[13:34:41.513]         base::structure(base::list(value = NULL, visible = NULL, 
[13:34:41.513]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:41.513]                 ...future.rng), started = ...future.startTime, 
[13:34:41.513]             finished = Sys.time(), session_uuid = NA_character_, 
[13:34:41.513]             version = "1.8"), class = "FutureResult")
[13:34:41.513]     }, finally = {
[13:34:41.513]         if (!identical(...future.workdir, getwd())) 
[13:34:41.513]             setwd(...future.workdir)
[13:34:41.513]         {
[13:34:41.513]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:34:41.513]                 ...future.oldOptions$nwarnings <- NULL
[13:34:41.513]             }
[13:34:41.513]             base::options(...future.oldOptions)
[13:34:41.513]             if (.Platform$OS.type == "windows") {
[13:34:41.513]                 old_names <- names(...future.oldEnvVars)
[13:34:41.513]                 envs <- base::Sys.getenv()
[13:34:41.513]                 names <- names(envs)
[13:34:41.513]                 common <- intersect(names, old_names)
[13:34:41.513]                 added <- setdiff(names, old_names)
[13:34:41.513]                 removed <- setdiff(old_names, names)
[13:34:41.513]                 changed <- common[...future.oldEnvVars[common] != 
[13:34:41.513]                   envs[common]]
[13:34:41.513]                 NAMES <- toupper(changed)
[13:34:41.513]                 args <- list()
[13:34:41.513]                 for (kk in seq_along(NAMES)) {
[13:34:41.513]                   name <- changed[[kk]]
[13:34:41.513]                   NAME <- NAMES[[kk]]
[13:34:41.513]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:41.513]                     next
[13:34:41.513]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:41.513]                 }
[13:34:41.513]                 NAMES <- toupper(added)
[13:34:41.513]                 for (kk in seq_along(NAMES)) {
[13:34:41.513]                   name <- added[[kk]]
[13:34:41.513]                   NAME <- NAMES[[kk]]
[13:34:41.513]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:41.513]                     next
[13:34:41.513]                   args[[name]] <- ""
[13:34:41.513]                 }
[13:34:41.513]                 NAMES <- toupper(removed)
[13:34:41.513]                 for (kk in seq_along(NAMES)) {
[13:34:41.513]                   name <- removed[[kk]]
[13:34:41.513]                   NAME <- NAMES[[kk]]
[13:34:41.513]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:41.513]                     next
[13:34:41.513]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:41.513]                 }
[13:34:41.513]                 if (length(args) > 0) 
[13:34:41.513]                   base::do.call(base::Sys.setenv, args = args)
[13:34:41.513]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:34:41.513]             }
[13:34:41.513]             else {
[13:34:41.513]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:34:41.513]             }
[13:34:41.513]             {
[13:34:41.513]                 if (base::length(...future.futureOptionsAdded) > 
[13:34:41.513]                   0L) {
[13:34:41.513]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:34:41.513]                   base::names(opts) <- ...future.futureOptionsAdded
[13:34:41.513]                   base::options(opts)
[13:34:41.513]                 }
[13:34:41.513]                 {
[13:34:41.513]                   {
[13:34:41.513]                     base::assign(".Random.seed", c(10403L, 2L, 
[13:34:41.513]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[13:34:41.513]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[13:34:41.513]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[13:34:41.513]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[13:34:41.513]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[13:34:41.513]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[13:34:41.513]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[13:34:41.513]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[13:34:41.513]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[13:34:41.513]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[13:34:41.513]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[13:34:41.513]                     -1512233174L, -1985955764L, -425390065L, 
[13:34:41.513]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[13:34:41.513]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[13:34:41.513]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[13:34:41.513]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[13:34:41.513]                     1818328109L, -1284085436L, -1981489558L, 
[13:34:41.513]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[13:34:41.513]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[13:34:41.513]                     -1718567047L, -793788661L, -1133789126L, 
[13:34:41.513]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[13:34:41.513]                     -1823521982L, -1345991523L, -1672661737L, 
[13:34:41.513]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[13:34:41.513]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[13:34:41.513]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[13:34:41.513]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[13:34:41.513]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[13:34:41.513]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[13:34:41.513]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[13:34:41.513]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[13:34:41.513]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[13:34:41.513]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[13:34:41.513]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[13:34:41.513]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[13:34:41.513]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[13:34:41.513]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[13:34:41.513]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[13:34:41.513]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[13:34:41.513]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[13:34:41.513]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[13:34:41.513]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[13:34:41.513]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[13:34:41.513]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[13:34:41.513]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[13:34:41.513]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[13:34:41.513]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[13:34:41.513]                     -1119334354L, -1521015416L, -2041922421L, 
[13:34:41.513]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[13:34:41.513]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[13:34:41.513]                     1232111981L, -1801753084L, -1608606422L, 
[13:34:41.513]                     -1172096363L, 1420874031L, -1210473418L, 
[13:34:41.513]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[13:34:41.513]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[13:34:41.513]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[13:34:41.513]                     679371266L, -591318819L, -104578089L, -172818754L, 
[13:34:41.513]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[13:34:41.513]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[13:34:41.513]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[13:34:41.513]                     -332493318L, -1978392251L, -1691039632L, 
[13:34:41.513]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[13:34:41.513]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[13:34:41.513]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[13:34:41.513]                     87560756L, -87565624L, 426345146L, -699970416L, 
[13:34:41.513]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[13:34:41.513]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[13:34:41.513]                     -1178330196L, -687617348L, -1701912078L, 
[13:34:41.513]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[13:34:41.513]                     -1345416048L, 1816730492L, -1570431212L, 
[13:34:41.513]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[13:34:41.513]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[13:34:41.513]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[13:34:41.513]                     -1493184262L, -1943836976L, -590788308L, 
[13:34:41.513]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[13:34:41.513]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[13:34:41.513]                     1274857340L, -1205842638L, -1938479504L, 
[13:34:41.513]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[13:34:41.513]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[13:34:41.513]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[13:34:41.513]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[13:34:41.513]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[13:34:41.513]                     -1460751252L, 1201879444L, -1459788718L, 
[13:34:41.513]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[13:34:41.513]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[13:34:41.513]                     -420945808L, -1997735900L, -1838404552L, 
[13:34:41.513]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[13:34:41.513]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[13:34:41.513]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[13:34:41.513]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[13:34:41.513]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[13:34:41.513]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[13:34:41.513]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[13:34:41.513]                     942193650L, 751741680L, 689743428L, -18455976L, 
[13:34:41.513]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[13:34:41.513]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[13:34:41.513]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[13:34:41.513]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[13:34:41.513]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[13:34:41.513]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[13:34:41.513]                     -1357570110L, 1896595240L, -2066952276L, 
[13:34:41.513]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[13:34:41.513]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[13:34:41.513]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[13:34:41.513]                     769655120L, 236357794L, 181393736L, -13334772L, 
[13:34:41.513]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[13:34:41.513]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[13:34:41.513]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[13:34:41.513]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[13:34:41.513]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[13:34:41.513]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[13:34:41.513]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[13:34:41.513]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[13:34:41.513]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[13:34:41.513]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[13:34:41.513]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[13:34:41.513]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[13:34:41.513]                     -1365842884L, -438961294L, -1851472272L, 
[13:34:41.513]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[13:34:41.513]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[13:34:41.513]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[13:34:41.513]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[13:34:41.513]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[13:34:41.513]                     -594809770L, -2146766621L, -2013964635L, 
[13:34:41.513]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[13:34:41.513]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[13:34:41.513]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[13:34:41.513]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[13:34:41.513]                     -1426021878L, -1285634264L, 1507547537L, 
[13:34:41.513]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[13:34:41.513]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[13:34:41.513]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[13:34:41.513]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[13:34:41.513]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[13:34:41.513]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[13:34:41.513]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[13:34:41.513]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[13:34:41.513]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[13:34:41.513]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[13:34:41.513]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[13:34:41.513]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[13:34:41.513]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[13:34:41.513]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[13:34:41.513]                     -1604604761L, 1421229008L, -1268333714L, 
[13:34:41.513]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[13:34:41.513]                     -2070476623L, -2099222749L, 1141171236L, 
[13:34:41.513]                     -146426158L, -1797385433L, -1129376399L, 
[13:34:41.513]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[13:34:41.513]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[13:34:41.513]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[13:34:41.513]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[13:34:41.513]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[13:34:41.513]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[13:34:41.513]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[13:34:41.513]                     -1092079724L, -1765622238L, -1882554057L, 
[13:34:41.513]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[13:34:41.513]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[13:34:41.513]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[13:34:41.513]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[13:34:41.513]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[13:34:41.513]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[13:34:41.513]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[13:34:41.513]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[13:34:41.513]                     865377681L, -1127426242L), envir = base::globalenv(), 
[13:34:41.513]                       inherits = FALSE)
[13:34:41.513]                     NULL
[13:34:41.513]                   }
[13:34:41.513]                   options(future.plan = NULL)
[13:34:41.513]                   if (is.na(NA_character_)) 
[13:34:41.513]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:34:41.513]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:34:41.513]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:34:41.513]                     .init = FALSE)
[13:34:41.513]                 }
[13:34:41.513]             }
[13:34:41.513]         }
[13:34:41.513]     })
[13:34:41.513]     if (TRUE) {
[13:34:41.513]         base::sink(type = "output", split = FALSE)
[13:34:41.513]         if (TRUE) {
[13:34:41.513]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:34:41.513]         }
[13:34:41.513]         else {
[13:34:41.513]             ...future.result["stdout"] <- base::list(NULL)
[13:34:41.513]         }
[13:34:41.513]         base::close(...future.stdout)
[13:34:41.513]         ...future.stdout <- NULL
[13:34:41.513]     }
[13:34:41.513]     ...future.result$conditions <- ...future.conditions
[13:34:41.513]     ...future.result$finished <- base::Sys.time()
[13:34:41.513]     ...future.result
[13:34:41.513] }
[13:34:41.516] assign_globals() ...
[13:34:41.516] List of 5
[13:34:41.516]  $ ...future.FUN            :function (...)  
[13:34:41.516]  $ future.call.arguments    : list()
[13:34:41.516]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:41.516]  $ ...future.elements_ii    :List of 5
[13:34:41.516]   ..$ : int 0
[13:34:41.516]   ..$ : int 0
[13:34:41.516]   ..$ : int 0
[13:34:41.516]   ..$ : int 0
[13:34:41.516]   ..$ : int 0
[13:34:41.516]  $ ...future.seeds_ii       :List of 5
[13:34:41.516]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[13:34:41.516]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[13:34:41.516]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[13:34:41.516]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[13:34:41.516]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[13:34:41.516]  $ ...future.globals.maxSize: NULL
[13:34:41.516]  - attr(*, "where")=List of 5
[13:34:41.516]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:34:41.516]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:34:41.516]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:34:41.516]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:34:41.516]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:34:41.516]  - attr(*, "resolved")= logi FALSE
[13:34:41.516]  - attr(*, "total_size")= num 616
[13:34:41.516]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:41.516]  - attr(*, "already-done")= logi TRUE
[13:34:41.524] - reassign environment for ‘...future.FUN’
[13:34:41.524] - copied ‘...future.FUN’ to environment
[13:34:41.524] - copied ‘future.call.arguments’ to environment
[13:34:41.524] - copied ‘...future.elements_ii’ to environment
[13:34:41.524] - copied ‘...future.seeds_ii’ to environment
[13:34:41.524] - copied ‘...future.globals.maxSize’ to environment
[13:34:41.524] assign_globals() ... done
[13:34:41.525] plan(): Setting new future strategy stack:
[13:34:41.525] List of future strategies:
[13:34:41.525] 1. sequential:
[13:34:41.525]    - args: function (..., envir = parent.frame())
[13:34:41.525]    - tweaked: FALSE
[13:34:41.525]    - call: NULL
[13:34:41.525] plan(): nbrOfWorkers() = 1
[13:34:41.526] plan(): Setting new future strategy stack:
[13:34:41.526] List of future strategies:
[13:34:41.526] 1. sequential:
[13:34:41.526]    - args: function (..., envir = parent.frame())
[13:34:41.526]    - tweaked: FALSE
[13:34:41.526]    - call: plan(strategy)
[13:34:41.526] plan(): nbrOfWorkers() = 1
[13:34:41.526] SequentialFuture started (and completed)
[13:34:41.526] - Launch lazy future ... done
[13:34:41.527] run() for ‘SequentialFuture’ ... done
[13:34:41.527] Created future:
[13:34:41.527] SequentialFuture:
[13:34:41.527] Label: ‘future_replicate-1’
[13:34:41.527] Expression:
[13:34:41.527] {
[13:34:41.527]     do.call(function(...) {
[13:34:41.527]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:41.527]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:41.527]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:41.527]             on.exit(options(oopts), add = TRUE)
[13:34:41.527]         }
[13:34:41.527]         {
[13:34:41.527]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:41.527]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:41.527]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:41.527]                   envir = globalenv(), inherits = FALSE)
[13:34:41.527]                 ...future.FUN(...future.X_jj, ...)
[13:34:41.527]             })
[13:34:41.527]         }
[13:34:41.527]     }, args = future.call.arguments)
[13:34:41.527] }
[13:34:41.527] Lazy evaluation: FALSE
[13:34:41.527] Asynchronous evaluation: FALSE
[13:34:41.527] Local evaluation: TRUE
[13:34:41.527] Environment: R_GlobalEnv
[13:34:41.527] Capture standard output: TRUE
[13:34:41.527] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:34:41.527] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:34:41.527] Packages: <none>
[13:34:41.527] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:34:41.527] Resolved: TRUE
[13:34:41.527] Value: 280 bytes of class ‘list’
[13:34:41.527] Early signaling: FALSE
[13:34:41.527] Owner process: b8cf10c3-b112-c8f9-9398-a44000e21728
[13:34:41.527] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:34:41.528] Chunk #1 of 1 ... DONE
[13:34:41.528] Launching 1 futures (chunks) ... DONE
[13:34:41.528] Resolving 1 futures (chunks) ...
[13:34:41.528] resolve() on list ...
[13:34:41.528]  recursive: 0
[13:34:41.528]  length: 1
[13:34:41.528] 
[13:34:41.528] resolved() for ‘SequentialFuture’ ...
[13:34:41.528] - state: ‘finished’
[13:34:41.528] - run: TRUE
[13:34:41.528] - result: ‘FutureResult’
[13:34:41.529] resolved() for ‘SequentialFuture’ ... done
[13:34:41.529] Future #1
[13:34:41.529] signalConditionsASAP(SequentialFuture, pos=1) ...
[13:34:41.529] - nx: 1
[13:34:41.529] - relay: TRUE
[13:34:41.529] - stdout: TRUE
[13:34:41.529] - signal: TRUE
[13:34:41.529] - resignal: FALSE
[13:34:41.529] - force: TRUE
[13:34:41.529] - relayed: [n=1] FALSE
[13:34:41.529] - queued futures: [n=1] FALSE
[13:34:41.530]  - until=1
[13:34:41.530]  - relaying element #1
[13:34:41.530] - relayed: [n=1] TRUE
[13:34:41.530] - queued futures: [n=1] TRUE
[13:34:41.530] signalConditionsASAP(SequentialFuture, pos=1) ... done
[13:34:41.530]  length: 0 (resolved future 1)
[13:34:41.530] Relaying remaining futures
[13:34:41.530] signalConditionsASAP(NULL, pos=0) ...
[13:34:41.530] - nx: 1
[13:34:41.530] - relay: TRUE
[13:34:41.530] - stdout: TRUE
[13:34:41.531] - signal: TRUE
[13:34:41.531] - resignal: FALSE
[13:34:41.531] - force: TRUE
[13:34:41.531] - relayed: [n=1] TRUE
[13:34:41.531] - queued futures: [n=1] TRUE
 - flush all
[13:34:41.531] - relayed: [n=1] TRUE
[13:34:41.531] - queued futures: [n=1] TRUE
[13:34:41.531] signalConditionsASAP(NULL, pos=0) ... done
[13:34:41.531] resolve() on list ... DONE
[13:34:41.531]  - Number of value chunks collected: 1
[13:34:41.531] Resolving 1 futures (chunks) ... DONE
[13:34:41.532] Reducing values from 1 chunks ...
[13:34:41.532]  - Number of values collected after concatenation: 5
[13:34:41.532]  - Number of values expected: 5
[13:34:41.532] Reducing values from 1 chunks ... DONE
[13:34:41.532] future_lapply() ... DONE
[13:34:41.532] future_lapply() ...
[13:34:41.532] Generating random seeds ...
[13:34:41.532] Generating random seed streams for 5 elements ...
[13:34:41.533] Generating random seed streams for 5 elements ... DONE
[13:34:41.533] Generating random seeds ... DONE
[13:34:41.533] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:34:41.533] Number of chunks: 1
[13:34:41.533] getGlobalsAndPackagesXApply() ...
[13:34:41.533]  - future.globals: TRUE
[13:34:41.534] getGlobalsAndPackages() ...
[13:34:41.534] Searching for globals...
[13:34:41.535] - globals found: [2] ‘FUN’, ‘sample’
[13:34:41.535] Searching for globals ... DONE
[13:34:41.535] Resolving globals: FALSE
[13:34:41.535] The total size of the 1 globals is 616 bytes (616 bytes)
[13:34:41.535] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:34:41.535] - globals: [1] ‘FUN’
[13:34:41.536] 
[13:34:41.536] getGlobalsAndPackages() ... DONE
[13:34:41.536]  - globals found/used: [n=1] ‘FUN’
[13:34:41.536]  - needed namespaces: [n=0] 
[13:34:41.536] Finding globals ... DONE
[13:34:41.536]  - use_args: TRUE
[13:34:41.536]  - Getting '...' globals ...
[13:34:41.536] resolve() on list ...
[13:34:41.536]  recursive: 0
[13:34:41.537]  length: 1
[13:34:41.537]  elements: ‘...’
[13:34:41.537]  length: 0 (resolved future 1)
[13:34:41.537] resolve() on list ... DONE
[13:34:41.537]    - '...' content: [n=0] 
[13:34:41.537] List of 1
[13:34:41.537]  $ ...: list()
[13:34:41.537]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:41.537]  - attr(*, "where")=List of 1
[13:34:41.537]   ..$ ...:<environment: 0x5627bd721ba0> 
[13:34:41.537]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:41.537]  - attr(*, "resolved")= logi TRUE
[13:34:41.537]  - attr(*, "total_size")= num NA
[13:34:41.539]  - Getting '...' globals ... DONE
[13:34:41.539] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:34:41.540] List of 2
[13:34:41.540]  $ ...future.FUN:function (...)  
[13:34:41.540]  $ ...          : list()
[13:34:41.540]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:41.540]  - attr(*, "where")=List of 2
[13:34:41.540]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:34:41.540]   ..$ ...          :<environment: 0x5627bd721ba0> 
[13:34:41.540]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:41.540]  - attr(*, "resolved")= logi FALSE
[13:34:41.540]  - attr(*, "total_size")= num 616
[13:34:41.542] Packages to be attached in all futures: [n=0] 
[13:34:41.542] getGlobalsAndPackagesXApply() ... DONE
[13:34:41.542] Number of futures (= number of chunks): 1
[13:34:41.542] Launching 1 futures (chunks) ...
[13:34:41.542] Chunk #1 of 1 ...
[13:34:41.543]  - Finding globals in 'X' for chunk #1 ...
[13:34:41.543] getGlobalsAndPackages() ...
[13:34:41.543] Searching for globals...
[13:34:41.543] 
[13:34:41.543] Searching for globals ... DONE
[13:34:41.543] - globals: [0] <none>
[13:34:41.543] getGlobalsAndPackages() ... DONE
[13:34:41.543]    + additional globals found: [n=0] 
[13:34:41.543]    + additional namespaces needed: [n=0] 
[13:34:41.543]  - Finding globals in 'X' for chunk #1 ... DONE
[13:34:41.543]  - seeds: [5] <seeds>
[13:34:41.544]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:41.544] getGlobalsAndPackages() ...
[13:34:41.544] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:41.544] Resolving globals: FALSE
[13:34:41.544] Tweak future expression to call with '...' arguments ...
[13:34:41.545] {
[13:34:41.545]     do.call(function(...) {
[13:34:41.545]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:41.545]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:41.545]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:41.545]             on.exit(options(oopts), add = TRUE)
[13:34:41.545]         }
[13:34:41.545]         {
[13:34:41.545]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:41.545]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:41.545]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:41.545]                   envir = globalenv(), inherits = FALSE)
[13:34:41.545]                 ...future.FUN(...future.X_jj, ...)
[13:34:41.545]             })
[13:34:41.545]         }
[13:34:41.545]     }, args = future.call.arguments)
[13:34:41.545] }
[13:34:41.545] Tweak future expression to call with '...' arguments ... DONE
[13:34:41.546] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:41.546] 
[13:34:41.546] getGlobalsAndPackages() ... DONE
[13:34:41.546] run() for ‘Future’ ...
[13:34:41.546] - state: ‘created’
[13:34:41.546] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:34:41.546] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:34:41.547] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:34:41.547]   - Field: ‘label’
[13:34:41.547]   - Field: ‘local’
[13:34:41.547]   - Field: ‘owner’
[13:34:41.547]   - Field: ‘envir’
[13:34:41.547]   - Field: ‘packages’
[13:34:41.547]   - Field: ‘gc’
[13:34:41.547]   - Field: ‘conditions’
[13:34:41.547]   - Field: ‘expr’
[13:34:41.547]   - Field: ‘uuid’
[13:34:41.547]   - Field: ‘seed’
[13:34:41.548]   - Field: ‘version’
[13:34:41.548]   - Field: ‘result’
[13:34:41.548]   - Field: ‘asynchronous’
[13:34:41.548]   - Field: ‘calls’
[13:34:41.548]   - Field: ‘globals’
[13:34:41.548]   - Field: ‘stdout’
[13:34:41.548]   - Field: ‘earlySignal’
[13:34:41.548]   - Field: ‘lazy’
[13:34:41.548]   - Field: ‘state’
[13:34:41.548] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:34:41.548] - Launch lazy future ...
[13:34:41.549] Packages needed by the future expression (n = 0): <none>
[13:34:41.549] Packages needed by future strategies (n = 0): <none>
[13:34:41.549] {
[13:34:41.549]     {
[13:34:41.549]         {
[13:34:41.549]             ...future.startTime <- base::Sys.time()
[13:34:41.549]             {
[13:34:41.549]                 {
[13:34:41.549]                   {
[13:34:41.549]                     base::local({
[13:34:41.549]                       has_future <- base::requireNamespace("future", 
[13:34:41.549]                         quietly = TRUE)
[13:34:41.549]                       if (has_future) {
[13:34:41.549]                         ns <- base::getNamespace("future")
[13:34:41.549]                         version <- ns[[".package"]][["version"]]
[13:34:41.549]                         if (is.null(version)) 
[13:34:41.549]                           version <- utils::packageVersion("future")
[13:34:41.549]                       }
[13:34:41.549]                       else {
[13:34:41.549]                         version <- NULL
[13:34:41.549]                       }
[13:34:41.549]                       if (!has_future || version < "1.8.0") {
[13:34:41.549]                         info <- base::c(r_version = base::gsub("R version ", 
[13:34:41.549]                           "", base::R.version$version.string), 
[13:34:41.549]                           platform = base::sprintf("%s (%s-bit)", 
[13:34:41.549]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:34:41.549]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:34:41.549]                             "release", "version")], collapse = " "), 
[13:34:41.549]                           hostname = base::Sys.info()[["nodename"]])
[13:34:41.549]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:34:41.549]                           info)
[13:34:41.549]                         info <- base::paste(info, collapse = "; ")
[13:34:41.549]                         if (!has_future) {
[13:34:41.549]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:34:41.549]                             info)
[13:34:41.549]                         }
[13:34:41.549]                         else {
[13:34:41.549]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:34:41.549]                             info, version)
[13:34:41.549]                         }
[13:34:41.549]                         base::stop(msg)
[13:34:41.549]                       }
[13:34:41.549]                     })
[13:34:41.549]                   }
[13:34:41.549]                   ...future.strategy.old <- future::plan("list")
[13:34:41.549]                   options(future.plan = NULL)
[13:34:41.549]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:34:41.549]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:34:41.549]                 }
[13:34:41.549]                 ...future.workdir <- getwd()
[13:34:41.549]             }
[13:34:41.549]             ...future.oldOptions <- base::as.list(base::.Options)
[13:34:41.549]             ...future.oldEnvVars <- base::Sys.getenv()
[13:34:41.549]         }
[13:34:41.549]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:34:41.549]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:34:41.549]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:34:41.549]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:34:41.549]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:34:41.549]             future.stdout.windows.reencode = NULL, width = 80L)
[13:34:41.549]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:34:41.549]             base::names(...future.oldOptions))
[13:34:41.549]     }
[13:34:41.549]     if (FALSE) {
[13:34:41.549]     }
[13:34:41.549]     else {
[13:34:41.549]         if (TRUE) {
[13:34:41.549]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:34:41.549]                 open = "w")
[13:34:41.549]         }
[13:34:41.549]         else {
[13:34:41.549]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:34:41.549]                 windows = "NUL", "/dev/null"), open = "w")
[13:34:41.549]         }
[13:34:41.549]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:34:41.549]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:34:41.549]             base::sink(type = "output", split = FALSE)
[13:34:41.549]             base::close(...future.stdout)
[13:34:41.549]         }, add = TRUE)
[13:34:41.549]     }
[13:34:41.549]     ...future.frame <- base::sys.nframe()
[13:34:41.549]     ...future.conditions <- base::list()
[13:34:41.549]     ...future.rng <- base::globalenv()$.Random.seed
[13:34:41.549]     if (FALSE) {
[13:34:41.549]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:34:41.549]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:34:41.549]     }
[13:34:41.549]     ...future.result <- base::tryCatch({
[13:34:41.549]         base::withCallingHandlers({
[13:34:41.549]             ...future.value <- base::withVisible(base::local({
[13:34:41.549]                 do.call(function(...) {
[13:34:41.549]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:41.549]                   if (!identical(...future.globals.maxSize.org, 
[13:34:41.549]                     ...future.globals.maxSize)) {
[13:34:41.549]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:41.549]                     on.exit(options(oopts), add = TRUE)
[13:34:41.549]                   }
[13:34:41.549]                   {
[13:34:41.549]                     lapply(seq_along(...future.elements_ii), 
[13:34:41.549]                       FUN = function(jj) {
[13:34:41.549]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:41.549]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:41.549]                           envir = globalenv(), inherits = FALSE)
[13:34:41.549]                         ...future.FUN(...future.X_jj, ...)
[13:34:41.549]                       })
[13:34:41.549]                   }
[13:34:41.549]                 }, args = future.call.arguments)
[13:34:41.549]             }))
[13:34:41.549]             future::FutureResult(value = ...future.value$value, 
[13:34:41.549]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:41.549]                   ...future.rng), globalenv = if (FALSE) 
[13:34:41.549]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:34:41.549]                     ...future.globalenv.names))
[13:34:41.549]                 else NULL, started = ...future.startTime, version = "1.8")
[13:34:41.549]         }, condition = base::local({
[13:34:41.549]             c <- base::c
[13:34:41.549]             inherits <- base::inherits
[13:34:41.549]             invokeRestart <- base::invokeRestart
[13:34:41.549]             length <- base::length
[13:34:41.549]             list <- base::list
[13:34:41.549]             seq.int <- base::seq.int
[13:34:41.549]             signalCondition <- base::signalCondition
[13:34:41.549]             sys.calls <- base::sys.calls
[13:34:41.549]             `[[` <- base::`[[`
[13:34:41.549]             `+` <- base::`+`
[13:34:41.549]             `<<-` <- base::`<<-`
[13:34:41.549]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:34:41.549]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:34:41.549]                   3L)]
[13:34:41.549]             }
[13:34:41.549]             function(cond) {
[13:34:41.549]                 is_error <- inherits(cond, "error")
[13:34:41.549]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:34:41.549]                   NULL)
[13:34:41.549]                 if (is_error) {
[13:34:41.549]                   sessionInformation <- function() {
[13:34:41.549]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:34:41.549]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:34:41.549]                       search = base::search(), system = base::Sys.info())
[13:34:41.549]                   }
[13:34:41.549]                   ...future.conditions[[length(...future.conditions) + 
[13:34:41.549]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:34:41.549]                     cond$call), session = sessionInformation(), 
[13:34:41.549]                     timestamp = base::Sys.time(), signaled = 0L)
[13:34:41.549]                   signalCondition(cond)
[13:34:41.549]                 }
[13:34:41.549]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:34:41.549]                 "immediateCondition"))) {
[13:34:41.549]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:34:41.549]                   ...future.conditions[[length(...future.conditions) + 
[13:34:41.549]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:34:41.549]                   if (TRUE && !signal) {
[13:34:41.549]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:41.549]                     {
[13:34:41.549]                       inherits <- base::inherits
[13:34:41.549]                       invokeRestart <- base::invokeRestart
[13:34:41.549]                       is.null <- base::is.null
[13:34:41.549]                       muffled <- FALSE
[13:34:41.549]                       if (inherits(cond, "message")) {
[13:34:41.549]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:41.549]                         if (muffled) 
[13:34:41.549]                           invokeRestart("muffleMessage")
[13:34:41.549]                       }
[13:34:41.549]                       else if (inherits(cond, "warning")) {
[13:34:41.549]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:41.549]                         if (muffled) 
[13:34:41.549]                           invokeRestart("muffleWarning")
[13:34:41.549]                       }
[13:34:41.549]                       else if (inherits(cond, "condition")) {
[13:34:41.549]                         if (!is.null(pattern)) {
[13:34:41.549]                           computeRestarts <- base::computeRestarts
[13:34:41.549]                           grepl <- base::grepl
[13:34:41.549]                           restarts <- computeRestarts(cond)
[13:34:41.549]                           for (restart in restarts) {
[13:34:41.549]                             name <- restart$name
[13:34:41.549]                             if (is.null(name)) 
[13:34:41.549]                               next
[13:34:41.549]                             if (!grepl(pattern, name)) 
[13:34:41.549]                               next
[13:34:41.549]                             invokeRestart(restart)
[13:34:41.549]                             muffled <- TRUE
[13:34:41.549]                             break
[13:34:41.549]                           }
[13:34:41.549]                         }
[13:34:41.549]                       }
[13:34:41.549]                       invisible(muffled)
[13:34:41.549]                     }
[13:34:41.549]                     muffleCondition(cond, pattern = "^muffle")
[13:34:41.549]                   }
[13:34:41.549]                 }
[13:34:41.549]                 else {
[13:34:41.549]                   if (TRUE) {
[13:34:41.549]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:41.549]                     {
[13:34:41.549]                       inherits <- base::inherits
[13:34:41.549]                       invokeRestart <- base::invokeRestart
[13:34:41.549]                       is.null <- base::is.null
[13:34:41.549]                       muffled <- FALSE
[13:34:41.549]                       if (inherits(cond, "message")) {
[13:34:41.549]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:41.549]                         if (muffled) 
[13:34:41.549]                           invokeRestart("muffleMessage")
[13:34:41.549]                       }
[13:34:41.549]                       else if (inherits(cond, "warning")) {
[13:34:41.549]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:41.549]                         if (muffled) 
[13:34:41.549]                           invokeRestart("muffleWarning")
[13:34:41.549]                       }
[13:34:41.549]                       else if (inherits(cond, "condition")) {
[13:34:41.549]                         if (!is.null(pattern)) {
[13:34:41.549]                           computeRestarts <- base::computeRestarts
[13:34:41.549]                           grepl <- base::grepl
[13:34:41.549]                           restarts <- computeRestarts(cond)
[13:34:41.549]                           for (restart in restarts) {
[13:34:41.549]                             name <- restart$name
[13:34:41.549]                             if (is.null(name)) 
[13:34:41.549]                               next
[13:34:41.549]                             if (!grepl(pattern, name)) 
[13:34:41.549]                               next
[13:34:41.549]                             invokeRestart(restart)
[13:34:41.549]                             muffled <- TRUE
[13:34:41.549]                             break
[13:34:41.549]                           }
[13:34:41.549]                         }
[13:34:41.549]                       }
[13:34:41.549]                       invisible(muffled)
[13:34:41.549]                     }
[13:34:41.549]                     muffleCondition(cond, pattern = "^muffle")
[13:34:41.549]                   }
[13:34:41.549]                 }
[13:34:41.549]             }
[13:34:41.549]         }))
[13:34:41.549]     }, error = function(ex) {
[13:34:41.549]         base::structure(base::list(value = NULL, visible = NULL, 
[13:34:41.549]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:41.549]                 ...future.rng), started = ...future.startTime, 
[13:34:41.549]             finished = Sys.time(), session_uuid = NA_character_, 
[13:34:41.549]             version = "1.8"), class = "FutureResult")
[13:34:41.549]     }, finally = {
[13:34:41.549]         if (!identical(...future.workdir, getwd())) 
[13:34:41.549]             setwd(...future.workdir)
[13:34:41.549]         {
[13:34:41.549]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:34:41.549]                 ...future.oldOptions$nwarnings <- NULL
[13:34:41.549]             }
[13:34:41.549]             base::options(...future.oldOptions)
[13:34:41.549]             if (.Platform$OS.type == "windows") {
[13:34:41.549]                 old_names <- names(...future.oldEnvVars)
[13:34:41.549]                 envs <- base::Sys.getenv()
[13:34:41.549]                 names <- names(envs)
[13:34:41.549]                 common <- intersect(names, old_names)
[13:34:41.549]                 added <- setdiff(names, old_names)
[13:34:41.549]                 removed <- setdiff(old_names, names)
[13:34:41.549]                 changed <- common[...future.oldEnvVars[common] != 
[13:34:41.549]                   envs[common]]
[13:34:41.549]                 NAMES <- toupper(changed)
[13:34:41.549]                 args <- list()
[13:34:41.549]                 for (kk in seq_along(NAMES)) {
[13:34:41.549]                   name <- changed[[kk]]
[13:34:41.549]                   NAME <- NAMES[[kk]]
[13:34:41.549]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:41.549]                     next
[13:34:41.549]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:41.549]                 }
[13:34:41.549]                 NAMES <- toupper(added)
[13:34:41.549]                 for (kk in seq_along(NAMES)) {
[13:34:41.549]                   name <- added[[kk]]
[13:34:41.549]                   NAME <- NAMES[[kk]]
[13:34:41.549]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:41.549]                     next
[13:34:41.549]                   args[[name]] <- ""
[13:34:41.549]                 }
[13:34:41.549]                 NAMES <- toupper(removed)
[13:34:41.549]                 for (kk in seq_along(NAMES)) {
[13:34:41.549]                   name <- removed[[kk]]
[13:34:41.549]                   NAME <- NAMES[[kk]]
[13:34:41.549]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:41.549]                     next
[13:34:41.549]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:41.549]                 }
[13:34:41.549]                 if (length(args) > 0) 
[13:34:41.549]                   base::do.call(base::Sys.setenv, args = args)
[13:34:41.549]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:34:41.549]             }
[13:34:41.549]             else {
[13:34:41.549]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:34:41.549]             }
[13:34:41.549]             {
[13:34:41.549]                 if (base::length(...future.futureOptionsAdded) > 
[13:34:41.549]                   0L) {
[13:34:41.549]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:34:41.549]                   base::names(opts) <- ...future.futureOptionsAdded
[13:34:41.549]                   base::options(opts)
[13:34:41.549]                 }
[13:34:41.549]                 {
[13:34:41.549]                   {
[13:34:41.549]                     base::assign(".Random.seed", c(10403L, 2L, 
[13:34:41.549]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[13:34:41.549]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[13:34:41.549]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[13:34:41.549]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[13:34:41.549]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[13:34:41.549]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[13:34:41.549]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[13:34:41.549]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[13:34:41.549]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[13:34:41.549]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[13:34:41.549]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[13:34:41.549]                     -1512233174L, -1985955764L, -425390065L, 
[13:34:41.549]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[13:34:41.549]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[13:34:41.549]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[13:34:41.549]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[13:34:41.549]                     1818328109L, -1284085436L, -1981489558L, 
[13:34:41.549]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[13:34:41.549]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[13:34:41.549]                     -1718567047L, -793788661L, -1133789126L, 
[13:34:41.549]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[13:34:41.549]                     -1823521982L, -1345991523L, -1672661737L, 
[13:34:41.549]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[13:34:41.549]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[13:34:41.549]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[13:34:41.549]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[13:34:41.549]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[13:34:41.549]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[13:34:41.549]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[13:34:41.549]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[13:34:41.549]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[13:34:41.549]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[13:34:41.549]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[13:34:41.549]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[13:34:41.549]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[13:34:41.549]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[13:34:41.549]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[13:34:41.549]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[13:34:41.549]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[13:34:41.549]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[13:34:41.549]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[13:34:41.549]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[13:34:41.549]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[13:34:41.549]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[13:34:41.549]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[13:34:41.549]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[13:34:41.549]                     -1119334354L, -1521015416L, -2041922421L, 
[13:34:41.549]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[13:34:41.549]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[13:34:41.549]                     1232111981L, -1801753084L, -1608606422L, 
[13:34:41.549]                     -1172096363L, 1420874031L, -1210473418L, 
[13:34:41.549]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[13:34:41.549]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[13:34:41.549]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[13:34:41.549]                     679371266L, -591318819L, -104578089L, -172818754L, 
[13:34:41.549]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[13:34:41.549]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[13:34:41.549]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[13:34:41.549]                     -332493318L, -1978392251L, -1691039632L, 
[13:34:41.549]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[13:34:41.549]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[13:34:41.549]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[13:34:41.549]                     87560756L, -87565624L, 426345146L, -699970416L, 
[13:34:41.549]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[13:34:41.549]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[13:34:41.549]                     -1178330196L, -687617348L, -1701912078L, 
[13:34:41.549]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[13:34:41.549]                     -1345416048L, 1816730492L, -1570431212L, 
[13:34:41.549]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[13:34:41.549]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[13:34:41.549]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[13:34:41.549]                     -1493184262L, -1943836976L, -590788308L, 
[13:34:41.549]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[13:34:41.549]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[13:34:41.549]                     1274857340L, -1205842638L, -1938479504L, 
[13:34:41.549]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[13:34:41.549]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[13:34:41.549]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[13:34:41.549]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[13:34:41.549]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[13:34:41.549]                     -1460751252L, 1201879444L, -1459788718L, 
[13:34:41.549]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[13:34:41.549]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[13:34:41.549]                     -420945808L, -1997735900L, -1838404552L, 
[13:34:41.549]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[13:34:41.549]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[13:34:41.549]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[13:34:41.549]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[13:34:41.549]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[13:34:41.549]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[13:34:41.549]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[13:34:41.549]                     942193650L, 751741680L, 689743428L, -18455976L, 
[13:34:41.549]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[13:34:41.549]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[13:34:41.549]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[13:34:41.549]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[13:34:41.549]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[13:34:41.549]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[13:34:41.549]                     -1357570110L, 1896595240L, -2066952276L, 
[13:34:41.549]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[13:34:41.549]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[13:34:41.549]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[13:34:41.549]                     769655120L, 236357794L, 181393736L, -13334772L, 
[13:34:41.549]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[13:34:41.549]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[13:34:41.549]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[13:34:41.549]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[13:34:41.549]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[13:34:41.549]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[13:34:41.549]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[13:34:41.549]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[13:34:41.549]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[13:34:41.549]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[13:34:41.549]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[13:34:41.549]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[13:34:41.549]                     -1365842884L, -438961294L, -1851472272L, 
[13:34:41.549]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[13:34:41.549]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[13:34:41.549]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[13:34:41.549]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[13:34:41.549]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[13:34:41.549]                     -594809770L, -2146766621L, -2013964635L, 
[13:34:41.549]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[13:34:41.549]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[13:34:41.549]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[13:34:41.549]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[13:34:41.549]                     -1426021878L, -1285634264L, 1507547537L, 
[13:34:41.549]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[13:34:41.549]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[13:34:41.549]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[13:34:41.549]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[13:34:41.549]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[13:34:41.549]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[13:34:41.549]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[13:34:41.549]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[13:34:41.549]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[13:34:41.549]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[13:34:41.549]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[13:34:41.549]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[13:34:41.549]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[13:34:41.549]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[13:34:41.549]                     -1604604761L, 1421229008L, -1268333714L, 
[13:34:41.549]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[13:34:41.549]                     -2070476623L, -2099222749L, 1141171236L, 
[13:34:41.549]                     -146426158L, -1797385433L, -1129376399L, 
[13:34:41.549]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[13:34:41.549]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[13:34:41.549]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[13:34:41.549]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[13:34:41.549]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[13:34:41.549]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[13:34:41.549]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[13:34:41.549]                     -1092079724L, -1765622238L, -1882554057L, 
[13:34:41.549]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[13:34:41.549]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[13:34:41.549]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[13:34:41.549]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[13:34:41.549]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[13:34:41.549]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[13:34:41.549]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[13:34:41.549]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[13:34:41.549]                     865377681L, -1127426242L), envir = base::globalenv(), 
[13:34:41.549]                       inherits = FALSE)
[13:34:41.549]                     NULL
[13:34:41.549]                   }
[13:34:41.549]                   options(future.plan = NULL)
[13:34:41.549]                   if (is.na(NA_character_)) 
[13:34:41.549]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:34:41.549]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:34:41.549]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:34:41.549]                     .init = FALSE)
[13:34:41.549]                 }
[13:34:41.549]             }
[13:34:41.549]         }
[13:34:41.549]     })
[13:34:41.549]     if (TRUE) {
[13:34:41.549]         base::sink(type = "output", split = FALSE)
[13:34:41.549]         if (TRUE) {
[13:34:41.549]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:34:41.549]         }
[13:34:41.549]         else {
[13:34:41.549]             ...future.result["stdout"] <- base::list(NULL)
[13:34:41.549]         }
[13:34:41.549]         base::close(...future.stdout)
[13:34:41.549]         ...future.stdout <- NULL
[13:34:41.549]     }
[13:34:41.549]     ...future.result$conditions <- ...future.conditions
[13:34:41.549]     ...future.result$finished <- base::Sys.time()
[13:34:41.549]     ...future.result
[13:34:41.549] }
[13:34:41.552] assign_globals() ...
[13:34:41.552] List of 5
[13:34:41.552]  $ ...future.FUN            :function (...)  
[13:34:41.552]  $ future.call.arguments    : list()
[13:34:41.552]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:41.552]  $ ...future.elements_ii    :List of 5
[13:34:41.552]   ..$ : int 0
[13:34:41.552]   ..$ : int 0
[13:34:41.552]   ..$ : int 0
[13:34:41.552]   ..$ : int 0
[13:34:41.552]   ..$ : int 0
[13:34:41.552]  $ ...future.seeds_ii       :List of 5
[13:34:41.552]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[13:34:41.552]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[13:34:41.552]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[13:34:41.552]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[13:34:41.552]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[13:34:41.552]  $ ...future.globals.maxSize: NULL
[13:34:41.552]  - attr(*, "where")=List of 5
[13:34:41.552]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:34:41.552]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:34:41.552]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:34:41.552]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:34:41.552]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:34:41.552]  - attr(*, "resolved")= logi FALSE
[13:34:41.552]  - attr(*, "total_size")= num 616
[13:34:41.552]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:41.552]  - attr(*, "already-done")= logi TRUE
[13:34:41.559] - reassign environment for ‘...future.FUN’
[13:34:41.559] - copied ‘...future.FUN’ to environment
[13:34:41.559] - copied ‘future.call.arguments’ to environment
[13:34:41.559] - copied ‘...future.elements_ii’ to environment
[13:34:41.559] - copied ‘...future.seeds_ii’ to environment
[13:34:41.559] - copied ‘...future.globals.maxSize’ to environment
[13:34:41.559] assign_globals() ... done
[13:34:41.559] plan(): Setting new future strategy stack:
[13:34:41.559] List of future strategies:
[13:34:41.559] 1. sequential:
[13:34:41.559]    - args: function (..., envir = parent.frame())
[13:34:41.559]    - tweaked: FALSE
[13:34:41.559]    - call: NULL
[13:34:41.560] plan(): nbrOfWorkers() = 1
[13:34:41.561] plan(): Setting new future strategy stack:
[13:34:41.561] List of future strategies:
[13:34:41.561] 1. sequential:
[13:34:41.561]    - args: function (..., envir = parent.frame())
[13:34:41.561]    - tweaked: FALSE
[13:34:41.561]    - call: plan(strategy)
[13:34:41.561] plan(): nbrOfWorkers() = 1
[13:34:41.561] SequentialFuture started (and completed)
[13:34:41.561] - Launch lazy future ... done
[13:34:41.561] run() for ‘SequentialFuture’ ... done
[13:34:41.561] Created future:
[13:34:41.562] SequentialFuture:
[13:34:41.562] Label: ‘future_replicate-1’
[13:34:41.562] Expression:
[13:34:41.562] {
[13:34:41.562]     do.call(function(...) {
[13:34:41.562]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:41.562]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:41.562]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:41.562]             on.exit(options(oopts), add = TRUE)
[13:34:41.562]         }
[13:34:41.562]         {
[13:34:41.562]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:41.562]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:41.562]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:41.562]                   envir = globalenv(), inherits = FALSE)
[13:34:41.562]                 ...future.FUN(...future.X_jj, ...)
[13:34:41.562]             })
[13:34:41.562]         }
[13:34:41.562]     }, args = future.call.arguments)
[13:34:41.562] }
[13:34:41.562] Lazy evaluation: FALSE
[13:34:41.562] Asynchronous evaluation: FALSE
[13:34:41.562] Local evaluation: TRUE
[13:34:41.562] Environment: R_GlobalEnv
[13:34:41.562] Capture standard output: TRUE
[13:34:41.562] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:34:41.562] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:34:41.562] Packages: <none>
[13:34:41.562] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:34:41.562] Resolved: TRUE
[13:34:41.562] Value: 280 bytes of class ‘list’
[13:34:41.562] Early signaling: FALSE
[13:34:41.562] Owner process: b8cf10c3-b112-c8f9-9398-a44000e21728
[13:34:41.562] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:34:41.563] Chunk #1 of 1 ... DONE
[13:34:41.563] Launching 1 futures (chunks) ... DONE
[13:34:41.563] Resolving 1 futures (chunks) ...
[13:34:41.563] resolve() on list ...
[13:34:41.563]  recursive: 0
[13:34:41.563]  length: 1
[13:34:41.563] 
[13:34:41.563] resolved() for ‘SequentialFuture’ ...
[13:34:41.563] - state: ‘finished’
[13:34:41.563] - run: TRUE
[13:34:41.563] - result: ‘FutureResult’
[13:34:41.564] resolved() for ‘SequentialFuture’ ... done
[13:34:41.564] Future #1
[13:34:41.564] signalConditionsASAP(SequentialFuture, pos=1) ...
[13:34:41.564] - nx: 1
[13:34:41.564] - relay: TRUE
[13:34:41.564] - stdout: TRUE
[13:34:41.564] - signal: TRUE
[13:34:41.564] - resignal: FALSE
[13:34:41.564] - force: TRUE
[13:34:41.564] - relayed: [n=1] FALSE
[13:34:41.564] - queued futures: [n=1] FALSE
[13:34:41.564]  - until=1
[13:34:41.565]  - relaying element #1
[13:34:41.565] - relayed: [n=1] TRUE
[13:34:41.565] - queued futures: [n=1] TRUE
[13:34:41.565] signalConditionsASAP(SequentialFuture, pos=1) ... done
[13:34:41.565]  length: 0 (resolved future 1)
[13:34:41.565] Relaying remaining futures
[13:34:41.565] signalConditionsASAP(NULL, pos=0) ...
[13:34:41.565] - nx: 1
[13:34:41.565] - relay: TRUE
[13:34:41.565] - stdout: TRUE
[13:34:41.565] - signal: TRUE
[13:34:41.566] - resignal: FALSE
[13:34:41.566] - force: TRUE
[13:34:41.566] - relayed: [n=1] TRUE
[13:34:41.566] - queued futures: [n=1] TRUE
 - flush all
[13:34:41.566] - relayed: [n=1] TRUE
[13:34:41.566] - queued futures: [n=1] TRUE
[13:34:41.566] signalConditionsASAP(NULL, pos=0) ... done
[13:34:41.566] resolve() on list ... DONE
[13:34:41.566]  - Number of value chunks collected: 1
[13:34:41.566] Resolving 1 futures (chunks) ... DONE
[13:34:41.567] Reducing values from 1 chunks ...
[13:34:41.567]  - Number of values collected after concatenation: 5
[13:34:41.567]  - Number of values expected: 5
[13:34:41.567] Reducing values from 1 chunks ... DONE
[13:34:41.567] future_lapply() ... DONE
[13:34:41.567] future_lapply() ...
[13:34:41.568] Generating random seeds ...
[13:34:41.568] Generating random seed streams for 5 elements ...
[13:34:41.568] Generating random seed streams for 5 elements ... DONE
[13:34:41.568] Generating random seeds ... DONE
[13:34:41.568] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:34:41.569] Number of chunks: 1
[13:34:41.569] getGlobalsAndPackagesXApply() ...
[13:34:41.569]  - future.globals: TRUE
[13:34:41.571] getGlobalsAndPackages() ...
[13:34:41.571] Searching for globals...
[13:34:41.572] - globals found: [2] ‘FUN’, ‘sample’
[13:34:41.572] Searching for globals ... DONE
[13:34:41.572] Resolving globals: FALSE
[13:34:41.573] The total size of the 1 globals is 616 bytes (616 bytes)
[13:34:41.573] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:34:41.573] - globals: [1] ‘FUN’
[13:34:41.573] 
[13:34:41.573] getGlobalsAndPackages() ... DONE
[13:34:41.573]  - globals found/used: [n=1] ‘FUN’
[13:34:41.573]  - needed namespaces: [n=0] 
[13:34:41.573] Finding globals ... DONE
[13:34:41.574]  - use_args: TRUE
[13:34:41.574]  - Getting '...' globals ...
[13:34:41.574] resolve() on list ...
[13:34:41.574]  recursive: 0
[13:34:41.574]  length: 1
[13:34:41.574]  elements: ‘...’
[13:34:41.574]  length: 0 (resolved future 1)
[13:34:41.574] resolve() on list ... DONE
[13:34:41.575]    - '...' content: [n=0] 
[13:34:41.575] List of 1
[13:34:41.575]  $ ...: list()
[13:34:41.575]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:41.575]  - attr(*, "where")=List of 1
[13:34:41.575]   ..$ ...:<environment: 0x5627bf8b2378> 
[13:34:41.575]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:41.575]  - attr(*, "resolved")= logi TRUE
[13:34:41.575]  - attr(*, "total_size")= num NA
[13:34:41.577]  - Getting '...' globals ... DONE
[13:34:41.577] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:34:41.577] List of 2
[13:34:41.577]  $ ...future.FUN:function (...)  
[13:34:41.577]  $ ...          : list()
[13:34:41.577]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:41.577]  - attr(*, "where")=List of 2
[13:34:41.577]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:34:41.577]   ..$ ...          :<environment: 0x5627bf8b2378> 
[13:34:41.577]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:41.577]  - attr(*, "resolved")= logi FALSE
[13:34:41.577]  - attr(*, "total_size")= num 616
[13:34:41.580] Packages to be attached in all futures: [n=0] 
[13:34:41.580] getGlobalsAndPackagesXApply() ... DONE
[13:34:41.580] Number of futures (= number of chunks): 1
[13:34:41.580] Launching 1 futures (chunks) ...
[13:34:41.580] Chunk #1 of 1 ...
[13:34:41.581]  - Finding globals in 'X' for chunk #1 ...
[13:34:41.581] getGlobalsAndPackages() ...
[13:34:41.581] Searching for globals...
[13:34:41.581] 
[13:34:41.581] Searching for globals ... DONE
[13:34:41.581] - globals: [0] <none>
[13:34:41.581] getGlobalsAndPackages() ... DONE
[13:34:41.581]    + additional globals found: [n=0] 
[13:34:41.581]    + additional namespaces needed: [n=0] 
[13:34:41.581]  - Finding globals in 'X' for chunk #1 ... DONE
[13:34:41.582]  - seeds: [5] <seeds>
[13:34:41.582]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:41.582] getGlobalsAndPackages() ...
[13:34:41.582] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:41.582] Resolving globals: FALSE
[13:34:41.582] Tweak future expression to call with '...' arguments ...
[13:34:41.582] {
[13:34:41.582]     do.call(function(...) {
[13:34:41.582]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:41.582]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:41.582]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:41.582]             on.exit(options(oopts), add = TRUE)
[13:34:41.582]         }
[13:34:41.582]         {
[13:34:41.582]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:41.582]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:41.582]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:41.582]                   envir = globalenv(), inherits = FALSE)
[13:34:41.582]                 ...future.FUN(...future.X_jj, ...)
[13:34:41.582]             })
[13:34:41.582]         }
[13:34:41.582]     }, args = future.call.arguments)
[13:34:41.582] }
[13:34:41.582] Tweak future expression to call with '...' arguments ... DONE
[13:34:41.583] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:41.583] 
[13:34:41.583] getGlobalsAndPackages() ... DONE
[13:34:41.583] run() for ‘Future’ ...
[13:34:41.583] - state: ‘created’
[13:34:41.583] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:34:41.584] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:34:41.584] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:34:41.584]   - Field: ‘label’
[13:34:41.584]   - Field: ‘local’
[13:34:41.584]   - Field: ‘owner’
[13:34:41.584]   - Field: ‘envir’
[13:34:41.584]   - Field: ‘packages’
[13:34:41.584]   - Field: ‘gc’
[13:34:41.585]   - Field: ‘conditions’
[13:34:41.585]   - Field: ‘expr’
[13:34:41.585]   - Field: ‘uuid’
[13:34:41.585]   - Field: ‘seed’
[13:34:41.585]   - Field: ‘version’
[13:34:41.585]   - Field: ‘result’
[13:34:41.585]   - Field: ‘asynchronous’
[13:34:41.585]   - Field: ‘calls’
[13:34:41.585]   - Field: ‘globals’
[13:34:41.585]   - Field: ‘stdout’
[13:34:41.585]   - Field: ‘earlySignal’
[13:34:41.586]   - Field: ‘lazy’
[13:34:41.586]   - Field: ‘state’
[13:34:41.586] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:34:41.586] - Launch lazy future ...
[13:34:41.586] Packages needed by the future expression (n = 0): <none>
[13:34:41.586] Packages needed by future strategies (n = 0): <none>
[13:34:41.587] {
[13:34:41.587]     {
[13:34:41.587]         {
[13:34:41.587]             ...future.startTime <- base::Sys.time()
[13:34:41.587]             {
[13:34:41.587]                 {
[13:34:41.587]                   {
[13:34:41.587]                     base::local({
[13:34:41.587]                       has_future <- base::requireNamespace("future", 
[13:34:41.587]                         quietly = TRUE)
[13:34:41.587]                       if (has_future) {
[13:34:41.587]                         ns <- base::getNamespace("future")
[13:34:41.587]                         version <- ns[[".package"]][["version"]]
[13:34:41.587]                         if (is.null(version)) 
[13:34:41.587]                           version <- utils::packageVersion("future")
[13:34:41.587]                       }
[13:34:41.587]                       else {
[13:34:41.587]                         version <- NULL
[13:34:41.587]                       }
[13:34:41.587]                       if (!has_future || version < "1.8.0") {
[13:34:41.587]                         info <- base::c(r_version = base::gsub("R version ", 
[13:34:41.587]                           "", base::R.version$version.string), 
[13:34:41.587]                           platform = base::sprintf("%s (%s-bit)", 
[13:34:41.587]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:34:41.587]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:34:41.587]                             "release", "version")], collapse = " "), 
[13:34:41.587]                           hostname = base::Sys.info()[["nodename"]])
[13:34:41.587]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:34:41.587]                           info)
[13:34:41.587]                         info <- base::paste(info, collapse = "; ")
[13:34:41.587]                         if (!has_future) {
[13:34:41.587]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:34:41.587]                             info)
[13:34:41.587]                         }
[13:34:41.587]                         else {
[13:34:41.587]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:34:41.587]                             info, version)
[13:34:41.587]                         }
[13:34:41.587]                         base::stop(msg)
[13:34:41.587]                       }
[13:34:41.587]                     })
[13:34:41.587]                   }
[13:34:41.587]                   ...future.strategy.old <- future::plan("list")
[13:34:41.587]                   options(future.plan = NULL)
[13:34:41.587]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:34:41.587]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:34:41.587]                 }
[13:34:41.587]                 ...future.workdir <- getwd()
[13:34:41.587]             }
[13:34:41.587]             ...future.oldOptions <- base::as.list(base::.Options)
[13:34:41.587]             ...future.oldEnvVars <- base::Sys.getenv()
[13:34:41.587]         }
[13:34:41.587]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:34:41.587]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:34:41.587]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:34:41.587]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:34:41.587]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:34:41.587]             future.stdout.windows.reencode = NULL, width = 80L)
[13:34:41.587]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:34:41.587]             base::names(...future.oldOptions))
[13:34:41.587]     }
[13:34:41.587]     if (FALSE) {
[13:34:41.587]     }
[13:34:41.587]     else {
[13:34:41.587]         if (TRUE) {
[13:34:41.587]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:34:41.587]                 open = "w")
[13:34:41.587]         }
[13:34:41.587]         else {
[13:34:41.587]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:34:41.587]                 windows = "NUL", "/dev/null"), open = "w")
[13:34:41.587]         }
[13:34:41.587]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:34:41.587]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:34:41.587]             base::sink(type = "output", split = FALSE)
[13:34:41.587]             base::close(...future.stdout)
[13:34:41.587]         }, add = TRUE)
[13:34:41.587]     }
[13:34:41.587]     ...future.frame <- base::sys.nframe()
[13:34:41.587]     ...future.conditions <- base::list()
[13:34:41.587]     ...future.rng <- base::globalenv()$.Random.seed
[13:34:41.587]     if (FALSE) {
[13:34:41.587]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:34:41.587]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:34:41.587]     }
[13:34:41.587]     ...future.result <- base::tryCatch({
[13:34:41.587]         base::withCallingHandlers({
[13:34:41.587]             ...future.value <- base::withVisible(base::local({
[13:34:41.587]                 do.call(function(...) {
[13:34:41.587]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:41.587]                   if (!identical(...future.globals.maxSize.org, 
[13:34:41.587]                     ...future.globals.maxSize)) {
[13:34:41.587]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:41.587]                     on.exit(options(oopts), add = TRUE)
[13:34:41.587]                   }
[13:34:41.587]                   {
[13:34:41.587]                     lapply(seq_along(...future.elements_ii), 
[13:34:41.587]                       FUN = function(jj) {
[13:34:41.587]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:41.587]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:41.587]                           envir = globalenv(), inherits = FALSE)
[13:34:41.587]                         ...future.FUN(...future.X_jj, ...)
[13:34:41.587]                       })
[13:34:41.587]                   }
[13:34:41.587]                 }, args = future.call.arguments)
[13:34:41.587]             }))
[13:34:41.587]             future::FutureResult(value = ...future.value$value, 
[13:34:41.587]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:41.587]                   ...future.rng), globalenv = if (FALSE) 
[13:34:41.587]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:34:41.587]                     ...future.globalenv.names))
[13:34:41.587]                 else NULL, started = ...future.startTime, version = "1.8")
[13:34:41.587]         }, condition = base::local({
[13:34:41.587]             c <- base::c
[13:34:41.587]             inherits <- base::inherits
[13:34:41.587]             invokeRestart <- base::invokeRestart
[13:34:41.587]             length <- base::length
[13:34:41.587]             list <- base::list
[13:34:41.587]             seq.int <- base::seq.int
[13:34:41.587]             signalCondition <- base::signalCondition
[13:34:41.587]             sys.calls <- base::sys.calls
[13:34:41.587]             `[[` <- base::`[[`
[13:34:41.587]             `+` <- base::`+`
[13:34:41.587]             `<<-` <- base::`<<-`
[13:34:41.587]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:34:41.587]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:34:41.587]                   3L)]
[13:34:41.587]             }
[13:34:41.587]             function(cond) {
[13:34:41.587]                 is_error <- inherits(cond, "error")
[13:34:41.587]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:34:41.587]                   NULL)
[13:34:41.587]                 if (is_error) {
[13:34:41.587]                   sessionInformation <- function() {
[13:34:41.587]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:34:41.587]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:34:41.587]                       search = base::search(), system = base::Sys.info())
[13:34:41.587]                   }
[13:34:41.587]                   ...future.conditions[[length(...future.conditions) + 
[13:34:41.587]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:34:41.587]                     cond$call), session = sessionInformation(), 
[13:34:41.587]                     timestamp = base::Sys.time(), signaled = 0L)
[13:34:41.587]                   signalCondition(cond)
[13:34:41.587]                 }
[13:34:41.587]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:34:41.587]                 "immediateCondition"))) {
[13:34:41.587]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:34:41.587]                   ...future.conditions[[length(...future.conditions) + 
[13:34:41.587]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:34:41.587]                   if (TRUE && !signal) {
[13:34:41.587]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:41.587]                     {
[13:34:41.587]                       inherits <- base::inherits
[13:34:41.587]                       invokeRestart <- base::invokeRestart
[13:34:41.587]                       is.null <- base::is.null
[13:34:41.587]                       muffled <- FALSE
[13:34:41.587]                       if (inherits(cond, "message")) {
[13:34:41.587]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:41.587]                         if (muffled) 
[13:34:41.587]                           invokeRestart("muffleMessage")
[13:34:41.587]                       }
[13:34:41.587]                       else if (inherits(cond, "warning")) {
[13:34:41.587]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:41.587]                         if (muffled) 
[13:34:41.587]                           invokeRestart("muffleWarning")
[13:34:41.587]                       }
[13:34:41.587]                       else if (inherits(cond, "condition")) {
[13:34:41.587]                         if (!is.null(pattern)) {
[13:34:41.587]                           computeRestarts <- base::computeRestarts
[13:34:41.587]                           grepl <- base::grepl
[13:34:41.587]                           restarts <- computeRestarts(cond)
[13:34:41.587]                           for (restart in restarts) {
[13:34:41.587]                             name <- restart$name
[13:34:41.587]                             if (is.null(name)) 
[13:34:41.587]                               next
[13:34:41.587]                             if (!grepl(pattern, name)) 
[13:34:41.587]                               next
[13:34:41.587]                             invokeRestart(restart)
[13:34:41.587]                             muffled <- TRUE
[13:34:41.587]                             break
[13:34:41.587]                           }
[13:34:41.587]                         }
[13:34:41.587]                       }
[13:34:41.587]                       invisible(muffled)
[13:34:41.587]                     }
[13:34:41.587]                     muffleCondition(cond, pattern = "^muffle")
[13:34:41.587]                   }
[13:34:41.587]                 }
[13:34:41.587]                 else {
[13:34:41.587]                   if (TRUE) {
[13:34:41.587]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:41.587]                     {
[13:34:41.587]                       inherits <- base::inherits
[13:34:41.587]                       invokeRestart <- base::invokeRestart
[13:34:41.587]                       is.null <- base::is.null
[13:34:41.587]                       muffled <- FALSE
[13:34:41.587]                       if (inherits(cond, "message")) {
[13:34:41.587]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:41.587]                         if (muffled) 
[13:34:41.587]                           invokeRestart("muffleMessage")
[13:34:41.587]                       }
[13:34:41.587]                       else if (inherits(cond, "warning")) {
[13:34:41.587]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:41.587]                         if (muffled) 
[13:34:41.587]                           invokeRestart("muffleWarning")
[13:34:41.587]                       }
[13:34:41.587]                       else if (inherits(cond, "condition")) {
[13:34:41.587]                         if (!is.null(pattern)) {
[13:34:41.587]                           computeRestarts <- base::computeRestarts
[13:34:41.587]                           grepl <- base::grepl
[13:34:41.587]                           restarts <- computeRestarts(cond)
[13:34:41.587]                           for (restart in restarts) {
[13:34:41.587]                             name <- restart$name
[13:34:41.587]                             if (is.null(name)) 
[13:34:41.587]                               next
[13:34:41.587]                             if (!grepl(pattern, name)) 
[13:34:41.587]                               next
[13:34:41.587]                             invokeRestart(restart)
[13:34:41.587]                             muffled <- TRUE
[13:34:41.587]                             break
[13:34:41.587]                           }
[13:34:41.587]                         }
[13:34:41.587]                       }
[13:34:41.587]                       invisible(muffled)
[13:34:41.587]                     }
[13:34:41.587]                     muffleCondition(cond, pattern = "^muffle")
[13:34:41.587]                   }
[13:34:41.587]                 }
[13:34:41.587]             }
[13:34:41.587]         }))
[13:34:41.587]     }, error = function(ex) {
[13:34:41.587]         base::structure(base::list(value = NULL, visible = NULL, 
[13:34:41.587]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:41.587]                 ...future.rng), started = ...future.startTime, 
[13:34:41.587]             finished = Sys.time(), session_uuid = NA_character_, 
[13:34:41.587]             version = "1.8"), class = "FutureResult")
[13:34:41.587]     }, finally = {
[13:34:41.587]         if (!identical(...future.workdir, getwd())) 
[13:34:41.587]             setwd(...future.workdir)
[13:34:41.587]         {
[13:34:41.587]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:34:41.587]                 ...future.oldOptions$nwarnings <- NULL
[13:34:41.587]             }
[13:34:41.587]             base::options(...future.oldOptions)
[13:34:41.587]             if (.Platform$OS.type == "windows") {
[13:34:41.587]                 old_names <- names(...future.oldEnvVars)
[13:34:41.587]                 envs <- base::Sys.getenv()
[13:34:41.587]                 names <- names(envs)
[13:34:41.587]                 common <- intersect(names, old_names)
[13:34:41.587]                 added <- setdiff(names, old_names)
[13:34:41.587]                 removed <- setdiff(old_names, names)
[13:34:41.587]                 changed <- common[...future.oldEnvVars[common] != 
[13:34:41.587]                   envs[common]]
[13:34:41.587]                 NAMES <- toupper(changed)
[13:34:41.587]                 args <- list()
[13:34:41.587]                 for (kk in seq_along(NAMES)) {
[13:34:41.587]                   name <- changed[[kk]]
[13:34:41.587]                   NAME <- NAMES[[kk]]
[13:34:41.587]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:41.587]                     next
[13:34:41.587]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:41.587]                 }
[13:34:41.587]                 NAMES <- toupper(added)
[13:34:41.587]                 for (kk in seq_along(NAMES)) {
[13:34:41.587]                   name <- added[[kk]]
[13:34:41.587]                   NAME <- NAMES[[kk]]
[13:34:41.587]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:41.587]                     next
[13:34:41.587]                   args[[name]] <- ""
[13:34:41.587]                 }
[13:34:41.587]                 NAMES <- toupper(removed)
[13:34:41.587]                 for (kk in seq_along(NAMES)) {
[13:34:41.587]                   name <- removed[[kk]]
[13:34:41.587]                   NAME <- NAMES[[kk]]
[13:34:41.587]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:41.587]                     next
[13:34:41.587]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:41.587]                 }
[13:34:41.587]                 if (length(args) > 0) 
[13:34:41.587]                   base::do.call(base::Sys.setenv, args = args)
[13:34:41.587]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:34:41.587]             }
[13:34:41.587]             else {
[13:34:41.587]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:34:41.587]             }
[13:34:41.587]             {
[13:34:41.587]                 if (base::length(...future.futureOptionsAdded) > 
[13:34:41.587]                   0L) {
[13:34:41.587]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:34:41.587]                   base::names(opts) <- ...future.futureOptionsAdded
[13:34:41.587]                   base::options(opts)
[13:34:41.587]                 }
[13:34:41.587]                 {
[13:34:41.587]                   {
[13:34:41.587]                     base::assign(".Random.seed", c(10403L, 4L, 
[13:34:41.587]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[13:34:41.587]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[13:34:41.587]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[13:34:41.587]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[13:34:41.587]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[13:34:41.587]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[13:34:41.587]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[13:34:41.587]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[13:34:41.587]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[13:34:41.587]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[13:34:41.587]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[13:34:41.587]                     -1512233174L, -1985955764L, -425390065L, 
[13:34:41.587]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[13:34:41.587]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[13:34:41.587]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[13:34:41.587]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[13:34:41.587]                     1818328109L, -1284085436L, -1981489558L, 
[13:34:41.587]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[13:34:41.587]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[13:34:41.587]                     -1718567047L, -793788661L, -1133789126L, 
[13:34:41.587]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[13:34:41.587]                     -1823521982L, -1345991523L, -1672661737L, 
[13:34:41.587]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[13:34:41.587]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[13:34:41.587]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[13:34:41.587]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[13:34:41.587]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[13:34:41.587]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[13:34:41.587]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[13:34:41.587]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[13:34:41.587]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[13:34:41.587]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[13:34:41.587]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[13:34:41.587]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[13:34:41.587]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[13:34:41.587]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[13:34:41.587]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[13:34:41.587]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[13:34:41.587]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[13:34:41.587]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[13:34:41.587]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[13:34:41.587]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[13:34:41.587]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[13:34:41.587]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[13:34:41.587]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[13:34:41.587]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[13:34:41.587]                     -1119334354L, -1521015416L, -2041922421L, 
[13:34:41.587]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[13:34:41.587]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[13:34:41.587]                     1232111981L, -1801753084L, -1608606422L, 
[13:34:41.587]                     -1172096363L, 1420874031L, -1210473418L, 
[13:34:41.587]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[13:34:41.587]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[13:34:41.587]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[13:34:41.587]                     679371266L, -591318819L, -104578089L, -172818754L, 
[13:34:41.587]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[13:34:41.587]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[13:34:41.587]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[13:34:41.587]                     -332493318L, -1978392251L, -1691039632L, 
[13:34:41.587]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[13:34:41.587]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[13:34:41.587]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[13:34:41.587]                     87560756L, -87565624L, 426345146L, -699970416L, 
[13:34:41.587]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[13:34:41.587]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[13:34:41.587]                     -1178330196L, -687617348L, -1701912078L, 
[13:34:41.587]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[13:34:41.587]                     -1345416048L, 1816730492L, -1570431212L, 
[13:34:41.587]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[13:34:41.587]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[13:34:41.587]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[13:34:41.587]                     -1493184262L, -1943836976L, -590788308L, 
[13:34:41.587]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[13:34:41.587]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[13:34:41.587]                     1274857340L, -1205842638L, -1938479504L, 
[13:34:41.587]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[13:34:41.587]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[13:34:41.587]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[13:34:41.587]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[13:34:41.587]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[13:34:41.587]                     -1460751252L, 1201879444L, -1459788718L, 
[13:34:41.587]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[13:34:41.587]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[13:34:41.587]                     -420945808L, -1997735900L, -1838404552L, 
[13:34:41.587]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[13:34:41.587]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[13:34:41.587]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[13:34:41.587]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[13:34:41.587]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[13:34:41.587]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[13:34:41.587]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[13:34:41.587]                     942193650L, 751741680L, 689743428L, -18455976L, 
[13:34:41.587]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[13:34:41.587]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[13:34:41.587]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[13:34:41.587]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[13:34:41.587]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[13:34:41.587]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[13:34:41.587]                     -1357570110L, 1896595240L, -2066952276L, 
[13:34:41.587]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[13:34:41.587]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[13:34:41.587]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[13:34:41.587]                     769655120L, 236357794L, 181393736L, -13334772L, 
[13:34:41.587]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[13:34:41.587]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[13:34:41.587]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[13:34:41.587]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[13:34:41.587]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[13:34:41.587]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[13:34:41.587]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[13:34:41.587]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[13:34:41.587]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[13:34:41.587]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[13:34:41.587]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[13:34:41.587]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[13:34:41.587]                     -1365842884L, -438961294L, -1851472272L, 
[13:34:41.587]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[13:34:41.587]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[13:34:41.587]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[13:34:41.587]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[13:34:41.587]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[13:34:41.587]                     -594809770L, -2146766621L, -2013964635L, 
[13:34:41.587]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[13:34:41.587]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[13:34:41.587]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[13:34:41.587]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[13:34:41.587]                     -1426021878L, -1285634264L, 1507547537L, 
[13:34:41.587]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[13:34:41.587]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[13:34:41.587]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[13:34:41.587]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[13:34:41.587]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[13:34:41.587]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[13:34:41.587]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[13:34:41.587]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[13:34:41.587]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[13:34:41.587]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[13:34:41.587]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[13:34:41.587]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[13:34:41.587]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[13:34:41.587]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[13:34:41.587]                     -1604604761L, 1421229008L, -1268333714L, 
[13:34:41.587]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[13:34:41.587]                     -2070476623L, -2099222749L, 1141171236L, 
[13:34:41.587]                     -146426158L, -1797385433L, -1129376399L, 
[13:34:41.587]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[13:34:41.587]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[13:34:41.587]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[13:34:41.587]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[13:34:41.587]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[13:34:41.587]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[13:34:41.587]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[13:34:41.587]                     -1092079724L, -1765622238L, -1882554057L, 
[13:34:41.587]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[13:34:41.587]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[13:34:41.587]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[13:34:41.587]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[13:34:41.587]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[13:34:41.587]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[13:34:41.587]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[13:34:41.587]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[13:34:41.587]                     865377681L, -1127426242L), envir = base::globalenv(), 
[13:34:41.587]                       inherits = FALSE)
[13:34:41.587]                     NULL
[13:34:41.587]                   }
[13:34:41.587]                   options(future.plan = NULL)
[13:34:41.587]                   if (is.na(NA_character_)) 
[13:34:41.587]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:34:41.587]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:34:41.587]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:34:41.587]                     .init = FALSE)
[13:34:41.587]                 }
[13:34:41.587]             }
[13:34:41.587]         }
[13:34:41.587]     })
[13:34:41.587]     if (TRUE) {
[13:34:41.587]         base::sink(type = "output", split = FALSE)
[13:34:41.587]         if (TRUE) {
[13:34:41.587]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:34:41.587]         }
[13:34:41.587]         else {
[13:34:41.587]             ...future.result["stdout"] <- base::list(NULL)
[13:34:41.587]         }
[13:34:41.587]         base::close(...future.stdout)
[13:34:41.587]         ...future.stdout <- NULL
[13:34:41.587]     }
[13:34:41.587]     ...future.result$conditions <- ...future.conditions
[13:34:41.587]     ...future.result$finished <- base::Sys.time()
[13:34:41.587]     ...future.result
[13:34:41.587] }
[13:34:41.589] assign_globals() ...
[13:34:41.589] List of 5
[13:34:41.589]  $ ...future.FUN            :function (...)  
[13:34:41.589]  $ future.call.arguments    : list()
[13:34:41.589]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:41.589]  $ ...future.elements_ii    :List of 5
[13:34:41.589]   ..$ : int 0
[13:34:41.589]   ..$ : int 0
[13:34:41.589]   ..$ : int 0
[13:34:41.589]   ..$ : int 0
[13:34:41.589]   ..$ : int 0
[13:34:41.589]  $ ...future.seeds_ii       :List of 5
[13:34:41.589]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[13:34:41.589]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[13:34:41.589]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[13:34:41.589]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[13:34:41.589]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[13:34:41.589]  $ ...future.globals.maxSize: NULL
[13:34:41.589]  - attr(*, "where")=List of 5
[13:34:41.589]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:34:41.589]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:34:41.589]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:34:41.589]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:34:41.589]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:34:41.589]  - attr(*, "resolved")= logi FALSE
[13:34:41.589]  - attr(*, "total_size")= num 616
[13:34:41.589]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:41.589]  - attr(*, "already-done")= logi TRUE
[13:34:41.598] - reassign environment for ‘...future.FUN’
[13:34:41.598] - copied ‘...future.FUN’ to environment
[13:34:41.598] - copied ‘future.call.arguments’ to environment
[13:34:41.598] - copied ‘...future.elements_ii’ to environment
[13:34:41.598] - copied ‘...future.seeds_ii’ to environment
[13:34:41.598] - copied ‘...future.globals.maxSize’ to environment
[13:34:41.599] assign_globals() ... done
[13:34:41.599] plan(): Setting new future strategy stack:
[13:34:41.599] List of future strategies:
[13:34:41.599] 1. sequential:
[13:34:41.599]    - args: function (..., envir = parent.frame())
[13:34:41.599]    - tweaked: FALSE
[13:34:41.599]    - call: NULL
[13:34:41.599] plan(): nbrOfWorkers() = 1
[13:34:41.600] plan(): Setting new future strategy stack:
[13:34:41.600] List of future strategies:
[13:34:41.600] 1. sequential:
[13:34:41.600]    - args: function (..., envir = parent.frame())
[13:34:41.600]    - tweaked: FALSE
[13:34:41.600]    - call: plan(strategy)
[13:34:41.600] plan(): nbrOfWorkers() = 1
[13:34:41.601] SequentialFuture started (and completed)
[13:34:41.601] - Launch lazy future ... done
[13:34:41.601] run() for ‘SequentialFuture’ ... done
[13:34:41.601] Created future:
[13:34:41.601] SequentialFuture:
[13:34:41.601] Label: ‘future_replicate-1’
[13:34:41.601] Expression:
[13:34:41.601] {
[13:34:41.601]     do.call(function(...) {
[13:34:41.601]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:41.601]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:41.601]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:41.601]             on.exit(options(oopts), add = TRUE)
[13:34:41.601]         }
[13:34:41.601]         {
[13:34:41.601]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:41.601]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:41.601]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:41.601]                   envir = globalenv(), inherits = FALSE)
[13:34:41.601]                 ...future.FUN(...future.X_jj, ...)
[13:34:41.601]             })
[13:34:41.601]         }
[13:34:41.601]     }, args = future.call.arguments)
[13:34:41.601] }
[13:34:41.601] Lazy evaluation: FALSE
[13:34:41.601] Asynchronous evaluation: FALSE
[13:34:41.601] Local evaluation: TRUE
[13:34:41.601] Environment: R_GlobalEnv
[13:34:41.601] Capture standard output: TRUE
[13:34:41.601] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:34:41.601] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:34:41.601] Packages: <none>
[13:34:41.601] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:34:41.601] Resolved: TRUE
[13:34:41.601] Value: 280 bytes of class ‘list’
[13:34:41.601] Early signaling: FALSE
[13:34:41.601] Owner process: b8cf10c3-b112-c8f9-9398-a44000e21728
[13:34:41.601] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:34:41.602] Chunk #1 of 1 ... DONE
[13:34:41.602] Launching 1 futures (chunks) ... DONE
[13:34:41.602] Resolving 1 futures (chunks) ...
[13:34:41.602] resolve() on list ...
[13:34:41.602]  recursive: 0
[13:34:41.603]  length: 1
[13:34:41.603] 
[13:34:41.603] resolved() for ‘SequentialFuture’ ...
[13:34:41.603] - state: ‘finished’
[13:34:41.603] - run: TRUE
[13:34:41.603] - result: ‘FutureResult’
[13:34:41.603] resolved() for ‘SequentialFuture’ ... done
[13:34:41.603] Future #1
[13:34:41.603] signalConditionsASAP(SequentialFuture, pos=1) ...
[13:34:41.603] - nx: 1
[13:34:41.603] - relay: TRUE
[13:34:41.604] - stdout: TRUE
[13:34:41.604] - signal: TRUE
[13:34:41.604] - resignal: FALSE
[13:34:41.604] - force: TRUE
[13:34:41.604] - relayed: [n=1] FALSE
[13:34:41.604] - queued futures: [n=1] FALSE
[13:34:41.604]  - until=1
[13:34:41.604]  - relaying element #1
[13:34:41.604] - relayed: [n=1] TRUE
[13:34:41.604] - queued futures: [n=1] TRUE
[13:34:41.604] signalConditionsASAP(SequentialFuture, pos=1) ... done
[13:34:41.605]  length: 0 (resolved future 1)
[13:34:41.605] Relaying remaining futures
[13:34:41.605] signalConditionsASAP(NULL, pos=0) ...
[13:34:41.605] - nx: 1
[13:34:41.605] - relay: TRUE
[13:34:41.605] - stdout: TRUE
[13:34:41.605] - signal: TRUE
[13:34:41.605] - resignal: FALSE
[13:34:41.605] - force: TRUE
[13:34:41.605] - relayed: [n=1] TRUE
[13:34:41.605] - queued futures: [n=1] TRUE
 - flush all
[13:34:41.605] - relayed: [n=1] TRUE
[13:34:41.606] - queued futures: [n=1] TRUE
[13:34:41.606] signalConditionsASAP(NULL, pos=0) ... done
[13:34:41.606] resolve() on list ... DONE
[13:34:41.606]  - Number of value chunks collected: 1
[13:34:41.606] Resolving 1 futures (chunks) ... DONE
[13:34:41.606] Reducing values from 1 chunks ...
[13:34:41.606]  - Number of values collected after concatenation: 5
[13:34:41.606]  - Number of values expected: 5
[13:34:41.606] Reducing values from 1 chunks ... DONE
[13:34:41.606] future_lapply() ... DONE
[13:34:41.607] future_lapply() ...
[13:34:41.607] Generating random seeds ...
[13:34:41.607] Generating random seed streams for 5 elements ...
[13:34:41.607] Generating random seed streams for 5 elements ... DONE
[13:34:41.607] Generating random seeds ... DONE
[13:34:41.607] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:34:41.608] Number of chunks: 1
[13:34:41.608] getGlobalsAndPackagesXApply() ...
[13:34:41.608]  - future.globals: TRUE
[13:34:41.608] getGlobalsAndPackages() ...
[13:34:41.608] Searching for globals...
[13:34:41.609] - globals found: [2] ‘FUN’, ‘sample’
[13:34:41.609] Searching for globals ... DONE
[13:34:41.610] Resolving globals: FALSE
[13:34:41.610] The total size of the 1 globals is 616 bytes (616 bytes)
[13:34:41.610] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:34:41.610] - globals: [1] ‘FUN’
[13:34:41.610] 
[13:34:41.611] getGlobalsAndPackages() ... DONE
[13:34:41.611]  - globals found/used: [n=1] ‘FUN’
[13:34:41.611]  - needed namespaces: [n=0] 
[13:34:41.611] Finding globals ... DONE
[13:34:41.611]  - use_args: TRUE
[13:34:41.611]  - Getting '...' globals ...
[13:34:41.611] resolve() on list ...
[13:34:41.611]  recursive: 0
[13:34:41.611]  length: 1
[13:34:41.612]  elements: ‘...’
[13:34:41.612]  length: 0 (resolved future 1)
[13:34:41.612] resolve() on list ... DONE
[13:34:41.612]    - '...' content: [n=0] 
[13:34:41.612] List of 1
[13:34:41.612]  $ ...: list()
[13:34:41.612]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:41.612]  - attr(*, "where")=List of 1
[13:34:41.612]   ..$ ...:<environment: 0x5627beb90750> 
[13:34:41.612]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:41.612]  - attr(*, "resolved")= logi TRUE
[13:34:41.612]  - attr(*, "total_size")= num NA
[13:34:41.614]  - Getting '...' globals ... DONE
[13:34:41.614] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:34:41.615] List of 2
[13:34:41.615]  $ ...future.FUN:function (...)  
[13:34:41.615]  $ ...          : list()
[13:34:41.615]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:41.615]  - attr(*, "where")=List of 2
[13:34:41.615]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:34:41.615]   ..$ ...          :<environment: 0x5627beb90750> 
[13:34:41.615]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:41.615]  - attr(*, "resolved")= logi FALSE
[13:34:41.615]  - attr(*, "total_size")= num 616
[13:34:41.617] Packages to be attached in all futures: [n=0] 
[13:34:41.617] getGlobalsAndPackagesXApply() ... DONE
[13:34:41.617] Number of futures (= number of chunks): 1
[13:34:41.617] Launching 1 futures (chunks) ...
[13:34:41.617] Chunk #1 of 1 ...
[13:34:41.619]  - Finding globals in 'X' for chunk #1 ...
[13:34:41.619] getGlobalsAndPackages() ...
[13:34:41.619] Searching for globals...
[13:34:41.620] 
[13:34:41.620] Searching for globals ... DONE
[13:34:41.620] - globals: [0] <none>
[13:34:41.620] getGlobalsAndPackages() ... DONE
[13:34:41.620]    + additional globals found: [n=0] 
[13:34:41.620]    + additional namespaces needed: [n=0] 
[13:34:41.620]  - Finding globals in 'X' for chunk #1 ... DONE
[13:34:41.620]  - seeds: [5] <seeds>
[13:34:41.620]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:41.620] getGlobalsAndPackages() ...
[13:34:41.621] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:41.621] Resolving globals: FALSE
[13:34:41.621] Tweak future expression to call with '...' arguments ...
[13:34:41.621] {
[13:34:41.621]     do.call(function(...) {
[13:34:41.621]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:41.621]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:41.621]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:41.621]             on.exit(options(oopts), add = TRUE)
[13:34:41.621]         }
[13:34:41.621]         {
[13:34:41.621]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:41.621]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:41.621]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:41.621]                   envir = globalenv(), inherits = FALSE)
[13:34:41.621]                 ...future.FUN(...future.X_jj, ...)
[13:34:41.621]             })
[13:34:41.621]         }
[13:34:41.621]     }, args = future.call.arguments)
[13:34:41.621] }
[13:34:41.621] Tweak future expression to call with '...' arguments ... DONE
[13:34:41.621] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:41.622] 
[13:34:41.622] getGlobalsAndPackages() ... DONE
[13:34:41.622] run() for ‘Future’ ...
[13:34:41.622] - state: ‘created’
[13:34:41.622] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:34:41.622] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:34:41.623] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:34:41.623]   - Field: ‘label’
[13:34:41.623]   - Field: ‘local’
[13:34:41.623]   - Field: ‘owner’
[13:34:41.623]   - Field: ‘envir’
[13:34:41.623]   - Field: ‘packages’
[13:34:41.623]   - Field: ‘gc’
[13:34:41.623]   - Field: ‘conditions’
[13:34:41.623]   - Field: ‘expr’
[13:34:41.623]   - Field: ‘uuid’
[13:34:41.623]   - Field: ‘seed’
[13:34:41.624]   - Field: ‘version’
[13:34:41.624]   - Field: ‘result’
[13:34:41.624]   - Field: ‘asynchronous’
[13:34:41.624]   - Field: ‘calls’
[13:34:41.624]   - Field: ‘globals’
[13:34:41.624]   - Field: ‘stdout’
[13:34:41.624]   - Field: ‘earlySignal’
[13:34:41.624]   - Field: ‘lazy’
[13:34:41.624]   - Field: ‘state’
[13:34:41.624] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:34:41.624] - Launch lazy future ...
[13:34:41.625] Packages needed by the future expression (n = 0): <none>
[13:34:41.625] Packages needed by future strategies (n = 0): <none>
[13:34:41.625] {
[13:34:41.625]     {
[13:34:41.625]         {
[13:34:41.625]             ...future.startTime <- base::Sys.time()
[13:34:41.625]             {
[13:34:41.625]                 {
[13:34:41.625]                   {
[13:34:41.625]                     base::local({
[13:34:41.625]                       has_future <- base::requireNamespace("future", 
[13:34:41.625]                         quietly = TRUE)
[13:34:41.625]                       if (has_future) {
[13:34:41.625]                         ns <- base::getNamespace("future")
[13:34:41.625]                         version <- ns[[".package"]][["version"]]
[13:34:41.625]                         if (is.null(version)) 
[13:34:41.625]                           version <- utils::packageVersion("future")
[13:34:41.625]                       }
[13:34:41.625]                       else {
[13:34:41.625]                         version <- NULL
[13:34:41.625]                       }
[13:34:41.625]                       if (!has_future || version < "1.8.0") {
[13:34:41.625]                         info <- base::c(r_version = base::gsub("R version ", 
[13:34:41.625]                           "", base::R.version$version.string), 
[13:34:41.625]                           platform = base::sprintf("%s (%s-bit)", 
[13:34:41.625]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:34:41.625]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:34:41.625]                             "release", "version")], collapse = " "), 
[13:34:41.625]                           hostname = base::Sys.info()[["nodename"]])
[13:34:41.625]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:34:41.625]                           info)
[13:34:41.625]                         info <- base::paste(info, collapse = "; ")
[13:34:41.625]                         if (!has_future) {
[13:34:41.625]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:34:41.625]                             info)
[13:34:41.625]                         }
[13:34:41.625]                         else {
[13:34:41.625]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:34:41.625]                             info, version)
[13:34:41.625]                         }
[13:34:41.625]                         base::stop(msg)
[13:34:41.625]                       }
[13:34:41.625]                     })
[13:34:41.625]                   }
[13:34:41.625]                   ...future.strategy.old <- future::plan("list")
[13:34:41.625]                   options(future.plan = NULL)
[13:34:41.625]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:34:41.625]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:34:41.625]                 }
[13:34:41.625]                 ...future.workdir <- getwd()
[13:34:41.625]             }
[13:34:41.625]             ...future.oldOptions <- base::as.list(base::.Options)
[13:34:41.625]             ...future.oldEnvVars <- base::Sys.getenv()
[13:34:41.625]         }
[13:34:41.625]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:34:41.625]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:34:41.625]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:34:41.625]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:34:41.625]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:34:41.625]             future.stdout.windows.reencode = NULL, width = 80L)
[13:34:41.625]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:34:41.625]             base::names(...future.oldOptions))
[13:34:41.625]     }
[13:34:41.625]     if (FALSE) {
[13:34:41.625]     }
[13:34:41.625]     else {
[13:34:41.625]         if (TRUE) {
[13:34:41.625]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:34:41.625]                 open = "w")
[13:34:41.625]         }
[13:34:41.625]         else {
[13:34:41.625]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:34:41.625]                 windows = "NUL", "/dev/null"), open = "w")
[13:34:41.625]         }
[13:34:41.625]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:34:41.625]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:34:41.625]             base::sink(type = "output", split = FALSE)
[13:34:41.625]             base::close(...future.stdout)
[13:34:41.625]         }, add = TRUE)
[13:34:41.625]     }
[13:34:41.625]     ...future.frame <- base::sys.nframe()
[13:34:41.625]     ...future.conditions <- base::list()
[13:34:41.625]     ...future.rng <- base::globalenv()$.Random.seed
[13:34:41.625]     if (FALSE) {
[13:34:41.625]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:34:41.625]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:34:41.625]     }
[13:34:41.625]     ...future.result <- base::tryCatch({
[13:34:41.625]         base::withCallingHandlers({
[13:34:41.625]             ...future.value <- base::withVisible(base::local({
[13:34:41.625]                 do.call(function(...) {
[13:34:41.625]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:41.625]                   if (!identical(...future.globals.maxSize.org, 
[13:34:41.625]                     ...future.globals.maxSize)) {
[13:34:41.625]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:41.625]                     on.exit(options(oopts), add = TRUE)
[13:34:41.625]                   }
[13:34:41.625]                   {
[13:34:41.625]                     lapply(seq_along(...future.elements_ii), 
[13:34:41.625]                       FUN = function(jj) {
[13:34:41.625]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:41.625]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:41.625]                           envir = globalenv(), inherits = FALSE)
[13:34:41.625]                         ...future.FUN(...future.X_jj, ...)
[13:34:41.625]                       })
[13:34:41.625]                   }
[13:34:41.625]                 }, args = future.call.arguments)
[13:34:41.625]             }))
[13:34:41.625]             future::FutureResult(value = ...future.value$value, 
[13:34:41.625]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:41.625]                   ...future.rng), globalenv = if (FALSE) 
[13:34:41.625]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:34:41.625]                     ...future.globalenv.names))
[13:34:41.625]                 else NULL, started = ...future.startTime, version = "1.8")
[13:34:41.625]         }, condition = base::local({
[13:34:41.625]             c <- base::c
[13:34:41.625]             inherits <- base::inherits
[13:34:41.625]             invokeRestart <- base::invokeRestart
[13:34:41.625]             length <- base::length
[13:34:41.625]             list <- base::list
[13:34:41.625]             seq.int <- base::seq.int
[13:34:41.625]             signalCondition <- base::signalCondition
[13:34:41.625]             sys.calls <- base::sys.calls
[13:34:41.625]             `[[` <- base::`[[`
[13:34:41.625]             `+` <- base::`+`
[13:34:41.625]             `<<-` <- base::`<<-`
[13:34:41.625]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:34:41.625]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:34:41.625]                   3L)]
[13:34:41.625]             }
[13:34:41.625]             function(cond) {
[13:34:41.625]                 is_error <- inherits(cond, "error")
[13:34:41.625]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:34:41.625]                   NULL)
[13:34:41.625]                 if (is_error) {
[13:34:41.625]                   sessionInformation <- function() {
[13:34:41.625]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:34:41.625]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:34:41.625]                       search = base::search(), system = base::Sys.info())
[13:34:41.625]                   }
[13:34:41.625]                   ...future.conditions[[length(...future.conditions) + 
[13:34:41.625]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:34:41.625]                     cond$call), session = sessionInformation(), 
[13:34:41.625]                     timestamp = base::Sys.time(), signaled = 0L)
[13:34:41.625]                   signalCondition(cond)
[13:34:41.625]                 }
[13:34:41.625]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:34:41.625]                 "immediateCondition"))) {
[13:34:41.625]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:34:41.625]                   ...future.conditions[[length(...future.conditions) + 
[13:34:41.625]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:34:41.625]                   if (TRUE && !signal) {
[13:34:41.625]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:41.625]                     {
[13:34:41.625]                       inherits <- base::inherits
[13:34:41.625]                       invokeRestart <- base::invokeRestart
[13:34:41.625]                       is.null <- base::is.null
[13:34:41.625]                       muffled <- FALSE
[13:34:41.625]                       if (inherits(cond, "message")) {
[13:34:41.625]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:41.625]                         if (muffled) 
[13:34:41.625]                           invokeRestart("muffleMessage")
[13:34:41.625]                       }
[13:34:41.625]                       else if (inherits(cond, "warning")) {
[13:34:41.625]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:41.625]                         if (muffled) 
[13:34:41.625]                           invokeRestart("muffleWarning")
[13:34:41.625]                       }
[13:34:41.625]                       else if (inherits(cond, "condition")) {
[13:34:41.625]                         if (!is.null(pattern)) {
[13:34:41.625]                           computeRestarts <- base::computeRestarts
[13:34:41.625]                           grepl <- base::grepl
[13:34:41.625]                           restarts <- computeRestarts(cond)
[13:34:41.625]                           for (restart in restarts) {
[13:34:41.625]                             name <- restart$name
[13:34:41.625]                             if (is.null(name)) 
[13:34:41.625]                               next
[13:34:41.625]                             if (!grepl(pattern, name)) 
[13:34:41.625]                               next
[13:34:41.625]                             invokeRestart(restart)
[13:34:41.625]                             muffled <- TRUE
[13:34:41.625]                             break
[13:34:41.625]                           }
[13:34:41.625]                         }
[13:34:41.625]                       }
[13:34:41.625]                       invisible(muffled)
[13:34:41.625]                     }
[13:34:41.625]                     muffleCondition(cond, pattern = "^muffle")
[13:34:41.625]                   }
[13:34:41.625]                 }
[13:34:41.625]                 else {
[13:34:41.625]                   if (TRUE) {
[13:34:41.625]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:41.625]                     {
[13:34:41.625]                       inherits <- base::inherits
[13:34:41.625]                       invokeRestart <- base::invokeRestart
[13:34:41.625]                       is.null <- base::is.null
[13:34:41.625]                       muffled <- FALSE
[13:34:41.625]                       if (inherits(cond, "message")) {
[13:34:41.625]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:41.625]                         if (muffled) 
[13:34:41.625]                           invokeRestart("muffleMessage")
[13:34:41.625]                       }
[13:34:41.625]                       else if (inherits(cond, "warning")) {
[13:34:41.625]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:41.625]                         if (muffled) 
[13:34:41.625]                           invokeRestart("muffleWarning")
[13:34:41.625]                       }
[13:34:41.625]                       else if (inherits(cond, "condition")) {
[13:34:41.625]                         if (!is.null(pattern)) {
[13:34:41.625]                           computeRestarts <- base::computeRestarts
[13:34:41.625]                           grepl <- base::grepl
[13:34:41.625]                           restarts <- computeRestarts(cond)
[13:34:41.625]                           for (restart in restarts) {
[13:34:41.625]                             name <- restart$name
[13:34:41.625]                             if (is.null(name)) 
[13:34:41.625]                               next
[13:34:41.625]                             if (!grepl(pattern, name)) 
[13:34:41.625]                               next
[13:34:41.625]                             invokeRestart(restart)
[13:34:41.625]                             muffled <- TRUE
[13:34:41.625]                             break
[13:34:41.625]                           }
[13:34:41.625]                         }
[13:34:41.625]                       }
[13:34:41.625]                       invisible(muffled)
[13:34:41.625]                     }
[13:34:41.625]                     muffleCondition(cond, pattern = "^muffle")
[13:34:41.625]                   }
[13:34:41.625]                 }
[13:34:41.625]             }
[13:34:41.625]         }))
[13:34:41.625]     }, error = function(ex) {
[13:34:41.625]         base::structure(base::list(value = NULL, visible = NULL, 
[13:34:41.625]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:41.625]                 ...future.rng), started = ...future.startTime, 
[13:34:41.625]             finished = Sys.time(), session_uuid = NA_character_, 
[13:34:41.625]             version = "1.8"), class = "FutureResult")
[13:34:41.625]     }, finally = {
[13:34:41.625]         if (!identical(...future.workdir, getwd())) 
[13:34:41.625]             setwd(...future.workdir)
[13:34:41.625]         {
[13:34:41.625]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:34:41.625]                 ...future.oldOptions$nwarnings <- NULL
[13:34:41.625]             }
[13:34:41.625]             base::options(...future.oldOptions)
[13:34:41.625]             if (.Platform$OS.type == "windows") {
[13:34:41.625]                 old_names <- names(...future.oldEnvVars)
[13:34:41.625]                 envs <- base::Sys.getenv()
[13:34:41.625]                 names <- names(envs)
[13:34:41.625]                 common <- intersect(names, old_names)
[13:34:41.625]                 added <- setdiff(names, old_names)
[13:34:41.625]                 removed <- setdiff(old_names, names)
[13:34:41.625]                 changed <- common[...future.oldEnvVars[common] != 
[13:34:41.625]                   envs[common]]
[13:34:41.625]                 NAMES <- toupper(changed)
[13:34:41.625]                 args <- list()
[13:34:41.625]                 for (kk in seq_along(NAMES)) {
[13:34:41.625]                   name <- changed[[kk]]
[13:34:41.625]                   NAME <- NAMES[[kk]]
[13:34:41.625]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:41.625]                     next
[13:34:41.625]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:41.625]                 }
[13:34:41.625]                 NAMES <- toupper(added)
[13:34:41.625]                 for (kk in seq_along(NAMES)) {
[13:34:41.625]                   name <- added[[kk]]
[13:34:41.625]                   NAME <- NAMES[[kk]]
[13:34:41.625]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:41.625]                     next
[13:34:41.625]                   args[[name]] <- ""
[13:34:41.625]                 }
[13:34:41.625]                 NAMES <- toupper(removed)
[13:34:41.625]                 for (kk in seq_along(NAMES)) {
[13:34:41.625]                   name <- removed[[kk]]
[13:34:41.625]                   NAME <- NAMES[[kk]]
[13:34:41.625]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:41.625]                     next
[13:34:41.625]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:41.625]                 }
[13:34:41.625]                 if (length(args) > 0) 
[13:34:41.625]                   base::do.call(base::Sys.setenv, args = args)
[13:34:41.625]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:34:41.625]             }
[13:34:41.625]             else {
[13:34:41.625]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:34:41.625]             }
[13:34:41.625]             {
[13:34:41.625]                 if (base::length(...future.futureOptionsAdded) > 
[13:34:41.625]                   0L) {
[13:34:41.625]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:34:41.625]                   base::names(opts) <- ...future.futureOptionsAdded
[13:34:41.625]                   base::options(opts)
[13:34:41.625]                 }
[13:34:41.625]                 {
[13:34:41.625]                   {
[13:34:41.625]                     base::assign(".Random.seed", c(10403L, 6L, 
[13:34:41.625]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[13:34:41.625]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[13:34:41.625]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[13:34:41.625]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[13:34:41.625]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[13:34:41.625]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[13:34:41.625]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[13:34:41.625]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[13:34:41.625]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[13:34:41.625]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[13:34:41.625]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[13:34:41.625]                     -1512233174L, -1985955764L, -425390065L, 
[13:34:41.625]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[13:34:41.625]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[13:34:41.625]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[13:34:41.625]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[13:34:41.625]                     1818328109L, -1284085436L, -1981489558L, 
[13:34:41.625]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[13:34:41.625]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[13:34:41.625]                     -1718567047L, -793788661L, -1133789126L, 
[13:34:41.625]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[13:34:41.625]                     -1823521982L, -1345991523L, -1672661737L, 
[13:34:41.625]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[13:34:41.625]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[13:34:41.625]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[13:34:41.625]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[13:34:41.625]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[13:34:41.625]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[13:34:41.625]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[13:34:41.625]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[13:34:41.625]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[13:34:41.625]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[13:34:41.625]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[13:34:41.625]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[13:34:41.625]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[13:34:41.625]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[13:34:41.625]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[13:34:41.625]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[13:34:41.625]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[13:34:41.625]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[13:34:41.625]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[13:34:41.625]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[13:34:41.625]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[13:34:41.625]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[13:34:41.625]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[13:34:41.625]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[13:34:41.625]                     -1119334354L, -1521015416L, -2041922421L, 
[13:34:41.625]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[13:34:41.625]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[13:34:41.625]                     1232111981L, -1801753084L, -1608606422L, 
[13:34:41.625]                     -1172096363L, 1420874031L, -1210473418L, 
[13:34:41.625]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[13:34:41.625]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[13:34:41.625]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[13:34:41.625]                     679371266L, -591318819L, -104578089L, -172818754L, 
[13:34:41.625]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[13:34:41.625]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[13:34:41.625]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[13:34:41.625]                     -332493318L, -1978392251L, -1691039632L, 
[13:34:41.625]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[13:34:41.625]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[13:34:41.625]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[13:34:41.625]                     87560756L, -87565624L, 426345146L, -699970416L, 
[13:34:41.625]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[13:34:41.625]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[13:34:41.625]                     -1178330196L, -687617348L, -1701912078L, 
[13:34:41.625]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[13:34:41.625]                     -1345416048L, 1816730492L, -1570431212L, 
[13:34:41.625]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[13:34:41.625]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[13:34:41.625]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[13:34:41.625]                     -1493184262L, -1943836976L, -590788308L, 
[13:34:41.625]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[13:34:41.625]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[13:34:41.625]                     1274857340L, -1205842638L, -1938479504L, 
[13:34:41.625]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[13:34:41.625]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[13:34:41.625]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[13:34:41.625]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[13:34:41.625]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[13:34:41.625]                     -1460751252L, 1201879444L, -1459788718L, 
[13:34:41.625]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[13:34:41.625]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[13:34:41.625]                     -420945808L, -1997735900L, -1838404552L, 
[13:34:41.625]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[13:34:41.625]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[13:34:41.625]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[13:34:41.625]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[13:34:41.625]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[13:34:41.625]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[13:34:41.625]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[13:34:41.625]                     942193650L, 751741680L, 689743428L, -18455976L, 
[13:34:41.625]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[13:34:41.625]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[13:34:41.625]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[13:34:41.625]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[13:34:41.625]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[13:34:41.625]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[13:34:41.625]                     -1357570110L, 1896595240L, -2066952276L, 
[13:34:41.625]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[13:34:41.625]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[13:34:41.625]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[13:34:41.625]                     769655120L, 236357794L, 181393736L, -13334772L, 
[13:34:41.625]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[13:34:41.625]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[13:34:41.625]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[13:34:41.625]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[13:34:41.625]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[13:34:41.625]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[13:34:41.625]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[13:34:41.625]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[13:34:41.625]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[13:34:41.625]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[13:34:41.625]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[13:34:41.625]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[13:34:41.625]                     -1365842884L, -438961294L, -1851472272L, 
[13:34:41.625]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[13:34:41.625]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[13:34:41.625]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[13:34:41.625]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[13:34:41.625]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[13:34:41.625]                     -594809770L, -2146766621L, -2013964635L, 
[13:34:41.625]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[13:34:41.625]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[13:34:41.625]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[13:34:41.625]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[13:34:41.625]                     -1426021878L, -1285634264L, 1507547537L, 
[13:34:41.625]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[13:34:41.625]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[13:34:41.625]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[13:34:41.625]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[13:34:41.625]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[13:34:41.625]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[13:34:41.625]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[13:34:41.625]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[13:34:41.625]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[13:34:41.625]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[13:34:41.625]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[13:34:41.625]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[13:34:41.625]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[13:34:41.625]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[13:34:41.625]                     -1604604761L, 1421229008L, -1268333714L, 
[13:34:41.625]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[13:34:41.625]                     -2070476623L, -2099222749L, 1141171236L, 
[13:34:41.625]                     -146426158L, -1797385433L, -1129376399L, 
[13:34:41.625]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[13:34:41.625]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[13:34:41.625]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[13:34:41.625]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[13:34:41.625]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[13:34:41.625]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[13:34:41.625]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[13:34:41.625]                     -1092079724L, -1765622238L, -1882554057L, 
[13:34:41.625]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[13:34:41.625]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[13:34:41.625]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[13:34:41.625]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[13:34:41.625]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[13:34:41.625]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[13:34:41.625]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[13:34:41.625]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[13:34:41.625]                     865377681L, -1127426242L), envir = base::globalenv(), 
[13:34:41.625]                       inherits = FALSE)
[13:34:41.625]                     NULL
[13:34:41.625]                   }
[13:34:41.625]                   options(future.plan = NULL)
[13:34:41.625]                   if (is.na(NA_character_)) 
[13:34:41.625]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:34:41.625]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:34:41.625]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:34:41.625]                     .init = FALSE)
[13:34:41.625]                 }
[13:34:41.625]             }
[13:34:41.625]         }
[13:34:41.625]     })
[13:34:41.625]     if (TRUE) {
[13:34:41.625]         base::sink(type = "output", split = FALSE)
[13:34:41.625]         if (TRUE) {
[13:34:41.625]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:34:41.625]         }
[13:34:41.625]         else {
[13:34:41.625]             ...future.result["stdout"] <- base::list(NULL)
[13:34:41.625]         }
[13:34:41.625]         base::close(...future.stdout)
[13:34:41.625]         ...future.stdout <- NULL
[13:34:41.625]     }
[13:34:41.625]     ...future.result$conditions <- ...future.conditions
[13:34:41.625]     ...future.result$finished <- base::Sys.time()
[13:34:41.625]     ...future.result
[13:34:41.625] }
[13:34:41.628] assign_globals() ...
[13:34:41.628] List of 5
[13:34:41.628]  $ ...future.FUN            :function (...)  
[13:34:41.628]  $ future.call.arguments    : list()
[13:34:41.628]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:41.628]  $ ...future.elements_ii    :List of 5
[13:34:41.628]   ..$ : int 0
[13:34:41.628]   ..$ : int 0
[13:34:41.628]   ..$ : int 0
[13:34:41.628]   ..$ : int 0
[13:34:41.628]   ..$ : int 0
[13:34:41.628]  $ ...future.seeds_ii       :List of 5
[13:34:41.628]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[13:34:41.628]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[13:34:41.628]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[13:34:41.628]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[13:34:41.628]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[13:34:41.628]  $ ...future.globals.maxSize: NULL
[13:34:41.628]  - attr(*, "where")=List of 5
[13:34:41.628]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:34:41.628]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:34:41.628]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:34:41.628]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:34:41.628]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:34:41.628]  - attr(*, "resolved")= logi FALSE
[13:34:41.628]  - attr(*, "total_size")= num 616
[13:34:41.628]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:41.628]  - attr(*, "already-done")= logi TRUE
[13:34:41.635] - reassign environment for ‘...future.FUN’
[13:34:41.635] - copied ‘...future.FUN’ to environment
[13:34:41.635] - copied ‘future.call.arguments’ to environment
[13:34:41.635] - copied ‘...future.elements_ii’ to environment
[13:34:41.635] - copied ‘...future.seeds_ii’ to environment
[13:34:41.635] - copied ‘...future.globals.maxSize’ to environment
[13:34:41.635] assign_globals() ... done
[13:34:41.636] plan(): Setting new future strategy stack:
[13:34:41.636] List of future strategies:
[13:34:41.636] 1. sequential:
[13:34:41.636]    - args: function (..., envir = parent.frame())
[13:34:41.636]    - tweaked: FALSE
[13:34:41.636]    - call: NULL
[13:34:41.636] plan(): nbrOfWorkers() = 1
[13:34:41.637] plan(): Setting new future strategy stack:
[13:34:41.637] List of future strategies:
[13:34:41.637] 1. sequential:
[13:34:41.637]    - args: function (..., envir = parent.frame())
[13:34:41.637]    - tweaked: FALSE
[13:34:41.637]    - call: plan(strategy)
[13:34:41.637] plan(): nbrOfWorkers() = 1
[13:34:41.637] SequentialFuture started (and completed)
[13:34:41.637] - Launch lazy future ... done
[13:34:41.638] run() for ‘SequentialFuture’ ... done
[13:34:41.638] Created future:
[13:34:41.638] SequentialFuture:
[13:34:41.638] Label: ‘future_replicate-1’
[13:34:41.638] Expression:
[13:34:41.638] {
[13:34:41.638]     do.call(function(...) {
[13:34:41.638]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:41.638]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:41.638]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:41.638]             on.exit(options(oopts), add = TRUE)
[13:34:41.638]         }
[13:34:41.638]         {
[13:34:41.638]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:41.638]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:41.638]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:41.638]                   envir = globalenv(), inherits = FALSE)
[13:34:41.638]                 ...future.FUN(...future.X_jj, ...)
[13:34:41.638]             })
[13:34:41.638]         }
[13:34:41.638]     }, args = future.call.arguments)
[13:34:41.638] }
[13:34:41.638] Lazy evaluation: FALSE
[13:34:41.638] Asynchronous evaluation: FALSE
[13:34:41.638] Local evaluation: TRUE
[13:34:41.638] Environment: R_GlobalEnv
[13:34:41.638] Capture standard output: TRUE
[13:34:41.638] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:34:41.638] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:34:41.638] Packages: <none>
[13:34:41.638] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:34:41.638] Resolved: TRUE
[13:34:41.638] Value: 280 bytes of class ‘list’
[13:34:41.638] Early signaling: FALSE
[13:34:41.638] Owner process: b8cf10c3-b112-c8f9-9398-a44000e21728
[13:34:41.638] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:34:41.639] Chunk #1 of 1 ... DONE
[13:34:41.639] Launching 1 futures (chunks) ... DONE
[13:34:41.639] Resolving 1 futures (chunks) ...
[13:34:41.639] resolve() on list ...
[13:34:41.639]  recursive: 0
[13:34:41.639]  length: 1
[13:34:41.639] 
[13:34:41.639] resolved() for ‘SequentialFuture’ ...
[13:34:41.640] - state: ‘finished’
[13:34:41.640] - run: TRUE
[13:34:41.640] - result: ‘FutureResult’
[13:34:41.640] resolved() for ‘SequentialFuture’ ... done
[13:34:41.640] Future #1
[13:34:41.640] signalConditionsASAP(SequentialFuture, pos=1) ...
[13:34:41.640] - nx: 1
[13:34:41.640] - relay: TRUE
[13:34:41.640] - stdout: TRUE
[13:34:41.640] - signal: TRUE
[13:34:41.640] - resignal: FALSE
[13:34:41.641] - force: TRUE
[13:34:41.641] - relayed: [n=1] FALSE
[13:34:41.641] - queued futures: [n=1] FALSE
[13:34:41.641]  - until=1
[13:34:41.641]  - relaying element #1
[13:34:41.641] - relayed: [n=1] TRUE
[13:34:41.641] - queued futures: [n=1] TRUE
[13:34:41.641] signalConditionsASAP(SequentialFuture, pos=1) ... done
[13:34:41.641]  length: 0 (resolved future 1)
[13:34:41.641] Relaying remaining futures
[13:34:41.642] signalConditionsASAP(NULL, pos=0) ...
[13:34:41.642] - nx: 1
[13:34:41.642] - relay: TRUE
[13:34:41.642] - stdout: TRUE
[13:34:41.642] - signal: TRUE
[13:34:41.642] - resignal: FALSE
[13:34:41.642] - force: TRUE
[13:34:41.642] - relayed: [n=1] TRUE
[13:34:41.642] - queued futures: [n=1] TRUE
 - flush all
[13:34:41.642] - relayed: [n=1] TRUE
[13:34:41.644] - queued futures: [n=1] TRUE
[13:34:41.644] signalConditionsASAP(NULL, pos=0) ... done
[13:34:41.644] resolve() on list ... DONE
[13:34:41.644]  - Number of value chunks collected: 1
[13:34:41.644] Resolving 1 futures (chunks) ... DONE
[13:34:41.644] Reducing values from 1 chunks ...
[13:34:41.645]  - Number of values collected after concatenation: 5
[13:34:41.645]  - Number of values expected: 5
[13:34:41.645] Reducing values from 1 chunks ... DONE
[13:34:41.645] future_lapply() ... DONE
- example(replicate) ...
[13:34:41.645] future_lapply() ...
[13:34:41.646] Generating random seeds ...
[13:34:41.646] Generating random seed streams for 5 elements ...
[13:34:41.646] Generating random seed streams for 5 elements ... DONE
[13:34:41.646] Generating random seeds ... DONE
[13:34:41.646] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:34:41.647] Number of chunks: 1
[13:34:41.647] getGlobalsAndPackagesXApply() ...
[13:34:41.647]  - future.globals: TRUE
[13:34:41.647] getGlobalsAndPackages() ...
[13:34:41.647] Searching for globals...
[13:34:41.649] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[13:34:41.649] Searching for globals ... DONE
[13:34:41.649] Resolving globals: FALSE
[13:34:41.649] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[13:34:41.650] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[13:34:41.650] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[13:34:41.650] 
[13:34:41.650] getGlobalsAndPackages() ... DONE
[13:34:41.650]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[13:34:41.650]  - needed namespaces: [n=0] 
[13:34:41.650] Finding globals ... DONE
[13:34:41.650]  - use_args: TRUE
[13:34:41.650]  - Getting '...' globals ...
[13:34:41.651] resolve() on list ...
[13:34:41.651]  recursive: 0
[13:34:41.651]  length: 1
[13:34:41.651]  elements: ‘...’
[13:34:41.651]  length: 0 (resolved future 1)
[13:34:41.651] resolve() on list ... DONE
[13:34:41.651]    - '...' content: [n=0] 
[13:34:41.651] List of 1
[13:34:41.651]  $ ...: list()
[13:34:41.651]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:41.651]  - attr(*, "where")=List of 1
[13:34:41.651]   ..$ ...:<environment: 0x5627be028688> 
[13:34:41.651]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:41.651]  - attr(*, "resolved")= logi TRUE
[13:34:41.651]  - attr(*, "total_size")= num NA
[13:34:41.654]  - Getting '...' globals ... DONE
[13:34:41.654] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[13:34:41.654] List of 4
[13:34:41.654]  $ ...future.FUN:function (...)  
[13:34:41.654]  $ foo          :function (x = 1, y = 2)  
[13:34:41.654]  $ x            : num 3
[13:34:41.654]  $ ...          : list()
[13:34:41.654]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:41.654]  - attr(*, "where")=List of 4
[13:34:41.654]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:34:41.654]   ..$ foo          :<environment: R_EmptyEnv> 
[13:34:41.654]   ..$ x            :<environment: R_EmptyEnv> 
[13:34:41.654]   ..$ ...          :<environment: 0x5627be028688> 
[13:34:41.654]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:41.654]  - attr(*, "resolved")= logi FALSE
[13:34:41.654]  - attr(*, "total_size")= num 2200
[13:34:41.657] Packages to be attached in all futures: [n=0] 
[13:34:41.657] getGlobalsAndPackagesXApply() ... DONE
[13:34:41.658] Number of futures (= number of chunks): 1
[13:34:41.658] Launching 1 futures (chunks) ...
[13:34:41.658] Chunk #1 of 1 ...
[13:34:41.658]  - Finding globals in 'X' for chunk #1 ...
[13:34:41.658] getGlobalsAndPackages() ...
[13:34:41.658] Searching for globals...
[13:34:41.658] 
[13:34:41.659] Searching for globals ... DONE
[13:34:41.659] - globals: [0] <none>
[13:34:41.659] getGlobalsAndPackages() ... DONE
[13:34:41.659]    + additional globals found: [n=0] 
[13:34:41.659]    + additional namespaces needed: [n=0] 
[13:34:41.659]  - Finding globals in 'X' for chunk #1 ... DONE
[13:34:41.659]  - seeds: [5] <seeds>
[13:34:41.659]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:41.659] getGlobalsAndPackages() ...
[13:34:41.659] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:41.659] Resolving globals: FALSE
[13:34:41.660] Tweak future expression to call with '...' arguments ...
[13:34:41.660] {
[13:34:41.660]     do.call(function(...) {
[13:34:41.660]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:41.660]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:41.660]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:41.660]             on.exit(options(oopts), add = TRUE)
[13:34:41.660]         }
[13:34:41.660]         {
[13:34:41.660]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:41.660]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:41.660]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:41.660]                   envir = globalenv(), inherits = FALSE)
[13:34:41.660]                 ...future.FUN(...future.X_jj, ...)
[13:34:41.660]             })
[13:34:41.660]         }
[13:34:41.660]     }, args = future.call.arguments)
[13:34:41.660] }
[13:34:41.660] Tweak future expression to call with '...' arguments ... DONE
[13:34:41.660] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:41.660] 
[13:34:41.660] getGlobalsAndPackages() ... DONE
[13:34:41.661] run() for ‘Future’ ...
[13:34:41.661] - state: ‘created’
[13:34:41.661] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:34:41.661] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:34:41.661] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:34:41.661]   - Field: ‘label’
[13:34:41.662]   - Field: ‘local’
[13:34:41.662]   - Field: ‘owner’
[13:34:41.662]   - Field: ‘envir’
[13:34:41.662]   - Field: ‘packages’
[13:34:41.662]   - Field: ‘gc’
[13:34:41.662]   - Field: ‘conditions’
[13:34:41.662]   - Field: ‘expr’
[13:34:41.662]   - Field: ‘uuid’
[13:34:41.662]   - Field: ‘seed’
[13:34:41.662]   - Field: ‘version’
[13:34:41.662]   - Field: ‘result’
[13:34:41.663]   - Field: ‘asynchronous’
[13:34:41.663]   - Field: ‘calls’
[13:34:41.663]   - Field: ‘globals’
[13:34:41.663]   - Field: ‘stdout’
[13:34:41.663]   - Field: ‘earlySignal’
[13:34:41.663]   - Field: ‘lazy’
[13:34:41.663]   - Field: ‘state’
[13:34:41.663] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:34:41.663] - Launch lazy future ...
[13:34:41.663] Packages needed by the future expression (n = 0): <none>
[13:34:41.664] Packages needed by future strategies (n = 0): <none>
[13:34:41.664] {
[13:34:41.664]     {
[13:34:41.664]         {
[13:34:41.664]             ...future.startTime <- base::Sys.time()
[13:34:41.664]             {
[13:34:41.664]                 {
[13:34:41.664]                   {
[13:34:41.664]                     base::local({
[13:34:41.664]                       has_future <- base::requireNamespace("future", 
[13:34:41.664]                         quietly = TRUE)
[13:34:41.664]                       if (has_future) {
[13:34:41.664]                         ns <- base::getNamespace("future")
[13:34:41.664]                         version <- ns[[".package"]][["version"]]
[13:34:41.664]                         if (is.null(version)) 
[13:34:41.664]                           version <- utils::packageVersion("future")
[13:34:41.664]                       }
[13:34:41.664]                       else {
[13:34:41.664]                         version <- NULL
[13:34:41.664]                       }
[13:34:41.664]                       if (!has_future || version < "1.8.0") {
[13:34:41.664]                         info <- base::c(r_version = base::gsub("R version ", 
[13:34:41.664]                           "", base::R.version$version.string), 
[13:34:41.664]                           platform = base::sprintf("%s (%s-bit)", 
[13:34:41.664]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:34:41.664]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:34:41.664]                             "release", "version")], collapse = " "), 
[13:34:41.664]                           hostname = base::Sys.info()[["nodename"]])
[13:34:41.664]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:34:41.664]                           info)
[13:34:41.664]                         info <- base::paste(info, collapse = "; ")
[13:34:41.664]                         if (!has_future) {
[13:34:41.664]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:34:41.664]                             info)
[13:34:41.664]                         }
[13:34:41.664]                         else {
[13:34:41.664]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:34:41.664]                             info, version)
[13:34:41.664]                         }
[13:34:41.664]                         base::stop(msg)
[13:34:41.664]                       }
[13:34:41.664]                     })
[13:34:41.664]                   }
[13:34:41.664]                   ...future.strategy.old <- future::plan("list")
[13:34:41.664]                   options(future.plan = NULL)
[13:34:41.664]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:34:41.664]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:34:41.664]                 }
[13:34:41.664]                 ...future.workdir <- getwd()
[13:34:41.664]             }
[13:34:41.664]             ...future.oldOptions <- base::as.list(base::.Options)
[13:34:41.664]             ...future.oldEnvVars <- base::Sys.getenv()
[13:34:41.664]         }
[13:34:41.664]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:34:41.664]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:34:41.664]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:34:41.664]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:34:41.664]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:34:41.664]             future.stdout.windows.reencode = NULL, width = 80L)
[13:34:41.664]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:34:41.664]             base::names(...future.oldOptions))
[13:34:41.664]     }
[13:34:41.664]     if (FALSE) {
[13:34:41.664]     }
[13:34:41.664]     else {
[13:34:41.664]         if (TRUE) {
[13:34:41.664]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:34:41.664]                 open = "w")
[13:34:41.664]         }
[13:34:41.664]         else {
[13:34:41.664]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:34:41.664]                 windows = "NUL", "/dev/null"), open = "w")
[13:34:41.664]         }
[13:34:41.664]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:34:41.664]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:34:41.664]             base::sink(type = "output", split = FALSE)
[13:34:41.664]             base::close(...future.stdout)
[13:34:41.664]         }, add = TRUE)
[13:34:41.664]     }
[13:34:41.664]     ...future.frame <- base::sys.nframe()
[13:34:41.664]     ...future.conditions <- base::list()
[13:34:41.664]     ...future.rng <- base::globalenv()$.Random.seed
[13:34:41.664]     if (FALSE) {
[13:34:41.664]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:34:41.664]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:34:41.664]     }
[13:34:41.664]     ...future.result <- base::tryCatch({
[13:34:41.664]         base::withCallingHandlers({
[13:34:41.664]             ...future.value <- base::withVisible(base::local({
[13:34:41.664]                 do.call(function(...) {
[13:34:41.664]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:41.664]                   if (!identical(...future.globals.maxSize.org, 
[13:34:41.664]                     ...future.globals.maxSize)) {
[13:34:41.664]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:41.664]                     on.exit(options(oopts), add = TRUE)
[13:34:41.664]                   }
[13:34:41.664]                   {
[13:34:41.664]                     lapply(seq_along(...future.elements_ii), 
[13:34:41.664]                       FUN = function(jj) {
[13:34:41.664]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:41.664]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:41.664]                           envir = globalenv(), inherits = FALSE)
[13:34:41.664]                         ...future.FUN(...future.X_jj, ...)
[13:34:41.664]                       })
[13:34:41.664]                   }
[13:34:41.664]                 }, args = future.call.arguments)
[13:34:41.664]             }))
[13:34:41.664]             future::FutureResult(value = ...future.value$value, 
[13:34:41.664]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:41.664]                   ...future.rng), globalenv = if (FALSE) 
[13:34:41.664]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:34:41.664]                     ...future.globalenv.names))
[13:34:41.664]                 else NULL, started = ...future.startTime, version = "1.8")
[13:34:41.664]         }, condition = base::local({
[13:34:41.664]             c <- base::c
[13:34:41.664]             inherits <- base::inherits
[13:34:41.664]             invokeRestart <- base::invokeRestart
[13:34:41.664]             length <- base::length
[13:34:41.664]             list <- base::list
[13:34:41.664]             seq.int <- base::seq.int
[13:34:41.664]             signalCondition <- base::signalCondition
[13:34:41.664]             sys.calls <- base::sys.calls
[13:34:41.664]             `[[` <- base::`[[`
[13:34:41.664]             `+` <- base::`+`
[13:34:41.664]             `<<-` <- base::`<<-`
[13:34:41.664]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:34:41.664]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:34:41.664]                   3L)]
[13:34:41.664]             }
[13:34:41.664]             function(cond) {
[13:34:41.664]                 is_error <- inherits(cond, "error")
[13:34:41.664]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:34:41.664]                   NULL)
[13:34:41.664]                 if (is_error) {
[13:34:41.664]                   sessionInformation <- function() {
[13:34:41.664]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:34:41.664]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:34:41.664]                       search = base::search(), system = base::Sys.info())
[13:34:41.664]                   }
[13:34:41.664]                   ...future.conditions[[length(...future.conditions) + 
[13:34:41.664]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:34:41.664]                     cond$call), session = sessionInformation(), 
[13:34:41.664]                     timestamp = base::Sys.time(), signaled = 0L)
[13:34:41.664]                   signalCondition(cond)
[13:34:41.664]                 }
[13:34:41.664]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:34:41.664]                 "immediateCondition"))) {
[13:34:41.664]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:34:41.664]                   ...future.conditions[[length(...future.conditions) + 
[13:34:41.664]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:34:41.664]                   if (TRUE && !signal) {
[13:34:41.664]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:41.664]                     {
[13:34:41.664]                       inherits <- base::inherits
[13:34:41.664]                       invokeRestart <- base::invokeRestart
[13:34:41.664]                       is.null <- base::is.null
[13:34:41.664]                       muffled <- FALSE
[13:34:41.664]                       if (inherits(cond, "message")) {
[13:34:41.664]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:41.664]                         if (muffled) 
[13:34:41.664]                           invokeRestart("muffleMessage")
[13:34:41.664]                       }
[13:34:41.664]                       else if (inherits(cond, "warning")) {
[13:34:41.664]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:41.664]                         if (muffled) 
[13:34:41.664]                           invokeRestart("muffleWarning")
[13:34:41.664]                       }
[13:34:41.664]                       else if (inherits(cond, "condition")) {
[13:34:41.664]                         if (!is.null(pattern)) {
[13:34:41.664]                           computeRestarts <- base::computeRestarts
[13:34:41.664]                           grepl <- base::grepl
[13:34:41.664]                           restarts <- computeRestarts(cond)
[13:34:41.664]                           for (restart in restarts) {
[13:34:41.664]                             name <- restart$name
[13:34:41.664]                             if (is.null(name)) 
[13:34:41.664]                               next
[13:34:41.664]                             if (!grepl(pattern, name)) 
[13:34:41.664]                               next
[13:34:41.664]                             invokeRestart(restart)
[13:34:41.664]                             muffled <- TRUE
[13:34:41.664]                             break
[13:34:41.664]                           }
[13:34:41.664]                         }
[13:34:41.664]                       }
[13:34:41.664]                       invisible(muffled)
[13:34:41.664]                     }
[13:34:41.664]                     muffleCondition(cond, pattern = "^muffle")
[13:34:41.664]                   }
[13:34:41.664]                 }
[13:34:41.664]                 else {
[13:34:41.664]                   if (TRUE) {
[13:34:41.664]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:41.664]                     {
[13:34:41.664]                       inherits <- base::inherits
[13:34:41.664]                       invokeRestart <- base::invokeRestart
[13:34:41.664]                       is.null <- base::is.null
[13:34:41.664]                       muffled <- FALSE
[13:34:41.664]                       if (inherits(cond, "message")) {
[13:34:41.664]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:41.664]                         if (muffled) 
[13:34:41.664]                           invokeRestart("muffleMessage")
[13:34:41.664]                       }
[13:34:41.664]                       else if (inherits(cond, "warning")) {
[13:34:41.664]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:41.664]                         if (muffled) 
[13:34:41.664]                           invokeRestart("muffleWarning")
[13:34:41.664]                       }
[13:34:41.664]                       else if (inherits(cond, "condition")) {
[13:34:41.664]                         if (!is.null(pattern)) {
[13:34:41.664]                           computeRestarts <- base::computeRestarts
[13:34:41.664]                           grepl <- base::grepl
[13:34:41.664]                           restarts <- computeRestarts(cond)
[13:34:41.664]                           for (restart in restarts) {
[13:34:41.664]                             name <- restart$name
[13:34:41.664]                             if (is.null(name)) 
[13:34:41.664]                               next
[13:34:41.664]                             if (!grepl(pattern, name)) 
[13:34:41.664]                               next
[13:34:41.664]                             invokeRestart(restart)
[13:34:41.664]                             muffled <- TRUE
[13:34:41.664]                             break
[13:34:41.664]                           }
[13:34:41.664]                         }
[13:34:41.664]                       }
[13:34:41.664]                       invisible(muffled)
[13:34:41.664]                     }
[13:34:41.664]                     muffleCondition(cond, pattern = "^muffle")
[13:34:41.664]                   }
[13:34:41.664]                 }
[13:34:41.664]             }
[13:34:41.664]         }))
[13:34:41.664]     }, error = function(ex) {
[13:34:41.664]         base::structure(base::list(value = NULL, visible = NULL, 
[13:34:41.664]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:41.664]                 ...future.rng), started = ...future.startTime, 
[13:34:41.664]             finished = Sys.time(), session_uuid = NA_character_, 
[13:34:41.664]             version = "1.8"), class = "FutureResult")
[13:34:41.664]     }, finally = {
[13:34:41.664]         if (!identical(...future.workdir, getwd())) 
[13:34:41.664]             setwd(...future.workdir)
[13:34:41.664]         {
[13:34:41.664]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:34:41.664]                 ...future.oldOptions$nwarnings <- NULL
[13:34:41.664]             }
[13:34:41.664]             base::options(...future.oldOptions)
[13:34:41.664]             if (.Platform$OS.type == "windows") {
[13:34:41.664]                 old_names <- names(...future.oldEnvVars)
[13:34:41.664]                 envs <- base::Sys.getenv()
[13:34:41.664]                 names <- names(envs)
[13:34:41.664]                 common <- intersect(names, old_names)
[13:34:41.664]                 added <- setdiff(names, old_names)
[13:34:41.664]                 removed <- setdiff(old_names, names)
[13:34:41.664]                 changed <- common[...future.oldEnvVars[common] != 
[13:34:41.664]                   envs[common]]
[13:34:41.664]                 NAMES <- toupper(changed)
[13:34:41.664]                 args <- list()
[13:34:41.664]                 for (kk in seq_along(NAMES)) {
[13:34:41.664]                   name <- changed[[kk]]
[13:34:41.664]                   NAME <- NAMES[[kk]]
[13:34:41.664]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:41.664]                     next
[13:34:41.664]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:41.664]                 }
[13:34:41.664]                 NAMES <- toupper(added)
[13:34:41.664]                 for (kk in seq_along(NAMES)) {
[13:34:41.664]                   name <- added[[kk]]
[13:34:41.664]                   NAME <- NAMES[[kk]]
[13:34:41.664]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:41.664]                     next
[13:34:41.664]                   args[[name]] <- ""
[13:34:41.664]                 }
[13:34:41.664]                 NAMES <- toupper(removed)
[13:34:41.664]                 for (kk in seq_along(NAMES)) {
[13:34:41.664]                   name <- removed[[kk]]
[13:34:41.664]                   NAME <- NAMES[[kk]]
[13:34:41.664]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:41.664]                     next
[13:34:41.664]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:41.664]                 }
[13:34:41.664]                 if (length(args) > 0) 
[13:34:41.664]                   base::do.call(base::Sys.setenv, args = args)
[13:34:41.664]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:34:41.664]             }
[13:34:41.664]             else {
[13:34:41.664]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:34:41.664]             }
[13:34:41.664]             {
[13:34:41.664]                 if (base::length(...future.futureOptionsAdded) > 
[13:34:41.664]                   0L) {
[13:34:41.664]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:34:41.664]                   base::names(opts) <- ...future.futureOptionsAdded
[13:34:41.664]                   base::options(opts)
[13:34:41.664]                 }
[13:34:41.664]                 {
[13:34:41.664]                   {
[13:34:41.664]                     base::assign(".Random.seed", c(10403L, 8L, 
[13:34:41.664]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[13:34:41.664]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[13:34:41.664]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[13:34:41.664]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[13:34:41.664]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[13:34:41.664]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[13:34:41.664]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[13:34:41.664]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[13:34:41.664]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[13:34:41.664]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[13:34:41.664]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[13:34:41.664]                     -1512233174L, -1985955764L, -425390065L, 
[13:34:41.664]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[13:34:41.664]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[13:34:41.664]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[13:34:41.664]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[13:34:41.664]                     1818328109L, -1284085436L, -1981489558L, 
[13:34:41.664]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[13:34:41.664]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[13:34:41.664]                     -1718567047L, -793788661L, -1133789126L, 
[13:34:41.664]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[13:34:41.664]                     -1823521982L, -1345991523L, -1672661737L, 
[13:34:41.664]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[13:34:41.664]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[13:34:41.664]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[13:34:41.664]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[13:34:41.664]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[13:34:41.664]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[13:34:41.664]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[13:34:41.664]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[13:34:41.664]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[13:34:41.664]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[13:34:41.664]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[13:34:41.664]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[13:34:41.664]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[13:34:41.664]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[13:34:41.664]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[13:34:41.664]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[13:34:41.664]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[13:34:41.664]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[13:34:41.664]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[13:34:41.664]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[13:34:41.664]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[13:34:41.664]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[13:34:41.664]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[13:34:41.664]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[13:34:41.664]                     -1119334354L, -1521015416L, -2041922421L, 
[13:34:41.664]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[13:34:41.664]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[13:34:41.664]                     1232111981L, -1801753084L, -1608606422L, 
[13:34:41.664]                     -1172096363L, 1420874031L, -1210473418L, 
[13:34:41.664]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[13:34:41.664]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[13:34:41.664]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[13:34:41.664]                     679371266L, -591318819L, -104578089L, -172818754L, 
[13:34:41.664]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[13:34:41.664]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[13:34:41.664]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[13:34:41.664]                     -332493318L, -1978392251L, -1691039632L, 
[13:34:41.664]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[13:34:41.664]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[13:34:41.664]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[13:34:41.664]                     87560756L, -87565624L, 426345146L, -699970416L, 
[13:34:41.664]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[13:34:41.664]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[13:34:41.664]                     -1178330196L, -687617348L, -1701912078L, 
[13:34:41.664]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[13:34:41.664]                     -1345416048L, 1816730492L, -1570431212L, 
[13:34:41.664]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[13:34:41.664]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[13:34:41.664]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[13:34:41.664]                     -1493184262L, -1943836976L, -590788308L, 
[13:34:41.664]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[13:34:41.664]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[13:34:41.664]                     1274857340L, -1205842638L, -1938479504L, 
[13:34:41.664]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[13:34:41.664]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[13:34:41.664]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[13:34:41.664]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[13:34:41.664]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[13:34:41.664]                     -1460751252L, 1201879444L, -1459788718L, 
[13:34:41.664]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[13:34:41.664]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[13:34:41.664]                     -420945808L, -1997735900L, -1838404552L, 
[13:34:41.664]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[13:34:41.664]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[13:34:41.664]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[13:34:41.664]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[13:34:41.664]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[13:34:41.664]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[13:34:41.664]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[13:34:41.664]                     942193650L, 751741680L, 689743428L, -18455976L, 
[13:34:41.664]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[13:34:41.664]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[13:34:41.664]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[13:34:41.664]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[13:34:41.664]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[13:34:41.664]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[13:34:41.664]                     -1357570110L, 1896595240L, -2066952276L, 
[13:34:41.664]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[13:34:41.664]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[13:34:41.664]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[13:34:41.664]                     769655120L, 236357794L, 181393736L, -13334772L, 
[13:34:41.664]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[13:34:41.664]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[13:34:41.664]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[13:34:41.664]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[13:34:41.664]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[13:34:41.664]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[13:34:41.664]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[13:34:41.664]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[13:34:41.664]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[13:34:41.664]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[13:34:41.664]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[13:34:41.664]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[13:34:41.664]                     -1365842884L, -438961294L, -1851472272L, 
[13:34:41.664]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[13:34:41.664]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[13:34:41.664]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[13:34:41.664]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[13:34:41.664]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[13:34:41.664]                     -594809770L, -2146766621L, -2013964635L, 
[13:34:41.664]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[13:34:41.664]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[13:34:41.664]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[13:34:41.664]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[13:34:41.664]                     -1426021878L, -1285634264L, 1507547537L, 
[13:34:41.664]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[13:34:41.664]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[13:34:41.664]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[13:34:41.664]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[13:34:41.664]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[13:34:41.664]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[13:34:41.664]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[13:34:41.664]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[13:34:41.664]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[13:34:41.664]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[13:34:41.664]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[13:34:41.664]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[13:34:41.664]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[13:34:41.664]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[13:34:41.664]                     -1604604761L, 1421229008L, -1268333714L, 
[13:34:41.664]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[13:34:41.664]                     -2070476623L, -2099222749L, 1141171236L, 
[13:34:41.664]                     -146426158L, -1797385433L, -1129376399L, 
[13:34:41.664]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[13:34:41.664]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[13:34:41.664]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[13:34:41.664]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[13:34:41.664]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[13:34:41.664]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[13:34:41.664]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[13:34:41.664]                     -1092079724L, -1765622238L, -1882554057L, 
[13:34:41.664]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[13:34:41.664]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[13:34:41.664]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[13:34:41.664]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[13:34:41.664]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[13:34:41.664]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[13:34:41.664]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[13:34:41.664]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[13:34:41.664]                     865377681L, -1127426242L), envir = base::globalenv(), 
[13:34:41.664]                       inherits = FALSE)
[13:34:41.664]                     NULL
[13:34:41.664]                   }
[13:34:41.664]                   options(future.plan = NULL)
[13:34:41.664]                   if (is.na(NA_character_)) 
[13:34:41.664]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:34:41.664]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:34:41.664]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:34:41.664]                     .init = FALSE)
[13:34:41.664]                 }
[13:34:41.664]             }
[13:34:41.664]         }
[13:34:41.664]     })
[13:34:41.664]     if (TRUE) {
[13:34:41.664]         base::sink(type = "output", split = FALSE)
[13:34:41.664]         if (TRUE) {
[13:34:41.664]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:34:41.664]         }
[13:34:41.664]         else {
[13:34:41.664]             ...future.result["stdout"] <- base::list(NULL)
[13:34:41.664]         }
[13:34:41.664]         base::close(...future.stdout)
[13:34:41.664]         ...future.stdout <- NULL
[13:34:41.664]     }
[13:34:41.664]     ...future.result$conditions <- ...future.conditions
[13:34:41.664]     ...future.result$finished <- base::Sys.time()
[13:34:41.664]     ...future.result
[13:34:41.664] }
[13:34:41.667] assign_globals() ...
[13:34:41.667] List of 7
[13:34:41.667]  $ ...future.FUN            :function (...)  
[13:34:41.667]  $ foo                      :function (x = 1, y = 2)  
[13:34:41.667]  $ x                        : num 3
[13:34:41.667]  $ future.call.arguments    : list()
[13:34:41.667]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:41.667]  $ ...future.elements_ii    :List of 5
[13:34:41.667]   ..$ : int 0
[13:34:41.667]   ..$ : int 0
[13:34:41.667]   ..$ : int 0
[13:34:41.667]   ..$ : int 0
[13:34:41.667]   ..$ : int 0
[13:34:41.667]  $ ...future.seeds_ii       :List of 5
[13:34:41.667]   ..$ : int [1:7] 10407 2118672648 973015440 1612380474 -529784560 -1301423278 1609721430
[13:34:41.667]   ..$ : int [1:7] 10407 -919798402 -1810630142 -850731864 -613657701 1060945587 1656143537
[13:34:41.667]   ..$ : int [1:7] 10407 1666123668 -918032954 1563303830 744861469 2009520167 369843810
[13:34:41.667]   ..$ : int [1:7] 10407 1310441948 2080683693 652639441 1795850730 1953532141 354730309
[13:34:41.667]   ..$ : int [1:7] 10407 -346794781 -526954742 61882141 1694204077 -404066420 2102686045
[13:34:41.667]  $ ...future.globals.maxSize: NULL
[13:34:41.667]  - attr(*, "where")=List of 7
[13:34:41.667]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:34:41.667]   ..$ foo                      :<environment: R_EmptyEnv> 
[13:34:41.667]   ..$ x                        :<environment: R_EmptyEnv> 
[13:34:41.667]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:34:41.667]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:34:41.667]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:34:41.667]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:34:41.667]  - attr(*, "resolved")= logi FALSE
[13:34:41.667]  - attr(*, "total_size")= num 2200
[13:34:41.667]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:41.667]  - attr(*, "already-done")= logi TRUE
[13:34:41.676] - reassign environment for ‘...future.FUN’
[13:34:41.676] - copied ‘...future.FUN’ to environment
[13:34:41.676] - reassign environment for ‘foo’
[13:34:41.676] - copied ‘foo’ to environment
[13:34:41.676] - copied ‘x’ to environment
[13:34:41.676] - copied ‘future.call.arguments’ to environment
[13:34:41.677] - copied ‘...future.elements_ii’ to environment
[13:34:41.677] - copied ‘...future.seeds_ii’ to environment
[13:34:41.677] - copied ‘...future.globals.maxSize’ to environment
[13:34:41.677] assign_globals() ... done
[13:34:41.677] plan(): Setting new future strategy stack:
[13:34:41.677] List of future strategies:
[13:34:41.677] 1. sequential:
[13:34:41.677]    - args: function (..., envir = parent.frame())
[13:34:41.677]    - tweaked: FALSE
[13:34:41.677]    - call: NULL
[13:34:41.677] plan(): nbrOfWorkers() = 1
[13:34:41.678] plan(): Setting new future strategy stack:
[13:34:41.678] List of future strategies:
[13:34:41.678] 1. sequential:
[13:34:41.678]    - args: function (..., envir = parent.frame())
[13:34:41.678]    - tweaked: FALSE
[13:34:41.678]    - call: plan(strategy)
[13:34:41.679] plan(): nbrOfWorkers() = 1
[13:34:41.679] SequentialFuture started (and completed)
[13:34:41.679] - Launch lazy future ... done
[13:34:41.679] run() for ‘SequentialFuture’ ... done
[13:34:41.679] Created future:
[13:34:41.679] SequentialFuture:
[13:34:41.679] Label: ‘future_replicate-1’
[13:34:41.679] Expression:
[13:34:41.679] {
[13:34:41.679]     do.call(function(...) {
[13:34:41.679]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:41.679]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:41.679]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:41.679]             on.exit(options(oopts), add = TRUE)
[13:34:41.679]         }
[13:34:41.679]         {
[13:34:41.679]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:41.679]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:41.679]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:41.679]                   envir = globalenv(), inherits = FALSE)
[13:34:41.679]                 ...future.FUN(...future.X_jj, ...)
[13:34:41.679]             })
[13:34:41.679]         }
[13:34:41.679]     }, args = future.call.arguments)
[13:34:41.679] }
[13:34:41.679] Lazy evaluation: FALSE
[13:34:41.679] Asynchronous evaluation: FALSE
[13:34:41.679] Local evaluation: TRUE
[13:34:41.679] Environment: 0x5627be06eb48
[13:34:41.679] Capture standard output: TRUE
[13:34:41.679] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:34:41.679] Globals: 7 objects totaling 2.81 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, ...)
[13:34:41.679] Packages: <none>
[13:34:41.679] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:34:41.679] Resolved: TRUE
[13:34:41.679] Value: 320 bytes of class ‘list’
[13:34:41.679] Early signaling: FALSE
[13:34:41.679] Owner process: b8cf10c3-b112-c8f9-9398-a44000e21728
[13:34:41.679] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:34:41.680] Chunk #1 of 1 ... DONE
[13:34:41.680] Launching 1 futures (chunks) ... DONE
[13:34:41.680] Resolving 1 futures (chunks) ...
[13:34:41.681] resolve() on list ...
[13:34:41.681]  recursive: 0
[13:34:41.681]  length: 1
[13:34:41.681] 
[13:34:41.681] resolved() for ‘SequentialFuture’ ...
[13:34:41.681] - state: ‘finished’
[13:34:41.681] - run: TRUE
[13:34:41.681] - result: ‘FutureResult’
[13:34:41.681] resolved() for ‘SequentialFuture’ ... done
[13:34:41.681] Future #1
[13:34:41.681] signalConditionsASAP(SequentialFuture, pos=1) ...
[13:34:41.682] - nx: 1
[13:34:41.682] - relay: TRUE
[13:34:41.682] - stdout: TRUE
[13:34:41.682] - signal: TRUE
[13:34:41.682] - resignal: FALSE
[13:34:41.682] - force: TRUE
[13:34:41.682] - relayed: [n=1] FALSE
[13:34:41.682] - queued futures: [n=1] FALSE
[13:34:41.682]  - until=1
[13:34:41.682]  - relaying element #1
[13:34:41.682] - relayed: [n=1] TRUE
[13:34:41.683] - queued futures: [n=1] TRUE
[13:34:41.683] signalConditionsASAP(SequentialFuture, pos=1) ... done
[13:34:41.683]  length: 0 (resolved future 1)
[13:34:41.683] Relaying remaining futures
[13:34:41.683] signalConditionsASAP(NULL, pos=0) ...
[13:34:41.683] - nx: 1
[13:34:41.683] - relay: TRUE
[13:34:41.683] - stdout: TRUE
[13:34:41.683] - signal: TRUE
[13:34:41.683] - resignal: FALSE
[13:34:41.683] - force: TRUE
[13:34:41.683] - relayed: [n=1] TRUE
[13:34:41.683] - queued futures: [n=1] TRUE
 - flush all
[13:34:41.684] - relayed: [n=1] TRUE
[13:34:41.684] - queued futures: [n=1] TRUE
[13:34:41.684] signalConditionsASAP(NULL, pos=0) ... done
[13:34:41.684] resolve() on list ... DONE
[13:34:41.684]  - Number of value chunks collected: 1
[13:34:41.684] Resolving 1 futures (chunks) ... DONE
[13:34:41.684] Reducing values from 1 chunks ...
[13:34:41.684]  - Number of values collected after concatenation: 5
[13:34:41.684]  - Number of values expected: 5
[13:34:41.684] Reducing values from 1 chunks ... DONE
[13:34:41.684] future_lapply() ... DONE
[13:34:41.685] plan(): Setting new future strategy stack:
[13:34:41.685] List of future strategies:
[13:34:41.685] 1. sequential:
[13:34:41.685]    - args: function (..., envir = parent.frame())
[13:34:41.685]    - tweaked: FALSE
[13:34:41.685]    - call: plan(sequential)
[13:34:41.685] plan(): nbrOfWorkers() = 1
*** strategy = ‘sequential’ ... done
*** strategy = ‘multicore’ ...
[13:34:41.686] plan(): Setting new future strategy stack:
[13:34:41.686] List of future strategies:
[13:34:41.686] 1. multicore:
[13:34:41.686]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:34:41.686]    - tweaked: FALSE
[13:34:41.686]    - call: plan(strategy)
[13:34:41.690] plan(): nbrOfWorkers() = 2
[13:34:41.690] future_lapply() ...
[13:34:41.690] Generating random seeds ...
[13:34:41.691] Generating random seed streams for 5 elements ...
[13:34:41.691] Generating random seed streams for 5 elements ... DONE
[13:34:41.691] Generating random seeds ... DONE
[13:34:41.691] Will set RNG state on exit: 10403, 17, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:34:41.697] Number of chunks: 2
[13:34:41.697] getGlobalsAndPackagesXApply() ...
[13:34:41.698]  - future.globals: TRUE
[13:34:41.698] getGlobalsAndPackages() ...
[13:34:41.698] Searching for globals...
[13:34:41.699] - globals found: [2] ‘FUN’, ‘sample’
[13:34:41.699] Searching for globals ... DONE
[13:34:41.699] Resolving globals: FALSE
[13:34:41.699] The total size of the 1 globals is 616 bytes (616 bytes)
[13:34:41.700] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:34:41.700] - globals: [1] ‘FUN’
[13:34:41.700] 
[13:34:41.700] getGlobalsAndPackages() ... DONE
[13:34:41.700]  - globals found/used: [n=1] ‘FUN’
[13:34:41.700]  - needed namespaces: [n=0] 
[13:34:41.700] Finding globals ... DONE
[13:34:41.700]  - use_args: TRUE
[13:34:41.700]  - Getting '...' globals ...
[13:34:41.701] resolve() on list ...
[13:34:41.701]  recursive: 0
[13:34:41.701]  length: 1
[13:34:41.701]  elements: ‘...’
[13:34:41.701]  length: 0 (resolved future 1)
[13:34:41.701] resolve() on list ... DONE
[13:34:41.701]    - '...' content: [n=0] 
[13:34:41.701] List of 1
[13:34:41.701]  $ ...: list()
[13:34:41.701]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:41.701]  - attr(*, "where")=List of 1
[13:34:41.701]   ..$ ...:<environment: 0x5627bf7854f0> 
[13:34:41.701]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:41.701]  - attr(*, "resolved")= logi TRUE
[13:34:41.701]  - attr(*, "total_size")= num NA
[13:34:41.704]  - Getting '...' globals ... DONE
[13:34:41.704] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:34:41.704] List of 2
[13:34:41.704]  $ ...future.FUN:function (...)  
[13:34:41.704]  $ ...          : list()
[13:34:41.704]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:41.704]  - attr(*, "where")=List of 2
[13:34:41.704]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:34:41.704]   ..$ ...          :<environment: 0x5627bf7854f0> 
[13:34:41.704]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:41.704]  - attr(*, "resolved")= logi FALSE
[13:34:41.704]  - attr(*, "total_size")= num 616
[13:34:41.706] Packages to be attached in all futures: [n=0] 
[13:34:41.707] getGlobalsAndPackagesXApply() ... DONE
[13:34:41.707] Number of futures (= number of chunks): 2
[13:34:41.707] Launching 2 futures (chunks) ...
[13:34:41.707] Chunk #1 of 2 ...
[13:34:41.707]  - Finding globals in 'X' for chunk #1 ...
[13:34:41.707] getGlobalsAndPackages() ...
[13:34:41.707] Searching for globals...
[13:34:41.707] 
[13:34:41.708] Searching for globals ... DONE
[13:34:41.708] - globals: [0] <none>
[13:34:41.708] getGlobalsAndPackages() ... DONE
[13:34:41.708]    + additional globals found: [n=0] 
[13:34:41.708]    + additional namespaces needed: [n=0] 
[13:34:41.708]  - Finding globals in 'X' for chunk #1 ... DONE
[13:34:41.708]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:34:41.708]  - seeds: [2] <seeds>
[13:34:41.708]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:41.708] getGlobalsAndPackages() ...
[13:34:41.708] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:41.709] Resolving globals: FALSE
[13:34:41.709] Tweak future expression to call with '...' arguments ...
[13:34:41.709] {
[13:34:41.709]     do.call(function(...) {
[13:34:41.709]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:41.709]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:41.709]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:41.709]             on.exit(options(oopts), add = TRUE)
[13:34:41.709]         }
[13:34:41.709]         {
[13:34:41.709]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:41.709]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:41.709]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:41.709]                   envir = globalenv(), inherits = FALSE)
[13:34:41.709]                 ...future.FUN(...future.X_jj, ...)
[13:34:41.709]             })
[13:34:41.709]         }
[13:34:41.709]     }, args = future.call.arguments)
[13:34:41.709] }
[13:34:41.709] Tweak future expression to call with '...' arguments ... DONE
[13:34:41.709] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:41.709] 
[13:34:41.709] getGlobalsAndPackages() ... DONE
[13:34:41.710] run() for ‘Future’ ...
[13:34:41.710] - state: ‘created’
[13:34:41.710] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:34:41.713] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:41.713] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:34:41.714]   - Field: ‘label’
[13:34:41.714]   - Field: ‘local’
[13:34:41.714]   - Field: ‘owner’
[13:34:41.714]   - Field: ‘envir’
[13:34:41.714]   - Field: ‘workers’
[13:34:41.714]   - Field: ‘packages’
[13:34:41.714]   - Field: ‘gc’
[13:34:41.714]   - Field: ‘job’
[13:34:41.714]   - Field: ‘conditions’
[13:34:41.715]   - Field: ‘expr’
[13:34:41.715]   - Field: ‘uuid’
[13:34:41.715]   - Field: ‘seed’
[13:34:41.715]   - Field: ‘version’
[13:34:41.715]   - Field: ‘result’
[13:34:41.715]   - Field: ‘asynchronous’
[13:34:41.715]   - Field: ‘calls’
[13:34:41.715]   - Field: ‘globals’
[13:34:41.715]   - Field: ‘stdout’
[13:34:41.715]   - Field: ‘earlySignal’
[13:34:41.715]   - Field: ‘lazy’
[13:34:41.715]   - Field: ‘state’
[13:34:41.716] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:34:41.716] - Launch lazy future ...
[13:34:41.717] Packages needed by the future expression (n = 0): <none>
[13:34:41.717] Packages needed by future strategies (n = 0): <none>
[13:34:41.717] {
[13:34:41.717]     {
[13:34:41.717]         {
[13:34:41.717]             ...future.startTime <- base::Sys.time()
[13:34:41.717]             {
[13:34:41.717]                 {
[13:34:41.717]                   {
[13:34:41.717]                     {
[13:34:41.717]                       base::local({
[13:34:41.717]                         has_future <- base::requireNamespace("future", 
[13:34:41.717]                           quietly = TRUE)
[13:34:41.717]                         if (has_future) {
[13:34:41.717]                           ns <- base::getNamespace("future")
[13:34:41.717]                           version <- ns[[".package"]][["version"]]
[13:34:41.717]                           if (is.null(version)) 
[13:34:41.717]                             version <- utils::packageVersion("future")
[13:34:41.717]                         }
[13:34:41.717]                         else {
[13:34:41.717]                           version <- NULL
[13:34:41.717]                         }
[13:34:41.717]                         if (!has_future || version < "1.8.0") {
[13:34:41.717]                           info <- base::c(r_version = base::gsub("R version ", 
[13:34:41.717]                             "", base::R.version$version.string), 
[13:34:41.717]                             platform = base::sprintf("%s (%s-bit)", 
[13:34:41.717]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:34:41.717]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:34:41.717]                               "release", "version")], collapse = " "), 
[13:34:41.717]                             hostname = base::Sys.info()[["nodename"]])
[13:34:41.717]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:34:41.717]                             info)
[13:34:41.717]                           info <- base::paste(info, collapse = "; ")
[13:34:41.717]                           if (!has_future) {
[13:34:41.717]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:34:41.717]                               info)
[13:34:41.717]                           }
[13:34:41.717]                           else {
[13:34:41.717]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:34:41.717]                               info, version)
[13:34:41.717]                           }
[13:34:41.717]                           base::stop(msg)
[13:34:41.717]                         }
[13:34:41.717]                       })
[13:34:41.717]                     }
[13:34:41.717]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:34:41.717]                     base::options(mc.cores = 1L)
[13:34:41.717]                   }
[13:34:41.717]                   ...future.strategy.old <- future::plan("list")
[13:34:41.717]                   options(future.plan = NULL)
[13:34:41.717]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:34:41.717]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:34:41.717]                 }
[13:34:41.717]                 ...future.workdir <- getwd()
[13:34:41.717]             }
[13:34:41.717]             ...future.oldOptions <- base::as.list(base::.Options)
[13:34:41.717]             ...future.oldEnvVars <- base::Sys.getenv()
[13:34:41.717]         }
[13:34:41.717]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:34:41.717]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:34:41.717]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:34:41.717]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:34:41.717]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:34:41.717]             future.stdout.windows.reencode = NULL, width = 80L)
[13:34:41.717]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:34:41.717]             base::names(...future.oldOptions))
[13:34:41.717]     }
[13:34:41.717]     if (FALSE) {
[13:34:41.717]     }
[13:34:41.717]     else {
[13:34:41.717]         if (TRUE) {
[13:34:41.717]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:34:41.717]                 open = "w")
[13:34:41.717]         }
[13:34:41.717]         else {
[13:34:41.717]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:34:41.717]                 windows = "NUL", "/dev/null"), open = "w")
[13:34:41.717]         }
[13:34:41.717]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:34:41.717]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:34:41.717]             base::sink(type = "output", split = FALSE)
[13:34:41.717]             base::close(...future.stdout)
[13:34:41.717]         }, add = TRUE)
[13:34:41.717]     }
[13:34:41.717]     ...future.frame <- base::sys.nframe()
[13:34:41.717]     ...future.conditions <- base::list()
[13:34:41.717]     ...future.rng <- base::globalenv()$.Random.seed
[13:34:41.717]     if (FALSE) {
[13:34:41.717]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:34:41.717]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:34:41.717]     }
[13:34:41.717]     ...future.result <- base::tryCatch({
[13:34:41.717]         base::withCallingHandlers({
[13:34:41.717]             ...future.value <- base::withVisible(base::local({
[13:34:41.717]                 withCallingHandlers({
[13:34:41.717]                   {
[13:34:41.717]                     do.call(function(...) {
[13:34:41.717]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:41.717]                       if (!identical(...future.globals.maxSize.org, 
[13:34:41.717]                         ...future.globals.maxSize)) {
[13:34:41.717]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:41.717]                         on.exit(options(oopts), add = TRUE)
[13:34:41.717]                       }
[13:34:41.717]                       {
[13:34:41.717]                         lapply(seq_along(...future.elements_ii), 
[13:34:41.717]                           FUN = function(jj) {
[13:34:41.717]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:41.717]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:41.717]                               envir = globalenv(), inherits = FALSE)
[13:34:41.717]                             ...future.FUN(...future.X_jj, ...)
[13:34:41.717]                           })
[13:34:41.717]                       }
[13:34:41.717]                     }, args = future.call.arguments)
[13:34:41.717]                   }
[13:34:41.717]                 }, immediateCondition = function(cond) {
[13:34:41.717]                   save_rds <- function (object, pathname, ...) 
[13:34:41.717]                   {
[13:34:41.717]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:34:41.717]                     if (file_test("-f", pathname_tmp)) {
[13:34:41.717]                       fi_tmp <- file.info(pathname_tmp)
[13:34:41.717]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:34:41.717]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:34:41.717]                         fi_tmp[["mtime"]])
[13:34:41.717]                     }
[13:34:41.717]                     tryCatch({
[13:34:41.717]                       saveRDS(object, file = pathname_tmp, ...)
[13:34:41.717]                     }, error = function(ex) {
[13:34:41.717]                       msg <- conditionMessage(ex)
[13:34:41.717]                       fi_tmp <- file.info(pathname_tmp)
[13:34:41.717]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:34:41.717]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:34:41.717]                         fi_tmp[["mtime"]], msg)
[13:34:41.717]                       ex$message <- msg
[13:34:41.717]                       stop(ex)
[13:34:41.717]                     })
[13:34:41.717]                     stopifnot(file_test("-f", pathname_tmp))
[13:34:41.717]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:34:41.717]                     if (!res || file_test("-f", pathname_tmp)) {
[13:34:41.717]                       fi_tmp <- file.info(pathname_tmp)
[13:34:41.717]                       fi <- file.info(pathname)
[13:34:41.717]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:34:41.717]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:34:41.717]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:34:41.717]                         fi[["size"]], fi[["mtime"]])
[13:34:41.717]                       stop(msg)
[13:34:41.717]                     }
[13:34:41.717]                     invisible(pathname)
[13:34:41.717]                   }
[13:34:41.717]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:34:41.717]                     rootPath = tempdir()) 
[13:34:41.717]                   {
[13:34:41.717]                     obj <- list(time = Sys.time(), condition = cond)
[13:34:41.717]                     file <- tempfile(pattern = class(cond)[1], 
[13:34:41.717]                       tmpdir = path, fileext = ".rds")
[13:34:41.717]                     save_rds(obj, file)
[13:34:41.717]                   }
[13:34:41.717]                   saveImmediateCondition(cond, path = "/tmp/RtmplfSa61/.future/immediateConditions")
[13:34:41.717]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:41.717]                   {
[13:34:41.717]                     inherits <- base::inherits
[13:34:41.717]                     invokeRestart <- base::invokeRestart
[13:34:41.717]                     is.null <- base::is.null
[13:34:41.717]                     muffled <- FALSE
[13:34:41.717]                     if (inherits(cond, "message")) {
[13:34:41.717]                       muffled <- grepl(pattern, "muffleMessage")
[13:34:41.717]                       if (muffled) 
[13:34:41.717]                         invokeRestart("muffleMessage")
[13:34:41.717]                     }
[13:34:41.717]                     else if (inherits(cond, "warning")) {
[13:34:41.717]                       muffled <- grepl(pattern, "muffleWarning")
[13:34:41.717]                       if (muffled) 
[13:34:41.717]                         invokeRestart("muffleWarning")
[13:34:41.717]                     }
[13:34:41.717]                     else if (inherits(cond, "condition")) {
[13:34:41.717]                       if (!is.null(pattern)) {
[13:34:41.717]                         computeRestarts <- base::computeRestarts
[13:34:41.717]                         grepl <- base::grepl
[13:34:41.717]                         restarts <- computeRestarts(cond)
[13:34:41.717]                         for (restart in restarts) {
[13:34:41.717]                           name <- restart$name
[13:34:41.717]                           if (is.null(name)) 
[13:34:41.717]                             next
[13:34:41.717]                           if (!grepl(pattern, name)) 
[13:34:41.717]                             next
[13:34:41.717]                           invokeRestart(restart)
[13:34:41.717]                           muffled <- TRUE
[13:34:41.717]                           break
[13:34:41.717]                         }
[13:34:41.717]                       }
[13:34:41.717]                     }
[13:34:41.717]                     invisible(muffled)
[13:34:41.717]                   }
[13:34:41.717]                   muffleCondition(cond)
[13:34:41.717]                 })
[13:34:41.717]             }))
[13:34:41.717]             future::FutureResult(value = ...future.value$value, 
[13:34:41.717]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:41.717]                   ...future.rng), globalenv = if (FALSE) 
[13:34:41.717]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:34:41.717]                     ...future.globalenv.names))
[13:34:41.717]                 else NULL, started = ...future.startTime, version = "1.8")
[13:34:41.717]         }, condition = base::local({
[13:34:41.717]             c <- base::c
[13:34:41.717]             inherits <- base::inherits
[13:34:41.717]             invokeRestart <- base::invokeRestart
[13:34:41.717]             length <- base::length
[13:34:41.717]             list <- base::list
[13:34:41.717]             seq.int <- base::seq.int
[13:34:41.717]             signalCondition <- base::signalCondition
[13:34:41.717]             sys.calls <- base::sys.calls
[13:34:41.717]             `[[` <- base::`[[`
[13:34:41.717]             `+` <- base::`+`
[13:34:41.717]             `<<-` <- base::`<<-`
[13:34:41.717]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:34:41.717]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:34:41.717]                   3L)]
[13:34:41.717]             }
[13:34:41.717]             function(cond) {
[13:34:41.717]                 is_error <- inherits(cond, "error")
[13:34:41.717]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:34:41.717]                   NULL)
[13:34:41.717]                 if (is_error) {
[13:34:41.717]                   sessionInformation <- function() {
[13:34:41.717]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:34:41.717]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:34:41.717]                       search = base::search(), system = base::Sys.info())
[13:34:41.717]                   }
[13:34:41.717]                   ...future.conditions[[length(...future.conditions) + 
[13:34:41.717]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:34:41.717]                     cond$call), session = sessionInformation(), 
[13:34:41.717]                     timestamp = base::Sys.time(), signaled = 0L)
[13:34:41.717]                   signalCondition(cond)
[13:34:41.717]                 }
[13:34:41.717]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:34:41.717]                 "immediateCondition"))) {
[13:34:41.717]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:34:41.717]                   ...future.conditions[[length(...future.conditions) + 
[13:34:41.717]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:34:41.717]                   if (TRUE && !signal) {
[13:34:41.717]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:41.717]                     {
[13:34:41.717]                       inherits <- base::inherits
[13:34:41.717]                       invokeRestart <- base::invokeRestart
[13:34:41.717]                       is.null <- base::is.null
[13:34:41.717]                       muffled <- FALSE
[13:34:41.717]                       if (inherits(cond, "message")) {
[13:34:41.717]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:41.717]                         if (muffled) 
[13:34:41.717]                           invokeRestart("muffleMessage")
[13:34:41.717]                       }
[13:34:41.717]                       else if (inherits(cond, "warning")) {
[13:34:41.717]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:41.717]                         if (muffled) 
[13:34:41.717]                           invokeRestart("muffleWarning")
[13:34:41.717]                       }
[13:34:41.717]                       else if (inherits(cond, "condition")) {
[13:34:41.717]                         if (!is.null(pattern)) {
[13:34:41.717]                           computeRestarts <- base::computeRestarts
[13:34:41.717]                           grepl <- base::grepl
[13:34:41.717]                           restarts <- computeRestarts(cond)
[13:34:41.717]                           for (restart in restarts) {
[13:34:41.717]                             name <- restart$name
[13:34:41.717]                             if (is.null(name)) 
[13:34:41.717]                               next
[13:34:41.717]                             if (!grepl(pattern, name)) 
[13:34:41.717]                               next
[13:34:41.717]                             invokeRestart(restart)
[13:34:41.717]                             muffled <- TRUE
[13:34:41.717]                             break
[13:34:41.717]                           }
[13:34:41.717]                         }
[13:34:41.717]                       }
[13:34:41.717]                       invisible(muffled)
[13:34:41.717]                     }
[13:34:41.717]                     muffleCondition(cond, pattern = "^muffle")
[13:34:41.717]                   }
[13:34:41.717]                 }
[13:34:41.717]                 else {
[13:34:41.717]                   if (TRUE) {
[13:34:41.717]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:41.717]                     {
[13:34:41.717]                       inherits <- base::inherits
[13:34:41.717]                       invokeRestart <- base::invokeRestart
[13:34:41.717]                       is.null <- base::is.null
[13:34:41.717]                       muffled <- FALSE
[13:34:41.717]                       if (inherits(cond, "message")) {
[13:34:41.717]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:41.717]                         if (muffled) 
[13:34:41.717]                           invokeRestart("muffleMessage")
[13:34:41.717]                       }
[13:34:41.717]                       else if (inherits(cond, "warning")) {
[13:34:41.717]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:41.717]                         if (muffled) 
[13:34:41.717]                           invokeRestart("muffleWarning")
[13:34:41.717]                       }
[13:34:41.717]                       else if (inherits(cond, "condition")) {
[13:34:41.717]                         if (!is.null(pattern)) {
[13:34:41.717]                           computeRestarts <- base::computeRestarts
[13:34:41.717]                           grepl <- base::grepl
[13:34:41.717]                           restarts <- computeRestarts(cond)
[13:34:41.717]                           for (restart in restarts) {
[13:34:41.717]                             name <- restart$name
[13:34:41.717]                             if (is.null(name)) 
[13:34:41.717]                               next
[13:34:41.717]                             if (!grepl(pattern, name)) 
[13:34:41.717]                               next
[13:34:41.717]                             invokeRestart(restart)
[13:34:41.717]                             muffled <- TRUE
[13:34:41.717]                             break
[13:34:41.717]                           }
[13:34:41.717]                         }
[13:34:41.717]                       }
[13:34:41.717]                       invisible(muffled)
[13:34:41.717]                     }
[13:34:41.717]                     muffleCondition(cond, pattern = "^muffle")
[13:34:41.717]                   }
[13:34:41.717]                 }
[13:34:41.717]             }
[13:34:41.717]         }))
[13:34:41.717]     }, error = function(ex) {
[13:34:41.717]         base::structure(base::list(value = NULL, visible = NULL, 
[13:34:41.717]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:41.717]                 ...future.rng), started = ...future.startTime, 
[13:34:41.717]             finished = Sys.time(), session_uuid = NA_character_, 
[13:34:41.717]             version = "1.8"), class = "FutureResult")
[13:34:41.717]     }, finally = {
[13:34:41.717]         if (!identical(...future.workdir, getwd())) 
[13:34:41.717]             setwd(...future.workdir)
[13:34:41.717]         {
[13:34:41.717]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:34:41.717]                 ...future.oldOptions$nwarnings <- NULL
[13:34:41.717]             }
[13:34:41.717]             base::options(...future.oldOptions)
[13:34:41.717]             if (.Platform$OS.type == "windows") {
[13:34:41.717]                 old_names <- names(...future.oldEnvVars)
[13:34:41.717]                 envs <- base::Sys.getenv()
[13:34:41.717]                 names <- names(envs)
[13:34:41.717]                 common <- intersect(names, old_names)
[13:34:41.717]                 added <- setdiff(names, old_names)
[13:34:41.717]                 removed <- setdiff(old_names, names)
[13:34:41.717]                 changed <- common[...future.oldEnvVars[common] != 
[13:34:41.717]                   envs[common]]
[13:34:41.717]                 NAMES <- toupper(changed)
[13:34:41.717]                 args <- list()
[13:34:41.717]                 for (kk in seq_along(NAMES)) {
[13:34:41.717]                   name <- changed[[kk]]
[13:34:41.717]                   NAME <- NAMES[[kk]]
[13:34:41.717]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:41.717]                     next
[13:34:41.717]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:41.717]                 }
[13:34:41.717]                 NAMES <- toupper(added)
[13:34:41.717]                 for (kk in seq_along(NAMES)) {
[13:34:41.717]                   name <- added[[kk]]
[13:34:41.717]                   NAME <- NAMES[[kk]]
[13:34:41.717]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:41.717]                     next
[13:34:41.717]                   args[[name]] <- ""
[13:34:41.717]                 }
[13:34:41.717]                 NAMES <- toupper(removed)
[13:34:41.717]                 for (kk in seq_along(NAMES)) {
[13:34:41.717]                   name <- removed[[kk]]
[13:34:41.717]                   NAME <- NAMES[[kk]]
[13:34:41.717]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:41.717]                     next
[13:34:41.717]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:41.717]                 }
[13:34:41.717]                 if (length(args) > 0) 
[13:34:41.717]                   base::do.call(base::Sys.setenv, args = args)
[13:34:41.717]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:34:41.717]             }
[13:34:41.717]             else {
[13:34:41.717]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:34:41.717]             }
[13:34:41.717]             {
[13:34:41.717]                 if (base::length(...future.futureOptionsAdded) > 
[13:34:41.717]                   0L) {
[13:34:41.717]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:34:41.717]                   base::names(opts) <- ...future.futureOptionsAdded
[13:34:41.717]                   base::options(opts)
[13:34:41.717]                 }
[13:34:41.717]                 {
[13:34:41.717]                   {
[13:34:41.717]                     base::options(mc.cores = ...future.mc.cores.old)
[13:34:41.717]                     NULL
[13:34:41.717]                   }
[13:34:41.717]                   options(future.plan = NULL)
[13:34:41.717]                   if (is.na(NA_character_)) 
[13:34:41.717]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:34:41.717]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:34:41.717]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:34:41.717]                     .init = FALSE)
[13:34:41.717]                 }
[13:34:41.717]             }
[13:34:41.717]         }
[13:34:41.717]     })
[13:34:41.717]     if (TRUE) {
[13:34:41.717]         base::sink(type = "output", split = FALSE)
[13:34:41.717]         if (TRUE) {
[13:34:41.717]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:34:41.717]         }
[13:34:41.717]         else {
[13:34:41.717]             ...future.result["stdout"] <- base::list(NULL)
[13:34:41.717]         }
[13:34:41.717]         base::close(...future.stdout)
[13:34:41.717]         ...future.stdout <- NULL
[13:34:41.717]     }
[13:34:41.717]     ...future.result$conditions <- ...future.conditions
[13:34:41.717]     ...future.result$finished <- base::Sys.time()
[13:34:41.717]     ...future.result
[13:34:41.717] }
[13:34:41.719] assign_globals() ...
[13:34:41.720] List of 5
[13:34:41.720]  $ ...future.FUN            :function (...)  
[13:34:41.720]  $ future.call.arguments    : list()
[13:34:41.720]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:41.720]  $ ...future.elements_ii    :List of 2
[13:34:41.720]   ..$ : int 0
[13:34:41.720]   ..$ : int 0
[13:34:41.720]  $ ...future.seeds_ii       :List of 2
[13:34:41.720]   ..$ : int [1:7] 10407 800596211 191202253 -1245543361 -1911991084 -470201595 630973807
[13:34:41.720]   ..$ : int [1:7] 10407 336362669 -1847432762 -712550016 1068830663 1731026700 1489470838
[13:34:41.720]  $ ...future.globals.maxSize: NULL
[13:34:41.720]  - attr(*, "where")=List of 5
[13:34:41.720]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:34:41.720]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:34:41.720]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:34:41.720]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:34:41.720]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:34:41.720]  - attr(*, "resolved")= logi FALSE
[13:34:41.720]  - attr(*, "total_size")= num 616
[13:34:41.720]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:41.720]  - attr(*, "already-done")= logi TRUE
[13:34:41.726] - reassign environment for ‘...future.FUN’
[13:34:41.726] - copied ‘...future.FUN’ to environment
[13:34:41.726] - copied ‘future.call.arguments’ to environment
[13:34:41.727] - copied ‘...future.elements_ii’ to environment
[13:34:41.727] - copied ‘...future.seeds_ii’ to environment
[13:34:41.727] - copied ‘...future.globals.maxSize’ to environment
[13:34:41.727] assign_globals() ... done
[13:34:41.727] requestCore(): workers = 2
[13:34:41.730] MulticoreFuture started
[13:34:41.731] - Launch lazy future ... done
[13:34:41.731] run() for ‘MulticoreFuture’ ... done
[13:34:41.731] plan(): Setting new future strategy stack:
[13:34:41.731] Created future:
[13:34:41.731] List of future strategies:
[13:34:41.731] 1. sequential:
[13:34:41.731]    - args: function (..., envir = parent.frame())
[13:34:41.731]    - tweaked: FALSE
[13:34:41.731]    - call: NULL
[13:34:41.732] plan(): nbrOfWorkers() = 1
[13:34:41.734] plan(): Setting new future strategy stack:
[13:34:41.734] List of future strategies:
[13:34:41.734] 1. multicore:
[13:34:41.734]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:34:41.734]    - tweaked: FALSE
[13:34:41.734]    - call: plan(strategy)
[13:34:41.739] plan(): nbrOfWorkers() = 2
[13:34:41.731] MulticoreFuture:
[13:34:41.731] Label: ‘future_replicate-1’
[13:34:41.731] Expression:
[13:34:41.731] {
[13:34:41.731]     do.call(function(...) {
[13:34:41.731]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:41.731]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:41.731]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:41.731]             on.exit(options(oopts), add = TRUE)
[13:34:41.731]         }
[13:34:41.731]         {
[13:34:41.731]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:41.731]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:41.731]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:41.731]                   envir = globalenv(), inherits = FALSE)
[13:34:41.731]                 ...future.FUN(...future.X_jj, ...)
[13:34:41.731]             })
[13:34:41.731]         }
[13:34:41.731]     }, args = future.call.arguments)
[13:34:41.731] }
[13:34:41.731] Lazy evaluation: FALSE
[13:34:41.731] Asynchronous evaluation: TRUE
[13:34:41.731] Local evaluation: TRUE
[13:34:41.731] Environment: R_GlobalEnv
[13:34:41.731] Capture standard output: TRUE
[13:34:41.731] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:34:41.731] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:34:41.731] Packages: <none>
[13:34:41.731] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:34:41.731] Resolved: TRUE
[13:34:41.731] Value: <not collected>
[13:34:41.731] Conditions captured: <none>
[13:34:41.731] Early signaling: FALSE
[13:34:41.731] Owner process: b8cf10c3-b112-c8f9-9398-a44000e21728
[13:34:41.731] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:41.740] Chunk #1 of 2 ... DONE
[13:34:41.740] Chunk #2 of 2 ...
[13:34:41.741]  - Finding globals in 'X' for chunk #2 ...
[13:34:41.741] getGlobalsAndPackages() ...
[13:34:41.741] Searching for globals...
[13:34:41.741] 
[13:34:41.741] Searching for globals ... DONE
[13:34:41.741] - globals: [0] <none>
[13:34:41.742] getGlobalsAndPackages() ... DONE
[13:34:41.742]    + additional globals found: [n=0] 
[13:34:41.742]    + additional namespaces needed: [n=0] 
[13:34:41.742]  - Finding globals in 'X' for chunk #2 ... DONE
[13:34:41.742]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:34:41.742]  - seeds: [3] <seeds>
[13:34:41.743]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:41.743] getGlobalsAndPackages() ...
[13:34:41.743] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:41.743] Resolving globals: FALSE
[13:34:41.743] Tweak future expression to call with '...' arguments ...
[13:34:41.743] {
[13:34:41.743]     do.call(function(...) {
[13:34:41.743]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:41.743]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:41.743]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:41.743]             on.exit(options(oopts), add = TRUE)
[13:34:41.743]         }
[13:34:41.743]         {
[13:34:41.743]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:41.743]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:41.743]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:41.743]                   envir = globalenv(), inherits = FALSE)
[13:34:41.743]                 ...future.FUN(...future.X_jj, ...)
[13:34:41.743]             })
[13:34:41.743]         }
[13:34:41.743]     }, args = future.call.arguments)
[13:34:41.743] }
[13:34:41.744] Tweak future expression to call with '...' arguments ... DONE
[13:34:41.744] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:41.745] 
[13:34:41.745] getGlobalsAndPackages() ... DONE
[13:34:41.745] run() for ‘Future’ ...
[13:34:41.745] - state: ‘created’
[13:34:41.746] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:34:41.750] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:41.750] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:34:41.750]   - Field: ‘label’
[13:34:41.751]   - Field: ‘local’
[13:34:41.751]   - Field: ‘owner’
[13:34:41.751]   - Field: ‘envir’
[13:34:41.751]   - Field: ‘workers’
[13:34:41.751]   - Field: ‘packages’
[13:34:41.751]   - Field: ‘gc’
[13:34:41.751]   - Field: ‘job’
[13:34:41.751]   - Field: ‘conditions’
[13:34:41.752]   - Field: ‘expr’
[13:34:41.752]   - Field: ‘uuid’
[13:34:41.752]   - Field: ‘seed’
[13:34:41.752]   - Field: ‘version’
[13:34:41.752]   - Field: ‘result’
[13:34:41.752]   - Field: ‘asynchronous’
[13:34:41.752]   - Field: ‘calls’
[13:34:41.753]   - Field: ‘globals’
[13:34:41.753]   - Field: ‘stdout’
[13:34:41.753]   - Field: ‘earlySignal’
[13:34:41.753]   - Field: ‘lazy’
[13:34:41.753]   - Field: ‘state’
[13:34:41.753] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:34:41.753] - Launch lazy future ...
[13:34:41.754] Packages needed by the future expression (n = 0): <none>
[13:34:41.754] Packages needed by future strategies (n = 0): <none>
[13:34:41.755] {
[13:34:41.755]     {
[13:34:41.755]         {
[13:34:41.755]             ...future.startTime <- base::Sys.time()
[13:34:41.755]             {
[13:34:41.755]                 {
[13:34:41.755]                   {
[13:34:41.755]                     {
[13:34:41.755]                       base::local({
[13:34:41.755]                         has_future <- base::requireNamespace("future", 
[13:34:41.755]                           quietly = TRUE)
[13:34:41.755]                         if (has_future) {
[13:34:41.755]                           ns <- base::getNamespace("future")
[13:34:41.755]                           version <- ns[[".package"]][["version"]]
[13:34:41.755]                           if (is.null(version)) 
[13:34:41.755]                             version <- utils::packageVersion("future")
[13:34:41.755]                         }
[13:34:41.755]                         else {
[13:34:41.755]                           version <- NULL
[13:34:41.755]                         }
[13:34:41.755]                         if (!has_future || version < "1.8.0") {
[13:34:41.755]                           info <- base::c(r_version = base::gsub("R version ", 
[13:34:41.755]                             "", base::R.version$version.string), 
[13:34:41.755]                             platform = base::sprintf("%s (%s-bit)", 
[13:34:41.755]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:34:41.755]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:34:41.755]                               "release", "version")], collapse = " "), 
[13:34:41.755]                             hostname = base::Sys.info()[["nodename"]])
[13:34:41.755]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:34:41.755]                             info)
[13:34:41.755]                           info <- base::paste(info, collapse = "; ")
[13:34:41.755]                           if (!has_future) {
[13:34:41.755]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:34:41.755]                               info)
[13:34:41.755]                           }
[13:34:41.755]                           else {
[13:34:41.755]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:34:41.755]                               info, version)
[13:34:41.755]                           }
[13:34:41.755]                           base::stop(msg)
[13:34:41.755]                         }
[13:34:41.755]                       })
[13:34:41.755]                     }
[13:34:41.755]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:34:41.755]                     base::options(mc.cores = 1L)
[13:34:41.755]                   }
[13:34:41.755]                   ...future.strategy.old <- future::plan("list")
[13:34:41.755]                   options(future.plan = NULL)
[13:34:41.755]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:34:41.755]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:34:41.755]                 }
[13:34:41.755]                 ...future.workdir <- getwd()
[13:34:41.755]             }
[13:34:41.755]             ...future.oldOptions <- base::as.list(base::.Options)
[13:34:41.755]             ...future.oldEnvVars <- base::Sys.getenv()
[13:34:41.755]         }
[13:34:41.755]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:34:41.755]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:34:41.755]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:34:41.755]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:34:41.755]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:34:41.755]             future.stdout.windows.reencode = NULL, width = 80L)
[13:34:41.755]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:34:41.755]             base::names(...future.oldOptions))
[13:34:41.755]     }
[13:34:41.755]     if (FALSE) {
[13:34:41.755]     }
[13:34:41.755]     else {
[13:34:41.755]         if (TRUE) {
[13:34:41.755]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:34:41.755]                 open = "w")
[13:34:41.755]         }
[13:34:41.755]         else {
[13:34:41.755]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:34:41.755]                 windows = "NUL", "/dev/null"), open = "w")
[13:34:41.755]         }
[13:34:41.755]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:34:41.755]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:34:41.755]             base::sink(type = "output", split = FALSE)
[13:34:41.755]             base::close(...future.stdout)
[13:34:41.755]         }, add = TRUE)
[13:34:41.755]     }
[13:34:41.755]     ...future.frame <- base::sys.nframe()
[13:34:41.755]     ...future.conditions <- base::list()
[13:34:41.755]     ...future.rng <- base::globalenv()$.Random.seed
[13:34:41.755]     if (FALSE) {
[13:34:41.755]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:34:41.755]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:34:41.755]     }
[13:34:41.755]     ...future.result <- base::tryCatch({
[13:34:41.755]         base::withCallingHandlers({
[13:34:41.755]             ...future.value <- base::withVisible(base::local({
[13:34:41.755]                 withCallingHandlers({
[13:34:41.755]                   {
[13:34:41.755]                     do.call(function(...) {
[13:34:41.755]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:41.755]                       if (!identical(...future.globals.maxSize.org, 
[13:34:41.755]                         ...future.globals.maxSize)) {
[13:34:41.755]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:41.755]                         on.exit(options(oopts), add = TRUE)
[13:34:41.755]                       }
[13:34:41.755]                       {
[13:34:41.755]                         lapply(seq_along(...future.elements_ii), 
[13:34:41.755]                           FUN = function(jj) {
[13:34:41.755]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:41.755]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:41.755]                               envir = globalenv(), inherits = FALSE)
[13:34:41.755]                             ...future.FUN(...future.X_jj, ...)
[13:34:41.755]                           })
[13:34:41.755]                       }
[13:34:41.755]                     }, args = future.call.arguments)
[13:34:41.755]                   }
[13:34:41.755]                 }, immediateCondition = function(cond) {
[13:34:41.755]                   save_rds <- function (object, pathname, ...) 
[13:34:41.755]                   {
[13:34:41.755]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:34:41.755]                     if (file_test("-f", pathname_tmp)) {
[13:34:41.755]                       fi_tmp <- file.info(pathname_tmp)
[13:34:41.755]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:34:41.755]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:34:41.755]                         fi_tmp[["mtime"]])
[13:34:41.755]                     }
[13:34:41.755]                     tryCatch({
[13:34:41.755]                       saveRDS(object, file = pathname_tmp, ...)
[13:34:41.755]                     }, error = function(ex) {
[13:34:41.755]                       msg <- conditionMessage(ex)
[13:34:41.755]                       fi_tmp <- file.info(pathname_tmp)
[13:34:41.755]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:34:41.755]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:34:41.755]                         fi_tmp[["mtime"]], msg)
[13:34:41.755]                       ex$message <- msg
[13:34:41.755]                       stop(ex)
[13:34:41.755]                     })
[13:34:41.755]                     stopifnot(file_test("-f", pathname_tmp))
[13:34:41.755]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:34:41.755]                     if (!res || file_test("-f", pathname_tmp)) {
[13:34:41.755]                       fi_tmp <- file.info(pathname_tmp)
[13:34:41.755]                       fi <- file.info(pathname)
[13:34:41.755]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:34:41.755]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:34:41.755]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:34:41.755]                         fi[["size"]], fi[["mtime"]])
[13:34:41.755]                       stop(msg)
[13:34:41.755]                     }
[13:34:41.755]                     invisible(pathname)
[13:34:41.755]                   }
[13:34:41.755]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:34:41.755]                     rootPath = tempdir()) 
[13:34:41.755]                   {
[13:34:41.755]                     obj <- list(time = Sys.time(), condition = cond)
[13:34:41.755]                     file <- tempfile(pattern = class(cond)[1], 
[13:34:41.755]                       tmpdir = path, fileext = ".rds")
[13:34:41.755]                     save_rds(obj, file)
[13:34:41.755]                   }
[13:34:41.755]                   saveImmediateCondition(cond, path = "/tmp/RtmplfSa61/.future/immediateConditions")
[13:34:41.755]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:41.755]                   {
[13:34:41.755]                     inherits <- base::inherits
[13:34:41.755]                     invokeRestart <- base::invokeRestart
[13:34:41.755]                     is.null <- base::is.null
[13:34:41.755]                     muffled <- FALSE
[13:34:41.755]                     if (inherits(cond, "message")) {
[13:34:41.755]                       muffled <- grepl(pattern, "muffleMessage")
[13:34:41.755]                       if (muffled) 
[13:34:41.755]                         invokeRestart("muffleMessage")
[13:34:41.755]                     }
[13:34:41.755]                     else if (inherits(cond, "warning")) {
[13:34:41.755]                       muffled <- grepl(pattern, "muffleWarning")
[13:34:41.755]                       if (muffled) 
[13:34:41.755]                         invokeRestart("muffleWarning")
[13:34:41.755]                     }
[13:34:41.755]                     else if (inherits(cond, "condition")) {
[13:34:41.755]                       if (!is.null(pattern)) {
[13:34:41.755]                         computeRestarts <- base::computeRestarts
[13:34:41.755]                         grepl <- base::grepl
[13:34:41.755]                         restarts <- computeRestarts(cond)
[13:34:41.755]                         for (restart in restarts) {
[13:34:41.755]                           name <- restart$name
[13:34:41.755]                           if (is.null(name)) 
[13:34:41.755]                             next
[13:34:41.755]                           if (!grepl(pattern, name)) 
[13:34:41.755]                             next
[13:34:41.755]                           invokeRestart(restart)
[13:34:41.755]                           muffled <- TRUE
[13:34:41.755]                           break
[13:34:41.755]                         }
[13:34:41.755]                       }
[13:34:41.755]                     }
[13:34:41.755]                     invisible(muffled)
[13:34:41.755]                   }
[13:34:41.755]                   muffleCondition(cond)
[13:34:41.755]                 })
[13:34:41.755]             }))
[13:34:41.755]             future::FutureResult(value = ...future.value$value, 
[13:34:41.755]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:41.755]                   ...future.rng), globalenv = if (FALSE) 
[13:34:41.755]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:34:41.755]                     ...future.globalenv.names))
[13:34:41.755]                 else NULL, started = ...future.startTime, version = "1.8")
[13:34:41.755]         }, condition = base::local({
[13:34:41.755]             c <- base::c
[13:34:41.755]             inherits <- base::inherits
[13:34:41.755]             invokeRestart <- base::invokeRestart
[13:34:41.755]             length <- base::length
[13:34:41.755]             list <- base::list
[13:34:41.755]             seq.int <- base::seq.int
[13:34:41.755]             signalCondition <- base::signalCondition
[13:34:41.755]             sys.calls <- base::sys.calls
[13:34:41.755]             `[[` <- base::`[[`
[13:34:41.755]             `+` <- base::`+`
[13:34:41.755]             `<<-` <- base::`<<-`
[13:34:41.755]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:34:41.755]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:34:41.755]                   3L)]
[13:34:41.755]             }
[13:34:41.755]             function(cond) {
[13:34:41.755]                 is_error <- inherits(cond, "error")
[13:34:41.755]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:34:41.755]                   NULL)
[13:34:41.755]                 if (is_error) {
[13:34:41.755]                   sessionInformation <- function() {
[13:34:41.755]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:34:41.755]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:34:41.755]                       search = base::search(), system = base::Sys.info())
[13:34:41.755]                   }
[13:34:41.755]                   ...future.conditions[[length(...future.conditions) + 
[13:34:41.755]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:34:41.755]                     cond$call), session = sessionInformation(), 
[13:34:41.755]                     timestamp = base::Sys.time(), signaled = 0L)
[13:34:41.755]                   signalCondition(cond)
[13:34:41.755]                 }
[13:34:41.755]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:34:41.755]                 "immediateCondition"))) {
[13:34:41.755]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:34:41.755]                   ...future.conditions[[length(...future.conditions) + 
[13:34:41.755]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:34:41.755]                   if (TRUE && !signal) {
[13:34:41.755]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:41.755]                     {
[13:34:41.755]                       inherits <- base::inherits
[13:34:41.755]                       invokeRestart <- base::invokeRestart
[13:34:41.755]                       is.null <- base::is.null
[13:34:41.755]                       muffled <- FALSE
[13:34:41.755]                       if (inherits(cond, "message")) {
[13:34:41.755]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:41.755]                         if (muffled) 
[13:34:41.755]                           invokeRestart("muffleMessage")
[13:34:41.755]                       }
[13:34:41.755]                       else if (inherits(cond, "warning")) {
[13:34:41.755]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:41.755]                         if (muffled) 
[13:34:41.755]                           invokeRestart("muffleWarning")
[13:34:41.755]                       }
[13:34:41.755]                       else if (inherits(cond, "condition")) {
[13:34:41.755]                         if (!is.null(pattern)) {
[13:34:41.755]                           computeRestarts <- base::computeRestarts
[13:34:41.755]                           grepl <- base::grepl
[13:34:41.755]                           restarts <- computeRestarts(cond)
[13:34:41.755]                           for (restart in restarts) {
[13:34:41.755]                             name <- restart$name
[13:34:41.755]                             if (is.null(name)) 
[13:34:41.755]                               next
[13:34:41.755]                             if (!grepl(pattern, name)) 
[13:34:41.755]                               next
[13:34:41.755]                             invokeRestart(restart)
[13:34:41.755]                             muffled <- TRUE
[13:34:41.755]                             break
[13:34:41.755]                           }
[13:34:41.755]                         }
[13:34:41.755]                       }
[13:34:41.755]                       invisible(muffled)
[13:34:41.755]                     }
[13:34:41.755]                     muffleCondition(cond, pattern = "^muffle")
[13:34:41.755]                   }
[13:34:41.755]                 }
[13:34:41.755]                 else {
[13:34:41.755]                   if (TRUE) {
[13:34:41.755]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:41.755]                     {
[13:34:41.755]                       inherits <- base::inherits
[13:34:41.755]                       invokeRestart <- base::invokeRestart
[13:34:41.755]                       is.null <- base::is.null
[13:34:41.755]                       muffled <- FALSE
[13:34:41.755]                       if (inherits(cond, "message")) {
[13:34:41.755]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:41.755]                         if (muffled) 
[13:34:41.755]                           invokeRestart("muffleMessage")
[13:34:41.755]                       }
[13:34:41.755]                       else if (inherits(cond, "warning")) {
[13:34:41.755]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:41.755]                         if (muffled) 
[13:34:41.755]                           invokeRestart("muffleWarning")
[13:34:41.755]                       }
[13:34:41.755]                       else if (inherits(cond, "condition")) {
[13:34:41.755]                         if (!is.null(pattern)) {
[13:34:41.755]                           computeRestarts <- base::computeRestarts
[13:34:41.755]                           grepl <- base::grepl
[13:34:41.755]                           restarts <- computeRestarts(cond)
[13:34:41.755]                           for (restart in restarts) {
[13:34:41.755]                             name <- restart$name
[13:34:41.755]                             if (is.null(name)) 
[13:34:41.755]                               next
[13:34:41.755]                             if (!grepl(pattern, name)) 
[13:34:41.755]                               next
[13:34:41.755]                             invokeRestart(restart)
[13:34:41.755]                             muffled <- TRUE
[13:34:41.755]                             break
[13:34:41.755]                           }
[13:34:41.755]                         }
[13:34:41.755]                       }
[13:34:41.755]                       invisible(muffled)
[13:34:41.755]                     }
[13:34:41.755]                     muffleCondition(cond, pattern = "^muffle")
[13:34:41.755]                   }
[13:34:41.755]                 }
[13:34:41.755]             }
[13:34:41.755]         }))
[13:34:41.755]     }, error = function(ex) {
[13:34:41.755]         base::structure(base::list(value = NULL, visible = NULL, 
[13:34:41.755]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:41.755]                 ...future.rng), started = ...future.startTime, 
[13:34:41.755]             finished = Sys.time(), session_uuid = NA_character_, 
[13:34:41.755]             version = "1.8"), class = "FutureResult")
[13:34:41.755]     }, finally = {
[13:34:41.755]         if (!identical(...future.workdir, getwd())) 
[13:34:41.755]             setwd(...future.workdir)
[13:34:41.755]         {
[13:34:41.755]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:34:41.755]                 ...future.oldOptions$nwarnings <- NULL
[13:34:41.755]             }
[13:34:41.755]             base::options(...future.oldOptions)
[13:34:41.755]             if (.Platform$OS.type == "windows") {
[13:34:41.755]                 old_names <- names(...future.oldEnvVars)
[13:34:41.755]                 envs <- base::Sys.getenv()
[13:34:41.755]                 names <- names(envs)
[13:34:41.755]                 common <- intersect(names, old_names)
[13:34:41.755]                 added <- setdiff(names, old_names)
[13:34:41.755]                 removed <- setdiff(old_names, names)
[13:34:41.755]                 changed <- common[...future.oldEnvVars[common] != 
[13:34:41.755]                   envs[common]]
[13:34:41.755]                 NAMES <- toupper(changed)
[13:34:41.755]                 args <- list()
[13:34:41.755]                 for (kk in seq_along(NAMES)) {
[13:34:41.755]                   name <- changed[[kk]]
[13:34:41.755]                   NAME <- NAMES[[kk]]
[13:34:41.755]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:41.755]                     next
[13:34:41.755]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:41.755]                 }
[13:34:41.755]                 NAMES <- toupper(added)
[13:34:41.755]                 for (kk in seq_along(NAMES)) {
[13:34:41.755]                   name <- added[[kk]]
[13:34:41.755]                   NAME <- NAMES[[kk]]
[13:34:41.755]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:41.755]                     next
[13:34:41.755]                   args[[name]] <- ""
[13:34:41.755]                 }
[13:34:41.755]                 NAMES <- toupper(removed)
[13:34:41.755]                 for (kk in seq_along(NAMES)) {
[13:34:41.755]                   name <- removed[[kk]]
[13:34:41.755]                   NAME <- NAMES[[kk]]
[13:34:41.755]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:41.755]                     next
[13:34:41.755]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:41.755]                 }
[13:34:41.755]                 if (length(args) > 0) 
[13:34:41.755]                   base::do.call(base::Sys.setenv, args = args)
[13:34:41.755]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:34:41.755]             }
[13:34:41.755]             else {
[13:34:41.755]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:34:41.755]             }
[13:34:41.755]             {
[13:34:41.755]                 if (base::length(...future.futureOptionsAdded) > 
[13:34:41.755]                   0L) {
[13:34:41.755]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:34:41.755]                   base::names(opts) <- ...future.futureOptionsAdded
[13:34:41.755]                   base::options(opts)
[13:34:41.755]                 }
[13:34:41.755]                 {
[13:34:41.755]                   {
[13:34:41.755]                     base::options(mc.cores = ...future.mc.cores.old)
[13:34:41.755]                     NULL
[13:34:41.755]                   }
[13:34:41.755]                   options(future.plan = NULL)
[13:34:41.755]                   if (is.na(NA_character_)) 
[13:34:41.755]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:34:41.755]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:34:41.755]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:34:41.755]                     .init = FALSE)
[13:34:41.755]                 }
[13:34:41.755]             }
[13:34:41.755]         }
[13:34:41.755]     })
[13:34:41.755]     if (TRUE) {
[13:34:41.755]         base::sink(type = "output", split = FALSE)
[13:34:41.755]         if (TRUE) {
[13:34:41.755]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:34:41.755]         }
[13:34:41.755]         else {
[13:34:41.755]             ...future.result["stdout"] <- base::list(NULL)
[13:34:41.755]         }
[13:34:41.755]         base::close(...future.stdout)
[13:34:41.755]         ...future.stdout <- NULL
[13:34:41.755]     }
[13:34:41.755]     ...future.result$conditions <- ...future.conditions
[13:34:41.755]     ...future.result$finished <- base::Sys.time()
[13:34:41.755]     ...future.result
[13:34:41.755] }
[13:34:41.758] assign_globals() ...
[13:34:41.758] List of 5
[13:34:41.758]  $ ...future.FUN            :function (...)  
[13:34:41.758]  $ future.call.arguments    : list()
[13:34:41.758]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:41.758]  $ ...future.elements_ii    :List of 3
[13:34:41.758]   ..$ : int 0
[13:34:41.758]   ..$ : int 0
[13:34:41.758]   ..$ : int 0
[13:34:41.758]  $ ...future.seeds_ii       :List of 3
[13:34:41.758]   ..$ : int [1:7] 10407 2000585943 1277356830 -2089408352 -860958827 226502925 99834792
[13:34:41.758]   ..$ : int [1:7] 10407 -1366366742 -1587533199 -987670999 1146693195 -372746989 -1779846945
[13:34:41.758]   ..$ : int [1:7] 10407 -1326244930 -121340665 862160877 1069041468 -111293265 1245428870
[13:34:41.758]  $ ...future.globals.maxSize: NULL
[13:34:41.758]  - attr(*, "where")=List of 5
[13:34:41.758]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:34:41.758]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:34:41.758]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:34:41.758]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:34:41.758]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:34:41.758]  - attr(*, "resolved")= logi FALSE
[13:34:41.758]  - attr(*, "total_size")= num 616
[13:34:41.758]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:41.758]  - attr(*, "already-done")= logi TRUE
[13:34:41.770] - reassign environment for ‘...future.FUN’
[13:34:41.770] - copied ‘...future.FUN’ to environment
[13:34:41.770] - copied ‘future.call.arguments’ to environment
[13:34:41.771] - copied ‘...future.elements_ii’ to environment
[13:34:41.771] - copied ‘...future.seeds_ii’ to environment
[13:34:41.771] - copied ‘...future.globals.maxSize’ to environment
[13:34:41.771] assign_globals() ... done
[13:34:41.771] requestCore(): workers = 2
[13:34:41.777] MulticoreFuture started
[13:34:41.777] - Launch lazy future ... done
[13:34:41.777] run() for ‘MulticoreFuture’ ... done
[13:34:41.778] Created future:
[13:34:41.778] plan(): Setting new future strategy stack:
[13:34:41.778] List of future strategies:
[13:34:41.778] 1. sequential:
[13:34:41.778]    - args: function (..., envir = parent.frame())
[13:34:41.778]    - tweaked: FALSE
[13:34:41.778]    - call: NULL
[13:34:41.779] plan(): nbrOfWorkers() = 1
[13:34:41.781] plan(): Setting new future strategy stack:
[13:34:41.781] List of future strategies:
[13:34:41.781] 1. multicore:
[13:34:41.781]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:34:41.781]    - tweaked: FALSE
[13:34:41.781]    - call: plan(strategy)
[13:34:41.786] plan(): nbrOfWorkers() = 2
[13:34:41.778] MulticoreFuture:
[13:34:41.778] Label: ‘future_replicate-2’
[13:34:41.778] Expression:
[13:34:41.778] {
[13:34:41.778]     do.call(function(...) {
[13:34:41.778]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:41.778]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:41.778]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:41.778]             on.exit(options(oopts), add = TRUE)
[13:34:41.778]         }
[13:34:41.778]         {
[13:34:41.778]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:41.778]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:41.778]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:41.778]                   envir = globalenv(), inherits = FALSE)
[13:34:41.778]                 ...future.FUN(...future.X_jj, ...)
[13:34:41.778]             })
[13:34:41.778]         }
[13:34:41.778]     }, args = future.call.arguments)
[13:34:41.778] }
[13:34:41.778] Lazy evaluation: FALSE
[13:34:41.778] Asynchronous evaluation: TRUE
[13:34:41.778] Local evaluation: TRUE
[13:34:41.778] Environment: R_GlobalEnv
[13:34:41.778] Capture standard output: TRUE
[13:34:41.778] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:34:41.778] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:34:41.778] Packages: <none>
[13:34:41.778] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:34:41.778] Resolved: TRUE
[13:34:41.778] Value: <not collected>
[13:34:41.778] Conditions captured: <none>
[13:34:41.778] Early signaling: FALSE
[13:34:41.778] Owner process: b8cf10c3-b112-c8f9-9398-a44000e21728
[13:34:41.778] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:41.787] Chunk #2 of 2 ... DONE
[13:34:41.787] Launching 2 futures (chunks) ... DONE
[13:34:41.787] Resolving 2 futures (chunks) ...
[13:34:41.788] resolve() on list ...
[13:34:41.788]  recursive: 0
[13:34:41.788]  length: 2
[13:34:41.788] 
[13:34:41.788] Future #1
[13:34:41.789] result() for MulticoreFuture ...
[13:34:41.791] result() for MulticoreFuture ...
[13:34:41.791] result() for MulticoreFuture ... done
[13:34:41.791] result() for MulticoreFuture ... done
[13:34:41.791] result() for MulticoreFuture ...
[13:34:41.791] result() for MulticoreFuture ... done
[13:34:41.792] signalConditionsASAP(MulticoreFuture, pos=1) ...
[13:34:41.792] - nx: 2
[13:34:41.792] - relay: TRUE
[13:34:41.792] - stdout: TRUE
[13:34:41.792] - signal: TRUE
[13:34:41.792] - resignal: FALSE
[13:34:41.792] - force: TRUE
[13:34:41.793] - relayed: [n=2] FALSE, FALSE
[13:34:41.793] - queued futures: [n=2] FALSE, FALSE
[13:34:41.793]  - until=1
[13:34:41.793]  - relaying element #1
[13:34:41.793] result() for MulticoreFuture ...
[13:34:41.793] result() for MulticoreFuture ... done
[13:34:41.794] result() for MulticoreFuture ...
[13:34:41.794] result() for MulticoreFuture ... done
[13:34:41.794] result() for MulticoreFuture ...
[13:34:41.794] result() for MulticoreFuture ... done
[13:34:41.794] result() for MulticoreFuture ...
[13:34:41.794] result() for MulticoreFuture ... done
[13:34:41.795] - relayed: [n=2] TRUE, FALSE
[13:34:41.795] - queued futures: [n=2] TRUE, FALSE
[13:34:41.795] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[13:34:41.795]  length: 1 (resolved future 1)
[13:34:41.795] Future #2
[13:34:41.796] result() for MulticoreFuture ...
[13:34:41.796] result() for MulticoreFuture ...
[13:34:41.796] result() for MulticoreFuture ... done
[13:34:41.796] result() for MulticoreFuture ... done
[13:34:41.797] result() for MulticoreFuture ...
[13:34:41.797] result() for MulticoreFuture ... done
[13:34:41.797] signalConditionsASAP(MulticoreFuture, pos=2) ...
[13:34:41.797] - nx: 2
[13:34:41.797] - relay: TRUE
[13:34:41.797] - stdout: TRUE
[13:34:41.797] - signal: TRUE
[13:34:41.797] - resignal: FALSE
[13:34:41.798] - force: TRUE
[13:34:41.798] - relayed: [n=2] TRUE, FALSE
[13:34:41.798] - queued futures: [n=2] TRUE, FALSE
[13:34:41.798]  - until=2
[13:34:41.798]  - relaying element #2
[13:34:41.798] result() for MulticoreFuture ...
[13:34:41.798] result() for MulticoreFuture ... done
[13:34:41.799] result() for MulticoreFuture ...
[13:34:41.799] result() for MulticoreFuture ... done
[13:34:41.799] result() for MulticoreFuture ...
[13:34:41.799] result() for MulticoreFuture ... done
[13:34:41.799] result() for MulticoreFuture ...
[13:34:41.799] result() for MulticoreFuture ... done
[13:34:41.799] - relayed: [n=2] TRUE, TRUE
[13:34:41.799] - queued futures: [n=2] TRUE, TRUE
[13:34:41.799] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[13:34:41.800]  length: 0 (resolved future 2)
[13:34:41.800] Relaying remaining futures
[13:34:41.800] signalConditionsASAP(NULL, pos=0) ...
[13:34:41.800] - nx: 2
[13:34:41.800] - relay: TRUE
[13:34:41.800] - stdout: TRUE
[13:34:41.800] - signal: TRUE
[13:34:41.800] - resignal: FALSE
[13:34:41.800] - force: TRUE
[13:34:41.800] - relayed: [n=2] TRUE, TRUE
[13:34:41.801] - queued futures: [n=2] TRUE, TRUE
 - flush all
[13:34:41.801] - relayed: [n=2] TRUE, TRUE
[13:34:41.801] - queued futures: [n=2] TRUE, TRUE
[13:34:41.801] signalConditionsASAP(NULL, pos=0) ... done
[13:34:41.801] resolve() on list ... DONE
[13:34:41.801] result() for MulticoreFuture ...
[13:34:41.801] result() for MulticoreFuture ... done
[13:34:41.801] result() for MulticoreFuture ...
[13:34:41.801] result() for MulticoreFuture ... done
[13:34:41.802] result() for MulticoreFuture ...
[13:34:41.802] result() for MulticoreFuture ... done
[13:34:41.802] result() for MulticoreFuture ...
[13:34:41.802] result() for MulticoreFuture ... done
[13:34:41.802]  - Number of value chunks collected: 2
[13:34:41.802] Resolving 2 futures (chunks) ... DONE
[13:34:41.802] Reducing values from 2 chunks ...
[13:34:41.802]  - Number of values collected after concatenation: 5
[13:34:41.803]  - Number of values expected: 5
[13:34:41.803] Reducing values from 2 chunks ... DONE
[13:34:41.803] future_lapply() ... DONE
[13:34:41.803] future_lapply() ...
[13:34:41.804] Generating random seeds ...
[13:34:41.804] Generating random seed streams for 5 elements ...
[13:34:41.804] Generating random seed streams for 5 elements ... DONE
[13:34:41.804] Generating random seeds ... DONE
[13:34:41.804] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:34:41.809] Number of chunks: 2
[13:34:41.809] getGlobalsAndPackagesXApply() ...
[13:34:41.809]  - future.globals: TRUE
[13:34:41.811] getGlobalsAndPackages() ...
[13:34:41.811] Searching for globals...
[13:34:41.813] - globals found: [2] ‘FUN’, ‘sample’
[13:34:41.813] Searching for globals ... DONE
[13:34:41.813] Resolving globals: FALSE
[13:34:41.813] The total size of the 1 globals is 616 bytes (616 bytes)
[13:34:41.814] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:34:41.814] - globals: [1] ‘FUN’
[13:34:41.814] 
[13:34:41.814] getGlobalsAndPackages() ... DONE
[13:34:41.814]  - globals found/used: [n=1] ‘FUN’
[13:34:41.814]  - needed namespaces: [n=0] 
[13:34:41.815] Finding globals ... DONE
[13:34:41.815]  - use_args: TRUE
[13:34:41.815]  - Getting '...' globals ...
[13:34:41.815] resolve() on list ...
[13:34:41.815]  recursive: 0
[13:34:41.815]  length: 1
[13:34:41.816]  elements: ‘...’
[13:34:41.816]  length: 0 (resolved future 1)
[13:34:41.816] resolve() on list ... DONE
[13:34:41.816]    - '...' content: [n=0] 
[13:34:41.816] List of 1
[13:34:41.816]  $ ...: list()
[13:34:41.816]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:41.816]  - attr(*, "where")=List of 1
[13:34:41.816]   ..$ ...:<environment: 0x5627bf6763b0> 
[13:34:41.816]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:41.816]  - attr(*, "resolved")= logi TRUE
[13:34:41.816]  - attr(*, "total_size")= num NA
[13:34:41.819]  - Getting '...' globals ... DONE
[13:34:41.819] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:34:41.819] List of 2
[13:34:41.819]  $ ...future.FUN:function (...)  
[13:34:41.819]  $ ...          : list()
[13:34:41.819]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:41.819]  - attr(*, "where")=List of 2
[13:34:41.819]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:34:41.819]   ..$ ...          :<environment: 0x5627bf6763b0> 
[13:34:41.819]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:41.819]  - attr(*, "resolved")= logi FALSE
[13:34:41.819]  - attr(*, "total_size")= num 616
[13:34:41.822] Packages to be attached in all futures: [n=0] 
[13:34:41.822] getGlobalsAndPackagesXApply() ... DONE
[13:34:41.822] Number of futures (= number of chunks): 2
[13:34:41.822] Launching 2 futures (chunks) ...
[13:34:41.822] Chunk #1 of 2 ...
[13:34:41.822]  - Finding globals in 'X' for chunk #1 ...
[13:34:41.823] getGlobalsAndPackages() ...
[13:34:41.823] Searching for globals...
[13:34:41.823] 
[13:34:41.823] Searching for globals ... DONE
[13:34:41.823] - globals: [0] <none>
[13:34:41.823] getGlobalsAndPackages() ... DONE
[13:34:41.823]    + additional globals found: [n=0] 
[13:34:41.823]    + additional namespaces needed: [n=0] 
[13:34:41.823]  - Finding globals in 'X' for chunk #1 ... DONE
[13:34:41.824]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:34:41.824]  - seeds: [2] <seeds>
[13:34:41.824]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:41.824] getGlobalsAndPackages() ...
[13:34:41.824] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:41.824] Resolving globals: FALSE
[13:34:41.824] Tweak future expression to call with '...' arguments ...
[13:34:41.824] {
[13:34:41.824]     do.call(function(...) {
[13:34:41.824]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:41.824]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:41.824]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:41.824]             on.exit(options(oopts), add = TRUE)
[13:34:41.824]         }
[13:34:41.824]         {
[13:34:41.824]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:41.824]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:41.824]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:41.824]                   envir = globalenv(), inherits = FALSE)
[13:34:41.824]                 ...future.FUN(...future.X_jj, ...)
[13:34:41.824]             })
[13:34:41.824]         }
[13:34:41.824]     }, args = future.call.arguments)
[13:34:41.824] }
[13:34:41.825] Tweak future expression to call with '...' arguments ... DONE
[13:34:41.825] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:41.825] 
[13:34:41.825] getGlobalsAndPackages() ... DONE
[13:34:41.825] run() for ‘Future’ ...
[13:34:41.825] - state: ‘created’
[13:34:41.826] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:34:41.829] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:41.829] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:34:41.829]   - Field: ‘label’
[13:34:41.829]   - Field: ‘local’
[13:34:41.830]   - Field: ‘owner’
[13:34:41.830]   - Field: ‘envir’
[13:34:41.830]   - Field: ‘workers’
[13:34:41.830]   - Field: ‘packages’
[13:34:41.830]   - Field: ‘gc’
[13:34:41.830]   - Field: ‘job’
[13:34:41.830]   - Field: ‘conditions’
[13:34:41.830]   - Field: ‘expr’
[13:34:41.830]   - Field: ‘uuid’
[13:34:41.830]   - Field: ‘seed’
[13:34:41.831]   - Field: ‘version’
[13:34:41.831]   - Field: ‘result’
[13:34:41.831]   - Field: ‘asynchronous’
[13:34:41.831]   - Field: ‘calls’
[13:34:41.831]   - Field: ‘globals’
[13:34:41.831]   - Field: ‘stdout’
[13:34:41.831]   - Field: ‘earlySignal’
[13:34:41.831]   - Field: ‘lazy’
[13:34:41.831]   - Field: ‘state’
[13:34:41.831] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:34:41.831] - Launch lazy future ...
[13:34:41.832] Packages needed by the future expression (n = 0): <none>
[13:34:41.832] Packages needed by future strategies (n = 0): <none>
[13:34:41.832] {
[13:34:41.832]     {
[13:34:41.832]         {
[13:34:41.832]             ...future.startTime <- base::Sys.time()
[13:34:41.832]             {
[13:34:41.832]                 {
[13:34:41.832]                   {
[13:34:41.832]                     {
[13:34:41.832]                       base::local({
[13:34:41.832]                         has_future <- base::requireNamespace("future", 
[13:34:41.832]                           quietly = TRUE)
[13:34:41.832]                         if (has_future) {
[13:34:41.832]                           ns <- base::getNamespace("future")
[13:34:41.832]                           version <- ns[[".package"]][["version"]]
[13:34:41.832]                           if (is.null(version)) 
[13:34:41.832]                             version <- utils::packageVersion("future")
[13:34:41.832]                         }
[13:34:41.832]                         else {
[13:34:41.832]                           version <- NULL
[13:34:41.832]                         }
[13:34:41.832]                         if (!has_future || version < "1.8.0") {
[13:34:41.832]                           info <- base::c(r_version = base::gsub("R version ", 
[13:34:41.832]                             "", base::R.version$version.string), 
[13:34:41.832]                             platform = base::sprintf("%s (%s-bit)", 
[13:34:41.832]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:34:41.832]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:34:41.832]                               "release", "version")], collapse = " "), 
[13:34:41.832]                             hostname = base::Sys.info()[["nodename"]])
[13:34:41.832]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:34:41.832]                             info)
[13:34:41.832]                           info <- base::paste(info, collapse = "; ")
[13:34:41.832]                           if (!has_future) {
[13:34:41.832]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:34:41.832]                               info)
[13:34:41.832]                           }
[13:34:41.832]                           else {
[13:34:41.832]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:34:41.832]                               info, version)
[13:34:41.832]                           }
[13:34:41.832]                           base::stop(msg)
[13:34:41.832]                         }
[13:34:41.832]                       })
[13:34:41.832]                     }
[13:34:41.832]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:34:41.832]                     base::options(mc.cores = 1L)
[13:34:41.832]                   }
[13:34:41.832]                   ...future.strategy.old <- future::plan("list")
[13:34:41.832]                   options(future.plan = NULL)
[13:34:41.832]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:34:41.832]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:34:41.832]                 }
[13:34:41.832]                 ...future.workdir <- getwd()
[13:34:41.832]             }
[13:34:41.832]             ...future.oldOptions <- base::as.list(base::.Options)
[13:34:41.832]             ...future.oldEnvVars <- base::Sys.getenv()
[13:34:41.832]         }
[13:34:41.832]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:34:41.832]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:34:41.832]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:34:41.832]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:34:41.832]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:34:41.832]             future.stdout.windows.reencode = NULL, width = 80L)
[13:34:41.832]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:34:41.832]             base::names(...future.oldOptions))
[13:34:41.832]     }
[13:34:41.832]     if (FALSE) {
[13:34:41.832]     }
[13:34:41.832]     else {
[13:34:41.832]         if (TRUE) {
[13:34:41.832]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:34:41.832]                 open = "w")
[13:34:41.832]         }
[13:34:41.832]         else {
[13:34:41.832]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:34:41.832]                 windows = "NUL", "/dev/null"), open = "w")
[13:34:41.832]         }
[13:34:41.832]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:34:41.832]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:34:41.832]             base::sink(type = "output", split = FALSE)
[13:34:41.832]             base::close(...future.stdout)
[13:34:41.832]         }, add = TRUE)
[13:34:41.832]     }
[13:34:41.832]     ...future.frame <- base::sys.nframe()
[13:34:41.832]     ...future.conditions <- base::list()
[13:34:41.832]     ...future.rng <- base::globalenv()$.Random.seed
[13:34:41.832]     if (FALSE) {
[13:34:41.832]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:34:41.832]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:34:41.832]     }
[13:34:41.832]     ...future.result <- base::tryCatch({
[13:34:41.832]         base::withCallingHandlers({
[13:34:41.832]             ...future.value <- base::withVisible(base::local({
[13:34:41.832]                 withCallingHandlers({
[13:34:41.832]                   {
[13:34:41.832]                     do.call(function(...) {
[13:34:41.832]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:41.832]                       if (!identical(...future.globals.maxSize.org, 
[13:34:41.832]                         ...future.globals.maxSize)) {
[13:34:41.832]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:41.832]                         on.exit(options(oopts), add = TRUE)
[13:34:41.832]                       }
[13:34:41.832]                       {
[13:34:41.832]                         lapply(seq_along(...future.elements_ii), 
[13:34:41.832]                           FUN = function(jj) {
[13:34:41.832]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:41.832]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:41.832]                               envir = globalenv(), inherits = FALSE)
[13:34:41.832]                             ...future.FUN(...future.X_jj, ...)
[13:34:41.832]                           })
[13:34:41.832]                       }
[13:34:41.832]                     }, args = future.call.arguments)
[13:34:41.832]                   }
[13:34:41.832]                 }, immediateCondition = function(cond) {
[13:34:41.832]                   save_rds <- function (object, pathname, ...) 
[13:34:41.832]                   {
[13:34:41.832]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:34:41.832]                     if (file_test("-f", pathname_tmp)) {
[13:34:41.832]                       fi_tmp <- file.info(pathname_tmp)
[13:34:41.832]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:34:41.832]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:34:41.832]                         fi_tmp[["mtime"]])
[13:34:41.832]                     }
[13:34:41.832]                     tryCatch({
[13:34:41.832]                       saveRDS(object, file = pathname_tmp, ...)
[13:34:41.832]                     }, error = function(ex) {
[13:34:41.832]                       msg <- conditionMessage(ex)
[13:34:41.832]                       fi_tmp <- file.info(pathname_tmp)
[13:34:41.832]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:34:41.832]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:34:41.832]                         fi_tmp[["mtime"]], msg)
[13:34:41.832]                       ex$message <- msg
[13:34:41.832]                       stop(ex)
[13:34:41.832]                     })
[13:34:41.832]                     stopifnot(file_test("-f", pathname_tmp))
[13:34:41.832]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:34:41.832]                     if (!res || file_test("-f", pathname_tmp)) {
[13:34:41.832]                       fi_tmp <- file.info(pathname_tmp)
[13:34:41.832]                       fi <- file.info(pathname)
[13:34:41.832]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:34:41.832]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:34:41.832]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:34:41.832]                         fi[["size"]], fi[["mtime"]])
[13:34:41.832]                       stop(msg)
[13:34:41.832]                     }
[13:34:41.832]                     invisible(pathname)
[13:34:41.832]                   }
[13:34:41.832]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:34:41.832]                     rootPath = tempdir()) 
[13:34:41.832]                   {
[13:34:41.832]                     obj <- list(time = Sys.time(), condition = cond)
[13:34:41.832]                     file <- tempfile(pattern = class(cond)[1], 
[13:34:41.832]                       tmpdir = path, fileext = ".rds")
[13:34:41.832]                     save_rds(obj, file)
[13:34:41.832]                   }
[13:34:41.832]                   saveImmediateCondition(cond, path = "/tmp/RtmplfSa61/.future/immediateConditions")
[13:34:41.832]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:41.832]                   {
[13:34:41.832]                     inherits <- base::inherits
[13:34:41.832]                     invokeRestart <- base::invokeRestart
[13:34:41.832]                     is.null <- base::is.null
[13:34:41.832]                     muffled <- FALSE
[13:34:41.832]                     if (inherits(cond, "message")) {
[13:34:41.832]                       muffled <- grepl(pattern, "muffleMessage")
[13:34:41.832]                       if (muffled) 
[13:34:41.832]                         invokeRestart("muffleMessage")
[13:34:41.832]                     }
[13:34:41.832]                     else if (inherits(cond, "warning")) {
[13:34:41.832]                       muffled <- grepl(pattern, "muffleWarning")
[13:34:41.832]                       if (muffled) 
[13:34:41.832]                         invokeRestart("muffleWarning")
[13:34:41.832]                     }
[13:34:41.832]                     else if (inherits(cond, "condition")) {
[13:34:41.832]                       if (!is.null(pattern)) {
[13:34:41.832]                         computeRestarts <- base::computeRestarts
[13:34:41.832]                         grepl <- base::grepl
[13:34:41.832]                         restarts <- computeRestarts(cond)
[13:34:41.832]                         for (restart in restarts) {
[13:34:41.832]                           name <- restart$name
[13:34:41.832]                           if (is.null(name)) 
[13:34:41.832]                             next
[13:34:41.832]                           if (!grepl(pattern, name)) 
[13:34:41.832]                             next
[13:34:41.832]                           invokeRestart(restart)
[13:34:41.832]                           muffled <- TRUE
[13:34:41.832]                           break
[13:34:41.832]                         }
[13:34:41.832]                       }
[13:34:41.832]                     }
[13:34:41.832]                     invisible(muffled)
[13:34:41.832]                   }
[13:34:41.832]                   muffleCondition(cond)
[13:34:41.832]                 })
[13:34:41.832]             }))
[13:34:41.832]             future::FutureResult(value = ...future.value$value, 
[13:34:41.832]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:41.832]                   ...future.rng), globalenv = if (FALSE) 
[13:34:41.832]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:34:41.832]                     ...future.globalenv.names))
[13:34:41.832]                 else NULL, started = ...future.startTime, version = "1.8")
[13:34:41.832]         }, condition = base::local({
[13:34:41.832]             c <- base::c
[13:34:41.832]             inherits <- base::inherits
[13:34:41.832]             invokeRestart <- base::invokeRestart
[13:34:41.832]             length <- base::length
[13:34:41.832]             list <- base::list
[13:34:41.832]             seq.int <- base::seq.int
[13:34:41.832]             signalCondition <- base::signalCondition
[13:34:41.832]             sys.calls <- base::sys.calls
[13:34:41.832]             `[[` <- base::`[[`
[13:34:41.832]             `+` <- base::`+`
[13:34:41.832]             `<<-` <- base::`<<-`
[13:34:41.832]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:34:41.832]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:34:41.832]                   3L)]
[13:34:41.832]             }
[13:34:41.832]             function(cond) {
[13:34:41.832]                 is_error <- inherits(cond, "error")
[13:34:41.832]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:34:41.832]                   NULL)
[13:34:41.832]                 if (is_error) {
[13:34:41.832]                   sessionInformation <- function() {
[13:34:41.832]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:34:41.832]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:34:41.832]                       search = base::search(), system = base::Sys.info())
[13:34:41.832]                   }
[13:34:41.832]                   ...future.conditions[[length(...future.conditions) + 
[13:34:41.832]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:34:41.832]                     cond$call), session = sessionInformation(), 
[13:34:41.832]                     timestamp = base::Sys.time(), signaled = 0L)
[13:34:41.832]                   signalCondition(cond)
[13:34:41.832]                 }
[13:34:41.832]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:34:41.832]                 "immediateCondition"))) {
[13:34:41.832]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:34:41.832]                   ...future.conditions[[length(...future.conditions) + 
[13:34:41.832]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:34:41.832]                   if (TRUE && !signal) {
[13:34:41.832]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:41.832]                     {
[13:34:41.832]                       inherits <- base::inherits
[13:34:41.832]                       invokeRestart <- base::invokeRestart
[13:34:41.832]                       is.null <- base::is.null
[13:34:41.832]                       muffled <- FALSE
[13:34:41.832]                       if (inherits(cond, "message")) {
[13:34:41.832]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:41.832]                         if (muffled) 
[13:34:41.832]                           invokeRestart("muffleMessage")
[13:34:41.832]                       }
[13:34:41.832]                       else if (inherits(cond, "warning")) {
[13:34:41.832]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:41.832]                         if (muffled) 
[13:34:41.832]                           invokeRestart("muffleWarning")
[13:34:41.832]                       }
[13:34:41.832]                       else if (inherits(cond, "condition")) {
[13:34:41.832]                         if (!is.null(pattern)) {
[13:34:41.832]                           computeRestarts <- base::computeRestarts
[13:34:41.832]                           grepl <- base::grepl
[13:34:41.832]                           restarts <- computeRestarts(cond)
[13:34:41.832]                           for (restart in restarts) {
[13:34:41.832]                             name <- restart$name
[13:34:41.832]                             if (is.null(name)) 
[13:34:41.832]                               next
[13:34:41.832]                             if (!grepl(pattern, name)) 
[13:34:41.832]                               next
[13:34:41.832]                             invokeRestart(restart)
[13:34:41.832]                             muffled <- TRUE
[13:34:41.832]                             break
[13:34:41.832]                           }
[13:34:41.832]                         }
[13:34:41.832]                       }
[13:34:41.832]                       invisible(muffled)
[13:34:41.832]                     }
[13:34:41.832]                     muffleCondition(cond, pattern = "^muffle")
[13:34:41.832]                   }
[13:34:41.832]                 }
[13:34:41.832]                 else {
[13:34:41.832]                   if (TRUE) {
[13:34:41.832]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:41.832]                     {
[13:34:41.832]                       inherits <- base::inherits
[13:34:41.832]                       invokeRestart <- base::invokeRestart
[13:34:41.832]                       is.null <- base::is.null
[13:34:41.832]                       muffled <- FALSE
[13:34:41.832]                       if (inherits(cond, "message")) {
[13:34:41.832]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:41.832]                         if (muffled) 
[13:34:41.832]                           invokeRestart("muffleMessage")
[13:34:41.832]                       }
[13:34:41.832]                       else if (inherits(cond, "warning")) {
[13:34:41.832]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:41.832]                         if (muffled) 
[13:34:41.832]                           invokeRestart("muffleWarning")
[13:34:41.832]                       }
[13:34:41.832]                       else if (inherits(cond, "condition")) {
[13:34:41.832]                         if (!is.null(pattern)) {
[13:34:41.832]                           computeRestarts <- base::computeRestarts
[13:34:41.832]                           grepl <- base::grepl
[13:34:41.832]                           restarts <- computeRestarts(cond)
[13:34:41.832]                           for (restart in restarts) {
[13:34:41.832]                             name <- restart$name
[13:34:41.832]                             if (is.null(name)) 
[13:34:41.832]                               next
[13:34:41.832]                             if (!grepl(pattern, name)) 
[13:34:41.832]                               next
[13:34:41.832]                             invokeRestart(restart)
[13:34:41.832]                             muffled <- TRUE
[13:34:41.832]                             break
[13:34:41.832]                           }
[13:34:41.832]                         }
[13:34:41.832]                       }
[13:34:41.832]                       invisible(muffled)
[13:34:41.832]                     }
[13:34:41.832]                     muffleCondition(cond, pattern = "^muffle")
[13:34:41.832]                   }
[13:34:41.832]                 }
[13:34:41.832]             }
[13:34:41.832]         }))
[13:34:41.832]     }, error = function(ex) {
[13:34:41.832]         base::structure(base::list(value = NULL, visible = NULL, 
[13:34:41.832]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:41.832]                 ...future.rng), started = ...future.startTime, 
[13:34:41.832]             finished = Sys.time(), session_uuid = NA_character_, 
[13:34:41.832]             version = "1.8"), class = "FutureResult")
[13:34:41.832]     }, finally = {
[13:34:41.832]         if (!identical(...future.workdir, getwd())) 
[13:34:41.832]             setwd(...future.workdir)
[13:34:41.832]         {
[13:34:41.832]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:34:41.832]                 ...future.oldOptions$nwarnings <- NULL
[13:34:41.832]             }
[13:34:41.832]             base::options(...future.oldOptions)
[13:34:41.832]             if (.Platform$OS.type == "windows") {
[13:34:41.832]                 old_names <- names(...future.oldEnvVars)
[13:34:41.832]                 envs <- base::Sys.getenv()
[13:34:41.832]                 names <- names(envs)
[13:34:41.832]                 common <- intersect(names, old_names)
[13:34:41.832]                 added <- setdiff(names, old_names)
[13:34:41.832]                 removed <- setdiff(old_names, names)
[13:34:41.832]                 changed <- common[...future.oldEnvVars[common] != 
[13:34:41.832]                   envs[common]]
[13:34:41.832]                 NAMES <- toupper(changed)
[13:34:41.832]                 args <- list()
[13:34:41.832]                 for (kk in seq_along(NAMES)) {
[13:34:41.832]                   name <- changed[[kk]]
[13:34:41.832]                   NAME <- NAMES[[kk]]
[13:34:41.832]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:41.832]                     next
[13:34:41.832]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:41.832]                 }
[13:34:41.832]                 NAMES <- toupper(added)
[13:34:41.832]                 for (kk in seq_along(NAMES)) {
[13:34:41.832]                   name <- added[[kk]]
[13:34:41.832]                   NAME <- NAMES[[kk]]
[13:34:41.832]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:41.832]                     next
[13:34:41.832]                   args[[name]] <- ""
[13:34:41.832]                 }
[13:34:41.832]                 NAMES <- toupper(removed)
[13:34:41.832]                 for (kk in seq_along(NAMES)) {
[13:34:41.832]                   name <- removed[[kk]]
[13:34:41.832]                   NAME <- NAMES[[kk]]
[13:34:41.832]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:41.832]                     next
[13:34:41.832]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:41.832]                 }
[13:34:41.832]                 if (length(args) > 0) 
[13:34:41.832]                   base::do.call(base::Sys.setenv, args = args)
[13:34:41.832]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:34:41.832]             }
[13:34:41.832]             else {
[13:34:41.832]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:34:41.832]             }
[13:34:41.832]             {
[13:34:41.832]                 if (base::length(...future.futureOptionsAdded) > 
[13:34:41.832]                   0L) {
[13:34:41.832]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:34:41.832]                   base::names(opts) <- ...future.futureOptionsAdded
[13:34:41.832]                   base::options(opts)
[13:34:41.832]                 }
[13:34:41.832]                 {
[13:34:41.832]                   {
[13:34:41.832]                     base::options(mc.cores = ...future.mc.cores.old)
[13:34:41.832]                     NULL
[13:34:41.832]                   }
[13:34:41.832]                   options(future.plan = NULL)
[13:34:41.832]                   if (is.na(NA_character_)) 
[13:34:41.832]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:34:41.832]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:34:41.832]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:34:41.832]                     .init = FALSE)
[13:34:41.832]                 }
[13:34:41.832]             }
[13:34:41.832]         }
[13:34:41.832]     })
[13:34:41.832]     if (TRUE) {
[13:34:41.832]         base::sink(type = "output", split = FALSE)
[13:34:41.832]         if (TRUE) {
[13:34:41.832]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:34:41.832]         }
[13:34:41.832]         else {
[13:34:41.832]             ...future.result["stdout"] <- base::list(NULL)
[13:34:41.832]         }
[13:34:41.832]         base::close(...future.stdout)
[13:34:41.832]         ...future.stdout <- NULL
[13:34:41.832]     }
[13:34:41.832]     ...future.result$conditions <- ...future.conditions
[13:34:41.832]     ...future.result$finished <- base::Sys.time()
[13:34:41.832]     ...future.result
[13:34:41.832] }
[13:34:41.835] assign_globals() ...
[13:34:41.835] List of 5
[13:34:41.835]  $ ...future.FUN            :function (...)  
[13:34:41.835]  $ future.call.arguments    : list()
[13:34:41.835]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:41.835]  $ ...future.elements_ii    :List of 2
[13:34:41.835]   ..$ : int 0
[13:34:41.835]   ..$ : int 0
[13:34:41.835]  $ ...future.seeds_ii       :List of 2
[13:34:41.835]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[13:34:41.835]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[13:34:41.835]  $ ...future.globals.maxSize: NULL
[13:34:41.835]  - attr(*, "where")=List of 5
[13:34:41.835]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:34:41.835]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:34:41.835]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:34:41.835]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:34:41.835]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:34:41.835]  - attr(*, "resolved")= logi FALSE
[13:34:41.835]  - attr(*, "total_size")= num 616
[13:34:41.835]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:41.835]  - attr(*, "already-done")= logi TRUE
[13:34:41.842] - reassign environment for ‘...future.FUN’
[13:34:41.842] - copied ‘...future.FUN’ to environment
[13:34:41.842] - copied ‘future.call.arguments’ to environment
[13:34:41.842] - copied ‘...future.elements_ii’ to environment
[13:34:41.842] - copied ‘...future.seeds_ii’ to environment
[13:34:41.842] - copied ‘...future.globals.maxSize’ to environment
[13:34:41.842] assign_globals() ... done
[13:34:41.843] requestCore(): workers = 2
[13:34:41.844] MulticoreFuture started
[13:34:41.845] - Launch lazy future ... done
[13:34:41.845] run() for ‘MulticoreFuture’ ... done
[13:34:41.845] Created future:
[13:34:41.846] plan(): Setting new future strategy stack:
[13:34:41.846] List of future strategies:
[13:34:41.846] 1. sequential:
[13:34:41.846]    - args: function (..., envir = parent.frame())
[13:34:41.846]    - tweaked: FALSE
[13:34:41.846]    - call: NULL
[13:34:41.847] plan(): nbrOfWorkers() = 1
[13:34:41.849] plan(): Setting new future strategy stack:
[13:34:41.849] List of future strategies:
[13:34:41.849] 1. multicore:
[13:34:41.849]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:34:41.849]    - tweaked: FALSE
[13:34:41.849]    - call: plan(strategy)
[13:34:41.854] plan(): nbrOfWorkers() = 2
[13:34:41.845] MulticoreFuture:
[13:34:41.845] Label: ‘future_replicate-1’
[13:34:41.845] Expression:
[13:34:41.845] {
[13:34:41.845]     do.call(function(...) {
[13:34:41.845]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:41.845]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:41.845]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:41.845]             on.exit(options(oopts), add = TRUE)
[13:34:41.845]         }
[13:34:41.845]         {
[13:34:41.845]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:41.845]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:41.845]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:41.845]                   envir = globalenv(), inherits = FALSE)
[13:34:41.845]                 ...future.FUN(...future.X_jj, ...)
[13:34:41.845]             })
[13:34:41.845]         }
[13:34:41.845]     }, args = future.call.arguments)
[13:34:41.845] }
[13:34:41.845] Lazy evaluation: FALSE
[13:34:41.845] Asynchronous evaluation: TRUE
[13:34:41.845] Local evaluation: TRUE
[13:34:41.845] Environment: R_GlobalEnv
[13:34:41.845] Capture standard output: TRUE
[13:34:41.845] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:34:41.845] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:34:41.845] Packages: <none>
[13:34:41.845] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:34:41.845] Resolved: TRUE
[13:34:41.845] Value: <not collected>
[13:34:41.845] Conditions captured: <none>
[13:34:41.845] Early signaling: FALSE
[13:34:41.845] Owner process: b8cf10c3-b112-c8f9-9398-a44000e21728
[13:34:41.845] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:41.855] Chunk #1 of 2 ... DONE
[13:34:41.855] Chunk #2 of 2 ...
[13:34:41.855]  - Finding globals in 'X' for chunk #2 ...
[13:34:41.855] getGlobalsAndPackages() ...
[13:34:41.856] Searching for globals...
[13:34:41.856] 
[13:34:41.856] Searching for globals ... DONE
[13:34:41.856] - globals: [0] <none>
[13:34:41.856] getGlobalsAndPackages() ... DONE
[13:34:41.857]    + additional globals found: [n=0] 
[13:34:41.857]    + additional namespaces needed: [n=0] 
[13:34:41.857]  - Finding globals in 'X' for chunk #2 ... DONE
[13:34:41.857]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:34:41.857]  - seeds: [3] <seeds>
[13:34:41.857]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:41.857] getGlobalsAndPackages() ...
[13:34:41.858] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:41.858] Resolving globals: FALSE
[13:34:41.858] Tweak future expression to call with '...' arguments ...
[13:34:41.858] {
[13:34:41.858]     do.call(function(...) {
[13:34:41.858]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:41.858]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:41.858]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:41.858]             on.exit(options(oopts), add = TRUE)
[13:34:41.858]         }
[13:34:41.858]         {
[13:34:41.858]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:41.858]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:41.858]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:41.858]                   envir = globalenv(), inherits = FALSE)
[13:34:41.858]                 ...future.FUN(...future.X_jj, ...)
[13:34:41.858]             })
[13:34:41.858]         }
[13:34:41.858]     }, args = future.call.arguments)
[13:34:41.858] }
[13:34:41.859] Tweak future expression to call with '...' arguments ... DONE
[13:34:41.859] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:41.860] 
[13:34:41.860] getGlobalsAndPackages() ... DONE
[13:34:41.860] run() for ‘Future’ ...
[13:34:41.860] - state: ‘created’
[13:34:41.861] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:34:41.865] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:41.865] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:34:41.866]   - Field: ‘label’
[13:34:41.866]   - Field: ‘local’
[13:34:41.866]   - Field: ‘owner’
[13:34:41.866]   - Field: ‘envir’
[13:34:41.866]   - Field: ‘workers’
[13:34:41.866]   - Field: ‘packages’
[13:34:41.866]   - Field: ‘gc’
[13:34:41.867]   - Field: ‘job’
[13:34:41.867]   - Field: ‘conditions’
[13:34:41.867]   - Field: ‘expr’
[13:34:41.867]   - Field: ‘uuid’
[13:34:41.867]   - Field: ‘seed’
[13:34:41.867]   - Field: ‘version’
[13:34:41.867]   - Field: ‘result’
[13:34:41.868]   - Field: ‘asynchronous’
[13:34:41.868]   - Field: ‘calls’
[13:34:41.868]   - Field: ‘globals’
[13:34:41.868]   - Field: ‘stdout’
[13:34:41.868]   - Field: ‘earlySignal’
[13:34:41.868]   - Field: ‘lazy’
[13:34:41.868]   - Field: ‘state’
[13:34:41.869] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:34:41.869] - Launch lazy future ...
[13:34:41.869] Packages needed by the future expression (n = 0): <none>
[13:34:41.869] Packages needed by future strategies (n = 0): <none>
[13:34:41.870] {
[13:34:41.870]     {
[13:34:41.870]         {
[13:34:41.870]             ...future.startTime <- base::Sys.time()
[13:34:41.870]             {
[13:34:41.870]                 {
[13:34:41.870]                   {
[13:34:41.870]                     {
[13:34:41.870]                       base::local({
[13:34:41.870]                         has_future <- base::requireNamespace("future", 
[13:34:41.870]                           quietly = TRUE)
[13:34:41.870]                         if (has_future) {
[13:34:41.870]                           ns <- base::getNamespace("future")
[13:34:41.870]                           version <- ns[[".package"]][["version"]]
[13:34:41.870]                           if (is.null(version)) 
[13:34:41.870]                             version <- utils::packageVersion("future")
[13:34:41.870]                         }
[13:34:41.870]                         else {
[13:34:41.870]                           version <- NULL
[13:34:41.870]                         }
[13:34:41.870]                         if (!has_future || version < "1.8.0") {
[13:34:41.870]                           info <- base::c(r_version = base::gsub("R version ", 
[13:34:41.870]                             "", base::R.version$version.string), 
[13:34:41.870]                             platform = base::sprintf("%s (%s-bit)", 
[13:34:41.870]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:34:41.870]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:34:41.870]                               "release", "version")], collapse = " "), 
[13:34:41.870]                             hostname = base::Sys.info()[["nodename"]])
[13:34:41.870]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:34:41.870]                             info)
[13:34:41.870]                           info <- base::paste(info, collapse = "; ")
[13:34:41.870]                           if (!has_future) {
[13:34:41.870]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:34:41.870]                               info)
[13:34:41.870]                           }
[13:34:41.870]                           else {
[13:34:41.870]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:34:41.870]                               info, version)
[13:34:41.870]                           }
[13:34:41.870]                           base::stop(msg)
[13:34:41.870]                         }
[13:34:41.870]                       })
[13:34:41.870]                     }
[13:34:41.870]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:34:41.870]                     base::options(mc.cores = 1L)
[13:34:41.870]                   }
[13:34:41.870]                   ...future.strategy.old <- future::plan("list")
[13:34:41.870]                   options(future.plan = NULL)
[13:34:41.870]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:34:41.870]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:34:41.870]                 }
[13:34:41.870]                 ...future.workdir <- getwd()
[13:34:41.870]             }
[13:34:41.870]             ...future.oldOptions <- base::as.list(base::.Options)
[13:34:41.870]             ...future.oldEnvVars <- base::Sys.getenv()
[13:34:41.870]         }
[13:34:41.870]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:34:41.870]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:34:41.870]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:34:41.870]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:34:41.870]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:34:41.870]             future.stdout.windows.reencode = NULL, width = 80L)
[13:34:41.870]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:34:41.870]             base::names(...future.oldOptions))
[13:34:41.870]     }
[13:34:41.870]     if (FALSE) {
[13:34:41.870]     }
[13:34:41.870]     else {
[13:34:41.870]         if (TRUE) {
[13:34:41.870]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:34:41.870]                 open = "w")
[13:34:41.870]         }
[13:34:41.870]         else {
[13:34:41.870]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:34:41.870]                 windows = "NUL", "/dev/null"), open = "w")
[13:34:41.870]         }
[13:34:41.870]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:34:41.870]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:34:41.870]             base::sink(type = "output", split = FALSE)
[13:34:41.870]             base::close(...future.stdout)
[13:34:41.870]         }, add = TRUE)
[13:34:41.870]     }
[13:34:41.870]     ...future.frame <- base::sys.nframe()
[13:34:41.870]     ...future.conditions <- base::list()
[13:34:41.870]     ...future.rng <- base::globalenv()$.Random.seed
[13:34:41.870]     if (FALSE) {
[13:34:41.870]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:34:41.870]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:34:41.870]     }
[13:34:41.870]     ...future.result <- base::tryCatch({
[13:34:41.870]         base::withCallingHandlers({
[13:34:41.870]             ...future.value <- base::withVisible(base::local({
[13:34:41.870]                 withCallingHandlers({
[13:34:41.870]                   {
[13:34:41.870]                     do.call(function(...) {
[13:34:41.870]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:41.870]                       if (!identical(...future.globals.maxSize.org, 
[13:34:41.870]                         ...future.globals.maxSize)) {
[13:34:41.870]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:41.870]                         on.exit(options(oopts), add = TRUE)
[13:34:41.870]                       }
[13:34:41.870]                       {
[13:34:41.870]                         lapply(seq_along(...future.elements_ii), 
[13:34:41.870]                           FUN = function(jj) {
[13:34:41.870]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:41.870]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:41.870]                               envir = globalenv(), inherits = FALSE)
[13:34:41.870]                             ...future.FUN(...future.X_jj, ...)
[13:34:41.870]                           })
[13:34:41.870]                       }
[13:34:41.870]                     }, args = future.call.arguments)
[13:34:41.870]                   }
[13:34:41.870]                 }, immediateCondition = function(cond) {
[13:34:41.870]                   save_rds <- function (object, pathname, ...) 
[13:34:41.870]                   {
[13:34:41.870]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:34:41.870]                     if (file_test("-f", pathname_tmp)) {
[13:34:41.870]                       fi_tmp <- file.info(pathname_tmp)
[13:34:41.870]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:34:41.870]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:34:41.870]                         fi_tmp[["mtime"]])
[13:34:41.870]                     }
[13:34:41.870]                     tryCatch({
[13:34:41.870]                       saveRDS(object, file = pathname_tmp, ...)
[13:34:41.870]                     }, error = function(ex) {
[13:34:41.870]                       msg <- conditionMessage(ex)
[13:34:41.870]                       fi_tmp <- file.info(pathname_tmp)
[13:34:41.870]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:34:41.870]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:34:41.870]                         fi_tmp[["mtime"]], msg)
[13:34:41.870]                       ex$message <- msg
[13:34:41.870]                       stop(ex)
[13:34:41.870]                     })
[13:34:41.870]                     stopifnot(file_test("-f", pathname_tmp))
[13:34:41.870]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:34:41.870]                     if (!res || file_test("-f", pathname_tmp)) {
[13:34:41.870]                       fi_tmp <- file.info(pathname_tmp)
[13:34:41.870]                       fi <- file.info(pathname)
[13:34:41.870]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:34:41.870]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:34:41.870]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:34:41.870]                         fi[["size"]], fi[["mtime"]])
[13:34:41.870]                       stop(msg)
[13:34:41.870]                     }
[13:34:41.870]                     invisible(pathname)
[13:34:41.870]                   }
[13:34:41.870]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:34:41.870]                     rootPath = tempdir()) 
[13:34:41.870]                   {
[13:34:41.870]                     obj <- list(time = Sys.time(), condition = cond)
[13:34:41.870]                     file <- tempfile(pattern = class(cond)[1], 
[13:34:41.870]                       tmpdir = path, fileext = ".rds")
[13:34:41.870]                     save_rds(obj, file)
[13:34:41.870]                   }
[13:34:41.870]                   saveImmediateCondition(cond, path = "/tmp/RtmplfSa61/.future/immediateConditions")
[13:34:41.870]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:41.870]                   {
[13:34:41.870]                     inherits <- base::inherits
[13:34:41.870]                     invokeRestart <- base::invokeRestart
[13:34:41.870]                     is.null <- base::is.null
[13:34:41.870]                     muffled <- FALSE
[13:34:41.870]                     if (inherits(cond, "message")) {
[13:34:41.870]                       muffled <- grepl(pattern, "muffleMessage")
[13:34:41.870]                       if (muffled) 
[13:34:41.870]                         invokeRestart("muffleMessage")
[13:34:41.870]                     }
[13:34:41.870]                     else if (inherits(cond, "warning")) {
[13:34:41.870]                       muffled <- grepl(pattern, "muffleWarning")
[13:34:41.870]                       if (muffled) 
[13:34:41.870]                         invokeRestart("muffleWarning")
[13:34:41.870]                     }
[13:34:41.870]                     else if (inherits(cond, "condition")) {
[13:34:41.870]                       if (!is.null(pattern)) {
[13:34:41.870]                         computeRestarts <- base::computeRestarts
[13:34:41.870]                         grepl <- base::grepl
[13:34:41.870]                         restarts <- computeRestarts(cond)
[13:34:41.870]                         for (restart in restarts) {
[13:34:41.870]                           name <- restart$name
[13:34:41.870]                           if (is.null(name)) 
[13:34:41.870]                             next
[13:34:41.870]                           if (!grepl(pattern, name)) 
[13:34:41.870]                             next
[13:34:41.870]                           invokeRestart(restart)
[13:34:41.870]                           muffled <- TRUE
[13:34:41.870]                           break
[13:34:41.870]                         }
[13:34:41.870]                       }
[13:34:41.870]                     }
[13:34:41.870]                     invisible(muffled)
[13:34:41.870]                   }
[13:34:41.870]                   muffleCondition(cond)
[13:34:41.870]                 })
[13:34:41.870]             }))
[13:34:41.870]             future::FutureResult(value = ...future.value$value, 
[13:34:41.870]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:41.870]                   ...future.rng), globalenv = if (FALSE) 
[13:34:41.870]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:34:41.870]                     ...future.globalenv.names))
[13:34:41.870]                 else NULL, started = ...future.startTime, version = "1.8")
[13:34:41.870]         }, condition = base::local({
[13:34:41.870]             c <- base::c
[13:34:41.870]             inherits <- base::inherits
[13:34:41.870]             invokeRestart <- base::invokeRestart
[13:34:41.870]             length <- base::length
[13:34:41.870]             list <- base::list
[13:34:41.870]             seq.int <- base::seq.int
[13:34:41.870]             signalCondition <- base::signalCondition
[13:34:41.870]             sys.calls <- base::sys.calls
[13:34:41.870]             `[[` <- base::`[[`
[13:34:41.870]             `+` <- base::`+`
[13:34:41.870]             `<<-` <- base::`<<-`
[13:34:41.870]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:34:41.870]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:34:41.870]                   3L)]
[13:34:41.870]             }
[13:34:41.870]             function(cond) {
[13:34:41.870]                 is_error <- inherits(cond, "error")
[13:34:41.870]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:34:41.870]                   NULL)
[13:34:41.870]                 if (is_error) {
[13:34:41.870]                   sessionInformation <- function() {
[13:34:41.870]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:34:41.870]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:34:41.870]                       search = base::search(), system = base::Sys.info())
[13:34:41.870]                   }
[13:34:41.870]                   ...future.conditions[[length(...future.conditions) + 
[13:34:41.870]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:34:41.870]                     cond$call), session = sessionInformation(), 
[13:34:41.870]                     timestamp = base::Sys.time(), signaled = 0L)
[13:34:41.870]                   signalCondition(cond)
[13:34:41.870]                 }
[13:34:41.870]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:34:41.870]                 "immediateCondition"))) {
[13:34:41.870]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:34:41.870]                   ...future.conditions[[length(...future.conditions) + 
[13:34:41.870]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:34:41.870]                   if (TRUE && !signal) {
[13:34:41.870]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:41.870]                     {
[13:34:41.870]                       inherits <- base::inherits
[13:34:41.870]                       invokeRestart <- base::invokeRestart
[13:34:41.870]                       is.null <- base::is.null
[13:34:41.870]                       muffled <- FALSE
[13:34:41.870]                       if (inherits(cond, "message")) {
[13:34:41.870]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:41.870]                         if (muffled) 
[13:34:41.870]                           invokeRestart("muffleMessage")
[13:34:41.870]                       }
[13:34:41.870]                       else if (inherits(cond, "warning")) {
[13:34:41.870]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:41.870]                         if (muffled) 
[13:34:41.870]                           invokeRestart("muffleWarning")
[13:34:41.870]                       }
[13:34:41.870]                       else if (inherits(cond, "condition")) {
[13:34:41.870]                         if (!is.null(pattern)) {
[13:34:41.870]                           computeRestarts <- base::computeRestarts
[13:34:41.870]                           grepl <- base::grepl
[13:34:41.870]                           restarts <- computeRestarts(cond)
[13:34:41.870]                           for (restart in restarts) {
[13:34:41.870]                             name <- restart$name
[13:34:41.870]                             if (is.null(name)) 
[13:34:41.870]                               next
[13:34:41.870]                             if (!grepl(pattern, name)) 
[13:34:41.870]                               next
[13:34:41.870]                             invokeRestart(restart)
[13:34:41.870]                             muffled <- TRUE
[13:34:41.870]                             break
[13:34:41.870]                           }
[13:34:41.870]                         }
[13:34:41.870]                       }
[13:34:41.870]                       invisible(muffled)
[13:34:41.870]                     }
[13:34:41.870]                     muffleCondition(cond, pattern = "^muffle")
[13:34:41.870]                   }
[13:34:41.870]                 }
[13:34:41.870]                 else {
[13:34:41.870]                   if (TRUE) {
[13:34:41.870]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:41.870]                     {
[13:34:41.870]                       inherits <- base::inherits
[13:34:41.870]                       invokeRestart <- base::invokeRestart
[13:34:41.870]                       is.null <- base::is.null
[13:34:41.870]                       muffled <- FALSE
[13:34:41.870]                       if (inherits(cond, "message")) {
[13:34:41.870]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:41.870]                         if (muffled) 
[13:34:41.870]                           invokeRestart("muffleMessage")
[13:34:41.870]                       }
[13:34:41.870]                       else if (inherits(cond, "warning")) {
[13:34:41.870]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:41.870]                         if (muffled) 
[13:34:41.870]                           invokeRestart("muffleWarning")
[13:34:41.870]                       }
[13:34:41.870]                       else if (inherits(cond, "condition")) {
[13:34:41.870]                         if (!is.null(pattern)) {
[13:34:41.870]                           computeRestarts <- base::computeRestarts
[13:34:41.870]                           grepl <- base::grepl
[13:34:41.870]                           restarts <- computeRestarts(cond)
[13:34:41.870]                           for (restart in restarts) {
[13:34:41.870]                             name <- restart$name
[13:34:41.870]                             if (is.null(name)) 
[13:34:41.870]                               next
[13:34:41.870]                             if (!grepl(pattern, name)) 
[13:34:41.870]                               next
[13:34:41.870]                             invokeRestart(restart)
[13:34:41.870]                             muffled <- TRUE
[13:34:41.870]                             break
[13:34:41.870]                           }
[13:34:41.870]                         }
[13:34:41.870]                       }
[13:34:41.870]                       invisible(muffled)
[13:34:41.870]                     }
[13:34:41.870]                     muffleCondition(cond, pattern = "^muffle")
[13:34:41.870]                   }
[13:34:41.870]                 }
[13:34:41.870]             }
[13:34:41.870]         }))
[13:34:41.870]     }, error = function(ex) {
[13:34:41.870]         base::structure(base::list(value = NULL, visible = NULL, 
[13:34:41.870]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:41.870]                 ...future.rng), started = ...future.startTime, 
[13:34:41.870]             finished = Sys.time(), session_uuid = NA_character_, 
[13:34:41.870]             version = "1.8"), class = "FutureResult")
[13:34:41.870]     }, finally = {
[13:34:41.870]         if (!identical(...future.workdir, getwd())) 
[13:34:41.870]             setwd(...future.workdir)
[13:34:41.870]         {
[13:34:41.870]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:34:41.870]                 ...future.oldOptions$nwarnings <- NULL
[13:34:41.870]             }
[13:34:41.870]             base::options(...future.oldOptions)
[13:34:41.870]             if (.Platform$OS.type == "windows") {
[13:34:41.870]                 old_names <- names(...future.oldEnvVars)
[13:34:41.870]                 envs <- base::Sys.getenv()
[13:34:41.870]                 names <- names(envs)
[13:34:41.870]                 common <- intersect(names, old_names)
[13:34:41.870]                 added <- setdiff(names, old_names)
[13:34:41.870]                 removed <- setdiff(old_names, names)
[13:34:41.870]                 changed <- common[...future.oldEnvVars[common] != 
[13:34:41.870]                   envs[common]]
[13:34:41.870]                 NAMES <- toupper(changed)
[13:34:41.870]                 args <- list()
[13:34:41.870]                 for (kk in seq_along(NAMES)) {
[13:34:41.870]                   name <- changed[[kk]]
[13:34:41.870]                   NAME <- NAMES[[kk]]
[13:34:41.870]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:41.870]                     next
[13:34:41.870]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:41.870]                 }
[13:34:41.870]                 NAMES <- toupper(added)
[13:34:41.870]                 for (kk in seq_along(NAMES)) {
[13:34:41.870]                   name <- added[[kk]]
[13:34:41.870]                   NAME <- NAMES[[kk]]
[13:34:41.870]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:41.870]                     next
[13:34:41.870]                   args[[name]] <- ""
[13:34:41.870]                 }
[13:34:41.870]                 NAMES <- toupper(removed)
[13:34:41.870]                 for (kk in seq_along(NAMES)) {
[13:34:41.870]                   name <- removed[[kk]]
[13:34:41.870]                   NAME <- NAMES[[kk]]
[13:34:41.870]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:41.870]                     next
[13:34:41.870]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:41.870]                 }
[13:34:41.870]                 if (length(args) > 0) 
[13:34:41.870]                   base::do.call(base::Sys.setenv, args = args)
[13:34:41.870]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:34:41.870]             }
[13:34:41.870]             else {
[13:34:41.870]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:34:41.870]             }
[13:34:41.870]             {
[13:34:41.870]                 if (base::length(...future.futureOptionsAdded) > 
[13:34:41.870]                   0L) {
[13:34:41.870]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:34:41.870]                   base::names(opts) <- ...future.futureOptionsAdded
[13:34:41.870]                   base::options(opts)
[13:34:41.870]                 }
[13:34:41.870]                 {
[13:34:41.870]                   {
[13:34:41.870]                     base::options(mc.cores = ...future.mc.cores.old)
[13:34:41.870]                     NULL
[13:34:41.870]                   }
[13:34:41.870]                   options(future.plan = NULL)
[13:34:41.870]                   if (is.na(NA_character_)) 
[13:34:41.870]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:34:41.870]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:34:41.870]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:34:41.870]                     .init = FALSE)
[13:34:41.870]                 }
[13:34:41.870]             }
[13:34:41.870]         }
[13:34:41.870]     })
[13:34:41.870]     if (TRUE) {
[13:34:41.870]         base::sink(type = "output", split = FALSE)
[13:34:41.870]         if (TRUE) {
[13:34:41.870]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:34:41.870]         }
[13:34:41.870]         else {
[13:34:41.870]             ...future.result["stdout"] <- base::list(NULL)
[13:34:41.870]         }
[13:34:41.870]         base::close(...future.stdout)
[13:34:41.870]         ...future.stdout <- NULL
[13:34:41.870]     }
[13:34:41.870]     ...future.result$conditions <- ...future.conditions
[13:34:41.870]     ...future.result$finished <- base::Sys.time()
[13:34:41.870]     ...future.result
[13:34:41.870] }
[13:34:41.873] assign_globals() ...
[13:34:41.873] List of 5
[13:34:41.873]  $ ...future.FUN            :function (...)  
[13:34:41.873]  $ future.call.arguments    : list()
[13:34:41.873]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:41.873]  $ ...future.elements_ii    :List of 3
[13:34:41.873]   ..$ : int 0
[13:34:41.873]   ..$ : int 0
[13:34:41.873]   ..$ : int 0
[13:34:41.873]  $ ...future.seeds_ii       :List of 3
[13:34:41.873]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[13:34:41.873]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[13:34:41.873]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[13:34:41.873]  $ ...future.globals.maxSize: NULL
[13:34:41.873]  - attr(*, "where")=List of 5
[13:34:41.873]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:34:41.873]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:34:41.873]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:34:41.873]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:34:41.873]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:34:41.873]  - attr(*, "resolved")= logi FALSE
[13:34:41.873]  - attr(*, "total_size")= num 616
[13:34:41.873]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:41.873]  - attr(*, "already-done")= logi TRUE
[13:34:41.886] - reassign environment for ‘...future.FUN’
[13:34:41.886] - copied ‘...future.FUN’ to environment
[13:34:41.886] - copied ‘future.call.arguments’ to environment
[13:34:41.886] - copied ‘...future.elements_ii’ to environment
[13:34:41.886] - copied ‘...future.seeds_ii’ to environment
[13:34:41.887] - copied ‘...future.globals.maxSize’ to environment
[13:34:41.887] assign_globals() ... done
[13:34:41.887] requestCore(): workers = 2
[13:34:41.889] MulticoreFuture started
[13:34:41.889] - Launch lazy future ... done
[13:34:41.890] run() for ‘MulticoreFuture’ ... done
[13:34:41.890] Created future:
[13:34:41.890] plan(): Setting new future strategy stack:
[13:34:41.891] List of future strategies:
[13:34:41.891] 1. sequential:
[13:34:41.891]    - args: function (..., envir = parent.frame())
[13:34:41.891]    - tweaked: FALSE
[13:34:41.891]    - call: NULL
[13:34:41.891] plan(): nbrOfWorkers() = 1
[13:34:41.894] plan(): Setting new future strategy stack:
[13:34:41.894] List of future strategies:
[13:34:41.894] 1. multicore:
[13:34:41.894]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:34:41.894]    - tweaked: FALSE
[13:34:41.894]    - call: plan(strategy)
[13:34:41.899] plan(): nbrOfWorkers() = 2
[13:34:41.890] MulticoreFuture:
[13:34:41.890] Label: ‘future_replicate-2’
[13:34:41.890] Expression:
[13:34:41.890] {
[13:34:41.890]     do.call(function(...) {
[13:34:41.890]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:41.890]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:41.890]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:41.890]             on.exit(options(oopts), add = TRUE)
[13:34:41.890]         }
[13:34:41.890]         {
[13:34:41.890]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:41.890]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:41.890]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:41.890]                   envir = globalenv(), inherits = FALSE)
[13:34:41.890]                 ...future.FUN(...future.X_jj, ...)
[13:34:41.890]             })
[13:34:41.890]         }
[13:34:41.890]     }, args = future.call.arguments)
[13:34:41.890] }
[13:34:41.890] Lazy evaluation: FALSE
[13:34:41.890] Asynchronous evaluation: TRUE
[13:34:41.890] Local evaluation: TRUE
[13:34:41.890] Environment: R_GlobalEnv
[13:34:41.890] Capture standard output: TRUE
[13:34:41.890] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:34:41.890] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:34:41.890] Packages: <none>
[13:34:41.890] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:34:41.890] Resolved: TRUE
[13:34:41.890] Value: <not collected>
[13:34:41.890] Conditions captured: <none>
[13:34:41.890] Early signaling: FALSE
[13:34:41.890] Owner process: b8cf10c3-b112-c8f9-9398-a44000e21728
[13:34:41.890] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:41.900] Chunk #2 of 2 ... DONE
[13:34:41.900] Launching 2 futures (chunks) ... DONE
[13:34:41.900] Resolving 2 futures (chunks) ...
[13:34:41.901] resolve() on list ...
[13:34:41.901]  recursive: 0
[13:34:41.901]  length: 2
[13:34:41.901] 
[13:34:41.901] Future #1
[13:34:41.902] result() for MulticoreFuture ...
[13:34:41.902] result() for MulticoreFuture ...
[13:34:41.903] result() for MulticoreFuture ... done
[13:34:41.903] result() for MulticoreFuture ... done
[13:34:41.903] result() for MulticoreFuture ...
[13:34:41.903] result() for MulticoreFuture ... done
[13:34:41.903] signalConditionsASAP(MulticoreFuture, pos=1) ...
[13:34:41.903] - nx: 2
[13:34:41.903] - relay: TRUE
[13:34:41.904] - stdout: TRUE
[13:34:41.904] - signal: TRUE
[13:34:41.904] - resignal: FALSE
[13:34:41.904] - force: TRUE
[13:34:41.904] - relayed: [n=2] FALSE, FALSE
[13:34:41.904] - queued futures: [n=2] FALSE, FALSE
[13:34:41.904]  - until=1
[13:34:41.905]  - relaying element #1
[13:34:41.905] result() for MulticoreFuture ...
[13:34:41.905] result() for MulticoreFuture ... done
[13:34:41.905] result() for MulticoreFuture ...
[13:34:41.905] result() for MulticoreFuture ... done
[13:34:41.905] result() for MulticoreFuture ...
[13:34:41.905] result() for MulticoreFuture ... done
[13:34:41.906] result() for MulticoreFuture ...
[13:34:41.906] result() for MulticoreFuture ... done
[13:34:41.906] - relayed: [n=2] TRUE, FALSE
[13:34:41.906] - queued futures: [n=2] TRUE, FALSE
[13:34:41.906] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[13:34:41.906]  length: 1 (resolved future 1)
[13:34:41.907] Future #2
[13:34:41.907] result() for MulticoreFuture ...
[13:34:41.908] result() for MulticoreFuture ...
[13:34:41.908] result() for MulticoreFuture ... done
[13:34:41.908] result() for MulticoreFuture ... done
[13:34:41.908] result() for MulticoreFuture ...
[13:34:41.908] result() for MulticoreFuture ... done
[13:34:41.908] signalConditionsASAP(MulticoreFuture, pos=2) ...
[13:34:41.909] - nx: 2
[13:34:41.909] - relay: TRUE
[13:34:41.909] - stdout: TRUE
[13:34:41.909] - signal: TRUE
[13:34:41.909] - resignal: FALSE
[13:34:41.909] - force: TRUE
[13:34:41.909] - relayed: [n=2] TRUE, FALSE
[13:34:41.909] - queued futures: [n=2] TRUE, FALSE
[13:34:41.909]  - until=2
[13:34:41.910]  - relaying element #2
[13:34:41.910] result() for MulticoreFuture ...
[13:34:41.910] result() for MulticoreFuture ... done
[13:34:41.910] result() for MulticoreFuture ...
[13:34:41.910] result() for MulticoreFuture ... done
[13:34:41.910] result() for MulticoreFuture ...
[13:34:41.910] result() for MulticoreFuture ... done
[13:34:41.910] result() for MulticoreFuture ...
[13:34:41.911] result() for MulticoreFuture ... done
[13:34:41.911] - relayed: [n=2] TRUE, TRUE
[13:34:41.911] - queued futures: [n=2] TRUE, TRUE
[13:34:41.911] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[13:34:41.911]  length: 0 (resolved future 2)
[13:34:41.911] Relaying remaining futures
[13:34:41.911] signalConditionsASAP(NULL, pos=0) ...
[13:34:41.911] - nx: 2
[13:34:41.911] - relay: TRUE
[13:34:41.912] - stdout: TRUE
[13:34:41.912] - signal: TRUE
[13:34:41.912] - resignal: FALSE
[13:34:41.912] - force: TRUE
[13:34:41.912] - relayed: [n=2] TRUE, TRUE
[13:34:41.912] - queued futures: [n=2] TRUE, TRUE
 - flush all
[13:34:41.912] - relayed: [n=2] TRUE, TRUE
[13:34:41.912] - queued futures: [n=2] TRUE, TRUE
[13:34:41.912] signalConditionsASAP(NULL, pos=0) ... done
[13:34:41.913] resolve() on list ... DONE
[13:34:41.913] result() for MulticoreFuture ...
[13:34:41.913] result() for MulticoreFuture ... done
[13:34:41.913] result() for MulticoreFuture ...
[13:34:41.913] result() for MulticoreFuture ... done
[13:34:41.913] result() for MulticoreFuture ...
[13:34:41.913] result() for MulticoreFuture ... done
[13:34:41.913] result() for MulticoreFuture ...
[13:34:41.913] result() for MulticoreFuture ... done
[13:34:41.914]  - Number of value chunks collected: 2
[13:34:41.914] Resolving 2 futures (chunks) ... DONE
[13:34:41.914] Reducing values from 2 chunks ...
[13:34:41.914]  - Number of values collected after concatenation: 5
[13:34:41.914]  - Number of values expected: 5
[13:34:41.914] Reducing values from 2 chunks ... DONE
[13:34:41.914] future_lapply() ... DONE
[13:34:41.914] future_lapply() ...
[13:34:41.915] Generating random seeds ...
[13:34:41.915] Generating random seed streams for 5 elements ...
[13:34:41.915] Generating random seed streams for 5 elements ... DONE
[13:34:41.915] Generating random seeds ... DONE
[13:34:41.915] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:34:41.920] Number of chunks: 2
[13:34:41.920] getGlobalsAndPackagesXApply() ...
[13:34:41.920]  - future.globals: TRUE
[13:34:41.920] getGlobalsAndPackages() ...
[13:34:41.921] Searching for globals...
[13:34:41.922] - globals found: [2] ‘FUN’, ‘sample’
[13:34:41.922] Searching for globals ... DONE
[13:34:41.924] Resolving globals: FALSE
[13:34:41.925] The total size of the 1 globals is 616 bytes (616 bytes)
[13:34:41.925] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:34:41.925] - globals: [1] ‘FUN’
[13:34:41.925] 
[13:34:41.926] getGlobalsAndPackages() ... DONE
[13:34:41.926]  - globals found/used: [n=1] ‘FUN’
[13:34:41.926]  - needed namespaces: [n=0] 
[13:34:41.926] Finding globals ... DONE
[13:34:41.926]  - use_args: TRUE
[13:34:41.926]  - Getting '...' globals ...
[13:34:41.927] resolve() on list ...
[13:34:41.927]  recursive: 0
[13:34:41.927]  length: 1
[13:34:41.927]  elements: ‘...’
[13:34:41.927]  length: 0 (resolved future 1)
[13:34:41.927] resolve() on list ... DONE
[13:34:41.927]    - '...' content: [n=0] 
[13:34:41.927] List of 1
[13:34:41.927]  $ ...: list()
[13:34:41.927]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:41.927]  - attr(*, "where")=List of 1
[13:34:41.927]   ..$ ...:<environment: 0x5627bf5219c0> 
[13:34:41.927]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:41.927]  - attr(*, "resolved")= logi TRUE
[13:34:41.927]  - attr(*, "total_size")= num NA
[13:34:41.930]  - Getting '...' globals ... DONE
[13:34:41.931] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:34:41.931] List of 2
[13:34:41.931]  $ ...future.FUN:function (...)  
[13:34:41.931]  $ ...          : list()
[13:34:41.931]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:41.931]  - attr(*, "where")=List of 2
[13:34:41.931]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:34:41.931]   ..$ ...          :<environment: 0x5627bf5219c0> 
[13:34:41.931]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:41.931]  - attr(*, "resolved")= logi FALSE
[13:34:41.931]  - attr(*, "total_size")= num 616
[13:34:41.933] Packages to be attached in all futures: [n=0] 
[13:34:41.933] getGlobalsAndPackagesXApply() ... DONE
[13:34:41.933] Number of futures (= number of chunks): 2
[13:34:41.934] Launching 2 futures (chunks) ...
[13:34:41.934] Chunk #1 of 2 ...
[13:34:41.934]  - Finding globals in 'X' for chunk #1 ...
[13:34:41.934] getGlobalsAndPackages() ...
[13:34:41.934] Searching for globals...
[13:34:41.934] 
[13:34:41.934] Searching for globals ... DONE
[13:34:41.934] - globals: [0] <none>
[13:34:41.935] getGlobalsAndPackages() ... DONE
[13:34:41.935]    + additional globals found: [n=0] 
[13:34:41.935]    + additional namespaces needed: [n=0] 
[13:34:41.935]  - Finding globals in 'X' for chunk #1 ... DONE
[13:34:41.935]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:34:41.935]  - seeds: [2] <seeds>
[13:34:41.935]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:41.935] getGlobalsAndPackages() ...
[13:34:41.935] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:41.935] Resolving globals: FALSE
[13:34:41.936] Tweak future expression to call with '...' arguments ...
[13:34:41.936] {
[13:34:41.936]     do.call(function(...) {
[13:34:41.936]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:41.936]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:41.936]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:41.936]             on.exit(options(oopts), add = TRUE)
[13:34:41.936]         }
[13:34:41.936]         {
[13:34:41.936]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:41.936]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:41.936]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:41.936]                   envir = globalenv(), inherits = FALSE)
[13:34:41.936]                 ...future.FUN(...future.X_jj, ...)
[13:34:41.936]             })
[13:34:41.936]         }
[13:34:41.936]     }, args = future.call.arguments)
[13:34:41.936] }
[13:34:41.936] Tweak future expression to call with '...' arguments ... DONE
[13:34:41.936] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:41.936] 
[13:34:41.936] getGlobalsAndPackages() ... DONE
[13:34:41.937] run() for ‘Future’ ...
[13:34:41.937] - state: ‘created’
[13:34:41.937] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:34:41.940] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:41.941] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:34:41.941]   - Field: ‘label’
[13:34:41.941]   - Field: ‘local’
[13:34:41.941]   - Field: ‘owner’
[13:34:41.941]   - Field: ‘envir’
[13:34:41.941]   - Field: ‘workers’
[13:34:41.941]   - Field: ‘packages’
[13:34:41.941]   - Field: ‘gc’
[13:34:41.941]   - Field: ‘job’
[13:34:41.941]   - Field: ‘conditions’
[13:34:41.942]   - Field: ‘expr’
[13:34:41.942]   - Field: ‘uuid’
[13:34:41.942]   - Field: ‘seed’
[13:34:41.942]   - Field: ‘version’
[13:34:41.942]   - Field: ‘result’
[13:34:41.942]   - Field: ‘asynchronous’
[13:34:41.942]   - Field: ‘calls’
[13:34:41.942]   - Field: ‘globals’
[13:34:41.942]   - Field: ‘stdout’
[13:34:41.942]   - Field: ‘earlySignal’
[13:34:41.943]   - Field: ‘lazy’
[13:34:41.943]   - Field: ‘state’
[13:34:41.943] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:34:41.943] - Launch lazy future ...
[13:34:41.943] Packages needed by the future expression (n = 0): <none>
[13:34:41.943] Packages needed by future strategies (n = 0): <none>
[13:34:41.944] {
[13:34:41.944]     {
[13:34:41.944]         {
[13:34:41.944]             ...future.startTime <- base::Sys.time()
[13:34:41.944]             {
[13:34:41.944]                 {
[13:34:41.944]                   {
[13:34:41.944]                     {
[13:34:41.944]                       base::local({
[13:34:41.944]                         has_future <- base::requireNamespace("future", 
[13:34:41.944]                           quietly = TRUE)
[13:34:41.944]                         if (has_future) {
[13:34:41.944]                           ns <- base::getNamespace("future")
[13:34:41.944]                           version <- ns[[".package"]][["version"]]
[13:34:41.944]                           if (is.null(version)) 
[13:34:41.944]                             version <- utils::packageVersion("future")
[13:34:41.944]                         }
[13:34:41.944]                         else {
[13:34:41.944]                           version <- NULL
[13:34:41.944]                         }
[13:34:41.944]                         if (!has_future || version < "1.8.0") {
[13:34:41.944]                           info <- base::c(r_version = base::gsub("R version ", 
[13:34:41.944]                             "", base::R.version$version.string), 
[13:34:41.944]                             platform = base::sprintf("%s (%s-bit)", 
[13:34:41.944]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:34:41.944]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:34:41.944]                               "release", "version")], collapse = " "), 
[13:34:41.944]                             hostname = base::Sys.info()[["nodename"]])
[13:34:41.944]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:34:41.944]                             info)
[13:34:41.944]                           info <- base::paste(info, collapse = "; ")
[13:34:41.944]                           if (!has_future) {
[13:34:41.944]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:34:41.944]                               info)
[13:34:41.944]                           }
[13:34:41.944]                           else {
[13:34:41.944]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:34:41.944]                               info, version)
[13:34:41.944]                           }
[13:34:41.944]                           base::stop(msg)
[13:34:41.944]                         }
[13:34:41.944]                       })
[13:34:41.944]                     }
[13:34:41.944]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:34:41.944]                     base::options(mc.cores = 1L)
[13:34:41.944]                   }
[13:34:41.944]                   ...future.strategy.old <- future::plan("list")
[13:34:41.944]                   options(future.plan = NULL)
[13:34:41.944]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:34:41.944]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:34:41.944]                 }
[13:34:41.944]                 ...future.workdir <- getwd()
[13:34:41.944]             }
[13:34:41.944]             ...future.oldOptions <- base::as.list(base::.Options)
[13:34:41.944]             ...future.oldEnvVars <- base::Sys.getenv()
[13:34:41.944]         }
[13:34:41.944]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:34:41.944]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:34:41.944]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:34:41.944]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:34:41.944]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:34:41.944]             future.stdout.windows.reencode = NULL, width = 80L)
[13:34:41.944]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:34:41.944]             base::names(...future.oldOptions))
[13:34:41.944]     }
[13:34:41.944]     if (FALSE) {
[13:34:41.944]     }
[13:34:41.944]     else {
[13:34:41.944]         if (TRUE) {
[13:34:41.944]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:34:41.944]                 open = "w")
[13:34:41.944]         }
[13:34:41.944]         else {
[13:34:41.944]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:34:41.944]                 windows = "NUL", "/dev/null"), open = "w")
[13:34:41.944]         }
[13:34:41.944]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:34:41.944]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:34:41.944]             base::sink(type = "output", split = FALSE)
[13:34:41.944]             base::close(...future.stdout)
[13:34:41.944]         }, add = TRUE)
[13:34:41.944]     }
[13:34:41.944]     ...future.frame <- base::sys.nframe()
[13:34:41.944]     ...future.conditions <- base::list()
[13:34:41.944]     ...future.rng <- base::globalenv()$.Random.seed
[13:34:41.944]     if (FALSE) {
[13:34:41.944]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:34:41.944]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:34:41.944]     }
[13:34:41.944]     ...future.result <- base::tryCatch({
[13:34:41.944]         base::withCallingHandlers({
[13:34:41.944]             ...future.value <- base::withVisible(base::local({
[13:34:41.944]                 withCallingHandlers({
[13:34:41.944]                   {
[13:34:41.944]                     do.call(function(...) {
[13:34:41.944]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:41.944]                       if (!identical(...future.globals.maxSize.org, 
[13:34:41.944]                         ...future.globals.maxSize)) {
[13:34:41.944]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:41.944]                         on.exit(options(oopts), add = TRUE)
[13:34:41.944]                       }
[13:34:41.944]                       {
[13:34:41.944]                         lapply(seq_along(...future.elements_ii), 
[13:34:41.944]                           FUN = function(jj) {
[13:34:41.944]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:41.944]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:41.944]                               envir = globalenv(), inherits = FALSE)
[13:34:41.944]                             ...future.FUN(...future.X_jj, ...)
[13:34:41.944]                           })
[13:34:41.944]                       }
[13:34:41.944]                     }, args = future.call.arguments)
[13:34:41.944]                   }
[13:34:41.944]                 }, immediateCondition = function(cond) {
[13:34:41.944]                   save_rds <- function (object, pathname, ...) 
[13:34:41.944]                   {
[13:34:41.944]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:34:41.944]                     if (file_test("-f", pathname_tmp)) {
[13:34:41.944]                       fi_tmp <- file.info(pathname_tmp)
[13:34:41.944]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:34:41.944]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:34:41.944]                         fi_tmp[["mtime"]])
[13:34:41.944]                     }
[13:34:41.944]                     tryCatch({
[13:34:41.944]                       saveRDS(object, file = pathname_tmp, ...)
[13:34:41.944]                     }, error = function(ex) {
[13:34:41.944]                       msg <- conditionMessage(ex)
[13:34:41.944]                       fi_tmp <- file.info(pathname_tmp)
[13:34:41.944]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:34:41.944]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:34:41.944]                         fi_tmp[["mtime"]], msg)
[13:34:41.944]                       ex$message <- msg
[13:34:41.944]                       stop(ex)
[13:34:41.944]                     })
[13:34:41.944]                     stopifnot(file_test("-f", pathname_tmp))
[13:34:41.944]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:34:41.944]                     if (!res || file_test("-f", pathname_tmp)) {
[13:34:41.944]                       fi_tmp <- file.info(pathname_tmp)
[13:34:41.944]                       fi <- file.info(pathname)
[13:34:41.944]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:34:41.944]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:34:41.944]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:34:41.944]                         fi[["size"]], fi[["mtime"]])
[13:34:41.944]                       stop(msg)
[13:34:41.944]                     }
[13:34:41.944]                     invisible(pathname)
[13:34:41.944]                   }
[13:34:41.944]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:34:41.944]                     rootPath = tempdir()) 
[13:34:41.944]                   {
[13:34:41.944]                     obj <- list(time = Sys.time(), condition = cond)
[13:34:41.944]                     file <- tempfile(pattern = class(cond)[1], 
[13:34:41.944]                       tmpdir = path, fileext = ".rds")
[13:34:41.944]                     save_rds(obj, file)
[13:34:41.944]                   }
[13:34:41.944]                   saveImmediateCondition(cond, path = "/tmp/RtmplfSa61/.future/immediateConditions")
[13:34:41.944]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:41.944]                   {
[13:34:41.944]                     inherits <- base::inherits
[13:34:41.944]                     invokeRestart <- base::invokeRestart
[13:34:41.944]                     is.null <- base::is.null
[13:34:41.944]                     muffled <- FALSE
[13:34:41.944]                     if (inherits(cond, "message")) {
[13:34:41.944]                       muffled <- grepl(pattern, "muffleMessage")
[13:34:41.944]                       if (muffled) 
[13:34:41.944]                         invokeRestart("muffleMessage")
[13:34:41.944]                     }
[13:34:41.944]                     else if (inherits(cond, "warning")) {
[13:34:41.944]                       muffled <- grepl(pattern, "muffleWarning")
[13:34:41.944]                       if (muffled) 
[13:34:41.944]                         invokeRestart("muffleWarning")
[13:34:41.944]                     }
[13:34:41.944]                     else if (inherits(cond, "condition")) {
[13:34:41.944]                       if (!is.null(pattern)) {
[13:34:41.944]                         computeRestarts <- base::computeRestarts
[13:34:41.944]                         grepl <- base::grepl
[13:34:41.944]                         restarts <- computeRestarts(cond)
[13:34:41.944]                         for (restart in restarts) {
[13:34:41.944]                           name <- restart$name
[13:34:41.944]                           if (is.null(name)) 
[13:34:41.944]                             next
[13:34:41.944]                           if (!grepl(pattern, name)) 
[13:34:41.944]                             next
[13:34:41.944]                           invokeRestart(restart)
[13:34:41.944]                           muffled <- TRUE
[13:34:41.944]                           break
[13:34:41.944]                         }
[13:34:41.944]                       }
[13:34:41.944]                     }
[13:34:41.944]                     invisible(muffled)
[13:34:41.944]                   }
[13:34:41.944]                   muffleCondition(cond)
[13:34:41.944]                 })
[13:34:41.944]             }))
[13:34:41.944]             future::FutureResult(value = ...future.value$value, 
[13:34:41.944]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:41.944]                   ...future.rng), globalenv = if (FALSE) 
[13:34:41.944]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:34:41.944]                     ...future.globalenv.names))
[13:34:41.944]                 else NULL, started = ...future.startTime, version = "1.8")
[13:34:41.944]         }, condition = base::local({
[13:34:41.944]             c <- base::c
[13:34:41.944]             inherits <- base::inherits
[13:34:41.944]             invokeRestart <- base::invokeRestart
[13:34:41.944]             length <- base::length
[13:34:41.944]             list <- base::list
[13:34:41.944]             seq.int <- base::seq.int
[13:34:41.944]             signalCondition <- base::signalCondition
[13:34:41.944]             sys.calls <- base::sys.calls
[13:34:41.944]             `[[` <- base::`[[`
[13:34:41.944]             `+` <- base::`+`
[13:34:41.944]             `<<-` <- base::`<<-`
[13:34:41.944]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:34:41.944]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:34:41.944]                   3L)]
[13:34:41.944]             }
[13:34:41.944]             function(cond) {
[13:34:41.944]                 is_error <- inherits(cond, "error")
[13:34:41.944]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:34:41.944]                   NULL)
[13:34:41.944]                 if (is_error) {
[13:34:41.944]                   sessionInformation <- function() {
[13:34:41.944]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:34:41.944]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:34:41.944]                       search = base::search(), system = base::Sys.info())
[13:34:41.944]                   }
[13:34:41.944]                   ...future.conditions[[length(...future.conditions) + 
[13:34:41.944]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:34:41.944]                     cond$call), session = sessionInformation(), 
[13:34:41.944]                     timestamp = base::Sys.time(), signaled = 0L)
[13:34:41.944]                   signalCondition(cond)
[13:34:41.944]                 }
[13:34:41.944]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:34:41.944]                 "immediateCondition"))) {
[13:34:41.944]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:34:41.944]                   ...future.conditions[[length(...future.conditions) + 
[13:34:41.944]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:34:41.944]                   if (TRUE && !signal) {
[13:34:41.944]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:41.944]                     {
[13:34:41.944]                       inherits <- base::inherits
[13:34:41.944]                       invokeRestart <- base::invokeRestart
[13:34:41.944]                       is.null <- base::is.null
[13:34:41.944]                       muffled <- FALSE
[13:34:41.944]                       if (inherits(cond, "message")) {
[13:34:41.944]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:41.944]                         if (muffled) 
[13:34:41.944]                           invokeRestart("muffleMessage")
[13:34:41.944]                       }
[13:34:41.944]                       else if (inherits(cond, "warning")) {
[13:34:41.944]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:41.944]                         if (muffled) 
[13:34:41.944]                           invokeRestart("muffleWarning")
[13:34:41.944]                       }
[13:34:41.944]                       else if (inherits(cond, "condition")) {
[13:34:41.944]                         if (!is.null(pattern)) {
[13:34:41.944]                           computeRestarts <- base::computeRestarts
[13:34:41.944]                           grepl <- base::grepl
[13:34:41.944]                           restarts <- computeRestarts(cond)
[13:34:41.944]                           for (restart in restarts) {
[13:34:41.944]                             name <- restart$name
[13:34:41.944]                             if (is.null(name)) 
[13:34:41.944]                               next
[13:34:41.944]                             if (!grepl(pattern, name)) 
[13:34:41.944]                               next
[13:34:41.944]                             invokeRestart(restart)
[13:34:41.944]                             muffled <- TRUE
[13:34:41.944]                             break
[13:34:41.944]                           }
[13:34:41.944]                         }
[13:34:41.944]                       }
[13:34:41.944]                       invisible(muffled)
[13:34:41.944]                     }
[13:34:41.944]                     muffleCondition(cond, pattern = "^muffle")
[13:34:41.944]                   }
[13:34:41.944]                 }
[13:34:41.944]                 else {
[13:34:41.944]                   if (TRUE) {
[13:34:41.944]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:41.944]                     {
[13:34:41.944]                       inherits <- base::inherits
[13:34:41.944]                       invokeRestart <- base::invokeRestart
[13:34:41.944]                       is.null <- base::is.null
[13:34:41.944]                       muffled <- FALSE
[13:34:41.944]                       if (inherits(cond, "message")) {
[13:34:41.944]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:41.944]                         if (muffled) 
[13:34:41.944]                           invokeRestart("muffleMessage")
[13:34:41.944]                       }
[13:34:41.944]                       else if (inherits(cond, "warning")) {
[13:34:41.944]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:41.944]                         if (muffled) 
[13:34:41.944]                           invokeRestart("muffleWarning")
[13:34:41.944]                       }
[13:34:41.944]                       else if (inherits(cond, "condition")) {
[13:34:41.944]                         if (!is.null(pattern)) {
[13:34:41.944]                           computeRestarts <- base::computeRestarts
[13:34:41.944]                           grepl <- base::grepl
[13:34:41.944]                           restarts <- computeRestarts(cond)
[13:34:41.944]                           for (restart in restarts) {
[13:34:41.944]                             name <- restart$name
[13:34:41.944]                             if (is.null(name)) 
[13:34:41.944]                               next
[13:34:41.944]                             if (!grepl(pattern, name)) 
[13:34:41.944]                               next
[13:34:41.944]                             invokeRestart(restart)
[13:34:41.944]                             muffled <- TRUE
[13:34:41.944]                             break
[13:34:41.944]                           }
[13:34:41.944]                         }
[13:34:41.944]                       }
[13:34:41.944]                       invisible(muffled)
[13:34:41.944]                     }
[13:34:41.944]                     muffleCondition(cond, pattern = "^muffle")
[13:34:41.944]                   }
[13:34:41.944]                 }
[13:34:41.944]             }
[13:34:41.944]         }))
[13:34:41.944]     }, error = function(ex) {
[13:34:41.944]         base::structure(base::list(value = NULL, visible = NULL, 
[13:34:41.944]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:41.944]                 ...future.rng), started = ...future.startTime, 
[13:34:41.944]             finished = Sys.time(), session_uuid = NA_character_, 
[13:34:41.944]             version = "1.8"), class = "FutureResult")
[13:34:41.944]     }, finally = {
[13:34:41.944]         if (!identical(...future.workdir, getwd())) 
[13:34:41.944]             setwd(...future.workdir)
[13:34:41.944]         {
[13:34:41.944]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:34:41.944]                 ...future.oldOptions$nwarnings <- NULL
[13:34:41.944]             }
[13:34:41.944]             base::options(...future.oldOptions)
[13:34:41.944]             if (.Platform$OS.type == "windows") {
[13:34:41.944]                 old_names <- names(...future.oldEnvVars)
[13:34:41.944]                 envs <- base::Sys.getenv()
[13:34:41.944]                 names <- names(envs)
[13:34:41.944]                 common <- intersect(names, old_names)
[13:34:41.944]                 added <- setdiff(names, old_names)
[13:34:41.944]                 removed <- setdiff(old_names, names)
[13:34:41.944]                 changed <- common[...future.oldEnvVars[common] != 
[13:34:41.944]                   envs[common]]
[13:34:41.944]                 NAMES <- toupper(changed)
[13:34:41.944]                 args <- list()
[13:34:41.944]                 for (kk in seq_along(NAMES)) {
[13:34:41.944]                   name <- changed[[kk]]
[13:34:41.944]                   NAME <- NAMES[[kk]]
[13:34:41.944]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:41.944]                     next
[13:34:41.944]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:41.944]                 }
[13:34:41.944]                 NAMES <- toupper(added)
[13:34:41.944]                 for (kk in seq_along(NAMES)) {
[13:34:41.944]                   name <- added[[kk]]
[13:34:41.944]                   NAME <- NAMES[[kk]]
[13:34:41.944]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:41.944]                     next
[13:34:41.944]                   args[[name]] <- ""
[13:34:41.944]                 }
[13:34:41.944]                 NAMES <- toupper(removed)
[13:34:41.944]                 for (kk in seq_along(NAMES)) {
[13:34:41.944]                   name <- removed[[kk]]
[13:34:41.944]                   NAME <- NAMES[[kk]]
[13:34:41.944]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:41.944]                     next
[13:34:41.944]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:41.944]                 }
[13:34:41.944]                 if (length(args) > 0) 
[13:34:41.944]                   base::do.call(base::Sys.setenv, args = args)
[13:34:41.944]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:34:41.944]             }
[13:34:41.944]             else {
[13:34:41.944]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:34:41.944]             }
[13:34:41.944]             {
[13:34:41.944]                 if (base::length(...future.futureOptionsAdded) > 
[13:34:41.944]                   0L) {
[13:34:41.944]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:34:41.944]                   base::names(opts) <- ...future.futureOptionsAdded
[13:34:41.944]                   base::options(opts)
[13:34:41.944]                 }
[13:34:41.944]                 {
[13:34:41.944]                   {
[13:34:41.944]                     base::options(mc.cores = ...future.mc.cores.old)
[13:34:41.944]                     NULL
[13:34:41.944]                   }
[13:34:41.944]                   options(future.plan = NULL)
[13:34:41.944]                   if (is.na(NA_character_)) 
[13:34:41.944]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:34:41.944]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:34:41.944]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:34:41.944]                     .init = FALSE)
[13:34:41.944]                 }
[13:34:41.944]             }
[13:34:41.944]         }
[13:34:41.944]     })
[13:34:41.944]     if (TRUE) {
[13:34:41.944]         base::sink(type = "output", split = FALSE)
[13:34:41.944]         if (TRUE) {
[13:34:41.944]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:34:41.944]         }
[13:34:41.944]         else {
[13:34:41.944]             ...future.result["stdout"] <- base::list(NULL)
[13:34:41.944]         }
[13:34:41.944]         base::close(...future.stdout)
[13:34:41.944]         ...future.stdout <- NULL
[13:34:41.944]     }
[13:34:41.944]     ...future.result$conditions <- ...future.conditions
[13:34:41.944]     ...future.result$finished <- base::Sys.time()
[13:34:41.944]     ...future.result
[13:34:41.944] }
[13:34:41.946] assign_globals() ...
[13:34:41.946] List of 5
[13:34:41.946]  $ ...future.FUN            :function (...)  
[13:34:41.946]  $ future.call.arguments    : list()
[13:34:41.946]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:41.946]  $ ...future.elements_ii    :List of 2
[13:34:41.946]   ..$ : int 0
[13:34:41.946]   ..$ : int 0
[13:34:41.946]  $ ...future.seeds_ii       :List of 2
[13:34:41.946]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[13:34:41.946]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[13:34:41.946]  $ ...future.globals.maxSize: NULL
[13:34:41.946]  - attr(*, "where")=List of 5
[13:34:41.946]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:34:41.946]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:34:41.946]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:34:41.946]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:34:41.946]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:34:41.946]  - attr(*, "resolved")= logi FALSE
[13:34:41.946]  - attr(*, "total_size")= num 616
[13:34:41.946]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:41.946]  - attr(*, "already-done")= logi TRUE
[13:34:41.953] - reassign environment for ‘...future.FUN’
[13:34:41.953] - copied ‘...future.FUN’ to environment
[13:34:41.953] - copied ‘future.call.arguments’ to environment
[13:34:41.954] - copied ‘...future.elements_ii’ to environment
[13:34:41.954] - copied ‘...future.seeds_ii’ to environment
[13:34:41.954] - copied ‘...future.globals.maxSize’ to environment
[13:34:41.954] assign_globals() ... done
[13:34:41.954] requestCore(): workers = 2
[13:34:41.956] MulticoreFuture started
[13:34:41.956] - Launch lazy future ... done
[13:34:41.956] run() for ‘MulticoreFuture’ ... done
[13:34:41.957] Created future:
[13:34:41.957] plan(): Setting new future strategy stack:
[13:34:41.957] List of future strategies:
[13:34:41.957] 1. sequential:
[13:34:41.957]    - args: function (..., envir = parent.frame())
[13:34:41.957]    - tweaked: FALSE
[13:34:41.957]    - call: NULL
[13:34:41.958] plan(): nbrOfWorkers() = 1
[13:34:41.960] plan(): Setting new future strategy stack:
[13:34:41.960] List of future strategies:
[13:34:41.960] 1. multicore:
[13:34:41.960]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:34:41.960]    - tweaked: FALSE
[13:34:41.960]    - call: plan(strategy)
[13:34:41.965] plan(): nbrOfWorkers() = 2
[13:34:41.957] MulticoreFuture:
[13:34:41.957] Label: ‘future_replicate-1’
[13:34:41.957] Expression:
[13:34:41.957] {
[13:34:41.957]     do.call(function(...) {
[13:34:41.957]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:41.957]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:41.957]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:41.957]             on.exit(options(oopts), add = TRUE)
[13:34:41.957]         }
[13:34:41.957]         {
[13:34:41.957]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:41.957]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:41.957]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:41.957]                   envir = globalenv(), inherits = FALSE)
[13:34:41.957]                 ...future.FUN(...future.X_jj, ...)
[13:34:41.957]             })
[13:34:41.957]         }
[13:34:41.957]     }, args = future.call.arguments)
[13:34:41.957] }
[13:34:41.957] Lazy evaluation: FALSE
[13:34:41.957] Asynchronous evaluation: TRUE
[13:34:41.957] Local evaluation: TRUE
[13:34:41.957] Environment: R_GlobalEnv
[13:34:41.957] Capture standard output: TRUE
[13:34:41.957] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:34:41.957] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:34:41.957] Packages: <none>
[13:34:41.957] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:34:41.957] Resolved: TRUE
[13:34:41.957] Value: <not collected>
[13:34:41.957] Conditions captured: <none>
[13:34:41.957] Early signaling: FALSE
[13:34:41.957] Owner process: b8cf10c3-b112-c8f9-9398-a44000e21728
[13:34:41.957] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:41.966] Chunk #1 of 2 ... DONE
[13:34:41.967] Chunk #2 of 2 ...
[13:34:41.967]  - Finding globals in 'X' for chunk #2 ...
[13:34:41.967] getGlobalsAndPackages() ...
[13:34:41.967] Searching for globals...
[13:34:41.968] 
[13:34:41.968] Searching for globals ... DONE
[13:34:41.968] - globals: [0] <none>
[13:34:41.968] getGlobalsAndPackages() ... DONE
[13:34:41.968]    + additional globals found: [n=0] 
[13:34:41.968]    + additional namespaces needed: [n=0] 
[13:34:41.968]  - Finding globals in 'X' for chunk #2 ... DONE
[13:34:41.968]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:34:41.969]  - seeds: [3] <seeds>
[13:34:41.969]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:41.969] getGlobalsAndPackages() ...
[13:34:41.969] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:41.969] Resolving globals: FALSE
[13:34:41.969] Tweak future expression to call with '...' arguments ...
[13:34:41.970] {
[13:34:41.970]     do.call(function(...) {
[13:34:41.970]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:41.970]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:41.970]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:41.970]             on.exit(options(oopts), add = TRUE)
[13:34:41.970]         }
[13:34:41.970]         {
[13:34:41.970]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:41.970]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:41.970]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:41.970]                   envir = globalenv(), inherits = FALSE)
[13:34:41.970]                 ...future.FUN(...future.X_jj, ...)
[13:34:41.970]             })
[13:34:41.970]         }
[13:34:41.970]     }, args = future.call.arguments)
[13:34:41.970] }
[13:34:41.970] Tweak future expression to call with '...' arguments ... DONE
[13:34:41.971] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:41.971] 
[13:34:41.971] getGlobalsAndPackages() ... DONE
[13:34:41.972] run() for ‘Future’ ...
[13:34:41.972] - state: ‘created’
[13:34:41.972] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:34:41.977] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:41.977] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:34:41.977]   - Field: ‘label’
[13:34:41.977]   - Field: ‘local’
[13:34:41.977]   - Field: ‘owner’
[13:34:41.977]   - Field: ‘envir’
[13:34:41.978]   - Field: ‘workers’
[13:34:41.978]   - Field: ‘packages’
[13:34:41.978]   - Field: ‘gc’
[13:34:41.978]   - Field: ‘job’
[13:34:41.978]   - Field: ‘conditions’
[13:34:41.978]   - Field: ‘expr’
[13:34:41.978]   - Field: ‘uuid’
[13:34:41.979]   - Field: ‘seed’
[13:34:41.979]   - Field: ‘version’
[13:34:41.979]   - Field: ‘result’
[13:34:41.979]   - Field: ‘asynchronous’
[13:34:41.979]   - Field: ‘calls’
[13:34:41.979]   - Field: ‘globals’
[13:34:41.979]   - Field: ‘stdout’
[13:34:41.980]   - Field: ‘earlySignal’
[13:34:41.980]   - Field: ‘lazy’
[13:34:41.980]   - Field: ‘state’
[13:34:41.980] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:34:41.980] - Launch lazy future ...
[13:34:41.981] Packages needed by the future expression (n = 0): <none>
[13:34:41.981] Packages needed by future strategies (n = 0): <none>
[13:34:41.981] {
[13:34:41.981]     {
[13:34:41.981]         {
[13:34:41.981]             ...future.startTime <- base::Sys.time()
[13:34:41.981]             {
[13:34:41.981]                 {
[13:34:41.981]                   {
[13:34:41.981]                     {
[13:34:41.981]                       base::local({
[13:34:41.981]                         has_future <- base::requireNamespace("future", 
[13:34:41.981]                           quietly = TRUE)
[13:34:41.981]                         if (has_future) {
[13:34:41.981]                           ns <- base::getNamespace("future")
[13:34:41.981]                           version <- ns[[".package"]][["version"]]
[13:34:41.981]                           if (is.null(version)) 
[13:34:41.981]                             version <- utils::packageVersion("future")
[13:34:41.981]                         }
[13:34:41.981]                         else {
[13:34:41.981]                           version <- NULL
[13:34:41.981]                         }
[13:34:41.981]                         if (!has_future || version < "1.8.0") {
[13:34:41.981]                           info <- base::c(r_version = base::gsub("R version ", 
[13:34:41.981]                             "", base::R.version$version.string), 
[13:34:41.981]                             platform = base::sprintf("%s (%s-bit)", 
[13:34:41.981]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:34:41.981]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:34:41.981]                               "release", "version")], collapse = " "), 
[13:34:41.981]                             hostname = base::Sys.info()[["nodename"]])
[13:34:41.981]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:34:41.981]                             info)
[13:34:41.981]                           info <- base::paste(info, collapse = "; ")
[13:34:41.981]                           if (!has_future) {
[13:34:41.981]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:34:41.981]                               info)
[13:34:41.981]                           }
[13:34:41.981]                           else {
[13:34:41.981]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:34:41.981]                               info, version)
[13:34:41.981]                           }
[13:34:41.981]                           base::stop(msg)
[13:34:41.981]                         }
[13:34:41.981]                       })
[13:34:41.981]                     }
[13:34:41.981]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:34:41.981]                     base::options(mc.cores = 1L)
[13:34:41.981]                   }
[13:34:41.981]                   ...future.strategy.old <- future::plan("list")
[13:34:41.981]                   options(future.plan = NULL)
[13:34:41.981]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:34:41.981]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:34:41.981]                 }
[13:34:41.981]                 ...future.workdir <- getwd()
[13:34:41.981]             }
[13:34:41.981]             ...future.oldOptions <- base::as.list(base::.Options)
[13:34:41.981]             ...future.oldEnvVars <- base::Sys.getenv()
[13:34:41.981]         }
[13:34:41.981]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:34:41.981]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:34:41.981]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:34:41.981]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:34:41.981]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:34:41.981]             future.stdout.windows.reencode = NULL, width = 80L)
[13:34:41.981]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:34:41.981]             base::names(...future.oldOptions))
[13:34:41.981]     }
[13:34:41.981]     if (FALSE) {
[13:34:41.981]     }
[13:34:41.981]     else {
[13:34:41.981]         if (TRUE) {
[13:34:41.981]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:34:41.981]                 open = "w")
[13:34:41.981]         }
[13:34:41.981]         else {
[13:34:41.981]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:34:41.981]                 windows = "NUL", "/dev/null"), open = "w")
[13:34:41.981]         }
[13:34:41.981]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:34:41.981]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:34:41.981]             base::sink(type = "output", split = FALSE)
[13:34:41.981]             base::close(...future.stdout)
[13:34:41.981]         }, add = TRUE)
[13:34:41.981]     }
[13:34:41.981]     ...future.frame <- base::sys.nframe()
[13:34:41.981]     ...future.conditions <- base::list()
[13:34:41.981]     ...future.rng <- base::globalenv()$.Random.seed
[13:34:41.981]     if (FALSE) {
[13:34:41.981]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:34:41.981]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:34:41.981]     }
[13:34:41.981]     ...future.result <- base::tryCatch({
[13:34:41.981]         base::withCallingHandlers({
[13:34:41.981]             ...future.value <- base::withVisible(base::local({
[13:34:41.981]                 withCallingHandlers({
[13:34:41.981]                   {
[13:34:41.981]                     do.call(function(...) {
[13:34:41.981]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:41.981]                       if (!identical(...future.globals.maxSize.org, 
[13:34:41.981]                         ...future.globals.maxSize)) {
[13:34:41.981]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:41.981]                         on.exit(options(oopts), add = TRUE)
[13:34:41.981]                       }
[13:34:41.981]                       {
[13:34:41.981]                         lapply(seq_along(...future.elements_ii), 
[13:34:41.981]                           FUN = function(jj) {
[13:34:41.981]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:41.981]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:41.981]                               envir = globalenv(), inherits = FALSE)
[13:34:41.981]                             ...future.FUN(...future.X_jj, ...)
[13:34:41.981]                           })
[13:34:41.981]                       }
[13:34:41.981]                     }, args = future.call.arguments)
[13:34:41.981]                   }
[13:34:41.981]                 }, immediateCondition = function(cond) {
[13:34:41.981]                   save_rds <- function (object, pathname, ...) 
[13:34:41.981]                   {
[13:34:41.981]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:34:41.981]                     if (file_test("-f", pathname_tmp)) {
[13:34:41.981]                       fi_tmp <- file.info(pathname_tmp)
[13:34:41.981]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:34:41.981]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:34:41.981]                         fi_tmp[["mtime"]])
[13:34:41.981]                     }
[13:34:41.981]                     tryCatch({
[13:34:41.981]                       saveRDS(object, file = pathname_tmp, ...)
[13:34:41.981]                     }, error = function(ex) {
[13:34:41.981]                       msg <- conditionMessage(ex)
[13:34:41.981]                       fi_tmp <- file.info(pathname_tmp)
[13:34:41.981]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:34:41.981]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:34:41.981]                         fi_tmp[["mtime"]], msg)
[13:34:41.981]                       ex$message <- msg
[13:34:41.981]                       stop(ex)
[13:34:41.981]                     })
[13:34:41.981]                     stopifnot(file_test("-f", pathname_tmp))
[13:34:41.981]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:34:41.981]                     if (!res || file_test("-f", pathname_tmp)) {
[13:34:41.981]                       fi_tmp <- file.info(pathname_tmp)
[13:34:41.981]                       fi <- file.info(pathname)
[13:34:41.981]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:34:41.981]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:34:41.981]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:34:41.981]                         fi[["size"]], fi[["mtime"]])
[13:34:41.981]                       stop(msg)
[13:34:41.981]                     }
[13:34:41.981]                     invisible(pathname)
[13:34:41.981]                   }
[13:34:41.981]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:34:41.981]                     rootPath = tempdir()) 
[13:34:41.981]                   {
[13:34:41.981]                     obj <- list(time = Sys.time(), condition = cond)
[13:34:41.981]                     file <- tempfile(pattern = class(cond)[1], 
[13:34:41.981]                       tmpdir = path, fileext = ".rds")
[13:34:41.981]                     save_rds(obj, file)
[13:34:41.981]                   }
[13:34:41.981]                   saveImmediateCondition(cond, path = "/tmp/RtmplfSa61/.future/immediateConditions")
[13:34:41.981]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:41.981]                   {
[13:34:41.981]                     inherits <- base::inherits
[13:34:41.981]                     invokeRestart <- base::invokeRestart
[13:34:41.981]                     is.null <- base::is.null
[13:34:41.981]                     muffled <- FALSE
[13:34:41.981]                     if (inherits(cond, "message")) {
[13:34:41.981]                       muffled <- grepl(pattern, "muffleMessage")
[13:34:41.981]                       if (muffled) 
[13:34:41.981]                         invokeRestart("muffleMessage")
[13:34:41.981]                     }
[13:34:41.981]                     else if (inherits(cond, "warning")) {
[13:34:41.981]                       muffled <- grepl(pattern, "muffleWarning")
[13:34:41.981]                       if (muffled) 
[13:34:41.981]                         invokeRestart("muffleWarning")
[13:34:41.981]                     }
[13:34:41.981]                     else if (inherits(cond, "condition")) {
[13:34:41.981]                       if (!is.null(pattern)) {
[13:34:41.981]                         computeRestarts <- base::computeRestarts
[13:34:41.981]                         grepl <- base::grepl
[13:34:41.981]                         restarts <- computeRestarts(cond)
[13:34:41.981]                         for (restart in restarts) {
[13:34:41.981]                           name <- restart$name
[13:34:41.981]                           if (is.null(name)) 
[13:34:41.981]                             next
[13:34:41.981]                           if (!grepl(pattern, name)) 
[13:34:41.981]                             next
[13:34:41.981]                           invokeRestart(restart)
[13:34:41.981]                           muffled <- TRUE
[13:34:41.981]                           break
[13:34:41.981]                         }
[13:34:41.981]                       }
[13:34:41.981]                     }
[13:34:41.981]                     invisible(muffled)
[13:34:41.981]                   }
[13:34:41.981]                   muffleCondition(cond)
[13:34:41.981]                 })
[13:34:41.981]             }))
[13:34:41.981]             future::FutureResult(value = ...future.value$value, 
[13:34:41.981]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:41.981]                   ...future.rng), globalenv = if (FALSE) 
[13:34:41.981]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:34:41.981]                     ...future.globalenv.names))
[13:34:41.981]                 else NULL, started = ...future.startTime, version = "1.8")
[13:34:41.981]         }, condition = base::local({
[13:34:41.981]             c <- base::c
[13:34:41.981]             inherits <- base::inherits
[13:34:41.981]             invokeRestart <- base::invokeRestart
[13:34:41.981]             length <- base::length
[13:34:41.981]             list <- base::list
[13:34:41.981]             seq.int <- base::seq.int
[13:34:41.981]             signalCondition <- base::signalCondition
[13:34:41.981]             sys.calls <- base::sys.calls
[13:34:41.981]             `[[` <- base::`[[`
[13:34:41.981]             `+` <- base::`+`
[13:34:41.981]             `<<-` <- base::`<<-`
[13:34:41.981]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:34:41.981]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:34:41.981]                   3L)]
[13:34:41.981]             }
[13:34:41.981]             function(cond) {
[13:34:41.981]                 is_error <- inherits(cond, "error")
[13:34:41.981]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:34:41.981]                   NULL)
[13:34:41.981]                 if (is_error) {
[13:34:41.981]                   sessionInformation <- function() {
[13:34:41.981]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:34:41.981]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:34:41.981]                       search = base::search(), system = base::Sys.info())
[13:34:41.981]                   }
[13:34:41.981]                   ...future.conditions[[length(...future.conditions) + 
[13:34:41.981]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:34:41.981]                     cond$call), session = sessionInformation(), 
[13:34:41.981]                     timestamp = base::Sys.time(), signaled = 0L)
[13:34:41.981]                   signalCondition(cond)
[13:34:41.981]                 }
[13:34:41.981]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:34:41.981]                 "immediateCondition"))) {
[13:34:41.981]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:34:41.981]                   ...future.conditions[[length(...future.conditions) + 
[13:34:41.981]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:34:41.981]                   if (TRUE && !signal) {
[13:34:41.981]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:41.981]                     {
[13:34:41.981]                       inherits <- base::inherits
[13:34:41.981]                       invokeRestart <- base::invokeRestart
[13:34:41.981]                       is.null <- base::is.null
[13:34:41.981]                       muffled <- FALSE
[13:34:41.981]                       if (inherits(cond, "message")) {
[13:34:41.981]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:41.981]                         if (muffled) 
[13:34:41.981]                           invokeRestart("muffleMessage")
[13:34:41.981]                       }
[13:34:41.981]                       else if (inherits(cond, "warning")) {
[13:34:41.981]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:41.981]                         if (muffled) 
[13:34:41.981]                           invokeRestart("muffleWarning")
[13:34:41.981]                       }
[13:34:41.981]                       else if (inherits(cond, "condition")) {
[13:34:41.981]                         if (!is.null(pattern)) {
[13:34:41.981]                           computeRestarts <- base::computeRestarts
[13:34:41.981]                           grepl <- base::grepl
[13:34:41.981]                           restarts <- computeRestarts(cond)
[13:34:41.981]                           for (restart in restarts) {
[13:34:41.981]                             name <- restart$name
[13:34:41.981]                             if (is.null(name)) 
[13:34:41.981]                               next
[13:34:41.981]                             if (!grepl(pattern, name)) 
[13:34:41.981]                               next
[13:34:41.981]                             invokeRestart(restart)
[13:34:41.981]                             muffled <- TRUE
[13:34:41.981]                             break
[13:34:41.981]                           }
[13:34:41.981]                         }
[13:34:41.981]                       }
[13:34:41.981]                       invisible(muffled)
[13:34:41.981]                     }
[13:34:41.981]                     muffleCondition(cond, pattern = "^muffle")
[13:34:41.981]                   }
[13:34:41.981]                 }
[13:34:41.981]                 else {
[13:34:41.981]                   if (TRUE) {
[13:34:41.981]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:41.981]                     {
[13:34:41.981]                       inherits <- base::inherits
[13:34:41.981]                       invokeRestart <- base::invokeRestart
[13:34:41.981]                       is.null <- base::is.null
[13:34:41.981]                       muffled <- FALSE
[13:34:41.981]                       if (inherits(cond, "message")) {
[13:34:41.981]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:41.981]                         if (muffled) 
[13:34:41.981]                           invokeRestart("muffleMessage")
[13:34:41.981]                       }
[13:34:41.981]                       else if (inherits(cond, "warning")) {
[13:34:41.981]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:41.981]                         if (muffled) 
[13:34:41.981]                           invokeRestart("muffleWarning")
[13:34:41.981]                       }
[13:34:41.981]                       else if (inherits(cond, "condition")) {
[13:34:41.981]                         if (!is.null(pattern)) {
[13:34:41.981]                           computeRestarts <- base::computeRestarts
[13:34:41.981]                           grepl <- base::grepl
[13:34:41.981]                           restarts <- computeRestarts(cond)
[13:34:41.981]                           for (restart in restarts) {
[13:34:41.981]                             name <- restart$name
[13:34:41.981]                             if (is.null(name)) 
[13:34:41.981]                               next
[13:34:41.981]                             if (!grepl(pattern, name)) 
[13:34:41.981]                               next
[13:34:41.981]                             invokeRestart(restart)
[13:34:41.981]                             muffled <- TRUE
[13:34:41.981]                             break
[13:34:41.981]                           }
[13:34:41.981]                         }
[13:34:41.981]                       }
[13:34:41.981]                       invisible(muffled)
[13:34:41.981]                     }
[13:34:41.981]                     muffleCondition(cond, pattern = "^muffle")
[13:34:41.981]                   }
[13:34:41.981]                 }
[13:34:41.981]             }
[13:34:41.981]         }))
[13:34:41.981]     }, error = function(ex) {
[13:34:41.981]         base::structure(base::list(value = NULL, visible = NULL, 
[13:34:41.981]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:41.981]                 ...future.rng), started = ...future.startTime, 
[13:34:41.981]             finished = Sys.time(), session_uuid = NA_character_, 
[13:34:41.981]             version = "1.8"), class = "FutureResult")
[13:34:41.981]     }, finally = {
[13:34:41.981]         if (!identical(...future.workdir, getwd())) 
[13:34:41.981]             setwd(...future.workdir)
[13:34:41.981]         {
[13:34:41.981]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:34:41.981]                 ...future.oldOptions$nwarnings <- NULL
[13:34:41.981]             }
[13:34:41.981]             base::options(...future.oldOptions)
[13:34:41.981]             if (.Platform$OS.type == "windows") {
[13:34:41.981]                 old_names <- names(...future.oldEnvVars)
[13:34:41.981]                 envs <- base::Sys.getenv()
[13:34:41.981]                 names <- names(envs)
[13:34:41.981]                 common <- intersect(names, old_names)
[13:34:41.981]                 added <- setdiff(names, old_names)
[13:34:41.981]                 removed <- setdiff(old_names, names)
[13:34:41.981]                 changed <- common[...future.oldEnvVars[common] != 
[13:34:41.981]                   envs[common]]
[13:34:41.981]                 NAMES <- toupper(changed)
[13:34:41.981]                 args <- list()
[13:34:41.981]                 for (kk in seq_along(NAMES)) {
[13:34:41.981]                   name <- changed[[kk]]
[13:34:41.981]                   NAME <- NAMES[[kk]]
[13:34:41.981]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:41.981]                     next
[13:34:41.981]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:41.981]                 }
[13:34:41.981]                 NAMES <- toupper(added)
[13:34:41.981]                 for (kk in seq_along(NAMES)) {
[13:34:41.981]                   name <- added[[kk]]
[13:34:41.981]                   NAME <- NAMES[[kk]]
[13:34:41.981]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:41.981]                     next
[13:34:41.981]                   args[[name]] <- ""
[13:34:41.981]                 }
[13:34:41.981]                 NAMES <- toupper(removed)
[13:34:41.981]                 for (kk in seq_along(NAMES)) {
[13:34:41.981]                   name <- removed[[kk]]
[13:34:41.981]                   NAME <- NAMES[[kk]]
[13:34:41.981]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:41.981]                     next
[13:34:41.981]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:41.981]                 }
[13:34:41.981]                 if (length(args) > 0) 
[13:34:41.981]                   base::do.call(base::Sys.setenv, args = args)
[13:34:41.981]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:34:41.981]             }
[13:34:41.981]             else {
[13:34:41.981]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:34:41.981]             }
[13:34:41.981]             {
[13:34:41.981]                 if (base::length(...future.futureOptionsAdded) > 
[13:34:41.981]                   0L) {
[13:34:41.981]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:34:41.981]                   base::names(opts) <- ...future.futureOptionsAdded
[13:34:41.981]                   base::options(opts)
[13:34:41.981]                 }
[13:34:41.981]                 {
[13:34:41.981]                   {
[13:34:41.981]                     base::options(mc.cores = ...future.mc.cores.old)
[13:34:41.981]                     NULL
[13:34:41.981]                   }
[13:34:41.981]                   options(future.plan = NULL)
[13:34:41.981]                   if (is.na(NA_character_)) 
[13:34:41.981]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:34:41.981]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:34:41.981]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:34:41.981]                     .init = FALSE)
[13:34:41.981]                 }
[13:34:41.981]             }
[13:34:41.981]         }
[13:34:41.981]     })
[13:34:41.981]     if (TRUE) {
[13:34:41.981]         base::sink(type = "output", split = FALSE)
[13:34:41.981]         if (TRUE) {
[13:34:41.981]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:34:41.981]         }
[13:34:41.981]         else {
[13:34:41.981]             ...future.result["stdout"] <- base::list(NULL)
[13:34:41.981]         }
[13:34:41.981]         base::close(...future.stdout)
[13:34:41.981]         ...future.stdout <- NULL
[13:34:41.981]     }
[13:34:41.981]     ...future.result$conditions <- ...future.conditions
[13:34:41.981]     ...future.result$finished <- base::Sys.time()
[13:34:41.981]     ...future.result
[13:34:41.981] }
[13:34:41.985] assign_globals() ...
[13:34:41.985] List of 5
[13:34:41.985]  $ ...future.FUN            :function (...)  
[13:34:41.985]  $ future.call.arguments    : list()
[13:34:41.985]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:41.985]  $ ...future.elements_ii    :List of 3
[13:34:41.985]   ..$ : int 0
[13:34:41.985]   ..$ : int 0
[13:34:41.985]   ..$ : int 0
[13:34:41.985]  $ ...future.seeds_ii       :List of 3
[13:34:41.985]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[13:34:41.985]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[13:34:41.985]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[13:34:41.985]  $ ...future.globals.maxSize: NULL
[13:34:41.985]  - attr(*, "where")=List of 5
[13:34:41.985]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:34:41.985]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:34:41.985]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:34:41.985]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:34:41.985]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:34:41.985]  - attr(*, "resolved")= logi FALSE
[13:34:41.985]  - attr(*, "total_size")= num 616
[13:34:41.985]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:41.985]  - attr(*, "already-done")= logi TRUE
[13:34:42.031] - reassign environment for ‘...future.FUN’
[13:34:42.031] - copied ‘...future.FUN’ to environment
[13:34:42.031] - copied ‘future.call.arguments’ to environment
[13:34:42.031] - copied ‘...future.elements_ii’ to environment
[13:34:42.031] - copied ‘...future.seeds_ii’ to environment
[13:34:42.031] - copied ‘...future.globals.maxSize’ to environment
[13:34:42.031] assign_globals() ... done
[13:34:42.032] requestCore(): workers = 2
[13:34:42.034] MulticoreFuture started
[13:34:42.034] - Launch lazy future ... done
[13:34:42.034] run() for ‘MulticoreFuture’ ... done
[13:34:42.035] Created future:
[13:34:42.035] plan(): Setting new future strategy stack:
[13:34:42.036] List of future strategies:
[13:34:42.036] 1. sequential:
[13:34:42.036]    - args: function (..., envir = parent.frame())
[13:34:42.036]    - tweaked: FALSE
[13:34:42.036]    - call: NULL
[13:34:42.036] plan(): nbrOfWorkers() = 1
[13:34:42.039] plan(): Setting new future strategy stack:
[13:34:42.039] List of future strategies:
[13:34:42.039] 1. multicore:
[13:34:42.039]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:34:42.039]    - tweaked: FALSE
[13:34:42.039]    - call: plan(strategy)
[13:34:42.044] plan(): nbrOfWorkers() = 2
[13:34:42.035] MulticoreFuture:
[13:34:42.035] Label: ‘future_replicate-2’
[13:34:42.035] Expression:
[13:34:42.035] {
[13:34:42.035]     do.call(function(...) {
[13:34:42.035]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:42.035]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:42.035]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:42.035]             on.exit(options(oopts), add = TRUE)
[13:34:42.035]         }
[13:34:42.035]         {
[13:34:42.035]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:42.035]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:42.035]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:42.035]                   envir = globalenv(), inherits = FALSE)
[13:34:42.035]                 ...future.FUN(...future.X_jj, ...)
[13:34:42.035]             })
[13:34:42.035]         }
[13:34:42.035]     }, args = future.call.arguments)
[13:34:42.035] }
[13:34:42.035] Lazy evaluation: FALSE
[13:34:42.035] Asynchronous evaluation: TRUE
[13:34:42.035] Local evaluation: TRUE
[13:34:42.035] Environment: R_GlobalEnv
[13:34:42.035] Capture standard output: TRUE
[13:34:42.035] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:34:42.035] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:34:42.035] Packages: <none>
[13:34:42.035] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:34:42.035] Resolved: TRUE
[13:34:42.035] Value: <not collected>
[13:34:42.035] Conditions captured: <none>
[13:34:42.035] Early signaling: FALSE
[13:34:42.035] Owner process: b8cf10c3-b112-c8f9-9398-a44000e21728
[13:34:42.035] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:42.045] Chunk #2 of 2 ... DONE
[13:34:42.045] Launching 2 futures (chunks) ... DONE
[13:34:42.046] Resolving 2 futures (chunks) ...
[13:34:42.046] resolve() on list ...
[13:34:42.046]  recursive: 0
[13:34:42.046]  length: 2
[13:34:42.046] 
[13:34:42.047] Future #1
[13:34:42.047] result() for MulticoreFuture ...
[13:34:42.048] result() for MulticoreFuture ...
[13:34:42.048] result() for MulticoreFuture ... done
[13:34:42.048] result() for MulticoreFuture ... done
[13:34:42.048] result() for MulticoreFuture ...
[13:34:42.048] result() for MulticoreFuture ... done
[13:34:42.048] signalConditionsASAP(MulticoreFuture, pos=1) ...
[13:34:42.049] - nx: 2
[13:34:42.049] - relay: TRUE
[13:34:42.049] - stdout: TRUE
[13:34:42.049] - signal: TRUE
[13:34:42.049] - resignal: FALSE
[13:34:42.049] - force: TRUE
[13:34:42.049] - relayed: [n=2] FALSE, FALSE
[13:34:42.050] - queued futures: [n=2] FALSE, FALSE
[13:34:42.050]  - until=1
[13:34:42.050]  - relaying element #1
[13:34:42.050] result() for MulticoreFuture ...
[13:34:42.050] result() for MulticoreFuture ... done
[13:34:42.050] result() for MulticoreFuture ...
[13:34:42.051] result() for MulticoreFuture ... done
[13:34:42.051] result() for MulticoreFuture ...
[13:34:42.051] result() for MulticoreFuture ... done
[13:34:42.051] result() for MulticoreFuture ...
[13:34:42.051] result() for MulticoreFuture ... done
[13:34:42.051] - relayed: [n=2] TRUE, FALSE
[13:34:42.052] - queued futures: [n=2] TRUE, FALSE
[13:34:42.052] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[13:34:42.052]  length: 1 (resolved future 1)
[13:34:42.052] Future #2
[13:34:42.052] result() for MulticoreFuture ...
[13:34:42.053] result() for MulticoreFuture ...
[13:34:42.053] result() for MulticoreFuture ... done
[13:34:42.053] result() for MulticoreFuture ... done
[13:34:42.053] result() for MulticoreFuture ...
[13:34:42.054] result() for MulticoreFuture ... done
[13:34:42.054] signalConditionsASAP(MulticoreFuture, pos=2) ...
[13:34:42.054] - nx: 2
[13:34:42.054] - relay: TRUE
[13:34:42.054] - stdout: TRUE
[13:34:42.054] - signal: TRUE
[13:34:42.054] - resignal: FALSE
[13:34:42.054] - force: TRUE
[13:34:42.054] - relayed: [n=2] TRUE, FALSE
[13:34:42.055] - queued futures: [n=2] TRUE, FALSE
[13:34:42.055]  - until=2
[13:34:42.055]  - relaying element #2
[13:34:42.055] result() for MulticoreFuture ...
[13:34:42.055] result() for MulticoreFuture ... done
[13:34:42.055] result() for MulticoreFuture ...
[13:34:42.055] result() for MulticoreFuture ... done
[13:34:42.056] result() for MulticoreFuture ...
[13:34:42.056] result() for MulticoreFuture ... done
[13:34:42.056] result() for MulticoreFuture ...
[13:34:42.056] result() for MulticoreFuture ... done
[13:34:42.056] - relayed: [n=2] TRUE, TRUE
[13:34:42.056] - queued futures: [n=2] TRUE, TRUE
[13:34:42.056] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[13:34:42.056]  length: 0 (resolved future 2)
[13:34:42.057] Relaying remaining futures
[13:34:42.057] signalConditionsASAP(NULL, pos=0) ...
[13:34:42.057] - nx: 2
[13:34:42.057] - relay: TRUE
[13:34:42.057] - stdout: TRUE
[13:34:42.057] - signal: TRUE
[13:34:42.057] - resignal: FALSE
[13:34:42.057] - force: TRUE
[13:34:42.057] - relayed: [n=2] TRUE, TRUE
[13:34:42.057] - queued futures: [n=2] TRUE, TRUE
 - flush all
[13:34:42.058] - relayed: [n=2] TRUE, TRUE
[13:34:42.058] - queued futures: [n=2] TRUE, TRUE
[13:34:42.058] signalConditionsASAP(NULL, pos=0) ... done
[13:34:42.058] resolve() on list ... DONE
[13:34:42.058] result() for MulticoreFuture ...
[13:34:42.058] result() for MulticoreFuture ... done
[13:34:42.058] result() for MulticoreFuture ...
[13:34:42.058] result() for MulticoreFuture ... done
[13:34:42.059] result() for MulticoreFuture ...
[13:34:42.059] result() for MulticoreFuture ... done
[13:34:42.059] result() for MulticoreFuture ...
[13:34:42.059] result() for MulticoreFuture ... done
[13:34:42.059]  - Number of value chunks collected: 2
[13:34:42.059] Resolving 2 futures (chunks) ... DONE
[13:34:42.059] Reducing values from 2 chunks ...
[13:34:42.059]  - Number of values collected after concatenation: 5
[13:34:42.060]  - Number of values expected: 5
[13:34:42.060] Reducing values from 2 chunks ... DONE
[13:34:42.060] future_lapply() ... DONE
[13:34:42.060] future_lapply() ...
[13:34:42.061] Generating random seeds ...
[13:34:42.061] Generating random seed streams for 5 elements ...
[13:34:42.061] Generating random seed streams for 5 elements ... DONE
[13:34:42.061] Generating random seeds ... DONE
[13:34:42.061] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:34:42.066] Number of chunks: 2
[13:34:42.066] getGlobalsAndPackagesXApply() ...
[13:34:42.066]  - future.globals: TRUE
[13:34:42.066] getGlobalsAndPackages() ...
[13:34:42.066] Searching for globals...
[13:34:42.068] - globals found: [2] ‘FUN’, ‘sample’
[13:34:42.068] Searching for globals ... DONE
[13:34:42.068] Resolving globals: FALSE
[13:34:42.068] The total size of the 1 globals is 616 bytes (616 bytes)
[13:34:42.069] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:34:42.069] - globals: [1] ‘FUN’
[13:34:42.069] 
[13:34:42.069] getGlobalsAndPackages() ... DONE
[13:34:42.069]  - globals found/used: [n=1] ‘FUN’
[13:34:42.069]  - needed namespaces: [n=0] 
[13:34:42.069] Finding globals ... DONE
[13:34:42.070]  - use_args: TRUE
[13:34:42.070]  - Getting '...' globals ...
[13:34:42.070] resolve() on list ...
[13:34:42.070]  recursive: 0
[13:34:42.070]  length: 1
[13:34:42.071]  elements: ‘...’
[13:34:42.071]  length: 0 (resolved future 1)
[13:34:42.071] resolve() on list ... DONE
[13:34:42.071]    - '...' content: [n=0] 
[13:34:42.071] List of 1
[13:34:42.071]  $ ...: list()
[13:34:42.071]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:42.071]  - attr(*, "where")=List of 1
[13:34:42.071]   ..$ ...:<environment: 0x5627bf294620> 
[13:34:42.071]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:42.071]  - attr(*, "resolved")= logi TRUE
[13:34:42.071]  - attr(*, "total_size")= num NA
[13:34:42.076]  - Getting '...' globals ... DONE
[13:34:42.076] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:34:42.076] List of 2
[13:34:42.076]  $ ...future.FUN:function (...)  
[13:34:42.076]  $ ...          : list()
[13:34:42.076]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:42.076]  - attr(*, "where")=List of 2
[13:34:42.076]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:34:42.076]   ..$ ...          :<environment: 0x5627bf294620> 
[13:34:42.076]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:42.076]  - attr(*, "resolved")= logi FALSE
[13:34:42.076]  - attr(*, "total_size")= num 616
[13:34:42.079] Packages to be attached in all futures: [n=0] 
[13:34:42.079] getGlobalsAndPackagesXApply() ... DONE
[13:34:42.079] Number of futures (= number of chunks): 2
[13:34:42.080] Launching 2 futures (chunks) ...
[13:34:42.080] Chunk #1 of 2 ...
[13:34:42.080]  - Finding globals in 'X' for chunk #1 ...
[13:34:42.080] getGlobalsAndPackages() ...
[13:34:42.080] Searching for globals...
[13:34:42.080] 
[13:34:42.080] Searching for globals ... DONE
[13:34:42.080] - globals: [0] <none>
[13:34:42.081] getGlobalsAndPackages() ... DONE
[13:34:42.081]    + additional globals found: [n=0] 
[13:34:42.081]    + additional namespaces needed: [n=0] 
[13:34:42.081]  - Finding globals in 'X' for chunk #1 ... DONE
[13:34:42.081]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:34:42.081]  - seeds: [2] <seeds>
[13:34:42.081]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:42.081] getGlobalsAndPackages() ...
[13:34:42.081] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:42.081] Resolving globals: FALSE
[13:34:42.082] Tweak future expression to call with '...' arguments ...
[13:34:42.082] {
[13:34:42.082]     do.call(function(...) {
[13:34:42.082]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:42.082]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:42.082]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:42.082]             on.exit(options(oopts), add = TRUE)
[13:34:42.082]         }
[13:34:42.082]         {
[13:34:42.082]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:42.082]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:42.082]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:42.082]                   envir = globalenv(), inherits = FALSE)
[13:34:42.082]                 ...future.FUN(...future.X_jj, ...)
[13:34:42.082]             })
[13:34:42.082]         }
[13:34:42.082]     }, args = future.call.arguments)
[13:34:42.082] }
[13:34:42.082] Tweak future expression to call with '...' arguments ... DONE
[13:34:42.082] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:42.082] 
[13:34:42.082] getGlobalsAndPackages() ... DONE
[13:34:42.083] run() for ‘Future’ ...
[13:34:42.083] - state: ‘created’
[13:34:42.083] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:34:42.087] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:42.087] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:34:42.087]   - Field: ‘label’
[13:34:42.087]   - Field: ‘local’
[13:34:42.087]   - Field: ‘owner’
[13:34:42.087]   - Field: ‘envir’
[13:34:42.087]   - Field: ‘workers’
[13:34:42.087]   - Field: ‘packages’
[13:34:42.087]   - Field: ‘gc’
[13:34:42.087]   - Field: ‘job’
[13:34:42.088]   - Field: ‘conditions’
[13:34:42.088]   - Field: ‘expr’
[13:34:42.088]   - Field: ‘uuid’
[13:34:42.088]   - Field: ‘seed’
[13:34:42.088]   - Field: ‘version’
[13:34:42.088]   - Field: ‘result’
[13:34:42.088]   - Field: ‘asynchronous’
[13:34:42.088]   - Field: ‘calls’
[13:34:42.088]   - Field: ‘globals’
[13:34:42.088]   - Field: ‘stdout’
[13:34:42.088]   - Field: ‘earlySignal’
[13:34:42.089]   - Field: ‘lazy’
[13:34:42.089]   - Field: ‘state’
[13:34:42.089] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:34:42.089] - Launch lazy future ...
[13:34:42.089] Packages needed by the future expression (n = 0): <none>
[13:34:42.089] Packages needed by future strategies (n = 0): <none>
[13:34:42.090] {
[13:34:42.090]     {
[13:34:42.090]         {
[13:34:42.090]             ...future.startTime <- base::Sys.time()
[13:34:42.090]             {
[13:34:42.090]                 {
[13:34:42.090]                   {
[13:34:42.090]                     {
[13:34:42.090]                       base::local({
[13:34:42.090]                         has_future <- base::requireNamespace("future", 
[13:34:42.090]                           quietly = TRUE)
[13:34:42.090]                         if (has_future) {
[13:34:42.090]                           ns <- base::getNamespace("future")
[13:34:42.090]                           version <- ns[[".package"]][["version"]]
[13:34:42.090]                           if (is.null(version)) 
[13:34:42.090]                             version <- utils::packageVersion("future")
[13:34:42.090]                         }
[13:34:42.090]                         else {
[13:34:42.090]                           version <- NULL
[13:34:42.090]                         }
[13:34:42.090]                         if (!has_future || version < "1.8.0") {
[13:34:42.090]                           info <- base::c(r_version = base::gsub("R version ", 
[13:34:42.090]                             "", base::R.version$version.string), 
[13:34:42.090]                             platform = base::sprintf("%s (%s-bit)", 
[13:34:42.090]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:34:42.090]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:34:42.090]                               "release", "version")], collapse = " "), 
[13:34:42.090]                             hostname = base::Sys.info()[["nodename"]])
[13:34:42.090]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:34:42.090]                             info)
[13:34:42.090]                           info <- base::paste(info, collapse = "; ")
[13:34:42.090]                           if (!has_future) {
[13:34:42.090]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:34:42.090]                               info)
[13:34:42.090]                           }
[13:34:42.090]                           else {
[13:34:42.090]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:34:42.090]                               info, version)
[13:34:42.090]                           }
[13:34:42.090]                           base::stop(msg)
[13:34:42.090]                         }
[13:34:42.090]                       })
[13:34:42.090]                     }
[13:34:42.090]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:34:42.090]                     base::options(mc.cores = 1L)
[13:34:42.090]                   }
[13:34:42.090]                   ...future.strategy.old <- future::plan("list")
[13:34:42.090]                   options(future.plan = NULL)
[13:34:42.090]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:34:42.090]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:34:42.090]                 }
[13:34:42.090]                 ...future.workdir <- getwd()
[13:34:42.090]             }
[13:34:42.090]             ...future.oldOptions <- base::as.list(base::.Options)
[13:34:42.090]             ...future.oldEnvVars <- base::Sys.getenv()
[13:34:42.090]         }
[13:34:42.090]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:34:42.090]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:34:42.090]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:34:42.090]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:34:42.090]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:34:42.090]             future.stdout.windows.reencode = NULL, width = 80L)
[13:34:42.090]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:34:42.090]             base::names(...future.oldOptions))
[13:34:42.090]     }
[13:34:42.090]     if (FALSE) {
[13:34:42.090]     }
[13:34:42.090]     else {
[13:34:42.090]         if (TRUE) {
[13:34:42.090]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:34:42.090]                 open = "w")
[13:34:42.090]         }
[13:34:42.090]         else {
[13:34:42.090]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:34:42.090]                 windows = "NUL", "/dev/null"), open = "w")
[13:34:42.090]         }
[13:34:42.090]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:34:42.090]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:34:42.090]             base::sink(type = "output", split = FALSE)
[13:34:42.090]             base::close(...future.stdout)
[13:34:42.090]         }, add = TRUE)
[13:34:42.090]     }
[13:34:42.090]     ...future.frame <- base::sys.nframe()
[13:34:42.090]     ...future.conditions <- base::list()
[13:34:42.090]     ...future.rng <- base::globalenv()$.Random.seed
[13:34:42.090]     if (FALSE) {
[13:34:42.090]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:34:42.090]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:34:42.090]     }
[13:34:42.090]     ...future.result <- base::tryCatch({
[13:34:42.090]         base::withCallingHandlers({
[13:34:42.090]             ...future.value <- base::withVisible(base::local({
[13:34:42.090]                 withCallingHandlers({
[13:34:42.090]                   {
[13:34:42.090]                     do.call(function(...) {
[13:34:42.090]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:42.090]                       if (!identical(...future.globals.maxSize.org, 
[13:34:42.090]                         ...future.globals.maxSize)) {
[13:34:42.090]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:42.090]                         on.exit(options(oopts), add = TRUE)
[13:34:42.090]                       }
[13:34:42.090]                       {
[13:34:42.090]                         lapply(seq_along(...future.elements_ii), 
[13:34:42.090]                           FUN = function(jj) {
[13:34:42.090]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:42.090]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:42.090]                               envir = globalenv(), inherits = FALSE)
[13:34:42.090]                             ...future.FUN(...future.X_jj, ...)
[13:34:42.090]                           })
[13:34:42.090]                       }
[13:34:42.090]                     }, args = future.call.arguments)
[13:34:42.090]                   }
[13:34:42.090]                 }, immediateCondition = function(cond) {
[13:34:42.090]                   save_rds <- function (object, pathname, ...) 
[13:34:42.090]                   {
[13:34:42.090]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:34:42.090]                     if (file_test("-f", pathname_tmp)) {
[13:34:42.090]                       fi_tmp <- file.info(pathname_tmp)
[13:34:42.090]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:34:42.090]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:34:42.090]                         fi_tmp[["mtime"]])
[13:34:42.090]                     }
[13:34:42.090]                     tryCatch({
[13:34:42.090]                       saveRDS(object, file = pathname_tmp, ...)
[13:34:42.090]                     }, error = function(ex) {
[13:34:42.090]                       msg <- conditionMessage(ex)
[13:34:42.090]                       fi_tmp <- file.info(pathname_tmp)
[13:34:42.090]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:34:42.090]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:34:42.090]                         fi_tmp[["mtime"]], msg)
[13:34:42.090]                       ex$message <- msg
[13:34:42.090]                       stop(ex)
[13:34:42.090]                     })
[13:34:42.090]                     stopifnot(file_test("-f", pathname_tmp))
[13:34:42.090]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:34:42.090]                     if (!res || file_test("-f", pathname_tmp)) {
[13:34:42.090]                       fi_tmp <- file.info(pathname_tmp)
[13:34:42.090]                       fi <- file.info(pathname)
[13:34:42.090]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:34:42.090]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:34:42.090]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:34:42.090]                         fi[["size"]], fi[["mtime"]])
[13:34:42.090]                       stop(msg)
[13:34:42.090]                     }
[13:34:42.090]                     invisible(pathname)
[13:34:42.090]                   }
[13:34:42.090]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:34:42.090]                     rootPath = tempdir()) 
[13:34:42.090]                   {
[13:34:42.090]                     obj <- list(time = Sys.time(), condition = cond)
[13:34:42.090]                     file <- tempfile(pattern = class(cond)[1], 
[13:34:42.090]                       tmpdir = path, fileext = ".rds")
[13:34:42.090]                     save_rds(obj, file)
[13:34:42.090]                   }
[13:34:42.090]                   saveImmediateCondition(cond, path = "/tmp/RtmplfSa61/.future/immediateConditions")
[13:34:42.090]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:42.090]                   {
[13:34:42.090]                     inherits <- base::inherits
[13:34:42.090]                     invokeRestart <- base::invokeRestart
[13:34:42.090]                     is.null <- base::is.null
[13:34:42.090]                     muffled <- FALSE
[13:34:42.090]                     if (inherits(cond, "message")) {
[13:34:42.090]                       muffled <- grepl(pattern, "muffleMessage")
[13:34:42.090]                       if (muffled) 
[13:34:42.090]                         invokeRestart("muffleMessage")
[13:34:42.090]                     }
[13:34:42.090]                     else if (inherits(cond, "warning")) {
[13:34:42.090]                       muffled <- grepl(pattern, "muffleWarning")
[13:34:42.090]                       if (muffled) 
[13:34:42.090]                         invokeRestart("muffleWarning")
[13:34:42.090]                     }
[13:34:42.090]                     else if (inherits(cond, "condition")) {
[13:34:42.090]                       if (!is.null(pattern)) {
[13:34:42.090]                         computeRestarts <- base::computeRestarts
[13:34:42.090]                         grepl <- base::grepl
[13:34:42.090]                         restarts <- computeRestarts(cond)
[13:34:42.090]                         for (restart in restarts) {
[13:34:42.090]                           name <- restart$name
[13:34:42.090]                           if (is.null(name)) 
[13:34:42.090]                             next
[13:34:42.090]                           if (!grepl(pattern, name)) 
[13:34:42.090]                             next
[13:34:42.090]                           invokeRestart(restart)
[13:34:42.090]                           muffled <- TRUE
[13:34:42.090]                           break
[13:34:42.090]                         }
[13:34:42.090]                       }
[13:34:42.090]                     }
[13:34:42.090]                     invisible(muffled)
[13:34:42.090]                   }
[13:34:42.090]                   muffleCondition(cond)
[13:34:42.090]                 })
[13:34:42.090]             }))
[13:34:42.090]             future::FutureResult(value = ...future.value$value, 
[13:34:42.090]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:42.090]                   ...future.rng), globalenv = if (FALSE) 
[13:34:42.090]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:34:42.090]                     ...future.globalenv.names))
[13:34:42.090]                 else NULL, started = ...future.startTime, version = "1.8")
[13:34:42.090]         }, condition = base::local({
[13:34:42.090]             c <- base::c
[13:34:42.090]             inherits <- base::inherits
[13:34:42.090]             invokeRestart <- base::invokeRestart
[13:34:42.090]             length <- base::length
[13:34:42.090]             list <- base::list
[13:34:42.090]             seq.int <- base::seq.int
[13:34:42.090]             signalCondition <- base::signalCondition
[13:34:42.090]             sys.calls <- base::sys.calls
[13:34:42.090]             `[[` <- base::`[[`
[13:34:42.090]             `+` <- base::`+`
[13:34:42.090]             `<<-` <- base::`<<-`
[13:34:42.090]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:34:42.090]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:34:42.090]                   3L)]
[13:34:42.090]             }
[13:34:42.090]             function(cond) {
[13:34:42.090]                 is_error <- inherits(cond, "error")
[13:34:42.090]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:34:42.090]                   NULL)
[13:34:42.090]                 if (is_error) {
[13:34:42.090]                   sessionInformation <- function() {
[13:34:42.090]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:34:42.090]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:34:42.090]                       search = base::search(), system = base::Sys.info())
[13:34:42.090]                   }
[13:34:42.090]                   ...future.conditions[[length(...future.conditions) + 
[13:34:42.090]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:34:42.090]                     cond$call), session = sessionInformation(), 
[13:34:42.090]                     timestamp = base::Sys.time(), signaled = 0L)
[13:34:42.090]                   signalCondition(cond)
[13:34:42.090]                 }
[13:34:42.090]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:34:42.090]                 "immediateCondition"))) {
[13:34:42.090]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:34:42.090]                   ...future.conditions[[length(...future.conditions) + 
[13:34:42.090]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:34:42.090]                   if (TRUE && !signal) {
[13:34:42.090]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:42.090]                     {
[13:34:42.090]                       inherits <- base::inherits
[13:34:42.090]                       invokeRestart <- base::invokeRestart
[13:34:42.090]                       is.null <- base::is.null
[13:34:42.090]                       muffled <- FALSE
[13:34:42.090]                       if (inherits(cond, "message")) {
[13:34:42.090]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:42.090]                         if (muffled) 
[13:34:42.090]                           invokeRestart("muffleMessage")
[13:34:42.090]                       }
[13:34:42.090]                       else if (inherits(cond, "warning")) {
[13:34:42.090]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:42.090]                         if (muffled) 
[13:34:42.090]                           invokeRestart("muffleWarning")
[13:34:42.090]                       }
[13:34:42.090]                       else if (inherits(cond, "condition")) {
[13:34:42.090]                         if (!is.null(pattern)) {
[13:34:42.090]                           computeRestarts <- base::computeRestarts
[13:34:42.090]                           grepl <- base::grepl
[13:34:42.090]                           restarts <- computeRestarts(cond)
[13:34:42.090]                           for (restart in restarts) {
[13:34:42.090]                             name <- restart$name
[13:34:42.090]                             if (is.null(name)) 
[13:34:42.090]                               next
[13:34:42.090]                             if (!grepl(pattern, name)) 
[13:34:42.090]                               next
[13:34:42.090]                             invokeRestart(restart)
[13:34:42.090]                             muffled <- TRUE
[13:34:42.090]                             break
[13:34:42.090]                           }
[13:34:42.090]                         }
[13:34:42.090]                       }
[13:34:42.090]                       invisible(muffled)
[13:34:42.090]                     }
[13:34:42.090]                     muffleCondition(cond, pattern = "^muffle")
[13:34:42.090]                   }
[13:34:42.090]                 }
[13:34:42.090]                 else {
[13:34:42.090]                   if (TRUE) {
[13:34:42.090]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:42.090]                     {
[13:34:42.090]                       inherits <- base::inherits
[13:34:42.090]                       invokeRestart <- base::invokeRestart
[13:34:42.090]                       is.null <- base::is.null
[13:34:42.090]                       muffled <- FALSE
[13:34:42.090]                       if (inherits(cond, "message")) {
[13:34:42.090]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:42.090]                         if (muffled) 
[13:34:42.090]                           invokeRestart("muffleMessage")
[13:34:42.090]                       }
[13:34:42.090]                       else if (inherits(cond, "warning")) {
[13:34:42.090]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:42.090]                         if (muffled) 
[13:34:42.090]                           invokeRestart("muffleWarning")
[13:34:42.090]                       }
[13:34:42.090]                       else if (inherits(cond, "condition")) {
[13:34:42.090]                         if (!is.null(pattern)) {
[13:34:42.090]                           computeRestarts <- base::computeRestarts
[13:34:42.090]                           grepl <- base::grepl
[13:34:42.090]                           restarts <- computeRestarts(cond)
[13:34:42.090]                           for (restart in restarts) {
[13:34:42.090]                             name <- restart$name
[13:34:42.090]                             if (is.null(name)) 
[13:34:42.090]                               next
[13:34:42.090]                             if (!grepl(pattern, name)) 
[13:34:42.090]                               next
[13:34:42.090]                             invokeRestart(restart)
[13:34:42.090]                             muffled <- TRUE
[13:34:42.090]                             break
[13:34:42.090]                           }
[13:34:42.090]                         }
[13:34:42.090]                       }
[13:34:42.090]                       invisible(muffled)
[13:34:42.090]                     }
[13:34:42.090]                     muffleCondition(cond, pattern = "^muffle")
[13:34:42.090]                   }
[13:34:42.090]                 }
[13:34:42.090]             }
[13:34:42.090]         }))
[13:34:42.090]     }, error = function(ex) {
[13:34:42.090]         base::structure(base::list(value = NULL, visible = NULL, 
[13:34:42.090]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:42.090]                 ...future.rng), started = ...future.startTime, 
[13:34:42.090]             finished = Sys.time(), session_uuid = NA_character_, 
[13:34:42.090]             version = "1.8"), class = "FutureResult")
[13:34:42.090]     }, finally = {
[13:34:42.090]         if (!identical(...future.workdir, getwd())) 
[13:34:42.090]             setwd(...future.workdir)
[13:34:42.090]         {
[13:34:42.090]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:34:42.090]                 ...future.oldOptions$nwarnings <- NULL
[13:34:42.090]             }
[13:34:42.090]             base::options(...future.oldOptions)
[13:34:42.090]             if (.Platform$OS.type == "windows") {
[13:34:42.090]                 old_names <- names(...future.oldEnvVars)
[13:34:42.090]                 envs <- base::Sys.getenv()
[13:34:42.090]                 names <- names(envs)
[13:34:42.090]                 common <- intersect(names, old_names)
[13:34:42.090]                 added <- setdiff(names, old_names)
[13:34:42.090]                 removed <- setdiff(old_names, names)
[13:34:42.090]                 changed <- common[...future.oldEnvVars[common] != 
[13:34:42.090]                   envs[common]]
[13:34:42.090]                 NAMES <- toupper(changed)
[13:34:42.090]                 args <- list()
[13:34:42.090]                 for (kk in seq_along(NAMES)) {
[13:34:42.090]                   name <- changed[[kk]]
[13:34:42.090]                   NAME <- NAMES[[kk]]
[13:34:42.090]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:42.090]                     next
[13:34:42.090]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:42.090]                 }
[13:34:42.090]                 NAMES <- toupper(added)
[13:34:42.090]                 for (kk in seq_along(NAMES)) {
[13:34:42.090]                   name <- added[[kk]]
[13:34:42.090]                   NAME <- NAMES[[kk]]
[13:34:42.090]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:42.090]                     next
[13:34:42.090]                   args[[name]] <- ""
[13:34:42.090]                 }
[13:34:42.090]                 NAMES <- toupper(removed)
[13:34:42.090]                 for (kk in seq_along(NAMES)) {
[13:34:42.090]                   name <- removed[[kk]]
[13:34:42.090]                   NAME <- NAMES[[kk]]
[13:34:42.090]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:42.090]                     next
[13:34:42.090]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:42.090]                 }
[13:34:42.090]                 if (length(args) > 0) 
[13:34:42.090]                   base::do.call(base::Sys.setenv, args = args)
[13:34:42.090]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:34:42.090]             }
[13:34:42.090]             else {
[13:34:42.090]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:34:42.090]             }
[13:34:42.090]             {
[13:34:42.090]                 if (base::length(...future.futureOptionsAdded) > 
[13:34:42.090]                   0L) {
[13:34:42.090]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:34:42.090]                   base::names(opts) <- ...future.futureOptionsAdded
[13:34:42.090]                   base::options(opts)
[13:34:42.090]                 }
[13:34:42.090]                 {
[13:34:42.090]                   {
[13:34:42.090]                     base::options(mc.cores = ...future.mc.cores.old)
[13:34:42.090]                     NULL
[13:34:42.090]                   }
[13:34:42.090]                   options(future.plan = NULL)
[13:34:42.090]                   if (is.na(NA_character_)) 
[13:34:42.090]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:34:42.090]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:34:42.090]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:34:42.090]                     .init = FALSE)
[13:34:42.090]                 }
[13:34:42.090]             }
[13:34:42.090]         }
[13:34:42.090]     })
[13:34:42.090]     if (TRUE) {
[13:34:42.090]         base::sink(type = "output", split = FALSE)
[13:34:42.090]         if (TRUE) {
[13:34:42.090]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:34:42.090]         }
[13:34:42.090]         else {
[13:34:42.090]             ...future.result["stdout"] <- base::list(NULL)
[13:34:42.090]         }
[13:34:42.090]         base::close(...future.stdout)
[13:34:42.090]         ...future.stdout <- NULL
[13:34:42.090]     }
[13:34:42.090]     ...future.result$conditions <- ...future.conditions
[13:34:42.090]     ...future.result$finished <- base::Sys.time()
[13:34:42.090]     ...future.result
[13:34:42.090] }
[13:34:42.092] assign_globals() ...
[13:34:42.092] List of 5
[13:34:42.092]  $ ...future.FUN            :function (...)  
[13:34:42.092]  $ future.call.arguments    : list()
[13:34:42.092]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:42.092]  $ ...future.elements_ii    :List of 2
[13:34:42.092]   ..$ : int 0
[13:34:42.092]   ..$ : int 0
[13:34:42.092]  $ ...future.seeds_ii       :List of 2
[13:34:42.092]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[13:34:42.092]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[13:34:42.092]  $ ...future.globals.maxSize: NULL
[13:34:42.092]  - attr(*, "where")=List of 5
[13:34:42.092]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:34:42.092]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:34:42.092]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:34:42.092]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:34:42.092]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:34:42.092]  - attr(*, "resolved")= logi FALSE
[13:34:42.092]  - attr(*, "total_size")= num 616
[13:34:42.092]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:42.092]  - attr(*, "already-done")= logi TRUE
[13:34:42.098] - reassign environment for ‘...future.FUN’
[13:34:42.098] - copied ‘...future.FUN’ to environment
[13:34:42.098] - copied ‘future.call.arguments’ to environment
[13:34:42.098] - copied ‘...future.elements_ii’ to environment
[13:34:42.098] - copied ‘...future.seeds_ii’ to environment
[13:34:42.098] - copied ‘...future.globals.maxSize’ to environment
[13:34:42.098] assign_globals() ... done
[13:34:42.099] requestCore(): workers = 2
[13:34:42.100] MulticoreFuture started
[13:34:42.101] - Launch lazy future ... done
[13:34:42.101] run() for ‘MulticoreFuture’ ... done
[13:34:42.101] Created future:
[13:34:42.102] plan(): Setting new future strategy stack:
[13:34:42.102] List of future strategies:
[13:34:42.102] 1. sequential:
[13:34:42.102]    - args: function (..., envir = parent.frame())
[13:34:42.102]    - tweaked: FALSE
[13:34:42.102]    - call: NULL
[13:34:42.103] plan(): nbrOfWorkers() = 1
[13:34:42.105] plan(): Setting new future strategy stack:
[13:34:42.105] List of future strategies:
[13:34:42.105] 1. multicore:
[13:34:42.105]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:34:42.105]    - tweaked: FALSE
[13:34:42.105]    - call: plan(strategy)
[13:34:42.102] MulticoreFuture:
[13:34:42.102] Label: ‘future_replicate-1’
[13:34:42.102] Expression:
[13:34:42.102] {
[13:34:42.102]     do.call(function(...) {
[13:34:42.102]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:42.102]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:42.102]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:42.102]             on.exit(options(oopts), add = TRUE)
[13:34:42.102]         }
[13:34:42.102]         {
[13:34:42.102]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:42.102]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:42.102]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:42.102]                   envir = globalenv(), inherits = FALSE)
[13:34:42.102]                 ...future.FUN(...future.X_jj, ...)
[13:34:42.102]             })
[13:34:42.102]         }
[13:34:42.102]     }, args = future.call.arguments)
[13:34:42.102] }
[13:34:42.102] Lazy evaluation: FALSE
[13:34:42.102] Asynchronous evaluation: TRUE
[13:34:42.102] Local evaluation: TRUE
[13:34:42.102] Environment: R_GlobalEnv
[13:34:42.102] Capture standard output: TRUE
[13:34:42.102] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:34:42.102] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:34:42.102] Packages: <none>
[13:34:42.102] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:34:42.102] Resolved: FALSE
[13:34:42.102] Value: <not collected>
[13:34:42.102] Conditions captured: <none>
[13:34:42.102] Early signaling: FALSE
[13:34:42.102] Owner process: b8cf10c3-b112-c8f9-9398-a44000e21728
[13:34:42.102] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:42.115] Chunk #1 of 2 ... DONE
[13:34:42.115] Chunk #2 of 2 ...
[13:34:42.115]  - Finding globals in 'X' for chunk #2 ...
[13:34:42.115] getGlobalsAndPackages() ...
[13:34:42.115] plan(): nbrOfWorkers() = 2
[13:34:42.115] Searching for globals...
[13:34:42.116] 
[13:34:42.116] Searching for globals ... DONE
[13:34:42.118] - globals: [0] <none>
[13:34:42.119] getGlobalsAndPackages() ... DONE
[13:34:42.119]    + additional globals found: [n=0] 
[13:34:42.119]    + additional namespaces needed: [n=0] 
[13:34:42.119]  - Finding globals in 'X' for chunk #2 ... DONE
[13:34:42.119]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:34:42.120]  - seeds: [3] <seeds>
[13:34:42.120]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:42.120] getGlobalsAndPackages() ...
[13:34:42.121] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:42.121] Resolving globals: FALSE
[13:34:42.121] Tweak future expression to call with '...' arguments ...
[13:34:42.122] {
[13:34:42.122]     do.call(function(...) {
[13:34:42.122]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:42.122]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:42.122]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:42.122]             on.exit(options(oopts), add = TRUE)
[13:34:42.122]         }
[13:34:42.122]         {
[13:34:42.122]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:42.122]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:42.122]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:42.122]                   envir = globalenv(), inherits = FALSE)
[13:34:42.122]                 ...future.FUN(...future.X_jj, ...)
[13:34:42.122]             })
[13:34:42.122]         }
[13:34:42.122]     }, args = future.call.arguments)
[13:34:42.122] }
[13:34:42.122] Tweak future expression to call with '...' arguments ... DONE
[13:34:42.123] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:42.123] 
[13:34:42.124] getGlobalsAndPackages() ... DONE
[13:34:42.124] run() for ‘Future’ ...
[13:34:42.125] - state: ‘created’
[13:34:42.125] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:34:42.129] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:42.130] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:34:42.130]   - Field: ‘label’
[13:34:42.130]   - Field: ‘local’
[13:34:42.130]   - Field: ‘owner’
[13:34:42.130]   - Field: ‘envir’
[13:34:42.130]   - Field: ‘workers’
[13:34:42.131]   - Field: ‘packages’
[13:34:42.131]   - Field: ‘gc’
[13:34:42.131]   - Field: ‘job’
[13:34:42.131]   - Field: ‘conditions’
[13:34:42.131]   - Field: ‘expr’
[13:34:42.131]   - Field: ‘uuid’
[13:34:42.132]   - Field: ‘seed’
[13:34:42.132]   - Field: ‘version’
[13:34:42.132]   - Field: ‘result’
[13:34:42.132]   - Field: ‘asynchronous’
[13:34:42.132]   - Field: ‘calls’
[13:34:42.132]   - Field: ‘globals’
[13:34:42.132]   - Field: ‘stdout’
[13:34:42.132]   - Field: ‘earlySignal’
[13:34:42.133]   - Field: ‘lazy’
[13:34:42.133]   - Field: ‘state’
[13:34:42.133] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:34:42.133] - Launch lazy future ...
[13:34:42.133] Packages needed by the future expression (n = 0): <none>
[13:34:42.134] Packages needed by future strategies (n = 0): <none>
[13:34:42.134] {
[13:34:42.134]     {
[13:34:42.134]         {
[13:34:42.134]             ...future.startTime <- base::Sys.time()
[13:34:42.134]             {
[13:34:42.134]                 {
[13:34:42.134]                   {
[13:34:42.134]                     {
[13:34:42.134]                       base::local({
[13:34:42.134]                         has_future <- base::requireNamespace("future", 
[13:34:42.134]                           quietly = TRUE)
[13:34:42.134]                         if (has_future) {
[13:34:42.134]                           ns <- base::getNamespace("future")
[13:34:42.134]                           version <- ns[[".package"]][["version"]]
[13:34:42.134]                           if (is.null(version)) 
[13:34:42.134]                             version <- utils::packageVersion("future")
[13:34:42.134]                         }
[13:34:42.134]                         else {
[13:34:42.134]                           version <- NULL
[13:34:42.134]                         }
[13:34:42.134]                         if (!has_future || version < "1.8.0") {
[13:34:42.134]                           info <- base::c(r_version = base::gsub("R version ", 
[13:34:42.134]                             "", base::R.version$version.string), 
[13:34:42.134]                             platform = base::sprintf("%s (%s-bit)", 
[13:34:42.134]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:34:42.134]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:34:42.134]                               "release", "version")], collapse = " "), 
[13:34:42.134]                             hostname = base::Sys.info()[["nodename"]])
[13:34:42.134]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:34:42.134]                             info)
[13:34:42.134]                           info <- base::paste(info, collapse = "; ")
[13:34:42.134]                           if (!has_future) {
[13:34:42.134]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:34:42.134]                               info)
[13:34:42.134]                           }
[13:34:42.134]                           else {
[13:34:42.134]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:34:42.134]                               info, version)
[13:34:42.134]                           }
[13:34:42.134]                           base::stop(msg)
[13:34:42.134]                         }
[13:34:42.134]                       })
[13:34:42.134]                     }
[13:34:42.134]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:34:42.134]                     base::options(mc.cores = 1L)
[13:34:42.134]                   }
[13:34:42.134]                   ...future.strategy.old <- future::plan("list")
[13:34:42.134]                   options(future.plan = NULL)
[13:34:42.134]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:34:42.134]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:34:42.134]                 }
[13:34:42.134]                 ...future.workdir <- getwd()
[13:34:42.134]             }
[13:34:42.134]             ...future.oldOptions <- base::as.list(base::.Options)
[13:34:42.134]             ...future.oldEnvVars <- base::Sys.getenv()
[13:34:42.134]         }
[13:34:42.134]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:34:42.134]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:34:42.134]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:34:42.134]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:34:42.134]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:34:42.134]             future.stdout.windows.reencode = NULL, width = 80L)
[13:34:42.134]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:34:42.134]             base::names(...future.oldOptions))
[13:34:42.134]     }
[13:34:42.134]     if (FALSE) {
[13:34:42.134]     }
[13:34:42.134]     else {
[13:34:42.134]         if (TRUE) {
[13:34:42.134]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:34:42.134]                 open = "w")
[13:34:42.134]         }
[13:34:42.134]         else {
[13:34:42.134]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:34:42.134]                 windows = "NUL", "/dev/null"), open = "w")
[13:34:42.134]         }
[13:34:42.134]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:34:42.134]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:34:42.134]             base::sink(type = "output", split = FALSE)
[13:34:42.134]             base::close(...future.stdout)
[13:34:42.134]         }, add = TRUE)
[13:34:42.134]     }
[13:34:42.134]     ...future.frame <- base::sys.nframe()
[13:34:42.134]     ...future.conditions <- base::list()
[13:34:42.134]     ...future.rng <- base::globalenv()$.Random.seed
[13:34:42.134]     if (FALSE) {
[13:34:42.134]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:34:42.134]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:34:42.134]     }
[13:34:42.134]     ...future.result <- base::tryCatch({
[13:34:42.134]         base::withCallingHandlers({
[13:34:42.134]             ...future.value <- base::withVisible(base::local({
[13:34:42.134]                 withCallingHandlers({
[13:34:42.134]                   {
[13:34:42.134]                     do.call(function(...) {
[13:34:42.134]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:42.134]                       if (!identical(...future.globals.maxSize.org, 
[13:34:42.134]                         ...future.globals.maxSize)) {
[13:34:42.134]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:42.134]                         on.exit(options(oopts), add = TRUE)
[13:34:42.134]                       }
[13:34:42.134]                       {
[13:34:42.134]                         lapply(seq_along(...future.elements_ii), 
[13:34:42.134]                           FUN = function(jj) {
[13:34:42.134]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:42.134]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:42.134]                               envir = globalenv(), inherits = FALSE)
[13:34:42.134]                             ...future.FUN(...future.X_jj, ...)
[13:34:42.134]                           })
[13:34:42.134]                       }
[13:34:42.134]                     }, args = future.call.arguments)
[13:34:42.134]                   }
[13:34:42.134]                 }, immediateCondition = function(cond) {
[13:34:42.134]                   save_rds <- function (object, pathname, ...) 
[13:34:42.134]                   {
[13:34:42.134]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:34:42.134]                     if (file_test("-f", pathname_tmp)) {
[13:34:42.134]                       fi_tmp <- file.info(pathname_tmp)
[13:34:42.134]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:34:42.134]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:34:42.134]                         fi_tmp[["mtime"]])
[13:34:42.134]                     }
[13:34:42.134]                     tryCatch({
[13:34:42.134]                       saveRDS(object, file = pathname_tmp, ...)
[13:34:42.134]                     }, error = function(ex) {
[13:34:42.134]                       msg <- conditionMessage(ex)
[13:34:42.134]                       fi_tmp <- file.info(pathname_tmp)
[13:34:42.134]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:34:42.134]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:34:42.134]                         fi_tmp[["mtime"]], msg)
[13:34:42.134]                       ex$message <- msg
[13:34:42.134]                       stop(ex)
[13:34:42.134]                     })
[13:34:42.134]                     stopifnot(file_test("-f", pathname_tmp))
[13:34:42.134]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:34:42.134]                     if (!res || file_test("-f", pathname_tmp)) {
[13:34:42.134]                       fi_tmp <- file.info(pathname_tmp)
[13:34:42.134]                       fi <- file.info(pathname)
[13:34:42.134]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:34:42.134]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:34:42.134]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:34:42.134]                         fi[["size"]], fi[["mtime"]])
[13:34:42.134]                       stop(msg)
[13:34:42.134]                     }
[13:34:42.134]                     invisible(pathname)
[13:34:42.134]                   }
[13:34:42.134]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:34:42.134]                     rootPath = tempdir()) 
[13:34:42.134]                   {
[13:34:42.134]                     obj <- list(time = Sys.time(), condition = cond)
[13:34:42.134]                     file <- tempfile(pattern = class(cond)[1], 
[13:34:42.134]                       tmpdir = path, fileext = ".rds")
[13:34:42.134]                     save_rds(obj, file)
[13:34:42.134]                   }
[13:34:42.134]                   saveImmediateCondition(cond, path = "/tmp/RtmplfSa61/.future/immediateConditions")
[13:34:42.134]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:42.134]                   {
[13:34:42.134]                     inherits <- base::inherits
[13:34:42.134]                     invokeRestart <- base::invokeRestart
[13:34:42.134]                     is.null <- base::is.null
[13:34:42.134]                     muffled <- FALSE
[13:34:42.134]                     if (inherits(cond, "message")) {
[13:34:42.134]                       muffled <- grepl(pattern, "muffleMessage")
[13:34:42.134]                       if (muffled) 
[13:34:42.134]                         invokeRestart("muffleMessage")
[13:34:42.134]                     }
[13:34:42.134]                     else if (inherits(cond, "warning")) {
[13:34:42.134]                       muffled <- grepl(pattern, "muffleWarning")
[13:34:42.134]                       if (muffled) 
[13:34:42.134]                         invokeRestart("muffleWarning")
[13:34:42.134]                     }
[13:34:42.134]                     else if (inherits(cond, "condition")) {
[13:34:42.134]                       if (!is.null(pattern)) {
[13:34:42.134]                         computeRestarts <- base::computeRestarts
[13:34:42.134]                         grepl <- base::grepl
[13:34:42.134]                         restarts <- computeRestarts(cond)
[13:34:42.134]                         for (restart in restarts) {
[13:34:42.134]                           name <- restart$name
[13:34:42.134]                           if (is.null(name)) 
[13:34:42.134]                             next
[13:34:42.134]                           if (!grepl(pattern, name)) 
[13:34:42.134]                             next
[13:34:42.134]                           invokeRestart(restart)
[13:34:42.134]                           muffled <- TRUE
[13:34:42.134]                           break
[13:34:42.134]                         }
[13:34:42.134]                       }
[13:34:42.134]                     }
[13:34:42.134]                     invisible(muffled)
[13:34:42.134]                   }
[13:34:42.134]                   muffleCondition(cond)
[13:34:42.134]                 })
[13:34:42.134]             }))
[13:34:42.134]             future::FutureResult(value = ...future.value$value, 
[13:34:42.134]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:42.134]                   ...future.rng), globalenv = if (FALSE) 
[13:34:42.134]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:34:42.134]                     ...future.globalenv.names))
[13:34:42.134]                 else NULL, started = ...future.startTime, version = "1.8")
[13:34:42.134]         }, condition = base::local({
[13:34:42.134]             c <- base::c
[13:34:42.134]             inherits <- base::inherits
[13:34:42.134]             invokeRestart <- base::invokeRestart
[13:34:42.134]             length <- base::length
[13:34:42.134]             list <- base::list
[13:34:42.134]             seq.int <- base::seq.int
[13:34:42.134]             signalCondition <- base::signalCondition
[13:34:42.134]             sys.calls <- base::sys.calls
[13:34:42.134]             `[[` <- base::`[[`
[13:34:42.134]             `+` <- base::`+`
[13:34:42.134]             `<<-` <- base::`<<-`
[13:34:42.134]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:34:42.134]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:34:42.134]                   3L)]
[13:34:42.134]             }
[13:34:42.134]             function(cond) {
[13:34:42.134]                 is_error <- inherits(cond, "error")
[13:34:42.134]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:34:42.134]                   NULL)
[13:34:42.134]                 if (is_error) {
[13:34:42.134]                   sessionInformation <- function() {
[13:34:42.134]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:34:42.134]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:34:42.134]                       search = base::search(), system = base::Sys.info())
[13:34:42.134]                   }
[13:34:42.134]                   ...future.conditions[[length(...future.conditions) + 
[13:34:42.134]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:34:42.134]                     cond$call), session = sessionInformation(), 
[13:34:42.134]                     timestamp = base::Sys.time(), signaled = 0L)
[13:34:42.134]                   signalCondition(cond)
[13:34:42.134]                 }
[13:34:42.134]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:34:42.134]                 "immediateCondition"))) {
[13:34:42.134]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:34:42.134]                   ...future.conditions[[length(...future.conditions) + 
[13:34:42.134]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:34:42.134]                   if (TRUE && !signal) {
[13:34:42.134]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:42.134]                     {
[13:34:42.134]                       inherits <- base::inherits
[13:34:42.134]                       invokeRestart <- base::invokeRestart
[13:34:42.134]                       is.null <- base::is.null
[13:34:42.134]                       muffled <- FALSE
[13:34:42.134]                       if (inherits(cond, "message")) {
[13:34:42.134]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:42.134]                         if (muffled) 
[13:34:42.134]                           invokeRestart("muffleMessage")
[13:34:42.134]                       }
[13:34:42.134]                       else if (inherits(cond, "warning")) {
[13:34:42.134]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:42.134]                         if (muffled) 
[13:34:42.134]                           invokeRestart("muffleWarning")
[13:34:42.134]                       }
[13:34:42.134]                       else if (inherits(cond, "condition")) {
[13:34:42.134]                         if (!is.null(pattern)) {
[13:34:42.134]                           computeRestarts <- base::computeRestarts
[13:34:42.134]                           grepl <- base::grepl
[13:34:42.134]                           restarts <- computeRestarts(cond)
[13:34:42.134]                           for (restart in restarts) {
[13:34:42.134]                             name <- restart$name
[13:34:42.134]                             if (is.null(name)) 
[13:34:42.134]                               next
[13:34:42.134]                             if (!grepl(pattern, name)) 
[13:34:42.134]                               next
[13:34:42.134]                             invokeRestart(restart)
[13:34:42.134]                             muffled <- TRUE
[13:34:42.134]                             break
[13:34:42.134]                           }
[13:34:42.134]                         }
[13:34:42.134]                       }
[13:34:42.134]                       invisible(muffled)
[13:34:42.134]                     }
[13:34:42.134]                     muffleCondition(cond, pattern = "^muffle")
[13:34:42.134]                   }
[13:34:42.134]                 }
[13:34:42.134]                 else {
[13:34:42.134]                   if (TRUE) {
[13:34:42.134]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:42.134]                     {
[13:34:42.134]                       inherits <- base::inherits
[13:34:42.134]                       invokeRestart <- base::invokeRestart
[13:34:42.134]                       is.null <- base::is.null
[13:34:42.134]                       muffled <- FALSE
[13:34:42.134]                       if (inherits(cond, "message")) {
[13:34:42.134]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:42.134]                         if (muffled) 
[13:34:42.134]                           invokeRestart("muffleMessage")
[13:34:42.134]                       }
[13:34:42.134]                       else if (inherits(cond, "warning")) {
[13:34:42.134]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:42.134]                         if (muffled) 
[13:34:42.134]                           invokeRestart("muffleWarning")
[13:34:42.134]                       }
[13:34:42.134]                       else if (inherits(cond, "condition")) {
[13:34:42.134]                         if (!is.null(pattern)) {
[13:34:42.134]                           computeRestarts <- base::computeRestarts
[13:34:42.134]                           grepl <- base::grepl
[13:34:42.134]                           restarts <- computeRestarts(cond)
[13:34:42.134]                           for (restart in restarts) {
[13:34:42.134]                             name <- restart$name
[13:34:42.134]                             if (is.null(name)) 
[13:34:42.134]                               next
[13:34:42.134]                             if (!grepl(pattern, name)) 
[13:34:42.134]                               next
[13:34:42.134]                             invokeRestart(restart)
[13:34:42.134]                             muffled <- TRUE
[13:34:42.134]                             break
[13:34:42.134]                           }
[13:34:42.134]                         }
[13:34:42.134]                       }
[13:34:42.134]                       invisible(muffled)
[13:34:42.134]                     }
[13:34:42.134]                     muffleCondition(cond, pattern = "^muffle")
[13:34:42.134]                   }
[13:34:42.134]                 }
[13:34:42.134]             }
[13:34:42.134]         }))
[13:34:42.134]     }, error = function(ex) {
[13:34:42.134]         base::structure(base::list(value = NULL, visible = NULL, 
[13:34:42.134]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:42.134]                 ...future.rng), started = ...future.startTime, 
[13:34:42.134]             finished = Sys.time(), session_uuid = NA_character_, 
[13:34:42.134]             version = "1.8"), class = "FutureResult")
[13:34:42.134]     }, finally = {
[13:34:42.134]         if (!identical(...future.workdir, getwd())) 
[13:34:42.134]             setwd(...future.workdir)
[13:34:42.134]         {
[13:34:42.134]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:34:42.134]                 ...future.oldOptions$nwarnings <- NULL
[13:34:42.134]             }
[13:34:42.134]             base::options(...future.oldOptions)
[13:34:42.134]             if (.Platform$OS.type == "windows") {
[13:34:42.134]                 old_names <- names(...future.oldEnvVars)
[13:34:42.134]                 envs <- base::Sys.getenv()
[13:34:42.134]                 names <- names(envs)
[13:34:42.134]                 common <- intersect(names, old_names)
[13:34:42.134]                 added <- setdiff(names, old_names)
[13:34:42.134]                 removed <- setdiff(old_names, names)
[13:34:42.134]                 changed <- common[...future.oldEnvVars[common] != 
[13:34:42.134]                   envs[common]]
[13:34:42.134]                 NAMES <- toupper(changed)
[13:34:42.134]                 args <- list()
[13:34:42.134]                 for (kk in seq_along(NAMES)) {
[13:34:42.134]                   name <- changed[[kk]]
[13:34:42.134]                   NAME <- NAMES[[kk]]
[13:34:42.134]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:42.134]                     next
[13:34:42.134]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:42.134]                 }
[13:34:42.134]                 NAMES <- toupper(added)
[13:34:42.134]                 for (kk in seq_along(NAMES)) {
[13:34:42.134]                   name <- added[[kk]]
[13:34:42.134]                   NAME <- NAMES[[kk]]
[13:34:42.134]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:42.134]                     next
[13:34:42.134]                   args[[name]] <- ""
[13:34:42.134]                 }
[13:34:42.134]                 NAMES <- toupper(removed)
[13:34:42.134]                 for (kk in seq_along(NAMES)) {
[13:34:42.134]                   name <- removed[[kk]]
[13:34:42.134]                   NAME <- NAMES[[kk]]
[13:34:42.134]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:42.134]                     next
[13:34:42.134]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:42.134]                 }
[13:34:42.134]                 if (length(args) > 0) 
[13:34:42.134]                   base::do.call(base::Sys.setenv, args = args)
[13:34:42.134]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:34:42.134]             }
[13:34:42.134]             else {
[13:34:42.134]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:34:42.134]             }
[13:34:42.134]             {
[13:34:42.134]                 if (base::length(...future.futureOptionsAdded) > 
[13:34:42.134]                   0L) {
[13:34:42.134]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:34:42.134]                   base::names(opts) <- ...future.futureOptionsAdded
[13:34:42.134]                   base::options(opts)
[13:34:42.134]                 }
[13:34:42.134]                 {
[13:34:42.134]                   {
[13:34:42.134]                     base::options(mc.cores = ...future.mc.cores.old)
[13:34:42.134]                     NULL
[13:34:42.134]                   }
[13:34:42.134]                   options(future.plan = NULL)
[13:34:42.134]                   if (is.na(NA_character_)) 
[13:34:42.134]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:34:42.134]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:34:42.134]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:34:42.134]                     .init = FALSE)
[13:34:42.134]                 }
[13:34:42.134]             }
[13:34:42.134]         }
[13:34:42.134]     })
[13:34:42.134]     if (TRUE) {
[13:34:42.134]         base::sink(type = "output", split = FALSE)
[13:34:42.134]         if (TRUE) {
[13:34:42.134]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:34:42.134]         }
[13:34:42.134]         else {
[13:34:42.134]             ...future.result["stdout"] <- base::list(NULL)
[13:34:42.134]         }
[13:34:42.134]         base::close(...future.stdout)
[13:34:42.134]         ...future.stdout <- NULL
[13:34:42.134]     }
[13:34:42.134]     ...future.result$conditions <- ...future.conditions
[13:34:42.134]     ...future.result$finished <- base::Sys.time()
[13:34:42.134]     ...future.result
[13:34:42.134] }
[13:34:42.137] assign_globals() ...
[13:34:42.137] List of 5
[13:34:42.137]  $ ...future.FUN            :function (...)  
[13:34:42.137]  $ future.call.arguments    : list()
[13:34:42.137]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:42.137]  $ ...future.elements_ii    :List of 3
[13:34:42.137]   ..$ : int 0
[13:34:42.137]   ..$ : int 0
[13:34:42.137]   ..$ : int 0
[13:34:42.137]  $ ...future.seeds_ii       :List of 3
[13:34:42.137]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[13:34:42.137]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[13:34:42.137]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[13:34:42.137]  $ ...future.globals.maxSize: NULL
[13:34:42.137]  - attr(*, "where")=List of 5
[13:34:42.137]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:34:42.137]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:34:42.137]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:34:42.137]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:34:42.137]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:34:42.137]  - attr(*, "resolved")= logi FALSE
[13:34:42.137]  - attr(*, "total_size")= num 616
[13:34:42.137]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:42.137]  - attr(*, "already-done")= logi TRUE
[13:34:42.145] - reassign environment for ‘...future.FUN’
[13:34:42.145] - copied ‘...future.FUN’ to environment
[13:34:42.146] - copied ‘future.call.arguments’ to environment
[13:34:42.146] - copied ‘...future.elements_ii’ to environment
[13:34:42.146] - copied ‘...future.seeds_ii’ to environment
[13:34:42.146] - copied ‘...future.globals.maxSize’ to environment
[13:34:42.146] assign_globals() ... done
[13:34:42.146] requestCore(): workers = 2
[13:34:42.148] MulticoreFuture started
[13:34:42.149] - Launch lazy future ... done
[13:34:42.149] run() for ‘MulticoreFuture’ ... done
[13:34:42.149] Created future:
[13:34:42.150] plan(): Setting new future strategy stack:
[13:34:42.150] List of future strategies:
[13:34:42.150] 1. sequential:
[13:34:42.150]    - args: function (..., envir = parent.frame())
[13:34:42.150]    - tweaked: FALSE
[13:34:42.150]    - call: NULL
[13:34:42.151] plan(): nbrOfWorkers() = 1
[13:34:42.153] plan(): Setting new future strategy stack:
[13:34:42.153] List of future strategies:
[13:34:42.153] 1. multicore:
[13:34:42.153]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:34:42.153]    - tweaked: FALSE
[13:34:42.153]    - call: plan(strategy)
[13:34:42.159] plan(): nbrOfWorkers() = 2
[13:34:42.150] MulticoreFuture:
[13:34:42.150] Label: ‘future_replicate-2’
[13:34:42.150] Expression:
[13:34:42.150] {
[13:34:42.150]     do.call(function(...) {
[13:34:42.150]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:42.150]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:42.150]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:42.150]             on.exit(options(oopts), add = TRUE)
[13:34:42.150]         }
[13:34:42.150]         {
[13:34:42.150]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:42.150]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:42.150]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:42.150]                   envir = globalenv(), inherits = FALSE)
[13:34:42.150]                 ...future.FUN(...future.X_jj, ...)
[13:34:42.150]             })
[13:34:42.150]         }
[13:34:42.150]     }, args = future.call.arguments)
[13:34:42.150] }
[13:34:42.150] Lazy evaluation: FALSE
[13:34:42.150] Asynchronous evaluation: TRUE
[13:34:42.150] Local evaluation: TRUE
[13:34:42.150] Environment: R_GlobalEnv
[13:34:42.150] Capture standard output: TRUE
[13:34:42.150] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:34:42.150] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:34:42.150] Packages: <none>
[13:34:42.150] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:34:42.150] Resolved: TRUE
[13:34:42.150] Value: <not collected>
[13:34:42.150] Conditions captured: <none>
[13:34:42.150] Early signaling: FALSE
[13:34:42.150] Owner process: b8cf10c3-b112-c8f9-9398-a44000e21728
[13:34:42.150] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:42.160] Chunk #2 of 2 ... DONE
[13:34:42.160] Launching 2 futures (chunks) ... DONE
[13:34:42.160] Resolving 2 futures (chunks) ...
[13:34:42.160] resolve() on list ...
[13:34:42.160]  recursive: 0
[13:34:42.160]  length: 2
[13:34:42.161] 
[13:34:42.161] Future #1
[13:34:42.161] result() for MulticoreFuture ...
[13:34:42.162] result() for MulticoreFuture ...
[13:34:42.162] result() for MulticoreFuture ... done
[13:34:42.162] result() for MulticoreFuture ... done
[13:34:42.162] result() for MulticoreFuture ...
[13:34:42.163] result() for MulticoreFuture ... done
[13:34:42.163] signalConditionsASAP(MulticoreFuture, pos=1) ...
[13:34:42.163] - nx: 2
[13:34:42.163] - relay: TRUE
[13:34:42.163] - stdout: TRUE
[13:34:42.163] - signal: TRUE
[13:34:42.163] - resignal: FALSE
[13:34:42.164] - force: TRUE
[13:34:42.164] - relayed: [n=2] FALSE, FALSE
[13:34:42.164] - queued futures: [n=2] FALSE, FALSE
[13:34:42.164]  - until=1
[13:34:42.164]  - relaying element #1
[13:34:42.164] result() for MulticoreFuture ...
[13:34:42.164] result() for MulticoreFuture ... done
[13:34:42.165] result() for MulticoreFuture ...
[13:34:42.165] result() for MulticoreFuture ... done
[13:34:42.165] result() for MulticoreFuture ...
[13:34:42.165] result() for MulticoreFuture ... done
[13:34:42.165] result() for MulticoreFuture ...
[13:34:42.165] result() for MulticoreFuture ... done
[13:34:42.166] - relayed: [n=2] TRUE, FALSE
[13:34:42.166] - queued futures: [n=2] TRUE, FALSE
[13:34:42.166] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[13:34:42.166]  length: 1 (resolved future 1)
[13:34:42.166] Future #2
[13:34:42.166] result() for MulticoreFuture ...
[13:34:42.167] result() for MulticoreFuture ...
[13:34:42.167] result() for MulticoreFuture ... done
[13:34:42.168] result() for MulticoreFuture ... done
[13:34:42.168] result() for MulticoreFuture ...
[13:34:42.168] result() for MulticoreFuture ... done
[13:34:42.168] signalConditionsASAP(MulticoreFuture, pos=2) ...
[13:34:42.168] - nx: 2
[13:34:42.168] - relay: TRUE
[13:34:42.168] - stdout: TRUE
[13:34:42.169] - signal: TRUE
[13:34:42.169] - resignal: FALSE
[13:34:42.169] - force: TRUE
[13:34:42.169] - relayed: [n=2] TRUE, FALSE
[13:34:42.171] - queued futures: [n=2] TRUE, FALSE
[13:34:42.171]  - until=2
[13:34:42.172]  - relaying element #2
[13:34:42.172] result() for MulticoreFuture ...
[13:34:42.172] result() for MulticoreFuture ... done
[13:34:42.172] result() for MulticoreFuture ...
[13:34:42.172] result() for MulticoreFuture ... done
[13:34:42.173] result() for MulticoreFuture ...
[13:34:42.173] result() for MulticoreFuture ... done
[13:34:42.173] result() for MulticoreFuture ...
[13:34:42.173] result() for MulticoreFuture ... done
[13:34:42.173] - relayed: [n=2] TRUE, TRUE
[13:34:42.173] - queued futures: [n=2] TRUE, TRUE
[13:34:42.173] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[13:34:42.174]  length: 0 (resolved future 2)
[13:34:42.174] Relaying remaining futures
[13:34:42.174] signalConditionsASAP(NULL, pos=0) ...
[13:34:42.174] - nx: 2
[13:34:42.174] - relay: TRUE
[13:34:42.174] - stdout: TRUE
[13:34:42.174] - signal: TRUE
[13:34:42.175] - resignal: FALSE
[13:34:42.175] - force: TRUE
[13:34:42.175] - relayed: [n=2] TRUE, TRUE
[13:34:42.175] - queued futures: [n=2] TRUE, TRUE
 - flush all
[13:34:42.175] - relayed: [n=2] TRUE, TRUE
[13:34:42.175] - queued futures: [n=2] TRUE, TRUE
[13:34:42.175] signalConditionsASAP(NULL, pos=0) ... done
[13:34:42.175] resolve() on list ... DONE
[13:34:42.175] result() for MulticoreFuture ...
[13:34:42.176] result() for MulticoreFuture ... done
[13:34:42.176] result() for MulticoreFuture ...
[13:34:42.176] result() for MulticoreFuture ... done
[13:34:42.176] result() for MulticoreFuture ...
[13:34:42.176] result() for MulticoreFuture ... done
[13:34:42.176] result() for MulticoreFuture ...
[13:34:42.176] result() for MulticoreFuture ... done
[13:34:42.176]  - Number of value chunks collected: 2
[13:34:42.177] Resolving 2 futures (chunks) ... DONE
[13:34:42.177] Reducing values from 2 chunks ...
[13:34:42.177]  - Number of values collected after concatenation: 5
[13:34:42.177]  - Number of values expected: 5
[13:34:42.177] Reducing values from 2 chunks ... DONE
[13:34:42.177] future_lapply() ... DONE
[13:34:42.177] future_lapply() ...
[13:34:42.178] Generating random seeds ...
[13:34:42.178] Generating random seed streams for 5 elements ...
[13:34:42.178] Generating random seed streams for 5 elements ... DONE
[13:34:42.178] Generating random seeds ... DONE
[13:34:42.179] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:34:42.183] Number of chunks: 2
[13:34:42.183] getGlobalsAndPackagesXApply() ...
[13:34:42.183]  - future.globals: TRUE
[13:34:42.183] getGlobalsAndPackages() ...
[13:34:42.183] Searching for globals...
[13:34:42.185] - globals found: [2] ‘FUN’, ‘sample’
[13:34:42.185] Searching for globals ... DONE
[13:34:42.185] Resolving globals: FALSE
[13:34:42.185] The total size of the 1 globals is 616 bytes (616 bytes)
[13:34:42.186] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:34:42.186] - globals: [1] ‘FUN’
[13:34:42.186] 
[13:34:42.186] getGlobalsAndPackages() ... DONE
[13:34:42.186]  - globals found/used: [n=1] ‘FUN’
[13:34:42.186]  - needed namespaces: [n=0] 
[13:34:42.186] Finding globals ... DONE
[13:34:42.186]  - use_args: TRUE
[13:34:42.187]  - Getting '...' globals ...
[13:34:42.187] resolve() on list ...
[13:34:42.187]  recursive: 0
[13:34:42.187]  length: 1
[13:34:42.187]  elements: ‘...’
[13:34:42.187]  length: 0 (resolved future 1)
[13:34:42.187] resolve() on list ... DONE
[13:34:42.188]    - '...' content: [n=0] 
[13:34:42.188] List of 1
[13:34:42.188]  $ ...: list()
[13:34:42.188]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:42.188]  - attr(*, "where")=List of 1
[13:34:42.188]   ..$ ...:<environment: 0x5627bdbe3b28> 
[13:34:42.188]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:42.188]  - attr(*, "resolved")= logi TRUE
[13:34:42.188]  - attr(*, "total_size")= num NA
[13:34:42.191]  - Getting '...' globals ... DONE
[13:34:42.191] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:34:42.191] List of 2
[13:34:42.191]  $ ...future.FUN:function (...)  
[13:34:42.191]  $ ...          : list()
[13:34:42.191]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:42.191]  - attr(*, "where")=List of 2
[13:34:42.191]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:34:42.191]   ..$ ...          :<environment: 0x5627bdbe3b28> 
[13:34:42.191]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:42.191]  - attr(*, "resolved")= logi FALSE
[13:34:42.191]  - attr(*, "total_size")= num 616
[13:34:42.194] Packages to be attached in all futures: [n=0] 
[13:34:42.194] getGlobalsAndPackagesXApply() ... DONE
[13:34:42.194] Number of futures (= number of chunks): 2
[13:34:42.194] Launching 2 futures (chunks) ...
[13:34:42.194] Chunk #1 of 2 ...
[13:34:42.194]  - Finding globals in 'X' for chunk #1 ...
[13:34:42.194] getGlobalsAndPackages() ...
[13:34:42.195] Searching for globals...
[13:34:42.195] 
[13:34:42.195] Searching for globals ... DONE
[13:34:42.195] - globals: [0] <none>
[13:34:42.195] getGlobalsAndPackages() ... DONE
[13:34:42.195]    + additional globals found: [n=0] 
[13:34:42.195]    + additional namespaces needed: [n=0] 
[13:34:42.195]  - Finding globals in 'X' for chunk #1 ... DONE
[13:34:42.195]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:34:42.195]  - seeds: [2] <seeds>
[13:34:42.196]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:42.196] getGlobalsAndPackages() ...
[13:34:42.196] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:42.196] Resolving globals: FALSE
[13:34:42.196] Tweak future expression to call with '...' arguments ...
[13:34:42.196] {
[13:34:42.196]     do.call(function(...) {
[13:34:42.196]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:42.196]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:42.196]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:42.196]             on.exit(options(oopts), add = TRUE)
[13:34:42.196]         }
[13:34:42.196]         {
[13:34:42.196]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:42.196]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:42.196]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:42.196]                   envir = globalenv(), inherits = FALSE)
[13:34:42.196]                 ...future.FUN(...future.X_jj, ...)
[13:34:42.196]             })
[13:34:42.196]         }
[13:34:42.196]     }, args = future.call.arguments)
[13:34:42.196] }
[13:34:42.196] Tweak future expression to call with '...' arguments ... DONE
[13:34:42.197] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:42.197] 
[13:34:42.197] getGlobalsAndPackages() ... DONE
[13:34:42.197] run() for ‘Future’ ...
[13:34:42.197] - state: ‘created’
[13:34:42.197] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:34:42.201] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:42.201] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:34:42.201]   - Field: ‘label’
[13:34:42.201]   - Field: ‘local’
[13:34:42.201]   - Field: ‘owner’
[13:34:42.202]   - Field: ‘envir’
[13:34:42.203]   - Field: ‘workers’
[13:34:42.203]   - Field: ‘packages’
[13:34:42.203]   - Field: ‘gc’
[13:34:42.203]   - Field: ‘job’
[13:34:42.203]   - Field: ‘conditions’
[13:34:42.204]   - Field: ‘expr’
[13:34:42.204]   - Field: ‘uuid’
[13:34:42.204]   - Field: ‘seed’
[13:34:42.204]   - Field: ‘version’
[13:34:42.204]   - Field: ‘result’
[13:34:42.204]   - Field: ‘asynchronous’
[13:34:42.204]   - Field: ‘calls’
[13:34:42.204]   - Field: ‘globals’
[13:34:42.204]   - Field: ‘stdout’
[13:34:42.204]   - Field: ‘earlySignal’
[13:34:42.205]   - Field: ‘lazy’
[13:34:42.205]   - Field: ‘state’
[13:34:42.205] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:34:42.205] - Launch lazy future ...
[13:34:42.205] Packages needed by the future expression (n = 0): <none>
[13:34:42.205] Packages needed by future strategies (n = 0): <none>
[13:34:42.206] {
[13:34:42.206]     {
[13:34:42.206]         {
[13:34:42.206]             ...future.startTime <- base::Sys.time()
[13:34:42.206]             {
[13:34:42.206]                 {
[13:34:42.206]                   {
[13:34:42.206]                     {
[13:34:42.206]                       base::local({
[13:34:42.206]                         has_future <- base::requireNamespace("future", 
[13:34:42.206]                           quietly = TRUE)
[13:34:42.206]                         if (has_future) {
[13:34:42.206]                           ns <- base::getNamespace("future")
[13:34:42.206]                           version <- ns[[".package"]][["version"]]
[13:34:42.206]                           if (is.null(version)) 
[13:34:42.206]                             version <- utils::packageVersion("future")
[13:34:42.206]                         }
[13:34:42.206]                         else {
[13:34:42.206]                           version <- NULL
[13:34:42.206]                         }
[13:34:42.206]                         if (!has_future || version < "1.8.0") {
[13:34:42.206]                           info <- base::c(r_version = base::gsub("R version ", 
[13:34:42.206]                             "", base::R.version$version.string), 
[13:34:42.206]                             platform = base::sprintf("%s (%s-bit)", 
[13:34:42.206]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:34:42.206]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:34:42.206]                               "release", "version")], collapse = " "), 
[13:34:42.206]                             hostname = base::Sys.info()[["nodename"]])
[13:34:42.206]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:34:42.206]                             info)
[13:34:42.206]                           info <- base::paste(info, collapse = "; ")
[13:34:42.206]                           if (!has_future) {
[13:34:42.206]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:34:42.206]                               info)
[13:34:42.206]                           }
[13:34:42.206]                           else {
[13:34:42.206]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:34:42.206]                               info, version)
[13:34:42.206]                           }
[13:34:42.206]                           base::stop(msg)
[13:34:42.206]                         }
[13:34:42.206]                       })
[13:34:42.206]                     }
[13:34:42.206]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:34:42.206]                     base::options(mc.cores = 1L)
[13:34:42.206]                   }
[13:34:42.206]                   ...future.strategy.old <- future::plan("list")
[13:34:42.206]                   options(future.plan = NULL)
[13:34:42.206]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:34:42.206]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:34:42.206]                 }
[13:34:42.206]                 ...future.workdir <- getwd()
[13:34:42.206]             }
[13:34:42.206]             ...future.oldOptions <- base::as.list(base::.Options)
[13:34:42.206]             ...future.oldEnvVars <- base::Sys.getenv()
[13:34:42.206]         }
[13:34:42.206]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:34:42.206]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:34:42.206]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:34:42.206]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:34:42.206]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:34:42.206]             future.stdout.windows.reencode = NULL, width = 80L)
[13:34:42.206]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:34:42.206]             base::names(...future.oldOptions))
[13:34:42.206]     }
[13:34:42.206]     if (FALSE) {
[13:34:42.206]     }
[13:34:42.206]     else {
[13:34:42.206]         if (TRUE) {
[13:34:42.206]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:34:42.206]                 open = "w")
[13:34:42.206]         }
[13:34:42.206]         else {
[13:34:42.206]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:34:42.206]                 windows = "NUL", "/dev/null"), open = "w")
[13:34:42.206]         }
[13:34:42.206]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:34:42.206]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:34:42.206]             base::sink(type = "output", split = FALSE)
[13:34:42.206]             base::close(...future.stdout)
[13:34:42.206]         }, add = TRUE)
[13:34:42.206]     }
[13:34:42.206]     ...future.frame <- base::sys.nframe()
[13:34:42.206]     ...future.conditions <- base::list()
[13:34:42.206]     ...future.rng <- base::globalenv()$.Random.seed
[13:34:42.206]     if (FALSE) {
[13:34:42.206]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:34:42.206]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:34:42.206]     }
[13:34:42.206]     ...future.result <- base::tryCatch({
[13:34:42.206]         base::withCallingHandlers({
[13:34:42.206]             ...future.value <- base::withVisible(base::local({
[13:34:42.206]                 withCallingHandlers({
[13:34:42.206]                   {
[13:34:42.206]                     do.call(function(...) {
[13:34:42.206]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:42.206]                       if (!identical(...future.globals.maxSize.org, 
[13:34:42.206]                         ...future.globals.maxSize)) {
[13:34:42.206]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:42.206]                         on.exit(options(oopts), add = TRUE)
[13:34:42.206]                       }
[13:34:42.206]                       {
[13:34:42.206]                         lapply(seq_along(...future.elements_ii), 
[13:34:42.206]                           FUN = function(jj) {
[13:34:42.206]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:42.206]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:42.206]                               envir = globalenv(), inherits = FALSE)
[13:34:42.206]                             ...future.FUN(...future.X_jj, ...)
[13:34:42.206]                           })
[13:34:42.206]                       }
[13:34:42.206]                     }, args = future.call.arguments)
[13:34:42.206]                   }
[13:34:42.206]                 }, immediateCondition = function(cond) {
[13:34:42.206]                   save_rds <- function (object, pathname, ...) 
[13:34:42.206]                   {
[13:34:42.206]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:34:42.206]                     if (file_test("-f", pathname_tmp)) {
[13:34:42.206]                       fi_tmp <- file.info(pathname_tmp)
[13:34:42.206]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:34:42.206]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:34:42.206]                         fi_tmp[["mtime"]])
[13:34:42.206]                     }
[13:34:42.206]                     tryCatch({
[13:34:42.206]                       saveRDS(object, file = pathname_tmp, ...)
[13:34:42.206]                     }, error = function(ex) {
[13:34:42.206]                       msg <- conditionMessage(ex)
[13:34:42.206]                       fi_tmp <- file.info(pathname_tmp)
[13:34:42.206]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:34:42.206]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:34:42.206]                         fi_tmp[["mtime"]], msg)
[13:34:42.206]                       ex$message <- msg
[13:34:42.206]                       stop(ex)
[13:34:42.206]                     })
[13:34:42.206]                     stopifnot(file_test("-f", pathname_tmp))
[13:34:42.206]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:34:42.206]                     if (!res || file_test("-f", pathname_tmp)) {
[13:34:42.206]                       fi_tmp <- file.info(pathname_tmp)
[13:34:42.206]                       fi <- file.info(pathname)
[13:34:42.206]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:34:42.206]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:34:42.206]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:34:42.206]                         fi[["size"]], fi[["mtime"]])
[13:34:42.206]                       stop(msg)
[13:34:42.206]                     }
[13:34:42.206]                     invisible(pathname)
[13:34:42.206]                   }
[13:34:42.206]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:34:42.206]                     rootPath = tempdir()) 
[13:34:42.206]                   {
[13:34:42.206]                     obj <- list(time = Sys.time(), condition = cond)
[13:34:42.206]                     file <- tempfile(pattern = class(cond)[1], 
[13:34:42.206]                       tmpdir = path, fileext = ".rds")
[13:34:42.206]                     save_rds(obj, file)
[13:34:42.206]                   }
[13:34:42.206]                   saveImmediateCondition(cond, path = "/tmp/RtmplfSa61/.future/immediateConditions")
[13:34:42.206]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:42.206]                   {
[13:34:42.206]                     inherits <- base::inherits
[13:34:42.206]                     invokeRestart <- base::invokeRestart
[13:34:42.206]                     is.null <- base::is.null
[13:34:42.206]                     muffled <- FALSE
[13:34:42.206]                     if (inherits(cond, "message")) {
[13:34:42.206]                       muffled <- grepl(pattern, "muffleMessage")
[13:34:42.206]                       if (muffled) 
[13:34:42.206]                         invokeRestart("muffleMessage")
[13:34:42.206]                     }
[13:34:42.206]                     else if (inherits(cond, "warning")) {
[13:34:42.206]                       muffled <- grepl(pattern, "muffleWarning")
[13:34:42.206]                       if (muffled) 
[13:34:42.206]                         invokeRestart("muffleWarning")
[13:34:42.206]                     }
[13:34:42.206]                     else if (inherits(cond, "condition")) {
[13:34:42.206]                       if (!is.null(pattern)) {
[13:34:42.206]                         computeRestarts <- base::computeRestarts
[13:34:42.206]                         grepl <- base::grepl
[13:34:42.206]                         restarts <- computeRestarts(cond)
[13:34:42.206]                         for (restart in restarts) {
[13:34:42.206]                           name <- restart$name
[13:34:42.206]                           if (is.null(name)) 
[13:34:42.206]                             next
[13:34:42.206]                           if (!grepl(pattern, name)) 
[13:34:42.206]                             next
[13:34:42.206]                           invokeRestart(restart)
[13:34:42.206]                           muffled <- TRUE
[13:34:42.206]                           break
[13:34:42.206]                         }
[13:34:42.206]                       }
[13:34:42.206]                     }
[13:34:42.206]                     invisible(muffled)
[13:34:42.206]                   }
[13:34:42.206]                   muffleCondition(cond)
[13:34:42.206]                 })
[13:34:42.206]             }))
[13:34:42.206]             future::FutureResult(value = ...future.value$value, 
[13:34:42.206]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:42.206]                   ...future.rng), globalenv = if (FALSE) 
[13:34:42.206]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:34:42.206]                     ...future.globalenv.names))
[13:34:42.206]                 else NULL, started = ...future.startTime, version = "1.8")
[13:34:42.206]         }, condition = base::local({
[13:34:42.206]             c <- base::c
[13:34:42.206]             inherits <- base::inherits
[13:34:42.206]             invokeRestart <- base::invokeRestart
[13:34:42.206]             length <- base::length
[13:34:42.206]             list <- base::list
[13:34:42.206]             seq.int <- base::seq.int
[13:34:42.206]             signalCondition <- base::signalCondition
[13:34:42.206]             sys.calls <- base::sys.calls
[13:34:42.206]             `[[` <- base::`[[`
[13:34:42.206]             `+` <- base::`+`
[13:34:42.206]             `<<-` <- base::`<<-`
[13:34:42.206]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:34:42.206]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:34:42.206]                   3L)]
[13:34:42.206]             }
[13:34:42.206]             function(cond) {
[13:34:42.206]                 is_error <- inherits(cond, "error")
[13:34:42.206]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:34:42.206]                   NULL)
[13:34:42.206]                 if (is_error) {
[13:34:42.206]                   sessionInformation <- function() {
[13:34:42.206]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:34:42.206]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:34:42.206]                       search = base::search(), system = base::Sys.info())
[13:34:42.206]                   }
[13:34:42.206]                   ...future.conditions[[length(...future.conditions) + 
[13:34:42.206]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:34:42.206]                     cond$call), session = sessionInformation(), 
[13:34:42.206]                     timestamp = base::Sys.time(), signaled = 0L)
[13:34:42.206]                   signalCondition(cond)
[13:34:42.206]                 }
[13:34:42.206]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:34:42.206]                 "immediateCondition"))) {
[13:34:42.206]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:34:42.206]                   ...future.conditions[[length(...future.conditions) + 
[13:34:42.206]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:34:42.206]                   if (TRUE && !signal) {
[13:34:42.206]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:42.206]                     {
[13:34:42.206]                       inherits <- base::inherits
[13:34:42.206]                       invokeRestart <- base::invokeRestart
[13:34:42.206]                       is.null <- base::is.null
[13:34:42.206]                       muffled <- FALSE
[13:34:42.206]                       if (inherits(cond, "message")) {
[13:34:42.206]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:42.206]                         if (muffled) 
[13:34:42.206]                           invokeRestart("muffleMessage")
[13:34:42.206]                       }
[13:34:42.206]                       else if (inherits(cond, "warning")) {
[13:34:42.206]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:42.206]                         if (muffled) 
[13:34:42.206]                           invokeRestart("muffleWarning")
[13:34:42.206]                       }
[13:34:42.206]                       else if (inherits(cond, "condition")) {
[13:34:42.206]                         if (!is.null(pattern)) {
[13:34:42.206]                           computeRestarts <- base::computeRestarts
[13:34:42.206]                           grepl <- base::grepl
[13:34:42.206]                           restarts <- computeRestarts(cond)
[13:34:42.206]                           for (restart in restarts) {
[13:34:42.206]                             name <- restart$name
[13:34:42.206]                             if (is.null(name)) 
[13:34:42.206]                               next
[13:34:42.206]                             if (!grepl(pattern, name)) 
[13:34:42.206]                               next
[13:34:42.206]                             invokeRestart(restart)
[13:34:42.206]                             muffled <- TRUE
[13:34:42.206]                             break
[13:34:42.206]                           }
[13:34:42.206]                         }
[13:34:42.206]                       }
[13:34:42.206]                       invisible(muffled)
[13:34:42.206]                     }
[13:34:42.206]                     muffleCondition(cond, pattern = "^muffle")
[13:34:42.206]                   }
[13:34:42.206]                 }
[13:34:42.206]                 else {
[13:34:42.206]                   if (TRUE) {
[13:34:42.206]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:42.206]                     {
[13:34:42.206]                       inherits <- base::inherits
[13:34:42.206]                       invokeRestart <- base::invokeRestart
[13:34:42.206]                       is.null <- base::is.null
[13:34:42.206]                       muffled <- FALSE
[13:34:42.206]                       if (inherits(cond, "message")) {
[13:34:42.206]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:42.206]                         if (muffled) 
[13:34:42.206]                           invokeRestart("muffleMessage")
[13:34:42.206]                       }
[13:34:42.206]                       else if (inherits(cond, "warning")) {
[13:34:42.206]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:42.206]                         if (muffled) 
[13:34:42.206]                           invokeRestart("muffleWarning")
[13:34:42.206]                       }
[13:34:42.206]                       else if (inherits(cond, "condition")) {
[13:34:42.206]                         if (!is.null(pattern)) {
[13:34:42.206]                           computeRestarts <- base::computeRestarts
[13:34:42.206]                           grepl <- base::grepl
[13:34:42.206]                           restarts <- computeRestarts(cond)
[13:34:42.206]                           for (restart in restarts) {
[13:34:42.206]                             name <- restart$name
[13:34:42.206]                             if (is.null(name)) 
[13:34:42.206]                               next
[13:34:42.206]                             if (!grepl(pattern, name)) 
[13:34:42.206]                               next
[13:34:42.206]                             invokeRestart(restart)
[13:34:42.206]                             muffled <- TRUE
[13:34:42.206]                             break
[13:34:42.206]                           }
[13:34:42.206]                         }
[13:34:42.206]                       }
[13:34:42.206]                       invisible(muffled)
[13:34:42.206]                     }
[13:34:42.206]                     muffleCondition(cond, pattern = "^muffle")
[13:34:42.206]                   }
[13:34:42.206]                 }
[13:34:42.206]             }
[13:34:42.206]         }))
[13:34:42.206]     }, error = function(ex) {
[13:34:42.206]         base::structure(base::list(value = NULL, visible = NULL, 
[13:34:42.206]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:42.206]                 ...future.rng), started = ...future.startTime, 
[13:34:42.206]             finished = Sys.time(), session_uuid = NA_character_, 
[13:34:42.206]             version = "1.8"), class = "FutureResult")
[13:34:42.206]     }, finally = {
[13:34:42.206]         if (!identical(...future.workdir, getwd())) 
[13:34:42.206]             setwd(...future.workdir)
[13:34:42.206]         {
[13:34:42.206]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:34:42.206]                 ...future.oldOptions$nwarnings <- NULL
[13:34:42.206]             }
[13:34:42.206]             base::options(...future.oldOptions)
[13:34:42.206]             if (.Platform$OS.type == "windows") {
[13:34:42.206]                 old_names <- names(...future.oldEnvVars)
[13:34:42.206]                 envs <- base::Sys.getenv()
[13:34:42.206]                 names <- names(envs)
[13:34:42.206]                 common <- intersect(names, old_names)
[13:34:42.206]                 added <- setdiff(names, old_names)
[13:34:42.206]                 removed <- setdiff(old_names, names)
[13:34:42.206]                 changed <- common[...future.oldEnvVars[common] != 
[13:34:42.206]                   envs[common]]
[13:34:42.206]                 NAMES <- toupper(changed)
[13:34:42.206]                 args <- list()
[13:34:42.206]                 for (kk in seq_along(NAMES)) {
[13:34:42.206]                   name <- changed[[kk]]
[13:34:42.206]                   NAME <- NAMES[[kk]]
[13:34:42.206]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:42.206]                     next
[13:34:42.206]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:42.206]                 }
[13:34:42.206]                 NAMES <- toupper(added)
[13:34:42.206]                 for (kk in seq_along(NAMES)) {
[13:34:42.206]                   name <- added[[kk]]
[13:34:42.206]                   NAME <- NAMES[[kk]]
[13:34:42.206]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:42.206]                     next
[13:34:42.206]                   args[[name]] <- ""
[13:34:42.206]                 }
[13:34:42.206]                 NAMES <- toupper(removed)
[13:34:42.206]                 for (kk in seq_along(NAMES)) {
[13:34:42.206]                   name <- removed[[kk]]
[13:34:42.206]                   NAME <- NAMES[[kk]]
[13:34:42.206]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:42.206]                     next
[13:34:42.206]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:42.206]                 }
[13:34:42.206]                 if (length(args) > 0) 
[13:34:42.206]                   base::do.call(base::Sys.setenv, args = args)
[13:34:42.206]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:34:42.206]             }
[13:34:42.206]             else {
[13:34:42.206]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:34:42.206]             }
[13:34:42.206]             {
[13:34:42.206]                 if (base::length(...future.futureOptionsAdded) > 
[13:34:42.206]                   0L) {
[13:34:42.206]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:34:42.206]                   base::names(opts) <- ...future.futureOptionsAdded
[13:34:42.206]                   base::options(opts)
[13:34:42.206]                 }
[13:34:42.206]                 {
[13:34:42.206]                   {
[13:34:42.206]                     base::options(mc.cores = ...future.mc.cores.old)
[13:34:42.206]                     NULL
[13:34:42.206]                   }
[13:34:42.206]                   options(future.plan = NULL)
[13:34:42.206]                   if (is.na(NA_character_)) 
[13:34:42.206]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:34:42.206]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:34:42.206]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:34:42.206]                     .init = FALSE)
[13:34:42.206]                 }
[13:34:42.206]             }
[13:34:42.206]         }
[13:34:42.206]     })
[13:34:42.206]     if (TRUE) {
[13:34:42.206]         base::sink(type = "output", split = FALSE)
[13:34:42.206]         if (TRUE) {
[13:34:42.206]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:34:42.206]         }
[13:34:42.206]         else {
[13:34:42.206]             ...future.result["stdout"] <- base::list(NULL)
[13:34:42.206]         }
[13:34:42.206]         base::close(...future.stdout)
[13:34:42.206]         ...future.stdout <- NULL
[13:34:42.206]     }
[13:34:42.206]     ...future.result$conditions <- ...future.conditions
[13:34:42.206]     ...future.result$finished <- base::Sys.time()
[13:34:42.206]     ...future.result
[13:34:42.206] }
[13:34:42.208] assign_globals() ...
[13:34:42.208] List of 5
[13:34:42.208]  $ ...future.FUN            :function (...)  
[13:34:42.208]  $ future.call.arguments    : list()
[13:34:42.208]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:42.208]  $ ...future.elements_ii    :List of 2
[13:34:42.208]   ..$ : int 0
[13:34:42.208]   ..$ : int 0
[13:34:42.208]  $ ...future.seeds_ii       :List of 2
[13:34:42.208]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[13:34:42.208]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[13:34:42.208]  $ ...future.globals.maxSize: NULL
[13:34:42.208]  - attr(*, "where")=List of 5
[13:34:42.208]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:34:42.208]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:34:42.208]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:34:42.208]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:34:42.208]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:34:42.208]  - attr(*, "resolved")= logi FALSE
[13:34:42.208]  - attr(*, "total_size")= num 616
[13:34:42.208]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:42.208]  - attr(*, "already-done")= logi TRUE
[13:34:42.214] - reassign environment for ‘...future.FUN’
[13:34:42.214] - copied ‘...future.FUN’ to environment
[13:34:42.214] - copied ‘future.call.arguments’ to environment
[13:34:42.214] - copied ‘...future.elements_ii’ to environment
[13:34:42.214] - copied ‘...future.seeds_ii’ to environment
[13:34:42.214] - copied ‘...future.globals.maxSize’ to environment
[13:34:42.214] assign_globals() ... done
[13:34:42.214] requestCore(): workers = 2
[13:34:42.216] MulticoreFuture started
[13:34:42.217] - Launch lazy future ... done
[13:34:42.217] run() for ‘MulticoreFuture’ ... done
[13:34:42.217] Created future:
[13:34:42.218] plan(): Setting new future strategy stack:
[13:34:42.218] List of future strategies:
[13:34:42.218] 1. sequential:
[13:34:42.218]    - args: function (..., envir = parent.frame())
[13:34:42.218]    - tweaked: FALSE
[13:34:42.218]    - call: NULL
[13:34:42.219] plan(): nbrOfWorkers() = 1
[13:34:42.221] plan(): Setting new future strategy stack:
[13:34:42.221] List of future strategies:
[13:34:42.221] 1. multicore:
[13:34:42.221]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:34:42.221]    - tweaked: FALSE
[13:34:42.221]    - call: plan(strategy)
[13:34:42.226] plan(): nbrOfWorkers() = 2
[13:34:42.217] MulticoreFuture:
[13:34:42.217] Label: ‘future_replicate-1’
[13:34:42.217] Expression:
[13:34:42.217] {
[13:34:42.217]     do.call(function(...) {
[13:34:42.217]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:42.217]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:42.217]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:42.217]             on.exit(options(oopts), add = TRUE)
[13:34:42.217]         }
[13:34:42.217]         {
[13:34:42.217]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:42.217]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:42.217]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:42.217]                   envir = globalenv(), inherits = FALSE)
[13:34:42.217]                 ...future.FUN(...future.X_jj, ...)
[13:34:42.217]             })
[13:34:42.217]         }
[13:34:42.217]     }, args = future.call.arguments)
[13:34:42.217] }
[13:34:42.217] Lazy evaluation: FALSE
[13:34:42.217] Asynchronous evaluation: TRUE
[13:34:42.217] Local evaluation: TRUE
[13:34:42.217] Environment: R_GlobalEnv
[13:34:42.217] Capture standard output: TRUE
[13:34:42.217] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:34:42.217] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:34:42.217] Packages: <none>
[13:34:42.217] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:34:42.217] Resolved: TRUE
[13:34:42.217] Value: <not collected>
[13:34:42.217] Conditions captured: <none>
[13:34:42.217] Early signaling: FALSE
[13:34:42.217] Owner process: b8cf10c3-b112-c8f9-9398-a44000e21728
[13:34:42.217] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:42.227] Chunk #1 of 2 ... DONE
[13:34:42.227] Chunk #2 of 2 ...
[13:34:42.228]  - Finding globals in 'X' for chunk #2 ...
[13:34:42.228] getGlobalsAndPackages() ...
[13:34:42.228] Searching for globals...
[13:34:42.228] 
[13:34:42.229] Searching for globals ... DONE
[13:34:42.229] - globals: [0] <none>
[13:34:42.229] getGlobalsAndPackages() ... DONE
[13:34:42.229]    + additional globals found: [n=0] 
[13:34:42.229]    + additional namespaces needed: [n=0] 
[13:34:42.229]  - Finding globals in 'X' for chunk #2 ... DONE
[13:34:42.229]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:34:42.230]  - seeds: [3] <seeds>
[13:34:42.230]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:42.230] getGlobalsAndPackages() ...
[13:34:42.230] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:42.230] Resolving globals: FALSE
[13:34:42.231] Tweak future expression to call with '...' arguments ...
[13:34:42.231] {
[13:34:42.231]     do.call(function(...) {
[13:34:42.231]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:42.231]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:42.231]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:42.231]             on.exit(options(oopts), add = TRUE)
[13:34:42.231]         }
[13:34:42.231]         {
[13:34:42.231]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:42.231]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:42.231]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:42.231]                   envir = globalenv(), inherits = FALSE)
[13:34:42.231]                 ...future.FUN(...future.X_jj, ...)
[13:34:42.231]             })
[13:34:42.231]         }
[13:34:42.231]     }, args = future.call.arguments)
[13:34:42.231] }
[13:34:42.231] Tweak future expression to call with '...' arguments ... DONE
[13:34:42.232] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:42.232] 
[13:34:42.232] getGlobalsAndPackages() ... DONE
[13:34:42.233] run() for ‘Future’ ...
[13:34:42.233] - state: ‘created’
[13:34:42.233] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:34:42.238] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:42.238] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:34:42.238]   - Field: ‘label’
[13:34:42.238]   - Field: ‘local’
[13:34:42.238]   - Field: ‘owner’
[13:34:42.239]   - Field: ‘envir’
[13:34:42.239]   - Field: ‘workers’
[13:34:42.239]   - Field: ‘packages’
[13:34:42.239]   - Field: ‘gc’
[13:34:42.239]   - Field: ‘job’
[13:34:42.239]   - Field: ‘conditions’
[13:34:42.239]   - Field: ‘expr’
[13:34:42.240]   - Field: ‘uuid’
[13:34:42.240]   - Field: ‘seed’
[13:34:42.240]   - Field: ‘version’
[13:34:42.240]   - Field: ‘result’
[13:34:42.240]   - Field: ‘asynchronous’
[13:34:42.240]   - Field: ‘calls’
[13:34:42.240]   - Field: ‘globals’
[13:34:42.241]   - Field: ‘stdout’
[13:34:42.241]   - Field: ‘earlySignal’
[13:34:42.241]   - Field: ‘lazy’
[13:34:42.241]   - Field: ‘state’
[13:34:42.241] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:34:42.241] - Launch lazy future ...
[13:34:42.242] Packages needed by the future expression (n = 0): <none>
[13:34:42.242] Packages needed by future strategies (n = 0): <none>
[13:34:42.243] {
[13:34:42.243]     {
[13:34:42.243]         {
[13:34:42.243]             ...future.startTime <- base::Sys.time()
[13:34:42.243]             {
[13:34:42.243]                 {
[13:34:42.243]                   {
[13:34:42.243]                     {
[13:34:42.243]                       base::local({
[13:34:42.243]                         has_future <- base::requireNamespace("future", 
[13:34:42.243]                           quietly = TRUE)
[13:34:42.243]                         if (has_future) {
[13:34:42.243]                           ns <- base::getNamespace("future")
[13:34:42.243]                           version <- ns[[".package"]][["version"]]
[13:34:42.243]                           if (is.null(version)) 
[13:34:42.243]                             version <- utils::packageVersion("future")
[13:34:42.243]                         }
[13:34:42.243]                         else {
[13:34:42.243]                           version <- NULL
[13:34:42.243]                         }
[13:34:42.243]                         if (!has_future || version < "1.8.0") {
[13:34:42.243]                           info <- base::c(r_version = base::gsub("R version ", 
[13:34:42.243]                             "", base::R.version$version.string), 
[13:34:42.243]                             platform = base::sprintf("%s (%s-bit)", 
[13:34:42.243]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:34:42.243]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:34:42.243]                               "release", "version")], collapse = " "), 
[13:34:42.243]                             hostname = base::Sys.info()[["nodename"]])
[13:34:42.243]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:34:42.243]                             info)
[13:34:42.243]                           info <- base::paste(info, collapse = "; ")
[13:34:42.243]                           if (!has_future) {
[13:34:42.243]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:34:42.243]                               info)
[13:34:42.243]                           }
[13:34:42.243]                           else {
[13:34:42.243]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:34:42.243]                               info, version)
[13:34:42.243]                           }
[13:34:42.243]                           base::stop(msg)
[13:34:42.243]                         }
[13:34:42.243]                       })
[13:34:42.243]                     }
[13:34:42.243]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:34:42.243]                     base::options(mc.cores = 1L)
[13:34:42.243]                   }
[13:34:42.243]                   ...future.strategy.old <- future::plan("list")
[13:34:42.243]                   options(future.plan = NULL)
[13:34:42.243]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:34:42.243]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:34:42.243]                 }
[13:34:42.243]                 ...future.workdir <- getwd()
[13:34:42.243]             }
[13:34:42.243]             ...future.oldOptions <- base::as.list(base::.Options)
[13:34:42.243]             ...future.oldEnvVars <- base::Sys.getenv()
[13:34:42.243]         }
[13:34:42.243]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:34:42.243]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:34:42.243]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:34:42.243]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:34:42.243]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:34:42.243]             future.stdout.windows.reencode = NULL, width = 80L)
[13:34:42.243]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:34:42.243]             base::names(...future.oldOptions))
[13:34:42.243]     }
[13:34:42.243]     if (FALSE) {
[13:34:42.243]     }
[13:34:42.243]     else {
[13:34:42.243]         if (TRUE) {
[13:34:42.243]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:34:42.243]                 open = "w")
[13:34:42.243]         }
[13:34:42.243]         else {
[13:34:42.243]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:34:42.243]                 windows = "NUL", "/dev/null"), open = "w")
[13:34:42.243]         }
[13:34:42.243]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:34:42.243]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:34:42.243]             base::sink(type = "output", split = FALSE)
[13:34:42.243]             base::close(...future.stdout)
[13:34:42.243]         }, add = TRUE)
[13:34:42.243]     }
[13:34:42.243]     ...future.frame <- base::sys.nframe()
[13:34:42.243]     ...future.conditions <- base::list()
[13:34:42.243]     ...future.rng <- base::globalenv()$.Random.seed
[13:34:42.243]     if (FALSE) {
[13:34:42.243]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:34:42.243]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:34:42.243]     }
[13:34:42.243]     ...future.result <- base::tryCatch({
[13:34:42.243]         base::withCallingHandlers({
[13:34:42.243]             ...future.value <- base::withVisible(base::local({
[13:34:42.243]                 withCallingHandlers({
[13:34:42.243]                   {
[13:34:42.243]                     do.call(function(...) {
[13:34:42.243]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:42.243]                       if (!identical(...future.globals.maxSize.org, 
[13:34:42.243]                         ...future.globals.maxSize)) {
[13:34:42.243]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:42.243]                         on.exit(options(oopts), add = TRUE)
[13:34:42.243]                       }
[13:34:42.243]                       {
[13:34:42.243]                         lapply(seq_along(...future.elements_ii), 
[13:34:42.243]                           FUN = function(jj) {
[13:34:42.243]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:42.243]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:42.243]                               envir = globalenv(), inherits = FALSE)
[13:34:42.243]                             ...future.FUN(...future.X_jj, ...)
[13:34:42.243]                           })
[13:34:42.243]                       }
[13:34:42.243]                     }, args = future.call.arguments)
[13:34:42.243]                   }
[13:34:42.243]                 }, immediateCondition = function(cond) {
[13:34:42.243]                   save_rds <- function (object, pathname, ...) 
[13:34:42.243]                   {
[13:34:42.243]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:34:42.243]                     if (file_test("-f", pathname_tmp)) {
[13:34:42.243]                       fi_tmp <- file.info(pathname_tmp)
[13:34:42.243]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:34:42.243]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:34:42.243]                         fi_tmp[["mtime"]])
[13:34:42.243]                     }
[13:34:42.243]                     tryCatch({
[13:34:42.243]                       saveRDS(object, file = pathname_tmp, ...)
[13:34:42.243]                     }, error = function(ex) {
[13:34:42.243]                       msg <- conditionMessage(ex)
[13:34:42.243]                       fi_tmp <- file.info(pathname_tmp)
[13:34:42.243]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:34:42.243]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:34:42.243]                         fi_tmp[["mtime"]], msg)
[13:34:42.243]                       ex$message <- msg
[13:34:42.243]                       stop(ex)
[13:34:42.243]                     })
[13:34:42.243]                     stopifnot(file_test("-f", pathname_tmp))
[13:34:42.243]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:34:42.243]                     if (!res || file_test("-f", pathname_tmp)) {
[13:34:42.243]                       fi_tmp <- file.info(pathname_tmp)
[13:34:42.243]                       fi <- file.info(pathname)
[13:34:42.243]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:34:42.243]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:34:42.243]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:34:42.243]                         fi[["size"]], fi[["mtime"]])
[13:34:42.243]                       stop(msg)
[13:34:42.243]                     }
[13:34:42.243]                     invisible(pathname)
[13:34:42.243]                   }
[13:34:42.243]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:34:42.243]                     rootPath = tempdir()) 
[13:34:42.243]                   {
[13:34:42.243]                     obj <- list(time = Sys.time(), condition = cond)
[13:34:42.243]                     file <- tempfile(pattern = class(cond)[1], 
[13:34:42.243]                       tmpdir = path, fileext = ".rds")
[13:34:42.243]                     save_rds(obj, file)
[13:34:42.243]                   }
[13:34:42.243]                   saveImmediateCondition(cond, path = "/tmp/RtmplfSa61/.future/immediateConditions")
[13:34:42.243]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:42.243]                   {
[13:34:42.243]                     inherits <- base::inherits
[13:34:42.243]                     invokeRestart <- base::invokeRestart
[13:34:42.243]                     is.null <- base::is.null
[13:34:42.243]                     muffled <- FALSE
[13:34:42.243]                     if (inherits(cond, "message")) {
[13:34:42.243]                       muffled <- grepl(pattern, "muffleMessage")
[13:34:42.243]                       if (muffled) 
[13:34:42.243]                         invokeRestart("muffleMessage")
[13:34:42.243]                     }
[13:34:42.243]                     else if (inherits(cond, "warning")) {
[13:34:42.243]                       muffled <- grepl(pattern, "muffleWarning")
[13:34:42.243]                       if (muffled) 
[13:34:42.243]                         invokeRestart("muffleWarning")
[13:34:42.243]                     }
[13:34:42.243]                     else if (inherits(cond, "condition")) {
[13:34:42.243]                       if (!is.null(pattern)) {
[13:34:42.243]                         computeRestarts <- base::computeRestarts
[13:34:42.243]                         grepl <- base::grepl
[13:34:42.243]                         restarts <- computeRestarts(cond)
[13:34:42.243]                         for (restart in restarts) {
[13:34:42.243]                           name <- restart$name
[13:34:42.243]                           if (is.null(name)) 
[13:34:42.243]                             next
[13:34:42.243]                           if (!grepl(pattern, name)) 
[13:34:42.243]                             next
[13:34:42.243]                           invokeRestart(restart)
[13:34:42.243]                           muffled <- TRUE
[13:34:42.243]                           break
[13:34:42.243]                         }
[13:34:42.243]                       }
[13:34:42.243]                     }
[13:34:42.243]                     invisible(muffled)
[13:34:42.243]                   }
[13:34:42.243]                   muffleCondition(cond)
[13:34:42.243]                 })
[13:34:42.243]             }))
[13:34:42.243]             future::FutureResult(value = ...future.value$value, 
[13:34:42.243]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:42.243]                   ...future.rng), globalenv = if (FALSE) 
[13:34:42.243]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:34:42.243]                     ...future.globalenv.names))
[13:34:42.243]                 else NULL, started = ...future.startTime, version = "1.8")
[13:34:42.243]         }, condition = base::local({
[13:34:42.243]             c <- base::c
[13:34:42.243]             inherits <- base::inherits
[13:34:42.243]             invokeRestart <- base::invokeRestart
[13:34:42.243]             length <- base::length
[13:34:42.243]             list <- base::list
[13:34:42.243]             seq.int <- base::seq.int
[13:34:42.243]             signalCondition <- base::signalCondition
[13:34:42.243]             sys.calls <- base::sys.calls
[13:34:42.243]             `[[` <- base::`[[`
[13:34:42.243]             `+` <- base::`+`
[13:34:42.243]             `<<-` <- base::`<<-`
[13:34:42.243]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:34:42.243]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:34:42.243]                   3L)]
[13:34:42.243]             }
[13:34:42.243]             function(cond) {
[13:34:42.243]                 is_error <- inherits(cond, "error")
[13:34:42.243]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:34:42.243]                   NULL)
[13:34:42.243]                 if (is_error) {
[13:34:42.243]                   sessionInformation <- function() {
[13:34:42.243]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:34:42.243]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:34:42.243]                       search = base::search(), system = base::Sys.info())
[13:34:42.243]                   }
[13:34:42.243]                   ...future.conditions[[length(...future.conditions) + 
[13:34:42.243]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:34:42.243]                     cond$call), session = sessionInformation(), 
[13:34:42.243]                     timestamp = base::Sys.time(), signaled = 0L)
[13:34:42.243]                   signalCondition(cond)
[13:34:42.243]                 }
[13:34:42.243]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:34:42.243]                 "immediateCondition"))) {
[13:34:42.243]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:34:42.243]                   ...future.conditions[[length(...future.conditions) + 
[13:34:42.243]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:34:42.243]                   if (TRUE && !signal) {
[13:34:42.243]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:42.243]                     {
[13:34:42.243]                       inherits <- base::inherits
[13:34:42.243]                       invokeRestart <- base::invokeRestart
[13:34:42.243]                       is.null <- base::is.null
[13:34:42.243]                       muffled <- FALSE
[13:34:42.243]                       if (inherits(cond, "message")) {
[13:34:42.243]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:42.243]                         if (muffled) 
[13:34:42.243]                           invokeRestart("muffleMessage")
[13:34:42.243]                       }
[13:34:42.243]                       else if (inherits(cond, "warning")) {
[13:34:42.243]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:42.243]                         if (muffled) 
[13:34:42.243]                           invokeRestart("muffleWarning")
[13:34:42.243]                       }
[13:34:42.243]                       else if (inherits(cond, "condition")) {
[13:34:42.243]                         if (!is.null(pattern)) {
[13:34:42.243]                           computeRestarts <- base::computeRestarts
[13:34:42.243]                           grepl <- base::grepl
[13:34:42.243]                           restarts <- computeRestarts(cond)
[13:34:42.243]                           for (restart in restarts) {
[13:34:42.243]                             name <- restart$name
[13:34:42.243]                             if (is.null(name)) 
[13:34:42.243]                               next
[13:34:42.243]                             if (!grepl(pattern, name)) 
[13:34:42.243]                               next
[13:34:42.243]                             invokeRestart(restart)
[13:34:42.243]                             muffled <- TRUE
[13:34:42.243]                             break
[13:34:42.243]                           }
[13:34:42.243]                         }
[13:34:42.243]                       }
[13:34:42.243]                       invisible(muffled)
[13:34:42.243]                     }
[13:34:42.243]                     muffleCondition(cond, pattern = "^muffle")
[13:34:42.243]                   }
[13:34:42.243]                 }
[13:34:42.243]                 else {
[13:34:42.243]                   if (TRUE) {
[13:34:42.243]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:42.243]                     {
[13:34:42.243]                       inherits <- base::inherits
[13:34:42.243]                       invokeRestart <- base::invokeRestart
[13:34:42.243]                       is.null <- base::is.null
[13:34:42.243]                       muffled <- FALSE
[13:34:42.243]                       if (inherits(cond, "message")) {
[13:34:42.243]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:42.243]                         if (muffled) 
[13:34:42.243]                           invokeRestart("muffleMessage")
[13:34:42.243]                       }
[13:34:42.243]                       else if (inherits(cond, "warning")) {
[13:34:42.243]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:42.243]                         if (muffled) 
[13:34:42.243]                           invokeRestart("muffleWarning")
[13:34:42.243]                       }
[13:34:42.243]                       else if (inherits(cond, "condition")) {
[13:34:42.243]                         if (!is.null(pattern)) {
[13:34:42.243]                           computeRestarts <- base::computeRestarts
[13:34:42.243]                           grepl <- base::grepl
[13:34:42.243]                           restarts <- computeRestarts(cond)
[13:34:42.243]                           for (restart in restarts) {
[13:34:42.243]                             name <- restart$name
[13:34:42.243]                             if (is.null(name)) 
[13:34:42.243]                               next
[13:34:42.243]                             if (!grepl(pattern, name)) 
[13:34:42.243]                               next
[13:34:42.243]                             invokeRestart(restart)
[13:34:42.243]                             muffled <- TRUE
[13:34:42.243]                             break
[13:34:42.243]                           }
[13:34:42.243]                         }
[13:34:42.243]                       }
[13:34:42.243]                       invisible(muffled)
[13:34:42.243]                     }
[13:34:42.243]                     muffleCondition(cond, pattern = "^muffle")
[13:34:42.243]                   }
[13:34:42.243]                 }
[13:34:42.243]             }
[13:34:42.243]         }))
[13:34:42.243]     }, error = function(ex) {
[13:34:42.243]         base::structure(base::list(value = NULL, visible = NULL, 
[13:34:42.243]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:42.243]                 ...future.rng), started = ...future.startTime, 
[13:34:42.243]             finished = Sys.time(), session_uuid = NA_character_, 
[13:34:42.243]             version = "1.8"), class = "FutureResult")
[13:34:42.243]     }, finally = {
[13:34:42.243]         if (!identical(...future.workdir, getwd())) 
[13:34:42.243]             setwd(...future.workdir)
[13:34:42.243]         {
[13:34:42.243]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:34:42.243]                 ...future.oldOptions$nwarnings <- NULL
[13:34:42.243]             }
[13:34:42.243]             base::options(...future.oldOptions)
[13:34:42.243]             if (.Platform$OS.type == "windows") {
[13:34:42.243]                 old_names <- names(...future.oldEnvVars)
[13:34:42.243]                 envs <- base::Sys.getenv()
[13:34:42.243]                 names <- names(envs)
[13:34:42.243]                 common <- intersect(names, old_names)
[13:34:42.243]                 added <- setdiff(names, old_names)
[13:34:42.243]                 removed <- setdiff(old_names, names)
[13:34:42.243]                 changed <- common[...future.oldEnvVars[common] != 
[13:34:42.243]                   envs[common]]
[13:34:42.243]                 NAMES <- toupper(changed)
[13:34:42.243]                 args <- list()
[13:34:42.243]                 for (kk in seq_along(NAMES)) {
[13:34:42.243]                   name <- changed[[kk]]
[13:34:42.243]                   NAME <- NAMES[[kk]]
[13:34:42.243]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:42.243]                     next
[13:34:42.243]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:42.243]                 }
[13:34:42.243]                 NAMES <- toupper(added)
[13:34:42.243]                 for (kk in seq_along(NAMES)) {
[13:34:42.243]                   name <- added[[kk]]
[13:34:42.243]                   NAME <- NAMES[[kk]]
[13:34:42.243]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:42.243]                     next
[13:34:42.243]                   args[[name]] <- ""
[13:34:42.243]                 }
[13:34:42.243]                 NAMES <- toupper(removed)
[13:34:42.243]                 for (kk in seq_along(NAMES)) {
[13:34:42.243]                   name <- removed[[kk]]
[13:34:42.243]                   NAME <- NAMES[[kk]]
[13:34:42.243]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:42.243]                     next
[13:34:42.243]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:42.243]                 }
[13:34:42.243]                 if (length(args) > 0) 
[13:34:42.243]                   base::do.call(base::Sys.setenv, args = args)
[13:34:42.243]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:34:42.243]             }
[13:34:42.243]             else {
[13:34:42.243]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:34:42.243]             }
[13:34:42.243]             {
[13:34:42.243]                 if (base::length(...future.futureOptionsAdded) > 
[13:34:42.243]                   0L) {
[13:34:42.243]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:34:42.243]                   base::names(opts) <- ...future.futureOptionsAdded
[13:34:42.243]                   base::options(opts)
[13:34:42.243]                 }
[13:34:42.243]                 {
[13:34:42.243]                   {
[13:34:42.243]                     base::options(mc.cores = ...future.mc.cores.old)
[13:34:42.243]                     NULL
[13:34:42.243]                   }
[13:34:42.243]                   options(future.plan = NULL)
[13:34:42.243]                   if (is.na(NA_character_)) 
[13:34:42.243]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:34:42.243]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:34:42.243]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:34:42.243]                     .init = FALSE)
[13:34:42.243]                 }
[13:34:42.243]             }
[13:34:42.243]         }
[13:34:42.243]     })
[13:34:42.243]     if (TRUE) {
[13:34:42.243]         base::sink(type = "output", split = FALSE)
[13:34:42.243]         if (TRUE) {
[13:34:42.243]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:34:42.243]         }
[13:34:42.243]         else {
[13:34:42.243]             ...future.result["stdout"] <- base::list(NULL)
[13:34:42.243]         }
[13:34:42.243]         base::close(...future.stdout)
[13:34:42.243]         ...future.stdout <- NULL
[13:34:42.243]     }
[13:34:42.243]     ...future.result$conditions <- ...future.conditions
[13:34:42.243]     ...future.result$finished <- base::Sys.time()
[13:34:42.243]     ...future.result
[13:34:42.243] }
[13:34:42.246] assign_globals() ...
[13:34:42.246] List of 5
[13:34:42.246]  $ ...future.FUN            :function (...)  
[13:34:42.246]  $ future.call.arguments    : list()
[13:34:42.246]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:42.246]  $ ...future.elements_ii    :List of 3
[13:34:42.246]   ..$ : int 0
[13:34:42.246]   ..$ : int 0
[13:34:42.246]   ..$ : int 0
[13:34:42.246]  $ ...future.seeds_ii       :List of 3
[13:34:42.246]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[13:34:42.246]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[13:34:42.246]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[13:34:42.246]  $ ...future.globals.maxSize: NULL
[13:34:42.246]  - attr(*, "where")=List of 5
[13:34:42.246]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:34:42.246]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:34:42.246]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:34:42.246]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:34:42.246]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:34:42.246]  - attr(*, "resolved")= logi FALSE
[13:34:42.246]  - attr(*, "total_size")= num 616
[13:34:42.246]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:42.246]  - attr(*, "already-done")= logi TRUE
[13:34:42.260] - reassign environment for ‘...future.FUN’
[13:34:42.260] - copied ‘...future.FUN’ to environment
[13:34:42.260] - copied ‘future.call.arguments’ to environment
[13:34:42.260] - copied ‘...future.elements_ii’ to environment
[13:34:42.260] - copied ‘...future.seeds_ii’ to environment
[13:34:42.261] - copied ‘...future.globals.maxSize’ to environment
[13:34:42.261] assign_globals() ... done
[13:34:42.261] requestCore(): workers = 2
[13:34:42.263] MulticoreFuture started
[13:34:42.264] - Launch lazy future ... done
[13:34:42.264] run() for ‘MulticoreFuture’ ... done
[13:34:42.264] Created future:
[13:34:42.264] plan(): Setting new future strategy stack:
[13:34:42.265] List of future strategies:
[13:34:42.265] 1. sequential:
[13:34:42.265]    - args: function (..., envir = parent.frame())
[13:34:42.265]    - tweaked: FALSE
[13:34:42.265]    - call: NULL
[13:34:42.266] plan(): nbrOfWorkers() = 1
[13:34:42.268] plan(): Setting new future strategy stack:
[13:34:42.268] List of future strategies:
[13:34:42.268] 1. multicore:
[13:34:42.268]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:34:42.268]    - tweaked: FALSE
[13:34:42.268]    - call: plan(strategy)
[13:34:42.273] plan(): nbrOfWorkers() = 2
[13:34:42.264] MulticoreFuture:
[13:34:42.264] Label: ‘future_replicate-2’
[13:34:42.264] Expression:
[13:34:42.264] {
[13:34:42.264]     do.call(function(...) {
[13:34:42.264]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:42.264]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:42.264]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:42.264]             on.exit(options(oopts), add = TRUE)
[13:34:42.264]         }
[13:34:42.264]         {
[13:34:42.264]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:42.264]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:42.264]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:42.264]                   envir = globalenv(), inherits = FALSE)
[13:34:42.264]                 ...future.FUN(...future.X_jj, ...)
[13:34:42.264]             })
[13:34:42.264]         }
[13:34:42.264]     }, args = future.call.arguments)
[13:34:42.264] }
[13:34:42.264] Lazy evaluation: FALSE
[13:34:42.264] Asynchronous evaluation: TRUE
[13:34:42.264] Local evaluation: TRUE
[13:34:42.264] Environment: R_GlobalEnv
[13:34:42.264] Capture standard output: TRUE
[13:34:42.264] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:34:42.264] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:34:42.264] Packages: <none>
[13:34:42.264] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:34:42.264] Resolved: TRUE
[13:34:42.264] Value: <not collected>
[13:34:42.264] Conditions captured: <none>
[13:34:42.264] Early signaling: FALSE
[13:34:42.264] Owner process: b8cf10c3-b112-c8f9-9398-a44000e21728
[13:34:42.264] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:42.274] Chunk #2 of 2 ... DONE
[13:34:42.274] Launching 2 futures (chunks) ... DONE
[13:34:42.274] Resolving 2 futures (chunks) ...
[13:34:42.275] resolve() on list ...
[13:34:42.275]  recursive: 0
[13:34:42.275]  length: 2
[13:34:42.275] 
[13:34:42.275] Future #1
[13:34:42.276] result() for MulticoreFuture ...
[13:34:42.276] result() for MulticoreFuture ...
[13:34:42.277] result() for MulticoreFuture ... done
[13:34:42.277] result() for MulticoreFuture ... done
[13:34:42.277] result() for MulticoreFuture ...
[13:34:42.277] result() for MulticoreFuture ... done
[13:34:42.277] signalConditionsASAP(MulticoreFuture, pos=1) ...
[13:34:42.277] - nx: 2
[13:34:42.277] - relay: TRUE
[13:34:42.278] - stdout: TRUE
[13:34:42.278] - signal: TRUE
[13:34:42.278] - resignal: FALSE
[13:34:42.278] - force: TRUE
[13:34:42.278] - relayed: [n=2] FALSE, FALSE
[13:34:42.278] - queued futures: [n=2] FALSE, FALSE
[13:34:42.278]  - until=1
[13:34:42.279]  - relaying element #1
[13:34:42.279] result() for MulticoreFuture ...
[13:34:42.279] result() for MulticoreFuture ... done
[13:34:42.279] result() for MulticoreFuture ...
[13:34:42.279] result() for MulticoreFuture ... done
[13:34:42.279] result() for MulticoreFuture ...
[13:34:42.279] result() for MulticoreFuture ... done
[13:34:42.280] result() for MulticoreFuture ...
[13:34:42.280] result() for MulticoreFuture ... done
[13:34:42.280] - relayed: [n=2] TRUE, FALSE
[13:34:42.280] - queued futures: [n=2] TRUE, FALSE
[13:34:42.280] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[13:34:42.280]  length: 1 (resolved future 1)
[13:34:42.281] Future #2
[13:34:42.281] result() for MulticoreFuture ...
[13:34:42.282] result() for MulticoreFuture ...
[13:34:42.282] result() for MulticoreFuture ... done
[13:34:42.282] result() for MulticoreFuture ... done
[13:34:42.282] result() for MulticoreFuture ...
[13:34:42.282] result() for MulticoreFuture ... done
[13:34:42.283] signalConditionsASAP(MulticoreFuture, pos=2) ...
[13:34:42.283] - nx: 2
[13:34:42.283] - relay: TRUE
[13:34:42.283] - stdout: TRUE
[13:34:42.283] - signal: TRUE
[13:34:42.283] - resignal: FALSE
[13:34:42.283] - force: TRUE
[13:34:42.283] - relayed: [n=2] TRUE, FALSE
[13:34:42.284] - queued futures: [n=2] TRUE, FALSE
[13:34:42.284]  - until=2
[13:34:42.284]  - relaying element #2
[13:34:42.284] result() for MulticoreFuture ...
[13:34:42.284] result() for MulticoreFuture ... done
[13:34:42.284] result() for MulticoreFuture ...
[13:34:42.284] result() for MulticoreFuture ... done
[13:34:42.284] result() for MulticoreFuture ...
[13:34:42.285] result() for MulticoreFuture ... done
[13:34:42.285] result() for MulticoreFuture ...
[13:34:42.285] result() for MulticoreFuture ... done
[13:34:42.285] - relayed: [n=2] TRUE, TRUE
[13:34:42.285] - queued futures: [n=2] TRUE, TRUE
[13:34:42.285] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[13:34:42.285]  length: 0 (resolved future 2)
[13:34:42.285] Relaying remaining futures
[13:34:42.285] signalConditionsASAP(NULL, pos=0) ...
[13:34:42.286] - nx: 2
[13:34:42.286] - relay: TRUE
[13:34:42.286] - stdout: TRUE
[13:34:42.286] - signal: TRUE
[13:34:42.286] - resignal: FALSE
[13:34:42.286] - force: TRUE
[13:34:42.286] - relayed: [n=2] TRUE, TRUE
[13:34:42.286] - queued futures: [n=2] TRUE, TRUE
 - flush all
[13:34:42.286] - relayed: [n=2] TRUE, TRUE
[13:34:42.287] - queued futures: [n=2] TRUE, TRUE
[13:34:42.287] signalConditionsASAP(NULL, pos=0) ... done
[13:34:42.287] resolve() on list ... DONE
[13:34:42.287] result() for MulticoreFuture ...
[13:34:42.287] result() for MulticoreFuture ... done
[13:34:42.287] result() for MulticoreFuture ...
[13:34:42.287] result() for MulticoreFuture ... done
[13:34:42.287] result() for MulticoreFuture ...
[13:34:42.287] result() for MulticoreFuture ... done
[13:34:42.288] result() for MulticoreFuture ...
[13:34:42.288] result() for MulticoreFuture ... done
[13:34:42.288]  - Number of value chunks collected: 2
[13:34:42.288] Resolving 2 futures (chunks) ... DONE
[13:34:42.288] Reducing values from 2 chunks ...
[13:34:42.288]  - Number of values collected after concatenation: 5
[13:34:42.288]  - Number of values expected: 5
[13:34:42.288] Reducing values from 2 chunks ... DONE
[13:34:42.289] future_lapply() ... DONE
- example(replicate) ...
[13:34:42.289] future_lapply() ...
[13:34:42.290] Generating random seeds ...
[13:34:42.290] Generating random seed streams for 5 elements ...
[13:34:42.290] Generating random seed streams for 5 elements ... DONE
[13:34:42.290] Generating random seeds ... DONE
[13:34:42.290] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:34:42.295] Number of chunks: 2
[13:34:42.295] getGlobalsAndPackagesXApply() ...
[13:34:42.295]  - future.globals: TRUE
[13:34:42.295] getGlobalsAndPackages() ...
[13:34:42.295] Searching for globals...
[13:34:42.299] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[13:34:42.299] Searching for globals ... DONE
[13:34:42.300] Resolving globals: FALSE
[13:34:42.300] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[13:34:42.301] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[13:34:42.301] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[13:34:42.301] 
[13:34:42.301] getGlobalsAndPackages() ... DONE
[13:34:42.301]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[13:34:42.301]  - needed namespaces: [n=0] 
[13:34:42.301] Finding globals ... DONE
[13:34:42.302]  - use_args: TRUE
[13:34:42.302]  - Getting '...' globals ...
[13:34:42.302] resolve() on list ...
[13:34:42.302]  recursive: 0
[13:34:42.302]  length: 1
[13:34:42.302]  elements: ‘...’
[13:34:42.303]  length: 0 (resolved future 1)
[13:34:42.303] resolve() on list ... DONE
[13:34:42.303]    - '...' content: [n=0] 
[13:34:42.303] List of 1
[13:34:42.303]  $ ...: list()
[13:34:42.303]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:42.303]  - attr(*, "where")=List of 1
[13:34:42.303]   ..$ ...:<environment: 0x5627bf51a120> 
[13:34:42.303]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:42.303]  - attr(*, "resolved")= logi TRUE
[13:34:42.303]  - attr(*, "total_size")= num NA
[13:34:42.306]  - Getting '...' globals ... DONE
[13:34:42.306] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[13:34:42.306] List of 4
[13:34:42.306]  $ ...future.FUN:function (...)  
[13:34:42.306]  $ foo          :function (x = 1, y = 2)  
[13:34:42.306]  $ x            : num 3
[13:34:42.306]  $ ...          : list()
[13:34:42.306]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:42.306]  - attr(*, "where")=List of 4
[13:34:42.306]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:34:42.306]   ..$ foo          :<environment: R_EmptyEnv> 
[13:34:42.306]   ..$ x            :<environment: R_EmptyEnv> 
[13:34:42.306]   ..$ ...          :<environment: 0x5627bf51a120> 
[13:34:42.306]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:42.306]  - attr(*, "resolved")= logi FALSE
[13:34:42.306]  - attr(*, "total_size")= num 2200
[13:34:42.310] Packages to be attached in all futures: [n=0] 
[13:34:42.310] getGlobalsAndPackagesXApply() ... DONE
[13:34:42.310] Number of futures (= number of chunks): 2
[13:34:42.310] Launching 2 futures (chunks) ...
[13:34:42.310] Chunk #1 of 2 ...
[13:34:42.311]  - Finding globals in 'X' for chunk #1 ...
[13:34:42.311] getGlobalsAndPackages() ...
[13:34:42.311] Searching for globals...
[13:34:42.311] 
[13:34:42.311] Searching for globals ... DONE
[13:34:42.311] - globals: [0] <none>
[13:34:42.311] getGlobalsAndPackages() ... DONE
[13:34:42.311]    + additional globals found: [n=0] 
[13:34:42.311]    + additional namespaces needed: [n=0] 
[13:34:42.312]  - Finding globals in 'X' for chunk #1 ... DONE
[13:34:42.312]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:34:42.312]  - seeds: [2] <seeds>
[13:34:42.312]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:42.312] getGlobalsAndPackages() ...
[13:34:42.312] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:42.312] Resolving globals: FALSE
[13:34:42.312] Tweak future expression to call with '...' arguments ...
[13:34:42.312] {
[13:34:42.312]     do.call(function(...) {
[13:34:42.312]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:42.312]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:42.312]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:42.312]             on.exit(options(oopts), add = TRUE)
[13:34:42.312]         }
[13:34:42.312]         {
[13:34:42.312]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:42.312]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:42.312]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:42.312]                   envir = globalenv(), inherits = FALSE)
[13:34:42.312]                 ...future.FUN(...future.X_jj, ...)
[13:34:42.312]             })
[13:34:42.312]         }
[13:34:42.312]     }, args = future.call.arguments)
[13:34:42.312] }
[13:34:42.313] Tweak future expression to call with '...' arguments ... DONE
[13:34:42.313] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:42.313] 
[13:34:42.313] getGlobalsAndPackages() ... DONE
[13:34:42.314] run() for ‘Future’ ...
[13:34:42.314] - state: ‘created’
[13:34:42.314] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:34:42.317] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:42.317] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:34:42.318]   - Field: ‘label’
[13:34:42.318]   - Field: ‘local’
[13:34:42.318]   - Field: ‘owner’
[13:34:42.318]   - Field: ‘envir’
[13:34:42.318]   - Field: ‘workers’
[13:34:42.318]   - Field: ‘packages’
[13:34:42.318]   - Field: ‘gc’
[13:34:42.318]   - Field: ‘job’
[13:34:42.318]   - Field: ‘conditions’
[13:34:42.318]   - Field: ‘expr’
[13:34:42.319]   - Field: ‘uuid’
[13:34:42.319]   - Field: ‘seed’
[13:34:42.319]   - Field: ‘version’
[13:34:42.319]   - Field: ‘result’
[13:34:42.319]   - Field: ‘asynchronous’
[13:34:42.319]   - Field: ‘calls’
[13:34:42.319]   - Field: ‘globals’
[13:34:42.319]   - Field: ‘stdout’
[13:34:42.319]   - Field: ‘earlySignal’
[13:34:42.319]   - Field: ‘lazy’
[13:34:42.319]   - Field: ‘state’
[13:34:42.320] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:34:42.320] - Launch lazy future ...
[13:34:42.320] Packages needed by the future expression (n = 0): <none>
[13:34:42.320] Packages needed by future strategies (n = 0): <none>
[13:34:42.320] {
[13:34:42.320]     {
[13:34:42.320]         {
[13:34:42.320]             ...future.startTime <- base::Sys.time()
[13:34:42.320]             {
[13:34:42.320]                 {
[13:34:42.320]                   {
[13:34:42.320]                     {
[13:34:42.320]                       base::local({
[13:34:42.320]                         has_future <- base::requireNamespace("future", 
[13:34:42.320]                           quietly = TRUE)
[13:34:42.320]                         if (has_future) {
[13:34:42.320]                           ns <- base::getNamespace("future")
[13:34:42.320]                           version <- ns[[".package"]][["version"]]
[13:34:42.320]                           if (is.null(version)) 
[13:34:42.320]                             version <- utils::packageVersion("future")
[13:34:42.320]                         }
[13:34:42.320]                         else {
[13:34:42.320]                           version <- NULL
[13:34:42.320]                         }
[13:34:42.320]                         if (!has_future || version < "1.8.0") {
[13:34:42.320]                           info <- base::c(r_version = base::gsub("R version ", 
[13:34:42.320]                             "", base::R.version$version.string), 
[13:34:42.320]                             platform = base::sprintf("%s (%s-bit)", 
[13:34:42.320]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:34:42.320]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:34:42.320]                               "release", "version")], collapse = " "), 
[13:34:42.320]                             hostname = base::Sys.info()[["nodename"]])
[13:34:42.320]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:34:42.320]                             info)
[13:34:42.320]                           info <- base::paste(info, collapse = "; ")
[13:34:42.320]                           if (!has_future) {
[13:34:42.320]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:34:42.320]                               info)
[13:34:42.320]                           }
[13:34:42.320]                           else {
[13:34:42.320]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:34:42.320]                               info, version)
[13:34:42.320]                           }
[13:34:42.320]                           base::stop(msg)
[13:34:42.320]                         }
[13:34:42.320]                       })
[13:34:42.320]                     }
[13:34:42.320]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:34:42.320]                     base::options(mc.cores = 1L)
[13:34:42.320]                   }
[13:34:42.320]                   ...future.strategy.old <- future::plan("list")
[13:34:42.320]                   options(future.plan = NULL)
[13:34:42.320]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:34:42.320]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:34:42.320]                 }
[13:34:42.320]                 ...future.workdir <- getwd()
[13:34:42.320]             }
[13:34:42.320]             ...future.oldOptions <- base::as.list(base::.Options)
[13:34:42.320]             ...future.oldEnvVars <- base::Sys.getenv()
[13:34:42.320]         }
[13:34:42.320]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:34:42.320]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:34:42.320]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:34:42.320]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:34:42.320]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:34:42.320]             future.stdout.windows.reencode = NULL, width = 80L)
[13:34:42.320]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:34:42.320]             base::names(...future.oldOptions))
[13:34:42.320]     }
[13:34:42.320]     if (FALSE) {
[13:34:42.320]     }
[13:34:42.320]     else {
[13:34:42.320]         if (TRUE) {
[13:34:42.320]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:34:42.320]                 open = "w")
[13:34:42.320]         }
[13:34:42.320]         else {
[13:34:42.320]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:34:42.320]                 windows = "NUL", "/dev/null"), open = "w")
[13:34:42.320]         }
[13:34:42.320]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:34:42.320]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:34:42.320]             base::sink(type = "output", split = FALSE)
[13:34:42.320]             base::close(...future.stdout)
[13:34:42.320]         }, add = TRUE)
[13:34:42.320]     }
[13:34:42.320]     ...future.frame <- base::sys.nframe()
[13:34:42.320]     ...future.conditions <- base::list()
[13:34:42.320]     ...future.rng <- base::globalenv()$.Random.seed
[13:34:42.320]     if (FALSE) {
[13:34:42.320]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:34:42.320]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:34:42.320]     }
[13:34:42.320]     ...future.result <- base::tryCatch({
[13:34:42.320]         base::withCallingHandlers({
[13:34:42.320]             ...future.value <- base::withVisible(base::local({
[13:34:42.320]                 withCallingHandlers({
[13:34:42.320]                   {
[13:34:42.320]                     do.call(function(...) {
[13:34:42.320]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:42.320]                       if (!identical(...future.globals.maxSize.org, 
[13:34:42.320]                         ...future.globals.maxSize)) {
[13:34:42.320]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:42.320]                         on.exit(options(oopts), add = TRUE)
[13:34:42.320]                       }
[13:34:42.320]                       {
[13:34:42.320]                         lapply(seq_along(...future.elements_ii), 
[13:34:42.320]                           FUN = function(jj) {
[13:34:42.320]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:42.320]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:42.320]                               envir = globalenv(), inherits = FALSE)
[13:34:42.320]                             ...future.FUN(...future.X_jj, ...)
[13:34:42.320]                           })
[13:34:42.320]                       }
[13:34:42.320]                     }, args = future.call.arguments)
[13:34:42.320]                   }
[13:34:42.320]                 }, immediateCondition = function(cond) {
[13:34:42.320]                   save_rds <- function (object, pathname, ...) 
[13:34:42.320]                   {
[13:34:42.320]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:34:42.320]                     if (file_test("-f", pathname_tmp)) {
[13:34:42.320]                       fi_tmp <- file.info(pathname_tmp)
[13:34:42.320]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:34:42.320]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:34:42.320]                         fi_tmp[["mtime"]])
[13:34:42.320]                     }
[13:34:42.320]                     tryCatch({
[13:34:42.320]                       saveRDS(object, file = pathname_tmp, ...)
[13:34:42.320]                     }, error = function(ex) {
[13:34:42.320]                       msg <- conditionMessage(ex)
[13:34:42.320]                       fi_tmp <- file.info(pathname_tmp)
[13:34:42.320]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:34:42.320]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:34:42.320]                         fi_tmp[["mtime"]], msg)
[13:34:42.320]                       ex$message <- msg
[13:34:42.320]                       stop(ex)
[13:34:42.320]                     })
[13:34:42.320]                     stopifnot(file_test("-f", pathname_tmp))
[13:34:42.320]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:34:42.320]                     if (!res || file_test("-f", pathname_tmp)) {
[13:34:42.320]                       fi_tmp <- file.info(pathname_tmp)
[13:34:42.320]                       fi <- file.info(pathname)
[13:34:42.320]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:34:42.320]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:34:42.320]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:34:42.320]                         fi[["size"]], fi[["mtime"]])
[13:34:42.320]                       stop(msg)
[13:34:42.320]                     }
[13:34:42.320]                     invisible(pathname)
[13:34:42.320]                   }
[13:34:42.320]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:34:42.320]                     rootPath = tempdir()) 
[13:34:42.320]                   {
[13:34:42.320]                     obj <- list(time = Sys.time(), condition = cond)
[13:34:42.320]                     file <- tempfile(pattern = class(cond)[1], 
[13:34:42.320]                       tmpdir = path, fileext = ".rds")
[13:34:42.320]                     save_rds(obj, file)
[13:34:42.320]                   }
[13:34:42.320]                   saveImmediateCondition(cond, path = "/tmp/RtmplfSa61/.future/immediateConditions")
[13:34:42.320]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:42.320]                   {
[13:34:42.320]                     inherits <- base::inherits
[13:34:42.320]                     invokeRestart <- base::invokeRestart
[13:34:42.320]                     is.null <- base::is.null
[13:34:42.320]                     muffled <- FALSE
[13:34:42.320]                     if (inherits(cond, "message")) {
[13:34:42.320]                       muffled <- grepl(pattern, "muffleMessage")
[13:34:42.320]                       if (muffled) 
[13:34:42.320]                         invokeRestart("muffleMessage")
[13:34:42.320]                     }
[13:34:42.320]                     else if (inherits(cond, "warning")) {
[13:34:42.320]                       muffled <- grepl(pattern, "muffleWarning")
[13:34:42.320]                       if (muffled) 
[13:34:42.320]                         invokeRestart("muffleWarning")
[13:34:42.320]                     }
[13:34:42.320]                     else if (inherits(cond, "condition")) {
[13:34:42.320]                       if (!is.null(pattern)) {
[13:34:42.320]                         computeRestarts <- base::computeRestarts
[13:34:42.320]                         grepl <- base::grepl
[13:34:42.320]                         restarts <- computeRestarts(cond)
[13:34:42.320]                         for (restart in restarts) {
[13:34:42.320]                           name <- restart$name
[13:34:42.320]                           if (is.null(name)) 
[13:34:42.320]                             next
[13:34:42.320]                           if (!grepl(pattern, name)) 
[13:34:42.320]                             next
[13:34:42.320]                           invokeRestart(restart)
[13:34:42.320]                           muffled <- TRUE
[13:34:42.320]                           break
[13:34:42.320]                         }
[13:34:42.320]                       }
[13:34:42.320]                     }
[13:34:42.320]                     invisible(muffled)
[13:34:42.320]                   }
[13:34:42.320]                   muffleCondition(cond)
[13:34:42.320]                 })
[13:34:42.320]             }))
[13:34:42.320]             future::FutureResult(value = ...future.value$value, 
[13:34:42.320]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:42.320]                   ...future.rng), globalenv = if (FALSE) 
[13:34:42.320]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:34:42.320]                     ...future.globalenv.names))
[13:34:42.320]                 else NULL, started = ...future.startTime, version = "1.8")
[13:34:42.320]         }, condition = base::local({
[13:34:42.320]             c <- base::c
[13:34:42.320]             inherits <- base::inherits
[13:34:42.320]             invokeRestart <- base::invokeRestart
[13:34:42.320]             length <- base::length
[13:34:42.320]             list <- base::list
[13:34:42.320]             seq.int <- base::seq.int
[13:34:42.320]             signalCondition <- base::signalCondition
[13:34:42.320]             sys.calls <- base::sys.calls
[13:34:42.320]             `[[` <- base::`[[`
[13:34:42.320]             `+` <- base::`+`
[13:34:42.320]             `<<-` <- base::`<<-`
[13:34:42.320]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:34:42.320]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:34:42.320]                   3L)]
[13:34:42.320]             }
[13:34:42.320]             function(cond) {
[13:34:42.320]                 is_error <- inherits(cond, "error")
[13:34:42.320]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:34:42.320]                   NULL)
[13:34:42.320]                 if (is_error) {
[13:34:42.320]                   sessionInformation <- function() {
[13:34:42.320]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:34:42.320]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:34:42.320]                       search = base::search(), system = base::Sys.info())
[13:34:42.320]                   }
[13:34:42.320]                   ...future.conditions[[length(...future.conditions) + 
[13:34:42.320]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:34:42.320]                     cond$call), session = sessionInformation(), 
[13:34:42.320]                     timestamp = base::Sys.time(), signaled = 0L)
[13:34:42.320]                   signalCondition(cond)
[13:34:42.320]                 }
[13:34:42.320]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:34:42.320]                 "immediateCondition"))) {
[13:34:42.320]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:34:42.320]                   ...future.conditions[[length(...future.conditions) + 
[13:34:42.320]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:34:42.320]                   if (TRUE && !signal) {
[13:34:42.320]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:42.320]                     {
[13:34:42.320]                       inherits <- base::inherits
[13:34:42.320]                       invokeRestart <- base::invokeRestart
[13:34:42.320]                       is.null <- base::is.null
[13:34:42.320]                       muffled <- FALSE
[13:34:42.320]                       if (inherits(cond, "message")) {
[13:34:42.320]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:42.320]                         if (muffled) 
[13:34:42.320]                           invokeRestart("muffleMessage")
[13:34:42.320]                       }
[13:34:42.320]                       else if (inherits(cond, "warning")) {
[13:34:42.320]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:42.320]                         if (muffled) 
[13:34:42.320]                           invokeRestart("muffleWarning")
[13:34:42.320]                       }
[13:34:42.320]                       else if (inherits(cond, "condition")) {
[13:34:42.320]                         if (!is.null(pattern)) {
[13:34:42.320]                           computeRestarts <- base::computeRestarts
[13:34:42.320]                           grepl <- base::grepl
[13:34:42.320]                           restarts <- computeRestarts(cond)
[13:34:42.320]                           for (restart in restarts) {
[13:34:42.320]                             name <- restart$name
[13:34:42.320]                             if (is.null(name)) 
[13:34:42.320]                               next
[13:34:42.320]                             if (!grepl(pattern, name)) 
[13:34:42.320]                               next
[13:34:42.320]                             invokeRestart(restart)
[13:34:42.320]                             muffled <- TRUE
[13:34:42.320]                             break
[13:34:42.320]                           }
[13:34:42.320]                         }
[13:34:42.320]                       }
[13:34:42.320]                       invisible(muffled)
[13:34:42.320]                     }
[13:34:42.320]                     muffleCondition(cond, pattern = "^muffle")
[13:34:42.320]                   }
[13:34:42.320]                 }
[13:34:42.320]                 else {
[13:34:42.320]                   if (TRUE) {
[13:34:42.320]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:42.320]                     {
[13:34:42.320]                       inherits <- base::inherits
[13:34:42.320]                       invokeRestart <- base::invokeRestart
[13:34:42.320]                       is.null <- base::is.null
[13:34:42.320]                       muffled <- FALSE
[13:34:42.320]                       if (inherits(cond, "message")) {
[13:34:42.320]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:42.320]                         if (muffled) 
[13:34:42.320]                           invokeRestart("muffleMessage")
[13:34:42.320]                       }
[13:34:42.320]                       else if (inherits(cond, "warning")) {
[13:34:42.320]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:42.320]                         if (muffled) 
[13:34:42.320]                           invokeRestart("muffleWarning")
[13:34:42.320]                       }
[13:34:42.320]                       else if (inherits(cond, "condition")) {
[13:34:42.320]                         if (!is.null(pattern)) {
[13:34:42.320]                           computeRestarts <- base::computeRestarts
[13:34:42.320]                           grepl <- base::grepl
[13:34:42.320]                           restarts <- computeRestarts(cond)
[13:34:42.320]                           for (restart in restarts) {
[13:34:42.320]                             name <- restart$name
[13:34:42.320]                             if (is.null(name)) 
[13:34:42.320]                               next
[13:34:42.320]                             if (!grepl(pattern, name)) 
[13:34:42.320]                               next
[13:34:42.320]                             invokeRestart(restart)
[13:34:42.320]                             muffled <- TRUE
[13:34:42.320]                             break
[13:34:42.320]                           }
[13:34:42.320]                         }
[13:34:42.320]                       }
[13:34:42.320]                       invisible(muffled)
[13:34:42.320]                     }
[13:34:42.320]                     muffleCondition(cond, pattern = "^muffle")
[13:34:42.320]                   }
[13:34:42.320]                 }
[13:34:42.320]             }
[13:34:42.320]         }))
[13:34:42.320]     }, error = function(ex) {
[13:34:42.320]         base::structure(base::list(value = NULL, visible = NULL, 
[13:34:42.320]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:42.320]                 ...future.rng), started = ...future.startTime, 
[13:34:42.320]             finished = Sys.time(), session_uuid = NA_character_, 
[13:34:42.320]             version = "1.8"), class = "FutureResult")
[13:34:42.320]     }, finally = {
[13:34:42.320]         if (!identical(...future.workdir, getwd())) 
[13:34:42.320]             setwd(...future.workdir)
[13:34:42.320]         {
[13:34:42.320]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:34:42.320]                 ...future.oldOptions$nwarnings <- NULL
[13:34:42.320]             }
[13:34:42.320]             base::options(...future.oldOptions)
[13:34:42.320]             if (.Platform$OS.type == "windows") {
[13:34:42.320]                 old_names <- names(...future.oldEnvVars)
[13:34:42.320]                 envs <- base::Sys.getenv()
[13:34:42.320]                 names <- names(envs)
[13:34:42.320]                 common <- intersect(names, old_names)
[13:34:42.320]                 added <- setdiff(names, old_names)
[13:34:42.320]                 removed <- setdiff(old_names, names)
[13:34:42.320]                 changed <- common[...future.oldEnvVars[common] != 
[13:34:42.320]                   envs[common]]
[13:34:42.320]                 NAMES <- toupper(changed)
[13:34:42.320]                 args <- list()
[13:34:42.320]                 for (kk in seq_along(NAMES)) {
[13:34:42.320]                   name <- changed[[kk]]
[13:34:42.320]                   NAME <- NAMES[[kk]]
[13:34:42.320]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:42.320]                     next
[13:34:42.320]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:42.320]                 }
[13:34:42.320]                 NAMES <- toupper(added)
[13:34:42.320]                 for (kk in seq_along(NAMES)) {
[13:34:42.320]                   name <- added[[kk]]
[13:34:42.320]                   NAME <- NAMES[[kk]]
[13:34:42.320]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:42.320]                     next
[13:34:42.320]                   args[[name]] <- ""
[13:34:42.320]                 }
[13:34:42.320]                 NAMES <- toupper(removed)
[13:34:42.320]                 for (kk in seq_along(NAMES)) {
[13:34:42.320]                   name <- removed[[kk]]
[13:34:42.320]                   NAME <- NAMES[[kk]]
[13:34:42.320]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:42.320]                     next
[13:34:42.320]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:42.320]                 }
[13:34:42.320]                 if (length(args) > 0) 
[13:34:42.320]                   base::do.call(base::Sys.setenv, args = args)
[13:34:42.320]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:34:42.320]             }
[13:34:42.320]             else {
[13:34:42.320]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:34:42.320]             }
[13:34:42.320]             {
[13:34:42.320]                 if (base::length(...future.futureOptionsAdded) > 
[13:34:42.320]                   0L) {
[13:34:42.320]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:34:42.320]                   base::names(opts) <- ...future.futureOptionsAdded
[13:34:42.320]                   base::options(opts)
[13:34:42.320]                 }
[13:34:42.320]                 {
[13:34:42.320]                   {
[13:34:42.320]                     base::options(mc.cores = ...future.mc.cores.old)
[13:34:42.320]                     NULL
[13:34:42.320]                   }
[13:34:42.320]                   options(future.plan = NULL)
[13:34:42.320]                   if (is.na(NA_character_)) 
[13:34:42.320]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:34:42.320]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:34:42.320]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:34:42.320]                     .init = FALSE)
[13:34:42.320]                 }
[13:34:42.320]             }
[13:34:42.320]         }
[13:34:42.320]     })
[13:34:42.320]     if (TRUE) {
[13:34:42.320]         base::sink(type = "output", split = FALSE)
[13:34:42.320]         if (TRUE) {
[13:34:42.320]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:34:42.320]         }
[13:34:42.320]         else {
[13:34:42.320]             ...future.result["stdout"] <- base::list(NULL)
[13:34:42.320]         }
[13:34:42.320]         base::close(...future.stdout)
[13:34:42.320]         ...future.stdout <- NULL
[13:34:42.320]     }
[13:34:42.320]     ...future.result$conditions <- ...future.conditions
[13:34:42.320]     ...future.result$finished <- base::Sys.time()
[13:34:42.320]     ...future.result
[13:34:42.320] }
[13:34:42.323] assign_globals() ...
[13:34:42.323] List of 7
[13:34:42.323]  $ ...future.FUN            :function (...)  
[13:34:42.323]  $ foo                      :function (x = 1, y = 2)  
[13:34:42.323]  $ x                        : num 3
[13:34:42.323]  $ future.call.arguments    : list()
[13:34:42.323]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:42.323]  $ ...future.elements_ii    :List of 2
[13:34:42.323]   ..$ : int 0
[13:34:42.323]   ..$ : int 0
[13:34:42.323]  $ ...future.seeds_ii       :List of 2
[13:34:42.323]   ..$ : int [1:7] 10407 2118672648 973015440 1612380474 -529784560 -1301423278 1609721430
[13:34:42.323]   ..$ : int [1:7] 10407 -919798402 -1810630142 -850731864 -613657701 1060945587 1656143537
[13:34:42.323]  $ ...future.globals.maxSize: NULL
[13:34:42.323]  - attr(*, "where")=List of 7
[13:34:42.323]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:34:42.323]   ..$ foo                      :<environment: R_EmptyEnv> 
[13:34:42.323]   ..$ x                        :<environment: R_EmptyEnv> 
[13:34:42.323]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:34:42.323]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:34:42.323]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:34:42.323]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:34:42.323]  - attr(*, "resolved")= logi FALSE
[13:34:42.323]  - attr(*, "total_size")= num 2200
[13:34:42.323]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:42.323]  - attr(*, "already-done")= logi TRUE
[13:34:42.332] - reassign environment for ‘...future.FUN’
[13:34:42.332] - copied ‘...future.FUN’ to environment
[13:34:42.332] - reassign environment for ‘foo’
[13:34:42.332] - copied ‘foo’ to environment
[13:34:42.332] - copied ‘x’ to environment
[13:34:42.332] - copied ‘future.call.arguments’ to environment
[13:34:42.332] - copied ‘...future.elements_ii’ to environment
[13:34:42.332] - copied ‘...future.seeds_ii’ to environment
[13:34:42.332] - copied ‘...future.globals.maxSize’ to environment
[13:34:42.332] assign_globals() ... done
[13:34:42.333] requestCore(): workers = 2
[13:34:42.334] MulticoreFuture started
[13:34:42.335] - Launch lazy future ... done
[13:34:42.335] run() for ‘MulticoreFuture’ ... done
[13:34:42.336] Created future:
[13:34:42.336] plan(): Setting new future strategy stack:
[13:34:42.336] List of future strategies:
[13:34:42.336] 1. sequential:
[13:34:42.336]    - args: function (..., envir = parent.frame())
[13:34:42.336]    - tweaked: FALSE
[13:34:42.336]    - call: NULL
[13:34:42.337] plan(): nbrOfWorkers() = 1
[13:34:42.339] plan(): Setting new future strategy stack:
[13:34:42.339] List of future strategies:
[13:34:42.339] 1. multicore:
[13:34:42.339]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:34:42.339]    - tweaked: FALSE
[13:34:42.339]    - call: plan(strategy)
[13:34:42.344] plan(): nbrOfWorkers() = 2
[13:34:42.336] MulticoreFuture:
[13:34:42.336] Label: ‘future_replicate-1’
[13:34:42.336] Expression:
[13:34:42.336] {
[13:34:42.336]     do.call(function(...) {
[13:34:42.336]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:42.336]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:42.336]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:42.336]             on.exit(options(oopts), add = TRUE)
[13:34:42.336]         }
[13:34:42.336]         {
[13:34:42.336]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:42.336]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:42.336]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:42.336]                   envir = globalenv(), inherits = FALSE)
[13:34:42.336]                 ...future.FUN(...future.X_jj, ...)
[13:34:42.336]             })
[13:34:42.336]         }
[13:34:42.336]     }, args = future.call.arguments)
[13:34:42.336] }
[13:34:42.336] Lazy evaluation: FALSE
[13:34:42.336] Asynchronous evaluation: TRUE
[13:34:42.336] Local evaluation: TRUE
[13:34:42.336] Environment: 0x5627bf516468
[13:34:42.336] Capture standard output: TRUE
[13:34:42.336] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:34:42.336] Globals: 7 objects totaling 2.41 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, ...)
[13:34:42.336] Packages: <none>
[13:34:42.336] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:34:42.336] Resolved: TRUE
[13:34:42.336] Value: <not collected>
[13:34:42.336] Conditions captured: <none>
[13:34:42.336] Early signaling: FALSE
[13:34:42.336] Owner process: b8cf10c3-b112-c8f9-9398-a44000e21728
[13:34:42.336] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:42.345] Chunk #1 of 2 ... DONE
[13:34:42.345] Chunk #2 of 2 ...
[13:34:42.346]  - Finding globals in 'X' for chunk #2 ...
[13:34:42.346] getGlobalsAndPackages() ...
[13:34:42.346] Searching for globals...
[13:34:42.346] 
[13:34:42.346] Searching for globals ... DONE
[13:34:42.347] - globals: [0] <none>
[13:34:42.347] getGlobalsAndPackages() ... DONE
[13:34:42.347]    + additional globals found: [n=0] 
[13:34:42.347]    + additional namespaces needed: [n=0] 
[13:34:42.347]  - Finding globals in 'X' for chunk #2 ... DONE
[13:34:42.347]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:34:42.347]  - seeds: [3] <seeds>
[13:34:42.348]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:42.348] getGlobalsAndPackages() ...
[13:34:42.348] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:42.348] Resolving globals: FALSE
[13:34:42.348] Tweak future expression to call with '...' arguments ...
[13:34:42.348] {
[13:34:42.348]     do.call(function(...) {
[13:34:42.348]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:42.348]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:42.348]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:42.348]             on.exit(options(oopts), add = TRUE)
[13:34:42.348]         }
[13:34:42.348]         {
[13:34:42.348]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:42.348]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:42.348]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:42.348]                   envir = globalenv(), inherits = FALSE)
[13:34:42.348]                 ...future.FUN(...future.X_jj, ...)
[13:34:42.348]             })
[13:34:42.348]         }
[13:34:42.348]     }, args = future.call.arguments)
[13:34:42.348] }
[13:34:42.349] Tweak future expression to call with '...' arguments ... DONE
[13:34:42.350] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:42.350] 
[13:34:42.350] getGlobalsAndPackages() ... DONE
[13:34:42.350] run() for ‘Future’ ...
[13:34:42.351] - state: ‘created’
[13:34:42.351] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:34:42.355] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:42.356] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:34:42.356]   - Field: ‘label’
[13:34:42.356]   - Field: ‘local’
[13:34:42.356]   - Field: ‘owner’
[13:34:42.356]   - Field: ‘envir’
[13:34:42.357]   - Field: ‘workers’
[13:34:42.357]   - Field: ‘packages’
[13:34:42.357]   - Field: ‘gc’
[13:34:42.357]   - Field: ‘job’
[13:34:42.357]   - Field: ‘conditions’
[13:34:42.357]   - Field: ‘expr’
[13:34:42.358]   - Field: ‘uuid’
[13:34:42.358]   - Field: ‘seed’
[13:34:42.358]   - Field: ‘version’
[13:34:42.358]   - Field: ‘result’
[13:34:42.358]   - Field: ‘asynchronous’
[13:34:42.358]   - Field: ‘calls’
[13:34:42.358]   - Field: ‘globals’
[13:34:42.359]   - Field: ‘stdout’
[13:34:42.359]   - Field: ‘earlySignal’
[13:34:42.359]   - Field: ‘lazy’
[13:34:42.359]   - Field: ‘state’
[13:34:42.359] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:34:42.359] - Launch lazy future ...
[13:34:42.360] Packages needed by the future expression (n = 0): <none>
[13:34:42.360] Packages needed by future strategies (n = 0): <none>
[13:34:42.361] {
[13:34:42.361]     {
[13:34:42.361]         {
[13:34:42.361]             ...future.startTime <- base::Sys.time()
[13:34:42.361]             {
[13:34:42.361]                 {
[13:34:42.361]                   {
[13:34:42.361]                     {
[13:34:42.361]                       base::local({
[13:34:42.361]                         has_future <- base::requireNamespace("future", 
[13:34:42.361]                           quietly = TRUE)
[13:34:42.361]                         if (has_future) {
[13:34:42.361]                           ns <- base::getNamespace("future")
[13:34:42.361]                           version <- ns[[".package"]][["version"]]
[13:34:42.361]                           if (is.null(version)) 
[13:34:42.361]                             version <- utils::packageVersion("future")
[13:34:42.361]                         }
[13:34:42.361]                         else {
[13:34:42.361]                           version <- NULL
[13:34:42.361]                         }
[13:34:42.361]                         if (!has_future || version < "1.8.0") {
[13:34:42.361]                           info <- base::c(r_version = base::gsub("R version ", 
[13:34:42.361]                             "", base::R.version$version.string), 
[13:34:42.361]                             platform = base::sprintf("%s (%s-bit)", 
[13:34:42.361]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:34:42.361]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:34:42.361]                               "release", "version")], collapse = " "), 
[13:34:42.361]                             hostname = base::Sys.info()[["nodename"]])
[13:34:42.361]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:34:42.361]                             info)
[13:34:42.361]                           info <- base::paste(info, collapse = "; ")
[13:34:42.361]                           if (!has_future) {
[13:34:42.361]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:34:42.361]                               info)
[13:34:42.361]                           }
[13:34:42.361]                           else {
[13:34:42.361]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:34:42.361]                               info, version)
[13:34:42.361]                           }
[13:34:42.361]                           base::stop(msg)
[13:34:42.361]                         }
[13:34:42.361]                       })
[13:34:42.361]                     }
[13:34:42.361]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:34:42.361]                     base::options(mc.cores = 1L)
[13:34:42.361]                   }
[13:34:42.361]                   ...future.strategy.old <- future::plan("list")
[13:34:42.361]                   options(future.plan = NULL)
[13:34:42.361]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:34:42.361]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:34:42.361]                 }
[13:34:42.361]                 ...future.workdir <- getwd()
[13:34:42.361]             }
[13:34:42.361]             ...future.oldOptions <- base::as.list(base::.Options)
[13:34:42.361]             ...future.oldEnvVars <- base::Sys.getenv()
[13:34:42.361]         }
[13:34:42.361]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:34:42.361]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:34:42.361]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:34:42.361]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:34:42.361]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:34:42.361]             future.stdout.windows.reencode = NULL, width = 80L)
[13:34:42.361]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:34:42.361]             base::names(...future.oldOptions))
[13:34:42.361]     }
[13:34:42.361]     if (FALSE) {
[13:34:42.361]     }
[13:34:42.361]     else {
[13:34:42.361]         if (TRUE) {
[13:34:42.361]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:34:42.361]                 open = "w")
[13:34:42.361]         }
[13:34:42.361]         else {
[13:34:42.361]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:34:42.361]                 windows = "NUL", "/dev/null"), open = "w")
[13:34:42.361]         }
[13:34:42.361]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:34:42.361]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:34:42.361]             base::sink(type = "output", split = FALSE)
[13:34:42.361]             base::close(...future.stdout)
[13:34:42.361]         }, add = TRUE)
[13:34:42.361]     }
[13:34:42.361]     ...future.frame <- base::sys.nframe()
[13:34:42.361]     ...future.conditions <- base::list()
[13:34:42.361]     ...future.rng <- base::globalenv()$.Random.seed
[13:34:42.361]     if (FALSE) {
[13:34:42.361]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:34:42.361]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:34:42.361]     }
[13:34:42.361]     ...future.result <- base::tryCatch({
[13:34:42.361]         base::withCallingHandlers({
[13:34:42.361]             ...future.value <- base::withVisible(base::local({
[13:34:42.361]                 withCallingHandlers({
[13:34:42.361]                   {
[13:34:42.361]                     do.call(function(...) {
[13:34:42.361]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:42.361]                       if (!identical(...future.globals.maxSize.org, 
[13:34:42.361]                         ...future.globals.maxSize)) {
[13:34:42.361]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:42.361]                         on.exit(options(oopts), add = TRUE)
[13:34:42.361]                       }
[13:34:42.361]                       {
[13:34:42.361]                         lapply(seq_along(...future.elements_ii), 
[13:34:42.361]                           FUN = function(jj) {
[13:34:42.361]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:42.361]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:42.361]                               envir = globalenv(), inherits = FALSE)
[13:34:42.361]                             ...future.FUN(...future.X_jj, ...)
[13:34:42.361]                           })
[13:34:42.361]                       }
[13:34:42.361]                     }, args = future.call.arguments)
[13:34:42.361]                   }
[13:34:42.361]                 }, immediateCondition = function(cond) {
[13:34:42.361]                   save_rds <- function (object, pathname, ...) 
[13:34:42.361]                   {
[13:34:42.361]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:34:42.361]                     if (file_test("-f", pathname_tmp)) {
[13:34:42.361]                       fi_tmp <- file.info(pathname_tmp)
[13:34:42.361]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:34:42.361]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:34:42.361]                         fi_tmp[["mtime"]])
[13:34:42.361]                     }
[13:34:42.361]                     tryCatch({
[13:34:42.361]                       saveRDS(object, file = pathname_tmp, ...)
[13:34:42.361]                     }, error = function(ex) {
[13:34:42.361]                       msg <- conditionMessage(ex)
[13:34:42.361]                       fi_tmp <- file.info(pathname_tmp)
[13:34:42.361]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:34:42.361]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:34:42.361]                         fi_tmp[["mtime"]], msg)
[13:34:42.361]                       ex$message <- msg
[13:34:42.361]                       stop(ex)
[13:34:42.361]                     })
[13:34:42.361]                     stopifnot(file_test("-f", pathname_tmp))
[13:34:42.361]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:34:42.361]                     if (!res || file_test("-f", pathname_tmp)) {
[13:34:42.361]                       fi_tmp <- file.info(pathname_tmp)
[13:34:42.361]                       fi <- file.info(pathname)
[13:34:42.361]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:34:42.361]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:34:42.361]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:34:42.361]                         fi[["size"]], fi[["mtime"]])
[13:34:42.361]                       stop(msg)
[13:34:42.361]                     }
[13:34:42.361]                     invisible(pathname)
[13:34:42.361]                   }
[13:34:42.361]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:34:42.361]                     rootPath = tempdir()) 
[13:34:42.361]                   {
[13:34:42.361]                     obj <- list(time = Sys.time(), condition = cond)
[13:34:42.361]                     file <- tempfile(pattern = class(cond)[1], 
[13:34:42.361]                       tmpdir = path, fileext = ".rds")
[13:34:42.361]                     save_rds(obj, file)
[13:34:42.361]                   }
[13:34:42.361]                   saveImmediateCondition(cond, path = "/tmp/RtmplfSa61/.future/immediateConditions")
[13:34:42.361]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:42.361]                   {
[13:34:42.361]                     inherits <- base::inherits
[13:34:42.361]                     invokeRestart <- base::invokeRestart
[13:34:42.361]                     is.null <- base::is.null
[13:34:42.361]                     muffled <- FALSE
[13:34:42.361]                     if (inherits(cond, "message")) {
[13:34:42.361]                       muffled <- grepl(pattern, "muffleMessage")
[13:34:42.361]                       if (muffled) 
[13:34:42.361]                         invokeRestart("muffleMessage")
[13:34:42.361]                     }
[13:34:42.361]                     else if (inherits(cond, "warning")) {
[13:34:42.361]                       muffled <- grepl(pattern, "muffleWarning")
[13:34:42.361]                       if (muffled) 
[13:34:42.361]                         invokeRestart("muffleWarning")
[13:34:42.361]                     }
[13:34:42.361]                     else if (inherits(cond, "condition")) {
[13:34:42.361]                       if (!is.null(pattern)) {
[13:34:42.361]                         computeRestarts <- base::computeRestarts
[13:34:42.361]                         grepl <- base::grepl
[13:34:42.361]                         restarts <- computeRestarts(cond)
[13:34:42.361]                         for (restart in restarts) {
[13:34:42.361]                           name <- restart$name
[13:34:42.361]                           if (is.null(name)) 
[13:34:42.361]                             next
[13:34:42.361]                           if (!grepl(pattern, name)) 
[13:34:42.361]                             next
[13:34:42.361]                           invokeRestart(restart)
[13:34:42.361]                           muffled <- TRUE
[13:34:42.361]                           break
[13:34:42.361]                         }
[13:34:42.361]                       }
[13:34:42.361]                     }
[13:34:42.361]                     invisible(muffled)
[13:34:42.361]                   }
[13:34:42.361]                   muffleCondition(cond)
[13:34:42.361]                 })
[13:34:42.361]             }))
[13:34:42.361]             future::FutureResult(value = ...future.value$value, 
[13:34:42.361]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:42.361]                   ...future.rng), globalenv = if (FALSE) 
[13:34:42.361]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:34:42.361]                     ...future.globalenv.names))
[13:34:42.361]                 else NULL, started = ...future.startTime, version = "1.8")
[13:34:42.361]         }, condition = base::local({
[13:34:42.361]             c <- base::c
[13:34:42.361]             inherits <- base::inherits
[13:34:42.361]             invokeRestart <- base::invokeRestart
[13:34:42.361]             length <- base::length
[13:34:42.361]             list <- base::list
[13:34:42.361]             seq.int <- base::seq.int
[13:34:42.361]             signalCondition <- base::signalCondition
[13:34:42.361]             sys.calls <- base::sys.calls
[13:34:42.361]             `[[` <- base::`[[`
[13:34:42.361]             `+` <- base::`+`
[13:34:42.361]             `<<-` <- base::`<<-`
[13:34:42.361]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:34:42.361]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:34:42.361]                   3L)]
[13:34:42.361]             }
[13:34:42.361]             function(cond) {
[13:34:42.361]                 is_error <- inherits(cond, "error")
[13:34:42.361]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:34:42.361]                   NULL)
[13:34:42.361]                 if (is_error) {
[13:34:42.361]                   sessionInformation <- function() {
[13:34:42.361]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:34:42.361]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:34:42.361]                       search = base::search(), system = base::Sys.info())
[13:34:42.361]                   }
[13:34:42.361]                   ...future.conditions[[length(...future.conditions) + 
[13:34:42.361]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:34:42.361]                     cond$call), session = sessionInformation(), 
[13:34:42.361]                     timestamp = base::Sys.time(), signaled = 0L)
[13:34:42.361]                   signalCondition(cond)
[13:34:42.361]                 }
[13:34:42.361]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:34:42.361]                 "immediateCondition"))) {
[13:34:42.361]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:34:42.361]                   ...future.conditions[[length(...future.conditions) + 
[13:34:42.361]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:34:42.361]                   if (TRUE && !signal) {
[13:34:42.361]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:42.361]                     {
[13:34:42.361]                       inherits <- base::inherits
[13:34:42.361]                       invokeRestart <- base::invokeRestart
[13:34:42.361]                       is.null <- base::is.null
[13:34:42.361]                       muffled <- FALSE
[13:34:42.361]                       if (inherits(cond, "message")) {
[13:34:42.361]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:42.361]                         if (muffled) 
[13:34:42.361]                           invokeRestart("muffleMessage")
[13:34:42.361]                       }
[13:34:42.361]                       else if (inherits(cond, "warning")) {
[13:34:42.361]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:42.361]                         if (muffled) 
[13:34:42.361]                           invokeRestart("muffleWarning")
[13:34:42.361]                       }
[13:34:42.361]                       else if (inherits(cond, "condition")) {
[13:34:42.361]                         if (!is.null(pattern)) {
[13:34:42.361]                           computeRestarts <- base::computeRestarts
[13:34:42.361]                           grepl <- base::grepl
[13:34:42.361]                           restarts <- computeRestarts(cond)
[13:34:42.361]                           for (restart in restarts) {
[13:34:42.361]                             name <- restart$name
[13:34:42.361]                             if (is.null(name)) 
[13:34:42.361]                               next
[13:34:42.361]                             if (!grepl(pattern, name)) 
[13:34:42.361]                               next
[13:34:42.361]                             invokeRestart(restart)
[13:34:42.361]                             muffled <- TRUE
[13:34:42.361]                             break
[13:34:42.361]                           }
[13:34:42.361]                         }
[13:34:42.361]                       }
[13:34:42.361]                       invisible(muffled)
[13:34:42.361]                     }
[13:34:42.361]                     muffleCondition(cond, pattern = "^muffle")
[13:34:42.361]                   }
[13:34:42.361]                 }
[13:34:42.361]                 else {
[13:34:42.361]                   if (TRUE) {
[13:34:42.361]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:42.361]                     {
[13:34:42.361]                       inherits <- base::inherits
[13:34:42.361]                       invokeRestart <- base::invokeRestart
[13:34:42.361]                       is.null <- base::is.null
[13:34:42.361]                       muffled <- FALSE
[13:34:42.361]                       if (inherits(cond, "message")) {
[13:34:42.361]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:42.361]                         if (muffled) 
[13:34:42.361]                           invokeRestart("muffleMessage")
[13:34:42.361]                       }
[13:34:42.361]                       else if (inherits(cond, "warning")) {
[13:34:42.361]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:42.361]                         if (muffled) 
[13:34:42.361]                           invokeRestart("muffleWarning")
[13:34:42.361]                       }
[13:34:42.361]                       else if (inherits(cond, "condition")) {
[13:34:42.361]                         if (!is.null(pattern)) {
[13:34:42.361]                           computeRestarts <- base::computeRestarts
[13:34:42.361]                           grepl <- base::grepl
[13:34:42.361]                           restarts <- computeRestarts(cond)
[13:34:42.361]                           for (restart in restarts) {
[13:34:42.361]                             name <- restart$name
[13:34:42.361]                             if (is.null(name)) 
[13:34:42.361]                               next
[13:34:42.361]                             if (!grepl(pattern, name)) 
[13:34:42.361]                               next
[13:34:42.361]                             invokeRestart(restart)
[13:34:42.361]                             muffled <- TRUE
[13:34:42.361]                             break
[13:34:42.361]                           }
[13:34:42.361]                         }
[13:34:42.361]                       }
[13:34:42.361]                       invisible(muffled)
[13:34:42.361]                     }
[13:34:42.361]                     muffleCondition(cond, pattern = "^muffle")
[13:34:42.361]                   }
[13:34:42.361]                 }
[13:34:42.361]             }
[13:34:42.361]         }))
[13:34:42.361]     }, error = function(ex) {
[13:34:42.361]         base::structure(base::list(value = NULL, visible = NULL, 
[13:34:42.361]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:42.361]                 ...future.rng), started = ...future.startTime, 
[13:34:42.361]             finished = Sys.time(), session_uuid = NA_character_, 
[13:34:42.361]             version = "1.8"), class = "FutureResult")
[13:34:42.361]     }, finally = {
[13:34:42.361]         if (!identical(...future.workdir, getwd())) 
[13:34:42.361]             setwd(...future.workdir)
[13:34:42.361]         {
[13:34:42.361]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:34:42.361]                 ...future.oldOptions$nwarnings <- NULL
[13:34:42.361]             }
[13:34:42.361]             base::options(...future.oldOptions)
[13:34:42.361]             if (.Platform$OS.type == "windows") {
[13:34:42.361]                 old_names <- names(...future.oldEnvVars)
[13:34:42.361]                 envs <- base::Sys.getenv()
[13:34:42.361]                 names <- names(envs)
[13:34:42.361]                 common <- intersect(names, old_names)
[13:34:42.361]                 added <- setdiff(names, old_names)
[13:34:42.361]                 removed <- setdiff(old_names, names)
[13:34:42.361]                 changed <- common[...future.oldEnvVars[common] != 
[13:34:42.361]                   envs[common]]
[13:34:42.361]                 NAMES <- toupper(changed)
[13:34:42.361]                 args <- list()
[13:34:42.361]                 for (kk in seq_along(NAMES)) {
[13:34:42.361]                   name <- changed[[kk]]
[13:34:42.361]                   NAME <- NAMES[[kk]]
[13:34:42.361]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:42.361]                     next
[13:34:42.361]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:42.361]                 }
[13:34:42.361]                 NAMES <- toupper(added)
[13:34:42.361]                 for (kk in seq_along(NAMES)) {
[13:34:42.361]                   name <- added[[kk]]
[13:34:42.361]                   NAME <- NAMES[[kk]]
[13:34:42.361]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:42.361]                     next
[13:34:42.361]                   args[[name]] <- ""
[13:34:42.361]                 }
[13:34:42.361]                 NAMES <- toupper(removed)
[13:34:42.361]                 for (kk in seq_along(NAMES)) {
[13:34:42.361]                   name <- removed[[kk]]
[13:34:42.361]                   NAME <- NAMES[[kk]]
[13:34:42.361]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:42.361]                     next
[13:34:42.361]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:42.361]                 }
[13:34:42.361]                 if (length(args) > 0) 
[13:34:42.361]                   base::do.call(base::Sys.setenv, args = args)
[13:34:42.361]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:34:42.361]             }
[13:34:42.361]             else {
[13:34:42.361]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:34:42.361]             }
[13:34:42.361]             {
[13:34:42.361]                 if (base::length(...future.futureOptionsAdded) > 
[13:34:42.361]                   0L) {
[13:34:42.361]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:34:42.361]                   base::names(opts) <- ...future.futureOptionsAdded
[13:34:42.361]                   base::options(opts)
[13:34:42.361]                 }
[13:34:42.361]                 {
[13:34:42.361]                   {
[13:34:42.361]                     base::options(mc.cores = ...future.mc.cores.old)
[13:34:42.361]                     NULL
[13:34:42.361]                   }
[13:34:42.361]                   options(future.plan = NULL)
[13:34:42.361]                   if (is.na(NA_character_)) 
[13:34:42.361]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:34:42.361]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:34:42.361]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:34:42.361]                     .init = FALSE)
[13:34:42.361]                 }
[13:34:42.361]             }
[13:34:42.361]         }
[13:34:42.361]     })
[13:34:42.361]     if (TRUE) {
[13:34:42.361]         base::sink(type = "output", split = FALSE)
[13:34:42.361]         if (TRUE) {
[13:34:42.361]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:34:42.361]         }
[13:34:42.361]         else {
[13:34:42.361]             ...future.result["stdout"] <- base::list(NULL)
[13:34:42.361]         }
[13:34:42.361]         base::close(...future.stdout)
[13:34:42.361]         ...future.stdout <- NULL
[13:34:42.361]     }
[13:34:42.361]     ...future.result$conditions <- ...future.conditions
[13:34:42.361]     ...future.result$finished <- base::Sys.time()
[13:34:42.361]     ...future.result
[13:34:42.361] }
[13:34:42.364] assign_globals() ...
[13:34:42.365] List of 7
[13:34:42.365]  $ ...future.FUN            :function (...)  
[13:34:42.365]  $ foo                      :function (x = 1, y = 2)  
[13:34:42.365]  $ x                        : num 3
[13:34:42.365]  $ future.call.arguments    : list()
[13:34:42.365]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:42.365]  $ ...future.elements_ii    :List of 3
[13:34:42.365]   ..$ : int 0
[13:34:42.365]   ..$ : int 0
[13:34:42.365]   ..$ : int 0
[13:34:42.365]  $ ...future.seeds_ii       :List of 3
[13:34:42.365]   ..$ : int [1:7] 10407 1666123668 -918032954 1563303830 744861469 2009520167 369843810
[13:34:42.365]   ..$ : int [1:7] 10407 1310441948 2080683693 652639441 1795850730 1953532141 354730309
[13:34:42.365]   ..$ : int [1:7] 10407 -346794781 -526954742 61882141 1694204077 -404066420 2102686045
[13:34:42.365]  $ ...future.globals.maxSize: NULL
[13:34:42.365]  - attr(*, "where")=List of 7
[13:34:42.365]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[13:34:42.365]   ..$ foo                      :<environment: R_EmptyEnv> 
[13:34:42.365]   ..$ x                        :<environment: R_EmptyEnv> 
[13:34:42.365]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[13:34:42.365]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[13:34:42.365]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[13:34:42.365]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[13:34:42.365]  - attr(*, "resolved")= logi FALSE
[13:34:42.365]  - attr(*, "total_size")= num 2200
[13:34:42.365]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:42.365]  - attr(*, "already-done")= logi TRUE
[13:34:42.379] - reassign environment for ‘...future.FUN’
[13:34:42.379] - copied ‘...future.FUN’ to environment
[13:34:42.380] - reassign environment for ‘foo’
[13:34:42.380] - copied ‘foo’ to environment
[13:34:42.380] - copied ‘x’ to environment
[13:34:42.380] - copied ‘future.call.arguments’ to environment
[13:34:42.380] - copied ‘...future.elements_ii’ to environment
[13:34:42.380] - copied ‘...future.seeds_ii’ to environment
[13:34:42.380] - copied ‘...future.globals.maxSize’ to environment
[13:34:42.380] assign_globals() ... done
[13:34:42.381] requestCore(): workers = 2
[13:34:42.383] MulticoreFuture started
[13:34:42.383] - Launch lazy future ... done
[13:34:42.383] run() for ‘MulticoreFuture’ ... done
[13:34:42.384] Created future:
[13:34:42.384] plan(): Setting new future strategy stack:
[13:34:42.385] List of future strategies:
[13:34:42.385] 1. sequential:
[13:34:42.385]    - args: function (..., envir = parent.frame())
[13:34:42.385]    - tweaked: FALSE
[13:34:42.385]    - call: NULL
[13:34:42.386] plan(): nbrOfWorkers() = 1
[13:34:42.388] plan(): Setting new future strategy stack:
[13:34:42.388] List of future strategies:
[13:34:42.388] 1. multicore:
[13:34:42.388]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:34:42.388]    - tweaked: FALSE
[13:34:42.388]    - call: plan(strategy)
[13:34:42.394] plan(): nbrOfWorkers() = 2
[13:34:42.384] MulticoreFuture:
[13:34:42.384] Label: ‘future_replicate-2’
[13:34:42.384] Expression:
[13:34:42.384] {
[13:34:42.384]     do.call(function(...) {
[13:34:42.384]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:42.384]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:42.384]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:42.384]             on.exit(options(oopts), add = TRUE)
[13:34:42.384]         }
[13:34:42.384]         {
[13:34:42.384]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:42.384]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:42.384]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:42.384]                   envir = globalenv(), inherits = FALSE)
[13:34:42.384]                 ...future.FUN(...future.X_jj, ...)
[13:34:42.384]             })
[13:34:42.384]         }
[13:34:42.384]     }, args = future.call.arguments)
[13:34:42.384] }
[13:34:42.384] Lazy evaluation: FALSE
[13:34:42.384] Asynchronous evaluation: TRUE
[13:34:42.384] Local evaluation: TRUE
[13:34:42.384] Environment: 0x5627bf516468
[13:34:42.384] Capture standard output: TRUE
[13:34:42.384] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:34:42.384] Globals: 7 objects totaling 2.55 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, ...)
[13:34:42.384] Packages: <none>
[13:34:42.384] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:34:42.384] Resolved: TRUE
[13:34:42.384] Value: <not collected>
[13:34:42.384] Conditions captured: <none>
[13:34:42.384] Early signaling: FALSE
[13:34:42.384] Owner process: b8cf10c3-b112-c8f9-9398-a44000e21728
[13:34:42.384] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:42.395] Chunk #2 of 2 ... DONE
[13:34:42.395] Launching 2 futures (chunks) ... DONE
[13:34:42.395] Resolving 2 futures (chunks) ...
[13:34:42.395] resolve() on list ...
[13:34:42.395]  recursive: 0
[13:34:42.396]  length: 2
[13:34:42.396] 
[13:34:42.396] Future #1
[13:34:42.396] result() for MulticoreFuture ...
[13:34:42.397] result() for MulticoreFuture ...
[13:34:42.397] result() for MulticoreFuture ... done
[13:34:42.398] result() for MulticoreFuture ... done
[13:34:42.398] result() for MulticoreFuture ...
[13:34:42.398] result() for MulticoreFuture ... done
[13:34:42.398] signalConditionsASAP(MulticoreFuture, pos=1) ...
[13:34:42.398] - nx: 2
[13:34:42.398] - relay: TRUE
[13:34:42.399] - stdout: TRUE
[13:34:42.399] - signal: TRUE
[13:34:42.399] - resignal: FALSE
[13:34:42.399] - force: TRUE
[13:34:42.399] - relayed: [n=2] FALSE, FALSE
[13:34:42.399] - queued futures: [n=2] FALSE, FALSE
[13:34:42.399]  - until=1
[13:34:42.400]  - relaying element #1
[13:34:42.400] result() for MulticoreFuture ...
[13:34:42.400] result() for MulticoreFuture ... done
[13:34:42.400] result() for MulticoreFuture ...
[13:34:42.400] result() for MulticoreFuture ... done
[13:34:42.400] result() for MulticoreFuture ...
[13:34:42.401] result() for MulticoreFuture ... done
[13:34:42.401] result() for MulticoreFuture ...
[13:34:42.401] result() for MulticoreFuture ... done
[13:34:42.401] - relayed: [n=2] TRUE, FALSE
[13:34:42.401] - queued futures: [n=2] TRUE, FALSE
[13:34:42.401] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[13:34:42.401]  length: 1 (resolved future 1)
[13:34:42.402] Future #2
[13:34:42.402] result() for MulticoreFuture ...
[13:34:42.403] result() for MulticoreFuture ...
[13:34:42.403] result() for MulticoreFuture ... done
[13:34:42.403] result() for MulticoreFuture ... done
[13:34:42.403] result() for MulticoreFuture ...
[13:34:42.403] result() for MulticoreFuture ... done
[13:34:42.403] signalConditionsASAP(MulticoreFuture, pos=2) ...
[13:34:42.404] - nx: 2
[13:34:42.404] - relay: TRUE
[13:34:42.404] - stdout: TRUE
[13:34:42.404] - signal: TRUE
[13:34:42.404] - resignal: FALSE
[13:34:42.404] - force: TRUE
[13:34:42.404] - relayed: [n=2] TRUE, FALSE
[13:34:42.404] - queued futures: [n=2] TRUE, FALSE
[13:34:42.405]  - until=2
[13:34:42.405]  - relaying element #2
[13:34:42.405] result() for MulticoreFuture ...
[13:34:42.405] result() for MulticoreFuture ... done
[13:34:42.405] result() for MulticoreFuture ...
[13:34:42.405] result() for MulticoreFuture ... done
[13:34:42.405] result() for MulticoreFuture ...
[13:34:42.405] result() for MulticoreFuture ... done
[13:34:42.406] result() for MulticoreFuture ...
[13:34:42.406] result() for MulticoreFuture ... done
[13:34:42.406] - relayed: [n=2] TRUE, TRUE
[13:34:42.406] - queued futures: [n=2] TRUE, TRUE
[13:34:42.406] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[13:34:42.406]  length: 0 (resolved future 2)
[13:34:42.406] Relaying remaining futures
[13:34:42.406] signalConditionsASAP(NULL, pos=0) ...
[13:34:42.407] - nx: 2
[13:34:42.407] - relay: TRUE
[13:34:42.407] - stdout: TRUE
[13:34:42.407] - signal: TRUE
[13:34:42.407] - resignal: FALSE
[13:34:42.407] - force: TRUE
[13:34:42.407] - relayed: [n=2] TRUE, TRUE
[13:34:42.407] - queued futures: [n=2] TRUE, TRUE
 - flush all
[13:34:42.407] - relayed: [n=2] TRUE, TRUE
[13:34:42.408] - queued futures: [n=2] TRUE, TRUE
[13:34:42.408] signalConditionsASAP(NULL, pos=0) ... done
[13:34:42.408] resolve() on list ... DONE
[13:34:42.408] result() for MulticoreFuture ...
[13:34:42.408] result() for MulticoreFuture ... done
[13:34:42.408] result() for MulticoreFuture ...
[13:34:42.408] result() for MulticoreFuture ... done
[13:34:42.408] result() for MulticoreFuture ...
[13:34:42.409] result() for MulticoreFuture ... done
[13:34:42.409] result() for MulticoreFuture ...
[13:34:42.409] result() for MulticoreFuture ... done
[13:34:42.409]  - Number of value chunks collected: 2
[13:34:42.409] Resolving 2 futures (chunks) ... DONE
[13:34:42.409] Reducing values from 2 chunks ...
[13:34:42.409]  - Number of values collected after concatenation: 5
[13:34:42.409]  - Number of values expected: 5
[13:34:42.409] Reducing values from 2 chunks ... DONE
[13:34:42.410] future_lapply() ... DONE
[13:34:42.410] plan(): Setting new future strategy stack:
[13:34:42.410] List of future strategies:
[13:34:42.410] 1. sequential:
[13:34:42.410]    - args: function (..., envir = parent.frame())
[13:34:42.410]    - tweaked: FALSE
[13:34:42.410]    - call: plan(sequential)
[13:34:42.411] plan(): nbrOfWorkers() = 1
*** strategy = ‘multicore’ ... done
*** strategy = ‘multisession’ ...
[13:34:42.411] plan(): Setting new future strategy stack:
[13:34:42.412] List of future strategies:
[13:34:42.412] 1. multisession:
[13:34:42.412]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:34:42.412]    - tweaked: FALSE
[13:34:42.412]    - call: plan(strategy)
[13:34:42.412] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:34:42.412] multisession:
[13:34:42.412] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:34:42.412] - tweaked: FALSE
[13:34:42.412] - call: plan(strategy)
[13:34:42.419] getGlobalsAndPackages() ...
[13:34:42.419] Not searching for globals
[13:34:42.419] - globals: [0] <none>
[13:34:42.419] getGlobalsAndPackages() ... DONE
[13:34:42.420] [local output] makeClusterPSOCK() ...
[13:34:42.464] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:34:42.465] [local output] Base port: 11768
[13:34:42.466] [local output] Getting setup options for 2 cluster nodes ...
[13:34:42.466] [local output]  - Node 1 of 2 ...
[13:34:42.466] [local output] localMachine=TRUE => revtunnel=FALSE

[13:34:42.467] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmplfSa61/worker.rank=1.parallelly.parent=75494.126e6371487e2.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmplfSa61/worker.rank=1.parallelly.parent=75494.126e6371487e2.pid")'’
[13:34:42.654] - Possible to infer worker's PID: TRUE
[13:34:42.655] [local output] Rscript port: 11768

[13:34:42.655] [local output]  - Node 2 of 2 ...
[13:34:42.656] [local output] localMachine=TRUE => revtunnel=FALSE

[13:34:42.656] [local output] Rscript port: 11768

[13:34:42.656] [local output] Getting setup options for 2 cluster nodes ... done
[13:34:42.657] [local output]  - Parallel setup requested for some PSOCK nodes
[13:34:42.657] [local output] Setting up PSOCK nodes in parallel
[13:34:42.657] List of 36
[13:34:42.657]  $ worker          : chr "localhost"
[13:34:42.657]   ..- attr(*, "localhost")= logi TRUE
[13:34:42.657]  $ master          : chr "localhost"
[13:34:42.657]  $ port            : int 11768
[13:34:42.657]  $ connectTimeout  : num 120
[13:34:42.657]  $ timeout         : num 2592000
[13:34:42.657]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:34:42.657]  $ homogeneous     : logi TRUE
[13:34:42.657]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:34:42.657]  $ rscript_envs    : NULL
[13:34:42.657]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:34:42.657]  $ rscript_startup : NULL
[13:34:42.657]  $ rscript_sh      : chr "sh"
[13:34:42.657]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:34:42.657]  $ methods         : logi TRUE
[13:34:42.657]  $ socketOptions   : chr "no-delay"
[13:34:42.657]  $ useXDR          : logi FALSE
[13:34:42.657]  $ outfile         : chr "/dev/null"
[13:34:42.657]  $ renice          : int NA
[13:34:42.657]  $ rshcmd          : NULL
[13:34:42.657]  $ user            : chr(0) 
[13:34:42.657]  $ revtunnel       : logi FALSE
[13:34:42.657]  $ rshlogfile      : NULL
[13:34:42.657]  $ rshopts         : chr(0) 
[13:34:42.657]  $ rank            : int 1
[13:34:42.657]  $ manual          : logi FALSE
[13:34:42.657]  $ dryrun          : logi FALSE
[13:34:42.657]  $ quiet           : logi FALSE
[13:34:42.657]  $ setup_strategy  : chr "parallel"
[13:34:42.657]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:34:42.657]  $ pidfile         : chr "/tmp/RtmplfSa61/worker.rank=1.parallelly.parent=75494.126e6371487e2.pid"
[13:34:42.657]  $ rshcmd_label    : NULL
[13:34:42.657]  $ rsh_call        : NULL
[13:34:42.657]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:34:42.657]  $ localMachine    : logi TRUE
[13:34:42.657]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:34:42.657]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:34:42.657]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:34:42.657]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:34:42.657]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:34:42.657]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:34:42.657]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:34:42.657]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:34:42.657]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:34:42.657]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:34:42.657]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:34:42.657]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:34:42.657]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:34:42.657]  $ arguments       :List of 28
[13:34:42.657]   ..$ worker          : chr "localhost"
[13:34:42.657]   ..$ master          : NULL
[13:34:42.657]   ..$ port            : int 11768
[13:34:42.657]   ..$ connectTimeout  : num 120
[13:34:42.657]   ..$ timeout         : num 2592000
[13:34:42.657]   ..$ rscript         : NULL
[13:34:42.657]   ..$ homogeneous     : NULL
[13:34:42.657]   ..$ rscript_args    : NULL
[13:34:42.657]   ..$ rscript_envs    : NULL
[13:34:42.657]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:34:42.657]   ..$ rscript_startup : NULL
[13:34:42.657]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:34:42.657]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:34:42.657]   ..$ methods         : logi TRUE
[13:34:42.657]   ..$ socketOptions   : chr "no-delay"
[13:34:42.657]   ..$ useXDR          : logi FALSE
[13:34:42.657]   ..$ outfile         : chr "/dev/null"
[13:34:42.657]   ..$ renice          : int NA
[13:34:42.657]   ..$ rshcmd          : NULL
[13:34:42.657]   ..$ user            : NULL
[13:34:42.657]   ..$ revtunnel       : logi NA
[13:34:42.657]   ..$ rshlogfile      : NULL
[13:34:42.657]   ..$ rshopts         : NULL
[13:34:42.657]   ..$ rank            : int 1
[13:34:42.657]   ..$ manual          : logi FALSE
[13:34:42.657]   ..$ dryrun          : logi FALSE
[13:34:42.657]   ..$ quiet           : logi FALSE
[13:34:42.657]   ..$ setup_strategy  : chr "parallel"
[13:34:42.657]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:34:42.674] [local output] System call to launch all workers:
[13:34:42.674] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmplfSa61/worker.rank=1.parallelly.parent=75494.126e6371487e2.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11768 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:34:42.674] [local output] Starting PSOCK main server
[13:34:42.680] [local output] Workers launched
[13:34:42.680] [local output] Waiting for workers to connect back
[13:34:42.680]  - [local output] 0 workers out of 2 ready
[13:34:42.923]  - [local output] 0 workers out of 2 ready
[13:34:42.924]  - [local output] 1 workers out of 2 ready
[13:34:42.924]  - [local output] 2 workers out of 2 ready
[13:34:42.924] [local output] Launching of workers completed
[13:34:42.924] [local output] Collecting session information from workers
[13:34:42.925] [local output]  - Worker #1 of 2
[13:34:42.926] [local output]  - Worker #2 of 2
[13:34:42.926] [local output] makeClusterPSOCK() ... done
[13:34:42.938] Packages needed by the future expression (n = 0): <none>
[13:34:42.938] Packages needed by future strategies (n = 0): <none>
[13:34:42.938] {
[13:34:42.938]     {
[13:34:42.938]         {
[13:34:42.938]             ...future.startTime <- base::Sys.time()
[13:34:42.938]             {
[13:34:42.938]                 {
[13:34:42.938]                   {
[13:34:42.938]                     {
[13:34:42.938]                       base::local({
[13:34:42.938]                         has_future <- base::requireNamespace("future", 
[13:34:42.938]                           quietly = TRUE)
[13:34:42.938]                         if (has_future) {
[13:34:42.938]                           ns <- base::getNamespace("future")
[13:34:42.938]                           version <- ns[[".package"]][["version"]]
[13:34:42.938]                           if (is.null(version)) 
[13:34:42.938]                             version <- utils::packageVersion("future")
[13:34:42.938]                         }
[13:34:42.938]                         else {
[13:34:42.938]                           version <- NULL
[13:34:42.938]                         }
[13:34:42.938]                         if (!has_future || version < "1.8.0") {
[13:34:42.938]                           info <- base::c(r_version = base::gsub("R version ", 
[13:34:42.938]                             "", base::R.version$version.string), 
[13:34:42.938]                             platform = base::sprintf("%s (%s-bit)", 
[13:34:42.938]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:34:42.938]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:34:42.938]                               "release", "version")], collapse = " "), 
[13:34:42.938]                             hostname = base::Sys.info()[["nodename"]])
[13:34:42.938]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:34:42.938]                             info)
[13:34:42.938]                           info <- base::paste(info, collapse = "; ")
[13:34:42.938]                           if (!has_future) {
[13:34:42.938]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:34:42.938]                               info)
[13:34:42.938]                           }
[13:34:42.938]                           else {
[13:34:42.938]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:34:42.938]                               info, version)
[13:34:42.938]                           }
[13:34:42.938]                           base::stop(msg)
[13:34:42.938]                         }
[13:34:42.938]                       })
[13:34:42.938]                     }
[13:34:42.938]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:34:42.938]                     base::options(mc.cores = 1L)
[13:34:42.938]                   }
[13:34:42.938]                   ...future.strategy.old <- future::plan("list")
[13:34:42.938]                   options(future.plan = NULL)
[13:34:42.938]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:34:42.938]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:34:42.938]                 }
[13:34:42.938]                 ...future.workdir <- getwd()
[13:34:42.938]             }
[13:34:42.938]             ...future.oldOptions <- base::as.list(base::.Options)
[13:34:42.938]             ...future.oldEnvVars <- base::Sys.getenv()
[13:34:42.938]         }
[13:34:42.938]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:34:42.938]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:34:42.938]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:34:42.938]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:34:42.938]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:34:42.938]             future.stdout.windows.reencode = NULL, width = 80L)
[13:34:42.938]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:34:42.938]             base::names(...future.oldOptions))
[13:34:42.938]     }
[13:34:42.938]     if (FALSE) {
[13:34:42.938]     }
[13:34:42.938]     else {
[13:34:42.938]         if (TRUE) {
[13:34:42.938]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:34:42.938]                 open = "w")
[13:34:42.938]         }
[13:34:42.938]         else {
[13:34:42.938]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:34:42.938]                 windows = "NUL", "/dev/null"), open = "w")
[13:34:42.938]         }
[13:34:42.938]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:34:42.938]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:34:42.938]             base::sink(type = "output", split = FALSE)
[13:34:42.938]             base::close(...future.stdout)
[13:34:42.938]         }, add = TRUE)
[13:34:42.938]     }
[13:34:42.938]     ...future.frame <- base::sys.nframe()
[13:34:42.938]     ...future.conditions <- base::list()
[13:34:42.938]     ...future.rng <- base::globalenv()$.Random.seed
[13:34:42.938]     if (FALSE) {
[13:34:42.938]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:34:42.938]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:34:42.938]     }
[13:34:42.938]     ...future.result <- base::tryCatch({
[13:34:42.938]         base::withCallingHandlers({
[13:34:42.938]             ...future.value <- base::withVisible(base::local({
[13:34:42.938]                 ...future.makeSendCondition <- base::local({
[13:34:42.938]                   sendCondition <- NULL
[13:34:42.938]                   function(frame = 1L) {
[13:34:42.938]                     if (is.function(sendCondition)) 
[13:34:42.938]                       return(sendCondition)
[13:34:42.938]                     ns <- getNamespace("parallel")
[13:34:42.938]                     if (exists("sendData", mode = "function", 
[13:34:42.938]                       envir = ns)) {
[13:34:42.938]                       parallel_sendData <- get("sendData", mode = "function", 
[13:34:42.938]                         envir = ns)
[13:34:42.938]                       envir <- sys.frame(frame)
[13:34:42.938]                       master <- NULL
[13:34:42.938]                       while (!identical(envir, .GlobalEnv) && 
[13:34:42.938]                         !identical(envir, emptyenv())) {
[13:34:42.938]                         if (exists("master", mode = "list", envir = envir, 
[13:34:42.938]                           inherits = FALSE)) {
[13:34:42.938]                           master <- get("master", mode = "list", 
[13:34:42.938]                             envir = envir, inherits = FALSE)
[13:34:42.938]                           if (inherits(master, c("SOCKnode", 
[13:34:42.938]                             "SOCK0node"))) {
[13:34:42.938]                             sendCondition <<- function(cond) {
[13:34:42.938]                               data <- list(type = "VALUE", value = cond, 
[13:34:42.938]                                 success = TRUE)
[13:34:42.938]                               parallel_sendData(master, data)
[13:34:42.938]                             }
[13:34:42.938]                             return(sendCondition)
[13:34:42.938]                           }
[13:34:42.938]                         }
[13:34:42.938]                         frame <- frame + 1L
[13:34:42.938]                         envir <- sys.frame(frame)
[13:34:42.938]                       }
[13:34:42.938]                     }
[13:34:42.938]                     sendCondition <<- function(cond) NULL
[13:34:42.938]                   }
[13:34:42.938]                 })
[13:34:42.938]                 withCallingHandlers({
[13:34:42.938]                   NA
[13:34:42.938]                 }, immediateCondition = function(cond) {
[13:34:42.938]                   sendCondition <- ...future.makeSendCondition()
[13:34:42.938]                   sendCondition(cond)
[13:34:42.938]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:42.938]                   {
[13:34:42.938]                     inherits <- base::inherits
[13:34:42.938]                     invokeRestart <- base::invokeRestart
[13:34:42.938]                     is.null <- base::is.null
[13:34:42.938]                     muffled <- FALSE
[13:34:42.938]                     if (inherits(cond, "message")) {
[13:34:42.938]                       muffled <- grepl(pattern, "muffleMessage")
[13:34:42.938]                       if (muffled) 
[13:34:42.938]                         invokeRestart("muffleMessage")
[13:34:42.938]                     }
[13:34:42.938]                     else if (inherits(cond, "warning")) {
[13:34:42.938]                       muffled <- grepl(pattern, "muffleWarning")
[13:34:42.938]                       if (muffled) 
[13:34:42.938]                         invokeRestart("muffleWarning")
[13:34:42.938]                     }
[13:34:42.938]                     else if (inherits(cond, "condition")) {
[13:34:42.938]                       if (!is.null(pattern)) {
[13:34:42.938]                         computeRestarts <- base::computeRestarts
[13:34:42.938]                         grepl <- base::grepl
[13:34:42.938]                         restarts <- computeRestarts(cond)
[13:34:42.938]                         for (restart in restarts) {
[13:34:42.938]                           name <- restart$name
[13:34:42.938]                           if (is.null(name)) 
[13:34:42.938]                             next
[13:34:42.938]                           if (!grepl(pattern, name)) 
[13:34:42.938]                             next
[13:34:42.938]                           invokeRestart(restart)
[13:34:42.938]                           muffled <- TRUE
[13:34:42.938]                           break
[13:34:42.938]                         }
[13:34:42.938]                       }
[13:34:42.938]                     }
[13:34:42.938]                     invisible(muffled)
[13:34:42.938]                   }
[13:34:42.938]                   muffleCondition(cond)
[13:34:42.938]                 })
[13:34:42.938]             }))
[13:34:42.938]             future::FutureResult(value = ...future.value$value, 
[13:34:42.938]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:42.938]                   ...future.rng), globalenv = if (FALSE) 
[13:34:42.938]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:34:42.938]                     ...future.globalenv.names))
[13:34:42.938]                 else NULL, started = ...future.startTime, version = "1.8")
[13:34:42.938]         }, condition = base::local({
[13:34:42.938]             c <- base::c
[13:34:42.938]             inherits <- base::inherits
[13:34:42.938]             invokeRestart <- base::invokeRestart
[13:34:42.938]             length <- base::length
[13:34:42.938]             list <- base::list
[13:34:42.938]             seq.int <- base::seq.int
[13:34:42.938]             signalCondition <- base::signalCondition
[13:34:42.938]             sys.calls <- base::sys.calls
[13:34:42.938]             `[[` <- base::`[[`
[13:34:42.938]             `+` <- base::`+`
[13:34:42.938]             `<<-` <- base::`<<-`
[13:34:42.938]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:34:42.938]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:34:42.938]                   3L)]
[13:34:42.938]             }
[13:34:42.938]             function(cond) {
[13:34:42.938]                 is_error <- inherits(cond, "error")
[13:34:42.938]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:34:42.938]                   NULL)
[13:34:42.938]                 if (is_error) {
[13:34:42.938]                   sessionInformation <- function() {
[13:34:42.938]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:34:42.938]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:34:42.938]                       search = base::search(), system = base::Sys.info())
[13:34:42.938]                   }
[13:34:42.938]                   ...future.conditions[[length(...future.conditions) + 
[13:34:42.938]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:34:42.938]                     cond$call), session = sessionInformation(), 
[13:34:42.938]                     timestamp = base::Sys.time(), signaled = 0L)
[13:34:42.938]                   signalCondition(cond)
[13:34:42.938]                 }
[13:34:42.938]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:34:42.938]                 "immediateCondition"))) {
[13:34:42.938]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:34:42.938]                   ...future.conditions[[length(...future.conditions) + 
[13:34:42.938]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:34:42.938]                   if (TRUE && !signal) {
[13:34:42.938]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:42.938]                     {
[13:34:42.938]                       inherits <- base::inherits
[13:34:42.938]                       invokeRestart <- base::invokeRestart
[13:34:42.938]                       is.null <- base::is.null
[13:34:42.938]                       muffled <- FALSE
[13:34:42.938]                       if (inherits(cond, "message")) {
[13:34:42.938]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:42.938]                         if (muffled) 
[13:34:42.938]                           invokeRestart("muffleMessage")
[13:34:42.938]                       }
[13:34:42.938]                       else if (inherits(cond, "warning")) {
[13:34:42.938]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:42.938]                         if (muffled) 
[13:34:42.938]                           invokeRestart("muffleWarning")
[13:34:42.938]                       }
[13:34:42.938]                       else if (inherits(cond, "condition")) {
[13:34:42.938]                         if (!is.null(pattern)) {
[13:34:42.938]                           computeRestarts <- base::computeRestarts
[13:34:42.938]                           grepl <- base::grepl
[13:34:42.938]                           restarts <- computeRestarts(cond)
[13:34:42.938]                           for (restart in restarts) {
[13:34:42.938]                             name <- restart$name
[13:34:42.938]                             if (is.null(name)) 
[13:34:42.938]                               next
[13:34:42.938]                             if (!grepl(pattern, name)) 
[13:34:42.938]                               next
[13:34:42.938]                             invokeRestart(restart)
[13:34:42.938]                             muffled <- TRUE
[13:34:42.938]                             break
[13:34:42.938]                           }
[13:34:42.938]                         }
[13:34:42.938]                       }
[13:34:42.938]                       invisible(muffled)
[13:34:42.938]                     }
[13:34:42.938]                     muffleCondition(cond, pattern = "^muffle")
[13:34:42.938]                   }
[13:34:42.938]                 }
[13:34:42.938]                 else {
[13:34:42.938]                   if (TRUE) {
[13:34:42.938]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:42.938]                     {
[13:34:42.938]                       inherits <- base::inherits
[13:34:42.938]                       invokeRestart <- base::invokeRestart
[13:34:42.938]                       is.null <- base::is.null
[13:34:42.938]                       muffled <- FALSE
[13:34:42.938]                       if (inherits(cond, "message")) {
[13:34:42.938]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:42.938]                         if (muffled) 
[13:34:42.938]                           invokeRestart("muffleMessage")
[13:34:42.938]                       }
[13:34:42.938]                       else if (inherits(cond, "warning")) {
[13:34:42.938]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:42.938]                         if (muffled) 
[13:34:42.938]                           invokeRestart("muffleWarning")
[13:34:42.938]                       }
[13:34:42.938]                       else if (inherits(cond, "condition")) {
[13:34:42.938]                         if (!is.null(pattern)) {
[13:34:42.938]                           computeRestarts <- base::computeRestarts
[13:34:42.938]                           grepl <- base::grepl
[13:34:42.938]                           restarts <- computeRestarts(cond)
[13:34:42.938]                           for (restart in restarts) {
[13:34:42.938]                             name <- restart$name
[13:34:42.938]                             if (is.null(name)) 
[13:34:42.938]                               next
[13:34:42.938]                             if (!grepl(pattern, name)) 
[13:34:42.938]                               next
[13:34:42.938]                             invokeRestart(restart)
[13:34:42.938]                             muffled <- TRUE
[13:34:42.938]                             break
[13:34:42.938]                           }
[13:34:42.938]                         }
[13:34:42.938]                       }
[13:34:42.938]                       invisible(muffled)
[13:34:42.938]                     }
[13:34:42.938]                     muffleCondition(cond, pattern = "^muffle")
[13:34:42.938]                   }
[13:34:42.938]                 }
[13:34:42.938]             }
[13:34:42.938]         }))
[13:34:42.938]     }, error = function(ex) {
[13:34:42.938]         base::structure(base::list(value = NULL, visible = NULL, 
[13:34:42.938]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:42.938]                 ...future.rng), started = ...future.startTime, 
[13:34:42.938]             finished = Sys.time(), session_uuid = NA_character_, 
[13:34:42.938]             version = "1.8"), class = "FutureResult")
[13:34:42.938]     }, finally = {
[13:34:42.938]         if (!identical(...future.workdir, getwd())) 
[13:34:42.938]             setwd(...future.workdir)
[13:34:42.938]         {
[13:34:42.938]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:34:42.938]                 ...future.oldOptions$nwarnings <- NULL
[13:34:42.938]             }
[13:34:42.938]             base::options(...future.oldOptions)
[13:34:42.938]             if (.Platform$OS.type == "windows") {
[13:34:42.938]                 old_names <- names(...future.oldEnvVars)
[13:34:42.938]                 envs <- base::Sys.getenv()
[13:34:42.938]                 names <- names(envs)
[13:34:42.938]                 common <- intersect(names, old_names)
[13:34:42.938]                 added <- setdiff(names, old_names)
[13:34:42.938]                 removed <- setdiff(old_names, names)
[13:34:42.938]                 changed <- common[...future.oldEnvVars[common] != 
[13:34:42.938]                   envs[common]]
[13:34:42.938]                 NAMES <- toupper(changed)
[13:34:42.938]                 args <- list()
[13:34:42.938]                 for (kk in seq_along(NAMES)) {
[13:34:42.938]                   name <- changed[[kk]]
[13:34:42.938]                   NAME <- NAMES[[kk]]
[13:34:42.938]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:42.938]                     next
[13:34:42.938]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:42.938]                 }
[13:34:42.938]                 NAMES <- toupper(added)
[13:34:42.938]                 for (kk in seq_along(NAMES)) {
[13:34:42.938]                   name <- added[[kk]]
[13:34:42.938]                   NAME <- NAMES[[kk]]
[13:34:42.938]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:42.938]                     next
[13:34:42.938]                   args[[name]] <- ""
[13:34:42.938]                 }
[13:34:42.938]                 NAMES <- toupper(removed)
[13:34:42.938]                 for (kk in seq_along(NAMES)) {
[13:34:42.938]                   name <- removed[[kk]]
[13:34:42.938]                   NAME <- NAMES[[kk]]
[13:34:42.938]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:42.938]                     next
[13:34:42.938]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:42.938]                 }
[13:34:42.938]                 if (length(args) > 0) 
[13:34:42.938]                   base::do.call(base::Sys.setenv, args = args)
[13:34:42.938]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:34:42.938]             }
[13:34:42.938]             else {
[13:34:42.938]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:34:42.938]             }
[13:34:42.938]             {
[13:34:42.938]                 if (base::length(...future.futureOptionsAdded) > 
[13:34:42.938]                   0L) {
[13:34:42.938]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:34:42.938]                   base::names(opts) <- ...future.futureOptionsAdded
[13:34:42.938]                   base::options(opts)
[13:34:42.938]                 }
[13:34:42.938]                 {
[13:34:42.938]                   {
[13:34:42.938]                     base::options(mc.cores = ...future.mc.cores.old)
[13:34:42.938]                     NULL
[13:34:42.938]                   }
[13:34:42.938]                   options(future.plan = NULL)
[13:34:42.938]                   if (is.na(NA_character_)) 
[13:34:42.938]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:34:42.938]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:34:42.938]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:34:42.938]                     .init = FALSE)
[13:34:42.938]                 }
[13:34:42.938]             }
[13:34:42.938]         }
[13:34:42.938]     })
[13:34:42.938]     if (TRUE) {
[13:34:42.938]         base::sink(type = "output", split = FALSE)
[13:34:42.938]         if (TRUE) {
[13:34:42.938]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:34:42.938]         }
[13:34:42.938]         else {
[13:34:42.938]             ...future.result["stdout"] <- base::list(NULL)
[13:34:42.938]         }
[13:34:42.938]         base::close(...future.stdout)
[13:34:42.938]         ...future.stdout <- NULL
[13:34:42.938]     }
[13:34:42.938]     ...future.result$conditions <- ...future.conditions
[13:34:42.938]     ...future.result$finished <- base::Sys.time()
[13:34:42.938]     ...future.result
[13:34:42.938] }
[13:34:42.992] MultisessionFuture started
[13:34:42.992] result() for ClusterFuture ...
[13:34:42.992] receiveMessageFromWorker() for ClusterFuture ...
[13:34:42.993] - Validating connection of MultisessionFuture
[13:34:43.025] - received message: FutureResult
[13:34:43.025] - Received FutureResult
[13:34:43.025] - Erased future from FutureRegistry
[13:34:43.025] result() for ClusterFuture ...
[13:34:43.025] - result already collected: FutureResult
[13:34:43.026] result() for ClusterFuture ... done
[13:34:43.026] receiveMessageFromWorker() for ClusterFuture ... done
[13:34:43.026] result() for ClusterFuture ... done
[13:34:43.026] result() for ClusterFuture ...
[13:34:43.026] - result already collected: FutureResult
[13:34:43.026] result() for ClusterFuture ... done
[13:34:43.026] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:34:43.030] plan(): nbrOfWorkers() = 2
[13:34:43.031] future_lapply() ...
[13:34:43.031] Generating random seeds ...
[13:34:43.031] Generating random seed streams for 5 elements ...
[13:34:43.032] Generating random seed streams for 5 elements ... DONE
[13:34:43.032] Generating random seeds ... DONE
[13:34:43.032] Will set RNG state on exit: 10403, 17, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:34:43.036] Number of chunks: 2
[13:34:43.036] getGlobalsAndPackagesXApply() ...
[13:34:43.036]  - future.globals: TRUE
[13:34:43.036] getGlobalsAndPackages() ...
[13:34:43.037] Searching for globals...
[13:34:43.038] - globals found: [2] ‘FUN’, ‘sample’
[13:34:43.038] Searching for globals ... DONE
[13:34:43.038] Resolving globals: FALSE
[13:34:43.039] The total size of the 1 globals is 616 bytes (616 bytes)
[13:34:43.039] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:34:43.039] - globals: [1] ‘FUN’
[13:34:43.039] 
[13:34:43.040] getGlobalsAndPackages() ... DONE
[13:34:43.040]  - globals found/used: [n=1] ‘FUN’
[13:34:43.040]  - needed namespaces: [n=0] 
[13:34:43.040] Finding globals ... DONE
[13:34:43.040]  - use_args: TRUE
[13:34:43.040]  - Getting '...' globals ...
[13:34:43.041] resolve() on list ...
[13:34:43.041]  recursive: 0
[13:34:43.041]  length: 1
[13:34:43.041]  elements: ‘...’
[13:34:43.041]  length: 0 (resolved future 1)
[13:34:43.041] resolve() on list ... DONE
[13:34:43.041]    - '...' content: [n=0] 
[13:34:43.041] List of 1
[13:34:43.041]  $ ...: list()
[13:34:43.041]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:43.041]  - attr(*, "where")=List of 1
[13:34:43.041]   ..$ ...:<environment: 0x5627c040ef40> 
[13:34:43.041]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:43.041]  - attr(*, "resolved")= logi TRUE
[13:34:43.041]  - attr(*, "total_size")= num NA
[13:34:43.045]  - Getting '...' globals ... DONE
[13:34:43.045] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:34:43.045] List of 2
[13:34:43.045]  $ ...future.FUN:function (...)  
[13:34:43.045]  $ ...          : list()
[13:34:43.045]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:43.045]  - attr(*, "where")=List of 2
[13:34:43.045]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:34:43.045]   ..$ ...          :<environment: 0x5627c040ef40> 
[13:34:43.045]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:43.045]  - attr(*, "resolved")= logi FALSE
[13:34:43.045]  - attr(*, "total_size")= num 616
[13:34:43.048] Packages to be attached in all futures: [n=0] 
[13:34:43.048] getGlobalsAndPackagesXApply() ... DONE
[13:34:43.049] Number of futures (= number of chunks): 2
[13:34:43.049] Launching 2 futures (chunks) ...
[13:34:43.049] Chunk #1 of 2 ...
[13:34:43.049]  - Finding globals in 'X' for chunk #1 ...
[13:34:43.049] getGlobalsAndPackages() ...
[13:34:43.049] Searching for globals...
[13:34:43.050] 
[13:34:43.050] Searching for globals ... DONE
[13:34:43.050] - globals: [0] <none>
[13:34:43.050] getGlobalsAndPackages() ... DONE
[13:34:43.050]    + additional globals found: [n=0] 
[13:34:43.050]    + additional namespaces needed: [n=0] 
[13:34:43.050]  - Finding globals in 'X' for chunk #1 ... DONE
[13:34:43.050]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:34:43.050]  - seeds: [2] <seeds>
[13:34:43.051]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:43.051] getGlobalsAndPackages() ...
[13:34:43.051] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:43.051] Resolving globals: FALSE
[13:34:43.051] Tweak future expression to call with '...' arguments ...
[13:34:43.051] {
[13:34:43.051]     do.call(function(...) {
[13:34:43.051]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:43.051]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:43.051]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:43.051]             on.exit(options(oopts), add = TRUE)
[13:34:43.051]         }
[13:34:43.051]         {
[13:34:43.051]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:43.051]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:43.051]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:43.051]                   envir = globalenv(), inherits = FALSE)
[13:34:43.051]                 ...future.FUN(...future.X_jj, ...)
[13:34:43.051]             })
[13:34:43.051]         }
[13:34:43.051]     }, args = future.call.arguments)
[13:34:43.051] }
[13:34:43.052] Tweak future expression to call with '...' arguments ... DONE
[13:34:43.052] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:43.052] 
[13:34:43.052] getGlobalsAndPackages() ... DONE
[13:34:43.053] run() for ‘Future’ ...
[13:34:43.053] - state: ‘created’
[13:34:43.053] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:34:43.067] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:43.068] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:34:43.068]   - Field: ‘node’
[13:34:43.068]   - Field: ‘label’
[13:34:43.068]   - Field: ‘local’
[13:34:43.068]   - Field: ‘owner’
[13:34:43.068]   - Field: ‘envir’
[13:34:43.068]   - Field: ‘workers’
[13:34:43.068]   - Field: ‘packages’
[13:34:43.068]   - Field: ‘gc’
[13:34:43.069]   - Field: ‘conditions’
[13:34:43.069]   - Field: ‘persistent’
[13:34:43.069]   - Field: ‘expr’
[13:34:43.069]   - Field: ‘uuid’
[13:34:43.069]   - Field: ‘seed’
[13:34:43.069]   - Field: ‘version’
[13:34:43.069]   - Field: ‘result’
[13:34:43.069]   - Field: ‘asynchronous’
[13:34:43.069]   - Field: ‘calls’
[13:34:43.070]   - Field: ‘globals’
[13:34:43.070]   - Field: ‘stdout’
[13:34:43.070]   - Field: ‘earlySignal’
[13:34:43.070]   - Field: ‘lazy’
[13:34:43.070]   - Field: ‘state’
[13:34:43.070] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:34:43.070] - Launch lazy future ...
[13:34:43.071] Packages needed by the future expression (n = 0): <none>
[13:34:43.071] Packages needed by future strategies (n = 0): <none>
[13:34:43.071] {
[13:34:43.071]     {
[13:34:43.071]         {
[13:34:43.071]             ...future.startTime <- base::Sys.time()
[13:34:43.071]             {
[13:34:43.071]                 {
[13:34:43.071]                   {
[13:34:43.071]                     {
[13:34:43.071]                       base::local({
[13:34:43.071]                         has_future <- base::requireNamespace("future", 
[13:34:43.071]                           quietly = TRUE)
[13:34:43.071]                         if (has_future) {
[13:34:43.071]                           ns <- base::getNamespace("future")
[13:34:43.071]                           version <- ns[[".package"]][["version"]]
[13:34:43.071]                           if (is.null(version)) 
[13:34:43.071]                             version <- utils::packageVersion("future")
[13:34:43.071]                         }
[13:34:43.071]                         else {
[13:34:43.071]                           version <- NULL
[13:34:43.071]                         }
[13:34:43.071]                         if (!has_future || version < "1.8.0") {
[13:34:43.071]                           info <- base::c(r_version = base::gsub("R version ", 
[13:34:43.071]                             "", base::R.version$version.string), 
[13:34:43.071]                             platform = base::sprintf("%s (%s-bit)", 
[13:34:43.071]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:34:43.071]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:34:43.071]                               "release", "version")], collapse = " "), 
[13:34:43.071]                             hostname = base::Sys.info()[["nodename"]])
[13:34:43.071]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:34:43.071]                             info)
[13:34:43.071]                           info <- base::paste(info, collapse = "; ")
[13:34:43.071]                           if (!has_future) {
[13:34:43.071]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:34:43.071]                               info)
[13:34:43.071]                           }
[13:34:43.071]                           else {
[13:34:43.071]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:34:43.071]                               info, version)
[13:34:43.071]                           }
[13:34:43.071]                           base::stop(msg)
[13:34:43.071]                         }
[13:34:43.071]                       })
[13:34:43.071]                     }
[13:34:43.071]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:34:43.071]                     base::options(mc.cores = 1L)
[13:34:43.071]                   }
[13:34:43.071]                   ...future.strategy.old <- future::plan("list")
[13:34:43.071]                   options(future.plan = NULL)
[13:34:43.071]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:34:43.071]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:34:43.071]                 }
[13:34:43.071]                 ...future.workdir <- getwd()
[13:34:43.071]             }
[13:34:43.071]             ...future.oldOptions <- base::as.list(base::.Options)
[13:34:43.071]             ...future.oldEnvVars <- base::Sys.getenv()
[13:34:43.071]         }
[13:34:43.071]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:34:43.071]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:34:43.071]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:34:43.071]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:34:43.071]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:34:43.071]             future.stdout.windows.reencode = NULL, width = 80L)
[13:34:43.071]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:34:43.071]             base::names(...future.oldOptions))
[13:34:43.071]     }
[13:34:43.071]     if (FALSE) {
[13:34:43.071]     }
[13:34:43.071]     else {
[13:34:43.071]         if (TRUE) {
[13:34:43.071]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:34:43.071]                 open = "w")
[13:34:43.071]         }
[13:34:43.071]         else {
[13:34:43.071]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:34:43.071]                 windows = "NUL", "/dev/null"), open = "w")
[13:34:43.071]         }
[13:34:43.071]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:34:43.071]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:34:43.071]             base::sink(type = "output", split = FALSE)
[13:34:43.071]             base::close(...future.stdout)
[13:34:43.071]         }, add = TRUE)
[13:34:43.071]     }
[13:34:43.071]     ...future.frame <- base::sys.nframe()
[13:34:43.071]     ...future.conditions <- base::list()
[13:34:43.071]     ...future.rng <- base::globalenv()$.Random.seed
[13:34:43.071]     if (FALSE) {
[13:34:43.071]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:34:43.071]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:34:43.071]     }
[13:34:43.071]     ...future.result <- base::tryCatch({
[13:34:43.071]         base::withCallingHandlers({
[13:34:43.071]             ...future.value <- base::withVisible(base::local({
[13:34:43.071]                 ...future.makeSendCondition <- base::local({
[13:34:43.071]                   sendCondition <- NULL
[13:34:43.071]                   function(frame = 1L) {
[13:34:43.071]                     if (is.function(sendCondition)) 
[13:34:43.071]                       return(sendCondition)
[13:34:43.071]                     ns <- getNamespace("parallel")
[13:34:43.071]                     if (exists("sendData", mode = "function", 
[13:34:43.071]                       envir = ns)) {
[13:34:43.071]                       parallel_sendData <- get("sendData", mode = "function", 
[13:34:43.071]                         envir = ns)
[13:34:43.071]                       envir <- sys.frame(frame)
[13:34:43.071]                       master <- NULL
[13:34:43.071]                       while (!identical(envir, .GlobalEnv) && 
[13:34:43.071]                         !identical(envir, emptyenv())) {
[13:34:43.071]                         if (exists("master", mode = "list", envir = envir, 
[13:34:43.071]                           inherits = FALSE)) {
[13:34:43.071]                           master <- get("master", mode = "list", 
[13:34:43.071]                             envir = envir, inherits = FALSE)
[13:34:43.071]                           if (inherits(master, c("SOCKnode", 
[13:34:43.071]                             "SOCK0node"))) {
[13:34:43.071]                             sendCondition <<- function(cond) {
[13:34:43.071]                               data <- list(type = "VALUE", value = cond, 
[13:34:43.071]                                 success = TRUE)
[13:34:43.071]                               parallel_sendData(master, data)
[13:34:43.071]                             }
[13:34:43.071]                             return(sendCondition)
[13:34:43.071]                           }
[13:34:43.071]                         }
[13:34:43.071]                         frame <- frame + 1L
[13:34:43.071]                         envir <- sys.frame(frame)
[13:34:43.071]                       }
[13:34:43.071]                     }
[13:34:43.071]                     sendCondition <<- function(cond) NULL
[13:34:43.071]                   }
[13:34:43.071]                 })
[13:34:43.071]                 withCallingHandlers({
[13:34:43.071]                   {
[13:34:43.071]                     do.call(function(...) {
[13:34:43.071]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:43.071]                       if (!identical(...future.globals.maxSize.org, 
[13:34:43.071]                         ...future.globals.maxSize)) {
[13:34:43.071]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:43.071]                         on.exit(options(oopts), add = TRUE)
[13:34:43.071]                       }
[13:34:43.071]                       {
[13:34:43.071]                         lapply(seq_along(...future.elements_ii), 
[13:34:43.071]                           FUN = function(jj) {
[13:34:43.071]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:43.071]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:43.071]                               envir = globalenv(), inherits = FALSE)
[13:34:43.071]                             ...future.FUN(...future.X_jj, ...)
[13:34:43.071]                           })
[13:34:43.071]                       }
[13:34:43.071]                     }, args = future.call.arguments)
[13:34:43.071]                   }
[13:34:43.071]                 }, immediateCondition = function(cond) {
[13:34:43.071]                   sendCondition <- ...future.makeSendCondition()
[13:34:43.071]                   sendCondition(cond)
[13:34:43.071]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:43.071]                   {
[13:34:43.071]                     inherits <- base::inherits
[13:34:43.071]                     invokeRestart <- base::invokeRestart
[13:34:43.071]                     is.null <- base::is.null
[13:34:43.071]                     muffled <- FALSE
[13:34:43.071]                     if (inherits(cond, "message")) {
[13:34:43.071]                       muffled <- grepl(pattern, "muffleMessage")
[13:34:43.071]                       if (muffled) 
[13:34:43.071]                         invokeRestart("muffleMessage")
[13:34:43.071]                     }
[13:34:43.071]                     else if (inherits(cond, "warning")) {
[13:34:43.071]                       muffled <- grepl(pattern, "muffleWarning")
[13:34:43.071]                       if (muffled) 
[13:34:43.071]                         invokeRestart("muffleWarning")
[13:34:43.071]                     }
[13:34:43.071]                     else if (inherits(cond, "condition")) {
[13:34:43.071]                       if (!is.null(pattern)) {
[13:34:43.071]                         computeRestarts <- base::computeRestarts
[13:34:43.071]                         grepl <- base::grepl
[13:34:43.071]                         restarts <- computeRestarts(cond)
[13:34:43.071]                         for (restart in restarts) {
[13:34:43.071]                           name <- restart$name
[13:34:43.071]                           if (is.null(name)) 
[13:34:43.071]                             next
[13:34:43.071]                           if (!grepl(pattern, name)) 
[13:34:43.071]                             next
[13:34:43.071]                           invokeRestart(restart)
[13:34:43.071]                           muffled <- TRUE
[13:34:43.071]                           break
[13:34:43.071]                         }
[13:34:43.071]                       }
[13:34:43.071]                     }
[13:34:43.071]                     invisible(muffled)
[13:34:43.071]                   }
[13:34:43.071]                   muffleCondition(cond)
[13:34:43.071]                 })
[13:34:43.071]             }))
[13:34:43.071]             future::FutureResult(value = ...future.value$value, 
[13:34:43.071]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:43.071]                   ...future.rng), globalenv = if (FALSE) 
[13:34:43.071]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:34:43.071]                     ...future.globalenv.names))
[13:34:43.071]                 else NULL, started = ...future.startTime, version = "1.8")
[13:34:43.071]         }, condition = base::local({
[13:34:43.071]             c <- base::c
[13:34:43.071]             inherits <- base::inherits
[13:34:43.071]             invokeRestart <- base::invokeRestart
[13:34:43.071]             length <- base::length
[13:34:43.071]             list <- base::list
[13:34:43.071]             seq.int <- base::seq.int
[13:34:43.071]             signalCondition <- base::signalCondition
[13:34:43.071]             sys.calls <- base::sys.calls
[13:34:43.071]             `[[` <- base::`[[`
[13:34:43.071]             `+` <- base::`+`
[13:34:43.071]             `<<-` <- base::`<<-`
[13:34:43.071]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:34:43.071]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:34:43.071]                   3L)]
[13:34:43.071]             }
[13:34:43.071]             function(cond) {
[13:34:43.071]                 is_error <- inherits(cond, "error")
[13:34:43.071]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:34:43.071]                   NULL)
[13:34:43.071]                 if (is_error) {
[13:34:43.071]                   sessionInformation <- function() {
[13:34:43.071]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:34:43.071]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:34:43.071]                       search = base::search(), system = base::Sys.info())
[13:34:43.071]                   }
[13:34:43.071]                   ...future.conditions[[length(...future.conditions) + 
[13:34:43.071]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:34:43.071]                     cond$call), session = sessionInformation(), 
[13:34:43.071]                     timestamp = base::Sys.time(), signaled = 0L)
[13:34:43.071]                   signalCondition(cond)
[13:34:43.071]                 }
[13:34:43.071]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:34:43.071]                 "immediateCondition"))) {
[13:34:43.071]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:34:43.071]                   ...future.conditions[[length(...future.conditions) + 
[13:34:43.071]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:34:43.071]                   if (TRUE && !signal) {
[13:34:43.071]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:43.071]                     {
[13:34:43.071]                       inherits <- base::inherits
[13:34:43.071]                       invokeRestart <- base::invokeRestart
[13:34:43.071]                       is.null <- base::is.null
[13:34:43.071]                       muffled <- FALSE
[13:34:43.071]                       if (inherits(cond, "message")) {
[13:34:43.071]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:43.071]                         if (muffled) 
[13:34:43.071]                           invokeRestart("muffleMessage")
[13:34:43.071]                       }
[13:34:43.071]                       else if (inherits(cond, "warning")) {
[13:34:43.071]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:43.071]                         if (muffled) 
[13:34:43.071]                           invokeRestart("muffleWarning")
[13:34:43.071]                       }
[13:34:43.071]                       else if (inherits(cond, "condition")) {
[13:34:43.071]                         if (!is.null(pattern)) {
[13:34:43.071]                           computeRestarts <- base::computeRestarts
[13:34:43.071]                           grepl <- base::grepl
[13:34:43.071]                           restarts <- computeRestarts(cond)
[13:34:43.071]                           for (restart in restarts) {
[13:34:43.071]                             name <- restart$name
[13:34:43.071]                             if (is.null(name)) 
[13:34:43.071]                               next
[13:34:43.071]                             if (!grepl(pattern, name)) 
[13:34:43.071]                               next
[13:34:43.071]                             invokeRestart(restart)
[13:34:43.071]                             muffled <- TRUE
[13:34:43.071]                             break
[13:34:43.071]                           }
[13:34:43.071]                         }
[13:34:43.071]                       }
[13:34:43.071]                       invisible(muffled)
[13:34:43.071]                     }
[13:34:43.071]                     muffleCondition(cond, pattern = "^muffle")
[13:34:43.071]                   }
[13:34:43.071]                 }
[13:34:43.071]                 else {
[13:34:43.071]                   if (TRUE) {
[13:34:43.071]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:43.071]                     {
[13:34:43.071]                       inherits <- base::inherits
[13:34:43.071]                       invokeRestart <- base::invokeRestart
[13:34:43.071]                       is.null <- base::is.null
[13:34:43.071]                       muffled <- FALSE
[13:34:43.071]                       if (inherits(cond, "message")) {
[13:34:43.071]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:43.071]                         if (muffled) 
[13:34:43.071]                           invokeRestart("muffleMessage")
[13:34:43.071]                       }
[13:34:43.071]                       else if (inherits(cond, "warning")) {
[13:34:43.071]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:43.071]                         if (muffled) 
[13:34:43.071]                           invokeRestart("muffleWarning")
[13:34:43.071]                       }
[13:34:43.071]                       else if (inherits(cond, "condition")) {
[13:34:43.071]                         if (!is.null(pattern)) {
[13:34:43.071]                           computeRestarts <- base::computeRestarts
[13:34:43.071]                           grepl <- base::grepl
[13:34:43.071]                           restarts <- computeRestarts(cond)
[13:34:43.071]                           for (restart in restarts) {
[13:34:43.071]                             name <- restart$name
[13:34:43.071]                             if (is.null(name)) 
[13:34:43.071]                               next
[13:34:43.071]                             if (!grepl(pattern, name)) 
[13:34:43.071]                               next
[13:34:43.071]                             invokeRestart(restart)
[13:34:43.071]                             muffled <- TRUE
[13:34:43.071]                             break
[13:34:43.071]                           }
[13:34:43.071]                         }
[13:34:43.071]                       }
[13:34:43.071]                       invisible(muffled)
[13:34:43.071]                     }
[13:34:43.071]                     muffleCondition(cond, pattern = "^muffle")
[13:34:43.071]                   }
[13:34:43.071]                 }
[13:34:43.071]             }
[13:34:43.071]         }))
[13:34:43.071]     }, error = function(ex) {
[13:34:43.071]         base::structure(base::list(value = NULL, visible = NULL, 
[13:34:43.071]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:43.071]                 ...future.rng), started = ...future.startTime, 
[13:34:43.071]             finished = Sys.time(), session_uuid = NA_character_, 
[13:34:43.071]             version = "1.8"), class = "FutureResult")
[13:34:43.071]     }, finally = {
[13:34:43.071]         if (!identical(...future.workdir, getwd())) 
[13:34:43.071]             setwd(...future.workdir)
[13:34:43.071]         {
[13:34:43.071]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:34:43.071]                 ...future.oldOptions$nwarnings <- NULL
[13:34:43.071]             }
[13:34:43.071]             base::options(...future.oldOptions)
[13:34:43.071]             if (.Platform$OS.type == "windows") {
[13:34:43.071]                 old_names <- names(...future.oldEnvVars)
[13:34:43.071]                 envs <- base::Sys.getenv()
[13:34:43.071]                 names <- names(envs)
[13:34:43.071]                 common <- intersect(names, old_names)
[13:34:43.071]                 added <- setdiff(names, old_names)
[13:34:43.071]                 removed <- setdiff(old_names, names)
[13:34:43.071]                 changed <- common[...future.oldEnvVars[common] != 
[13:34:43.071]                   envs[common]]
[13:34:43.071]                 NAMES <- toupper(changed)
[13:34:43.071]                 args <- list()
[13:34:43.071]                 for (kk in seq_along(NAMES)) {
[13:34:43.071]                   name <- changed[[kk]]
[13:34:43.071]                   NAME <- NAMES[[kk]]
[13:34:43.071]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:43.071]                     next
[13:34:43.071]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:43.071]                 }
[13:34:43.071]                 NAMES <- toupper(added)
[13:34:43.071]                 for (kk in seq_along(NAMES)) {
[13:34:43.071]                   name <- added[[kk]]
[13:34:43.071]                   NAME <- NAMES[[kk]]
[13:34:43.071]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:43.071]                     next
[13:34:43.071]                   args[[name]] <- ""
[13:34:43.071]                 }
[13:34:43.071]                 NAMES <- toupper(removed)
[13:34:43.071]                 for (kk in seq_along(NAMES)) {
[13:34:43.071]                   name <- removed[[kk]]
[13:34:43.071]                   NAME <- NAMES[[kk]]
[13:34:43.071]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:43.071]                     next
[13:34:43.071]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:43.071]                 }
[13:34:43.071]                 if (length(args) > 0) 
[13:34:43.071]                   base::do.call(base::Sys.setenv, args = args)
[13:34:43.071]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:34:43.071]             }
[13:34:43.071]             else {
[13:34:43.071]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:34:43.071]             }
[13:34:43.071]             {
[13:34:43.071]                 if (base::length(...future.futureOptionsAdded) > 
[13:34:43.071]                   0L) {
[13:34:43.071]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:34:43.071]                   base::names(opts) <- ...future.futureOptionsAdded
[13:34:43.071]                   base::options(opts)
[13:34:43.071]                 }
[13:34:43.071]                 {
[13:34:43.071]                   {
[13:34:43.071]                     base::options(mc.cores = ...future.mc.cores.old)
[13:34:43.071]                     NULL
[13:34:43.071]                   }
[13:34:43.071]                   options(future.plan = NULL)
[13:34:43.071]                   if (is.na(NA_character_)) 
[13:34:43.071]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:34:43.071]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:34:43.071]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:34:43.071]                     .init = FALSE)
[13:34:43.071]                 }
[13:34:43.071]             }
[13:34:43.071]         }
[13:34:43.071]     })
[13:34:43.071]     if (TRUE) {
[13:34:43.071]         base::sink(type = "output", split = FALSE)
[13:34:43.071]         if (TRUE) {
[13:34:43.071]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:34:43.071]         }
[13:34:43.071]         else {
[13:34:43.071]             ...future.result["stdout"] <- base::list(NULL)
[13:34:43.071]         }
[13:34:43.071]         base::close(...future.stdout)
[13:34:43.071]         ...future.stdout <- NULL
[13:34:43.071]     }
[13:34:43.071]     ...future.result$conditions <- ...future.conditions
[13:34:43.071]     ...future.result$finished <- base::Sys.time()
[13:34:43.071]     ...future.result
[13:34:43.071] }
[13:34:43.074] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[13:34:43.075] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[13:34:43.075] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[13:34:43.075] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[13:34:43.076] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[13:34:43.076] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[13:34:43.076] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[13:34:43.076] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[13:34:43.077] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[13:34:43.077] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[13:34:43.077] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[13:34:43.077] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[13:34:43.078] MultisessionFuture started
[13:34:43.078] - Launch lazy future ... done
[13:34:43.078] run() for ‘MultisessionFuture’ ... done
[13:34:43.078] Created future:
[13:34:43.078] MultisessionFuture:
[13:34:43.078] Label: ‘future_replicate-1’
[13:34:43.078] Expression:
[13:34:43.078] {
[13:34:43.078]     do.call(function(...) {
[13:34:43.078]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:43.078]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:43.078]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:43.078]             on.exit(options(oopts), add = TRUE)
[13:34:43.078]         }
[13:34:43.078]         {
[13:34:43.078]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:43.078]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:43.078]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:43.078]                   envir = globalenv(), inherits = FALSE)
[13:34:43.078]                 ...future.FUN(...future.X_jj, ...)
[13:34:43.078]             })
[13:34:43.078]         }
[13:34:43.078]     }, args = future.call.arguments)
[13:34:43.078] }
[13:34:43.078] Lazy evaluation: FALSE
[13:34:43.078] Asynchronous evaluation: TRUE
[13:34:43.078] Local evaluation: TRUE
[13:34:43.078] Environment: R_GlobalEnv
[13:34:43.078] Capture standard output: TRUE
[13:34:43.078] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:34:43.078] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:34:43.078] Packages: <none>
[13:34:43.078] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:34:43.078] Resolved: FALSE
[13:34:43.078] Value: <not collected>
[13:34:43.078] Conditions captured: <none>
[13:34:43.078] Early signaling: FALSE
[13:34:43.078] Owner process: b8cf10c3-b112-c8f9-9398-a44000e21728
[13:34:43.078] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:43.091] Chunk #1 of 2 ... DONE
[13:34:43.091] Chunk #2 of 2 ...
[13:34:43.091]  - Finding globals in 'X' for chunk #2 ...
[13:34:43.091] getGlobalsAndPackages() ...
[13:34:43.091] Searching for globals...
[13:34:43.092] 
[13:34:43.092] Searching for globals ... DONE
[13:34:43.092] - globals: [0] <none>
[13:34:43.092] getGlobalsAndPackages() ... DONE
[13:34:43.092]    + additional globals found: [n=0] 
[13:34:43.092]    + additional namespaces needed: [n=0] 
[13:34:43.092]  - Finding globals in 'X' for chunk #2 ... DONE
[13:34:43.092]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:34:43.093]  - seeds: [3] <seeds>
[13:34:43.093]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:43.093] getGlobalsAndPackages() ...
[13:34:43.093] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:43.093] Resolving globals: FALSE
[13:34:43.093] Tweak future expression to call with '...' arguments ...
[13:34:43.093] {
[13:34:43.093]     do.call(function(...) {
[13:34:43.093]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:43.093]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:43.093]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:43.093]             on.exit(options(oopts), add = TRUE)
[13:34:43.093]         }
[13:34:43.093]         {
[13:34:43.093]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:43.093]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:43.093]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:43.093]                   envir = globalenv(), inherits = FALSE)
[13:34:43.093]                 ...future.FUN(...future.X_jj, ...)
[13:34:43.093]             })
[13:34:43.093]         }
[13:34:43.093]     }, args = future.call.arguments)
[13:34:43.093] }
[13:34:43.094] Tweak future expression to call with '...' arguments ... DONE
[13:34:43.094] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:43.094] 
[13:34:43.094] getGlobalsAndPackages() ... DONE
[13:34:43.095] run() for ‘Future’ ...
[13:34:43.095] - state: ‘created’
[13:34:43.095] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:34:43.109] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:43.109] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:34:43.109]   - Field: ‘node’
[13:34:43.110]   - Field: ‘label’
[13:34:43.110]   - Field: ‘local’
[13:34:43.110]   - Field: ‘owner’
[13:34:43.110]   - Field: ‘envir’
[13:34:43.110]   - Field: ‘workers’
[13:34:43.110]   - Field: ‘packages’
[13:34:43.110]   - Field: ‘gc’
[13:34:43.110]   - Field: ‘conditions’
[13:34:43.110]   - Field: ‘persistent’
[13:34:43.111]   - Field: ‘expr’
[13:34:43.111]   - Field: ‘uuid’
[13:34:43.111]   - Field: ‘seed’
[13:34:43.111]   - Field: ‘version’
[13:34:43.111]   - Field: ‘result’
[13:34:43.111]   - Field: ‘asynchronous’
[13:34:43.111]   - Field: ‘calls’
[13:34:43.111]   - Field: ‘globals’
[13:34:43.112]   - Field: ‘stdout’
[13:34:43.112]   - Field: ‘earlySignal’
[13:34:43.112]   - Field: ‘lazy’
[13:34:43.112]   - Field: ‘state’
[13:34:43.112] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:34:43.112] - Launch lazy future ...
[13:34:43.112] Packages needed by the future expression (n = 0): <none>
[13:34:43.113] Packages needed by future strategies (n = 0): <none>
[13:34:43.113] {
[13:34:43.113]     {
[13:34:43.113]         {
[13:34:43.113]             ...future.startTime <- base::Sys.time()
[13:34:43.113]             {
[13:34:43.113]                 {
[13:34:43.113]                   {
[13:34:43.113]                     {
[13:34:43.113]                       base::local({
[13:34:43.113]                         has_future <- base::requireNamespace("future", 
[13:34:43.113]                           quietly = TRUE)
[13:34:43.113]                         if (has_future) {
[13:34:43.113]                           ns <- base::getNamespace("future")
[13:34:43.113]                           version <- ns[[".package"]][["version"]]
[13:34:43.113]                           if (is.null(version)) 
[13:34:43.113]                             version <- utils::packageVersion("future")
[13:34:43.113]                         }
[13:34:43.113]                         else {
[13:34:43.113]                           version <- NULL
[13:34:43.113]                         }
[13:34:43.113]                         if (!has_future || version < "1.8.0") {
[13:34:43.113]                           info <- base::c(r_version = base::gsub("R version ", 
[13:34:43.113]                             "", base::R.version$version.string), 
[13:34:43.113]                             platform = base::sprintf("%s (%s-bit)", 
[13:34:43.113]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:34:43.113]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:34:43.113]                               "release", "version")], collapse = " "), 
[13:34:43.113]                             hostname = base::Sys.info()[["nodename"]])
[13:34:43.113]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:34:43.113]                             info)
[13:34:43.113]                           info <- base::paste(info, collapse = "; ")
[13:34:43.113]                           if (!has_future) {
[13:34:43.113]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:34:43.113]                               info)
[13:34:43.113]                           }
[13:34:43.113]                           else {
[13:34:43.113]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:34:43.113]                               info, version)
[13:34:43.113]                           }
[13:34:43.113]                           base::stop(msg)
[13:34:43.113]                         }
[13:34:43.113]                       })
[13:34:43.113]                     }
[13:34:43.113]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:34:43.113]                     base::options(mc.cores = 1L)
[13:34:43.113]                   }
[13:34:43.113]                   ...future.strategy.old <- future::plan("list")
[13:34:43.113]                   options(future.plan = NULL)
[13:34:43.113]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:34:43.113]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:34:43.113]                 }
[13:34:43.113]                 ...future.workdir <- getwd()
[13:34:43.113]             }
[13:34:43.113]             ...future.oldOptions <- base::as.list(base::.Options)
[13:34:43.113]             ...future.oldEnvVars <- base::Sys.getenv()
[13:34:43.113]         }
[13:34:43.113]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:34:43.113]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:34:43.113]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:34:43.113]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:34:43.113]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:34:43.113]             future.stdout.windows.reencode = NULL, width = 80L)
[13:34:43.113]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:34:43.113]             base::names(...future.oldOptions))
[13:34:43.113]     }
[13:34:43.113]     if (FALSE) {
[13:34:43.113]     }
[13:34:43.113]     else {
[13:34:43.113]         if (TRUE) {
[13:34:43.113]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:34:43.113]                 open = "w")
[13:34:43.113]         }
[13:34:43.113]         else {
[13:34:43.113]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:34:43.113]                 windows = "NUL", "/dev/null"), open = "w")
[13:34:43.113]         }
[13:34:43.113]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:34:43.113]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:34:43.113]             base::sink(type = "output", split = FALSE)
[13:34:43.113]             base::close(...future.stdout)
[13:34:43.113]         }, add = TRUE)
[13:34:43.113]     }
[13:34:43.113]     ...future.frame <- base::sys.nframe()
[13:34:43.113]     ...future.conditions <- base::list()
[13:34:43.113]     ...future.rng <- base::globalenv()$.Random.seed
[13:34:43.113]     if (FALSE) {
[13:34:43.113]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:34:43.113]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:34:43.113]     }
[13:34:43.113]     ...future.result <- base::tryCatch({
[13:34:43.113]         base::withCallingHandlers({
[13:34:43.113]             ...future.value <- base::withVisible(base::local({
[13:34:43.113]                 ...future.makeSendCondition <- base::local({
[13:34:43.113]                   sendCondition <- NULL
[13:34:43.113]                   function(frame = 1L) {
[13:34:43.113]                     if (is.function(sendCondition)) 
[13:34:43.113]                       return(sendCondition)
[13:34:43.113]                     ns <- getNamespace("parallel")
[13:34:43.113]                     if (exists("sendData", mode = "function", 
[13:34:43.113]                       envir = ns)) {
[13:34:43.113]                       parallel_sendData <- get("sendData", mode = "function", 
[13:34:43.113]                         envir = ns)
[13:34:43.113]                       envir <- sys.frame(frame)
[13:34:43.113]                       master <- NULL
[13:34:43.113]                       while (!identical(envir, .GlobalEnv) && 
[13:34:43.113]                         !identical(envir, emptyenv())) {
[13:34:43.113]                         if (exists("master", mode = "list", envir = envir, 
[13:34:43.113]                           inherits = FALSE)) {
[13:34:43.113]                           master <- get("master", mode = "list", 
[13:34:43.113]                             envir = envir, inherits = FALSE)
[13:34:43.113]                           if (inherits(master, c("SOCKnode", 
[13:34:43.113]                             "SOCK0node"))) {
[13:34:43.113]                             sendCondition <<- function(cond) {
[13:34:43.113]                               data <- list(type = "VALUE", value = cond, 
[13:34:43.113]                                 success = TRUE)
[13:34:43.113]                               parallel_sendData(master, data)
[13:34:43.113]                             }
[13:34:43.113]                             return(sendCondition)
[13:34:43.113]                           }
[13:34:43.113]                         }
[13:34:43.113]                         frame <- frame + 1L
[13:34:43.113]                         envir <- sys.frame(frame)
[13:34:43.113]                       }
[13:34:43.113]                     }
[13:34:43.113]                     sendCondition <<- function(cond) NULL
[13:34:43.113]                   }
[13:34:43.113]                 })
[13:34:43.113]                 withCallingHandlers({
[13:34:43.113]                   {
[13:34:43.113]                     do.call(function(...) {
[13:34:43.113]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:43.113]                       if (!identical(...future.globals.maxSize.org, 
[13:34:43.113]                         ...future.globals.maxSize)) {
[13:34:43.113]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:43.113]                         on.exit(options(oopts), add = TRUE)
[13:34:43.113]                       }
[13:34:43.113]                       {
[13:34:43.113]                         lapply(seq_along(...future.elements_ii), 
[13:34:43.113]                           FUN = function(jj) {
[13:34:43.113]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:43.113]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:43.113]                               envir = globalenv(), inherits = FALSE)
[13:34:43.113]                             ...future.FUN(...future.X_jj, ...)
[13:34:43.113]                           })
[13:34:43.113]                       }
[13:34:43.113]                     }, args = future.call.arguments)
[13:34:43.113]                   }
[13:34:43.113]                 }, immediateCondition = function(cond) {
[13:34:43.113]                   sendCondition <- ...future.makeSendCondition()
[13:34:43.113]                   sendCondition(cond)
[13:34:43.113]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:43.113]                   {
[13:34:43.113]                     inherits <- base::inherits
[13:34:43.113]                     invokeRestart <- base::invokeRestart
[13:34:43.113]                     is.null <- base::is.null
[13:34:43.113]                     muffled <- FALSE
[13:34:43.113]                     if (inherits(cond, "message")) {
[13:34:43.113]                       muffled <- grepl(pattern, "muffleMessage")
[13:34:43.113]                       if (muffled) 
[13:34:43.113]                         invokeRestart("muffleMessage")
[13:34:43.113]                     }
[13:34:43.113]                     else if (inherits(cond, "warning")) {
[13:34:43.113]                       muffled <- grepl(pattern, "muffleWarning")
[13:34:43.113]                       if (muffled) 
[13:34:43.113]                         invokeRestart("muffleWarning")
[13:34:43.113]                     }
[13:34:43.113]                     else if (inherits(cond, "condition")) {
[13:34:43.113]                       if (!is.null(pattern)) {
[13:34:43.113]                         computeRestarts <- base::computeRestarts
[13:34:43.113]                         grepl <- base::grepl
[13:34:43.113]                         restarts <- computeRestarts(cond)
[13:34:43.113]                         for (restart in restarts) {
[13:34:43.113]                           name <- restart$name
[13:34:43.113]                           if (is.null(name)) 
[13:34:43.113]                             next
[13:34:43.113]                           if (!grepl(pattern, name)) 
[13:34:43.113]                             next
[13:34:43.113]                           invokeRestart(restart)
[13:34:43.113]                           muffled <- TRUE
[13:34:43.113]                           break
[13:34:43.113]                         }
[13:34:43.113]                       }
[13:34:43.113]                     }
[13:34:43.113]                     invisible(muffled)
[13:34:43.113]                   }
[13:34:43.113]                   muffleCondition(cond)
[13:34:43.113]                 })
[13:34:43.113]             }))
[13:34:43.113]             future::FutureResult(value = ...future.value$value, 
[13:34:43.113]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:43.113]                   ...future.rng), globalenv = if (FALSE) 
[13:34:43.113]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:34:43.113]                     ...future.globalenv.names))
[13:34:43.113]                 else NULL, started = ...future.startTime, version = "1.8")
[13:34:43.113]         }, condition = base::local({
[13:34:43.113]             c <- base::c
[13:34:43.113]             inherits <- base::inherits
[13:34:43.113]             invokeRestart <- base::invokeRestart
[13:34:43.113]             length <- base::length
[13:34:43.113]             list <- base::list
[13:34:43.113]             seq.int <- base::seq.int
[13:34:43.113]             signalCondition <- base::signalCondition
[13:34:43.113]             sys.calls <- base::sys.calls
[13:34:43.113]             `[[` <- base::`[[`
[13:34:43.113]             `+` <- base::`+`
[13:34:43.113]             `<<-` <- base::`<<-`
[13:34:43.113]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:34:43.113]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:34:43.113]                   3L)]
[13:34:43.113]             }
[13:34:43.113]             function(cond) {
[13:34:43.113]                 is_error <- inherits(cond, "error")
[13:34:43.113]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:34:43.113]                   NULL)
[13:34:43.113]                 if (is_error) {
[13:34:43.113]                   sessionInformation <- function() {
[13:34:43.113]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:34:43.113]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:34:43.113]                       search = base::search(), system = base::Sys.info())
[13:34:43.113]                   }
[13:34:43.113]                   ...future.conditions[[length(...future.conditions) + 
[13:34:43.113]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:34:43.113]                     cond$call), session = sessionInformation(), 
[13:34:43.113]                     timestamp = base::Sys.time(), signaled = 0L)
[13:34:43.113]                   signalCondition(cond)
[13:34:43.113]                 }
[13:34:43.113]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:34:43.113]                 "immediateCondition"))) {
[13:34:43.113]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:34:43.113]                   ...future.conditions[[length(...future.conditions) + 
[13:34:43.113]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:34:43.113]                   if (TRUE && !signal) {
[13:34:43.113]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:43.113]                     {
[13:34:43.113]                       inherits <- base::inherits
[13:34:43.113]                       invokeRestart <- base::invokeRestart
[13:34:43.113]                       is.null <- base::is.null
[13:34:43.113]                       muffled <- FALSE
[13:34:43.113]                       if (inherits(cond, "message")) {
[13:34:43.113]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:43.113]                         if (muffled) 
[13:34:43.113]                           invokeRestart("muffleMessage")
[13:34:43.113]                       }
[13:34:43.113]                       else if (inherits(cond, "warning")) {
[13:34:43.113]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:43.113]                         if (muffled) 
[13:34:43.113]                           invokeRestart("muffleWarning")
[13:34:43.113]                       }
[13:34:43.113]                       else if (inherits(cond, "condition")) {
[13:34:43.113]                         if (!is.null(pattern)) {
[13:34:43.113]                           computeRestarts <- base::computeRestarts
[13:34:43.113]                           grepl <- base::grepl
[13:34:43.113]                           restarts <- computeRestarts(cond)
[13:34:43.113]                           for (restart in restarts) {
[13:34:43.113]                             name <- restart$name
[13:34:43.113]                             if (is.null(name)) 
[13:34:43.113]                               next
[13:34:43.113]                             if (!grepl(pattern, name)) 
[13:34:43.113]                               next
[13:34:43.113]                             invokeRestart(restart)
[13:34:43.113]                             muffled <- TRUE
[13:34:43.113]                             break
[13:34:43.113]                           }
[13:34:43.113]                         }
[13:34:43.113]                       }
[13:34:43.113]                       invisible(muffled)
[13:34:43.113]                     }
[13:34:43.113]                     muffleCondition(cond, pattern = "^muffle")
[13:34:43.113]                   }
[13:34:43.113]                 }
[13:34:43.113]                 else {
[13:34:43.113]                   if (TRUE) {
[13:34:43.113]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:43.113]                     {
[13:34:43.113]                       inherits <- base::inherits
[13:34:43.113]                       invokeRestart <- base::invokeRestart
[13:34:43.113]                       is.null <- base::is.null
[13:34:43.113]                       muffled <- FALSE
[13:34:43.113]                       if (inherits(cond, "message")) {
[13:34:43.113]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:43.113]                         if (muffled) 
[13:34:43.113]                           invokeRestart("muffleMessage")
[13:34:43.113]                       }
[13:34:43.113]                       else if (inherits(cond, "warning")) {
[13:34:43.113]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:43.113]                         if (muffled) 
[13:34:43.113]                           invokeRestart("muffleWarning")
[13:34:43.113]                       }
[13:34:43.113]                       else if (inherits(cond, "condition")) {
[13:34:43.113]                         if (!is.null(pattern)) {
[13:34:43.113]                           computeRestarts <- base::computeRestarts
[13:34:43.113]                           grepl <- base::grepl
[13:34:43.113]                           restarts <- computeRestarts(cond)
[13:34:43.113]                           for (restart in restarts) {
[13:34:43.113]                             name <- restart$name
[13:34:43.113]                             if (is.null(name)) 
[13:34:43.113]                               next
[13:34:43.113]                             if (!grepl(pattern, name)) 
[13:34:43.113]                               next
[13:34:43.113]                             invokeRestart(restart)
[13:34:43.113]                             muffled <- TRUE
[13:34:43.113]                             break
[13:34:43.113]                           }
[13:34:43.113]                         }
[13:34:43.113]                       }
[13:34:43.113]                       invisible(muffled)
[13:34:43.113]                     }
[13:34:43.113]                     muffleCondition(cond, pattern = "^muffle")
[13:34:43.113]                   }
[13:34:43.113]                 }
[13:34:43.113]             }
[13:34:43.113]         }))
[13:34:43.113]     }, error = function(ex) {
[13:34:43.113]         base::structure(base::list(value = NULL, visible = NULL, 
[13:34:43.113]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:43.113]                 ...future.rng), started = ...future.startTime, 
[13:34:43.113]             finished = Sys.time(), session_uuid = NA_character_, 
[13:34:43.113]             version = "1.8"), class = "FutureResult")
[13:34:43.113]     }, finally = {
[13:34:43.113]         if (!identical(...future.workdir, getwd())) 
[13:34:43.113]             setwd(...future.workdir)
[13:34:43.113]         {
[13:34:43.113]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:34:43.113]                 ...future.oldOptions$nwarnings <- NULL
[13:34:43.113]             }
[13:34:43.113]             base::options(...future.oldOptions)
[13:34:43.113]             if (.Platform$OS.type == "windows") {
[13:34:43.113]                 old_names <- names(...future.oldEnvVars)
[13:34:43.113]                 envs <- base::Sys.getenv()
[13:34:43.113]                 names <- names(envs)
[13:34:43.113]                 common <- intersect(names, old_names)
[13:34:43.113]                 added <- setdiff(names, old_names)
[13:34:43.113]                 removed <- setdiff(old_names, names)
[13:34:43.113]                 changed <- common[...future.oldEnvVars[common] != 
[13:34:43.113]                   envs[common]]
[13:34:43.113]                 NAMES <- toupper(changed)
[13:34:43.113]                 args <- list()
[13:34:43.113]                 for (kk in seq_along(NAMES)) {
[13:34:43.113]                   name <- changed[[kk]]
[13:34:43.113]                   NAME <- NAMES[[kk]]
[13:34:43.113]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:43.113]                     next
[13:34:43.113]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:43.113]                 }
[13:34:43.113]                 NAMES <- toupper(added)
[13:34:43.113]                 for (kk in seq_along(NAMES)) {
[13:34:43.113]                   name <- added[[kk]]
[13:34:43.113]                   NAME <- NAMES[[kk]]
[13:34:43.113]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:43.113]                     next
[13:34:43.113]                   args[[name]] <- ""
[13:34:43.113]                 }
[13:34:43.113]                 NAMES <- toupper(removed)
[13:34:43.113]                 for (kk in seq_along(NAMES)) {
[13:34:43.113]                   name <- removed[[kk]]
[13:34:43.113]                   NAME <- NAMES[[kk]]
[13:34:43.113]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:43.113]                     next
[13:34:43.113]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:43.113]                 }
[13:34:43.113]                 if (length(args) > 0) 
[13:34:43.113]                   base::do.call(base::Sys.setenv, args = args)
[13:34:43.113]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:34:43.113]             }
[13:34:43.113]             else {
[13:34:43.113]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:34:43.113]             }
[13:34:43.113]             {
[13:34:43.113]                 if (base::length(...future.futureOptionsAdded) > 
[13:34:43.113]                   0L) {
[13:34:43.113]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:34:43.113]                   base::names(opts) <- ...future.futureOptionsAdded
[13:34:43.113]                   base::options(opts)
[13:34:43.113]                 }
[13:34:43.113]                 {
[13:34:43.113]                   {
[13:34:43.113]                     base::options(mc.cores = ...future.mc.cores.old)
[13:34:43.113]                     NULL
[13:34:43.113]                   }
[13:34:43.113]                   options(future.plan = NULL)
[13:34:43.113]                   if (is.na(NA_character_)) 
[13:34:43.113]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:34:43.113]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:34:43.113]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:34:43.113]                     .init = FALSE)
[13:34:43.113]                 }
[13:34:43.113]             }
[13:34:43.113]         }
[13:34:43.113]     })
[13:34:43.113]     if (TRUE) {
[13:34:43.113]         base::sink(type = "output", split = FALSE)
[13:34:43.113]         if (TRUE) {
[13:34:43.113]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:34:43.113]         }
[13:34:43.113]         else {
[13:34:43.113]             ...future.result["stdout"] <- base::list(NULL)
[13:34:43.113]         }
[13:34:43.113]         base::close(...future.stdout)
[13:34:43.113]         ...future.stdout <- NULL
[13:34:43.113]     }
[13:34:43.113]     ...future.result$conditions <- ...future.conditions
[13:34:43.113]     ...future.result$finished <- base::Sys.time()
[13:34:43.113]     ...future.result
[13:34:43.113] }
[13:34:43.166] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[13:34:43.166] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[13:34:43.167] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[13:34:43.167] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[13:34:43.167] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[13:34:43.168] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[13:34:43.168] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[13:34:43.168] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[13:34:43.168] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[13:34:43.169] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[13:34:43.169] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[13:34:43.169] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[13:34:43.170] MultisessionFuture started
[13:34:43.170] - Launch lazy future ... done
[13:34:43.170] run() for ‘MultisessionFuture’ ... done
[13:34:43.170] Created future:
[13:34:43.170] MultisessionFuture:
[13:34:43.170] Label: ‘future_replicate-2’
[13:34:43.170] Expression:
[13:34:43.170] {
[13:34:43.170]     do.call(function(...) {
[13:34:43.170]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:43.170]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:43.170]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:43.170]             on.exit(options(oopts), add = TRUE)
[13:34:43.170]         }
[13:34:43.170]         {
[13:34:43.170]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:43.170]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:43.170]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:43.170]                   envir = globalenv(), inherits = FALSE)
[13:34:43.170]                 ...future.FUN(...future.X_jj, ...)
[13:34:43.170]             })
[13:34:43.170]         }
[13:34:43.170]     }, args = future.call.arguments)
[13:34:43.170] }
[13:34:43.170] Lazy evaluation: FALSE
[13:34:43.170] Asynchronous evaluation: TRUE
[13:34:43.170] Local evaluation: TRUE
[13:34:43.170] Environment: R_GlobalEnv
[13:34:43.170] Capture standard output: TRUE
[13:34:43.170] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:34:43.170] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:34:43.170] Packages: <none>
[13:34:43.170] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:34:43.170] Resolved: FALSE
[13:34:43.170] Value: <not collected>
[13:34:43.170] Conditions captured: <none>
[13:34:43.170] Early signaling: FALSE
[13:34:43.170] Owner process: b8cf10c3-b112-c8f9-9398-a44000e21728
[13:34:43.170] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:43.182] Chunk #2 of 2 ... DONE
[13:34:43.182] Launching 2 futures (chunks) ... DONE
[13:34:43.183] Resolving 2 futures (chunks) ...
[13:34:43.183] resolve() on list ...
[13:34:43.183]  recursive: 0
[13:34:43.183]  length: 2
[13:34:43.183] 
[13:34:43.184] receiveMessageFromWorker() for ClusterFuture ...
[13:34:43.184] - Validating connection of MultisessionFuture
[13:34:43.187] - received message: FutureResult
[13:34:43.187] - Received FutureResult
[13:34:43.187] - Erased future from FutureRegistry
[13:34:43.187] result() for ClusterFuture ...
[13:34:43.187] - result already collected: FutureResult
[13:34:43.187] result() for ClusterFuture ... done
[13:34:43.187] receiveMessageFromWorker() for ClusterFuture ... done
[13:34:43.187] Future #1
[13:34:43.188] result() for ClusterFuture ...
[13:34:43.188] - result already collected: FutureResult
[13:34:43.188] result() for ClusterFuture ... done
[13:34:43.188] result() for ClusterFuture ...
[13:34:43.188] - result already collected: FutureResult
[13:34:43.188] result() for ClusterFuture ... done
[13:34:43.188] signalConditionsASAP(MultisessionFuture, pos=1) ...
[13:34:43.188] - nx: 2
[13:34:43.188] - relay: TRUE
[13:34:43.188] - stdout: TRUE
[13:34:43.188] - signal: TRUE
[13:34:43.188] - resignal: FALSE
[13:34:43.189] - force: TRUE
[13:34:43.189] - relayed: [n=2] FALSE, FALSE
[13:34:43.189] - queued futures: [n=2] FALSE, FALSE
[13:34:43.189]  - until=1
[13:34:43.189]  - relaying element #1
[13:34:43.189] result() for ClusterFuture ...
[13:34:43.189] - result already collected: FutureResult
[13:34:43.189] result() for ClusterFuture ... done
[13:34:43.189] result() for ClusterFuture ...
[13:34:43.189] - result already collected: FutureResult
[13:34:43.189] result() for ClusterFuture ... done
[13:34:43.190] result() for ClusterFuture ...
[13:34:43.190] - result already collected: FutureResult
[13:34:43.190] result() for ClusterFuture ... done
[13:34:43.190] result() for ClusterFuture ...
[13:34:43.190] - result already collected: FutureResult
[13:34:43.190] result() for ClusterFuture ... done
[13:34:43.190] - relayed: [n=2] TRUE, FALSE
[13:34:43.190] - queued futures: [n=2] TRUE, FALSE
[13:34:43.190] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[13:34:43.190]  length: 1 (resolved future 1)
[13:34:43.252] receiveMessageFromWorker() for ClusterFuture ...
[13:34:43.253] - Validating connection of MultisessionFuture
[13:34:43.253] - received message: FutureResult
[13:34:43.253] - Received FutureResult
[13:34:43.253] - Erased future from FutureRegistry
[13:34:43.253] result() for ClusterFuture ...
[13:34:43.253] - result already collected: FutureResult
[13:34:43.253] result() for ClusterFuture ... done
[13:34:43.253] receiveMessageFromWorker() for ClusterFuture ... done
[13:34:43.254] Future #2
[13:34:43.254] result() for ClusterFuture ...
[13:34:43.254] - result already collected: FutureResult
[13:34:43.254] result() for ClusterFuture ... done
[13:34:43.254] result() for ClusterFuture ...
[13:34:43.254] - result already collected: FutureResult
[13:34:43.254] result() for ClusterFuture ... done
[13:34:43.254] signalConditionsASAP(MultisessionFuture, pos=2) ...
[13:34:43.254] - nx: 2
[13:34:43.254] - relay: TRUE
[13:34:43.254] - stdout: TRUE
[13:34:43.254] - signal: TRUE
[13:34:43.255] - resignal: FALSE
[13:34:43.255] - force: TRUE
[13:34:43.255] - relayed: [n=2] TRUE, FALSE
[13:34:43.255] - queued futures: [n=2] TRUE, FALSE
[13:34:43.255]  - until=2
[13:34:43.255]  - relaying element #2
[13:34:43.255] result() for ClusterFuture ...
[13:34:43.255] - result already collected: FutureResult
[13:34:43.255] result() for ClusterFuture ... done
[13:34:43.255] result() for ClusterFuture ...
[13:34:43.255] - result already collected: FutureResult
[13:34:43.255] result() for ClusterFuture ... done
[13:34:43.256] result() for ClusterFuture ...
[13:34:43.256] - result already collected: FutureResult
[13:34:43.256] result() for ClusterFuture ... done
[13:34:43.256] result() for ClusterFuture ...
[13:34:43.256] - result already collected: FutureResult
[13:34:43.256] result() for ClusterFuture ... done
[13:34:43.256] - relayed: [n=2] TRUE, TRUE
[13:34:43.256] - queued futures: [n=2] TRUE, TRUE
[13:34:43.256] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[13:34:43.256]  length: 0 (resolved future 2)
[13:34:43.257] Relaying remaining futures
[13:34:43.257] signalConditionsASAP(NULL, pos=0) ...
[13:34:43.257] - nx: 2
[13:34:43.257] - relay: TRUE
[13:34:43.257] - stdout: TRUE
[13:34:43.257] - signal: TRUE
[13:34:43.257] - resignal: FALSE
[13:34:43.257] - force: TRUE
[13:34:43.257] - relayed: [n=2] TRUE, TRUE
[13:34:43.257] - queued futures: [n=2] TRUE, TRUE
 - flush all
[13:34:43.257] - relayed: [n=2] TRUE, TRUE
[13:34:43.257] - queued futures: [n=2] TRUE, TRUE
[13:34:43.258] signalConditionsASAP(NULL, pos=0) ... done
[13:34:43.258] resolve() on list ... DONE
[13:34:43.258] result() for ClusterFuture ...
[13:34:43.258] - result already collected: FutureResult
[13:34:43.258] result() for ClusterFuture ... done
[13:34:43.258] result() for ClusterFuture ...
[13:34:43.258] - result already collected: FutureResult
[13:34:43.258] result() for ClusterFuture ... done
[13:34:43.258] result() for ClusterFuture ...
[13:34:43.258] - result already collected: FutureResult
[13:34:43.258] result() for ClusterFuture ... done
[13:34:43.259] result() for ClusterFuture ...
[13:34:43.259] - result already collected: FutureResult
[13:34:43.259] result() for ClusterFuture ... done
[13:34:43.259]  - Number of value chunks collected: 2
[13:34:43.259] Resolving 2 futures (chunks) ... DONE
[13:34:43.259] Reducing values from 2 chunks ...
[13:34:43.259]  - Number of values collected after concatenation: 5
[13:34:43.259]  - Number of values expected: 5
[13:34:43.259] Reducing values from 2 chunks ... DONE
[13:34:43.259] future_lapply() ... DONE
[13:34:43.259] future_lapply() ...
[13:34:43.260] Generating random seeds ...
[13:34:43.260] Generating random seed streams for 5 elements ...
[13:34:43.260] Generating random seed streams for 5 elements ... DONE
[13:34:43.260] Generating random seeds ... DONE
[13:34:43.260] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:34:43.265] Number of chunks: 2
[13:34:43.265] getGlobalsAndPackagesXApply() ...
[13:34:43.265]  - future.globals: TRUE
[13:34:43.265] getGlobalsAndPackages() ...
[13:34:43.265] Searching for globals...
[13:34:43.266] - globals found: [2] ‘FUN’, ‘sample’
[13:34:43.266] Searching for globals ... DONE
[13:34:43.267] Resolving globals: FALSE
[13:34:43.267] The total size of the 1 globals is 616 bytes (616 bytes)
[13:34:43.267] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:34:43.267] - globals: [1] ‘FUN’
[13:34:43.267] 
[13:34:43.268] getGlobalsAndPackages() ... DONE
[13:34:43.268]  - globals found/used: [n=1] ‘FUN’
[13:34:43.268]  - needed namespaces: [n=0] 
[13:34:43.268] Finding globals ... DONE
[13:34:43.268]  - use_args: TRUE
[13:34:43.268]  - Getting '...' globals ...
[13:34:43.268] resolve() on list ...
[13:34:43.268]  recursive: 0
[13:34:43.268]  length: 1
[13:34:43.269]  elements: ‘...’
[13:34:43.269]  length: 0 (resolved future 1)
[13:34:43.269] resolve() on list ... DONE
[13:34:43.269]    - '...' content: [n=0] 
[13:34:43.269] List of 1
[13:34:43.269]  $ ...: list()
[13:34:43.269]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:43.269]  - attr(*, "where")=List of 1
[13:34:43.269]   ..$ ...:<environment: 0x5627bf295228> 
[13:34:43.269]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:43.269]  - attr(*, "resolved")= logi TRUE
[13:34:43.269]  - attr(*, "total_size")= num NA
[13:34:43.272]  - Getting '...' globals ... DONE
[13:34:43.272] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:34:43.272] List of 2
[13:34:43.272]  $ ...future.FUN:function (...)  
[13:34:43.272]  $ ...          : list()
[13:34:43.272]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:43.272]  - attr(*, "where")=List of 2
[13:34:43.272]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:34:43.272]   ..$ ...          :<environment: 0x5627bf295228> 
[13:34:43.272]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:43.272]  - attr(*, "resolved")= logi FALSE
[13:34:43.272]  - attr(*, "total_size")= num 616
[13:34:43.274] Packages to be attached in all futures: [n=0] 
[13:34:43.275] getGlobalsAndPackagesXApply() ... DONE
[13:34:43.275] Number of futures (= number of chunks): 2
[13:34:43.275] Launching 2 futures (chunks) ...
[13:34:43.275] Chunk #1 of 2 ...
[13:34:43.275]  - Finding globals in 'X' for chunk #1 ...
[13:34:43.275] getGlobalsAndPackages() ...
[13:34:43.275] Searching for globals...
[13:34:43.276] 
[13:34:43.276] Searching for globals ... DONE
[13:34:43.276] - globals: [0] <none>
[13:34:43.276] getGlobalsAndPackages() ... DONE
[13:34:43.276]    + additional globals found: [n=0] 
[13:34:43.276]    + additional namespaces needed: [n=0] 
[13:34:43.276]  - Finding globals in 'X' for chunk #1 ... DONE
[13:34:43.276]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:34:43.276]  - seeds: [2] <seeds>
[13:34:43.276]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:43.276] getGlobalsAndPackages() ...
[13:34:43.277] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:43.277] Resolving globals: FALSE
[13:34:43.277] Tweak future expression to call with '...' arguments ...
[13:34:43.277] {
[13:34:43.277]     do.call(function(...) {
[13:34:43.277]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:43.277]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:43.277]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:43.277]             on.exit(options(oopts), add = TRUE)
[13:34:43.277]         }
[13:34:43.277]         {
[13:34:43.277]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:43.277]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:43.277]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:43.277]                   envir = globalenv(), inherits = FALSE)
[13:34:43.277]                 ...future.FUN(...future.X_jj, ...)
[13:34:43.277]             })
[13:34:43.277]         }
[13:34:43.277]     }, args = future.call.arguments)
[13:34:43.277] }
[13:34:43.277] Tweak future expression to call with '...' arguments ... DONE
[13:34:43.278] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:43.278] 
[13:34:43.278] getGlobalsAndPackages() ... DONE
[13:34:43.278] run() for ‘Future’ ...
[13:34:43.278] - state: ‘created’
[13:34:43.278] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:34:43.292] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:43.292] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:34:43.293]   - Field: ‘node’
[13:34:43.293]   - Field: ‘label’
[13:34:43.293]   - Field: ‘local’
[13:34:43.293]   - Field: ‘owner’
[13:34:43.293]   - Field: ‘envir’
[13:34:43.293]   - Field: ‘workers’
[13:34:43.293]   - Field: ‘packages’
[13:34:43.293]   - Field: ‘gc’
[13:34:43.293]   - Field: ‘conditions’
[13:34:43.293]   - Field: ‘persistent’
[13:34:43.294]   - Field: ‘expr’
[13:34:43.294]   - Field: ‘uuid’
[13:34:43.294]   - Field: ‘seed’
[13:34:43.294]   - Field: ‘version’
[13:34:43.294]   - Field: ‘result’
[13:34:43.294]   - Field: ‘asynchronous’
[13:34:43.294]   - Field: ‘calls’
[13:34:43.294]   - Field: ‘globals’
[13:34:43.294]   - Field: ‘stdout’
[13:34:43.294]   - Field: ‘earlySignal’
[13:34:43.295]   - Field: ‘lazy’
[13:34:43.295]   - Field: ‘state’
[13:34:43.295] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:34:43.295] - Launch lazy future ...
[13:34:43.295] Packages needed by the future expression (n = 0): <none>
[13:34:43.295] Packages needed by future strategies (n = 0): <none>
[13:34:43.296] {
[13:34:43.296]     {
[13:34:43.296]         {
[13:34:43.296]             ...future.startTime <- base::Sys.time()
[13:34:43.296]             {
[13:34:43.296]                 {
[13:34:43.296]                   {
[13:34:43.296]                     {
[13:34:43.296]                       base::local({
[13:34:43.296]                         has_future <- base::requireNamespace("future", 
[13:34:43.296]                           quietly = TRUE)
[13:34:43.296]                         if (has_future) {
[13:34:43.296]                           ns <- base::getNamespace("future")
[13:34:43.296]                           version <- ns[[".package"]][["version"]]
[13:34:43.296]                           if (is.null(version)) 
[13:34:43.296]                             version <- utils::packageVersion("future")
[13:34:43.296]                         }
[13:34:43.296]                         else {
[13:34:43.296]                           version <- NULL
[13:34:43.296]                         }
[13:34:43.296]                         if (!has_future || version < "1.8.0") {
[13:34:43.296]                           info <- base::c(r_version = base::gsub("R version ", 
[13:34:43.296]                             "", base::R.version$version.string), 
[13:34:43.296]                             platform = base::sprintf("%s (%s-bit)", 
[13:34:43.296]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:34:43.296]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:34:43.296]                               "release", "version")], collapse = " "), 
[13:34:43.296]                             hostname = base::Sys.info()[["nodename"]])
[13:34:43.296]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:34:43.296]                             info)
[13:34:43.296]                           info <- base::paste(info, collapse = "; ")
[13:34:43.296]                           if (!has_future) {
[13:34:43.296]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:34:43.296]                               info)
[13:34:43.296]                           }
[13:34:43.296]                           else {
[13:34:43.296]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:34:43.296]                               info, version)
[13:34:43.296]                           }
[13:34:43.296]                           base::stop(msg)
[13:34:43.296]                         }
[13:34:43.296]                       })
[13:34:43.296]                     }
[13:34:43.296]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:34:43.296]                     base::options(mc.cores = 1L)
[13:34:43.296]                   }
[13:34:43.296]                   ...future.strategy.old <- future::plan("list")
[13:34:43.296]                   options(future.plan = NULL)
[13:34:43.296]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:34:43.296]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:34:43.296]                 }
[13:34:43.296]                 ...future.workdir <- getwd()
[13:34:43.296]             }
[13:34:43.296]             ...future.oldOptions <- base::as.list(base::.Options)
[13:34:43.296]             ...future.oldEnvVars <- base::Sys.getenv()
[13:34:43.296]         }
[13:34:43.296]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:34:43.296]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:34:43.296]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:34:43.296]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:34:43.296]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:34:43.296]             future.stdout.windows.reencode = NULL, width = 80L)
[13:34:43.296]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:34:43.296]             base::names(...future.oldOptions))
[13:34:43.296]     }
[13:34:43.296]     if (FALSE) {
[13:34:43.296]     }
[13:34:43.296]     else {
[13:34:43.296]         if (TRUE) {
[13:34:43.296]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:34:43.296]                 open = "w")
[13:34:43.296]         }
[13:34:43.296]         else {
[13:34:43.296]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:34:43.296]                 windows = "NUL", "/dev/null"), open = "w")
[13:34:43.296]         }
[13:34:43.296]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:34:43.296]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:34:43.296]             base::sink(type = "output", split = FALSE)
[13:34:43.296]             base::close(...future.stdout)
[13:34:43.296]         }, add = TRUE)
[13:34:43.296]     }
[13:34:43.296]     ...future.frame <- base::sys.nframe()
[13:34:43.296]     ...future.conditions <- base::list()
[13:34:43.296]     ...future.rng <- base::globalenv()$.Random.seed
[13:34:43.296]     if (FALSE) {
[13:34:43.296]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:34:43.296]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:34:43.296]     }
[13:34:43.296]     ...future.result <- base::tryCatch({
[13:34:43.296]         base::withCallingHandlers({
[13:34:43.296]             ...future.value <- base::withVisible(base::local({
[13:34:43.296]                 ...future.makeSendCondition <- base::local({
[13:34:43.296]                   sendCondition <- NULL
[13:34:43.296]                   function(frame = 1L) {
[13:34:43.296]                     if (is.function(sendCondition)) 
[13:34:43.296]                       return(sendCondition)
[13:34:43.296]                     ns <- getNamespace("parallel")
[13:34:43.296]                     if (exists("sendData", mode = "function", 
[13:34:43.296]                       envir = ns)) {
[13:34:43.296]                       parallel_sendData <- get("sendData", mode = "function", 
[13:34:43.296]                         envir = ns)
[13:34:43.296]                       envir <- sys.frame(frame)
[13:34:43.296]                       master <- NULL
[13:34:43.296]                       while (!identical(envir, .GlobalEnv) && 
[13:34:43.296]                         !identical(envir, emptyenv())) {
[13:34:43.296]                         if (exists("master", mode = "list", envir = envir, 
[13:34:43.296]                           inherits = FALSE)) {
[13:34:43.296]                           master <- get("master", mode = "list", 
[13:34:43.296]                             envir = envir, inherits = FALSE)
[13:34:43.296]                           if (inherits(master, c("SOCKnode", 
[13:34:43.296]                             "SOCK0node"))) {
[13:34:43.296]                             sendCondition <<- function(cond) {
[13:34:43.296]                               data <- list(type = "VALUE", value = cond, 
[13:34:43.296]                                 success = TRUE)
[13:34:43.296]                               parallel_sendData(master, data)
[13:34:43.296]                             }
[13:34:43.296]                             return(sendCondition)
[13:34:43.296]                           }
[13:34:43.296]                         }
[13:34:43.296]                         frame <- frame + 1L
[13:34:43.296]                         envir <- sys.frame(frame)
[13:34:43.296]                       }
[13:34:43.296]                     }
[13:34:43.296]                     sendCondition <<- function(cond) NULL
[13:34:43.296]                   }
[13:34:43.296]                 })
[13:34:43.296]                 withCallingHandlers({
[13:34:43.296]                   {
[13:34:43.296]                     do.call(function(...) {
[13:34:43.296]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:43.296]                       if (!identical(...future.globals.maxSize.org, 
[13:34:43.296]                         ...future.globals.maxSize)) {
[13:34:43.296]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:43.296]                         on.exit(options(oopts), add = TRUE)
[13:34:43.296]                       }
[13:34:43.296]                       {
[13:34:43.296]                         lapply(seq_along(...future.elements_ii), 
[13:34:43.296]                           FUN = function(jj) {
[13:34:43.296]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:43.296]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:43.296]                               envir = globalenv(), inherits = FALSE)
[13:34:43.296]                             ...future.FUN(...future.X_jj, ...)
[13:34:43.296]                           })
[13:34:43.296]                       }
[13:34:43.296]                     }, args = future.call.arguments)
[13:34:43.296]                   }
[13:34:43.296]                 }, immediateCondition = function(cond) {
[13:34:43.296]                   sendCondition <- ...future.makeSendCondition()
[13:34:43.296]                   sendCondition(cond)
[13:34:43.296]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:43.296]                   {
[13:34:43.296]                     inherits <- base::inherits
[13:34:43.296]                     invokeRestart <- base::invokeRestart
[13:34:43.296]                     is.null <- base::is.null
[13:34:43.296]                     muffled <- FALSE
[13:34:43.296]                     if (inherits(cond, "message")) {
[13:34:43.296]                       muffled <- grepl(pattern, "muffleMessage")
[13:34:43.296]                       if (muffled) 
[13:34:43.296]                         invokeRestart("muffleMessage")
[13:34:43.296]                     }
[13:34:43.296]                     else if (inherits(cond, "warning")) {
[13:34:43.296]                       muffled <- grepl(pattern, "muffleWarning")
[13:34:43.296]                       if (muffled) 
[13:34:43.296]                         invokeRestart("muffleWarning")
[13:34:43.296]                     }
[13:34:43.296]                     else if (inherits(cond, "condition")) {
[13:34:43.296]                       if (!is.null(pattern)) {
[13:34:43.296]                         computeRestarts <- base::computeRestarts
[13:34:43.296]                         grepl <- base::grepl
[13:34:43.296]                         restarts <- computeRestarts(cond)
[13:34:43.296]                         for (restart in restarts) {
[13:34:43.296]                           name <- restart$name
[13:34:43.296]                           if (is.null(name)) 
[13:34:43.296]                             next
[13:34:43.296]                           if (!grepl(pattern, name)) 
[13:34:43.296]                             next
[13:34:43.296]                           invokeRestart(restart)
[13:34:43.296]                           muffled <- TRUE
[13:34:43.296]                           break
[13:34:43.296]                         }
[13:34:43.296]                       }
[13:34:43.296]                     }
[13:34:43.296]                     invisible(muffled)
[13:34:43.296]                   }
[13:34:43.296]                   muffleCondition(cond)
[13:34:43.296]                 })
[13:34:43.296]             }))
[13:34:43.296]             future::FutureResult(value = ...future.value$value, 
[13:34:43.296]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:43.296]                   ...future.rng), globalenv = if (FALSE) 
[13:34:43.296]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:34:43.296]                     ...future.globalenv.names))
[13:34:43.296]                 else NULL, started = ...future.startTime, version = "1.8")
[13:34:43.296]         }, condition = base::local({
[13:34:43.296]             c <- base::c
[13:34:43.296]             inherits <- base::inherits
[13:34:43.296]             invokeRestart <- base::invokeRestart
[13:34:43.296]             length <- base::length
[13:34:43.296]             list <- base::list
[13:34:43.296]             seq.int <- base::seq.int
[13:34:43.296]             signalCondition <- base::signalCondition
[13:34:43.296]             sys.calls <- base::sys.calls
[13:34:43.296]             `[[` <- base::`[[`
[13:34:43.296]             `+` <- base::`+`
[13:34:43.296]             `<<-` <- base::`<<-`
[13:34:43.296]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:34:43.296]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:34:43.296]                   3L)]
[13:34:43.296]             }
[13:34:43.296]             function(cond) {
[13:34:43.296]                 is_error <- inherits(cond, "error")
[13:34:43.296]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:34:43.296]                   NULL)
[13:34:43.296]                 if (is_error) {
[13:34:43.296]                   sessionInformation <- function() {
[13:34:43.296]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:34:43.296]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:34:43.296]                       search = base::search(), system = base::Sys.info())
[13:34:43.296]                   }
[13:34:43.296]                   ...future.conditions[[length(...future.conditions) + 
[13:34:43.296]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:34:43.296]                     cond$call), session = sessionInformation(), 
[13:34:43.296]                     timestamp = base::Sys.time(), signaled = 0L)
[13:34:43.296]                   signalCondition(cond)
[13:34:43.296]                 }
[13:34:43.296]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:34:43.296]                 "immediateCondition"))) {
[13:34:43.296]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:34:43.296]                   ...future.conditions[[length(...future.conditions) + 
[13:34:43.296]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:34:43.296]                   if (TRUE && !signal) {
[13:34:43.296]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:43.296]                     {
[13:34:43.296]                       inherits <- base::inherits
[13:34:43.296]                       invokeRestart <- base::invokeRestart
[13:34:43.296]                       is.null <- base::is.null
[13:34:43.296]                       muffled <- FALSE
[13:34:43.296]                       if (inherits(cond, "message")) {
[13:34:43.296]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:43.296]                         if (muffled) 
[13:34:43.296]                           invokeRestart("muffleMessage")
[13:34:43.296]                       }
[13:34:43.296]                       else if (inherits(cond, "warning")) {
[13:34:43.296]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:43.296]                         if (muffled) 
[13:34:43.296]                           invokeRestart("muffleWarning")
[13:34:43.296]                       }
[13:34:43.296]                       else if (inherits(cond, "condition")) {
[13:34:43.296]                         if (!is.null(pattern)) {
[13:34:43.296]                           computeRestarts <- base::computeRestarts
[13:34:43.296]                           grepl <- base::grepl
[13:34:43.296]                           restarts <- computeRestarts(cond)
[13:34:43.296]                           for (restart in restarts) {
[13:34:43.296]                             name <- restart$name
[13:34:43.296]                             if (is.null(name)) 
[13:34:43.296]                               next
[13:34:43.296]                             if (!grepl(pattern, name)) 
[13:34:43.296]                               next
[13:34:43.296]                             invokeRestart(restart)
[13:34:43.296]                             muffled <- TRUE
[13:34:43.296]                             break
[13:34:43.296]                           }
[13:34:43.296]                         }
[13:34:43.296]                       }
[13:34:43.296]                       invisible(muffled)
[13:34:43.296]                     }
[13:34:43.296]                     muffleCondition(cond, pattern = "^muffle")
[13:34:43.296]                   }
[13:34:43.296]                 }
[13:34:43.296]                 else {
[13:34:43.296]                   if (TRUE) {
[13:34:43.296]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:43.296]                     {
[13:34:43.296]                       inherits <- base::inherits
[13:34:43.296]                       invokeRestart <- base::invokeRestart
[13:34:43.296]                       is.null <- base::is.null
[13:34:43.296]                       muffled <- FALSE
[13:34:43.296]                       if (inherits(cond, "message")) {
[13:34:43.296]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:43.296]                         if (muffled) 
[13:34:43.296]                           invokeRestart("muffleMessage")
[13:34:43.296]                       }
[13:34:43.296]                       else if (inherits(cond, "warning")) {
[13:34:43.296]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:43.296]                         if (muffled) 
[13:34:43.296]                           invokeRestart("muffleWarning")
[13:34:43.296]                       }
[13:34:43.296]                       else if (inherits(cond, "condition")) {
[13:34:43.296]                         if (!is.null(pattern)) {
[13:34:43.296]                           computeRestarts <- base::computeRestarts
[13:34:43.296]                           grepl <- base::grepl
[13:34:43.296]                           restarts <- computeRestarts(cond)
[13:34:43.296]                           for (restart in restarts) {
[13:34:43.296]                             name <- restart$name
[13:34:43.296]                             if (is.null(name)) 
[13:34:43.296]                               next
[13:34:43.296]                             if (!grepl(pattern, name)) 
[13:34:43.296]                               next
[13:34:43.296]                             invokeRestart(restart)
[13:34:43.296]                             muffled <- TRUE
[13:34:43.296]                             break
[13:34:43.296]                           }
[13:34:43.296]                         }
[13:34:43.296]                       }
[13:34:43.296]                       invisible(muffled)
[13:34:43.296]                     }
[13:34:43.296]                     muffleCondition(cond, pattern = "^muffle")
[13:34:43.296]                   }
[13:34:43.296]                 }
[13:34:43.296]             }
[13:34:43.296]         }))
[13:34:43.296]     }, error = function(ex) {
[13:34:43.296]         base::structure(base::list(value = NULL, visible = NULL, 
[13:34:43.296]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:43.296]                 ...future.rng), started = ...future.startTime, 
[13:34:43.296]             finished = Sys.time(), session_uuid = NA_character_, 
[13:34:43.296]             version = "1.8"), class = "FutureResult")
[13:34:43.296]     }, finally = {
[13:34:43.296]         if (!identical(...future.workdir, getwd())) 
[13:34:43.296]             setwd(...future.workdir)
[13:34:43.296]         {
[13:34:43.296]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:34:43.296]                 ...future.oldOptions$nwarnings <- NULL
[13:34:43.296]             }
[13:34:43.296]             base::options(...future.oldOptions)
[13:34:43.296]             if (.Platform$OS.type == "windows") {
[13:34:43.296]                 old_names <- names(...future.oldEnvVars)
[13:34:43.296]                 envs <- base::Sys.getenv()
[13:34:43.296]                 names <- names(envs)
[13:34:43.296]                 common <- intersect(names, old_names)
[13:34:43.296]                 added <- setdiff(names, old_names)
[13:34:43.296]                 removed <- setdiff(old_names, names)
[13:34:43.296]                 changed <- common[...future.oldEnvVars[common] != 
[13:34:43.296]                   envs[common]]
[13:34:43.296]                 NAMES <- toupper(changed)
[13:34:43.296]                 args <- list()
[13:34:43.296]                 for (kk in seq_along(NAMES)) {
[13:34:43.296]                   name <- changed[[kk]]
[13:34:43.296]                   NAME <- NAMES[[kk]]
[13:34:43.296]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:43.296]                     next
[13:34:43.296]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:43.296]                 }
[13:34:43.296]                 NAMES <- toupper(added)
[13:34:43.296]                 for (kk in seq_along(NAMES)) {
[13:34:43.296]                   name <- added[[kk]]
[13:34:43.296]                   NAME <- NAMES[[kk]]
[13:34:43.296]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:43.296]                     next
[13:34:43.296]                   args[[name]] <- ""
[13:34:43.296]                 }
[13:34:43.296]                 NAMES <- toupper(removed)
[13:34:43.296]                 for (kk in seq_along(NAMES)) {
[13:34:43.296]                   name <- removed[[kk]]
[13:34:43.296]                   NAME <- NAMES[[kk]]
[13:34:43.296]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:43.296]                     next
[13:34:43.296]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:43.296]                 }
[13:34:43.296]                 if (length(args) > 0) 
[13:34:43.296]                   base::do.call(base::Sys.setenv, args = args)
[13:34:43.296]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:34:43.296]             }
[13:34:43.296]             else {
[13:34:43.296]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:34:43.296]             }
[13:34:43.296]             {
[13:34:43.296]                 if (base::length(...future.futureOptionsAdded) > 
[13:34:43.296]                   0L) {
[13:34:43.296]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:34:43.296]                   base::names(opts) <- ...future.futureOptionsAdded
[13:34:43.296]                   base::options(opts)
[13:34:43.296]                 }
[13:34:43.296]                 {
[13:34:43.296]                   {
[13:34:43.296]                     base::options(mc.cores = ...future.mc.cores.old)
[13:34:43.296]                     NULL
[13:34:43.296]                   }
[13:34:43.296]                   options(future.plan = NULL)
[13:34:43.296]                   if (is.na(NA_character_)) 
[13:34:43.296]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:34:43.296]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:34:43.296]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:34:43.296]                     .init = FALSE)
[13:34:43.296]                 }
[13:34:43.296]             }
[13:34:43.296]         }
[13:34:43.296]     })
[13:34:43.296]     if (TRUE) {
[13:34:43.296]         base::sink(type = "output", split = FALSE)
[13:34:43.296]         if (TRUE) {
[13:34:43.296]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:34:43.296]         }
[13:34:43.296]         else {
[13:34:43.296]             ...future.result["stdout"] <- base::list(NULL)
[13:34:43.296]         }
[13:34:43.296]         base::close(...future.stdout)
[13:34:43.296]         ...future.stdout <- NULL
[13:34:43.296]     }
[13:34:43.296]     ...future.result$conditions <- ...future.conditions
[13:34:43.296]     ...future.result$finished <- base::Sys.time()
[13:34:43.296]     ...future.result
[13:34:43.296] }
[13:34:43.298] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[13:34:43.299] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[13:34:43.299] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[13:34:43.299] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[13:34:43.300] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[13:34:43.300] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[13:34:43.300] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[13:34:43.300] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[13:34:43.301] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[13:34:43.301] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[13:34:43.301] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[13:34:43.301] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[13:34:43.302] MultisessionFuture started
[13:34:43.302] - Launch lazy future ... done
[13:34:43.302] run() for ‘MultisessionFuture’ ... done
[13:34:43.302] Created future:
[13:34:43.302] MultisessionFuture:
[13:34:43.302] Label: ‘future_replicate-1’
[13:34:43.302] Expression:
[13:34:43.302] {
[13:34:43.302]     do.call(function(...) {
[13:34:43.302]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:43.302]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:43.302]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:43.302]             on.exit(options(oopts), add = TRUE)
[13:34:43.302]         }
[13:34:43.302]         {
[13:34:43.302]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:43.302]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:43.302]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:43.302]                   envir = globalenv(), inherits = FALSE)
[13:34:43.302]                 ...future.FUN(...future.X_jj, ...)
[13:34:43.302]             })
[13:34:43.302]         }
[13:34:43.302]     }, args = future.call.arguments)
[13:34:43.302] }
[13:34:43.302] Lazy evaluation: FALSE
[13:34:43.302] Asynchronous evaluation: TRUE
[13:34:43.302] Local evaluation: TRUE
[13:34:43.302] Environment: R_GlobalEnv
[13:34:43.302] Capture standard output: TRUE
[13:34:43.302] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:34:43.302] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:34:43.302] Packages: <none>
[13:34:43.302] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:34:43.302] Resolved: FALSE
[13:34:43.302] Value: <not collected>
[13:34:43.302] Conditions captured: <none>
[13:34:43.302] Early signaling: FALSE
[13:34:43.302] Owner process: b8cf10c3-b112-c8f9-9398-a44000e21728
[13:34:43.302] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:43.313] Chunk #1 of 2 ... DONE
[13:34:43.314] Chunk #2 of 2 ...
[13:34:43.314]  - Finding globals in 'X' for chunk #2 ...
[13:34:43.314] getGlobalsAndPackages() ...
[13:34:43.314] Searching for globals...
[13:34:43.314] 
[13:34:43.314] Searching for globals ... DONE
[13:34:43.314] - globals: [0] <none>
[13:34:43.314] getGlobalsAndPackages() ... DONE
[13:34:43.315]    + additional globals found: [n=0] 
[13:34:43.315]    + additional namespaces needed: [n=0] 
[13:34:43.315]  - Finding globals in 'X' for chunk #2 ... DONE
[13:34:43.315]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:34:43.315]  - seeds: [3] <seeds>
[13:34:43.315]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:43.315] getGlobalsAndPackages() ...
[13:34:43.315] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:43.315] Resolving globals: FALSE
[13:34:43.315] Tweak future expression to call with '...' arguments ...
[13:34:43.316] {
[13:34:43.316]     do.call(function(...) {
[13:34:43.316]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:43.316]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:43.316]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:43.316]             on.exit(options(oopts), add = TRUE)
[13:34:43.316]         }
[13:34:43.316]         {
[13:34:43.316]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:43.316]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:43.316]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:43.316]                   envir = globalenv(), inherits = FALSE)
[13:34:43.316]                 ...future.FUN(...future.X_jj, ...)
[13:34:43.316]             })
[13:34:43.316]         }
[13:34:43.316]     }, args = future.call.arguments)
[13:34:43.316] }
[13:34:43.316] Tweak future expression to call with '...' arguments ... DONE
[13:34:43.316] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:43.316] 
[13:34:43.316] getGlobalsAndPackages() ... DONE
[13:34:43.317] run() for ‘Future’ ...
[13:34:43.317] - state: ‘created’
[13:34:43.317] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:34:43.331] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:43.331] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:34:43.331]   - Field: ‘node’
[13:34:43.331]   - Field: ‘label’
[13:34:43.331]   - Field: ‘local’
[13:34:43.331]   - Field: ‘owner’
[13:34:43.331]   - Field: ‘envir’
[13:34:43.331]   - Field: ‘workers’
[13:34:43.332]   - Field: ‘packages’
[13:34:43.332]   - Field: ‘gc’
[13:34:43.332]   - Field: ‘conditions’
[13:34:43.332]   - Field: ‘persistent’
[13:34:43.332]   - Field: ‘expr’
[13:34:43.332]   - Field: ‘uuid’
[13:34:43.332]   - Field: ‘seed’
[13:34:43.332]   - Field: ‘version’
[13:34:43.332]   - Field: ‘result’
[13:34:43.332]   - Field: ‘asynchronous’
[13:34:43.332]   - Field: ‘calls’
[13:34:43.333]   - Field: ‘globals’
[13:34:43.333]   - Field: ‘stdout’
[13:34:43.333]   - Field: ‘earlySignal’
[13:34:43.333]   - Field: ‘lazy’
[13:34:43.333]   - Field: ‘state’
[13:34:43.333] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:34:43.333] - Launch lazy future ...
[13:34:43.333] Packages needed by the future expression (n = 0): <none>
[13:34:43.334] Packages needed by future strategies (n = 0): <none>
[13:34:43.334] {
[13:34:43.334]     {
[13:34:43.334]         {
[13:34:43.334]             ...future.startTime <- base::Sys.time()
[13:34:43.334]             {
[13:34:43.334]                 {
[13:34:43.334]                   {
[13:34:43.334]                     {
[13:34:43.334]                       base::local({
[13:34:43.334]                         has_future <- base::requireNamespace("future", 
[13:34:43.334]                           quietly = TRUE)
[13:34:43.334]                         if (has_future) {
[13:34:43.334]                           ns <- base::getNamespace("future")
[13:34:43.334]                           version <- ns[[".package"]][["version"]]
[13:34:43.334]                           if (is.null(version)) 
[13:34:43.334]                             version <- utils::packageVersion("future")
[13:34:43.334]                         }
[13:34:43.334]                         else {
[13:34:43.334]                           version <- NULL
[13:34:43.334]                         }
[13:34:43.334]                         if (!has_future || version < "1.8.0") {
[13:34:43.334]                           info <- base::c(r_version = base::gsub("R version ", 
[13:34:43.334]                             "", base::R.version$version.string), 
[13:34:43.334]                             platform = base::sprintf("%s (%s-bit)", 
[13:34:43.334]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:34:43.334]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:34:43.334]                               "release", "version")], collapse = " "), 
[13:34:43.334]                             hostname = base::Sys.info()[["nodename"]])
[13:34:43.334]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:34:43.334]                             info)
[13:34:43.334]                           info <- base::paste(info, collapse = "; ")
[13:34:43.334]                           if (!has_future) {
[13:34:43.334]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:34:43.334]                               info)
[13:34:43.334]                           }
[13:34:43.334]                           else {
[13:34:43.334]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:34:43.334]                               info, version)
[13:34:43.334]                           }
[13:34:43.334]                           base::stop(msg)
[13:34:43.334]                         }
[13:34:43.334]                       })
[13:34:43.334]                     }
[13:34:43.334]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:34:43.334]                     base::options(mc.cores = 1L)
[13:34:43.334]                   }
[13:34:43.334]                   ...future.strategy.old <- future::plan("list")
[13:34:43.334]                   options(future.plan = NULL)
[13:34:43.334]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:34:43.334]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:34:43.334]                 }
[13:34:43.334]                 ...future.workdir <- getwd()
[13:34:43.334]             }
[13:34:43.334]             ...future.oldOptions <- base::as.list(base::.Options)
[13:34:43.334]             ...future.oldEnvVars <- base::Sys.getenv()
[13:34:43.334]         }
[13:34:43.334]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:34:43.334]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:34:43.334]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:34:43.334]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:34:43.334]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:34:43.334]             future.stdout.windows.reencode = NULL, width = 80L)
[13:34:43.334]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:34:43.334]             base::names(...future.oldOptions))
[13:34:43.334]     }
[13:34:43.334]     if (FALSE) {
[13:34:43.334]     }
[13:34:43.334]     else {
[13:34:43.334]         if (TRUE) {
[13:34:43.334]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:34:43.334]                 open = "w")
[13:34:43.334]         }
[13:34:43.334]         else {
[13:34:43.334]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:34:43.334]                 windows = "NUL", "/dev/null"), open = "w")
[13:34:43.334]         }
[13:34:43.334]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:34:43.334]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:34:43.334]             base::sink(type = "output", split = FALSE)
[13:34:43.334]             base::close(...future.stdout)
[13:34:43.334]         }, add = TRUE)
[13:34:43.334]     }
[13:34:43.334]     ...future.frame <- base::sys.nframe()
[13:34:43.334]     ...future.conditions <- base::list()
[13:34:43.334]     ...future.rng <- base::globalenv()$.Random.seed
[13:34:43.334]     if (FALSE) {
[13:34:43.334]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:34:43.334]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:34:43.334]     }
[13:34:43.334]     ...future.result <- base::tryCatch({
[13:34:43.334]         base::withCallingHandlers({
[13:34:43.334]             ...future.value <- base::withVisible(base::local({
[13:34:43.334]                 ...future.makeSendCondition <- base::local({
[13:34:43.334]                   sendCondition <- NULL
[13:34:43.334]                   function(frame = 1L) {
[13:34:43.334]                     if (is.function(sendCondition)) 
[13:34:43.334]                       return(sendCondition)
[13:34:43.334]                     ns <- getNamespace("parallel")
[13:34:43.334]                     if (exists("sendData", mode = "function", 
[13:34:43.334]                       envir = ns)) {
[13:34:43.334]                       parallel_sendData <- get("sendData", mode = "function", 
[13:34:43.334]                         envir = ns)
[13:34:43.334]                       envir <- sys.frame(frame)
[13:34:43.334]                       master <- NULL
[13:34:43.334]                       while (!identical(envir, .GlobalEnv) && 
[13:34:43.334]                         !identical(envir, emptyenv())) {
[13:34:43.334]                         if (exists("master", mode = "list", envir = envir, 
[13:34:43.334]                           inherits = FALSE)) {
[13:34:43.334]                           master <- get("master", mode = "list", 
[13:34:43.334]                             envir = envir, inherits = FALSE)
[13:34:43.334]                           if (inherits(master, c("SOCKnode", 
[13:34:43.334]                             "SOCK0node"))) {
[13:34:43.334]                             sendCondition <<- function(cond) {
[13:34:43.334]                               data <- list(type = "VALUE", value = cond, 
[13:34:43.334]                                 success = TRUE)
[13:34:43.334]                               parallel_sendData(master, data)
[13:34:43.334]                             }
[13:34:43.334]                             return(sendCondition)
[13:34:43.334]                           }
[13:34:43.334]                         }
[13:34:43.334]                         frame <- frame + 1L
[13:34:43.334]                         envir <- sys.frame(frame)
[13:34:43.334]                       }
[13:34:43.334]                     }
[13:34:43.334]                     sendCondition <<- function(cond) NULL
[13:34:43.334]                   }
[13:34:43.334]                 })
[13:34:43.334]                 withCallingHandlers({
[13:34:43.334]                   {
[13:34:43.334]                     do.call(function(...) {
[13:34:43.334]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:43.334]                       if (!identical(...future.globals.maxSize.org, 
[13:34:43.334]                         ...future.globals.maxSize)) {
[13:34:43.334]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:43.334]                         on.exit(options(oopts), add = TRUE)
[13:34:43.334]                       }
[13:34:43.334]                       {
[13:34:43.334]                         lapply(seq_along(...future.elements_ii), 
[13:34:43.334]                           FUN = function(jj) {
[13:34:43.334]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:43.334]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:43.334]                               envir = globalenv(), inherits = FALSE)
[13:34:43.334]                             ...future.FUN(...future.X_jj, ...)
[13:34:43.334]                           })
[13:34:43.334]                       }
[13:34:43.334]                     }, args = future.call.arguments)
[13:34:43.334]                   }
[13:34:43.334]                 }, immediateCondition = function(cond) {
[13:34:43.334]                   sendCondition <- ...future.makeSendCondition()
[13:34:43.334]                   sendCondition(cond)
[13:34:43.334]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:43.334]                   {
[13:34:43.334]                     inherits <- base::inherits
[13:34:43.334]                     invokeRestart <- base::invokeRestart
[13:34:43.334]                     is.null <- base::is.null
[13:34:43.334]                     muffled <- FALSE
[13:34:43.334]                     if (inherits(cond, "message")) {
[13:34:43.334]                       muffled <- grepl(pattern, "muffleMessage")
[13:34:43.334]                       if (muffled) 
[13:34:43.334]                         invokeRestart("muffleMessage")
[13:34:43.334]                     }
[13:34:43.334]                     else if (inherits(cond, "warning")) {
[13:34:43.334]                       muffled <- grepl(pattern, "muffleWarning")
[13:34:43.334]                       if (muffled) 
[13:34:43.334]                         invokeRestart("muffleWarning")
[13:34:43.334]                     }
[13:34:43.334]                     else if (inherits(cond, "condition")) {
[13:34:43.334]                       if (!is.null(pattern)) {
[13:34:43.334]                         computeRestarts <- base::computeRestarts
[13:34:43.334]                         grepl <- base::grepl
[13:34:43.334]                         restarts <- computeRestarts(cond)
[13:34:43.334]                         for (restart in restarts) {
[13:34:43.334]                           name <- restart$name
[13:34:43.334]                           if (is.null(name)) 
[13:34:43.334]                             next
[13:34:43.334]                           if (!grepl(pattern, name)) 
[13:34:43.334]                             next
[13:34:43.334]                           invokeRestart(restart)
[13:34:43.334]                           muffled <- TRUE
[13:34:43.334]                           break
[13:34:43.334]                         }
[13:34:43.334]                       }
[13:34:43.334]                     }
[13:34:43.334]                     invisible(muffled)
[13:34:43.334]                   }
[13:34:43.334]                   muffleCondition(cond)
[13:34:43.334]                 })
[13:34:43.334]             }))
[13:34:43.334]             future::FutureResult(value = ...future.value$value, 
[13:34:43.334]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:43.334]                   ...future.rng), globalenv = if (FALSE) 
[13:34:43.334]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:34:43.334]                     ...future.globalenv.names))
[13:34:43.334]                 else NULL, started = ...future.startTime, version = "1.8")
[13:34:43.334]         }, condition = base::local({
[13:34:43.334]             c <- base::c
[13:34:43.334]             inherits <- base::inherits
[13:34:43.334]             invokeRestart <- base::invokeRestart
[13:34:43.334]             length <- base::length
[13:34:43.334]             list <- base::list
[13:34:43.334]             seq.int <- base::seq.int
[13:34:43.334]             signalCondition <- base::signalCondition
[13:34:43.334]             sys.calls <- base::sys.calls
[13:34:43.334]             `[[` <- base::`[[`
[13:34:43.334]             `+` <- base::`+`
[13:34:43.334]             `<<-` <- base::`<<-`
[13:34:43.334]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:34:43.334]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:34:43.334]                   3L)]
[13:34:43.334]             }
[13:34:43.334]             function(cond) {
[13:34:43.334]                 is_error <- inherits(cond, "error")
[13:34:43.334]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:34:43.334]                   NULL)
[13:34:43.334]                 if (is_error) {
[13:34:43.334]                   sessionInformation <- function() {
[13:34:43.334]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:34:43.334]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:34:43.334]                       search = base::search(), system = base::Sys.info())
[13:34:43.334]                   }
[13:34:43.334]                   ...future.conditions[[length(...future.conditions) + 
[13:34:43.334]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:34:43.334]                     cond$call), session = sessionInformation(), 
[13:34:43.334]                     timestamp = base::Sys.time(), signaled = 0L)
[13:34:43.334]                   signalCondition(cond)
[13:34:43.334]                 }
[13:34:43.334]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:34:43.334]                 "immediateCondition"))) {
[13:34:43.334]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:34:43.334]                   ...future.conditions[[length(...future.conditions) + 
[13:34:43.334]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:34:43.334]                   if (TRUE && !signal) {
[13:34:43.334]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:43.334]                     {
[13:34:43.334]                       inherits <- base::inherits
[13:34:43.334]                       invokeRestart <- base::invokeRestart
[13:34:43.334]                       is.null <- base::is.null
[13:34:43.334]                       muffled <- FALSE
[13:34:43.334]                       if (inherits(cond, "message")) {
[13:34:43.334]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:43.334]                         if (muffled) 
[13:34:43.334]                           invokeRestart("muffleMessage")
[13:34:43.334]                       }
[13:34:43.334]                       else if (inherits(cond, "warning")) {
[13:34:43.334]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:43.334]                         if (muffled) 
[13:34:43.334]                           invokeRestart("muffleWarning")
[13:34:43.334]                       }
[13:34:43.334]                       else if (inherits(cond, "condition")) {
[13:34:43.334]                         if (!is.null(pattern)) {
[13:34:43.334]                           computeRestarts <- base::computeRestarts
[13:34:43.334]                           grepl <- base::grepl
[13:34:43.334]                           restarts <- computeRestarts(cond)
[13:34:43.334]                           for (restart in restarts) {
[13:34:43.334]                             name <- restart$name
[13:34:43.334]                             if (is.null(name)) 
[13:34:43.334]                               next
[13:34:43.334]                             if (!grepl(pattern, name)) 
[13:34:43.334]                               next
[13:34:43.334]                             invokeRestart(restart)
[13:34:43.334]                             muffled <- TRUE
[13:34:43.334]                             break
[13:34:43.334]                           }
[13:34:43.334]                         }
[13:34:43.334]                       }
[13:34:43.334]                       invisible(muffled)
[13:34:43.334]                     }
[13:34:43.334]                     muffleCondition(cond, pattern = "^muffle")
[13:34:43.334]                   }
[13:34:43.334]                 }
[13:34:43.334]                 else {
[13:34:43.334]                   if (TRUE) {
[13:34:43.334]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:43.334]                     {
[13:34:43.334]                       inherits <- base::inherits
[13:34:43.334]                       invokeRestart <- base::invokeRestart
[13:34:43.334]                       is.null <- base::is.null
[13:34:43.334]                       muffled <- FALSE
[13:34:43.334]                       if (inherits(cond, "message")) {
[13:34:43.334]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:43.334]                         if (muffled) 
[13:34:43.334]                           invokeRestart("muffleMessage")
[13:34:43.334]                       }
[13:34:43.334]                       else if (inherits(cond, "warning")) {
[13:34:43.334]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:43.334]                         if (muffled) 
[13:34:43.334]                           invokeRestart("muffleWarning")
[13:34:43.334]                       }
[13:34:43.334]                       else if (inherits(cond, "condition")) {
[13:34:43.334]                         if (!is.null(pattern)) {
[13:34:43.334]                           computeRestarts <- base::computeRestarts
[13:34:43.334]                           grepl <- base::grepl
[13:34:43.334]                           restarts <- computeRestarts(cond)
[13:34:43.334]                           for (restart in restarts) {
[13:34:43.334]                             name <- restart$name
[13:34:43.334]                             if (is.null(name)) 
[13:34:43.334]                               next
[13:34:43.334]                             if (!grepl(pattern, name)) 
[13:34:43.334]                               next
[13:34:43.334]                             invokeRestart(restart)
[13:34:43.334]                             muffled <- TRUE
[13:34:43.334]                             break
[13:34:43.334]                           }
[13:34:43.334]                         }
[13:34:43.334]                       }
[13:34:43.334]                       invisible(muffled)
[13:34:43.334]                     }
[13:34:43.334]                     muffleCondition(cond, pattern = "^muffle")
[13:34:43.334]                   }
[13:34:43.334]                 }
[13:34:43.334]             }
[13:34:43.334]         }))
[13:34:43.334]     }, error = function(ex) {
[13:34:43.334]         base::structure(base::list(value = NULL, visible = NULL, 
[13:34:43.334]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:43.334]                 ...future.rng), started = ...future.startTime, 
[13:34:43.334]             finished = Sys.time(), session_uuid = NA_character_, 
[13:34:43.334]             version = "1.8"), class = "FutureResult")
[13:34:43.334]     }, finally = {
[13:34:43.334]         if (!identical(...future.workdir, getwd())) 
[13:34:43.334]             setwd(...future.workdir)
[13:34:43.334]         {
[13:34:43.334]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:34:43.334]                 ...future.oldOptions$nwarnings <- NULL
[13:34:43.334]             }
[13:34:43.334]             base::options(...future.oldOptions)
[13:34:43.334]             if (.Platform$OS.type == "windows") {
[13:34:43.334]                 old_names <- names(...future.oldEnvVars)
[13:34:43.334]                 envs <- base::Sys.getenv()
[13:34:43.334]                 names <- names(envs)
[13:34:43.334]                 common <- intersect(names, old_names)
[13:34:43.334]                 added <- setdiff(names, old_names)
[13:34:43.334]                 removed <- setdiff(old_names, names)
[13:34:43.334]                 changed <- common[...future.oldEnvVars[common] != 
[13:34:43.334]                   envs[common]]
[13:34:43.334]                 NAMES <- toupper(changed)
[13:34:43.334]                 args <- list()
[13:34:43.334]                 for (kk in seq_along(NAMES)) {
[13:34:43.334]                   name <- changed[[kk]]
[13:34:43.334]                   NAME <- NAMES[[kk]]
[13:34:43.334]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:43.334]                     next
[13:34:43.334]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:43.334]                 }
[13:34:43.334]                 NAMES <- toupper(added)
[13:34:43.334]                 for (kk in seq_along(NAMES)) {
[13:34:43.334]                   name <- added[[kk]]
[13:34:43.334]                   NAME <- NAMES[[kk]]
[13:34:43.334]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:43.334]                     next
[13:34:43.334]                   args[[name]] <- ""
[13:34:43.334]                 }
[13:34:43.334]                 NAMES <- toupper(removed)
[13:34:43.334]                 for (kk in seq_along(NAMES)) {
[13:34:43.334]                   name <- removed[[kk]]
[13:34:43.334]                   NAME <- NAMES[[kk]]
[13:34:43.334]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:43.334]                     next
[13:34:43.334]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:43.334]                 }
[13:34:43.334]                 if (length(args) > 0) 
[13:34:43.334]                   base::do.call(base::Sys.setenv, args = args)
[13:34:43.334]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:34:43.334]             }
[13:34:43.334]             else {
[13:34:43.334]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:34:43.334]             }
[13:34:43.334]             {
[13:34:43.334]                 if (base::length(...future.futureOptionsAdded) > 
[13:34:43.334]                   0L) {
[13:34:43.334]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:34:43.334]                   base::names(opts) <- ...future.futureOptionsAdded
[13:34:43.334]                   base::options(opts)
[13:34:43.334]                 }
[13:34:43.334]                 {
[13:34:43.334]                   {
[13:34:43.334]                     base::options(mc.cores = ...future.mc.cores.old)
[13:34:43.334]                     NULL
[13:34:43.334]                   }
[13:34:43.334]                   options(future.plan = NULL)
[13:34:43.334]                   if (is.na(NA_character_)) 
[13:34:43.334]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:34:43.334]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:34:43.334]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:34:43.334]                     .init = FALSE)
[13:34:43.334]                 }
[13:34:43.334]             }
[13:34:43.334]         }
[13:34:43.334]     })
[13:34:43.334]     if (TRUE) {
[13:34:43.334]         base::sink(type = "output", split = FALSE)
[13:34:43.334]         if (TRUE) {
[13:34:43.334]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:34:43.334]         }
[13:34:43.334]         else {
[13:34:43.334]             ...future.result["stdout"] <- base::list(NULL)
[13:34:43.334]         }
[13:34:43.334]         base::close(...future.stdout)
[13:34:43.334]         ...future.stdout <- NULL
[13:34:43.334]     }
[13:34:43.334]     ...future.result$conditions <- ...future.conditions
[13:34:43.334]     ...future.result$finished <- base::Sys.time()
[13:34:43.334]     ...future.result
[13:34:43.334] }
[13:34:43.337] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[13:34:43.337] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[13:34:43.337] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[13:34:43.337] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[13:34:43.338] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[13:34:43.338] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[13:34:43.338] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[13:34:43.338] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[13:34:43.339] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[13:34:43.339] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[13:34:43.339] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[13:34:43.339] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[13:34:43.340] MultisessionFuture started
[13:34:43.340] - Launch lazy future ... done
[13:34:43.340] run() for ‘MultisessionFuture’ ... done
[13:34:43.340] Created future:
[13:34:43.340] MultisessionFuture:
[13:34:43.340] Label: ‘future_replicate-2’
[13:34:43.340] Expression:
[13:34:43.340] {
[13:34:43.340]     do.call(function(...) {
[13:34:43.340]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:43.340]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:43.340]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:43.340]             on.exit(options(oopts), add = TRUE)
[13:34:43.340]         }
[13:34:43.340]         {
[13:34:43.340]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:43.340]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:43.340]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:43.340]                   envir = globalenv(), inherits = FALSE)
[13:34:43.340]                 ...future.FUN(...future.X_jj, ...)
[13:34:43.340]             })
[13:34:43.340]         }
[13:34:43.340]     }, args = future.call.arguments)
[13:34:43.340] }
[13:34:43.340] Lazy evaluation: FALSE
[13:34:43.340] Asynchronous evaluation: TRUE
[13:34:43.340] Local evaluation: TRUE
[13:34:43.340] Environment: R_GlobalEnv
[13:34:43.340] Capture standard output: TRUE
[13:34:43.340] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:34:43.340] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:34:43.340] Packages: <none>
[13:34:43.340] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:34:43.340] Resolved: FALSE
[13:34:43.340] Value: <not collected>
[13:34:43.340] Conditions captured: <none>
[13:34:43.340] Early signaling: FALSE
[13:34:43.340] Owner process: b8cf10c3-b112-c8f9-9398-a44000e21728
[13:34:43.340] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:43.351] Chunk #2 of 2 ... DONE
[13:34:43.352] Launching 2 futures (chunks) ... DONE
[13:34:43.352] Resolving 2 futures (chunks) ...
[13:34:43.352] resolve() on list ...
[13:34:43.352]  recursive: 0
[13:34:43.352]  length: 2
[13:34:43.352] 
[13:34:43.352] receiveMessageFromWorker() for ClusterFuture ...
[13:34:43.353] - Validating connection of MultisessionFuture
[13:34:43.353] - received message: FutureResult
[13:34:43.353] - Received FutureResult
[13:34:43.353] - Erased future from FutureRegistry
[13:34:43.353] result() for ClusterFuture ...
[13:34:43.353] - result already collected: FutureResult
[13:34:43.353] result() for ClusterFuture ... done
[13:34:43.353] receiveMessageFromWorker() for ClusterFuture ... done
[13:34:43.353] Future #1
[13:34:43.353] result() for ClusterFuture ...
[13:34:43.354] - result already collected: FutureResult
[13:34:43.354] result() for ClusterFuture ... done
[13:34:43.354] result() for ClusterFuture ...
[13:34:43.354] - result already collected: FutureResult
[13:34:43.354] result() for ClusterFuture ... done
[13:34:43.354] signalConditionsASAP(MultisessionFuture, pos=1) ...
[13:34:43.354] - nx: 2
[13:34:43.354] - relay: TRUE
[13:34:43.354] - stdout: TRUE
[13:34:43.354] - signal: TRUE
[13:34:43.354] - resignal: FALSE
[13:34:43.354] - force: TRUE
[13:34:43.355] - relayed: [n=2] FALSE, FALSE
[13:34:43.355] - queued futures: [n=2] FALSE, FALSE
[13:34:43.355]  - until=1
[13:34:43.355]  - relaying element #1
[13:34:43.355] result() for ClusterFuture ...
[13:34:43.355] - result already collected: FutureResult
[13:34:43.355] result() for ClusterFuture ... done
[13:34:43.355] result() for ClusterFuture ...
[13:34:43.355] - result already collected: FutureResult
[13:34:43.355] result() for ClusterFuture ... done
[13:34:43.355] result() for ClusterFuture ...
[13:34:43.356] - result already collected: FutureResult
[13:34:43.356] result() for ClusterFuture ... done
[13:34:43.356] result() for ClusterFuture ...
[13:34:43.356] - result already collected: FutureResult
[13:34:43.356] result() for ClusterFuture ... done
[13:34:43.356] - relayed: [n=2] TRUE, FALSE
[13:34:43.356] - queued futures: [n=2] TRUE, FALSE
[13:34:43.356] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[13:34:43.356]  length: 1 (resolved future 1)
[13:34:43.384] receiveMessageFromWorker() for ClusterFuture ...
[13:34:43.384] - Validating connection of MultisessionFuture
[13:34:43.384] - received message: FutureResult
[13:34:43.384] - Received FutureResult
[13:34:43.384] - Erased future from FutureRegistry
[13:34:43.385] result() for ClusterFuture ...
[13:34:43.385] - result already collected: FutureResult
[13:34:43.385] result() for ClusterFuture ... done
[13:34:43.385] receiveMessageFromWorker() for ClusterFuture ... done
[13:34:43.385] Future #2
[13:34:43.385] result() for ClusterFuture ...
[13:34:43.385] - result already collected: FutureResult
[13:34:43.385] result() for ClusterFuture ... done
[13:34:43.385] result() for ClusterFuture ...
[13:34:43.385] - result already collected: FutureResult
[13:34:43.386] result() for ClusterFuture ... done
[13:34:43.386] signalConditionsASAP(MultisessionFuture, pos=2) ...
[13:34:43.386] - nx: 2
[13:34:43.386] - relay: TRUE
[13:34:43.386] - stdout: TRUE
[13:34:43.386] - signal: TRUE
[13:34:43.386] - resignal: FALSE
[13:34:43.386] - force: TRUE
[13:34:43.386] - relayed: [n=2] TRUE, FALSE
[13:34:43.386] - queued futures: [n=2] TRUE, FALSE
[13:34:43.386]  - until=2
[13:34:43.387]  - relaying element #2
[13:34:43.387] result() for ClusterFuture ...
[13:34:43.387] - result already collected: FutureResult
[13:34:43.387] result() for ClusterFuture ... done
[13:34:43.387] result() for ClusterFuture ...
[13:34:43.387] - result already collected: FutureResult
[13:34:43.387] result() for ClusterFuture ... done
[13:34:43.387] result() for ClusterFuture ...
[13:34:43.387] - result already collected: FutureResult
[13:34:43.387] result() for ClusterFuture ... done
[13:34:43.387] result() for ClusterFuture ...
[13:34:43.387] - result already collected: FutureResult
[13:34:43.388] result() for ClusterFuture ... done
[13:34:43.388] - relayed: [n=2] TRUE, TRUE
[13:34:43.388] - queued futures: [n=2] TRUE, TRUE
[13:34:43.388] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[13:34:43.388]  length: 0 (resolved future 2)
[13:34:43.388] Relaying remaining futures
[13:34:43.388] signalConditionsASAP(NULL, pos=0) ...
[13:34:43.388] - nx: 2
[13:34:43.388] - relay: TRUE
[13:34:43.388] - stdout: TRUE
[13:34:43.388] - signal: TRUE
[13:34:43.388] - resignal: FALSE
[13:34:43.389] - force: TRUE
[13:34:43.389] - relayed: [n=2] TRUE, TRUE
[13:34:43.389] - queued futures: [n=2] TRUE, TRUE
 - flush all
[13:34:43.389] - relayed: [n=2] TRUE, TRUE
[13:34:43.389] - queued futures: [n=2] TRUE, TRUE
[13:34:43.389] signalConditionsASAP(NULL, pos=0) ... done
[13:34:43.389] resolve() on list ... DONE
[13:34:43.389] result() for ClusterFuture ...
[13:34:43.389] - result already collected: FutureResult
[13:34:43.389] result() for ClusterFuture ... done
[13:34:43.389] result() for ClusterFuture ...
[13:34:43.390] - result already collected: FutureResult
[13:34:43.390] result() for ClusterFuture ... done
[13:34:43.390] result() for ClusterFuture ...
[13:34:43.390] - result already collected: FutureResult
[13:34:43.390] result() for ClusterFuture ... done
[13:34:43.390] result() for ClusterFuture ...
[13:34:43.390] - result already collected: FutureResult
[13:34:43.390] result() for ClusterFuture ... done
[13:34:43.390]  - Number of value chunks collected: 2
[13:34:43.390] Resolving 2 futures (chunks) ... DONE
[13:34:43.390] Reducing values from 2 chunks ...
[13:34:43.391]  - Number of values collected after concatenation: 5
[13:34:43.391]  - Number of values expected: 5
[13:34:43.391] Reducing values from 2 chunks ... DONE
[13:34:43.391] future_lapply() ... DONE
[13:34:43.391] future_lapply() ...
[13:34:43.391] Generating random seeds ...
[13:34:43.391] Generating random seed streams for 5 elements ...
[13:34:43.392] Generating random seed streams for 5 elements ... DONE
[13:34:43.392] Generating random seeds ... DONE
[13:34:43.392] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:34:43.396] Number of chunks: 2
[13:34:43.396] getGlobalsAndPackagesXApply() ...
[13:34:43.396]  - future.globals: TRUE
[13:34:43.396] getGlobalsAndPackages() ...
[13:34:43.396] Searching for globals...
[13:34:43.397] - globals found: [2] ‘FUN’, ‘sample’
[13:34:43.397] Searching for globals ... DONE
[13:34:43.397] Resolving globals: FALSE
[13:34:43.398] The total size of the 1 globals is 616 bytes (616 bytes)
[13:34:43.398] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:34:43.398] - globals: [1] ‘FUN’
[13:34:43.398] 
[13:34:43.398] getGlobalsAndPackages() ... DONE
[13:34:43.398]  - globals found/used: [n=1] ‘FUN’
[13:34:43.399]  - needed namespaces: [n=0] 
[13:34:43.399] Finding globals ... DONE
[13:34:43.399]  - use_args: TRUE
[13:34:43.399]  - Getting '...' globals ...
[13:34:43.399] resolve() on list ...
[13:34:43.399]  recursive: 0
[13:34:43.399]  length: 1
[13:34:43.399]  elements: ‘...’
[13:34:43.400]  length: 0 (resolved future 1)
[13:34:43.400] resolve() on list ... DONE
[13:34:43.400]    - '...' content: [n=0] 
[13:34:43.400] List of 1
[13:34:43.400]  $ ...: list()
[13:34:43.400]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:43.400]  - attr(*, "where")=List of 1
[13:34:43.400]   ..$ ...:<environment: 0x5627c12c9920> 
[13:34:43.400]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:43.400]  - attr(*, "resolved")= logi TRUE
[13:34:43.400]  - attr(*, "total_size")= num NA
[13:34:43.404]  - Getting '...' globals ... DONE
[13:34:43.404] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:34:43.405] List of 2
[13:34:43.405]  $ ...future.FUN:function (...)  
[13:34:43.405]  $ ...          : list()
[13:34:43.405]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:43.405]  - attr(*, "where")=List of 2
[13:34:43.405]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:34:43.405]   ..$ ...          :<environment: 0x5627c12c9920> 
[13:34:43.405]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:43.405]  - attr(*, "resolved")= logi FALSE
[13:34:43.405]  - attr(*, "total_size")= num 616
[13:34:43.407] Packages to be attached in all futures: [n=0] 
[13:34:43.407] getGlobalsAndPackagesXApply() ... DONE
[13:34:43.407] Number of futures (= number of chunks): 2
[13:34:43.408] Launching 2 futures (chunks) ...
[13:34:43.408] Chunk #1 of 2 ...
[13:34:43.408]  - Finding globals in 'X' for chunk #1 ...
[13:34:43.408] getGlobalsAndPackages() ...
[13:34:43.408] Searching for globals...
[13:34:43.408] 
[13:34:43.408] Searching for globals ... DONE
[13:34:43.408] - globals: [0] <none>
[13:34:43.408] getGlobalsAndPackages() ... DONE
[13:34:43.409]    + additional globals found: [n=0] 
[13:34:43.409]    + additional namespaces needed: [n=0] 
[13:34:43.409]  - Finding globals in 'X' for chunk #1 ... DONE
[13:34:43.409]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:34:43.409]  - seeds: [2] <seeds>
[13:34:43.409]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:43.409] getGlobalsAndPackages() ...
[13:34:43.409] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:43.409] Resolving globals: FALSE
[13:34:43.409] Tweak future expression to call with '...' arguments ...
[13:34:43.410] {
[13:34:43.410]     do.call(function(...) {
[13:34:43.410]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:43.410]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:43.410]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:43.410]             on.exit(options(oopts), add = TRUE)
[13:34:43.410]         }
[13:34:43.410]         {
[13:34:43.410]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:43.410]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:43.410]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:43.410]                   envir = globalenv(), inherits = FALSE)
[13:34:43.410]                 ...future.FUN(...future.X_jj, ...)
[13:34:43.410]             })
[13:34:43.410]         }
[13:34:43.410]     }, args = future.call.arguments)
[13:34:43.410] }
[13:34:43.410] Tweak future expression to call with '...' arguments ... DONE
[13:34:43.410] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:43.410] 
[13:34:43.410] getGlobalsAndPackages() ... DONE
[13:34:43.411] run() for ‘Future’ ...
[13:34:43.411] - state: ‘created’
[13:34:43.411] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:34:43.425] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:43.425] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:34:43.425]   - Field: ‘node’
[13:34:43.425]   - Field: ‘label’
[13:34:43.425]   - Field: ‘local’
[13:34:43.425]   - Field: ‘owner’
[13:34:43.425]   - Field: ‘envir’
[13:34:43.425]   - Field: ‘workers’
[13:34:43.425]   - Field: ‘packages’
[13:34:43.425]   - Field: ‘gc’
[13:34:43.426]   - Field: ‘conditions’
[13:34:43.426]   - Field: ‘persistent’
[13:34:43.426]   - Field: ‘expr’
[13:34:43.426]   - Field: ‘uuid’
[13:34:43.426]   - Field: ‘seed’
[13:34:43.426]   - Field: ‘version’
[13:34:43.426]   - Field: ‘result’
[13:34:43.426]   - Field: ‘asynchronous’
[13:34:43.426]   - Field: ‘calls’
[13:34:43.426]   - Field: ‘globals’
[13:34:43.427]   - Field: ‘stdout’
[13:34:43.427]   - Field: ‘earlySignal’
[13:34:43.427]   - Field: ‘lazy’
[13:34:43.427]   - Field: ‘state’
[13:34:43.427] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:34:43.427] - Launch lazy future ...
[13:34:43.427] Packages needed by the future expression (n = 0): <none>
[13:34:43.427] Packages needed by future strategies (n = 0): <none>
[13:34:43.428] {
[13:34:43.428]     {
[13:34:43.428]         {
[13:34:43.428]             ...future.startTime <- base::Sys.time()
[13:34:43.428]             {
[13:34:43.428]                 {
[13:34:43.428]                   {
[13:34:43.428]                     {
[13:34:43.428]                       base::local({
[13:34:43.428]                         has_future <- base::requireNamespace("future", 
[13:34:43.428]                           quietly = TRUE)
[13:34:43.428]                         if (has_future) {
[13:34:43.428]                           ns <- base::getNamespace("future")
[13:34:43.428]                           version <- ns[[".package"]][["version"]]
[13:34:43.428]                           if (is.null(version)) 
[13:34:43.428]                             version <- utils::packageVersion("future")
[13:34:43.428]                         }
[13:34:43.428]                         else {
[13:34:43.428]                           version <- NULL
[13:34:43.428]                         }
[13:34:43.428]                         if (!has_future || version < "1.8.0") {
[13:34:43.428]                           info <- base::c(r_version = base::gsub("R version ", 
[13:34:43.428]                             "", base::R.version$version.string), 
[13:34:43.428]                             platform = base::sprintf("%s (%s-bit)", 
[13:34:43.428]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:34:43.428]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:34:43.428]                               "release", "version")], collapse = " "), 
[13:34:43.428]                             hostname = base::Sys.info()[["nodename"]])
[13:34:43.428]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:34:43.428]                             info)
[13:34:43.428]                           info <- base::paste(info, collapse = "; ")
[13:34:43.428]                           if (!has_future) {
[13:34:43.428]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:34:43.428]                               info)
[13:34:43.428]                           }
[13:34:43.428]                           else {
[13:34:43.428]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:34:43.428]                               info, version)
[13:34:43.428]                           }
[13:34:43.428]                           base::stop(msg)
[13:34:43.428]                         }
[13:34:43.428]                       })
[13:34:43.428]                     }
[13:34:43.428]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:34:43.428]                     base::options(mc.cores = 1L)
[13:34:43.428]                   }
[13:34:43.428]                   ...future.strategy.old <- future::plan("list")
[13:34:43.428]                   options(future.plan = NULL)
[13:34:43.428]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:34:43.428]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:34:43.428]                 }
[13:34:43.428]                 ...future.workdir <- getwd()
[13:34:43.428]             }
[13:34:43.428]             ...future.oldOptions <- base::as.list(base::.Options)
[13:34:43.428]             ...future.oldEnvVars <- base::Sys.getenv()
[13:34:43.428]         }
[13:34:43.428]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:34:43.428]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:34:43.428]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:34:43.428]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:34:43.428]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:34:43.428]             future.stdout.windows.reencode = NULL, width = 80L)
[13:34:43.428]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:34:43.428]             base::names(...future.oldOptions))
[13:34:43.428]     }
[13:34:43.428]     if (FALSE) {
[13:34:43.428]     }
[13:34:43.428]     else {
[13:34:43.428]         if (TRUE) {
[13:34:43.428]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:34:43.428]                 open = "w")
[13:34:43.428]         }
[13:34:43.428]         else {
[13:34:43.428]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:34:43.428]                 windows = "NUL", "/dev/null"), open = "w")
[13:34:43.428]         }
[13:34:43.428]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:34:43.428]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:34:43.428]             base::sink(type = "output", split = FALSE)
[13:34:43.428]             base::close(...future.stdout)
[13:34:43.428]         }, add = TRUE)
[13:34:43.428]     }
[13:34:43.428]     ...future.frame <- base::sys.nframe()
[13:34:43.428]     ...future.conditions <- base::list()
[13:34:43.428]     ...future.rng <- base::globalenv()$.Random.seed
[13:34:43.428]     if (FALSE) {
[13:34:43.428]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:34:43.428]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:34:43.428]     }
[13:34:43.428]     ...future.result <- base::tryCatch({
[13:34:43.428]         base::withCallingHandlers({
[13:34:43.428]             ...future.value <- base::withVisible(base::local({
[13:34:43.428]                 ...future.makeSendCondition <- base::local({
[13:34:43.428]                   sendCondition <- NULL
[13:34:43.428]                   function(frame = 1L) {
[13:34:43.428]                     if (is.function(sendCondition)) 
[13:34:43.428]                       return(sendCondition)
[13:34:43.428]                     ns <- getNamespace("parallel")
[13:34:43.428]                     if (exists("sendData", mode = "function", 
[13:34:43.428]                       envir = ns)) {
[13:34:43.428]                       parallel_sendData <- get("sendData", mode = "function", 
[13:34:43.428]                         envir = ns)
[13:34:43.428]                       envir <- sys.frame(frame)
[13:34:43.428]                       master <- NULL
[13:34:43.428]                       while (!identical(envir, .GlobalEnv) && 
[13:34:43.428]                         !identical(envir, emptyenv())) {
[13:34:43.428]                         if (exists("master", mode = "list", envir = envir, 
[13:34:43.428]                           inherits = FALSE)) {
[13:34:43.428]                           master <- get("master", mode = "list", 
[13:34:43.428]                             envir = envir, inherits = FALSE)
[13:34:43.428]                           if (inherits(master, c("SOCKnode", 
[13:34:43.428]                             "SOCK0node"))) {
[13:34:43.428]                             sendCondition <<- function(cond) {
[13:34:43.428]                               data <- list(type = "VALUE", value = cond, 
[13:34:43.428]                                 success = TRUE)
[13:34:43.428]                               parallel_sendData(master, data)
[13:34:43.428]                             }
[13:34:43.428]                             return(sendCondition)
[13:34:43.428]                           }
[13:34:43.428]                         }
[13:34:43.428]                         frame <- frame + 1L
[13:34:43.428]                         envir <- sys.frame(frame)
[13:34:43.428]                       }
[13:34:43.428]                     }
[13:34:43.428]                     sendCondition <<- function(cond) NULL
[13:34:43.428]                   }
[13:34:43.428]                 })
[13:34:43.428]                 withCallingHandlers({
[13:34:43.428]                   {
[13:34:43.428]                     do.call(function(...) {
[13:34:43.428]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:43.428]                       if (!identical(...future.globals.maxSize.org, 
[13:34:43.428]                         ...future.globals.maxSize)) {
[13:34:43.428]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:43.428]                         on.exit(options(oopts), add = TRUE)
[13:34:43.428]                       }
[13:34:43.428]                       {
[13:34:43.428]                         lapply(seq_along(...future.elements_ii), 
[13:34:43.428]                           FUN = function(jj) {
[13:34:43.428]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:43.428]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:43.428]                               envir = globalenv(), inherits = FALSE)
[13:34:43.428]                             ...future.FUN(...future.X_jj, ...)
[13:34:43.428]                           })
[13:34:43.428]                       }
[13:34:43.428]                     }, args = future.call.arguments)
[13:34:43.428]                   }
[13:34:43.428]                 }, immediateCondition = function(cond) {
[13:34:43.428]                   sendCondition <- ...future.makeSendCondition()
[13:34:43.428]                   sendCondition(cond)
[13:34:43.428]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:43.428]                   {
[13:34:43.428]                     inherits <- base::inherits
[13:34:43.428]                     invokeRestart <- base::invokeRestart
[13:34:43.428]                     is.null <- base::is.null
[13:34:43.428]                     muffled <- FALSE
[13:34:43.428]                     if (inherits(cond, "message")) {
[13:34:43.428]                       muffled <- grepl(pattern, "muffleMessage")
[13:34:43.428]                       if (muffled) 
[13:34:43.428]                         invokeRestart("muffleMessage")
[13:34:43.428]                     }
[13:34:43.428]                     else if (inherits(cond, "warning")) {
[13:34:43.428]                       muffled <- grepl(pattern, "muffleWarning")
[13:34:43.428]                       if (muffled) 
[13:34:43.428]                         invokeRestart("muffleWarning")
[13:34:43.428]                     }
[13:34:43.428]                     else if (inherits(cond, "condition")) {
[13:34:43.428]                       if (!is.null(pattern)) {
[13:34:43.428]                         computeRestarts <- base::computeRestarts
[13:34:43.428]                         grepl <- base::grepl
[13:34:43.428]                         restarts <- computeRestarts(cond)
[13:34:43.428]                         for (restart in restarts) {
[13:34:43.428]                           name <- restart$name
[13:34:43.428]                           if (is.null(name)) 
[13:34:43.428]                             next
[13:34:43.428]                           if (!grepl(pattern, name)) 
[13:34:43.428]                             next
[13:34:43.428]                           invokeRestart(restart)
[13:34:43.428]                           muffled <- TRUE
[13:34:43.428]                           break
[13:34:43.428]                         }
[13:34:43.428]                       }
[13:34:43.428]                     }
[13:34:43.428]                     invisible(muffled)
[13:34:43.428]                   }
[13:34:43.428]                   muffleCondition(cond)
[13:34:43.428]                 })
[13:34:43.428]             }))
[13:34:43.428]             future::FutureResult(value = ...future.value$value, 
[13:34:43.428]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:43.428]                   ...future.rng), globalenv = if (FALSE) 
[13:34:43.428]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:34:43.428]                     ...future.globalenv.names))
[13:34:43.428]                 else NULL, started = ...future.startTime, version = "1.8")
[13:34:43.428]         }, condition = base::local({
[13:34:43.428]             c <- base::c
[13:34:43.428]             inherits <- base::inherits
[13:34:43.428]             invokeRestart <- base::invokeRestart
[13:34:43.428]             length <- base::length
[13:34:43.428]             list <- base::list
[13:34:43.428]             seq.int <- base::seq.int
[13:34:43.428]             signalCondition <- base::signalCondition
[13:34:43.428]             sys.calls <- base::sys.calls
[13:34:43.428]             `[[` <- base::`[[`
[13:34:43.428]             `+` <- base::`+`
[13:34:43.428]             `<<-` <- base::`<<-`
[13:34:43.428]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:34:43.428]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:34:43.428]                   3L)]
[13:34:43.428]             }
[13:34:43.428]             function(cond) {
[13:34:43.428]                 is_error <- inherits(cond, "error")
[13:34:43.428]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:34:43.428]                   NULL)
[13:34:43.428]                 if (is_error) {
[13:34:43.428]                   sessionInformation <- function() {
[13:34:43.428]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:34:43.428]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:34:43.428]                       search = base::search(), system = base::Sys.info())
[13:34:43.428]                   }
[13:34:43.428]                   ...future.conditions[[length(...future.conditions) + 
[13:34:43.428]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:34:43.428]                     cond$call), session = sessionInformation(), 
[13:34:43.428]                     timestamp = base::Sys.time(), signaled = 0L)
[13:34:43.428]                   signalCondition(cond)
[13:34:43.428]                 }
[13:34:43.428]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:34:43.428]                 "immediateCondition"))) {
[13:34:43.428]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:34:43.428]                   ...future.conditions[[length(...future.conditions) + 
[13:34:43.428]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:34:43.428]                   if (TRUE && !signal) {
[13:34:43.428]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:43.428]                     {
[13:34:43.428]                       inherits <- base::inherits
[13:34:43.428]                       invokeRestart <- base::invokeRestart
[13:34:43.428]                       is.null <- base::is.null
[13:34:43.428]                       muffled <- FALSE
[13:34:43.428]                       if (inherits(cond, "message")) {
[13:34:43.428]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:43.428]                         if (muffled) 
[13:34:43.428]                           invokeRestart("muffleMessage")
[13:34:43.428]                       }
[13:34:43.428]                       else if (inherits(cond, "warning")) {
[13:34:43.428]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:43.428]                         if (muffled) 
[13:34:43.428]                           invokeRestart("muffleWarning")
[13:34:43.428]                       }
[13:34:43.428]                       else if (inherits(cond, "condition")) {
[13:34:43.428]                         if (!is.null(pattern)) {
[13:34:43.428]                           computeRestarts <- base::computeRestarts
[13:34:43.428]                           grepl <- base::grepl
[13:34:43.428]                           restarts <- computeRestarts(cond)
[13:34:43.428]                           for (restart in restarts) {
[13:34:43.428]                             name <- restart$name
[13:34:43.428]                             if (is.null(name)) 
[13:34:43.428]                               next
[13:34:43.428]                             if (!grepl(pattern, name)) 
[13:34:43.428]                               next
[13:34:43.428]                             invokeRestart(restart)
[13:34:43.428]                             muffled <- TRUE
[13:34:43.428]                             break
[13:34:43.428]                           }
[13:34:43.428]                         }
[13:34:43.428]                       }
[13:34:43.428]                       invisible(muffled)
[13:34:43.428]                     }
[13:34:43.428]                     muffleCondition(cond, pattern = "^muffle")
[13:34:43.428]                   }
[13:34:43.428]                 }
[13:34:43.428]                 else {
[13:34:43.428]                   if (TRUE) {
[13:34:43.428]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:43.428]                     {
[13:34:43.428]                       inherits <- base::inherits
[13:34:43.428]                       invokeRestart <- base::invokeRestart
[13:34:43.428]                       is.null <- base::is.null
[13:34:43.428]                       muffled <- FALSE
[13:34:43.428]                       if (inherits(cond, "message")) {
[13:34:43.428]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:43.428]                         if (muffled) 
[13:34:43.428]                           invokeRestart("muffleMessage")
[13:34:43.428]                       }
[13:34:43.428]                       else if (inherits(cond, "warning")) {
[13:34:43.428]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:43.428]                         if (muffled) 
[13:34:43.428]                           invokeRestart("muffleWarning")
[13:34:43.428]                       }
[13:34:43.428]                       else if (inherits(cond, "condition")) {
[13:34:43.428]                         if (!is.null(pattern)) {
[13:34:43.428]                           computeRestarts <- base::computeRestarts
[13:34:43.428]                           grepl <- base::grepl
[13:34:43.428]                           restarts <- computeRestarts(cond)
[13:34:43.428]                           for (restart in restarts) {
[13:34:43.428]                             name <- restart$name
[13:34:43.428]                             if (is.null(name)) 
[13:34:43.428]                               next
[13:34:43.428]                             if (!grepl(pattern, name)) 
[13:34:43.428]                               next
[13:34:43.428]                             invokeRestart(restart)
[13:34:43.428]                             muffled <- TRUE
[13:34:43.428]                             break
[13:34:43.428]                           }
[13:34:43.428]                         }
[13:34:43.428]                       }
[13:34:43.428]                       invisible(muffled)
[13:34:43.428]                     }
[13:34:43.428]                     muffleCondition(cond, pattern = "^muffle")
[13:34:43.428]                   }
[13:34:43.428]                 }
[13:34:43.428]             }
[13:34:43.428]         }))
[13:34:43.428]     }, error = function(ex) {
[13:34:43.428]         base::structure(base::list(value = NULL, visible = NULL, 
[13:34:43.428]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:43.428]                 ...future.rng), started = ...future.startTime, 
[13:34:43.428]             finished = Sys.time(), session_uuid = NA_character_, 
[13:34:43.428]             version = "1.8"), class = "FutureResult")
[13:34:43.428]     }, finally = {
[13:34:43.428]         if (!identical(...future.workdir, getwd())) 
[13:34:43.428]             setwd(...future.workdir)
[13:34:43.428]         {
[13:34:43.428]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:34:43.428]                 ...future.oldOptions$nwarnings <- NULL
[13:34:43.428]             }
[13:34:43.428]             base::options(...future.oldOptions)
[13:34:43.428]             if (.Platform$OS.type == "windows") {
[13:34:43.428]                 old_names <- names(...future.oldEnvVars)
[13:34:43.428]                 envs <- base::Sys.getenv()
[13:34:43.428]                 names <- names(envs)
[13:34:43.428]                 common <- intersect(names, old_names)
[13:34:43.428]                 added <- setdiff(names, old_names)
[13:34:43.428]                 removed <- setdiff(old_names, names)
[13:34:43.428]                 changed <- common[...future.oldEnvVars[common] != 
[13:34:43.428]                   envs[common]]
[13:34:43.428]                 NAMES <- toupper(changed)
[13:34:43.428]                 args <- list()
[13:34:43.428]                 for (kk in seq_along(NAMES)) {
[13:34:43.428]                   name <- changed[[kk]]
[13:34:43.428]                   NAME <- NAMES[[kk]]
[13:34:43.428]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:43.428]                     next
[13:34:43.428]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:43.428]                 }
[13:34:43.428]                 NAMES <- toupper(added)
[13:34:43.428]                 for (kk in seq_along(NAMES)) {
[13:34:43.428]                   name <- added[[kk]]
[13:34:43.428]                   NAME <- NAMES[[kk]]
[13:34:43.428]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:43.428]                     next
[13:34:43.428]                   args[[name]] <- ""
[13:34:43.428]                 }
[13:34:43.428]                 NAMES <- toupper(removed)
[13:34:43.428]                 for (kk in seq_along(NAMES)) {
[13:34:43.428]                   name <- removed[[kk]]
[13:34:43.428]                   NAME <- NAMES[[kk]]
[13:34:43.428]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:43.428]                     next
[13:34:43.428]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:43.428]                 }
[13:34:43.428]                 if (length(args) > 0) 
[13:34:43.428]                   base::do.call(base::Sys.setenv, args = args)
[13:34:43.428]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:34:43.428]             }
[13:34:43.428]             else {
[13:34:43.428]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:34:43.428]             }
[13:34:43.428]             {
[13:34:43.428]                 if (base::length(...future.futureOptionsAdded) > 
[13:34:43.428]                   0L) {
[13:34:43.428]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:34:43.428]                   base::names(opts) <- ...future.futureOptionsAdded
[13:34:43.428]                   base::options(opts)
[13:34:43.428]                 }
[13:34:43.428]                 {
[13:34:43.428]                   {
[13:34:43.428]                     base::options(mc.cores = ...future.mc.cores.old)
[13:34:43.428]                     NULL
[13:34:43.428]                   }
[13:34:43.428]                   options(future.plan = NULL)
[13:34:43.428]                   if (is.na(NA_character_)) 
[13:34:43.428]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:34:43.428]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:34:43.428]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:34:43.428]                     .init = FALSE)
[13:34:43.428]                 }
[13:34:43.428]             }
[13:34:43.428]         }
[13:34:43.428]     })
[13:34:43.428]     if (TRUE) {
[13:34:43.428]         base::sink(type = "output", split = FALSE)
[13:34:43.428]         if (TRUE) {
[13:34:43.428]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:34:43.428]         }
[13:34:43.428]         else {
[13:34:43.428]             ...future.result["stdout"] <- base::list(NULL)
[13:34:43.428]         }
[13:34:43.428]         base::close(...future.stdout)
[13:34:43.428]         ...future.stdout <- NULL
[13:34:43.428]     }
[13:34:43.428]     ...future.result$conditions <- ...future.conditions
[13:34:43.428]     ...future.result$finished <- base::Sys.time()
[13:34:43.428]     ...future.result
[13:34:43.428] }
[13:34:43.430] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[13:34:43.431] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[13:34:43.431] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[13:34:43.431] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[13:34:43.431] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[13:34:43.432] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[13:34:43.432] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[13:34:43.432] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[13:34:43.432] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[13:34:43.432] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[13:34:43.433] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[13:34:43.433] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[13:34:43.433] MultisessionFuture started
[13:34:43.433] - Launch lazy future ... done
[13:34:43.433] run() for ‘MultisessionFuture’ ... done
[13:34:43.434] Created future:
[13:34:43.434] MultisessionFuture:
[13:34:43.434] Label: ‘future_replicate-1’
[13:34:43.434] Expression:
[13:34:43.434] {
[13:34:43.434]     do.call(function(...) {
[13:34:43.434]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:43.434]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:43.434]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:43.434]             on.exit(options(oopts), add = TRUE)
[13:34:43.434]         }
[13:34:43.434]         {
[13:34:43.434]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:43.434]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:43.434]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:43.434]                   envir = globalenv(), inherits = FALSE)
[13:34:43.434]                 ...future.FUN(...future.X_jj, ...)
[13:34:43.434]             })
[13:34:43.434]         }
[13:34:43.434]     }, args = future.call.arguments)
[13:34:43.434] }
[13:34:43.434] Lazy evaluation: FALSE
[13:34:43.434] Asynchronous evaluation: TRUE
[13:34:43.434] Local evaluation: TRUE
[13:34:43.434] Environment: R_GlobalEnv
[13:34:43.434] Capture standard output: TRUE
[13:34:43.434] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:34:43.434] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:34:43.434] Packages: <none>
[13:34:43.434] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:34:43.434] Resolved: FALSE
[13:34:43.434] Value: <not collected>
[13:34:43.434] Conditions captured: <none>
[13:34:43.434] Early signaling: FALSE
[13:34:43.434] Owner process: b8cf10c3-b112-c8f9-9398-a44000e21728
[13:34:43.434] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:43.445] Chunk #1 of 2 ... DONE
[13:34:43.445] Chunk #2 of 2 ...
[13:34:43.445]  - Finding globals in 'X' for chunk #2 ...
[13:34:43.445] getGlobalsAndPackages() ...
[13:34:43.446] Searching for globals...
[13:34:43.446] 
[13:34:43.446] Searching for globals ... DONE
[13:34:43.446] - globals: [0] <none>
[13:34:43.446] getGlobalsAndPackages() ... DONE
[13:34:43.446]    + additional globals found: [n=0] 
[13:34:43.446]    + additional namespaces needed: [n=0] 
[13:34:43.446]  - Finding globals in 'X' for chunk #2 ... DONE
[13:34:43.447]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:34:43.447]  - seeds: [3] <seeds>
[13:34:43.447]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:43.447] getGlobalsAndPackages() ...
[13:34:43.447] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:43.447] Resolving globals: FALSE
[13:34:43.447] Tweak future expression to call with '...' arguments ...
[13:34:43.447] {
[13:34:43.447]     do.call(function(...) {
[13:34:43.447]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:43.447]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:43.447]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:43.447]             on.exit(options(oopts), add = TRUE)
[13:34:43.447]         }
[13:34:43.447]         {
[13:34:43.447]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:43.447]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:43.447]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:43.447]                   envir = globalenv(), inherits = FALSE)
[13:34:43.447]                 ...future.FUN(...future.X_jj, ...)
[13:34:43.447]             })
[13:34:43.447]         }
[13:34:43.447]     }, args = future.call.arguments)
[13:34:43.447] }
[13:34:43.448] Tweak future expression to call with '...' arguments ... DONE
[13:34:43.448] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:43.448] 
[13:34:43.448] getGlobalsAndPackages() ... DONE
[13:34:43.448] run() for ‘Future’ ...
[13:34:43.448] - state: ‘created’
[13:34:43.449] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:34:43.463] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:43.464] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:34:43.464]   - Field: ‘node’
[13:34:43.464]   - Field: ‘label’
[13:34:43.464]   - Field: ‘local’
[13:34:43.464]   - Field: ‘owner’
[13:34:43.464]   - Field: ‘envir’
[13:34:43.464]   - Field: ‘workers’
[13:34:43.464]   - Field: ‘packages’
[13:34:43.464]   - Field: ‘gc’
[13:34:43.464]   - Field: ‘conditions’
[13:34:43.465]   - Field: ‘persistent’
[13:34:43.465]   - Field: ‘expr’
[13:34:43.465]   - Field: ‘uuid’
[13:34:43.465]   - Field: ‘seed’
[13:34:43.465]   - Field: ‘version’
[13:34:43.465]   - Field: ‘result’
[13:34:43.465]   - Field: ‘asynchronous’
[13:34:43.465]   - Field: ‘calls’
[13:34:43.465]   - Field: ‘globals’
[13:34:43.465]   - Field: ‘stdout’
[13:34:43.465]   - Field: ‘earlySignal’
[13:34:43.466]   - Field: ‘lazy’
[13:34:43.466]   - Field: ‘state’
[13:34:43.466] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:34:43.466] - Launch lazy future ...
[13:34:43.466] Packages needed by the future expression (n = 0): <none>
[13:34:43.466] Packages needed by future strategies (n = 0): <none>
[13:34:43.467] {
[13:34:43.467]     {
[13:34:43.467]         {
[13:34:43.467]             ...future.startTime <- base::Sys.time()
[13:34:43.467]             {
[13:34:43.467]                 {
[13:34:43.467]                   {
[13:34:43.467]                     {
[13:34:43.467]                       base::local({
[13:34:43.467]                         has_future <- base::requireNamespace("future", 
[13:34:43.467]                           quietly = TRUE)
[13:34:43.467]                         if (has_future) {
[13:34:43.467]                           ns <- base::getNamespace("future")
[13:34:43.467]                           version <- ns[[".package"]][["version"]]
[13:34:43.467]                           if (is.null(version)) 
[13:34:43.467]                             version <- utils::packageVersion("future")
[13:34:43.467]                         }
[13:34:43.467]                         else {
[13:34:43.467]                           version <- NULL
[13:34:43.467]                         }
[13:34:43.467]                         if (!has_future || version < "1.8.0") {
[13:34:43.467]                           info <- base::c(r_version = base::gsub("R version ", 
[13:34:43.467]                             "", base::R.version$version.string), 
[13:34:43.467]                             platform = base::sprintf("%s (%s-bit)", 
[13:34:43.467]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:34:43.467]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:34:43.467]                               "release", "version")], collapse = " "), 
[13:34:43.467]                             hostname = base::Sys.info()[["nodename"]])
[13:34:43.467]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:34:43.467]                             info)
[13:34:43.467]                           info <- base::paste(info, collapse = "; ")
[13:34:43.467]                           if (!has_future) {
[13:34:43.467]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:34:43.467]                               info)
[13:34:43.467]                           }
[13:34:43.467]                           else {
[13:34:43.467]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:34:43.467]                               info, version)
[13:34:43.467]                           }
[13:34:43.467]                           base::stop(msg)
[13:34:43.467]                         }
[13:34:43.467]                       })
[13:34:43.467]                     }
[13:34:43.467]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:34:43.467]                     base::options(mc.cores = 1L)
[13:34:43.467]                   }
[13:34:43.467]                   ...future.strategy.old <- future::plan("list")
[13:34:43.467]                   options(future.plan = NULL)
[13:34:43.467]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:34:43.467]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:34:43.467]                 }
[13:34:43.467]                 ...future.workdir <- getwd()
[13:34:43.467]             }
[13:34:43.467]             ...future.oldOptions <- base::as.list(base::.Options)
[13:34:43.467]             ...future.oldEnvVars <- base::Sys.getenv()
[13:34:43.467]         }
[13:34:43.467]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:34:43.467]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:34:43.467]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:34:43.467]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:34:43.467]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:34:43.467]             future.stdout.windows.reencode = NULL, width = 80L)
[13:34:43.467]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:34:43.467]             base::names(...future.oldOptions))
[13:34:43.467]     }
[13:34:43.467]     if (FALSE) {
[13:34:43.467]     }
[13:34:43.467]     else {
[13:34:43.467]         if (TRUE) {
[13:34:43.467]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:34:43.467]                 open = "w")
[13:34:43.467]         }
[13:34:43.467]         else {
[13:34:43.467]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:34:43.467]                 windows = "NUL", "/dev/null"), open = "w")
[13:34:43.467]         }
[13:34:43.467]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:34:43.467]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:34:43.467]             base::sink(type = "output", split = FALSE)
[13:34:43.467]             base::close(...future.stdout)
[13:34:43.467]         }, add = TRUE)
[13:34:43.467]     }
[13:34:43.467]     ...future.frame <- base::sys.nframe()
[13:34:43.467]     ...future.conditions <- base::list()
[13:34:43.467]     ...future.rng <- base::globalenv()$.Random.seed
[13:34:43.467]     if (FALSE) {
[13:34:43.467]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:34:43.467]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:34:43.467]     }
[13:34:43.467]     ...future.result <- base::tryCatch({
[13:34:43.467]         base::withCallingHandlers({
[13:34:43.467]             ...future.value <- base::withVisible(base::local({
[13:34:43.467]                 ...future.makeSendCondition <- base::local({
[13:34:43.467]                   sendCondition <- NULL
[13:34:43.467]                   function(frame = 1L) {
[13:34:43.467]                     if (is.function(sendCondition)) 
[13:34:43.467]                       return(sendCondition)
[13:34:43.467]                     ns <- getNamespace("parallel")
[13:34:43.467]                     if (exists("sendData", mode = "function", 
[13:34:43.467]                       envir = ns)) {
[13:34:43.467]                       parallel_sendData <- get("sendData", mode = "function", 
[13:34:43.467]                         envir = ns)
[13:34:43.467]                       envir <- sys.frame(frame)
[13:34:43.467]                       master <- NULL
[13:34:43.467]                       while (!identical(envir, .GlobalEnv) && 
[13:34:43.467]                         !identical(envir, emptyenv())) {
[13:34:43.467]                         if (exists("master", mode = "list", envir = envir, 
[13:34:43.467]                           inherits = FALSE)) {
[13:34:43.467]                           master <- get("master", mode = "list", 
[13:34:43.467]                             envir = envir, inherits = FALSE)
[13:34:43.467]                           if (inherits(master, c("SOCKnode", 
[13:34:43.467]                             "SOCK0node"))) {
[13:34:43.467]                             sendCondition <<- function(cond) {
[13:34:43.467]                               data <- list(type = "VALUE", value = cond, 
[13:34:43.467]                                 success = TRUE)
[13:34:43.467]                               parallel_sendData(master, data)
[13:34:43.467]                             }
[13:34:43.467]                             return(sendCondition)
[13:34:43.467]                           }
[13:34:43.467]                         }
[13:34:43.467]                         frame <- frame + 1L
[13:34:43.467]                         envir <- sys.frame(frame)
[13:34:43.467]                       }
[13:34:43.467]                     }
[13:34:43.467]                     sendCondition <<- function(cond) NULL
[13:34:43.467]                   }
[13:34:43.467]                 })
[13:34:43.467]                 withCallingHandlers({
[13:34:43.467]                   {
[13:34:43.467]                     do.call(function(...) {
[13:34:43.467]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:43.467]                       if (!identical(...future.globals.maxSize.org, 
[13:34:43.467]                         ...future.globals.maxSize)) {
[13:34:43.467]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:43.467]                         on.exit(options(oopts), add = TRUE)
[13:34:43.467]                       }
[13:34:43.467]                       {
[13:34:43.467]                         lapply(seq_along(...future.elements_ii), 
[13:34:43.467]                           FUN = function(jj) {
[13:34:43.467]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:43.467]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:43.467]                               envir = globalenv(), inherits = FALSE)
[13:34:43.467]                             ...future.FUN(...future.X_jj, ...)
[13:34:43.467]                           })
[13:34:43.467]                       }
[13:34:43.467]                     }, args = future.call.arguments)
[13:34:43.467]                   }
[13:34:43.467]                 }, immediateCondition = function(cond) {
[13:34:43.467]                   sendCondition <- ...future.makeSendCondition()
[13:34:43.467]                   sendCondition(cond)
[13:34:43.467]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:43.467]                   {
[13:34:43.467]                     inherits <- base::inherits
[13:34:43.467]                     invokeRestart <- base::invokeRestart
[13:34:43.467]                     is.null <- base::is.null
[13:34:43.467]                     muffled <- FALSE
[13:34:43.467]                     if (inherits(cond, "message")) {
[13:34:43.467]                       muffled <- grepl(pattern, "muffleMessage")
[13:34:43.467]                       if (muffled) 
[13:34:43.467]                         invokeRestart("muffleMessage")
[13:34:43.467]                     }
[13:34:43.467]                     else if (inherits(cond, "warning")) {
[13:34:43.467]                       muffled <- grepl(pattern, "muffleWarning")
[13:34:43.467]                       if (muffled) 
[13:34:43.467]                         invokeRestart("muffleWarning")
[13:34:43.467]                     }
[13:34:43.467]                     else if (inherits(cond, "condition")) {
[13:34:43.467]                       if (!is.null(pattern)) {
[13:34:43.467]                         computeRestarts <- base::computeRestarts
[13:34:43.467]                         grepl <- base::grepl
[13:34:43.467]                         restarts <- computeRestarts(cond)
[13:34:43.467]                         for (restart in restarts) {
[13:34:43.467]                           name <- restart$name
[13:34:43.467]                           if (is.null(name)) 
[13:34:43.467]                             next
[13:34:43.467]                           if (!grepl(pattern, name)) 
[13:34:43.467]                             next
[13:34:43.467]                           invokeRestart(restart)
[13:34:43.467]                           muffled <- TRUE
[13:34:43.467]                           break
[13:34:43.467]                         }
[13:34:43.467]                       }
[13:34:43.467]                     }
[13:34:43.467]                     invisible(muffled)
[13:34:43.467]                   }
[13:34:43.467]                   muffleCondition(cond)
[13:34:43.467]                 })
[13:34:43.467]             }))
[13:34:43.467]             future::FutureResult(value = ...future.value$value, 
[13:34:43.467]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:43.467]                   ...future.rng), globalenv = if (FALSE) 
[13:34:43.467]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:34:43.467]                     ...future.globalenv.names))
[13:34:43.467]                 else NULL, started = ...future.startTime, version = "1.8")
[13:34:43.467]         }, condition = base::local({
[13:34:43.467]             c <- base::c
[13:34:43.467]             inherits <- base::inherits
[13:34:43.467]             invokeRestart <- base::invokeRestart
[13:34:43.467]             length <- base::length
[13:34:43.467]             list <- base::list
[13:34:43.467]             seq.int <- base::seq.int
[13:34:43.467]             signalCondition <- base::signalCondition
[13:34:43.467]             sys.calls <- base::sys.calls
[13:34:43.467]             `[[` <- base::`[[`
[13:34:43.467]             `+` <- base::`+`
[13:34:43.467]             `<<-` <- base::`<<-`
[13:34:43.467]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:34:43.467]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:34:43.467]                   3L)]
[13:34:43.467]             }
[13:34:43.467]             function(cond) {
[13:34:43.467]                 is_error <- inherits(cond, "error")
[13:34:43.467]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:34:43.467]                   NULL)
[13:34:43.467]                 if (is_error) {
[13:34:43.467]                   sessionInformation <- function() {
[13:34:43.467]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:34:43.467]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:34:43.467]                       search = base::search(), system = base::Sys.info())
[13:34:43.467]                   }
[13:34:43.467]                   ...future.conditions[[length(...future.conditions) + 
[13:34:43.467]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:34:43.467]                     cond$call), session = sessionInformation(), 
[13:34:43.467]                     timestamp = base::Sys.time(), signaled = 0L)
[13:34:43.467]                   signalCondition(cond)
[13:34:43.467]                 }
[13:34:43.467]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:34:43.467]                 "immediateCondition"))) {
[13:34:43.467]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:34:43.467]                   ...future.conditions[[length(...future.conditions) + 
[13:34:43.467]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:34:43.467]                   if (TRUE && !signal) {
[13:34:43.467]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:43.467]                     {
[13:34:43.467]                       inherits <- base::inherits
[13:34:43.467]                       invokeRestart <- base::invokeRestart
[13:34:43.467]                       is.null <- base::is.null
[13:34:43.467]                       muffled <- FALSE
[13:34:43.467]                       if (inherits(cond, "message")) {
[13:34:43.467]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:43.467]                         if (muffled) 
[13:34:43.467]                           invokeRestart("muffleMessage")
[13:34:43.467]                       }
[13:34:43.467]                       else if (inherits(cond, "warning")) {
[13:34:43.467]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:43.467]                         if (muffled) 
[13:34:43.467]                           invokeRestart("muffleWarning")
[13:34:43.467]                       }
[13:34:43.467]                       else if (inherits(cond, "condition")) {
[13:34:43.467]                         if (!is.null(pattern)) {
[13:34:43.467]                           computeRestarts <- base::computeRestarts
[13:34:43.467]                           grepl <- base::grepl
[13:34:43.467]                           restarts <- computeRestarts(cond)
[13:34:43.467]                           for (restart in restarts) {
[13:34:43.467]                             name <- restart$name
[13:34:43.467]                             if (is.null(name)) 
[13:34:43.467]                               next
[13:34:43.467]                             if (!grepl(pattern, name)) 
[13:34:43.467]                               next
[13:34:43.467]                             invokeRestart(restart)
[13:34:43.467]                             muffled <- TRUE
[13:34:43.467]                             break
[13:34:43.467]                           }
[13:34:43.467]                         }
[13:34:43.467]                       }
[13:34:43.467]                       invisible(muffled)
[13:34:43.467]                     }
[13:34:43.467]                     muffleCondition(cond, pattern = "^muffle")
[13:34:43.467]                   }
[13:34:43.467]                 }
[13:34:43.467]                 else {
[13:34:43.467]                   if (TRUE) {
[13:34:43.467]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:43.467]                     {
[13:34:43.467]                       inherits <- base::inherits
[13:34:43.467]                       invokeRestart <- base::invokeRestart
[13:34:43.467]                       is.null <- base::is.null
[13:34:43.467]                       muffled <- FALSE
[13:34:43.467]                       if (inherits(cond, "message")) {
[13:34:43.467]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:43.467]                         if (muffled) 
[13:34:43.467]                           invokeRestart("muffleMessage")
[13:34:43.467]                       }
[13:34:43.467]                       else if (inherits(cond, "warning")) {
[13:34:43.467]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:43.467]                         if (muffled) 
[13:34:43.467]                           invokeRestart("muffleWarning")
[13:34:43.467]                       }
[13:34:43.467]                       else if (inherits(cond, "condition")) {
[13:34:43.467]                         if (!is.null(pattern)) {
[13:34:43.467]                           computeRestarts <- base::computeRestarts
[13:34:43.467]                           grepl <- base::grepl
[13:34:43.467]                           restarts <- computeRestarts(cond)
[13:34:43.467]                           for (restart in restarts) {
[13:34:43.467]                             name <- restart$name
[13:34:43.467]                             if (is.null(name)) 
[13:34:43.467]                               next
[13:34:43.467]                             if (!grepl(pattern, name)) 
[13:34:43.467]                               next
[13:34:43.467]                             invokeRestart(restart)
[13:34:43.467]                             muffled <- TRUE
[13:34:43.467]                             break
[13:34:43.467]                           }
[13:34:43.467]                         }
[13:34:43.467]                       }
[13:34:43.467]                       invisible(muffled)
[13:34:43.467]                     }
[13:34:43.467]                     muffleCondition(cond, pattern = "^muffle")
[13:34:43.467]                   }
[13:34:43.467]                 }
[13:34:43.467]             }
[13:34:43.467]         }))
[13:34:43.467]     }, error = function(ex) {
[13:34:43.467]         base::structure(base::list(value = NULL, visible = NULL, 
[13:34:43.467]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:43.467]                 ...future.rng), started = ...future.startTime, 
[13:34:43.467]             finished = Sys.time(), session_uuid = NA_character_, 
[13:34:43.467]             version = "1.8"), class = "FutureResult")
[13:34:43.467]     }, finally = {
[13:34:43.467]         if (!identical(...future.workdir, getwd())) 
[13:34:43.467]             setwd(...future.workdir)
[13:34:43.467]         {
[13:34:43.467]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:34:43.467]                 ...future.oldOptions$nwarnings <- NULL
[13:34:43.467]             }
[13:34:43.467]             base::options(...future.oldOptions)
[13:34:43.467]             if (.Platform$OS.type == "windows") {
[13:34:43.467]                 old_names <- names(...future.oldEnvVars)
[13:34:43.467]                 envs <- base::Sys.getenv()
[13:34:43.467]                 names <- names(envs)
[13:34:43.467]                 common <- intersect(names, old_names)
[13:34:43.467]                 added <- setdiff(names, old_names)
[13:34:43.467]                 removed <- setdiff(old_names, names)
[13:34:43.467]                 changed <- common[...future.oldEnvVars[common] != 
[13:34:43.467]                   envs[common]]
[13:34:43.467]                 NAMES <- toupper(changed)
[13:34:43.467]                 args <- list()
[13:34:43.467]                 for (kk in seq_along(NAMES)) {
[13:34:43.467]                   name <- changed[[kk]]
[13:34:43.467]                   NAME <- NAMES[[kk]]
[13:34:43.467]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:43.467]                     next
[13:34:43.467]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:43.467]                 }
[13:34:43.467]                 NAMES <- toupper(added)
[13:34:43.467]                 for (kk in seq_along(NAMES)) {
[13:34:43.467]                   name <- added[[kk]]
[13:34:43.467]                   NAME <- NAMES[[kk]]
[13:34:43.467]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:43.467]                     next
[13:34:43.467]                   args[[name]] <- ""
[13:34:43.467]                 }
[13:34:43.467]                 NAMES <- toupper(removed)
[13:34:43.467]                 for (kk in seq_along(NAMES)) {
[13:34:43.467]                   name <- removed[[kk]]
[13:34:43.467]                   NAME <- NAMES[[kk]]
[13:34:43.467]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:43.467]                     next
[13:34:43.467]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:43.467]                 }
[13:34:43.467]                 if (length(args) > 0) 
[13:34:43.467]                   base::do.call(base::Sys.setenv, args = args)
[13:34:43.467]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:34:43.467]             }
[13:34:43.467]             else {
[13:34:43.467]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:34:43.467]             }
[13:34:43.467]             {
[13:34:43.467]                 if (base::length(...future.futureOptionsAdded) > 
[13:34:43.467]                   0L) {
[13:34:43.467]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:34:43.467]                   base::names(opts) <- ...future.futureOptionsAdded
[13:34:43.467]                   base::options(opts)
[13:34:43.467]                 }
[13:34:43.467]                 {
[13:34:43.467]                   {
[13:34:43.467]                     base::options(mc.cores = ...future.mc.cores.old)
[13:34:43.467]                     NULL
[13:34:43.467]                   }
[13:34:43.467]                   options(future.plan = NULL)
[13:34:43.467]                   if (is.na(NA_character_)) 
[13:34:43.467]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:34:43.467]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:34:43.467]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:34:43.467]                     .init = FALSE)
[13:34:43.467]                 }
[13:34:43.467]             }
[13:34:43.467]         }
[13:34:43.467]     })
[13:34:43.467]     if (TRUE) {
[13:34:43.467]         base::sink(type = "output", split = FALSE)
[13:34:43.467]         if (TRUE) {
[13:34:43.467]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:34:43.467]         }
[13:34:43.467]         else {
[13:34:43.467]             ...future.result["stdout"] <- base::list(NULL)
[13:34:43.467]         }
[13:34:43.467]         base::close(...future.stdout)
[13:34:43.467]         ...future.stdout <- NULL
[13:34:43.467]     }
[13:34:43.467]     ...future.result$conditions <- ...future.conditions
[13:34:43.467]     ...future.result$finished <- base::Sys.time()
[13:34:43.467]     ...future.result
[13:34:43.467] }
[13:34:43.469] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[13:34:43.469] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[13:34:43.470] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[13:34:43.470] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[13:34:43.470] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[13:34:43.471] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[13:34:43.471] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[13:34:43.471] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[13:34:43.471] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[13:34:43.472] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[13:34:43.472] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[13:34:43.472] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[13:34:43.473] MultisessionFuture started
[13:34:43.473] - Launch lazy future ... done
[13:34:43.473] run() for ‘MultisessionFuture’ ... done
[13:34:43.473] Created future:
[13:34:43.473] MultisessionFuture:
[13:34:43.473] Label: ‘future_replicate-2’
[13:34:43.473] Expression:
[13:34:43.473] {
[13:34:43.473]     do.call(function(...) {
[13:34:43.473]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:43.473]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:43.473]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:43.473]             on.exit(options(oopts), add = TRUE)
[13:34:43.473]         }
[13:34:43.473]         {
[13:34:43.473]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:43.473]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:43.473]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:43.473]                   envir = globalenv(), inherits = FALSE)
[13:34:43.473]                 ...future.FUN(...future.X_jj, ...)
[13:34:43.473]             })
[13:34:43.473]         }
[13:34:43.473]     }, args = future.call.arguments)
[13:34:43.473] }
[13:34:43.473] Lazy evaluation: FALSE
[13:34:43.473] Asynchronous evaluation: TRUE
[13:34:43.473] Local evaluation: TRUE
[13:34:43.473] Environment: R_GlobalEnv
[13:34:43.473] Capture standard output: TRUE
[13:34:43.473] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:34:43.473] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:34:43.473] Packages: <none>
[13:34:43.473] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:34:43.473] Resolved: FALSE
[13:34:43.473] Value: <not collected>
[13:34:43.473] Conditions captured: <none>
[13:34:43.473] Early signaling: FALSE
[13:34:43.473] Owner process: b8cf10c3-b112-c8f9-9398-a44000e21728
[13:34:43.473] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:43.485] Chunk #2 of 2 ... DONE
[13:34:43.485] Launching 2 futures (chunks) ... DONE
[13:34:43.485] Resolving 2 futures (chunks) ...
[13:34:43.485] resolve() on list ...
[13:34:43.485]  recursive: 0
[13:34:43.485]  length: 2
[13:34:43.485] 
[13:34:43.486] receiveMessageFromWorker() for ClusterFuture ...
[13:34:43.486] - Validating connection of MultisessionFuture
[13:34:43.486] - received message: FutureResult
[13:34:43.486] - Received FutureResult
[13:34:43.486] - Erased future from FutureRegistry
[13:34:43.486] result() for ClusterFuture ...
[13:34:43.486] - result already collected: FutureResult
[13:34:43.486] result() for ClusterFuture ... done
[13:34:43.487] receiveMessageFromWorker() for ClusterFuture ... done
[13:34:43.487] Future #1
[13:34:43.487] result() for ClusterFuture ...
[13:34:43.487] - result already collected: FutureResult
[13:34:43.487] result() for ClusterFuture ... done
[13:34:43.487] result() for ClusterFuture ...
[13:34:43.487] - result already collected: FutureResult
[13:34:43.487] result() for ClusterFuture ... done
[13:34:43.487] signalConditionsASAP(MultisessionFuture, pos=1) ...
[13:34:43.487] - nx: 2
[13:34:43.487] - relay: TRUE
[13:34:43.487] - stdout: TRUE
[13:34:43.488] - signal: TRUE
[13:34:43.488] - resignal: FALSE
[13:34:43.488] - force: TRUE
[13:34:43.488] - relayed: [n=2] FALSE, FALSE
[13:34:43.488] - queued futures: [n=2] FALSE, FALSE
[13:34:43.488]  - until=1
[13:34:43.488]  - relaying element #1
[13:34:43.488] result() for ClusterFuture ...
[13:34:43.488] - result already collected: FutureResult
[13:34:43.488] result() for ClusterFuture ... done
[13:34:43.488] result() for ClusterFuture ...
[13:34:43.488] - result already collected: FutureResult
[13:34:43.489] result() for ClusterFuture ... done
[13:34:43.489] result() for ClusterFuture ...
[13:34:43.489] - result already collected: FutureResult
[13:34:43.489] result() for ClusterFuture ... done
[13:34:43.489] result() for ClusterFuture ...
[13:34:43.489] - result already collected: FutureResult
[13:34:43.489] result() for ClusterFuture ... done
[13:34:43.489] - relayed: [n=2] TRUE, FALSE
[13:34:43.489] - queued futures: [n=2] TRUE, FALSE
[13:34:43.489] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[13:34:43.489]  length: 1 (resolved future 1)
[13:34:43.516] receiveMessageFromWorker() for ClusterFuture ...
[13:34:43.516] - Validating connection of MultisessionFuture
[13:34:43.516] - received message: FutureResult
[13:34:43.516] - Received FutureResult
[13:34:43.516] - Erased future from FutureRegistry
[13:34:43.516] result() for ClusterFuture ...
[13:34:43.516] - result already collected: FutureResult
[13:34:43.517] result() for ClusterFuture ... done
[13:34:43.517] receiveMessageFromWorker() for ClusterFuture ... done
[13:34:43.517] Future #2
[13:34:43.517] result() for ClusterFuture ...
[13:34:43.517] - result already collected: FutureResult
[13:34:43.517] result() for ClusterFuture ... done
[13:34:43.517] result() for ClusterFuture ...
[13:34:43.517] - result already collected: FutureResult
[13:34:43.517] result() for ClusterFuture ... done
[13:34:43.517] signalConditionsASAP(MultisessionFuture, pos=2) ...
[13:34:43.517] - nx: 2
[13:34:43.518] - relay: TRUE
[13:34:43.518] - stdout: TRUE
[13:34:43.518] - signal: TRUE
[13:34:43.518] - resignal: FALSE
[13:34:43.518] - force: TRUE
[13:34:43.518] - relayed: [n=2] TRUE, FALSE
[13:34:43.518] - queued futures: [n=2] TRUE, FALSE
[13:34:43.518]  - until=2
[13:34:43.518]  - relaying element #2
[13:34:43.518] result() for ClusterFuture ...
[13:34:43.518] - result already collected: FutureResult
[13:34:43.518] result() for ClusterFuture ... done
[13:34:43.519] result() for ClusterFuture ...
[13:34:43.519] - result already collected: FutureResult
[13:34:43.519] result() for ClusterFuture ... done
[13:34:43.519] result() for ClusterFuture ...
[13:34:43.519] - result already collected: FutureResult
[13:34:43.519] result() for ClusterFuture ... done
[13:34:43.519] result() for ClusterFuture ...
[13:34:43.519] - result already collected: FutureResult
[13:34:43.519] result() for ClusterFuture ... done
[13:34:43.519] - relayed: [n=2] TRUE, TRUE
[13:34:43.519] - queued futures: [n=2] TRUE, TRUE
[13:34:43.520] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[13:34:43.520]  length: 0 (resolved future 2)
[13:34:43.520] Relaying remaining futures
[13:34:43.520] signalConditionsASAP(NULL, pos=0) ...
[13:34:43.520] - nx: 2
[13:34:43.520] - relay: TRUE
[13:34:43.520] - stdout: TRUE
[13:34:43.520] - signal: TRUE
[13:34:43.520] - resignal: FALSE
[13:34:43.520] - force: TRUE
[13:34:43.520] - relayed: [n=2] TRUE, TRUE
[13:34:43.520] - queued futures: [n=2] TRUE, TRUE
 - flush all
[13:34:43.521] - relayed: [n=2] TRUE, TRUE
[13:34:43.521] - queued futures: [n=2] TRUE, TRUE
[13:34:43.521] signalConditionsASAP(NULL, pos=0) ... done
[13:34:43.521] resolve() on list ... DONE
[13:34:43.521] result() for ClusterFuture ...
[13:34:43.521] - result already collected: FutureResult
[13:34:43.521] result() for ClusterFuture ... done
[13:34:43.521] result() for ClusterFuture ...
[13:34:43.521] - result already collected: FutureResult
[13:34:43.521] result() for ClusterFuture ... done
[13:34:43.521] result() for ClusterFuture ...
[13:34:43.522] - result already collected: FutureResult
[13:34:43.522] result() for ClusterFuture ... done
[13:34:43.522] result() for ClusterFuture ...
[13:34:43.522] - result already collected: FutureResult
[13:34:43.522] result() for ClusterFuture ... done
[13:34:43.522]  - Number of value chunks collected: 2
[13:34:43.522] Resolving 2 futures (chunks) ... DONE
[13:34:43.522] Reducing values from 2 chunks ...
[13:34:43.522]  - Number of values collected after concatenation: 5
[13:34:43.522]  - Number of values expected: 5
[13:34:43.522] Reducing values from 2 chunks ... DONE
[13:34:43.523] future_lapply() ... DONE
[13:34:43.523] future_lapply() ...
[13:34:43.523] Generating random seeds ...
[13:34:43.523] Generating random seed streams for 5 elements ...
[13:34:43.523] Generating random seed streams for 5 elements ... DONE
[13:34:43.524] Generating random seeds ... DONE
[13:34:43.524] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:34:43.527] Number of chunks: 2
[13:34:43.527] getGlobalsAndPackagesXApply() ...
[13:34:43.528]  - future.globals: TRUE
[13:34:43.528] getGlobalsAndPackages() ...
[13:34:43.528] Searching for globals...
[13:34:43.529] - globals found: [2] ‘FUN’, ‘sample’
[13:34:43.529] Searching for globals ... DONE
[13:34:43.529] Resolving globals: FALSE
[13:34:43.529] The total size of the 1 globals is 616 bytes (616 bytes)
[13:34:43.530] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:34:43.530] - globals: [1] ‘FUN’
[13:34:43.530] 
[13:34:43.530] getGlobalsAndPackages() ... DONE
[13:34:43.530]  - globals found/used: [n=1] ‘FUN’
[13:34:43.530]  - needed namespaces: [n=0] 
[13:34:43.530] Finding globals ... DONE
[13:34:43.530]  - use_args: TRUE
[13:34:43.530]  - Getting '...' globals ...
[13:34:43.531] resolve() on list ...
[13:34:43.531]  recursive: 0
[13:34:43.531]  length: 1
[13:34:43.531]  elements: ‘...’
[13:34:43.531]  length: 0 (resolved future 1)
[13:34:43.531] resolve() on list ... DONE
[13:34:43.531]    - '...' content: [n=0] 
[13:34:43.531] List of 1
[13:34:43.531]  $ ...: list()
[13:34:43.531]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:43.531]  - attr(*, "where")=List of 1
[13:34:43.531]   ..$ ...:<environment: 0x5627c0858df0> 
[13:34:43.531]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:43.531]  - attr(*, "resolved")= logi TRUE
[13:34:43.531]  - attr(*, "total_size")= num NA
[13:34:43.534]  - Getting '...' globals ... DONE
[13:34:43.534] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:34:43.534] List of 2
[13:34:43.534]  $ ...future.FUN:function (...)  
[13:34:43.534]  $ ...          : list()
[13:34:43.534]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:43.534]  - attr(*, "where")=List of 2
[13:34:43.534]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:34:43.534]   ..$ ...          :<environment: 0x5627c0858df0> 
[13:34:43.534]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:43.534]  - attr(*, "resolved")= logi FALSE
[13:34:43.534]  - attr(*, "total_size")= num 616
[13:34:43.537] Packages to be attached in all futures: [n=0] 
[13:34:43.537] getGlobalsAndPackagesXApply() ... DONE
[13:34:43.537] Number of futures (= number of chunks): 2
[13:34:43.537] Launching 2 futures (chunks) ...
[13:34:43.537] Chunk #1 of 2 ...
[13:34:43.537]  - Finding globals in 'X' for chunk #1 ...
[13:34:43.537] getGlobalsAndPackages() ...
[13:34:43.538] Searching for globals...
[13:34:43.538] 
[13:34:43.538] Searching for globals ... DONE
[13:34:43.538] - globals: [0] <none>
[13:34:43.538] getGlobalsAndPackages() ... DONE
[13:34:43.538]    + additional globals found: [n=0] 
[13:34:43.538]    + additional namespaces needed: [n=0] 
[13:34:43.538]  - Finding globals in 'X' for chunk #1 ... DONE
[13:34:43.538]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:34:43.539]  - seeds: [2] <seeds>
[13:34:43.539]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:43.539] getGlobalsAndPackages() ...
[13:34:43.539] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:43.539] Resolving globals: FALSE
[13:34:43.539] Tweak future expression to call with '...' arguments ...
[13:34:43.539] {
[13:34:43.539]     do.call(function(...) {
[13:34:43.539]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:43.539]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:43.539]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:43.539]             on.exit(options(oopts), add = TRUE)
[13:34:43.539]         }
[13:34:43.539]         {
[13:34:43.539]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:43.539]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:43.539]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:43.539]                   envir = globalenv(), inherits = FALSE)
[13:34:43.539]                 ...future.FUN(...future.X_jj, ...)
[13:34:43.539]             })
[13:34:43.539]         }
[13:34:43.539]     }, args = future.call.arguments)
[13:34:43.539] }
[13:34:43.539] Tweak future expression to call with '...' arguments ... DONE
[13:34:43.540] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:43.540] 
[13:34:43.540] getGlobalsAndPackages() ... DONE
[13:34:43.540] run() for ‘Future’ ...
[13:34:43.540] - state: ‘created’
[13:34:43.540] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:34:43.554] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:43.554] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:34:43.554]   - Field: ‘node’
[13:34:43.554]   - Field: ‘label’
[13:34:43.554]   - Field: ‘local’
[13:34:43.554]   - Field: ‘owner’
[13:34:43.555]   - Field: ‘envir’
[13:34:43.555]   - Field: ‘workers’
[13:34:43.555]   - Field: ‘packages’
[13:34:43.555]   - Field: ‘gc’
[13:34:43.555]   - Field: ‘conditions’
[13:34:43.555]   - Field: ‘persistent’
[13:34:43.555]   - Field: ‘expr’
[13:34:43.555]   - Field: ‘uuid’
[13:34:43.555]   - Field: ‘seed’
[13:34:43.555]   - Field: ‘version’
[13:34:43.555]   - Field: ‘result’
[13:34:43.556]   - Field: ‘asynchronous’
[13:34:43.556]   - Field: ‘calls’
[13:34:43.556]   - Field: ‘globals’
[13:34:43.556]   - Field: ‘stdout’
[13:34:43.556]   - Field: ‘earlySignal’
[13:34:43.556]   - Field: ‘lazy’
[13:34:43.556]   - Field: ‘state’
[13:34:43.556] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:34:43.556] - Launch lazy future ...
[13:34:43.556] Packages needed by the future expression (n = 0): <none>
[13:34:43.557] Packages needed by future strategies (n = 0): <none>
[13:34:43.557] {
[13:34:43.557]     {
[13:34:43.557]         {
[13:34:43.557]             ...future.startTime <- base::Sys.time()
[13:34:43.557]             {
[13:34:43.557]                 {
[13:34:43.557]                   {
[13:34:43.557]                     {
[13:34:43.557]                       base::local({
[13:34:43.557]                         has_future <- base::requireNamespace("future", 
[13:34:43.557]                           quietly = TRUE)
[13:34:43.557]                         if (has_future) {
[13:34:43.557]                           ns <- base::getNamespace("future")
[13:34:43.557]                           version <- ns[[".package"]][["version"]]
[13:34:43.557]                           if (is.null(version)) 
[13:34:43.557]                             version <- utils::packageVersion("future")
[13:34:43.557]                         }
[13:34:43.557]                         else {
[13:34:43.557]                           version <- NULL
[13:34:43.557]                         }
[13:34:43.557]                         if (!has_future || version < "1.8.0") {
[13:34:43.557]                           info <- base::c(r_version = base::gsub("R version ", 
[13:34:43.557]                             "", base::R.version$version.string), 
[13:34:43.557]                             platform = base::sprintf("%s (%s-bit)", 
[13:34:43.557]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:34:43.557]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:34:43.557]                               "release", "version")], collapse = " "), 
[13:34:43.557]                             hostname = base::Sys.info()[["nodename"]])
[13:34:43.557]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:34:43.557]                             info)
[13:34:43.557]                           info <- base::paste(info, collapse = "; ")
[13:34:43.557]                           if (!has_future) {
[13:34:43.557]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:34:43.557]                               info)
[13:34:43.557]                           }
[13:34:43.557]                           else {
[13:34:43.557]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:34:43.557]                               info, version)
[13:34:43.557]                           }
[13:34:43.557]                           base::stop(msg)
[13:34:43.557]                         }
[13:34:43.557]                       })
[13:34:43.557]                     }
[13:34:43.557]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:34:43.557]                     base::options(mc.cores = 1L)
[13:34:43.557]                   }
[13:34:43.557]                   ...future.strategy.old <- future::plan("list")
[13:34:43.557]                   options(future.plan = NULL)
[13:34:43.557]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:34:43.557]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:34:43.557]                 }
[13:34:43.557]                 ...future.workdir <- getwd()
[13:34:43.557]             }
[13:34:43.557]             ...future.oldOptions <- base::as.list(base::.Options)
[13:34:43.557]             ...future.oldEnvVars <- base::Sys.getenv()
[13:34:43.557]         }
[13:34:43.557]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:34:43.557]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:34:43.557]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:34:43.557]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:34:43.557]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:34:43.557]             future.stdout.windows.reencode = NULL, width = 80L)
[13:34:43.557]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:34:43.557]             base::names(...future.oldOptions))
[13:34:43.557]     }
[13:34:43.557]     if (FALSE) {
[13:34:43.557]     }
[13:34:43.557]     else {
[13:34:43.557]         if (TRUE) {
[13:34:43.557]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:34:43.557]                 open = "w")
[13:34:43.557]         }
[13:34:43.557]         else {
[13:34:43.557]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:34:43.557]                 windows = "NUL", "/dev/null"), open = "w")
[13:34:43.557]         }
[13:34:43.557]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:34:43.557]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:34:43.557]             base::sink(type = "output", split = FALSE)
[13:34:43.557]             base::close(...future.stdout)
[13:34:43.557]         }, add = TRUE)
[13:34:43.557]     }
[13:34:43.557]     ...future.frame <- base::sys.nframe()
[13:34:43.557]     ...future.conditions <- base::list()
[13:34:43.557]     ...future.rng <- base::globalenv()$.Random.seed
[13:34:43.557]     if (FALSE) {
[13:34:43.557]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:34:43.557]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:34:43.557]     }
[13:34:43.557]     ...future.result <- base::tryCatch({
[13:34:43.557]         base::withCallingHandlers({
[13:34:43.557]             ...future.value <- base::withVisible(base::local({
[13:34:43.557]                 ...future.makeSendCondition <- base::local({
[13:34:43.557]                   sendCondition <- NULL
[13:34:43.557]                   function(frame = 1L) {
[13:34:43.557]                     if (is.function(sendCondition)) 
[13:34:43.557]                       return(sendCondition)
[13:34:43.557]                     ns <- getNamespace("parallel")
[13:34:43.557]                     if (exists("sendData", mode = "function", 
[13:34:43.557]                       envir = ns)) {
[13:34:43.557]                       parallel_sendData <- get("sendData", mode = "function", 
[13:34:43.557]                         envir = ns)
[13:34:43.557]                       envir <- sys.frame(frame)
[13:34:43.557]                       master <- NULL
[13:34:43.557]                       while (!identical(envir, .GlobalEnv) && 
[13:34:43.557]                         !identical(envir, emptyenv())) {
[13:34:43.557]                         if (exists("master", mode = "list", envir = envir, 
[13:34:43.557]                           inherits = FALSE)) {
[13:34:43.557]                           master <- get("master", mode = "list", 
[13:34:43.557]                             envir = envir, inherits = FALSE)
[13:34:43.557]                           if (inherits(master, c("SOCKnode", 
[13:34:43.557]                             "SOCK0node"))) {
[13:34:43.557]                             sendCondition <<- function(cond) {
[13:34:43.557]                               data <- list(type = "VALUE", value = cond, 
[13:34:43.557]                                 success = TRUE)
[13:34:43.557]                               parallel_sendData(master, data)
[13:34:43.557]                             }
[13:34:43.557]                             return(sendCondition)
[13:34:43.557]                           }
[13:34:43.557]                         }
[13:34:43.557]                         frame <- frame + 1L
[13:34:43.557]                         envir <- sys.frame(frame)
[13:34:43.557]                       }
[13:34:43.557]                     }
[13:34:43.557]                     sendCondition <<- function(cond) NULL
[13:34:43.557]                   }
[13:34:43.557]                 })
[13:34:43.557]                 withCallingHandlers({
[13:34:43.557]                   {
[13:34:43.557]                     do.call(function(...) {
[13:34:43.557]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:43.557]                       if (!identical(...future.globals.maxSize.org, 
[13:34:43.557]                         ...future.globals.maxSize)) {
[13:34:43.557]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:43.557]                         on.exit(options(oopts), add = TRUE)
[13:34:43.557]                       }
[13:34:43.557]                       {
[13:34:43.557]                         lapply(seq_along(...future.elements_ii), 
[13:34:43.557]                           FUN = function(jj) {
[13:34:43.557]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:43.557]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:43.557]                               envir = globalenv(), inherits = FALSE)
[13:34:43.557]                             ...future.FUN(...future.X_jj, ...)
[13:34:43.557]                           })
[13:34:43.557]                       }
[13:34:43.557]                     }, args = future.call.arguments)
[13:34:43.557]                   }
[13:34:43.557]                 }, immediateCondition = function(cond) {
[13:34:43.557]                   sendCondition <- ...future.makeSendCondition()
[13:34:43.557]                   sendCondition(cond)
[13:34:43.557]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:43.557]                   {
[13:34:43.557]                     inherits <- base::inherits
[13:34:43.557]                     invokeRestart <- base::invokeRestart
[13:34:43.557]                     is.null <- base::is.null
[13:34:43.557]                     muffled <- FALSE
[13:34:43.557]                     if (inherits(cond, "message")) {
[13:34:43.557]                       muffled <- grepl(pattern, "muffleMessage")
[13:34:43.557]                       if (muffled) 
[13:34:43.557]                         invokeRestart("muffleMessage")
[13:34:43.557]                     }
[13:34:43.557]                     else if (inherits(cond, "warning")) {
[13:34:43.557]                       muffled <- grepl(pattern, "muffleWarning")
[13:34:43.557]                       if (muffled) 
[13:34:43.557]                         invokeRestart("muffleWarning")
[13:34:43.557]                     }
[13:34:43.557]                     else if (inherits(cond, "condition")) {
[13:34:43.557]                       if (!is.null(pattern)) {
[13:34:43.557]                         computeRestarts <- base::computeRestarts
[13:34:43.557]                         grepl <- base::grepl
[13:34:43.557]                         restarts <- computeRestarts(cond)
[13:34:43.557]                         for (restart in restarts) {
[13:34:43.557]                           name <- restart$name
[13:34:43.557]                           if (is.null(name)) 
[13:34:43.557]                             next
[13:34:43.557]                           if (!grepl(pattern, name)) 
[13:34:43.557]                             next
[13:34:43.557]                           invokeRestart(restart)
[13:34:43.557]                           muffled <- TRUE
[13:34:43.557]                           break
[13:34:43.557]                         }
[13:34:43.557]                       }
[13:34:43.557]                     }
[13:34:43.557]                     invisible(muffled)
[13:34:43.557]                   }
[13:34:43.557]                   muffleCondition(cond)
[13:34:43.557]                 })
[13:34:43.557]             }))
[13:34:43.557]             future::FutureResult(value = ...future.value$value, 
[13:34:43.557]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:43.557]                   ...future.rng), globalenv = if (FALSE) 
[13:34:43.557]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:34:43.557]                     ...future.globalenv.names))
[13:34:43.557]                 else NULL, started = ...future.startTime, version = "1.8")
[13:34:43.557]         }, condition = base::local({
[13:34:43.557]             c <- base::c
[13:34:43.557]             inherits <- base::inherits
[13:34:43.557]             invokeRestart <- base::invokeRestart
[13:34:43.557]             length <- base::length
[13:34:43.557]             list <- base::list
[13:34:43.557]             seq.int <- base::seq.int
[13:34:43.557]             signalCondition <- base::signalCondition
[13:34:43.557]             sys.calls <- base::sys.calls
[13:34:43.557]             `[[` <- base::`[[`
[13:34:43.557]             `+` <- base::`+`
[13:34:43.557]             `<<-` <- base::`<<-`
[13:34:43.557]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:34:43.557]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:34:43.557]                   3L)]
[13:34:43.557]             }
[13:34:43.557]             function(cond) {
[13:34:43.557]                 is_error <- inherits(cond, "error")
[13:34:43.557]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:34:43.557]                   NULL)
[13:34:43.557]                 if (is_error) {
[13:34:43.557]                   sessionInformation <- function() {
[13:34:43.557]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:34:43.557]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:34:43.557]                       search = base::search(), system = base::Sys.info())
[13:34:43.557]                   }
[13:34:43.557]                   ...future.conditions[[length(...future.conditions) + 
[13:34:43.557]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:34:43.557]                     cond$call), session = sessionInformation(), 
[13:34:43.557]                     timestamp = base::Sys.time(), signaled = 0L)
[13:34:43.557]                   signalCondition(cond)
[13:34:43.557]                 }
[13:34:43.557]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:34:43.557]                 "immediateCondition"))) {
[13:34:43.557]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:34:43.557]                   ...future.conditions[[length(...future.conditions) + 
[13:34:43.557]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:34:43.557]                   if (TRUE && !signal) {
[13:34:43.557]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:43.557]                     {
[13:34:43.557]                       inherits <- base::inherits
[13:34:43.557]                       invokeRestart <- base::invokeRestart
[13:34:43.557]                       is.null <- base::is.null
[13:34:43.557]                       muffled <- FALSE
[13:34:43.557]                       if (inherits(cond, "message")) {
[13:34:43.557]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:43.557]                         if (muffled) 
[13:34:43.557]                           invokeRestart("muffleMessage")
[13:34:43.557]                       }
[13:34:43.557]                       else if (inherits(cond, "warning")) {
[13:34:43.557]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:43.557]                         if (muffled) 
[13:34:43.557]                           invokeRestart("muffleWarning")
[13:34:43.557]                       }
[13:34:43.557]                       else if (inherits(cond, "condition")) {
[13:34:43.557]                         if (!is.null(pattern)) {
[13:34:43.557]                           computeRestarts <- base::computeRestarts
[13:34:43.557]                           grepl <- base::grepl
[13:34:43.557]                           restarts <- computeRestarts(cond)
[13:34:43.557]                           for (restart in restarts) {
[13:34:43.557]                             name <- restart$name
[13:34:43.557]                             if (is.null(name)) 
[13:34:43.557]                               next
[13:34:43.557]                             if (!grepl(pattern, name)) 
[13:34:43.557]                               next
[13:34:43.557]                             invokeRestart(restart)
[13:34:43.557]                             muffled <- TRUE
[13:34:43.557]                             break
[13:34:43.557]                           }
[13:34:43.557]                         }
[13:34:43.557]                       }
[13:34:43.557]                       invisible(muffled)
[13:34:43.557]                     }
[13:34:43.557]                     muffleCondition(cond, pattern = "^muffle")
[13:34:43.557]                   }
[13:34:43.557]                 }
[13:34:43.557]                 else {
[13:34:43.557]                   if (TRUE) {
[13:34:43.557]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:43.557]                     {
[13:34:43.557]                       inherits <- base::inherits
[13:34:43.557]                       invokeRestart <- base::invokeRestart
[13:34:43.557]                       is.null <- base::is.null
[13:34:43.557]                       muffled <- FALSE
[13:34:43.557]                       if (inherits(cond, "message")) {
[13:34:43.557]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:43.557]                         if (muffled) 
[13:34:43.557]                           invokeRestart("muffleMessage")
[13:34:43.557]                       }
[13:34:43.557]                       else if (inherits(cond, "warning")) {
[13:34:43.557]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:43.557]                         if (muffled) 
[13:34:43.557]                           invokeRestart("muffleWarning")
[13:34:43.557]                       }
[13:34:43.557]                       else if (inherits(cond, "condition")) {
[13:34:43.557]                         if (!is.null(pattern)) {
[13:34:43.557]                           computeRestarts <- base::computeRestarts
[13:34:43.557]                           grepl <- base::grepl
[13:34:43.557]                           restarts <- computeRestarts(cond)
[13:34:43.557]                           for (restart in restarts) {
[13:34:43.557]                             name <- restart$name
[13:34:43.557]                             if (is.null(name)) 
[13:34:43.557]                               next
[13:34:43.557]                             if (!grepl(pattern, name)) 
[13:34:43.557]                               next
[13:34:43.557]                             invokeRestart(restart)
[13:34:43.557]                             muffled <- TRUE
[13:34:43.557]                             break
[13:34:43.557]                           }
[13:34:43.557]                         }
[13:34:43.557]                       }
[13:34:43.557]                       invisible(muffled)
[13:34:43.557]                     }
[13:34:43.557]                     muffleCondition(cond, pattern = "^muffle")
[13:34:43.557]                   }
[13:34:43.557]                 }
[13:34:43.557]             }
[13:34:43.557]         }))
[13:34:43.557]     }, error = function(ex) {
[13:34:43.557]         base::structure(base::list(value = NULL, visible = NULL, 
[13:34:43.557]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:43.557]                 ...future.rng), started = ...future.startTime, 
[13:34:43.557]             finished = Sys.time(), session_uuid = NA_character_, 
[13:34:43.557]             version = "1.8"), class = "FutureResult")
[13:34:43.557]     }, finally = {
[13:34:43.557]         if (!identical(...future.workdir, getwd())) 
[13:34:43.557]             setwd(...future.workdir)
[13:34:43.557]         {
[13:34:43.557]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:34:43.557]                 ...future.oldOptions$nwarnings <- NULL
[13:34:43.557]             }
[13:34:43.557]             base::options(...future.oldOptions)
[13:34:43.557]             if (.Platform$OS.type == "windows") {
[13:34:43.557]                 old_names <- names(...future.oldEnvVars)
[13:34:43.557]                 envs <- base::Sys.getenv()
[13:34:43.557]                 names <- names(envs)
[13:34:43.557]                 common <- intersect(names, old_names)
[13:34:43.557]                 added <- setdiff(names, old_names)
[13:34:43.557]                 removed <- setdiff(old_names, names)
[13:34:43.557]                 changed <- common[...future.oldEnvVars[common] != 
[13:34:43.557]                   envs[common]]
[13:34:43.557]                 NAMES <- toupper(changed)
[13:34:43.557]                 args <- list()
[13:34:43.557]                 for (kk in seq_along(NAMES)) {
[13:34:43.557]                   name <- changed[[kk]]
[13:34:43.557]                   NAME <- NAMES[[kk]]
[13:34:43.557]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:43.557]                     next
[13:34:43.557]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:43.557]                 }
[13:34:43.557]                 NAMES <- toupper(added)
[13:34:43.557]                 for (kk in seq_along(NAMES)) {
[13:34:43.557]                   name <- added[[kk]]
[13:34:43.557]                   NAME <- NAMES[[kk]]
[13:34:43.557]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:43.557]                     next
[13:34:43.557]                   args[[name]] <- ""
[13:34:43.557]                 }
[13:34:43.557]                 NAMES <- toupper(removed)
[13:34:43.557]                 for (kk in seq_along(NAMES)) {
[13:34:43.557]                   name <- removed[[kk]]
[13:34:43.557]                   NAME <- NAMES[[kk]]
[13:34:43.557]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:43.557]                     next
[13:34:43.557]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:43.557]                 }
[13:34:43.557]                 if (length(args) > 0) 
[13:34:43.557]                   base::do.call(base::Sys.setenv, args = args)
[13:34:43.557]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:34:43.557]             }
[13:34:43.557]             else {
[13:34:43.557]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:34:43.557]             }
[13:34:43.557]             {
[13:34:43.557]                 if (base::length(...future.futureOptionsAdded) > 
[13:34:43.557]                   0L) {
[13:34:43.557]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:34:43.557]                   base::names(opts) <- ...future.futureOptionsAdded
[13:34:43.557]                   base::options(opts)
[13:34:43.557]                 }
[13:34:43.557]                 {
[13:34:43.557]                   {
[13:34:43.557]                     base::options(mc.cores = ...future.mc.cores.old)
[13:34:43.557]                     NULL
[13:34:43.557]                   }
[13:34:43.557]                   options(future.plan = NULL)
[13:34:43.557]                   if (is.na(NA_character_)) 
[13:34:43.557]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:34:43.557]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:34:43.557]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:34:43.557]                     .init = FALSE)
[13:34:43.557]                 }
[13:34:43.557]             }
[13:34:43.557]         }
[13:34:43.557]     })
[13:34:43.557]     if (TRUE) {
[13:34:43.557]         base::sink(type = "output", split = FALSE)
[13:34:43.557]         if (TRUE) {
[13:34:43.557]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:34:43.557]         }
[13:34:43.557]         else {
[13:34:43.557]             ...future.result["stdout"] <- base::list(NULL)
[13:34:43.557]         }
[13:34:43.557]         base::close(...future.stdout)
[13:34:43.557]         ...future.stdout <- NULL
[13:34:43.557]     }
[13:34:43.557]     ...future.result$conditions <- ...future.conditions
[13:34:43.557]     ...future.result$finished <- base::Sys.time()
[13:34:43.557]     ...future.result
[13:34:43.557] }
[13:34:43.560] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[13:34:43.560] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[13:34:43.560] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[13:34:43.560] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[13:34:43.561] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[13:34:43.561] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[13:34:43.561] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[13:34:43.561] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[13:34:43.562] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[13:34:43.562] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[13:34:43.562] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[13:34:43.562] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[13:34:43.563] MultisessionFuture started
[13:34:43.563] - Launch lazy future ... done
[13:34:43.563] run() for ‘MultisessionFuture’ ... done
[13:34:43.563] Created future:
[13:34:43.563] MultisessionFuture:
[13:34:43.563] Label: ‘future_replicate-1’
[13:34:43.563] Expression:
[13:34:43.563] {
[13:34:43.563]     do.call(function(...) {
[13:34:43.563]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:43.563]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:43.563]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:43.563]             on.exit(options(oopts), add = TRUE)
[13:34:43.563]         }
[13:34:43.563]         {
[13:34:43.563]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:43.563]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:43.563]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:43.563]                   envir = globalenv(), inherits = FALSE)
[13:34:43.563]                 ...future.FUN(...future.X_jj, ...)
[13:34:43.563]             })
[13:34:43.563]         }
[13:34:43.563]     }, args = future.call.arguments)
[13:34:43.563] }
[13:34:43.563] Lazy evaluation: FALSE
[13:34:43.563] Asynchronous evaluation: TRUE
[13:34:43.563] Local evaluation: TRUE
[13:34:43.563] Environment: R_GlobalEnv
[13:34:43.563] Capture standard output: TRUE
[13:34:43.563] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:34:43.563] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:34:43.563] Packages: <none>
[13:34:43.563] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:34:43.563] Resolved: FALSE
[13:34:43.563] Value: <not collected>
[13:34:43.563] Conditions captured: <none>
[13:34:43.563] Early signaling: FALSE
[13:34:43.563] Owner process: b8cf10c3-b112-c8f9-9398-a44000e21728
[13:34:43.563] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:43.574] Chunk #1 of 2 ... DONE
[13:34:43.575] Chunk #2 of 2 ...
[13:34:43.575]  - Finding globals in 'X' for chunk #2 ...
[13:34:43.575] getGlobalsAndPackages() ...
[13:34:43.575] Searching for globals...
[13:34:43.575] 
[13:34:43.575] Searching for globals ... DONE
[13:34:43.575] - globals: [0] <none>
[13:34:43.576] getGlobalsAndPackages() ... DONE
[13:34:43.576]    + additional globals found: [n=0] 
[13:34:43.576]    + additional namespaces needed: [n=0] 
[13:34:43.576]  - Finding globals in 'X' for chunk #2 ... DONE
[13:34:43.576]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:34:43.576]  - seeds: [3] <seeds>
[13:34:43.576]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:43.576] getGlobalsAndPackages() ...
[13:34:43.576] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:43.576] Resolving globals: FALSE
[13:34:43.577] Tweak future expression to call with '...' arguments ...
[13:34:43.577] {
[13:34:43.577]     do.call(function(...) {
[13:34:43.577]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:43.577]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:43.577]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:43.577]             on.exit(options(oopts), add = TRUE)
[13:34:43.577]         }
[13:34:43.577]         {
[13:34:43.577]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:43.577]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:43.577]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:43.577]                   envir = globalenv(), inherits = FALSE)
[13:34:43.577]                 ...future.FUN(...future.X_jj, ...)
[13:34:43.577]             })
[13:34:43.577]         }
[13:34:43.577]     }, args = future.call.arguments)
[13:34:43.577] }
[13:34:43.577] Tweak future expression to call with '...' arguments ... DONE
[13:34:43.579] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:43.579] 
[13:34:43.580] getGlobalsAndPackages() ... DONE
[13:34:43.580] run() for ‘Future’ ...
[13:34:43.580] - state: ‘created’
[13:34:43.580] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:34:43.593] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:43.594] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:34:43.594]   - Field: ‘node’
[13:34:43.594]   - Field: ‘label’
[13:34:43.594]   - Field: ‘local’
[13:34:43.594]   - Field: ‘owner’
[13:34:43.594]   - Field: ‘envir’
[13:34:43.594]   - Field: ‘workers’
[13:34:43.594]   - Field: ‘packages’
[13:34:43.594]   - Field: ‘gc’
[13:34:43.595]   - Field: ‘conditions’
[13:34:43.595]   - Field: ‘persistent’
[13:34:43.595]   - Field: ‘expr’
[13:34:43.595]   - Field: ‘uuid’
[13:34:43.595]   - Field: ‘seed’
[13:34:43.595]   - Field: ‘version’
[13:34:43.595]   - Field: ‘result’
[13:34:43.595]   - Field: ‘asynchronous’
[13:34:43.595]   - Field: ‘calls’
[13:34:43.595]   - Field: ‘globals’
[13:34:43.595]   - Field: ‘stdout’
[13:34:43.596]   - Field: ‘earlySignal’
[13:34:43.596]   - Field: ‘lazy’
[13:34:43.596]   - Field: ‘state’
[13:34:43.596] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:34:43.596] - Launch lazy future ...
[13:34:43.596] Packages needed by the future expression (n = 0): <none>
[13:34:43.596] Packages needed by future strategies (n = 0): <none>
[13:34:43.597] {
[13:34:43.597]     {
[13:34:43.597]         {
[13:34:43.597]             ...future.startTime <- base::Sys.time()
[13:34:43.597]             {
[13:34:43.597]                 {
[13:34:43.597]                   {
[13:34:43.597]                     {
[13:34:43.597]                       base::local({
[13:34:43.597]                         has_future <- base::requireNamespace("future", 
[13:34:43.597]                           quietly = TRUE)
[13:34:43.597]                         if (has_future) {
[13:34:43.597]                           ns <- base::getNamespace("future")
[13:34:43.597]                           version <- ns[[".package"]][["version"]]
[13:34:43.597]                           if (is.null(version)) 
[13:34:43.597]                             version <- utils::packageVersion("future")
[13:34:43.597]                         }
[13:34:43.597]                         else {
[13:34:43.597]                           version <- NULL
[13:34:43.597]                         }
[13:34:43.597]                         if (!has_future || version < "1.8.0") {
[13:34:43.597]                           info <- base::c(r_version = base::gsub("R version ", 
[13:34:43.597]                             "", base::R.version$version.string), 
[13:34:43.597]                             platform = base::sprintf("%s (%s-bit)", 
[13:34:43.597]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:34:43.597]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:34:43.597]                               "release", "version")], collapse = " "), 
[13:34:43.597]                             hostname = base::Sys.info()[["nodename"]])
[13:34:43.597]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:34:43.597]                             info)
[13:34:43.597]                           info <- base::paste(info, collapse = "; ")
[13:34:43.597]                           if (!has_future) {
[13:34:43.597]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:34:43.597]                               info)
[13:34:43.597]                           }
[13:34:43.597]                           else {
[13:34:43.597]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:34:43.597]                               info, version)
[13:34:43.597]                           }
[13:34:43.597]                           base::stop(msg)
[13:34:43.597]                         }
[13:34:43.597]                       })
[13:34:43.597]                     }
[13:34:43.597]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:34:43.597]                     base::options(mc.cores = 1L)
[13:34:43.597]                   }
[13:34:43.597]                   ...future.strategy.old <- future::plan("list")
[13:34:43.597]                   options(future.plan = NULL)
[13:34:43.597]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:34:43.597]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:34:43.597]                 }
[13:34:43.597]                 ...future.workdir <- getwd()
[13:34:43.597]             }
[13:34:43.597]             ...future.oldOptions <- base::as.list(base::.Options)
[13:34:43.597]             ...future.oldEnvVars <- base::Sys.getenv()
[13:34:43.597]         }
[13:34:43.597]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:34:43.597]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:34:43.597]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:34:43.597]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:34:43.597]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:34:43.597]             future.stdout.windows.reencode = NULL, width = 80L)
[13:34:43.597]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:34:43.597]             base::names(...future.oldOptions))
[13:34:43.597]     }
[13:34:43.597]     if (FALSE) {
[13:34:43.597]     }
[13:34:43.597]     else {
[13:34:43.597]         if (TRUE) {
[13:34:43.597]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:34:43.597]                 open = "w")
[13:34:43.597]         }
[13:34:43.597]         else {
[13:34:43.597]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:34:43.597]                 windows = "NUL", "/dev/null"), open = "w")
[13:34:43.597]         }
[13:34:43.597]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:34:43.597]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:34:43.597]             base::sink(type = "output", split = FALSE)
[13:34:43.597]             base::close(...future.stdout)
[13:34:43.597]         }, add = TRUE)
[13:34:43.597]     }
[13:34:43.597]     ...future.frame <- base::sys.nframe()
[13:34:43.597]     ...future.conditions <- base::list()
[13:34:43.597]     ...future.rng <- base::globalenv()$.Random.seed
[13:34:43.597]     if (FALSE) {
[13:34:43.597]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:34:43.597]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:34:43.597]     }
[13:34:43.597]     ...future.result <- base::tryCatch({
[13:34:43.597]         base::withCallingHandlers({
[13:34:43.597]             ...future.value <- base::withVisible(base::local({
[13:34:43.597]                 ...future.makeSendCondition <- base::local({
[13:34:43.597]                   sendCondition <- NULL
[13:34:43.597]                   function(frame = 1L) {
[13:34:43.597]                     if (is.function(sendCondition)) 
[13:34:43.597]                       return(sendCondition)
[13:34:43.597]                     ns <- getNamespace("parallel")
[13:34:43.597]                     if (exists("sendData", mode = "function", 
[13:34:43.597]                       envir = ns)) {
[13:34:43.597]                       parallel_sendData <- get("sendData", mode = "function", 
[13:34:43.597]                         envir = ns)
[13:34:43.597]                       envir <- sys.frame(frame)
[13:34:43.597]                       master <- NULL
[13:34:43.597]                       while (!identical(envir, .GlobalEnv) && 
[13:34:43.597]                         !identical(envir, emptyenv())) {
[13:34:43.597]                         if (exists("master", mode = "list", envir = envir, 
[13:34:43.597]                           inherits = FALSE)) {
[13:34:43.597]                           master <- get("master", mode = "list", 
[13:34:43.597]                             envir = envir, inherits = FALSE)
[13:34:43.597]                           if (inherits(master, c("SOCKnode", 
[13:34:43.597]                             "SOCK0node"))) {
[13:34:43.597]                             sendCondition <<- function(cond) {
[13:34:43.597]                               data <- list(type = "VALUE", value = cond, 
[13:34:43.597]                                 success = TRUE)
[13:34:43.597]                               parallel_sendData(master, data)
[13:34:43.597]                             }
[13:34:43.597]                             return(sendCondition)
[13:34:43.597]                           }
[13:34:43.597]                         }
[13:34:43.597]                         frame <- frame + 1L
[13:34:43.597]                         envir <- sys.frame(frame)
[13:34:43.597]                       }
[13:34:43.597]                     }
[13:34:43.597]                     sendCondition <<- function(cond) NULL
[13:34:43.597]                   }
[13:34:43.597]                 })
[13:34:43.597]                 withCallingHandlers({
[13:34:43.597]                   {
[13:34:43.597]                     do.call(function(...) {
[13:34:43.597]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:43.597]                       if (!identical(...future.globals.maxSize.org, 
[13:34:43.597]                         ...future.globals.maxSize)) {
[13:34:43.597]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:43.597]                         on.exit(options(oopts), add = TRUE)
[13:34:43.597]                       }
[13:34:43.597]                       {
[13:34:43.597]                         lapply(seq_along(...future.elements_ii), 
[13:34:43.597]                           FUN = function(jj) {
[13:34:43.597]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:43.597]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:43.597]                               envir = globalenv(), inherits = FALSE)
[13:34:43.597]                             ...future.FUN(...future.X_jj, ...)
[13:34:43.597]                           })
[13:34:43.597]                       }
[13:34:43.597]                     }, args = future.call.arguments)
[13:34:43.597]                   }
[13:34:43.597]                 }, immediateCondition = function(cond) {
[13:34:43.597]                   sendCondition <- ...future.makeSendCondition()
[13:34:43.597]                   sendCondition(cond)
[13:34:43.597]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:43.597]                   {
[13:34:43.597]                     inherits <- base::inherits
[13:34:43.597]                     invokeRestart <- base::invokeRestart
[13:34:43.597]                     is.null <- base::is.null
[13:34:43.597]                     muffled <- FALSE
[13:34:43.597]                     if (inherits(cond, "message")) {
[13:34:43.597]                       muffled <- grepl(pattern, "muffleMessage")
[13:34:43.597]                       if (muffled) 
[13:34:43.597]                         invokeRestart("muffleMessage")
[13:34:43.597]                     }
[13:34:43.597]                     else if (inherits(cond, "warning")) {
[13:34:43.597]                       muffled <- grepl(pattern, "muffleWarning")
[13:34:43.597]                       if (muffled) 
[13:34:43.597]                         invokeRestart("muffleWarning")
[13:34:43.597]                     }
[13:34:43.597]                     else if (inherits(cond, "condition")) {
[13:34:43.597]                       if (!is.null(pattern)) {
[13:34:43.597]                         computeRestarts <- base::computeRestarts
[13:34:43.597]                         grepl <- base::grepl
[13:34:43.597]                         restarts <- computeRestarts(cond)
[13:34:43.597]                         for (restart in restarts) {
[13:34:43.597]                           name <- restart$name
[13:34:43.597]                           if (is.null(name)) 
[13:34:43.597]                             next
[13:34:43.597]                           if (!grepl(pattern, name)) 
[13:34:43.597]                             next
[13:34:43.597]                           invokeRestart(restart)
[13:34:43.597]                           muffled <- TRUE
[13:34:43.597]                           break
[13:34:43.597]                         }
[13:34:43.597]                       }
[13:34:43.597]                     }
[13:34:43.597]                     invisible(muffled)
[13:34:43.597]                   }
[13:34:43.597]                   muffleCondition(cond)
[13:34:43.597]                 })
[13:34:43.597]             }))
[13:34:43.597]             future::FutureResult(value = ...future.value$value, 
[13:34:43.597]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:43.597]                   ...future.rng), globalenv = if (FALSE) 
[13:34:43.597]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:34:43.597]                     ...future.globalenv.names))
[13:34:43.597]                 else NULL, started = ...future.startTime, version = "1.8")
[13:34:43.597]         }, condition = base::local({
[13:34:43.597]             c <- base::c
[13:34:43.597]             inherits <- base::inherits
[13:34:43.597]             invokeRestart <- base::invokeRestart
[13:34:43.597]             length <- base::length
[13:34:43.597]             list <- base::list
[13:34:43.597]             seq.int <- base::seq.int
[13:34:43.597]             signalCondition <- base::signalCondition
[13:34:43.597]             sys.calls <- base::sys.calls
[13:34:43.597]             `[[` <- base::`[[`
[13:34:43.597]             `+` <- base::`+`
[13:34:43.597]             `<<-` <- base::`<<-`
[13:34:43.597]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:34:43.597]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:34:43.597]                   3L)]
[13:34:43.597]             }
[13:34:43.597]             function(cond) {
[13:34:43.597]                 is_error <- inherits(cond, "error")
[13:34:43.597]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:34:43.597]                   NULL)
[13:34:43.597]                 if (is_error) {
[13:34:43.597]                   sessionInformation <- function() {
[13:34:43.597]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:34:43.597]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:34:43.597]                       search = base::search(), system = base::Sys.info())
[13:34:43.597]                   }
[13:34:43.597]                   ...future.conditions[[length(...future.conditions) + 
[13:34:43.597]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:34:43.597]                     cond$call), session = sessionInformation(), 
[13:34:43.597]                     timestamp = base::Sys.time(), signaled = 0L)
[13:34:43.597]                   signalCondition(cond)
[13:34:43.597]                 }
[13:34:43.597]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:34:43.597]                 "immediateCondition"))) {
[13:34:43.597]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:34:43.597]                   ...future.conditions[[length(...future.conditions) + 
[13:34:43.597]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:34:43.597]                   if (TRUE && !signal) {
[13:34:43.597]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:43.597]                     {
[13:34:43.597]                       inherits <- base::inherits
[13:34:43.597]                       invokeRestart <- base::invokeRestart
[13:34:43.597]                       is.null <- base::is.null
[13:34:43.597]                       muffled <- FALSE
[13:34:43.597]                       if (inherits(cond, "message")) {
[13:34:43.597]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:43.597]                         if (muffled) 
[13:34:43.597]                           invokeRestart("muffleMessage")
[13:34:43.597]                       }
[13:34:43.597]                       else if (inherits(cond, "warning")) {
[13:34:43.597]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:43.597]                         if (muffled) 
[13:34:43.597]                           invokeRestart("muffleWarning")
[13:34:43.597]                       }
[13:34:43.597]                       else if (inherits(cond, "condition")) {
[13:34:43.597]                         if (!is.null(pattern)) {
[13:34:43.597]                           computeRestarts <- base::computeRestarts
[13:34:43.597]                           grepl <- base::grepl
[13:34:43.597]                           restarts <- computeRestarts(cond)
[13:34:43.597]                           for (restart in restarts) {
[13:34:43.597]                             name <- restart$name
[13:34:43.597]                             if (is.null(name)) 
[13:34:43.597]                               next
[13:34:43.597]                             if (!grepl(pattern, name)) 
[13:34:43.597]                               next
[13:34:43.597]                             invokeRestart(restart)
[13:34:43.597]                             muffled <- TRUE
[13:34:43.597]                             break
[13:34:43.597]                           }
[13:34:43.597]                         }
[13:34:43.597]                       }
[13:34:43.597]                       invisible(muffled)
[13:34:43.597]                     }
[13:34:43.597]                     muffleCondition(cond, pattern = "^muffle")
[13:34:43.597]                   }
[13:34:43.597]                 }
[13:34:43.597]                 else {
[13:34:43.597]                   if (TRUE) {
[13:34:43.597]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:43.597]                     {
[13:34:43.597]                       inherits <- base::inherits
[13:34:43.597]                       invokeRestart <- base::invokeRestart
[13:34:43.597]                       is.null <- base::is.null
[13:34:43.597]                       muffled <- FALSE
[13:34:43.597]                       if (inherits(cond, "message")) {
[13:34:43.597]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:43.597]                         if (muffled) 
[13:34:43.597]                           invokeRestart("muffleMessage")
[13:34:43.597]                       }
[13:34:43.597]                       else if (inherits(cond, "warning")) {
[13:34:43.597]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:43.597]                         if (muffled) 
[13:34:43.597]                           invokeRestart("muffleWarning")
[13:34:43.597]                       }
[13:34:43.597]                       else if (inherits(cond, "condition")) {
[13:34:43.597]                         if (!is.null(pattern)) {
[13:34:43.597]                           computeRestarts <- base::computeRestarts
[13:34:43.597]                           grepl <- base::grepl
[13:34:43.597]                           restarts <- computeRestarts(cond)
[13:34:43.597]                           for (restart in restarts) {
[13:34:43.597]                             name <- restart$name
[13:34:43.597]                             if (is.null(name)) 
[13:34:43.597]                               next
[13:34:43.597]                             if (!grepl(pattern, name)) 
[13:34:43.597]                               next
[13:34:43.597]                             invokeRestart(restart)
[13:34:43.597]                             muffled <- TRUE
[13:34:43.597]                             break
[13:34:43.597]                           }
[13:34:43.597]                         }
[13:34:43.597]                       }
[13:34:43.597]                       invisible(muffled)
[13:34:43.597]                     }
[13:34:43.597]                     muffleCondition(cond, pattern = "^muffle")
[13:34:43.597]                   }
[13:34:43.597]                 }
[13:34:43.597]             }
[13:34:43.597]         }))
[13:34:43.597]     }, error = function(ex) {
[13:34:43.597]         base::structure(base::list(value = NULL, visible = NULL, 
[13:34:43.597]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:43.597]                 ...future.rng), started = ...future.startTime, 
[13:34:43.597]             finished = Sys.time(), session_uuid = NA_character_, 
[13:34:43.597]             version = "1.8"), class = "FutureResult")
[13:34:43.597]     }, finally = {
[13:34:43.597]         if (!identical(...future.workdir, getwd())) 
[13:34:43.597]             setwd(...future.workdir)
[13:34:43.597]         {
[13:34:43.597]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:34:43.597]                 ...future.oldOptions$nwarnings <- NULL
[13:34:43.597]             }
[13:34:43.597]             base::options(...future.oldOptions)
[13:34:43.597]             if (.Platform$OS.type == "windows") {
[13:34:43.597]                 old_names <- names(...future.oldEnvVars)
[13:34:43.597]                 envs <- base::Sys.getenv()
[13:34:43.597]                 names <- names(envs)
[13:34:43.597]                 common <- intersect(names, old_names)
[13:34:43.597]                 added <- setdiff(names, old_names)
[13:34:43.597]                 removed <- setdiff(old_names, names)
[13:34:43.597]                 changed <- common[...future.oldEnvVars[common] != 
[13:34:43.597]                   envs[common]]
[13:34:43.597]                 NAMES <- toupper(changed)
[13:34:43.597]                 args <- list()
[13:34:43.597]                 for (kk in seq_along(NAMES)) {
[13:34:43.597]                   name <- changed[[kk]]
[13:34:43.597]                   NAME <- NAMES[[kk]]
[13:34:43.597]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:43.597]                     next
[13:34:43.597]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:43.597]                 }
[13:34:43.597]                 NAMES <- toupper(added)
[13:34:43.597]                 for (kk in seq_along(NAMES)) {
[13:34:43.597]                   name <- added[[kk]]
[13:34:43.597]                   NAME <- NAMES[[kk]]
[13:34:43.597]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:43.597]                     next
[13:34:43.597]                   args[[name]] <- ""
[13:34:43.597]                 }
[13:34:43.597]                 NAMES <- toupper(removed)
[13:34:43.597]                 for (kk in seq_along(NAMES)) {
[13:34:43.597]                   name <- removed[[kk]]
[13:34:43.597]                   NAME <- NAMES[[kk]]
[13:34:43.597]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:43.597]                     next
[13:34:43.597]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:43.597]                 }
[13:34:43.597]                 if (length(args) > 0) 
[13:34:43.597]                   base::do.call(base::Sys.setenv, args = args)
[13:34:43.597]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:34:43.597]             }
[13:34:43.597]             else {
[13:34:43.597]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:34:43.597]             }
[13:34:43.597]             {
[13:34:43.597]                 if (base::length(...future.futureOptionsAdded) > 
[13:34:43.597]                   0L) {
[13:34:43.597]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:34:43.597]                   base::names(opts) <- ...future.futureOptionsAdded
[13:34:43.597]                   base::options(opts)
[13:34:43.597]                 }
[13:34:43.597]                 {
[13:34:43.597]                   {
[13:34:43.597]                     base::options(mc.cores = ...future.mc.cores.old)
[13:34:43.597]                     NULL
[13:34:43.597]                   }
[13:34:43.597]                   options(future.plan = NULL)
[13:34:43.597]                   if (is.na(NA_character_)) 
[13:34:43.597]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:34:43.597]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:34:43.597]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:34:43.597]                     .init = FALSE)
[13:34:43.597]                 }
[13:34:43.597]             }
[13:34:43.597]         }
[13:34:43.597]     })
[13:34:43.597]     if (TRUE) {
[13:34:43.597]         base::sink(type = "output", split = FALSE)
[13:34:43.597]         if (TRUE) {
[13:34:43.597]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:34:43.597]         }
[13:34:43.597]         else {
[13:34:43.597]             ...future.result["stdout"] <- base::list(NULL)
[13:34:43.597]         }
[13:34:43.597]         base::close(...future.stdout)
[13:34:43.597]         ...future.stdout <- NULL
[13:34:43.597]     }
[13:34:43.597]     ...future.result$conditions <- ...future.conditions
[13:34:43.597]     ...future.result$finished <- base::Sys.time()
[13:34:43.597]     ...future.result
[13:34:43.597] }
[13:34:43.599] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[13:34:43.599] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[13:34:43.600] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[13:34:43.600] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[13:34:43.600] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[13:34:43.600] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[13:34:43.601] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[13:34:43.601] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[13:34:43.601] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[13:34:43.602] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[13:34:43.602] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[13:34:43.602] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[13:34:43.603] MultisessionFuture started
[13:34:43.603] - Launch lazy future ... done
[13:34:43.603] run() for ‘MultisessionFuture’ ... done
[13:34:43.603] Created future:
[13:34:43.603] MultisessionFuture:
[13:34:43.603] Label: ‘future_replicate-2’
[13:34:43.603] Expression:
[13:34:43.603] {
[13:34:43.603]     do.call(function(...) {
[13:34:43.603]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:43.603]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:43.603]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:43.603]             on.exit(options(oopts), add = TRUE)
[13:34:43.603]         }
[13:34:43.603]         {
[13:34:43.603]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:43.603]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:43.603]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:43.603]                   envir = globalenv(), inherits = FALSE)
[13:34:43.603]                 ...future.FUN(...future.X_jj, ...)
[13:34:43.603]             })
[13:34:43.603]         }
[13:34:43.603]     }, args = future.call.arguments)
[13:34:43.603] }
[13:34:43.603] Lazy evaluation: FALSE
[13:34:43.603] Asynchronous evaluation: TRUE
[13:34:43.603] Local evaluation: TRUE
[13:34:43.603] Environment: R_GlobalEnv
[13:34:43.603] Capture standard output: TRUE
[13:34:43.603] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:34:43.603] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:34:43.603] Packages: <none>
[13:34:43.603] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:34:43.603] Resolved: FALSE
[13:34:43.603] Value: <not collected>
[13:34:43.603] Conditions captured: <none>
[13:34:43.603] Early signaling: FALSE
[13:34:43.603] Owner process: b8cf10c3-b112-c8f9-9398-a44000e21728
[13:34:43.603] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:43.614] Chunk #2 of 2 ... DONE
[13:34:43.615] Launching 2 futures (chunks) ... DONE
[13:34:43.615] Resolving 2 futures (chunks) ...
[13:34:43.615] resolve() on list ...
[13:34:43.615]  recursive: 0
[13:34:43.615]  length: 2
[13:34:43.615] 
[13:34:43.615] receiveMessageFromWorker() for ClusterFuture ...
[13:34:43.616] - Validating connection of MultisessionFuture
[13:34:43.616] - received message: FutureResult
[13:34:43.616] - Received FutureResult
[13:34:43.616] - Erased future from FutureRegistry
[13:34:43.616] result() for ClusterFuture ...
[13:34:43.616] - result already collected: FutureResult
[13:34:43.616] result() for ClusterFuture ... done
[13:34:43.616] receiveMessageFromWorker() for ClusterFuture ... done
[13:34:43.616] Future #1
[13:34:43.617] result() for ClusterFuture ...
[13:34:43.617] - result already collected: FutureResult
[13:34:43.617] result() for ClusterFuture ... done
[13:34:43.617] result() for ClusterFuture ...
[13:34:43.617] - result already collected: FutureResult
[13:34:43.617] result() for ClusterFuture ... done
[13:34:43.617] signalConditionsASAP(MultisessionFuture, pos=1) ...
[13:34:43.617] - nx: 2
[13:34:43.617] - relay: TRUE
[13:34:43.617] - stdout: TRUE
[13:34:43.617] - signal: TRUE
[13:34:43.617] - resignal: FALSE
[13:34:43.617] - force: TRUE
[13:34:43.618] - relayed: [n=2] FALSE, FALSE
[13:34:43.618] - queued futures: [n=2] FALSE, FALSE
[13:34:43.618]  - until=1
[13:34:43.618]  - relaying element #1
[13:34:43.618] result() for ClusterFuture ...
[13:34:43.618] - result already collected: FutureResult
[13:34:43.618] result() for ClusterFuture ... done
[13:34:43.618] result() for ClusterFuture ...
[13:34:43.618] - result already collected: FutureResult
[13:34:43.618] result() for ClusterFuture ... done
[13:34:43.618] result() for ClusterFuture ...
[13:34:43.619] - result already collected: FutureResult
[13:34:43.619] result() for ClusterFuture ... done
[13:34:43.619] result() for ClusterFuture ...
[13:34:43.619] - result already collected: FutureResult
[13:34:43.619] result() for ClusterFuture ... done
[13:34:43.619] - relayed: [n=2] TRUE, FALSE
[13:34:43.619] - queued futures: [n=2] TRUE, FALSE
[13:34:43.619] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[13:34:43.619]  length: 1 (resolved future 1)
[13:34:43.648] receiveMessageFromWorker() for ClusterFuture ...
[13:34:43.648] - Validating connection of MultisessionFuture
[13:34:43.648] - received message: FutureResult
[13:34:43.648] - Received FutureResult
[13:34:43.648] - Erased future from FutureRegistry
[13:34:43.649] result() for ClusterFuture ...
[13:34:43.649] - result already collected: FutureResult
[13:34:43.649] result() for ClusterFuture ... done
[13:34:43.649] receiveMessageFromWorker() for ClusterFuture ... done
[13:34:43.649] Future #2
[13:34:43.649] result() for ClusterFuture ...
[13:34:43.649] - result already collected: FutureResult
[13:34:43.649] result() for ClusterFuture ... done
[13:34:43.649] result() for ClusterFuture ...
[13:34:43.649] - result already collected: FutureResult
[13:34:43.649] result() for ClusterFuture ... done
[13:34:43.649] signalConditionsASAP(MultisessionFuture, pos=2) ...
[13:34:43.650] - nx: 2
[13:34:43.650] - relay: TRUE
[13:34:43.650] - stdout: TRUE
[13:34:43.650] - signal: TRUE
[13:34:43.650] - resignal: FALSE
[13:34:43.650] - force: TRUE
[13:34:43.650] - relayed: [n=2] TRUE, FALSE
[13:34:43.650] - queued futures: [n=2] TRUE, FALSE
[13:34:43.650]  - until=2
[13:34:43.650]  - relaying element #2
[13:34:43.650] result() for ClusterFuture ...
[13:34:43.651] - result already collected: FutureResult
[13:34:43.651] result() for ClusterFuture ... done
[13:34:43.651] result() for ClusterFuture ...
[13:34:43.651] - result already collected: FutureResult
[13:34:43.651] result() for ClusterFuture ... done
[13:34:43.651] result() for ClusterFuture ...
[13:34:43.651] - result already collected: FutureResult
[13:34:43.651] result() for ClusterFuture ... done
[13:34:43.651] result() for ClusterFuture ...
[13:34:43.651] - result already collected: FutureResult
[13:34:43.651] result() for ClusterFuture ... done
[13:34:43.651] - relayed: [n=2] TRUE, TRUE
[13:34:43.652] - queued futures: [n=2] TRUE, TRUE
[13:34:43.652] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[13:34:43.652]  length: 0 (resolved future 2)
[13:34:43.652] Relaying remaining futures
[13:34:43.652] signalConditionsASAP(NULL, pos=0) ...
[13:34:43.652] - nx: 2
[13:34:43.652] - relay: TRUE
[13:34:43.652] - stdout: TRUE
[13:34:43.652] - signal: TRUE
[13:34:43.652] - resignal: FALSE
[13:34:43.652] - force: TRUE
[13:34:43.652] - relayed: [n=2] TRUE, TRUE
[13:34:43.653] - queued futures: [n=2] TRUE, TRUE
 - flush all
[13:34:43.653] - relayed: [n=2] TRUE, TRUE
[13:34:43.653] - queued futures: [n=2] TRUE, TRUE
[13:34:43.653] signalConditionsASAP(NULL, pos=0) ... done
[13:34:43.653] resolve() on list ... DONE
[13:34:43.653] result() for ClusterFuture ...
[13:34:43.653] - result already collected: FutureResult
[13:34:43.653] result() for ClusterFuture ... done
[13:34:43.653] result() for ClusterFuture ...
[13:34:43.653] - result already collected: FutureResult
[13:34:43.654] result() for ClusterFuture ... done
[13:34:43.654] result() for ClusterFuture ...
[13:34:43.654] - result already collected: FutureResult
[13:34:43.654] result() for ClusterFuture ... done
[13:34:43.654] result() for ClusterFuture ...
[13:34:43.654] - result already collected: FutureResult
[13:34:43.654] result() for ClusterFuture ... done
[13:34:43.654]  - Number of value chunks collected: 2
[13:34:43.654] Resolving 2 futures (chunks) ... DONE
[13:34:43.654] Reducing values from 2 chunks ...
[13:34:43.654]  - Number of values collected after concatenation: 5
[13:34:43.654]  - Number of values expected: 5
[13:34:43.655] Reducing values from 2 chunks ... DONE
[13:34:43.655] future_lapply() ... DONE
[13:34:43.655] future_lapply() ...
[13:34:43.655] Generating random seeds ...
[13:34:43.655] Generating random seed streams for 5 elements ...
[13:34:43.655] Generating random seed streams for 5 elements ... DONE
[13:34:43.656] Generating random seeds ... DONE
[13:34:43.656] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:34:43.660] Number of chunks: 2
[13:34:43.660] getGlobalsAndPackagesXApply() ...
[13:34:43.660]  - future.globals: TRUE
[13:34:43.660] getGlobalsAndPackages() ...
[13:34:43.660] Searching for globals...
[13:34:43.661] - globals found: [2] ‘FUN’, ‘sample’
[13:34:43.661] Searching for globals ... DONE
[13:34:43.661] Resolving globals: FALSE
[13:34:43.662] The total size of the 1 globals is 616 bytes (616 bytes)
[13:34:43.662] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[13:34:43.662] - globals: [1] ‘FUN’
[13:34:43.662] 
[13:34:43.662] getGlobalsAndPackages() ... DONE
[13:34:43.662]  - globals found/used: [n=1] ‘FUN’
[13:34:43.662]  - needed namespaces: [n=0] 
[13:34:43.662] Finding globals ... DONE
[13:34:43.663]  - use_args: TRUE
[13:34:43.663]  - Getting '...' globals ...
[13:34:43.663] resolve() on list ...
[13:34:43.663]  recursive: 0
[13:34:43.663]  length: 1
[13:34:43.663]  elements: ‘...’
[13:34:43.663]  length: 0 (resolved future 1)
[13:34:43.663] resolve() on list ... DONE
[13:34:43.663]    - '...' content: [n=0] 
[13:34:43.664] List of 1
[13:34:43.664]  $ ...: list()
[13:34:43.664]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:43.664]  - attr(*, "where")=List of 1
[13:34:43.664]   ..$ ...:<environment: 0x5627bda86a40> 
[13:34:43.664]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:43.664]  - attr(*, "resolved")= logi TRUE
[13:34:43.664]  - attr(*, "total_size")= num NA
[13:34:43.666]  - Getting '...' globals ... DONE
[13:34:43.666] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[13:34:43.666] List of 2
[13:34:43.666]  $ ...future.FUN:function (...)  
[13:34:43.666]  $ ...          : list()
[13:34:43.666]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:43.666]  - attr(*, "where")=List of 2
[13:34:43.666]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:34:43.666]   ..$ ...          :<environment: 0x5627bda86a40> 
[13:34:43.666]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:43.666]  - attr(*, "resolved")= logi FALSE
[13:34:43.666]  - attr(*, "total_size")= num 616
[13:34:43.669] Packages to be attached in all futures: [n=0] 
[13:34:43.669] getGlobalsAndPackagesXApply() ... DONE
[13:34:43.669] Number of futures (= number of chunks): 2
[13:34:43.669] Launching 2 futures (chunks) ...
[13:34:43.669] Chunk #1 of 2 ...
[13:34:43.669]  - Finding globals in 'X' for chunk #1 ...
[13:34:43.670] getGlobalsAndPackages() ...
[13:34:43.670] Searching for globals...
[13:34:43.670] 
[13:34:43.670] Searching for globals ... DONE
[13:34:43.670] - globals: [0] <none>
[13:34:43.670] getGlobalsAndPackages() ... DONE
[13:34:43.670]    + additional globals found: [n=0] 
[13:34:43.670]    + additional namespaces needed: [n=0] 
[13:34:43.670]  - Finding globals in 'X' for chunk #1 ... DONE
[13:34:43.671]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:34:43.671]  - seeds: [2] <seeds>
[13:34:43.671]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:43.671] getGlobalsAndPackages() ...
[13:34:43.671] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:43.671] Resolving globals: FALSE
[13:34:43.671] Tweak future expression to call with '...' arguments ...
[13:34:43.671] {
[13:34:43.671]     do.call(function(...) {
[13:34:43.671]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:43.671]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:43.671]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:43.671]             on.exit(options(oopts), add = TRUE)
[13:34:43.671]         }
[13:34:43.671]         {
[13:34:43.671]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:43.671]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:43.671]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:43.671]                   envir = globalenv(), inherits = FALSE)
[13:34:43.671]                 ...future.FUN(...future.X_jj, ...)
[13:34:43.671]             })
[13:34:43.671]         }
[13:34:43.671]     }, args = future.call.arguments)
[13:34:43.671] }
[13:34:43.671] Tweak future expression to call with '...' arguments ... DONE
[13:34:43.672] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:43.672] 
[13:34:43.672] getGlobalsAndPackages() ... DONE
[13:34:43.672] run() for ‘Future’ ...
[13:34:43.672] - state: ‘created’
[13:34:43.672] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:34:43.686] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:43.686] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:34:43.686]   - Field: ‘node’
[13:34:43.686]   - Field: ‘label’
[13:34:43.686]   - Field: ‘local’
[13:34:43.687]   - Field: ‘owner’
[13:34:43.687]   - Field: ‘envir’
[13:34:43.687]   - Field: ‘workers’
[13:34:43.687]   - Field: ‘packages’
[13:34:43.687]   - Field: ‘gc’
[13:34:43.687]   - Field: ‘conditions’
[13:34:43.687]   - Field: ‘persistent’
[13:34:43.687]   - Field: ‘expr’
[13:34:43.687]   - Field: ‘uuid’
[13:34:43.687]   - Field: ‘seed’
[13:34:43.688]   - Field: ‘version’
[13:34:43.688]   - Field: ‘result’
[13:34:43.688]   - Field: ‘asynchronous’
[13:34:43.688]   - Field: ‘calls’
[13:34:43.688]   - Field: ‘globals’
[13:34:43.688]   - Field: ‘stdout’
[13:34:43.688]   - Field: ‘earlySignal’
[13:34:43.688]   - Field: ‘lazy’
[13:34:43.688]   - Field: ‘state’
[13:34:43.688] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:34:43.689] - Launch lazy future ...
[13:34:43.689] Packages needed by the future expression (n = 0): <none>
[13:34:43.689] Packages needed by future strategies (n = 0): <none>
[13:34:43.689] {
[13:34:43.689]     {
[13:34:43.689]         {
[13:34:43.689]             ...future.startTime <- base::Sys.time()
[13:34:43.689]             {
[13:34:43.689]                 {
[13:34:43.689]                   {
[13:34:43.689]                     {
[13:34:43.689]                       base::local({
[13:34:43.689]                         has_future <- base::requireNamespace("future", 
[13:34:43.689]                           quietly = TRUE)
[13:34:43.689]                         if (has_future) {
[13:34:43.689]                           ns <- base::getNamespace("future")
[13:34:43.689]                           version <- ns[[".package"]][["version"]]
[13:34:43.689]                           if (is.null(version)) 
[13:34:43.689]                             version <- utils::packageVersion("future")
[13:34:43.689]                         }
[13:34:43.689]                         else {
[13:34:43.689]                           version <- NULL
[13:34:43.689]                         }
[13:34:43.689]                         if (!has_future || version < "1.8.0") {
[13:34:43.689]                           info <- base::c(r_version = base::gsub("R version ", 
[13:34:43.689]                             "", base::R.version$version.string), 
[13:34:43.689]                             platform = base::sprintf("%s (%s-bit)", 
[13:34:43.689]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:34:43.689]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:34:43.689]                               "release", "version")], collapse = " "), 
[13:34:43.689]                             hostname = base::Sys.info()[["nodename"]])
[13:34:43.689]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:34:43.689]                             info)
[13:34:43.689]                           info <- base::paste(info, collapse = "; ")
[13:34:43.689]                           if (!has_future) {
[13:34:43.689]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:34:43.689]                               info)
[13:34:43.689]                           }
[13:34:43.689]                           else {
[13:34:43.689]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:34:43.689]                               info, version)
[13:34:43.689]                           }
[13:34:43.689]                           base::stop(msg)
[13:34:43.689]                         }
[13:34:43.689]                       })
[13:34:43.689]                     }
[13:34:43.689]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:34:43.689]                     base::options(mc.cores = 1L)
[13:34:43.689]                   }
[13:34:43.689]                   ...future.strategy.old <- future::plan("list")
[13:34:43.689]                   options(future.plan = NULL)
[13:34:43.689]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:34:43.689]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:34:43.689]                 }
[13:34:43.689]                 ...future.workdir <- getwd()
[13:34:43.689]             }
[13:34:43.689]             ...future.oldOptions <- base::as.list(base::.Options)
[13:34:43.689]             ...future.oldEnvVars <- base::Sys.getenv()
[13:34:43.689]         }
[13:34:43.689]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:34:43.689]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:34:43.689]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:34:43.689]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:34:43.689]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:34:43.689]             future.stdout.windows.reencode = NULL, width = 80L)
[13:34:43.689]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:34:43.689]             base::names(...future.oldOptions))
[13:34:43.689]     }
[13:34:43.689]     if (FALSE) {
[13:34:43.689]     }
[13:34:43.689]     else {
[13:34:43.689]         if (TRUE) {
[13:34:43.689]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:34:43.689]                 open = "w")
[13:34:43.689]         }
[13:34:43.689]         else {
[13:34:43.689]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:34:43.689]                 windows = "NUL", "/dev/null"), open = "w")
[13:34:43.689]         }
[13:34:43.689]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:34:43.689]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:34:43.689]             base::sink(type = "output", split = FALSE)
[13:34:43.689]             base::close(...future.stdout)
[13:34:43.689]         }, add = TRUE)
[13:34:43.689]     }
[13:34:43.689]     ...future.frame <- base::sys.nframe()
[13:34:43.689]     ...future.conditions <- base::list()
[13:34:43.689]     ...future.rng <- base::globalenv()$.Random.seed
[13:34:43.689]     if (FALSE) {
[13:34:43.689]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:34:43.689]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:34:43.689]     }
[13:34:43.689]     ...future.result <- base::tryCatch({
[13:34:43.689]         base::withCallingHandlers({
[13:34:43.689]             ...future.value <- base::withVisible(base::local({
[13:34:43.689]                 ...future.makeSendCondition <- base::local({
[13:34:43.689]                   sendCondition <- NULL
[13:34:43.689]                   function(frame = 1L) {
[13:34:43.689]                     if (is.function(sendCondition)) 
[13:34:43.689]                       return(sendCondition)
[13:34:43.689]                     ns <- getNamespace("parallel")
[13:34:43.689]                     if (exists("sendData", mode = "function", 
[13:34:43.689]                       envir = ns)) {
[13:34:43.689]                       parallel_sendData <- get("sendData", mode = "function", 
[13:34:43.689]                         envir = ns)
[13:34:43.689]                       envir <- sys.frame(frame)
[13:34:43.689]                       master <- NULL
[13:34:43.689]                       while (!identical(envir, .GlobalEnv) && 
[13:34:43.689]                         !identical(envir, emptyenv())) {
[13:34:43.689]                         if (exists("master", mode = "list", envir = envir, 
[13:34:43.689]                           inherits = FALSE)) {
[13:34:43.689]                           master <- get("master", mode = "list", 
[13:34:43.689]                             envir = envir, inherits = FALSE)
[13:34:43.689]                           if (inherits(master, c("SOCKnode", 
[13:34:43.689]                             "SOCK0node"))) {
[13:34:43.689]                             sendCondition <<- function(cond) {
[13:34:43.689]                               data <- list(type = "VALUE", value = cond, 
[13:34:43.689]                                 success = TRUE)
[13:34:43.689]                               parallel_sendData(master, data)
[13:34:43.689]                             }
[13:34:43.689]                             return(sendCondition)
[13:34:43.689]                           }
[13:34:43.689]                         }
[13:34:43.689]                         frame <- frame + 1L
[13:34:43.689]                         envir <- sys.frame(frame)
[13:34:43.689]                       }
[13:34:43.689]                     }
[13:34:43.689]                     sendCondition <<- function(cond) NULL
[13:34:43.689]                   }
[13:34:43.689]                 })
[13:34:43.689]                 withCallingHandlers({
[13:34:43.689]                   {
[13:34:43.689]                     do.call(function(...) {
[13:34:43.689]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:43.689]                       if (!identical(...future.globals.maxSize.org, 
[13:34:43.689]                         ...future.globals.maxSize)) {
[13:34:43.689]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:43.689]                         on.exit(options(oopts), add = TRUE)
[13:34:43.689]                       }
[13:34:43.689]                       {
[13:34:43.689]                         lapply(seq_along(...future.elements_ii), 
[13:34:43.689]                           FUN = function(jj) {
[13:34:43.689]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:43.689]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:43.689]                               envir = globalenv(), inherits = FALSE)
[13:34:43.689]                             ...future.FUN(...future.X_jj, ...)
[13:34:43.689]                           })
[13:34:43.689]                       }
[13:34:43.689]                     }, args = future.call.arguments)
[13:34:43.689]                   }
[13:34:43.689]                 }, immediateCondition = function(cond) {
[13:34:43.689]                   sendCondition <- ...future.makeSendCondition()
[13:34:43.689]                   sendCondition(cond)
[13:34:43.689]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:43.689]                   {
[13:34:43.689]                     inherits <- base::inherits
[13:34:43.689]                     invokeRestart <- base::invokeRestart
[13:34:43.689]                     is.null <- base::is.null
[13:34:43.689]                     muffled <- FALSE
[13:34:43.689]                     if (inherits(cond, "message")) {
[13:34:43.689]                       muffled <- grepl(pattern, "muffleMessage")
[13:34:43.689]                       if (muffled) 
[13:34:43.689]                         invokeRestart("muffleMessage")
[13:34:43.689]                     }
[13:34:43.689]                     else if (inherits(cond, "warning")) {
[13:34:43.689]                       muffled <- grepl(pattern, "muffleWarning")
[13:34:43.689]                       if (muffled) 
[13:34:43.689]                         invokeRestart("muffleWarning")
[13:34:43.689]                     }
[13:34:43.689]                     else if (inherits(cond, "condition")) {
[13:34:43.689]                       if (!is.null(pattern)) {
[13:34:43.689]                         computeRestarts <- base::computeRestarts
[13:34:43.689]                         grepl <- base::grepl
[13:34:43.689]                         restarts <- computeRestarts(cond)
[13:34:43.689]                         for (restart in restarts) {
[13:34:43.689]                           name <- restart$name
[13:34:43.689]                           if (is.null(name)) 
[13:34:43.689]                             next
[13:34:43.689]                           if (!grepl(pattern, name)) 
[13:34:43.689]                             next
[13:34:43.689]                           invokeRestart(restart)
[13:34:43.689]                           muffled <- TRUE
[13:34:43.689]                           break
[13:34:43.689]                         }
[13:34:43.689]                       }
[13:34:43.689]                     }
[13:34:43.689]                     invisible(muffled)
[13:34:43.689]                   }
[13:34:43.689]                   muffleCondition(cond)
[13:34:43.689]                 })
[13:34:43.689]             }))
[13:34:43.689]             future::FutureResult(value = ...future.value$value, 
[13:34:43.689]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:43.689]                   ...future.rng), globalenv = if (FALSE) 
[13:34:43.689]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:34:43.689]                     ...future.globalenv.names))
[13:34:43.689]                 else NULL, started = ...future.startTime, version = "1.8")
[13:34:43.689]         }, condition = base::local({
[13:34:43.689]             c <- base::c
[13:34:43.689]             inherits <- base::inherits
[13:34:43.689]             invokeRestart <- base::invokeRestart
[13:34:43.689]             length <- base::length
[13:34:43.689]             list <- base::list
[13:34:43.689]             seq.int <- base::seq.int
[13:34:43.689]             signalCondition <- base::signalCondition
[13:34:43.689]             sys.calls <- base::sys.calls
[13:34:43.689]             `[[` <- base::`[[`
[13:34:43.689]             `+` <- base::`+`
[13:34:43.689]             `<<-` <- base::`<<-`
[13:34:43.689]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:34:43.689]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:34:43.689]                   3L)]
[13:34:43.689]             }
[13:34:43.689]             function(cond) {
[13:34:43.689]                 is_error <- inherits(cond, "error")
[13:34:43.689]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:34:43.689]                   NULL)
[13:34:43.689]                 if (is_error) {
[13:34:43.689]                   sessionInformation <- function() {
[13:34:43.689]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:34:43.689]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:34:43.689]                       search = base::search(), system = base::Sys.info())
[13:34:43.689]                   }
[13:34:43.689]                   ...future.conditions[[length(...future.conditions) + 
[13:34:43.689]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:34:43.689]                     cond$call), session = sessionInformation(), 
[13:34:43.689]                     timestamp = base::Sys.time(), signaled = 0L)
[13:34:43.689]                   signalCondition(cond)
[13:34:43.689]                 }
[13:34:43.689]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:34:43.689]                 "immediateCondition"))) {
[13:34:43.689]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:34:43.689]                   ...future.conditions[[length(...future.conditions) + 
[13:34:43.689]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:34:43.689]                   if (TRUE && !signal) {
[13:34:43.689]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:43.689]                     {
[13:34:43.689]                       inherits <- base::inherits
[13:34:43.689]                       invokeRestart <- base::invokeRestart
[13:34:43.689]                       is.null <- base::is.null
[13:34:43.689]                       muffled <- FALSE
[13:34:43.689]                       if (inherits(cond, "message")) {
[13:34:43.689]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:43.689]                         if (muffled) 
[13:34:43.689]                           invokeRestart("muffleMessage")
[13:34:43.689]                       }
[13:34:43.689]                       else if (inherits(cond, "warning")) {
[13:34:43.689]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:43.689]                         if (muffled) 
[13:34:43.689]                           invokeRestart("muffleWarning")
[13:34:43.689]                       }
[13:34:43.689]                       else if (inherits(cond, "condition")) {
[13:34:43.689]                         if (!is.null(pattern)) {
[13:34:43.689]                           computeRestarts <- base::computeRestarts
[13:34:43.689]                           grepl <- base::grepl
[13:34:43.689]                           restarts <- computeRestarts(cond)
[13:34:43.689]                           for (restart in restarts) {
[13:34:43.689]                             name <- restart$name
[13:34:43.689]                             if (is.null(name)) 
[13:34:43.689]                               next
[13:34:43.689]                             if (!grepl(pattern, name)) 
[13:34:43.689]                               next
[13:34:43.689]                             invokeRestart(restart)
[13:34:43.689]                             muffled <- TRUE
[13:34:43.689]                             break
[13:34:43.689]                           }
[13:34:43.689]                         }
[13:34:43.689]                       }
[13:34:43.689]                       invisible(muffled)
[13:34:43.689]                     }
[13:34:43.689]                     muffleCondition(cond, pattern = "^muffle")
[13:34:43.689]                   }
[13:34:43.689]                 }
[13:34:43.689]                 else {
[13:34:43.689]                   if (TRUE) {
[13:34:43.689]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:43.689]                     {
[13:34:43.689]                       inherits <- base::inherits
[13:34:43.689]                       invokeRestart <- base::invokeRestart
[13:34:43.689]                       is.null <- base::is.null
[13:34:43.689]                       muffled <- FALSE
[13:34:43.689]                       if (inherits(cond, "message")) {
[13:34:43.689]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:43.689]                         if (muffled) 
[13:34:43.689]                           invokeRestart("muffleMessage")
[13:34:43.689]                       }
[13:34:43.689]                       else if (inherits(cond, "warning")) {
[13:34:43.689]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:43.689]                         if (muffled) 
[13:34:43.689]                           invokeRestart("muffleWarning")
[13:34:43.689]                       }
[13:34:43.689]                       else if (inherits(cond, "condition")) {
[13:34:43.689]                         if (!is.null(pattern)) {
[13:34:43.689]                           computeRestarts <- base::computeRestarts
[13:34:43.689]                           grepl <- base::grepl
[13:34:43.689]                           restarts <- computeRestarts(cond)
[13:34:43.689]                           for (restart in restarts) {
[13:34:43.689]                             name <- restart$name
[13:34:43.689]                             if (is.null(name)) 
[13:34:43.689]                               next
[13:34:43.689]                             if (!grepl(pattern, name)) 
[13:34:43.689]                               next
[13:34:43.689]                             invokeRestart(restart)
[13:34:43.689]                             muffled <- TRUE
[13:34:43.689]                             break
[13:34:43.689]                           }
[13:34:43.689]                         }
[13:34:43.689]                       }
[13:34:43.689]                       invisible(muffled)
[13:34:43.689]                     }
[13:34:43.689]                     muffleCondition(cond, pattern = "^muffle")
[13:34:43.689]                   }
[13:34:43.689]                 }
[13:34:43.689]             }
[13:34:43.689]         }))
[13:34:43.689]     }, error = function(ex) {
[13:34:43.689]         base::structure(base::list(value = NULL, visible = NULL, 
[13:34:43.689]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:43.689]                 ...future.rng), started = ...future.startTime, 
[13:34:43.689]             finished = Sys.time(), session_uuid = NA_character_, 
[13:34:43.689]             version = "1.8"), class = "FutureResult")
[13:34:43.689]     }, finally = {
[13:34:43.689]         if (!identical(...future.workdir, getwd())) 
[13:34:43.689]             setwd(...future.workdir)
[13:34:43.689]         {
[13:34:43.689]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:34:43.689]                 ...future.oldOptions$nwarnings <- NULL
[13:34:43.689]             }
[13:34:43.689]             base::options(...future.oldOptions)
[13:34:43.689]             if (.Platform$OS.type == "windows") {
[13:34:43.689]                 old_names <- names(...future.oldEnvVars)
[13:34:43.689]                 envs <- base::Sys.getenv()
[13:34:43.689]                 names <- names(envs)
[13:34:43.689]                 common <- intersect(names, old_names)
[13:34:43.689]                 added <- setdiff(names, old_names)
[13:34:43.689]                 removed <- setdiff(old_names, names)
[13:34:43.689]                 changed <- common[...future.oldEnvVars[common] != 
[13:34:43.689]                   envs[common]]
[13:34:43.689]                 NAMES <- toupper(changed)
[13:34:43.689]                 args <- list()
[13:34:43.689]                 for (kk in seq_along(NAMES)) {
[13:34:43.689]                   name <- changed[[kk]]
[13:34:43.689]                   NAME <- NAMES[[kk]]
[13:34:43.689]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:43.689]                     next
[13:34:43.689]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:43.689]                 }
[13:34:43.689]                 NAMES <- toupper(added)
[13:34:43.689]                 for (kk in seq_along(NAMES)) {
[13:34:43.689]                   name <- added[[kk]]
[13:34:43.689]                   NAME <- NAMES[[kk]]
[13:34:43.689]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:43.689]                     next
[13:34:43.689]                   args[[name]] <- ""
[13:34:43.689]                 }
[13:34:43.689]                 NAMES <- toupper(removed)
[13:34:43.689]                 for (kk in seq_along(NAMES)) {
[13:34:43.689]                   name <- removed[[kk]]
[13:34:43.689]                   NAME <- NAMES[[kk]]
[13:34:43.689]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:43.689]                     next
[13:34:43.689]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:43.689]                 }
[13:34:43.689]                 if (length(args) > 0) 
[13:34:43.689]                   base::do.call(base::Sys.setenv, args = args)
[13:34:43.689]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:34:43.689]             }
[13:34:43.689]             else {
[13:34:43.689]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:34:43.689]             }
[13:34:43.689]             {
[13:34:43.689]                 if (base::length(...future.futureOptionsAdded) > 
[13:34:43.689]                   0L) {
[13:34:43.689]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:34:43.689]                   base::names(opts) <- ...future.futureOptionsAdded
[13:34:43.689]                   base::options(opts)
[13:34:43.689]                 }
[13:34:43.689]                 {
[13:34:43.689]                   {
[13:34:43.689]                     base::options(mc.cores = ...future.mc.cores.old)
[13:34:43.689]                     NULL
[13:34:43.689]                   }
[13:34:43.689]                   options(future.plan = NULL)
[13:34:43.689]                   if (is.na(NA_character_)) 
[13:34:43.689]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:34:43.689]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:34:43.689]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:34:43.689]                     .init = FALSE)
[13:34:43.689]                 }
[13:34:43.689]             }
[13:34:43.689]         }
[13:34:43.689]     })
[13:34:43.689]     if (TRUE) {
[13:34:43.689]         base::sink(type = "output", split = FALSE)
[13:34:43.689]         if (TRUE) {
[13:34:43.689]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:34:43.689]         }
[13:34:43.689]         else {
[13:34:43.689]             ...future.result["stdout"] <- base::list(NULL)
[13:34:43.689]         }
[13:34:43.689]         base::close(...future.stdout)
[13:34:43.689]         ...future.stdout <- NULL
[13:34:43.689]     }
[13:34:43.689]     ...future.result$conditions <- ...future.conditions
[13:34:43.689]     ...future.result$finished <- base::Sys.time()
[13:34:43.689]     ...future.result
[13:34:43.689] }
[13:34:43.692] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[13:34:43.692] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[13:34:43.693] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[13:34:43.693] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[13:34:43.693] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[13:34:43.693] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[13:34:43.694] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[13:34:43.694] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[13:34:43.694] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[13:34:43.694] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[13:34:43.694] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[13:34:43.695] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[13:34:43.695] MultisessionFuture started
[13:34:43.695] - Launch lazy future ... done
[13:34:43.695] run() for ‘MultisessionFuture’ ... done
[13:34:43.695] Created future:
[13:34:43.695] MultisessionFuture:
[13:34:43.695] Label: ‘future_replicate-1’
[13:34:43.695] Expression:
[13:34:43.695] {
[13:34:43.695]     do.call(function(...) {
[13:34:43.695]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:43.695]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:43.695]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:43.695]             on.exit(options(oopts), add = TRUE)
[13:34:43.695]         }
[13:34:43.695]         {
[13:34:43.695]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:43.695]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:43.695]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:43.695]                   envir = globalenv(), inherits = FALSE)
[13:34:43.695]                 ...future.FUN(...future.X_jj, ...)
[13:34:43.695]             })
[13:34:43.695]         }
[13:34:43.695]     }, args = future.call.arguments)
[13:34:43.695] }
[13:34:43.695] Lazy evaluation: FALSE
[13:34:43.695] Asynchronous evaluation: TRUE
[13:34:43.695] Local evaluation: TRUE
[13:34:43.695] Environment: R_GlobalEnv
[13:34:43.695] Capture standard output: TRUE
[13:34:43.695] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:34:43.695] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:34:43.695] Packages: <none>
[13:34:43.695] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:34:43.695] Resolved: FALSE
[13:34:43.695] Value: <not collected>
[13:34:43.695] Conditions captured: <none>
[13:34:43.695] Early signaling: FALSE
[13:34:43.695] Owner process: b8cf10c3-b112-c8f9-9398-a44000e21728
[13:34:43.695] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:43.707] Chunk #1 of 2 ... DONE
[13:34:43.707] Chunk #2 of 2 ...
[13:34:43.707]  - Finding globals in 'X' for chunk #2 ...
[13:34:43.707] getGlobalsAndPackages() ...
[13:34:43.708] Searching for globals...
[13:34:43.708] 
[13:34:43.708] Searching for globals ... DONE
[13:34:43.708] - globals: [0] <none>
[13:34:43.708] getGlobalsAndPackages() ... DONE
[13:34:43.708]    + additional globals found: [n=0] 
[13:34:43.708]    + additional namespaces needed: [n=0] 
[13:34:43.708]  - Finding globals in 'X' for chunk #2 ... DONE
[13:34:43.708]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:34:43.708]  - seeds: [3] <seeds>
[13:34:43.709]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:43.709] getGlobalsAndPackages() ...
[13:34:43.709] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:43.709] Resolving globals: FALSE
[13:34:43.709] Tweak future expression to call with '...' arguments ...
[13:34:43.709] {
[13:34:43.709]     do.call(function(...) {
[13:34:43.709]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:43.709]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:43.709]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:43.709]             on.exit(options(oopts), add = TRUE)
[13:34:43.709]         }
[13:34:43.709]         {
[13:34:43.709]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:43.709]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:43.709]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:43.709]                   envir = globalenv(), inherits = FALSE)
[13:34:43.709]                 ...future.FUN(...future.X_jj, ...)
[13:34:43.709]             })
[13:34:43.709]         }
[13:34:43.709]     }, args = future.call.arguments)
[13:34:43.709] }
[13:34:43.709] Tweak future expression to call with '...' arguments ... DONE
[13:34:43.710] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:43.710] 
[13:34:43.710] getGlobalsAndPackages() ... DONE
[13:34:43.710] run() for ‘Future’ ...
[13:34:43.710] - state: ‘created’
[13:34:43.710] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:34:43.724] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:43.724] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:34:43.724]   - Field: ‘node’
[13:34:43.724]   - Field: ‘label’
[13:34:43.724]   - Field: ‘local’
[13:34:43.724]   - Field: ‘owner’
[13:34:43.724]   - Field: ‘envir’
[13:34:43.724]   - Field: ‘workers’
[13:34:43.724]   - Field: ‘packages’
[13:34:43.725]   - Field: ‘gc’
[13:34:43.725]   - Field: ‘conditions’
[13:34:43.725]   - Field: ‘persistent’
[13:34:43.725]   - Field: ‘expr’
[13:34:43.725]   - Field: ‘uuid’
[13:34:43.725]   - Field: ‘seed’
[13:34:43.725]   - Field: ‘version’
[13:34:43.725]   - Field: ‘result’
[13:34:43.725]   - Field: ‘asynchronous’
[13:34:43.725]   - Field: ‘calls’
[13:34:43.726]   - Field: ‘globals’
[13:34:43.726]   - Field: ‘stdout’
[13:34:43.726]   - Field: ‘earlySignal’
[13:34:43.726]   - Field: ‘lazy’
[13:34:43.726]   - Field: ‘state’
[13:34:43.726] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:34:43.726] - Launch lazy future ...
[13:34:43.726] Packages needed by the future expression (n = 0): <none>
[13:34:43.726] Packages needed by future strategies (n = 0): <none>
[13:34:43.727] {
[13:34:43.727]     {
[13:34:43.727]         {
[13:34:43.727]             ...future.startTime <- base::Sys.time()
[13:34:43.727]             {
[13:34:43.727]                 {
[13:34:43.727]                   {
[13:34:43.727]                     {
[13:34:43.727]                       base::local({
[13:34:43.727]                         has_future <- base::requireNamespace("future", 
[13:34:43.727]                           quietly = TRUE)
[13:34:43.727]                         if (has_future) {
[13:34:43.727]                           ns <- base::getNamespace("future")
[13:34:43.727]                           version <- ns[[".package"]][["version"]]
[13:34:43.727]                           if (is.null(version)) 
[13:34:43.727]                             version <- utils::packageVersion("future")
[13:34:43.727]                         }
[13:34:43.727]                         else {
[13:34:43.727]                           version <- NULL
[13:34:43.727]                         }
[13:34:43.727]                         if (!has_future || version < "1.8.0") {
[13:34:43.727]                           info <- base::c(r_version = base::gsub("R version ", 
[13:34:43.727]                             "", base::R.version$version.string), 
[13:34:43.727]                             platform = base::sprintf("%s (%s-bit)", 
[13:34:43.727]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:34:43.727]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:34:43.727]                               "release", "version")], collapse = " "), 
[13:34:43.727]                             hostname = base::Sys.info()[["nodename"]])
[13:34:43.727]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:34:43.727]                             info)
[13:34:43.727]                           info <- base::paste(info, collapse = "; ")
[13:34:43.727]                           if (!has_future) {
[13:34:43.727]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:34:43.727]                               info)
[13:34:43.727]                           }
[13:34:43.727]                           else {
[13:34:43.727]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:34:43.727]                               info, version)
[13:34:43.727]                           }
[13:34:43.727]                           base::stop(msg)
[13:34:43.727]                         }
[13:34:43.727]                       })
[13:34:43.727]                     }
[13:34:43.727]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:34:43.727]                     base::options(mc.cores = 1L)
[13:34:43.727]                   }
[13:34:43.727]                   ...future.strategy.old <- future::plan("list")
[13:34:43.727]                   options(future.plan = NULL)
[13:34:43.727]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:34:43.727]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:34:43.727]                 }
[13:34:43.727]                 ...future.workdir <- getwd()
[13:34:43.727]             }
[13:34:43.727]             ...future.oldOptions <- base::as.list(base::.Options)
[13:34:43.727]             ...future.oldEnvVars <- base::Sys.getenv()
[13:34:43.727]         }
[13:34:43.727]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:34:43.727]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:34:43.727]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:34:43.727]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:34:43.727]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:34:43.727]             future.stdout.windows.reencode = NULL, width = 80L)
[13:34:43.727]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:34:43.727]             base::names(...future.oldOptions))
[13:34:43.727]     }
[13:34:43.727]     if (FALSE) {
[13:34:43.727]     }
[13:34:43.727]     else {
[13:34:43.727]         if (TRUE) {
[13:34:43.727]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:34:43.727]                 open = "w")
[13:34:43.727]         }
[13:34:43.727]         else {
[13:34:43.727]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:34:43.727]                 windows = "NUL", "/dev/null"), open = "w")
[13:34:43.727]         }
[13:34:43.727]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:34:43.727]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:34:43.727]             base::sink(type = "output", split = FALSE)
[13:34:43.727]             base::close(...future.stdout)
[13:34:43.727]         }, add = TRUE)
[13:34:43.727]     }
[13:34:43.727]     ...future.frame <- base::sys.nframe()
[13:34:43.727]     ...future.conditions <- base::list()
[13:34:43.727]     ...future.rng <- base::globalenv()$.Random.seed
[13:34:43.727]     if (FALSE) {
[13:34:43.727]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:34:43.727]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:34:43.727]     }
[13:34:43.727]     ...future.result <- base::tryCatch({
[13:34:43.727]         base::withCallingHandlers({
[13:34:43.727]             ...future.value <- base::withVisible(base::local({
[13:34:43.727]                 ...future.makeSendCondition <- base::local({
[13:34:43.727]                   sendCondition <- NULL
[13:34:43.727]                   function(frame = 1L) {
[13:34:43.727]                     if (is.function(sendCondition)) 
[13:34:43.727]                       return(sendCondition)
[13:34:43.727]                     ns <- getNamespace("parallel")
[13:34:43.727]                     if (exists("sendData", mode = "function", 
[13:34:43.727]                       envir = ns)) {
[13:34:43.727]                       parallel_sendData <- get("sendData", mode = "function", 
[13:34:43.727]                         envir = ns)
[13:34:43.727]                       envir <- sys.frame(frame)
[13:34:43.727]                       master <- NULL
[13:34:43.727]                       while (!identical(envir, .GlobalEnv) && 
[13:34:43.727]                         !identical(envir, emptyenv())) {
[13:34:43.727]                         if (exists("master", mode = "list", envir = envir, 
[13:34:43.727]                           inherits = FALSE)) {
[13:34:43.727]                           master <- get("master", mode = "list", 
[13:34:43.727]                             envir = envir, inherits = FALSE)
[13:34:43.727]                           if (inherits(master, c("SOCKnode", 
[13:34:43.727]                             "SOCK0node"))) {
[13:34:43.727]                             sendCondition <<- function(cond) {
[13:34:43.727]                               data <- list(type = "VALUE", value = cond, 
[13:34:43.727]                                 success = TRUE)
[13:34:43.727]                               parallel_sendData(master, data)
[13:34:43.727]                             }
[13:34:43.727]                             return(sendCondition)
[13:34:43.727]                           }
[13:34:43.727]                         }
[13:34:43.727]                         frame <- frame + 1L
[13:34:43.727]                         envir <- sys.frame(frame)
[13:34:43.727]                       }
[13:34:43.727]                     }
[13:34:43.727]                     sendCondition <<- function(cond) NULL
[13:34:43.727]                   }
[13:34:43.727]                 })
[13:34:43.727]                 withCallingHandlers({
[13:34:43.727]                   {
[13:34:43.727]                     do.call(function(...) {
[13:34:43.727]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:43.727]                       if (!identical(...future.globals.maxSize.org, 
[13:34:43.727]                         ...future.globals.maxSize)) {
[13:34:43.727]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:43.727]                         on.exit(options(oopts), add = TRUE)
[13:34:43.727]                       }
[13:34:43.727]                       {
[13:34:43.727]                         lapply(seq_along(...future.elements_ii), 
[13:34:43.727]                           FUN = function(jj) {
[13:34:43.727]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:43.727]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:43.727]                               envir = globalenv(), inherits = FALSE)
[13:34:43.727]                             ...future.FUN(...future.X_jj, ...)
[13:34:43.727]                           })
[13:34:43.727]                       }
[13:34:43.727]                     }, args = future.call.arguments)
[13:34:43.727]                   }
[13:34:43.727]                 }, immediateCondition = function(cond) {
[13:34:43.727]                   sendCondition <- ...future.makeSendCondition()
[13:34:43.727]                   sendCondition(cond)
[13:34:43.727]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:43.727]                   {
[13:34:43.727]                     inherits <- base::inherits
[13:34:43.727]                     invokeRestart <- base::invokeRestart
[13:34:43.727]                     is.null <- base::is.null
[13:34:43.727]                     muffled <- FALSE
[13:34:43.727]                     if (inherits(cond, "message")) {
[13:34:43.727]                       muffled <- grepl(pattern, "muffleMessage")
[13:34:43.727]                       if (muffled) 
[13:34:43.727]                         invokeRestart("muffleMessage")
[13:34:43.727]                     }
[13:34:43.727]                     else if (inherits(cond, "warning")) {
[13:34:43.727]                       muffled <- grepl(pattern, "muffleWarning")
[13:34:43.727]                       if (muffled) 
[13:34:43.727]                         invokeRestart("muffleWarning")
[13:34:43.727]                     }
[13:34:43.727]                     else if (inherits(cond, "condition")) {
[13:34:43.727]                       if (!is.null(pattern)) {
[13:34:43.727]                         computeRestarts <- base::computeRestarts
[13:34:43.727]                         grepl <- base::grepl
[13:34:43.727]                         restarts <- computeRestarts(cond)
[13:34:43.727]                         for (restart in restarts) {
[13:34:43.727]                           name <- restart$name
[13:34:43.727]                           if (is.null(name)) 
[13:34:43.727]                             next
[13:34:43.727]                           if (!grepl(pattern, name)) 
[13:34:43.727]                             next
[13:34:43.727]                           invokeRestart(restart)
[13:34:43.727]                           muffled <- TRUE
[13:34:43.727]                           break
[13:34:43.727]                         }
[13:34:43.727]                       }
[13:34:43.727]                     }
[13:34:43.727]                     invisible(muffled)
[13:34:43.727]                   }
[13:34:43.727]                   muffleCondition(cond)
[13:34:43.727]                 })
[13:34:43.727]             }))
[13:34:43.727]             future::FutureResult(value = ...future.value$value, 
[13:34:43.727]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:43.727]                   ...future.rng), globalenv = if (FALSE) 
[13:34:43.727]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:34:43.727]                     ...future.globalenv.names))
[13:34:43.727]                 else NULL, started = ...future.startTime, version = "1.8")
[13:34:43.727]         }, condition = base::local({
[13:34:43.727]             c <- base::c
[13:34:43.727]             inherits <- base::inherits
[13:34:43.727]             invokeRestart <- base::invokeRestart
[13:34:43.727]             length <- base::length
[13:34:43.727]             list <- base::list
[13:34:43.727]             seq.int <- base::seq.int
[13:34:43.727]             signalCondition <- base::signalCondition
[13:34:43.727]             sys.calls <- base::sys.calls
[13:34:43.727]             `[[` <- base::`[[`
[13:34:43.727]             `+` <- base::`+`
[13:34:43.727]             `<<-` <- base::`<<-`
[13:34:43.727]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:34:43.727]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:34:43.727]                   3L)]
[13:34:43.727]             }
[13:34:43.727]             function(cond) {
[13:34:43.727]                 is_error <- inherits(cond, "error")
[13:34:43.727]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:34:43.727]                   NULL)
[13:34:43.727]                 if (is_error) {
[13:34:43.727]                   sessionInformation <- function() {
[13:34:43.727]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:34:43.727]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:34:43.727]                       search = base::search(), system = base::Sys.info())
[13:34:43.727]                   }
[13:34:43.727]                   ...future.conditions[[length(...future.conditions) + 
[13:34:43.727]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:34:43.727]                     cond$call), session = sessionInformation(), 
[13:34:43.727]                     timestamp = base::Sys.time(), signaled = 0L)
[13:34:43.727]                   signalCondition(cond)
[13:34:43.727]                 }
[13:34:43.727]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:34:43.727]                 "immediateCondition"))) {
[13:34:43.727]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:34:43.727]                   ...future.conditions[[length(...future.conditions) + 
[13:34:43.727]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:34:43.727]                   if (TRUE && !signal) {
[13:34:43.727]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:43.727]                     {
[13:34:43.727]                       inherits <- base::inherits
[13:34:43.727]                       invokeRestart <- base::invokeRestart
[13:34:43.727]                       is.null <- base::is.null
[13:34:43.727]                       muffled <- FALSE
[13:34:43.727]                       if (inherits(cond, "message")) {
[13:34:43.727]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:43.727]                         if (muffled) 
[13:34:43.727]                           invokeRestart("muffleMessage")
[13:34:43.727]                       }
[13:34:43.727]                       else if (inherits(cond, "warning")) {
[13:34:43.727]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:43.727]                         if (muffled) 
[13:34:43.727]                           invokeRestart("muffleWarning")
[13:34:43.727]                       }
[13:34:43.727]                       else if (inherits(cond, "condition")) {
[13:34:43.727]                         if (!is.null(pattern)) {
[13:34:43.727]                           computeRestarts <- base::computeRestarts
[13:34:43.727]                           grepl <- base::grepl
[13:34:43.727]                           restarts <- computeRestarts(cond)
[13:34:43.727]                           for (restart in restarts) {
[13:34:43.727]                             name <- restart$name
[13:34:43.727]                             if (is.null(name)) 
[13:34:43.727]                               next
[13:34:43.727]                             if (!grepl(pattern, name)) 
[13:34:43.727]                               next
[13:34:43.727]                             invokeRestart(restart)
[13:34:43.727]                             muffled <- TRUE
[13:34:43.727]                             break
[13:34:43.727]                           }
[13:34:43.727]                         }
[13:34:43.727]                       }
[13:34:43.727]                       invisible(muffled)
[13:34:43.727]                     }
[13:34:43.727]                     muffleCondition(cond, pattern = "^muffle")
[13:34:43.727]                   }
[13:34:43.727]                 }
[13:34:43.727]                 else {
[13:34:43.727]                   if (TRUE) {
[13:34:43.727]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:43.727]                     {
[13:34:43.727]                       inherits <- base::inherits
[13:34:43.727]                       invokeRestart <- base::invokeRestart
[13:34:43.727]                       is.null <- base::is.null
[13:34:43.727]                       muffled <- FALSE
[13:34:43.727]                       if (inherits(cond, "message")) {
[13:34:43.727]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:43.727]                         if (muffled) 
[13:34:43.727]                           invokeRestart("muffleMessage")
[13:34:43.727]                       }
[13:34:43.727]                       else if (inherits(cond, "warning")) {
[13:34:43.727]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:43.727]                         if (muffled) 
[13:34:43.727]                           invokeRestart("muffleWarning")
[13:34:43.727]                       }
[13:34:43.727]                       else if (inherits(cond, "condition")) {
[13:34:43.727]                         if (!is.null(pattern)) {
[13:34:43.727]                           computeRestarts <- base::computeRestarts
[13:34:43.727]                           grepl <- base::grepl
[13:34:43.727]                           restarts <- computeRestarts(cond)
[13:34:43.727]                           for (restart in restarts) {
[13:34:43.727]                             name <- restart$name
[13:34:43.727]                             if (is.null(name)) 
[13:34:43.727]                               next
[13:34:43.727]                             if (!grepl(pattern, name)) 
[13:34:43.727]                               next
[13:34:43.727]                             invokeRestart(restart)
[13:34:43.727]                             muffled <- TRUE
[13:34:43.727]                             break
[13:34:43.727]                           }
[13:34:43.727]                         }
[13:34:43.727]                       }
[13:34:43.727]                       invisible(muffled)
[13:34:43.727]                     }
[13:34:43.727]                     muffleCondition(cond, pattern = "^muffle")
[13:34:43.727]                   }
[13:34:43.727]                 }
[13:34:43.727]             }
[13:34:43.727]         }))
[13:34:43.727]     }, error = function(ex) {
[13:34:43.727]         base::structure(base::list(value = NULL, visible = NULL, 
[13:34:43.727]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:43.727]                 ...future.rng), started = ...future.startTime, 
[13:34:43.727]             finished = Sys.time(), session_uuid = NA_character_, 
[13:34:43.727]             version = "1.8"), class = "FutureResult")
[13:34:43.727]     }, finally = {
[13:34:43.727]         if (!identical(...future.workdir, getwd())) 
[13:34:43.727]             setwd(...future.workdir)
[13:34:43.727]         {
[13:34:43.727]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:34:43.727]                 ...future.oldOptions$nwarnings <- NULL
[13:34:43.727]             }
[13:34:43.727]             base::options(...future.oldOptions)
[13:34:43.727]             if (.Platform$OS.type == "windows") {
[13:34:43.727]                 old_names <- names(...future.oldEnvVars)
[13:34:43.727]                 envs <- base::Sys.getenv()
[13:34:43.727]                 names <- names(envs)
[13:34:43.727]                 common <- intersect(names, old_names)
[13:34:43.727]                 added <- setdiff(names, old_names)
[13:34:43.727]                 removed <- setdiff(old_names, names)
[13:34:43.727]                 changed <- common[...future.oldEnvVars[common] != 
[13:34:43.727]                   envs[common]]
[13:34:43.727]                 NAMES <- toupper(changed)
[13:34:43.727]                 args <- list()
[13:34:43.727]                 for (kk in seq_along(NAMES)) {
[13:34:43.727]                   name <- changed[[kk]]
[13:34:43.727]                   NAME <- NAMES[[kk]]
[13:34:43.727]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:43.727]                     next
[13:34:43.727]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:43.727]                 }
[13:34:43.727]                 NAMES <- toupper(added)
[13:34:43.727]                 for (kk in seq_along(NAMES)) {
[13:34:43.727]                   name <- added[[kk]]
[13:34:43.727]                   NAME <- NAMES[[kk]]
[13:34:43.727]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:43.727]                     next
[13:34:43.727]                   args[[name]] <- ""
[13:34:43.727]                 }
[13:34:43.727]                 NAMES <- toupper(removed)
[13:34:43.727]                 for (kk in seq_along(NAMES)) {
[13:34:43.727]                   name <- removed[[kk]]
[13:34:43.727]                   NAME <- NAMES[[kk]]
[13:34:43.727]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:43.727]                     next
[13:34:43.727]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:43.727]                 }
[13:34:43.727]                 if (length(args) > 0) 
[13:34:43.727]                   base::do.call(base::Sys.setenv, args = args)
[13:34:43.727]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:34:43.727]             }
[13:34:43.727]             else {
[13:34:43.727]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:34:43.727]             }
[13:34:43.727]             {
[13:34:43.727]                 if (base::length(...future.futureOptionsAdded) > 
[13:34:43.727]                   0L) {
[13:34:43.727]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:34:43.727]                   base::names(opts) <- ...future.futureOptionsAdded
[13:34:43.727]                   base::options(opts)
[13:34:43.727]                 }
[13:34:43.727]                 {
[13:34:43.727]                   {
[13:34:43.727]                     base::options(mc.cores = ...future.mc.cores.old)
[13:34:43.727]                     NULL
[13:34:43.727]                   }
[13:34:43.727]                   options(future.plan = NULL)
[13:34:43.727]                   if (is.na(NA_character_)) 
[13:34:43.727]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:34:43.727]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:34:43.727]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:34:43.727]                     .init = FALSE)
[13:34:43.727]                 }
[13:34:43.727]             }
[13:34:43.727]         }
[13:34:43.727]     })
[13:34:43.727]     if (TRUE) {
[13:34:43.727]         base::sink(type = "output", split = FALSE)
[13:34:43.727]         if (TRUE) {
[13:34:43.727]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:34:43.727]         }
[13:34:43.727]         else {
[13:34:43.727]             ...future.result["stdout"] <- base::list(NULL)
[13:34:43.727]         }
[13:34:43.727]         base::close(...future.stdout)
[13:34:43.727]         ...future.stdout <- NULL
[13:34:43.727]     }
[13:34:43.727]     ...future.result$conditions <- ...future.conditions
[13:34:43.727]     ...future.result$finished <- base::Sys.time()
[13:34:43.727]     ...future.result
[13:34:43.727] }
[13:34:43.729] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[13:34:43.730] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[13:34:43.730] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[13:34:43.730] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[13:34:43.731] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[13:34:43.731] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[13:34:43.731] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[13:34:43.731] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[13:34:43.732] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[13:34:43.732] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[13:34:43.732] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[13:34:43.732] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[13:34:43.733] MultisessionFuture started
[13:34:43.733] - Launch lazy future ... done
[13:34:43.733] run() for ‘MultisessionFuture’ ... done
[13:34:43.733] Created future:
[13:34:43.733] MultisessionFuture:
[13:34:43.733] Label: ‘future_replicate-2’
[13:34:43.733] Expression:
[13:34:43.733] {
[13:34:43.733]     do.call(function(...) {
[13:34:43.733]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:43.733]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:43.733]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:43.733]             on.exit(options(oopts), add = TRUE)
[13:34:43.733]         }
[13:34:43.733]         {
[13:34:43.733]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:43.733]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:43.733]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:43.733]                   envir = globalenv(), inherits = FALSE)
[13:34:43.733]                 ...future.FUN(...future.X_jj, ...)
[13:34:43.733]             })
[13:34:43.733]         }
[13:34:43.733]     }, args = future.call.arguments)
[13:34:43.733] }
[13:34:43.733] Lazy evaluation: FALSE
[13:34:43.733] Asynchronous evaluation: TRUE
[13:34:43.733] Local evaluation: TRUE
[13:34:43.733] Environment: R_GlobalEnv
[13:34:43.733] Capture standard output: TRUE
[13:34:43.733] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:34:43.733] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[13:34:43.733] Packages: <none>
[13:34:43.733] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:34:43.733] Resolved: FALSE
[13:34:43.733] Value: <not collected>
[13:34:43.733] Conditions captured: <none>
[13:34:43.733] Early signaling: FALSE
[13:34:43.733] Owner process: b8cf10c3-b112-c8f9-9398-a44000e21728
[13:34:43.733] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:43.745] Chunk #2 of 2 ... DONE
[13:34:43.745] Launching 2 futures (chunks) ... DONE
[13:34:43.745] Resolving 2 futures (chunks) ...
[13:34:43.745] resolve() on list ...
[13:34:43.745]  recursive: 0
[13:34:43.746]  length: 2
[13:34:43.746] 
[13:34:43.746] receiveMessageFromWorker() for ClusterFuture ...
[13:34:43.746] - Validating connection of MultisessionFuture
[13:34:43.746] - received message: FutureResult
[13:34:43.746] - Received FutureResult
[13:34:43.747] - Erased future from FutureRegistry
[13:34:43.747] result() for ClusterFuture ...
[13:34:43.747] - result already collected: FutureResult
[13:34:43.747] result() for ClusterFuture ... done
[13:34:43.747] receiveMessageFromWorker() for ClusterFuture ... done
[13:34:43.747] Future #1
[13:34:43.747] result() for ClusterFuture ...
[13:34:43.747] - result already collected: FutureResult
[13:34:43.747] result() for ClusterFuture ... done
[13:34:43.747] result() for ClusterFuture ...
[13:34:43.747] - result already collected: FutureResult
[13:34:43.748] result() for ClusterFuture ... done
[13:34:43.748] signalConditionsASAP(MultisessionFuture, pos=1) ...
[13:34:43.748] - nx: 2
[13:34:43.748] - relay: TRUE
[13:34:43.748] - stdout: TRUE
[13:34:43.748] - signal: TRUE
[13:34:43.748] - resignal: FALSE
[13:34:43.748] - force: TRUE
[13:34:43.748] - relayed: [n=2] FALSE, FALSE
[13:34:43.748] - queued futures: [n=2] FALSE, FALSE
[13:34:43.748]  - until=1
[13:34:43.748]  - relaying element #1
[13:34:43.749] result() for ClusterFuture ...
[13:34:43.749] - result already collected: FutureResult
[13:34:43.749] result() for ClusterFuture ... done
[13:34:43.749] result() for ClusterFuture ...
[13:34:43.749] - result already collected: FutureResult
[13:34:43.749] result() for ClusterFuture ... done
[13:34:43.749] result() for ClusterFuture ...
[13:34:43.749] - result already collected: FutureResult
[13:34:43.749] result() for ClusterFuture ... done
[13:34:43.749] result() for ClusterFuture ...
[13:34:43.749] - result already collected: FutureResult
[13:34:43.750] result() for ClusterFuture ... done
[13:34:43.750] - relayed: [n=2] TRUE, FALSE
[13:34:43.750] - queued futures: [n=2] TRUE, FALSE
[13:34:43.750] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[13:34:43.750]  length: 1 (resolved future 1)
[13:34:43.776] receiveMessageFromWorker() for ClusterFuture ...
[13:34:43.776] - Validating connection of MultisessionFuture
[13:34:43.776] - received message: FutureResult
[13:34:43.776] - Received FutureResult
[13:34:43.776] - Erased future from FutureRegistry
[13:34:43.776] result() for ClusterFuture ...
[13:34:43.776] - result already collected: FutureResult
[13:34:43.777] result() for ClusterFuture ... done
[13:34:43.777] receiveMessageFromWorker() for ClusterFuture ... done
[13:34:43.777] Future #2
[13:34:43.777] result() for ClusterFuture ...
[13:34:43.777] - result already collected: FutureResult
[13:34:43.777] result() for ClusterFuture ... done
[13:34:43.777] result() for ClusterFuture ...
[13:34:43.777] - result already collected: FutureResult
[13:34:43.777] result() for ClusterFuture ... done
[13:34:43.777] signalConditionsASAP(MultisessionFuture, pos=2) ...
[13:34:43.777] - nx: 2
[13:34:43.778] - relay: TRUE
[13:34:43.778] - stdout: TRUE
[13:34:43.778] - signal: TRUE
[13:34:43.778] - resignal: FALSE
[13:34:43.778] - force: TRUE
[13:34:43.778] - relayed: [n=2] TRUE, FALSE
[13:34:43.778] - queued futures: [n=2] TRUE, FALSE
[13:34:43.778]  - until=2
[13:34:43.778]  - relaying element #2
[13:34:43.778] result() for ClusterFuture ...
[13:34:43.778] - result already collected: FutureResult
[13:34:43.779] result() for ClusterFuture ... done
[13:34:43.779] result() for ClusterFuture ...
[13:34:43.779] - result already collected: FutureResult
[13:34:43.779] result() for ClusterFuture ... done
[13:34:43.779] result() for ClusterFuture ...
[13:34:43.779] - result already collected: FutureResult
[13:34:43.779] result() for ClusterFuture ... done
[13:34:43.782] result() for ClusterFuture ...
[13:34:43.782] - result already collected: FutureResult
[13:34:43.782] result() for ClusterFuture ... done
[13:34:43.782] - relayed: [n=2] TRUE, TRUE
[13:34:43.782] - queued futures: [n=2] TRUE, TRUE
[13:34:43.782] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[13:34:43.782]  length: 0 (resolved future 2)
[13:34:43.782] Relaying remaining futures
[13:34:43.782] signalConditionsASAP(NULL, pos=0) ...
[13:34:43.782] - nx: 2
[13:34:43.782] - relay: TRUE
[13:34:43.783] - stdout: TRUE
[13:34:43.783] - signal: TRUE
[13:34:43.783] - resignal: FALSE
[13:34:43.783] - force: TRUE
[13:34:43.783] - relayed: [n=2] TRUE, TRUE
[13:34:43.783] - queued futures: [n=2] TRUE, TRUE
 - flush all
[13:34:43.783] - relayed: [n=2] TRUE, TRUE
[13:34:43.783] - queued futures: [n=2] TRUE, TRUE
[13:34:43.783] signalConditionsASAP(NULL, pos=0) ... done
[13:34:43.783] resolve() on list ... DONE
[13:34:43.783] result() for ClusterFuture ...
[13:34:43.783] - result already collected: FutureResult
[13:34:43.784] result() for ClusterFuture ... done
[13:34:43.784] result() for ClusterFuture ...
[13:34:43.784] - result already collected: FutureResult
[13:34:43.784] result() for ClusterFuture ... done
[13:34:43.784] result() for ClusterFuture ...
[13:34:43.784] - result already collected: FutureResult
[13:34:43.784] result() for ClusterFuture ... done
[13:34:43.784] result() for ClusterFuture ...
[13:34:43.784] - result already collected: FutureResult
[13:34:43.784] result() for ClusterFuture ... done
[13:34:43.784]  - Number of value chunks collected: 2
[13:34:43.785] Resolving 2 futures (chunks) ... DONE
[13:34:43.785] Reducing values from 2 chunks ...
[13:34:43.785]  - Number of values collected after concatenation: 5
[13:34:43.785]  - Number of values expected: 5
[13:34:43.785] Reducing values from 2 chunks ... DONE
[13:34:43.785] future_lapply() ... DONE
- example(replicate) ...
[13:34:43.785] future_lapply() ...
[13:34:43.786] Generating random seeds ...
[13:34:43.786] Generating random seed streams for 5 elements ...
[13:34:43.786] Generating random seed streams for 5 elements ... DONE
[13:34:43.786] Generating random seeds ... DONE
[13:34:43.786] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[13:34:43.790] Number of chunks: 2
[13:34:43.790] getGlobalsAndPackagesXApply() ...
[13:34:43.790]  - future.globals: TRUE
[13:34:43.790] getGlobalsAndPackages() ...
[13:34:43.790] Searching for globals...
[13:34:43.792] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[13:34:43.792] Searching for globals ... DONE
[13:34:43.792] Resolving globals: FALSE
[13:34:43.793] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[13:34:43.793] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[13:34:43.793] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[13:34:43.793] 
[13:34:43.793] getGlobalsAndPackages() ... DONE
[13:34:43.793]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[13:34:43.794]  - needed namespaces: [n=0] 
[13:34:43.794] Finding globals ... DONE
[13:34:43.794]  - use_args: TRUE
[13:34:43.794]  - Getting '...' globals ...
[13:34:43.794] resolve() on list ...
[13:34:43.794]  recursive: 0
[13:34:43.794]  length: 1
[13:34:43.794]  elements: ‘...’
[13:34:43.795]  length: 0 (resolved future 1)
[13:34:43.795] resolve() on list ... DONE
[13:34:43.795]    - '...' content: [n=0] 
[13:34:43.795] List of 1
[13:34:43.795]  $ ...: list()
[13:34:43.795]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:43.795]  - attr(*, "where")=List of 1
[13:34:43.795]   ..$ ...:<environment: 0x5627bf9ad458> 
[13:34:43.795]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:43.795]  - attr(*, "resolved")= logi TRUE
[13:34:43.795]  - attr(*, "total_size")= num NA
[13:34:43.797]  - Getting '...' globals ... DONE
[13:34:43.797] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[13:34:43.797] List of 4
[13:34:43.797]  $ ...future.FUN:function (...)  
[13:34:43.797]  $ foo          :function (x = 1, y = 2)  
[13:34:43.797]  $ x            : num 3
[13:34:43.797]  $ ...          : list()
[13:34:43.797]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:34:43.797]  - attr(*, "where")=List of 4
[13:34:43.797]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[13:34:43.797]   ..$ foo          :<environment: R_EmptyEnv> 
[13:34:43.797]   ..$ x            :<environment: R_EmptyEnv> 
[13:34:43.797]   ..$ ...          :<environment: 0x5627bf9ad458> 
[13:34:43.797]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:34:43.797]  - attr(*, "resolved")= logi FALSE
[13:34:43.797]  - attr(*, "total_size")= num 2200
[13:34:43.801] Packages to be attached in all futures: [n=0] 
[13:34:43.801] getGlobalsAndPackagesXApply() ... DONE
[13:34:43.801] Number of futures (= number of chunks): 2
[13:34:43.801] Launching 2 futures (chunks) ...
[13:34:43.801] Chunk #1 of 2 ...
[13:34:43.802]  - Finding globals in 'X' for chunk #1 ...
[13:34:43.802] getGlobalsAndPackages() ...
[13:34:43.802] Searching for globals...
[13:34:43.802] 
[13:34:43.802] Searching for globals ... DONE
[13:34:43.802] - globals: [0] <none>
[13:34:43.802] getGlobalsAndPackages() ... DONE
[13:34:43.802]    + additional globals found: [n=0] 
[13:34:43.803]    + additional namespaces needed: [n=0] 
[13:34:43.803]  - Finding globals in 'X' for chunk #1 ... DONE
[13:34:43.803]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:34:43.803]  - seeds: [2] <seeds>
[13:34:43.803]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:43.803] getGlobalsAndPackages() ...
[13:34:43.803] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:43.803] Resolving globals: FALSE
[13:34:43.803] Tweak future expression to call with '...' arguments ...
[13:34:43.803] {
[13:34:43.803]     do.call(function(...) {
[13:34:43.803]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:43.803]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:43.803]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:43.803]             on.exit(options(oopts), add = TRUE)
[13:34:43.803]         }
[13:34:43.803]         {
[13:34:43.803]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:43.803]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:43.803]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:43.803]                   envir = globalenv(), inherits = FALSE)
[13:34:43.803]                 ...future.FUN(...future.X_jj, ...)
[13:34:43.803]             })
[13:34:43.803]         }
[13:34:43.803]     }, args = future.call.arguments)
[13:34:43.803] }
[13:34:43.804] Tweak future expression to call with '...' arguments ... DONE
[13:34:43.804] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:43.804] 
[13:34:43.804] getGlobalsAndPackages() ... DONE
[13:34:43.805] run() for ‘Future’ ...
[13:34:43.805] - state: ‘created’
[13:34:43.805] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:34:43.820] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:43.820] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:34:43.820]   - Field: ‘node’
[13:34:43.820]   - Field: ‘label’
[13:34:43.820]   - Field: ‘local’
[13:34:43.821]   - Field: ‘owner’
[13:34:43.821]   - Field: ‘envir’
[13:34:43.821]   - Field: ‘workers’
[13:34:43.821]   - Field: ‘packages’
[13:34:43.821]   - Field: ‘gc’
[13:34:43.821]   - Field: ‘conditions’
[13:34:43.821]   - Field: ‘persistent’
[13:34:43.821]   - Field: ‘expr’
[13:34:43.821]   - Field: ‘uuid’
[13:34:43.821]   - Field: ‘seed’
[13:34:43.821]   - Field: ‘version’
[13:34:43.822]   - Field: ‘result’
[13:34:43.822]   - Field: ‘asynchronous’
[13:34:43.822]   - Field: ‘calls’
[13:34:43.822]   - Field: ‘globals’
[13:34:43.822]   - Field: ‘stdout’
[13:34:43.822]   - Field: ‘earlySignal’
[13:34:43.822]   - Field: ‘lazy’
[13:34:43.822]   - Field: ‘state’
[13:34:43.822] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:34:43.822] - Launch lazy future ...
[13:34:43.823] Packages needed by the future expression (n = 0): <none>
[13:34:43.823] Packages needed by future strategies (n = 0): <none>
[13:34:43.823] {
[13:34:43.823]     {
[13:34:43.823]         {
[13:34:43.823]             ...future.startTime <- base::Sys.time()
[13:34:43.823]             {
[13:34:43.823]                 {
[13:34:43.823]                   {
[13:34:43.823]                     {
[13:34:43.823]                       base::local({
[13:34:43.823]                         has_future <- base::requireNamespace("future", 
[13:34:43.823]                           quietly = TRUE)
[13:34:43.823]                         if (has_future) {
[13:34:43.823]                           ns <- base::getNamespace("future")
[13:34:43.823]                           version <- ns[[".package"]][["version"]]
[13:34:43.823]                           if (is.null(version)) 
[13:34:43.823]                             version <- utils::packageVersion("future")
[13:34:43.823]                         }
[13:34:43.823]                         else {
[13:34:43.823]                           version <- NULL
[13:34:43.823]                         }
[13:34:43.823]                         if (!has_future || version < "1.8.0") {
[13:34:43.823]                           info <- base::c(r_version = base::gsub("R version ", 
[13:34:43.823]                             "", base::R.version$version.string), 
[13:34:43.823]                             platform = base::sprintf("%s (%s-bit)", 
[13:34:43.823]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:34:43.823]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:34:43.823]                               "release", "version")], collapse = " "), 
[13:34:43.823]                             hostname = base::Sys.info()[["nodename"]])
[13:34:43.823]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:34:43.823]                             info)
[13:34:43.823]                           info <- base::paste(info, collapse = "; ")
[13:34:43.823]                           if (!has_future) {
[13:34:43.823]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:34:43.823]                               info)
[13:34:43.823]                           }
[13:34:43.823]                           else {
[13:34:43.823]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:34:43.823]                               info, version)
[13:34:43.823]                           }
[13:34:43.823]                           base::stop(msg)
[13:34:43.823]                         }
[13:34:43.823]                       })
[13:34:43.823]                     }
[13:34:43.823]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:34:43.823]                     base::options(mc.cores = 1L)
[13:34:43.823]                   }
[13:34:43.823]                   ...future.strategy.old <- future::plan("list")
[13:34:43.823]                   options(future.plan = NULL)
[13:34:43.823]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:34:43.823]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:34:43.823]                 }
[13:34:43.823]                 ...future.workdir <- getwd()
[13:34:43.823]             }
[13:34:43.823]             ...future.oldOptions <- base::as.list(base::.Options)
[13:34:43.823]             ...future.oldEnvVars <- base::Sys.getenv()
[13:34:43.823]         }
[13:34:43.823]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:34:43.823]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:34:43.823]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:34:43.823]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:34:43.823]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:34:43.823]             future.stdout.windows.reencode = NULL, width = 80L)
[13:34:43.823]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:34:43.823]             base::names(...future.oldOptions))
[13:34:43.823]     }
[13:34:43.823]     if (FALSE) {
[13:34:43.823]     }
[13:34:43.823]     else {
[13:34:43.823]         if (TRUE) {
[13:34:43.823]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:34:43.823]                 open = "w")
[13:34:43.823]         }
[13:34:43.823]         else {
[13:34:43.823]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:34:43.823]                 windows = "NUL", "/dev/null"), open = "w")
[13:34:43.823]         }
[13:34:43.823]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:34:43.823]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:34:43.823]             base::sink(type = "output", split = FALSE)
[13:34:43.823]             base::close(...future.stdout)
[13:34:43.823]         }, add = TRUE)
[13:34:43.823]     }
[13:34:43.823]     ...future.frame <- base::sys.nframe()
[13:34:43.823]     ...future.conditions <- base::list()
[13:34:43.823]     ...future.rng <- base::globalenv()$.Random.seed
[13:34:43.823]     if (FALSE) {
[13:34:43.823]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:34:43.823]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:34:43.823]     }
[13:34:43.823]     ...future.result <- base::tryCatch({
[13:34:43.823]         base::withCallingHandlers({
[13:34:43.823]             ...future.value <- base::withVisible(base::local({
[13:34:43.823]                 ...future.makeSendCondition <- base::local({
[13:34:43.823]                   sendCondition <- NULL
[13:34:43.823]                   function(frame = 1L) {
[13:34:43.823]                     if (is.function(sendCondition)) 
[13:34:43.823]                       return(sendCondition)
[13:34:43.823]                     ns <- getNamespace("parallel")
[13:34:43.823]                     if (exists("sendData", mode = "function", 
[13:34:43.823]                       envir = ns)) {
[13:34:43.823]                       parallel_sendData <- get("sendData", mode = "function", 
[13:34:43.823]                         envir = ns)
[13:34:43.823]                       envir <- sys.frame(frame)
[13:34:43.823]                       master <- NULL
[13:34:43.823]                       while (!identical(envir, .GlobalEnv) && 
[13:34:43.823]                         !identical(envir, emptyenv())) {
[13:34:43.823]                         if (exists("master", mode = "list", envir = envir, 
[13:34:43.823]                           inherits = FALSE)) {
[13:34:43.823]                           master <- get("master", mode = "list", 
[13:34:43.823]                             envir = envir, inherits = FALSE)
[13:34:43.823]                           if (inherits(master, c("SOCKnode", 
[13:34:43.823]                             "SOCK0node"))) {
[13:34:43.823]                             sendCondition <<- function(cond) {
[13:34:43.823]                               data <- list(type = "VALUE", value = cond, 
[13:34:43.823]                                 success = TRUE)
[13:34:43.823]                               parallel_sendData(master, data)
[13:34:43.823]                             }
[13:34:43.823]                             return(sendCondition)
[13:34:43.823]                           }
[13:34:43.823]                         }
[13:34:43.823]                         frame <- frame + 1L
[13:34:43.823]                         envir <- sys.frame(frame)
[13:34:43.823]                       }
[13:34:43.823]                     }
[13:34:43.823]                     sendCondition <<- function(cond) NULL
[13:34:43.823]                   }
[13:34:43.823]                 })
[13:34:43.823]                 withCallingHandlers({
[13:34:43.823]                   {
[13:34:43.823]                     do.call(function(...) {
[13:34:43.823]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:43.823]                       if (!identical(...future.globals.maxSize.org, 
[13:34:43.823]                         ...future.globals.maxSize)) {
[13:34:43.823]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:43.823]                         on.exit(options(oopts), add = TRUE)
[13:34:43.823]                       }
[13:34:43.823]                       {
[13:34:43.823]                         lapply(seq_along(...future.elements_ii), 
[13:34:43.823]                           FUN = function(jj) {
[13:34:43.823]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:43.823]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:43.823]                               envir = globalenv(), inherits = FALSE)
[13:34:43.823]                             ...future.FUN(...future.X_jj, ...)
[13:34:43.823]                           })
[13:34:43.823]                       }
[13:34:43.823]                     }, args = future.call.arguments)
[13:34:43.823]                   }
[13:34:43.823]                 }, immediateCondition = function(cond) {
[13:34:43.823]                   sendCondition <- ...future.makeSendCondition()
[13:34:43.823]                   sendCondition(cond)
[13:34:43.823]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:43.823]                   {
[13:34:43.823]                     inherits <- base::inherits
[13:34:43.823]                     invokeRestart <- base::invokeRestart
[13:34:43.823]                     is.null <- base::is.null
[13:34:43.823]                     muffled <- FALSE
[13:34:43.823]                     if (inherits(cond, "message")) {
[13:34:43.823]                       muffled <- grepl(pattern, "muffleMessage")
[13:34:43.823]                       if (muffled) 
[13:34:43.823]                         invokeRestart("muffleMessage")
[13:34:43.823]                     }
[13:34:43.823]                     else if (inherits(cond, "warning")) {
[13:34:43.823]                       muffled <- grepl(pattern, "muffleWarning")
[13:34:43.823]                       if (muffled) 
[13:34:43.823]                         invokeRestart("muffleWarning")
[13:34:43.823]                     }
[13:34:43.823]                     else if (inherits(cond, "condition")) {
[13:34:43.823]                       if (!is.null(pattern)) {
[13:34:43.823]                         computeRestarts <- base::computeRestarts
[13:34:43.823]                         grepl <- base::grepl
[13:34:43.823]                         restarts <- computeRestarts(cond)
[13:34:43.823]                         for (restart in restarts) {
[13:34:43.823]                           name <- restart$name
[13:34:43.823]                           if (is.null(name)) 
[13:34:43.823]                             next
[13:34:43.823]                           if (!grepl(pattern, name)) 
[13:34:43.823]                             next
[13:34:43.823]                           invokeRestart(restart)
[13:34:43.823]                           muffled <- TRUE
[13:34:43.823]                           break
[13:34:43.823]                         }
[13:34:43.823]                       }
[13:34:43.823]                     }
[13:34:43.823]                     invisible(muffled)
[13:34:43.823]                   }
[13:34:43.823]                   muffleCondition(cond)
[13:34:43.823]                 })
[13:34:43.823]             }))
[13:34:43.823]             future::FutureResult(value = ...future.value$value, 
[13:34:43.823]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:43.823]                   ...future.rng), globalenv = if (FALSE) 
[13:34:43.823]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:34:43.823]                     ...future.globalenv.names))
[13:34:43.823]                 else NULL, started = ...future.startTime, version = "1.8")
[13:34:43.823]         }, condition = base::local({
[13:34:43.823]             c <- base::c
[13:34:43.823]             inherits <- base::inherits
[13:34:43.823]             invokeRestart <- base::invokeRestart
[13:34:43.823]             length <- base::length
[13:34:43.823]             list <- base::list
[13:34:43.823]             seq.int <- base::seq.int
[13:34:43.823]             signalCondition <- base::signalCondition
[13:34:43.823]             sys.calls <- base::sys.calls
[13:34:43.823]             `[[` <- base::`[[`
[13:34:43.823]             `+` <- base::`+`
[13:34:43.823]             `<<-` <- base::`<<-`
[13:34:43.823]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:34:43.823]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:34:43.823]                   3L)]
[13:34:43.823]             }
[13:34:43.823]             function(cond) {
[13:34:43.823]                 is_error <- inherits(cond, "error")
[13:34:43.823]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:34:43.823]                   NULL)
[13:34:43.823]                 if (is_error) {
[13:34:43.823]                   sessionInformation <- function() {
[13:34:43.823]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:34:43.823]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:34:43.823]                       search = base::search(), system = base::Sys.info())
[13:34:43.823]                   }
[13:34:43.823]                   ...future.conditions[[length(...future.conditions) + 
[13:34:43.823]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:34:43.823]                     cond$call), session = sessionInformation(), 
[13:34:43.823]                     timestamp = base::Sys.time(), signaled = 0L)
[13:34:43.823]                   signalCondition(cond)
[13:34:43.823]                 }
[13:34:43.823]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:34:43.823]                 "immediateCondition"))) {
[13:34:43.823]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:34:43.823]                   ...future.conditions[[length(...future.conditions) + 
[13:34:43.823]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:34:43.823]                   if (TRUE && !signal) {
[13:34:43.823]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:43.823]                     {
[13:34:43.823]                       inherits <- base::inherits
[13:34:43.823]                       invokeRestart <- base::invokeRestart
[13:34:43.823]                       is.null <- base::is.null
[13:34:43.823]                       muffled <- FALSE
[13:34:43.823]                       if (inherits(cond, "message")) {
[13:34:43.823]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:43.823]                         if (muffled) 
[13:34:43.823]                           invokeRestart("muffleMessage")
[13:34:43.823]                       }
[13:34:43.823]                       else if (inherits(cond, "warning")) {
[13:34:43.823]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:43.823]                         if (muffled) 
[13:34:43.823]                           invokeRestart("muffleWarning")
[13:34:43.823]                       }
[13:34:43.823]                       else if (inherits(cond, "condition")) {
[13:34:43.823]                         if (!is.null(pattern)) {
[13:34:43.823]                           computeRestarts <- base::computeRestarts
[13:34:43.823]                           grepl <- base::grepl
[13:34:43.823]                           restarts <- computeRestarts(cond)
[13:34:43.823]                           for (restart in restarts) {
[13:34:43.823]                             name <- restart$name
[13:34:43.823]                             if (is.null(name)) 
[13:34:43.823]                               next
[13:34:43.823]                             if (!grepl(pattern, name)) 
[13:34:43.823]                               next
[13:34:43.823]                             invokeRestart(restart)
[13:34:43.823]                             muffled <- TRUE
[13:34:43.823]                             break
[13:34:43.823]                           }
[13:34:43.823]                         }
[13:34:43.823]                       }
[13:34:43.823]                       invisible(muffled)
[13:34:43.823]                     }
[13:34:43.823]                     muffleCondition(cond, pattern = "^muffle")
[13:34:43.823]                   }
[13:34:43.823]                 }
[13:34:43.823]                 else {
[13:34:43.823]                   if (TRUE) {
[13:34:43.823]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:43.823]                     {
[13:34:43.823]                       inherits <- base::inherits
[13:34:43.823]                       invokeRestart <- base::invokeRestart
[13:34:43.823]                       is.null <- base::is.null
[13:34:43.823]                       muffled <- FALSE
[13:34:43.823]                       if (inherits(cond, "message")) {
[13:34:43.823]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:43.823]                         if (muffled) 
[13:34:43.823]                           invokeRestart("muffleMessage")
[13:34:43.823]                       }
[13:34:43.823]                       else if (inherits(cond, "warning")) {
[13:34:43.823]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:43.823]                         if (muffled) 
[13:34:43.823]                           invokeRestart("muffleWarning")
[13:34:43.823]                       }
[13:34:43.823]                       else if (inherits(cond, "condition")) {
[13:34:43.823]                         if (!is.null(pattern)) {
[13:34:43.823]                           computeRestarts <- base::computeRestarts
[13:34:43.823]                           grepl <- base::grepl
[13:34:43.823]                           restarts <- computeRestarts(cond)
[13:34:43.823]                           for (restart in restarts) {
[13:34:43.823]                             name <- restart$name
[13:34:43.823]                             if (is.null(name)) 
[13:34:43.823]                               next
[13:34:43.823]                             if (!grepl(pattern, name)) 
[13:34:43.823]                               next
[13:34:43.823]                             invokeRestart(restart)
[13:34:43.823]                             muffled <- TRUE
[13:34:43.823]                             break
[13:34:43.823]                           }
[13:34:43.823]                         }
[13:34:43.823]                       }
[13:34:43.823]                       invisible(muffled)
[13:34:43.823]                     }
[13:34:43.823]                     muffleCondition(cond, pattern = "^muffle")
[13:34:43.823]                   }
[13:34:43.823]                 }
[13:34:43.823]             }
[13:34:43.823]         }))
[13:34:43.823]     }, error = function(ex) {
[13:34:43.823]         base::structure(base::list(value = NULL, visible = NULL, 
[13:34:43.823]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:43.823]                 ...future.rng), started = ...future.startTime, 
[13:34:43.823]             finished = Sys.time(), session_uuid = NA_character_, 
[13:34:43.823]             version = "1.8"), class = "FutureResult")
[13:34:43.823]     }, finally = {
[13:34:43.823]         if (!identical(...future.workdir, getwd())) 
[13:34:43.823]             setwd(...future.workdir)
[13:34:43.823]         {
[13:34:43.823]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:34:43.823]                 ...future.oldOptions$nwarnings <- NULL
[13:34:43.823]             }
[13:34:43.823]             base::options(...future.oldOptions)
[13:34:43.823]             if (.Platform$OS.type == "windows") {
[13:34:43.823]                 old_names <- names(...future.oldEnvVars)
[13:34:43.823]                 envs <- base::Sys.getenv()
[13:34:43.823]                 names <- names(envs)
[13:34:43.823]                 common <- intersect(names, old_names)
[13:34:43.823]                 added <- setdiff(names, old_names)
[13:34:43.823]                 removed <- setdiff(old_names, names)
[13:34:43.823]                 changed <- common[...future.oldEnvVars[common] != 
[13:34:43.823]                   envs[common]]
[13:34:43.823]                 NAMES <- toupper(changed)
[13:34:43.823]                 args <- list()
[13:34:43.823]                 for (kk in seq_along(NAMES)) {
[13:34:43.823]                   name <- changed[[kk]]
[13:34:43.823]                   NAME <- NAMES[[kk]]
[13:34:43.823]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:43.823]                     next
[13:34:43.823]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:43.823]                 }
[13:34:43.823]                 NAMES <- toupper(added)
[13:34:43.823]                 for (kk in seq_along(NAMES)) {
[13:34:43.823]                   name <- added[[kk]]
[13:34:43.823]                   NAME <- NAMES[[kk]]
[13:34:43.823]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:43.823]                     next
[13:34:43.823]                   args[[name]] <- ""
[13:34:43.823]                 }
[13:34:43.823]                 NAMES <- toupper(removed)
[13:34:43.823]                 for (kk in seq_along(NAMES)) {
[13:34:43.823]                   name <- removed[[kk]]
[13:34:43.823]                   NAME <- NAMES[[kk]]
[13:34:43.823]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:43.823]                     next
[13:34:43.823]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:43.823]                 }
[13:34:43.823]                 if (length(args) > 0) 
[13:34:43.823]                   base::do.call(base::Sys.setenv, args = args)
[13:34:43.823]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:34:43.823]             }
[13:34:43.823]             else {
[13:34:43.823]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:34:43.823]             }
[13:34:43.823]             {
[13:34:43.823]                 if (base::length(...future.futureOptionsAdded) > 
[13:34:43.823]                   0L) {
[13:34:43.823]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:34:43.823]                   base::names(opts) <- ...future.futureOptionsAdded
[13:34:43.823]                   base::options(opts)
[13:34:43.823]                 }
[13:34:43.823]                 {
[13:34:43.823]                   {
[13:34:43.823]                     base::options(mc.cores = ...future.mc.cores.old)
[13:34:43.823]                     NULL
[13:34:43.823]                   }
[13:34:43.823]                   options(future.plan = NULL)
[13:34:43.823]                   if (is.na(NA_character_)) 
[13:34:43.823]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:34:43.823]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:34:43.823]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:34:43.823]                     .init = FALSE)
[13:34:43.823]                 }
[13:34:43.823]             }
[13:34:43.823]         }
[13:34:43.823]     })
[13:34:43.823]     if (TRUE) {
[13:34:43.823]         base::sink(type = "output", split = FALSE)
[13:34:43.823]         if (TRUE) {
[13:34:43.823]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:34:43.823]         }
[13:34:43.823]         else {
[13:34:43.823]             ...future.result["stdout"] <- base::list(NULL)
[13:34:43.823]         }
[13:34:43.823]         base::close(...future.stdout)
[13:34:43.823]         ...future.stdout <- NULL
[13:34:43.823]     }
[13:34:43.823]     ...future.result$conditions <- ...future.conditions
[13:34:43.823]     ...future.result$finished <- base::Sys.time()
[13:34:43.823]     ...future.result
[13:34:43.823] }
[13:34:43.826] Exporting 7 global objects (2.15 KiB) to cluster node #1 ...
[13:34:43.826] Exporting ‘...future.FUN’ (504 bytes) to cluster node #1 ...
[13:34:43.826] Exporting ‘...future.FUN’ (504 bytes) to cluster node #1 ... DONE
[13:34:43.826] Exporting ‘foo’ (1.60 KiB) to cluster node #1 ...
[13:34:43.827] Exporting ‘foo’ (1.60 KiB) to cluster node #1 ... DONE
[13:34:43.827] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[13:34:43.827] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[13:34:43.827] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[13:34:43.828] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[13:34:43.828] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[13:34:43.828] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[13:34:43.828] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[13:34:43.829] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[13:34:43.829] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[13:34:43.829] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[13:34:43.829] Exporting 7 global objects (2.15 KiB) to cluster node #1 ... DONE
[13:34:43.830] MultisessionFuture started
[13:34:43.830] - Launch lazy future ... done
[13:34:43.830] run() for ‘MultisessionFuture’ ... done
[13:34:43.830] Created future:
[13:34:43.830] MultisessionFuture:
[13:34:43.830] Label: ‘future_replicate-1’
[13:34:43.830] Expression:
[13:34:43.830] {
[13:34:43.830]     do.call(function(...) {
[13:34:43.830]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:43.830]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:43.830]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:43.830]             on.exit(options(oopts), add = TRUE)
[13:34:43.830]         }
[13:34:43.830]         {
[13:34:43.830]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:43.830]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:43.830]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:43.830]                   envir = globalenv(), inherits = FALSE)
[13:34:43.830]                 ...future.FUN(...future.X_jj, ...)
[13:34:43.830]             })
[13:34:43.830]         }
[13:34:43.830]     }, args = future.call.arguments)
[13:34:43.830] }
[13:34:43.830] Lazy evaluation: FALSE
[13:34:43.830] Asynchronous evaluation: TRUE
[13:34:43.830] Local evaluation: TRUE
[13:34:43.830] Environment: 0x5627bf9af880
[13:34:43.830] Capture standard output: TRUE
[13:34:43.830] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:34:43.830] Globals: 7 objects totaling 2.41 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, ...)
[13:34:43.830] Packages: <none>
[13:34:43.830] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:34:43.830] Resolved: FALSE
[13:34:43.830] Value: <not collected>
[13:34:43.830] Conditions captured: <none>
[13:34:43.830] Early signaling: FALSE
[13:34:43.830] Owner process: b8cf10c3-b112-c8f9-9398-a44000e21728
[13:34:43.830] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:43.842] Chunk #1 of 2 ... DONE
[13:34:43.842] Chunk #2 of 2 ...
[13:34:43.842]  - Finding globals in 'X' for chunk #2 ...
[13:34:43.842] getGlobalsAndPackages() ...
[13:34:43.842] Searching for globals...
[13:34:43.842] 
[13:34:43.842] Searching for globals ... DONE
[13:34:43.842] - globals: [0] <none>
[13:34:43.843] getGlobalsAndPackages() ... DONE
[13:34:43.843]    + additional globals found: [n=0] 
[13:34:43.843]    + additional namespaces needed: [n=0] 
[13:34:43.843]  - Finding globals in 'X' for chunk #2 ... DONE
[13:34:43.843]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[13:34:43.843]  - seeds: [3] <seeds>
[13:34:43.843]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:43.843] getGlobalsAndPackages() ...
[13:34:43.843] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:43.843] Resolving globals: FALSE
[13:34:43.844] Tweak future expression to call with '...' arguments ...
[13:34:43.844] {
[13:34:43.844]     do.call(function(...) {
[13:34:43.844]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:43.844]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:43.844]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:43.844]             on.exit(options(oopts), add = TRUE)
[13:34:43.844]         }
[13:34:43.844]         {
[13:34:43.844]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:43.844]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:43.844]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:43.844]                   envir = globalenv(), inherits = FALSE)
[13:34:43.844]                 ...future.FUN(...future.X_jj, ...)
[13:34:43.844]             })
[13:34:43.844]         }
[13:34:43.844]     }, args = future.call.arguments)
[13:34:43.844] }
[13:34:43.844] Tweak future expression to call with '...' arguments ... DONE
[13:34:43.844] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[13:34:43.844] 
[13:34:43.845] getGlobalsAndPackages() ... DONE
[13:34:43.845] run() for ‘Future’ ...
[13:34:43.845] - state: ‘created’
[13:34:43.845] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:34:43.858] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:43.859] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:34:43.859]   - Field: ‘node’
[13:34:43.859]   - Field: ‘label’
[13:34:43.859]   - Field: ‘local’
[13:34:43.859]   - Field: ‘owner’
[13:34:43.859]   - Field: ‘envir’
[13:34:43.859]   - Field: ‘workers’
[13:34:43.859]   - Field: ‘packages’
[13:34:43.859]   - Field: ‘gc’
[13:34:43.859]   - Field: ‘conditions’
[13:34:43.859]   - Field: ‘persistent’
[13:34:43.860]   - Field: ‘expr’
[13:34:43.860]   - Field: ‘uuid’
[13:34:43.860]   - Field: ‘seed’
[13:34:43.860]   - Field: ‘version’
[13:34:43.860]   - Field: ‘result’
[13:34:43.860]   - Field: ‘asynchronous’
[13:34:43.860]   - Field: ‘calls’
[13:34:43.860]   - Field: ‘globals’
[13:34:43.860]   - Field: ‘stdout’
[13:34:43.860]   - Field: ‘earlySignal’
[13:34:43.860]   - Field: ‘lazy’
[13:34:43.861]   - Field: ‘state’
[13:34:43.861] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:34:43.861] - Launch lazy future ...
[13:34:43.861] Packages needed by the future expression (n = 0): <none>
[13:34:43.861] Packages needed by future strategies (n = 0): <none>
[13:34:43.862] {
[13:34:43.862]     {
[13:34:43.862]         {
[13:34:43.862]             ...future.startTime <- base::Sys.time()
[13:34:43.862]             {
[13:34:43.862]                 {
[13:34:43.862]                   {
[13:34:43.862]                     {
[13:34:43.862]                       base::local({
[13:34:43.862]                         has_future <- base::requireNamespace("future", 
[13:34:43.862]                           quietly = TRUE)
[13:34:43.862]                         if (has_future) {
[13:34:43.862]                           ns <- base::getNamespace("future")
[13:34:43.862]                           version <- ns[[".package"]][["version"]]
[13:34:43.862]                           if (is.null(version)) 
[13:34:43.862]                             version <- utils::packageVersion("future")
[13:34:43.862]                         }
[13:34:43.862]                         else {
[13:34:43.862]                           version <- NULL
[13:34:43.862]                         }
[13:34:43.862]                         if (!has_future || version < "1.8.0") {
[13:34:43.862]                           info <- base::c(r_version = base::gsub("R version ", 
[13:34:43.862]                             "", base::R.version$version.string), 
[13:34:43.862]                             platform = base::sprintf("%s (%s-bit)", 
[13:34:43.862]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:34:43.862]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:34:43.862]                               "release", "version")], collapse = " "), 
[13:34:43.862]                             hostname = base::Sys.info()[["nodename"]])
[13:34:43.862]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:34:43.862]                             info)
[13:34:43.862]                           info <- base::paste(info, collapse = "; ")
[13:34:43.862]                           if (!has_future) {
[13:34:43.862]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:34:43.862]                               info)
[13:34:43.862]                           }
[13:34:43.862]                           else {
[13:34:43.862]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:34:43.862]                               info, version)
[13:34:43.862]                           }
[13:34:43.862]                           base::stop(msg)
[13:34:43.862]                         }
[13:34:43.862]                       })
[13:34:43.862]                     }
[13:34:43.862]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:34:43.862]                     base::options(mc.cores = 1L)
[13:34:43.862]                   }
[13:34:43.862]                   ...future.strategy.old <- future::plan("list")
[13:34:43.862]                   options(future.plan = NULL)
[13:34:43.862]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:34:43.862]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:34:43.862]                 }
[13:34:43.862]                 ...future.workdir <- getwd()
[13:34:43.862]             }
[13:34:43.862]             ...future.oldOptions <- base::as.list(base::.Options)
[13:34:43.862]             ...future.oldEnvVars <- base::Sys.getenv()
[13:34:43.862]         }
[13:34:43.862]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:34:43.862]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[13:34:43.862]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:34:43.862]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:34:43.862]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:34:43.862]             future.stdout.windows.reencode = NULL, width = 80L)
[13:34:43.862]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:34:43.862]             base::names(...future.oldOptions))
[13:34:43.862]     }
[13:34:43.862]     if (FALSE) {
[13:34:43.862]     }
[13:34:43.862]     else {
[13:34:43.862]         if (TRUE) {
[13:34:43.862]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:34:43.862]                 open = "w")
[13:34:43.862]         }
[13:34:43.862]         else {
[13:34:43.862]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:34:43.862]                 windows = "NUL", "/dev/null"), open = "w")
[13:34:43.862]         }
[13:34:43.862]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:34:43.862]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:34:43.862]             base::sink(type = "output", split = FALSE)
[13:34:43.862]             base::close(...future.stdout)
[13:34:43.862]         }, add = TRUE)
[13:34:43.862]     }
[13:34:43.862]     ...future.frame <- base::sys.nframe()
[13:34:43.862]     ...future.conditions <- base::list()
[13:34:43.862]     ...future.rng <- base::globalenv()$.Random.seed
[13:34:43.862]     if (FALSE) {
[13:34:43.862]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:34:43.862]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:34:43.862]     }
[13:34:43.862]     ...future.result <- base::tryCatch({
[13:34:43.862]         base::withCallingHandlers({
[13:34:43.862]             ...future.value <- base::withVisible(base::local({
[13:34:43.862]                 ...future.makeSendCondition <- base::local({
[13:34:43.862]                   sendCondition <- NULL
[13:34:43.862]                   function(frame = 1L) {
[13:34:43.862]                     if (is.function(sendCondition)) 
[13:34:43.862]                       return(sendCondition)
[13:34:43.862]                     ns <- getNamespace("parallel")
[13:34:43.862]                     if (exists("sendData", mode = "function", 
[13:34:43.862]                       envir = ns)) {
[13:34:43.862]                       parallel_sendData <- get("sendData", mode = "function", 
[13:34:43.862]                         envir = ns)
[13:34:43.862]                       envir <- sys.frame(frame)
[13:34:43.862]                       master <- NULL
[13:34:43.862]                       while (!identical(envir, .GlobalEnv) && 
[13:34:43.862]                         !identical(envir, emptyenv())) {
[13:34:43.862]                         if (exists("master", mode = "list", envir = envir, 
[13:34:43.862]                           inherits = FALSE)) {
[13:34:43.862]                           master <- get("master", mode = "list", 
[13:34:43.862]                             envir = envir, inherits = FALSE)
[13:34:43.862]                           if (inherits(master, c("SOCKnode", 
[13:34:43.862]                             "SOCK0node"))) {
[13:34:43.862]                             sendCondition <<- function(cond) {
[13:34:43.862]                               data <- list(type = "VALUE", value = cond, 
[13:34:43.862]                                 success = TRUE)
[13:34:43.862]                               parallel_sendData(master, data)
[13:34:43.862]                             }
[13:34:43.862]                             return(sendCondition)
[13:34:43.862]                           }
[13:34:43.862]                         }
[13:34:43.862]                         frame <- frame + 1L
[13:34:43.862]                         envir <- sys.frame(frame)
[13:34:43.862]                       }
[13:34:43.862]                     }
[13:34:43.862]                     sendCondition <<- function(cond) NULL
[13:34:43.862]                   }
[13:34:43.862]                 })
[13:34:43.862]                 withCallingHandlers({
[13:34:43.862]                   {
[13:34:43.862]                     do.call(function(...) {
[13:34:43.862]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:43.862]                       if (!identical(...future.globals.maxSize.org, 
[13:34:43.862]                         ...future.globals.maxSize)) {
[13:34:43.862]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:43.862]                         on.exit(options(oopts), add = TRUE)
[13:34:43.862]                       }
[13:34:43.862]                       {
[13:34:43.862]                         lapply(seq_along(...future.elements_ii), 
[13:34:43.862]                           FUN = function(jj) {
[13:34:43.862]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:43.862]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:43.862]                               envir = globalenv(), inherits = FALSE)
[13:34:43.862]                             ...future.FUN(...future.X_jj, ...)
[13:34:43.862]                           })
[13:34:43.862]                       }
[13:34:43.862]                     }, args = future.call.arguments)
[13:34:43.862]                   }
[13:34:43.862]                 }, immediateCondition = function(cond) {
[13:34:43.862]                   sendCondition <- ...future.makeSendCondition()
[13:34:43.862]                   sendCondition(cond)
[13:34:43.862]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:43.862]                   {
[13:34:43.862]                     inherits <- base::inherits
[13:34:43.862]                     invokeRestart <- base::invokeRestart
[13:34:43.862]                     is.null <- base::is.null
[13:34:43.862]                     muffled <- FALSE
[13:34:43.862]                     if (inherits(cond, "message")) {
[13:34:43.862]                       muffled <- grepl(pattern, "muffleMessage")
[13:34:43.862]                       if (muffled) 
[13:34:43.862]                         invokeRestart("muffleMessage")
[13:34:43.862]                     }
[13:34:43.862]                     else if (inherits(cond, "warning")) {
[13:34:43.862]                       muffled <- grepl(pattern, "muffleWarning")
[13:34:43.862]                       if (muffled) 
[13:34:43.862]                         invokeRestart("muffleWarning")
[13:34:43.862]                     }
[13:34:43.862]                     else if (inherits(cond, "condition")) {
[13:34:43.862]                       if (!is.null(pattern)) {
[13:34:43.862]                         computeRestarts <- base::computeRestarts
[13:34:43.862]                         grepl <- base::grepl
[13:34:43.862]                         restarts <- computeRestarts(cond)
[13:34:43.862]                         for (restart in restarts) {
[13:34:43.862]                           name <- restart$name
[13:34:43.862]                           if (is.null(name)) 
[13:34:43.862]                             next
[13:34:43.862]                           if (!grepl(pattern, name)) 
[13:34:43.862]                             next
[13:34:43.862]                           invokeRestart(restart)
[13:34:43.862]                           muffled <- TRUE
[13:34:43.862]                           break
[13:34:43.862]                         }
[13:34:43.862]                       }
[13:34:43.862]                     }
[13:34:43.862]                     invisible(muffled)
[13:34:43.862]                   }
[13:34:43.862]                   muffleCondition(cond)
[13:34:43.862]                 })
[13:34:43.862]             }))
[13:34:43.862]             future::FutureResult(value = ...future.value$value, 
[13:34:43.862]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:43.862]                   ...future.rng), globalenv = if (FALSE) 
[13:34:43.862]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:34:43.862]                     ...future.globalenv.names))
[13:34:43.862]                 else NULL, started = ...future.startTime, version = "1.8")
[13:34:43.862]         }, condition = base::local({
[13:34:43.862]             c <- base::c
[13:34:43.862]             inherits <- base::inherits
[13:34:43.862]             invokeRestart <- base::invokeRestart
[13:34:43.862]             length <- base::length
[13:34:43.862]             list <- base::list
[13:34:43.862]             seq.int <- base::seq.int
[13:34:43.862]             signalCondition <- base::signalCondition
[13:34:43.862]             sys.calls <- base::sys.calls
[13:34:43.862]             `[[` <- base::`[[`
[13:34:43.862]             `+` <- base::`+`
[13:34:43.862]             `<<-` <- base::`<<-`
[13:34:43.862]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:34:43.862]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:34:43.862]                   3L)]
[13:34:43.862]             }
[13:34:43.862]             function(cond) {
[13:34:43.862]                 is_error <- inherits(cond, "error")
[13:34:43.862]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:34:43.862]                   NULL)
[13:34:43.862]                 if (is_error) {
[13:34:43.862]                   sessionInformation <- function() {
[13:34:43.862]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:34:43.862]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:34:43.862]                       search = base::search(), system = base::Sys.info())
[13:34:43.862]                   }
[13:34:43.862]                   ...future.conditions[[length(...future.conditions) + 
[13:34:43.862]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:34:43.862]                     cond$call), session = sessionInformation(), 
[13:34:43.862]                     timestamp = base::Sys.time(), signaled = 0L)
[13:34:43.862]                   signalCondition(cond)
[13:34:43.862]                 }
[13:34:43.862]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:34:43.862]                 "immediateCondition"))) {
[13:34:43.862]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:34:43.862]                   ...future.conditions[[length(...future.conditions) + 
[13:34:43.862]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:34:43.862]                   if (TRUE && !signal) {
[13:34:43.862]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:43.862]                     {
[13:34:43.862]                       inherits <- base::inherits
[13:34:43.862]                       invokeRestart <- base::invokeRestart
[13:34:43.862]                       is.null <- base::is.null
[13:34:43.862]                       muffled <- FALSE
[13:34:43.862]                       if (inherits(cond, "message")) {
[13:34:43.862]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:43.862]                         if (muffled) 
[13:34:43.862]                           invokeRestart("muffleMessage")
[13:34:43.862]                       }
[13:34:43.862]                       else if (inherits(cond, "warning")) {
[13:34:43.862]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:43.862]                         if (muffled) 
[13:34:43.862]                           invokeRestart("muffleWarning")
[13:34:43.862]                       }
[13:34:43.862]                       else if (inherits(cond, "condition")) {
[13:34:43.862]                         if (!is.null(pattern)) {
[13:34:43.862]                           computeRestarts <- base::computeRestarts
[13:34:43.862]                           grepl <- base::grepl
[13:34:43.862]                           restarts <- computeRestarts(cond)
[13:34:43.862]                           for (restart in restarts) {
[13:34:43.862]                             name <- restart$name
[13:34:43.862]                             if (is.null(name)) 
[13:34:43.862]                               next
[13:34:43.862]                             if (!grepl(pattern, name)) 
[13:34:43.862]                               next
[13:34:43.862]                             invokeRestart(restart)
[13:34:43.862]                             muffled <- TRUE
[13:34:43.862]                             break
[13:34:43.862]                           }
[13:34:43.862]                         }
[13:34:43.862]                       }
[13:34:43.862]                       invisible(muffled)
[13:34:43.862]                     }
[13:34:43.862]                     muffleCondition(cond, pattern = "^muffle")
[13:34:43.862]                   }
[13:34:43.862]                 }
[13:34:43.862]                 else {
[13:34:43.862]                   if (TRUE) {
[13:34:43.862]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:34:43.862]                     {
[13:34:43.862]                       inherits <- base::inherits
[13:34:43.862]                       invokeRestart <- base::invokeRestart
[13:34:43.862]                       is.null <- base::is.null
[13:34:43.862]                       muffled <- FALSE
[13:34:43.862]                       if (inherits(cond, "message")) {
[13:34:43.862]                         muffled <- grepl(pattern, "muffleMessage")
[13:34:43.862]                         if (muffled) 
[13:34:43.862]                           invokeRestart("muffleMessage")
[13:34:43.862]                       }
[13:34:43.862]                       else if (inherits(cond, "warning")) {
[13:34:43.862]                         muffled <- grepl(pattern, "muffleWarning")
[13:34:43.862]                         if (muffled) 
[13:34:43.862]                           invokeRestart("muffleWarning")
[13:34:43.862]                       }
[13:34:43.862]                       else if (inherits(cond, "condition")) {
[13:34:43.862]                         if (!is.null(pattern)) {
[13:34:43.862]                           computeRestarts <- base::computeRestarts
[13:34:43.862]                           grepl <- base::grepl
[13:34:43.862]                           restarts <- computeRestarts(cond)
[13:34:43.862]                           for (restart in restarts) {
[13:34:43.862]                             name <- restart$name
[13:34:43.862]                             if (is.null(name)) 
[13:34:43.862]                               next
[13:34:43.862]                             if (!grepl(pattern, name)) 
[13:34:43.862]                               next
[13:34:43.862]                             invokeRestart(restart)
[13:34:43.862]                             muffled <- TRUE
[13:34:43.862]                             break
[13:34:43.862]                           }
[13:34:43.862]                         }
[13:34:43.862]                       }
[13:34:43.862]                       invisible(muffled)
[13:34:43.862]                     }
[13:34:43.862]                     muffleCondition(cond, pattern = "^muffle")
[13:34:43.862]                   }
[13:34:43.862]                 }
[13:34:43.862]             }
[13:34:43.862]         }))
[13:34:43.862]     }, error = function(ex) {
[13:34:43.862]         base::structure(base::list(value = NULL, visible = NULL, 
[13:34:43.862]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:34:43.862]                 ...future.rng), started = ...future.startTime, 
[13:34:43.862]             finished = Sys.time(), session_uuid = NA_character_, 
[13:34:43.862]             version = "1.8"), class = "FutureResult")
[13:34:43.862]     }, finally = {
[13:34:43.862]         if (!identical(...future.workdir, getwd())) 
[13:34:43.862]             setwd(...future.workdir)
[13:34:43.862]         {
[13:34:43.862]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:34:43.862]                 ...future.oldOptions$nwarnings <- NULL
[13:34:43.862]             }
[13:34:43.862]             base::options(...future.oldOptions)
[13:34:43.862]             if (.Platform$OS.type == "windows") {
[13:34:43.862]                 old_names <- names(...future.oldEnvVars)
[13:34:43.862]                 envs <- base::Sys.getenv()
[13:34:43.862]                 names <- names(envs)
[13:34:43.862]                 common <- intersect(names, old_names)
[13:34:43.862]                 added <- setdiff(names, old_names)
[13:34:43.862]                 removed <- setdiff(old_names, names)
[13:34:43.862]                 changed <- common[...future.oldEnvVars[common] != 
[13:34:43.862]                   envs[common]]
[13:34:43.862]                 NAMES <- toupper(changed)
[13:34:43.862]                 args <- list()
[13:34:43.862]                 for (kk in seq_along(NAMES)) {
[13:34:43.862]                   name <- changed[[kk]]
[13:34:43.862]                   NAME <- NAMES[[kk]]
[13:34:43.862]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:43.862]                     next
[13:34:43.862]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:43.862]                 }
[13:34:43.862]                 NAMES <- toupper(added)
[13:34:43.862]                 for (kk in seq_along(NAMES)) {
[13:34:43.862]                   name <- added[[kk]]
[13:34:43.862]                   NAME <- NAMES[[kk]]
[13:34:43.862]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:43.862]                     next
[13:34:43.862]                   args[[name]] <- ""
[13:34:43.862]                 }
[13:34:43.862]                 NAMES <- toupper(removed)
[13:34:43.862]                 for (kk in seq_along(NAMES)) {
[13:34:43.862]                   name <- removed[[kk]]
[13:34:43.862]                   NAME <- NAMES[[kk]]
[13:34:43.862]                   if (name != NAME && is.element(NAME, old_names)) 
[13:34:43.862]                     next
[13:34:43.862]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:34:43.862]                 }
[13:34:43.862]                 if (length(args) > 0) 
[13:34:43.862]                   base::do.call(base::Sys.setenv, args = args)
[13:34:43.862]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:34:43.862]             }
[13:34:43.862]             else {
[13:34:43.862]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:34:43.862]             }
[13:34:43.862]             {
[13:34:43.862]                 if (base::length(...future.futureOptionsAdded) > 
[13:34:43.862]                   0L) {
[13:34:43.862]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:34:43.862]                   base::names(opts) <- ...future.futureOptionsAdded
[13:34:43.862]                   base::options(opts)
[13:34:43.862]                 }
[13:34:43.862]                 {
[13:34:43.862]                   {
[13:34:43.862]                     base::options(mc.cores = ...future.mc.cores.old)
[13:34:43.862]                     NULL
[13:34:43.862]                   }
[13:34:43.862]                   options(future.plan = NULL)
[13:34:43.862]                   if (is.na(NA_character_)) 
[13:34:43.862]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:34:43.862]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:34:43.862]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:34:43.862]                     .init = FALSE)
[13:34:43.862]                 }
[13:34:43.862]             }
[13:34:43.862]         }
[13:34:43.862]     })
[13:34:43.862]     if (TRUE) {
[13:34:43.862]         base::sink(type = "output", split = FALSE)
[13:34:43.862]         if (TRUE) {
[13:34:43.862]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:34:43.862]         }
[13:34:43.862]         else {
[13:34:43.862]             ...future.result["stdout"] <- base::list(NULL)
[13:34:43.862]         }
[13:34:43.862]         base::close(...future.stdout)
[13:34:43.862]         ...future.stdout <- NULL
[13:34:43.862]     }
[13:34:43.862]     ...future.result$conditions <- ...future.conditions
[13:34:43.862]     ...future.result$finished <- base::Sys.time()
[13:34:43.862]     ...future.result
[13:34:43.862] }
[13:34:43.864] Exporting 7 global objects (2.15 KiB) to cluster node #2 ...
[13:34:43.864] Exporting ‘...future.FUN’ (504 bytes) to cluster node #2 ...
[13:34:43.865] Exporting ‘...future.FUN’ (504 bytes) to cluster node #2 ... DONE
[13:34:43.865] Exporting ‘foo’ (1.60 KiB) to cluster node #2 ...
[13:34:43.865] Exporting ‘foo’ (1.60 KiB) to cluster node #2 ... DONE
[13:34:43.865] Exporting ‘x’ (56 bytes) to cluster node #2 ...
[13:34:43.866] Exporting ‘x’ (56 bytes) to cluster node #2 ... DONE
[13:34:43.866] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[13:34:43.866] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[13:34:43.866] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[13:34:43.867] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[13:34:43.867] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[13:34:43.867] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[13:34:43.867] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[13:34:43.867] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[13:34:43.867] Exporting 7 global objects (2.15 KiB) to cluster node #2 ... DONE
[13:34:43.868] MultisessionFuture started
[13:34:43.868] - Launch lazy future ... done
[13:34:43.868] run() for ‘MultisessionFuture’ ... done
[13:34:43.868] Created future:
[13:34:43.868] MultisessionFuture:
[13:34:43.868] Label: ‘future_replicate-2’
[13:34:43.868] Expression:
[13:34:43.868] {
[13:34:43.868]     do.call(function(...) {
[13:34:43.868]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[13:34:43.868]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[13:34:43.868]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[13:34:43.868]             on.exit(options(oopts), add = TRUE)
[13:34:43.868]         }
[13:34:43.868]         {
[13:34:43.868]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[13:34:43.868]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[13:34:43.868]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[13:34:43.868]                   envir = globalenv(), inherits = FALSE)
[13:34:43.868]                 ...future.FUN(...future.X_jj, ...)
[13:34:43.868]             })
[13:34:43.868]         }
[13:34:43.868]     }, args = future.call.arguments)
[13:34:43.868] }
[13:34:43.868] Lazy evaluation: FALSE
[13:34:43.868] Asynchronous evaluation: TRUE
[13:34:43.868] Local evaluation: TRUE
[13:34:43.868] Environment: 0x5627bf9af880
[13:34:43.868] Capture standard output: TRUE
[13:34:43.868] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:34:43.868] Globals: 7 objects totaling 2.55 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, ...)
[13:34:43.868] Packages: <none>
[13:34:43.868] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[13:34:43.868] Resolved: FALSE
[13:34:43.868] Value: <not collected>
[13:34:43.868] Conditions captured: <none>
[13:34:43.868] Early signaling: FALSE
[13:34:43.868] Owner process: b8cf10c3-b112-c8f9-9398-a44000e21728
[13:34:43.868] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:34:43.880] Chunk #2 of 2 ... DONE
[13:34:43.880] Launching 2 futures (chunks) ... DONE
[13:34:43.880] Resolving 2 futures (chunks) ...
[13:34:43.880] resolve() on list ...
[13:34:43.880]  recursive: 0
[13:34:43.881]  length: 2
[13:34:43.881] 
[13:34:43.881] receiveMessageFromWorker() for ClusterFuture ...
[13:34:43.881] - Validating connection of MultisessionFuture
[13:34:43.881] - received message: FutureResult
[13:34:43.882] - Received FutureResult
[13:34:43.882] - Erased future from FutureRegistry
[13:34:43.882] result() for ClusterFuture ...
[13:34:43.882] - result already collected: FutureResult
[13:34:43.882] result() for ClusterFuture ... done
[13:34:43.882] receiveMessageFromWorker() for ClusterFuture ... done
[13:34:43.882] Future #1
[13:34:43.882] result() for ClusterFuture ...
[13:34:43.882] - result already collected: FutureResult
[13:34:43.882] result() for ClusterFuture ... done
[13:34:43.883] result() for ClusterFuture ...
[13:34:43.883] - result already collected: FutureResult
[13:34:43.883] result() for ClusterFuture ... done
[13:34:43.883] signalConditionsASAP(MultisessionFuture, pos=1) ...
[13:34:43.883] - nx: 2
[13:34:43.883] - relay: TRUE
[13:34:43.883] - stdout: TRUE
[13:34:43.883] - signal: TRUE
[13:34:43.883] - resignal: FALSE
[13:34:43.883] - force: TRUE
[13:34:43.883] - relayed: [n=2] FALSE, FALSE
[13:34:43.883] - queued futures: [n=2] FALSE, FALSE
[13:34:43.884]  - until=1
[13:34:43.884]  - relaying element #1
[13:34:43.884] result() for ClusterFuture ...
[13:34:43.884] - result already collected: FutureResult
[13:34:43.884] result() for ClusterFuture ... done
[13:34:43.884] result() for ClusterFuture ...
[13:34:43.884] - result already collected: FutureResult
[13:34:43.884] result() for ClusterFuture ... done
[13:34:43.884] result() for ClusterFuture ...
[13:34:43.884] - result already collected: FutureResult
[13:34:43.884] result() for ClusterFuture ... done
[13:34:43.884] result() for ClusterFuture ...
[13:34:43.885] - result already collected: FutureResult
[13:34:43.885] result() for ClusterFuture ... done
[13:34:43.885] - relayed: [n=2] TRUE, FALSE
[13:34:43.885] - queued futures: [n=2] TRUE, FALSE
[13:34:43.885] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[13:34:43.885]  length: 1 (resolved future 1)
[13:34:43.912] receiveMessageFromWorker() for ClusterFuture ...
[13:34:43.912] - Validating connection of MultisessionFuture
[13:34:43.912] - received message: FutureResult
[13:34:43.912] - Received FutureResult
[13:34:43.912] - Erased future from FutureRegistry
[13:34:43.913] result() for ClusterFuture ...
[13:34:43.913] - result already collected: FutureResult
[13:34:43.913] result() for ClusterFuture ... done
[13:34:43.913] receiveMessageFromWorker() for ClusterFuture ... done
[13:34:43.913] Future #2
[13:34:43.913] result() for ClusterFuture ...
[13:34:43.913] - result already collected: FutureResult
[13:34:43.913] result() for ClusterFuture ... done
[13:34:43.913] result() for ClusterFuture ...
[13:34:43.913] - result already collected: FutureResult
[13:34:43.914] result() for ClusterFuture ... done
[13:34:43.914] signalConditionsASAP(MultisessionFuture, pos=2) ...
[13:34:43.914] - nx: 2
[13:34:43.914] - relay: TRUE
[13:34:43.914] - stdout: TRUE
[13:34:43.914] - signal: TRUE
[13:34:43.914] - resignal: FALSE
[13:34:43.914] - force: TRUE
[13:34:43.914] - relayed: [n=2] TRUE, FALSE
[13:34:43.914] - queued futures: [n=2] TRUE, FALSE
[13:34:43.914]  - until=2
[13:34:43.915]  - relaying element #2
[13:34:43.915] result() for ClusterFuture ...
[13:34:43.915] - result already collected: FutureResult
[13:34:43.915] result() for ClusterFuture ... done
[13:34:43.915] result() for ClusterFuture ...
[13:34:43.915] - result already collected: FutureResult
[13:34:43.915] result() for ClusterFuture ... done
[13:34:43.915] result() for ClusterFuture ...
[13:34:43.915] - result already collected: FutureResult
[13:34:43.915] result() for ClusterFuture ... done
[13:34:43.915] result() for ClusterFuture ...
[13:34:43.916] - result already collected: FutureResult
[13:34:43.916] result() for ClusterFuture ... done
[13:34:43.916] - relayed: [n=2] TRUE, TRUE
[13:34:43.916] - queued futures: [n=2] TRUE, TRUE
[13:34:43.916] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[13:34:43.916]  length: 0 (resolved future 2)
[13:34:43.916] Relaying remaining futures
[13:34:43.916] signalConditionsASAP(NULL, pos=0) ...
[13:34:43.916] - nx: 2
[13:34:43.916] - relay: TRUE
[13:34:43.916] - stdout: TRUE
[13:34:43.916] - signal: TRUE
[13:34:43.917] - resignal: FALSE
[13:34:43.917] - force: TRUE
[13:34:43.917] - relayed: [n=2] TRUE, TRUE
[13:34:43.917] - queued futures: [n=2] TRUE, TRUE
 - flush all
[13:34:43.917] - relayed: [n=2] TRUE, TRUE
[13:34:43.917] - queued futures: [n=2] TRUE, TRUE
[13:34:43.917] signalConditionsASAP(NULL, pos=0) ... done
[13:34:43.917] resolve() on list ... DONE
[13:34:43.917] result() for ClusterFuture ...
[13:34:43.917] - result already collected: FutureResult
[13:34:43.917] result() for ClusterFuture ... done
[13:34:43.917] result() for ClusterFuture ...
[13:34:43.918] - result already collected: FutureResult
[13:34:43.918] result() for ClusterFuture ... done
[13:34:43.918] result() for ClusterFuture ...
[13:34:43.918] - result already collected: FutureResult
[13:34:43.918] result() for ClusterFuture ... done
[13:34:43.918] result() for ClusterFuture ...
[13:34:43.918] - result already collected: FutureResult
[13:34:43.918] result() for ClusterFuture ... done
[13:34:43.918]  - Number of value chunks collected: 2
[13:34:43.918] Resolving 2 futures (chunks) ... DONE
[13:34:43.918] Reducing values from 2 chunks ...
[13:34:43.919]  - Number of values collected after concatenation: 5
[13:34:43.919]  - Number of values expected: 5
[13:34:43.919] Reducing values from 2 chunks ... DONE
[13:34:43.919] future_lapply() ... DONE
[13:34:43.919] plan(): Setting new future strategy stack:
[13:34:43.919] List of future strategies:
[13:34:43.919] 1. sequential:
[13:34:43.919]    - args: function (..., envir = parent.frame())
[13:34:43.919]    - tweaked: FALSE
[13:34:43.919]    - call: plan(sequential)
[13:34:43.920] plan(): nbrOfWorkers() = 1
*** strategy = ‘multisession’ ... done
> 
> message("*** future_replicate() ... DONE")
*** future_replicate() ... DONE
> 
> source("incl/end.R")
[13:34:43.921] plan(): Setting new future strategy stack:
[13:34:43.921] List of future strategies:
[13:34:43.921] 1. FutureStrategy:
[13:34:43.921]    - args: function (..., envir = parent.frame())
[13:34:43.921]    - tweaked: FALSE
[13:34:43.921]    - call: future::plan(oplan)
[13:34:43.922] plan(): nbrOfWorkers() = 1
> 
