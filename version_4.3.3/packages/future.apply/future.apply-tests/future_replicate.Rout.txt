
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
Loading required package: future
[16:18:47.694] plan(): Setting new future strategy stack:
[16:18:47.694] List of future strategies:
[16:18:47.694] 1. sequential:
[16:18:47.694]    - args: function (..., envir = parent.frame())
[16:18:47.694]    - tweaked: FALSE
[16:18:47.694]    - call: future::plan("sequential")
[16:18:47.709] plan(): nbrOfWorkers() = 1
> 
> message("*** future_replicate() ...")
*** future_replicate() ...
> 
> for (strategy in supportedStrategies()) {
+   message(sprintf("*** strategy = %s ...", sQuote(strategy)))
+   plan(strategy)
+   
+   y0 <- replicate(5L, sample(10L, size = 1L))
+   y1 <- future_replicate(5L, sample(10L, size = 1L))
+   stopifnot(length(y0) == length(y1))
+   
+   set.seed(0xBEEF)
+   y1 <- future_replicate(5L, sample(10L, size = 1L))
+   set.seed(0xBEEF)
+   y2 <- future_replicate(5L, sample(10L, size = 1L))
+   stopifnot(all.equal(y2, y1))
+   
+   y3 <- future_replicate(5L, sample(10L, size = 1L), future.seed = 0xBEEF)
+   y4 <- future_replicate(5L, sample(10L, size = 1L), future.seed = 0xBEEF)
+   stopifnot(all.equal(y4, y3))
+   
+   
+   message("- example(replicate) ...")
+   
+   foo <- function(x = 1, y = 2) c(x, y)
+   bar0 <- function(n, x) replicate(n, foo(x = x))
+   y0 <- bar0(5, x = 3)
+   
+   bar1 <- function(n, x) future_replicate(n, foo(x = x))
+   y1 <- bar1(5, x = 3)
+   stopifnot(all.equal(y1, y0))
+   
+   plan(sequential)
+   message(sprintf("*** strategy = %s ... done", sQuote(strategy)))
+ } ## for (strategy in ...) 
*** strategy = ‘sequential’ ...
[16:18:47.734] plan(): Setting new future strategy stack:
[16:18:47.734] List of future strategies:
[16:18:47.734] 1. sequential:
[16:18:47.734]    - args: function (..., envir = parent.frame())
[16:18:47.734]    - tweaked: FALSE
[16:18:47.734]    - call: plan(strategy)
[16:18:47.747] plan(): nbrOfWorkers() = 1
[16:18:47.748] future_lapply() ...
[16:18:47.752] Generating random seeds ...
[16:18:47.752] Generating random seed streams for 5 elements ...
[16:18:47.752] Generating random seed streams for 5 elements ... DONE
[16:18:47.752] Generating random seeds ... DONE
[16:18:47.753] Will set RNG state on exit: 10403, 9, 663357872, 1508726990, 2061968953, -440141749, -1262818822, -1367169796, 184060223, -25082347, 653645100, 908137986, -1252414243, 1645565911, 321823422, 970011896, -1706046757, 1343607097, -249162616, -1019390922, 308490353, 1551639203, -1204635662, 1233607492, 1751086087, 1583518173, 693751508, -1050971654, -1527210683, -1109759585, 1078270758, -1615117392, -913321901, -1933276303, -1742357856, -1183232450, 1214063945, 1174526971, -308928566, 244969772, 1492348207, 569807845, 1581386396, -2016932110, -1924628627, 645191847, 958741198, 434972712, 409678891, -1384335799, -1071759528, 176159238, -1055415327, -1494204045, 390394338, -1451932332, 1211595863, -825524147, 973079524, -1162354230, -1627051979, 829843087, 1109301142, -394921152, -1963149821, 2000342049, 296574736, 339440878, -1923015527, -1388316373, 1257254938, 98282204, 842283743, 1707099317, -855559604, -386597214, 1521174013, -659738889, -1118222306, -1933071656, -1586438597, -2079372327, 386423144, -397162, 649907729, -1688934461, -1873634350, 1577182820, -1720371801, 750086909, -464064780, -468612646, -924103387, -1985930177, 214059974, -1147099056, -1931492237, 714123409, -1282082624, 103543454, -1432375703, -1930264933, -1495329878, 537655244, -566834545, 1480647365, -1032107396, 1233667794, 1209889357, 1065623303, 736543470, 996915144, -1793541941, 34670889, 1903948152, -1121159514, -1476558655, 859687251, 1055536642, -1395519692, -1838719817, -923964243, -1814750780, -601572886, 1356023381, -467626001, -1901680650, -645209824, -1758458141, 1892923265, 763490800, -1641910130, 1199765497, -1870361205, 1486125498, 1193719996, 1583209471, 440322389, -229764500, 945665730, -2131115747, 1306933143, 1510650622, -1719727944, 422482587, 600842489, 1700315720, 859983222, -427852623, 1741811939, -12955726, 933548036, 550961991, 1735940637, 1143615636, -1575321542, 2050794117, 1912103775, 1213553638, 2135479920, 1313233299, -990142927, -988408608, -735050370, -795207671, 949950523, -2103450102, -204204564, -610330001, -569731675, -1525103268, -528033486, -1647286227, 1841604327, 1121471502, 1549325800, -246276117, 1317363849, 988410904, 2046182214, 2116501921, -1772253133, -56664670, -675174252, 649879319, 899291405, -766840796, -1984688118, 1144288629, 1687450831, 323418070, 1520646016, 265579459, 1454587233, -1034984496, -1234595026, 288091865, 514383083, 620698970, 1280470812, 220252703, 143923829, 1943656204, -1009071390, -1324437571, -1918609353, -1037643042, 782061080, -103296645, -53581543, 785462696, -1500751530, -2066462255, 1236552067, -737978350, 145955748, 1284737895, 1867264189, 1128409140, 1533750170, -1075845147, -608136321, -1910418682, -470360944, 1481870643, -925914415, 650629248, 2014128478, 8666793, -713727896, 1030288460, -1767888644, -1637946382, 657484032, -665497228, -1004553208, -469577798, -855686704, 781265900, 442872212, 545485266, -1844862624, 1151065932, 233675040, 529592194, 1488133864, -1464561428, -364891076, 549563250, 749600368, 440316964, -1657058504, 947686554, -625970480, -1847426884, 983363220, -959183230, -1407330112, -1513819332, 1413749904, -1255088606, 662536200, -1232650996, -1130865508, 738975250, 1185038208, 284503572, -2109257176, 140674362, -522970672, -333253524, 12745012, 537110162, -580891808, 1382351692, -1866377248, -632084574, 880625576, 1792462220, 784492732, -1932244622, -1794165520, -1631911868, -8335016, -1886030278, -2129732752, -1072744388, 84123412, 1104459202, -1854063904, -1920718980, 351039184, 1692055714, -846259160, 294970636, 1569449916, -650974926, -1147622976, 633342516, -720426040, 899184826, 432691600, -99749396, -1524252076, -110313326, 1805516576, -2039617076, 179033568, -350275902, -844536792, -1485901140, -503855940, -1133348366, 1736180016, 1358140580, 985933496, 990645594, 1815881104, -2081385604, 1772173588, -3714238, -994116864, -430016580, 62078800, 2025423650, 662658376, 2054093324, 2128500828, -1346351918, 299850240, 1801178452, 1542380008, 391846906, 1698574544, 730742060, -1636896012, 1745185170, -1364659104, 1157006604, 1395233504, 1256524130, -1480570200, -908897716, 1961836924, 1399620914, -1447128976, -280987836, 263704024, -1265361798, 34401840, -344323396, -1868755116, -163285950, 1772686752, -1156031812, 1352374736, 1229573474, -950161432, -1639405620, -2026569988, -679353870, -1815099264, 1649415412, -1269107064, 1444251450, 1801376592, 2070083180, 158126228, 2099519826, -1101316384, -1137446196, -1040822112, 527842178, -1481362712, 1590678252, 879389756, 1877074546, 1949549680, 29263396, -2042026952, 261310490, -1693693232, -1136188356, -714951532, 1632824450, -1063417920, 1456585020, -1633807728, -1308885982, 1145185288, -1594034036, 661392412, 1301128850, 1775047808, -1708204012, 284894504, -841437638, 2079302864, -699825044, 233919156, 290154514, -1066346528, 1895649228, 734981600, 1769451042, -2089260760, 1981296908, -148457924, -1055694606, 950434544, -1422417084, -1530533288, 1237340730, 1041581808, -507642692, -1601106412, 1742151874, -1770672032, 73256316, -382395184, 60152866, 1368529576, -461443188, -1561962052, 374273074, -993192128, 1176205492, -1639251128, 281598650, -1844539632, -784852756, 1583150164, -2108504302, 1989751712, 1376673740, 727608160, -1301778238, -1275832792, -650000980, 944086844, 1166913394, 788710192, 1814200868, -747089864, 325004506, -361799280, 1860478716, 1566523284, -1711561918, 1815894528, -950435268, -407718320, -669625694, -1219253432, 1593539084, -1857983268, -243348639, -999280730, -76727900, 791019605, 354858239, 583621016, -2017844554, 1315420995, -1963080059, -811390174, 677695504, -2028401735, -930980757, -949133476, 2067433098, -267279745, 1943006153, 287299678, -988230900, -677326115, 1070365671, -46030832, -1558065874, -1151974949, -248621379, 285443114, 671773896, 1024520689, -386367645, 1103218532, 206675602, 1324178279, 158516529, 1115217526, -1922383980, -1928569947, 1508813999, -821583512, -922449594, -386653965, -1620337067, 954991154, 522121216, -959539991, -2045758629, -1408502356, -730354246, 147626863, 1272536313, -725384818, 2071614556, 693954253, -962678217, 1369159872, -1319762018, 925224043, -1569264659, 726953562, 1940074776, -850264447, -1519856589, 1427071572, 885876322, -1924855561, -638325951, -1332272698, 2007853828, 42360501, -1076803169, -215693832, -1796838442, -1934158237, 1039386149, 1844663746, -1439348048, 1349599961, 746746955, 111626940, 1169357034, 963319071, -1802355287, 1878358846, -1477667284, 1020830845, 1418927815, -756545616, 1882479054, -1702776069, 1072263517, 1359508106, 1025024168, 971326481, -2088225533, 1644877828, 1282922546, -427921273, 765435089, -1039235498, 554325556, 960113989, 2055577487, -351007992, 1311558950, -770394669, 1162018613, -656370030, -521694624, -1620048951, -1748122885, -1919701812, 1115694426, -1457838001, -1458641639, 449072942, 268501308, -433551699, -126303913, 693907616, 1680100862, 257499339, 1858961101, 1311263226, -1236250056, 852660193, 1690126483, 669182644, 490112962, -1938258985, -845476831, 476793830, -715942172, 1806090773, -687568321, -792755752, -23021578, -1909792765, 1288424261, -19390622, 1784660176, -203953159, -900315349, 855610524, -1612526902, -1161854017, -1688326391, -1894238178, 955738572, -1374444643, 72408615, -88099760, -1180500754, -1808893541, -1086017539, 1113610986, -1985655416, -1799439567, -1159212125, -780627036, -937705902, 392199591, 402176497, 1570467126, 270570964, -1855235227, 1328169839, 1031921064, 726065926, 1424365107, 157408405, -980647756
[16:18:47.753] Number of chunks: 1
[16:18:47.754] getGlobalsAndPackagesXApply() ...
[16:18:47.754]  - future.globals: TRUE
[16:18:47.754] getGlobalsAndPackages() ...
[16:18:47.755] Searching for globals...
[16:18:47.757] - globals found: [2] ‘FUN’, ‘sample’
[16:18:47.757] Searching for globals ... DONE
[16:18:47.757] Resolving globals: FALSE
[16:18:47.758] The total size of the 1 globals is 616 bytes (616 bytes)
[16:18:47.759] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:18:47.759] - globals: [1] ‘FUN’
[16:18:47.759] 
[16:18:47.759] getGlobalsAndPackages() ... DONE
[16:18:47.759]  - globals found/used: [n=1] ‘FUN’
[16:18:47.759]  - needed namespaces: [n=0] 
[16:18:47.759] Finding globals ... DONE
[16:18:47.759]  - use_args: TRUE
[16:18:47.759]  - Getting '...' globals ...
[16:18:47.760] resolve() on list ...
[16:18:47.760]  recursive: 0
[16:18:47.761]  length: 1
[16:18:47.761]  elements: ‘...’
[16:18:47.761]  length: 0 (resolved future 1)
[16:18:47.761] resolve() on list ... DONE
[16:18:47.761]    - '...' content: [n=0] 
[16:18:47.761] List of 1
[16:18:47.761]  $ ...: list()
[16:18:47.761]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:47.761]  - attr(*, "where")=List of 1
[16:18:47.761]   ..$ ...:<environment: 0x55e79ed4c8d8> 
[16:18:47.761]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:47.761]  - attr(*, "resolved")= logi TRUE
[16:18:47.761]  - attr(*, "total_size")= num NA
[16:18:47.766]  - Getting '...' globals ... DONE
[16:18:47.766] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:18:47.766] List of 2
[16:18:47.766]  $ ...future.FUN:function (...)  
[16:18:47.766]  $ ...          : list()
[16:18:47.766]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:47.766]  - attr(*, "where")=List of 2
[16:18:47.766]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:18:47.766]   ..$ ...          :<environment: 0x55e79ed4c8d8> 
[16:18:47.766]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:47.766]  - attr(*, "resolved")= logi FALSE
[16:18:47.766]  - attr(*, "total_size")= num 616
[16:18:47.769] Packages to be attached in all futures: [n=0] 
[16:18:47.769] getGlobalsAndPackagesXApply() ... DONE
[16:18:47.770] Number of futures (= number of chunks): 1
[16:18:47.770] Launching 1 futures (chunks) ...
[16:18:47.770] Chunk #1 of 1 ...
[16:18:47.770]  - Finding globals in 'X' for chunk #1 ...
[16:18:47.770] getGlobalsAndPackages() ...
[16:18:47.770] Searching for globals...
[16:18:47.771] 
[16:18:47.771] Searching for globals ... DONE
[16:18:47.771] - globals: [0] <none>
[16:18:47.771] getGlobalsAndPackages() ... DONE
[16:18:47.771]    + additional globals found: [n=0] 
[16:18:47.771]    + additional namespaces needed: [n=0] 
[16:18:47.771]  - Finding globals in 'X' for chunk #1 ... DONE
[16:18:47.771]  - seeds: [5] <seeds>
[16:18:47.771]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:47.772] getGlobalsAndPackages() ...
[16:18:47.772] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:47.772] Resolving globals: FALSE
[16:18:47.772] Tweak future expression to call with '...' arguments ...
[16:18:47.774] {
[16:18:47.774]     do.call(function(...) {
[16:18:47.774]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:47.774]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:47.774]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:47.774]             on.exit(options(oopts), add = TRUE)
[16:18:47.774]         }
[16:18:47.774]         {
[16:18:47.774]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:47.774]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:47.774]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:47.774]                   envir = globalenv(), inherits = FALSE)
[16:18:47.774]                 ...future.FUN(...future.X_jj, ...)
[16:18:47.774]             })
[16:18:47.774]         }
[16:18:47.774]     }, args = future.call.arguments)
[16:18:47.774] }
[16:18:47.775] Tweak future expression to call with '...' arguments ... DONE
[16:18:47.775] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:47.775] 
[16:18:47.775] getGlobalsAndPackages() ... DONE
[16:18:47.776] run() for ‘Future’ ...
[16:18:47.776] - state: ‘created’
[16:18:47.776] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:18:47.777] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:18:47.777] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:18:47.777]   - Field: ‘label’
[16:18:47.777]   - Field: ‘local’
[16:18:47.777]   - Field: ‘owner’
[16:18:47.777]   - Field: ‘envir’
[16:18:47.777]   - Field: ‘packages’
[16:18:47.778]   - Field: ‘gc’
[16:18:47.778]   - Field: ‘conditions’
[16:18:47.778]   - Field: ‘expr’
[16:18:47.778]   - Field: ‘uuid’
[16:18:47.778]   - Field: ‘seed’
[16:18:47.778]   - Field: ‘version’
[16:18:47.778]   - Field: ‘result’
[16:18:47.778]   - Field: ‘asynchronous’
[16:18:47.778]   - Field: ‘calls’
[16:18:47.778]   - Field: ‘globals’
[16:18:47.778]   - Field: ‘stdout’
[16:18:47.779]   - Field: ‘earlySignal’
[16:18:47.779]   - Field: ‘lazy’
[16:18:47.779]   - Field: ‘state’
[16:18:47.779] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:18:47.779] - Launch lazy future ...
[16:18:47.780] Packages needed by the future expression (n = 0): <none>
[16:18:47.780] Packages needed by future strategies (n = 0): <none>
[16:18:47.781] {
[16:18:47.781]     {
[16:18:47.781]         {
[16:18:47.781]             ...future.startTime <- base::Sys.time()
[16:18:47.781]             {
[16:18:47.781]                 {
[16:18:47.781]                   {
[16:18:47.781]                     base::local({
[16:18:47.781]                       has_future <- base::requireNamespace("future", 
[16:18:47.781]                         quietly = TRUE)
[16:18:47.781]                       if (has_future) {
[16:18:47.781]                         ns <- base::getNamespace("future")
[16:18:47.781]                         version <- ns[[".package"]][["version"]]
[16:18:47.781]                         if (is.null(version)) 
[16:18:47.781]                           version <- utils::packageVersion("future")
[16:18:47.781]                       }
[16:18:47.781]                       else {
[16:18:47.781]                         version <- NULL
[16:18:47.781]                       }
[16:18:47.781]                       if (!has_future || version < "1.8.0") {
[16:18:47.781]                         info <- base::c(r_version = base::gsub("R version ", 
[16:18:47.781]                           "", base::R.version$version.string), 
[16:18:47.781]                           platform = base::sprintf("%s (%s-bit)", 
[16:18:47.781]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:18:47.781]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:18:47.781]                             "release", "version")], collapse = " "), 
[16:18:47.781]                           hostname = base::Sys.info()[["nodename"]])
[16:18:47.781]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:18:47.781]                           info)
[16:18:47.781]                         info <- base::paste(info, collapse = "; ")
[16:18:47.781]                         if (!has_future) {
[16:18:47.781]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:18:47.781]                             info)
[16:18:47.781]                         }
[16:18:47.781]                         else {
[16:18:47.781]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:18:47.781]                             info, version)
[16:18:47.781]                         }
[16:18:47.781]                         base::stop(msg)
[16:18:47.781]                       }
[16:18:47.781]                     })
[16:18:47.781]                   }
[16:18:47.781]                   ...future.strategy.old <- future::plan("list")
[16:18:47.781]                   options(future.plan = NULL)
[16:18:47.781]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:18:47.781]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:18:47.781]                 }
[16:18:47.781]                 ...future.workdir <- getwd()
[16:18:47.781]             }
[16:18:47.781]             ...future.oldOptions <- base::as.list(base::.Options)
[16:18:47.781]             ...future.oldEnvVars <- base::Sys.getenv()
[16:18:47.781]         }
[16:18:47.781]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:18:47.781]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:18:47.781]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:18:47.781]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:18:47.781]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:18:47.781]             future.stdout.windows.reencode = NULL, width = 80L)
[16:18:47.781]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:18:47.781]             base::names(...future.oldOptions))
[16:18:47.781]     }
[16:18:47.781]     if (FALSE) {
[16:18:47.781]     }
[16:18:47.781]     else {
[16:18:47.781]         if (TRUE) {
[16:18:47.781]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:18:47.781]                 open = "w")
[16:18:47.781]         }
[16:18:47.781]         else {
[16:18:47.781]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:18:47.781]                 windows = "NUL", "/dev/null"), open = "w")
[16:18:47.781]         }
[16:18:47.781]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:18:47.781]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:18:47.781]             base::sink(type = "output", split = FALSE)
[16:18:47.781]             base::close(...future.stdout)
[16:18:47.781]         }, add = TRUE)
[16:18:47.781]     }
[16:18:47.781]     ...future.frame <- base::sys.nframe()
[16:18:47.781]     ...future.conditions <- base::list()
[16:18:47.781]     ...future.rng <- base::globalenv()$.Random.seed
[16:18:47.781]     if (FALSE) {
[16:18:47.781]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:18:47.781]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:18:47.781]     }
[16:18:47.781]     ...future.result <- base::tryCatch({
[16:18:47.781]         base::withCallingHandlers({
[16:18:47.781]             ...future.value <- base::withVisible(base::local({
[16:18:47.781]                 do.call(function(...) {
[16:18:47.781]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:47.781]                   if (!identical(...future.globals.maxSize.org, 
[16:18:47.781]                     ...future.globals.maxSize)) {
[16:18:47.781]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:47.781]                     on.exit(options(oopts), add = TRUE)
[16:18:47.781]                   }
[16:18:47.781]                   {
[16:18:47.781]                     lapply(seq_along(...future.elements_ii), 
[16:18:47.781]                       FUN = function(jj) {
[16:18:47.781]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:47.781]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:47.781]                           envir = globalenv(), inherits = FALSE)
[16:18:47.781]                         ...future.FUN(...future.X_jj, ...)
[16:18:47.781]                       })
[16:18:47.781]                   }
[16:18:47.781]                 }, args = future.call.arguments)
[16:18:47.781]             }))
[16:18:47.781]             future::FutureResult(value = ...future.value$value, 
[16:18:47.781]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:47.781]                   ...future.rng), globalenv = if (FALSE) 
[16:18:47.781]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:18:47.781]                     ...future.globalenv.names))
[16:18:47.781]                 else NULL, started = ...future.startTime, version = "1.8")
[16:18:47.781]         }, condition = base::local({
[16:18:47.781]             c <- base::c
[16:18:47.781]             inherits <- base::inherits
[16:18:47.781]             invokeRestart <- base::invokeRestart
[16:18:47.781]             length <- base::length
[16:18:47.781]             list <- base::list
[16:18:47.781]             seq.int <- base::seq.int
[16:18:47.781]             signalCondition <- base::signalCondition
[16:18:47.781]             sys.calls <- base::sys.calls
[16:18:47.781]             `[[` <- base::`[[`
[16:18:47.781]             `+` <- base::`+`
[16:18:47.781]             `<<-` <- base::`<<-`
[16:18:47.781]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:18:47.781]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:18:47.781]                   3L)]
[16:18:47.781]             }
[16:18:47.781]             function(cond) {
[16:18:47.781]                 is_error <- inherits(cond, "error")
[16:18:47.781]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:18:47.781]                   NULL)
[16:18:47.781]                 if (is_error) {
[16:18:47.781]                   sessionInformation <- function() {
[16:18:47.781]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:18:47.781]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:18:47.781]                       search = base::search(), system = base::Sys.info())
[16:18:47.781]                   }
[16:18:47.781]                   ...future.conditions[[length(...future.conditions) + 
[16:18:47.781]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:18:47.781]                     cond$call), session = sessionInformation(), 
[16:18:47.781]                     timestamp = base::Sys.time(), signaled = 0L)
[16:18:47.781]                   signalCondition(cond)
[16:18:47.781]                 }
[16:18:47.781]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:18:47.781]                 "immediateCondition"))) {
[16:18:47.781]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:18:47.781]                   ...future.conditions[[length(...future.conditions) + 
[16:18:47.781]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:18:47.781]                   if (TRUE && !signal) {
[16:18:47.781]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:47.781]                     {
[16:18:47.781]                       inherits <- base::inherits
[16:18:47.781]                       invokeRestart <- base::invokeRestart
[16:18:47.781]                       is.null <- base::is.null
[16:18:47.781]                       muffled <- FALSE
[16:18:47.781]                       if (inherits(cond, "message")) {
[16:18:47.781]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:47.781]                         if (muffled) 
[16:18:47.781]                           invokeRestart("muffleMessage")
[16:18:47.781]                       }
[16:18:47.781]                       else if (inherits(cond, "warning")) {
[16:18:47.781]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:47.781]                         if (muffled) 
[16:18:47.781]                           invokeRestart("muffleWarning")
[16:18:47.781]                       }
[16:18:47.781]                       else if (inherits(cond, "condition")) {
[16:18:47.781]                         if (!is.null(pattern)) {
[16:18:47.781]                           computeRestarts <- base::computeRestarts
[16:18:47.781]                           grepl <- base::grepl
[16:18:47.781]                           restarts <- computeRestarts(cond)
[16:18:47.781]                           for (restart in restarts) {
[16:18:47.781]                             name <- restart$name
[16:18:47.781]                             if (is.null(name)) 
[16:18:47.781]                               next
[16:18:47.781]                             if (!grepl(pattern, name)) 
[16:18:47.781]                               next
[16:18:47.781]                             invokeRestart(restart)
[16:18:47.781]                             muffled <- TRUE
[16:18:47.781]                             break
[16:18:47.781]                           }
[16:18:47.781]                         }
[16:18:47.781]                       }
[16:18:47.781]                       invisible(muffled)
[16:18:47.781]                     }
[16:18:47.781]                     muffleCondition(cond, pattern = "^muffle")
[16:18:47.781]                   }
[16:18:47.781]                 }
[16:18:47.781]                 else {
[16:18:47.781]                   if (TRUE) {
[16:18:47.781]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:47.781]                     {
[16:18:47.781]                       inherits <- base::inherits
[16:18:47.781]                       invokeRestart <- base::invokeRestart
[16:18:47.781]                       is.null <- base::is.null
[16:18:47.781]                       muffled <- FALSE
[16:18:47.781]                       if (inherits(cond, "message")) {
[16:18:47.781]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:47.781]                         if (muffled) 
[16:18:47.781]                           invokeRestart("muffleMessage")
[16:18:47.781]                       }
[16:18:47.781]                       else if (inherits(cond, "warning")) {
[16:18:47.781]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:47.781]                         if (muffled) 
[16:18:47.781]                           invokeRestart("muffleWarning")
[16:18:47.781]                       }
[16:18:47.781]                       else if (inherits(cond, "condition")) {
[16:18:47.781]                         if (!is.null(pattern)) {
[16:18:47.781]                           computeRestarts <- base::computeRestarts
[16:18:47.781]                           grepl <- base::grepl
[16:18:47.781]                           restarts <- computeRestarts(cond)
[16:18:47.781]                           for (restart in restarts) {
[16:18:47.781]                             name <- restart$name
[16:18:47.781]                             if (is.null(name)) 
[16:18:47.781]                               next
[16:18:47.781]                             if (!grepl(pattern, name)) 
[16:18:47.781]                               next
[16:18:47.781]                             invokeRestart(restart)
[16:18:47.781]                             muffled <- TRUE
[16:18:47.781]                             break
[16:18:47.781]                           }
[16:18:47.781]                         }
[16:18:47.781]                       }
[16:18:47.781]                       invisible(muffled)
[16:18:47.781]                     }
[16:18:47.781]                     muffleCondition(cond, pattern = "^muffle")
[16:18:47.781]                   }
[16:18:47.781]                 }
[16:18:47.781]             }
[16:18:47.781]         }))
[16:18:47.781]     }, error = function(ex) {
[16:18:47.781]         base::structure(base::list(value = NULL, visible = NULL, 
[16:18:47.781]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:47.781]                 ...future.rng), started = ...future.startTime, 
[16:18:47.781]             finished = Sys.time(), session_uuid = NA_character_, 
[16:18:47.781]             version = "1.8"), class = "FutureResult")
[16:18:47.781]     }, finally = {
[16:18:47.781]         if (!identical(...future.workdir, getwd())) 
[16:18:47.781]             setwd(...future.workdir)
[16:18:47.781]         {
[16:18:47.781]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:18:47.781]                 ...future.oldOptions$nwarnings <- NULL
[16:18:47.781]             }
[16:18:47.781]             base::options(...future.oldOptions)
[16:18:47.781]             if (.Platform$OS.type == "windows") {
[16:18:47.781]                 old_names <- names(...future.oldEnvVars)
[16:18:47.781]                 envs <- base::Sys.getenv()
[16:18:47.781]                 names <- names(envs)
[16:18:47.781]                 common <- intersect(names, old_names)
[16:18:47.781]                 added <- setdiff(names, old_names)
[16:18:47.781]                 removed <- setdiff(old_names, names)
[16:18:47.781]                 changed <- common[...future.oldEnvVars[common] != 
[16:18:47.781]                   envs[common]]
[16:18:47.781]                 NAMES <- toupper(changed)
[16:18:47.781]                 args <- list()
[16:18:47.781]                 for (kk in seq_along(NAMES)) {
[16:18:47.781]                   name <- changed[[kk]]
[16:18:47.781]                   NAME <- NAMES[[kk]]
[16:18:47.781]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:47.781]                     next
[16:18:47.781]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:47.781]                 }
[16:18:47.781]                 NAMES <- toupper(added)
[16:18:47.781]                 for (kk in seq_along(NAMES)) {
[16:18:47.781]                   name <- added[[kk]]
[16:18:47.781]                   NAME <- NAMES[[kk]]
[16:18:47.781]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:47.781]                     next
[16:18:47.781]                   args[[name]] <- ""
[16:18:47.781]                 }
[16:18:47.781]                 NAMES <- toupper(removed)
[16:18:47.781]                 for (kk in seq_along(NAMES)) {
[16:18:47.781]                   name <- removed[[kk]]
[16:18:47.781]                   NAME <- NAMES[[kk]]
[16:18:47.781]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:47.781]                     next
[16:18:47.781]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:47.781]                 }
[16:18:47.781]                 if (length(args) > 0) 
[16:18:47.781]                   base::do.call(base::Sys.setenv, args = args)
[16:18:47.781]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:18:47.781]             }
[16:18:47.781]             else {
[16:18:47.781]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:18:47.781]             }
[16:18:47.781]             {
[16:18:47.781]                 if (base::length(...future.futureOptionsAdded) > 
[16:18:47.781]                   0L) {
[16:18:47.781]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:18:47.781]                   base::names(opts) <- ...future.futureOptionsAdded
[16:18:47.781]                   base::options(opts)
[16:18:47.781]                 }
[16:18:47.781]                 {
[16:18:47.781]                   {
[16:18:47.781]                     base::assign(".Random.seed", c(10403L, 9L, 
[16:18:47.781]                     663357872L, 1508726990L, 2061968953L, -440141749L, 
[16:18:47.781]                     -1262818822L, -1367169796L, 184060223L, -25082347L, 
[16:18:47.781]                     653645100L, 908137986L, -1252414243L, 1645565911L, 
[16:18:47.781]                     321823422L, 970011896L, -1706046757L, 1343607097L, 
[16:18:47.781]                     -249162616L, -1019390922L, 308490353L, 1551639203L, 
[16:18:47.781]                     -1204635662L, 1233607492L, 1751086087L, 1583518173L, 
[16:18:47.781]                     693751508L, -1050971654L, -1527210683L, -1109759585L, 
[16:18:47.781]                     1078270758L, -1615117392L, -913321901L, -1933276303L, 
[16:18:47.781]                     -1742357856L, -1183232450L, 1214063945L, 
[16:18:47.781]                     1174526971L, -308928566L, 244969772L, 1492348207L, 
[16:18:47.781]                     569807845L, 1581386396L, -2016932110L, -1924628627L, 
[16:18:47.781]                     645191847L, 958741198L, 434972712L, 409678891L, 
[16:18:47.781]                     -1384335799L, -1071759528L, 176159238L, -1055415327L, 
[16:18:47.781]                     -1494204045L, 390394338L, -1451932332L, 1211595863L, 
[16:18:47.781]                     -825524147L, 973079524L, -1162354230L, -1627051979L, 
[16:18:47.781]                     829843087L, 1109301142L, -394921152L, -1963149821L, 
[16:18:47.781]                     2000342049L, 296574736L, 339440878L, -1923015527L, 
[16:18:47.781]                     -1388316373L, 1257254938L, 98282204L, 842283743L, 
[16:18:47.781]                     1707099317L, -855559604L, -386597214L, 1521174013L, 
[16:18:47.781]                     -659738889L, -1118222306L, -1933071656L, 
[16:18:47.781]                     -1586438597L, -2079372327L, 386423144L, -397162L, 
[16:18:47.781]                     649907729L, -1688934461L, -1873634350L, 1577182820L, 
[16:18:47.781]                     -1720371801L, 750086909L, -464064780L, -468612646L, 
[16:18:47.781]                     -924103387L, -1985930177L, 214059974L, -1147099056L, 
[16:18:47.781]                     -1931492237L, 714123409L, -1282082624L, 103543454L, 
[16:18:47.781]                     -1432375703L, -1930264933L, -1495329878L, 
[16:18:47.781]                     537655244L, -566834545L, 1480647365L, -1032107396L, 
[16:18:47.781]                     1233667794L, 1209889357L, 1065623303L, 736543470L, 
[16:18:47.781]                     996915144L, -1793541941L, 34670889L, 1903948152L, 
[16:18:47.781]                     -1121159514L, -1476558655L, 859687251L, 1055536642L, 
[16:18:47.781]                     -1395519692L, -1838719817L, -923964243L, 
[16:18:47.781]                     -1814750780L, -601572886L, 1356023381L, -467626001L, 
[16:18:47.781]                     -1901680650L, -645209824L, -1758458141L, 
[16:18:47.781]                     1892923265L, 763490800L, -1641910130L, 1199765497L, 
[16:18:47.781]                     -1870361205L, 1486125498L, 1193719996L, 1583209471L, 
[16:18:47.781]                     440322389L, -229764500L, 945665730L, -2131115747L, 
[16:18:47.781]                     1306933143L, 1510650622L, -1719727944L, 422482587L, 
[16:18:47.781]                     600842489L, 1700315720L, 859983222L, -427852623L, 
[16:18:47.781]                     1741811939L, -12955726L, 933548036L, 550961991L, 
[16:18:47.781]                     1735940637L, 1143615636L, -1575321542L, 2050794117L, 
[16:18:47.781]                     1912103775L, 1213553638L, 2135479920L, 1313233299L, 
[16:18:47.781]                     -990142927L, -988408608L, -735050370L, -795207671L, 
[16:18:47.781]                     949950523L, -2103450102L, -204204564L, -610330001L, 
[16:18:47.781]                     -569731675L, -1525103268L, -528033486L, -1647286227L, 
[16:18:47.781]                     1841604327L, 1121471502L, 1549325800L, -246276117L, 
[16:18:47.781]                     1317363849L, 988410904L, 2046182214L, 2116501921L, 
[16:18:47.781]                     -1772253133L, -56664670L, -675174252L, 649879319L, 
[16:18:47.781]                     899291405L, -766840796L, -1984688118L, 1144288629L, 
[16:18:47.781]                     1687450831L, 323418070L, 1520646016L, 265579459L, 
[16:18:47.781]                     1454587233L, -1034984496L, -1234595026L, 
[16:18:47.781]                     288091865L, 514383083L, 620698970L, 1280470812L, 
[16:18:47.781]                     220252703L, 143923829L, 1943656204L, -1009071390L, 
[16:18:47.781]                     -1324437571L, -1918609353L, -1037643042L, 
[16:18:47.781]                     782061080L, -103296645L, -53581543L, 785462696L, 
[16:18:47.781]                     -1500751530L, -2066462255L, 1236552067L, 
[16:18:47.781]                     -737978350L, 145955748L, 1284737895L, 1867264189L, 
[16:18:47.781]                     1128409140L, 1533750170L, -1075845147L, -608136321L, 
[16:18:47.781]                     -1910418682L, -470360944L, 1481870643L, -925914415L, 
[16:18:47.781]                     650629248L, 2014128478L, 8666793L, -713727896L, 
[16:18:47.781]                     1030288460L, -1767888644L, -1637946382L, 
[16:18:47.781]                     657484032L, -665497228L, -1004553208L, -469577798L, 
[16:18:47.781]                     -855686704L, 781265900L, 442872212L, 545485266L, 
[16:18:47.781]                     -1844862624L, 1151065932L, 233675040L, 529592194L, 
[16:18:47.781]                     1488133864L, -1464561428L, -364891076L, 549563250L, 
[16:18:47.781]                     749600368L, 440316964L, -1657058504L, 947686554L, 
[16:18:47.781]                     -625970480L, -1847426884L, 983363220L, -959183230L, 
[16:18:47.781]                     -1407330112L, -1513819332L, 1413749904L, 
[16:18:47.781]                     -1255088606L, 662536200L, -1232650996L, -1130865508L, 
[16:18:47.781]                     738975250L, 1185038208L, 284503572L, -2109257176L, 
[16:18:47.781]                     140674362L, -522970672L, -333253524L, 12745012L, 
[16:18:47.781]                     537110162L, -580891808L, 1382351692L, -1866377248L, 
[16:18:47.781]                     -632084574L, 880625576L, 1792462220L, 784492732L, 
[16:18:47.781]                     -1932244622L, -1794165520L, -1631911868L, 
[16:18:47.781]                     -8335016L, -1886030278L, -2129732752L, -1072744388L, 
[16:18:47.781]                     84123412L, 1104459202L, -1854063904L, -1920718980L, 
[16:18:47.781]                     351039184L, 1692055714L, -846259160L, 294970636L, 
[16:18:47.781]                     1569449916L, -650974926L, -1147622976L, 633342516L, 
[16:18:47.781]                     -720426040L, 899184826L, 432691600L, -99749396L, 
[16:18:47.781]                     -1524252076L, -110313326L, 1805516576L, -2039617076L, 
[16:18:47.781]                     179033568L, -350275902L, -844536792L, -1485901140L, 
[16:18:47.781]                     -503855940L, -1133348366L, 1736180016L, 1358140580L, 
[16:18:47.781]                     985933496L, 990645594L, 1815881104L, -2081385604L, 
[16:18:47.781]                     1772173588L, -3714238L, -994116864L, -430016580L, 
[16:18:47.781]                     62078800L, 2025423650L, 662658376L, 2054093324L, 
[16:18:47.781]                     2128500828L, -1346351918L, 299850240L, 1801178452L, 
[16:18:47.781]                     1542380008L, 391846906L, 1698574544L, 730742060L, 
[16:18:47.781]                     -1636896012L, 1745185170L, -1364659104L, 
[16:18:47.781]                     1157006604L, 1395233504L, 1256524130L, -1480570200L, 
[16:18:47.781]                     -908897716L, 1961836924L, 1399620914L, -1447128976L, 
[16:18:47.781]                     -280987836L, 263704024L, -1265361798L, 34401840L, 
[16:18:47.781]                     -344323396L, -1868755116L, -163285950L, 1772686752L, 
[16:18:47.781]                     -1156031812L, 1352374736L, 1229573474L, -950161432L, 
[16:18:47.781]                     -1639405620L, -2026569988L, -679353870L, 
[16:18:47.781]                     -1815099264L, 1649415412L, -1269107064L, 
[16:18:47.781]                     1444251450L, 1801376592L, 2070083180L, 158126228L, 
[16:18:47.781]                     2099519826L, -1101316384L, -1137446196L, 
[16:18:47.781]                     -1040822112L, 527842178L, -1481362712L, 1590678252L, 
[16:18:47.781]                     879389756L, 1877074546L, 1949549680L, 29263396L, 
[16:18:47.781]                     -2042026952L, 261310490L, -1693693232L, -1136188356L, 
[16:18:47.781]                     -714951532L, 1632824450L, -1063417920L, 1456585020L, 
[16:18:47.781]                     -1633807728L, -1308885982L, 1145185288L, 
[16:18:47.781]                     -1594034036L, 661392412L, 1301128850L, 1775047808L, 
[16:18:47.781]                     -1708204012L, 284894504L, -841437638L, 2079302864L, 
[16:18:47.781]                     -699825044L, 233919156L, 290154514L, -1066346528L, 
[16:18:47.781]                     1895649228L, 734981600L, 1769451042L, -2089260760L, 
[16:18:47.781]                     1981296908L, -148457924L, -1055694606L, 950434544L, 
[16:18:47.781]                     -1422417084L, -1530533288L, 1237340730L, 
[16:18:47.781]                     1041581808L, -507642692L, -1601106412L, 1742151874L, 
[16:18:47.781]                     -1770672032L, 73256316L, -382395184L, 60152866L, 
[16:18:47.781]                     1368529576L, -461443188L, -1561962052L, 374273074L, 
[16:18:47.781]                     -993192128L, 1176205492L, -1639251128L, 281598650L, 
[16:18:47.781]                     -1844539632L, -784852756L, 1583150164L, -2108504302L, 
[16:18:47.781]                     1989751712L, 1376673740L, 727608160L, -1301778238L, 
[16:18:47.781]                     -1275832792L, -650000980L, 944086844L, 1166913394L, 
[16:18:47.781]                     788710192L, 1814200868L, -747089864L, 325004506L, 
[16:18:47.781]                     -361799280L, 1860478716L, 1566523284L, -1711561918L, 
[16:18:47.781]                     1815894528L, -950435268L, -407718320L, -669625694L, 
[16:18:47.781]                     -1219253432L, 1593539084L, -1857983268L, 
[16:18:47.781]                     -243348639L, -999280730L, -76727900L, 791019605L, 
[16:18:47.781]                     354858239L, 583621016L, -2017844554L, 1315420995L, 
[16:18:47.781]                     -1963080059L, -811390174L, 677695504L, -2028401735L, 
[16:18:47.781]                     -930980757L, -949133476L, 2067433098L, -267279745L, 
[16:18:47.781]                     1943006153L, 287299678L, -988230900L, -677326115L, 
[16:18:47.781]                     1070365671L, -46030832L, -1558065874L, -1151974949L, 
[16:18:47.781]                     -248621379L, 285443114L, 671773896L, 1024520689L, 
[16:18:47.781]                     -386367645L, 1103218532L, 206675602L, 1324178279L, 
[16:18:47.781]                     158516529L, 1115217526L, -1922383980L, -1928569947L, 
[16:18:47.781]                     1508813999L, -821583512L, -922449594L, -386653965L, 
[16:18:47.781]                     -1620337067L, 954991154L, 522121216L, -959539991L, 
[16:18:47.781]                     -2045758629L, -1408502356L, -730354246L, 
[16:18:47.781]                     147626863L, 1272536313L, -725384818L, 2071614556L, 
[16:18:47.781]                     693954253L, -962678217L, 1369159872L, -1319762018L, 
[16:18:47.781]                     925224043L, -1569264659L, 726953562L, 1940074776L, 
[16:18:47.781]                     -850264447L, -1519856589L, 1427071572L, 885876322L, 
[16:18:47.781]                     -1924855561L, -638325951L, -1332272698L, 
[16:18:47.781]                     2007853828L, 42360501L, -1076803169L, -215693832L, 
[16:18:47.781]                     -1796838442L, -1934158237L, 1039386149L, 
[16:18:47.781]                     1844663746L, -1439348048L, 1349599961L, 746746955L, 
[16:18:47.781]                     111626940L, 1169357034L, 963319071L, -1802355287L, 
[16:18:47.781]                     1878358846L, -1477667284L, 1020830845L, 1418927815L, 
[16:18:47.781]                     -756545616L, 1882479054L, -1702776069L, 1072263517L, 
[16:18:47.781]                     1359508106L, 1025024168L, 971326481L, -2088225533L, 
[16:18:47.781]                     1644877828L, 1282922546L, -427921273L, 765435089L, 
[16:18:47.781]                     -1039235498L, 554325556L, 960113989L, 2055577487L, 
[16:18:47.781]                     -351007992L, 1311558950L, -770394669L, 1162018613L, 
[16:18:47.781]                     -656370030L, -521694624L, -1620048951L, -1748122885L, 
[16:18:47.781]                     -1919701812L, 1115694426L, -1457838001L, 
[16:18:47.781]                     -1458641639L, 449072942L, 268501308L, -433551699L, 
[16:18:47.781]                     -126303913L, 693907616L, 1680100862L, 257499339L, 
[16:18:47.781]                     1858961101L, 1311263226L, -1236250056L, 852660193L, 
[16:18:47.781]                     1690126483L, 669182644L, 490112962L, -1938258985L, 
[16:18:47.781]                     -845476831L, 476793830L, -715942172L, 1806090773L, 
[16:18:47.781]                     -687568321L, -792755752L, -23021578L, -1909792765L, 
[16:18:47.781]                     1288424261L, -19390622L, 1784660176L, -203953159L, 
[16:18:47.781]                     -900315349L, 855610524L, -1612526902L, -1161854017L, 
[16:18:47.781]                     -1688326391L, -1894238178L, 955738572L, -1374444643L, 
[16:18:47.781]                     72408615L, -88099760L, -1180500754L, -1808893541L, 
[16:18:47.781]                     -1086017539L, 1113610986L, -1985655416L, 
[16:18:47.781]                     -1799439567L, -1159212125L, -780627036L, 
[16:18:47.781]                     -937705902L, 392199591L, 402176497L, 1570467126L, 
[16:18:47.781]                     270570964L, -1855235227L, 1328169839L, 1031921064L, 
[16:18:47.781]                     726065926L, 1424365107L, 157408405L, -980647756L
[16:18:47.781]                     ), envir = base::globalenv(), inherits = FALSE)
[16:18:47.781]                     NULL
[16:18:47.781]                   }
[16:18:47.781]                   options(future.plan = NULL)
[16:18:47.781]                   if (is.na(NA_character_)) 
[16:18:47.781]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:18:47.781]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:18:47.781]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:18:47.781]                     .init = FALSE)
[16:18:47.781]                 }
[16:18:47.781]             }
[16:18:47.781]         }
[16:18:47.781]     })
[16:18:47.781]     if (TRUE) {
[16:18:47.781]         base::sink(type = "output", split = FALSE)
[16:18:47.781]         if (TRUE) {
[16:18:47.781]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:18:47.781]         }
[16:18:47.781]         else {
[16:18:47.781]             ...future.result["stdout"] <- base::list(NULL)
[16:18:47.781]         }
[16:18:47.781]         base::close(...future.stdout)
[16:18:47.781]         ...future.stdout <- NULL
[16:18:47.781]     }
[16:18:47.781]     ...future.result$conditions <- ...future.conditions
[16:18:47.781]     ...future.result$finished <- base::Sys.time()
[16:18:47.781]     ...future.result
[16:18:47.781] }
[16:18:47.783] assign_globals() ...
[16:18:47.784] List of 5
[16:18:47.784]  $ ...future.FUN            :function (...)  
[16:18:47.784]  $ future.call.arguments    : list()
[16:18:47.784]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:47.784]  $ ...future.elements_ii    :List of 5
[16:18:47.784]   ..$ : int 0
[16:18:47.784]   ..$ : int 0
[16:18:47.784]   ..$ : int 0
[16:18:47.784]   ..$ : int 0
[16:18:47.784]   ..$ : int 0
[16:18:47.784]  $ ...future.seeds_ii       :List of 5
[16:18:47.784]   ..$ : int [1:7] 10407 1979336702 -286621149 37952650 -985103885 -268836736 -2034106523
[16:18:47.784]   ..$ : int [1:7] 10407 -623356642 -1641567217 1940456295 1369815208 1918673557 1335699835
[16:18:47.784]   ..$ : int [1:7] 10407 716969292 659901731 -117780665 1831380197 -914599274 -222693969
[16:18:47.784]   ..$ : int [1:7] 10407 503965092 269747772 2098699189 1304523506 2049917308 9342543
[16:18:47.784]   ..$ : int [1:7] 10407 977018040 -1040526189 113444121 653316605 4114875 581320141
[16:18:47.784]  $ ...future.globals.maxSize: NULL
[16:18:47.784]  - attr(*, "where")=List of 5
[16:18:47.784]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:18:47.784]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:18:47.784]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:18:47.784]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:18:47.784]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:18:47.784]  - attr(*, "resolved")= logi FALSE
[16:18:47.784]  - attr(*, "total_size")= num 616
[16:18:47.784]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:47.784]  - attr(*, "already-done")= logi TRUE
[16:18:47.791] - reassign environment for ‘...future.FUN’
[16:18:47.791] - copied ‘...future.FUN’ to environment
[16:18:47.791] - copied ‘future.call.arguments’ to environment
[16:18:47.791] - copied ‘...future.elements_ii’ to environment
[16:18:47.791] - copied ‘...future.seeds_ii’ to environment
[16:18:47.791] - copied ‘...future.globals.maxSize’ to environment
[16:18:47.791] assign_globals() ... done
[16:18:47.792] plan(): Setting new future strategy stack:
[16:18:47.792] List of future strategies:
[16:18:47.792] 1. sequential:
[16:18:47.792]    - args: function (..., envir = parent.frame())
[16:18:47.792]    - tweaked: FALSE
[16:18:47.792]    - call: NULL
[16:18:47.792] plan(): nbrOfWorkers() = 1
[16:18:47.794] plan(): Setting new future strategy stack:
[16:18:47.794] List of future strategies:
[16:18:47.794] 1. sequential:
[16:18:47.794]    - args: function (..., envir = parent.frame())
[16:18:47.794]    - tweaked: FALSE
[16:18:47.794]    - call: plan(strategy)
[16:18:47.794] plan(): nbrOfWorkers() = 1
[16:18:47.794] SequentialFuture started (and completed)
[16:18:47.795] - Launch lazy future ... done
[16:18:47.795] run() for ‘SequentialFuture’ ... done
[16:18:47.795] Created future:
[16:18:47.795] SequentialFuture:
[16:18:47.795] Label: ‘future_replicate-1’
[16:18:47.795] Expression:
[16:18:47.795] {
[16:18:47.795]     do.call(function(...) {
[16:18:47.795]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:47.795]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:47.795]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:47.795]             on.exit(options(oopts), add = TRUE)
[16:18:47.795]         }
[16:18:47.795]         {
[16:18:47.795]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:47.795]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:47.795]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:47.795]                   envir = globalenv(), inherits = FALSE)
[16:18:47.795]                 ...future.FUN(...future.X_jj, ...)
[16:18:47.795]             })
[16:18:47.795]         }
[16:18:47.795]     }, args = future.call.arguments)
[16:18:47.795] }
[16:18:47.795] Lazy evaluation: FALSE
[16:18:47.795] Asynchronous evaluation: FALSE
[16:18:47.795] Local evaluation: TRUE
[16:18:47.795] Environment: R_GlobalEnv
[16:18:47.795] Capture standard output: TRUE
[16:18:47.795] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:18:47.795] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:18:47.795] Packages: <none>
[16:18:47.795] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:18:47.795] Resolved: TRUE
[16:18:47.795] Value: 280 bytes of class ‘list’
[16:18:47.795] Early signaling: FALSE
[16:18:47.795] Owner process: 20271db5-d788-b537-4432-0a26f2d2d030
[16:18:47.795] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:18:47.797] Chunk #1 of 1 ... DONE
[16:18:47.797] Launching 1 futures (chunks) ... DONE
[16:18:47.797] Resolving 1 futures (chunks) ...
[16:18:47.797] resolve() on list ...
[16:18:47.797]  recursive: 0
[16:18:47.797]  length: 1
[16:18:47.797] 
[16:18:47.797] resolved() for ‘SequentialFuture’ ...
[16:18:47.797] - state: ‘finished’
[16:18:47.798] - run: TRUE
[16:18:47.798] - result: ‘FutureResult’
[16:18:47.798] resolved() for ‘SequentialFuture’ ... done
[16:18:47.798] Future #1
[16:18:47.798] signalConditionsASAP(SequentialFuture, pos=1) ...
[16:18:47.798] - nx: 1
[16:18:47.798] - relay: TRUE
[16:18:47.799] - stdout: TRUE
[16:18:47.799] - signal: TRUE
[16:18:47.799] - resignal: FALSE
[16:18:47.799] - force: TRUE
[16:18:47.799] - relayed: [n=1] FALSE
[16:18:47.799] - queued futures: [n=1] FALSE
[16:18:47.799]  - until=1
[16:18:47.799]  - relaying element #1
[16:18:47.799] - relayed: [n=1] TRUE
[16:18:47.799] - queued futures: [n=1] TRUE
[16:18:47.800] signalConditionsASAP(SequentialFuture, pos=1) ... done
[16:18:47.800]  length: 0 (resolved future 1)
[16:18:47.800] Relaying remaining futures
[16:18:47.800] signalConditionsASAP(NULL, pos=0) ...
[16:18:47.800] - nx: 1
[16:18:47.800] - relay: TRUE
[16:18:47.800] - stdout: TRUE
[16:18:47.800] - signal: TRUE
[16:18:47.800] - resignal: FALSE
[16:18:47.800] - force: TRUE
[16:18:47.801] - relayed: [n=1] TRUE
[16:18:47.801] - queued futures: [n=1] TRUE
 - flush all
[16:18:47.801] - relayed: [n=1] TRUE
[16:18:47.801] - queued futures: [n=1] TRUE
[16:18:47.801] signalConditionsASAP(NULL, pos=0) ... done
[16:18:47.801] resolve() on list ... DONE
[16:18:47.801]  - Number of value chunks collected: 1
[16:18:47.801] Resolving 1 futures (chunks) ... DONE
[16:18:47.801] Reducing values from 1 chunks ...
[16:18:47.801]  - Number of values collected after concatenation: 5
[16:18:47.802]  - Number of values expected: 5
[16:18:47.802] Reducing values from 1 chunks ... DONE
[16:18:47.802] future_lapply() ... DONE
[16:18:47.802] future_lapply() ...
[16:18:47.802] Generating random seeds ...
[16:18:47.802] Generating random seed streams for 5 elements ...
[16:18:47.803] Generating random seed streams for 5 elements ... DONE
[16:18:47.803] Generating random seeds ... DONE
[16:18:47.803] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:18:47.803] Number of chunks: 1
[16:18:47.803] getGlobalsAndPackagesXApply() ...
[16:18:47.804]  - future.globals: TRUE
[16:18:47.804] getGlobalsAndPackages() ...
[16:18:47.804] Searching for globals...
[16:18:47.807] - globals found: [2] ‘FUN’, ‘sample’
[16:18:47.807] Searching for globals ... DONE
[16:18:47.807] Resolving globals: FALSE
[16:18:47.807] The total size of the 1 globals is 616 bytes (616 bytes)
[16:18:47.808] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:18:47.808] - globals: [1] ‘FUN’
[16:18:47.808] 
[16:18:47.808] getGlobalsAndPackages() ... DONE
[16:18:47.808]  - globals found/used: [n=1] ‘FUN’
[16:18:47.808]  - needed namespaces: [n=0] 
[16:18:47.808] Finding globals ... DONE
[16:18:47.808]  - use_args: TRUE
[16:18:47.808]  - Getting '...' globals ...
[16:18:47.809] resolve() on list ...
[16:18:47.809]  recursive: 0
[16:18:47.809]  length: 1
[16:18:47.809]  elements: ‘...’
[16:18:47.809]  length: 0 (resolved future 1)
[16:18:47.809] resolve() on list ... DONE
[16:18:47.809]    - '...' content: [n=0] 
[16:18:47.809] List of 1
[16:18:47.809]  $ ...: list()
[16:18:47.809]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:47.809]  - attr(*, "where")=List of 1
[16:18:47.809]   ..$ ...:<environment: 0x55e7a0d24ad8> 
[16:18:47.809]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:47.809]  - attr(*, "resolved")= logi TRUE
[16:18:47.809]  - attr(*, "total_size")= num NA
[16:18:47.812]  - Getting '...' globals ... DONE
[16:18:47.812] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:18:47.812] List of 2
[16:18:47.812]  $ ...future.FUN:function (...)  
[16:18:47.812]  $ ...          : list()
[16:18:47.812]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:47.812]  - attr(*, "where")=List of 2
[16:18:47.812]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:18:47.812]   ..$ ...          :<environment: 0x55e7a0d24ad8> 
[16:18:47.812]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:47.812]  - attr(*, "resolved")= logi FALSE
[16:18:47.812]  - attr(*, "total_size")= num 616
[16:18:47.815] Packages to be attached in all futures: [n=0] 
[16:18:47.815] getGlobalsAndPackagesXApply() ... DONE
[16:18:47.815] Number of futures (= number of chunks): 1
[16:18:47.815] Launching 1 futures (chunks) ...
[16:18:47.815] Chunk #1 of 1 ...
[16:18:47.815]  - Finding globals in 'X' for chunk #1 ...
[16:18:47.815] getGlobalsAndPackages() ...
[16:18:47.815] Searching for globals...
[16:18:47.816] 
[16:18:47.816] Searching for globals ... DONE
[16:18:47.816] - globals: [0] <none>
[16:18:47.816] getGlobalsAndPackages() ... DONE
[16:18:47.816]    + additional globals found: [n=0] 
[16:18:47.816]    + additional namespaces needed: [n=0] 
[16:18:47.816]  - Finding globals in 'X' for chunk #1 ... DONE
[16:18:47.816]  - seeds: [5] <seeds>
[16:18:47.817]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:47.817] getGlobalsAndPackages() ...
[16:18:47.817] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:47.817] Resolving globals: FALSE
[16:18:47.817] Tweak future expression to call with '...' arguments ...
[16:18:47.817] {
[16:18:47.817]     do.call(function(...) {
[16:18:47.817]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:47.817]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:47.817]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:47.817]             on.exit(options(oopts), add = TRUE)
[16:18:47.817]         }
[16:18:47.817]         {
[16:18:47.817]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:47.817]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:47.817]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:47.817]                   envir = globalenv(), inherits = FALSE)
[16:18:47.817]                 ...future.FUN(...future.X_jj, ...)
[16:18:47.817]             })
[16:18:47.817]         }
[16:18:47.817]     }, args = future.call.arguments)
[16:18:47.817] }
[16:18:47.817] Tweak future expression to call with '...' arguments ... DONE
[16:18:47.818] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:47.818] 
[16:18:47.818] getGlobalsAndPackages() ... DONE
[16:18:47.818] run() for ‘Future’ ...
[16:18:47.818] - state: ‘created’
[16:18:47.818] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:18:47.819] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:18:47.819] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:18:47.819]   - Field: ‘label’
[16:18:47.819]   - Field: ‘local’
[16:18:47.819]   - Field: ‘owner’
[16:18:47.819]   - Field: ‘envir’
[16:18:47.819]   - Field: ‘packages’
[16:18:47.819]   - Field: ‘gc’
[16:18:47.819]   - Field: ‘conditions’
[16:18:47.819]   - Field: ‘expr’
[16:18:47.820]   - Field: ‘uuid’
[16:18:47.820]   - Field: ‘seed’
[16:18:47.820]   - Field: ‘version’
[16:18:47.820]   - Field: ‘result’
[16:18:47.820]   - Field: ‘asynchronous’
[16:18:47.820]   - Field: ‘calls’
[16:18:47.820]   - Field: ‘globals’
[16:18:47.820]   - Field: ‘stdout’
[16:18:47.820]   - Field: ‘earlySignal’
[16:18:47.820]   - Field: ‘lazy’
[16:18:47.821]   - Field: ‘state’
[16:18:47.821] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:18:47.821] - Launch lazy future ...
[16:18:47.821] Packages needed by the future expression (n = 0): <none>
[16:18:47.821] Packages needed by future strategies (n = 0): <none>
[16:18:47.821] {
[16:18:47.821]     {
[16:18:47.821]         {
[16:18:47.821]             ...future.startTime <- base::Sys.time()
[16:18:47.821]             {
[16:18:47.821]                 {
[16:18:47.821]                   {
[16:18:47.821]                     base::local({
[16:18:47.821]                       has_future <- base::requireNamespace("future", 
[16:18:47.821]                         quietly = TRUE)
[16:18:47.821]                       if (has_future) {
[16:18:47.821]                         ns <- base::getNamespace("future")
[16:18:47.821]                         version <- ns[[".package"]][["version"]]
[16:18:47.821]                         if (is.null(version)) 
[16:18:47.821]                           version <- utils::packageVersion("future")
[16:18:47.821]                       }
[16:18:47.821]                       else {
[16:18:47.821]                         version <- NULL
[16:18:47.821]                       }
[16:18:47.821]                       if (!has_future || version < "1.8.0") {
[16:18:47.821]                         info <- base::c(r_version = base::gsub("R version ", 
[16:18:47.821]                           "", base::R.version$version.string), 
[16:18:47.821]                           platform = base::sprintf("%s (%s-bit)", 
[16:18:47.821]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:18:47.821]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:18:47.821]                             "release", "version")], collapse = " "), 
[16:18:47.821]                           hostname = base::Sys.info()[["nodename"]])
[16:18:47.821]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:18:47.821]                           info)
[16:18:47.821]                         info <- base::paste(info, collapse = "; ")
[16:18:47.821]                         if (!has_future) {
[16:18:47.821]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:18:47.821]                             info)
[16:18:47.821]                         }
[16:18:47.821]                         else {
[16:18:47.821]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:18:47.821]                             info, version)
[16:18:47.821]                         }
[16:18:47.821]                         base::stop(msg)
[16:18:47.821]                       }
[16:18:47.821]                     })
[16:18:47.821]                   }
[16:18:47.821]                   ...future.strategy.old <- future::plan("list")
[16:18:47.821]                   options(future.plan = NULL)
[16:18:47.821]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:18:47.821]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:18:47.821]                 }
[16:18:47.821]                 ...future.workdir <- getwd()
[16:18:47.821]             }
[16:18:47.821]             ...future.oldOptions <- base::as.list(base::.Options)
[16:18:47.821]             ...future.oldEnvVars <- base::Sys.getenv()
[16:18:47.821]         }
[16:18:47.821]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:18:47.821]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:18:47.821]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:18:47.821]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:18:47.821]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:18:47.821]             future.stdout.windows.reencode = NULL, width = 80L)
[16:18:47.821]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:18:47.821]             base::names(...future.oldOptions))
[16:18:47.821]     }
[16:18:47.821]     if (FALSE) {
[16:18:47.821]     }
[16:18:47.821]     else {
[16:18:47.821]         if (TRUE) {
[16:18:47.821]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:18:47.821]                 open = "w")
[16:18:47.821]         }
[16:18:47.821]         else {
[16:18:47.821]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:18:47.821]                 windows = "NUL", "/dev/null"), open = "w")
[16:18:47.821]         }
[16:18:47.821]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:18:47.821]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:18:47.821]             base::sink(type = "output", split = FALSE)
[16:18:47.821]             base::close(...future.stdout)
[16:18:47.821]         }, add = TRUE)
[16:18:47.821]     }
[16:18:47.821]     ...future.frame <- base::sys.nframe()
[16:18:47.821]     ...future.conditions <- base::list()
[16:18:47.821]     ...future.rng <- base::globalenv()$.Random.seed
[16:18:47.821]     if (FALSE) {
[16:18:47.821]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:18:47.821]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:18:47.821]     }
[16:18:47.821]     ...future.result <- base::tryCatch({
[16:18:47.821]         base::withCallingHandlers({
[16:18:47.821]             ...future.value <- base::withVisible(base::local({
[16:18:47.821]                 do.call(function(...) {
[16:18:47.821]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:47.821]                   if (!identical(...future.globals.maxSize.org, 
[16:18:47.821]                     ...future.globals.maxSize)) {
[16:18:47.821]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:47.821]                     on.exit(options(oopts), add = TRUE)
[16:18:47.821]                   }
[16:18:47.821]                   {
[16:18:47.821]                     lapply(seq_along(...future.elements_ii), 
[16:18:47.821]                       FUN = function(jj) {
[16:18:47.821]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:47.821]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:47.821]                           envir = globalenv(), inherits = FALSE)
[16:18:47.821]                         ...future.FUN(...future.X_jj, ...)
[16:18:47.821]                       })
[16:18:47.821]                   }
[16:18:47.821]                 }, args = future.call.arguments)
[16:18:47.821]             }))
[16:18:47.821]             future::FutureResult(value = ...future.value$value, 
[16:18:47.821]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:47.821]                   ...future.rng), globalenv = if (FALSE) 
[16:18:47.821]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:18:47.821]                     ...future.globalenv.names))
[16:18:47.821]                 else NULL, started = ...future.startTime, version = "1.8")
[16:18:47.821]         }, condition = base::local({
[16:18:47.821]             c <- base::c
[16:18:47.821]             inherits <- base::inherits
[16:18:47.821]             invokeRestart <- base::invokeRestart
[16:18:47.821]             length <- base::length
[16:18:47.821]             list <- base::list
[16:18:47.821]             seq.int <- base::seq.int
[16:18:47.821]             signalCondition <- base::signalCondition
[16:18:47.821]             sys.calls <- base::sys.calls
[16:18:47.821]             `[[` <- base::`[[`
[16:18:47.821]             `+` <- base::`+`
[16:18:47.821]             `<<-` <- base::`<<-`
[16:18:47.821]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:18:47.821]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:18:47.821]                   3L)]
[16:18:47.821]             }
[16:18:47.821]             function(cond) {
[16:18:47.821]                 is_error <- inherits(cond, "error")
[16:18:47.821]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:18:47.821]                   NULL)
[16:18:47.821]                 if (is_error) {
[16:18:47.821]                   sessionInformation <- function() {
[16:18:47.821]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:18:47.821]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:18:47.821]                       search = base::search(), system = base::Sys.info())
[16:18:47.821]                   }
[16:18:47.821]                   ...future.conditions[[length(...future.conditions) + 
[16:18:47.821]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:18:47.821]                     cond$call), session = sessionInformation(), 
[16:18:47.821]                     timestamp = base::Sys.time(), signaled = 0L)
[16:18:47.821]                   signalCondition(cond)
[16:18:47.821]                 }
[16:18:47.821]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:18:47.821]                 "immediateCondition"))) {
[16:18:47.821]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:18:47.821]                   ...future.conditions[[length(...future.conditions) + 
[16:18:47.821]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:18:47.821]                   if (TRUE && !signal) {
[16:18:47.821]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:47.821]                     {
[16:18:47.821]                       inherits <- base::inherits
[16:18:47.821]                       invokeRestart <- base::invokeRestart
[16:18:47.821]                       is.null <- base::is.null
[16:18:47.821]                       muffled <- FALSE
[16:18:47.821]                       if (inherits(cond, "message")) {
[16:18:47.821]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:47.821]                         if (muffled) 
[16:18:47.821]                           invokeRestart("muffleMessage")
[16:18:47.821]                       }
[16:18:47.821]                       else if (inherits(cond, "warning")) {
[16:18:47.821]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:47.821]                         if (muffled) 
[16:18:47.821]                           invokeRestart("muffleWarning")
[16:18:47.821]                       }
[16:18:47.821]                       else if (inherits(cond, "condition")) {
[16:18:47.821]                         if (!is.null(pattern)) {
[16:18:47.821]                           computeRestarts <- base::computeRestarts
[16:18:47.821]                           grepl <- base::grepl
[16:18:47.821]                           restarts <- computeRestarts(cond)
[16:18:47.821]                           for (restart in restarts) {
[16:18:47.821]                             name <- restart$name
[16:18:47.821]                             if (is.null(name)) 
[16:18:47.821]                               next
[16:18:47.821]                             if (!grepl(pattern, name)) 
[16:18:47.821]                               next
[16:18:47.821]                             invokeRestart(restart)
[16:18:47.821]                             muffled <- TRUE
[16:18:47.821]                             break
[16:18:47.821]                           }
[16:18:47.821]                         }
[16:18:47.821]                       }
[16:18:47.821]                       invisible(muffled)
[16:18:47.821]                     }
[16:18:47.821]                     muffleCondition(cond, pattern = "^muffle")
[16:18:47.821]                   }
[16:18:47.821]                 }
[16:18:47.821]                 else {
[16:18:47.821]                   if (TRUE) {
[16:18:47.821]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:47.821]                     {
[16:18:47.821]                       inherits <- base::inherits
[16:18:47.821]                       invokeRestart <- base::invokeRestart
[16:18:47.821]                       is.null <- base::is.null
[16:18:47.821]                       muffled <- FALSE
[16:18:47.821]                       if (inherits(cond, "message")) {
[16:18:47.821]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:47.821]                         if (muffled) 
[16:18:47.821]                           invokeRestart("muffleMessage")
[16:18:47.821]                       }
[16:18:47.821]                       else if (inherits(cond, "warning")) {
[16:18:47.821]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:47.821]                         if (muffled) 
[16:18:47.821]                           invokeRestart("muffleWarning")
[16:18:47.821]                       }
[16:18:47.821]                       else if (inherits(cond, "condition")) {
[16:18:47.821]                         if (!is.null(pattern)) {
[16:18:47.821]                           computeRestarts <- base::computeRestarts
[16:18:47.821]                           grepl <- base::grepl
[16:18:47.821]                           restarts <- computeRestarts(cond)
[16:18:47.821]                           for (restart in restarts) {
[16:18:47.821]                             name <- restart$name
[16:18:47.821]                             if (is.null(name)) 
[16:18:47.821]                               next
[16:18:47.821]                             if (!grepl(pattern, name)) 
[16:18:47.821]                               next
[16:18:47.821]                             invokeRestart(restart)
[16:18:47.821]                             muffled <- TRUE
[16:18:47.821]                             break
[16:18:47.821]                           }
[16:18:47.821]                         }
[16:18:47.821]                       }
[16:18:47.821]                       invisible(muffled)
[16:18:47.821]                     }
[16:18:47.821]                     muffleCondition(cond, pattern = "^muffle")
[16:18:47.821]                   }
[16:18:47.821]                 }
[16:18:47.821]             }
[16:18:47.821]         }))
[16:18:47.821]     }, error = function(ex) {
[16:18:47.821]         base::structure(base::list(value = NULL, visible = NULL, 
[16:18:47.821]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:47.821]                 ...future.rng), started = ...future.startTime, 
[16:18:47.821]             finished = Sys.time(), session_uuid = NA_character_, 
[16:18:47.821]             version = "1.8"), class = "FutureResult")
[16:18:47.821]     }, finally = {
[16:18:47.821]         if (!identical(...future.workdir, getwd())) 
[16:18:47.821]             setwd(...future.workdir)
[16:18:47.821]         {
[16:18:47.821]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:18:47.821]                 ...future.oldOptions$nwarnings <- NULL
[16:18:47.821]             }
[16:18:47.821]             base::options(...future.oldOptions)
[16:18:47.821]             if (.Platform$OS.type == "windows") {
[16:18:47.821]                 old_names <- names(...future.oldEnvVars)
[16:18:47.821]                 envs <- base::Sys.getenv()
[16:18:47.821]                 names <- names(envs)
[16:18:47.821]                 common <- intersect(names, old_names)
[16:18:47.821]                 added <- setdiff(names, old_names)
[16:18:47.821]                 removed <- setdiff(old_names, names)
[16:18:47.821]                 changed <- common[...future.oldEnvVars[common] != 
[16:18:47.821]                   envs[common]]
[16:18:47.821]                 NAMES <- toupper(changed)
[16:18:47.821]                 args <- list()
[16:18:47.821]                 for (kk in seq_along(NAMES)) {
[16:18:47.821]                   name <- changed[[kk]]
[16:18:47.821]                   NAME <- NAMES[[kk]]
[16:18:47.821]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:47.821]                     next
[16:18:47.821]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:47.821]                 }
[16:18:47.821]                 NAMES <- toupper(added)
[16:18:47.821]                 for (kk in seq_along(NAMES)) {
[16:18:47.821]                   name <- added[[kk]]
[16:18:47.821]                   NAME <- NAMES[[kk]]
[16:18:47.821]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:47.821]                     next
[16:18:47.821]                   args[[name]] <- ""
[16:18:47.821]                 }
[16:18:47.821]                 NAMES <- toupper(removed)
[16:18:47.821]                 for (kk in seq_along(NAMES)) {
[16:18:47.821]                   name <- removed[[kk]]
[16:18:47.821]                   NAME <- NAMES[[kk]]
[16:18:47.821]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:47.821]                     next
[16:18:47.821]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:47.821]                 }
[16:18:47.821]                 if (length(args) > 0) 
[16:18:47.821]                   base::do.call(base::Sys.setenv, args = args)
[16:18:47.821]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:18:47.821]             }
[16:18:47.821]             else {
[16:18:47.821]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:18:47.821]             }
[16:18:47.821]             {
[16:18:47.821]                 if (base::length(...future.futureOptionsAdded) > 
[16:18:47.821]                   0L) {
[16:18:47.821]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:18:47.821]                   base::names(opts) <- ...future.futureOptionsAdded
[16:18:47.821]                   base::options(opts)
[16:18:47.821]                 }
[16:18:47.821]                 {
[16:18:47.821]                   {
[16:18:47.821]                     base::assign(".Random.seed", c(10403L, 2L, 
[16:18:47.821]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[16:18:47.821]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[16:18:47.821]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[16:18:47.821]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[16:18:47.821]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[16:18:47.821]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[16:18:47.821]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[16:18:47.821]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[16:18:47.821]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[16:18:47.821]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[16:18:47.821]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[16:18:47.821]                     -1512233174L, -1985955764L, -425390065L, 
[16:18:47.821]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[16:18:47.821]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[16:18:47.821]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[16:18:47.821]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[16:18:47.821]                     1818328109L, -1284085436L, -1981489558L, 
[16:18:47.821]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[16:18:47.821]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[16:18:47.821]                     -1718567047L, -793788661L, -1133789126L, 
[16:18:47.821]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[16:18:47.821]                     -1823521982L, -1345991523L, -1672661737L, 
[16:18:47.821]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[16:18:47.821]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[16:18:47.821]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[16:18:47.821]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[16:18:47.821]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[16:18:47.821]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[16:18:47.821]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[16:18:47.821]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[16:18:47.821]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[16:18:47.821]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[16:18:47.821]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[16:18:47.821]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[16:18:47.821]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[16:18:47.821]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[16:18:47.821]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[16:18:47.821]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[16:18:47.821]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[16:18:47.821]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[16:18:47.821]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[16:18:47.821]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[16:18:47.821]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[16:18:47.821]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[16:18:47.821]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[16:18:47.821]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[16:18:47.821]                     -1119334354L, -1521015416L, -2041922421L, 
[16:18:47.821]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[16:18:47.821]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[16:18:47.821]                     1232111981L, -1801753084L, -1608606422L, 
[16:18:47.821]                     -1172096363L, 1420874031L, -1210473418L, 
[16:18:47.821]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[16:18:47.821]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[16:18:47.821]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[16:18:47.821]                     679371266L, -591318819L, -104578089L, -172818754L, 
[16:18:47.821]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[16:18:47.821]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[16:18:47.821]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[16:18:47.821]                     -332493318L, -1978392251L, -1691039632L, 
[16:18:47.821]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[16:18:47.821]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[16:18:47.821]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[16:18:47.821]                     87560756L, -87565624L, 426345146L, -699970416L, 
[16:18:47.821]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[16:18:47.821]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[16:18:47.821]                     -1178330196L, -687617348L, -1701912078L, 
[16:18:47.821]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[16:18:47.821]                     -1345416048L, 1816730492L, -1570431212L, 
[16:18:47.821]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[16:18:47.821]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[16:18:47.821]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[16:18:47.821]                     -1493184262L, -1943836976L, -590788308L, 
[16:18:47.821]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[16:18:47.821]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[16:18:47.821]                     1274857340L, -1205842638L, -1938479504L, 
[16:18:47.821]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[16:18:47.821]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[16:18:47.821]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[16:18:47.821]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[16:18:47.821]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[16:18:47.821]                     -1460751252L, 1201879444L, -1459788718L, 
[16:18:47.821]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[16:18:47.821]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[16:18:47.821]                     -420945808L, -1997735900L, -1838404552L, 
[16:18:47.821]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[16:18:47.821]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[16:18:47.821]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[16:18:47.821]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[16:18:47.821]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[16:18:47.821]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[16:18:47.821]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[16:18:47.821]                     942193650L, 751741680L, 689743428L, -18455976L, 
[16:18:47.821]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[16:18:47.821]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[16:18:47.821]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[16:18:47.821]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[16:18:47.821]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[16:18:47.821]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[16:18:47.821]                     -1357570110L, 1896595240L, -2066952276L, 
[16:18:47.821]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[16:18:47.821]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[16:18:47.821]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[16:18:47.821]                     769655120L, 236357794L, 181393736L, -13334772L, 
[16:18:47.821]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[16:18:47.821]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[16:18:47.821]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[16:18:47.821]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[16:18:47.821]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[16:18:47.821]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[16:18:47.821]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[16:18:47.821]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[16:18:47.821]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[16:18:47.821]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[16:18:47.821]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[16:18:47.821]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[16:18:47.821]                     -1365842884L, -438961294L, -1851472272L, 
[16:18:47.821]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[16:18:47.821]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[16:18:47.821]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[16:18:47.821]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[16:18:47.821]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[16:18:47.821]                     -594809770L, -2146766621L, -2013964635L, 
[16:18:47.821]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[16:18:47.821]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[16:18:47.821]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[16:18:47.821]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[16:18:47.821]                     -1426021878L, -1285634264L, 1507547537L, 
[16:18:47.821]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[16:18:47.821]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[16:18:47.821]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[16:18:47.821]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[16:18:47.821]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[16:18:47.821]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[16:18:47.821]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[16:18:47.821]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[16:18:47.821]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[16:18:47.821]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[16:18:47.821]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[16:18:47.821]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[16:18:47.821]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[16:18:47.821]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[16:18:47.821]                     -1604604761L, 1421229008L, -1268333714L, 
[16:18:47.821]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[16:18:47.821]                     -2070476623L, -2099222749L, 1141171236L, 
[16:18:47.821]                     -146426158L, -1797385433L, -1129376399L, 
[16:18:47.821]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[16:18:47.821]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[16:18:47.821]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[16:18:47.821]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[16:18:47.821]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[16:18:47.821]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[16:18:47.821]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[16:18:47.821]                     -1092079724L, -1765622238L, -1882554057L, 
[16:18:47.821]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[16:18:47.821]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[16:18:47.821]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[16:18:47.821]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[16:18:47.821]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[16:18:47.821]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[16:18:47.821]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[16:18:47.821]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[16:18:47.821]                     865377681L, -1127426242L), envir = base::globalenv(), 
[16:18:47.821]                       inherits = FALSE)
[16:18:47.821]                     NULL
[16:18:47.821]                   }
[16:18:47.821]                   options(future.plan = NULL)
[16:18:47.821]                   if (is.na(NA_character_)) 
[16:18:47.821]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:18:47.821]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:18:47.821]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:18:47.821]                     .init = FALSE)
[16:18:47.821]                 }
[16:18:47.821]             }
[16:18:47.821]         }
[16:18:47.821]     })
[16:18:47.821]     if (TRUE) {
[16:18:47.821]         base::sink(type = "output", split = FALSE)
[16:18:47.821]         if (TRUE) {
[16:18:47.821]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:18:47.821]         }
[16:18:47.821]         else {
[16:18:47.821]             ...future.result["stdout"] <- base::list(NULL)
[16:18:47.821]         }
[16:18:47.821]         base::close(...future.stdout)
[16:18:47.821]         ...future.stdout <- NULL
[16:18:47.821]     }
[16:18:47.821]     ...future.result$conditions <- ...future.conditions
[16:18:47.821]     ...future.result$finished <- base::Sys.time()
[16:18:47.821]     ...future.result
[16:18:47.821] }
[16:18:47.824] assign_globals() ...
[16:18:47.824] List of 5
[16:18:47.824]  $ ...future.FUN            :function (...)  
[16:18:47.824]  $ future.call.arguments    : list()
[16:18:47.824]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:47.824]  $ ...future.elements_ii    :List of 5
[16:18:47.824]   ..$ : int 0
[16:18:47.824]   ..$ : int 0
[16:18:47.824]   ..$ : int 0
[16:18:47.824]   ..$ : int 0
[16:18:47.824]   ..$ : int 0
[16:18:47.824]  $ ...future.seeds_ii       :List of 5
[16:18:47.824]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[16:18:47.824]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[16:18:47.824]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[16:18:47.824]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[16:18:47.824]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[16:18:47.824]  $ ...future.globals.maxSize: NULL
[16:18:47.824]  - attr(*, "where")=List of 5
[16:18:47.824]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:18:47.824]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:18:47.824]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:18:47.824]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:18:47.824]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:18:47.824]  - attr(*, "resolved")= logi FALSE
[16:18:47.824]  - attr(*, "total_size")= num 616
[16:18:47.824]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:47.824]  - attr(*, "already-done")= logi TRUE
[16:18:47.833] - reassign environment for ‘...future.FUN’
[16:18:47.833] - copied ‘...future.FUN’ to environment
[16:18:47.833] - copied ‘future.call.arguments’ to environment
[16:18:47.833] - copied ‘...future.elements_ii’ to environment
[16:18:47.834] - copied ‘...future.seeds_ii’ to environment
[16:18:47.834] - copied ‘...future.globals.maxSize’ to environment
[16:18:47.834] assign_globals() ... done
[16:18:47.834] plan(): Setting new future strategy stack:
[16:18:47.834] List of future strategies:
[16:18:47.834] 1. sequential:
[16:18:47.834]    - args: function (..., envir = parent.frame())
[16:18:47.834]    - tweaked: FALSE
[16:18:47.834]    - call: NULL
[16:18:47.834] plan(): nbrOfWorkers() = 1
[16:18:47.835] plan(): Setting new future strategy stack:
[16:18:47.835] List of future strategies:
[16:18:47.835] 1. sequential:
[16:18:47.835]    - args: function (..., envir = parent.frame())
[16:18:47.835]    - tweaked: FALSE
[16:18:47.835]    - call: plan(strategy)
[16:18:47.836] plan(): nbrOfWorkers() = 1
[16:18:47.836] SequentialFuture started (and completed)
[16:18:47.836] - Launch lazy future ... done
[16:18:47.836] run() for ‘SequentialFuture’ ... done
[16:18:47.836] Created future:
[16:18:47.836] SequentialFuture:
[16:18:47.836] Label: ‘future_replicate-1’
[16:18:47.836] Expression:
[16:18:47.836] {
[16:18:47.836]     do.call(function(...) {
[16:18:47.836]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:47.836]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:47.836]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:47.836]             on.exit(options(oopts), add = TRUE)
[16:18:47.836]         }
[16:18:47.836]         {
[16:18:47.836]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:47.836]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:47.836]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:47.836]                   envir = globalenv(), inherits = FALSE)
[16:18:47.836]                 ...future.FUN(...future.X_jj, ...)
[16:18:47.836]             })
[16:18:47.836]         }
[16:18:47.836]     }, args = future.call.arguments)
[16:18:47.836] }
[16:18:47.836] Lazy evaluation: FALSE
[16:18:47.836] Asynchronous evaluation: FALSE
[16:18:47.836] Local evaluation: TRUE
[16:18:47.836] Environment: R_GlobalEnv
[16:18:47.836] Capture standard output: TRUE
[16:18:47.836] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:18:47.836] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:18:47.836] Packages: <none>
[16:18:47.836] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:18:47.836] Resolved: TRUE
[16:18:47.836] Value: 280 bytes of class ‘list’
[16:18:47.836] Early signaling: FALSE
[16:18:47.836] Owner process: 20271db5-d788-b537-4432-0a26f2d2d030
[16:18:47.836] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:18:47.837] Chunk #1 of 1 ... DONE
[16:18:47.837] Launching 1 futures (chunks) ... DONE
[16:18:47.838] Resolving 1 futures (chunks) ...
[16:18:47.838] resolve() on list ...
[16:18:47.838]  recursive: 0
[16:18:47.838]  length: 1
[16:18:47.838] 
[16:18:47.838] resolved() for ‘SequentialFuture’ ...
[16:18:47.838] - state: ‘finished’
[16:18:47.838] - run: TRUE
[16:18:47.838] - result: ‘FutureResult’
[16:18:47.838] resolved() for ‘SequentialFuture’ ... done
[16:18:47.838] Future #1
[16:18:47.839] signalConditionsASAP(SequentialFuture, pos=1) ...
[16:18:47.839] - nx: 1
[16:18:47.839] - relay: TRUE
[16:18:47.839] - stdout: TRUE
[16:18:47.839] - signal: TRUE
[16:18:47.839] - resignal: FALSE
[16:18:47.839] - force: TRUE
[16:18:47.839] - relayed: [n=1] FALSE
[16:18:47.839] - queued futures: [n=1] FALSE
[16:18:47.839]  - until=1
[16:18:47.839]  - relaying element #1
[16:18:47.840] - relayed: [n=1] TRUE
[16:18:47.840] - queued futures: [n=1] TRUE
[16:18:47.840] signalConditionsASAP(SequentialFuture, pos=1) ... done
[16:18:47.840]  length: 0 (resolved future 1)
[16:18:47.840] Relaying remaining futures
[16:18:47.840] signalConditionsASAP(NULL, pos=0) ...
[16:18:47.840] - nx: 1
[16:18:47.840] - relay: TRUE
[16:18:47.840] - stdout: TRUE
[16:18:47.841] - signal: TRUE
[16:18:47.841] - resignal: FALSE
[16:18:47.841] - force: TRUE
[16:18:47.841] - relayed: [n=1] TRUE
[16:18:47.841] - queued futures: [n=1] TRUE
 - flush all
[16:18:47.841] - relayed: [n=1] TRUE
[16:18:47.841] - queued futures: [n=1] TRUE
[16:18:47.841] signalConditionsASAP(NULL, pos=0) ... done
[16:18:47.841] resolve() on list ... DONE
[16:18:47.841]  - Number of value chunks collected: 1
[16:18:47.841] Resolving 1 futures (chunks) ... DONE
[16:18:47.842] Reducing values from 1 chunks ...
[16:18:47.842]  - Number of values collected after concatenation: 5
[16:18:47.842]  - Number of values expected: 5
[16:18:47.842] Reducing values from 1 chunks ... DONE
[16:18:47.842] future_lapply() ... DONE
[16:18:47.842] future_lapply() ...
[16:18:47.843] Generating random seeds ...
[16:18:47.843] Generating random seed streams for 5 elements ...
[16:18:47.843] Generating random seed streams for 5 elements ... DONE
[16:18:47.843] Generating random seeds ... DONE
[16:18:47.843] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:18:47.844] Number of chunks: 1
[16:18:47.844] getGlobalsAndPackagesXApply() ...
[16:18:47.844]  - future.globals: TRUE
[16:18:47.844] getGlobalsAndPackages() ...
[16:18:47.844] Searching for globals...
[16:18:47.845] - globals found: [2] ‘FUN’, ‘sample’
[16:18:47.845] Searching for globals ... DONE
[16:18:47.845] Resolving globals: FALSE
[16:18:47.846] The total size of the 1 globals is 616 bytes (616 bytes)
[16:18:47.846] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:18:47.846] - globals: [1] ‘FUN’
[16:18:47.846] 
[16:18:47.846] getGlobalsAndPackages() ... DONE
[16:18:47.846]  - globals found/used: [n=1] ‘FUN’
[16:18:47.846]  - needed namespaces: [n=0] 
[16:18:47.846] Finding globals ... DONE
[16:18:47.847]  - use_args: TRUE
[16:18:47.847]  - Getting '...' globals ...
[16:18:47.847] resolve() on list ...
[16:18:47.847]  recursive: 0
[16:18:47.847]  length: 1
[16:18:47.847]  elements: ‘...’
[16:18:47.847]  length: 0 (resolved future 1)
[16:18:47.847] resolve() on list ... DONE
[16:18:47.848]    - '...' content: [n=0] 
[16:18:47.848] List of 1
[16:18:47.848]  $ ...: list()
[16:18:47.848]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:47.848]  - attr(*, "where")=List of 1
[16:18:47.848]   ..$ ...:<environment: 0x55e79ebab580> 
[16:18:47.848]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:47.848]  - attr(*, "resolved")= logi TRUE
[16:18:47.848]  - attr(*, "total_size")= num NA
[16:18:47.850]  - Getting '...' globals ... DONE
[16:18:47.850] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:18:47.850] List of 2
[16:18:47.850]  $ ...future.FUN:function (...)  
[16:18:47.850]  $ ...          : list()
[16:18:47.850]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:47.850]  - attr(*, "where")=List of 2
[16:18:47.850]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:18:47.850]   ..$ ...          :<environment: 0x55e79ebab580> 
[16:18:47.850]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:47.850]  - attr(*, "resolved")= logi FALSE
[16:18:47.850]  - attr(*, "total_size")= num 616
[16:18:47.853] Packages to be attached in all futures: [n=0] 
[16:18:47.853] getGlobalsAndPackagesXApply() ... DONE
[16:18:47.853] Number of futures (= number of chunks): 1
[16:18:47.853] Launching 1 futures (chunks) ...
[16:18:47.853] Chunk #1 of 1 ...
[16:18:47.853]  - Finding globals in 'X' for chunk #1 ...
[16:18:47.854] getGlobalsAndPackages() ...
[16:18:47.854] Searching for globals...
[16:18:47.854] 
[16:18:47.854] Searching for globals ... DONE
[16:18:47.854] - globals: [0] <none>
[16:18:47.854] getGlobalsAndPackages() ... DONE
[16:18:47.854]    + additional globals found: [n=0] 
[16:18:47.854]    + additional namespaces needed: [n=0] 
[16:18:47.854]  - Finding globals in 'X' for chunk #1 ... DONE
[16:18:47.855]  - seeds: [5] <seeds>
[16:18:47.855]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:47.855] getGlobalsAndPackages() ...
[16:18:47.855] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:47.855] Resolving globals: FALSE
[16:18:47.855] Tweak future expression to call with '...' arguments ...
[16:18:47.857] {
[16:18:47.857]     do.call(function(...) {
[16:18:47.857]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:47.857]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:47.857]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:47.857]             on.exit(options(oopts), add = TRUE)
[16:18:47.857]         }
[16:18:47.857]         {
[16:18:47.857]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:47.857]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:47.857]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:47.857]                   envir = globalenv(), inherits = FALSE)
[16:18:47.857]                 ...future.FUN(...future.X_jj, ...)
[16:18:47.857]             })
[16:18:47.857]         }
[16:18:47.857]     }, args = future.call.arguments)
[16:18:47.857] }
[16:18:47.857] Tweak future expression to call with '...' arguments ... DONE
[16:18:47.857] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:47.857] 
[16:18:47.858] getGlobalsAndPackages() ... DONE
[16:18:47.858] run() for ‘Future’ ...
[16:18:47.858] - state: ‘created’
[16:18:47.858] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:18:47.858] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:18:47.858] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:18:47.859]   - Field: ‘label’
[16:18:47.859]   - Field: ‘local’
[16:18:47.859]   - Field: ‘owner’
[16:18:47.859]   - Field: ‘envir’
[16:18:47.859]   - Field: ‘packages’
[16:18:47.859]   - Field: ‘gc’
[16:18:47.859]   - Field: ‘conditions’
[16:18:47.859]   - Field: ‘expr’
[16:18:47.859]   - Field: ‘uuid’
[16:18:47.859]   - Field: ‘seed’
[16:18:47.860]   - Field: ‘version’
[16:18:47.860]   - Field: ‘result’
[16:18:47.860]   - Field: ‘asynchronous’
[16:18:47.860]   - Field: ‘calls’
[16:18:47.860]   - Field: ‘globals’
[16:18:47.860]   - Field: ‘stdout’
[16:18:47.860]   - Field: ‘earlySignal’
[16:18:47.860]   - Field: ‘lazy’
[16:18:47.860]   - Field: ‘state’
[16:18:47.860] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:18:47.860] - Launch lazy future ...
[16:18:47.861] Packages needed by the future expression (n = 0): <none>
[16:18:47.861] Packages needed by future strategies (n = 0): <none>
[16:18:47.861] {
[16:18:47.861]     {
[16:18:47.861]         {
[16:18:47.861]             ...future.startTime <- base::Sys.time()
[16:18:47.861]             {
[16:18:47.861]                 {
[16:18:47.861]                   {
[16:18:47.861]                     base::local({
[16:18:47.861]                       has_future <- base::requireNamespace("future", 
[16:18:47.861]                         quietly = TRUE)
[16:18:47.861]                       if (has_future) {
[16:18:47.861]                         ns <- base::getNamespace("future")
[16:18:47.861]                         version <- ns[[".package"]][["version"]]
[16:18:47.861]                         if (is.null(version)) 
[16:18:47.861]                           version <- utils::packageVersion("future")
[16:18:47.861]                       }
[16:18:47.861]                       else {
[16:18:47.861]                         version <- NULL
[16:18:47.861]                       }
[16:18:47.861]                       if (!has_future || version < "1.8.0") {
[16:18:47.861]                         info <- base::c(r_version = base::gsub("R version ", 
[16:18:47.861]                           "", base::R.version$version.string), 
[16:18:47.861]                           platform = base::sprintf("%s (%s-bit)", 
[16:18:47.861]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:18:47.861]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:18:47.861]                             "release", "version")], collapse = " "), 
[16:18:47.861]                           hostname = base::Sys.info()[["nodename"]])
[16:18:47.861]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:18:47.861]                           info)
[16:18:47.861]                         info <- base::paste(info, collapse = "; ")
[16:18:47.861]                         if (!has_future) {
[16:18:47.861]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:18:47.861]                             info)
[16:18:47.861]                         }
[16:18:47.861]                         else {
[16:18:47.861]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:18:47.861]                             info, version)
[16:18:47.861]                         }
[16:18:47.861]                         base::stop(msg)
[16:18:47.861]                       }
[16:18:47.861]                     })
[16:18:47.861]                   }
[16:18:47.861]                   ...future.strategy.old <- future::plan("list")
[16:18:47.861]                   options(future.plan = NULL)
[16:18:47.861]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:18:47.861]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:18:47.861]                 }
[16:18:47.861]                 ...future.workdir <- getwd()
[16:18:47.861]             }
[16:18:47.861]             ...future.oldOptions <- base::as.list(base::.Options)
[16:18:47.861]             ...future.oldEnvVars <- base::Sys.getenv()
[16:18:47.861]         }
[16:18:47.861]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:18:47.861]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:18:47.861]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:18:47.861]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:18:47.861]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:18:47.861]             future.stdout.windows.reencode = NULL, width = 80L)
[16:18:47.861]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:18:47.861]             base::names(...future.oldOptions))
[16:18:47.861]     }
[16:18:47.861]     if (FALSE) {
[16:18:47.861]     }
[16:18:47.861]     else {
[16:18:47.861]         if (TRUE) {
[16:18:47.861]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:18:47.861]                 open = "w")
[16:18:47.861]         }
[16:18:47.861]         else {
[16:18:47.861]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:18:47.861]                 windows = "NUL", "/dev/null"), open = "w")
[16:18:47.861]         }
[16:18:47.861]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:18:47.861]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:18:47.861]             base::sink(type = "output", split = FALSE)
[16:18:47.861]             base::close(...future.stdout)
[16:18:47.861]         }, add = TRUE)
[16:18:47.861]     }
[16:18:47.861]     ...future.frame <- base::sys.nframe()
[16:18:47.861]     ...future.conditions <- base::list()
[16:18:47.861]     ...future.rng <- base::globalenv()$.Random.seed
[16:18:47.861]     if (FALSE) {
[16:18:47.861]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:18:47.861]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:18:47.861]     }
[16:18:47.861]     ...future.result <- base::tryCatch({
[16:18:47.861]         base::withCallingHandlers({
[16:18:47.861]             ...future.value <- base::withVisible(base::local({
[16:18:47.861]                 do.call(function(...) {
[16:18:47.861]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:47.861]                   if (!identical(...future.globals.maxSize.org, 
[16:18:47.861]                     ...future.globals.maxSize)) {
[16:18:47.861]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:47.861]                     on.exit(options(oopts), add = TRUE)
[16:18:47.861]                   }
[16:18:47.861]                   {
[16:18:47.861]                     lapply(seq_along(...future.elements_ii), 
[16:18:47.861]                       FUN = function(jj) {
[16:18:47.861]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:47.861]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:47.861]                           envir = globalenv(), inherits = FALSE)
[16:18:47.861]                         ...future.FUN(...future.X_jj, ...)
[16:18:47.861]                       })
[16:18:47.861]                   }
[16:18:47.861]                 }, args = future.call.arguments)
[16:18:47.861]             }))
[16:18:47.861]             future::FutureResult(value = ...future.value$value, 
[16:18:47.861]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:47.861]                   ...future.rng), globalenv = if (FALSE) 
[16:18:47.861]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:18:47.861]                     ...future.globalenv.names))
[16:18:47.861]                 else NULL, started = ...future.startTime, version = "1.8")
[16:18:47.861]         }, condition = base::local({
[16:18:47.861]             c <- base::c
[16:18:47.861]             inherits <- base::inherits
[16:18:47.861]             invokeRestart <- base::invokeRestart
[16:18:47.861]             length <- base::length
[16:18:47.861]             list <- base::list
[16:18:47.861]             seq.int <- base::seq.int
[16:18:47.861]             signalCondition <- base::signalCondition
[16:18:47.861]             sys.calls <- base::sys.calls
[16:18:47.861]             `[[` <- base::`[[`
[16:18:47.861]             `+` <- base::`+`
[16:18:47.861]             `<<-` <- base::`<<-`
[16:18:47.861]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:18:47.861]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:18:47.861]                   3L)]
[16:18:47.861]             }
[16:18:47.861]             function(cond) {
[16:18:47.861]                 is_error <- inherits(cond, "error")
[16:18:47.861]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:18:47.861]                   NULL)
[16:18:47.861]                 if (is_error) {
[16:18:47.861]                   sessionInformation <- function() {
[16:18:47.861]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:18:47.861]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:18:47.861]                       search = base::search(), system = base::Sys.info())
[16:18:47.861]                   }
[16:18:47.861]                   ...future.conditions[[length(...future.conditions) + 
[16:18:47.861]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:18:47.861]                     cond$call), session = sessionInformation(), 
[16:18:47.861]                     timestamp = base::Sys.time(), signaled = 0L)
[16:18:47.861]                   signalCondition(cond)
[16:18:47.861]                 }
[16:18:47.861]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:18:47.861]                 "immediateCondition"))) {
[16:18:47.861]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:18:47.861]                   ...future.conditions[[length(...future.conditions) + 
[16:18:47.861]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:18:47.861]                   if (TRUE && !signal) {
[16:18:47.861]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:47.861]                     {
[16:18:47.861]                       inherits <- base::inherits
[16:18:47.861]                       invokeRestart <- base::invokeRestart
[16:18:47.861]                       is.null <- base::is.null
[16:18:47.861]                       muffled <- FALSE
[16:18:47.861]                       if (inherits(cond, "message")) {
[16:18:47.861]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:47.861]                         if (muffled) 
[16:18:47.861]                           invokeRestart("muffleMessage")
[16:18:47.861]                       }
[16:18:47.861]                       else if (inherits(cond, "warning")) {
[16:18:47.861]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:47.861]                         if (muffled) 
[16:18:47.861]                           invokeRestart("muffleWarning")
[16:18:47.861]                       }
[16:18:47.861]                       else if (inherits(cond, "condition")) {
[16:18:47.861]                         if (!is.null(pattern)) {
[16:18:47.861]                           computeRestarts <- base::computeRestarts
[16:18:47.861]                           grepl <- base::grepl
[16:18:47.861]                           restarts <- computeRestarts(cond)
[16:18:47.861]                           for (restart in restarts) {
[16:18:47.861]                             name <- restart$name
[16:18:47.861]                             if (is.null(name)) 
[16:18:47.861]                               next
[16:18:47.861]                             if (!grepl(pattern, name)) 
[16:18:47.861]                               next
[16:18:47.861]                             invokeRestart(restart)
[16:18:47.861]                             muffled <- TRUE
[16:18:47.861]                             break
[16:18:47.861]                           }
[16:18:47.861]                         }
[16:18:47.861]                       }
[16:18:47.861]                       invisible(muffled)
[16:18:47.861]                     }
[16:18:47.861]                     muffleCondition(cond, pattern = "^muffle")
[16:18:47.861]                   }
[16:18:47.861]                 }
[16:18:47.861]                 else {
[16:18:47.861]                   if (TRUE) {
[16:18:47.861]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:47.861]                     {
[16:18:47.861]                       inherits <- base::inherits
[16:18:47.861]                       invokeRestart <- base::invokeRestart
[16:18:47.861]                       is.null <- base::is.null
[16:18:47.861]                       muffled <- FALSE
[16:18:47.861]                       if (inherits(cond, "message")) {
[16:18:47.861]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:47.861]                         if (muffled) 
[16:18:47.861]                           invokeRestart("muffleMessage")
[16:18:47.861]                       }
[16:18:47.861]                       else if (inherits(cond, "warning")) {
[16:18:47.861]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:47.861]                         if (muffled) 
[16:18:47.861]                           invokeRestart("muffleWarning")
[16:18:47.861]                       }
[16:18:47.861]                       else if (inherits(cond, "condition")) {
[16:18:47.861]                         if (!is.null(pattern)) {
[16:18:47.861]                           computeRestarts <- base::computeRestarts
[16:18:47.861]                           grepl <- base::grepl
[16:18:47.861]                           restarts <- computeRestarts(cond)
[16:18:47.861]                           for (restart in restarts) {
[16:18:47.861]                             name <- restart$name
[16:18:47.861]                             if (is.null(name)) 
[16:18:47.861]                               next
[16:18:47.861]                             if (!grepl(pattern, name)) 
[16:18:47.861]                               next
[16:18:47.861]                             invokeRestart(restart)
[16:18:47.861]                             muffled <- TRUE
[16:18:47.861]                             break
[16:18:47.861]                           }
[16:18:47.861]                         }
[16:18:47.861]                       }
[16:18:47.861]                       invisible(muffled)
[16:18:47.861]                     }
[16:18:47.861]                     muffleCondition(cond, pattern = "^muffle")
[16:18:47.861]                   }
[16:18:47.861]                 }
[16:18:47.861]             }
[16:18:47.861]         }))
[16:18:47.861]     }, error = function(ex) {
[16:18:47.861]         base::structure(base::list(value = NULL, visible = NULL, 
[16:18:47.861]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:47.861]                 ...future.rng), started = ...future.startTime, 
[16:18:47.861]             finished = Sys.time(), session_uuid = NA_character_, 
[16:18:47.861]             version = "1.8"), class = "FutureResult")
[16:18:47.861]     }, finally = {
[16:18:47.861]         if (!identical(...future.workdir, getwd())) 
[16:18:47.861]             setwd(...future.workdir)
[16:18:47.861]         {
[16:18:47.861]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:18:47.861]                 ...future.oldOptions$nwarnings <- NULL
[16:18:47.861]             }
[16:18:47.861]             base::options(...future.oldOptions)
[16:18:47.861]             if (.Platform$OS.type == "windows") {
[16:18:47.861]                 old_names <- names(...future.oldEnvVars)
[16:18:47.861]                 envs <- base::Sys.getenv()
[16:18:47.861]                 names <- names(envs)
[16:18:47.861]                 common <- intersect(names, old_names)
[16:18:47.861]                 added <- setdiff(names, old_names)
[16:18:47.861]                 removed <- setdiff(old_names, names)
[16:18:47.861]                 changed <- common[...future.oldEnvVars[common] != 
[16:18:47.861]                   envs[common]]
[16:18:47.861]                 NAMES <- toupper(changed)
[16:18:47.861]                 args <- list()
[16:18:47.861]                 for (kk in seq_along(NAMES)) {
[16:18:47.861]                   name <- changed[[kk]]
[16:18:47.861]                   NAME <- NAMES[[kk]]
[16:18:47.861]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:47.861]                     next
[16:18:47.861]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:47.861]                 }
[16:18:47.861]                 NAMES <- toupper(added)
[16:18:47.861]                 for (kk in seq_along(NAMES)) {
[16:18:47.861]                   name <- added[[kk]]
[16:18:47.861]                   NAME <- NAMES[[kk]]
[16:18:47.861]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:47.861]                     next
[16:18:47.861]                   args[[name]] <- ""
[16:18:47.861]                 }
[16:18:47.861]                 NAMES <- toupper(removed)
[16:18:47.861]                 for (kk in seq_along(NAMES)) {
[16:18:47.861]                   name <- removed[[kk]]
[16:18:47.861]                   NAME <- NAMES[[kk]]
[16:18:47.861]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:47.861]                     next
[16:18:47.861]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:47.861]                 }
[16:18:47.861]                 if (length(args) > 0) 
[16:18:47.861]                   base::do.call(base::Sys.setenv, args = args)
[16:18:47.861]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:18:47.861]             }
[16:18:47.861]             else {
[16:18:47.861]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:18:47.861]             }
[16:18:47.861]             {
[16:18:47.861]                 if (base::length(...future.futureOptionsAdded) > 
[16:18:47.861]                   0L) {
[16:18:47.861]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:18:47.861]                   base::names(opts) <- ...future.futureOptionsAdded
[16:18:47.861]                   base::options(opts)
[16:18:47.861]                 }
[16:18:47.861]                 {
[16:18:47.861]                   {
[16:18:47.861]                     base::assign(".Random.seed", c(10403L, 2L, 
[16:18:47.861]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[16:18:47.861]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[16:18:47.861]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[16:18:47.861]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[16:18:47.861]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[16:18:47.861]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[16:18:47.861]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[16:18:47.861]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[16:18:47.861]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[16:18:47.861]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[16:18:47.861]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[16:18:47.861]                     -1512233174L, -1985955764L, -425390065L, 
[16:18:47.861]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[16:18:47.861]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[16:18:47.861]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[16:18:47.861]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[16:18:47.861]                     1818328109L, -1284085436L, -1981489558L, 
[16:18:47.861]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[16:18:47.861]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[16:18:47.861]                     -1718567047L, -793788661L, -1133789126L, 
[16:18:47.861]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[16:18:47.861]                     -1823521982L, -1345991523L, -1672661737L, 
[16:18:47.861]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[16:18:47.861]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[16:18:47.861]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[16:18:47.861]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[16:18:47.861]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[16:18:47.861]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[16:18:47.861]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[16:18:47.861]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[16:18:47.861]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[16:18:47.861]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[16:18:47.861]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[16:18:47.861]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[16:18:47.861]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[16:18:47.861]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[16:18:47.861]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[16:18:47.861]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[16:18:47.861]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[16:18:47.861]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[16:18:47.861]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[16:18:47.861]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[16:18:47.861]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[16:18:47.861]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[16:18:47.861]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[16:18:47.861]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[16:18:47.861]                     -1119334354L, -1521015416L, -2041922421L, 
[16:18:47.861]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[16:18:47.861]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[16:18:47.861]                     1232111981L, -1801753084L, -1608606422L, 
[16:18:47.861]                     -1172096363L, 1420874031L, -1210473418L, 
[16:18:47.861]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[16:18:47.861]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[16:18:47.861]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[16:18:47.861]                     679371266L, -591318819L, -104578089L, -172818754L, 
[16:18:47.861]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[16:18:47.861]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[16:18:47.861]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[16:18:47.861]                     -332493318L, -1978392251L, -1691039632L, 
[16:18:47.861]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[16:18:47.861]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[16:18:47.861]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[16:18:47.861]                     87560756L, -87565624L, 426345146L, -699970416L, 
[16:18:47.861]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[16:18:47.861]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[16:18:47.861]                     -1178330196L, -687617348L, -1701912078L, 
[16:18:47.861]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[16:18:47.861]                     -1345416048L, 1816730492L, -1570431212L, 
[16:18:47.861]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[16:18:47.861]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[16:18:47.861]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[16:18:47.861]                     -1493184262L, -1943836976L, -590788308L, 
[16:18:47.861]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[16:18:47.861]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[16:18:47.861]                     1274857340L, -1205842638L, -1938479504L, 
[16:18:47.861]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[16:18:47.861]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[16:18:47.861]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[16:18:47.861]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[16:18:47.861]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[16:18:47.861]                     -1460751252L, 1201879444L, -1459788718L, 
[16:18:47.861]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[16:18:47.861]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[16:18:47.861]                     -420945808L, -1997735900L, -1838404552L, 
[16:18:47.861]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[16:18:47.861]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[16:18:47.861]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[16:18:47.861]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[16:18:47.861]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[16:18:47.861]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[16:18:47.861]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[16:18:47.861]                     942193650L, 751741680L, 689743428L, -18455976L, 
[16:18:47.861]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[16:18:47.861]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[16:18:47.861]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[16:18:47.861]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[16:18:47.861]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[16:18:47.861]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[16:18:47.861]                     -1357570110L, 1896595240L, -2066952276L, 
[16:18:47.861]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[16:18:47.861]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[16:18:47.861]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[16:18:47.861]                     769655120L, 236357794L, 181393736L, -13334772L, 
[16:18:47.861]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[16:18:47.861]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[16:18:47.861]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[16:18:47.861]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[16:18:47.861]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[16:18:47.861]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[16:18:47.861]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[16:18:47.861]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[16:18:47.861]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[16:18:47.861]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[16:18:47.861]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[16:18:47.861]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[16:18:47.861]                     -1365842884L, -438961294L, -1851472272L, 
[16:18:47.861]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[16:18:47.861]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[16:18:47.861]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[16:18:47.861]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[16:18:47.861]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[16:18:47.861]                     -594809770L, -2146766621L, -2013964635L, 
[16:18:47.861]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[16:18:47.861]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[16:18:47.861]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[16:18:47.861]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[16:18:47.861]                     -1426021878L, -1285634264L, 1507547537L, 
[16:18:47.861]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[16:18:47.861]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[16:18:47.861]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[16:18:47.861]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[16:18:47.861]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[16:18:47.861]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[16:18:47.861]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[16:18:47.861]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[16:18:47.861]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[16:18:47.861]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[16:18:47.861]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[16:18:47.861]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[16:18:47.861]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[16:18:47.861]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[16:18:47.861]                     -1604604761L, 1421229008L, -1268333714L, 
[16:18:47.861]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[16:18:47.861]                     -2070476623L, -2099222749L, 1141171236L, 
[16:18:47.861]                     -146426158L, -1797385433L, -1129376399L, 
[16:18:47.861]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[16:18:47.861]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[16:18:47.861]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[16:18:47.861]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[16:18:47.861]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[16:18:47.861]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[16:18:47.861]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[16:18:47.861]                     -1092079724L, -1765622238L, -1882554057L, 
[16:18:47.861]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[16:18:47.861]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[16:18:47.861]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[16:18:47.861]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[16:18:47.861]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[16:18:47.861]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[16:18:47.861]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[16:18:47.861]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[16:18:47.861]                     865377681L, -1127426242L), envir = base::globalenv(), 
[16:18:47.861]                       inherits = FALSE)
[16:18:47.861]                     NULL
[16:18:47.861]                   }
[16:18:47.861]                   options(future.plan = NULL)
[16:18:47.861]                   if (is.na(NA_character_)) 
[16:18:47.861]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:18:47.861]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:18:47.861]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:18:47.861]                     .init = FALSE)
[16:18:47.861]                 }
[16:18:47.861]             }
[16:18:47.861]         }
[16:18:47.861]     })
[16:18:47.861]     if (TRUE) {
[16:18:47.861]         base::sink(type = "output", split = FALSE)
[16:18:47.861]         if (TRUE) {
[16:18:47.861]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:18:47.861]         }
[16:18:47.861]         else {
[16:18:47.861]             ...future.result["stdout"] <- base::list(NULL)
[16:18:47.861]         }
[16:18:47.861]         base::close(...future.stdout)
[16:18:47.861]         ...future.stdout <- NULL
[16:18:47.861]     }
[16:18:47.861]     ...future.result$conditions <- ...future.conditions
[16:18:47.861]     ...future.result$finished <- base::Sys.time()
[16:18:47.861]     ...future.result
[16:18:47.861] }
[16:18:47.864] assign_globals() ...
[16:18:47.864] List of 5
[16:18:47.864]  $ ...future.FUN            :function (...)  
[16:18:47.864]  $ future.call.arguments    : list()
[16:18:47.864]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:47.864]  $ ...future.elements_ii    :List of 5
[16:18:47.864]   ..$ : int 0
[16:18:47.864]   ..$ : int 0
[16:18:47.864]   ..$ : int 0
[16:18:47.864]   ..$ : int 0
[16:18:47.864]   ..$ : int 0
[16:18:47.864]  $ ...future.seeds_ii       :List of 5
[16:18:47.864]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[16:18:47.864]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[16:18:47.864]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[16:18:47.864]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[16:18:47.864]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[16:18:47.864]  $ ...future.globals.maxSize: NULL
[16:18:47.864]  - attr(*, "where")=List of 5
[16:18:47.864]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:18:47.864]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:18:47.864]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:18:47.864]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:18:47.864]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:18:47.864]  - attr(*, "resolved")= logi FALSE
[16:18:47.864]  - attr(*, "total_size")= num 616
[16:18:47.864]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:47.864]  - attr(*, "already-done")= logi TRUE
[16:18:47.871] - reassign environment for ‘...future.FUN’
[16:18:47.871] - copied ‘...future.FUN’ to environment
[16:18:47.871] - copied ‘future.call.arguments’ to environment
[16:18:47.871] - copied ‘...future.elements_ii’ to environment
[16:18:47.872] - copied ‘...future.seeds_ii’ to environment
[16:18:47.872] - copied ‘...future.globals.maxSize’ to environment
[16:18:47.872] assign_globals() ... done
[16:18:47.872] plan(): Setting new future strategy stack:
[16:18:47.872] List of future strategies:
[16:18:47.872] 1. sequential:
[16:18:47.872]    - args: function (..., envir = parent.frame())
[16:18:47.872]    - tweaked: FALSE
[16:18:47.872]    - call: NULL
[16:18:47.872] plan(): nbrOfWorkers() = 1
[16:18:47.873] plan(): Setting new future strategy stack:
[16:18:47.873] List of future strategies:
[16:18:47.873] 1. sequential:
[16:18:47.873]    - args: function (..., envir = parent.frame())
[16:18:47.873]    - tweaked: FALSE
[16:18:47.873]    - call: plan(strategy)
[16:18:47.874] plan(): nbrOfWorkers() = 1
[16:18:47.874] SequentialFuture started (and completed)
[16:18:47.874] - Launch lazy future ... done
[16:18:47.874] run() for ‘SequentialFuture’ ... done
[16:18:47.874] Created future:
[16:18:47.874] SequentialFuture:
[16:18:47.874] Label: ‘future_replicate-1’
[16:18:47.874] Expression:
[16:18:47.874] {
[16:18:47.874]     do.call(function(...) {
[16:18:47.874]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:47.874]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:47.874]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:47.874]             on.exit(options(oopts), add = TRUE)
[16:18:47.874]         }
[16:18:47.874]         {
[16:18:47.874]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:47.874]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:47.874]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:47.874]                   envir = globalenv(), inherits = FALSE)
[16:18:47.874]                 ...future.FUN(...future.X_jj, ...)
[16:18:47.874]             })
[16:18:47.874]         }
[16:18:47.874]     }, args = future.call.arguments)
[16:18:47.874] }
[16:18:47.874] Lazy evaluation: FALSE
[16:18:47.874] Asynchronous evaluation: FALSE
[16:18:47.874] Local evaluation: TRUE
[16:18:47.874] Environment: R_GlobalEnv
[16:18:47.874] Capture standard output: TRUE
[16:18:47.874] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:18:47.874] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:18:47.874] Packages: <none>
[16:18:47.874] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:18:47.874] Resolved: TRUE
[16:18:47.874] Value: 280 bytes of class ‘list’
[16:18:47.874] Early signaling: FALSE
[16:18:47.874] Owner process: 20271db5-d788-b537-4432-0a26f2d2d030
[16:18:47.874] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:18:47.875] Chunk #1 of 1 ... DONE
[16:18:47.875] Launching 1 futures (chunks) ... DONE
[16:18:47.876] Resolving 1 futures (chunks) ...
[16:18:47.876] resolve() on list ...
[16:18:47.876]  recursive: 0
[16:18:47.876]  length: 1
[16:18:47.876] 
[16:18:47.876] resolved() for ‘SequentialFuture’ ...
[16:18:47.876] - state: ‘finished’
[16:18:47.876] - run: TRUE
[16:18:47.876] - result: ‘FutureResult’
[16:18:47.876] resolved() for ‘SequentialFuture’ ... done
[16:18:47.877] Future #1
[16:18:47.877] signalConditionsASAP(SequentialFuture, pos=1) ...
[16:18:47.877] - nx: 1
[16:18:47.877] - relay: TRUE
[16:18:47.877] - stdout: TRUE
[16:18:47.877] - signal: TRUE
[16:18:47.877] - resignal: FALSE
[16:18:47.877] - force: TRUE
[16:18:47.877] - relayed: [n=1] FALSE
[16:18:47.877] - queued futures: [n=1] FALSE
[16:18:47.877]  - until=1
[16:18:47.877]  - relaying element #1
[16:18:47.878] - relayed: [n=1] TRUE
[16:18:47.878] - queued futures: [n=1] TRUE
[16:18:47.878] signalConditionsASAP(SequentialFuture, pos=1) ... done
[16:18:47.878]  length: 0 (resolved future 1)
[16:18:47.878] Relaying remaining futures
[16:18:47.878] signalConditionsASAP(NULL, pos=0) ...
[16:18:47.878] - nx: 1
[16:18:47.878] - relay: TRUE
[16:18:47.878] - stdout: TRUE
[16:18:47.878] - signal: TRUE
[16:18:47.879] - resignal: FALSE
[16:18:47.879] - force: TRUE
[16:18:47.879] - relayed: [n=1] TRUE
[16:18:47.879] - queued futures: [n=1] TRUE
 - flush all
[16:18:47.879] - relayed: [n=1] TRUE
[16:18:47.879] - queued futures: [n=1] TRUE
[16:18:47.879] signalConditionsASAP(NULL, pos=0) ... done
[16:18:47.879] resolve() on list ... DONE
[16:18:47.879]  - Number of value chunks collected: 1
[16:18:47.879] Resolving 1 futures (chunks) ... DONE
[16:18:47.879] Reducing values from 1 chunks ...
[16:18:47.880]  - Number of values collected after concatenation: 5
[16:18:47.880]  - Number of values expected: 5
[16:18:47.880] Reducing values from 1 chunks ... DONE
[16:18:47.880] future_lapply() ... DONE
[16:18:47.880] future_lapply() ...
[16:18:47.881] Generating random seeds ...
[16:18:47.881] Generating random seed streams for 5 elements ...
[16:18:47.881] Generating random seed streams for 5 elements ... DONE
[16:18:47.881] Generating random seeds ... DONE
[16:18:47.881] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:18:47.882] Number of chunks: 1
[16:18:47.882] getGlobalsAndPackagesXApply() ...
[16:18:47.882]  - future.globals: TRUE
[16:18:47.884] getGlobalsAndPackages() ...
[16:18:47.884] Searching for globals...
[16:18:47.885] - globals found: [2] ‘FUN’, ‘sample’
[16:18:47.885] Searching for globals ... DONE
[16:18:47.885] Resolving globals: FALSE
[16:18:47.885] The total size of the 1 globals is 616 bytes (616 bytes)
[16:18:47.886] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:18:47.886] - globals: [1] ‘FUN’
[16:18:47.886] 
[16:18:47.886] getGlobalsAndPackages() ... DONE
[16:18:47.886]  - globals found/used: [n=1] ‘FUN’
[16:18:47.886]  - needed namespaces: [n=0] 
[16:18:47.886] Finding globals ... DONE
[16:18:47.887]  - use_args: TRUE
[16:18:47.887]  - Getting '...' globals ...
[16:18:47.887] resolve() on list ...
[16:18:47.887]  recursive: 0
[16:18:47.887]  length: 1
[16:18:47.887]  elements: ‘...’
[16:18:47.887]  length: 0 (resolved future 1)
[16:18:47.887] resolve() on list ... DONE
[16:18:47.887]    - '...' content: [n=0] 
[16:18:47.888] List of 1
[16:18:47.888]  $ ...: list()
[16:18:47.888]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:47.888]  - attr(*, "where")=List of 1
[16:18:47.888]   ..$ ...:<environment: 0x55e7a0d41878> 
[16:18:47.888]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:47.888]  - attr(*, "resolved")= logi TRUE
[16:18:47.888]  - attr(*, "total_size")= num NA
[16:18:47.890]  - Getting '...' globals ... DONE
[16:18:47.890] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:18:47.890] List of 2
[16:18:47.890]  $ ...future.FUN:function (...)  
[16:18:47.890]  $ ...          : list()
[16:18:47.890]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:47.890]  - attr(*, "where")=List of 2
[16:18:47.890]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:18:47.890]   ..$ ...          :<environment: 0x55e7a0d41878> 
[16:18:47.890]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:47.890]  - attr(*, "resolved")= logi FALSE
[16:18:47.890]  - attr(*, "total_size")= num 616
[16:18:47.893] Packages to be attached in all futures: [n=0] 
[16:18:47.893] getGlobalsAndPackagesXApply() ... DONE
[16:18:47.893] Number of futures (= number of chunks): 1
[16:18:47.893] Launching 1 futures (chunks) ...
[16:18:47.893] Chunk #1 of 1 ...
[16:18:47.894]  - Finding globals in 'X' for chunk #1 ...
[16:18:47.894] getGlobalsAndPackages() ...
[16:18:47.894] Searching for globals...
[16:18:47.894] 
[16:18:47.894] Searching for globals ... DONE
[16:18:47.894] - globals: [0] <none>
[16:18:47.894] getGlobalsAndPackages() ... DONE
[16:18:47.894]    + additional globals found: [n=0] 
[16:18:47.895]    + additional namespaces needed: [n=0] 
[16:18:47.895]  - Finding globals in 'X' for chunk #1 ... DONE
[16:18:47.895]  - seeds: [5] <seeds>
[16:18:47.895]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:47.895] getGlobalsAndPackages() ...
[16:18:47.895] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:47.895] Resolving globals: FALSE
[16:18:47.895] Tweak future expression to call with '...' arguments ...
[16:18:47.895] {
[16:18:47.895]     do.call(function(...) {
[16:18:47.895]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:47.895]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:47.895]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:47.895]             on.exit(options(oopts), add = TRUE)
[16:18:47.895]         }
[16:18:47.895]         {
[16:18:47.895]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:47.895]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:47.895]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:47.895]                   envir = globalenv(), inherits = FALSE)
[16:18:47.895]                 ...future.FUN(...future.X_jj, ...)
[16:18:47.895]             })
[16:18:47.895]         }
[16:18:47.895]     }, args = future.call.arguments)
[16:18:47.895] }
[16:18:47.896] Tweak future expression to call with '...' arguments ... DONE
[16:18:47.896] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:47.896] 
[16:18:47.896] getGlobalsAndPackages() ... DONE
[16:18:47.896] run() for ‘Future’ ...
[16:18:47.897] - state: ‘created’
[16:18:47.897] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:18:47.897] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:18:47.897] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:18:47.897]   - Field: ‘label’
[16:18:47.897]   - Field: ‘local’
[16:18:47.897]   - Field: ‘owner’
[16:18:47.897]   - Field: ‘envir’
[16:18:47.898]   - Field: ‘packages’
[16:18:47.898]   - Field: ‘gc’
[16:18:47.898]   - Field: ‘conditions’
[16:18:47.898]   - Field: ‘expr’
[16:18:47.898]   - Field: ‘uuid’
[16:18:47.898]   - Field: ‘seed’
[16:18:47.898]   - Field: ‘version’
[16:18:47.898]   - Field: ‘result’
[16:18:47.898]   - Field: ‘asynchronous’
[16:18:47.898]   - Field: ‘calls’
[16:18:47.898]   - Field: ‘globals’
[16:18:47.899]   - Field: ‘stdout’
[16:18:47.899]   - Field: ‘earlySignal’
[16:18:47.899]   - Field: ‘lazy’
[16:18:47.899]   - Field: ‘state’
[16:18:47.899] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:18:47.899] - Launch lazy future ...
[16:18:47.899] Packages needed by the future expression (n = 0): <none>
[16:18:47.899] Packages needed by future strategies (n = 0): <none>
[16:18:47.900] {
[16:18:47.900]     {
[16:18:47.900]         {
[16:18:47.900]             ...future.startTime <- base::Sys.time()
[16:18:47.900]             {
[16:18:47.900]                 {
[16:18:47.900]                   {
[16:18:47.900]                     base::local({
[16:18:47.900]                       has_future <- base::requireNamespace("future", 
[16:18:47.900]                         quietly = TRUE)
[16:18:47.900]                       if (has_future) {
[16:18:47.900]                         ns <- base::getNamespace("future")
[16:18:47.900]                         version <- ns[[".package"]][["version"]]
[16:18:47.900]                         if (is.null(version)) 
[16:18:47.900]                           version <- utils::packageVersion("future")
[16:18:47.900]                       }
[16:18:47.900]                       else {
[16:18:47.900]                         version <- NULL
[16:18:47.900]                       }
[16:18:47.900]                       if (!has_future || version < "1.8.0") {
[16:18:47.900]                         info <- base::c(r_version = base::gsub("R version ", 
[16:18:47.900]                           "", base::R.version$version.string), 
[16:18:47.900]                           platform = base::sprintf("%s (%s-bit)", 
[16:18:47.900]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:18:47.900]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:18:47.900]                             "release", "version")], collapse = " "), 
[16:18:47.900]                           hostname = base::Sys.info()[["nodename"]])
[16:18:47.900]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:18:47.900]                           info)
[16:18:47.900]                         info <- base::paste(info, collapse = "; ")
[16:18:47.900]                         if (!has_future) {
[16:18:47.900]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:18:47.900]                             info)
[16:18:47.900]                         }
[16:18:47.900]                         else {
[16:18:47.900]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:18:47.900]                             info, version)
[16:18:47.900]                         }
[16:18:47.900]                         base::stop(msg)
[16:18:47.900]                       }
[16:18:47.900]                     })
[16:18:47.900]                   }
[16:18:47.900]                   ...future.strategy.old <- future::plan("list")
[16:18:47.900]                   options(future.plan = NULL)
[16:18:47.900]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:18:47.900]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:18:47.900]                 }
[16:18:47.900]                 ...future.workdir <- getwd()
[16:18:47.900]             }
[16:18:47.900]             ...future.oldOptions <- base::as.list(base::.Options)
[16:18:47.900]             ...future.oldEnvVars <- base::Sys.getenv()
[16:18:47.900]         }
[16:18:47.900]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:18:47.900]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:18:47.900]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:18:47.900]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:18:47.900]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:18:47.900]             future.stdout.windows.reencode = NULL, width = 80L)
[16:18:47.900]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:18:47.900]             base::names(...future.oldOptions))
[16:18:47.900]     }
[16:18:47.900]     if (FALSE) {
[16:18:47.900]     }
[16:18:47.900]     else {
[16:18:47.900]         if (TRUE) {
[16:18:47.900]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:18:47.900]                 open = "w")
[16:18:47.900]         }
[16:18:47.900]         else {
[16:18:47.900]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:18:47.900]                 windows = "NUL", "/dev/null"), open = "w")
[16:18:47.900]         }
[16:18:47.900]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:18:47.900]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:18:47.900]             base::sink(type = "output", split = FALSE)
[16:18:47.900]             base::close(...future.stdout)
[16:18:47.900]         }, add = TRUE)
[16:18:47.900]     }
[16:18:47.900]     ...future.frame <- base::sys.nframe()
[16:18:47.900]     ...future.conditions <- base::list()
[16:18:47.900]     ...future.rng <- base::globalenv()$.Random.seed
[16:18:47.900]     if (FALSE) {
[16:18:47.900]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:18:47.900]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:18:47.900]     }
[16:18:47.900]     ...future.result <- base::tryCatch({
[16:18:47.900]         base::withCallingHandlers({
[16:18:47.900]             ...future.value <- base::withVisible(base::local({
[16:18:47.900]                 do.call(function(...) {
[16:18:47.900]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:47.900]                   if (!identical(...future.globals.maxSize.org, 
[16:18:47.900]                     ...future.globals.maxSize)) {
[16:18:47.900]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:47.900]                     on.exit(options(oopts), add = TRUE)
[16:18:47.900]                   }
[16:18:47.900]                   {
[16:18:47.900]                     lapply(seq_along(...future.elements_ii), 
[16:18:47.900]                       FUN = function(jj) {
[16:18:47.900]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:47.900]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:47.900]                           envir = globalenv(), inherits = FALSE)
[16:18:47.900]                         ...future.FUN(...future.X_jj, ...)
[16:18:47.900]                       })
[16:18:47.900]                   }
[16:18:47.900]                 }, args = future.call.arguments)
[16:18:47.900]             }))
[16:18:47.900]             future::FutureResult(value = ...future.value$value, 
[16:18:47.900]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:47.900]                   ...future.rng), globalenv = if (FALSE) 
[16:18:47.900]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:18:47.900]                     ...future.globalenv.names))
[16:18:47.900]                 else NULL, started = ...future.startTime, version = "1.8")
[16:18:47.900]         }, condition = base::local({
[16:18:47.900]             c <- base::c
[16:18:47.900]             inherits <- base::inherits
[16:18:47.900]             invokeRestart <- base::invokeRestart
[16:18:47.900]             length <- base::length
[16:18:47.900]             list <- base::list
[16:18:47.900]             seq.int <- base::seq.int
[16:18:47.900]             signalCondition <- base::signalCondition
[16:18:47.900]             sys.calls <- base::sys.calls
[16:18:47.900]             `[[` <- base::`[[`
[16:18:47.900]             `+` <- base::`+`
[16:18:47.900]             `<<-` <- base::`<<-`
[16:18:47.900]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:18:47.900]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:18:47.900]                   3L)]
[16:18:47.900]             }
[16:18:47.900]             function(cond) {
[16:18:47.900]                 is_error <- inherits(cond, "error")
[16:18:47.900]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:18:47.900]                   NULL)
[16:18:47.900]                 if (is_error) {
[16:18:47.900]                   sessionInformation <- function() {
[16:18:47.900]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:18:47.900]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:18:47.900]                       search = base::search(), system = base::Sys.info())
[16:18:47.900]                   }
[16:18:47.900]                   ...future.conditions[[length(...future.conditions) + 
[16:18:47.900]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:18:47.900]                     cond$call), session = sessionInformation(), 
[16:18:47.900]                     timestamp = base::Sys.time(), signaled = 0L)
[16:18:47.900]                   signalCondition(cond)
[16:18:47.900]                 }
[16:18:47.900]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:18:47.900]                 "immediateCondition"))) {
[16:18:47.900]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:18:47.900]                   ...future.conditions[[length(...future.conditions) + 
[16:18:47.900]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:18:47.900]                   if (TRUE && !signal) {
[16:18:47.900]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:47.900]                     {
[16:18:47.900]                       inherits <- base::inherits
[16:18:47.900]                       invokeRestart <- base::invokeRestart
[16:18:47.900]                       is.null <- base::is.null
[16:18:47.900]                       muffled <- FALSE
[16:18:47.900]                       if (inherits(cond, "message")) {
[16:18:47.900]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:47.900]                         if (muffled) 
[16:18:47.900]                           invokeRestart("muffleMessage")
[16:18:47.900]                       }
[16:18:47.900]                       else if (inherits(cond, "warning")) {
[16:18:47.900]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:47.900]                         if (muffled) 
[16:18:47.900]                           invokeRestart("muffleWarning")
[16:18:47.900]                       }
[16:18:47.900]                       else if (inherits(cond, "condition")) {
[16:18:47.900]                         if (!is.null(pattern)) {
[16:18:47.900]                           computeRestarts <- base::computeRestarts
[16:18:47.900]                           grepl <- base::grepl
[16:18:47.900]                           restarts <- computeRestarts(cond)
[16:18:47.900]                           for (restart in restarts) {
[16:18:47.900]                             name <- restart$name
[16:18:47.900]                             if (is.null(name)) 
[16:18:47.900]                               next
[16:18:47.900]                             if (!grepl(pattern, name)) 
[16:18:47.900]                               next
[16:18:47.900]                             invokeRestart(restart)
[16:18:47.900]                             muffled <- TRUE
[16:18:47.900]                             break
[16:18:47.900]                           }
[16:18:47.900]                         }
[16:18:47.900]                       }
[16:18:47.900]                       invisible(muffled)
[16:18:47.900]                     }
[16:18:47.900]                     muffleCondition(cond, pattern = "^muffle")
[16:18:47.900]                   }
[16:18:47.900]                 }
[16:18:47.900]                 else {
[16:18:47.900]                   if (TRUE) {
[16:18:47.900]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:47.900]                     {
[16:18:47.900]                       inherits <- base::inherits
[16:18:47.900]                       invokeRestart <- base::invokeRestart
[16:18:47.900]                       is.null <- base::is.null
[16:18:47.900]                       muffled <- FALSE
[16:18:47.900]                       if (inherits(cond, "message")) {
[16:18:47.900]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:47.900]                         if (muffled) 
[16:18:47.900]                           invokeRestart("muffleMessage")
[16:18:47.900]                       }
[16:18:47.900]                       else if (inherits(cond, "warning")) {
[16:18:47.900]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:47.900]                         if (muffled) 
[16:18:47.900]                           invokeRestart("muffleWarning")
[16:18:47.900]                       }
[16:18:47.900]                       else if (inherits(cond, "condition")) {
[16:18:47.900]                         if (!is.null(pattern)) {
[16:18:47.900]                           computeRestarts <- base::computeRestarts
[16:18:47.900]                           grepl <- base::grepl
[16:18:47.900]                           restarts <- computeRestarts(cond)
[16:18:47.900]                           for (restart in restarts) {
[16:18:47.900]                             name <- restart$name
[16:18:47.900]                             if (is.null(name)) 
[16:18:47.900]                               next
[16:18:47.900]                             if (!grepl(pattern, name)) 
[16:18:47.900]                               next
[16:18:47.900]                             invokeRestart(restart)
[16:18:47.900]                             muffled <- TRUE
[16:18:47.900]                             break
[16:18:47.900]                           }
[16:18:47.900]                         }
[16:18:47.900]                       }
[16:18:47.900]                       invisible(muffled)
[16:18:47.900]                     }
[16:18:47.900]                     muffleCondition(cond, pattern = "^muffle")
[16:18:47.900]                   }
[16:18:47.900]                 }
[16:18:47.900]             }
[16:18:47.900]         }))
[16:18:47.900]     }, error = function(ex) {
[16:18:47.900]         base::structure(base::list(value = NULL, visible = NULL, 
[16:18:47.900]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:47.900]                 ...future.rng), started = ...future.startTime, 
[16:18:47.900]             finished = Sys.time(), session_uuid = NA_character_, 
[16:18:47.900]             version = "1.8"), class = "FutureResult")
[16:18:47.900]     }, finally = {
[16:18:47.900]         if (!identical(...future.workdir, getwd())) 
[16:18:47.900]             setwd(...future.workdir)
[16:18:47.900]         {
[16:18:47.900]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:18:47.900]                 ...future.oldOptions$nwarnings <- NULL
[16:18:47.900]             }
[16:18:47.900]             base::options(...future.oldOptions)
[16:18:47.900]             if (.Platform$OS.type == "windows") {
[16:18:47.900]                 old_names <- names(...future.oldEnvVars)
[16:18:47.900]                 envs <- base::Sys.getenv()
[16:18:47.900]                 names <- names(envs)
[16:18:47.900]                 common <- intersect(names, old_names)
[16:18:47.900]                 added <- setdiff(names, old_names)
[16:18:47.900]                 removed <- setdiff(old_names, names)
[16:18:47.900]                 changed <- common[...future.oldEnvVars[common] != 
[16:18:47.900]                   envs[common]]
[16:18:47.900]                 NAMES <- toupper(changed)
[16:18:47.900]                 args <- list()
[16:18:47.900]                 for (kk in seq_along(NAMES)) {
[16:18:47.900]                   name <- changed[[kk]]
[16:18:47.900]                   NAME <- NAMES[[kk]]
[16:18:47.900]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:47.900]                     next
[16:18:47.900]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:47.900]                 }
[16:18:47.900]                 NAMES <- toupper(added)
[16:18:47.900]                 for (kk in seq_along(NAMES)) {
[16:18:47.900]                   name <- added[[kk]]
[16:18:47.900]                   NAME <- NAMES[[kk]]
[16:18:47.900]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:47.900]                     next
[16:18:47.900]                   args[[name]] <- ""
[16:18:47.900]                 }
[16:18:47.900]                 NAMES <- toupper(removed)
[16:18:47.900]                 for (kk in seq_along(NAMES)) {
[16:18:47.900]                   name <- removed[[kk]]
[16:18:47.900]                   NAME <- NAMES[[kk]]
[16:18:47.900]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:47.900]                     next
[16:18:47.900]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:47.900]                 }
[16:18:47.900]                 if (length(args) > 0) 
[16:18:47.900]                   base::do.call(base::Sys.setenv, args = args)
[16:18:47.900]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:18:47.900]             }
[16:18:47.900]             else {
[16:18:47.900]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:18:47.900]             }
[16:18:47.900]             {
[16:18:47.900]                 if (base::length(...future.futureOptionsAdded) > 
[16:18:47.900]                   0L) {
[16:18:47.900]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:18:47.900]                   base::names(opts) <- ...future.futureOptionsAdded
[16:18:47.900]                   base::options(opts)
[16:18:47.900]                 }
[16:18:47.900]                 {
[16:18:47.900]                   {
[16:18:47.900]                     base::assign(".Random.seed", c(10403L, 4L, 
[16:18:47.900]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[16:18:47.900]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[16:18:47.900]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[16:18:47.900]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[16:18:47.900]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[16:18:47.900]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[16:18:47.900]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[16:18:47.900]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[16:18:47.900]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[16:18:47.900]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[16:18:47.900]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[16:18:47.900]                     -1512233174L, -1985955764L, -425390065L, 
[16:18:47.900]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[16:18:47.900]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[16:18:47.900]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[16:18:47.900]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[16:18:47.900]                     1818328109L, -1284085436L, -1981489558L, 
[16:18:47.900]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[16:18:47.900]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[16:18:47.900]                     -1718567047L, -793788661L, -1133789126L, 
[16:18:47.900]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[16:18:47.900]                     -1823521982L, -1345991523L, -1672661737L, 
[16:18:47.900]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[16:18:47.900]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[16:18:47.900]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[16:18:47.900]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[16:18:47.900]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[16:18:47.900]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[16:18:47.900]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[16:18:47.900]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[16:18:47.900]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[16:18:47.900]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[16:18:47.900]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[16:18:47.900]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[16:18:47.900]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[16:18:47.900]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[16:18:47.900]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[16:18:47.900]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[16:18:47.900]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[16:18:47.900]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[16:18:47.900]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[16:18:47.900]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[16:18:47.900]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[16:18:47.900]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[16:18:47.900]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[16:18:47.900]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[16:18:47.900]                     -1119334354L, -1521015416L, -2041922421L, 
[16:18:47.900]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[16:18:47.900]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[16:18:47.900]                     1232111981L, -1801753084L, -1608606422L, 
[16:18:47.900]                     -1172096363L, 1420874031L, -1210473418L, 
[16:18:47.900]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[16:18:47.900]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[16:18:47.900]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[16:18:47.900]                     679371266L, -591318819L, -104578089L, -172818754L, 
[16:18:47.900]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[16:18:47.900]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[16:18:47.900]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[16:18:47.900]                     -332493318L, -1978392251L, -1691039632L, 
[16:18:47.900]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[16:18:47.900]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[16:18:47.900]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[16:18:47.900]                     87560756L, -87565624L, 426345146L, -699970416L, 
[16:18:47.900]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[16:18:47.900]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[16:18:47.900]                     -1178330196L, -687617348L, -1701912078L, 
[16:18:47.900]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[16:18:47.900]                     -1345416048L, 1816730492L, -1570431212L, 
[16:18:47.900]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[16:18:47.900]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[16:18:47.900]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[16:18:47.900]                     -1493184262L, -1943836976L, -590788308L, 
[16:18:47.900]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[16:18:47.900]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[16:18:47.900]                     1274857340L, -1205842638L, -1938479504L, 
[16:18:47.900]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[16:18:47.900]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[16:18:47.900]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[16:18:47.900]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[16:18:47.900]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[16:18:47.900]                     -1460751252L, 1201879444L, -1459788718L, 
[16:18:47.900]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[16:18:47.900]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[16:18:47.900]                     -420945808L, -1997735900L, -1838404552L, 
[16:18:47.900]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[16:18:47.900]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[16:18:47.900]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[16:18:47.900]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[16:18:47.900]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[16:18:47.900]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[16:18:47.900]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[16:18:47.900]                     942193650L, 751741680L, 689743428L, -18455976L, 
[16:18:47.900]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[16:18:47.900]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[16:18:47.900]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[16:18:47.900]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[16:18:47.900]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[16:18:47.900]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[16:18:47.900]                     -1357570110L, 1896595240L, -2066952276L, 
[16:18:47.900]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[16:18:47.900]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[16:18:47.900]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[16:18:47.900]                     769655120L, 236357794L, 181393736L, -13334772L, 
[16:18:47.900]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[16:18:47.900]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[16:18:47.900]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[16:18:47.900]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[16:18:47.900]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[16:18:47.900]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[16:18:47.900]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[16:18:47.900]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[16:18:47.900]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[16:18:47.900]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[16:18:47.900]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[16:18:47.900]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[16:18:47.900]                     -1365842884L, -438961294L, -1851472272L, 
[16:18:47.900]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[16:18:47.900]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[16:18:47.900]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[16:18:47.900]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[16:18:47.900]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[16:18:47.900]                     -594809770L, -2146766621L, -2013964635L, 
[16:18:47.900]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[16:18:47.900]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[16:18:47.900]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[16:18:47.900]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[16:18:47.900]                     -1426021878L, -1285634264L, 1507547537L, 
[16:18:47.900]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[16:18:47.900]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[16:18:47.900]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[16:18:47.900]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[16:18:47.900]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[16:18:47.900]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[16:18:47.900]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[16:18:47.900]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[16:18:47.900]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[16:18:47.900]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[16:18:47.900]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[16:18:47.900]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[16:18:47.900]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[16:18:47.900]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[16:18:47.900]                     -1604604761L, 1421229008L, -1268333714L, 
[16:18:47.900]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[16:18:47.900]                     -2070476623L, -2099222749L, 1141171236L, 
[16:18:47.900]                     -146426158L, -1797385433L, -1129376399L, 
[16:18:47.900]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[16:18:47.900]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[16:18:47.900]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[16:18:47.900]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[16:18:47.900]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[16:18:47.900]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[16:18:47.900]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[16:18:47.900]                     -1092079724L, -1765622238L, -1882554057L, 
[16:18:47.900]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[16:18:47.900]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[16:18:47.900]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[16:18:47.900]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[16:18:47.900]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[16:18:47.900]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[16:18:47.900]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[16:18:47.900]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[16:18:47.900]                     865377681L, -1127426242L), envir = base::globalenv(), 
[16:18:47.900]                       inherits = FALSE)
[16:18:47.900]                     NULL
[16:18:47.900]                   }
[16:18:47.900]                   options(future.plan = NULL)
[16:18:47.900]                   if (is.na(NA_character_)) 
[16:18:47.900]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:18:47.900]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:18:47.900]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:18:47.900]                     .init = FALSE)
[16:18:47.900]                 }
[16:18:47.900]             }
[16:18:47.900]         }
[16:18:47.900]     })
[16:18:47.900]     if (TRUE) {
[16:18:47.900]         base::sink(type = "output", split = FALSE)
[16:18:47.900]         if (TRUE) {
[16:18:47.900]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:18:47.900]         }
[16:18:47.900]         else {
[16:18:47.900]             ...future.result["stdout"] <- base::list(NULL)
[16:18:47.900]         }
[16:18:47.900]         base::close(...future.stdout)
[16:18:47.900]         ...future.stdout <- NULL
[16:18:47.900]     }
[16:18:47.900]     ...future.result$conditions <- ...future.conditions
[16:18:47.900]     ...future.result$finished <- base::Sys.time()
[16:18:47.900]     ...future.result
[16:18:47.900] }
[16:18:47.902] assign_globals() ...
[16:18:47.903] List of 5
[16:18:47.903]  $ ...future.FUN            :function (...)  
[16:18:47.903]  $ future.call.arguments    : list()
[16:18:47.903]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:47.903]  $ ...future.elements_ii    :List of 5
[16:18:47.903]   ..$ : int 0
[16:18:47.903]   ..$ : int 0
[16:18:47.903]   ..$ : int 0
[16:18:47.903]   ..$ : int 0
[16:18:47.903]   ..$ : int 0
[16:18:47.903]  $ ...future.seeds_ii       :List of 5
[16:18:47.903]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[16:18:47.903]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[16:18:47.903]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[16:18:47.903]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[16:18:47.903]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[16:18:47.903]  $ ...future.globals.maxSize: NULL
[16:18:47.903]  - attr(*, "where")=List of 5
[16:18:47.903]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:18:47.903]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:18:47.903]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:18:47.903]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:18:47.903]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:18:47.903]  - attr(*, "resolved")= logi FALSE
[16:18:47.903]  - attr(*, "total_size")= num 616
[16:18:47.903]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:47.903]  - attr(*, "already-done")= logi TRUE
[16:18:47.912] - reassign environment for ‘...future.FUN’
[16:18:47.912] - copied ‘...future.FUN’ to environment
[16:18:47.912] - copied ‘future.call.arguments’ to environment
[16:18:47.912] - copied ‘...future.elements_ii’ to environment
[16:18:47.912] - copied ‘...future.seeds_ii’ to environment
[16:18:47.912] - copied ‘...future.globals.maxSize’ to environment
[16:18:47.912] assign_globals() ... done
[16:18:47.913] plan(): Setting new future strategy stack:
[16:18:47.913] List of future strategies:
[16:18:47.913] 1. sequential:
[16:18:47.913]    - args: function (..., envir = parent.frame())
[16:18:47.913]    - tweaked: FALSE
[16:18:47.913]    - call: NULL
[16:18:47.913] plan(): nbrOfWorkers() = 1
[16:18:47.914] plan(): Setting new future strategy stack:
[16:18:47.914] List of future strategies:
[16:18:47.914] 1. sequential:
[16:18:47.914]    - args: function (..., envir = parent.frame())
[16:18:47.914]    - tweaked: FALSE
[16:18:47.914]    - call: plan(strategy)
[16:18:47.914] plan(): nbrOfWorkers() = 1
[16:18:47.915] SequentialFuture started (and completed)
[16:18:47.915] - Launch lazy future ... done
[16:18:47.915] run() for ‘SequentialFuture’ ... done
[16:18:47.915] Created future:
[16:18:47.915] SequentialFuture:
[16:18:47.915] Label: ‘future_replicate-1’
[16:18:47.915] Expression:
[16:18:47.915] {
[16:18:47.915]     do.call(function(...) {
[16:18:47.915]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:47.915]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:47.915]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:47.915]             on.exit(options(oopts), add = TRUE)
[16:18:47.915]         }
[16:18:47.915]         {
[16:18:47.915]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:47.915]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:47.915]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:47.915]                   envir = globalenv(), inherits = FALSE)
[16:18:47.915]                 ...future.FUN(...future.X_jj, ...)
[16:18:47.915]             })
[16:18:47.915]         }
[16:18:47.915]     }, args = future.call.arguments)
[16:18:47.915] }
[16:18:47.915] Lazy evaluation: FALSE
[16:18:47.915] Asynchronous evaluation: FALSE
[16:18:47.915] Local evaluation: TRUE
[16:18:47.915] Environment: R_GlobalEnv
[16:18:47.915] Capture standard output: TRUE
[16:18:47.915] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:18:47.915] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:18:47.915] Packages: <none>
[16:18:47.915] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:18:47.915] Resolved: TRUE
[16:18:47.915] Value: 280 bytes of class ‘list’
[16:18:47.915] Early signaling: FALSE
[16:18:47.915] Owner process: 20271db5-d788-b537-4432-0a26f2d2d030
[16:18:47.915] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:18:47.916] Chunk #1 of 1 ... DONE
[16:18:47.916] Launching 1 futures (chunks) ... DONE
[16:18:47.916] Resolving 1 futures (chunks) ...
[16:18:47.916] resolve() on list ...
[16:18:47.916]  recursive: 0
[16:18:47.917]  length: 1
[16:18:47.917] 
[16:18:47.917] resolved() for ‘SequentialFuture’ ...
[16:18:47.917] - state: ‘finished’
[16:18:47.917] - run: TRUE
[16:18:47.917] - result: ‘FutureResult’
[16:18:47.917] resolved() for ‘SequentialFuture’ ... done
[16:18:47.917] Future #1
[16:18:47.917] signalConditionsASAP(SequentialFuture, pos=1) ...
[16:18:47.917] - nx: 1
[16:18:47.918] - relay: TRUE
[16:18:47.918] - stdout: TRUE
[16:18:47.918] - signal: TRUE
[16:18:47.918] - resignal: FALSE
[16:18:47.918] - force: TRUE
[16:18:47.918] - relayed: [n=1] FALSE
[16:18:47.918] - queued futures: [n=1] FALSE
[16:18:47.918]  - until=1
[16:18:47.918]  - relaying element #1
[16:18:47.918] - relayed: [n=1] TRUE
[16:18:47.918] - queued futures: [n=1] TRUE
[16:18:47.919] signalConditionsASAP(SequentialFuture, pos=1) ... done
[16:18:47.919]  length: 0 (resolved future 1)
[16:18:47.919] Relaying remaining futures
[16:18:47.919] signalConditionsASAP(NULL, pos=0) ...
[16:18:47.919] - nx: 1
[16:18:47.919] - relay: TRUE
[16:18:47.919] - stdout: TRUE
[16:18:47.919] - signal: TRUE
[16:18:47.919] - resignal: FALSE
[16:18:47.919] - force: TRUE
[16:18:47.919] - relayed: [n=1] TRUE
[16:18:47.919] - queued futures: [n=1] TRUE
 - flush all
[16:18:47.920] - relayed: [n=1] TRUE
[16:18:47.920] - queued futures: [n=1] TRUE
[16:18:47.920] signalConditionsASAP(NULL, pos=0) ... done
[16:18:47.920] resolve() on list ... DONE
[16:18:47.920]  - Number of value chunks collected: 1
[16:18:47.920] Resolving 1 futures (chunks) ... DONE
[16:18:47.920] Reducing values from 1 chunks ...
[16:18:47.920]  - Number of values collected after concatenation: 5
[16:18:47.920]  - Number of values expected: 5
[16:18:47.921] Reducing values from 1 chunks ... DONE
[16:18:47.921] future_lapply() ... DONE
[16:18:47.921] future_lapply() ...
[16:18:47.921] Generating random seeds ...
[16:18:47.921] Generating random seed streams for 5 elements ...
[16:18:47.921] Generating random seed streams for 5 elements ... DONE
[16:18:47.922] Generating random seeds ... DONE
[16:18:47.922] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:18:47.922] Number of chunks: 1
[16:18:47.922] getGlobalsAndPackagesXApply() ...
[16:18:47.922]  - future.globals: TRUE
[16:18:47.922] getGlobalsAndPackages() ...
[16:18:47.923] Searching for globals...
[16:18:47.924] - globals found: [2] ‘FUN’, ‘sample’
[16:18:47.924] Searching for globals ... DONE
[16:18:47.924] Resolving globals: FALSE
[16:18:47.924] The total size of the 1 globals is 616 bytes (616 bytes)
[16:18:47.925] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:18:47.925] - globals: [1] ‘FUN’
[16:18:47.925] 
[16:18:47.925] getGlobalsAndPackages() ... DONE
[16:18:47.925]  - globals found/used: [n=1] ‘FUN’
[16:18:47.925]  - needed namespaces: [n=0] 
[16:18:47.925] Finding globals ... DONE
[16:18:47.925]  - use_args: TRUE
[16:18:47.925]  - Getting '...' globals ...
[16:18:47.926] resolve() on list ...
[16:18:47.926]  recursive: 0
[16:18:47.926]  length: 1
[16:18:47.926]  elements: ‘...’
[16:18:47.926]  length: 0 (resolved future 1)
[16:18:47.926] resolve() on list ... DONE
[16:18:47.926]    - '...' content: [n=0] 
[16:18:47.926] List of 1
[16:18:47.926]  $ ...: list()
[16:18:47.926]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:47.926]  - attr(*, "where")=List of 1
[16:18:47.926]   ..$ ...:<environment: 0x55e7a001b898> 
[16:18:47.926]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:47.926]  - attr(*, "resolved")= logi TRUE
[16:18:47.926]  - attr(*, "total_size")= num NA
[16:18:47.929]  - Getting '...' globals ... DONE
[16:18:47.929] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:18:47.929] List of 2
[16:18:47.929]  $ ...future.FUN:function (...)  
[16:18:47.929]  $ ...          : list()
[16:18:47.929]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:47.929]  - attr(*, "where")=List of 2
[16:18:47.929]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:18:47.929]   ..$ ...          :<environment: 0x55e7a001b898> 
[16:18:47.929]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:47.929]  - attr(*, "resolved")= logi FALSE
[16:18:47.929]  - attr(*, "total_size")= num 616
[16:18:47.932] Packages to be attached in all futures: [n=0] 
[16:18:47.932] getGlobalsAndPackagesXApply() ... DONE
[16:18:47.932] Number of futures (= number of chunks): 1
[16:18:47.932] Launching 1 futures (chunks) ...
[16:18:47.932] Chunk #1 of 1 ...
[16:18:47.934]  - Finding globals in 'X' for chunk #1 ...
[16:18:47.934] getGlobalsAndPackages() ...
[16:18:47.934] Searching for globals...
[16:18:47.935] 
[16:18:47.935] Searching for globals ... DONE
[16:18:47.935] - globals: [0] <none>
[16:18:47.935] getGlobalsAndPackages() ... DONE
[16:18:47.935]    + additional globals found: [n=0] 
[16:18:47.935]    + additional namespaces needed: [n=0] 
[16:18:47.935]  - Finding globals in 'X' for chunk #1 ... DONE
[16:18:47.935]  - seeds: [5] <seeds>
[16:18:47.935]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:47.935] getGlobalsAndPackages() ...
[16:18:47.936] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:47.936] Resolving globals: FALSE
[16:18:47.936] Tweak future expression to call with '...' arguments ...
[16:18:47.936] {
[16:18:47.936]     do.call(function(...) {
[16:18:47.936]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:47.936]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:47.936]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:47.936]             on.exit(options(oopts), add = TRUE)
[16:18:47.936]         }
[16:18:47.936]         {
[16:18:47.936]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:47.936]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:47.936]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:47.936]                   envir = globalenv(), inherits = FALSE)
[16:18:47.936]                 ...future.FUN(...future.X_jj, ...)
[16:18:47.936]             })
[16:18:47.936]         }
[16:18:47.936]     }, args = future.call.arguments)
[16:18:47.936] }
[16:18:47.936] Tweak future expression to call with '...' arguments ... DONE
[16:18:47.936] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:47.937] 
[16:18:47.937] getGlobalsAndPackages() ... DONE
[16:18:47.937] run() for ‘Future’ ...
[16:18:47.937] - state: ‘created’
[16:18:47.937] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:18:47.938] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:18:47.938] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:18:47.938]   - Field: ‘label’
[16:18:47.938]   - Field: ‘local’
[16:18:47.938]   - Field: ‘owner’
[16:18:47.938]   - Field: ‘envir’
[16:18:47.938]   - Field: ‘packages’
[16:18:47.938]   - Field: ‘gc’
[16:18:47.938]   - Field: ‘conditions’
[16:18:47.938]   - Field: ‘expr’
[16:18:47.939]   - Field: ‘uuid’
[16:18:47.939]   - Field: ‘seed’
[16:18:47.939]   - Field: ‘version’
[16:18:47.939]   - Field: ‘result’
[16:18:47.939]   - Field: ‘asynchronous’
[16:18:47.939]   - Field: ‘calls’
[16:18:47.939]   - Field: ‘globals’
[16:18:47.939]   - Field: ‘stdout’
[16:18:47.939]   - Field: ‘earlySignal’
[16:18:47.939]   - Field: ‘lazy’
[16:18:47.939]   - Field: ‘state’
[16:18:47.940] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:18:47.940] - Launch lazy future ...
[16:18:47.940] Packages needed by the future expression (n = 0): <none>
[16:18:47.940] Packages needed by future strategies (n = 0): <none>
[16:18:47.940] {
[16:18:47.940]     {
[16:18:47.940]         {
[16:18:47.940]             ...future.startTime <- base::Sys.time()
[16:18:47.940]             {
[16:18:47.940]                 {
[16:18:47.940]                   {
[16:18:47.940]                     base::local({
[16:18:47.940]                       has_future <- base::requireNamespace("future", 
[16:18:47.940]                         quietly = TRUE)
[16:18:47.940]                       if (has_future) {
[16:18:47.940]                         ns <- base::getNamespace("future")
[16:18:47.940]                         version <- ns[[".package"]][["version"]]
[16:18:47.940]                         if (is.null(version)) 
[16:18:47.940]                           version <- utils::packageVersion("future")
[16:18:47.940]                       }
[16:18:47.940]                       else {
[16:18:47.940]                         version <- NULL
[16:18:47.940]                       }
[16:18:47.940]                       if (!has_future || version < "1.8.0") {
[16:18:47.940]                         info <- base::c(r_version = base::gsub("R version ", 
[16:18:47.940]                           "", base::R.version$version.string), 
[16:18:47.940]                           platform = base::sprintf("%s (%s-bit)", 
[16:18:47.940]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:18:47.940]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:18:47.940]                             "release", "version")], collapse = " "), 
[16:18:47.940]                           hostname = base::Sys.info()[["nodename"]])
[16:18:47.940]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:18:47.940]                           info)
[16:18:47.940]                         info <- base::paste(info, collapse = "; ")
[16:18:47.940]                         if (!has_future) {
[16:18:47.940]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:18:47.940]                             info)
[16:18:47.940]                         }
[16:18:47.940]                         else {
[16:18:47.940]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:18:47.940]                             info, version)
[16:18:47.940]                         }
[16:18:47.940]                         base::stop(msg)
[16:18:47.940]                       }
[16:18:47.940]                     })
[16:18:47.940]                   }
[16:18:47.940]                   ...future.strategy.old <- future::plan("list")
[16:18:47.940]                   options(future.plan = NULL)
[16:18:47.940]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:18:47.940]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:18:47.940]                 }
[16:18:47.940]                 ...future.workdir <- getwd()
[16:18:47.940]             }
[16:18:47.940]             ...future.oldOptions <- base::as.list(base::.Options)
[16:18:47.940]             ...future.oldEnvVars <- base::Sys.getenv()
[16:18:47.940]         }
[16:18:47.940]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:18:47.940]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:18:47.940]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:18:47.940]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:18:47.940]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:18:47.940]             future.stdout.windows.reencode = NULL, width = 80L)
[16:18:47.940]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:18:47.940]             base::names(...future.oldOptions))
[16:18:47.940]     }
[16:18:47.940]     if (FALSE) {
[16:18:47.940]     }
[16:18:47.940]     else {
[16:18:47.940]         if (TRUE) {
[16:18:47.940]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:18:47.940]                 open = "w")
[16:18:47.940]         }
[16:18:47.940]         else {
[16:18:47.940]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:18:47.940]                 windows = "NUL", "/dev/null"), open = "w")
[16:18:47.940]         }
[16:18:47.940]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:18:47.940]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:18:47.940]             base::sink(type = "output", split = FALSE)
[16:18:47.940]             base::close(...future.stdout)
[16:18:47.940]         }, add = TRUE)
[16:18:47.940]     }
[16:18:47.940]     ...future.frame <- base::sys.nframe()
[16:18:47.940]     ...future.conditions <- base::list()
[16:18:47.940]     ...future.rng <- base::globalenv()$.Random.seed
[16:18:47.940]     if (FALSE) {
[16:18:47.940]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:18:47.940]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:18:47.940]     }
[16:18:47.940]     ...future.result <- base::tryCatch({
[16:18:47.940]         base::withCallingHandlers({
[16:18:47.940]             ...future.value <- base::withVisible(base::local({
[16:18:47.940]                 do.call(function(...) {
[16:18:47.940]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:47.940]                   if (!identical(...future.globals.maxSize.org, 
[16:18:47.940]                     ...future.globals.maxSize)) {
[16:18:47.940]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:47.940]                     on.exit(options(oopts), add = TRUE)
[16:18:47.940]                   }
[16:18:47.940]                   {
[16:18:47.940]                     lapply(seq_along(...future.elements_ii), 
[16:18:47.940]                       FUN = function(jj) {
[16:18:47.940]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:47.940]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:47.940]                           envir = globalenv(), inherits = FALSE)
[16:18:47.940]                         ...future.FUN(...future.X_jj, ...)
[16:18:47.940]                       })
[16:18:47.940]                   }
[16:18:47.940]                 }, args = future.call.arguments)
[16:18:47.940]             }))
[16:18:47.940]             future::FutureResult(value = ...future.value$value, 
[16:18:47.940]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:47.940]                   ...future.rng), globalenv = if (FALSE) 
[16:18:47.940]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:18:47.940]                     ...future.globalenv.names))
[16:18:47.940]                 else NULL, started = ...future.startTime, version = "1.8")
[16:18:47.940]         }, condition = base::local({
[16:18:47.940]             c <- base::c
[16:18:47.940]             inherits <- base::inherits
[16:18:47.940]             invokeRestart <- base::invokeRestart
[16:18:47.940]             length <- base::length
[16:18:47.940]             list <- base::list
[16:18:47.940]             seq.int <- base::seq.int
[16:18:47.940]             signalCondition <- base::signalCondition
[16:18:47.940]             sys.calls <- base::sys.calls
[16:18:47.940]             `[[` <- base::`[[`
[16:18:47.940]             `+` <- base::`+`
[16:18:47.940]             `<<-` <- base::`<<-`
[16:18:47.940]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:18:47.940]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:18:47.940]                   3L)]
[16:18:47.940]             }
[16:18:47.940]             function(cond) {
[16:18:47.940]                 is_error <- inherits(cond, "error")
[16:18:47.940]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:18:47.940]                   NULL)
[16:18:47.940]                 if (is_error) {
[16:18:47.940]                   sessionInformation <- function() {
[16:18:47.940]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:18:47.940]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:18:47.940]                       search = base::search(), system = base::Sys.info())
[16:18:47.940]                   }
[16:18:47.940]                   ...future.conditions[[length(...future.conditions) + 
[16:18:47.940]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:18:47.940]                     cond$call), session = sessionInformation(), 
[16:18:47.940]                     timestamp = base::Sys.time(), signaled = 0L)
[16:18:47.940]                   signalCondition(cond)
[16:18:47.940]                 }
[16:18:47.940]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:18:47.940]                 "immediateCondition"))) {
[16:18:47.940]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:18:47.940]                   ...future.conditions[[length(...future.conditions) + 
[16:18:47.940]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:18:47.940]                   if (TRUE && !signal) {
[16:18:47.940]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:47.940]                     {
[16:18:47.940]                       inherits <- base::inherits
[16:18:47.940]                       invokeRestart <- base::invokeRestart
[16:18:47.940]                       is.null <- base::is.null
[16:18:47.940]                       muffled <- FALSE
[16:18:47.940]                       if (inherits(cond, "message")) {
[16:18:47.940]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:47.940]                         if (muffled) 
[16:18:47.940]                           invokeRestart("muffleMessage")
[16:18:47.940]                       }
[16:18:47.940]                       else if (inherits(cond, "warning")) {
[16:18:47.940]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:47.940]                         if (muffled) 
[16:18:47.940]                           invokeRestart("muffleWarning")
[16:18:47.940]                       }
[16:18:47.940]                       else if (inherits(cond, "condition")) {
[16:18:47.940]                         if (!is.null(pattern)) {
[16:18:47.940]                           computeRestarts <- base::computeRestarts
[16:18:47.940]                           grepl <- base::grepl
[16:18:47.940]                           restarts <- computeRestarts(cond)
[16:18:47.940]                           for (restart in restarts) {
[16:18:47.940]                             name <- restart$name
[16:18:47.940]                             if (is.null(name)) 
[16:18:47.940]                               next
[16:18:47.940]                             if (!grepl(pattern, name)) 
[16:18:47.940]                               next
[16:18:47.940]                             invokeRestart(restart)
[16:18:47.940]                             muffled <- TRUE
[16:18:47.940]                             break
[16:18:47.940]                           }
[16:18:47.940]                         }
[16:18:47.940]                       }
[16:18:47.940]                       invisible(muffled)
[16:18:47.940]                     }
[16:18:47.940]                     muffleCondition(cond, pattern = "^muffle")
[16:18:47.940]                   }
[16:18:47.940]                 }
[16:18:47.940]                 else {
[16:18:47.940]                   if (TRUE) {
[16:18:47.940]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:47.940]                     {
[16:18:47.940]                       inherits <- base::inherits
[16:18:47.940]                       invokeRestart <- base::invokeRestart
[16:18:47.940]                       is.null <- base::is.null
[16:18:47.940]                       muffled <- FALSE
[16:18:47.940]                       if (inherits(cond, "message")) {
[16:18:47.940]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:47.940]                         if (muffled) 
[16:18:47.940]                           invokeRestart("muffleMessage")
[16:18:47.940]                       }
[16:18:47.940]                       else if (inherits(cond, "warning")) {
[16:18:47.940]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:47.940]                         if (muffled) 
[16:18:47.940]                           invokeRestart("muffleWarning")
[16:18:47.940]                       }
[16:18:47.940]                       else if (inherits(cond, "condition")) {
[16:18:47.940]                         if (!is.null(pattern)) {
[16:18:47.940]                           computeRestarts <- base::computeRestarts
[16:18:47.940]                           grepl <- base::grepl
[16:18:47.940]                           restarts <- computeRestarts(cond)
[16:18:47.940]                           for (restart in restarts) {
[16:18:47.940]                             name <- restart$name
[16:18:47.940]                             if (is.null(name)) 
[16:18:47.940]                               next
[16:18:47.940]                             if (!grepl(pattern, name)) 
[16:18:47.940]                               next
[16:18:47.940]                             invokeRestart(restart)
[16:18:47.940]                             muffled <- TRUE
[16:18:47.940]                             break
[16:18:47.940]                           }
[16:18:47.940]                         }
[16:18:47.940]                       }
[16:18:47.940]                       invisible(muffled)
[16:18:47.940]                     }
[16:18:47.940]                     muffleCondition(cond, pattern = "^muffle")
[16:18:47.940]                   }
[16:18:47.940]                 }
[16:18:47.940]             }
[16:18:47.940]         }))
[16:18:47.940]     }, error = function(ex) {
[16:18:47.940]         base::structure(base::list(value = NULL, visible = NULL, 
[16:18:47.940]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:47.940]                 ...future.rng), started = ...future.startTime, 
[16:18:47.940]             finished = Sys.time(), session_uuid = NA_character_, 
[16:18:47.940]             version = "1.8"), class = "FutureResult")
[16:18:47.940]     }, finally = {
[16:18:47.940]         if (!identical(...future.workdir, getwd())) 
[16:18:47.940]             setwd(...future.workdir)
[16:18:47.940]         {
[16:18:47.940]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:18:47.940]                 ...future.oldOptions$nwarnings <- NULL
[16:18:47.940]             }
[16:18:47.940]             base::options(...future.oldOptions)
[16:18:47.940]             if (.Platform$OS.type == "windows") {
[16:18:47.940]                 old_names <- names(...future.oldEnvVars)
[16:18:47.940]                 envs <- base::Sys.getenv()
[16:18:47.940]                 names <- names(envs)
[16:18:47.940]                 common <- intersect(names, old_names)
[16:18:47.940]                 added <- setdiff(names, old_names)
[16:18:47.940]                 removed <- setdiff(old_names, names)
[16:18:47.940]                 changed <- common[...future.oldEnvVars[common] != 
[16:18:47.940]                   envs[common]]
[16:18:47.940]                 NAMES <- toupper(changed)
[16:18:47.940]                 args <- list()
[16:18:47.940]                 for (kk in seq_along(NAMES)) {
[16:18:47.940]                   name <- changed[[kk]]
[16:18:47.940]                   NAME <- NAMES[[kk]]
[16:18:47.940]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:47.940]                     next
[16:18:47.940]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:47.940]                 }
[16:18:47.940]                 NAMES <- toupper(added)
[16:18:47.940]                 for (kk in seq_along(NAMES)) {
[16:18:47.940]                   name <- added[[kk]]
[16:18:47.940]                   NAME <- NAMES[[kk]]
[16:18:47.940]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:47.940]                     next
[16:18:47.940]                   args[[name]] <- ""
[16:18:47.940]                 }
[16:18:47.940]                 NAMES <- toupper(removed)
[16:18:47.940]                 for (kk in seq_along(NAMES)) {
[16:18:47.940]                   name <- removed[[kk]]
[16:18:47.940]                   NAME <- NAMES[[kk]]
[16:18:47.940]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:47.940]                     next
[16:18:47.940]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:47.940]                 }
[16:18:47.940]                 if (length(args) > 0) 
[16:18:47.940]                   base::do.call(base::Sys.setenv, args = args)
[16:18:47.940]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:18:47.940]             }
[16:18:47.940]             else {
[16:18:47.940]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:18:47.940]             }
[16:18:47.940]             {
[16:18:47.940]                 if (base::length(...future.futureOptionsAdded) > 
[16:18:47.940]                   0L) {
[16:18:47.940]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:18:47.940]                   base::names(opts) <- ...future.futureOptionsAdded
[16:18:47.940]                   base::options(opts)
[16:18:47.940]                 }
[16:18:47.940]                 {
[16:18:47.940]                   {
[16:18:47.940]                     base::assign(".Random.seed", c(10403L, 6L, 
[16:18:47.940]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[16:18:47.940]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[16:18:47.940]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[16:18:47.940]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[16:18:47.940]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[16:18:47.940]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[16:18:47.940]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[16:18:47.940]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[16:18:47.940]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[16:18:47.940]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[16:18:47.940]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[16:18:47.940]                     -1512233174L, -1985955764L, -425390065L, 
[16:18:47.940]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[16:18:47.940]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[16:18:47.940]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[16:18:47.940]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[16:18:47.940]                     1818328109L, -1284085436L, -1981489558L, 
[16:18:47.940]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[16:18:47.940]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[16:18:47.940]                     -1718567047L, -793788661L, -1133789126L, 
[16:18:47.940]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[16:18:47.940]                     -1823521982L, -1345991523L, -1672661737L, 
[16:18:47.940]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[16:18:47.940]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[16:18:47.940]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[16:18:47.940]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[16:18:47.940]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[16:18:47.940]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[16:18:47.940]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[16:18:47.940]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[16:18:47.940]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[16:18:47.940]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[16:18:47.940]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[16:18:47.940]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[16:18:47.940]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[16:18:47.940]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[16:18:47.940]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[16:18:47.940]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[16:18:47.940]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[16:18:47.940]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[16:18:47.940]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[16:18:47.940]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[16:18:47.940]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[16:18:47.940]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[16:18:47.940]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[16:18:47.940]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[16:18:47.940]                     -1119334354L, -1521015416L, -2041922421L, 
[16:18:47.940]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[16:18:47.940]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[16:18:47.940]                     1232111981L, -1801753084L, -1608606422L, 
[16:18:47.940]                     -1172096363L, 1420874031L, -1210473418L, 
[16:18:47.940]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[16:18:47.940]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[16:18:47.940]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[16:18:47.940]                     679371266L, -591318819L, -104578089L, -172818754L, 
[16:18:47.940]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[16:18:47.940]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[16:18:47.940]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[16:18:47.940]                     -332493318L, -1978392251L, -1691039632L, 
[16:18:47.940]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[16:18:47.940]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[16:18:47.940]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[16:18:47.940]                     87560756L, -87565624L, 426345146L, -699970416L, 
[16:18:47.940]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[16:18:47.940]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[16:18:47.940]                     -1178330196L, -687617348L, -1701912078L, 
[16:18:47.940]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[16:18:47.940]                     -1345416048L, 1816730492L, -1570431212L, 
[16:18:47.940]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[16:18:47.940]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[16:18:47.940]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[16:18:47.940]                     -1493184262L, -1943836976L, -590788308L, 
[16:18:47.940]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[16:18:47.940]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[16:18:47.940]                     1274857340L, -1205842638L, -1938479504L, 
[16:18:47.940]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[16:18:47.940]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[16:18:47.940]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[16:18:47.940]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[16:18:47.940]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[16:18:47.940]                     -1460751252L, 1201879444L, -1459788718L, 
[16:18:47.940]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[16:18:47.940]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[16:18:47.940]                     -420945808L, -1997735900L, -1838404552L, 
[16:18:47.940]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[16:18:47.940]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[16:18:47.940]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[16:18:47.940]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[16:18:47.940]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[16:18:47.940]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[16:18:47.940]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[16:18:47.940]                     942193650L, 751741680L, 689743428L, -18455976L, 
[16:18:47.940]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[16:18:47.940]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[16:18:47.940]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[16:18:47.940]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[16:18:47.940]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[16:18:47.940]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[16:18:47.940]                     -1357570110L, 1896595240L, -2066952276L, 
[16:18:47.940]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[16:18:47.940]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[16:18:47.940]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[16:18:47.940]                     769655120L, 236357794L, 181393736L, -13334772L, 
[16:18:47.940]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[16:18:47.940]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[16:18:47.940]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[16:18:47.940]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[16:18:47.940]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[16:18:47.940]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[16:18:47.940]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[16:18:47.940]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[16:18:47.940]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[16:18:47.940]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[16:18:47.940]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[16:18:47.940]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[16:18:47.940]                     -1365842884L, -438961294L, -1851472272L, 
[16:18:47.940]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[16:18:47.940]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[16:18:47.940]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[16:18:47.940]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[16:18:47.940]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[16:18:47.940]                     -594809770L, -2146766621L, -2013964635L, 
[16:18:47.940]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[16:18:47.940]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[16:18:47.940]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[16:18:47.940]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[16:18:47.940]                     -1426021878L, -1285634264L, 1507547537L, 
[16:18:47.940]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[16:18:47.940]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[16:18:47.940]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[16:18:47.940]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[16:18:47.940]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[16:18:47.940]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[16:18:47.940]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[16:18:47.940]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[16:18:47.940]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[16:18:47.940]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[16:18:47.940]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[16:18:47.940]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[16:18:47.940]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[16:18:47.940]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[16:18:47.940]                     -1604604761L, 1421229008L, -1268333714L, 
[16:18:47.940]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[16:18:47.940]                     -2070476623L, -2099222749L, 1141171236L, 
[16:18:47.940]                     -146426158L, -1797385433L, -1129376399L, 
[16:18:47.940]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[16:18:47.940]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[16:18:47.940]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[16:18:47.940]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[16:18:47.940]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[16:18:47.940]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[16:18:47.940]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[16:18:47.940]                     -1092079724L, -1765622238L, -1882554057L, 
[16:18:47.940]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[16:18:47.940]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[16:18:47.940]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[16:18:47.940]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[16:18:47.940]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[16:18:47.940]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[16:18:47.940]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[16:18:47.940]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[16:18:47.940]                     865377681L, -1127426242L), envir = base::globalenv(), 
[16:18:47.940]                       inherits = FALSE)
[16:18:47.940]                     NULL
[16:18:47.940]                   }
[16:18:47.940]                   options(future.plan = NULL)
[16:18:47.940]                   if (is.na(NA_character_)) 
[16:18:47.940]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:18:47.940]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:18:47.940]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:18:47.940]                     .init = FALSE)
[16:18:47.940]                 }
[16:18:47.940]             }
[16:18:47.940]         }
[16:18:47.940]     })
[16:18:47.940]     if (TRUE) {
[16:18:47.940]         base::sink(type = "output", split = FALSE)
[16:18:47.940]         if (TRUE) {
[16:18:47.940]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:18:47.940]         }
[16:18:47.940]         else {
[16:18:47.940]             ...future.result["stdout"] <- base::list(NULL)
[16:18:47.940]         }
[16:18:47.940]         base::close(...future.stdout)
[16:18:47.940]         ...future.stdout <- NULL
[16:18:47.940]     }
[16:18:47.940]     ...future.result$conditions <- ...future.conditions
[16:18:47.940]     ...future.result$finished <- base::Sys.time()
[16:18:47.940]     ...future.result
[16:18:47.940] }
[16:18:47.943] assign_globals() ...
[16:18:47.943] List of 5
[16:18:47.943]  $ ...future.FUN            :function (...)  
[16:18:47.943]  $ future.call.arguments    : list()
[16:18:47.943]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:47.943]  $ ...future.elements_ii    :List of 5
[16:18:47.943]   ..$ : int 0
[16:18:47.943]   ..$ : int 0
[16:18:47.943]   ..$ : int 0
[16:18:47.943]   ..$ : int 0
[16:18:47.943]   ..$ : int 0
[16:18:47.943]  $ ...future.seeds_ii       :List of 5
[16:18:47.943]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[16:18:47.943]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[16:18:47.943]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[16:18:47.943]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[16:18:47.943]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[16:18:47.943]  $ ...future.globals.maxSize: NULL
[16:18:47.943]  - attr(*, "where")=List of 5
[16:18:47.943]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:18:47.943]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:18:47.943]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:18:47.943]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:18:47.943]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:18:47.943]  - attr(*, "resolved")= logi FALSE
[16:18:47.943]  - attr(*, "total_size")= num 616
[16:18:47.943]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:47.943]  - attr(*, "already-done")= logi TRUE
[16:18:47.950] - reassign environment for ‘...future.FUN’
[16:18:47.950] - copied ‘...future.FUN’ to environment
[16:18:47.951] - copied ‘future.call.arguments’ to environment
[16:18:47.951] - copied ‘...future.elements_ii’ to environment
[16:18:47.951] - copied ‘...future.seeds_ii’ to environment
[16:18:47.951] - copied ‘...future.globals.maxSize’ to environment
[16:18:47.951] assign_globals() ... done
[16:18:47.951] plan(): Setting new future strategy stack:
[16:18:47.951] List of future strategies:
[16:18:47.951] 1. sequential:
[16:18:47.951]    - args: function (..., envir = parent.frame())
[16:18:47.951]    - tweaked: FALSE
[16:18:47.951]    - call: NULL
[16:18:47.952] plan(): nbrOfWorkers() = 1
[16:18:47.953] plan(): Setting new future strategy stack:
[16:18:47.953] List of future strategies:
[16:18:47.953] 1. sequential:
[16:18:47.953]    - args: function (..., envir = parent.frame())
[16:18:47.953]    - tweaked: FALSE
[16:18:47.953]    - call: plan(strategy)
[16:18:47.953] plan(): nbrOfWorkers() = 1
[16:18:47.953] SequentialFuture started (and completed)
[16:18:47.953] - Launch lazy future ... done
[16:18:47.953] run() for ‘SequentialFuture’ ... done
[16:18:47.953] Created future:
[16:18:47.954] SequentialFuture:
[16:18:47.954] Label: ‘future_replicate-1’
[16:18:47.954] Expression:
[16:18:47.954] {
[16:18:47.954]     do.call(function(...) {
[16:18:47.954]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:47.954]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:47.954]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:47.954]             on.exit(options(oopts), add = TRUE)
[16:18:47.954]         }
[16:18:47.954]         {
[16:18:47.954]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:47.954]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:47.954]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:47.954]                   envir = globalenv(), inherits = FALSE)
[16:18:47.954]                 ...future.FUN(...future.X_jj, ...)
[16:18:47.954]             })
[16:18:47.954]         }
[16:18:47.954]     }, args = future.call.arguments)
[16:18:47.954] }
[16:18:47.954] Lazy evaluation: FALSE
[16:18:47.954] Asynchronous evaluation: FALSE
[16:18:47.954] Local evaluation: TRUE
[16:18:47.954] Environment: R_GlobalEnv
[16:18:47.954] Capture standard output: TRUE
[16:18:47.954] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:18:47.954] Globals: 5 objects totaling 1.27 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, list ‘...future.seeds_ii’ of 400 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:18:47.954] Packages: <none>
[16:18:47.954] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:18:47.954] Resolved: TRUE
[16:18:47.954] Value: 280 bytes of class ‘list’
[16:18:47.954] Early signaling: FALSE
[16:18:47.954] Owner process: 20271db5-d788-b537-4432-0a26f2d2d030
[16:18:47.954] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:18:47.955] Chunk #1 of 1 ... DONE
[16:18:47.955] Launching 1 futures (chunks) ... DONE
[16:18:47.955] Resolving 1 futures (chunks) ...
[16:18:47.955] resolve() on list ...
[16:18:47.955]  recursive: 0
[16:18:47.955]  length: 1
[16:18:47.955] 
[16:18:47.955] resolved() for ‘SequentialFuture’ ...
[16:18:47.955] - state: ‘finished’
[16:18:47.955] - run: TRUE
[16:18:47.956] - result: ‘FutureResult’
[16:18:47.956] resolved() for ‘SequentialFuture’ ... done
[16:18:47.956] Future #1
[16:18:47.956] signalConditionsASAP(SequentialFuture, pos=1) ...
[16:18:47.956] - nx: 1
[16:18:47.956] - relay: TRUE
[16:18:47.956] - stdout: TRUE
[16:18:47.956] - signal: TRUE
[16:18:47.956] - resignal: FALSE
[16:18:47.956] - force: TRUE
[16:18:47.956] - relayed: [n=1] FALSE
[16:18:47.957] - queued futures: [n=1] FALSE
[16:18:47.957]  - until=1
[16:18:47.957]  - relaying element #1
[16:18:47.957] - relayed: [n=1] TRUE
[16:18:47.957] - queued futures: [n=1] TRUE
[16:18:47.957] signalConditionsASAP(SequentialFuture, pos=1) ... done
[16:18:47.957]  length: 0 (resolved future 1)
[16:18:47.957] Relaying remaining futures
[16:18:47.957] signalConditionsASAP(NULL, pos=0) ...
[16:18:47.957] - nx: 1
[16:18:47.958] - relay: TRUE
[16:18:47.958] - stdout: TRUE
[16:18:47.958] - signal: TRUE
[16:18:47.958] - resignal: FALSE
[16:18:47.958] - force: TRUE
[16:18:47.958] - relayed: [n=1] TRUE
[16:18:47.958] - queued futures: [n=1] TRUE
 - flush all
[16:18:47.958] - relayed: [n=1] TRUE
[16:18:47.960] - queued futures: [n=1] TRUE
[16:18:47.960] signalConditionsASAP(NULL, pos=0) ... done
[16:18:47.960] resolve() on list ... DONE
[16:18:47.960]  - Number of value chunks collected: 1
[16:18:47.960] Resolving 1 futures (chunks) ... DONE
[16:18:47.961] Reducing values from 1 chunks ...
[16:18:47.961]  - Number of values collected after concatenation: 5
[16:18:47.961]  - Number of values expected: 5
[16:18:47.961] Reducing values from 1 chunks ... DONE
[16:18:47.961] future_lapply() ... DONE
- example(replicate) ...
[16:18:47.961] future_lapply() ...
[16:18:47.962] Generating random seeds ...
[16:18:47.962] Generating random seed streams for 5 elements ...
[16:18:47.962] Generating random seed streams for 5 elements ... DONE
[16:18:47.962] Generating random seeds ... DONE
[16:18:47.962] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:18:47.963] Number of chunks: 1
[16:18:47.963] getGlobalsAndPackagesXApply() ...
[16:18:47.963]  - future.globals: TRUE
[16:18:47.963] getGlobalsAndPackages() ...
[16:18:47.963] Searching for globals...
[16:18:47.965] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[16:18:47.965] Searching for globals ... DONE
[16:18:47.965] Resolving globals: FALSE
[16:18:47.966] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[16:18:47.966] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[16:18:47.966] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[16:18:47.966] 
[16:18:47.966] getGlobalsAndPackages() ... DONE
[16:18:47.966]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[16:18:47.967]  - needed namespaces: [n=0] 
[16:18:47.967] Finding globals ... DONE
[16:18:47.967]  - use_args: TRUE
[16:18:47.967]  - Getting '...' globals ...
[16:18:47.967] resolve() on list ...
[16:18:47.967]  recursive: 0
[16:18:47.967]  length: 1
[16:18:47.967]  elements: ‘...’
[16:18:47.967]  length: 0 (resolved future 1)
[16:18:47.968] resolve() on list ... DONE
[16:18:47.968]    - '...' content: [n=0] 
[16:18:47.968] List of 1
[16:18:47.968]  $ ...: list()
[16:18:47.968]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:47.968]  - attr(*, "where")=List of 1
[16:18:47.968]   ..$ ...:<environment: 0x55e79f4f8db0> 
[16:18:47.968]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:47.968]  - attr(*, "resolved")= logi TRUE
[16:18:47.968]  - attr(*, "total_size")= num NA
[16:18:47.970]  - Getting '...' globals ... DONE
[16:18:47.970] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[16:18:47.971] List of 4
[16:18:47.971]  $ ...future.FUN:function (...)  
[16:18:47.971]  $ foo          :function (x = 1, y = 2)  
[16:18:47.971]  $ x            : num 3
[16:18:47.971]  $ ...          : list()
[16:18:47.971]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:47.971]  - attr(*, "where")=List of 4
[16:18:47.971]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:18:47.971]   ..$ foo          :<environment: R_EmptyEnv> 
[16:18:47.971]   ..$ x            :<environment: R_EmptyEnv> 
[16:18:47.971]   ..$ ...          :<environment: 0x55e79f4f8db0> 
[16:18:47.971]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:47.971]  - attr(*, "resolved")= logi FALSE
[16:18:47.971]  - attr(*, "total_size")= num 2200
[16:18:47.974] Packages to be attached in all futures: [n=0] 
[16:18:47.974] getGlobalsAndPackagesXApply() ... DONE
[16:18:47.975] Number of futures (= number of chunks): 1
[16:18:47.975] Launching 1 futures (chunks) ...
[16:18:47.975] Chunk #1 of 1 ...
[16:18:47.975]  - Finding globals in 'X' for chunk #1 ...
[16:18:47.975] getGlobalsAndPackages() ...
[16:18:47.975] Searching for globals...
[16:18:47.975] 
[16:18:47.975] Searching for globals ... DONE
[16:18:47.975] - globals: [0] <none>
[16:18:47.976] getGlobalsAndPackages() ... DONE
[16:18:47.976]    + additional globals found: [n=0] 
[16:18:47.976]    + additional namespaces needed: [n=0] 
[16:18:47.976]  - Finding globals in 'X' for chunk #1 ... DONE
[16:18:47.976]  - seeds: [5] <seeds>
[16:18:47.976]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:47.976] getGlobalsAndPackages() ...
[16:18:47.976] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:47.976] Resolving globals: FALSE
[16:18:47.977] Tweak future expression to call with '...' arguments ...
[16:18:47.977] {
[16:18:47.977]     do.call(function(...) {
[16:18:47.977]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:47.977]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:47.977]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:47.977]             on.exit(options(oopts), add = TRUE)
[16:18:47.977]         }
[16:18:47.977]         {
[16:18:47.977]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:47.977]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:47.977]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:47.977]                   envir = globalenv(), inherits = FALSE)
[16:18:47.977]                 ...future.FUN(...future.X_jj, ...)
[16:18:47.977]             })
[16:18:47.977]         }
[16:18:47.977]     }, args = future.call.arguments)
[16:18:47.977] }
[16:18:47.977] Tweak future expression to call with '...' arguments ... DONE
[16:18:47.977] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:47.977] 
[16:18:47.978] getGlobalsAndPackages() ... DONE
[16:18:47.978] run() for ‘Future’ ...
[16:18:47.978] - state: ‘created’
[16:18:47.978] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:18:47.978] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:18:47.978] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:18:47.979]   - Field: ‘label’
[16:18:47.979]   - Field: ‘local’
[16:18:47.979]   - Field: ‘owner’
[16:18:47.979]   - Field: ‘envir’
[16:18:47.979]   - Field: ‘packages’
[16:18:47.979]   - Field: ‘gc’
[16:18:47.979]   - Field: ‘conditions’
[16:18:47.979]   - Field: ‘expr’
[16:18:47.979]   - Field: ‘uuid’
[16:18:47.979]   - Field: ‘seed’
[16:18:47.980]   - Field: ‘version’
[16:18:47.980]   - Field: ‘result’
[16:18:47.980]   - Field: ‘asynchronous’
[16:18:47.980]   - Field: ‘calls’
[16:18:47.980]   - Field: ‘globals’
[16:18:47.980]   - Field: ‘stdout’
[16:18:47.980]   - Field: ‘earlySignal’
[16:18:47.980]   - Field: ‘lazy’
[16:18:47.980]   - Field: ‘state’
[16:18:47.980] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:18:47.980] - Launch lazy future ...
[16:18:47.981] Packages needed by the future expression (n = 0): <none>
[16:18:47.981] Packages needed by future strategies (n = 0): <none>
[16:18:47.981] {
[16:18:47.981]     {
[16:18:47.981]         {
[16:18:47.981]             ...future.startTime <- base::Sys.time()
[16:18:47.981]             {
[16:18:47.981]                 {
[16:18:47.981]                   {
[16:18:47.981]                     base::local({
[16:18:47.981]                       has_future <- base::requireNamespace("future", 
[16:18:47.981]                         quietly = TRUE)
[16:18:47.981]                       if (has_future) {
[16:18:47.981]                         ns <- base::getNamespace("future")
[16:18:47.981]                         version <- ns[[".package"]][["version"]]
[16:18:47.981]                         if (is.null(version)) 
[16:18:47.981]                           version <- utils::packageVersion("future")
[16:18:47.981]                       }
[16:18:47.981]                       else {
[16:18:47.981]                         version <- NULL
[16:18:47.981]                       }
[16:18:47.981]                       if (!has_future || version < "1.8.0") {
[16:18:47.981]                         info <- base::c(r_version = base::gsub("R version ", 
[16:18:47.981]                           "", base::R.version$version.string), 
[16:18:47.981]                           platform = base::sprintf("%s (%s-bit)", 
[16:18:47.981]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:18:47.981]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:18:47.981]                             "release", "version")], collapse = " "), 
[16:18:47.981]                           hostname = base::Sys.info()[["nodename"]])
[16:18:47.981]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:18:47.981]                           info)
[16:18:47.981]                         info <- base::paste(info, collapse = "; ")
[16:18:47.981]                         if (!has_future) {
[16:18:47.981]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:18:47.981]                             info)
[16:18:47.981]                         }
[16:18:47.981]                         else {
[16:18:47.981]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:18:47.981]                             info, version)
[16:18:47.981]                         }
[16:18:47.981]                         base::stop(msg)
[16:18:47.981]                       }
[16:18:47.981]                     })
[16:18:47.981]                   }
[16:18:47.981]                   ...future.strategy.old <- future::plan("list")
[16:18:47.981]                   options(future.plan = NULL)
[16:18:47.981]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:18:47.981]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:18:47.981]                 }
[16:18:47.981]                 ...future.workdir <- getwd()
[16:18:47.981]             }
[16:18:47.981]             ...future.oldOptions <- base::as.list(base::.Options)
[16:18:47.981]             ...future.oldEnvVars <- base::Sys.getenv()
[16:18:47.981]         }
[16:18:47.981]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:18:47.981]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:18:47.981]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:18:47.981]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:18:47.981]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:18:47.981]             future.stdout.windows.reencode = NULL, width = 80L)
[16:18:47.981]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:18:47.981]             base::names(...future.oldOptions))
[16:18:47.981]     }
[16:18:47.981]     if (FALSE) {
[16:18:47.981]     }
[16:18:47.981]     else {
[16:18:47.981]         if (TRUE) {
[16:18:47.981]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:18:47.981]                 open = "w")
[16:18:47.981]         }
[16:18:47.981]         else {
[16:18:47.981]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:18:47.981]                 windows = "NUL", "/dev/null"), open = "w")
[16:18:47.981]         }
[16:18:47.981]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:18:47.981]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:18:47.981]             base::sink(type = "output", split = FALSE)
[16:18:47.981]             base::close(...future.stdout)
[16:18:47.981]         }, add = TRUE)
[16:18:47.981]     }
[16:18:47.981]     ...future.frame <- base::sys.nframe()
[16:18:47.981]     ...future.conditions <- base::list()
[16:18:47.981]     ...future.rng <- base::globalenv()$.Random.seed
[16:18:47.981]     if (FALSE) {
[16:18:47.981]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:18:47.981]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:18:47.981]     }
[16:18:47.981]     ...future.result <- base::tryCatch({
[16:18:47.981]         base::withCallingHandlers({
[16:18:47.981]             ...future.value <- base::withVisible(base::local({
[16:18:47.981]                 do.call(function(...) {
[16:18:47.981]                   ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:47.981]                   if (!identical(...future.globals.maxSize.org, 
[16:18:47.981]                     ...future.globals.maxSize)) {
[16:18:47.981]                     oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:47.981]                     on.exit(options(oopts), add = TRUE)
[16:18:47.981]                   }
[16:18:47.981]                   {
[16:18:47.981]                     lapply(seq_along(...future.elements_ii), 
[16:18:47.981]                       FUN = function(jj) {
[16:18:47.981]                         ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:47.981]                         assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:47.981]                           envir = globalenv(), inherits = FALSE)
[16:18:47.981]                         ...future.FUN(...future.X_jj, ...)
[16:18:47.981]                       })
[16:18:47.981]                   }
[16:18:47.981]                 }, args = future.call.arguments)
[16:18:47.981]             }))
[16:18:47.981]             future::FutureResult(value = ...future.value$value, 
[16:18:47.981]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:47.981]                   ...future.rng), globalenv = if (FALSE) 
[16:18:47.981]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:18:47.981]                     ...future.globalenv.names))
[16:18:47.981]                 else NULL, started = ...future.startTime, version = "1.8")
[16:18:47.981]         }, condition = base::local({
[16:18:47.981]             c <- base::c
[16:18:47.981]             inherits <- base::inherits
[16:18:47.981]             invokeRestart <- base::invokeRestart
[16:18:47.981]             length <- base::length
[16:18:47.981]             list <- base::list
[16:18:47.981]             seq.int <- base::seq.int
[16:18:47.981]             signalCondition <- base::signalCondition
[16:18:47.981]             sys.calls <- base::sys.calls
[16:18:47.981]             `[[` <- base::`[[`
[16:18:47.981]             `+` <- base::`+`
[16:18:47.981]             `<<-` <- base::`<<-`
[16:18:47.981]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:18:47.981]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:18:47.981]                   3L)]
[16:18:47.981]             }
[16:18:47.981]             function(cond) {
[16:18:47.981]                 is_error <- inherits(cond, "error")
[16:18:47.981]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:18:47.981]                   NULL)
[16:18:47.981]                 if (is_error) {
[16:18:47.981]                   sessionInformation <- function() {
[16:18:47.981]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:18:47.981]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:18:47.981]                       search = base::search(), system = base::Sys.info())
[16:18:47.981]                   }
[16:18:47.981]                   ...future.conditions[[length(...future.conditions) + 
[16:18:47.981]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:18:47.981]                     cond$call), session = sessionInformation(), 
[16:18:47.981]                     timestamp = base::Sys.time(), signaled = 0L)
[16:18:47.981]                   signalCondition(cond)
[16:18:47.981]                 }
[16:18:47.981]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:18:47.981]                 "immediateCondition"))) {
[16:18:47.981]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:18:47.981]                   ...future.conditions[[length(...future.conditions) + 
[16:18:47.981]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:18:47.981]                   if (TRUE && !signal) {
[16:18:47.981]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:47.981]                     {
[16:18:47.981]                       inherits <- base::inherits
[16:18:47.981]                       invokeRestart <- base::invokeRestart
[16:18:47.981]                       is.null <- base::is.null
[16:18:47.981]                       muffled <- FALSE
[16:18:47.981]                       if (inherits(cond, "message")) {
[16:18:47.981]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:47.981]                         if (muffled) 
[16:18:47.981]                           invokeRestart("muffleMessage")
[16:18:47.981]                       }
[16:18:47.981]                       else if (inherits(cond, "warning")) {
[16:18:47.981]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:47.981]                         if (muffled) 
[16:18:47.981]                           invokeRestart("muffleWarning")
[16:18:47.981]                       }
[16:18:47.981]                       else if (inherits(cond, "condition")) {
[16:18:47.981]                         if (!is.null(pattern)) {
[16:18:47.981]                           computeRestarts <- base::computeRestarts
[16:18:47.981]                           grepl <- base::grepl
[16:18:47.981]                           restarts <- computeRestarts(cond)
[16:18:47.981]                           for (restart in restarts) {
[16:18:47.981]                             name <- restart$name
[16:18:47.981]                             if (is.null(name)) 
[16:18:47.981]                               next
[16:18:47.981]                             if (!grepl(pattern, name)) 
[16:18:47.981]                               next
[16:18:47.981]                             invokeRestart(restart)
[16:18:47.981]                             muffled <- TRUE
[16:18:47.981]                             break
[16:18:47.981]                           }
[16:18:47.981]                         }
[16:18:47.981]                       }
[16:18:47.981]                       invisible(muffled)
[16:18:47.981]                     }
[16:18:47.981]                     muffleCondition(cond, pattern = "^muffle")
[16:18:47.981]                   }
[16:18:47.981]                 }
[16:18:47.981]                 else {
[16:18:47.981]                   if (TRUE) {
[16:18:47.981]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:47.981]                     {
[16:18:47.981]                       inherits <- base::inherits
[16:18:47.981]                       invokeRestart <- base::invokeRestart
[16:18:47.981]                       is.null <- base::is.null
[16:18:47.981]                       muffled <- FALSE
[16:18:47.981]                       if (inherits(cond, "message")) {
[16:18:47.981]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:47.981]                         if (muffled) 
[16:18:47.981]                           invokeRestart("muffleMessage")
[16:18:47.981]                       }
[16:18:47.981]                       else if (inherits(cond, "warning")) {
[16:18:47.981]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:47.981]                         if (muffled) 
[16:18:47.981]                           invokeRestart("muffleWarning")
[16:18:47.981]                       }
[16:18:47.981]                       else if (inherits(cond, "condition")) {
[16:18:47.981]                         if (!is.null(pattern)) {
[16:18:47.981]                           computeRestarts <- base::computeRestarts
[16:18:47.981]                           grepl <- base::grepl
[16:18:47.981]                           restarts <- computeRestarts(cond)
[16:18:47.981]                           for (restart in restarts) {
[16:18:47.981]                             name <- restart$name
[16:18:47.981]                             if (is.null(name)) 
[16:18:47.981]                               next
[16:18:47.981]                             if (!grepl(pattern, name)) 
[16:18:47.981]                               next
[16:18:47.981]                             invokeRestart(restart)
[16:18:47.981]                             muffled <- TRUE
[16:18:47.981]                             break
[16:18:47.981]                           }
[16:18:47.981]                         }
[16:18:47.981]                       }
[16:18:47.981]                       invisible(muffled)
[16:18:47.981]                     }
[16:18:47.981]                     muffleCondition(cond, pattern = "^muffle")
[16:18:47.981]                   }
[16:18:47.981]                 }
[16:18:47.981]             }
[16:18:47.981]         }))
[16:18:47.981]     }, error = function(ex) {
[16:18:47.981]         base::structure(base::list(value = NULL, visible = NULL, 
[16:18:47.981]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:47.981]                 ...future.rng), started = ...future.startTime, 
[16:18:47.981]             finished = Sys.time(), session_uuid = NA_character_, 
[16:18:47.981]             version = "1.8"), class = "FutureResult")
[16:18:47.981]     }, finally = {
[16:18:47.981]         if (!identical(...future.workdir, getwd())) 
[16:18:47.981]             setwd(...future.workdir)
[16:18:47.981]         {
[16:18:47.981]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:18:47.981]                 ...future.oldOptions$nwarnings <- NULL
[16:18:47.981]             }
[16:18:47.981]             base::options(...future.oldOptions)
[16:18:47.981]             if (.Platform$OS.type == "windows") {
[16:18:47.981]                 old_names <- names(...future.oldEnvVars)
[16:18:47.981]                 envs <- base::Sys.getenv()
[16:18:47.981]                 names <- names(envs)
[16:18:47.981]                 common <- intersect(names, old_names)
[16:18:47.981]                 added <- setdiff(names, old_names)
[16:18:47.981]                 removed <- setdiff(old_names, names)
[16:18:47.981]                 changed <- common[...future.oldEnvVars[common] != 
[16:18:47.981]                   envs[common]]
[16:18:47.981]                 NAMES <- toupper(changed)
[16:18:47.981]                 args <- list()
[16:18:47.981]                 for (kk in seq_along(NAMES)) {
[16:18:47.981]                   name <- changed[[kk]]
[16:18:47.981]                   NAME <- NAMES[[kk]]
[16:18:47.981]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:47.981]                     next
[16:18:47.981]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:47.981]                 }
[16:18:47.981]                 NAMES <- toupper(added)
[16:18:47.981]                 for (kk in seq_along(NAMES)) {
[16:18:47.981]                   name <- added[[kk]]
[16:18:47.981]                   NAME <- NAMES[[kk]]
[16:18:47.981]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:47.981]                     next
[16:18:47.981]                   args[[name]] <- ""
[16:18:47.981]                 }
[16:18:47.981]                 NAMES <- toupper(removed)
[16:18:47.981]                 for (kk in seq_along(NAMES)) {
[16:18:47.981]                   name <- removed[[kk]]
[16:18:47.981]                   NAME <- NAMES[[kk]]
[16:18:47.981]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:47.981]                     next
[16:18:47.981]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:47.981]                 }
[16:18:47.981]                 if (length(args) > 0) 
[16:18:47.981]                   base::do.call(base::Sys.setenv, args = args)
[16:18:47.981]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:18:47.981]             }
[16:18:47.981]             else {
[16:18:47.981]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:18:47.981]             }
[16:18:47.981]             {
[16:18:47.981]                 if (base::length(...future.futureOptionsAdded) > 
[16:18:47.981]                   0L) {
[16:18:47.981]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:18:47.981]                   base::names(opts) <- ...future.futureOptionsAdded
[16:18:47.981]                   base::options(opts)
[16:18:47.981]                 }
[16:18:47.981]                 {
[16:18:47.981]                   {
[16:18:47.981]                     base::assign(".Random.seed", c(10403L, 8L, 
[16:18:47.981]                     133210212L, 1945833034L, 115858357L, -364452081L, 
[16:18:47.981]                     -390319082L, 926195392L, 2057013379L, -803887967L, 
[16:18:47.981]                     -1078998384L, 705296750L, -1682614503L, 830917547L, 
[16:18:47.981]                     -331376230L, 1352842588L, 1960957023L, 1997081653L, 
[16:18:47.981]                     374446028L, 1510359842L, 1146109309L, -1295266185L, 
[16:18:47.981]                     -1545472098L, 1268700760L, 1627111355L, -855092903L, 
[16:18:47.981]                     -215790872L, -1958931690L, 1906054289L, -782874301L, 
[16:18:47.981]                     -399096750L, -1740777756L, 1763676455L, -832683651L, 
[16:18:47.981]                     1369376884L, 430697050L, 1699587749L, -1503628097L, 
[16:18:47.981]                     856180550L, -242424368L, -2127251469L, 505777937L, 
[16:18:47.981]                     257347392L, -856180962L, 886024169L, -1464480485L, 
[16:18:47.981]                     -1512233174L, -1985955764L, -425390065L, 
[16:18:47.981]                     -589669563L, 381897980L, -790840494L, 1136483533L, 
[16:18:47.981]                     -1535370105L, -607934610L, 1641470280L, -1050403509L, 
[16:18:47.981]                     1965932713L, 362996216L, 1596838182L, -1829498303L, 
[16:18:47.981]                     -1824465965L, 1872669058L, -417374796L, -1713346249L, 
[16:18:47.981]                     1818328109L, -1284085436L, -1981489558L, 
[16:18:47.981]                     1940543701L, 1673049711L, -1514495114L, 467096736L, 
[16:18:47.981]                     943410531L, -1431020031L, 1115626864L, 965475598L, 
[16:18:47.981]                     -1718567047L, -793788661L, -1133789126L, 
[16:18:47.981]                     -80588996L, 2018258047L, 1866186709L, 42791404L, 
[16:18:47.981]                     -1823521982L, -1345991523L, -1672661737L, 
[16:18:47.981]                     -180777858L, -452713416L, 1448313627L, -1459492743L, 
[16:18:47.981]                     -600706872L, -909649674L, -2081822415L, -1697455773L, 
[16:18:47.981]                     1517613874L, -820020092L, 188336327L, -1149897827L, 
[16:18:47.981]                     -475203820L, -368005702L, 204442629L, 437854687L, 
[16:18:47.981]                     1163191398L, -760699920L, 104455443L, 819708593L, 
[16:18:47.981]                     1129180512L, 48636670L, 1066049161L, 398150075L, 
[16:18:47.981]                     -852036726L, -906028436L, -1265740817L, -1824646107L, 
[16:18:47.981]                     -2126068516L, 1815435954L, -146408019L, -860012185L, 
[16:18:47.981]                     -682500466L, 1443186536L, 1789394795L, -1078204151L, 
[16:18:47.981]                     809467800L, 1514112710L, -1097673695L, 919601331L, 
[16:18:47.981]                     -331916766L, 795008020L, 1042337943L, -371219827L, 
[16:18:47.981]                     1558967204L, 1563528586L, -2133607947L, -1904454577L, 
[16:18:47.981]                     -264006826L, 770017792L, 153477955L, 1189667553L, 
[16:18:47.981]                     -363253680L, 1882362030L, 967246937L, -793119637L, 
[16:18:47.981]                     -1401964070L, 2129232540L, -542810977L, -1277899019L, 
[16:18:47.981]                     -377097332L, -406748574L, -1722157507L, -1577740105L, 
[16:18:47.981]                     -455170210L, 372239000L, -1535936005L, -1332632679L, 
[16:18:47.981]                     -1623884760L, -359633706L, 935827793L, 1357445123L, 
[16:18:47.981]                     997040018L, -1506538204L, -147930137L, -166569923L, 
[16:18:47.981]                     -2103753036L, 1366641946L, 30482021L, 1876964095L, 
[16:18:47.981]                     2008557446L, 657856784L, -103814733L, 774877777L, 
[16:18:47.981]                     -486350336L, -555057442L, -1821756119L, -963495717L, 
[16:18:47.981]                     853311466L, 1671241612L, -942337841L, 409538693L, 
[16:18:47.981]                     1992831804L, 489867794L, 357105933L, -1611412921L, 
[16:18:47.981]                     -1119334354L, -1521015416L, -2041922421L, 
[16:18:47.981]                     2048874089L, -700216776L, 1651628774L, -10471807L, 
[16:18:47.981]                     736942611L, 380607938L, -1742088588L, 1124231287L, 
[16:18:47.981]                     1232111981L, -1801753084L, -1608606422L, 
[16:18:47.981]                     -1172096363L, 1420874031L, -1210473418L, 
[16:18:47.981]                     -18317216L, -571709789L, 1107403201L, 1952554416L, 
[16:18:47.981]                     1991660750L, -442973639L, 581522507L, -430787078L, 
[16:18:47.981]                     1105375484L, -1481218753L, -748152299L, -641535700L, 
[16:18:47.981]                     679371266L, -591318819L, -104578089L, -172818754L, 
[16:18:47.981]                     -1321694984L, -98191653L, 1709083961L, -344680312L, 
[16:18:47.981]                     -159571914L, 581309553L, -63938909L, 76420082L, 
[16:18:47.981]                     951019332L, -1797740537L, 1291470301L, -2079866156L, 
[16:18:47.981]                     -332493318L, -1978392251L, -1691039632L, 
[16:18:47.981]                     388791868L, -1101109484L, -1365177662L, 321737440L, 
[16:18:47.981]                     1812890748L, -133313328L, -1252731998L, 2044530216L, 
[16:18:47.981]                     1263927564L, 325388220L, 520794418L, 1449646272L, 
[16:18:47.981]                     87560756L, -87565624L, 426345146L, -699970416L, 
[16:18:47.981]                     240322284L, -1074080172L, -1536268654L, 1338615584L, 
[16:18:47.981]                     478476236L, -1933154080L, -192786750L, 1559942184L, 
[16:18:47.981]                     -1178330196L, -687617348L, -1701912078L, 
[16:18:47.981]                     352314928L, -999229532L, -2052800072L, -1913644198L, 
[16:18:47.981]                     -1345416048L, 1816730492L, -1570431212L, 
[16:18:47.981]                     -269427390L, -2122969344L, -520963140L, 1398087504L, 
[16:18:47.981]                     264692002L, -1682658744L, -1422452724L, -1601893284L, 
[16:18:47.981]                     -66383406L, 1443075584L, -456249004L, 943694056L, 
[16:18:47.981]                     -1493184262L, -1943836976L, -590788308L, 
[16:18:47.981]                     -405505804L, -1796837998L, 1991543136L, 1170376716L, 
[16:18:47.981]                     1707420384L, 1899700834L, -1643595096L, 47299148L, 
[16:18:47.981]                     1274857340L, -1205842638L, -1938479504L, 
[16:18:47.981]                     -1773978812L, 532695000L, 1306451834L, 258403888L, 
[16:18:47.981]                     -284747844L, -1780705708L, 1621936194L, 1129070752L, 
[16:18:47.981]                     540946108L, -294270512L, -1426480286L, -356302104L, 
[16:18:47.981]                     349847756L, 1849803260L, -1299125774L, 511654528L, 
[16:18:47.981]                     -1259964940L, -1879857528L, 535666490L, -2020097200L, 
[16:18:47.981]                     -1460751252L, 1201879444L, -1459788718L, 
[16:18:47.981]                     447195616L, -730891060L, -1875530592L, -2146183806L, 
[16:18:47.981]                     193274088L, -1224605972L, 1616153916L, -1896973198L, 
[16:18:47.981]                     -420945808L, -1997735900L, -1838404552L, 
[16:18:47.981]                     -413698278L, 1984019664L, -1760209092L, -1288743020L, 
[16:18:47.981]                     392579970L, -1382567488L, -1295004100L, -33348208L, 
[16:18:47.981]                     1536615970L, -428761848L, 643368588L, -1596336356L, 
[16:18:47.981]                     1797431442L, 352422272L, -1043800556L, 60591912L, 
[16:18:47.981]                     -1115663814L, 1043682768L, 521144684L, 4793268L, 
[16:18:47.981]                     -1924265966L, 978890208L, 370048972L, -1607474976L, 
[16:18:47.981]                     -1443637214L, -632405720L, 691912204L, 166321980L, 
[16:18:47.981]                     942193650L, 751741680L, 689743428L, -18455976L, 
[16:18:47.981]                     -1946329286L, -1619184144L, 239341244L, 371382548L, 
[16:18:47.981]                     -2069808446L, 154176608L, 385987452L, -385611824L, 
[16:18:47.981]                     1967391010L, 2140654248L, 1720087436L, -1591007044L, 
[16:18:47.981]                     -1612486862L, 1295747648L, 1726784692L, 597326408L, 
[16:18:47.981]                     -973152838L, 628505104L, -1089631508L, 3230036L, 
[16:18:47.981]                     -593837806L, 244006304L, 1357912780L, 1839234656L, 
[16:18:47.981]                     -1357570110L, 1896595240L, -2066952276L, 
[16:18:47.981]                     -1724304580L, 986188146L, -1200604368L, -279100124L, 
[16:18:47.981]                     131128120L, -1088465190L, 596533136L, 170602236L, 
[16:18:47.981]                     -1051262060L, 215660610L, -686217984L, 444449852L, 
[16:18:47.981]                     769655120L, 236357794L, 181393736L, -13334772L, 
[16:18:47.981]                     644690652L, -1969263278L, -2107982720L, 1429553236L, 
[16:18:47.981]                     794236904L, 1997299962L, -458224816L, 904978220L, 
[16:18:47.981]                     -537093772L, -842839150L, 1828989024L, -679303796L, 
[16:18:47.981]                     1396292448L, 76319202L, 1896098728L, 418430156L, 
[16:18:47.981]                     2005956604L, 1370351026L, -1178923536L, -1154073660L, 
[16:18:47.981]                     -1218863784L, 89928058L, 816597936L, -1141767748L, 
[16:18:47.981]                     1579714644L, 1343385538L, 371259424L, -245180228L, 
[16:18:47.981]                     365724240L, 1606388706L, -823678872L, 1281309772L, 
[16:18:47.981]                     1395210492L, 1217887218L, 1420531968L, 1349501300L, 
[16:18:47.981]                     271647752L, -69959750L, 360452560L, 1565334508L, 
[16:18:47.981]                     1956526484L, -930709038L, 1961808224L, -1745916084L, 
[16:18:47.981]                     443656480L, 1990137730L, 694374120L, -1050566420L, 
[16:18:47.981]                     -1365842884L, -438961294L, -1851472272L, 
[16:18:47.981]                     614534180L, 1401930552L, 3652762L, 1928284880L, 
[16:18:47.981]                     -1637703492L, 26107540L, -132725907L, -371944998L, 
[16:18:47.981]                     -1311388776L, 8516097L, 741008307L, -1149566252L, 
[16:18:47.981]                     -1802640414L, 2019636855L, 1587818433L, -151040698L, 
[16:18:47.981]                     1598381188L, -205462987L, 1911327L, -1382519432L, 
[16:18:47.981]                     -594809770L, -2146766621L, -2013964635L, 
[16:18:47.981]                     -965534910L, -2077626064L, 1964788057L, 1821395659L, 
[16:18:47.981]                     -1953549508L, -719348886L, 1442511263L, 1969287209L, 
[16:18:47.981]                     1754221246L, -442299476L, 1981692157L, 113456199L, 
[16:18:47.981]                     1587794736L, -1811033010L, 1149417595L, -1760887843L, 
[16:18:47.981]                     -1426021878L, -1285634264L, 1507547537L, 
[16:18:47.981]                     -1114120317L, 1897370756L, 1142575794L, -375814649L, 
[16:18:47.981]                     -1661041071L, 881081814L, -548925260L, 2073840837L, 
[16:18:47.981]                     1156484623L, 2011334280L, 1107815334L, 969024339L, 
[16:18:47.981]                     -55972683L, 2006780434L, -1486403616L, 1698650697L, 
[16:18:47.981]                     1813794939L, -1717763764L, 1268815066L, -1200630577L, 
[16:18:47.981]                     -773717863L, -12215122L, 1354639804L, 1213207085L, 
[16:18:47.981]                     -978295337L, 340143136L, 485429630L, -568148149L, 
[16:18:47.981]                     1257440589L, 930106234L, -883274312L, -1632538783L, 
[16:18:47.981]                     894748435L, -1592959180L, -596177598L, 120963415L, 
[16:18:47.981]                     -1174532959L, -561474202L, 1438545764L, 1429911189L, 
[16:18:47.981]                     1075965887L, 367866712L, -892333706L, -485158013L, 
[16:18:47.981]                     -682634811L, 963344098L, 2110199632L, 1990767225L, 
[16:18:47.981]                     1348335019L, 269581084L, -2040640438L, 1453561919L, 
[16:18:47.981]                     853952649L, 1195494558L, 1614051660L, 2040242461L, 
[16:18:47.981]                     -1604604761L, 1421229008L, -1268333714L, 
[16:18:47.981]                     174113307L, 2044969853L, 190112106L, -998776824L, 
[16:18:47.981]                     -2070476623L, -2099222749L, 1141171236L, 
[16:18:47.981]                     -146426158L, -1797385433L, -1129376399L, 
[16:18:47.981]                     -1496589386L, -419561644L, -613549595L, 1243456495L, 
[16:18:47.981]                     451212072L, 1923543942L, 1146113971L, 93579029L, 
[16:18:47.981]                     -397504142L, 597218752L, 459048489L, 1447221915L, 
[16:18:47.981]                     -272948372L, -373834886L, 934888623L, -2099351623L, 
[16:18:47.981]                     -1672042034L, 193924380L, -704518003L, 781993207L, 
[16:18:47.981]                     -258875392L, -1853783458L, 1315003691L, -41214419L, 
[16:18:47.981]                     -59447654L, 1203745368L, 426003905L, 452670067L, 
[16:18:47.981]                     -1092079724L, -1765622238L, -1882554057L, 
[16:18:47.981]                     1278087169L, -1994822394L, -124954300L, 1994460277L, 
[16:18:47.981]                     1816829407L, -1568282312L, 1563616022L, 1255996195L, 
[16:18:47.981]                     1702121701L, 1784032514L, 1842995056L, 748060441L, 
[16:18:47.981]                     1432229643L, -1905232900L, 2016890922L, 1403944031L, 
[16:18:47.981]                     351712233L, 1338932478L, -1359366932L, -803018691L, 
[16:18:47.981]                     -1551885305L, 248629232L, 1839395726L, 1411789243L, 
[16:18:47.981]                     840085405L, -1849000630L, -669518488L, -1453417647L, 
[16:18:47.981]                     -1527179197L, -377159356L, 1674525170L, -313742393L, 
[16:18:47.981]                     865377681L, -1127426242L), envir = base::globalenv(), 
[16:18:47.981]                       inherits = FALSE)
[16:18:47.981]                     NULL
[16:18:47.981]                   }
[16:18:47.981]                   options(future.plan = NULL)
[16:18:47.981]                   if (is.na(NA_character_)) 
[16:18:47.981]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:18:47.981]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:18:47.981]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:18:47.981]                     .init = FALSE)
[16:18:47.981]                 }
[16:18:47.981]             }
[16:18:47.981]         }
[16:18:47.981]     })
[16:18:47.981]     if (TRUE) {
[16:18:47.981]         base::sink(type = "output", split = FALSE)
[16:18:47.981]         if (TRUE) {
[16:18:47.981]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:18:47.981]         }
[16:18:47.981]         else {
[16:18:47.981]             ...future.result["stdout"] <- base::list(NULL)
[16:18:47.981]         }
[16:18:47.981]         base::close(...future.stdout)
[16:18:47.981]         ...future.stdout <- NULL
[16:18:47.981]     }
[16:18:47.981]     ...future.result$conditions <- ...future.conditions
[16:18:47.981]     ...future.result$finished <- base::Sys.time()
[16:18:47.981]     ...future.result
[16:18:47.981] }
[16:18:47.984] assign_globals() ...
[16:18:47.984] List of 7
[16:18:47.984]  $ ...future.FUN            :function (...)  
[16:18:47.984]  $ foo                      :function (x = 1, y = 2)  
[16:18:47.984]  $ x                        : num 3
[16:18:47.984]  $ future.call.arguments    : list()
[16:18:47.984]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:47.984]  $ ...future.elements_ii    :List of 5
[16:18:47.984]   ..$ : int 0
[16:18:47.984]   ..$ : int 0
[16:18:47.984]   ..$ : int 0
[16:18:47.984]   ..$ : int 0
[16:18:47.984]   ..$ : int 0
[16:18:47.984]  $ ...future.seeds_ii       :List of 5
[16:18:47.984]   ..$ : int [1:7] 10407 2118672648 973015440 1612380474 -529784560 -1301423278 1609721430
[16:18:47.984]   ..$ : int [1:7] 10407 -919798402 -1810630142 -850731864 -613657701 1060945587 1656143537
[16:18:47.984]   ..$ : int [1:7] 10407 1666123668 -918032954 1563303830 744861469 2009520167 369843810
[16:18:47.984]   ..$ : int [1:7] 10407 1310441948 2080683693 652639441 1795850730 1953532141 354730309
[16:18:47.984]   ..$ : int [1:7] 10407 -346794781 -526954742 61882141 1694204077 -404066420 2102686045
[16:18:47.984]  $ ...future.globals.maxSize: NULL
[16:18:47.984]  - attr(*, "where")=List of 7
[16:18:47.984]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:18:47.984]   ..$ foo                      :<environment: R_EmptyEnv> 
[16:18:47.984]   ..$ x                        :<environment: R_EmptyEnv> 
[16:18:47.984]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:18:47.984]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:18:47.984]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:18:47.984]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:18:47.984]  - attr(*, "resolved")= logi FALSE
[16:18:47.984]  - attr(*, "total_size")= num 2200
[16:18:47.984]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:47.984]  - attr(*, "already-done")= logi TRUE
[16:18:47.994] - reassign environment for ‘...future.FUN’
[16:18:47.994] - copied ‘...future.FUN’ to environment
[16:18:47.995] - reassign environment for ‘foo’
[16:18:47.995] - copied ‘foo’ to environment
[16:18:47.995] - copied ‘x’ to environment
[16:18:47.995] - copied ‘future.call.arguments’ to environment
[16:18:47.995] - copied ‘...future.elements_ii’ to environment
[16:18:47.995] - copied ‘...future.seeds_ii’ to environment
[16:18:47.995] - copied ‘...future.globals.maxSize’ to environment
[16:18:47.995] assign_globals() ... done
[16:18:47.995] plan(): Setting new future strategy stack:
[16:18:47.996] List of future strategies:
[16:18:47.996] 1. sequential:
[16:18:47.996]    - args: function (..., envir = parent.frame())
[16:18:47.996]    - tweaked: FALSE
[16:18:47.996]    - call: NULL
[16:18:47.996] plan(): nbrOfWorkers() = 1
[16:18:47.997] plan(): Setting new future strategy stack:
[16:18:47.997] List of future strategies:
[16:18:47.997] 1. sequential:
[16:18:47.997]    - args: function (..., envir = parent.frame())
[16:18:47.997]    - tweaked: FALSE
[16:18:47.997]    - call: plan(strategy)
[16:18:47.997] plan(): nbrOfWorkers() = 1
[16:18:47.997] SequentialFuture started (and completed)
[16:18:47.998] - Launch lazy future ... done
[16:18:47.998] run() for ‘SequentialFuture’ ... done
[16:18:47.998] Created future:
[16:18:47.998] SequentialFuture:
[16:18:47.998] Label: ‘future_replicate-1’
[16:18:47.998] Expression:
[16:18:47.998] {
[16:18:47.998]     do.call(function(...) {
[16:18:47.998]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:47.998]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:47.998]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:47.998]             on.exit(options(oopts), add = TRUE)
[16:18:47.998]         }
[16:18:47.998]         {
[16:18:47.998]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:47.998]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:47.998]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:47.998]                   envir = globalenv(), inherits = FALSE)
[16:18:47.998]                 ...future.FUN(...future.X_jj, ...)
[16:18:47.998]             })
[16:18:47.998]         }
[16:18:47.998]     }, args = future.call.arguments)
[16:18:47.998] }
[16:18:47.998] Lazy evaluation: FALSE
[16:18:47.998] Asynchronous evaluation: FALSE
[16:18:47.998] Local evaluation: TRUE
[16:18:47.998] Environment: 0x55e79f519000
[16:18:47.998] Capture standard output: TRUE
[16:18:47.998] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:18:47.998] Globals: 7 objects totaling 2.81 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 280 bytes, ...)
[16:18:47.998] Packages: <none>
[16:18:47.998] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:18:47.998] Resolved: TRUE
[16:18:47.998] Value: 320 bytes of class ‘list’
[16:18:47.998] Early signaling: FALSE
[16:18:47.998] Owner process: 20271db5-d788-b537-4432-0a26f2d2d030
[16:18:47.998] Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:18:47.999] Chunk #1 of 1 ... DONE
[16:18:47.999] Launching 1 futures (chunks) ... DONE
[16:18:47.999] Resolving 1 futures (chunks) ...
[16:18:47.999] resolve() on list ...
[16:18:47.999]  recursive: 0
[16:18:48.000]  length: 1
[16:18:48.000] 
[16:18:48.000] resolved() for ‘SequentialFuture’ ...
[16:18:48.000] - state: ‘finished’
[16:18:48.000] - run: TRUE
[16:18:48.000] - result: ‘FutureResult’
[16:18:48.000] resolved() for ‘SequentialFuture’ ... done
[16:18:48.000] Future #1
[16:18:48.000] signalConditionsASAP(SequentialFuture, pos=1) ...
[16:18:48.000] - nx: 1
[16:18:48.001] - relay: TRUE
[16:18:48.001] - stdout: TRUE
[16:18:48.001] - signal: TRUE
[16:18:48.001] - resignal: FALSE
[16:18:48.001] - force: TRUE
[16:18:48.001] - relayed: [n=1] FALSE
[16:18:48.001] - queued futures: [n=1] FALSE
[16:18:48.001]  - until=1
[16:18:48.001]  - relaying element #1
[16:18:48.001] - relayed: [n=1] TRUE
[16:18:48.002] - queued futures: [n=1] TRUE
[16:18:48.002] signalConditionsASAP(SequentialFuture, pos=1) ... done
[16:18:48.002]  length: 0 (resolved future 1)
[16:18:48.002] Relaying remaining futures
[16:18:48.002] signalConditionsASAP(NULL, pos=0) ...
[16:18:48.002] - nx: 1
[16:18:48.002] - relay: TRUE
[16:18:48.002] - stdout: TRUE
[16:18:48.002] - signal: TRUE
[16:18:48.002] - resignal: FALSE
[16:18:48.002] - force: TRUE
[16:18:48.003] - relayed: [n=1] TRUE
[16:18:48.003] - queued futures: [n=1] TRUE
 - flush all
[16:18:48.003] - relayed: [n=1] TRUE
[16:18:48.003] - queued futures: [n=1] TRUE
[16:18:48.003] signalConditionsASAP(NULL, pos=0) ... done
[16:18:48.003] resolve() on list ... DONE
[16:18:48.003]  - Number of value chunks collected: 1
[16:18:48.003] Resolving 1 futures (chunks) ... DONE
[16:18:48.003] Reducing values from 1 chunks ...
[16:18:48.003]  - Number of values collected after concatenation: 5
[16:18:48.003]  - Number of values expected: 5
[16:18:48.004] Reducing values from 1 chunks ... DONE
[16:18:48.004] future_lapply() ... DONE
[16:18:48.004] plan(): Setting new future strategy stack:
[16:18:48.004] List of future strategies:
[16:18:48.004] 1. sequential:
[16:18:48.004]    - args: function (..., envir = parent.frame())
[16:18:48.004]    - tweaked: FALSE
[16:18:48.004]    - call: plan(sequential)
[16:18:48.005] plan(): nbrOfWorkers() = 1
*** strategy = ‘sequential’ ... done
*** strategy = ‘multicore’ ...
[16:18:48.005] plan(): Setting new future strategy stack:
[16:18:48.005] List of future strategies:
[16:18:48.005] 1. multicore:
[16:18:48.005]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:18:48.005]    - tweaked: FALSE
[16:18:48.005]    - call: plan(strategy)
[16:18:48.009] plan(): nbrOfWorkers() = 2
[16:18:48.010] future_lapply() ...
[16:18:48.010] Generating random seeds ...
[16:18:48.010] Generating random seed streams for 5 elements ...
[16:18:48.011] Generating random seed streams for 5 elements ... DONE
[16:18:48.011] Generating random seeds ... DONE
[16:18:48.011] Will set RNG state on exit: 10403, 17, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:18:48.018] Number of chunks: 2
[16:18:48.018] getGlobalsAndPackagesXApply() ...
[16:18:48.018]  - future.globals: TRUE
[16:18:48.019] getGlobalsAndPackages() ...
[16:18:48.019] Searching for globals...
[16:18:48.020] - globals found: [2] ‘FUN’, ‘sample’
[16:18:48.020] Searching for globals ... DONE
[16:18:48.020] Resolving globals: FALSE
[16:18:48.020] The total size of the 1 globals is 616 bytes (616 bytes)
[16:18:48.021] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:18:48.021] - globals: [1] ‘FUN’
[16:18:48.021] 
[16:18:48.021] getGlobalsAndPackages() ... DONE
[16:18:48.021]  - globals found/used: [n=1] ‘FUN’
[16:18:48.021]  - needed namespaces: [n=0] 
[16:18:48.021] Finding globals ... DONE
[16:18:48.021]  - use_args: TRUE
[16:18:48.022]  - Getting '...' globals ...
[16:18:48.022] resolve() on list ...
[16:18:48.022]  recursive: 0
[16:18:48.022]  length: 1
[16:18:48.022]  elements: ‘...’
[16:18:48.022]  length: 0 (resolved future 1)
[16:18:48.022] resolve() on list ... DONE
[16:18:48.022]    - '...' content: [n=0] 
[16:18:48.023] List of 1
[16:18:48.023]  $ ...: list()
[16:18:48.023]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:48.023]  - attr(*, "where")=List of 1
[16:18:48.023]   ..$ ...:<environment: 0x55e7a0c106a8> 
[16:18:48.023]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:48.023]  - attr(*, "resolved")= logi TRUE
[16:18:48.023]  - attr(*, "total_size")= num NA
[16:18:48.025]  - Getting '...' globals ... DONE
[16:18:48.025] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:18:48.026] List of 2
[16:18:48.026]  $ ...future.FUN:function (...)  
[16:18:48.026]  $ ...          : list()
[16:18:48.026]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:48.026]  - attr(*, "where")=List of 2
[16:18:48.026]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:18:48.026]   ..$ ...          :<environment: 0x55e7a0c106a8> 
[16:18:48.026]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:48.026]  - attr(*, "resolved")= logi FALSE
[16:18:48.026]  - attr(*, "total_size")= num 616
[16:18:48.028] Packages to be attached in all futures: [n=0] 
[16:18:48.028] getGlobalsAndPackagesXApply() ... DONE
[16:18:48.028] Number of futures (= number of chunks): 2
[16:18:48.029] Launching 2 futures (chunks) ...
[16:18:48.029] Chunk #1 of 2 ...
[16:18:48.029]  - Finding globals in 'X' for chunk #1 ...
[16:18:48.029] getGlobalsAndPackages() ...
[16:18:48.029] Searching for globals...
[16:18:48.029] 
[16:18:48.029] Searching for globals ... DONE
[16:18:48.029] - globals: [0] <none>
[16:18:48.030] getGlobalsAndPackages() ... DONE
[16:18:48.030]    + additional globals found: [n=0] 
[16:18:48.030]    + additional namespaces needed: [n=0] 
[16:18:48.030]  - Finding globals in 'X' for chunk #1 ... DONE
[16:18:48.030]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:18:48.030]  - seeds: [2] <seeds>
[16:18:48.030]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:48.030] getGlobalsAndPackages() ...
[16:18:48.030] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:48.030] Resolving globals: FALSE
[16:18:48.031] Tweak future expression to call with '...' arguments ...
[16:18:48.031] {
[16:18:48.031]     do.call(function(...) {
[16:18:48.031]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:48.031]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:48.031]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:48.031]             on.exit(options(oopts), add = TRUE)
[16:18:48.031]         }
[16:18:48.031]         {
[16:18:48.031]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:48.031]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:48.031]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:48.031]                   envir = globalenv(), inherits = FALSE)
[16:18:48.031]                 ...future.FUN(...future.X_jj, ...)
[16:18:48.031]             })
[16:18:48.031]         }
[16:18:48.031]     }, args = future.call.arguments)
[16:18:48.031] }
[16:18:48.031] Tweak future expression to call with '...' arguments ... DONE
[16:18:48.031] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:48.031] 
[16:18:48.032] getGlobalsAndPackages() ... DONE
[16:18:48.032] run() for ‘Future’ ...
[16:18:48.032] - state: ‘created’
[16:18:48.032] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:18:48.036] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:48.036] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:18:48.036]   - Field: ‘label’
[16:18:48.036]   - Field: ‘local’
[16:18:48.037]   - Field: ‘owner’
[16:18:48.037]   - Field: ‘envir’
[16:18:48.037]   - Field: ‘workers’
[16:18:48.037]   - Field: ‘packages’
[16:18:48.037]   - Field: ‘gc’
[16:18:48.037]   - Field: ‘job’
[16:18:48.037]   - Field: ‘conditions’
[16:18:48.037]   - Field: ‘expr’
[16:18:48.037]   - Field: ‘uuid’
[16:18:48.037]   - Field: ‘seed’
[16:18:48.037]   - Field: ‘version’
[16:18:48.038]   - Field: ‘result’
[16:18:48.038]   - Field: ‘asynchronous’
[16:18:48.038]   - Field: ‘calls’
[16:18:48.038]   - Field: ‘globals’
[16:18:48.038]   - Field: ‘stdout’
[16:18:48.038]   - Field: ‘earlySignal’
[16:18:48.038]   - Field: ‘lazy’
[16:18:48.038]   - Field: ‘state’
[16:18:48.038] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:18:48.038] - Launch lazy future ...
[16:18:48.040] Packages needed by the future expression (n = 0): <none>
[16:18:48.040] Packages needed by future strategies (n = 0): <none>
[16:18:48.040] {
[16:18:48.040]     {
[16:18:48.040]         {
[16:18:48.040]             ...future.startTime <- base::Sys.time()
[16:18:48.040]             {
[16:18:48.040]                 {
[16:18:48.040]                   {
[16:18:48.040]                     {
[16:18:48.040]                       base::local({
[16:18:48.040]                         has_future <- base::requireNamespace("future", 
[16:18:48.040]                           quietly = TRUE)
[16:18:48.040]                         if (has_future) {
[16:18:48.040]                           ns <- base::getNamespace("future")
[16:18:48.040]                           version <- ns[[".package"]][["version"]]
[16:18:48.040]                           if (is.null(version)) 
[16:18:48.040]                             version <- utils::packageVersion("future")
[16:18:48.040]                         }
[16:18:48.040]                         else {
[16:18:48.040]                           version <- NULL
[16:18:48.040]                         }
[16:18:48.040]                         if (!has_future || version < "1.8.0") {
[16:18:48.040]                           info <- base::c(r_version = base::gsub("R version ", 
[16:18:48.040]                             "", base::R.version$version.string), 
[16:18:48.040]                             platform = base::sprintf("%s (%s-bit)", 
[16:18:48.040]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:18:48.040]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:18:48.040]                               "release", "version")], collapse = " "), 
[16:18:48.040]                             hostname = base::Sys.info()[["nodename"]])
[16:18:48.040]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:18:48.040]                             info)
[16:18:48.040]                           info <- base::paste(info, collapse = "; ")
[16:18:48.040]                           if (!has_future) {
[16:18:48.040]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:18:48.040]                               info)
[16:18:48.040]                           }
[16:18:48.040]                           else {
[16:18:48.040]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:18:48.040]                               info, version)
[16:18:48.040]                           }
[16:18:48.040]                           base::stop(msg)
[16:18:48.040]                         }
[16:18:48.040]                       })
[16:18:48.040]                     }
[16:18:48.040]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:18:48.040]                     base::options(mc.cores = 1L)
[16:18:48.040]                   }
[16:18:48.040]                   ...future.strategy.old <- future::plan("list")
[16:18:48.040]                   options(future.plan = NULL)
[16:18:48.040]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:18:48.040]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:18:48.040]                 }
[16:18:48.040]                 ...future.workdir <- getwd()
[16:18:48.040]             }
[16:18:48.040]             ...future.oldOptions <- base::as.list(base::.Options)
[16:18:48.040]             ...future.oldEnvVars <- base::Sys.getenv()
[16:18:48.040]         }
[16:18:48.040]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:18:48.040]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:18:48.040]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:18:48.040]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:18:48.040]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:18:48.040]             future.stdout.windows.reencode = NULL, width = 80L)
[16:18:48.040]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:18:48.040]             base::names(...future.oldOptions))
[16:18:48.040]     }
[16:18:48.040]     if (FALSE) {
[16:18:48.040]     }
[16:18:48.040]     else {
[16:18:48.040]         if (TRUE) {
[16:18:48.040]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:18:48.040]                 open = "w")
[16:18:48.040]         }
[16:18:48.040]         else {
[16:18:48.040]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:18:48.040]                 windows = "NUL", "/dev/null"), open = "w")
[16:18:48.040]         }
[16:18:48.040]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:18:48.040]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:18:48.040]             base::sink(type = "output", split = FALSE)
[16:18:48.040]             base::close(...future.stdout)
[16:18:48.040]         }, add = TRUE)
[16:18:48.040]     }
[16:18:48.040]     ...future.frame <- base::sys.nframe()
[16:18:48.040]     ...future.conditions <- base::list()
[16:18:48.040]     ...future.rng <- base::globalenv()$.Random.seed
[16:18:48.040]     if (FALSE) {
[16:18:48.040]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:18:48.040]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:18:48.040]     }
[16:18:48.040]     ...future.result <- base::tryCatch({
[16:18:48.040]         base::withCallingHandlers({
[16:18:48.040]             ...future.value <- base::withVisible(base::local({
[16:18:48.040]                 withCallingHandlers({
[16:18:48.040]                   {
[16:18:48.040]                     do.call(function(...) {
[16:18:48.040]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:48.040]                       if (!identical(...future.globals.maxSize.org, 
[16:18:48.040]                         ...future.globals.maxSize)) {
[16:18:48.040]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:48.040]                         on.exit(options(oopts), add = TRUE)
[16:18:48.040]                       }
[16:18:48.040]                       {
[16:18:48.040]                         lapply(seq_along(...future.elements_ii), 
[16:18:48.040]                           FUN = function(jj) {
[16:18:48.040]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:48.040]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:48.040]                               envir = globalenv(), inherits = FALSE)
[16:18:48.040]                             ...future.FUN(...future.X_jj, ...)
[16:18:48.040]                           })
[16:18:48.040]                       }
[16:18:48.040]                     }, args = future.call.arguments)
[16:18:48.040]                   }
[16:18:48.040]                 }, immediateCondition = function(cond) {
[16:18:48.040]                   save_rds <- function (object, pathname, ...) 
[16:18:48.040]                   {
[16:18:48.040]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:18:48.040]                     if (file_test("-f", pathname_tmp)) {
[16:18:48.040]                       fi_tmp <- file.info(pathname_tmp)
[16:18:48.040]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:18:48.040]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:18:48.040]                         fi_tmp[["mtime"]])
[16:18:48.040]                     }
[16:18:48.040]                     tryCatch({
[16:18:48.040]                       saveRDS(object, file = pathname_tmp, ...)
[16:18:48.040]                     }, error = function(ex) {
[16:18:48.040]                       msg <- conditionMessage(ex)
[16:18:48.040]                       fi_tmp <- file.info(pathname_tmp)
[16:18:48.040]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:18:48.040]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:18:48.040]                         fi_tmp[["mtime"]], msg)
[16:18:48.040]                       ex$message <- msg
[16:18:48.040]                       stop(ex)
[16:18:48.040]                     })
[16:18:48.040]                     stopifnot(file_test("-f", pathname_tmp))
[16:18:48.040]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:18:48.040]                     if (!res || file_test("-f", pathname_tmp)) {
[16:18:48.040]                       fi_tmp <- file.info(pathname_tmp)
[16:18:48.040]                       fi <- file.info(pathname)
[16:18:48.040]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:18:48.040]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:18:48.040]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:18:48.040]                         fi[["size"]], fi[["mtime"]])
[16:18:48.040]                       stop(msg)
[16:18:48.040]                     }
[16:18:48.040]                     invisible(pathname)
[16:18:48.040]                   }
[16:18:48.040]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:18:48.040]                     rootPath = tempdir()) 
[16:18:48.040]                   {
[16:18:48.040]                     obj <- list(time = Sys.time(), condition = cond)
[16:18:48.040]                     file <- tempfile(pattern = class(cond)[1], 
[16:18:48.040]                       tmpdir = path, fileext = ".rds")
[16:18:48.040]                     save_rds(obj, file)
[16:18:48.040]                   }
[16:18:48.040]                   saveImmediateCondition(cond, path = "/tmp/RtmpZpTIv7/.future/immediateConditions")
[16:18:48.040]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:48.040]                   {
[16:18:48.040]                     inherits <- base::inherits
[16:18:48.040]                     invokeRestart <- base::invokeRestart
[16:18:48.040]                     is.null <- base::is.null
[16:18:48.040]                     muffled <- FALSE
[16:18:48.040]                     if (inherits(cond, "message")) {
[16:18:48.040]                       muffled <- grepl(pattern, "muffleMessage")
[16:18:48.040]                       if (muffled) 
[16:18:48.040]                         invokeRestart("muffleMessage")
[16:18:48.040]                     }
[16:18:48.040]                     else if (inherits(cond, "warning")) {
[16:18:48.040]                       muffled <- grepl(pattern, "muffleWarning")
[16:18:48.040]                       if (muffled) 
[16:18:48.040]                         invokeRestart("muffleWarning")
[16:18:48.040]                     }
[16:18:48.040]                     else if (inherits(cond, "condition")) {
[16:18:48.040]                       if (!is.null(pattern)) {
[16:18:48.040]                         computeRestarts <- base::computeRestarts
[16:18:48.040]                         grepl <- base::grepl
[16:18:48.040]                         restarts <- computeRestarts(cond)
[16:18:48.040]                         for (restart in restarts) {
[16:18:48.040]                           name <- restart$name
[16:18:48.040]                           if (is.null(name)) 
[16:18:48.040]                             next
[16:18:48.040]                           if (!grepl(pattern, name)) 
[16:18:48.040]                             next
[16:18:48.040]                           invokeRestart(restart)
[16:18:48.040]                           muffled <- TRUE
[16:18:48.040]                           break
[16:18:48.040]                         }
[16:18:48.040]                       }
[16:18:48.040]                     }
[16:18:48.040]                     invisible(muffled)
[16:18:48.040]                   }
[16:18:48.040]                   muffleCondition(cond)
[16:18:48.040]                 })
[16:18:48.040]             }))
[16:18:48.040]             future::FutureResult(value = ...future.value$value, 
[16:18:48.040]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:48.040]                   ...future.rng), globalenv = if (FALSE) 
[16:18:48.040]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:18:48.040]                     ...future.globalenv.names))
[16:18:48.040]                 else NULL, started = ...future.startTime, version = "1.8")
[16:18:48.040]         }, condition = base::local({
[16:18:48.040]             c <- base::c
[16:18:48.040]             inherits <- base::inherits
[16:18:48.040]             invokeRestart <- base::invokeRestart
[16:18:48.040]             length <- base::length
[16:18:48.040]             list <- base::list
[16:18:48.040]             seq.int <- base::seq.int
[16:18:48.040]             signalCondition <- base::signalCondition
[16:18:48.040]             sys.calls <- base::sys.calls
[16:18:48.040]             `[[` <- base::`[[`
[16:18:48.040]             `+` <- base::`+`
[16:18:48.040]             `<<-` <- base::`<<-`
[16:18:48.040]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:18:48.040]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:18:48.040]                   3L)]
[16:18:48.040]             }
[16:18:48.040]             function(cond) {
[16:18:48.040]                 is_error <- inherits(cond, "error")
[16:18:48.040]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:18:48.040]                   NULL)
[16:18:48.040]                 if (is_error) {
[16:18:48.040]                   sessionInformation <- function() {
[16:18:48.040]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:18:48.040]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:18:48.040]                       search = base::search(), system = base::Sys.info())
[16:18:48.040]                   }
[16:18:48.040]                   ...future.conditions[[length(...future.conditions) + 
[16:18:48.040]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:18:48.040]                     cond$call), session = sessionInformation(), 
[16:18:48.040]                     timestamp = base::Sys.time(), signaled = 0L)
[16:18:48.040]                   signalCondition(cond)
[16:18:48.040]                 }
[16:18:48.040]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:18:48.040]                 "immediateCondition"))) {
[16:18:48.040]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:18:48.040]                   ...future.conditions[[length(...future.conditions) + 
[16:18:48.040]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:18:48.040]                   if (TRUE && !signal) {
[16:18:48.040]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:48.040]                     {
[16:18:48.040]                       inherits <- base::inherits
[16:18:48.040]                       invokeRestart <- base::invokeRestart
[16:18:48.040]                       is.null <- base::is.null
[16:18:48.040]                       muffled <- FALSE
[16:18:48.040]                       if (inherits(cond, "message")) {
[16:18:48.040]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:48.040]                         if (muffled) 
[16:18:48.040]                           invokeRestart("muffleMessage")
[16:18:48.040]                       }
[16:18:48.040]                       else if (inherits(cond, "warning")) {
[16:18:48.040]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:48.040]                         if (muffled) 
[16:18:48.040]                           invokeRestart("muffleWarning")
[16:18:48.040]                       }
[16:18:48.040]                       else if (inherits(cond, "condition")) {
[16:18:48.040]                         if (!is.null(pattern)) {
[16:18:48.040]                           computeRestarts <- base::computeRestarts
[16:18:48.040]                           grepl <- base::grepl
[16:18:48.040]                           restarts <- computeRestarts(cond)
[16:18:48.040]                           for (restart in restarts) {
[16:18:48.040]                             name <- restart$name
[16:18:48.040]                             if (is.null(name)) 
[16:18:48.040]                               next
[16:18:48.040]                             if (!grepl(pattern, name)) 
[16:18:48.040]                               next
[16:18:48.040]                             invokeRestart(restart)
[16:18:48.040]                             muffled <- TRUE
[16:18:48.040]                             break
[16:18:48.040]                           }
[16:18:48.040]                         }
[16:18:48.040]                       }
[16:18:48.040]                       invisible(muffled)
[16:18:48.040]                     }
[16:18:48.040]                     muffleCondition(cond, pattern = "^muffle")
[16:18:48.040]                   }
[16:18:48.040]                 }
[16:18:48.040]                 else {
[16:18:48.040]                   if (TRUE) {
[16:18:48.040]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:48.040]                     {
[16:18:48.040]                       inherits <- base::inherits
[16:18:48.040]                       invokeRestart <- base::invokeRestart
[16:18:48.040]                       is.null <- base::is.null
[16:18:48.040]                       muffled <- FALSE
[16:18:48.040]                       if (inherits(cond, "message")) {
[16:18:48.040]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:48.040]                         if (muffled) 
[16:18:48.040]                           invokeRestart("muffleMessage")
[16:18:48.040]                       }
[16:18:48.040]                       else if (inherits(cond, "warning")) {
[16:18:48.040]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:48.040]                         if (muffled) 
[16:18:48.040]                           invokeRestart("muffleWarning")
[16:18:48.040]                       }
[16:18:48.040]                       else if (inherits(cond, "condition")) {
[16:18:48.040]                         if (!is.null(pattern)) {
[16:18:48.040]                           computeRestarts <- base::computeRestarts
[16:18:48.040]                           grepl <- base::grepl
[16:18:48.040]                           restarts <- computeRestarts(cond)
[16:18:48.040]                           for (restart in restarts) {
[16:18:48.040]                             name <- restart$name
[16:18:48.040]                             if (is.null(name)) 
[16:18:48.040]                               next
[16:18:48.040]                             if (!grepl(pattern, name)) 
[16:18:48.040]                               next
[16:18:48.040]                             invokeRestart(restart)
[16:18:48.040]                             muffled <- TRUE
[16:18:48.040]                             break
[16:18:48.040]                           }
[16:18:48.040]                         }
[16:18:48.040]                       }
[16:18:48.040]                       invisible(muffled)
[16:18:48.040]                     }
[16:18:48.040]                     muffleCondition(cond, pattern = "^muffle")
[16:18:48.040]                   }
[16:18:48.040]                 }
[16:18:48.040]             }
[16:18:48.040]         }))
[16:18:48.040]     }, error = function(ex) {
[16:18:48.040]         base::structure(base::list(value = NULL, visible = NULL, 
[16:18:48.040]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:48.040]                 ...future.rng), started = ...future.startTime, 
[16:18:48.040]             finished = Sys.time(), session_uuid = NA_character_, 
[16:18:48.040]             version = "1.8"), class = "FutureResult")
[16:18:48.040]     }, finally = {
[16:18:48.040]         if (!identical(...future.workdir, getwd())) 
[16:18:48.040]             setwd(...future.workdir)
[16:18:48.040]         {
[16:18:48.040]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:18:48.040]                 ...future.oldOptions$nwarnings <- NULL
[16:18:48.040]             }
[16:18:48.040]             base::options(...future.oldOptions)
[16:18:48.040]             if (.Platform$OS.type == "windows") {
[16:18:48.040]                 old_names <- names(...future.oldEnvVars)
[16:18:48.040]                 envs <- base::Sys.getenv()
[16:18:48.040]                 names <- names(envs)
[16:18:48.040]                 common <- intersect(names, old_names)
[16:18:48.040]                 added <- setdiff(names, old_names)
[16:18:48.040]                 removed <- setdiff(old_names, names)
[16:18:48.040]                 changed <- common[...future.oldEnvVars[common] != 
[16:18:48.040]                   envs[common]]
[16:18:48.040]                 NAMES <- toupper(changed)
[16:18:48.040]                 args <- list()
[16:18:48.040]                 for (kk in seq_along(NAMES)) {
[16:18:48.040]                   name <- changed[[kk]]
[16:18:48.040]                   NAME <- NAMES[[kk]]
[16:18:48.040]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:48.040]                     next
[16:18:48.040]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:48.040]                 }
[16:18:48.040]                 NAMES <- toupper(added)
[16:18:48.040]                 for (kk in seq_along(NAMES)) {
[16:18:48.040]                   name <- added[[kk]]
[16:18:48.040]                   NAME <- NAMES[[kk]]
[16:18:48.040]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:48.040]                     next
[16:18:48.040]                   args[[name]] <- ""
[16:18:48.040]                 }
[16:18:48.040]                 NAMES <- toupper(removed)
[16:18:48.040]                 for (kk in seq_along(NAMES)) {
[16:18:48.040]                   name <- removed[[kk]]
[16:18:48.040]                   NAME <- NAMES[[kk]]
[16:18:48.040]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:48.040]                     next
[16:18:48.040]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:48.040]                 }
[16:18:48.040]                 if (length(args) > 0) 
[16:18:48.040]                   base::do.call(base::Sys.setenv, args = args)
[16:18:48.040]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:18:48.040]             }
[16:18:48.040]             else {
[16:18:48.040]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:18:48.040]             }
[16:18:48.040]             {
[16:18:48.040]                 if (base::length(...future.futureOptionsAdded) > 
[16:18:48.040]                   0L) {
[16:18:48.040]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:18:48.040]                   base::names(opts) <- ...future.futureOptionsAdded
[16:18:48.040]                   base::options(opts)
[16:18:48.040]                 }
[16:18:48.040]                 {
[16:18:48.040]                   {
[16:18:48.040]                     base::options(mc.cores = ...future.mc.cores.old)
[16:18:48.040]                     NULL
[16:18:48.040]                   }
[16:18:48.040]                   options(future.plan = NULL)
[16:18:48.040]                   if (is.na(NA_character_)) 
[16:18:48.040]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:18:48.040]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:18:48.040]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:18:48.040]                     .init = FALSE)
[16:18:48.040]                 }
[16:18:48.040]             }
[16:18:48.040]         }
[16:18:48.040]     })
[16:18:48.040]     if (TRUE) {
[16:18:48.040]         base::sink(type = "output", split = FALSE)
[16:18:48.040]         if (TRUE) {
[16:18:48.040]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:18:48.040]         }
[16:18:48.040]         else {
[16:18:48.040]             ...future.result["stdout"] <- base::list(NULL)
[16:18:48.040]         }
[16:18:48.040]         base::close(...future.stdout)
[16:18:48.040]         ...future.stdout <- NULL
[16:18:48.040]     }
[16:18:48.040]     ...future.result$conditions <- ...future.conditions
[16:18:48.040]     ...future.result$finished <- base::Sys.time()
[16:18:48.040]     ...future.result
[16:18:48.040] }
[16:18:48.043] assign_globals() ...
[16:18:48.043] List of 5
[16:18:48.043]  $ ...future.FUN            :function (...)  
[16:18:48.043]  $ future.call.arguments    : list()
[16:18:48.043]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:48.043]  $ ...future.elements_ii    :List of 2
[16:18:48.043]   ..$ : int 0
[16:18:48.043]   ..$ : int 0
[16:18:48.043]  $ ...future.seeds_ii       :List of 2
[16:18:48.043]   ..$ : int [1:7] 10407 800596211 191202253 -1245543361 -1911991084 -470201595 630973807
[16:18:48.043]   ..$ : int [1:7] 10407 336362669 -1847432762 -712550016 1068830663 1731026700 1489470838
[16:18:48.043]  $ ...future.globals.maxSize: NULL
[16:18:48.043]  - attr(*, "where")=List of 5
[16:18:48.043]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:18:48.043]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:18:48.043]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:18:48.043]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:18:48.043]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:18:48.043]  - attr(*, "resolved")= logi FALSE
[16:18:48.043]  - attr(*, "total_size")= num 616
[16:18:48.043]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:48.043]  - attr(*, "already-done")= logi TRUE
[16:18:48.051] - reassign environment for ‘...future.FUN’
[16:18:48.051] - copied ‘...future.FUN’ to environment
[16:18:48.051] - copied ‘future.call.arguments’ to environment
[16:18:48.051] - copied ‘...future.elements_ii’ to environment
[16:18:48.051] - copied ‘...future.seeds_ii’ to environment
[16:18:48.051] - copied ‘...future.globals.maxSize’ to environment
[16:18:48.051] assign_globals() ... done
[16:18:48.052] requestCore(): workers = 2
[16:18:48.055] MulticoreFuture started
[16:18:48.055] - Launch lazy future ... done
[16:18:48.056] run() for ‘MulticoreFuture’ ... done
[16:18:48.056] plan(): Setting new future strategy stack:
[16:18:48.056] Created future:
[16:18:48.056] List of future strategies:
[16:18:48.056] 1. sequential:
[16:18:48.056]    - args: function (..., envir = parent.frame())
[16:18:48.056]    - tweaked: FALSE
[16:18:48.056]    - call: NULL
[16:18:48.057] plan(): nbrOfWorkers() = 1
[16:18:48.059] plan(): Setting new future strategy stack:
[16:18:48.059] List of future strategies:
[16:18:48.059] 1. multicore:
[16:18:48.059]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:18:48.059]    - tweaked: FALSE
[16:18:48.059]    - call: plan(strategy)
[16:18:48.064] plan(): nbrOfWorkers() = 2
[16:18:48.056] MulticoreFuture:
[16:18:48.056] Label: ‘future_replicate-1’
[16:18:48.056] Expression:
[16:18:48.056] {
[16:18:48.056]     do.call(function(...) {
[16:18:48.056]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:48.056]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:48.056]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:48.056]             on.exit(options(oopts), add = TRUE)
[16:18:48.056]         }
[16:18:48.056]         {
[16:18:48.056]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:48.056]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:48.056]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:48.056]                   envir = globalenv(), inherits = FALSE)
[16:18:48.056]                 ...future.FUN(...future.X_jj, ...)
[16:18:48.056]             })
[16:18:48.056]         }
[16:18:48.056]     }, args = future.call.arguments)
[16:18:48.056] }
[16:18:48.056] Lazy evaluation: FALSE
[16:18:48.056] Asynchronous evaluation: TRUE
[16:18:48.056] Local evaluation: TRUE
[16:18:48.056] Environment: R_GlobalEnv
[16:18:48.056] Capture standard output: TRUE
[16:18:48.056] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:18:48.056] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:18:48.056] Packages: <none>
[16:18:48.056] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:18:48.056] Resolved: TRUE
[16:18:48.056] Value: <not collected>
[16:18:48.056] Conditions captured: <none>
[16:18:48.056] Early signaling: FALSE
[16:18:48.056] Owner process: 20271db5-d788-b537-4432-0a26f2d2d030
[16:18:48.056] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:48.066] Chunk #1 of 2 ... DONE
[16:18:48.066] Chunk #2 of 2 ...
[16:18:48.066]  - Finding globals in 'X' for chunk #2 ...
[16:18:48.067] getGlobalsAndPackages() ...
[16:18:48.067] Searching for globals...
[16:18:48.067] 
[16:18:48.067] Searching for globals ... DONE
[16:18:48.067] - globals: [0] <none>
[16:18:48.068] getGlobalsAndPackages() ... DONE
[16:18:48.068]    + additional globals found: [n=0] 
[16:18:48.068]    + additional namespaces needed: [n=0] 
[16:18:48.068]  - Finding globals in 'X' for chunk #2 ... DONE
[16:18:48.068]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:18:48.068]  - seeds: [3] <seeds>
[16:18:48.068]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:48.069] getGlobalsAndPackages() ...
[16:18:48.069] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:48.069] Resolving globals: FALSE
[16:18:48.069] Tweak future expression to call with '...' arguments ...
[16:18:48.069] {
[16:18:48.069]     do.call(function(...) {
[16:18:48.069]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:48.069]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:48.069]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:48.069]             on.exit(options(oopts), add = TRUE)
[16:18:48.069]         }
[16:18:48.069]         {
[16:18:48.069]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:48.069]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:48.069]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:48.069]                   envir = globalenv(), inherits = FALSE)
[16:18:48.069]                 ...future.FUN(...future.X_jj, ...)
[16:18:48.069]             })
[16:18:48.069]         }
[16:18:48.069]     }, args = future.call.arguments)
[16:18:48.069] }
[16:18:48.070] Tweak future expression to call with '...' arguments ... DONE
[16:18:48.071] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:48.071] 
[16:18:48.071] getGlobalsAndPackages() ... DONE
[16:18:48.071] run() for ‘Future’ ...
[16:18:48.072] - state: ‘created’
[16:18:48.072] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:18:48.077] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:48.077] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:18:48.077]   - Field: ‘label’
[16:18:48.077]   - Field: ‘local’
[16:18:48.077]   - Field: ‘owner’
[16:18:48.077]   - Field: ‘envir’
[16:18:48.078]   - Field: ‘workers’
[16:18:48.078]   - Field: ‘packages’
[16:18:48.078]   - Field: ‘gc’
[16:18:48.078]   - Field: ‘job’
[16:18:48.078]   - Field: ‘conditions’
[16:18:48.078]   - Field: ‘expr’
[16:18:48.078]   - Field: ‘uuid’
[16:18:48.079]   - Field: ‘seed’
[16:18:48.079]   - Field: ‘version’
[16:18:48.079]   - Field: ‘result’
[16:18:48.079]   - Field: ‘asynchronous’
[16:18:48.079]   - Field: ‘calls’
[16:18:48.079]   - Field: ‘globals’
[16:18:48.079]   - Field: ‘stdout’
[16:18:48.080]   - Field: ‘earlySignal’
[16:18:48.080]   - Field: ‘lazy’
[16:18:48.080]   - Field: ‘state’
[16:18:48.080] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:18:48.080] - Launch lazy future ...
[16:18:48.081] Packages needed by the future expression (n = 0): <none>
[16:18:48.081] Packages needed by future strategies (n = 0): <none>
[16:18:48.082] {
[16:18:48.082]     {
[16:18:48.082]         {
[16:18:48.082]             ...future.startTime <- base::Sys.time()
[16:18:48.082]             {
[16:18:48.082]                 {
[16:18:48.082]                   {
[16:18:48.082]                     {
[16:18:48.082]                       base::local({
[16:18:48.082]                         has_future <- base::requireNamespace("future", 
[16:18:48.082]                           quietly = TRUE)
[16:18:48.082]                         if (has_future) {
[16:18:48.082]                           ns <- base::getNamespace("future")
[16:18:48.082]                           version <- ns[[".package"]][["version"]]
[16:18:48.082]                           if (is.null(version)) 
[16:18:48.082]                             version <- utils::packageVersion("future")
[16:18:48.082]                         }
[16:18:48.082]                         else {
[16:18:48.082]                           version <- NULL
[16:18:48.082]                         }
[16:18:48.082]                         if (!has_future || version < "1.8.0") {
[16:18:48.082]                           info <- base::c(r_version = base::gsub("R version ", 
[16:18:48.082]                             "", base::R.version$version.string), 
[16:18:48.082]                             platform = base::sprintf("%s (%s-bit)", 
[16:18:48.082]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:18:48.082]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:18:48.082]                               "release", "version")], collapse = " "), 
[16:18:48.082]                             hostname = base::Sys.info()[["nodename"]])
[16:18:48.082]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:18:48.082]                             info)
[16:18:48.082]                           info <- base::paste(info, collapse = "; ")
[16:18:48.082]                           if (!has_future) {
[16:18:48.082]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:18:48.082]                               info)
[16:18:48.082]                           }
[16:18:48.082]                           else {
[16:18:48.082]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:18:48.082]                               info, version)
[16:18:48.082]                           }
[16:18:48.082]                           base::stop(msg)
[16:18:48.082]                         }
[16:18:48.082]                       })
[16:18:48.082]                     }
[16:18:48.082]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:18:48.082]                     base::options(mc.cores = 1L)
[16:18:48.082]                   }
[16:18:48.082]                   ...future.strategy.old <- future::plan("list")
[16:18:48.082]                   options(future.plan = NULL)
[16:18:48.082]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:18:48.082]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:18:48.082]                 }
[16:18:48.082]                 ...future.workdir <- getwd()
[16:18:48.082]             }
[16:18:48.082]             ...future.oldOptions <- base::as.list(base::.Options)
[16:18:48.082]             ...future.oldEnvVars <- base::Sys.getenv()
[16:18:48.082]         }
[16:18:48.082]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:18:48.082]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:18:48.082]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:18:48.082]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:18:48.082]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:18:48.082]             future.stdout.windows.reencode = NULL, width = 80L)
[16:18:48.082]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:18:48.082]             base::names(...future.oldOptions))
[16:18:48.082]     }
[16:18:48.082]     if (FALSE) {
[16:18:48.082]     }
[16:18:48.082]     else {
[16:18:48.082]         if (TRUE) {
[16:18:48.082]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:18:48.082]                 open = "w")
[16:18:48.082]         }
[16:18:48.082]         else {
[16:18:48.082]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:18:48.082]                 windows = "NUL", "/dev/null"), open = "w")
[16:18:48.082]         }
[16:18:48.082]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:18:48.082]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:18:48.082]             base::sink(type = "output", split = FALSE)
[16:18:48.082]             base::close(...future.stdout)
[16:18:48.082]         }, add = TRUE)
[16:18:48.082]     }
[16:18:48.082]     ...future.frame <- base::sys.nframe()
[16:18:48.082]     ...future.conditions <- base::list()
[16:18:48.082]     ...future.rng <- base::globalenv()$.Random.seed
[16:18:48.082]     if (FALSE) {
[16:18:48.082]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:18:48.082]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:18:48.082]     }
[16:18:48.082]     ...future.result <- base::tryCatch({
[16:18:48.082]         base::withCallingHandlers({
[16:18:48.082]             ...future.value <- base::withVisible(base::local({
[16:18:48.082]                 withCallingHandlers({
[16:18:48.082]                   {
[16:18:48.082]                     do.call(function(...) {
[16:18:48.082]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:48.082]                       if (!identical(...future.globals.maxSize.org, 
[16:18:48.082]                         ...future.globals.maxSize)) {
[16:18:48.082]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:48.082]                         on.exit(options(oopts), add = TRUE)
[16:18:48.082]                       }
[16:18:48.082]                       {
[16:18:48.082]                         lapply(seq_along(...future.elements_ii), 
[16:18:48.082]                           FUN = function(jj) {
[16:18:48.082]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:48.082]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:48.082]                               envir = globalenv(), inherits = FALSE)
[16:18:48.082]                             ...future.FUN(...future.X_jj, ...)
[16:18:48.082]                           })
[16:18:48.082]                       }
[16:18:48.082]                     }, args = future.call.arguments)
[16:18:48.082]                   }
[16:18:48.082]                 }, immediateCondition = function(cond) {
[16:18:48.082]                   save_rds <- function (object, pathname, ...) 
[16:18:48.082]                   {
[16:18:48.082]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:18:48.082]                     if (file_test("-f", pathname_tmp)) {
[16:18:48.082]                       fi_tmp <- file.info(pathname_tmp)
[16:18:48.082]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:18:48.082]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:18:48.082]                         fi_tmp[["mtime"]])
[16:18:48.082]                     }
[16:18:48.082]                     tryCatch({
[16:18:48.082]                       saveRDS(object, file = pathname_tmp, ...)
[16:18:48.082]                     }, error = function(ex) {
[16:18:48.082]                       msg <- conditionMessage(ex)
[16:18:48.082]                       fi_tmp <- file.info(pathname_tmp)
[16:18:48.082]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:18:48.082]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:18:48.082]                         fi_tmp[["mtime"]], msg)
[16:18:48.082]                       ex$message <- msg
[16:18:48.082]                       stop(ex)
[16:18:48.082]                     })
[16:18:48.082]                     stopifnot(file_test("-f", pathname_tmp))
[16:18:48.082]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:18:48.082]                     if (!res || file_test("-f", pathname_tmp)) {
[16:18:48.082]                       fi_tmp <- file.info(pathname_tmp)
[16:18:48.082]                       fi <- file.info(pathname)
[16:18:48.082]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:18:48.082]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:18:48.082]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:18:48.082]                         fi[["size"]], fi[["mtime"]])
[16:18:48.082]                       stop(msg)
[16:18:48.082]                     }
[16:18:48.082]                     invisible(pathname)
[16:18:48.082]                   }
[16:18:48.082]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:18:48.082]                     rootPath = tempdir()) 
[16:18:48.082]                   {
[16:18:48.082]                     obj <- list(time = Sys.time(), condition = cond)
[16:18:48.082]                     file <- tempfile(pattern = class(cond)[1], 
[16:18:48.082]                       tmpdir = path, fileext = ".rds")
[16:18:48.082]                     save_rds(obj, file)
[16:18:48.082]                   }
[16:18:48.082]                   saveImmediateCondition(cond, path = "/tmp/RtmpZpTIv7/.future/immediateConditions")
[16:18:48.082]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:48.082]                   {
[16:18:48.082]                     inherits <- base::inherits
[16:18:48.082]                     invokeRestart <- base::invokeRestart
[16:18:48.082]                     is.null <- base::is.null
[16:18:48.082]                     muffled <- FALSE
[16:18:48.082]                     if (inherits(cond, "message")) {
[16:18:48.082]                       muffled <- grepl(pattern, "muffleMessage")
[16:18:48.082]                       if (muffled) 
[16:18:48.082]                         invokeRestart("muffleMessage")
[16:18:48.082]                     }
[16:18:48.082]                     else if (inherits(cond, "warning")) {
[16:18:48.082]                       muffled <- grepl(pattern, "muffleWarning")
[16:18:48.082]                       if (muffled) 
[16:18:48.082]                         invokeRestart("muffleWarning")
[16:18:48.082]                     }
[16:18:48.082]                     else if (inherits(cond, "condition")) {
[16:18:48.082]                       if (!is.null(pattern)) {
[16:18:48.082]                         computeRestarts <- base::computeRestarts
[16:18:48.082]                         grepl <- base::grepl
[16:18:48.082]                         restarts <- computeRestarts(cond)
[16:18:48.082]                         for (restart in restarts) {
[16:18:48.082]                           name <- restart$name
[16:18:48.082]                           if (is.null(name)) 
[16:18:48.082]                             next
[16:18:48.082]                           if (!grepl(pattern, name)) 
[16:18:48.082]                             next
[16:18:48.082]                           invokeRestart(restart)
[16:18:48.082]                           muffled <- TRUE
[16:18:48.082]                           break
[16:18:48.082]                         }
[16:18:48.082]                       }
[16:18:48.082]                     }
[16:18:48.082]                     invisible(muffled)
[16:18:48.082]                   }
[16:18:48.082]                   muffleCondition(cond)
[16:18:48.082]                 })
[16:18:48.082]             }))
[16:18:48.082]             future::FutureResult(value = ...future.value$value, 
[16:18:48.082]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:48.082]                   ...future.rng), globalenv = if (FALSE) 
[16:18:48.082]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:18:48.082]                     ...future.globalenv.names))
[16:18:48.082]                 else NULL, started = ...future.startTime, version = "1.8")
[16:18:48.082]         }, condition = base::local({
[16:18:48.082]             c <- base::c
[16:18:48.082]             inherits <- base::inherits
[16:18:48.082]             invokeRestart <- base::invokeRestart
[16:18:48.082]             length <- base::length
[16:18:48.082]             list <- base::list
[16:18:48.082]             seq.int <- base::seq.int
[16:18:48.082]             signalCondition <- base::signalCondition
[16:18:48.082]             sys.calls <- base::sys.calls
[16:18:48.082]             `[[` <- base::`[[`
[16:18:48.082]             `+` <- base::`+`
[16:18:48.082]             `<<-` <- base::`<<-`
[16:18:48.082]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:18:48.082]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:18:48.082]                   3L)]
[16:18:48.082]             }
[16:18:48.082]             function(cond) {
[16:18:48.082]                 is_error <- inherits(cond, "error")
[16:18:48.082]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:18:48.082]                   NULL)
[16:18:48.082]                 if (is_error) {
[16:18:48.082]                   sessionInformation <- function() {
[16:18:48.082]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:18:48.082]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:18:48.082]                       search = base::search(), system = base::Sys.info())
[16:18:48.082]                   }
[16:18:48.082]                   ...future.conditions[[length(...future.conditions) + 
[16:18:48.082]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:18:48.082]                     cond$call), session = sessionInformation(), 
[16:18:48.082]                     timestamp = base::Sys.time(), signaled = 0L)
[16:18:48.082]                   signalCondition(cond)
[16:18:48.082]                 }
[16:18:48.082]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:18:48.082]                 "immediateCondition"))) {
[16:18:48.082]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:18:48.082]                   ...future.conditions[[length(...future.conditions) + 
[16:18:48.082]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:18:48.082]                   if (TRUE && !signal) {
[16:18:48.082]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:48.082]                     {
[16:18:48.082]                       inherits <- base::inherits
[16:18:48.082]                       invokeRestart <- base::invokeRestart
[16:18:48.082]                       is.null <- base::is.null
[16:18:48.082]                       muffled <- FALSE
[16:18:48.082]                       if (inherits(cond, "message")) {
[16:18:48.082]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:48.082]                         if (muffled) 
[16:18:48.082]                           invokeRestart("muffleMessage")
[16:18:48.082]                       }
[16:18:48.082]                       else if (inherits(cond, "warning")) {
[16:18:48.082]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:48.082]                         if (muffled) 
[16:18:48.082]                           invokeRestart("muffleWarning")
[16:18:48.082]                       }
[16:18:48.082]                       else if (inherits(cond, "condition")) {
[16:18:48.082]                         if (!is.null(pattern)) {
[16:18:48.082]                           computeRestarts <- base::computeRestarts
[16:18:48.082]                           grepl <- base::grepl
[16:18:48.082]                           restarts <- computeRestarts(cond)
[16:18:48.082]                           for (restart in restarts) {
[16:18:48.082]                             name <- restart$name
[16:18:48.082]                             if (is.null(name)) 
[16:18:48.082]                               next
[16:18:48.082]                             if (!grepl(pattern, name)) 
[16:18:48.082]                               next
[16:18:48.082]                             invokeRestart(restart)
[16:18:48.082]                             muffled <- TRUE
[16:18:48.082]                             break
[16:18:48.082]                           }
[16:18:48.082]                         }
[16:18:48.082]                       }
[16:18:48.082]                       invisible(muffled)
[16:18:48.082]                     }
[16:18:48.082]                     muffleCondition(cond, pattern = "^muffle")
[16:18:48.082]                   }
[16:18:48.082]                 }
[16:18:48.082]                 else {
[16:18:48.082]                   if (TRUE) {
[16:18:48.082]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:48.082]                     {
[16:18:48.082]                       inherits <- base::inherits
[16:18:48.082]                       invokeRestart <- base::invokeRestart
[16:18:48.082]                       is.null <- base::is.null
[16:18:48.082]                       muffled <- FALSE
[16:18:48.082]                       if (inherits(cond, "message")) {
[16:18:48.082]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:48.082]                         if (muffled) 
[16:18:48.082]                           invokeRestart("muffleMessage")
[16:18:48.082]                       }
[16:18:48.082]                       else if (inherits(cond, "warning")) {
[16:18:48.082]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:48.082]                         if (muffled) 
[16:18:48.082]                           invokeRestart("muffleWarning")
[16:18:48.082]                       }
[16:18:48.082]                       else if (inherits(cond, "condition")) {
[16:18:48.082]                         if (!is.null(pattern)) {
[16:18:48.082]                           computeRestarts <- base::computeRestarts
[16:18:48.082]                           grepl <- base::grepl
[16:18:48.082]                           restarts <- computeRestarts(cond)
[16:18:48.082]                           for (restart in restarts) {
[16:18:48.082]                             name <- restart$name
[16:18:48.082]                             if (is.null(name)) 
[16:18:48.082]                               next
[16:18:48.082]                             if (!grepl(pattern, name)) 
[16:18:48.082]                               next
[16:18:48.082]                             invokeRestart(restart)
[16:18:48.082]                             muffled <- TRUE
[16:18:48.082]                             break
[16:18:48.082]                           }
[16:18:48.082]                         }
[16:18:48.082]                       }
[16:18:48.082]                       invisible(muffled)
[16:18:48.082]                     }
[16:18:48.082]                     muffleCondition(cond, pattern = "^muffle")
[16:18:48.082]                   }
[16:18:48.082]                 }
[16:18:48.082]             }
[16:18:48.082]         }))
[16:18:48.082]     }, error = function(ex) {
[16:18:48.082]         base::structure(base::list(value = NULL, visible = NULL, 
[16:18:48.082]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:48.082]                 ...future.rng), started = ...future.startTime, 
[16:18:48.082]             finished = Sys.time(), session_uuid = NA_character_, 
[16:18:48.082]             version = "1.8"), class = "FutureResult")
[16:18:48.082]     }, finally = {
[16:18:48.082]         if (!identical(...future.workdir, getwd())) 
[16:18:48.082]             setwd(...future.workdir)
[16:18:48.082]         {
[16:18:48.082]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:18:48.082]                 ...future.oldOptions$nwarnings <- NULL
[16:18:48.082]             }
[16:18:48.082]             base::options(...future.oldOptions)
[16:18:48.082]             if (.Platform$OS.type == "windows") {
[16:18:48.082]                 old_names <- names(...future.oldEnvVars)
[16:18:48.082]                 envs <- base::Sys.getenv()
[16:18:48.082]                 names <- names(envs)
[16:18:48.082]                 common <- intersect(names, old_names)
[16:18:48.082]                 added <- setdiff(names, old_names)
[16:18:48.082]                 removed <- setdiff(old_names, names)
[16:18:48.082]                 changed <- common[...future.oldEnvVars[common] != 
[16:18:48.082]                   envs[common]]
[16:18:48.082]                 NAMES <- toupper(changed)
[16:18:48.082]                 args <- list()
[16:18:48.082]                 for (kk in seq_along(NAMES)) {
[16:18:48.082]                   name <- changed[[kk]]
[16:18:48.082]                   NAME <- NAMES[[kk]]
[16:18:48.082]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:48.082]                     next
[16:18:48.082]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:48.082]                 }
[16:18:48.082]                 NAMES <- toupper(added)
[16:18:48.082]                 for (kk in seq_along(NAMES)) {
[16:18:48.082]                   name <- added[[kk]]
[16:18:48.082]                   NAME <- NAMES[[kk]]
[16:18:48.082]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:48.082]                     next
[16:18:48.082]                   args[[name]] <- ""
[16:18:48.082]                 }
[16:18:48.082]                 NAMES <- toupper(removed)
[16:18:48.082]                 for (kk in seq_along(NAMES)) {
[16:18:48.082]                   name <- removed[[kk]]
[16:18:48.082]                   NAME <- NAMES[[kk]]
[16:18:48.082]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:48.082]                     next
[16:18:48.082]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:48.082]                 }
[16:18:48.082]                 if (length(args) > 0) 
[16:18:48.082]                   base::do.call(base::Sys.setenv, args = args)
[16:18:48.082]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:18:48.082]             }
[16:18:48.082]             else {
[16:18:48.082]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:18:48.082]             }
[16:18:48.082]             {
[16:18:48.082]                 if (base::length(...future.futureOptionsAdded) > 
[16:18:48.082]                   0L) {
[16:18:48.082]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:18:48.082]                   base::names(opts) <- ...future.futureOptionsAdded
[16:18:48.082]                   base::options(opts)
[16:18:48.082]                 }
[16:18:48.082]                 {
[16:18:48.082]                   {
[16:18:48.082]                     base::options(mc.cores = ...future.mc.cores.old)
[16:18:48.082]                     NULL
[16:18:48.082]                   }
[16:18:48.082]                   options(future.plan = NULL)
[16:18:48.082]                   if (is.na(NA_character_)) 
[16:18:48.082]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:18:48.082]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:18:48.082]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:18:48.082]                     .init = FALSE)
[16:18:48.082]                 }
[16:18:48.082]             }
[16:18:48.082]         }
[16:18:48.082]     })
[16:18:48.082]     if (TRUE) {
[16:18:48.082]         base::sink(type = "output", split = FALSE)
[16:18:48.082]         if (TRUE) {
[16:18:48.082]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:18:48.082]         }
[16:18:48.082]         else {
[16:18:48.082]             ...future.result["stdout"] <- base::list(NULL)
[16:18:48.082]         }
[16:18:48.082]         base::close(...future.stdout)
[16:18:48.082]         ...future.stdout <- NULL
[16:18:48.082]     }
[16:18:48.082]     ...future.result$conditions <- ...future.conditions
[16:18:48.082]     ...future.result$finished <- base::Sys.time()
[16:18:48.082]     ...future.result
[16:18:48.082] }
[16:18:48.085] assign_globals() ...
[16:18:48.085] List of 5
[16:18:48.085]  $ ...future.FUN            :function (...)  
[16:18:48.085]  $ future.call.arguments    : list()
[16:18:48.085]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:48.085]  $ ...future.elements_ii    :List of 3
[16:18:48.085]   ..$ : int 0
[16:18:48.085]   ..$ : int 0
[16:18:48.085]   ..$ : int 0
[16:18:48.085]  $ ...future.seeds_ii       :List of 3
[16:18:48.085]   ..$ : int [1:7] 10407 2000585943 1277356830 -2089408352 -860958827 226502925 99834792
[16:18:48.085]   ..$ : int [1:7] 10407 -1366366742 -1587533199 -987670999 1146693195 -372746989 -1779846945
[16:18:48.085]   ..$ : int [1:7] 10407 -1326244930 -121340665 862160877 1069041468 -111293265 1245428870
[16:18:48.085]  $ ...future.globals.maxSize: NULL
[16:18:48.085]  - attr(*, "where")=List of 5
[16:18:48.085]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:18:48.085]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:18:48.085]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:18:48.085]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:18:48.085]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:18:48.085]  - attr(*, "resolved")= logi FALSE
[16:18:48.085]  - attr(*, "total_size")= num 616
[16:18:48.085]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:48.085]  - attr(*, "already-done")= logi TRUE
[16:18:48.098] - reassign environment for ‘...future.FUN’
[16:18:48.098] - copied ‘...future.FUN’ to environment
[16:18:48.098] - copied ‘future.call.arguments’ to environment
[16:18:48.098] - copied ‘...future.elements_ii’ to environment
[16:18:48.098] - copied ‘...future.seeds_ii’ to environment
[16:18:48.099] - copied ‘...future.globals.maxSize’ to environment
[16:18:48.099] assign_globals() ... done
[16:18:48.099] requestCore(): workers = 2
[16:18:48.105] MulticoreFuture started
[16:18:48.105] - Launch lazy future ... done
[16:18:48.106] run() for ‘MulticoreFuture’ ... done
[16:18:48.106] Created future:
[16:18:48.106] plan(): Setting new future strategy stack:
[16:18:48.107] List of future strategies:
[16:18:48.107] 1. sequential:
[16:18:48.107]    - args: function (..., envir = parent.frame())
[16:18:48.107]    - tweaked: FALSE
[16:18:48.107]    - call: NULL
[16:18:48.107] plan(): nbrOfWorkers() = 1
[16:18:48.109] plan(): Setting new future strategy stack:
[16:18:48.110] List of future strategies:
[16:18:48.110] 1. multicore:
[16:18:48.110]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:18:48.110]    - tweaked: FALSE
[16:18:48.110]    - call: plan(strategy)
[16:18:48.115] plan(): nbrOfWorkers() = 2
[16:18:48.106] MulticoreFuture:
[16:18:48.106] Label: ‘future_replicate-2’
[16:18:48.106] Expression:
[16:18:48.106] {
[16:18:48.106]     do.call(function(...) {
[16:18:48.106]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:48.106]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:48.106]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:48.106]             on.exit(options(oopts), add = TRUE)
[16:18:48.106]         }
[16:18:48.106]         {
[16:18:48.106]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:48.106]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:48.106]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:48.106]                   envir = globalenv(), inherits = FALSE)
[16:18:48.106]                 ...future.FUN(...future.X_jj, ...)
[16:18:48.106]             })
[16:18:48.106]         }
[16:18:48.106]     }, args = future.call.arguments)
[16:18:48.106] }
[16:18:48.106] Lazy evaluation: FALSE
[16:18:48.106] Asynchronous evaluation: TRUE
[16:18:48.106] Local evaluation: TRUE
[16:18:48.106] Environment: R_GlobalEnv
[16:18:48.106] Capture standard output: TRUE
[16:18:48.106] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:18:48.106] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:18:48.106] Packages: <none>
[16:18:48.106] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:18:48.106] Resolved: TRUE
[16:18:48.106] Value: <not collected>
[16:18:48.106] Conditions captured: <none>
[16:18:48.106] Early signaling: FALSE
[16:18:48.106] Owner process: 20271db5-d788-b537-4432-0a26f2d2d030
[16:18:48.106] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:48.116] Chunk #2 of 2 ... DONE
[16:18:48.116] Launching 2 futures (chunks) ... DONE
[16:18:48.116] Resolving 2 futures (chunks) ...
[16:18:48.116] resolve() on list ...
[16:18:48.116]  recursive: 0
[16:18:48.117]  length: 2
[16:18:48.117] 
[16:18:48.117] Future #1
[16:18:48.118] result() for MulticoreFuture ...
[16:18:48.120] result() for MulticoreFuture ...
[16:18:48.120] result() for MulticoreFuture ... done
[16:18:48.120] result() for MulticoreFuture ... done
[16:18:48.120] result() for MulticoreFuture ...
[16:18:48.120] result() for MulticoreFuture ... done
[16:18:48.120] signalConditionsASAP(MulticoreFuture, pos=1) ...
[16:18:48.121] - nx: 2
[16:18:48.121] - relay: TRUE
[16:18:48.121] - stdout: TRUE
[16:18:48.121] - signal: TRUE
[16:18:48.121] - resignal: FALSE
[16:18:48.121] - force: TRUE
[16:18:48.121] - relayed: [n=2] FALSE, FALSE
[16:18:48.122] - queued futures: [n=2] FALSE, FALSE
[16:18:48.122]  - until=1
[16:18:48.122]  - relaying element #1
[16:18:48.122] result() for MulticoreFuture ...
[16:18:48.122] result() for MulticoreFuture ... done
[16:18:48.122] result() for MulticoreFuture ...
[16:18:48.123] result() for MulticoreFuture ... done
[16:18:48.123] result() for MulticoreFuture ...
[16:18:48.123] result() for MulticoreFuture ... done
[16:18:48.123] result() for MulticoreFuture ...
[16:18:48.123] result() for MulticoreFuture ... done
[16:18:48.123] - relayed: [n=2] TRUE, FALSE
[16:18:48.124] - queued futures: [n=2] TRUE, FALSE
[16:18:48.124] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[16:18:48.124]  length: 1 (resolved future 1)
[16:18:48.124] Future #2
[16:18:48.124] result() for MulticoreFuture ...
[16:18:48.125] result() for MulticoreFuture ...
[16:18:48.125] result() for MulticoreFuture ... done
[16:18:48.125] result() for MulticoreFuture ... done
[16:18:48.125] result() for MulticoreFuture ...
[16:18:48.126] result() for MulticoreFuture ... done
[16:18:48.126] signalConditionsASAP(MulticoreFuture, pos=2) ...
[16:18:48.126] - nx: 2
[16:18:48.126] - relay: TRUE
[16:18:48.126] - stdout: TRUE
[16:18:48.126] - signal: TRUE
[16:18:48.126] - resignal: FALSE
[16:18:48.126] - force: TRUE
[16:18:48.127] - relayed: [n=2] TRUE, FALSE
[16:18:48.127] - queued futures: [n=2] TRUE, FALSE
[16:18:48.127]  - until=2
[16:18:48.127]  - relaying element #2
[16:18:48.127] result() for MulticoreFuture ...
[16:18:48.127] result() for MulticoreFuture ... done
[16:18:48.127] result() for MulticoreFuture ...
[16:18:48.128] result() for MulticoreFuture ... done
[16:18:48.128] result() for MulticoreFuture ...
[16:18:48.128] result() for MulticoreFuture ... done
[16:18:48.128] result() for MulticoreFuture ...
[16:18:48.128] result() for MulticoreFuture ... done
[16:18:48.128] - relayed: [n=2] TRUE, TRUE
[16:18:48.128] - queued futures: [n=2] TRUE, TRUE
[16:18:48.128] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[16:18:48.129]  length: 0 (resolved future 2)
[16:18:48.129] Relaying remaining futures
[16:18:48.129] signalConditionsASAP(NULL, pos=0) ...
[16:18:48.129] - nx: 2
[16:18:48.129] - relay: TRUE
[16:18:48.129] - stdout: TRUE
[16:18:48.129] - signal: TRUE
[16:18:48.129] - resignal: FALSE
[16:18:48.129] - force: TRUE
[16:18:48.129] - relayed: [n=2] TRUE, TRUE
[16:18:48.130] - queued futures: [n=2] TRUE, TRUE
 - flush all
[16:18:48.130] - relayed: [n=2] TRUE, TRUE
[16:18:48.130] - queued futures: [n=2] TRUE, TRUE
[16:18:48.130] signalConditionsASAP(NULL, pos=0) ... done
[16:18:48.130] resolve() on list ... DONE
[16:18:48.130] result() for MulticoreFuture ...
[16:18:48.130] result() for MulticoreFuture ... done
[16:18:48.130] result() for MulticoreFuture ...
[16:18:48.131] result() for MulticoreFuture ... done
[16:18:48.131] result() for MulticoreFuture ...
[16:18:48.131] result() for MulticoreFuture ... done
[16:18:48.131] result() for MulticoreFuture ...
[16:18:48.131] result() for MulticoreFuture ... done
[16:18:48.131]  - Number of value chunks collected: 2
[16:18:48.131] Resolving 2 futures (chunks) ... DONE
[16:18:48.131] Reducing values from 2 chunks ...
[16:18:48.131]  - Number of values collected after concatenation: 5
[16:18:48.132]  - Number of values expected: 5
[16:18:48.132] Reducing values from 2 chunks ... DONE
[16:18:48.132] future_lapply() ... DONE
[16:18:48.132] future_lapply() ...
[16:18:48.133] Generating random seeds ...
[16:18:48.133] Generating random seed streams for 5 elements ...
[16:18:48.133] Generating random seed streams for 5 elements ... DONE
[16:18:48.133] Generating random seeds ... DONE
[16:18:48.133] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:18:48.138] Number of chunks: 2
[16:18:48.138] getGlobalsAndPackagesXApply() ...
[16:18:48.139]  - future.globals: TRUE
[16:18:48.141] getGlobalsAndPackages() ...
[16:18:48.141] Searching for globals...
[16:18:48.143] - globals found: [2] ‘FUN’, ‘sample’
[16:18:48.143] Searching for globals ... DONE
[16:18:48.143] Resolving globals: FALSE
[16:18:48.144] The total size of the 1 globals is 616 bytes (616 bytes)
[16:18:48.144] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:18:48.144] - globals: [1] ‘FUN’
[16:18:48.144] 
[16:18:48.145] getGlobalsAndPackages() ... DONE
[16:18:48.145]  - globals found/used: [n=1] ‘FUN’
[16:18:48.145]  - needed namespaces: [n=0] 
[16:18:48.145] Finding globals ... DONE
[16:18:48.145]  - use_args: TRUE
[16:18:48.145]  - Getting '...' globals ...
[16:18:48.146] resolve() on list ...
[16:18:48.146]  recursive: 0
[16:18:48.146]  length: 1
[16:18:48.146]  elements: ‘...’
[16:18:48.146]  length: 0 (resolved future 1)
[16:18:48.146] resolve() on list ... DONE
[16:18:48.146]    - '...' content: [n=0] 
[16:18:48.146] List of 1
[16:18:48.146]  $ ...: list()
[16:18:48.146]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:48.146]  - attr(*, "where")=List of 1
[16:18:48.146]   ..$ ...:<environment: 0x55e7a0b01300> 
[16:18:48.146]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:48.146]  - attr(*, "resolved")= logi TRUE
[16:18:48.146]  - attr(*, "total_size")= num NA
[16:18:48.150]  - Getting '...' globals ... DONE
[16:18:48.150] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:18:48.150] List of 2
[16:18:48.150]  $ ...future.FUN:function (...)  
[16:18:48.150]  $ ...          : list()
[16:18:48.150]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:48.150]  - attr(*, "where")=List of 2
[16:18:48.150]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:18:48.150]   ..$ ...          :<environment: 0x55e7a0b01300> 
[16:18:48.150]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:48.150]  - attr(*, "resolved")= logi FALSE
[16:18:48.150]  - attr(*, "total_size")= num 616
[16:18:48.153] Packages to be attached in all futures: [n=0] 
[16:18:48.153] getGlobalsAndPackagesXApply() ... DONE
[16:18:48.153] Number of futures (= number of chunks): 2
[16:18:48.153] Launching 2 futures (chunks) ...
[16:18:48.153] Chunk #1 of 2 ...
[16:18:48.153]  - Finding globals in 'X' for chunk #1 ...
[16:18:48.153] getGlobalsAndPackages() ...
[16:18:48.153] Searching for globals...
[16:18:48.154] 
[16:18:48.154] Searching for globals ... DONE
[16:18:48.154] - globals: [0] <none>
[16:18:48.154] getGlobalsAndPackages() ... DONE
[16:18:48.154]    + additional globals found: [n=0] 
[16:18:48.154]    + additional namespaces needed: [n=0] 
[16:18:48.154]  - Finding globals in 'X' for chunk #1 ... DONE
[16:18:48.154]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:18:48.155]  - seeds: [2] <seeds>
[16:18:48.155]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:48.155] getGlobalsAndPackages() ...
[16:18:48.155] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:48.155] Resolving globals: FALSE
[16:18:48.155] Tweak future expression to call with '...' arguments ...
[16:18:48.155] {
[16:18:48.155]     do.call(function(...) {
[16:18:48.155]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:48.155]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:48.155]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:48.155]             on.exit(options(oopts), add = TRUE)
[16:18:48.155]         }
[16:18:48.155]         {
[16:18:48.155]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:48.155]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:48.155]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:48.155]                   envir = globalenv(), inherits = FALSE)
[16:18:48.155]                 ...future.FUN(...future.X_jj, ...)
[16:18:48.155]             })
[16:18:48.155]         }
[16:18:48.155]     }, args = future.call.arguments)
[16:18:48.155] }
[16:18:48.156] Tweak future expression to call with '...' arguments ... DONE
[16:18:48.156] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:48.156] 
[16:18:48.156] getGlobalsAndPackages() ... DONE
[16:18:48.156] run() for ‘Future’ ...
[16:18:48.157] - state: ‘created’
[16:18:48.157] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:18:48.161] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:48.161] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:18:48.161]   - Field: ‘label’
[16:18:48.161]   - Field: ‘local’
[16:18:48.161]   - Field: ‘owner’
[16:18:48.161]   - Field: ‘envir’
[16:18:48.161]   - Field: ‘workers’
[16:18:48.162]   - Field: ‘packages’
[16:18:48.162]   - Field: ‘gc’
[16:18:48.162]   - Field: ‘job’
[16:18:48.162]   - Field: ‘conditions’
[16:18:48.162]   - Field: ‘expr’
[16:18:48.162]   - Field: ‘uuid’
[16:18:48.162]   - Field: ‘seed’
[16:18:48.162]   - Field: ‘version’
[16:18:48.162]   - Field: ‘result’
[16:18:48.162]   - Field: ‘asynchronous’
[16:18:48.162]   - Field: ‘calls’
[16:18:48.163]   - Field: ‘globals’
[16:18:48.163]   - Field: ‘stdout’
[16:18:48.163]   - Field: ‘earlySignal’
[16:18:48.163]   - Field: ‘lazy’
[16:18:48.163]   - Field: ‘state’
[16:18:48.163] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:18:48.163] - Launch lazy future ...
[16:18:48.163] Packages needed by the future expression (n = 0): <none>
[16:18:48.164] Packages needed by future strategies (n = 0): <none>
[16:18:48.164] {
[16:18:48.164]     {
[16:18:48.164]         {
[16:18:48.164]             ...future.startTime <- base::Sys.time()
[16:18:48.164]             {
[16:18:48.164]                 {
[16:18:48.164]                   {
[16:18:48.164]                     {
[16:18:48.164]                       base::local({
[16:18:48.164]                         has_future <- base::requireNamespace("future", 
[16:18:48.164]                           quietly = TRUE)
[16:18:48.164]                         if (has_future) {
[16:18:48.164]                           ns <- base::getNamespace("future")
[16:18:48.164]                           version <- ns[[".package"]][["version"]]
[16:18:48.164]                           if (is.null(version)) 
[16:18:48.164]                             version <- utils::packageVersion("future")
[16:18:48.164]                         }
[16:18:48.164]                         else {
[16:18:48.164]                           version <- NULL
[16:18:48.164]                         }
[16:18:48.164]                         if (!has_future || version < "1.8.0") {
[16:18:48.164]                           info <- base::c(r_version = base::gsub("R version ", 
[16:18:48.164]                             "", base::R.version$version.string), 
[16:18:48.164]                             platform = base::sprintf("%s (%s-bit)", 
[16:18:48.164]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:18:48.164]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:18:48.164]                               "release", "version")], collapse = " "), 
[16:18:48.164]                             hostname = base::Sys.info()[["nodename"]])
[16:18:48.164]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:18:48.164]                             info)
[16:18:48.164]                           info <- base::paste(info, collapse = "; ")
[16:18:48.164]                           if (!has_future) {
[16:18:48.164]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:18:48.164]                               info)
[16:18:48.164]                           }
[16:18:48.164]                           else {
[16:18:48.164]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:18:48.164]                               info, version)
[16:18:48.164]                           }
[16:18:48.164]                           base::stop(msg)
[16:18:48.164]                         }
[16:18:48.164]                       })
[16:18:48.164]                     }
[16:18:48.164]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:18:48.164]                     base::options(mc.cores = 1L)
[16:18:48.164]                   }
[16:18:48.164]                   ...future.strategy.old <- future::plan("list")
[16:18:48.164]                   options(future.plan = NULL)
[16:18:48.164]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:18:48.164]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:18:48.164]                 }
[16:18:48.164]                 ...future.workdir <- getwd()
[16:18:48.164]             }
[16:18:48.164]             ...future.oldOptions <- base::as.list(base::.Options)
[16:18:48.164]             ...future.oldEnvVars <- base::Sys.getenv()
[16:18:48.164]         }
[16:18:48.164]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:18:48.164]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:18:48.164]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:18:48.164]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:18:48.164]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:18:48.164]             future.stdout.windows.reencode = NULL, width = 80L)
[16:18:48.164]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:18:48.164]             base::names(...future.oldOptions))
[16:18:48.164]     }
[16:18:48.164]     if (FALSE) {
[16:18:48.164]     }
[16:18:48.164]     else {
[16:18:48.164]         if (TRUE) {
[16:18:48.164]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:18:48.164]                 open = "w")
[16:18:48.164]         }
[16:18:48.164]         else {
[16:18:48.164]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:18:48.164]                 windows = "NUL", "/dev/null"), open = "w")
[16:18:48.164]         }
[16:18:48.164]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:18:48.164]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:18:48.164]             base::sink(type = "output", split = FALSE)
[16:18:48.164]             base::close(...future.stdout)
[16:18:48.164]         }, add = TRUE)
[16:18:48.164]     }
[16:18:48.164]     ...future.frame <- base::sys.nframe()
[16:18:48.164]     ...future.conditions <- base::list()
[16:18:48.164]     ...future.rng <- base::globalenv()$.Random.seed
[16:18:48.164]     if (FALSE) {
[16:18:48.164]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:18:48.164]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:18:48.164]     }
[16:18:48.164]     ...future.result <- base::tryCatch({
[16:18:48.164]         base::withCallingHandlers({
[16:18:48.164]             ...future.value <- base::withVisible(base::local({
[16:18:48.164]                 withCallingHandlers({
[16:18:48.164]                   {
[16:18:48.164]                     do.call(function(...) {
[16:18:48.164]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:48.164]                       if (!identical(...future.globals.maxSize.org, 
[16:18:48.164]                         ...future.globals.maxSize)) {
[16:18:48.164]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:48.164]                         on.exit(options(oopts), add = TRUE)
[16:18:48.164]                       }
[16:18:48.164]                       {
[16:18:48.164]                         lapply(seq_along(...future.elements_ii), 
[16:18:48.164]                           FUN = function(jj) {
[16:18:48.164]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:48.164]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:48.164]                               envir = globalenv(), inherits = FALSE)
[16:18:48.164]                             ...future.FUN(...future.X_jj, ...)
[16:18:48.164]                           })
[16:18:48.164]                       }
[16:18:48.164]                     }, args = future.call.arguments)
[16:18:48.164]                   }
[16:18:48.164]                 }, immediateCondition = function(cond) {
[16:18:48.164]                   save_rds <- function (object, pathname, ...) 
[16:18:48.164]                   {
[16:18:48.164]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:18:48.164]                     if (file_test("-f", pathname_tmp)) {
[16:18:48.164]                       fi_tmp <- file.info(pathname_tmp)
[16:18:48.164]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:18:48.164]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:18:48.164]                         fi_tmp[["mtime"]])
[16:18:48.164]                     }
[16:18:48.164]                     tryCatch({
[16:18:48.164]                       saveRDS(object, file = pathname_tmp, ...)
[16:18:48.164]                     }, error = function(ex) {
[16:18:48.164]                       msg <- conditionMessage(ex)
[16:18:48.164]                       fi_tmp <- file.info(pathname_tmp)
[16:18:48.164]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:18:48.164]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:18:48.164]                         fi_tmp[["mtime"]], msg)
[16:18:48.164]                       ex$message <- msg
[16:18:48.164]                       stop(ex)
[16:18:48.164]                     })
[16:18:48.164]                     stopifnot(file_test("-f", pathname_tmp))
[16:18:48.164]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:18:48.164]                     if (!res || file_test("-f", pathname_tmp)) {
[16:18:48.164]                       fi_tmp <- file.info(pathname_tmp)
[16:18:48.164]                       fi <- file.info(pathname)
[16:18:48.164]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:18:48.164]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:18:48.164]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:18:48.164]                         fi[["size"]], fi[["mtime"]])
[16:18:48.164]                       stop(msg)
[16:18:48.164]                     }
[16:18:48.164]                     invisible(pathname)
[16:18:48.164]                   }
[16:18:48.164]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:18:48.164]                     rootPath = tempdir()) 
[16:18:48.164]                   {
[16:18:48.164]                     obj <- list(time = Sys.time(), condition = cond)
[16:18:48.164]                     file <- tempfile(pattern = class(cond)[1], 
[16:18:48.164]                       tmpdir = path, fileext = ".rds")
[16:18:48.164]                     save_rds(obj, file)
[16:18:48.164]                   }
[16:18:48.164]                   saveImmediateCondition(cond, path = "/tmp/RtmpZpTIv7/.future/immediateConditions")
[16:18:48.164]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:48.164]                   {
[16:18:48.164]                     inherits <- base::inherits
[16:18:48.164]                     invokeRestart <- base::invokeRestart
[16:18:48.164]                     is.null <- base::is.null
[16:18:48.164]                     muffled <- FALSE
[16:18:48.164]                     if (inherits(cond, "message")) {
[16:18:48.164]                       muffled <- grepl(pattern, "muffleMessage")
[16:18:48.164]                       if (muffled) 
[16:18:48.164]                         invokeRestart("muffleMessage")
[16:18:48.164]                     }
[16:18:48.164]                     else if (inherits(cond, "warning")) {
[16:18:48.164]                       muffled <- grepl(pattern, "muffleWarning")
[16:18:48.164]                       if (muffled) 
[16:18:48.164]                         invokeRestart("muffleWarning")
[16:18:48.164]                     }
[16:18:48.164]                     else if (inherits(cond, "condition")) {
[16:18:48.164]                       if (!is.null(pattern)) {
[16:18:48.164]                         computeRestarts <- base::computeRestarts
[16:18:48.164]                         grepl <- base::grepl
[16:18:48.164]                         restarts <- computeRestarts(cond)
[16:18:48.164]                         for (restart in restarts) {
[16:18:48.164]                           name <- restart$name
[16:18:48.164]                           if (is.null(name)) 
[16:18:48.164]                             next
[16:18:48.164]                           if (!grepl(pattern, name)) 
[16:18:48.164]                             next
[16:18:48.164]                           invokeRestart(restart)
[16:18:48.164]                           muffled <- TRUE
[16:18:48.164]                           break
[16:18:48.164]                         }
[16:18:48.164]                       }
[16:18:48.164]                     }
[16:18:48.164]                     invisible(muffled)
[16:18:48.164]                   }
[16:18:48.164]                   muffleCondition(cond)
[16:18:48.164]                 })
[16:18:48.164]             }))
[16:18:48.164]             future::FutureResult(value = ...future.value$value, 
[16:18:48.164]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:48.164]                   ...future.rng), globalenv = if (FALSE) 
[16:18:48.164]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:18:48.164]                     ...future.globalenv.names))
[16:18:48.164]                 else NULL, started = ...future.startTime, version = "1.8")
[16:18:48.164]         }, condition = base::local({
[16:18:48.164]             c <- base::c
[16:18:48.164]             inherits <- base::inherits
[16:18:48.164]             invokeRestart <- base::invokeRestart
[16:18:48.164]             length <- base::length
[16:18:48.164]             list <- base::list
[16:18:48.164]             seq.int <- base::seq.int
[16:18:48.164]             signalCondition <- base::signalCondition
[16:18:48.164]             sys.calls <- base::sys.calls
[16:18:48.164]             `[[` <- base::`[[`
[16:18:48.164]             `+` <- base::`+`
[16:18:48.164]             `<<-` <- base::`<<-`
[16:18:48.164]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:18:48.164]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:18:48.164]                   3L)]
[16:18:48.164]             }
[16:18:48.164]             function(cond) {
[16:18:48.164]                 is_error <- inherits(cond, "error")
[16:18:48.164]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:18:48.164]                   NULL)
[16:18:48.164]                 if (is_error) {
[16:18:48.164]                   sessionInformation <- function() {
[16:18:48.164]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:18:48.164]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:18:48.164]                       search = base::search(), system = base::Sys.info())
[16:18:48.164]                   }
[16:18:48.164]                   ...future.conditions[[length(...future.conditions) + 
[16:18:48.164]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:18:48.164]                     cond$call), session = sessionInformation(), 
[16:18:48.164]                     timestamp = base::Sys.time(), signaled = 0L)
[16:18:48.164]                   signalCondition(cond)
[16:18:48.164]                 }
[16:18:48.164]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:18:48.164]                 "immediateCondition"))) {
[16:18:48.164]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:18:48.164]                   ...future.conditions[[length(...future.conditions) + 
[16:18:48.164]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:18:48.164]                   if (TRUE && !signal) {
[16:18:48.164]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:48.164]                     {
[16:18:48.164]                       inherits <- base::inherits
[16:18:48.164]                       invokeRestart <- base::invokeRestart
[16:18:48.164]                       is.null <- base::is.null
[16:18:48.164]                       muffled <- FALSE
[16:18:48.164]                       if (inherits(cond, "message")) {
[16:18:48.164]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:48.164]                         if (muffled) 
[16:18:48.164]                           invokeRestart("muffleMessage")
[16:18:48.164]                       }
[16:18:48.164]                       else if (inherits(cond, "warning")) {
[16:18:48.164]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:48.164]                         if (muffled) 
[16:18:48.164]                           invokeRestart("muffleWarning")
[16:18:48.164]                       }
[16:18:48.164]                       else if (inherits(cond, "condition")) {
[16:18:48.164]                         if (!is.null(pattern)) {
[16:18:48.164]                           computeRestarts <- base::computeRestarts
[16:18:48.164]                           grepl <- base::grepl
[16:18:48.164]                           restarts <- computeRestarts(cond)
[16:18:48.164]                           for (restart in restarts) {
[16:18:48.164]                             name <- restart$name
[16:18:48.164]                             if (is.null(name)) 
[16:18:48.164]                               next
[16:18:48.164]                             if (!grepl(pattern, name)) 
[16:18:48.164]                               next
[16:18:48.164]                             invokeRestart(restart)
[16:18:48.164]                             muffled <- TRUE
[16:18:48.164]                             break
[16:18:48.164]                           }
[16:18:48.164]                         }
[16:18:48.164]                       }
[16:18:48.164]                       invisible(muffled)
[16:18:48.164]                     }
[16:18:48.164]                     muffleCondition(cond, pattern = "^muffle")
[16:18:48.164]                   }
[16:18:48.164]                 }
[16:18:48.164]                 else {
[16:18:48.164]                   if (TRUE) {
[16:18:48.164]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:48.164]                     {
[16:18:48.164]                       inherits <- base::inherits
[16:18:48.164]                       invokeRestart <- base::invokeRestart
[16:18:48.164]                       is.null <- base::is.null
[16:18:48.164]                       muffled <- FALSE
[16:18:48.164]                       if (inherits(cond, "message")) {
[16:18:48.164]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:48.164]                         if (muffled) 
[16:18:48.164]                           invokeRestart("muffleMessage")
[16:18:48.164]                       }
[16:18:48.164]                       else if (inherits(cond, "warning")) {
[16:18:48.164]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:48.164]                         if (muffled) 
[16:18:48.164]                           invokeRestart("muffleWarning")
[16:18:48.164]                       }
[16:18:48.164]                       else if (inherits(cond, "condition")) {
[16:18:48.164]                         if (!is.null(pattern)) {
[16:18:48.164]                           computeRestarts <- base::computeRestarts
[16:18:48.164]                           grepl <- base::grepl
[16:18:48.164]                           restarts <- computeRestarts(cond)
[16:18:48.164]                           for (restart in restarts) {
[16:18:48.164]                             name <- restart$name
[16:18:48.164]                             if (is.null(name)) 
[16:18:48.164]                               next
[16:18:48.164]                             if (!grepl(pattern, name)) 
[16:18:48.164]                               next
[16:18:48.164]                             invokeRestart(restart)
[16:18:48.164]                             muffled <- TRUE
[16:18:48.164]                             break
[16:18:48.164]                           }
[16:18:48.164]                         }
[16:18:48.164]                       }
[16:18:48.164]                       invisible(muffled)
[16:18:48.164]                     }
[16:18:48.164]                     muffleCondition(cond, pattern = "^muffle")
[16:18:48.164]                   }
[16:18:48.164]                 }
[16:18:48.164]             }
[16:18:48.164]         }))
[16:18:48.164]     }, error = function(ex) {
[16:18:48.164]         base::structure(base::list(value = NULL, visible = NULL, 
[16:18:48.164]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:48.164]                 ...future.rng), started = ...future.startTime, 
[16:18:48.164]             finished = Sys.time(), session_uuid = NA_character_, 
[16:18:48.164]             version = "1.8"), class = "FutureResult")
[16:18:48.164]     }, finally = {
[16:18:48.164]         if (!identical(...future.workdir, getwd())) 
[16:18:48.164]             setwd(...future.workdir)
[16:18:48.164]         {
[16:18:48.164]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:18:48.164]                 ...future.oldOptions$nwarnings <- NULL
[16:18:48.164]             }
[16:18:48.164]             base::options(...future.oldOptions)
[16:18:48.164]             if (.Platform$OS.type == "windows") {
[16:18:48.164]                 old_names <- names(...future.oldEnvVars)
[16:18:48.164]                 envs <- base::Sys.getenv()
[16:18:48.164]                 names <- names(envs)
[16:18:48.164]                 common <- intersect(names, old_names)
[16:18:48.164]                 added <- setdiff(names, old_names)
[16:18:48.164]                 removed <- setdiff(old_names, names)
[16:18:48.164]                 changed <- common[...future.oldEnvVars[common] != 
[16:18:48.164]                   envs[common]]
[16:18:48.164]                 NAMES <- toupper(changed)
[16:18:48.164]                 args <- list()
[16:18:48.164]                 for (kk in seq_along(NAMES)) {
[16:18:48.164]                   name <- changed[[kk]]
[16:18:48.164]                   NAME <- NAMES[[kk]]
[16:18:48.164]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:48.164]                     next
[16:18:48.164]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:48.164]                 }
[16:18:48.164]                 NAMES <- toupper(added)
[16:18:48.164]                 for (kk in seq_along(NAMES)) {
[16:18:48.164]                   name <- added[[kk]]
[16:18:48.164]                   NAME <- NAMES[[kk]]
[16:18:48.164]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:48.164]                     next
[16:18:48.164]                   args[[name]] <- ""
[16:18:48.164]                 }
[16:18:48.164]                 NAMES <- toupper(removed)
[16:18:48.164]                 for (kk in seq_along(NAMES)) {
[16:18:48.164]                   name <- removed[[kk]]
[16:18:48.164]                   NAME <- NAMES[[kk]]
[16:18:48.164]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:48.164]                     next
[16:18:48.164]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:48.164]                 }
[16:18:48.164]                 if (length(args) > 0) 
[16:18:48.164]                   base::do.call(base::Sys.setenv, args = args)
[16:18:48.164]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:18:48.164]             }
[16:18:48.164]             else {
[16:18:48.164]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:18:48.164]             }
[16:18:48.164]             {
[16:18:48.164]                 if (base::length(...future.futureOptionsAdded) > 
[16:18:48.164]                   0L) {
[16:18:48.164]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:18:48.164]                   base::names(opts) <- ...future.futureOptionsAdded
[16:18:48.164]                   base::options(opts)
[16:18:48.164]                 }
[16:18:48.164]                 {
[16:18:48.164]                   {
[16:18:48.164]                     base::options(mc.cores = ...future.mc.cores.old)
[16:18:48.164]                     NULL
[16:18:48.164]                   }
[16:18:48.164]                   options(future.plan = NULL)
[16:18:48.164]                   if (is.na(NA_character_)) 
[16:18:48.164]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:18:48.164]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:18:48.164]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:18:48.164]                     .init = FALSE)
[16:18:48.164]                 }
[16:18:48.164]             }
[16:18:48.164]         }
[16:18:48.164]     })
[16:18:48.164]     if (TRUE) {
[16:18:48.164]         base::sink(type = "output", split = FALSE)
[16:18:48.164]         if (TRUE) {
[16:18:48.164]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:18:48.164]         }
[16:18:48.164]         else {
[16:18:48.164]             ...future.result["stdout"] <- base::list(NULL)
[16:18:48.164]         }
[16:18:48.164]         base::close(...future.stdout)
[16:18:48.164]         ...future.stdout <- NULL
[16:18:48.164]     }
[16:18:48.164]     ...future.result$conditions <- ...future.conditions
[16:18:48.164]     ...future.result$finished <- base::Sys.time()
[16:18:48.164]     ...future.result
[16:18:48.164] }
[16:18:48.167] assign_globals() ...
[16:18:48.167] List of 5
[16:18:48.167]  $ ...future.FUN            :function (...)  
[16:18:48.167]  $ future.call.arguments    : list()
[16:18:48.167]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:48.167]  $ ...future.elements_ii    :List of 2
[16:18:48.167]   ..$ : int 0
[16:18:48.167]   ..$ : int 0
[16:18:48.167]  $ ...future.seeds_ii       :List of 2
[16:18:48.167]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[16:18:48.167]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[16:18:48.167]  $ ...future.globals.maxSize: NULL
[16:18:48.167]  - attr(*, "where")=List of 5
[16:18:48.167]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:18:48.167]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:18:48.167]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:18:48.167]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:18:48.167]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:18:48.167]  - attr(*, "resolved")= logi FALSE
[16:18:48.167]  - attr(*, "total_size")= num 616
[16:18:48.167]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:48.167]  - attr(*, "already-done")= logi TRUE
[16:18:48.175] - reassign environment for ‘...future.FUN’
[16:18:48.175] - copied ‘...future.FUN’ to environment
[16:18:48.175] - copied ‘future.call.arguments’ to environment
[16:18:48.175] - copied ‘...future.elements_ii’ to environment
[16:18:48.175] - copied ‘...future.seeds_ii’ to environment
[16:18:48.175] - copied ‘...future.globals.maxSize’ to environment
[16:18:48.175] assign_globals() ... done
[16:18:48.175] requestCore(): workers = 2
[16:18:48.178] MulticoreFuture started
[16:18:48.178] - Launch lazy future ... done
[16:18:48.178] run() for ‘MulticoreFuture’ ... done
[16:18:48.179] Created future:
[16:18:48.179] plan(): Setting new future strategy stack:
[16:18:48.179] List of future strategies:
[16:18:48.179] 1. sequential:
[16:18:48.179]    - args: function (..., envir = parent.frame())
[16:18:48.179]    - tweaked: FALSE
[16:18:48.179]    - call: NULL
[16:18:48.180] plan(): nbrOfWorkers() = 1
[16:18:48.182] plan(): Setting new future strategy stack:
[16:18:48.182] List of future strategies:
[16:18:48.182] 1. multicore:
[16:18:48.182]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:18:48.182]    - tweaked: FALSE
[16:18:48.182]    - call: plan(strategy)
[16:18:48.188] plan(): nbrOfWorkers() = 2
[16:18:48.179] MulticoreFuture:
[16:18:48.179] Label: ‘future_replicate-1’
[16:18:48.179] Expression:
[16:18:48.179] {
[16:18:48.179]     do.call(function(...) {
[16:18:48.179]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:48.179]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:48.179]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:48.179]             on.exit(options(oopts), add = TRUE)
[16:18:48.179]         }
[16:18:48.179]         {
[16:18:48.179]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:48.179]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:48.179]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:48.179]                   envir = globalenv(), inherits = FALSE)
[16:18:48.179]                 ...future.FUN(...future.X_jj, ...)
[16:18:48.179]             })
[16:18:48.179]         }
[16:18:48.179]     }, args = future.call.arguments)
[16:18:48.179] }
[16:18:48.179] Lazy evaluation: FALSE
[16:18:48.179] Asynchronous evaluation: TRUE
[16:18:48.179] Local evaluation: TRUE
[16:18:48.179] Environment: R_GlobalEnv
[16:18:48.179] Capture standard output: TRUE
[16:18:48.179] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:18:48.179] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:18:48.179] Packages: <none>
[16:18:48.179] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:18:48.179] Resolved: TRUE
[16:18:48.179] Value: <not collected>
[16:18:48.179] Conditions captured: <none>
[16:18:48.179] Early signaling: FALSE
[16:18:48.179] Owner process: 20271db5-d788-b537-4432-0a26f2d2d030
[16:18:48.179] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:48.189] Chunk #1 of 2 ... DONE
[16:18:48.190] Chunk #2 of 2 ...
[16:18:48.190]  - Finding globals in 'X' for chunk #2 ...
[16:18:48.190] getGlobalsAndPackages() ...
[16:18:48.190] Searching for globals...
[16:18:48.191] 
[16:18:48.191] Searching for globals ... DONE
[16:18:48.191] - globals: [0] <none>
[16:18:48.191] getGlobalsAndPackages() ... DONE
[16:18:48.191]    + additional globals found: [n=0] 
[16:18:48.191]    + additional namespaces needed: [n=0] 
[16:18:48.191]  - Finding globals in 'X' for chunk #2 ... DONE
[16:18:48.191]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:18:48.192]  - seeds: [3] <seeds>
[16:18:48.192]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:48.192] getGlobalsAndPackages() ...
[16:18:48.192] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:48.192] Resolving globals: FALSE
[16:18:48.193] Tweak future expression to call with '...' arguments ...
[16:18:48.193] {
[16:18:48.193]     do.call(function(...) {
[16:18:48.193]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:48.193]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:48.193]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:48.193]             on.exit(options(oopts), add = TRUE)
[16:18:48.193]         }
[16:18:48.193]         {
[16:18:48.193]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:48.193]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:48.193]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:48.193]                   envir = globalenv(), inherits = FALSE)
[16:18:48.193]                 ...future.FUN(...future.X_jj, ...)
[16:18:48.193]             })
[16:18:48.193]         }
[16:18:48.193]     }, args = future.call.arguments)
[16:18:48.193] }
[16:18:48.193] Tweak future expression to call with '...' arguments ... DONE
[16:18:48.194] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:48.194] 
[16:18:48.194] getGlobalsAndPackages() ... DONE
[16:18:48.195] run() for ‘Future’ ...
[16:18:48.195] - state: ‘created’
[16:18:48.195] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:18:48.200] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:48.200] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:18:48.200]   - Field: ‘label’
[16:18:48.201]   - Field: ‘local’
[16:18:48.201]   - Field: ‘owner’
[16:18:48.201]   - Field: ‘envir’
[16:18:48.201]   - Field: ‘workers’
[16:18:48.201]   - Field: ‘packages’
[16:18:48.201]   - Field: ‘gc’
[16:18:48.202]   - Field: ‘job’
[16:18:48.202]   - Field: ‘conditions’
[16:18:48.202]   - Field: ‘expr’
[16:18:48.202]   - Field: ‘uuid’
[16:18:48.202]   - Field: ‘seed’
[16:18:48.202]   - Field: ‘version’
[16:18:48.202]   - Field: ‘result’
[16:18:48.203]   - Field: ‘asynchronous’
[16:18:48.203]   - Field: ‘calls’
[16:18:48.203]   - Field: ‘globals’
[16:18:48.203]   - Field: ‘stdout’
[16:18:48.203]   - Field: ‘earlySignal’
[16:18:48.203]   - Field: ‘lazy’
[16:18:48.203]   - Field: ‘state’
[16:18:48.204] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:18:48.204] - Launch lazy future ...
[16:18:48.204] Packages needed by the future expression (n = 0): <none>
[16:18:48.204] Packages needed by future strategies (n = 0): <none>
[16:18:48.205] {
[16:18:48.205]     {
[16:18:48.205]         {
[16:18:48.205]             ...future.startTime <- base::Sys.time()
[16:18:48.205]             {
[16:18:48.205]                 {
[16:18:48.205]                   {
[16:18:48.205]                     {
[16:18:48.205]                       base::local({
[16:18:48.205]                         has_future <- base::requireNamespace("future", 
[16:18:48.205]                           quietly = TRUE)
[16:18:48.205]                         if (has_future) {
[16:18:48.205]                           ns <- base::getNamespace("future")
[16:18:48.205]                           version <- ns[[".package"]][["version"]]
[16:18:48.205]                           if (is.null(version)) 
[16:18:48.205]                             version <- utils::packageVersion("future")
[16:18:48.205]                         }
[16:18:48.205]                         else {
[16:18:48.205]                           version <- NULL
[16:18:48.205]                         }
[16:18:48.205]                         if (!has_future || version < "1.8.0") {
[16:18:48.205]                           info <- base::c(r_version = base::gsub("R version ", 
[16:18:48.205]                             "", base::R.version$version.string), 
[16:18:48.205]                             platform = base::sprintf("%s (%s-bit)", 
[16:18:48.205]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:18:48.205]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:18:48.205]                               "release", "version")], collapse = " "), 
[16:18:48.205]                             hostname = base::Sys.info()[["nodename"]])
[16:18:48.205]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:18:48.205]                             info)
[16:18:48.205]                           info <- base::paste(info, collapse = "; ")
[16:18:48.205]                           if (!has_future) {
[16:18:48.205]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:18:48.205]                               info)
[16:18:48.205]                           }
[16:18:48.205]                           else {
[16:18:48.205]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:18:48.205]                               info, version)
[16:18:48.205]                           }
[16:18:48.205]                           base::stop(msg)
[16:18:48.205]                         }
[16:18:48.205]                       })
[16:18:48.205]                     }
[16:18:48.205]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:18:48.205]                     base::options(mc.cores = 1L)
[16:18:48.205]                   }
[16:18:48.205]                   ...future.strategy.old <- future::plan("list")
[16:18:48.205]                   options(future.plan = NULL)
[16:18:48.205]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:18:48.205]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:18:48.205]                 }
[16:18:48.205]                 ...future.workdir <- getwd()
[16:18:48.205]             }
[16:18:48.205]             ...future.oldOptions <- base::as.list(base::.Options)
[16:18:48.205]             ...future.oldEnvVars <- base::Sys.getenv()
[16:18:48.205]         }
[16:18:48.205]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:18:48.205]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:18:48.205]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:18:48.205]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:18:48.205]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:18:48.205]             future.stdout.windows.reencode = NULL, width = 80L)
[16:18:48.205]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:18:48.205]             base::names(...future.oldOptions))
[16:18:48.205]     }
[16:18:48.205]     if (FALSE) {
[16:18:48.205]     }
[16:18:48.205]     else {
[16:18:48.205]         if (TRUE) {
[16:18:48.205]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:18:48.205]                 open = "w")
[16:18:48.205]         }
[16:18:48.205]         else {
[16:18:48.205]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:18:48.205]                 windows = "NUL", "/dev/null"), open = "w")
[16:18:48.205]         }
[16:18:48.205]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:18:48.205]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:18:48.205]             base::sink(type = "output", split = FALSE)
[16:18:48.205]             base::close(...future.stdout)
[16:18:48.205]         }, add = TRUE)
[16:18:48.205]     }
[16:18:48.205]     ...future.frame <- base::sys.nframe()
[16:18:48.205]     ...future.conditions <- base::list()
[16:18:48.205]     ...future.rng <- base::globalenv()$.Random.seed
[16:18:48.205]     if (FALSE) {
[16:18:48.205]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:18:48.205]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:18:48.205]     }
[16:18:48.205]     ...future.result <- base::tryCatch({
[16:18:48.205]         base::withCallingHandlers({
[16:18:48.205]             ...future.value <- base::withVisible(base::local({
[16:18:48.205]                 withCallingHandlers({
[16:18:48.205]                   {
[16:18:48.205]                     do.call(function(...) {
[16:18:48.205]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:48.205]                       if (!identical(...future.globals.maxSize.org, 
[16:18:48.205]                         ...future.globals.maxSize)) {
[16:18:48.205]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:48.205]                         on.exit(options(oopts), add = TRUE)
[16:18:48.205]                       }
[16:18:48.205]                       {
[16:18:48.205]                         lapply(seq_along(...future.elements_ii), 
[16:18:48.205]                           FUN = function(jj) {
[16:18:48.205]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:48.205]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:48.205]                               envir = globalenv(), inherits = FALSE)
[16:18:48.205]                             ...future.FUN(...future.X_jj, ...)
[16:18:48.205]                           })
[16:18:48.205]                       }
[16:18:48.205]                     }, args = future.call.arguments)
[16:18:48.205]                   }
[16:18:48.205]                 }, immediateCondition = function(cond) {
[16:18:48.205]                   save_rds <- function (object, pathname, ...) 
[16:18:48.205]                   {
[16:18:48.205]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:18:48.205]                     if (file_test("-f", pathname_tmp)) {
[16:18:48.205]                       fi_tmp <- file.info(pathname_tmp)
[16:18:48.205]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:18:48.205]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:18:48.205]                         fi_tmp[["mtime"]])
[16:18:48.205]                     }
[16:18:48.205]                     tryCatch({
[16:18:48.205]                       saveRDS(object, file = pathname_tmp, ...)
[16:18:48.205]                     }, error = function(ex) {
[16:18:48.205]                       msg <- conditionMessage(ex)
[16:18:48.205]                       fi_tmp <- file.info(pathname_tmp)
[16:18:48.205]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:18:48.205]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:18:48.205]                         fi_tmp[["mtime"]], msg)
[16:18:48.205]                       ex$message <- msg
[16:18:48.205]                       stop(ex)
[16:18:48.205]                     })
[16:18:48.205]                     stopifnot(file_test("-f", pathname_tmp))
[16:18:48.205]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:18:48.205]                     if (!res || file_test("-f", pathname_tmp)) {
[16:18:48.205]                       fi_tmp <- file.info(pathname_tmp)
[16:18:48.205]                       fi <- file.info(pathname)
[16:18:48.205]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:18:48.205]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:18:48.205]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:18:48.205]                         fi[["size"]], fi[["mtime"]])
[16:18:48.205]                       stop(msg)
[16:18:48.205]                     }
[16:18:48.205]                     invisible(pathname)
[16:18:48.205]                   }
[16:18:48.205]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:18:48.205]                     rootPath = tempdir()) 
[16:18:48.205]                   {
[16:18:48.205]                     obj <- list(time = Sys.time(), condition = cond)
[16:18:48.205]                     file <- tempfile(pattern = class(cond)[1], 
[16:18:48.205]                       tmpdir = path, fileext = ".rds")
[16:18:48.205]                     save_rds(obj, file)
[16:18:48.205]                   }
[16:18:48.205]                   saveImmediateCondition(cond, path = "/tmp/RtmpZpTIv7/.future/immediateConditions")
[16:18:48.205]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:48.205]                   {
[16:18:48.205]                     inherits <- base::inherits
[16:18:48.205]                     invokeRestart <- base::invokeRestart
[16:18:48.205]                     is.null <- base::is.null
[16:18:48.205]                     muffled <- FALSE
[16:18:48.205]                     if (inherits(cond, "message")) {
[16:18:48.205]                       muffled <- grepl(pattern, "muffleMessage")
[16:18:48.205]                       if (muffled) 
[16:18:48.205]                         invokeRestart("muffleMessage")
[16:18:48.205]                     }
[16:18:48.205]                     else if (inherits(cond, "warning")) {
[16:18:48.205]                       muffled <- grepl(pattern, "muffleWarning")
[16:18:48.205]                       if (muffled) 
[16:18:48.205]                         invokeRestart("muffleWarning")
[16:18:48.205]                     }
[16:18:48.205]                     else if (inherits(cond, "condition")) {
[16:18:48.205]                       if (!is.null(pattern)) {
[16:18:48.205]                         computeRestarts <- base::computeRestarts
[16:18:48.205]                         grepl <- base::grepl
[16:18:48.205]                         restarts <- computeRestarts(cond)
[16:18:48.205]                         for (restart in restarts) {
[16:18:48.205]                           name <- restart$name
[16:18:48.205]                           if (is.null(name)) 
[16:18:48.205]                             next
[16:18:48.205]                           if (!grepl(pattern, name)) 
[16:18:48.205]                             next
[16:18:48.205]                           invokeRestart(restart)
[16:18:48.205]                           muffled <- TRUE
[16:18:48.205]                           break
[16:18:48.205]                         }
[16:18:48.205]                       }
[16:18:48.205]                     }
[16:18:48.205]                     invisible(muffled)
[16:18:48.205]                   }
[16:18:48.205]                   muffleCondition(cond)
[16:18:48.205]                 })
[16:18:48.205]             }))
[16:18:48.205]             future::FutureResult(value = ...future.value$value, 
[16:18:48.205]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:48.205]                   ...future.rng), globalenv = if (FALSE) 
[16:18:48.205]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:18:48.205]                     ...future.globalenv.names))
[16:18:48.205]                 else NULL, started = ...future.startTime, version = "1.8")
[16:18:48.205]         }, condition = base::local({
[16:18:48.205]             c <- base::c
[16:18:48.205]             inherits <- base::inherits
[16:18:48.205]             invokeRestart <- base::invokeRestart
[16:18:48.205]             length <- base::length
[16:18:48.205]             list <- base::list
[16:18:48.205]             seq.int <- base::seq.int
[16:18:48.205]             signalCondition <- base::signalCondition
[16:18:48.205]             sys.calls <- base::sys.calls
[16:18:48.205]             `[[` <- base::`[[`
[16:18:48.205]             `+` <- base::`+`
[16:18:48.205]             `<<-` <- base::`<<-`
[16:18:48.205]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:18:48.205]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:18:48.205]                   3L)]
[16:18:48.205]             }
[16:18:48.205]             function(cond) {
[16:18:48.205]                 is_error <- inherits(cond, "error")
[16:18:48.205]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:18:48.205]                   NULL)
[16:18:48.205]                 if (is_error) {
[16:18:48.205]                   sessionInformation <- function() {
[16:18:48.205]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:18:48.205]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:18:48.205]                       search = base::search(), system = base::Sys.info())
[16:18:48.205]                   }
[16:18:48.205]                   ...future.conditions[[length(...future.conditions) + 
[16:18:48.205]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:18:48.205]                     cond$call), session = sessionInformation(), 
[16:18:48.205]                     timestamp = base::Sys.time(), signaled = 0L)
[16:18:48.205]                   signalCondition(cond)
[16:18:48.205]                 }
[16:18:48.205]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:18:48.205]                 "immediateCondition"))) {
[16:18:48.205]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:18:48.205]                   ...future.conditions[[length(...future.conditions) + 
[16:18:48.205]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:18:48.205]                   if (TRUE && !signal) {
[16:18:48.205]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:48.205]                     {
[16:18:48.205]                       inherits <- base::inherits
[16:18:48.205]                       invokeRestart <- base::invokeRestart
[16:18:48.205]                       is.null <- base::is.null
[16:18:48.205]                       muffled <- FALSE
[16:18:48.205]                       if (inherits(cond, "message")) {
[16:18:48.205]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:48.205]                         if (muffled) 
[16:18:48.205]                           invokeRestart("muffleMessage")
[16:18:48.205]                       }
[16:18:48.205]                       else if (inherits(cond, "warning")) {
[16:18:48.205]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:48.205]                         if (muffled) 
[16:18:48.205]                           invokeRestart("muffleWarning")
[16:18:48.205]                       }
[16:18:48.205]                       else if (inherits(cond, "condition")) {
[16:18:48.205]                         if (!is.null(pattern)) {
[16:18:48.205]                           computeRestarts <- base::computeRestarts
[16:18:48.205]                           grepl <- base::grepl
[16:18:48.205]                           restarts <- computeRestarts(cond)
[16:18:48.205]                           for (restart in restarts) {
[16:18:48.205]                             name <- restart$name
[16:18:48.205]                             if (is.null(name)) 
[16:18:48.205]                               next
[16:18:48.205]                             if (!grepl(pattern, name)) 
[16:18:48.205]                               next
[16:18:48.205]                             invokeRestart(restart)
[16:18:48.205]                             muffled <- TRUE
[16:18:48.205]                             break
[16:18:48.205]                           }
[16:18:48.205]                         }
[16:18:48.205]                       }
[16:18:48.205]                       invisible(muffled)
[16:18:48.205]                     }
[16:18:48.205]                     muffleCondition(cond, pattern = "^muffle")
[16:18:48.205]                   }
[16:18:48.205]                 }
[16:18:48.205]                 else {
[16:18:48.205]                   if (TRUE) {
[16:18:48.205]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:48.205]                     {
[16:18:48.205]                       inherits <- base::inherits
[16:18:48.205]                       invokeRestart <- base::invokeRestart
[16:18:48.205]                       is.null <- base::is.null
[16:18:48.205]                       muffled <- FALSE
[16:18:48.205]                       if (inherits(cond, "message")) {
[16:18:48.205]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:48.205]                         if (muffled) 
[16:18:48.205]                           invokeRestart("muffleMessage")
[16:18:48.205]                       }
[16:18:48.205]                       else if (inherits(cond, "warning")) {
[16:18:48.205]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:48.205]                         if (muffled) 
[16:18:48.205]                           invokeRestart("muffleWarning")
[16:18:48.205]                       }
[16:18:48.205]                       else if (inherits(cond, "condition")) {
[16:18:48.205]                         if (!is.null(pattern)) {
[16:18:48.205]                           computeRestarts <- base::computeRestarts
[16:18:48.205]                           grepl <- base::grepl
[16:18:48.205]                           restarts <- computeRestarts(cond)
[16:18:48.205]                           for (restart in restarts) {
[16:18:48.205]                             name <- restart$name
[16:18:48.205]                             if (is.null(name)) 
[16:18:48.205]                               next
[16:18:48.205]                             if (!grepl(pattern, name)) 
[16:18:48.205]                               next
[16:18:48.205]                             invokeRestart(restart)
[16:18:48.205]                             muffled <- TRUE
[16:18:48.205]                             break
[16:18:48.205]                           }
[16:18:48.205]                         }
[16:18:48.205]                       }
[16:18:48.205]                       invisible(muffled)
[16:18:48.205]                     }
[16:18:48.205]                     muffleCondition(cond, pattern = "^muffle")
[16:18:48.205]                   }
[16:18:48.205]                 }
[16:18:48.205]             }
[16:18:48.205]         }))
[16:18:48.205]     }, error = function(ex) {
[16:18:48.205]         base::structure(base::list(value = NULL, visible = NULL, 
[16:18:48.205]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:48.205]                 ...future.rng), started = ...future.startTime, 
[16:18:48.205]             finished = Sys.time(), session_uuid = NA_character_, 
[16:18:48.205]             version = "1.8"), class = "FutureResult")
[16:18:48.205]     }, finally = {
[16:18:48.205]         if (!identical(...future.workdir, getwd())) 
[16:18:48.205]             setwd(...future.workdir)
[16:18:48.205]         {
[16:18:48.205]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:18:48.205]                 ...future.oldOptions$nwarnings <- NULL
[16:18:48.205]             }
[16:18:48.205]             base::options(...future.oldOptions)
[16:18:48.205]             if (.Platform$OS.type == "windows") {
[16:18:48.205]                 old_names <- names(...future.oldEnvVars)
[16:18:48.205]                 envs <- base::Sys.getenv()
[16:18:48.205]                 names <- names(envs)
[16:18:48.205]                 common <- intersect(names, old_names)
[16:18:48.205]                 added <- setdiff(names, old_names)
[16:18:48.205]                 removed <- setdiff(old_names, names)
[16:18:48.205]                 changed <- common[...future.oldEnvVars[common] != 
[16:18:48.205]                   envs[common]]
[16:18:48.205]                 NAMES <- toupper(changed)
[16:18:48.205]                 args <- list()
[16:18:48.205]                 for (kk in seq_along(NAMES)) {
[16:18:48.205]                   name <- changed[[kk]]
[16:18:48.205]                   NAME <- NAMES[[kk]]
[16:18:48.205]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:48.205]                     next
[16:18:48.205]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:48.205]                 }
[16:18:48.205]                 NAMES <- toupper(added)
[16:18:48.205]                 for (kk in seq_along(NAMES)) {
[16:18:48.205]                   name <- added[[kk]]
[16:18:48.205]                   NAME <- NAMES[[kk]]
[16:18:48.205]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:48.205]                     next
[16:18:48.205]                   args[[name]] <- ""
[16:18:48.205]                 }
[16:18:48.205]                 NAMES <- toupper(removed)
[16:18:48.205]                 for (kk in seq_along(NAMES)) {
[16:18:48.205]                   name <- removed[[kk]]
[16:18:48.205]                   NAME <- NAMES[[kk]]
[16:18:48.205]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:48.205]                     next
[16:18:48.205]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:48.205]                 }
[16:18:48.205]                 if (length(args) > 0) 
[16:18:48.205]                   base::do.call(base::Sys.setenv, args = args)
[16:18:48.205]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:18:48.205]             }
[16:18:48.205]             else {
[16:18:48.205]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:18:48.205]             }
[16:18:48.205]             {
[16:18:48.205]                 if (base::length(...future.futureOptionsAdded) > 
[16:18:48.205]                   0L) {
[16:18:48.205]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:18:48.205]                   base::names(opts) <- ...future.futureOptionsAdded
[16:18:48.205]                   base::options(opts)
[16:18:48.205]                 }
[16:18:48.205]                 {
[16:18:48.205]                   {
[16:18:48.205]                     base::options(mc.cores = ...future.mc.cores.old)
[16:18:48.205]                     NULL
[16:18:48.205]                   }
[16:18:48.205]                   options(future.plan = NULL)
[16:18:48.205]                   if (is.na(NA_character_)) 
[16:18:48.205]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:18:48.205]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:18:48.205]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:18:48.205]                     .init = FALSE)
[16:18:48.205]                 }
[16:18:48.205]             }
[16:18:48.205]         }
[16:18:48.205]     })
[16:18:48.205]     if (TRUE) {
[16:18:48.205]         base::sink(type = "output", split = FALSE)
[16:18:48.205]         if (TRUE) {
[16:18:48.205]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:18:48.205]         }
[16:18:48.205]         else {
[16:18:48.205]             ...future.result["stdout"] <- base::list(NULL)
[16:18:48.205]         }
[16:18:48.205]         base::close(...future.stdout)
[16:18:48.205]         ...future.stdout <- NULL
[16:18:48.205]     }
[16:18:48.205]     ...future.result$conditions <- ...future.conditions
[16:18:48.205]     ...future.result$finished <- base::Sys.time()
[16:18:48.205]     ...future.result
[16:18:48.205] }
[16:18:48.209] assign_globals() ...
[16:18:48.209] List of 5
[16:18:48.209]  $ ...future.FUN            :function (...)  
[16:18:48.209]  $ future.call.arguments    : list()
[16:18:48.209]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:48.209]  $ ...future.elements_ii    :List of 3
[16:18:48.209]   ..$ : int 0
[16:18:48.209]   ..$ : int 0
[16:18:48.209]   ..$ : int 0
[16:18:48.209]  $ ...future.seeds_ii       :List of 3
[16:18:48.209]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[16:18:48.209]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[16:18:48.209]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[16:18:48.209]  $ ...future.globals.maxSize: NULL
[16:18:48.209]  - attr(*, "where")=List of 5
[16:18:48.209]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:18:48.209]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:18:48.209]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:18:48.209]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:18:48.209]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:18:48.209]  - attr(*, "resolved")= logi FALSE
[16:18:48.209]  - attr(*, "total_size")= num 616
[16:18:48.209]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:48.209]  - attr(*, "already-done")= logi TRUE
[16:18:48.221] - reassign environment for ‘...future.FUN’
[16:18:48.221] - copied ‘...future.FUN’ to environment
[16:18:48.222] - copied ‘future.call.arguments’ to environment
[16:18:48.222] - copied ‘...future.elements_ii’ to environment
[16:18:48.222] - copied ‘...future.seeds_ii’ to environment
[16:18:48.222] - copied ‘...future.globals.maxSize’ to environment
[16:18:48.222] assign_globals() ... done
[16:18:48.222] requestCore(): workers = 2
[16:18:48.225] MulticoreFuture started
[16:18:48.225] - Launch lazy future ... done
[16:18:48.225] run() for ‘MulticoreFuture’ ... done
[16:18:48.226] Created future:
[16:18:48.226] plan(): Setting new future strategy stack:
[16:18:48.227] List of future strategies:
[16:18:48.227] 1. sequential:
[16:18:48.227]    - args: function (..., envir = parent.frame())
[16:18:48.227]    - tweaked: FALSE
[16:18:48.227]    - call: NULL
[16:18:48.227] plan(): nbrOfWorkers() = 1
[16:18:48.230] plan(): Setting new future strategy stack:
[16:18:48.230] List of future strategies:
[16:18:48.230] 1. multicore:
[16:18:48.230]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:18:48.230]    - tweaked: FALSE
[16:18:48.230]    - call: plan(strategy)
[16:18:48.235] plan(): nbrOfWorkers() = 2
[16:18:48.226] MulticoreFuture:
[16:18:48.226] Label: ‘future_replicate-2’
[16:18:48.226] Expression:
[16:18:48.226] {
[16:18:48.226]     do.call(function(...) {
[16:18:48.226]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:48.226]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:48.226]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:48.226]             on.exit(options(oopts), add = TRUE)
[16:18:48.226]         }
[16:18:48.226]         {
[16:18:48.226]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:48.226]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:48.226]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:48.226]                   envir = globalenv(), inherits = FALSE)
[16:18:48.226]                 ...future.FUN(...future.X_jj, ...)
[16:18:48.226]             })
[16:18:48.226]         }
[16:18:48.226]     }, args = future.call.arguments)
[16:18:48.226] }
[16:18:48.226] Lazy evaluation: FALSE
[16:18:48.226] Asynchronous evaluation: TRUE
[16:18:48.226] Local evaluation: TRUE
[16:18:48.226] Environment: R_GlobalEnv
[16:18:48.226] Capture standard output: TRUE
[16:18:48.226] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:18:48.226] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:18:48.226] Packages: <none>
[16:18:48.226] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:18:48.226] Resolved: TRUE
[16:18:48.226] Value: <not collected>
[16:18:48.226] Conditions captured: <none>
[16:18:48.226] Early signaling: FALSE
[16:18:48.226] Owner process: 20271db5-d788-b537-4432-0a26f2d2d030
[16:18:48.226] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:48.237] Chunk #2 of 2 ... DONE
[16:18:48.237] Launching 2 futures (chunks) ... DONE
[16:18:48.237] Resolving 2 futures (chunks) ...
[16:18:48.237] resolve() on list ...
[16:18:48.237]  recursive: 0
[16:18:48.237]  length: 2
[16:18:48.238] 
[16:18:48.238] Future #1
[16:18:48.238] result() for MulticoreFuture ...
[16:18:48.239] result() for MulticoreFuture ...
[16:18:48.239] result() for MulticoreFuture ... done
[16:18:48.239] result() for MulticoreFuture ... done
[16:18:48.239] result() for MulticoreFuture ...
[16:18:48.240] result() for MulticoreFuture ... done
[16:18:48.240] signalConditionsASAP(MulticoreFuture, pos=1) ...
[16:18:48.240] - nx: 2
[16:18:48.240] - relay: TRUE
[16:18:48.240] - stdout: TRUE
[16:18:48.240] - signal: TRUE
[16:18:48.240] - resignal: FALSE
[16:18:48.241] - force: TRUE
[16:18:48.241] - relayed: [n=2] FALSE, FALSE
[16:18:48.241] - queued futures: [n=2] FALSE, FALSE
[16:18:48.241]  - until=1
[16:18:48.241]  - relaying element #1
[16:18:48.241] result() for MulticoreFuture ...
[16:18:48.241] result() for MulticoreFuture ... done
[16:18:48.242] result() for MulticoreFuture ...
[16:18:48.242] result() for MulticoreFuture ... done
[16:18:48.242] result() for MulticoreFuture ...
[16:18:48.242] result() for MulticoreFuture ... done
[16:18:48.242] result() for MulticoreFuture ...
[16:18:48.242] result() for MulticoreFuture ... done
[16:18:48.243] - relayed: [n=2] TRUE, FALSE
[16:18:48.243] - queued futures: [n=2] TRUE, FALSE
[16:18:48.243] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[16:18:48.243]  length: 1 (resolved future 1)
[16:18:48.243] Future #2
[16:18:48.244] result() for MulticoreFuture ...
[16:18:48.244] result() for MulticoreFuture ...
[16:18:48.245] result() for MulticoreFuture ... done
[16:18:48.245] result() for MulticoreFuture ... done
[16:18:48.245] result() for MulticoreFuture ...
[16:18:48.245] result() for MulticoreFuture ... done
[16:18:48.245] signalConditionsASAP(MulticoreFuture, pos=2) ...
[16:18:48.245] - nx: 2
[16:18:48.245] - relay: TRUE
[16:18:48.246] - stdout: TRUE
[16:18:48.246] - signal: TRUE
[16:18:48.246] - resignal: FALSE
[16:18:48.246] - force: TRUE
[16:18:48.246] - relayed: [n=2] TRUE, FALSE
[16:18:48.246] - queued futures: [n=2] TRUE, FALSE
[16:18:48.246]  - until=2
[16:18:48.246]  - relaying element #2
[16:18:48.247] result() for MulticoreFuture ...
[16:18:48.247] result() for MulticoreFuture ... done
[16:18:48.247] result() for MulticoreFuture ...
[16:18:48.247] result() for MulticoreFuture ... done
[16:18:48.247] result() for MulticoreFuture ...
[16:18:48.247] result() for MulticoreFuture ... done
[16:18:48.247] result() for MulticoreFuture ...
[16:18:48.247] result() for MulticoreFuture ... done
[16:18:48.248] - relayed: [n=2] TRUE, TRUE
[16:18:48.248] - queued futures: [n=2] TRUE, TRUE
[16:18:48.248] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[16:18:48.248]  length: 0 (resolved future 2)
[16:18:48.248] Relaying remaining futures
[16:18:48.248] signalConditionsASAP(NULL, pos=0) ...
[16:18:48.248] - nx: 2
[16:18:48.248] - relay: TRUE
[16:18:48.248] - stdout: TRUE
[16:18:48.249] - signal: TRUE
[16:18:48.249] - resignal: FALSE
[16:18:48.249] - force: TRUE
[16:18:48.249] - relayed: [n=2] TRUE, TRUE
[16:18:48.249] - queued futures: [n=2] TRUE, TRUE
 - flush all
[16:18:48.249] - relayed: [n=2] TRUE, TRUE
[16:18:48.249] - queued futures: [n=2] TRUE, TRUE
[16:18:48.249] signalConditionsASAP(NULL, pos=0) ... done
[16:18:48.249] resolve() on list ... DONE
[16:18:48.250] result() for MulticoreFuture ...
[16:18:48.250] result() for MulticoreFuture ... done
[16:18:48.250] result() for MulticoreFuture ...
[16:18:48.250] result() for MulticoreFuture ... done
[16:18:48.250] result() for MulticoreFuture ...
[16:18:48.250] result() for MulticoreFuture ... done
[16:18:48.250] result() for MulticoreFuture ...
[16:18:48.250] result() for MulticoreFuture ... done
[16:18:48.251]  - Number of value chunks collected: 2
[16:18:48.251] Resolving 2 futures (chunks) ... DONE
[16:18:48.251] Reducing values from 2 chunks ...
[16:18:48.251]  - Number of values collected after concatenation: 5
[16:18:48.251]  - Number of values expected: 5
[16:18:48.251] Reducing values from 2 chunks ... DONE
[16:18:48.251] future_lapply() ... DONE
[16:18:48.251] future_lapply() ...
[16:18:48.252] Generating random seeds ...
[16:18:48.252] Generating random seed streams for 5 elements ...
[16:18:48.252] Generating random seed streams for 5 elements ... DONE
[16:18:48.253] Generating random seeds ... DONE
[16:18:48.253] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:18:48.258] Number of chunks: 2
[16:18:48.258] getGlobalsAndPackagesXApply() ...
[16:18:48.258]  - future.globals: TRUE
[16:18:48.258] getGlobalsAndPackages() ...
[16:18:48.258] Searching for globals...
[16:18:48.260] - globals found: [2] ‘FUN’, ‘sample’
[16:18:48.260] Searching for globals ... DONE
[16:18:48.262] Resolving globals: FALSE
[16:18:48.263] The total size of the 1 globals is 616 bytes (616 bytes)
[16:18:48.263] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:18:48.263] - globals: [1] ‘FUN’
[16:18:48.264] 
[16:18:48.264] getGlobalsAndPackages() ... DONE
[16:18:48.264]  - globals found/used: [n=1] ‘FUN’
[16:18:48.264]  - needed namespaces: [n=0] 
[16:18:48.264] Finding globals ... DONE
[16:18:48.264]  - use_args: TRUE
[16:18:48.264]  - Getting '...' globals ...
[16:18:48.265] resolve() on list ...
[16:18:48.265]  recursive: 0
[16:18:48.265]  length: 1
[16:18:48.265]  elements: ‘...’
[16:18:48.265]  length: 0 (resolved future 1)
[16:18:48.266] resolve() on list ... DONE
[16:18:48.266]    - '...' content: [n=0] 
[16:18:48.266] List of 1
[16:18:48.266]  $ ...: list()
[16:18:48.266]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:48.266]  - attr(*, "where")=List of 1
[16:18:48.266]   ..$ ...:<environment: 0x55e7a09ae590> 
[16:18:48.266]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:48.266]  - attr(*, "resolved")= logi TRUE
[16:18:48.266]  - attr(*, "total_size")= num NA
[16:18:48.269]  - Getting '...' globals ... DONE
[16:18:48.269] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:18:48.269] List of 2
[16:18:48.269]  $ ...future.FUN:function (...)  
[16:18:48.269]  $ ...          : list()
[16:18:48.269]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:48.269]  - attr(*, "where")=List of 2
[16:18:48.269]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:18:48.269]   ..$ ...          :<environment: 0x55e7a09ae590> 
[16:18:48.269]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:48.269]  - attr(*, "resolved")= logi FALSE
[16:18:48.269]  - attr(*, "total_size")= num 616
[16:18:48.272] Packages to be attached in all futures: [n=0] 
[16:18:48.272] getGlobalsAndPackagesXApply() ... DONE
[16:18:48.272] Number of futures (= number of chunks): 2
[16:18:48.272] Launching 2 futures (chunks) ...
[16:18:48.272] Chunk #1 of 2 ...
[16:18:48.273]  - Finding globals in 'X' for chunk #1 ...
[16:18:48.273] getGlobalsAndPackages() ...
[16:18:48.273] Searching for globals...
[16:18:48.273] 
[16:18:48.273] Searching for globals ... DONE
[16:18:48.273] - globals: [0] <none>
[16:18:48.273] getGlobalsAndPackages() ... DONE
[16:18:48.273]    + additional globals found: [n=0] 
[16:18:48.274]    + additional namespaces needed: [n=0] 
[16:18:48.274]  - Finding globals in 'X' for chunk #1 ... DONE
[16:18:48.274]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:18:48.274]  - seeds: [2] <seeds>
[16:18:48.274]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:48.274] getGlobalsAndPackages() ...
[16:18:48.274] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:48.274] Resolving globals: FALSE
[16:18:48.274] Tweak future expression to call with '...' arguments ...
[16:18:48.275] {
[16:18:48.275]     do.call(function(...) {
[16:18:48.275]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:48.275]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:48.275]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:48.275]             on.exit(options(oopts), add = TRUE)
[16:18:48.275]         }
[16:18:48.275]         {
[16:18:48.275]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:48.275]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:48.275]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:48.275]                   envir = globalenv(), inherits = FALSE)
[16:18:48.275]                 ...future.FUN(...future.X_jj, ...)
[16:18:48.275]             })
[16:18:48.275]         }
[16:18:48.275]     }, args = future.call.arguments)
[16:18:48.275] }
[16:18:48.275] Tweak future expression to call with '...' arguments ... DONE
[16:18:48.275] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:48.275] 
[16:18:48.275] getGlobalsAndPackages() ... DONE
[16:18:48.276] run() for ‘Future’ ...
[16:18:48.276] - state: ‘created’
[16:18:48.276] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:18:48.280] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:48.280] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:18:48.280]   - Field: ‘label’
[16:18:48.280]   - Field: ‘local’
[16:18:48.280]   - Field: ‘owner’
[16:18:48.280]   - Field: ‘envir’
[16:18:48.280]   - Field: ‘workers’
[16:18:48.281]   - Field: ‘packages’
[16:18:48.281]   - Field: ‘gc’
[16:18:48.281]   - Field: ‘job’
[16:18:48.281]   - Field: ‘conditions’
[16:18:48.281]   - Field: ‘expr’
[16:18:48.281]   - Field: ‘uuid’
[16:18:48.281]   - Field: ‘seed’
[16:18:48.281]   - Field: ‘version’
[16:18:48.281]   - Field: ‘result’
[16:18:48.281]   - Field: ‘asynchronous’
[16:18:48.281]   - Field: ‘calls’
[16:18:48.282]   - Field: ‘globals’
[16:18:48.282]   - Field: ‘stdout’
[16:18:48.282]   - Field: ‘earlySignal’
[16:18:48.282]   - Field: ‘lazy’
[16:18:48.282]   - Field: ‘state’
[16:18:48.282] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:18:48.282] - Launch lazy future ...
[16:18:48.282] Packages needed by the future expression (n = 0): <none>
[16:18:48.283] Packages needed by future strategies (n = 0): <none>
[16:18:48.283] {
[16:18:48.283]     {
[16:18:48.283]         {
[16:18:48.283]             ...future.startTime <- base::Sys.time()
[16:18:48.283]             {
[16:18:48.283]                 {
[16:18:48.283]                   {
[16:18:48.283]                     {
[16:18:48.283]                       base::local({
[16:18:48.283]                         has_future <- base::requireNamespace("future", 
[16:18:48.283]                           quietly = TRUE)
[16:18:48.283]                         if (has_future) {
[16:18:48.283]                           ns <- base::getNamespace("future")
[16:18:48.283]                           version <- ns[[".package"]][["version"]]
[16:18:48.283]                           if (is.null(version)) 
[16:18:48.283]                             version <- utils::packageVersion("future")
[16:18:48.283]                         }
[16:18:48.283]                         else {
[16:18:48.283]                           version <- NULL
[16:18:48.283]                         }
[16:18:48.283]                         if (!has_future || version < "1.8.0") {
[16:18:48.283]                           info <- base::c(r_version = base::gsub("R version ", 
[16:18:48.283]                             "", base::R.version$version.string), 
[16:18:48.283]                             platform = base::sprintf("%s (%s-bit)", 
[16:18:48.283]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:18:48.283]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:18:48.283]                               "release", "version")], collapse = " "), 
[16:18:48.283]                             hostname = base::Sys.info()[["nodename"]])
[16:18:48.283]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:18:48.283]                             info)
[16:18:48.283]                           info <- base::paste(info, collapse = "; ")
[16:18:48.283]                           if (!has_future) {
[16:18:48.283]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:18:48.283]                               info)
[16:18:48.283]                           }
[16:18:48.283]                           else {
[16:18:48.283]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:18:48.283]                               info, version)
[16:18:48.283]                           }
[16:18:48.283]                           base::stop(msg)
[16:18:48.283]                         }
[16:18:48.283]                       })
[16:18:48.283]                     }
[16:18:48.283]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:18:48.283]                     base::options(mc.cores = 1L)
[16:18:48.283]                   }
[16:18:48.283]                   ...future.strategy.old <- future::plan("list")
[16:18:48.283]                   options(future.plan = NULL)
[16:18:48.283]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:18:48.283]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:18:48.283]                 }
[16:18:48.283]                 ...future.workdir <- getwd()
[16:18:48.283]             }
[16:18:48.283]             ...future.oldOptions <- base::as.list(base::.Options)
[16:18:48.283]             ...future.oldEnvVars <- base::Sys.getenv()
[16:18:48.283]         }
[16:18:48.283]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:18:48.283]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:18:48.283]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:18:48.283]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:18:48.283]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:18:48.283]             future.stdout.windows.reencode = NULL, width = 80L)
[16:18:48.283]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:18:48.283]             base::names(...future.oldOptions))
[16:18:48.283]     }
[16:18:48.283]     if (FALSE) {
[16:18:48.283]     }
[16:18:48.283]     else {
[16:18:48.283]         if (TRUE) {
[16:18:48.283]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:18:48.283]                 open = "w")
[16:18:48.283]         }
[16:18:48.283]         else {
[16:18:48.283]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:18:48.283]                 windows = "NUL", "/dev/null"), open = "w")
[16:18:48.283]         }
[16:18:48.283]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:18:48.283]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:18:48.283]             base::sink(type = "output", split = FALSE)
[16:18:48.283]             base::close(...future.stdout)
[16:18:48.283]         }, add = TRUE)
[16:18:48.283]     }
[16:18:48.283]     ...future.frame <- base::sys.nframe()
[16:18:48.283]     ...future.conditions <- base::list()
[16:18:48.283]     ...future.rng <- base::globalenv()$.Random.seed
[16:18:48.283]     if (FALSE) {
[16:18:48.283]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:18:48.283]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:18:48.283]     }
[16:18:48.283]     ...future.result <- base::tryCatch({
[16:18:48.283]         base::withCallingHandlers({
[16:18:48.283]             ...future.value <- base::withVisible(base::local({
[16:18:48.283]                 withCallingHandlers({
[16:18:48.283]                   {
[16:18:48.283]                     do.call(function(...) {
[16:18:48.283]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:48.283]                       if (!identical(...future.globals.maxSize.org, 
[16:18:48.283]                         ...future.globals.maxSize)) {
[16:18:48.283]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:48.283]                         on.exit(options(oopts), add = TRUE)
[16:18:48.283]                       }
[16:18:48.283]                       {
[16:18:48.283]                         lapply(seq_along(...future.elements_ii), 
[16:18:48.283]                           FUN = function(jj) {
[16:18:48.283]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:48.283]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:48.283]                               envir = globalenv(), inherits = FALSE)
[16:18:48.283]                             ...future.FUN(...future.X_jj, ...)
[16:18:48.283]                           })
[16:18:48.283]                       }
[16:18:48.283]                     }, args = future.call.arguments)
[16:18:48.283]                   }
[16:18:48.283]                 }, immediateCondition = function(cond) {
[16:18:48.283]                   save_rds <- function (object, pathname, ...) 
[16:18:48.283]                   {
[16:18:48.283]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:18:48.283]                     if (file_test("-f", pathname_tmp)) {
[16:18:48.283]                       fi_tmp <- file.info(pathname_tmp)
[16:18:48.283]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:18:48.283]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:18:48.283]                         fi_tmp[["mtime"]])
[16:18:48.283]                     }
[16:18:48.283]                     tryCatch({
[16:18:48.283]                       saveRDS(object, file = pathname_tmp, ...)
[16:18:48.283]                     }, error = function(ex) {
[16:18:48.283]                       msg <- conditionMessage(ex)
[16:18:48.283]                       fi_tmp <- file.info(pathname_tmp)
[16:18:48.283]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:18:48.283]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:18:48.283]                         fi_tmp[["mtime"]], msg)
[16:18:48.283]                       ex$message <- msg
[16:18:48.283]                       stop(ex)
[16:18:48.283]                     })
[16:18:48.283]                     stopifnot(file_test("-f", pathname_tmp))
[16:18:48.283]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:18:48.283]                     if (!res || file_test("-f", pathname_tmp)) {
[16:18:48.283]                       fi_tmp <- file.info(pathname_tmp)
[16:18:48.283]                       fi <- file.info(pathname)
[16:18:48.283]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:18:48.283]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:18:48.283]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:18:48.283]                         fi[["size"]], fi[["mtime"]])
[16:18:48.283]                       stop(msg)
[16:18:48.283]                     }
[16:18:48.283]                     invisible(pathname)
[16:18:48.283]                   }
[16:18:48.283]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:18:48.283]                     rootPath = tempdir()) 
[16:18:48.283]                   {
[16:18:48.283]                     obj <- list(time = Sys.time(), condition = cond)
[16:18:48.283]                     file <- tempfile(pattern = class(cond)[1], 
[16:18:48.283]                       tmpdir = path, fileext = ".rds")
[16:18:48.283]                     save_rds(obj, file)
[16:18:48.283]                   }
[16:18:48.283]                   saveImmediateCondition(cond, path = "/tmp/RtmpZpTIv7/.future/immediateConditions")
[16:18:48.283]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:48.283]                   {
[16:18:48.283]                     inherits <- base::inherits
[16:18:48.283]                     invokeRestart <- base::invokeRestart
[16:18:48.283]                     is.null <- base::is.null
[16:18:48.283]                     muffled <- FALSE
[16:18:48.283]                     if (inherits(cond, "message")) {
[16:18:48.283]                       muffled <- grepl(pattern, "muffleMessage")
[16:18:48.283]                       if (muffled) 
[16:18:48.283]                         invokeRestart("muffleMessage")
[16:18:48.283]                     }
[16:18:48.283]                     else if (inherits(cond, "warning")) {
[16:18:48.283]                       muffled <- grepl(pattern, "muffleWarning")
[16:18:48.283]                       if (muffled) 
[16:18:48.283]                         invokeRestart("muffleWarning")
[16:18:48.283]                     }
[16:18:48.283]                     else if (inherits(cond, "condition")) {
[16:18:48.283]                       if (!is.null(pattern)) {
[16:18:48.283]                         computeRestarts <- base::computeRestarts
[16:18:48.283]                         grepl <- base::grepl
[16:18:48.283]                         restarts <- computeRestarts(cond)
[16:18:48.283]                         for (restart in restarts) {
[16:18:48.283]                           name <- restart$name
[16:18:48.283]                           if (is.null(name)) 
[16:18:48.283]                             next
[16:18:48.283]                           if (!grepl(pattern, name)) 
[16:18:48.283]                             next
[16:18:48.283]                           invokeRestart(restart)
[16:18:48.283]                           muffled <- TRUE
[16:18:48.283]                           break
[16:18:48.283]                         }
[16:18:48.283]                       }
[16:18:48.283]                     }
[16:18:48.283]                     invisible(muffled)
[16:18:48.283]                   }
[16:18:48.283]                   muffleCondition(cond)
[16:18:48.283]                 })
[16:18:48.283]             }))
[16:18:48.283]             future::FutureResult(value = ...future.value$value, 
[16:18:48.283]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:48.283]                   ...future.rng), globalenv = if (FALSE) 
[16:18:48.283]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:18:48.283]                     ...future.globalenv.names))
[16:18:48.283]                 else NULL, started = ...future.startTime, version = "1.8")
[16:18:48.283]         }, condition = base::local({
[16:18:48.283]             c <- base::c
[16:18:48.283]             inherits <- base::inherits
[16:18:48.283]             invokeRestart <- base::invokeRestart
[16:18:48.283]             length <- base::length
[16:18:48.283]             list <- base::list
[16:18:48.283]             seq.int <- base::seq.int
[16:18:48.283]             signalCondition <- base::signalCondition
[16:18:48.283]             sys.calls <- base::sys.calls
[16:18:48.283]             `[[` <- base::`[[`
[16:18:48.283]             `+` <- base::`+`
[16:18:48.283]             `<<-` <- base::`<<-`
[16:18:48.283]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:18:48.283]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:18:48.283]                   3L)]
[16:18:48.283]             }
[16:18:48.283]             function(cond) {
[16:18:48.283]                 is_error <- inherits(cond, "error")
[16:18:48.283]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:18:48.283]                   NULL)
[16:18:48.283]                 if (is_error) {
[16:18:48.283]                   sessionInformation <- function() {
[16:18:48.283]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:18:48.283]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:18:48.283]                       search = base::search(), system = base::Sys.info())
[16:18:48.283]                   }
[16:18:48.283]                   ...future.conditions[[length(...future.conditions) + 
[16:18:48.283]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:18:48.283]                     cond$call), session = sessionInformation(), 
[16:18:48.283]                     timestamp = base::Sys.time(), signaled = 0L)
[16:18:48.283]                   signalCondition(cond)
[16:18:48.283]                 }
[16:18:48.283]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:18:48.283]                 "immediateCondition"))) {
[16:18:48.283]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:18:48.283]                   ...future.conditions[[length(...future.conditions) + 
[16:18:48.283]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:18:48.283]                   if (TRUE && !signal) {
[16:18:48.283]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:48.283]                     {
[16:18:48.283]                       inherits <- base::inherits
[16:18:48.283]                       invokeRestart <- base::invokeRestart
[16:18:48.283]                       is.null <- base::is.null
[16:18:48.283]                       muffled <- FALSE
[16:18:48.283]                       if (inherits(cond, "message")) {
[16:18:48.283]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:48.283]                         if (muffled) 
[16:18:48.283]                           invokeRestart("muffleMessage")
[16:18:48.283]                       }
[16:18:48.283]                       else if (inherits(cond, "warning")) {
[16:18:48.283]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:48.283]                         if (muffled) 
[16:18:48.283]                           invokeRestart("muffleWarning")
[16:18:48.283]                       }
[16:18:48.283]                       else if (inherits(cond, "condition")) {
[16:18:48.283]                         if (!is.null(pattern)) {
[16:18:48.283]                           computeRestarts <- base::computeRestarts
[16:18:48.283]                           grepl <- base::grepl
[16:18:48.283]                           restarts <- computeRestarts(cond)
[16:18:48.283]                           for (restart in restarts) {
[16:18:48.283]                             name <- restart$name
[16:18:48.283]                             if (is.null(name)) 
[16:18:48.283]                               next
[16:18:48.283]                             if (!grepl(pattern, name)) 
[16:18:48.283]                               next
[16:18:48.283]                             invokeRestart(restart)
[16:18:48.283]                             muffled <- TRUE
[16:18:48.283]                             break
[16:18:48.283]                           }
[16:18:48.283]                         }
[16:18:48.283]                       }
[16:18:48.283]                       invisible(muffled)
[16:18:48.283]                     }
[16:18:48.283]                     muffleCondition(cond, pattern = "^muffle")
[16:18:48.283]                   }
[16:18:48.283]                 }
[16:18:48.283]                 else {
[16:18:48.283]                   if (TRUE) {
[16:18:48.283]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:48.283]                     {
[16:18:48.283]                       inherits <- base::inherits
[16:18:48.283]                       invokeRestart <- base::invokeRestart
[16:18:48.283]                       is.null <- base::is.null
[16:18:48.283]                       muffled <- FALSE
[16:18:48.283]                       if (inherits(cond, "message")) {
[16:18:48.283]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:48.283]                         if (muffled) 
[16:18:48.283]                           invokeRestart("muffleMessage")
[16:18:48.283]                       }
[16:18:48.283]                       else if (inherits(cond, "warning")) {
[16:18:48.283]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:48.283]                         if (muffled) 
[16:18:48.283]                           invokeRestart("muffleWarning")
[16:18:48.283]                       }
[16:18:48.283]                       else if (inherits(cond, "condition")) {
[16:18:48.283]                         if (!is.null(pattern)) {
[16:18:48.283]                           computeRestarts <- base::computeRestarts
[16:18:48.283]                           grepl <- base::grepl
[16:18:48.283]                           restarts <- computeRestarts(cond)
[16:18:48.283]                           for (restart in restarts) {
[16:18:48.283]                             name <- restart$name
[16:18:48.283]                             if (is.null(name)) 
[16:18:48.283]                               next
[16:18:48.283]                             if (!grepl(pattern, name)) 
[16:18:48.283]                               next
[16:18:48.283]                             invokeRestart(restart)
[16:18:48.283]                             muffled <- TRUE
[16:18:48.283]                             break
[16:18:48.283]                           }
[16:18:48.283]                         }
[16:18:48.283]                       }
[16:18:48.283]                       invisible(muffled)
[16:18:48.283]                     }
[16:18:48.283]                     muffleCondition(cond, pattern = "^muffle")
[16:18:48.283]                   }
[16:18:48.283]                 }
[16:18:48.283]             }
[16:18:48.283]         }))
[16:18:48.283]     }, error = function(ex) {
[16:18:48.283]         base::structure(base::list(value = NULL, visible = NULL, 
[16:18:48.283]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:48.283]                 ...future.rng), started = ...future.startTime, 
[16:18:48.283]             finished = Sys.time(), session_uuid = NA_character_, 
[16:18:48.283]             version = "1.8"), class = "FutureResult")
[16:18:48.283]     }, finally = {
[16:18:48.283]         if (!identical(...future.workdir, getwd())) 
[16:18:48.283]             setwd(...future.workdir)
[16:18:48.283]         {
[16:18:48.283]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:18:48.283]                 ...future.oldOptions$nwarnings <- NULL
[16:18:48.283]             }
[16:18:48.283]             base::options(...future.oldOptions)
[16:18:48.283]             if (.Platform$OS.type == "windows") {
[16:18:48.283]                 old_names <- names(...future.oldEnvVars)
[16:18:48.283]                 envs <- base::Sys.getenv()
[16:18:48.283]                 names <- names(envs)
[16:18:48.283]                 common <- intersect(names, old_names)
[16:18:48.283]                 added <- setdiff(names, old_names)
[16:18:48.283]                 removed <- setdiff(old_names, names)
[16:18:48.283]                 changed <- common[...future.oldEnvVars[common] != 
[16:18:48.283]                   envs[common]]
[16:18:48.283]                 NAMES <- toupper(changed)
[16:18:48.283]                 args <- list()
[16:18:48.283]                 for (kk in seq_along(NAMES)) {
[16:18:48.283]                   name <- changed[[kk]]
[16:18:48.283]                   NAME <- NAMES[[kk]]
[16:18:48.283]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:48.283]                     next
[16:18:48.283]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:48.283]                 }
[16:18:48.283]                 NAMES <- toupper(added)
[16:18:48.283]                 for (kk in seq_along(NAMES)) {
[16:18:48.283]                   name <- added[[kk]]
[16:18:48.283]                   NAME <- NAMES[[kk]]
[16:18:48.283]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:48.283]                     next
[16:18:48.283]                   args[[name]] <- ""
[16:18:48.283]                 }
[16:18:48.283]                 NAMES <- toupper(removed)
[16:18:48.283]                 for (kk in seq_along(NAMES)) {
[16:18:48.283]                   name <- removed[[kk]]
[16:18:48.283]                   NAME <- NAMES[[kk]]
[16:18:48.283]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:48.283]                     next
[16:18:48.283]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:48.283]                 }
[16:18:48.283]                 if (length(args) > 0) 
[16:18:48.283]                   base::do.call(base::Sys.setenv, args = args)
[16:18:48.283]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:18:48.283]             }
[16:18:48.283]             else {
[16:18:48.283]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:18:48.283]             }
[16:18:48.283]             {
[16:18:48.283]                 if (base::length(...future.futureOptionsAdded) > 
[16:18:48.283]                   0L) {
[16:18:48.283]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:18:48.283]                   base::names(opts) <- ...future.futureOptionsAdded
[16:18:48.283]                   base::options(opts)
[16:18:48.283]                 }
[16:18:48.283]                 {
[16:18:48.283]                   {
[16:18:48.283]                     base::options(mc.cores = ...future.mc.cores.old)
[16:18:48.283]                     NULL
[16:18:48.283]                   }
[16:18:48.283]                   options(future.plan = NULL)
[16:18:48.283]                   if (is.na(NA_character_)) 
[16:18:48.283]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:18:48.283]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:18:48.283]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:18:48.283]                     .init = FALSE)
[16:18:48.283]                 }
[16:18:48.283]             }
[16:18:48.283]         }
[16:18:48.283]     })
[16:18:48.283]     if (TRUE) {
[16:18:48.283]         base::sink(type = "output", split = FALSE)
[16:18:48.283]         if (TRUE) {
[16:18:48.283]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:18:48.283]         }
[16:18:48.283]         else {
[16:18:48.283]             ...future.result["stdout"] <- base::list(NULL)
[16:18:48.283]         }
[16:18:48.283]         base::close(...future.stdout)
[16:18:48.283]         ...future.stdout <- NULL
[16:18:48.283]     }
[16:18:48.283]     ...future.result$conditions <- ...future.conditions
[16:18:48.283]     ...future.result$finished <- base::Sys.time()
[16:18:48.283]     ...future.result
[16:18:48.283] }
[16:18:48.286] assign_globals() ...
[16:18:48.286] List of 5
[16:18:48.286]  $ ...future.FUN            :function (...)  
[16:18:48.286]  $ future.call.arguments    : list()
[16:18:48.286]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:48.286]  $ ...future.elements_ii    :List of 2
[16:18:48.286]   ..$ : int 0
[16:18:48.286]   ..$ : int 0
[16:18:48.286]  $ ...future.seeds_ii       :List of 2
[16:18:48.286]   ..$ : int [1:7] 10407 424279327 242013539 -50536943 1949045882 -966354368 52785545
[16:18:48.286]   ..$ : int [1:7] 10407 1259015031 702630336 336295781 836592074 1678845563 -511089912
[16:18:48.286]  $ ...future.globals.maxSize: NULL
[16:18:48.286]  - attr(*, "where")=List of 5
[16:18:48.286]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:18:48.286]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:18:48.286]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:18:48.286]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:18:48.286]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:18:48.286]  - attr(*, "resolved")= logi FALSE
[16:18:48.286]  - attr(*, "total_size")= num 616
[16:18:48.286]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:48.286]  - attr(*, "already-done")= logi TRUE
[16:18:48.294] - reassign environment for ‘...future.FUN’
[16:18:48.294] - copied ‘...future.FUN’ to environment
[16:18:48.294] - copied ‘future.call.arguments’ to environment
[16:18:48.294] - copied ‘...future.elements_ii’ to environment
[16:18:48.294] - copied ‘...future.seeds_ii’ to environment
[16:18:48.294] - copied ‘...future.globals.maxSize’ to environment
[16:18:48.294] assign_globals() ... done
[16:18:48.294] requestCore(): workers = 2
[16:18:48.297] MulticoreFuture started
[16:18:48.297] - Launch lazy future ... done
[16:18:48.297] run() for ‘MulticoreFuture’ ... done
[16:18:48.298] Created future:
[16:18:48.298] plan(): Setting new future strategy stack:
[16:18:48.298] List of future strategies:
[16:18:48.298] 1. sequential:
[16:18:48.298]    - args: function (..., envir = parent.frame())
[16:18:48.298]    - tweaked: FALSE
[16:18:48.298]    - call: NULL
[16:18:48.299] plan(): nbrOfWorkers() = 1
[16:18:48.301] plan(): Setting new future strategy stack:
[16:18:48.301] List of future strategies:
[16:18:48.301] 1. multicore:
[16:18:48.301]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:18:48.301]    - tweaked: FALSE
[16:18:48.301]    - call: plan(strategy)
[16:18:48.307] plan(): nbrOfWorkers() = 2
[16:18:48.298] MulticoreFuture:
[16:18:48.298] Label: ‘future_replicate-1’
[16:18:48.298] Expression:
[16:18:48.298] {
[16:18:48.298]     do.call(function(...) {
[16:18:48.298]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:48.298]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:48.298]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:48.298]             on.exit(options(oopts), add = TRUE)
[16:18:48.298]         }
[16:18:48.298]         {
[16:18:48.298]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:48.298]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:48.298]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:48.298]                   envir = globalenv(), inherits = FALSE)
[16:18:48.298]                 ...future.FUN(...future.X_jj, ...)
[16:18:48.298]             })
[16:18:48.298]         }
[16:18:48.298]     }, args = future.call.arguments)
[16:18:48.298] }
[16:18:48.298] Lazy evaluation: FALSE
[16:18:48.298] Asynchronous evaluation: TRUE
[16:18:48.298] Local evaluation: TRUE
[16:18:48.298] Environment: R_GlobalEnv
[16:18:48.298] Capture standard output: TRUE
[16:18:48.298] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:18:48.298] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:18:48.298] Packages: <none>
[16:18:48.298] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:18:48.298] Resolved: TRUE
[16:18:48.298] Value: <not collected>
[16:18:48.298] Conditions captured: <none>
[16:18:48.298] Early signaling: FALSE
[16:18:48.298] Owner process: 20271db5-d788-b537-4432-0a26f2d2d030
[16:18:48.298] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:48.308] Chunk #1 of 2 ... DONE
[16:18:48.308] Chunk #2 of 2 ...
[16:18:48.308]  - Finding globals in 'X' for chunk #2 ...
[16:18:48.308] getGlobalsAndPackages() ...
[16:18:48.308] Searching for globals...
[16:18:48.309] 
[16:18:48.309] Searching for globals ... DONE
[16:18:48.309] - globals: [0] <none>
[16:18:48.309] getGlobalsAndPackages() ... DONE
[16:18:48.309]    + additional globals found: [n=0] 
[16:18:48.309]    + additional namespaces needed: [n=0] 
[16:18:48.310]  - Finding globals in 'X' for chunk #2 ... DONE
[16:18:48.310]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:18:48.310]  - seeds: [3] <seeds>
[16:18:48.310]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:48.310] getGlobalsAndPackages() ...
[16:18:48.310] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:48.311] Resolving globals: FALSE
[16:18:48.311] Tweak future expression to call with '...' arguments ...
[16:18:48.311] {
[16:18:48.311]     do.call(function(...) {
[16:18:48.311]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:48.311]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:48.311]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:48.311]             on.exit(options(oopts), add = TRUE)
[16:18:48.311]         }
[16:18:48.311]         {
[16:18:48.311]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:48.311]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:48.311]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:48.311]                   envir = globalenv(), inherits = FALSE)
[16:18:48.311]                 ...future.FUN(...future.X_jj, ...)
[16:18:48.311]             })
[16:18:48.311]         }
[16:18:48.311]     }, args = future.call.arguments)
[16:18:48.311] }
[16:18:48.311] Tweak future expression to call with '...' arguments ... DONE
[16:18:48.312] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:48.312] 
[16:18:48.313] getGlobalsAndPackages() ... DONE
[16:18:48.313] run() for ‘Future’ ...
[16:18:48.313] - state: ‘created’
[16:18:48.314] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:18:48.318] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:48.319] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:18:48.319]   - Field: ‘label’
[16:18:48.319]   - Field: ‘local’
[16:18:48.319]   - Field: ‘owner’
[16:18:48.319]   - Field: ‘envir’
[16:18:48.319]   - Field: ‘workers’
[16:18:48.320]   - Field: ‘packages’
[16:18:48.320]   - Field: ‘gc’
[16:18:48.320]   - Field: ‘job’
[16:18:48.320]   - Field: ‘conditions’
[16:18:48.320]   - Field: ‘expr’
[16:18:48.320]   - Field: ‘uuid’
[16:18:48.320]   - Field: ‘seed’
[16:18:48.321]   - Field: ‘version’
[16:18:48.321]   - Field: ‘result’
[16:18:48.321]   - Field: ‘asynchronous’
[16:18:48.321]   - Field: ‘calls’
[16:18:48.321]   - Field: ‘globals’
[16:18:48.321]   - Field: ‘stdout’
[16:18:48.321]   - Field: ‘earlySignal’
[16:18:48.322]   - Field: ‘lazy’
[16:18:48.322]   - Field: ‘state’
[16:18:48.322] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:18:48.322] - Launch lazy future ...
[16:18:48.323] Packages needed by the future expression (n = 0): <none>
[16:18:48.323] Packages needed by future strategies (n = 0): <none>
[16:18:48.324] {
[16:18:48.324]     {
[16:18:48.324]         {
[16:18:48.324]             ...future.startTime <- base::Sys.time()
[16:18:48.324]             {
[16:18:48.324]                 {
[16:18:48.324]                   {
[16:18:48.324]                     {
[16:18:48.324]                       base::local({
[16:18:48.324]                         has_future <- base::requireNamespace("future", 
[16:18:48.324]                           quietly = TRUE)
[16:18:48.324]                         if (has_future) {
[16:18:48.324]                           ns <- base::getNamespace("future")
[16:18:48.324]                           version <- ns[[".package"]][["version"]]
[16:18:48.324]                           if (is.null(version)) 
[16:18:48.324]                             version <- utils::packageVersion("future")
[16:18:48.324]                         }
[16:18:48.324]                         else {
[16:18:48.324]                           version <- NULL
[16:18:48.324]                         }
[16:18:48.324]                         if (!has_future || version < "1.8.0") {
[16:18:48.324]                           info <- base::c(r_version = base::gsub("R version ", 
[16:18:48.324]                             "", base::R.version$version.string), 
[16:18:48.324]                             platform = base::sprintf("%s (%s-bit)", 
[16:18:48.324]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:18:48.324]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:18:48.324]                               "release", "version")], collapse = " "), 
[16:18:48.324]                             hostname = base::Sys.info()[["nodename"]])
[16:18:48.324]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:18:48.324]                             info)
[16:18:48.324]                           info <- base::paste(info, collapse = "; ")
[16:18:48.324]                           if (!has_future) {
[16:18:48.324]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:18:48.324]                               info)
[16:18:48.324]                           }
[16:18:48.324]                           else {
[16:18:48.324]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:18:48.324]                               info, version)
[16:18:48.324]                           }
[16:18:48.324]                           base::stop(msg)
[16:18:48.324]                         }
[16:18:48.324]                       })
[16:18:48.324]                     }
[16:18:48.324]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:18:48.324]                     base::options(mc.cores = 1L)
[16:18:48.324]                   }
[16:18:48.324]                   ...future.strategy.old <- future::plan("list")
[16:18:48.324]                   options(future.plan = NULL)
[16:18:48.324]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:18:48.324]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:18:48.324]                 }
[16:18:48.324]                 ...future.workdir <- getwd()
[16:18:48.324]             }
[16:18:48.324]             ...future.oldOptions <- base::as.list(base::.Options)
[16:18:48.324]             ...future.oldEnvVars <- base::Sys.getenv()
[16:18:48.324]         }
[16:18:48.324]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:18:48.324]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:18:48.324]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:18:48.324]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:18:48.324]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:18:48.324]             future.stdout.windows.reencode = NULL, width = 80L)
[16:18:48.324]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:18:48.324]             base::names(...future.oldOptions))
[16:18:48.324]     }
[16:18:48.324]     if (FALSE) {
[16:18:48.324]     }
[16:18:48.324]     else {
[16:18:48.324]         if (TRUE) {
[16:18:48.324]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:18:48.324]                 open = "w")
[16:18:48.324]         }
[16:18:48.324]         else {
[16:18:48.324]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:18:48.324]                 windows = "NUL", "/dev/null"), open = "w")
[16:18:48.324]         }
[16:18:48.324]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:18:48.324]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:18:48.324]             base::sink(type = "output", split = FALSE)
[16:18:48.324]             base::close(...future.stdout)
[16:18:48.324]         }, add = TRUE)
[16:18:48.324]     }
[16:18:48.324]     ...future.frame <- base::sys.nframe()
[16:18:48.324]     ...future.conditions <- base::list()
[16:18:48.324]     ...future.rng <- base::globalenv()$.Random.seed
[16:18:48.324]     if (FALSE) {
[16:18:48.324]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:18:48.324]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:18:48.324]     }
[16:18:48.324]     ...future.result <- base::tryCatch({
[16:18:48.324]         base::withCallingHandlers({
[16:18:48.324]             ...future.value <- base::withVisible(base::local({
[16:18:48.324]                 withCallingHandlers({
[16:18:48.324]                   {
[16:18:48.324]                     do.call(function(...) {
[16:18:48.324]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:48.324]                       if (!identical(...future.globals.maxSize.org, 
[16:18:48.324]                         ...future.globals.maxSize)) {
[16:18:48.324]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:48.324]                         on.exit(options(oopts), add = TRUE)
[16:18:48.324]                       }
[16:18:48.324]                       {
[16:18:48.324]                         lapply(seq_along(...future.elements_ii), 
[16:18:48.324]                           FUN = function(jj) {
[16:18:48.324]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:48.324]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:48.324]                               envir = globalenv(), inherits = FALSE)
[16:18:48.324]                             ...future.FUN(...future.X_jj, ...)
[16:18:48.324]                           })
[16:18:48.324]                       }
[16:18:48.324]                     }, args = future.call.arguments)
[16:18:48.324]                   }
[16:18:48.324]                 }, immediateCondition = function(cond) {
[16:18:48.324]                   save_rds <- function (object, pathname, ...) 
[16:18:48.324]                   {
[16:18:48.324]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:18:48.324]                     if (file_test("-f", pathname_tmp)) {
[16:18:48.324]                       fi_tmp <- file.info(pathname_tmp)
[16:18:48.324]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:18:48.324]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:18:48.324]                         fi_tmp[["mtime"]])
[16:18:48.324]                     }
[16:18:48.324]                     tryCatch({
[16:18:48.324]                       saveRDS(object, file = pathname_tmp, ...)
[16:18:48.324]                     }, error = function(ex) {
[16:18:48.324]                       msg <- conditionMessage(ex)
[16:18:48.324]                       fi_tmp <- file.info(pathname_tmp)
[16:18:48.324]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:18:48.324]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:18:48.324]                         fi_tmp[["mtime"]], msg)
[16:18:48.324]                       ex$message <- msg
[16:18:48.324]                       stop(ex)
[16:18:48.324]                     })
[16:18:48.324]                     stopifnot(file_test("-f", pathname_tmp))
[16:18:48.324]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:18:48.324]                     if (!res || file_test("-f", pathname_tmp)) {
[16:18:48.324]                       fi_tmp <- file.info(pathname_tmp)
[16:18:48.324]                       fi <- file.info(pathname)
[16:18:48.324]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:18:48.324]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:18:48.324]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:18:48.324]                         fi[["size"]], fi[["mtime"]])
[16:18:48.324]                       stop(msg)
[16:18:48.324]                     }
[16:18:48.324]                     invisible(pathname)
[16:18:48.324]                   }
[16:18:48.324]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:18:48.324]                     rootPath = tempdir()) 
[16:18:48.324]                   {
[16:18:48.324]                     obj <- list(time = Sys.time(), condition = cond)
[16:18:48.324]                     file <- tempfile(pattern = class(cond)[1], 
[16:18:48.324]                       tmpdir = path, fileext = ".rds")
[16:18:48.324]                     save_rds(obj, file)
[16:18:48.324]                   }
[16:18:48.324]                   saveImmediateCondition(cond, path = "/tmp/RtmpZpTIv7/.future/immediateConditions")
[16:18:48.324]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:48.324]                   {
[16:18:48.324]                     inherits <- base::inherits
[16:18:48.324]                     invokeRestart <- base::invokeRestart
[16:18:48.324]                     is.null <- base::is.null
[16:18:48.324]                     muffled <- FALSE
[16:18:48.324]                     if (inherits(cond, "message")) {
[16:18:48.324]                       muffled <- grepl(pattern, "muffleMessage")
[16:18:48.324]                       if (muffled) 
[16:18:48.324]                         invokeRestart("muffleMessage")
[16:18:48.324]                     }
[16:18:48.324]                     else if (inherits(cond, "warning")) {
[16:18:48.324]                       muffled <- grepl(pattern, "muffleWarning")
[16:18:48.324]                       if (muffled) 
[16:18:48.324]                         invokeRestart("muffleWarning")
[16:18:48.324]                     }
[16:18:48.324]                     else if (inherits(cond, "condition")) {
[16:18:48.324]                       if (!is.null(pattern)) {
[16:18:48.324]                         computeRestarts <- base::computeRestarts
[16:18:48.324]                         grepl <- base::grepl
[16:18:48.324]                         restarts <- computeRestarts(cond)
[16:18:48.324]                         for (restart in restarts) {
[16:18:48.324]                           name <- restart$name
[16:18:48.324]                           if (is.null(name)) 
[16:18:48.324]                             next
[16:18:48.324]                           if (!grepl(pattern, name)) 
[16:18:48.324]                             next
[16:18:48.324]                           invokeRestart(restart)
[16:18:48.324]                           muffled <- TRUE
[16:18:48.324]                           break
[16:18:48.324]                         }
[16:18:48.324]                       }
[16:18:48.324]                     }
[16:18:48.324]                     invisible(muffled)
[16:18:48.324]                   }
[16:18:48.324]                   muffleCondition(cond)
[16:18:48.324]                 })
[16:18:48.324]             }))
[16:18:48.324]             future::FutureResult(value = ...future.value$value, 
[16:18:48.324]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:48.324]                   ...future.rng), globalenv = if (FALSE) 
[16:18:48.324]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:18:48.324]                     ...future.globalenv.names))
[16:18:48.324]                 else NULL, started = ...future.startTime, version = "1.8")
[16:18:48.324]         }, condition = base::local({
[16:18:48.324]             c <- base::c
[16:18:48.324]             inherits <- base::inherits
[16:18:48.324]             invokeRestart <- base::invokeRestart
[16:18:48.324]             length <- base::length
[16:18:48.324]             list <- base::list
[16:18:48.324]             seq.int <- base::seq.int
[16:18:48.324]             signalCondition <- base::signalCondition
[16:18:48.324]             sys.calls <- base::sys.calls
[16:18:48.324]             `[[` <- base::`[[`
[16:18:48.324]             `+` <- base::`+`
[16:18:48.324]             `<<-` <- base::`<<-`
[16:18:48.324]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:18:48.324]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:18:48.324]                   3L)]
[16:18:48.324]             }
[16:18:48.324]             function(cond) {
[16:18:48.324]                 is_error <- inherits(cond, "error")
[16:18:48.324]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:18:48.324]                   NULL)
[16:18:48.324]                 if (is_error) {
[16:18:48.324]                   sessionInformation <- function() {
[16:18:48.324]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:18:48.324]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:18:48.324]                       search = base::search(), system = base::Sys.info())
[16:18:48.324]                   }
[16:18:48.324]                   ...future.conditions[[length(...future.conditions) + 
[16:18:48.324]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:18:48.324]                     cond$call), session = sessionInformation(), 
[16:18:48.324]                     timestamp = base::Sys.time(), signaled = 0L)
[16:18:48.324]                   signalCondition(cond)
[16:18:48.324]                 }
[16:18:48.324]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:18:48.324]                 "immediateCondition"))) {
[16:18:48.324]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:18:48.324]                   ...future.conditions[[length(...future.conditions) + 
[16:18:48.324]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:18:48.324]                   if (TRUE && !signal) {
[16:18:48.324]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:48.324]                     {
[16:18:48.324]                       inherits <- base::inherits
[16:18:48.324]                       invokeRestart <- base::invokeRestart
[16:18:48.324]                       is.null <- base::is.null
[16:18:48.324]                       muffled <- FALSE
[16:18:48.324]                       if (inherits(cond, "message")) {
[16:18:48.324]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:48.324]                         if (muffled) 
[16:18:48.324]                           invokeRestart("muffleMessage")
[16:18:48.324]                       }
[16:18:48.324]                       else if (inherits(cond, "warning")) {
[16:18:48.324]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:48.324]                         if (muffled) 
[16:18:48.324]                           invokeRestart("muffleWarning")
[16:18:48.324]                       }
[16:18:48.324]                       else if (inherits(cond, "condition")) {
[16:18:48.324]                         if (!is.null(pattern)) {
[16:18:48.324]                           computeRestarts <- base::computeRestarts
[16:18:48.324]                           grepl <- base::grepl
[16:18:48.324]                           restarts <- computeRestarts(cond)
[16:18:48.324]                           for (restart in restarts) {
[16:18:48.324]                             name <- restart$name
[16:18:48.324]                             if (is.null(name)) 
[16:18:48.324]                               next
[16:18:48.324]                             if (!grepl(pattern, name)) 
[16:18:48.324]                               next
[16:18:48.324]                             invokeRestart(restart)
[16:18:48.324]                             muffled <- TRUE
[16:18:48.324]                             break
[16:18:48.324]                           }
[16:18:48.324]                         }
[16:18:48.324]                       }
[16:18:48.324]                       invisible(muffled)
[16:18:48.324]                     }
[16:18:48.324]                     muffleCondition(cond, pattern = "^muffle")
[16:18:48.324]                   }
[16:18:48.324]                 }
[16:18:48.324]                 else {
[16:18:48.324]                   if (TRUE) {
[16:18:48.324]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:48.324]                     {
[16:18:48.324]                       inherits <- base::inherits
[16:18:48.324]                       invokeRestart <- base::invokeRestart
[16:18:48.324]                       is.null <- base::is.null
[16:18:48.324]                       muffled <- FALSE
[16:18:48.324]                       if (inherits(cond, "message")) {
[16:18:48.324]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:48.324]                         if (muffled) 
[16:18:48.324]                           invokeRestart("muffleMessage")
[16:18:48.324]                       }
[16:18:48.324]                       else if (inherits(cond, "warning")) {
[16:18:48.324]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:48.324]                         if (muffled) 
[16:18:48.324]                           invokeRestart("muffleWarning")
[16:18:48.324]                       }
[16:18:48.324]                       else if (inherits(cond, "condition")) {
[16:18:48.324]                         if (!is.null(pattern)) {
[16:18:48.324]                           computeRestarts <- base::computeRestarts
[16:18:48.324]                           grepl <- base::grepl
[16:18:48.324]                           restarts <- computeRestarts(cond)
[16:18:48.324]                           for (restart in restarts) {
[16:18:48.324]                             name <- restart$name
[16:18:48.324]                             if (is.null(name)) 
[16:18:48.324]                               next
[16:18:48.324]                             if (!grepl(pattern, name)) 
[16:18:48.324]                               next
[16:18:48.324]                             invokeRestart(restart)
[16:18:48.324]                             muffled <- TRUE
[16:18:48.324]                             break
[16:18:48.324]                           }
[16:18:48.324]                         }
[16:18:48.324]                       }
[16:18:48.324]                       invisible(muffled)
[16:18:48.324]                     }
[16:18:48.324]                     muffleCondition(cond, pattern = "^muffle")
[16:18:48.324]                   }
[16:18:48.324]                 }
[16:18:48.324]             }
[16:18:48.324]         }))
[16:18:48.324]     }, error = function(ex) {
[16:18:48.324]         base::structure(base::list(value = NULL, visible = NULL, 
[16:18:48.324]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:48.324]                 ...future.rng), started = ...future.startTime, 
[16:18:48.324]             finished = Sys.time(), session_uuid = NA_character_, 
[16:18:48.324]             version = "1.8"), class = "FutureResult")
[16:18:48.324]     }, finally = {
[16:18:48.324]         if (!identical(...future.workdir, getwd())) 
[16:18:48.324]             setwd(...future.workdir)
[16:18:48.324]         {
[16:18:48.324]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:18:48.324]                 ...future.oldOptions$nwarnings <- NULL
[16:18:48.324]             }
[16:18:48.324]             base::options(...future.oldOptions)
[16:18:48.324]             if (.Platform$OS.type == "windows") {
[16:18:48.324]                 old_names <- names(...future.oldEnvVars)
[16:18:48.324]                 envs <- base::Sys.getenv()
[16:18:48.324]                 names <- names(envs)
[16:18:48.324]                 common <- intersect(names, old_names)
[16:18:48.324]                 added <- setdiff(names, old_names)
[16:18:48.324]                 removed <- setdiff(old_names, names)
[16:18:48.324]                 changed <- common[...future.oldEnvVars[common] != 
[16:18:48.324]                   envs[common]]
[16:18:48.324]                 NAMES <- toupper(changed)
[16:18:48.324]                 args <- list()
[16:18:48.324]                 for (kk in seq_along(NAMES)) {
[16:18:48.324]                   name <- changed[[kk]]
[16:18:48.324]                   NAME <- NAMES[[kk]]
[16:18:48.324]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:48.324]                     next
[16:18:48.324]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:48.324]                 }
[16:18:48.324]                 NAMES <- toupper(added)
[16:18:48.324]                 for (kk in seq_along(NAMES)) {
[16:18:48.324]                   name <- added[[kk]]
[16:18:48.324]                   NAME <- NAMES[[kk]]
[16:18:48.324]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:48.324]                     next
[16:18:48.324]                   args[[name]] <- ""
[16:18:48.324]                 }
[16:18:48.324]                 NAMES <- toupper(removed)
[16:18:48.324]                 for (kk in seq_along(NAMES)) {
[16:18:48.324]                   name <- removed[[kk]]
[16:18:48.324]                   NAME <- NAMES[[kk]]
[16:18:48.324]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:48.324]                     next
[16:18:48.324]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:48.324]                 }
[16:18:48.324]                 if (length(args) > 0) 
[16:18:48.324]                   base::do.call(base::Sys.setenv, args = args)
[16:18:48.324]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:18:48.324]             }
[16:18:48.324]             else {
[16:18:48.324]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:18:48.324]             }
[16:18:48.324]             {
[16:18:48.324]                 if (base::length(...future.futureOptionsAdded) > 
[16:18:48.324]                   0L) {
[16:18:48.324]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:18:48.324]                   base::names(opts) <- ...future.futureOptionsAdded
[16:18:48.324]                   base::options(opts)
[16:18:48.324]                 }
[16:18:48.324]                 {
[16:18:48.324]                   {
[16:18:48.324]                     base::options(mc.cores = ...future.mc.cores.old)
[16:18:48.324]                     NULL
[16:18:48.324]                   }
[16:18:48.324]                   options(future.plan = NULL)
[16:18:48.324]                   if (is.na(NA_character_)) 
[16:18:48.324]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:18:48.324]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:18:48.324]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:18:48.324]                     .init = FALSE)
[16:18:48.324]                 }
[16:18:48.324]             }
[16:18:48.324]         }
[16:18:48.324]     })
[16:18:48.324]     if (TRUE) {
[16:18:48.324]         base::sink(type = "output", split = FALSE)
[16:18:48.324]         if (TRUE) {
[16:18:48.324]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:18:48.324]         }
[16:18:48.324]         else {
[16:18:48.324]             ...future.result["stdout"] <- base::list(NULL)
[16:18:48.324]         }
[16:18:48.324]         base::close(...future.stdout)
[16:18:48.324]         ...future.stdout <- NULL
[16:18:48.324]     }
[16:18:48.324]     ...future.result$conditions <- ...future.conditions
[16:18:48.324]     ...future.result$finished <- base::Sys.time()
[16:18:48.324]     ...future.result
[16:18:48.324] }
[16:18:48.327] assign_globals() ...
[16:18:48.327] List of 5
[16:18:48.327]  $ ...future.FUN            :function (...)  
[16:18:48.327]  $ future.call.arguments    : list()
[16:18:48.327]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:48.327]  $ ...future.elements_ii    :List of 3
[16:18:48.327]   ..$ : int 0
[16:18:48.327]   ..$ : int 0
[16:18:48.327]   ..$ : int 0
[16:18:48.327]  $ ...future.seeds_ii       :List of 3
[16:18:48.327]   ..$ : int [1:7] 10407 1164394434 449220430 -1497007122 58661922 77957643 -850372858
[16:18:48.327]   ..$ : int [1:7] 10407 -102834055 -568341906 440844328 496378464 1781291461 1929965415
[16:18:48.327]   ..$ : int [1:7] 10407 -1584691803 1955381789 -562762208 1163324668 -1514628943 475545435
[16:18:48.327]  $ ...future.globals.maxSize: NULL
[16:18:48.327]  - attr(*, "where")=List of 5
[16:18:48.327]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:18:48.327]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:18:48.327]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:18:48.327]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:18:48.327]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:18:48.327]  - attr(*, "resolved")= logi FALSE
[16:18:48.327]  - attr(*, "total_size")= num 616
[16:18:48.327]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:48.327]  - attr(*, "already-done")= logi TRUE
[16:18:48.376] - reassign environment for ‘...future.FUN’
[16:18:48.377] - copied ‘...future.FUN’ to environment
[16:18:48.377] - copied ‘future.call.arguments’ to environment
[16:18:48.377] - copied ‘...future.elements_ii’ to environment
[16:18:48.377] - copied ‘...future.seeds_ii’ to environment
[16:18:48.377] - copied ‘...future.globals.maxSize’ to environment
[16:18:48.377] assign_globals() ... done
[16:18:48.377] requestCore(): workers = 2
[16:18:48.380] MulticoreFuture started
[16:18:48.380] - Launch lazy future ... done
[16:18:48.380] run() for ‘MulticoreFuture’ ... done
[16:18:48.381] Created future:
[16:18:48.381] plan(): Setting new future strategy stack:
[16:18:48.381] List of future strategies:
[16:18:48.381] 1. sequential:
[16:18:48.381]    - args: function (..., envir = parent.frame())
[16:18:48.381]    - tweaked: FALSE
[16:18:48.381]    - call: NULL
[16:18:48.382] plan(): nbrOfWorkers() = 1
[16:18:48.384] plan(): Setting new future strategy stack:
[16:18:48.385] List of future strategies:
[16:18:48.385] 1. multicore:
[16:18:48.385]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:18:48.385]    - tweaked: FALSE
[16:18:48.385]    - call: plan(strategy)
[16:18:48.390] plan(): nbrOfWorkers() = 2
[16:18:48.381] MulticoreFuture:
[16:18:48.381] Label: ‘future_replicate-2’
[16:18:48.381] Expression:
[16:18:48.381] {
[16:18:48.381]     do.call(function(...) {
[16:18:48.381]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:48.381]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:48.381]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:48.381]             on.exit(options(oopts), add = TRUE)
[16:18:48.381]         }
[16:18:48.381]         {
[16:18:48.381]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:48.381]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:48.381]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:48.381]                   envir = globalenv(), inherits = FALSE)
[16:18:48.381]                 ...future.FUN(...future.X_jj, ...)
[16:18:48.381]             })
[16:18:48.381]         }
[16:18:48.381]     }, args = future.call.arguments)
[16:18:48.381] }
[16:18:48.381] Lazy evaluation: FALSE
[16:18:48.381] Asynchronous evaluation: TRUE
[16:18:48.381] Local evaluation: TRUE
[16:18:48.381] Environment: R_GlobalEnv
[16:18:48.381] Capture standard output: TRUE
[16:18:48.381] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:18:48.381] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:18:48.381] Packages: <none>
[16:18:48.381] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:18:48.381] Resolved: TRUE
[16:18:48.381] Value: <not collected>
[16:18:48.381] Conditions captured: <none>
[16:18:48.381] Early signaling: FALSE
[16:18:48.381] Owner process: 20271db5-d788-b537-4432-0a26f2d2d030
[16:18:48.381] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:48.391] Chunk #2 of 2 ... DONE
[16:18:48.391] Launching 2 futures (chunks) ... DONE
[16:18:48.391] Resolving 2 futures (chunks) ...
[16:18:48.392] resolve() on list ...
[16:18:48.392]  recursive: 0
[16:18:48.392]  length: 2
[16:18:48.392] 
[16:18:48.393] Future #1
[16:18:48.393] result() for MulticoreFuture ...
[16:18:48.394] result() for MulticoreFuture ...
[16:18:48.394] result() for MulticoreFuture ... done
[16:18:48.394] result() for MulticoreFuture ... done
[16:18:48.394] result() for MulticoreFuture ...
[16:18:48.394] result() for MulticoreFuture ... done
[16:18:48.394] signalConditionsASAP(MulticoreFuture, pos=1) ...
[16:18:48.395] - nx: 2
[16:18:48.395] - relay: TRUE
[16:18:48.395] - stdout: TRUE
[16:18:48.395] - signal: TRUE
[16:18:48.395] - resignal: FALSE
[16:18:48.395] - force: TRUE
[16:18:48.396] - relayed: [n=2] FALSE, FALSE
[16:18:48.396] - queued futures: [n=2] FALSE, FALSE
[16:18:48.396]  - until=1
[16:18:48.396]  - relaying element #1
[16:18:48.396] result() for MulticoreFuture ...
[16:18:48.396] result() for MulticoreFuture ... done
[16:18:48.397] result() for MulticoreFuture ...
[16:18:48.397] result() for MulticoreFuture ... done
[16:18:48.397] result() for MulticoreFuture ...
[16:18:48.397] result() for MulticoreFuture ... done
[16:18:48.397] result() for MulticoreFuture ...
[16:18:48.397] result() for MulticoreFuture ... done
[16:18:48.397] - relayed: [n=2] TRUE, FALSE
[16:18:48.398] - queued futures: [n=2] TRUE, FALSE
[16:18:48.398] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[16:18:48.398]  length: 1 (resolved future 1)
[16:18:48.398] Future #2
[16:18:48.398] result() for MulticoreFuture ...
[16:18:48.399] result() for MulticoreFuture ...
[16:18:48.399] result() for MulticoreFuture ... done
[16:18:48.399] result() for MulticoreFuture ... done
[16:18:48.400] result() for MulticoreFuture ...
[16:18:48.400] result() for MulticoreFuture ... done
[16:18:48.400] signalConditionsASAP(MulticoreFuture, pos=2) ...
[16:18:48.400] - nx: 2
[16:18:48.400] - relay: TRUE
[16:18:48.400] - stdout: TRUE
[16:18:48.400] - signal: TRUE
[16:18:48.400] - resignal: FALSE
[16:18:48.401] - force: TRUE
[16:18:48.401] - relayed: [n=2] TRUE, FALSE
[16:18:48.401] - queued futures: [n=2] TRUE, FALSE
[16:18:48.401]  - until=2
[16:18:48.401]  - relaying element #2
[16:18:48.401] result() for MulticoreFuture ...
[16:18:48.401] result() for MulticoreFuture ... done
[16:18:48.401] result() for MulticoreFuture ...
[16:18:48.402] result() for MulticoreFuture ... done
[16:18:48.402] result() for MulticoreFuture ...
[16:18:48.402] result() for MulticoreFuture ... done
[16:18:48.402] result() for MulticoreFuture ...
[16:18:48.402] result() for MulticoreFuture ... done
[16:18:48.402] - relayed: [n=2] TRUE, TRUE
[16:18:48.402] - queued futures: [n=2] TRUE, TRUE
[16:18:48.402] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[16:18:48.403]  length: 0 (resolved future 2)
[16:18:48.403] Relaying remaining futures
[16:18:48.403] signalConditionsASAP(NULL, pos=0) ...
[16:18:48.403] - nx: 2
[16:18:48.403] - relay: TRUE
[16:18:48.403] - stdout: TRUE
[16:18:48.403] - signal: TRUE
[16:18:48.403] - resignal: FALSE
[16:18:48.404] - force: TRUE
[16:18:48.404] - relayed: [n=2] TRUE, TRUE
[16:18:48.404] - queued futures: [n=2] TRUE, TRUE
 - flush all
[16:18:48.404] - relayed: [n=2] TRUE, TRUE
[16:18:48.404] - queued futures: [n=2] TRUE, TRUE
[16:18:48.404] signalConditionsASAP(NULL, pos=0) ... done
[16:18:48.404] resolve() on list ... DONE
[16:18:48.404] result() for MulticoreFuture ...
[16:18:48.405] result() for MulticoreFuture ... done
[16:18:48.405] result() for MulticoreFuture ...
[16:18:48.405] result() for MulticoreFuture ... done
[16:18:48.405] result() for MulticoreFuture ...
[16:18:48.405] result() for MulticoreFuture ... done
[16:18:48.405] result() for MulticoreFuture ...
[16:18:48.405] result() for MulticoreFuture ... done
[16:18:48.405]  - Number of value chunks collected: 2
[16:18:48.406] Resolving 2 futures (chunks) ... DONE
[16:18:48.406] Reducing values from 2 chunks ...
[16:18:48.406]  - Number of values collected after concatenation: 5
[16:18:48.406]  - Number of values expected: 5
[16:18:48.406] Reducing values from 2 chunks ... DONE
[16:18:48.406] future_lapply() ... DONE
[16:18:48.406] future_lapply() ...
[16:18:48.407] Generating random seeds ...
[16:18:48.407] Generating random seed streams for 5 elements ...
[16:18:48.407] Generating random seed streams for 5 elements ... DONE
[16:18:48.407] Generating random seeds ... DONE
[16:18:48.408] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:18:48.413] Number of chunks: 2
[16:18:48.413] getGlobalsAndPackagesXApply() ...
[16:18:48.413]  - future.globals: TRUE
[16:18:48.413] getGlobalsAndPackages() ...
[16:18:48.413] Searching for globals...
[16:18:48.415] - globals found: [2] ‘FUN’, ‘sample’
[16:18:48.415] Searching for globals ... DONE
[16:18:48.415] Resolving globals: FALSE
[16:18:48.415] The total size of the 1 globals is 616 bytes (616 bytes)
[16:18:48.416] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:18:48.416] - globals: [1] ‘FUN’
[16:18:48.416] 
[16:18:48.416] getGlobalsAndPackages() ... DONE
[16:18:48.416]  - globals found/used: [n=1] ‘FUN’
[16:18:48.416]  - needed namespaces: [n=0] 
[16:18:48.417] Finding globals ... DONE
[16:18:48.417]  - use_args: TRUE
[16:18:48.417]  - Getting '...' globals ...
[16:18:48.417] resolve() on list ...
[16:18:48.417]  recursive: 0
[16:18:48.417]  length: 1
[16:18:48.417]  elements: ‘...’
[16:18:48.418]  length: 0 (resolved future 1)
[16:18:48.418] resolve() on list ... DONE
[16:18:48.418]    - '...' content: [n=0] 
[16:18:48.418] List of 1
[16:18:48.418]  $ ...: list()
[16:18:48.418]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:48.418]  - attr(*, "where")=List of 1
[16:18:48.418]   ..$ ...:<environment: 0x55e7a0733258> 
[16:18:48.418]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:48.418]  - attr(*, "resolved")= logi TRUE
[16:18:48.418]  - attr(*, "total_size")= num NA
[16:18:48.423]  - Getting '...' globals ... DONE
[16:18:48.424] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:18:48.424] List of 2
[16:18:48.424]  $ ...future.FUN:function (...)  
[16:18:48.424]  $ ...          : list()
[16:18:48.424]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:48.424]  - attr(*, "where")=List of 2
[16:18:48.424]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:18:48.424]   ..$ ...          :<environment: 0x55e7a0733258> 
[16:18:48.424]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:48.424]  - attr(*, "resolved")= logi FALSE
[16:18:48.424]  - attr(*, "total_size")= num 616
[16:18:48.427] Packages to be attached in all futures: [n=0] 
[16:18:48.427] getGlobalsAndPackagesXApply() ... DONE
[16:18:48.427] Number of futures (= number of chunks): 2
[16:18:48.427] Launching 2 futures (chunks) ...
[16:18:48.427] Chunk #1 of 2 ...
[16:18:48.428]  - Finding globals in 'X' for chunk #1 ...
[16:18:48.428] getGlobalsAndPackages() ...
[16:18:48.428] Searching for globals...
[16:18:48.428] 
[16:18:48.428] Searching for globals ... DONE
[16:18:48.428] - globals: [0] <none>
[16:18:48.428] getGlobalsAndPackages() ... DONE
[16:18:48.428]    + additional globals found: [n=0] 
[16:18:48.429]    + additional namespaces needed: [n=0] 
[16:18:48.429]  - Finding globals in 'X' for chunk #1 ... DONE
[16:18:48.429]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:18:48.429]  - seeds: [2] <seeds>
[16:18:48.429]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:48.429] getGlobalsAndPackages() ...
[16:18:48.429] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:48.429] Resolving globals: FALSE
[16:18:48.429] Tweak future expression to call with '...' arguments ...
[16:18:48.429] {
[16:18:48.429]     do.call(function(...) {
[16:18:48.429]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:48.429]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:48.429]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:48.429]             on.exit(options(oopts), add = TRUE)
[16:18:48.429]         }
[16:18:48.429]         {
[16:18:48.429]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:48.429]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:48.429]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:48.429]                   envir = globalenv(), inherits = FALSE)
[16:18:48.429]                 ...future.FUN(...future.X_jj, ...)
[16:18:48.429]             })
[16:18:48.429]         }
[16:18:48.429]     }, args = future.call.arguments)
[16:18:48.429] }
[16:18:48.430] Tweak future expression to call with '...' arguments ... DONE
[16:18:48.430] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:48.430] 
[16:18:48.430] getGlobalsAndPackages() ... DONE
[16:18:48.431] run() for ‘Future’ ...
[16:18:48.431] - state: ‘created’
[16:18:48.431] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:18:48.435] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:48.435] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:18:48.435]   - Field: ‘label’
[16:18:48.435]   - Field: ‘local’
[16:18:48.435]   - Field: ‘owner’
[16:18:48.435]   - Field: ‘envir’
[16:18:48.435]   - Field: ‘workers’
[16:18:48.436]   - Field: ‘packages’
[16:18:48.436]   - Field: ‘gc’
[16:18:48.436]   - Field: ‘job’
[16:18:48.436]   - Field: ‘conditions’
[16:18:48.436]   - Field: ‘expr’
[16:18:48.436]   - Field: ‘uuid’
[16:18:48.436]   - Field: ‘seed’
[16:18:48.436]   - Field: ‘version’
[16:18:48.436]   - Field: ‘result’
[16:18:48.436]   - Field: ‘asynchronous’
[16:18:48.437]   - Field: ‘calls’
[16:18:48.437]   - Field: ‘globals’
[16:18:48.437]   - Field: ‘stdout’
[16:18:48.437]   - Field: ‘earlySignal’
[16:18:48.437]   - Field: ‘lazy’
[16:18:48.437]   - Field: ‘state’
[16:18:48.437] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:18:48.437] - Launch lazy future ...
[16:18:48.438] Packages needed by the future expression (n = 0): <none>
[16:18:48.438] Packages needed by future strategies (n = 0): <none>
[16:18:48.438] {
[16:18:48.438]     {
[16:18:48.438]         {
[16:18:48.438]             ...future.startTime <- base::Sys.time()
[16:18:48.438]             {
[16:18:48.438]                 {
[16:18:48.438]                   {
[16:18:48.438]                     {
[16:18:48.438]                       base::local({
[16:18:48.438]                         has_future <- base::requireNamespace("future", 
[16:18:48.438]                           quietly = TRUE)
[16:18:48.438]                         if (has_future) {
[16:18:48.438]                           ns <- base::getNamespace("future")
[16:18:48.438]                           version <- ns[[".package"]][["version"]]
[16:18:48.438]                           if (is.null(version)) 
[16:18:48.438]                             version <- utils::packageVersion("future")
[16:18:48.438]                         }
[16:18:48.438]                         else {
[16:18:48.438]                           version <- NULL
[16:18:48.438]                         }
[16:18:48.438]                         if (!has_future || version < "1.8.0") {
[16:18:48.438]                           info <- base::c(r_version = base::gsub("R version ", 
[16:18:48.438]                             "", base::R.version$version.string), 
[16:18:48.438]                             platform = base::sprintf("%s (%s-bit)", 
[16:18:48.438]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:18:48.438]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:18:48.438]                               "release", "version")], collapse = " "), 
[16:18:48.438]                             hostname = base::Sys.info()[["nodename"]])
[16:18:48.438]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:18:48.438]                             info)
[16:18:48.438]                           info <- base::paste(info, collapse = "; ")
[16:18:48.438]                           if (!has_future) {
[16:18:48.438]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:18:48.438]                               info)
[16:18:48.438]                           }
[16:18:48.438]                           else {
[16:18:48.438]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:18:48.438]                               info, version)
[16:18:48.438]                           }
[16:18:48.438]                           base::stop(msg)
[16:18:48.438]                         }
[16:18:48.438]                       })
[16:18:48.438]                     }
[16:18:48.438]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:18:48.438]                     base::options(mc.cores = 1L)
[16:18:48.438]                   }
[16:18:48.438]                   ...future.strategy.old <- future::plan("list")
[16:18:48.438]                   options(future.plan = NULL)
[16:18:48.438]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:18:48.438]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:18:48.438]                 }
[16:18:48.438]                 ...future.workdir <- getwd()
[16:18:48.438]             }
[16:18:48.438]             ...future.oldOptions <- base::as.list(base::.Options)
[16:18:48.438]             ...future.oldEnvVars <- base::Sys.getenv()
[16:18:48.438]         }
[16:18:48.438]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:18:48.438]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:18:48.438]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:18:48.438]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:18:48.438]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:18:48.438]             future.stdout.windows.reencode = NULL, width = 80L)
[16:18:48.438]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:18:48.438]             base::names(...future.oldOptions))
[16:18:48.438]     }
[16:18:48.438]     if (FALSE) {
[16:18:48.438]     }
[16:18:48.438]     else {
[16:18:48.438]         if (TRUE) {
[16:18:48.438]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:18:48.438]                 open = "w")
[16:18:48.438]         }
[16:18:48.438]         else {
[16:18:48.438]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:18:48.438]                 windows = "NUL", "/dev/null"), open = "w")
[16:18:48.438]         }
[16:18:48.438]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:18:48.438]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:18:48.438]             base::sink(type = "output", split = FALSE)
[16:18:48.438]             base::close(...future.stdout)
[16:18:48.438]         }, add = TRUE)
[16:18:48.438]     }
[16:18:48.438]     ...future.frame <- base::sys.nframe()
[16:18:48.438]     ...future.conditions <- base::list()
[16:18:48.438]     ...future.rng <- base::globalenv()$.Random.seed
[16:18:48.438]     if (FALSE) {
[16:18:48.438]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:18:48.438]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:18:48.438]     }
[16:18:48.438]     ...future.result <- base::tryCatch({
[16:18:48.438]         base::withCallingHandlers({
[16:18:48.438]             ...future.value <- base::withVisible(base::local({
[16:18:48.438]                 withCallingHandlers({
[16:18:48.438]                   {
[16:18:48.438]                     do.call(function(...) {
[16:18:48.438]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:48.438]                       if (!identical(...future.globals.maxSize.org, 
[16:18:48.438]                         ...future.globals.maxSize)) {
[16:18:48.438]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:48.438]                         on.exit(options(oopts), add = TRUE)
[16:18:48.438]                       }
[16:18:48.438]                       {
[16:18:48.438]                         lapply(seq_along(...future.elements_ii), 
[16:18:48.438]                           FUN = function(jj) {
[16:18:48.438]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:48.438]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:48.438]                               envir = globalenv(), inherits = FALSE)
[16:18:48.438]                             ...future.FUN(...future.X_jj, ...)
[16:18:48.438]                           })
[16:18:48.438]                       }
[16:18:48.438]                     }, args = future.call.arguments)
[16:18:48.438]                   }
[16:18:48.438]                 }, immediateCondition = function(cond) {
[16:18:48.438]                   save_rds <- function (object, pathname, ...) 
[16:18:48.438]                   {
[16:18:48.438]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:18:48.438]                     if (file_test("-f", pathname_tmp)) {
[16:18:48.438]                       fi_tmp <- file.info(pathname_tmp)
[16:18:48.438]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:18:48.438]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:18:48.438]                         fi_tmp[["mtime"]])
[16:18:48.438]                     }
[16:18:48.438]                     tryCatch({
[16:18:48.438]                       saveRDS(object, file = pathname_tmp, ...)
[16:18:48.438]                     }, error = function(ex) {
[16:18:48.438]                       msg <- conditionMessage(ex)
[16:18:48.438]                       fi_tmp <- file.info(pathname_tmp)
[16:18:48.438]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:18:48.438]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:18:48.438]                         fi_tmp[["mtime"]], msg)
[16:18:48.438]                       ex$message <- msg
[16:18:48.438]                       stop(ex)
[16:18:48.438]                     })
[16:18:48.438]                     stopifnot(file_test("-f", pathname_tmp))
[16:18:48.438]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:18:48.438]                     if (!res || file_test("-f", pathname_tmp)) {
[16:18:48.438]                       fi_tmp <- file.info(pathname_tmp)
[16:18:48.438]                       fi <- file.info(pathname)
[16:18:48.438]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:18:48.438]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:18:48.438]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:18:48.438]                         fi[["size"]], fi[["mtime"]])
[16:18:48.438]                       stop(msg)
[16:18:48.438]                     }
[16:18:48.438]                     invisible(pathname)
[16:18:48.438]                   }
[16:18:48.438]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:18:48.438]                     rootPath = tempdir()) 
[16:18:48.438]                   {
[16:18:48.438]                     obj <- list(time = Sys.time(), condition = cond)
[16:18:48.438]                     file <- tempfile(pattern = class(cond)[1], 
[16:18:48.438]                       tmpdir = path, fileext = ".rds")
[16:18:48.438]                     save_rds(obj, file)
[16:18:48.438]                   }
[16:18:48.438]                   saveImmediateCondition(cond, path = "/tmp/RtmpZpTIv7/.future/immediateConditions")
[16:18:48.438]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:48.438]                   {
[16:18:48.438]                     inherits <- base::inherits
[16:18:48.438]                     invokeRestart <- base::invokeRestart
[16:18:48.438]                     is.null <- base::is.null
[16:18:48.438]                     muffled <- FALSE
[16:18:48.438]                     if (inherits(cond, "message")) {
[16:18:48.438]                       muffled <- grepl(pattern, "muffleMessage")
[16:18:48.438]                       if (muffled) 
[16:18:48.438]                         invokeRestart("muffleMessage")
[16:18:48.438]                     }
[16:18:48.438]                     else if (inherits(cond, "warning")) {
[16:18:48.438]                       muffled <- grepl(pattern, "muffleWarning")
[16:18:48.438]                       if (muffled) 
[16:18:48.438]                         invokeRestart("muffleWarning")
[16:18:48.438]                     }
[16:18:48.438]                     else if (inherits(cond, "condition")) {
[16:18:48.438]                       if (!is.null(pattern)) {
[16:18:48.438]                         computeRestarts <- base::computeRestarts
[16:18:48.438]                         grepl <- base::grepl
[16:18:48.438]                         restarts <- computeRestarts(cond)
[16:18:48.438]                         for (restart in restarts) {
[16:18:48.438]                           name <- restart$name
[16:18:48.438]                           if (is.null(name)) 
[16:18:48.438]                             next
[16:18:48.438]                           if (!grepl(pattern, name)) 
[16:18:48.438]                             next
[16:18:48.438]                           invokeRestart(restart)
[16:18:48.438]                           muffled <- TRUE
[16:18:48.438]                           break
[16:18:48.438]                         }
[16:18:48.438]                       }
[16:18:48.438]                     }
[16:18:48.438]                     invisible(muffled)
[16:18:48.438]                   }
[16:18:48.438]                   muffleCondition(cond)
[16:18:48.438]                 })
[16:18:48.438]             }))
[16:18:48.438]             future::FutureResult(value = ...future.value$value, 
[16:18:48.438]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:48.438]                   ...future.rng), globalenv = if (FALSE) 
[16:18:48.438]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:18:48.438]                     ...future.globalenv.names))
[16:18:48.438]                 else NULL, started = ...future.startTime, version = "1.8")
[16:18:48.438]         }, condition = base::local({
[16:18:48.438]             c <- base::c
[16:18:48.438]             inherits <- base::inherits
[16:18:48.438]             invokeRestart <- base::invokeRestart
[16:18:48.438]             length <- base::length
[16:18:48.438]             list <- base::list
[16:18:48.438]             seq.int <- base::seq.int
[16:18:48.438]             signalCondition <- base::signalCondition
[16:18:48.438]             sys.calls <- base::sys.calls
[16:18:48.438]             `[[` <- base::`[[`
[16:18:48.438]             `+` <- base::`+`
[16:18:48.438]             `<<-` <- base::`<<-`
[16:18:48.438]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:18:48.438]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:18:48.438]                   3L)]
[16:18:48.438]             }
[16:18:48.438]             function(cond) {
[16:18:48.438]                 is_error <- inherits(cond, "error")
[16:18:48.438]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:18:48.438]                   NULL)
[16:18:48.438]                 if (is_error) {
[16:18:48.438]                   sessionInformation <- function() {
[16:18:48.438]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:18:48.438]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:18:48.438]                       search = base::search(), system = base::Sys.info())
[16:18:48.438]                   }
[16:18:48.438]                   ...future.conditions[[length(...future.conditions) + 
[16:18:48.438]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:18:48.438]                     cond$call), session = sessionInformation(), 
[16:18:48.438]                     timestamp = base::Sys.time(), signaled = 0L)
[16:18:48.438]                   signalCondition(cond)
[16:18:48.438]                 }
[16:18:48.438]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:18:48.438]                 "immediateCondition"))) {
[16:18:48.438]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:18:48.438]                   ...future.conditions[[length(...future.conditions) + 
[16:18:48.438]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:18:48.438]                   if (TRUE && !signal) {
[16:18:48.438]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:48.438]                     {
[16:18:48.438]                       inherits <- base::inherits
[16:18:48.438]                       invokeRestart <- base::invokeRestart
[16:18:48.438]                       is.null <- base::is.null
[16:18:48.438]                       muffled <- FALSE
[16:18:48.438]                       if (inherits(cond, "message")) {
[16:18:48.438]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:48.438]                         if (muffled) 
[16:18:48.438]                           invokeRestart("muffleMessage")
[16:18:48.438]                       }
[16:18:48.438]                       else if (inherits(cond, "warning")) {
[16:18:48.438]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:48.438]                         if (muffled) 
[16:18:48.438]                           invokeRestart("muffleWarning")
[16:18:48.438]                       }
[16:18:48.438]                       else if (inherits(cond, "condition")) {
[16:18:48.438]                         if (!is.null(pattern)) {
[16:18:48.438]                           computeRestarts <- base::computeRestarts
[16:18:48.438]                           grepl <- base::grepl
[16:18:48.438]                           restarts <- computeRestarts(cond)
[16:18:48.438]                           for (restart in restarts) {
[16:18:48.438]                             name <- restart$name
[16:18:48.438]                             if (is.null(name)) 
[16:18:48.438]                               next
[16:18:48.438]                             if (!grepl(pattern, name)) 
[16:18:48.438]                               next
[16:18:48.438]                             invokeRestart(restart)
[16:18:48.438]                             muffled <- TRUE
[16:18:48.438]                             break
[16:18:48.438]                           }
[16:18:48.438]                         }
[16:18:48.438]                       }
[16:18:48.438]                       invisible(muffled)
[16:18:48.438]                     }
[16:18:48.438]                     muffleCondition(cond, pattern = "^muffle")
[16:18:48.438]                   }
[16:18:48.438]                 }
[16:18:48.438]                 else {
[16:18:48.438]                   if (TRUE) {
[16:18:48.438]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:48.438]                     {
[16:18:48.438]                       inherits <- base::inherits
[16:18:48.438]                       invokeRestart <- base::invokeRestart
[16:18:48.438]                       is.null <- base::is.null
[16:18:48.438]                       muffled <- FALSE
[16:18:48.438]                       if (inherits(cond, "message")) {
[16:18:48.438]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:48.438]                         if (muffled) 
[16:18:48.438]                           invokeRestart("muffleMessage")
[16:18:48.438]                       }
[16:18:48.438]                       else if (inherits(cond, "warning")) {
[16:18:48.438]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:48.438]                         if (muffled) 
[16:18:48.438]                           invokeRestart("muffleWarning")
[16:18:48.438]                       }
[16:18:48.438]                       else if (inherits(cond, "condition")) {
[16:18:48.438]                         if (!is.null(pattern)) {
[16:18:48.438]                           computeRestarts <- base::computeRestarts
[16:18:48.438]                           grepl <- base::grepl
[16:18:48.438]                           restarts <- computeRestarts(cond)
[16:18:48.438]                           for (restart in restarts) {
[16:18:48.438]                             name <- restart$name
[16:18:48.438]                             if (is.null(name)) 
[16:18:48.438]                               next
[16:18:48.438]                             if (!grepl(pattern, name)) 
[16:18:48.438]                               next
[16:18:48.438]                             invokeRestart(restart)
[16:18:48.438]                             muffled <- TRUE
[16:18:48.438]                             break
[16:18:48.438]                           }
[16:18:48.438]                         }
[16:18:48.438]                       }
[16:18:48.438]                       invisible(muffled)
[16:18:48.438]                     }
[16:18:48.438]                     muffleCondition(cond, pattern = "^muffle")
[16:18:48.438]                   }
[16:18:48.438]                 }
[16:18:48.438]             }
[16:18:48.438]         }))
[16:18:48.438]     }, error = function(ex) {
[16:18:48.438]         base::structure(base::list(value = NULL, visible = NULL, 
[16:18:48.438]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:48.438]                 ...future.rng), started = ...future.startTime, 
[16:18:48.438]             finished = Sys.time(), session_uuid = NA_character_, 
[16:18:48.438]             version = "1.8"), class = "FutureResult")
[16:18:48.438]     }, finally = {
[16:18:48.438]         if (!identical(...future.workdir, getwd())) 
[16:18:48.438]             setwd(...future.workdir)
[16:18:48.438]         {
[16:18:48.438]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:18:48.438]                 ...future.oldOptions$nwarnings <- NULL
[16:18:48.438]             }
[16:18:48.438]             base::options(...future.oldOptions)
[16:18:48.438]             if (.Platform$OS.type == "windows") {
[16:18:48.438]                 old_names <- names(...future.oldEnvVars)
[16:18:48.438]                 envs <- base::Sys.getenv()
[16:18:48.438]                 names <- names(envs)
[16:18:48.438]                 common <- intersect(names, old_names)
[16:18:48.438]                 added <- setdiff(names, old_names)
[16:18:48.438]                 removed <- setdiff(old_names, names)
[16:18:48.438]                 changed <- common[...future.oldEnvVars[common] != 
[16:18:48.438]                   envs[common]]
[16:18:48.438]                 NAMES <- toupper(changed)
[16:18:48.438]                 args <- list()
[16:18:48.438]                 for (kk in seq_along(NAMES)) {
[16:18:48.438]                   name <- changed[[kk]]
[16:18:48.438]                   NAME <- NAMES[[kk]]
[16:18:48.438]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:48.438]                     next
[16:18:48.438]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:48.438]                 }
[16:18:48.438]                 NAMES <- toupper(added)
[16:18:48.438]                 for (kk in seq_along(NAMES)) {
[16:18:48.438]                   name <- added[[kk]]
[16:18:48.438]                   NAME <- NAMES[[kk]]
[16:18:48.438]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:48.438]                     next
[16:18:48.438]                   args[[name]] <- ""
[16:18:48.438]                 }
[16:18:48.438]                 NAMES <- toupper(removed)
[16:18:48.438]                 for (kk in seq_along(NAMES)) {
[16:18:48.438]                   name <- removed[[kk]]
[16:18:48.438]                   NAME <- NAMES[[kk]]
[16:18:48.438]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:48.438]                     next
[16:18:48.438]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:48.438]                 }
[16:18:48.438]                 if (length(args) > 0) 
[16:18:48.438]                   base::do.call(base::Sys.setenv, args = args)
[16:18:48.438]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:18:48.438]             }
[16:18:48.438]             else {
[16:18:48.438]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:18:48.438]             }
[16:18:48.438]             {
[16:18:48.438]                 if (base::length(...future.futureOptionsAdded) > 
[16:18:48.438]                   0L) {
[16:18:48.438]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:18:48.438]                   base::names(opts) <- ...future.futureOptionsAdded
[16:18:48.438]                   base::options(opts)
[16:18:48.438]                 }
[16:18:48.438]                 {
[16:18:48.438]                   {
[16:18:48.438]                     base::options(mc.cores = ...future.mc.cores.old)
[16:18:48.438]                     NULL
[16:18:48.438]                   }
[16:18:48.438]                   options(future.plan = NULL)
[16:18:48.438]                   if (is.na(NA_character_)) 
[16:18:48.438]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:18:48.438]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:18:48.438]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:18:48.438]                     .init = FALSE)
[16:18:48.438]                 }
[16:18:48.438]             }
[16:18:48.438]         }
[16:18:48.438]     })
[16:18:48.438]     if (TRUE) {
[16:18:48.438]         base::sink(type = "output", split = FALSE)
[16:18:48.438]         if (TRUE) {
[16:18:48.438]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:18:48.438]         }
[16:18:48.438]         else {
[16:18:48.438]             ...future.result["stdout"] <- base::list(NULL)
[16:18:48.438]         }
[16:18:48.438]         base::close(...future.stdout)
[16:18:48.438]         ...future.stdout <- NULL
[16:18:48.438]     }
[16:18:48.438]     ...future.result$conditions <- ...future.conditions
[16:18:48.438]     ...future.result$finished <- base::Sys.time()
[16:18:48.438]     ...future.result
[16:18:48.438] }
[16:18:48.441] assign_globals() ...
[16:18:48.441] List of 5
[16:18:48.441]  $ ...future.FUN            :function (...)  
[16:18:48.441]  $ future.call.arguments    : list()
[16:18:48.441]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:48.441]  $ ...future.elements_ii    :List of 2
[16:18:48.441]   ..$ : int 0
[16:18:48.441]   ..$ : int 0
[16:18:48.441]  $ ...future.seeds_ii       :List of 2
[16:18:48.441]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[16:18:48.441]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[16:18:48.441]  $ ...future.globals.maxSize: NULL
[16:18:48.441]  - attr(*, "where")=List of 5
[16:18:48.441]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:18:48.441]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:18:48.441]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:18:48.441]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:18:48.441]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:18:48.441]  - attr(*, "resolved")= logi FALSE
[16:18:48.441]  - attr(*, "total_size")= num 616
[16:18:48.441]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:48.441]  - attr(*, "already-done")= logi TRUE
[16:18:48.447] - reassign environment for ‘...future.FUN’
[16:18:48.447] - copied ‘...future.FUN’ to environment
[16:18:48.447] - copied ‘future.call.arguments’ to environment
[16:18:48.447] - copied ‘...future.elements_ii’ to environment
[16:18:48.447] - copied ‘...future.seeds_ii’ to environment
[16:18:48.447] - copied ‘...future.globals.maxSize’ to environment
[16:18:48.447] assign_globals() ... done
[16:18:48.448] requestCore(): workers = 2
[16:18:48.450] MulticoreFuture started
[16:18:48.450] - Launch lazy future ... done
[16:18:48.451] run() for ‘MulticoreFuture’ ... done
[16:18:48.451] Created future:
[16:18:48.451] plan(): Setting new future strategy stack:
[16:18:48.452] List of future strategies:
[16:18:48.452] 1. sequential:
[16:18:48.452]    - args: function (..., envir = parent.frame())
[16:18:48.452]    - tweaked: FALSE
[16:18:48.452]    - call: NULL
[16:18:48.452] plan(): nbrOfWorkers() = 1
[16:18:48.455] plan(): Setting new future strategy stack:
[16:18:48.455] List of future strategies:
[16:18:48.455] 1. multicore:
[16:18:48.455]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:18:48.455]    - tweaked: FALSE
[16:18:48.455]    - call: plan(strategy)
[16:18:48.451] MulticoreFuture:
[16:18:48.451] Label: ‘future_replicate-1’
[16:18:48.451] Expression:
[16:18:48.451] {
[16:18:48.451]     do.call(function(...) {
[16:18:48.451]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:48.451]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:48.451]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:48.451]             on.exit(options(oopts), add = TRUE)
[16:18:48.451]         }
[16:18:48.451]         {
[16:18:48.451]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:48.451]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:48.451]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:48.451]                   envir = globalenv(), inherits = FALSE)
[16:18:48.451]                 ...future.FUN(...future.X_jj, ...)
[16:18:48.451]             })
[16:18:48.451]         }
[16:18:48.451]     }, args = future.call.arguments)
[16:18:48.451] }
[16:18:48.451] Lazy evaluation: FALSE
[16:18:48.451] Asynchronous evaluation: TRUE
[16:18:48.451] Local evaluation: TRUE
[16:18:48.451] Environment: R_GlobalEnv
[16:18:48.451] Capture standard output: TRUE
[16:18:48.451] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:18:48.451] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:18:48.451] Packages: <none>
[16:18:48.451] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:18:48.451] Resolved: FALSE
[16:18:48.451] Value: <not collected>
[16:18:48.451] Conditions captured: <none>
[16:18:48.451] Early signaling: FALSE
[16:18:48.451] Owner process: 20271db5-d788-b537-4432-0a26f2d2d030
[16:18:48.451] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:48.464] Chunk #1 of 2 ... DONE
[16:18:48.464] Chunk #2 of 2 ...
[16:18:48.465]  - Finding globals in 'X' for chunk #2 ...
[16:18:48.465] getGlobalsAndPackages() ...
[16:18:48.465] Searching for globals...
[16:18:48.466] plan(): nbrOfWorkers() = 2
[16:18:48.468] 
[16:18:48.468] Searching for globals ... DONE
[16:18:48.469] - globals: [0] <none>
[16:18:48.469] getGlobalsAndPackages() ... DONE
[16:18:48.469]    + additional globals found: [n=0] 
[16:18:48.469]    + additional namespaces needed: [n=0] 
[16:18:48.469]  - Finding globals in 'X' for chunk #2 ... DONE
[16:18:48.470]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:18:48.470]  - seeds: [3] <seeds>
[16:18:48.470]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:48.471] getGlobalsAndPackages() ...
[16:18:48.471] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:48.471] Resolving globals: FALSE
[16:18:48.472] Tweak future expression to call with '...' arguments ...
[16:18:48.472] {
[16:18:48.472]     do.call(function(...) {
[16:18:48.472]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:48.472]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:48.472]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:48.472]             on.exit(options(oopts), add = TRUE)
[16:18:48.472]         }
[16:18:48.472]         {
[16:18:48.472]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:48.472]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:48.472]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:48.472]                   envir = globalenv(), inherits = FALSE)
[16:18:48.472]                 ...future.FUN(...future.X_jj, ...)
[16:18:48.472]             })
[16:18:48.472]         }
[16:18:48.472]     }, args = future.call.arguments)
[16:18:48.472] }
[16:18:48.473] Tweak future expression to call with '...' arguments ... DONE
[16:18:48.473] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:48.474] 
[16:18:48.474] getGlobalsAndPackages() ... DONE
[16:18:48.475] run() for ‘Future’ ...
[16:18:48.475] - state: ‘created’
[16:18:48.475] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:18:48.480] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:48.480] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:18:48.480]   - Field: ‘label’
[16:18:48.481]   - Field: ‘local’
[16:18:48.481]   - Field: ‘owner’
[16:18:48.481]   - Field: ‘envir’
[16:18:48.481]   - Field: ‘workers’
[16:18:48.481]   - Field: ‘packages’
[16:18:48.481]   - Field: ‘gc’
[16:18:48.481]   - Field: ‘job’
[16:18:48.482]   - Field: ‘conditions’
[16:18:48.482]   - Field: ‘expr’
[16:18:48.482]   - Field: ‘uuid’
[16:18:48.482]   - Field: ‘seed’
[16:18:48.482]   - Field: ‘version’
[16:18:48.482]   - Field: ‘result’
[16:18:48.482]   - Field: ‘asynchronous’
[16:18:48.483]   - Field: ‘calls’
[16:18:48.483]   - Field: ‘globals’
[16:18:48.483]   - Field: ‘stdout’
[16:18:48.483]   - Field: ‘earlySignal’
[16:18:48.483]   - Field: ‘lazy’
[16:18:48.483]   - Field: ‘state’
[16:18:48.483] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:18:48.484] - Launch lazy future ...
[16:18:48.484] Packages needed by the future expression (n = 0): <none>
[16:18:48.484] Packages needed by future strategies (n = 0): <none>
[16:18:48.485] {
[16:18:48.485]     {
[16:18:48.485]         {
[16:18:48.485]             ...future.startTime <- base::Sys.time()
[16:18:48.485]             {
[16:18:48.485]                 {
[16:18:48.485]                   {
[16:18:48.485]                     {
[16:18:48.485]                       base::local({
[16:18:48.485]                         has_future <- base::requireNamespace("future", 
[16:18:48.485]                           quietly = TRUE)
[16:18:48.485]                         if (has_future) {
[16:18:48.485]                           ns <- base::getNamespace("future")
[16:18:48.485]                           version <- ns[[".package"]][["version"]]
[16:18:48.485]                           if (is.null(version)) 
[16:18:48.485]                             version <- utils::packageVersion("future")
[16:18:48.485]                         }
[16:18:48.485]                         else {
[16:18:48.485]                           version <- NULL
[16:18:48.485]                         }
[16:18:48.485]                         if (!has_future || version < "1.8.0") {
[16:18:48.485]                           info <- base::c(r_version = base::gsub("R version ", 
[16:18:48.485]                             "", base::R.version$version.string), 
[16:18:48.485]                             platform = base::sprintf("%s (%s-bit)", 
[16:18:48.485]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:18:48.485]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:18:48.485]                               "release", "version")], collapse = " "), 
[16:18:48.485]                             hostname = base::Sys.info()[["nodename"]])
[16:18:48.485]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:18:48.485]                             info)
[16:18:48.485]                           info <- base::paste(info, collapse = "; ")
[16:18:48.485]                           if (!has_future) {
[16:18:48.485]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:18:48.485]                               info)
[16:18:48.485]                           }
[16:18:48.485]                           else {
[16:18:48.485]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:18:48.485]                               info, version)
[16:18:48.485]                           }
[16:18:48.485]                           base::stop(msg)
[16:18:48.485]                         }
[16:18:48.485]                       })
[16:18:48.485]                     }
[16:18:48.485]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:18:48.485]                     base::options(mc.cores = 1L)
[16:18:48.485]                   }
[16:18:48.485]                   ...future.strategy.old <- future::plan("list")
[16:18:48.485]                   options(future.plan = NULL)
[16:18:48.485]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:18:48.485]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:18:48.485]                 }
[16:18:48.485]                 ...future.workdir <- getwd()
[16:18:48.485]             }
[16:18:48.485]             ...future.oldOptions <- base::as.list(base::.Options)
[16:18:48.485]             ...future.oldEnvVars <- base::Sys.getenv()
[16:18:48.485]         }
[16:18:48.485]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:18:48.485]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:18:48.485]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:18:48.485]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:18:48.485]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:18:48.485]             future.stdout.windows.reencode = NULL, width = 80L)
[16:18:48.485]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:18:48.485]             base::names(...future.oldOptions))
[16:18:48.485]     }
[16:18:48.485]     if (FALSE) {
[16:18:48.485]     }
[16:18:48.485]     else {
[16:18:48.485]         if (TRUE) {
[16:18:48.485]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:18:48.485]                 open = "w")
[16:18:48.485]         }
[16:18:48.485]         else {
[16:18:48.485]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:18:48.485]                 windows = "NUL", "/dev/null"), open = "w")
[16:18:48.485]         }
[16:18:48.485]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:18:48.485]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:18:48.485]             base::sink(type = "output", split = FALSE)
[16:18:48.485]             base::close(...future.stdout)
[16:18:48.485]         }, add = TRUE)
[16:18:48.485]     }
[16:18:48.485]     ...future.frame <- base::sys.nframe()
[16:18:48.485]     ...future.conditions <- base::list()
[16:18:48.485]     ...future.rng <- base::globalenv()$.Random.seed
[16:18:48.485]     if (FALSE) {
[16:18:48.485]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:18:48.485]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:18:48.485]     }
[16:18:48.485]     ...future.result <- base::tryCatch({
[16:18:48.485]         base::withCallingHandlers({
[16:18:48.485]             ...future.value <- base::withVisible(base::local({
[16:18:48.485]                 withCallingHandlers({
[16:18:48.485]                   {
[16:18:48.485]                     do.call(function(...) {
[16:18:48.485]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:48.485]                       if (!identical(...future.globals.maxSize.org, 
[16:18:48.485]                         ...future.globals.maxSize)) {
[16:18:48.485]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:48.485]                         on.exit(options(oopts), add = TRUE)
[16:18:48.485]                       }
[16:18:48.485]                       {
[16:18:48.485]                         lapply(seq_along(...future.elements_ii), 
[16:18:48.485]                           FUN = function(jj) {
[16:18:48.485]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:48.485]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:48.485]                               envir = globalenv(), inherits = FALSE)
[16:18:48.485]                             ...future.FUN(...future.X_jj, ...)
[16:18:48.485]                           })
[16:18:48.485]                       }
[16:18:48.485]                     }, args = future.call.arguments)
[16:18:48.485]                   }
[16:18:48.485]                 }, immediateCondition = function(cond) {
[16:18:48.485]                   save_rds <- function (object, pathname, ...) 
[16:18:48.485]                   {
[16:18:48.485]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:18:48.485]                     if (file_test("-f", pathname_tmp)) {
[16:18:48.485]                       fi_tmp <- file.info(pathname_tmp)
[16:18:48.485]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:18:48.485]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:18:48.485]                         fi_tmp[["mtime"]])
[16:18:48.485]                     }
[16:18:48.485]                     tryCatch({
[16:18:48.485]                       saveRDS(object, file = pathname_tmp, ...)
[16:18:48.485]                     }, error = function(ex) {
[16:18:48.485]                       msg <- conditionMessage(ex)
[16:18:48.485]                       fi_tmp <- file.info(pathname_tmp)
[16:18:48.485]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:18:48.485]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:18:48.485]                         fi_tmp[["mtime"]], msg)
[16:18:48.485]                       ex$message <- msg
[16:18:48.485]                       stop(ex)
[16:18:48.485]                     })
[16:18:48.485]                     stopifnot(file_test("-f", pathname_tmp))
[16:18:48.485]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:18:48.485]                     if (!res || file_test("-f", pathname_tmp)) {
[16:18:48.485]                       fi_tmp <- file.info(pathname_tmp)
[16:18:48.485]                       fi <- file.info(pathname)
[16:18:48.485]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:18:48.485]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:18:48.485]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:18:48.485]                         fi[["size"]], fi[["mtime"]])
[16:18:48.485]                       stop(msg)
[16:18:48.485]                     }
[16:18:48.485]                     invisible(pathname)
[16:18:48.485]                   }
[16:18:48.485]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:18:48.485]                     rootPath = tempdir()) 
[16:18:48.485]                   {
[16:18:48.485]                     obj <- list(time = Sys.time(), condition = cond)
[16:18:48.485]                     file <- tempfile(pattern = class(cond)[1], 
[16:18:48.485]                       tmpdir = path, fileext = ".rds")
[16:18:48.485]                     save_rds(obj, file)
[16:18:48.485]                   }
[16:18:48.485]                   saveImmediateCondition(cond, path = "/tmp/RtmpZpTIv7/.future/immediateConditions")
[16:18:48.485]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:48.485]                   {
[16:18:48.485]                     inherits <- base::inherits
[16:18:48.485]                     invokeRestart <- base::invokeRestart
[16:18:48.485]                     is.null <- base::is.null
[16:18:48.485]                     muffled <- FALSE
[16:18:48.485]                     if (inherits(cond, "message")) {
[16:18:48.485]                       muffled <- grepl(pattern, "muffleMessage")
[16:18:48.485]                       if (muffled) 
[16:18:48.485]                         invokeRestart("muffleMessage")
[16:18:48.485]                     }
[16:18:48.485]                     else if (inherits(cond, "warning")) {
[16:18:48.485]                       muffled <- grepl(pattern, "muffleWarning")
[16:18:48.485]                       if (muffled) 
[16:18:48.485]                         invokeRestart("muffleWarning")
[16:18:48.485]                     }
[16:18:48.485]                     else if (inherits(cond, "condition")) {
[16:18:48.485]                       if (!is.null(pattern)) {
[16:18:48.485]                         computeRestarts <- base::computeRestarts
[16:18:48.485]                         grepl <- base::grepl
[16:18:48.485]                         restarts <- computeRestarts(cond)
[16:18:48.485]                         for (restart in restarts) {
[16:18:48.485]                           name <- restart$name
[16:18:48.485]                           if (is.null(name)) 
[16:18:48.485]                             next
[16:18:48.485]                           if (!grepl(pattern, name)) 
[16:18:48.485]                             next
[16:18:48.485]                           invokeRestart(restart)
[16:18:48.485]                           muffled <- TRUE
[16:18:48.485]                           break
[16:18:48.485]                         }
[16:18:48.485]                       }
[16:18:48.485]                     }
[16:18:48.485]                     invisible(muffled)
[16:18:48.485]                   }
[16:18:48.485]                   muffleCondition(cond)
[16:18:48.485]                 })
[16:18:48.485]             }))
[16:18:48.485]             future::FutureResult(value = ...future.value$value, 
[16:18:48.485]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:48.485]                   ...future.rng), globalenv = if (FALSE) 
[16:18:48.485]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:18:48.485]                     ...future.globalenv.names))
[16:18:48.485]                 else NULL, started = ...future.startTime, version = "1.8")
[16:18:48.485]         }, condition = base::local({
[16:18:48.485]             c <- base::c
[16:18:48.485]             inherits <- base::inherits
[16:18:48.485]             invokeRestart <- base::invokeRestart
[16:18:48.485]             length <- base::length
[16:18:48.485]             list <- base::list
[16:18:48.485]             seq.int <- base::seq.int
[16:18:48.485]             signalCondition <- base::signalCondition
[16:18:48.485]             sys.calls <- base::sys.calls
[16:18:48.485]             `[[` <- base::`[[`
[16:18:48.485]             `+` <- base::`+`
[16:18:48.485]             `<<-` <- base::`<<-`
[16:18:48.485]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:18:48.485]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:18:48.485]                   3L)]
[16:18:48.485]             }
[16:18:48.485]             function(cond) {
[16:18:48.485]                 is_error <- inherits(cond, "error")
[16:18:48.485]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:18:48.485]                   NULL)
[16:18:48.485]                 if (is_error) {
[16:18:48.485]                   sessionInformation <- function() {
[16:18:48.485]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:18:48.485]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:18:48.485]                       search = base::search(), system = base::Sys.info())
[16:18:48.485]                   }
[16:18:48.485]                   ...future.conditions[[length(...future.conditions) + 
[16:18:48.485]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:18:48.485]                     cond$call), session = sessionInformation(), 
[16:18:48.485]                     timestamp = base::Sys.time(), signaled = 0L)
[16:18:48.485]                   signalCondition(cond)
[16:18:48.485]                 }
[16:18:48.485]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:18:48.485]                 "immediateCondition"))) {
[16:18:48.485]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:18:48.485]                   ...future.conditions[[length(...future.conditions) + 
[16:18:48.485]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:18:48.485]                   if (TRUE && !signal) {
[16:18:48.485]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:48.485]                     {
[16:18:48.485]                       inherits <- base::inherits
[16:18:48.485]                       invokeRestart <- base::invokeRestart
[16:18:48.485]                       is.null <- base::is.null
[16:18:48.485]                       muffled <- FALSE
[16:18:48.485]                       if (inherits(cond, "message")) {
[16:18:48.485]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:48.485]                         if (muffled) 
[16:18:48.485]                           invokeRestart("muffleMessage")
[16:18:48.485]                       }
[16:18:48.485]                       else if (inherits(cond, "warning")) {
[16:18:48.485]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:48.485]                         if (muffled) 
[16:18:48.485]                           invokeRestart("muffleWarning")
[16:18:48.485]                       }
[16:18:48.485]                       else if (inherits(cond, "condition")) {
[16:18:48.485]                         if (!is.null(pattern)) {
[16:18:48.485]                           computeRestarts <- base::computeRestarts
[16:18:48.485]                           grepl <- base::grepl
[16:18:48.485]                           restarts <- computeRestarts(cond)
[16:18:48.485]                           for (restart in restarts) {
[16:18:48.485]                             name <- restart$name
[16:18:48.485]                             if (is.null(name)) 
[16:18:48.485]                               next
[16:18:48.485]                             if (!grepl(pattern, name)) 
[16:18:48.485]                               next
[16:18:48.485]                             invokeRestart(restart)
[16:18:48.485]                             muffled <- TRUE
[16:18:48.485]                             break
[16:18:48.485]                           }
[16:18:48.485]                         }
[16:18:48.485]                       }
[16:18:48.485]                       invisible(muffled)
[16:18:48.485]                     }
[16:18:48.485]                     muffleCondition(cond, pattern = "^muffle")
[16:18:48.485]                   }
[16:18:48.485]                 }
[16:18:48.485]                 else {
[16:18:48.485]                   if (TRUE) {
[16:18:48.485]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:48.485]                     {
[16:18:48.485]                       inherits <- base::inherits
[16:18:48.485]                       invokeRestart <- base::invokeRestart
[16:18:48.485]                       is.null <- base::is.null
[16:18:48.485]                       muffled <- FALSE
[16:18:48.485]                       if (inherits(cond, "message")) {
[16:18:48.485]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:48.485]                         if (muffled) 
[16:18:48.485]                           invokeRestart("muffleMessage")
[16:18:48.485]                       }
[16:18:48.485]                       else if (inherits(cond, "warning")) {
[16:18:48.485]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:48.485]                         if (muffled) 
[16:18:48.485]                           invokeRestart("muffleWarning")
[16:18:48.485]                       }
[16:18:48.485]                       else if (inherits(cond, "condition")) {
[16:18:48.485]                         if (!is.null(pattern)) {
[16:18:48.485]                           computeRestarts <- base::computeRestarts
[16:18:48.485]                           grepl <- base::grepl
[16:18:48.485]                           restarts <- computeRestarts(cond)
[16:18:48.485]                           for (restart in restarts) {
[16:18:48.485]                             name <- restart$name
[16:18:48.485]                             if (is.null(name)) 
[16:18:48.485]                               next
[16:18:48.485]                             if (!grepl(pattern, name)) 
[16:18:48.485]                               next
[16:18:48.485]                             invokeRestart(restart)
[16:18:48.485]                             muffled <- TRUE
[16:18:48.485]                             break
[16:18:48.485]                           }
[16:18:48.485]                         }
[16:18:48.485]                       }
[16:18:48.485]                       invisible(muffled)
[16:18:48.485]                     }
[16:18:48.485]                     muffleCondition(cond, pattern = "^muffle")
[16:18:48.485]                   }
[16:18:48.485]                 }
[16:18:48.485]             }
[16:18:48.485]         }))
[16:18:48.485]     }, error = function(ex) {
[16:18:48.485]         base::structure(base::list(value = NULL, visible = NULL, 
[16:18:48.485]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:48.485]                 ...future.rng), started = ...future.startTime, 
[16:18:48.485]             finished = Sys.time(), session_uuid = NA_character_, 
[16:18:48.485]             version = "1.8"), class = "FutureResult")
[16:18:48.485]     }, finally = {
[16:18:48.485]         if (!identical(...future.workdir, getwd())) 
[16:18:48.485]             setwd(...future.workdir)
[16:18:48.485]         {
[16:18:48.485]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:18:48.485]                 ...future.oldOptions$nwarnings <- NULL
[16:18:48.485]             }
[16:18:48.485]             base::options(...future.oldOptions)
[16:18:48.485]             if (.Platform$OS.type == "windows") {
[16:18:48.485]                 old_names <- names(...future.oldEnvVars)
[16:18:48.485]                 envs <- base::Sys.getenv()
[16:18:48.485]                 names <- names(envs)
[16:18:48.485]                 common <- intersect(names, old_names)
[16:18:48.485]                 added <- setdiff(names, old_names)
[16:18:48.485]                 removed <- setdiff(old_names, names)
[16:18:48.485]                 changed <- common[...future.oldEnvVars[common] != 
[16:18:48.485]                   envs[common]]
[16:18:48.485]                 NAMES <- toupper(changed)
[16:18:48.485]                 args <- list()
[16:18:48.485]                 for (kk in seq_along(NAMES)) {
[16:18:48.485]                   name <- changed[[kk]]
[16:18:48.485]                   NAME <- NAMES[[kk]]
[16:18:48.485]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:48.485]                     next
[16:18:48.485]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:48.485]                 }
[16:18:48.485]                 NAMES <- toupper(added)
[16:18:48.485]                 for (kk in seq_along(NAMES)) {
[16:18:48.485]                   name <- added[[kk]]
[16:18:48.485]                   NAME <- NAMES[[kk]]
[16:18:48.485]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:48.485]                     next
[16:18:48.485]                   args[[name]] <- ""
[16:18:48.485]                 }
[16:18:48.485]                 NAMES <- toupper(removed)
[16:18:48.485]                 for (kk in seq_along(NAMES)) {
[16:18:48.485]                   name <- removed[[kk]]
[16:18:48.485]                   NAME <- NAMES[[kk]]
[16:18:48.485]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:48.485]                     next
[16:18:48.485]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:48.485]                 }
[16:18:48.485]                 if (length(args) > 0) 
[16:18:48.485]                   base::do.call(base::Sys.setenv, args = args)
[16:18:48.485]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:18:48.485]             }
[16:18:48.485]             else {
[16:18:48.485]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:18:48.485]             }
[16:18:48.485]             {
[16:18:48.485]                 if (base::length(...future.futureOptionsAdded) > 
[16:18:48.485]                   0L) {
[16:18:48.485]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:18:48.485]                   base::names(opts) <- ...future.futureOptionsAdded
[16:18:48.485]                   base::options(opts)
[16:18:48.485]                 }
[16:18:48.485]                 {
[16:18:48.485]                   {
[16:18:48.485]                     base::options(mc.cores = ...future.mc.cores.old)
[16:18:48.485]                     NULL
[16:18:48.485]                   }
[16:18:48.485]                   options(future.plan = NULL)
[16:18:48.485]                   if (is.na(NA_character_)) 
[16:18:48.485]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:18:48.485]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:18:48.485]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:18:48.485]                     .init = FALSE)
[16:18:48.485]                 }
[16:18:48.485]             }
[16:18:48.485]         }
[16:18:48.485]     })
[16:18:48.485]     if (TRUE) {
[16:18:48.485]         base::sink(type = "output", split = FALSE)
[16:18:48.485]         if (TRUE) {
[16:18:48.485]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:18:48.485]         }
[16:18:48.485]         else {
[16:18:48.485]             ...future.result["stdout"] <- base::list(NULL)
[16:18:48.485]         }
[16:18:48.485]         base::close(...future.stdout)
[16:18:48.485]         ...future.stdout <- NULL
[16:18:48.485]     }
[16:18:48.485]     ...future.result$conditions <- ...future.conditions
[16:18:48.485]     ...future.result$finished <- base::Sys.time()
[16:18:48.485]     ...future.result
[16:18:48.485] }
[16:18:48.488] assign_globals() ...
[16:18:48.488] List of 5
[16:18:48.488]  $ ...future.FUN            :function (...)  
[16:18:48.488]  $ future.call.arguments    : list()
[16:18:48.488]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:48.488]  $ ...future.elements_ii    :List of 3
[16:18:48.488]   ..$ : int 0
[16:18:48.488]   ..$ : int 0
[16:18:48.488]   ..$ : int 0
[16:18:48.488]  $ ...future.seeds_ii       :List of 3
[16:18:48.488]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[16:18:48.488]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[16:18:48.488]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[16:18:48.488]  $ ...future.globals.maxSize: NULL
[16:18:48.488]  - attr(*, "where")=List of 5
[16:18:48.488]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:18:48.488]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:18:48.488]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:18:48.488]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:18:48.488]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:18:48.488]  - attr(*, "resolved")= logi FALSE
[16:18:48.488]  - attr(*, "total_size")= num 616
[16:18:48.488]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:48.488]  - attr(*, "already-done")= logi TRUE
[16:18:48.496] - reassign environment for ‘...future.FUN’
[16:18:48.496] - copied ‘...future.FUN’ to environment
[16:18:48.497] - copied ‘future.call.arguments’ to environment
[16:18:48.497] - copied ‘...future.elements_ii’ to environment
[16:18:48.497] - copied ‘...future.seeds_ii’ to environment
[16:18:48.497] - copied ‘...future.globals.maxSize’ to environment
[16:18:48.497] assign_globals() ... done
[16:18:48.497] requestCore(): workers = 2
[16:18:48.500] MulticoreFuture started
[16:18:48.500] - Launch lazy future ... done
[16:18:48.500] run() for ‘MulticoreFuture’ ... done
[16:18:48.501] Created future:
[16:18:48.501] plan(): Setting new future strategy stack:
[16:18:48.502] List of future strategies:
[16:18:48.502] 1. sequential:
[16:18:48.502]    - args: function (..., envir = parent.frame())
[16:18:48.502]    - tweaked: FALSE
[16:18:48.502]    - call: NULL
[16:18:48.502] plan(): nbrOfWorkers() = 1
[16:18:48.505] plan(): Setting new future strategy stack:
[16:18:48.505] List of future strategies:
[16:18:48.505] 1. multicore:
[16:18:48.505]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:18:48.505]    - tweaked: FALSE
[16:18:48.505]    - call: plan(strategy)
[16:18:48.510] plan(): nbrOfWorkers() = 2
[16:18:48.501] MulticoreFuture:
[16:18:48.501] Label: ‘future_replicate-2’
[16:18:48.501] Expression:
[16:18:48.501] {
[16:18:48.501]     do.call(function(...) {
[16:18:48.501]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:48.501]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:48.501]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:48.501]             on.exit(options(oopts), add = TRUE)
[16:18:48.501]         }
[16:18:48.501]         {
[16:18:48.501]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:48.501]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:48.501]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:48.501]                   envir = globalenv(), inherits = FALSE)
[16:18:48.501]                 ...future.FUN(...future.X_jj, ...)
[16:18:48.501]             })
[16:18:48.501]         }
[16:18:48.501]     }, args = future.call.arguments)
[16:18:48.501] }
[16:18:48.501] Lazy evaluation: FALSE
[16:18:48.501] Asynchronous evaluation: TRUE
[16:18:48.501] Local evaluation: TRUE
[16:18:48.501] Environment: R_GlobalEnv
[16:18:48.501] Capture standard output: TRUE
[16:18:48.501] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:18:48.501] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:18:48.501] Packages: <none>
[16:18:48.501] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:18:48.501] Resolved: TRUE
[16:18:48.501] Value: <not collected>
[16:18:48.501] Conditions captured: <none>
[16:18:48.501] Early signaling: FALSE
[16:18:48.501] Owner process: 20271db5-d788-b537-4432-0a26f2d2d030
[16:18:48.501] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:48.512] Chunk #2 of 2 ... DONE
[16:18:48.512] Launching 2 futures (chunks) ... DONE
[16:18:48.512] Resolving 2 futures (chunks) ...
[16:18:48.512] resolve() on list ...
[16:18:48.512]  recursive: 0
[16:18:48.513]  length: 2
[16:18:48.513] 
[16:18:48.513] Future #1
[16:18:48.513] result() for MulticoreFuture ...
[16:18:48.514] result() for MulticoreFuture ...
[16:18:48.514] result() for MulticoreFuture ... done
[16:18:48.514] result() for MulticoreFuture ... done
[16:18:48.515] result() for MulticoreFuture ...
[16:18:48.515] result() for MulticoreFuture ... done
[16:18:48.515] signalConditionsASAP(MulticoreFuture, pos=1) ...
[16:18:48.515] - nx: 2
[16:18:48.515] - relay: TRUE
[16:18:48.515] - stdout: TRUE
[16:18:48.515] - signal: TRUE
[16:18:48.516] - resignal: FALSE
[16:18:48.516] - force: TRUE
[16:18:48.516] - relayed: [n=2] FALSE, FALSE
[16:18:48.516] - queued futures: [n=2] FALSE, FALSE
[16:18:48.516]  - until=1
[16:18:48.516]  - relaying element #1
[16:18:48.517] result() for MulticoreFuture ...
[16:18:48.517] result() for MulticoreFuture ... done
[16:18:48.517] result() for MulticoreFuture ...
[16:18:48.517] result() for MulticoreFuture ... done
[16:18:48.517] result() for MulticoreFuture ...
[16:18:48.517] result() for MulticoreFuture ... done
[16:18:48.518] result() for MulticoreFuture ...
[16:18:48.518] result() for MulticoreFuture ... done
[16:18:48.518] - relayed: [n=2] TRUE, FALSE
[16:18:48.518] - queued futures: [n=2] TRUE, FALSE
[16:18:48.518] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[16:18:48.518]  length: 1 (resolved future 1)
[16:18:48.519] Future #2
[16:18:48.519] result() for MulticoreFuture ...
[16:18:48.520] result() for MulticoreFuture ...
[16:18:48.520] result() for MulticoreFuture ... done
[16:18:48.520] result() for MulticoreFuture ... done
[16:18:48.520] result() for MulticoreFuture ...
[16:18:48.520] result() for MulticoreFuture ... done
[16:18:48.520] signalConditionsASAP(MulticoreFuture, pos=2) ...
[16:18:48.521] - nx: 2
[16:18:48.521] - relay: TRUE
[16:18:48.521] - stdout: TRUE
[16:18:48.521] - signal: TRUE
[16:18:48.521] - resignal: FALSE
[16:18:48.524] - force: TRUE
[16:18:48.524] - relayed: [n=2] TRUE, FALSE
[16:18:48.524] - queued futures: [n=2] TRUE, FALSE
[16:18:48.524]  - until=2
[16:18:48.524]  - relaying element #2
[16:18:48.525] result() for MulticoreFuture ...
[16:18:48.525] result() for MulticoreFuture ... done
[16:18:48.525] result() for MulticoreFuture ...
[16:18:48.525] result() for MulticoreFuture ... done
[16:18:48.525] result() for MulticoreFuture ...
[16:18:48.526] result() for MulticoreFuture ... done
[16:18:48.526] result() for MulticoreFuture ...
[16:18:48.526] result() for MulticoreFuture ... done
[16:18:48.526] - relayed: [n=2] TRUE, TRUE
[16:18:48.526] - queued futures: [n=2] TRUE, TRUE
[16:18:48.526] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[16:18:48.526]  length: 0 (resolved future 2)
[16:18:48.527] Relaying remaining futures
[16:18:48.527] signalConditionsASAP(NULL, pos=0) ...
[16:18:48.527] - nx: 2
[16:18:48.527] - relay: TRUE
[16:18:48.527] - stdout: TRUE
[16:18:48.527] - signal: TRUE
[16:18:48.527] - resignal: FALSE
[16:18:48.527] - force: TRUE
[16:18:48.528] - relayed: [n=2] TRUE, TRUE
[16:18:48.528] - queued futures: [n=2] TRUE, TRUE
 - flush all
[16:18:48.528] - relayed: [n=2] TRUE, TRUE
[16:18:48.528] - queued futures: [n=2] TRUE, TRUE
[16:18:48.528] signalConditionsASAP(NULL, pos=0) ... done
[16:18:48.528] resolve() on list ... DONE
[16:18:48.528] result() for MulticoreFuture ...
[16:18:48.529] result() for MulticoreFuture ... done
[16:18:48.529] result() for MulticoreFuture ...
[16:18:48.529] result() for MulticoreFuture ... done
[16:18:48.529] result() for MulticoreFuture ...
[16:18:48.529] result() for MulticoreFuture ... done
[16:18:48.529] result() for MulticoreFuture ...
[16:18:48.529] result() for MulticoreFuture ... done
[16:18:48.529]  - Number of value chunks collected: 2
[16:18:48.530] Resolving 2 futures (chunks) ... DONE
[16:18:48.530] Reducing values from 2 chunks ...
[16:18:48.530]  - Number of values collected after concatenation: 5
[16:18:48.530]  - Number of values expected: 5
[16:18:48.530] Reducing values from 2 chunks ... DONE
[16:18:48.530] future_lapply() ... DONE
[16:18:48.530] future_lapply() ...
[16:18:48.531] Generating random seeds ...
[16:18:48.531] Generating random seed streams for 5 elements ...
[16:18:48.531] Generating random seed streams for 5 elements ... DONE
[16:18:48.531] Generating random seeds ... DONE
[16:18:48.532] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:18:48.536] Number of chunks: 2
[16:18:48.536] getGlobalsAndPackagesXApply() ...
[16:18:48.536]  - future.globals: TRUE
[16:18:48.537] getGlobalsAndPackages() ...
[16:18:48.537] Searching for globals...
[16:18:48.538] - globals found: [2] ‘FUN’, ‘sample’
[16:18:48.538] Searching for globals ... DONE
[16:18:48.538] Resolving globals: FALSE
[16:18:48.539] The total size of the 1 globals is 616 bytes (616 bytes)
[16:18:48.539] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:18:48.539] - globals: [1] ‘FUN’
[16:18:48.539] 
[16:18:48.539] getGlobalsAndPackages() ... DONE
[16:18:48.540]  - globals found/used: [n=1] ‘FUN’
[16:18:48.540]  - needed namespaces: [n=0] 
[16:18:48.540] Finding globals ... DONE
[16:18:48.540]  - use_args: TRUE
[16:18:48.540]  - Getting '...' globals ...
[16:18:48.540] resolve() on list ...
[16:18:48.541]  recursive: 0
[16:18:48.541]  length: 1
[16:18:48.541]  elements: ‘...’
[16:18:48.541]  length: 0 (resolved future 1)
[16:18:48.541] resolve() on list ... DONE
[16:18:48.541]    - '...' content: [n=0] 
[16:18:48.541] List of 1
[16:18:48.541]  $ ...: list()
[16:18:48.541]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:48.541]  - attr(*, "where")=List of 1
[16:18:48.541]   ..$ ...:<environment: 0x55e79f011628> 
[16:18:48.541]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:48.541]  - attr(*, "resolved")= logi TRUE
[16:18:48.541]  - attr(*, "total_size")= num NA
[16:18:48.544]  - Getting '...' globals ... DONE
[16:18:48.545] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:18:48.545] List of 2
[16:18:48.545]  $ ...future.FUN:function (...)  
[16:18:48.545]  $ ...          : list()
[16:18:48.545]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:48.545]  - attr(*, "where")=List of 2
[16:18:48.545]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:18:48.545]   ..$ ...          :<environment: 0x55e79f011628> 
[16:18:48.545]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:48.545]  - attr(*, "resolved")= logi FALSE
[16:18:48.545]  - attr(*, "total_size")= num 616
[16:18:48.548] Packages to be attached in all futures: [n=0] 
[16:18:48.548] getGlobalsAndPackagesXApply() ... DONE
[16:18:48.548] Number of futures (= number of chunks): 2
[16:18:48.548] Launching 2 futures (chunks) ...
[16:18:48.548] Chunk #1 of 2 ...
[16:18:48.548]  - Finding globals in 'X' for chunk #1 ...
[16:18:48.548] getGlobalsAndPackages() ...
[16:18:48.548] Searching for globals...
[16:18:48.549] 
[16:18:48.549] Searching for globals ... DONE
[16:18:48.549] - globals: [0] <none>
[16:18:48.549] getGlobalsAndPackages() ... DONE
[16:18:48.549]    + additional globals found: [n=0] 
[16:18:48.549]    + additional namespaces needed: [n=0] 
[16:18:48.549]  - Finding globals in 'X' for chunk #1 ... DONE
[16:18:48.549]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:18:48.550]  - seeds: [2] <seeds>
[16:18:48.550]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:48.550] getGlobalsAndPackages() ...
[16:18:48.550] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:48.550] Resolving globals: FALSE
[16:18:48.550] Tweak future expression to call with '...' arguments ...
[16:18:48.550] {
[16:18:48.550]     do.call(function(...) {
[16:18:48.550]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:48.550]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:48.550]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:48.550]             on.exit(options(oopts), add = TRUE)
[16:18:48.550]         }
[16:18:48.550]         {
[16:18:48.550]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:48.550]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:48.550]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:48.550]                   envir = globalenv(), inherits = FALSE)
[16:18:48.550]                 ...future.FUN(...future.X_jj, ...)
[16:18:48.550]             })
[16:18:48.550]         }
[16:18:48.550]     }, args = future.call.arguments)
[16:18:48.550] }
[16:18:48.551] Tweak future expression to call with '...' arguments ... DONE
[16:18:48.551] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:48.551] 
[16:18:48.551] getGlobalsAndPackages() ... DONE
[16:18:48.551] run() for ‘Future’ ...
[16:18:48.552] - state: ‘created’
[16:18:48.552] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:18:48.556] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:48.556] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:18:48.556]   - Field: ‘label’
[16:18:48.558]   - Field: ‘local’
[16:18:48.558]   - Field: ‘owner’
[16:18:48.558]   - Field: ‘envir’
[16:18:48.558]   - Field: ‘workers’
[16:18:48.558]   - Field: ‘packages’
[16:18:48.559]   - Field: ‘gc’
[16:18:48.559]   - Field: ‘job’
[16:18:48.559]   - Field: ‘conditions’
[16:18:48.559]   - Field: ‘expr’
[16:18:48.559]   - Field: ‘uuid’
[16:18:48.559]   - Field: ‘seed’
[16:18:48.559]   - Field: ‘version’
[16:18:48.559]   - Field: ‘result’
[16:18:48.559]   - Field: ‘asynchronous’
[16:18:48.560]   - Field: ‘calls’
[16:18:48.560]   - Field: ‘globals’
[16:18:48.560]   - Field: ‘stdout’
[16:18:48.560]   - Field: ‘earlySignal’
[16:18:48.560]   - Field: ‘lazy’
[16:18:48.560]   - Field: ‘state’
[16:18:48.560] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:18:48.560] - Launch lazy future ...
[16:18:48.561] Packages needed by the future expression (n = 0): <none>
[16:18:48.561] Packages needed by future strategies (n = 0): <none>
[16:18:48.562] {
[16:18:48.562]     {
[16:18:48.562]         {
[16:18:48.562]             ...future.startTime <- base::Sys.time()
[16:18:48.562]             {
[16:18:48.562]                 {
[16:18:48.562]                   {
[16:18:48.562]                     {
[16:18:48.562]                       base::local({
[16:18:48.562]                         has_future <- base::requireNamespace("future", 
[16:18:48.562]                           quietly = TRUE)
[16:18:48.562]                         if (has_future) {
[16:18:48.562]                           ns <- base::getNamespace("future")
[16:18:48.562]                           version <- ns[[".package"]][["version"]]
[16:18:48.562]                           if (is.null(version)) 
[16:18:48.562]                             version <- utils::packageVersion("future")
[16:18:48.562]                         }
[16:18:48.562]                         else {
[16:18:48.562]                           version <- NULL
[16:18:48.562]                         }
[16:18:48.562]                         if (!has_future || version < "1.8.0") {
[16:18:48.562]                           info <- base::c(r_version = base::gsub("R version ", 
[16:18:48.562]                             "", base::R.version$version.string), 
[16:18:48.562]                             platform = base::sprintf("%s (%s-bit)", 
[16:18:48.562]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:18:48.562]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:18:48.562]                               "release", "version")], collapse = " "), 
[16:18:48.562]                             hostname = base::Sys.info()[["nodename"]])
[16:18:48.562]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:18:48.562]                             info)
[16:18:48.562]                           info <- base::paste(info, collapse = "; ")
[16:18:48.562]                           if (!has_future) {
[16:18:48.562]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:18:48.562]                               info)
[16:18:48.562]                           }
[16:18:48.562]                           else {
[16:18:48.562]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:18:48.562]                               info, version)
[16:18:48.562]                           }
[16:18:48.562]                           base::stop(msg)
[16:18:48.562]                         }
[16:18:48.562]                       })
[16:18:48.562]                     }
[16:18:48.562]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:18:48.562]                     base::options(mc.cores = 1L)
[16:18:48.562]                   }
[16:18:48.562]                   ...future.strategy.old <- future::plan("list")
[16:18:48.562]                   options(future.plan = NULL)
[16:18:48.562]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:18:48.562]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:18:48.562]                 }
[16:18:48.562]                 ...future.workdir <- getwd()
[16:18:48.562]             }
[16:18:48.562]             ...future.oldOptions <- base::as.list(base::.Options)
[16:18:48.562]             ...future.oldEnvVars <- base::Sys.getenv()
[16:18:48.562]         }
[16:18:48.562]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:18:48.562]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:18:48.562]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:18:48.562]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:18:48.562]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:18:48.562]             future.stdout.windows.reencode = NULL, width = 80L)
[16:18:48.562]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:18:48.562]             base::names(...future.oldOptions))
[16:18:48.562]     }
[16:18:48.562]     if (FALSE) {
[16:18:48.562]     }
[16:18:48.562]     else {
[16:18:48.562]         if (TRUE) {
[16:18:48.562]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:18:48.562]                 open = "w")
[16:18:48.562]         }
[16:18:48.562]         else {
[16:18:48.562]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:18:48.562]                 windows = "NUL", "/dev/null"), open = "w")
[16:18:48.562]         }
[16:18:48.562]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:18:48.562]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:18:48.562]             base::sink(type = "output", split = FALSE)
[16:18:48.562]             base::close(...future.stdout)
[16:18:48.562]         }, add = TRUE)
[16:18:48.562]     }
[16:18:48.562]     ...future.frame <- base::sys.nframe()
[16:18:48.562]     ...future.conditions <- base::list()
[16:18:48.562]     ...future.rng <- base::globalenv()$.Random.seed
[16:18:48.562]     if (FALSE) {
[16:18:48.562]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:18:48.562]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:18:48.562]     }
[16:18:48.562]     ...future.result <- base::tryCatch({
[16:18:48.562]         base::withCallingHandlers({
[16:18:48.562]             ...future.value <- base::withVisible(base::local({
[16:18:48.562]                 withCallingHandlers({
[16:18:48.562]                   {
[16:18:48.562]                     do.call(function(...) {
[16:18:48.562]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:48.562]                       if (!identical(...future.globals.maxSize.org, 
[16:18:48.562]                         ...future.globals.maxSize)) {
[16:18:48.562]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:48.562]                         on.exit(options(oopts), add = TRUE)
[16:18:48.562]                       }
[16:18:48.562]                       {
[16:18:48.562]                         lapply(seq_along(...future.elements_ii), 
[16:18:48.562]                           FUN = function(jj) {
[16:18:48.562]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:48.562]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:48.562]                               envir = globalenv(), inherits = FALSE)
[16:18:48.562]                             ...future.FUN(...future.X_jj, ...)
[16:18:48.562]                           })
[16:18:48.562]                       }
[16:18:48.562]                     }, args = future.call.arguments)
[16:18:48.562]                   }
[16:18:48.562]                 }, immediateCondition = function(cond) {
[16:18:48.562]                   save_rds <- function (object, pathname, ...) 
[16:18:48.562]                   {
[16:18:48.562]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:18:48.562]                     if (file_test("-f", pathname_tmp)) {
[16:18:48.562]                       fi_tmp <- file.info(pathname_tmp)
[16:18:48.562]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:18:48.562]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:18:48.562]                         fi_tmp[["mtime"]])
[16:18:48.562]                     }
[16:18:48.562]                     tryCatch({
[16:18:48.562]                       saveRDS(object, file = pathname_tmp, ...)
[16:18:48.562]                     }, error = function(ex) {
[16:18:48.562]                       msg <- conditionMessage(ex)
[16:18:48.562]                       fi_tmp <- file.info(pathname_tmp)
[16:18:48.562]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:18:48.562]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:18:48.562]                         fi_tmp[["mtime"]], msg)
[16:18:48.562]                       ex$message <- msg
[16:18:48.562]                       stop(ex)
[16:18:48.562]                     })
[16:18:48.562]                     stopifnot(file_test("-f", pathname_tmp))
[16:18:48.562]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:18:48.562]                     if (!res || file_test("-f", pathname_tmp)) {
[16:18:48.562]                       fi_tmp <- file.info(pathname_tmp)
[16:18:48.562]                       fi <- file.info(pathname)
[16:18:48.562]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:18:48.562]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:18:48.562]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:18:48.562]                         fi[["size"]], fi[["mtime"]])
[16:18:48.562]                       stop(msg)
[16:18:48.562]                     }
[16:18:48.562]                     invisible(pathname)
[16:18:48.562]                   }
[16:18:48.562]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:18:48.562]                     rootPath = tempdir()) 
[16:18:48.562]                   {
[16:18:48.562]                     obj <- list(time = Sys.time(), condition = cond)
[16:18:48.562]                     file <- tempfile(pattern = class(cond)[1], 
[16:18:48.562]                       tmpdir = path, fileext = ".rds")
[16:18:48.562]                     save_rds(obj, file)
[16:18:48.562]                   }
[16:18:48.562]                   saveImmediateCondition(cond, path = "/tmp/RtmpZpTIv7/.future/immediateConditions")
[16:18:48.562]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:48.562]                   {
[16:18:48.562]                     inherits <- base::inherits
[16:18:48.562]                     invokeRestart <- base::invokeRestart
[16:18:48.562]                     is.null <- base::is.null
[16:18:48.562]                     muffled <- FALSE
[16:18:48.562]                     if (inherits(cond, "message")) {
[16:18:48.562]                       muffled <- grepl(pattern, "muffleMessage")
[16:18:48.562]                       if (muffled) 
[16:18:48.562]                         invokeRestart("muffleMessage")
[16:18:48.562]                     }
[16:18:48.562]                     else if (inherits(cond, "warning")) {
[16:18:48.562]                       muffled <- grepl(pattern, "muffleWarning")
[16:18:48.562]                       if (muffled) 
[16:18:48.562]                         invokeRestart("muffleWarning")
[16:18:48.562]                     }
[16:18:48.562]                     else if (inherits(cond, "condition")) {
[16:18:48.562]                       if (!is.null(pattern)) {
[16:18:48.562]                         computeRestarts <- base::computeRestarts
[16:18:48.562]                         grepl <- base::grepl
[16:18:48.562]                         restarts <- computeRestarts(cond)
[16:18:48.562]                         for (restart in restarts) {
[16:18:48.562]                           name <- restart$name
[16:18:48.562]                           if (is.null(name)) 
[16:18:48.562]                             next
[16:18:48.562]                           if (!grepl(pattern, name)) 
[16:18:48.562]                             next
[16:18:48.562]                           invokeRestart(restart)
[16:18:48.562]                           muffled <- TRUE
[16:18:48.562]                           break
[16:18:48.562]                         }
[16:18:48.562]                       }
[16:18:48.562]                     }
[16:18:48.562]                     invisible(muffled)
[16:18:48.562]                   }
[16:18:48.562]                   muffleCondition(cond)
[16:18:48.562]                 })
[16:18:48.562]             }))
[16:18:48.562]             future::FutureResult(value = ...future.value$value, 
[16:18:48.562]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:48.562]                   ...future.rng), globalenv = if (FALSE) 
[16:18:48.562]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:18:48.562]                     ...future.globalenv.names))
[16:18:48.562]                 else NULL, started = ...future.startTime, version = "1.8")
[16:18:48.562]         }, condition = base::local({
[16:18:48.562]             c <- base::c
[16:18:48.562]             inherits <- base::inherits
[16:18:48.562]             invokeRestart <- base::invokeRestart
[16:18:48.562]             length <- base::length
[16:18:48.562]             list <- base::list
[16:18:48.562]             seq.int <- base::seq.int
[16:18:48.562]             signalCondition <- base::signalCondition
[16:18:48.562]             sys.calls <- base::sys.calls
[16:18:48.562]             `[[` <- base::`[[`
[16:18:48.562]             `+` <- base::`+`
[16:18:48.562]             `<<-` <- base::`<<-`
[16:18:48.562]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:18:48.562]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:18:48.562]                   3L)]
[16:18:48.562]             }
[16:18:48.562]             function(cond) {
[16:18:48.562]                 is_error <- inherits(cond, "error")
[16:18:48.562]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:18:48.562]                   NULL)
[16:18:48.562]                 if (is_error) {
[16:18:48.562]                   sessionInformation <- function() {
[16:18:48.562]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:18:48.562]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:18:48.562]                       search = base::search(), system = base::Sys.info())
[16:18:48.562]                   }
[16:18:48.562]                   ...future.conditions[[length(...future.conditions) + 
[16:18:48.562]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:18:48.562]                     cond$call), session = sessionInformation(), 
[16:18:48.562]                     timestamp = base::Sys.time(), signaled = 0L)
[16:18:48.562]                   signalCondition(cond)
[16:18:48.562]                 }
[16:18:48.562]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:18:48.562]                 "immediateCondition"))) {
[16:18:48.562]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:18:48.562]                   ...future.conditions[[length(...future.conditions) + 
[16:18:48.562]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:18:48.562]                   if (TRUE && !signal) {
[16:18:48.562]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:48.562]                     {
[16:18:48.562]                       inherits <- base::inherits
[16:18:48.562]                       invokeRestart <- base::invokeRestart
[16:18:48.562]                       is.null <- base::is.null
[16:18:48.562]                       muffled <- FALSE
[16:18:48.562]                       if (inherits(cond, "message")) {
[16:18:48.562]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:48.562]                         if (muffled) 
[16:18:48.562]                           invokeRestart("muffleMessage")
[16:18:48.562]                       }
[16:18:48.562]                       else if (inherits(cond, "warning")) {
[16:18:48.562]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:48.562]                         if (muffled) 
[16:18:48.562]                           invokeRestart("muffleWarning")
[16:18:48.562]                       }
[16:18:48.562]                       else if (inherits(cond, "condition")) {
[16:18:48.562]                         if (!is.null(pattern)) {
[16:18:48.562]                           computeRestarts <- base::computeRestarts
[16:18:48.562]                           grepl <- base::grepl
[16:18:48.562]                           restarts <- computeRestarts(cond)
[16:18:48.562]                           for (restart in restarts) {
[16:18:48.562]                             name <- restart$name
[16:18:48.562]                             if (is.null(name)) 
[16:18:48.562]                               next
[16:18:48.562]                             if (!grepl(pattern, name)) 
[16:18:48.562]                               next
[16:18:48.562]                             invokeRestart(restart)
[16:18:48.562]                             muffled <- TRUE
[16:18:48.562]                             break
[16:18:48.562]                           }
[16:18:48.562]                         }
[16:18:48.562]                       }
[16:18:48.562]                       invisible(muffled)
[16:18:48.562]                     }
[16:18:48.562]                     muffleCondition(cond, pattern = "^muffle")
[16:18:48.562]                   }
[16:18:48.562]                 }
[16:18:48.562]                 else {
[16:18:48.562]                   if (TRUE) {
[16:18:48.562]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:48.562]                     {
[16:18:48.562]                       inherits <- base::inherits
[16:18:48.562]                       invokeRestart <- base::invokeRestart
[16:18:48.562]                       is.null <- base::is.null
[16:18:48.562]                       muffled <- FALSE
[16:18:48.562]                       if (inherits(cond, "message")) {
[16:18:48.562]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:48.562]                         if (muffled) 
[16:18:48.562]                           invokeRestart("muffleMessage")
[16:18:48.562]                       }
[16:18:48.562]                       else if (inherits(cond, "warning")) {
[16:18:48.562]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:48.562]                         if (muffled) 
[16:18:48.562]                           invokeRestart("muffleWarning")
[16:18:48.562]                       }
[16:18:48.562]                       else if (inherits(cond, "condition")) {
[16:18:48.562]                         if (!is.null(pattern)) {
[16:18:48.562]                           computeRestarts <- base::computeRestarts
[16:18:48.562]                           grepl <- base::grepl
[16:18:48.562]                           restarts <- computeRestarts(cond)
[16:18:48.562]                           for (restart in restarts) {
[16:18:48.562]                             name <- restart$name
[16:18:48.562]                             if (is.null(name)) 
[16:18:48.562]                               next
[16:18:48.562]                             if (!grepl(pattern, name)) 
[16:18:48.562]                               next
[16:18:48.562]                             invokeRestart(restart)
[16:18:48.562]                             muffled <- TRUE
[16:18:48.562]                             break
[16:18:48.562]                           }
[16:18:48.562]                         }
[16:18:48.562]                       }
[16:18:48.562]                       invisible(muffled)
[16:18:48.562]                     }
[16:18:48.562]                     muffleCondition(cond, pattern = "^muffle")
[16:18:48.562]                   }
[16:18:48.562]                 }
[16:18:48.562]             }
[16:18:48.562]         }))
[16:18:48.562]     }, error = function(ex) {
[16:18:48.562]         base::structure(base::list(value = NULL, visible = NULL, 
[16:18:48.562]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:48.562]                 ...future.rng), started = ...future.startTime, 
[16:18:48.562]             finished = Sys.time(), session_uuid = NA_character_, 
[16:18:48.562]             version = "1.8"), class = "FutureResult")
[16:18:48.562]     }, finally = {
[16:18:48.562]         if (!identical(...future.workdir, getwd())) 
[16:18:48.562]             setwd(...future.workdir)
[16:18:48.562]         {
[16:18:48.562]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:18:48.562]                 ...future.oldOptions$nwarnings <- NULL
[16:18:48.562]             }
[16:18:48.562]             base::options(...future.oldOptions)
[16:18:48.562]             if (.Platform$OS.type == "windows") {
[16:18:48.562]                 old_names <- names(...future.oldEnvVars)
[16:18:48.562]                 envs <- base::Sys.getenv()
[16:18:48.562]                 names <- names(envs)
[16:18:48.562]                 common <- intersect(names, old_names)
[16:18:48.562]                 added <- setdiff(names, old_names)
[16:18:48.562]                 removed <- setdiff(old_names, names)
[16:18:48.562]                 changed <- common[...future.oldEnvVars[common] != 
[16:18:48.562]                   envs[common]]
[16:18:48.562]                 NAMES <- toupper(changed)
[16:18:48.562]                 args <- list()
[16:18:48.562]                 for (kk in seq_along(NAMES)) {
[16:18:48.562]                   name <- changed[[kk]]
[16:18:48.562]                   NAME <- NAMES[[kk]]
[16:18:48.562]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:48.562]                     next
[16:18:48.562]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:48.562]                 }
[16:18:48.562]                 NAMES <- toupper(added)
[16:18:48.562]                 for (kk in seq_along(NAMES)) {
[16:18:48.562]                   name <- added[[kk]]
[16:18:48.562]                   NAME <- NAMES[[kk]]
[16:18:48.562]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:48.562]                     next
[16:18:48.562]                   args[[name]] <- ""
[16:18:48.562]                 }
[16:18:48.562]                 NAMES <- toupper(removed)
[16:18:48.562]                 for (kk in seq_along(NAMES)) {
[16:18:48.562]                   name <- removed[[kk]]
[16:18:48.562]                   NAME <- NAMES[[kk]]
[16:18:48.562]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:48.562]                     next
[16:18:48.562]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:48.562]                 }
[16:18:48.562]                 if (length(args) > 0) 
[16:18:48.562]                   base::do.call(base::Sys.setenv, args = args)
[16:18:48.562]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:18:48.562]             }
[16:18:48.562]             else {
[16:18:48.562]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:18:48.562]             }
[16:18:48.562]             {
[16:18:48.562]                 if (base::length(...future.futureOptionsAdded) > 
[16:18:48.562]                   0L) {
[16:18:48.562]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:18:48.562]                   base::names(opts) <- ...future.futureOptionsAdded
[16:18:48.562]                   base::options(opts)
[16:18:48.562]                 }
[16:18:48.562]                 {
[16:18:48.562]                   {
[16:18:48.562]                     base::options(mc.cores = ...future.mc.cores.old)
[16:18:48.562]                     NULL
[16:18:48.562]                   }
[16:18:48.562]                   options(future.plan = NULL)
[16:18:48.562]                   if (is.na(NA_character_)) 
[16:18:48.562]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:18:48.562]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:18:48.562]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:18:48.562]                     .init = FALSE)
[16:18:48.562]                 }
[16:18:48.562]             }
[16:18:48.562]         }
[16:18:48.562]     })
[16:18:48.562]     if (TRUE) {
[16:18:48.562]         base::sink(type = "output", split = FALSE)
[16:18:48.562]         if (TRUE) {
[16:18:48.562]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:18:48.562]         }
[16:18:48.562]         else {
[16:18:48.562]             ...future.result["stdout"] <- base::list(NULL)
[16:18:48.562]         }
[16:18:48.562]         base::close(...future.stdout)
[16:18:48.562]         ...future.stdout <- NULL
[16:18:48.562]     }
[16:18:48.562]     ...future.result$conditions <- ...future.conditions
[16:18:48.562]     ...future.result$finished <- base::Sys.time()
[16:18:48.562]     ...future.result
[16:18:48.562] }
[16:18:48.564] assign_globals() ...
[16:18:48.564] List of 5
[16:18:48.564]  $ ...future.FUN            :function (...)  
[16:18:48.564]  $ future.call.arguments    : list()
[16:18:48.564]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:48.564]  $ ...future.elements_ii    :List of 2
[16:18:48.564]   ..$ : int 0
[16:18:48.564]   ..$ : int 0
[16:18:48.564]  $ ...future.seeds_ii       :List of 2
[16:18:48.564]   ..$ : int [1:7] 10407 1242173061 -1150840343 -834448425 701050094 -1369558043 -650964284
[16:18:48.564]   ..$ : int [1:7] 10407 859061261 1088872332 -1371790091 -942478768 -889560561 1393381402
[16:18:48.564]  $ ...future.globals.maxSize: NULL
[16:18:48.564]  - attr(*, "where")=List of 5
[16:18:48.564]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:18:48.564]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:18:48.564]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:18:48.564]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:18:48.564]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:18:48.564]  - attr(*, "resolved")= logi FALSE
[16:18:48.564]  - attr(*, "total_size")= num 616
[16:18:48.564]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:48.564]  - attr(*, "already-done")= logi TRUE
[16:18:48.570] - reassign environment for ‘...future.FUN’
[16:18:48.570] - copied ‘...future.FUN’ to environment
[16:18:48.570] - copied ‘future.call.arguments’ to environment
[16:18:48.570] - copied ‘...future.elements_ii’ to environment
[16:18:48.570] - copied ‘...future.seeds_ii’ to environment
[16:18:48.570] - copied ‘...future.globals.maxSize’ to environment
[16:18:48.571] assign_globals() ... done
[16:18:48.571] requestCore(): workers = 2
[16:18:48.573] MulticoreFuture started
[16:18:48.574] - Launch lazy future ... done
[16:18:48.574] run() for ‘MulticoreFuture’ ... done
[16:18:48.574] Created future:
[16:18:48.575] plan(): Setting new future strategy stack:
[16:18:48.575] List of future strategies:
[16:18:48.575] 1. sequential:
[16:18:48.575]    - args: function (..., envir = parent.frame())
[16:18:48.575]    - tweaked: FALSE
[16:18:48.575]    - call: NULL
[16:18:48.576] plan(): nbrOfWorkers() = 1
[16:18:48.578] plan(): Setting new future strategy stack:
[16:18:48.578] List of future strategies:
[16:18:48.578] 1. multicore:
[16:18:48.578]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:18:48.578]    - tweaked: FALSE
[16:18:48.578]    - call: plan(strategy)
[16:18:48.584] plan(): nbrOfWorkers() = 2
[16:18:48.574] MulticoreFuture:
[16:18:48.574] Label: ‘future_replicate-1’
[16:18:48.574] Expression:
[16:18:48.574] {
[16:18:48.574]     do.call(function(...) {
[16:18:48.574]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:48.574]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:48.574]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:48.574]             on.exit(options(oopts), add = TRUE)
[16:18:48.574]         }
[16:18:48.574]         {
[16:18:48.574]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:48.574]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:48.574]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:48.574]                   envir = globalenv(), inherits = FALSE)
[16:18:48.574]                 ...future.FUN(...future.X_jj, ...)
[16:18:48.574]             })
[16:18:48.574]         }
[16:18:48.574]     }, args = future.call.arguments)
[16:18:48.574] }
[16:18:48.574] Lazy evaluation: FALSE
[16:18:48.574] Asynchronous evaluation: TRUE
[16:18:48.574] Local evaluation: TRUE
[16:18:48.574] Environment: R_GlobalEnv
[16:18:48.574] Capture standard output: TRUE
[16:18:48.574] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:18:48.574] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:18:48.574] Packages: <none>
[16:18:48.574] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:18:48.574] Resolved: TRUE
[16:18:48.574] Value: <not collected>
[16:18:48.574] Conditions captured: <none>
[16:18:48.574] Early signaling: FALSE
[16:18:48.574] Owner process: 20271db5-d788-b537-4432-0a26f2d2d030
[16:18:48.574] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:48.585] Chunk #1 of 2 ... DONE
[16:18:48.585] Chunk #2 of 2 ...
[16:18:48.586]  - Finding globals in 'X' for chunk #2 ...
[16:18:48.586] getGlobalsAndPackages() ...
[16:18:48.586] Searching for globals...
[16:18:48.586] 
[16:18:48.587] Searching for globals ... DONE
[16:18:48.587] - globals: [0] <none>
[16:18:48.587] getGlobalsAndPackages() ... DONE
[16:18:48.587]    + additional globals found: [n=0] 
[16:18:48.587]    + additional namespaces needed: [n=0] 
[16:18:48.587]  - Finding globals in 'X' for chunk #2 ... DONE
[16:18:48.588]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:18:48.588]  - seeds: [3] <seeds>
[16:18:48.588]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:48.588] getGlobalsAndPackages() ...
[16:18:48.588] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:48.589] Resolving globals: FALSE
[16:18:48.589] Tweak future expression to call with '...' arguments ...
[16:18:48.589] {
[16:18:48.589]     do.call(function(...) {
[16:18:48.589]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:48.589]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:48.589]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:48.589]             on.exit(options(oopts), add = TRUE)
[16:18:48.589]         }
[16:18:48.589]         {
[16:18:48.589]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:48.589]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:48.589]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:48.589]                   envir = globalenv(), inherits = FALSE)
[16:18:48.589]                 ...future.FUN(...future.X_jj, ...)
[16:18:48.589]             })
[16:18:48.589]         }
[16:18:48.589]     }, args = future.call.arguments)
[16:18:48.589] }
[16:18:48.589] Tweak future expression to call with '...' arguments ... DONE
[16:18:48.590] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:48.590] 
[16:18:48.590] getGlobalsAndPackages() ... DONE
[16:18:48.591] run() for ‘Future’ ...
[16:18:48.591] - state: ‘created’
[16:18:48.591] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:18:48.596] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:48.597] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:18:48.597]   - Field: ‘label’
[16:18:48.597]   - Field: ‘local’
[16:18:48.597]   - Field: ‘owner’
[16:18:48.597]   - Field: ‘envir’
[16:18:48.597]   - Field: ‘workers’
[16:18:48.598]   - Field: ‘packages’
[16:18:48.598]   - Field: ‘gc’
[16:18:48.598]   - Field: ‘job’
[16:18:48.598]   - Field: ‘conditions’
[16:18:48.598]   - Field: ‘expr’
[16:18:48.598]   - Field: ‘uuid’
[16:18:48.598]   - Field: ‘seed’
[16:18:48.599]   - Field: ‘version’
[16:18:48.599]   - Field: ‘result’
[16:18:48.599]   - Field: ‘asynchronous’
[16:18:48.599]   - Field: ‘calls’
[16:18:48.599]   - Field: ‘globals’
[16:18:48.599]   - Field: ‘stdout’
[16:18:48.599]   - Field: ‘earlySignal’
[16:18:48.599]   - Field: ‘lazy’
[16:18:48.600]   - Field: ‘state’
[16:18:48.600] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:18:48.600] - Launch lazy future ...
[16:18:48.600] Packages needed by the future expression (n = 0): <none>
[16:18:48.601] Packages needed by future strategies (n = 0): <none>
[16:18:48.601] {
[16:18:48.601]     {
[16:18:48.601]         {
[16:18:48.601]             ...future.startTime <- base::Sys.time()
[16:18:48.601]             {
[16:18:48.601]                 {
[16:18:48.601]                   {
[16:18:48.601]                     {
[16:18:48.601]                       base::local({
[16:18:48.601]                         has_future <- base::requireNamespace("future", 
[16:18:48.601]                           quietly = TRUE)
[16:18:48.601]                         if (has_future) {
[16:18:48.601]                           ns <- base::getNamespace("future")
[16:18:48.601]                           version <- ns[[".package"]][["version"]]
[16:18:48.601]                           if (is.null(version)) 
[16:18:48.601]                             version <- utils::packageVersion("future")
[16:18:48.601]                         }
[16:18:48.601]                         else {
[16:18:48.601]                           version <- NULL
[16:18:48.601]                         }
[16:18:48.601]                         if (!has_future || version < "1.8.0") {
[16:18:48.601]                           info <- base::c(r_version = base::gsub("R version ", 
[16:18:48.601]                             "", base::R.version$version.string), 
[16:18:48.601]                             platform = base::sprintf("%s (%s-bit)", 
[16:18:48.601]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:18:48.601]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:18:48.601]                               "release", "version")], collapse = " "), 
[16:18:48.601]                             hostname = base::Sys.info()[["nodename"]])
[16:18:48.601]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:18:48.601]                             info)
[16:18:48.601]                           info <- base::paste(info, collapse = "; ")
[16:18:48.601]                           if (!has_future) {
[16:18:48.601]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:18:48.601]                               info)
[16:18:48.601]                           }
[16:18:48.601]                           else {
[16:18:48.601]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:18:48.601]                               info, version)
[16:18:48.601]                           }
[16:18:48.601]                           base::stop(msg)
[16:18:48.601]                         }
[16:18:48.601]                       })
[16:18:48.601]                     }
[16:18:48.601]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:18:48.601]                     base::options(mc.cores = 1L)
[16:18:48.601]                   }
[16:18:48.601]                   ...future.strategy.old <- future::plan("list")
[16:18:48.601]                   options(future.plan = NULL)
[16:18:48.601]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:18:48.601]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:18:48.601]                 }
[16:18:48.601]                 ...future.workdir <- getwd()
[16:18:48.601]             }
[16:18:48.601]             ...future.oldOptions <- base::as.list(base::.Options)
[16:18:48.601]             ...future.oldEnvVars <- base::Sys.getenv()
[16:18:48.601]         }
[16:18:48.601]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:18:48.601]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:18:48.601]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:18:48.601]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:18:48.601]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:18:48.601]             future.stdout.windows.reencode = NULL, width = 80L)
[16:18:48.601]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:18:48.601]             base::names(...future.oldOptions))
[16:18:48.601]     }
[16:18:48.601]     if (FALSE) {
[16:18:48.601]     }
[16:18:48.601]     else {
[16:18:48.601]         if (TRUE) {
[16:18:48.601]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:18:48.601]                 open = "w")
[16:18:48.601]         }
[16:18:48.601]         else {
[16:18:48.601]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:18:48.601]                 windows = "NUL", "/dev/null"), open = "w")
[16:18:48.601]         }
[16:18:48.601]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:18:48.601]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:18:48.601]             base::sink(type = "output", split = FALSE)
[16:18:48.601]             base::close(...future.stdout)
[16:18:48.601]         }, add = TRUE)
[16:18:48.601]     }
[16:18:48.601]     ...future.frame <- base::sys.nframe()
[16:18:48.601]     ...future.conditions <- base::list()
[16:18:48.601]     ...future.rng <- base::globalenv()$.Random.seed
[16:18:48.601]     if (FALSE) {
[16:18:48.601]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:18:48.601]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:18:48.601]     }
[16:18:48.601]     ...future.result <- base::tryCatch({
[16:18:48.601]         base::withCallingHandlers({
[16:18:48.601]             ...future.value <- base::withVisible(base::local({
[16:18:48.601]                 withCallingHandlers({
[16:18:48.601]                   {
[16:18:48.601]                     do.call(function(...) {
[16:18:48.601]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:48.601]                       if (!identical(...future.globals.maxSize.org, 
[16:18:48.601]                         ...future.globals.maxSize)) {
[16:18:48.601]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:48.601]                         on.exit(options(oopts), add = TRUE)
[16:18:48.601]                       }
[16:18:48.601]                       {
[16:18:48.601]                         lapply(seq_along(...future.elements_ii), 
[16:18:48.601]                           FUN = function(jj) {
[16:18:48.601]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:48.601]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:48.601]                               envir = globalenv(), inherits = FALSE)
[16:18:48.601]                             ...future.FUN(...future.X_jj, ...)
[16:18:48.601]                           })
[16:18:48.601]                       }
[16:18:48.601]                     }, args = future.call.arguments)
[16:18:48.601]                   }
[16:18:48.601]                 }, immediateCondition = function(cond) {
[16:18:48.601]                   save_rds <- function (object, pathname, ...) 
[16:18:48.601]                   {
[16:18:48.601]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:18:48.601]                     if (file_test("-f", pathname_tmp)) {
[16:18:48.601]                       fi_tmp <- file.info(pathname_tmp)
[16:18:48.601]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:18:48.601]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:18:48.601]                         fi_tmp[["mtime"]])
[16:18:48.601]                     }
[16:18:48.601]                     tryCatch({
[16:18:48.601]                       saveRDS(object, file = pathname_tmp, ...)
[16:18:48.601]                     }, error = function(ex) {
[16:18:48.601]                       msg <- conditionMessage(ex)
[16:18:48.601]                       fi_tmp <- file.info(pathname_tmp)
[16:18:48.601]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:18:48.601]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:18:48.601]                         fi_tmp[["mtime"]], msg)
[16:18:48.601]                       ex$message <- msg
[16:18:48.601]                       stop(ex)
[16:18:48.601]                     })
[16:18:48.601]                     stopifnot(file_test("-f", pathname_tmp))
[16:18:48.601]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:18:48.601]                     if (!res || file_test("-f", pathname_tmp)) {
[16:18:48.601]                       fi_tmp <- file.info(pathname_tmp)
[16:18:48.601]                       fi <- file.info(pathname)
[16:18:48.601]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:18:48.601]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:18:48.601]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:18:48.601]                         fi[["size"]], fi[["mtime"]])
[16:18:48.601]                       stop(msg)
[16:18:48.601]                     }
[16:18:48.601]                     invisible(pathname)
[16:18:48.601]                   }
[16:18:48.601]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:18:48.601]                     rootPath = tempdir()) 
[16:18:48.601]                   {
[16:18:48.601]                     obj <- list(time = Sys.time(), condition = cond)
[16:18:48.601]                     file <- tempfile(pattern = class(cond)[1], 
[16:18:48.601]                       tmpdir = path, fileext = ".rds")
[16:18:48.601]                     save_rds(obj, file)
[16:18:48.601]                   }
[16:18:48.601]                   saveImmediateCondition(cond, path = "/tmp/RtmpZpTIv7/.future/immediateConditions")
[16:18:48.601]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:48.601]                   {
[16:18:48.601]                     inherits <- base::inherits
[16:18:48.601]                     invokeRestart <- base::invokeRestart
[16:18:48.601]                     is.null <- base::is.null
[16:18:48.601]                     muffled <- FALSE
[16:18:48.601]                     if (inherits(cond, "message")) {
[16:18:48.601]                       muffled <- grepl(pattern, "muffleMessage")
[16:18:48.601]                       if (muffled) 
[16:18:48.601]                         invokeRestart("muffleMessage")
[16:18:48.601]                     }
[16:18:48.601]                     else if (inherits(cond, "warning")) {
[16:18:48.601]                       muffled <- grepl(pattern, "muffleWarning")
[16:18:48.601]                       if (muffled) 
[16:18:48.601]                         invokeRestart("muffleWarning")
[16:18:48.601]                     }
[16:18:48.601]                     else if (inherits(cond, "condition")) {
[16:18:48.601]                       if (!is.null(pattern)) {
[16:18:48.601]                         computeRestarts <- base::computeRestarts
[16:18:48.601]                         grepl <- base::grepl
[16:18:48.601]                         restarts <- computeRestarts(cond)
[16:18:48.601]                         for (restart in restarts) {
[16:18:48.601]                           name <- restart$name
[16:18:48.601]                           if (is.null(name)) 
[16:18:48.601]                             next
[16:18:48.601]                           if (!grepl(pattern, name)) 
[16:18:48.601]                             next
[16:18:48.601]                           invokeRestart(restart)
[16:18:48.601]                           muffled <- TRUE
[16:18:48.601]                           break
[16:18:48.601]                         }
[16:18:48.601]                       }
[16:18:48.601]                     }
[16:18:48.601]                     invisible(muffled)
[16:18:48.601]                   }
[16:18:48.601]                   muffleCondition(cond)
[16:18:48.601]                 })
[16:18:48.601]             }))
[16:18:48.601]             future::FutureResult(value = ...future.value$value, 
[16:18:48.601]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:48.601]                   ...future.rng), globalenv = if (FALSE) 
[16:18:48.601]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:18:48.601]                     ...future.globalenv.names))
[16:18:48.601]                 else NULL, started = ...future.startTime, version = "1.8")
[16:18:48.601]         }, condition = base::local({
[16:18:48.601]             c <- base::c
[16:18:48.601]             inherits <- base::inherits
[16:18:48.601]             invokeRestart <- base::invokeRestart
[16:18:48.601]             length <- base::length
[16:18:48.601]             list <- base::list
[16:18:48.601]             seq.int <- base::seq.int
[16:18:48.601]             signalCondition <- base::signalCondition
[16:18:48.601]             sys.calls <- base::sys.calls
[16:18:48.601]             `[[` <- base::`[[`
[16:18:48.601]             `+` <- base::`+`
[16:18:48.601]             `<<-` <- base::`<<-`
[16:18:48.601]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:18:48.601]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:18:48.601]                   3L)]
[16:18:48.601]             }
[16:18:48.601]             function(cond) {
[16:18:48.601]                 is_error <- inherits(cond, "error")
[16:18:48.601]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:18:48.601]                   NULL)
[16:18:48.601]                 if (is_error) {
[16:18:48.601]                   sessionInformation <- function() {
[16:18:48.601]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:18:48.601]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:18:48.601]                       search = base::search(), system = base::Sys.info())
[16:18:48.601]                   }
[16:18:48.601]                   ...future.conditions[[length(...future.conditions) + 
[16:18:48.601]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:18:48.601]                     cond$call), session = sessionInformation(), 
[16:18:48.601]                     timestamp = base::Sys.time(), signaled = 0L)
[16:18:48.601]                   signalCondition(cond)
[16:18:48.601]                 }
[16:18:48.601]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:18:48.601]                 "immediateCondition"))) {
[16:18:48.601]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:18:48.601]                   ...future.conditions[[length(...future.conditions) + 
[16:18:48.601]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:18:48.601]                   if (TRUE && !signal) {
[16:18:48.601]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:48.601]                     {
[16:18:48.601]                       inherits <- base::inherits
[16:18:48.601]                       invokeRestart <- base::invokeRestart
[16:18:48.601]                       is.null <- base::is.null
[16:18:48.601]                       muffled <- FALSE
[16:18:48.601]                       if (inherits(cond, "message")) {
[16:18:48.601]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:48.601]                         if (muffled) 
[16:18:48.601]                           invokeRestart("muffleMessage")
[16:18:48.601]                       }
[16:18:48.601]                       else if (inherits(cond, "warning")) {
[16:18:48.601]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:48.601]                         if (muffled) 
[16:18:48.601]                           invokeRestart("muffleWarning")
[16:18:48.601]                       }
[16:18:48.601]                       else if (inherits(cond, "condition")) {
[16:18:48.601]                         if (!is.null(pattern)) {
[16:18:48.601]                           computeRestarts <- base::computeRestarts
[16:18:48.601]                           grepl <- base::grepl
[16:18:48.601]                           restarts <- computeRestarts(cond)
[16:18:48.601]                           for (restart in restarts) {
[16:18:48.601]                             name <- restart$name
[16:18:48.601]                             if (is.null(name)) 
[16:18:48.601]                               next
[16:18:48.601]                             if (!grepl(pattern, name)) 
[16:18:48.601]                               next
[16:18:48.601]                             invokeRestart(restart)
[16:18:48.601]                             muffled <- TRUE
[16:18:48.601]                             break
[16:18:48.601]                           }
[16:18:48.601]                         }
[16:18:48.601]                       }
[16:18:48.601]                       invisible(muffled)
[16:18:48.601]                     }
[16:18:48.601]                     muffleCondition(cond, pattern = "^muffle")
[16:18:48.601]                   }
[16:18:48.601]                 }
[16:18:48.601]                 else {
[16:18:48.601]                   if (TRUE) {
[16:18:48.601]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:48.601]                     {
[16:18:48.601]                       inherits <- base::inherits
[16:18:48.601]                       invokeRestart <- base::invokeRestart
[16:18:48.601]                       is.null <- base::is.null
[16:18:48.601]                       muffled <- FALSE
[16:18:48.601]                       if (inherits(cond, "message")) {
[16:18:48.601]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:48.601]                         if (muffled) 
[16:18:48.601]                           invokeRestart("muffleMessage")
[16:18:48.601]                       }
[16:18:48.601]                       else if (inherits(cond, "warning")) {
[16:18:48.601]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:48.601]                         if (muffled) 
[16:18:48.601]                           invokeRestart("muffleWarning")
[16:18:48.601]                       }
[16:18:48.601]                       else if (inherits(cond, "condition")) {
[16:18:48.601]                         if (!is.null(pattern)) {
[16:18:48.601]                           computeRestarts <- base::computeRestarts
[16:18:48.601]                           grepl <- base::grepl
[16:18:48.601]                           restarts <- computeRestarts(cond)
[16:18:48.601]                           for (restart in restarts) {
[16:18:48.601]                             name <- restart$name
[16:18:48.601]                             if (is.null(name)) 
[16:18:48.601]                               next
[16:18:48.601]                             if (!grepl(pattern, name)) 
[16:18:48.601]                               next
[16:18:48.601]                             invokeRestart(restart)
[16:18:48.601]                             muffled <- TRUE
[16:18:48.601]                             break
[16:18:48.601]                           }
[16:18:48.601]                         }
[16:18:48.601]                       }
[16:18:48.601]                       invisible(muffled)
[16:18:48.601]                     }
[16:18:48.601]                     muffleCondition(cond, pattern = "^muffle")
[16:18:48.601]                   }
[16:18:48.601]                 }
[16:18:48.601]             }
[16:18:48.601]         }))
[16:18:48.601]     }, error = function(ex) {
[16:18:48.601]         base::structure(base::list(value = NULL, visible = NULL, 
[16:18:48.601]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:48.601]                 ...future.rng), started = ...future.startTime, 
[16:18:48.601]             finished = Sys.time(), session_uuid = NA_character_, 
[16:18:48.601]             version = "1.8"), class = "FutureResult")
[16:18:48.601]     }, finally = {
[16:18:48.601]         if (!identical(...future.workdir, getwd())) 
[16:18:48.601]             setwd(...future.workdir)
[16:18:48.601]         {
[16:18:48.601]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:18:48.601]                 ...future.oldOptions$nwarnings <- NULL
[16:18:48.601]             }
[16:18:48.601]             base::options(...future.oldOptions)
[16:18:48.601]             if (.Platform$OS.type == "windows") {
[16:18:48.601]                 old_names <- names(...future.oldEnvVars)
[16:18:48.601]                 envs <- base::Sys.getenv()
[16:18:48.601]                 names <- names(envs)
[16:18:48.601]                 common <- intersect(names, old_names)
[16:18:48.601]                 added <- setdiff(names, old_names)
[16:18:48.601]                 removed <- setdiff(old_names, names)
[16:18:48.601]                 changed <- common[...future.oldEnvVars[common] != 
[16:18:48.601]                   envs[common]]
[16:18:48.601]                 NAMES <- toupper(changed)
[16:18:48.601]                 args <- list()
[16:18:48.601]                 for (kk in seq_along(NAMES)) {
[16:18:48.601]                   name <- changed[[kk]]
[16:18:48.601]                   NAME <- NAMES[[kk]]
[16:18:48.601]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:48.601]                     next
[16:18:48.601]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:48.601]                 }
[16:18:48.601]                 NAMES <- toupper(added)
[16:18:48.601]                 for (kk in seq_along(NAMES)) {
[16:18:48.601]                   name <- added[[kk]]
[16:18:48.601]                   NAME <- NAMES[[kk]]
[16:18:48.601]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:48.601]                     next
[16:18:48.601]                   args[[name]] <- ""
[16:18:48.601]                 }
[16:18:48.601]                 NAMES <- toupper(removed)
[16:18:48.601]                 for (kk in seq_along(NAMES)) {
[16:18:48.601]                   name <- removed[[kk]]
[16:18:48.601]                   NAME <- NAMES[[kk]]
[16:18:48.601]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:48.601]                     next
[16:18:48.601]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:48.601]                 }
[16:18:48.601]                 if (length(args) > 0) 
[16:18:48.601]                   base::do.call(base::Sys.setenv, args = args)
[16:18:48.601]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:18:48.601]             }
[16:18:48.601]             else {
[16:18:48.601]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:18:48.601]             }
[16:18:48.601]             {
[16:18:48.601]                 if (base::length(...future.futureOptionsAdded) > 
[16:18:48.601]                   0L) {
[16:18:48.601]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:18:48.601]                   base::names(opts) <- ...future.futureOptionsAdded
[16:18:48.601]                   base::options(opts)
[16:18:48.601]                 }
[16:18:48.601]                 {
[16:18:48.601]                   {
[16:18:48.601]                     base::options(mc.cores = ...future.mc.cores.old)
[16:18:48.601]                     NULL
[16:18:48.601]                   }
[16:18:48.601]                   options(future.plan = NULL)
[16:18:48.601]                   if (is.na(NA_character_)) 
[16:18:48.601]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:18:48.601]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:18:48.601]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:18:48.601]                     .init = FALSE)
[16:18:48.601]                 }
[16:18:48.601]             }
[16:18:48.601]         }
[16:18:48.601]     })
[16:18:48.601]     if (TRUE) {
[16:18:48.601]         base::sink(type = "output", split = FALSE)
[16:18:48.601]         if (TRUE) {
[16:18:48.601]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:18:48.601]         }
[16:18:48.601]         else {
[16:18:48.601]             ...future.result["stdout"] <- base::list(NULL)
[16:18:48.601]         }
[16:18:48.601]         base::close(...future.stdout)
[16:18:48.601]         ...future.stdout <- NULL
[16:18:48.601]     }
[16:18:48.601]     ...future.result$conditions <- ...future.conditions
[16:18:48.601]     ...future.result$finished <- base::Sys.time()
[16:18:48.601]     ...future.result
[16:18:48.601] }
[16:18:48.605] assign_globals() ...
[16:18:48.605] List of 5
[16:18:48.605]  $ ...future.FUN            :function (...)  
[16:18:48.605]  $ future.call.arguments    : list()
[16:18:48.605]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:48.605]  $ ...future.elements_ii    :List of 3
[16:18:48.605]   ..$ : int 0
[16:18:48.605]   ..$ : int 0
[16:18:48.605]   ..$ : int 0
[16:18:48.605]  $ ...future.seeds_ii       :List of 3
[16:18:48.605]   ..$ : int [1:7] 10407 -1977952646 362645338 -1927542548 -742448269 -2030870718 1472975712
[16:18:48.605]   ..$ : int [1:7] 10407 -781199300 -1470244364 -1435938985 -1154922760 795337516 2089908040
[16:18:48.605]   ..$ : int [1:7] 10407 -1281561623 1745663508 -502066495 1003795914 -1805763079 -205768335
[16:18:48.605]  $ ...future.globals.maxSize: NULL
[16:18:48.605]  - attr(*, "where")=List of 5
[16:18:48.605]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:18:48.605]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:18:48.605]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:18:48.605]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:18:48.605]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:18:48.605]  - attr(*, "resolved")= logi FALSE
[16:18:48.605]  - attr(*, "total_size")= num 616
[16:18:48.605]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:48.605]  - attr(*, "already-done")= logi TRUE
[16:18:48.619] - reassign environment for ‘...future.FUN’
[16:18:48.619] - copied ‘...future.FUN’ to environment
[16:18:48.619] - copied ‘future.call.arguments’ to environment
[16:18:48.619] - copied ‘...future.elements_ii’ to environment
[16:18:48.620] - copied ‘...future.seeds_ii’ to environment
[16:18:48.620] - copied ‘...future.globals.maxSize’ to environment
[16:18:48.620] assign_globals() ... done
[16:18:48.620] requestCore(): workers = 2
[16:18:48.623] MulticoreFuture started
[16:18:48.623] - Launch lazy future ... done
[16:18:48.623] run() for ‘MulticoreFuture’ ... done
[16:18:48.624] Created future:
[16:18:48.624] plan(): Setting new future strategy stack:
[16:18:48.624] List of future strategies:
[16:18:48.624] 1. sequential:
[16:18:48.624]    - args: function (..., envir = parent.frame())
[16:18:48.624]    - tweaked: FALSE
[16:18:48.624]    - call: NULL
[16:18:48.625] plan(): nbrOfWorkers() = 1
[16:18:48.627] plan(): Setting new future strategy stack:
[16:18:48.628] List of future strategies:
[16:18:48.628] 1. multicore:
[16:18:48.628]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:18:48.628]    - tweaked: FALSE
[16:18:48.628]    - call: plan(strategy)
[16:18:48.633] plan(): nbrOfWorkers() = 2
[16:18:48.624] MulticoreFuture:
[16:18:48.624] Label: ‘future_replicate-2’
[16:18:48.624] Expression:
[16:18:48.624] {
[16:18:48.624]     do.call(function(...) {
[16:18:48.624]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:48.624]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:48.624]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:48.624]             on.exit(options(oopts), add = TRUE)
[16:18:48.624]         }
[16:18:48.624]         {
[16:18:48.624]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:48.624]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:48.624]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:48.624]                   envir = globalenv(), inherits = FALSE)
[16:18:48.624]                 ...future.FUN(...future.X_jj, ...)
[16:18:48.624]             })
[16:18:48.624]         }
[16:18:48.624]     }, args = future.call.arguments)
[16:18:48.624] }
[16:18:48.624] Lazy evaluation: FALSE
[16:18:48.624] Asynchronous evaluation: TRUE
[16:18:48.624] Local evaluation: TRUE
[16:18:48.624] Environment: R_GlobalEnv
[16:18:48.624] Capture standard output: TRUE
[16:18:48.624] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:18:48.624] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:18:48.624] Packages: <none>
[16:18:48.624] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:18:48.624] Resolved: TRUE
[16:18:48.624] Value: <not collected>
[16:18:48.624] Conditions captured: <none>
[16:18:48.624] Early signaling: FALSE
[16:18:48.624] Owner process: 20271db5-d788-b537-4432-0a26f2d2d030
[16:18:48.624] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:48.634] Chunk #2 of 2 ... DONE
[16:18:48.634] Launching 2 futures (chunks) ... DONE
[16:18:48.634] Resolving 2 futures (chunks) ...
[16:18:48.635] resolve() on list ...
[16:18:48.635]  recursive: 0
[16:18:48.635]  length: 2
[16:18:48.635] 
[16:18:48.635] Future #1
[16:18:48.636] result() for MulticoreFuture ...
[16:18:48.637] result() for MulticoreFuture ...
[16:18:48.637] result() for MulticoreFuture ... done
[16:18:48.637] result() for MulticoreFuture ... done
[16:18:48.637] result() for MulticoreFuture ...
[16:18:48.637] result() for MulticoreFuture ... done
[16:18:48.638] signalConditionsASAP(MulticoreFuture, pos=1) ...
[16:18:48.638] - nx: 2
[16:18:48.638] - relay: TRUE
[16:18:48.638] - stdout: TRUE
[16:18:48.638] - signal: TRUE
[16:18:48.638] - resignal: FALSE
[16:18:48.639] - force: TRUE
[16:18:48.639] - relayed: [n=2] FALSE, FALSE
[16:18:48.639] - queued futures: [n=2] FALSE, FALSE
[16:18:48.639]  - until=1
[16:18:48.639]  - relaying element #1
[16:18:48.640] result() for MulticoreFuture ...
[16:18:48.640] result() for MulticoreFuture ... done
[16:18:48.640] result() for MulticoreFuture ...
[16:18:48.640] result() for MulticoreFuture ... done
[16:18:48.640] result() for MulticoreFuture ...
[16:18:48.641] result() for MulticoreFuture ... done
[16:18:48.641] result() for MulticoreFuture ...
[16:18:48.641] result() for MulticoreFuture ... done
[16:18:48.641] - relayed: [n=2] TRUE, FALSE
[16:18:48.641] - queued futures: [n=2] TRUE, FALSE
[16:18:48.642] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[16:18:48.642]  length: 1 (resolved future 1)
[16:18:48.642] Future #2
[16:18:48.642] result() for MulticoreFuture ...
[16:18:48.643] result() for MulticoreFuture ...
[16:18:48.643] result() for MulticoreFuture ... done
[16:18:48.644] result() for MulticoreFuture ... done
[16:18:48.644] result() for MulticoreFuture ...
[16:18:48.644] result() for MulticoreFuture ... done
[16:18:48.644] signalConditionsASAP(MulticoreFuture, pos=2) ...
[16:18:48.644] - nx: 2
[16:18:48.644] - relay: TRUE
[16:18:48.645] - stdout: TRUE
[16:18:48.645] - signal: TRUE
[16:18:48.645] - resignal: FALSE
[16:18:48.645] - force: TRUE
[16:18:48.645] - relayed: [n=2] TRUE, FALSE
[16:18:48.645] - queued futures: [n=2] TRUE, FALSE
[16:18:48.645]  - until=2
[16:18:48.645]  - relaying element #2
[16:18:48.646] result() for MulticoreFuture ...
[16:18:48.646] result() for MulticoreFuture ... done
[16:18:48.646] result() for MulticoreFuture ...
[16:18:48.646] result() for MulticoreFuture ... done
[16:18:48.646] result() for MulticoreFuture ...
[16:18:48.646] result() for MulticoreFuture ... done
[16:18:48.646] result() for MulticoreFuture ...
[16:18:48.646] result() for MulticoreFuture ... done
[16:18:48.647] - relayed: [n=2] TRUE, TRUE
[16:18:48.647] - queued futures: [n=2] TRUE, TRUE
[16:18:48.647] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[16:18:48.647]  length: 0 (resolved future 2)
[16:18:48.647] Relaying remaining futures
[16:18:48.647] signalConditionsASAP(NULL, pos=0) ...
[16:18:48.647] - nx: 2
[16:18:48.647] - relay: TRUE
[16:18:48.647] - stdout: TRUE
[16:18:48.648] - signal: TRUE
[16:18:48.648] - resignal: FALSE
[16:18:48.648] - force: TRUE
[16:18:48.648] - relayed: [n=2] TRUE, TRUE
[16:18:48.648] - queued futures: [n=2] TRUE, TRUE
 - flush all
[16:18:48.648] - relayed: [n=2] TRUE, TRUE
[16:18:48.648] - queued futures: [n=2] TRUE, TRUE
[16:18:48.648] signalConditionsASAP(NULL, pos=0) ... done
[16:18:48.649] resolve() on list ... DONE
[16:18:48.649] result() for MulticoreFuture ...
[16:18:48.649] result() for MulticoreFuture ... done
[16:18:48.649] result() for MulticoreFuture ...
[16:18:48.649] result() for MulticoreFuture ... done
[16:18:48.649] result() for MulticoreFuture ...
[16:18:48.649] result() for MulticoreFuture ... done
[16:18:48.649] result() for MulticoreFuture ...
[16:18:48.650] result() for MulticoreFuture ... done
[16:18:48.650]  - Number of value chunks collected: 2
[16:18:48.650] Resolving 2 futures (chunks) ... DONE
[16:18:48.650] Reducing values from 2 chunks ...
[16:18:48.650]  - Number of values collected after concatenation: 5
[16:18:48.650]  - Number of values expected: 5
[16:18:48.650] Reducing values from 2 chunks ... DONE
[16:18:48.650] future_lapply() ... DONE
- example(replicate) ...
[16:18:48.651] future_lapply() ...
[16:18:48.651] Generating random seeds ...
[16:18:48.652] Generating random seed streams for 5 elements ...
[16:18:48.652] Generating random seed streams for 5 elements ... DONE
[16:18:48.652] Generating random seeds ... DONE
[16:18:48.652] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:18:48.657] Number of chunks: 2
[16:18:48.657] getGlobalsAndPackagesXApply() ...
[16:18:48.657]  - future.globals: TRUE
[16:18:48.658] getGlobalsAndPackages() ...
[16:18:48.658] Searching for globals...
[16:18:48.662] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[16:18:48.663] Searching for globals ... DONE
[16:18:48.663] Resolving globals: FALSE
[16:18:48.663] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[16:18:48.664] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[16:18:48.664] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[16:18:48.664] 
[16:18:48.665] getGlobalsAndPackages() ... DONE
[16:18:48.665]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[16:18:48.665]  - needed namespaces: [n=0] 
[16:18:48.665] Finding globals ... DONE
[16:18:48.665]  - use_args: TRUE
[16:18:48.665]  - Getting '...' globals ...
[16:18:48.666] resolve() on list ...
[16:18:48.666]  recursive: 0
[16:18:48.666]  length: 1
[16:18:48.666]  elements: ‘...’
[16:18:48.666]  length: 0 (resolved future 1)
[16:18:48.666] resolve() on list ... DONE
[16:18:48.666]    - '...' content: [n=0] 
[16:18:48.666] List of 1
[16:18:48.666]  $ ...: list()
[16:18:48.666]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:48.666]  - attr(*, "where")=List of 1
[16:18:48.666]   ..$ ...:<environment: 0x55e7a09e82b8> 
[16:18:48.666]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:48.666]  - attr(*, "resolved")= logi TRUE
[16:18:48.666]  - attr(*, "total_size")= num NA
[16:18:48.670]  - Getting '...' globals ... DONE
[16:18:48.670] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[16:18:48.670] List of 4
[16:18:48.670]  $ ...future.FUN:function (...)  
[16:18:48.670]  $ foo          :function (x = 1, y = 2)  
[16:18:48.670]  $ x            : num 3
[16:18:48.670]  $ ...          : list()
[16:18:48.670]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:48.670]  - attr(*, "where")=List of 4
[16:18:48.670]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:18:48.670]   ..$ foo          :<environment: R_EmptyEnv> 
[16:18:48.670]   ..$ x            :<environment: R_EmptyEnv> 
[16:18:48.670]   ..$ ...          :<environment: 0x55e7a09e82b8> 
[16:18:48.670]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:48.670]  - attr(*, "resolved")= logi FALSE
[16:18:48.670]  - attr(*, "total_size")= num 2200
[16:18:48.674] Packages to be attached in all futures: [n=0] 
[16:18:48.674] getGlobalsAndPackagesXApply() ... DONE
[16:18:48.674] Number of futures (= number of chunks): 2
[16:18:48.674] Launching 2 futures (chunks) ...
[16:18:48.675] Chunk #1 of 2 ...
[16:18:48.675]  - Finding globals in 'X' for chunk #1 ...
[16:18:48.675] getGlobalsAndPackages() ...
[16:18:48.675] Searching for globals...
[16:18:48.675] 
[16:18:48.675] Searching for globals ... DONE
[16:18:48.675] - globals: [0] <none>
[16:18:48.675] getGlobalsAndPackages() ... DONE
[16:18:48.676]    + additional globals found: [n=0] 
[16:18:48.676]    + additional namespaces needed: [n=0] 
[16:18:48.676]  - Finding globals in 'X' for chunk #1 ... DONE
[16:18:48.676]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:18:48.676]  - seeds: [2] <seeds>
[16:18:48.676]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:48.676] getGlobalsAndPackages() ...
[16:18:48.676] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:48.676] Resolving globals: FALSE
[16:18:48.677] Tweak future expression to call with '...' arguments ...
[16:18:48.677] {
[16:18:48.677]     do.call(function(...) {
[16:18:48.677]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:48.677]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:48.677]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:48.677]             on.exit(options(oopts), add = TRUE)
[16:18:48.677]         }
[16:18:48.677]         {
[16:18:48.677]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:48.677]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:48.677]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:48.677]                   envir = globalenv(), inherits = FALSE)
[16:18:48.677]                 ...future.FUN(...future.X_jj, ...)
[16:18:48.677]             })
[16:18:48.677]         }
[16:18:48.677]     }, args = future.call.arguments)
[16:18:48.677] }
[16:18:48.677] Tweak future expression to call with '...' arguments ... DONE
[16:18:48.677] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:48.677] 
[16:18:48.678] getGlobalsAndPackages() ... DONE
[16:18:48.678] run() for ‘Future’ ...
[16:18:48.678] - state: ‘created’
[16:18:48.678] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:18:48.682] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:48.682] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:18:48.682]   - Field: ‘label’
[16:18:48.683]   - Field: ‘local’
[16:18:48.683]   - Field: ‘owner’
[16:18:48.683]   - Field: ‘envir’
[16:18:48.683]   - Field: ‘workers’
[16:18:48.683]   - Field: ‘packages’
[16:18:48.683]   - Field: ‘gc’
[16:18:48.683]   - Field: ‘job’
[16:18:48.683]   - Field: ‘conditions’
[16:18:48.683]   - Field: ‘expr’
[16:18:48.683]   - Field: ‘uuid’
[16:18:48.684]   - Field: ‘seed’
[16:18:48.684]   - Field: ‘version’
[16:18:48.684]   - Field: ‘result’
[16:18:48.684]   - Field: ‘asynchronous’
[16:18:48.684]   - Field: ‘calls’
[16:18:48.684]   - Field: ‘globals’
[16:18:48.684]   - Field: ‘stdout’
[16:18:48.684]   - Field: ‘earlySignal’
[16:18:48.684]   - Field: ‘lazy’
[16:18:48.684]   - Field: ‘state’
[16:18:48.685] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:18:48.685] - Launch lazy future ...
[16:18:48.685] Packages needed by the future expression (n = 0): <none>
[16:18:48.685] Packages needed by future strategies (n = 0): <none>
[16:18:48.686] {
[16:18:48.686]     {
[16:18:48.686]         {
[16:18:48.686]             ...future.startTime <- base::Sys.time()
[16:18:48.686]             {
[16:18:48.686]                 {
[16:18:48.686]                   {
[16:18:48.686]                     {
[16:18:48.686]                       base::local({
[16:18:48.686]                         has_future <- base::requireNamespace("future", 
[16:18:48.686]                           quietly = TRUE)
[16:18:48.686]                         if (has_future) {
[16:18:48.686]                           ns <- base::getNamespace("future")
[16:18:48.686]                           version <- ns[[".package"]][["version"]]
[16:18:48.686]                           if (is.null(version)) 
[16:18:48.686]                             version <- utils::packageVersion("future")
[16:18:48.686]                         }
[16:18:48.686]                         else {
[16:18:48.686]                           version <- NULL
[16:18:48.686]                         }
[16:18:48.686]                         if (!has_future || version < "1.8.0") {
[16:18:48.686]                           info <- base::c(r_version = base::gsub("R version ", 
[16:18:48.686]                             "", base::R.version$version.string), 
[16:18:48.686]                             platform = base::sprintf("%s (%s-bit)", 
[16:18:48.686]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:18:48.686]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:18:48.686]                               "release", "version")], collapse = " "), 
[16:18:48.686]                             hostname = base::Sys.info()[["nodename"]])
[16:18:48.686]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:18:48.686]                             info)
[16:18:48.686]                           info <- base::paste(info, collapse = "; ")
[16:18:48.686]                           if (!has_future) {
[16:18:48.686]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:18:48.686]                               info)
[16:18:48.686]                           }
[16:18:48.686]                           else {
[16:18:48.686]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:18:48.686]                               info, version)
[16:18:48.686]                           }
[16:18:48.686]                           base::stop(msg)
[16:18:48.686]                         }
[16:18:48.686]                       })
[16:18:48.686]                     }
[16:18:48.686]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:18:48.686]                     base::options(mc.cores = 1L)
[16:18:48.686]                   }
[16:18:48.686]                   ...future.strategy.old <- future::plan("list")
[16:18:48.686]                   options(future.plan = NULL)
[16:18:48.686]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:18:48.686]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:18:48.686]                 }
[16:18:48.686]                 ...future.workdir <- getwd()
[16:18:48.686]             }
[16:18:48.686]             ...future.oldOptions <- base::as.list(base::.Options)
[16:18:48.686]             ...future.oldEnvVars <- base::Sys.getenv()
[16:18:48.686]         }
[16:18:48.686]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:18:48.686]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:18:48.686]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:18:48.686]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:18:48.686]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:18:48.686]             future.stdout.windows.reencode = NULL, width = 80L)
[16:18:48.686]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:18:48.686]             base::names(...future.oldOptions))
[16:18:48.686]     }
[16:18:48.686]     if (FALSE) {
[16:18:48.686]     }
[16:18:48.686]     else {
[16:18:48.686]         if (TRUE) {
[16:18:48.686]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:18:48.686]                 open = "w")
[16:18:48.686]         }
[16:18:48.686]         else {
[16:18:48.686]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:18:48.686]                 windows = "NUL", "/dev/null"), open = "w")
[16:18:48.686]         }
[16:18:48.686]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:18:48.686]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:18:48.686]             base::sink(type = "output", split = FALSE)
[16:18:48.686]             base::close(...future.stdout)
[16:18:48.686]         }, add = TRUE)
[16:18:48.686]     }
[16:18:48.686]     ...future.frame <- base::sys.nframe()
[16:18:48.686]     ...future.conditions <- base::list()
[16:18:48.686]     ...future.rng <- base::globalenv()$.Random.seed
[16:18:48.686]     if (FALSE) {
[16:18:48.686]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:18:48.686]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:18:48.686]     }
[16:18:48.686]     ...future.result <- base::tryCatch({
[16:18:48.686]         base::withCallingHandlers({
[16:18:48.686]             ...future.value <- base::withVisible(base::local({
[16:18:48.686]                 withCallingHandlers({
[16:18:48.686]                   {
[16:18:48.686]                     do.call(function(...) {
[16:18:48.686]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:48.686]                       if (!identical(...future.globals.maxSize.org, 
[16:18:48.686]                         ...future.globals.maxSize)) {
[16:18:48.686]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:48.686]                         on.exit(options(oopts), add = TRUE)
[16:18:48.686]                       }
[16:18:48.686]                       {
[16:18:48.686]                         lapply(seq_along(...future.elements_ii), 
[16:18:48.686]                           FUN = function(jj) {
[16:18:48.686]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:48.686]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:48.686]                               envir = globalenv(), inherits = FALSE)
[16:18:48.686]                             ...future.FUN(...future.X_jj, ...)
[16:18:48.686]                           })
[16:18:48.686]                       }
[16:18:48.686]                     }, args = future.call.arguments)
[16:18:48.686]                   }
[16:18:48.686]                 }, immediateCondition = function(cond) {
[16:18:48.686]                   save_rds <- function (object, pathname, ...) 
[16:18:48.686]                   {
[16:18:48.686]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:18:48.686]                     if (file_test("-f", pathname_tmp)) {
[16:18:48.686]                       fi_tmp <- file.info(pathname_tmp)
[16:18:48.686]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:18:48.686]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:18:48.686]                         fi_tmp[["mtime"]])
[16:18:48.686]                     }
[16:18:48.686]                     tryCatch({
[16:18:48.686]                       saveRDS(object, file = pathname_tmp, ...)
[16:18:48.686]                     }, error = function(ex) {
[16:18:48.686]                       msg <- conditionMessage(ex)
[16:18:48.686]                       fi_tmp <- file.info(pathname_tmp)
[16:18:48.686]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:18:48.686]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:18:48.686]                         fi_tmp[["mtime"]], msg)
[16:18:48.686]                       ex$message <- msg
[16:18:48.686]                       stop(ex)
[16:18:48.686]                     })
[16:18:48.686]                     stopifnot(file_test("-f", pathname_tmp))
[16:18:48.686]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:18:48.686]                     if (!res || file_test("-f", pathname_tmp)) {
[16:18:48.686]                       fi_tmp <- file.info(pathname_tmp)
[16:18:48.686]                       fi <- file.info(pathname)
[16:18:48.686]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:18:48.686]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:18:48.686]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:18:48.686]                         fi[["size"]], fi[["mtime"]])
[16:18:48.686]                       stop(msg)
[16:18:48.686]                     }
[16:18:48.686]                     invisible(pathname)
[16:18:48.686]                   }
[16:18:48.686]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:18:48.686]                     rootPath = tempdir()) 
[16:18:48.686]                   {
[16:18:48.686]                     obj <- list(time = Sys.time(), condition = cond)
[16:18:48.686]                     file <- tempfile(pattern = class(cond)[1], 
[16:18:48.686]                       tmpdir = path, fileext = ".rds")
[16:18:48.686]                     save_rds(obj, file)
[16:18:48.686]                   }
[16:18:48.686]                   saveImmediateCondition(cond, path = "/tmp/RtmpZpTIv7/.future/immediateConditions")
[16:18:48.686]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:48.686]                   {
[16:18:48.686]                     inherits <- base::inherits
[16:18:48.686]                     invokeRestart <- base::invokeRestart
[16:18:48.686]                     is.null <- base::is.null
[16:18:48.686]                     muffled <- FALSE
[16:18:48.686]                     if (inherits(cond, "message")) {
[16:18:48.686]                       muffled <- grepl(pattern, "muffleMessage")
[16:18:48.686]                       if (muffled) 
[16:18:48.686]                         invokeRestart("muffleMessage")
[16:18:48.686]                     }
[16:18:48.686]                     else if (inherits(cond, "warning")) {
[16:18:48.686]                       muffled <- grepl(pattern, "muffleWarning")
[16:18:48.686]                       if (muffled) 
[16:18:48.686]                         invokeRestart("muffleWarning")
[16:18:48.686]                     }
[16:18:48.686]                     else if (inherits(cond, "condition")) {
[16:18:48.686]                       if (!is.null(pattern)) {
[16:18:48.686]                         computeRestarts <- base::computeRestarts
[16:18:48.686]                         grepl <- base::grepl
[16:18:48.686]                         restarts <- computeRestarts(cond)
[16:18:48.686]                         for (restart in restarts) {
[16:18:48.686]                           name <- restart$name
[16:18:48.686]                           if (is.null(name)) 
[16:18:48.686]                             next
[16:18:48.686]                           if (!grepl(pattern, name)) 
[16:18:48.686]                             next
[16:18:48.686]                           invokeRestart(restart)
[16:18:48.686]                           muffled <- TRUE
[16:18:48.686]                           break
[16:18:48.686]                         }
[16:18:48.686]                       }
[16:18:48.686]                     }
[16:18:48.686]                     invisible(muffled)
[16:18:48.686]                   }
[16:18:48.686]                   muffleCondition(cond)
[16:18:48.686]                 })
[16:18:48.686]             }))
[16:18:48.686]             future::FutureResult(value = ...future.value$value, 
[16:18:48.686]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:48.686]                   ...future.rng), globalenv = if (FALSE) 
[16:18:48.686]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:18:48.686]                     ...future.globalenv.names))
[16:18:48.686]                 else NULL, started = ...future.startTime, version = "1.8")
[16:18:48.686]         }, condition = base::local({
[16:18:48.686]             c <- base::c
[16:18:48.686]             inherits <- base::inherits
[16:18:48.686]             invokeRestart <- base::invokeRestart
[16:18:48.686]             length <- base::length
[16:18:48.686]             list <- base::list
[16:18:48.686]             seq.int <- base::seq.int
[16:18:48.686]             signalCondition <- base::signalCondition
[16:18:48.686]             sys.calls <- base::sys.calls
[16:18:48.686]             `[[` <- base::`[[`
[16:18:48.686]             `+` <- base::`+`
[16:18:48.686]             `<<-` <- base::`<<-`
[16:18:48.686]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:18:48.686]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:18:48.686]                   3L)]
[16:18:48.686]             }
[16:18:48.686]             function(cond) {
[16:18:48.686]                 is_error <- inherits(cond, "error")
[16:18:48.686]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:18:48.686]                   NULL)
[16:18:48.686]                 if (is_error) {
[16:18:48.686]                   sessionInformation <- function() {
[16:18:48.686]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:18:48.686]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:18:48.686]                       search = base::search(), system = base::Sys.info())
[16:18:48.686]                   }
[16:18:48.686]                   ...future.conditions[[length(...future.conditions) + 
[16:18:48.686]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:18:48.686]                     cond$call), session = sessionInformation(), 
[16:18:48.686]                     timestamp = base::Sys.time(), signaled = 0L)
[16:18:48.686]                   signalCondition(cond)
[16:18:48.686]                 }
[16:18:48.686]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:18:48.686]                 "immediateCondition"))) {
[16:18:48.686]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:18:48.686]                   ...future.conditions[[length(...future.conditions) + 
[16:18:48.686]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:18:48.686]                   if (TRUE && !signal) {
[16:18:48.686]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:48.686]                     {
[16:18:48.686]                       inherits <- base::inherits
[16:18:48.686]                       invokeRestart <- base::invokeRestart
[16:18:48.686]                       is.null <- base::is.null
[16:18:48.686]                       muffled <- FALSE
[16:18:48.686]                       if (inherits(cond, "message")) {
[16:18:48.686]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:48.686]                         if (muffled) 
[16:18:48.686]                           invokeRestart("muffleMessage")
[16:18:48.686]                       }
[16:18:48.686]                       else if (inherits(cond, "warning")) {
[16:18:48.686]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:48.686]                         if (muffled) 
[16:18:48.686]                           invokeRestart("muffleWarning")
[16:18:48.686]                       }
[16:18:48.686]                       else if (inherits(cond, "condition")) {
[16:18:48.686]                         if (!is.null(pattern)) {
[16:18:48.686]                           computeRestarts <- base::computeRestarts
[16:18:48.686]                           grepl <- base::grepl
[16:18:48.686]                           restarts <- computeRestarts(cond)
[16:18:48.686]                           for (restart in restarts) {
[16:18:48.686]                             name <- restart$name
[16:18:48.686]                             if (is.null(name)) 
[16:18:48.686]                               next
[16:18:48.686]                             if (!grepl(pattern, name)) 
[16:18:48.686]                               next
[16:18:48.686]                             invokeRestart(restart)
[16:18:48.686]                             muffled <- TRUE
[16:18:48.686]                             break
[16:18:48.686]                           }
[16:18:48.686]                         }
[16:18:48.686]                       }
[16:18:48.686]                       invisible(muffled)
[16:18:48.686]                     }
[16:18:48.686]                     muffleCondition(cond, pattern = "^muffle")
[16:18:48.686]                   }
[16:18:48.686]                 }
[16:18:48.686]                 else {
[16:18:48.686]                   if (TRUE) {
[16:18:48.686]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:48.686]                     {
[16:18:48.686]                       inherits <- base::inherits
[16:18:48.686]                       invokeRestart <- base::invokeRestart
[16:18:48.686]                       is.null <- base::is.null
[16:18:48.686]                       muffled <- FALSE
[16:18:48.686]                       if (inherits(cond, "message")) {
[16:18:48.686]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:48.686]                         if (muffled) 
[16:18:48.686]                           invokeRestart("muffleMessage")
[16:18:48.686]                       }
[16:18:48.686]                       else if (inherits(cond, "warning")) {
[16:18:48.686]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:48.686]                         if (muffled) 
[16:18:48.686]                           invokeRestart("muffleWarning")
[16:18:48.686]                       }
[16:18:48.686]                       else if (inherits(cond, "condition")) {
[16:18:48.686]                         if (!is.null(pattern)) {
[16:18:48.686]                           computeRestarts <- base::computeRestarts
[16:18:48.686]                           grepl <- base::grepl
[16:18:48.686]                           restarts <- computeRestarts(cond)
[16:18:48.686]                           for (restart in restarts) {
[16:18:48.686]                             name <- restart$name
[16:18:48.686]                             if (is.null(name)) 
[16:18:48.686]                               next
[16:18:48.686]                             if (!grepl(pattern, name)) 
[16:18:48.686]                               next
[16:18:48.686]                             invokeRestart(restart)
[16:18:48.686]                             muffled <- TRUE
[16:18:48.686]                             break
[16:18:48.686]                           }
[16:18:48.686]                         }
[16:18:48.686]                       }
[16:18:48.686]                       invisible(muffled)
[16:18:48.686]                     }
[16:18:48.686]                     muffleCondition(cond, pattern = "^muffle")
[16:18:48.686]                   }
[16:18:48.686]                 }
[16:18:48.686]             }
[16:18:48.686]         }))
[16:18:48.686]     }, error = function(ex) {
[16:18:48.686]         base::structure(base::list(value = NULL, visible = NULL, 
[16:18:48.686]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:48.686]                 ...future.rng), started = ...future.startTime, 
[16:18:48.686]             finished = Sys.time(), session_uuid = NA_character_, 
[16:18:48.686]             version = "1.8"), class = "FutureResult")
[16:18:48.686]     }, finally = {
[16:18:48.686]         if (!identical(...future.workdir, getwd())) 
[16:18:48.686]             setwd(...future.workdir)
[16:18:48.686]         {
[16:18:48.686]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:18:48.686]                 ...future.oldOptions$nwarnings <- NULL
[16:18:48.686]             }
[16:18:48.686]             base::options(...future.oldOptions)
[16:18:48.686]             if (.Platform$OS.type == "windows") {
[16:18:48.686]                 old_names <- names(...future.oldEnvVars)
[16:18:48.686]                 envs <- base::Sys.getenv()
[16:18:48.686]                 names <- names(envs)
[16:18:48.686]                 common <- intersect(names, old_names)
[16:18:48.686]                 added <- setdiff(names, old_names)
[16:18:48.686]                 removed <- setdiff(old_names, names)
[16:18:48.686]                 changed <- common[...future.oldEnvVars[common] != 
[16:18:48.686]                   envs[common]]
[16:18:48.686]                 NAMES <- toupper(changed)
[16:18:48.686]                 args <- list()
[16:18:48.686]                 for (kk in seq_along(NAMES)) {
[16:18:48.686]                   name <- changed[[kk]]
[16:18:48.686]                   NAME <- NAMES[[kk]]
[16:18:48.686]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:48.686]                     next
[16:18:48.686]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:48.686]                 }
[16:18:48.686]                 NAMES <- toupper(added)
[16:18:48.686]                 for (kk in seq_along(NAMES)) {
[16:18:48.686]                   name <- added[[kk]]
[16:18:48.686]                   NAME <- NAMES[[kk]]
[16:18:48.686]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:48.686]                     next
[16:18:48.686]                   args[[name]] <- ""
[16:18:48.686]                 }
[16:18:48.686]                 NAMES <- toupper(removed)
[16:18:48.686]                 for (kk in seq_along(NAMES)) {
[16:18:48.686]                   name <- removed[[kk]]
[16:18:48.686]                   NAME <- NAMES[[kk]]
[16:18:48.686]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:48.686]                     next
[16:18:48.686]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:48.686]                 }
[16:18:48.686]                 if (length(args) > 0) 
[16:18:48.686]                   base::do.call(base::Sys.setenv, args = args)
[16:18:48.686]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:18:48.686]             }
[16:18:48.686]             else {
[16:18:48.686]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:18:48.686]             }
[16:18:48.686]             {
[16:18:48.686]                 if (base::length(...future.futureOptionsAdded) > 
[16:18:48.686]                   0L) {
[16:18:48.686]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:18:48.686]                   base::names(opts) <- ...future.futureOptionsAdded
[16:18:48.686]                   base::options(opts)
[16:18:48.686]                 }
[16:18:48.686]                 {
[16:18:48.686]                   {
[16:18:48.686]                     base::options(mc.cores = ...future.mc.cores.old)
[16:18:48.686]                     NULL
[16:18:48.686]                   }
[16:18:48.686]                   options(future.plan = NULL)
[16:18:48.686]                   if (is.na(NA_character_)) 
[16:18:48.686]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:18:48.686]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:18:48.686]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:18:48.686]                     .init = FALSE)
[16:18:48.686]                 }
[16:18:48.686]             }
[16:18:48.686]         }
[16:18:48.686]     })
[16:18:48.686]     if (TRUE) {
[16:18:48.686]         base::sink(type = "output", split = FALSE)
[16:18:48.686]         if (TRUE) {
[16:18:48.686]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:18:48.686]         }
[16:18:48.686]         else {
[16:18:48.686]             ...future.result["stdout"] <- base::list(NULL)
[16:18:48.686]         }
[16:18:48.686]         base::close(...future.stdout)
[16:18:48.686]         ...future.stdout <- NULL
[16:18:48.686]     }
[16:18:48.686]     ...future.result$conditions <- ...future.conditions
[16:18:48.686]     ...future.result$finished <- base::Sys.time()
[16:18:48.686]     ...future.result
[16:18:48.686] }
[16:18:48.688] assign_globals() ...
[16:18:48.688] List of 7
[16:18:48.688]  $ ...future.FUN            :function (...)  
[16:18:48.688]  $ foo                      :function (x = 1, y = 2)  
[16:18:48.688]  $ x                        : num 3
[16:18:48.688]  $ future.call.arguments    : list()
[16:18:48.688]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:48.688]  $ ...future.elements_ii    :List of 2
[16:18:48.688]   ..$ : int 0
[16:18:48.688]   ..$ : int 0
[16:18:48.688]  $ ...future.seeds_ii       :List of 2
[16:18:48.688]   ..$ : int [1:7] 10407 2118672648 973015440 1612380474 -529784560 -1301423278 1609721430
[16:18:48.688]   ..$ : int [1:7] 10407 -919798402 -1810630142 -850731864 -613657701 1060945587 1656143537
[16:18:48.688]  $ ...future.globals.maxSize: NULL
[16:18:48.688]  - attr(*, "where")=List of 7
[16:18:48.688]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:18:48.688]   ..$ foo                      :<environment: R_EmptyEnv> 
[16:18:48.688]   ..$ x                        :<environment: R_EmptyEnv> 
[16:18:48.688]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:18:48.688]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:18:48.688]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:18:48.688]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:18:48.688]  - attr(*, "resolved")= logi FALSE
[16:18:48.688]  - attr(*, "total_size")= num 2200
[16:18:48.688]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:48.688]  - attr(*, "already-done")= logi TRUE
[16:18:48.698] - reassign environment for ‘...future.FUN’
[16:18:48.698] - copied ‘...future.FUN’ to environment
[16:18:48.698] - reassign environment for ‘foo’
[16:18:48.698] - copied ‘foo’ to environment
[16:18:48.698] - copied ‘x’ to environment
[16:18:48.698] - copied ‘future.call.arguments’ to environment
[16:18:48.698] - copied ‘...future.elements_ii’ to environment
[16:18:48.698] - copied ‘...future.seeds_ii’ to environment
[16:18:48.698] - copied ‘...future.globals.maxSize’ to environment
[16:18:48.699] assign_globals() ... done
[16:18:48.699] requestCore(): workers = 2
[16:18:48.701] MulticoreFuture started
[16:18:48.702] - Launch lazy future ... done
[16:18:48.702] run() for ‘MulticoreFuture’ ... done
[16:18:48.702] Created future:
[16:18:48.702] plan(): Setting new future strategy stack:
[16:18:48.703] List of future strategies:
[16:18:48.703] 1. sequential:
[16:18:48.703]    - args: function (..., envir = parent.frame())
[16:18:48.703]    - tweaked: FALSE
[16:18:48.703]    - call: NULL
[16:18:48.704] plan(): nbrOfWorkers() = 1
[16:18:48.706] plan(): Setting new future strategy stack:
[16:18:48.706] List of future strategies:
[16:18:48.706] 1. multicore:
[16:18:48.706]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:18:48.706]    - tweaked: FALSE
[16:18:48.706]    - call: plan(strategy)
[16:18:48.711] plan(): nbrOfWorkers() = 2
[16:18:48.702] MulticoreFuture:
[16:18:48.702] Label: ‘future_replicate-1’
[16:18:48.702] Expression:
[16:18:48.702] {
[16:18:48.702]     do.call(function(...) {
[16:18:48.702]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:48.702]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:48.702]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:48.702]             on.exit(options(oopts), add = TRUE)
[16:18:48.702]         }
[16:18:48.702]         {
[16:18:48.702]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:48.702]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:48.702]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:48.702]                   envir = globalenv(), inherits = FALSE)
[16:18:48.702]                 ...future.FUN(...future.X_jj, ...)
[16:18:48.702]             })
[16:18:48.702]         }
[16:18:48.702]     }, args = future.call.arguments)
[16:18:48.702] }
[16:18:48.702] Lazy evaluation: FALSE
[16:18:48.702] Asynchronous evaluation: TRUE
[16:18:48.702] Local evaluation: TRUE
[16:18:48.702] Environment: 0x55e7a09e3b80
[16:18:48.702] Capture standard output: TRUE
[16:18:48.702] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:18:48.702] Globals: 7 objects totaling 2.41 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, ...)
[16:18:48.702] Packages: <none>
[16:18:48.702] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:18:48.702] Resolved: TRUE
[16:18:48.702] Value: <not collected>
[16:18:48.702] Conditions captured: <none>
[16:18:48.702] Early signaling: FALSE
[16:18:48.702] Owner process: 20271db5-d788-b537-4432-0a26f2d2d030
[16:18:48.702] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:48.713] Chunk #1 of 2 ... DONE
[16:18:48.713] Chunk #2 of 2 ...
[16:18:48.713]  - Finding globals in 'X' for chunk #2 ...
[16:18:48.713] getGlobalsAndPackages() ...
[16:18:48.713] Searching for globals...
[16:18:48.714] 
[16:18:48.714] Searching for globals ... DONE
[16:18:48.714] - globals: [0] <none>
[16:18:48.714] getGlobalsAndPackages() ... DONE
[16:18:48.714]    + additional globals found: [n=0] 
[16:18:48.715]    + additional namespaces needed: [n=0] 
[16:18:48.715]  - Finding globals in 'X' for chunk #2 ... DONE
[16:18:48.715]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:18:48.715]  - seeds: [3] <seeds>
[16:18:48.715]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:48.715] getGlobalsAndPackages() ...
[16:18:48.716] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:48.716] Resolving globals: FALSE
[16:18:48.716] Tweak future expression to call with '...' arguments ...
[16:18:48.716] {
[16:18:48.716]     do.call(function(...) {
[16:18:48.716]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:48.716]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:48.716]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:48.716]             on.exit(options(oopts), add = TRUE)
[16:18:48.716]         }
[16:18:48.716]         {
[16:18:48.716]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:48.716]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:48.716]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:48.716]                   envir = globalenv(), inherits = FALSE)
[16:18:48.716]                 ...future.FUN(...future.X_jj, ...)
[16:18:48.716]             })
[16:18:48.716]         }
[16:18:48.716]     }, args = future.call.arguments)
[16:18:48.716] }
[16:18:48.717] Tweak future expression to call with '...' arguments ... DONE
[16:18:48.717] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:48.718] 
[16:18:48.718] getGlobalsAndPackages() ... DONE
[16:18:48.718] run() for ‘Future’ ...
[16:18:48.718] - state: ‘created’
[16:18:48.719] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:18:48.724] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:48.724] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:18:48.724]   - Field: ‘label’
[16:18:48.724]   - Field: ‘local’
[16:18:48.725]   - Field: ‘owner’
[16:18:48.725]   - Field: ‘envir’
[16:18:48.725]   - Field: ‘workers’
[16:18:48.725]   - Field: ‘packages’
[16:18:48.725]   - Field: ‘gc’
[16:18:48.725]   - Field: ‘job’
[16:18:48.726]   - Field: ‘conditions’
[16:18:48.726]   - Field: ‘expr’
[16:18:48.726]   - Field: ‘uuid’
[16:18:48.726]   - Field: ‘seed’
[16:18:48.726]   - Field: ‘version’
[16:18:48.726]   - Field: ‘result’
[16:18:48.726]   - Field: ‘asynchronous’
[16:18:48.727]   - Field: ‘calls’
[16:18:48.727]   - Field: ‘globals’
[16:18:48.727]   - Field: ‘stdout’
[16:18:48.727]   - Field: ‘earlySignal’
[16:18:48.727]   - Field: ‘lazy’
[16:18:48.727]   - Field: ‘state’
[16:18:48.728] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:18:48.728] - Launch lazy future ...
[16:18:48.728] Packages needed by the future expression (n = 0): <none>
[16:18:48.728] Packages needed by future strategies (n = 0): <none>
[16:18:48.729] {
[16:18:48.729]     {
[16:18:48.729]         {
[16:18:48.729]             ...future.startTime <- base::Sys.time()
[16:18:48.729]             {
[16:18:48.729]                 {
[16:18:48.729]                   {
[16:18:48.729]                     {
[16:18:48.729]                       base::local({
[16:18:48.729]                         has_future <- base::requireNamespace("future", 
[16:18:48.729]                           quietly = TRUE)
[16:18:48.729]                         if (has_future) {
[16:18:48.729]                           ns <- base::getNamespace("future")
[16:18:48.729]                           version <- ns[[".package"]][["version"]]
[16:18:48.729]                           if (is.null(version)) 
[16:18:48.729]                             version <- utils::packageVersion("future")
[16:18:48.729]                         }
[16:18:48.729]                         else {
[16:18:48.729]                           version <- NULL
[16:18:48.729]                         }
[16:18:48.729]                         if (!has_future || version < "1.8.0") {
[16:18:48.729]                           info <- base::c(r_version = base::gsub("R version ", 
[16:18:48.729]                             "", base::R.version$version.string), 
[16:18:48.729]                             platform = base::sprintf("%s (%s-bit)", 
[16:18:48.729]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:18:48.729]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:18:48.729]                               "release", "version")], collapse = " "), 
[16:18:48.729]                             hostname = base::Sys.info()[["nodename"]])
[16:18:48.729]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:18:48.729]                             info)
[16:18:48.729]                           info <- base::paste(info, collapse = "; ")
[16:18:48.729]                           if (!has_future) {
[16:18:48.729]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:18:48.729]                               info)
[16:18:48.729]                           }
[16:18:48.729]                           else {
[16:18:48.729]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:18:48.729]                               info, version)
[16:18:48.729]                           }
[16:18:48.729]                           base::stop(msg)
[16:18:48.729]                         }
[16:18:48.729]                       })
[16:18:48.729]                     }
[16:18:48.729]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:18:48.729]                     base::options(mc.cores = 1L)
[16:18:48.729]                   }
[16:18:48.729]                   ...future.strategy.old <- future::plan("list")
[16:18:48.729]                   options(future.plan = NULL)
[16:18:48.729]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:18:48.729]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:18:48.729]                 }
[16:18:48.729]                 ...future.workdir <- getwd()
[16:18:48.729]             }
[16:18:48.729]             ...future.oldOptions <- base::as.list(base::.Options)
[16:18:48.729]             ...future.oldEnvVars <- base::Sys.getenv()
[16:18:48.729]         }
[16:18:48.729]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:18:48.729]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:18:48.729]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:18:48.729]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:18:48.729]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:18:48.729]             future.stdout.windows.reencode = NULL, width = 80L)
[16:18:48.729]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:18:48.729]             base::names(...future.oldOptions))
[16:18:48.729]     }
[16:18:48.729]     if (FALSE) {
[16:18:48.729]     }
[16:18:48.729]     else {
[16:18:48.729]         if (TRUE) {
[16:18:48.729]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:18:48.729]                 open = "w")
[16:18:48.729]         }
[16:18:48.729]         else {
[16:18:48.729]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:18:48.729]                 windows = "NUL", "/dev/null"), open = "w")
[16:18:48.729]         }
[16:18:48.729]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:18:48.729]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:18:48.729]             base::sink(type = "output", split = FALSE)
[16:18:48.729]             base::close(...future.stdout)
[16:18:48.729]         }, add = TRUE)
[16:18:48.729]     }
[16:18:48.729]     ...future.frame <- base::sys.nframe()
[16:18:48.729]     ...future.conditions <- base::list()
[16:18:48.729]     ...future.rng <- base::globalenv()$.Random.seed
[16:18:48.729]     if (FALSE) {
[16:18:48.729]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:18:48.729]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:18:48.729]     }
[16:18:48.729]     ...future.result <- base::tryCatch({
[16:18:48.729]         base::withCallingHandlers({
[16:18:48.729]             ...future.value <- base::withVisible(base::local({
[16:18:48.729]                 withCallingHandlers({
[16:18:48.729]                   {
[16:18:48.729]                     do.call(function(...) {
[16:18:48.729]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:48.729]                       if (!identical(...future.globals.maxSize.org, 
[16:18:48.729]                         ...future.globals.maxSize)) {
[16:18:48.729]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:48.729]                         on.exit(options(oopts), add = TRUE)
[16:18:48.729]                       }
[16:18:48.729]                       {
[16:18:48.729]                         lapply(seq_along(...future.elements_ii), 
[16:18:48.729]                           FUN = function(jj) {
[16:18:48.729]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:48.729]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:48.729]                               envir = globalenv(), inherits = FALSE)
[16:18:48.729]                             ...future.FUN(...future.X_jj, ...)
[16:18:48.729]                           })
[16:18:48.729]                       }
[16:18:48.729]                     }, args = future.call.arguments)
[16:18:48.729]                   }
[16:18:48.729]                 }, immediateCondition = function(cond) {
[16:18:48.729]                   save_rds <- function (object, pathname, ...) 
[16:18:48.729]                   {
[16:18:48.729]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:18:48.729]                     if (file_test("-f", pathname_tmp)) {
[16:18:48.729]                       fi_tmp <- file.info(pathname_tmp)
[16:18:48.729]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:18:48.729]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:18:48.729]                         fi_tmp[["mtime"]])
[16:18:48.729]                     }
[16:18:48.729]                     tryCatch({
[16:18:48.729]                       saveRDS(object, file = pathname_tmp, ...)
[16:18:48.729]                     }, error = function(ex) {
[16:18:48.729]                       msg <- conditionMessage(ex)
[16:18:48.729]                       fi_tmp <- file.info(pathname_tmp)
[16:18:48.729]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:18:48.729]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:18:48.729]                         fi_tmp[["mtime"]], msg)
[16:18:48.729]                       ex$message <- msg
[16:18:48.729]                       stop(ex)
[16:18:48.729]                     })
[16:18:48.729]                     stopifnot(file_test("-f", pathname_tmp))
[16:18:48.729]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:18:48.729]                     if (!res || file_test("-f", pathname_tmp)) {
[16:18:48.729]                       fi_tmp <- file.info(pathname_tmp)
[16:18:48.729]                       fi <- file.info(pathname)
[16:18:48.729]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:18:48.729]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:18:48.729]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:18:48.729]                         fi[["size"]], fi[["mtime"]])
[16:18:48.729]                       stop(msg)
[16:18:48.729]                     }
[16:18:48.729]                     invisible(pathname)
[16:18:48.729]                   }
[16:18:48.729]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:18:48.729]                     rootPath = tempdir()) 
[16:18:48.729]                   {
[16:18:48.729]                     obj <- list(time = Sys.time(), condition = cond)
[16:18:48.729]                     file <- tempfile(pattern = class(cond)[1], 
[16:18:48.729]                       tmpdir = path, fileext = ".rds")
[16:18:48.729]                     save_rds(obj, file)
[16:18:48.729]                   }
[16:18:48.729]                   saveImmediateCondition(cond, path = "/tmp/RtmpZpTIv7/.future/immediateConditions")
[16:18:48.729]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:48.729]                   {
[16:18:48.729]                     inherits <- base::inherits
[16:18:48.729]                     invokeRestart <- base::invokeRestart
[16:18:48.729]                     is.null <- base::is.null
[16:18:48.729]                     muffled <- FALSE
[16:18:48.729]                     if (inherits(cond, "message")) {
[16:18:48.729]                       muffled <- grepl(pattern, "muffleMessage")
[16:18:48.729]                       if (muffled) 
[16:18:48.729]                         invokeRestart("muffleMessage")
[16:18:48.729]                     }
[16:18:48.729]                     else if (inherits(cond, "warning")) {
[16:18:48.729]                       muffled <- grepl(pattern, "muffleWarning")
[16:18:48.729]                       if (muffled) 
[16:18:48.729]                         invokeRestart("muffleWarning")
[16:18:48.729]                     }
[16:18:48.729]                     else if (inherits(cond, "condition")) {
[16:18:48.729]                       if (!is.null(pattern)) {
[16:18:48.729]                         computeRestarts <- base::computeRestarts
[16:18:48.729]                         grepl <- base::grepl
[16:18:48.729]                         restarts <- computeRestarts(cond)
[16:18:48.729]                         for (restart in restarts) {
[16:18:48.729]                           name <- restart$name
[16:18:48.729]                           if (is.null(name)) 
[16:18:48.729]                             next
[16:18:48.729]                           if (!grepl(pattern, name)) 
[16:18:48.729]                             next
[16:18:48.729]                           invokeRestart(restart)
[16:18:48.729]                           muffled <- TRUE
[16:18:48.729]                           break
[16:18:48.729]                         }
[16:18:48.729]                       }
[16:18:48.729]                     }
[16:18:48.729]                     invisible(muffled)
[16:18:48.729]                   }
[16:18:48.729]                   muffleCondition(cond)
[16:18:48.729]                 })
[16:18:48.729]             }))
[16:18:48.729]             future::FutureResult(value = ...future.value$value, 
[16:18:48.729]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:48.729]                   ...future.rng), globalenv = if (FALSE) 
[16:18:48.729]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:18:48.729]                     ...future.globalenv.names))
[16:18:48.729]                 else NULL, started = ...future.startTime, version = "1.8")
[16:18:48.729]         }, condition = base::local({
[16:18:48.729]             c <- base::c
[16:18:48.729]             inherits <- base::inherits
[16:18:48.729]             invokeRestart <- base::invokeRestart
[16:18:48.729]             length <- base::length
[16:18:48.729]             list <- base::list
[16:18:48.729]             seq.int <- base::seq.int
[16:18:48.729]             signalCondition <- base::signalCondition
[16:18:48.729]             sys.calls <- base::sys.calls
[16:18:48.729]             `[[` <- base::`[[`
[16:18:48.729]             `+` <- base::`+`
[16:18:48.729]             `<<-` <- base::`<<-`
[16:18:48.729]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:18:48.729]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:18:48.729]                   3L)]
[16:18:48.729]             }
[16:18:48.729]             function(cond) {
[16:18:48.729]                 is_error <- inherits(cond, "error")
[16:18:48.729]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:18:48.729]                   NULL)
[16:18:48.729]                 if (is_error) {
[16:18:48.729]                   sessionInformation <- function() {
[16:18:48.729]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:18:48.729]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:18:48.729]                       search = base::search(), system = base::Sys.info())
[16:18:48.729]                   }
[16:18:48.729]                   ...future.conditions[[length(...future.conditions) + 
[16:18:48.729]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:18:48.729]                     cond$call), session = sessionInformation(), 
[16:18:48.729]                     timestamp = base::Sys.time(), signaled = 0L)
[16:18:48.729]                   signalCondition(cond)
[16:18:48.729]                 }
[16:18:48.729]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:18:48.729]                 "immediateCondition"))) {
[16:18:48.729]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:18:48.729]                   ...future.conditions[[length(...future.conditions) + 
[16:18:48.729]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:18:48.729]                   if (TRUE && !signal) {
[16:18:48.729]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:48.729]                     {
[16:18:48.729]                       inherits <- base::inherits
[16:18:48.729]                       invokeRestart <- base::invokeRestart
[16:18:48.729]                       is.null <- base::is.null
[16:18:48.729]                       muffled <- FALSE
[16:18:48.729]                       if (inherits(cond, "message")) {
[16:18:48.729]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:48.729]                         if (muffled) 
[16:18:48.729]                           invokeRestart("muffleMessage")
[16:18:48.729]                       }
[16:18:48.729]                       else if (inherits(cond, "warning")) {
[16:18:48.729]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:48.729]                         if (muffled) 
[16:18:48.729]                           invokeRestart("muffleWarning")
[16:18:48.729]                       }
[16:18:48.729]                       else if (inherits(cond, "condition")) {
[16:18:48.729]                         if (!is.null(pattern)) {
[16:18:48.729]                           computeRestarts <- base::computeRestarts
[16:18:48.729]                           grepl <- base::grepl
[16:18:48.729]                           restarts <- computeRestarts(cond)
[16:18:48.729]                           for (restart in restarts) {
[16:18:48.729]                             name <- restart$name
[16:18:48.729]                             if (is.null(name)) 
[16:18:48.729]                               next
[16:18:48.729]                             if (!grepl(pattern, name)) 
[16:18:48.729]                               next
[16:18:48.729]                             invokeRestart(restart)
[16:18:48.729]                             muffled <- TRUE
[16:18:48.729]                             break
[16:18:48.729]                           }
[16:18:48.729]                         }
[16:18:48.729]                       }
[16:18:48.729]                       invisible(muffled)
[16:18:48.729]                     }
[16:18:48.729]                     muffleCondition(cond, pattern = "^muffle")
[16:18:48.729]                   }
[16:18:48.729]                 }
[16:18:48.729]                 else {
[16:18:48.729]                   if (TRUE) {
[16:18:48.729]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:48.729]                     {
[16:18:48.729]                       inherits <- base::inherits
[16:18:48.729]                       invokeRestart <- base::invokeRestart
[16:18:48.729]                       is.null <- base::is.null
[16:18:48.729]                       muffled <- FALSE
[16:18:48.729]                       if (inherits(cond, "message")) {
[16:18:48.729]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:48.729]                         if (muffled) 
[16:18:48.729]                           invokeRestart("muffleMessage")
[16:18:48.729]                       }
[16:18:48.729]                       else if (inherits(cond, "warning")) {
[16:18:48.729]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:48.729]                         if (muffled) 
[16:18:48.729]                           invokeRestart("muffleWarning")
[16:18:48.729]                       }
[16:18:48.729]                       else if (inherits(cond, "condition")) {
[16:18:48.729]                         if (!is.null(pattern)) {
[16:18:48.729]                           computeRestarts <- base::computeRestarts
[16:18:48.729]                           grepl <- base::grepl
[16:18:48.729]                           restarts <- computeRestarts(cond)
[16:18:48.729]                           for (restart in restarts) {
[16:18:48.729]                             name <- restart$name
[16:18:48.729]                             if (is.null(name)) 
[16:18:48.729]                               next
[16:18:48.729]                             if (!grepl(pattern, name)) 
[16:18:48.729]                               next
[16:18:48.729]                             invokeRestart(restart)
[16:18:48.729]                             muffled <- TRUE
[16:18:48.729]                             break
[16:18:48.729]                           }
[16:18:48.729]                         }
[16:18:48.729]                       }
[16:18:48.729]                       invisible(muffled)
[16:18:48.729]                     }
[16:18:48.729]                     muffleCondition(cond, pattern = "^muffle")
[16:18:48.729]                   }
[16:18:48.729]                 }
[16:18:48.729]             }
[16:18:48.729]         }))
[16:18:48.729]     }, error = function(ex) {
[16:18:48.729]         base::structure(base::list(value = NULL, visible = NULL, 
[16:18:48.729]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:48.729]                 ...future.rng), started = ...future.startTime, 
[16:18:48.729]             finished = Sys.time(), session_uuid = NA_character_, 
[16:18:48.729]             version = "1.8"), class = "FutureResult")
[16:18:48.729]     }, finally = {
[16:18:48.729]         if (!identical(...future.workdir, getwd())) 
[16:18:48.729]             setwd(...future.workdir)
[16:18:48.729]         {
[16:18:48.729]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:18:48.729]                 ...future.oldOptions$nwarnings <- NULL
[16:18:48.729]             }
[16:18:48.729]             base::options(...future.oldOptions)
[16:18:48.729]             if (.Platform$OS.type == "windows") {
[16:18:48.729]                 old_names <- names(...future.oldEnvVars)
[16:18:48.729]                 envs <- base::Sys.getenv()
[16:18:48.729]                 names <- names(envs)
[16:18:48.729]                 common <- intersect(names, old_names)
[16:18:48.729]                 added <- setdiff(names, old_names)
[16:18:48.729]                 removed <- setdiff(old_names, names)
[16:18:48.729]                 changed <- common[...future.oldEnvVars[common] != 
[16:18:48.729]                   envs[common]]
[16:18:48.729]                 NAMES <- toupper(changed)
[16:18:48.729]                 args <- list()
[16:18:48.729]                 for (kk in seq_along(NAMES)) {
[16:18:48.729]                   name <- changed[[kk]]
[16:18:48.729]                   NAME <- NAMES[[kk]]
[16:18:48.729]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:48.729]                     next
[16:18:48.729]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:48.729]                 }
[16:18:48.729]                 NAMES <- toupper(added)
[16:18:48.729]                 for (kk in seq_along(NAMES)) {
[16:18:48.729]                   name <- added[[kk]]
[16:18:48.729]                   NAME <- NAMES[[kk]]
[16:18:48.729]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:48.729]                     next
[16:18:48.729]                   args[[name]] <- ""
[16:18:48.729]                 }
[16:18:48.729]                 NAMES <- toupper(removed)
[16:18:48.729]                 for (kk in seq_along(NAMES)) {
[16:18:48.729]                   name <- removed[[kk]]
[16:18:48.729]                   NAME <- NAMES[[kk]]
[16:18:48.729]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:48.729]                     next
[16:18:48.729]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:48.729]                 }
[16:18:48.729]                 if (length(args) > 0) 
[16:18:48.729]                   base::do.call(base::Sys.setenv, args = args)
[16:18:48.729]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:18:48.729]             }
[16:18:48.729]             else {
[16:18:48.729]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:18:48.729]             }
[16:18:48.729]             {
[16:18:48.729]                 if (base::length(...future.futureOptionsAdded) > 
[16:18:48.729]                   0L) {
[16:18:48.729]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:18:48.729]                   base::names(opts) <- ...future.futureOptionsAdded
[16:18:48.729]                   base::options(opts)
[16:18:48.729]                 }
[16:18:48.729]                 {
[16:18:48.729]                   {
[16:18:48.729]                     base::options(mc.cores = ...future.mc.cores.old)
[16:18:48.729]                     NULL
[16:18:48.729]                   }
[16:18:48.729]                   options(future.plan = NULL)
[16:18:48.729]                   if (is.na(NA_character_)) 
[16:18:48.729]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:18:48.729]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:18:48.729]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:18:48.729]                     .init = FALSE)
[16:18:48.729]                 }
[16:18:48.729]             }
[16:18:48.729]         }
[16:18:48.729]     })
[16:18:48.729]     if (TRUE) {
[16:18:48.729]         base::sink(type = "output", split = FALSE)
[16:18:48.729]         if (TRUE) {
[16:18:48.729]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:18:48.729]         }
[16:18:48.729]         else {
[16:18:48.729]             ...future.result["stdout"] <- base::list(NULL)
[16:18:48.729]         }
[16:18:48.729]         base::close(...future.stdout)
[16:18:48.729]         ...future.stdout <- NULL
[16:18:48.729]     }
[16:18:48.729]     ...future.result$conditions <- ...future.conditions
[16:18:48.729]     ...future.result$finished <- base::Sys.time()
[16:18:48.729]     ...future.result
[16:18:48.729] }
[16:18:48.733] assign_globals() ...
[16:18:48.733] List of 7
[16:18:48.733]  $ ...future.FUN            :function (...)  
[16:18:48.733]  $ foo                      :function (x = 1, y = 2)  
[16:18:48.733]  $ x                        : num 3
[16:18:48.733]  $ future.call.arguments    : list()
[16:18:48.733]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:48.733]  $ ...future.elements_ii    :List of 3
[16:18:48.733]   ..$ : int 0
[16:18:48.733]   ..$ : int 0
[16:18:48.733]   ..$ : int 0
[16:18:48.733]  $ ...future.seeds_ii       :List of 3
[16:18:48.733]   ..$ : int [1:7] 10407 1666123668 -918032954 1563303830 744861469 2009520167 369843810
[16:18:48.733]   ..$ : int [1:7] 10407 1310441948 2080683693 652639441 1795850730 1953532141 354730309
[16:18:48.733]   ..$ : int [1:7] 10407 -346794781 -526954742 61882141 1694204077 -404066420 2102686045
[16:18:48.733]  $ ...future.globals.maxSize: NULL
[16:18:48.733]  - attr(*, "where")=List of 7
[16:18:48.733]   ..$ ...future.FUN            :<environment: R_EmptyEnv> 
[16:18:48.733]   ..$ foo                      :<environment: R_EmptyEnv> 
[16:18:48.733]   ..$ x                        :<environment: R_EmptyEnv> 
[16:18:48.733]   ..$ future.call.arguments    :<environment: R_EmptyEnv> 
[16:18:48.733]   ..$ ...future.elements_ii    :<environment: R_EmptyEnv> 
[16:18:48.733]   ..$ ...future.seeds_ii       :<environment: R_EmptyEnv> 
[16:18:48.733]   ..$ ...future.globals.maxSize:<environment: R_EmptyEnv> 
[16:18:48.733]  - attr(*, "resolved")= logi FALSE
[16:18:48.733]  - attr(*, "total_size")= num 2200
[16:18:48.733]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:48.733]  - attr(*, "already-done")= logi TRUE
[16:18:48.749] - reassign environment for ‘...future.FUN’
[16:18:48.749] - copied ‘...future.FUN’ to environment
[16:18:48.749] - reassign environment for ‘foo’
[16:18:48.749] - copied ‘foo’ to environment
[16:18:48.750] - copied ‘x’ to environment
[16:18:48.750] - copied ‘future.call.arguments’ to environment
[16:18:48.750] - copied ‘...future.elements_ii’ to environment
[16:18:48.750] - copied ‘...future.seeds_ii’ to environment
[16:18:48.750] - copied ‘...future.globals.maxSize’ to environment
[16:18:48.750] assign_globals() ... done
[16:18:48.751] requestCore(): workers = 2
[16:18:48.754] MulticoreFuture started
[16:18:48.754] - Launch lazy future ... done
[16:18:48.754] run() for ‘MulticoreFuture’ ... done
[16:18:48.755] Created future:
[16:18:48.755] plan(): Setting new future strategy stack:
[16:18:48.755] List of future strategies:
[16:18:48.755] 1. sequential:
[16:18:48.755]    - args: function (..., envir = parent.frame())
[16:18:48.755]    - tweaked: FALSE
[16:18:48.755]    - call: NULL
[16:18:48.756] plan(): nbrOfWorkers() = 1
[16:18:48.759] plan(): Setting new future strategy stack:
[16:18:48.759] List of future strategies:
[16:18:48.759] 1. multicore:
[16:18:48.759]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:18:48.759]    - tweaked: FALSE
[16:18:48.759]    - call: plan(strategy)
[16:18:48.765] plan(): nbrOfWorkers() = 2
[16:18:48.755] MulticoreFuture:
[16:18:48.755] Label: ‘future_replicate-2’
[16:18:48.755] Expression:
[16:18:48.755] {
[16:18:48.755]     do.call(function(...) {
[16:18:48.755]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:48.755]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:48.755]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:48.755]             on.exit(options(oopts), add = TRUE)
[16:18:48.755]         }
[16:18:48.755]         {
[16:18:48.755]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:48.755]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:48.755]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:48.755]                   envir = globalenv(), inherits = FALSE)
[16:18:48.755]                 ...future.FUN(...future.X_jj, ...)
[16:18:48.755]             })
[16:18:48.755]         }
[16:18:48.755]     }, args = future.call.arguments)
[16:18:48.755] }
[16:18:48.755] Lazy evaluation: FALSE
[16:18:48.755] Asynchronous evaluation: TRUE
[16:18:48.755] Local evaluation: TRUE
[16:18:48.755] Environment: 0x55e7a09e3b80
[16:18:48.755] Capture standard output: TRUE
[16:18:48.755] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:18:48.755] Globals: 7 objects totaling 2.55 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, ...)
[16:18:48.755] Packages: <none>
[16:18:48.755] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:18:48.755] Resolved: TRUE
[16:18:48.755] Value: <not collected>
[16:18:48.755] Conditions captured: <none>
[16:18:48.755] Early signaling: FALSE
[16:18:48.755] Owner process: 20271db5-d788-b537-4432-0a26f2d2d030
[16:18:48.755] Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:48.766] Chunk #2 of 2 ... DONE
[16:18:48.766] Launching 2 futures (chunks) ... DONE
[16:18:48.766] Resolving 2 futures (chunks) ...
[16:18:48.767] resolve() on list ...
[16:18:48.767]  recursive: 0
[16:18:48.767]  length: 2
[16:18:48.767] 
[16:18:48.767] Future #1
[16:18:48.768] result() for MulticoreFuture ...
[16:18:48.769] result() for MulticoreFuture ...
[16:18:48.769] result() for MulticoreFuture ... done
[16:18:48.769] result() for MulticoreFuture ... done
[16:18:48.769] result() for MulticoreFuture ...
[16:18:48.769] result() for MulticoreFuture ... done
[16:18:48.769] signalConditionsASAP(MulticoreFuture, pos=1) ...
[16:18:48.770] - nx: 2
[16:18:48.770] - relay: TRUE
[16:18:48.770] - stdout: TRUE
[16:18:48.770] - signal: TRUE
[16:18:48.770] - resignal: FALSE
[16:18:48.770] - force: TRUE
[16:18:48.770] - relayed: [n=2] FALSE, FALSE
[16:18:48.771] - queued futures: [n=2] FALSE, FALSE
[16:18:48.771]  - until=1
[16:18:48.771]  - relaying element #1
[16:18:48.771] result() for MulticoreFuture ...
[16:18:48.771] result() for MulticoreFuture ... done
[16:18:48.771] result() for MulticoreFuture ...
[16:18:48.771] result() for MulticoreFuture ... done
[16:18:48.772] result() for MulticoreFuture ...
[16:18:48.772] result() for MulticoreFuture ... done
[16:18:48.772] result() for MulticoreFuture ...
[16:18:48.772] result() for MulticoreFuture ... done
[16:18:48.772] - relayed: [n=2] TRUE, FALSE
[16:18:48.772] - queued futures: [n=2] TRUE, FALSE
[16:18:48.773] signalConditionsASAP(MulticoreFuture, pos=1) ... done
[16:18:48.773]  length: 1 (resolved future 1)
[16:18:48.773] Future #2
[16:18:48.773] result() for MulticoreFuture ...
[16:18:48.774] result() for MulticoreFuture ...
[16:18:48.774] result() for MulticoreFuture ... done
[16:18:48.775] result() for MulticoreFuture ... done
[16:18:48.775] result() for MulticoreFuture ...
[16:18:48.775] result() for MulticoreFuture ... done
[16:18:48.775] signalConditionsASAP(MulticoreFuture, pos=2) ...
[16:18:48.775] - nx: 2
[16:18:48.775] - relay: TRUE
[16:18:48.776] - stdout: TRUE
[16:18:48.776] - signal: TRUE
[16:18:48.776] - resignal: FALSE
[16:18:48.776] - force: TRUE
[16:18:48.776] - relayed: [n=2] TRUE, FALSE
[16:18:48.776] - queued futures: [n=2] TRUE, FALSE
[16:18:48.776]  - until=2
[16:18:48.776]  - relaying element #2
[16:18:48.777] result() for MulticoreFuture ...
[16:18:48.777] result() for MulticoreFuture ... done
[16:18:48.777] result() for MulticoreFuture ...
[16:18:48.777] result() for MulticoreFuture ... done
[16:18:48.777] result() for MulticoreFuture ...
[16:18:48.777] result() for MulticoreFuture ... done
[16:18:48.777] result() for MulticoreFuture ...
[16:18:48.778] result() for MulticoreFuture ... done
[16:18:48.778] - relayed: [n=2] TRUE, TRUE
[16:18:48.778] - queued futures: [n=2] TRUE, TRUE
[16:18:48.778] signalConditionsASAP(MulticoreFuture, pos=2) ... done
[16:18:48.778]  length: 0 (resolved future 2)
[16:18:48.778] Relaying remaining futures
[16:18:48.778] signalConditionsASAP(NULL, pos=0) ...
[16:18:48.778] - nx: 2
[16:18:48.778] - relay: TRUE
[16:18:48.779] - stdout: TRUE
[16:18:48.779] - signal: TRUE
[16:18:48.779] - resignal: FALSE
[16:18:48.779] - force: TRUE
[16:18:48.779] - relayed: [n=2] TRUE, TRUE
[16:18:48.779] - queued futures: [n=2] TRUE, TRUE
 - flush all
[16:18:48.779] - relayed: [n=2] TRUE, TRUE
[16:18:48.779] - queued futures: [n=2] TRUE, TRUE
[16:18:48.780] signalConditionsASAP(NULL, pos=0) ... done
[16:18:48.780] resolve() on list ... DONE
[16:18:48.780] result() for MulticoreFuture ...
[16:18:48.780] result() for MulticoreFuture ... done
[16:18:48.780] result() for MulticoreFuture ...
[16:18:48.780] result() for MulticoreFuture ... done
[16:18:48.780] result() for MulticoreFuture ...
[16:18:48.780] result() for MulticoreFuture ... done
[16:18:48.780] result() for MulticoreFuture ...
[16:18:48.781] result() for MulticoreFuture ... done
[16:18:48.781]  - Number of value chunks collected: 2
[16:18:48.781] Resolving 2 futures (chunks) ... DONE
[16:18:48.781] Reducing values from 2 chunks ...
[16:18:48.781]  - Number of values collected after concatenation: 5
[16:18:48.781]  - Number of values expected: 5
[16:18:48.781] Reducing values from 2 chunks ... DONE
[16:18:48.781] future_lapply() ... DONE
[16:18:48.782] plan(): Setting new future strategy stack:
[16:18:48.782] List of future strategies:
[16:18:48.782] 1. sequential:
[16:18:48.782]    - args: function (..., envir = parent.frame())
[16:18:48.782]    - tweaked: FALSE
[16:18:48.782]    - call: plan(sequential)
[16:18:48.783] plan(): nbrOfWorkers() = 1
*** strategy = ‘multicore’ ... done
*** strategy = ‘multisession’ ...
[16:18:48.783] plan(): Setting new future strategy stack:
[16:18:48.783] List of future strategies:
[16:18:48.783] 1. multisession:
[16:18:48.783]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:18:48.783]    - tweaked: FALSE
[16:18:48.783]    - call: plan(strategy)
[16:18:48.784] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:18:48.784] multisession:
[16:18:48.784] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:18:48.784] - tweaked: FALSE
[16:18:48.784] - call: plan(strategy)
[16:18:48.791] getGlobalsAndPackages() ...
[16:18:48.791] Not searching for globals
[16:18:48.791] - globals: [0] <none>
[16:18:48.791] getGlobalsAndPackages() ... DONE
[16:18:48.792] [local output] makeClusterPSOCK() ...
[16:18:48.840] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:18:48.841] [local output] Base port: 11170
[16:18:48.841] [local output] Getting setup options for 2 cluster nodes ...
[16:18:48.842] [local output]  - Node 1 of 2 ...
[16:18:48.842] [local output] localMachine=TRUE => revtunnel=FALSE

[16:18:48.843] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpZpTIv7/worker.rank=1.parallelly.parent=74393.12299508a68d5.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpZpTIv7/worker.rank=1.parallelly.parent=74393.12299508a68d5.pid")'’
[16:18:49.039] - Possible to infer worker's PID: TRUE
[16:18:49.039] [local output] Rscript port: 11170

[16:18:49.040] [local output]  - Node 2 of 2 ...
[16:18:49.040] [local output] localMachine=TRUE => revtunnel=FALSE

[16:18:49.041] [local output] Rscript port: 11170

[16:18:49.041] [local output] Getting setup options for 2 cluster nodes ... done
[16:18:49.041] [local output]  - Parallel setup requested for some PSOCK nodes
[16:18:49.042] [local output] Setting up PSOCK nodes in parallel
[16:18:49.042] List of 36
[16:18:49.042]  $ worker          : chr "localhost"
[16:18:49.042]   ..- attr(*, "localhost")= logi TRUE
[16:18:49.042]  $ master          : chr "localhost"
[16:18:49.042]  $ port            : int 11170
[16:18:49.042]  $ connectTimeout  : num 120
[16:18:49.042]  $ timeout         : num 2592000
[16:18:49.042]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:18:49.042]  $ homogeneous     : logi TRUE
[16:18:49.042]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:18:49.042]  $ rscript_envs    : NULL
[16:18:49.042]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:18:49.042]  $ rscript_startup : NULL
[16:18:49.042]  $ rscript_sh      : chr "sh"
[16:18:49.042]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:18:49.042]  $ methods         : logi TRUE
[16:18:49.042]  $ socketOptions   : chr "no-delay"
[16:18:49.042]  $ useXDR          : logi FALSE
[16:18:49.042]  $ outfile         : chr "/dev/null"
[16:18:49.042]  $ renice          : int NA
[16:18:49.042]  $ rshcmd          : NULL
[16:18:49.042]  $ user            : chr(0) 
[16:18:49.042]  $ revtunnel       : logi FALSE
[16:18:49.042]  $ rshlogfile      : NULL
[16:18:49.042]  $ rshopts         : chr(0) 
[16:18:49.042]  $ rank            : int 1
[16:18:49.042]  $ manual          : logi FALSE
[16:18:49.042]  $ dryrun          : logi FALSE
[16:18:49.042]  $ quiet           : logi FALSE
[16:18:49.042]  $ setup_strategy  : chr "parallel"
[16:18:49.042]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:18:49.042]  $ pidfile         : chr "/tmp/RtmpZpTIv7/worker.rank=1.parallelly.parent=74393.12299508a68d5.pid"
[16:18:49.042]  $ rshcmd_label    : NULL
[16:18:49.042]  $ rsh_call        : NULL
[16:18:49.042]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:18:49.042]  $ localMachine    : logi TRUE
[16:18:49.042]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:18:49.042]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:18:49.042]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:18:49.042]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:18:49.042]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:18:49.042]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:18:49.042]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:18:49.042]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:18:49.042]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:18:49.042]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:18:49.042]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:18:49.042]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:18:49.042]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:18:49.042]  $ arguments       :List of 28
[16:18:49.042]   ..$ worker          : chr "localhost"
[16:18:49.042]   ..$ master          : NULL
[16:18:49.042]   ..$ port            : int 11170
[16:18:49.042]   ..$ connectTimeout  : num 120
[16:18:49.042]   ..$ timeout         : num 2592000
[16:18:49.042]   ..$ rscript         : NULL
[16:18:49.042]   ..$ homogeneous     : NULL
[16:18:49.042]   ..$ rscript_args    : NULL
[16:18:49.042]   ..$ rscript_envs    : NULL
[16:18:49.042]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:18:49.042]   ..$ rscript_startup : NULL
[16:18:49.042]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:18:49.042]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:18:49.042]   ..$ methods         : logi TRUE
[16:18:49.042]   ..$ socketOptions   : chr "no-delay"
[16:18:49.042]   ..$ useXDR          : logi FALSE
[16:18:49.042]   ..$ outfile         : chr "/dev/null"
[16:18:49.042]   ..$ renice          : int NA
[16:18:49.042]   ..$ rshcmd          : NULL
[16:18:49.042]   ..$ user            : NULL
[16:18:49.042]   ..$ revtunnel       : logi NA
[16:18:49.042]   ..$ rshlogfile      : NULL
[16:18:49.042]   ..$ rshopts         : NULL
[16:18:49.042]   ..$ rank            : int 1
[16:18:49.042]   ..$ manual          : logi FALSE
[16:18:49.042]   ..$ dryrun          : logi FALSE
[16:18:49.042]   ..$ quiet           : logi FALSE
[16:18:49.042]   ..$ setup_strategy  : chr "parallel"
[16:18:49.042]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:18:49.059] [local output] System call to launch all workers:
[16:18:49.059] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpZpTIv7/worker.rank=1.parallelly.parent=74393.12299508a68d5.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11170 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:18:49.059] [local output] Starting PSOCK main server
[16:18:49.065] [local output] Workers launched
[16:18:49.065] [local output] Waiting for workers to connect back
[16:18:49.065]  - [local output] 0 workers out of 2 ready
[16:18:49.320]  - [local output] 0 workers out of 2 ready
[16:18:49.320]  - [local output] 1 workers out of 2 ready
[16:18:49.327]  - [local output] 1 workers out of 2 ready
[16:18:49.328]  - [local output] 2 workers out of 2 ready
[16:18:49.328] [local output] Launching of workers completed
[16:18:49.328] [local output] Collecting session information from workers
[16:18:49.329] [local output]  - Worker #1 of 2
[16:18:49.329] [local output]  - Worker #2 of 2
[16:18:49.329] [local output] makeClusterPSOCK() ... done
[16:18:49.341] Packages needed by the future expression (n = 0): <none>
[16:18:49.341] Packages needed by future strategies (n = 0): <none>
[16:18:49.341] {
[16:18:49.341]     {
[16:18:49.341]         {
[16:18:49.341]             ...future.startTime <- base::Sys.time()
[16:18:49.341]             {
[16:18:49.341]                 {
[16:18:49.341]                   {
[16:18:49.341]                     {
[16:18:49.341]                       base::local({
[16:18:49.341]                         has_future <- base::requireNamespace("future", 
[16:18:49.341]                           quietly = TRUE)
[16:18:49.341]                         if (has_future) {
[16:18:49.341]                           ns <- base::getNamespace("future")
[16:18:49.341]                           version <- ns[[".package"]][["version"]]
[16:18:49.341]                           if (is.null(version)) 
[16:18:49.341]                             version <- utils::packageVersion("future")
[16:18:49.341]                         }
[16:18:49.341]                         else {
[16:18:49.341]                           version <- NULL
[16:18:49.341]                         }
[16:18:49.341]                         if (!has_future || version < "1.8.0") {
[16:18:49.341]                           info <- base::c(r_version = base::gsub("R version ", 
[16:18:49.341]                             "", base::R.version$version.string), 
[16:18:49.341]                             platform = base::sprintf("%s (%s-bit)", 
[16:18:49.341]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:18:49.341]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:18:49.341]                               "release", "version")], collapse = " "), 
[16:18:49.341]                             hostname = base::Sys.info()[["nodename"]])
[16:18:49.341]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:18:49.341]                             info)
[16:18:49.341]                           info <- base::paste(info, collapse = "; ")
[16:18:49.341]                           if (!has_future) {
[16:18:49.341]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:18:49.341]                               info)
[16:18:49.341]                           }
[16:18:49.341]                           else {
[16:18:49.341]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:18:49.341]                               info, version)
[16:18:49.341]                           }
[16:18:49.341]                           base::stop(msg)
[16:18:49.341]                         }
[16:18:49.341]                       })
[16:18:49.341]                     }
[16:18:49.341]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:18:49.341]                     base::options(mc.cores = 1L)
[16:18:49.341]                   }
[16:18:49.341]                   ...future.strategy.old <- future::plan("list")
[16:18:49.341]                   options(future.plan = NULL)
[16:18:49.341]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:18:49.341]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:18:49.341]                 }
[16:18:49.341]                 ...future.workdir <- getwd()
[16:18:49.341]             }
[16:18:49.341]             ...future.oldOptions <- base::as.list(base::.Options)
[16:18:49.341]             ...future.oldEnvVars <- base::Sys.getenv()
[16:18:49.341]         }
[16:18:49.341]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:18:49.341]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:18:49.341]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:18:49.341]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:18:49.341]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:18:49.341]             future.stdout.windows.reencode = NULL, width = 80L)
[16:18:49.341]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:18:49.341]             base::names(...future.oldOptions))
[16:18:49.341]     }
[16:18:49.341]     if (FALSE) {
[16:18:49.341]     }
[16:18:49.341]     else {
[16:18:49.341]         if (TRUE) {
[16:18:49.341]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:18:49.341]                 open = "w")
[16:18:49.341]         }
[16:18:49.341]         else {
[16:18:49.341]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:18:49.341]                 windows = "NUL", "/dev/null"), open = "w")
[16:18:49.341]         }
[16:18:49.341]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:18:49.341]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:18:49.341]             base::sink(type = "output", split = FALSE)
[16:18:49.341]             base::close(...future.stdout)
[16:18:49.341]         }, add = TRUE)
[16:18:49.341]     }
[16:18:49.341]     ...future.frame <- base::sys.nframe()
[16:18:49.341]     ...future.conditions <- base::list()
[16:18:49.341]     ...future.rng <- base::globalenv()$.Random.seed
[16:18:49.341]     if (FALSE) {
[16:18:49.341]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:18:49.341]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:18:49.341]     }
[16:18:49.341]     ...future.result <- base::tryCatch({
[16:18:49.341]         base::withCallingHandlers({
[16:18:49.341]             ...future.value <- base::withVisible(base::local({
[16:18:49.341]                 ...future.makeSendCondition <- base::local({
[16:18:49.341]                   sendCondition <- NULL
[16:18:49.341]                   function(frame = 1L) {
[16:18:49.341]                     if (is.function(sendCondition)) 
[16:18:49.341]                       return(sendCondition)
[16:18:49.341]                     ns <- getNamespace("parallel")
[16:18:49.341]                     if (exists("sendData", mode = "function", 
[16:18:49.341]                       envir = ns)) {
[16:18:49.341]                       parallel_sendData <- get("sendData", mode = "function", 
[16:18:49.341]                         envir = ns)
[16:18:49.341]                       envir <- sys.frame(frame)
[16:18:49.341]                       master <- NULL
[16:18:49.341]                       while (!identical(envir, .GlobalEnv) && 
[16:18:49.341]                         !identical(envir, emptyenv())) {
[16:18:49.341]                         if (exists("master", mode = "list", envir = envir, 
[16:18:49.341]                           inherits = FALSE)) {
[16:18:49.341]                           master <- get("master", mode = "list", 
[16:18:49.341]                             envir = envir, inherits = FALSE)
[16:18:49.341]                           if (inherits(master, c("SOCKnode", 
[16:18:49.341]                             "SOCK0node"))) {
[16:18:49.341]                             sendCondition <<- function(cond) {
[16:18:49.341]                               data <- list(type = "VALUE", value = cond, 
[16:18:49.341]                                 success = TRUE)
[16:18:49.341]                               parallel_sendData(master, data)
[16:18:49.341]                             }
[16:18:49.341]                             return(sendCondition)
[16:18:49.341]                           }
[16:18:49.341]                         }
[16:18:49.341]                         frame <- frame + 1L
[16:18:49.341]                         envir <- sys.frame(frame)
[16:18:49.341]                       }
[16:18:49.341]                     }
[16:18:49.341]                     sendCondition <<- function(cond) NULL
[16:18:49.341]                   }
[16:18:49.341]                 })
[16:18:49.341]                 withCallingHandlers({
[16:18:49.341]                   NA
[16:18:49.341]                 }, immediateCondition = function(cond) {
[16:18:49.341]                   sendCondition <- ...future.makeSendCondition()
[16:18:49.341]                   sendCondition(cond)
[16:18:49.341]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:49.341]                   {
[16:18:49.341]                     inherits <- base::inherits
[16:18:49.341]                     invokeRestart <- base::invokeRestart
[16:18:49.341]                     is.null <- base::is.null
[16:18:49.341]                     muffled <- FALSE
[16:18:49.341]                     if (inherits(cond, "message")) {
[16:18:49.341]                       muffled <- grepl(pattern, "muffleMessage")
[16:18:49.341]                       if (muffled) 
[16:18:49.341]                         invokeRestart("muffleMessage")
[16:18:49.341]                     }
[16:18:49.341]                     else if (inherits(cond, "warning")) {
[16:18:49.341]                       muffled <- grepl(pattern, "muffleWarning")
[16:18:49.341]                       if (muffled) 
[16:18:49.341]                         invokeRestart("muffleWarning")
[16:18:49.341]                     }
[16:18:49.341]                     else if (inherits(cond, "condition")) {
[16:18:49.341]                       if (!is.null(pattern)) {
[16:18:49.341]                         computeRestarts <- base::computeRestarts
[16:18:49.341]                         grepl <- base::grepl
[16:18:49.341]                         restarts <- computeRestarts(cond)
[16:18:49.341]                         for (restart in restarts) {
[16:18:49.341]                           name <- restart$name
[16:18:49.341]                           if (is.null(name)) 
[16:18:49.341]                             next
[16:18:49.341]                           if (!grepl(pattern, name)) 
[16:18:49.341]                             next
[16:18:49.341]                           invokeRestart(restart)
[16:18:49.341]                           muffled <- TRUE
[16:18:49.341]                           break
[16:18:49.341]                         }
[16:18:49.341]                       }
[16:18:49.341]                     }
[16:18:49.341]                     invisible(muffled)
[16:18:49.341]                   }
[16:18:49.341]                   muffleCondition(cond)
[16:18:49.341]                 })
[16:18:49.341]             }))
[16:18:49.341]             future::FutureResult(value = ...future.value$value, 
[16:18:49.341]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:49.341]                   ...future.rng), globalenv = if (FALSE) 
[16:18:49.341]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:18:49.341]                     ...future.globalenv.names))
[16:18:49.341]                 else NULL, started = ...future.startTime, version = "1.8")
[16:18:49.341]         }, condition = base::local({
[16:18:49.341]             c <- base::c
[16:18:49.341]             inherits <- base::inherits
[16:18:49.341]             invokeRestart <- base::invokeRestart
[16:18:49.341]             length <- base::length
[16:18:49.341]             list <- base::list
[16:18:49.341]             seq.int <- base::seq.int
[16:18:49.341]             signalCondition <- base::signalCondition
[16:18:49.341]             sys.calls <- base::sys.calls
[16:18:49.341]             `[[` <- base::`[[`
[16:18:49.341]             `+` <- base::`+`
[16:18:49.341]             `<<-` <- base::`<<-`
[16:18:49.341]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:18:49.341]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:18:49.341]                   3L)]
[16:18:49.341]             }
[16:18:49.341]             function(cond) {
[16:18:49.341]                 is_error <- inherits(cond, "error")
[16:18:49.341]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:18:49.341]                   NULL)
[16:18:49.341]                 if (is_error) {
[16:18:49.341]                   sessionInformation <- function() {
[16:18:49.341]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:18:49.341]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:18:49.341]                       search = base::search(), system = base::Sys.info())
[16:18:49.341]                   }
[16:18:49.341]                   ...future.conditions[[length(...future.conditions) + 
[16:18:49.341]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:18:49.341]                     cond$call), session = sessionInformation(), 
[16:18:49.341]                     timestamp = base::Sys.time(), signaled = 0L)
[16:18:49.341]                   signalCondition(cond)
[16:18:49.341]                 }
[16:18:49.341]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:18:49.341]                 "immediateCondition"))) {
[16:18:49.341]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:18:49.341]                   ...future.conditions[[length(...future.conditions) + 
[16:18:49.341]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:18:49.341]                   if (TRUE && !signal) {
[16:18:49.341]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:49.341]                     {
[16:18:49.341]                       inherits <- base::inherits
[16:18:49.341]                       invokeRestart <- base::invokeRestart
[16:18:49.341]                       is.null <- base::is.null
[16:18:49.341]                       muffled <- FALSE
[16:18:49.341]                       if (inherits(cond, "message")) {
[16:18:49.341]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:49.341]                         if (muffled) 
[16:18:49.341]                           invokeRestart("muffleMessage")
[16:18:49.341]                       }
[16:18:49.341]                       else if (inherits(cond, "warning")) {
[16:18:49.341]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:49.341]                         if (muffled) 
[16:18:49.341]                           invokeRestart("muffleWarning")
[16:18:49.341]                       }
[16:18:49.341]                       else if (inherits(cond, "condition")) {
[16:18:49.341]                         if (!is.null(pattern)) {
[16:18:49.341]                           computeRestarts <- base::computeRestarts
[16:18:49.341]                           grepl <- base::grepl
[16:18:49.341]                           restarts <- computeRestarts(cond)
[16:18:49.341]                           for (restart in restarts) {
[16:18:49.341]                             name <- restart$name
[16:18:49.341]                             if (is.null(name)) 
[16:18:49.341]                               next
[16:18:49.341]                             if (!grepl(pattern, name)) 
[16:18:49.341]                               next
[16:18:49.341]                             invokeRestart(restart)
[16:18:49.341]                             muffled <- TRUE
[16:18:49.341]                             break
[16:18:49.341]                           }
[16:18:49.341]                         }
[16:18:49.341]                       }
[16:18:49.341]                       invisible(muffled)
[16:18:49.341]                     }
[16:18:49.341]                     muffleCondition(cond, pattern = "^muffle")
[16:18:49.341]                   }
[16:18:49.341]                 }
[16:18:49.341]                 else {
[16:18:49.341]                   if (TRUE) {
[16:18:49.341]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:49.341]                     {
[16:18:49.341]                       inherits <- base::inherits
[16:18:49.341]                       invokeRestart <- base::invokeRestart
[16:18:49.341]                       is.null <- base::is.null
[16:18:49.341]                       muffled <- FALSE
[16:18:49.341]                       if (inherits(cond, "message")) {
[16:18:49.341]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:49.341]                         if (muffled) 
[16:18:49.341]                           invokeRestart("muffleMessage")
[16:18:49.341]                       }
[16:18:49.341]                       else if (inherits(cond, "warning")) {
[16:18:49.341]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:49.341]                         if (muffled) 
[16:18:49.341]                           invokeRestart("muffleWarning")
[16:18:49.341]                       }
[16:18:49.341]                       else if (inherits(cond, "condition")) {
[16:18:49.341]                         if (!is.null(pattern)) {
[16:18:49.341]                           computeRestarts <- base::computeRestarts
[16:18:49.341]                           grepl <- base::grepl
[16:18:49.341]                           restarts <- computeRestarts(cond)
[16:18:49.341]                           for (restart in restarts) {
[16:18:49.341]                             name <- restart$name
[16:18:49.341]                             if (is.null(name)) 
[16:18:49.341]                               next
[16:18:49.341]                             if (!grepl(pattern, name)) 
[16:18:49.341]                               next
[16:18:49.341]                             invokeRestart(restart)
[16:18:49.341]                             muffled <- TRUE
[16:18:49.341]                             break
[16:18:49.341]                           }
[16:18:49.341]                         }
[16:18:49.341]                       }
[16:18:49.341]                       invisible(muffled)
[16:18:49.341]                     }
[16:18:49.341]                     muffleCondition(cond, pattern = "^muffle")
[16:18:49.341]                   }
[16:18:49.341]                 }
[16:18:49.341]             }
[16:18:49.341]         }))
[16:18:49.341]     }, error = function(ex) {
[16:18:49.341]         base::structure(base::list(value = NULL, visible = NULL, 
[16:18:49.341]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:49.341]                 ...future.rng), started = ...future.startTime, 
[16:18:49.341]             finished = Sys.time(), session_uuid = NA_character_, 
[16:18:49.341]             version = "1.8"), class = "FutureResult")
[16:18:49.341]     }, finally = {
[16:18:49.341]         if (!identical(...future.workdir, getwd())) 
[16:18:49.341]             setwd(...future.workdir)
[16:18:49.341]         {
[16:18:49.341]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:18:49.341]                 ...future.oldOptions$nwarnings <- NULL
[16:18:49.341]             }
[16:18:49.341]             base::options(...future.oldOptions)
[16:18:49.341]             if (.Platform$OS.type == "windows") {
[16:18:49.341]                 old_names <- names(...future.oldEnvVars)
[16:18:49.341]                 envs <- base::Sys.getenv()
[16:18:49.341]                 names <- names(envs)
[16:18:49.341]                 common <- intersect(names, old_names)
[16:18:49.341]                 added <- setdiff(names, old_names)
[16:18:49.341]                 removed <- setdiff(old_names, names)
[16:18:49.341]                 changed <- common[...future.oldEnvVars[common] != 
[16:18:49.341]                   envs[common]]
[16:18:49.341]                 NAMES <- toupper(changed)
[16:18:49.341]                 args <- list()
[16:18:49.341]                 for (kk in seq_along(NAMES)) {
[16:18:49.341]                   name <- changed[[kk]]
[16:18:49.341]                   NAME <- NAMES[[kk]]
[16:18:49.341]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:49.341]                     next
[16:18:49.341]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:49.341]                 }
[16:18:49.341]                 NAMES <- toupper(added)
[16:18:49.341]                 for (kk in seq_along(NAMES)) {
[16:18:49.341]                   name <- added[[kk]]
[16:18:49.341]                   NAME <- NAMES[[kk]]
[16:18:49.341]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:49.341]                     next
[16:18:49.341]                   args[[name]] <- ""
[16:18:49.341]                 }
[16:18:49.341]                 NAMES <- toupper(removed)
[16:18:49.341]                 for (kk in seq_along(NAMES)) {
[16:18:49.341]                   name <- removed[[kk]]
[16:18:49.341]                   NAME <- NAMES[[kk]]
[16:18:49.341]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:49.341]                     next
[16:18:49.341]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:49.341]                 }
[16:18:49.341]                 if (length(args) > 0) 
[16:18:49.341]                   base::do.call(base::Sys.setenv, args = args)
[16:18:49.341]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:18:49.341]             }
[16:18:49.341]             else {
[16:18:49.341]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:18:49.341]             }
[16:18:49.341]             {
[16:18:49.341]                 if (base::length(...future.futureOptionsAdded) > 
[16:18:49.341]                   0L) {
[16:18:49.341]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:18:49.341]                   base::names(opts) <- ...future.futureOptionsAdded
[16:18:49.341]                   base::options(opts)
[16:18:49.341]                 }
[16:18:49.341]                 {
[16:18:49.341]                   {
[16:18:49.341]                     base::options(mc.cores = ...future.mc.cores.old)
[16:18:49.341]                     NULL
[16:18:49.341]                   }
[16:18:49.341]                   options(future.plan = NULL)
[16:18:49.341]                   if (is.na(NA_character_)) 
[16:18:49.341]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:18:49.341]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:18:49.341]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:18:49.341]                     .init = FALSE)
[16:18:49.341]                 }
[16:18:49.341]             }
[16:18:49.341]         }
[16:18:49.341]     })
[16:18:49.341]     if (TRUE) {
[16:18:49.341]         base::sink(type = "output", split = FALSE)
[16:18:49.341]         if (TRUE) {
[16:18:49.341]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:18:49.341]         }
[16:18:49.341]         else {
[16:18:49.341]             ...future.result["stdout"] <- base::list(NULL)
[16:18:49.341]         }
[16:18:49.341]         base::close(...future.stdout)
[16:18:49.341]         ...future.stdout <- NULL
[16:18:49.341]     }
[16:18:49.341]     ...future.result$conditions <- ...future.conditions
[16:18:49.341]     ...future.result$finished <- base::Sys.time()
[16:18:49.341]     ...future.result
[16:18:49.341] }
[16:18:49.395] MultisessionFuture started
[16:18:49.395] result() for ClusterFuture ...
[16:18:49.396] receiveMessageFromWorker() for ClusterFuture ...
[16:18:49.396] - Validating connection of MultisessionFuture
[16:18:49.429] - received message: FutureResult
[16:18:49.429] - Received FutureResult
[16:18:49.429] - Erased future from FutureRegistry
[16:18:49.429] result() for ClusterFuture ...
[16:18:49.430] - result already collected: FutureResult
[16:18:49.430] result() for ClusterFuture ... done
[16:18:49.430] receiveMessageFromWorker() for ClusterFuture ... done
[16:18:49.430] result() for ClusterFuture ... done
[16:18:49.430] result() for ClusterFuture ...
[16:18:49.430] - result already collected: FutureResult
[16:18:49.430] result() for ClusterFuture ... done
[16:18:49.430] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:18:49.434] plan(): nbrOfWorkers() = 2
[16:18:49.435] future_lapply() ...
[16:18:49.435] Generating random seeds ...
[16:18:49.435] Generating random seed streams for 5 elements ...
[16:18:49.436] Generating random seed streams for 5 elements ... DONE
[16:18:49.436] Generating random seeds ... DONE
[16:18:49.436] Will set RNG state on exit: 10403, 17, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:18:49.440] Number of chunks: 2
[16:18:49.440] getGlobalsAndPackagesXApply() ...
[16:18:49.440]  - future.globals: TRUE
[16:18:49.440] getGlobalsAndPackages() ...
[16:18:49.441] Searching for globals...
[16:18:49.442] - globals found: [2] ‘FUN’, ‘sample’
[16:18:49.442] Searching for globals ... DONE
[16:18:49.442] Resolving globals: FALSE
[16:18:49.443] The total size of the 1 globals is 616 bytes (616 bytes)
[16:18:49.443] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:18:49.443] - globals: [1] ‘FUN’
[16:18:49.443] 
[16:18:49.443] getGlobalsAndPackages() ... DONE
[16:18:49.444]  - globals found/used: [n=1] ‘FUN’
[16:18:49.444]  - needed namespaces: [n=0] 
[16:18:49.444] Finding globals ... DONE
[16:18:49.444]  - use_args: TRUE
[16:18:49.444]  - Getting '...' globals ...
[16:18:49.444] resolve() on list ...
[16:18:49.445]  recursive: 0
[16:18:49.445]  length: 1
[16:18:49.445]  elements: ‘...’
[16:18:49.445]  length: 0 (resolved future 1)
[16:18:49.445] resolve() on list ... DONE
[16:18:49.445]    - '...' content: [n=0] 
[16:18:49.445] List of 1
[16:18:49.445]  $ ...: list()
[16:18:49.445]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:49.445]  - attr(*, "where")=List of 1
[16:18:49.445]   ..$ ...:<environment: 0x55e7a18a5c28> 
[16:18:49.445]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:49.445]  - attr(*, "resolved")= logi TRUE
[16:18:49.445]  - attr(*, "total_size")= num NA
[16:18:49.449]  - Getting '...' globals ... DONE
[16:18:49.449] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:18:49.449] List of 2
[16:18:49.449]  $ ...future.FUN:function (...)  
[16:18:49.449]  $ ...          : list()
[16:18:49.449]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:49.449]  - attr(*, "where")=List of 2
[16:18:49.449]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:18:49.449]   ..$ ...          :<environment: 0x55e7a18a5c28> 
[16:18:49.449]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:49.449]  - attr(*, "resolved")= logi FALSE
[16:18:49.449]  - attr(*, "total_size")= num 616
[16:18:49.452] Packages to be attached in all futures: [n=0] 
[16:18:49.452] getGlobalsAndPackagesXApply() ... DONE
[16:18:49.453] Number of futures (= number of chunks): 2
[16:18:49.453] Launching 2 futures (chunks) ...
[16:18:49.453] Chunk #1 of 2 ...
[16:18:49.453]  - Finding globals in 'X' for chunk #1 ...
[16:18:49.453] getGlobalsAndPackages() ...
[16:18:49.453] Searching for globals...
[16:18:49.454] 
[16:18:49.454] Searching for globals ... DONE
[16:18:49.454] - globals: [0] <none>
[16:18:49.454] getGlobalsAndPackages() ... DONE
[16:18:49.454]    + additional globals found: [n=0] 
[16:18:49.454]    + additional namespaces needed: [n=0] 
[16:18:49.454]  - Finding globals in 'X' for chunk #1 ... DONE
[16:18:49.454]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:18:49.454]  - seeds: [2] <seeds>
[16:18:49.455]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:49.455] getGlobalsAndPackages() ...
[16:18:49.455] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:49.455] Resolving globals: FALSE
[16:18:49.455] Tweak future expression to call with '...' arguments ...
[16:18:49.455] {
[16:18:49.455]     do.call(function(...) {
[16:18:49.455]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:49.455]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:49.455]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:49.455]             on.exit(options(oopts), add = TRUE)
[16:18:49.455]         }
[16:18:49.455]         {
[16:18:49.455]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:49.455]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:49.455]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:49.455]                   envir = globalenv(), inherits = FALSE)
[16:18:49.455]                 ...future.FUN(...future.X_jj, ...)
[16:18:49.455]             })
[16:18:49.455]         }
[16:18:49.455]     }, args = future.call.arguments)
[16:18:49.455] }
[16:18:49.456] Tweak future expression to call with '...' arguments ... DONE
[16:18:49.456] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:49.456] 
[16:18:49.456] getGlobalsAndPackages() ... DONE
[16:18:49.457] run() for ‘Future’ ...
[16:18:49.457] - state: ‘created’
[16:18:49.457] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:18:49.472] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:49.472] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:18:49.472]   - Field: ‘node’
[16:18:49.472]   - Field: ‘label’
[16:18:49.472]   - Field: ‘local’
[16:18:49.472]   - Field: ‘owner’
[16:18:49.472]   - Field: ‘envir’
[16:18:49.472]   - Field: ‘workers’
[16:18:49.472]   - Field: ‘packages’
[16:18:49.473]   - Field: ‘gc’
[16:18:49.473]   - Field: ‘conditions’
[16:18:49.473]   - Field: ‘persistent’
[16:18:49.473]   - Field: ‘expr’
[16:18:49.473]   - Field: ‘uuid’
[16:18:49.473]   - Field: ‘seed’
[16:18:49.473]   - Field: ‘version’
[16:18:49.473]   - Field: ‘result’
[16:18:49.474]   - Field: ‘asynchronous’
[16:18:49.474]   - Field: ‘calls’
[16:18:49.474]   - Field: ‘globals’
[16:18:49.474]   - Field: ‘stdout’
[16:18:49.474]   - Field: ‘earlySignal’
[16:18:49.474]   - Field: ‘lazy’
[16:18:49.474]   - Field: ‘state’
[16:18:49.474] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:18:49.474] - Launch lazy future ...
[16:18:49.475] Packages needed by the future expression (n = 0): <none>
[16:18:49.475] Packages needed by future strategies (n = 0): <none>
[16:18:49.475] {
[16:18:49.475]     {
[16:18:49.475]         {
[16:18:49.475]             ...future.startTime <- base::Sys.time()
[16:18:49.475]             {
[16:18:49.475]                 {
[16:18:49.475]                   {
[16:18:49.475]                     {
[16:18:49.475]                       base::local({
[16:18:49.475]                         has_future <- base::requireNamespace("future", 
[16:18:49.475]                           quietly = TRUE)
[16:18:49.475]                         if (has_future) {
[16:18:49.475]                           ns <- base::getNamespace("future")
[16:18:49.475]                           version <- ns[[".package"]][["version"]]
[16:18:49.475]                           if (is.null(version)) 
[16:18:49.475]                             version <- utils::packageVersion("future")
[16:18:49.475]                         }
[16:18:49.475]                         else {
[16:18:49.475]                           version <- NULL
[16:18:49.475]                         }
[16:18:49.475]                         if (!has_future || version < "1.8.0") {
[16:18:49.475]                           info <- base::c(r_version = base::gsub("R version ", 
[16:18:49.475]                             "", base::R.version$version.string), 
[16:18:49.475]                             platform = base::sprintf("%s (%s-bit)", 
[16:18:49.475]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:18:49.475]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:18:49.475]                               "release", "version")], collapse = " "), 
[16:18:49.475]                             hostname = base::Sys.info()[["nodename"]])
[16:18:49.475]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:18:49.475]                             info)
[16:18:49.475]                           info <- base::paste(info, collapse = "; ")
[16:18:49.475]                           if (!has_future) {
[16:18:49.475]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:18:49.475]                               info)
[16:18:49.475]                           }
[16:18:49.475]                           else {
[16:18:49.475]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:18:49.475]                               info, version)
[16:18:49.475]                           }
[16:18:49.475]                           base::stop(msg)
[16:18:49.475]                         }
[16:18:49.475]                       })
[16:18:49.475]                     }
[16:18:49.475]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:18:49.475]                     base::options(mc.cores = 1L)
[16:18:49.475]                   }
[16:18:49.475]                   ...future.strategy.old <- future::plan("list")
[16:18:49.475]                   options(future.plan = NULL)
[16:18:49.475]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:18:49.475]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:18:49.475]                 }
[16:18:49.475]                 ...future.workdir <- getwd()
[16:18:49.475]             }
[16:18:49.475]             ...future.oldOptions <- base::as.list(base::.Options)
[16:18:49.475]             ...future.oldEnvVars <- base::Sys.getenv()
[16:18:49.475]         }
[16:18:49.475]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:18:49.475]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:18:49.475]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:18:49.475]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:18:49.475]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:18:49.475]             future.stdout.windows.reencode = NULL, width = 80L)
[16:18:49.475]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:18:49.475]             base::names(...future.oldOptions))
[16:18:49.475]     }
[16:18:49.475]     if (FALSE) {
[16:18:49.475]     }
[16:18:49.475]     else {
[16:18:49.475]         if (TRUE) {
[16:18:49.475]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:18:49.475]                 open = "w")
[16:18:49.475]         }
[16:18:49.475]         else {
[16:18:49.475]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:18:49.475]                 windows = "NUL", "/dev/null"), open = "w")
[16:18:49.475]         }
[16:18:49.475]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:18:49.475]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:18:49.475]             base::sink(type = "output", split = FALSE)
[16:18:49.475]             base::close(...future.stdout)
[16:18:49.475]         }, add = TRUE)
[16:18:49.475]     }
[16:18:49.475]     ...future.frame <- base::sys.nframe()
[16:18:49.475]     ...future.conditions <- base::list()
[16:18:49.475]     ...future.rng <- base::globalenv()$.Random.seed
[16:18:49.475]     if (FALSE) {
[16:18:49.475]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:18:49.475]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:18:49.475]     }
[16:18:49.475]     ...future.result <- base::tryCatch({
[16:18:49.475]         base::withCallingHandlers({
[16:18:49.475]             ...future.value <- base::withVisible(base::local({
[16:18:49.475]                 ...future.makeSendCondition <- base::local({
[16:18:49.475]                   sendCondition <- NULL
[16:18:49.475]                   function(frame = 1L) {
[16:18:49.475]                     if (is.function(sendCondition)) 
[16:18:49.475]                       return(sendCondition)
[16:18:49.475]                     ns <- getNamespace("parallel")
[16:18:49.475]                     if (exists("sendData", mode = "function", 
[16:18:49.475]                       envir = ns)) {
[16:18:49.475]                       parallel_sendData <- get("sendData", mode = "function", 
[16:18:49.475]                         envir = ns)
[16:18:49.475]                       envir <- sys.frame(frame)
[16:18:49.475]                       master <- NULL
[16:18:49.475]                       while (!identical(envir, .GlobalEnv) && 
[16:18:49.475]                         !identical(envir, emptyenv())) {
[16:18:49.475]                         if (exists("master", mode = "list", envir = envir, 
[16:18:49.475]                           inherits = FALSE)) {
[16:18:49.475]                           master <- get("master", mode = "list", 
[16:18:49.475]                             envir = envir, inherits = FALSE)
[16:18:49.475]                           if (inherits(master, c("SOCKnode", 
[16:18:49.475]                             "SOCK0node"))) {
[16:18:49.475]                             sendCondition <<- function(cond) {
[16:18:49.475]                               data <- list(type = "VALUE", value = cond, 
[16:18:49.475]                                 success = TRUE)
[16:18:49.475]                               parallel_sendData(master, data)
[16:18:49.475]                             }
[16:18:49.475]                             return(sendCondition)
[16:18:49.475]                           }
[16:18:49.475]                         }
[16:18:49.475]                         frame <- frame + 1L
[16:18:49.475]                         envir <- sys.frame(frame)
[16:18:49.475]                       }
[16:18:49.475]                     }
[16:18:49.475]                     sendCondition <<- function(cond) NULL
[16:18:49.475]                   }
[16:18:49.475]                 })
[16:18:49.475]                 withCallingHandlers({
[16:18:49.475]                   {
[16:18:49.475]                     do.call(function(...) {
[16:18:49.475]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:49.475]                       if (!identical(...future.globals.maxSize.org, 
[16:18:49.475]                         ...future.globals.maxSize)) {
[16:18:49.475]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:49.475]                         on.exit(options(oopts), add = TRUE)
[16:18:49.475]                       }
[16:18:49.475]                       {
[16:18:49.475]                         lapply(seq_along(...future.elements_ii), 
[16:18:49.475]                           FUN = function(jj) {
[16:18:49.475]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:49.475]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:49.475]                               envir = globalenv(), inherits = FALSE)
[16:18:49.475]                             ...future.FUN(...future.X_jj, ...)
[16:18:49.475]                           })
[16:18:49.475]                       }
[16:18:49.475]                     }, args = future.call.arguments)
[16:18:49.475]                   }
[16:18:49.475]                 }, immediateCondition = function(cond) {
[16:18:49.475]                   sendCondition <- ...future.makeSendCondition()
[16:18:49.475]                   sendCondition(cond)
[16:18:49.475]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:49.475]                   {
[16:18:49.475]                     inherits <- base::inherits
[16:18:49.475]                     invokeRestart <- base::invokeRestart
[16:18:49.475]                     is.null <- base::is.null
[16:18:49.475]                     muffled <- FALSE
[16:18:49.475]                     if (inherits(cond, "message")) {
[16:18:49.475]                       muffled <- grepl(pattern, "muffleMessage")
[16:18:49.475]                       if (muffled) 
[16:18:49.475]                         invokeRestart("muffleMessage")
[16:18:49.475]                     }
[16:18:49.475]                     else if (inherits(cond, "warning")) {
[16:18:49.475]                       muffled <- grepl(pattern, "muffleWarning")
[16:18:49.475]                       if (muffled) 
[16:18:49.475]                         invokeRestart("muffleWarning")
[16:18:49.475]                     }
[16:18:49.475]                     else if (inherits(cond, "condition")) {
[16:18:49.475]                       if (!is.null(pattern)) {
[16:18:49.475]                         computeRestarts <- base::computeRestarts
[16:18:49.475]                         grepl <- base::grepl
[16:18:49.475]                         restarts <- computeRestarts(cond)
[16:18:49.475]                         for (restart in restarts) {
[16:18:49.475]                           name <- restart$name
[16:18:49.475]                           if (is.null(name)) 
[16:18:49.475]                             next
[16:18:49.475]                           if (!grepl(pattern, name)) 
[16:18:49.475]                             next
[16:18:49.475]                           invokeRestart(restart)
[16:18:49.475]                           muffled <- TRUE
[16:18:49.475]                           break
[16:18:49.475]                         }
[16:18:49.475]                       }
[16:18:49.475]                     }
[16:18:49.475]                     invisible(muffled)
[16:18:49.475]                   }
[16:18:49.475]                   muffleCondition(cond)
[16:18:49.475]                 })
[16:18:49.475]             }))
[16:18:49.475]             future::FutureResult(value = ...future.value$value, 
[16:18:49.475]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:49.475]                   ...future.rng), globalenv = if (FALSE) 
[16:18:49.475]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:18:49.475]                     ...future.globalenv.names))
[16:18:49.475]                 else NULL, started = ...future.startTime, version = "1.8")
[16:18:49.475]         }, condition = base::local({
[16:18:49.475]             c <- base::c
[16:18:49.475]             inherits <- base::inherits
[16:18:49.475]             invokeRestart <- base::invokeRestart
[16:18:49.475]             length <- base::length
[16:18:49.475]             list <- base::list
[16:18:49.475]             seq.int <- base::seq.int
[16:18:49.475]             signalCondition <- base::signalCondition
[16:18:49.475]             sys.calls <- base::sys.calls
[16:18:49.475]             `[[` <- base::`[[`
[16:18:49.475]             `+` <- base::`+`
[16:18:49.475]             `<<-` <- base::`<<-`
[16:18:49.475]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:18:49.475]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:18:49.475]                   3L)]
[16:18:49.475]             }
[16:18:49.475]             function(cond) {
[16:18:49.475]                 is_error <- inherits(cond, "error")
[16:18:49.475]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:18:49.475]                   NULL)
[16:18:49.475]                 if (is_error) {
[16:18:49.475]                   sessionInformation <- function() {
[16:18:49.475]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:18:49.475]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:18:49.475]                       search = base::search(), system = base::Sys.info())
[16:18:49.475]                   }
[16:18:49.475]                   ...future.conditions[[length(...future.conditions) + 
[16:18:49.475]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:18:49.475]                     cond$call), session = sessionInformation(), 
[16:18:49.475]                     timestamp = base::Sys.time(), signaled = 0L)
[16:18:49.475]                   signalCondition(cond)
[16:18:49.475]                 }
[16:18:49.475]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:18:49.475]                 "immediateCondition"))) {
[16:18:49.475]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:18:49.475]                   ...future.conditions[[length(...future.conditions) + 
[16:18:49.475]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:18:49.475]                   if (TRUE && !signal) {
[16:18:49.475]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:49.475]                     {
[16:18:49.475]                       inherits <- base::inherits
[16:18:49.475]                       invokeRestart <- base::invokeRestart
[16:18:49.475]                       is.null <- base::is.null
[16:18:49.475]                       muffled <- FALSE
[16:18:49.475]                       if (inherits(cond, "message")) {
[16:18:49.475]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:49.475]                         if (muffled) 
[16:18:49.475]                           invokeRestart("muffleMessage")
[16:18:49.475]                       }
[16:18:49.475]                       else if (inherits(cond, "warning")) {
[16:18:49.475]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:49.475]                         if (muffled) 
[16:18:49.475]                           invokeRestart("muffleWarning")
[16:18:49.475]                       }
[16:18:49.475]                       else if (inherits(cond, "condition")) {
[16:18:49.475]                         if (!is.null(pattern)) {
[16:18:49.475]                           computeRestarts <- base::computeRestarts
[16:18:49.475]                           grepl <- base::grepl
[16:18:49.475]                           restarts <- computeRestarts(cond)
[16:18:49.475]                           for (restart in restarts) {
[16:18:49.475]                             name <- restart$name
[16:18:49.475]                             if (is.null(name)) 
[16:18:49.475]                               next
[16:18:49.475]                             if (!grepl(pattern, name)) 
[16:18:49.475]                               next
[16:18:49.475]                             invokeRestart(restart)
[16:18:49.475]                             muffled <- TRUE
[16:18:49.475]                             break
[16:18:49.475]                           }
[16:18:49.475]                         }
[16:18:49.475]                       }
[16:18:49.475]                       invisible(muffled)
[16:18:49.475]                     }
[16:18:49.475]                     muffleCondition(cond, pattern = "^muffle")
[16:18:49.475]                   }
[16:18:49.475]                 }
[16:18:49.475]                 else {
[16:18:49.475]                   if (TRUE) {
[16:18:49.475]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:49.475]                     {
[16:18:49.475]                       inherits <- base::inherits
[16:18:49.475]                       invokeRestart <- base::invokeRestart
[16:18:49.475]                       is.null <- base::is.null
[16:18:49.475]                       muffled <- FALSE
[16:18:49.475]                       if (inherits(cond, "message")) {
[16:18:49.475]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:49.475]                         if (muffled) 
[16:18:49.475]                           invokeRestart("muffleMessage")
[16:18:49.475]                       }
[16:18:49.475]                       else if (inherits(cond, "warning")) {
[16:18:49.475]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:49.475]                         if (muffled) 
[16:18:49.475]                           invokeRestart("muffleWarning")
[16:18:49.475]                       }
[16:18:49.475]                       else if (inherits(cond, "condition")) {
[16:18:49.475]                         if (!is.null(pattern)) {
[16:18:49.475]                           computeRestarts <- base::computeRestarts
[16:18:49.475]                           grepl <- base::grepl
[16:18:49.475]                           restarts <- computeRestarts(cond)
[16:18:49.475]                           for (restart in restarts) {
[16:18:49.475]                             name <- restart$name
[16:18:49.475]                             if (is.null(name)) 
[16:18:49.475]                               next
[16:18:49.475]                             if (!grepl(pattern, name)) 
[16:18:49.475]                               next
[16:18:49.475]                             invokeRestart(restart)
[16:18:49.475]                             muffled <- TRUE
[16:18:49.475]                             break
[16:18:49.475]                           }
[16:18:49.475]                         }
[16:18:49.475]                       }
[16:18:49.475]                       invisible(muffled)
[16:18:49.475]                     }
[16:18:49.475]                     muffleCondition(cond, pattern = "^muffle")
[16:18:49.475]                   }
[16:18:49.475]                 }
[16:18:49.475]             }
[16:18:49.475]         }))
[16:18:49.475]     }, error = function(ex) {
[16:18:49.475]         base::structure(base::list(value = NULL, visible = NULL, 
[16:18:49.475]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:49.475]                 ...future.rng), started = ...future.startTime, 
[16:18:49.475]             finished = Sys.time(), session_uuid = NA_character_, 
[16:18:49.475]             version = "1.8"), class = "FutureResult")
[16:18:49.475]     }, finally = {
[16:18:49.475]         if (!identical(...future.workdir, getwd())) 
[16:18:49.475]             setwd(...future.workdir)
[16:18:49.475]         {
[16:18:49.475]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:18:49.475]                 ...future.oldOptions$nwarnings <- NULL
[16:18:49.475]             }
[16:18:49.475]             base::options(...future.oldOptions)
[16:18:49.475]             if (.Platform$OS.type == "windows") {
[16:18:49.475]                 old_names <- names(...future.oldEnvVars)
[16:18:49.475]                 envs <- base::Sys.getenv()
[16:18:49.475]                 names <- names(envs)
[16:18:49.475]                 common <- intersect(names, old_names)
[16:18:49.475]                 added <- setdiff(names, old_names)
[16:18:49.475]                 removed <- setdiff(old_names, names)
[16:18:49.475]                 changed <- common[...future.oldEnvVars[common] != 
[16:18:49.475]                   envs[common]]
[16:18:49.475]                 NAMES <- toupper(changed)
[16:18:49.475]                 args <- list()
[16:18:49.475]                 for (kk in seq_along(NAMES)) {
[16:18:49.475]                   name <- changed[[kk]]
[16:18:49.475]                   NAME <- NAMES[[kk]]
[16:18:49.475]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:49.475]                     next
[16:18:49.475]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:49.475]                 }
[16:18:49.475]                 NAMES <- toupper(added)
[16:18:49.475]                 for (kk in seq_along(NAMES)) {
[16:18:49.475]                   name <- added[[kk]]
[16:18:49.475]                   NAME <- NAMES[[kk]]
[16:18:49.475]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:49.475]                     next
[16:18:49.475]                   args[[name]] <- ""
[16:18:49.475]                 }
[16:18:49.475]                 NAMES <- toupper(removed)
[16:18:49.475]                 for (kk in seq_along(NAMES)) {
[16:18:49.475]                   name <- removed[[kk]]
[16:18:49.475]                   NAME <- NAMES[[kk]]
[16:18:49.475]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:49.475]                     next
[16:18:49.475]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:49.475]                 }
[16:18:49.475]                 if (length(args) > 0) 
[16:18:49.475]                   base::do.call(base::Sys.setenv, args = args)
[16:18:49.475]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:18:49.475]             }
[16:18:49.475]             else {
[16:18:49.475]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:18:49.475]             }
[16:18:49.475]             {
[16:18:49.475]                 if (base::length(...future.futureOptionsAdded) > 
[16:18:49.475]                   0L) {
[16:18:49.475]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:18:49.475]                   base::names(opts) <- ...future.futureOptionsAdded
[16:18:49.475]                   base::options(opts)
[16:18:49.475]                 }
[16:18:49.475]                 {
[16:18:49.475]                   {
[16:18:49.475]                     base::options(mc.cores = ...future.mc.cores.old)
[16:18:49.475]                     NULL
[16:18:49.475]                   }
[16:18:49.475]                   options(future.plan = NULL)
[16:18:49.475]                   if (is.na(NA_character_)) 
[16:18:49.475]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:18:49.475]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:18:49.475]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:18:49.475]                     .init = FALSE)
[16:18:49.475]                 }
[16:18:49.475]             }
[16:18:49.475]         }
[16:18:49.475]     })
[16:18:49.475]     if (TRUE) {
[16:18:49.475]         base::sink(type = "output", split = FALSE)
[16:18:49.475]         if (TRUE) {
[16:18:49.475]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:18:49.475]         }
[16:18:49.475]         else {
[16:18:49.475]             ...future.result["stdout"] <- base::list(NULL)
[16:18:49.475]         }
[16:18:49.475]         base::close(...future.stdout)
[16:18:49.475]         ...future.stdout <- NULL
[16:18:49.475]     }
[16:18:49.475]     ...future.result$conditions <- ...future.conditions
[16:18:49.475]     ...future.result$finished <- base::Sys.time()
[16:18:49.475]     ...future.result
[16:18:49.475] }
[16:18:49.479] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[16:18:49.479] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[16:18:49.479] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[16:18:49.480] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[16:18:49.480] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[16:18:49.480] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[16:18:49.481] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[16:18:49.481] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[16:18:49.481] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[16:18:49.481] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[16:18:49.482] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[16:18:49.482] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[16:18:49.482] MultisessionFuture started
[16:18:49.482] - Launch lazy future ... done
[16:18:49.482] run() for ‘MultisessionFuture’ ... done
[16:18:49.483] Created future:
[16:18:49.483] MultisessionFuture:
[16:18:49.483] Label: ‘future_replicate-1’
[16:18:49.483] Expression:
[16:18:49.483] {
[16:18:49.483]     do.call(function(...) {
[16:18:49.483]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:49.483]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:49.483]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:49.483]             on.exit(options(oopts), add = TRUE)
[16:18:49.483]         }
[16:18:49.483]         {
[16:18:49.483]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:49.483]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:49.483]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:49.483]                   envir = globalenv(), inherits = FALSE)
[16:18:49.483]                 ...future.FUN(...future.X_jj, ...)
[16:18:49.483]             })
[16:18:49.483]         }
[16:18:49.483]     }, args = future.call.arguments)
[16:18:49.483] }
[16:18:49.483] Lazy evaluation: FALSE
[16:18:49.483] Asynchronous evaluation: TRUE
[16:18:49.483] Local evaluation: TRUE
[16:18:49.483] Environment: R_GlobalEnv
[16:18:49.483] Capture standard output: TRUE
[16:18:49.483] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:18:49.483] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:18:49.483] Packages: <none>
[16:18:49.483] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:18:49.483] Resolved: FALSE
[16:18:49.483] Value: <not collected>
[16:18:49.483] Conditions captured: <none>
[16:18:49.483] Early signaling: FALSE
[16:18:49.483] Owner process: 20271db5-d788-b537-4432-0a26f2d2d030
[16:18:49.483] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:49.495] Chunk #1 of 2 ... DONE
[16:18:49.495] Chunk #2 of 2 ...
[16:18:49.495]  - Finding globals in 'X' for chunk #2 ...
[16:18:49.495] getGlobalsAndPackages() ...
[16:18:49.496] Searching for globals...
[16:18:49.496] 
[16:18:49.496] Searching for globals ... DONE
[16:18:49.496] - globals: [0] <none>
[16:18:49.496] getGlobalsAndPackages() ... DONE
[16:18:49.496]    + additional globals found: [n=0] 
[16:18:49.497]    + additional namespaces needed: [n=0] 
[16:18:49.497]  - Finding globals in 'X' for chunk #2 ... DONE
[16:18:49.497]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:18:49.497]  - seeds: [3] <seeds>
[16:18:49.497]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:49.497] getGlobalsAndPackages() ...
[16:18:49.497] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:49.497] Resolving globals: FALSE
[16:18:49.498] Tweak future expression to call with '...' arguments ...
[16:18:49.498] {
[16:18:49.498]     do.call(function(...) {
[16:18:49.498]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:49.498]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:49.498]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:49.498]             on.exit(options(oopts), add = TRUE)
[16:18:49.498]         }
[16:18:49.498]         {
[16:18:49.498]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:49.498]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:49.498]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:49.498]                   envir = globalenv(), inherits = FALSE)
[16:18:49.498]                 ...future.FUN(...future.X_jj, ...)
[16:18:49.498]             })
[16:18:49.498]         }
[16:18:49.498]     }, args = future.call.arguments)
[16:18:49.498] }
[16:18:49.498] Tweak future expression to call with '...' arguments ... DONE
[16:18:49.498] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:49.499] 
[16:18:49.499] getGlobalsAndPackages() ... DONE
[16:18:49.499] run() for ‘Future’ ...
[16:18:49.499] - state: ‘created’
[16:18:49.499] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:18:49.514] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:49.514] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:18:49.514]   - Field: ‘node’
[16:18:49.515]   - Field: ‘label’
[16:18:49.515]   - Field: ‘local’
[16:18:49.515]   - Field: ‘owner’
[16:18:49.515]   - Field: ‘envir’
[16:18:49.515]   - Field: ‘workers’
[16:18:49.515]   - Field: ‘packages’
[16:18:49.515]   - Field: ‘gc’
[16:18:49.515]   - Field: ‘conditions’
[16:18:49.515]   - Field: ‘persistent’
[16:18:49.515]   - Field: ‘expr’
[16:18:49.516]   - Field: ‘uuid’
[16:18:49.516]   - Field: ‘seed’
[16:18:49.516]   - Field: ‘version’
[16:18:49.516]   - Field: ‘result’
[16:18:49.516]   - Field: ‘asynchronous’
[16:18:49.516]   - Field: ‘calls’
[16:18:49.516]   - Field: ‘globals’
[16:18:49.516]   - Field: ‘stdout’
[16:18:49.517]   - Field: ‘earlySignal’
[16:18:49.517]   - Field: ‘lazy’
[16:18:49.517]   - Field: ‘state’
[16:18:49.517] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:18:49.517] - Launch lazy future ...
[16:18:49.517] Packages needed by the future expression (n = 0): <none>
[16:18:49.518] Packages needed by future strategies (n = 0): <none>
[16:18:49.518] {
[16:18:49.518]     {
[16:18:49.518]         {
[16:18:49.518]             ...future.startTime <- base::Sys.time()
[16:18:49.518]             {
[16:18:49.518]                 {
[16:18:49.518]                   {
[16:18:49.518]                     {
[16:18:49.518]                       base::local({
[16:18:49.518]                         has_future <- base::requireNamespace("future", 
[16:18:49.518]                           quietly = TRUE)
[16:18:49.518]                         if (has_future) {
[16:18:49.518]                           ns <- base::getNamespace("future")
[16:18:49.518]                           version <- ns[[".package"]][["version"]]
[16:18:49.518]                           if (is.null(version)) 
[16:18:49.518]                             version <- utils::packageVersion("future")
[16:18:49.518]                         }
[16:18:49.518]                         else {
[16:18:49.518]                           version <- NULL
[16:18:49.518]                         }
[16:18:49.518]                         if (!has_future || version < "1.8.0") {
[16:18:49.518]                           info <- base::c(r_version = base::gsub("R version ", 
[16:18:49.518]                             "", base::R.version$version.string), 
[16:18:49.518]                             platform = base::sprintf("%s (%s-bit)", 
[16:18:49.518]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:18:49.518]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:18:49.518]                               "release", "version")], collapse = " "), 
[16:18:49.518]                             hostname = base::Sys.info()[["nodename"]])
[16:18:49.518]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:18:49.518]                             info)
[16:18:49.518]                           info <- base::paste(info, collapse = "; ")
[16:18:49.518]                           if (!has_future) {
[16:18:49.518]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:18:49.518]                               info)
[16:18:49.518]                           }
[16:18:49.518]                           else {
[16:18:49.518]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:18:49.518]                               info, version)
[16:18:49.518]                           }
[16:18:49.518]                           base::stop(msg)
[16:18:49.518]                         }
[16:18:49.518]                       })
[16:18:49.518]                     }
[16:18:49.518]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:18:49.518]                     base::options(mc.cores = 1L)
[16:18:49.518]                   }
[16:18:49.518]                   ...future.strategy.old <- future::plan("list")
[16:18:49.518]                   options(future.plan = NULL)
[16:18:49.518]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:18:49.518]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:18:49.518]                 }
[16:18:49.518]                 ...future.workdir <- getwd()
[16:18:49.518]             }
[16:18:49.518]             ...future.oldOptions <- base::as.list(base::.Options)
[16:18:49.518]             ...future.oldEnvVars <- base::Sys.getenv()
[16:18:49.518]         }
[16:18:49.518]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:18:49.518]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:18:49.518]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:18:49.518]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:18:49.518]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:18:49.518]             future.stdout.windows.reencode = NULL, width = 80L)
[16:18:49.518]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:18:49.518]             base::names(...future.oldOptions))
[16:18:49.518]     }
[16:18:49.518]     if (FALSE) {
[16:18:49.518]     }
[16:18:49.518]     else {
[16:18:49.518]         if (TRUE) {
[16:18:49.518]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:18:49.518]                 open = "w")
[16:18:49.518]         }
[16:18:49.518]         else {
[16:18:49.518]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:18:49.518]                 windows = "NUL", "/dev/null"), open = "w")
[16:18:49.518]         }
[16:18:49.518]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:18:49.518]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:18:49.518]             base::sink(type = "output", split = FALSE)
[16:18:49.518]             base::close(...future.stdout)
[16:18:49.518]         }, add = TRUE)
[16:18:49.518]     }
[16:18:49.518]     ...future.frame <- base::sys.nframe()
[16:18:49.518]     ...future.conditions <- base::list()
[16:18:49.518]     ...future.rng <- base::globalenv()$.Random.seed
[16:18:49.518]     if (FALSE) {
[16:18:49.518]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:18:49.518]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:18:49.518]     }
[16:18:49.518]     ...future.result <- base::tryCatch({
[16:18:49.518]         base::withCallingHandlers({
[16:18:49.518]             ...future.value <- base::withVisible(base::local({
[16:18:49.518]                 ...future.makeSendCondition <- base::local({
[16:18:49.518]                   sendCondition <- NULL
[16:18:49.518]                   function(frame = 1L) {
[16:18:49.518]                     if (is.function(sendCondition)) 
[16:18:49.518]                       return(sendCondition)
[16:18:49.518]                     ns <- getNamespace("parallel")
[16:18:49.518]                     if (exists("sendData", mode = "function", 
[16:18:49.518]                       envir = ns)) {
[16:18:49.518]                       parallel_sendData <- get("sendData", mode = "function", 
[16:18:49.518]                         envir = ns)
[16:18:49.518]                       envir <- sys.frame(frame)
[16:18:49.518]                       master <- NULL
[16:18:49.518]                       while (!identical(envir, .GlobalEnv) && 
[16:18:49.518]                         !identical(envir, emptyenv())) {
[16:18:49.518]                         if (exists("master", mode = "list", envir = envir, 
[16:18:49.518]                           inherits = FALSE)) {
[16:18:49.518]                           master <- get("master", mode = "list", 
[16:18:49.518]                             envir = envir, inherits = FALSE)
[16:18:49.518]                           if (inherits(master, c("SOCKnode", 
[16:18:49.518]                             "SOCK0node"))) {
[16:18:49.518]                             sendCondition <<- function(cond) {
[16:18:49.518]                               data <- list(type = "VALUE", value = cond, 
[16:18:49.518]                                 success = TRUE)
[16:18:49.518]                               parallel_sendData(master, data)
[16:18:49.518]                             }
[16:18:49.518]                             return(sendCondition)
[16:18:49.518]                           }
[16:18:49.518]                         }
[16:18:49.518]                         frame <- frame + 1L
[16:18:49.518]                         envir <- sys.frame(frame)
[16:18:49.518]                       }
[16:18:49.518]                     }
[16:18:49.518]                     sendCondition <<- function(cond) NULL
[16:18:49.518]                   }
[16:18:49.518]                 })
[16:18:49.518]                 withCallingHandlers({
[16:18:49.518]                   {
[16:18:49.518]                     do.call(function(...) {
[16:18:49.518]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:49.518]                       if (!identical(...future.globals.maxSize.org, 
[16:18:49.518]                         ...future.globals.maxSize)) {
[16:18:49.518]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:49.518]                         on.exit(options(oopts), add = TRUE)
[16:18:49.518]                       }
[16:18:49.518]                       {
[16:18:49.518]                         lapply(seq_along(...future.elements_ii), 
[16:18:49.518]                           FUN = function(jj) {
[16:18:49.518]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:49.518]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:49.518]                               envir = globalenv(), inherits = FALSE)
[16:18:49.518]                             ...future.FUN(...future.X_jj, ...)
[16:18:49.518]                           })
[16:18:49.518]                       }
[16:18:49.518]                     }, args = future.call.arguments)
[16:18:49.518]                   }
[16:18:49.518]                 }, immediateCondition = function(cond) {
[16:18:49.518]                   sendCondition <- ...future.makeSendCondition()
[16:18:49.518]                   sendCondition(cond)
[16:18:49.518]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:49.518]                   {
[16:18:49.518]                     inherits <- base::inherits
[16:18:49.518]                     invokeRestart <- base::invokeRestart
[16:18:49.518]                     is.null <- base::is.null
[16:18:49.518]                     muffled <- FALSE
[16:18:49.518]                     if (inherits(cond, "message")) {
[16:18:49.518]                       muffled <- grepl(pattern, "muffleMessage")
[16:18:49.518]                       if (muffled) 
[16:18:49.518]                         invokeRestart("muffleMessage")
[16:18:49.518]                     }
[16:18:49.518]                     else if (inherits(cond, "warning")) {
[16:18:49.518]                       muffled <- grepl(pattern, "muffleWarning")
[16:18:49.518]                       if (muffled) 
[16:18:49.518]                         invokeRestart("muffleWarning")
[16:18:49.518]                     }
[16:18:49.518]                     else if (inherits(cond, "condition")) {
[16:18:49.518]                       if (!is.null(pattern)) {
[16:18:49.518]                         computeRestarts <- base::computeRestarts
[16:18:49.518]                         grepl <- base::grepl
[16:18:49.518]                         restarts <- computeRestarts(cond)
[16:18:49.518]                         for (restart in restarts) {
[16:18:49.518]                           name <- restart$name
[16:18:49.518]                           if (is.null(name)) 
[16:18:49.518]                             next
[16:18:49.518]                           if (!grepl(pattern, name)) 
[16:18:49.518]                             next
[16:18:49.518]                           invokeRestart(restart)
[16:18:49.518]                           muffled <- TRUE
[16:18:49.518]                           break
[16:18:49.518]                         }
[16:18:49.518]                       }
[16:18:49.518]                     }
[16:18:49.518]                     invisible(muffled)
[16:18:49.518]                   }
[16:18:49.518]                   muffleCondition(cond)
[16:18:49.518]                 })
[16:18:49.518]             }))
[16:18:49.518]             future::FutureResult(value = ...future.value$value, 
[16:18:49.518]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:49.518]                   ...future.rng), globalenv = if (FALSE) 
[16:18:49.518]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:18:49.518]                     ...future.globalenv.names))
[16:18:49.518]                 else NULL, started = ...future.startTime, version = "1.8")
[16:18:49.518]         }, condition = base::local({
[16:18:49.518]             c <- base::c
[16:18:49.518]             inherits <- base::inherits
[16:18:49.518]             invokeRestart <- base::invokeRestart
[16:18:49.518]             length <- base::length
[16:18:49.518]             list <- base::list
[16:18:49.518]             seq.int <- base::seq.int
[16:18:49.518]             signalCondition <- base::signalCondition
[16:18:49.518]             sys.calls <- base::sys.calls
[16:18:49.518]             `[[` <- base::`[[`
[16:18:49.518]             `+` <- base::`+`
[16:18:49.518]             `<<-` <- base::`<<-`
[16:18:49.518]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:18:49.518]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:18:49.518]                   3L)]
[16:18:49.518]             }
[16:18:49.518]             function(cond) {
[16:18:49.518]                 is_error <- inherits(cond, "error")
[16:18:49.518]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:18:49.518]                   NULL)
[16:18:49.518]                 if (is_error) {
[16:18:49.518]                   sessionInformation <- function() {
[16:18:49.518]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:18:49.518]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:18:49.518]                       search = base::search(), system = base::Sys.info())
[16:18:49.518]                   }
[16:18:49.518]                   ...future.conditions[[length(...future.conditions) + 
[16:18:49.518]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:18:49.518]                     cond$call), session = sessionInformation(), 
[16:18:49.518]                     timestamp = base::Sys.time(), signaled = 0L)
[16:18:49.518]                   signalCondition(cond)
[16:18:49.518]                 }
[16:18:49.518]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:18:49.518]                 "immediateCondition"))) {
[16:18:49.518]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:18:49.518]                   ...future.conditions[[length(...future.conditions) + 
[16:18:49.518]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:18:49.518]                   if (TRUE && !signal) {
[16:18:49.518]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:49.518]                     {
[16:18:49.518]                       inherits <- base::inherits
[16:18:49.518]                       invokeRestart <- base::invokeRestart
[16:18:49.518]                       is.null <- base::is.null
[16:18:49.518]                       muffled <- FALSE
[16:18:49.518]                       if (inherits(cond, "message")) {
[16:18:49.518]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:49.518]                         if (muffled) 
[16:18:49.518]                           invokeRestart("muffleMessage")
[16:18:49.518]                       }
[16:18:49.518]                       else if (inherits(cond, "warning")) {
[16:18:49.518]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:49.518]                         if (muffled) 
[16:18:49.518]                           invokeRestart("muffleWarning")
[16:18:49.518]                       }
[16:18:49.518]                       else if (inherits(cond, "condition")) {
[16:18:49.518]                         if (!is.null(pattern)) {
[16:18:49.518]                           computeRestarts <- base::computeRestarts
[16:18:49.518]                           grepl <- base::grepl
[16:18:49.518]                           restarts <- computeRestarts(cond)
[16:18:49.518]                           for (restart in restarts) {
[16:18:49.518]                             name <- restart$name
[16:18:49.518]                             if (is.null(name)) 
[16:18:49.518]                               next
[16:18:49.518]                             if (!grepl(pattern, name)) 
[16:18:49.518]                               next
[16:18:49.518]                             invokeRestart(restart)
[16:18:49.518]                             muffled <- TRUE
[16:18:49.518]                             break
[16:18:49.518]                           }
[16:18:49.518]                         }
[16:18:49.518]                       }
[16:18:49.518]                       invisible(muffled)
[16:18:49.518]                     }
[16:18:49.518]                     muffleCondition(cond, pattern = "^muffle")
[16:18:49.518]                   }
[16:18:49.518]                 }
[16:18:49.518]                 else {
[16:18:49.518]                   if (TRUE) {
[16:18:49.518]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:49.518]                     {
[16:18:49.518]                       inherits <- base::inherits
[16:18:49.518]                       invokeRestart <- base::invokeRestart
[16:18:49.518]                       is.null <- base::is.null
[16:18:49.518]                       muffled <- FALSE
[16:18:49.518]                       if (inherits(cond, "message")) {
[16:18:49.518]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:49.518]                         if (muffled) 
[16:18:49.518]                           invokeRestart("muffleMessage")
[16:18:49.518]                       }
[16:18:49.518]                       else if (inherits(cond, "warning")) {
[16:18:49.518]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:49.518]                         if (muffled) 
[16:18:49.518]                           invokeRestart("muffleWarning")
[16:18:49.518]                       }
[16:18:49.518]                       else if (inherits(cond, "condition")) {
[16:18:49.518]                         if (!is.null(pattern)) {
[16:18:49.518]                           computeRestarts <- base::computeRestarts
[16:18:49.518]                           grepl <- base::grepl
[16:18:49.518]                           restarts <- computeRestarts(cond)
[16:18:49.518]                           for (restart in restarts) {
[16:18:49.518]                             name <- restart$name
[16:18:49.518]                             if (is.null(name)) 
[16:18:49.518]                               next
[16:18:49.518]                             if (!grepl(pattern, name)) 
[16:18:49.518]                               next
[16:18:49.518]                             invokeRestart(restart)
[16:18:49.518]                             muffled <- TRUE
[16:18:49.518]                             break
[16:18:49.518]                           }
[16:18:49.518]                         }
[16:18:49.518]                       }
[16:18:49.518]                       invisible(muffled)
[16:18:49.518]                     }
[16:18:49.518]                     muffleCondition(cond, pattern = "^muffle")
[16:18:49.518]                   }
[16:18:49.518]                 }
[16:18:49.518]             }
[16:18:49.518]         }))
[16:18:49.518]     }, error = function(ex) {
[16:18:49.518]         base::structure(base::list(value = NULL, visible = NULL, 
[16:18:49.518]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:49.518]                 ...future.rng), started = ...future.startTime, 
[16:18:49.518]             finished = Sys.time(), session_uuid = NA_character_, 
[16:18:49.518]             version = "1.8"), class = "FutureResult")
[16:18:49.518]     }, finally = {
[16:18:49.518]         if (!identical(...future.workdir, getwd())) 
[16:18:49.518]             setwd(...future.workdir)
[16:18:49.518]         {
[16:18:49.518]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:18:49.518]                 ...future.oldOptions$nwarnings <- NULL
[16:18:49.518]             }
[16:18:49.518]             base::options(...future.oldOptions)
[16:18:49.518]             if (.Platform$OS.type == "windows") {
[16:18:49.518]                 old_names <- names(...future.oldEnvVars)
[16:18:49.518]                 envs <- base::Sys.getenv()
[16:18:49.518]                 names <- names(envs)
[16:18:49.518]                 common <- intersect(names, old_names)
[16:18:49.518]                 added <- setdiff(names, old_names)
[16:18:49.518]                 removed <- setdiff(old_names, names)
[16:18:49.518]                 changed <- common[...future.oldEnvVars[common] != 
[16:18:49.518]                   envs[common]]
[16:18:49.518]                 NAMES <- toupper(changed)
[16:18:49.518]                 args <- list()
[16:18:49.518]                 for (kk in seq_along(NAMES)) {
[16:18:49.518]                   name <- changed[[kk]]
[16:18:49.518]                   NAME <- NAMES[[kk]]
[16:18:49.518]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:49.518]                     next
[16:18:49.518]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:49.518]                 }
[16:18:49.518]                 NAMES <- toupper(added)
[16:18:49.518]                 for (kk in seq_along(NAMES)) {
[16:18:49.518]                   name <- added[[kk]]
[16:18:49.518]                   NAME <- NAMES[[kk]]
[16:18:49.518]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:49.518]                     next
[16:18:49.518]                   args[[name]] <- ""
[16:18:49.518]                 }
[16:18:49.518]                 NAMES <- toupper(removed)
[16:18:49.518]                 for (kk in seq_along(NAMES)) {
[16:18:49.518]                   name <- removed[[kk]]
[16:18:49.518]                   NAME <- NAMES[[kk]]
[16:18:49.518]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:49.518]                     next
[16:18:49.518]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:49.518]                 }
[16:18:49.518]                 if (length(args) > 0) 
[16:18:49.518]                   base::do.call(base::Sys.setenv, args = args)
[16:18:49.518]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:18:49.518]             }
[16:18:49.518]             else {
[16:18:49.518]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:18:49.518]             }
[16:18:49.518]             {
[16:18:49.518]                 if (base::length(...future.futureOptionsAdded) > 
[16:18:49.518]                   0L) {
[16:18:49.518]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:18:49.518]                   base::names(opts) <- ...future.futureOptionsAdded
[16:18:49.518]                   base::options(opts)
[16:18:49.518]                 }
[16:18:49.518]                 {
[16:18:49.518]                   {
[16:18:49.518]                     base::options(mc.cores = ...future.mc.cores.old)
[16:18:49.518]                     NULL
[16:18:49.518]                   }
[16:18:49.518]                   options(future.plan = NULL)
[16:18:49.518]                   if (is.na(NA_character_)) 
[16:18:49.518]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:18:49.518]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:18:49.518]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:18:49.518]                     .init = FALSE)
[16:18:49.518]                 }
[16:18:49.518]             }
[16:18:49.518]         }
[16:18:49.518]     })
[16:18:49.518]     if (TRUE) {
[16:18:49.518]         base::sink(type = "output", split = FALSE)
[16:18:49.518]         if (TRUE) {
[16:18:49.518]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:18:49.518]         }
[16:18:49.518]         else {
[16:18:49.518]             ...future.result["stdout"] <- base::list(NULL)
[16:18:49.518]         }
[16:18:49.518]         base::close(...future.stdout)
[16:18:49.518]         ...future.stdout <- NULL
[16:18:49.518]     }
[16:18:49.518]     ...future.result$conditions <- ...future.conditions
[16:18:49.518]     ...future.result$finished <- base::Sys.time()
[16:18:49.518]     ...future.result
[16:18:49.518] }
[16:18:49.574] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[16:18:49.574] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[16:18:49.575] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[16:18:49.575] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[16:18:49.575] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[16:18:49.575] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[16:18:49.576] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[16:18:49.576] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[16:18:49.576] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[16:18:49.577] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[16:18:49.577] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[16:18:49.577] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[16:18:49.578] MultisessionFuture started
[16:18:49.578] - Launch lazy future ... done
[16:18:49.578] run() for ‘MultisessionFuture’ ... done
[16:18:49.578] Created future:
[16:18:49.578] MultisessionFuture:
[16:18:49.578] Label: ‘future_replicate-2’
[16:18:49.578] Expression:
[16:18:49.578] {
[16:18:49.578]     do.call(function(...) {
[16:18:49.578]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:49.578]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:49.578]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:49.578]             on.exit(options(oopts), add = TRUE)
[16:18:49.578]         }
[16:18:49.578]         {
[16:18:49.578]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:49.578]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:49.578]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:49.578]                   envir = globalenv(), inherits = FALSE)
[16:18:49.578]                 ...future.FUN(...future.X_jj, ...)
[16:18:49.578]             })
[16:18:49.578]         }
[16:18:49.578]     }, args = future.call.arguments)
[16:18:49.578] }
[16:18:49.578] Lazy evaluation: FALSE
[16:18:49.578] Asynchronous evaluation: TRUE
[16:18:49.578] Local evaluation: TRUE
[16:18:49.578] Environment: R_GlobalEnv
[16:18:49.578] Capture standard output: TRUE
[16:18:49.578] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:18:49.578] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:18:49.578] Packages: <none>
[16:18:49.578] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:18:49.578] Resolved: FALSE
[16:18:49.578] Value: <not collected>
[16:18:49.578] Conditions captured: <none>
[16:18:49.578] Early signaling: FALSE
[16:18:49.578] Owner process: 20271db5-d788-b537-4432-0a26f2d2d030
[16:18:49.578] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:49.590] Chunk #2 of 2 ... DONE
[16:18:49.590] Launching 2 futures (chunks) ... DONE
[16:18:49.590] Resolving 2 futures (chunks) ...
[16:18:49.591] resolve() on list ...
[16:18:49.591]  recursive: 0
[16:18:49.591]  length: 2
[16:18:49.591] 
[16:18:49.592] receiveMessageFromWorker() for ClusterFuture ...
[16:18:49.594] - Validating connection of MultisessionFuture
[16:18:49.595] - received message: FutureResult
[16:18:49.595] - Received FutureResult
[16:18:49.595] - Erased future from FutureRegistry
[16:18:49.595] result() for ClusterFuture ...
[16:18:49.595] - result already collected: FutureResult
[16:18:49.595] result() for ClusterFuture ... done
[16:18:49.595] receiveMessageFromWorker() for ClusterFuture ... done
[16:18:49.595] Future #1
[16:18:49.595] result() for ClusterFuture ...
[16:18:49.596] - result already collected: FutureResult
[16:18:49.596] result() for ClusterFuture ... done
[16:18:49.596] result() for ClusterFuture ...
[16:18:49.596] - result already collected: FutureResult
[16:18:49.596] result() for ClusterFuture ... done
[16:18:49.596] signalConditionsASAP(MultisessionFuture, pos=1) ...
[16:18:49.596] - nx: 2
[16:18:49.596] - relay: TRUE
[16:18:49.596] - stdout: TRUE
[16:18:49.596] - signal: TRUE
[16:18:49.596] - resignal: FALSE
[16:18:49.597] - force: TRUE
[16:18:49.597] - relayed: [n=2] FALSE, FALSE
[16:18:49.597] - queued futures: [n=2] FALSE, FALSE
[16:18:49.597]  - until=1
[16:18:49.597]  - relaying element #1
[16:18:49.597] result() for ClusterFuture ...
[16:18:49.597] - result already collected: FutureResult
[16:18:49.597] result() for ClusterFuture ... done
[16:18:49.597] result() for ClusterFuture ...
[16:18:49.597] - result already collected: FutureResult
[16:18:49.597] result() for ClusterFuture ... done
[16:18:49.598] result() for ClusterFuture ...
[16:18:49.598] - result already collected: FutureResult
[16:18:49.598] result() for ClusterFuture ... done
[16:18:49.598] result() for ClusterFuture ...
[16:18:49.598] - result already collected: FutureResult
[16:18:49.598] result() for ClusterFuture ... done
[16:18:49.598] - relayed: [n=2] TRUE, FALSE
[16:18:49.598] - queued futures: [n=2] TRUE, FALSE
[16:18:49.598] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[16:18:49.598]  length: 1 (resolved future 1)
[16:18:49.661] receiveMessageFromWorker() for ClusterFuture ...
[16:18:49.661] - Validating connection of MultisessionFuture
[16:18:49.661] - received message: FutureResult
[16:18:49.662] - Received FutureResult
[16:18:49.662] - Erased future from FutureRegistry
[16:18:49.662] result() for ClusterFuture ...
[16:18:49.662] - result already collected: FutureResult
[16:18:49.662] result() for ClusterFuture ... done
[16:18:49.662] receiveMessageFromWorker() for ClusterFuture ... done
[16:18:49.662] Future #2
[16:18:49.662] result() for ClusterFuture ...
[16:18:49.662] - result already collected: FutureResult
[16:18:49.662] result() for ClusterFuture ... done
[16:18:49.663] result() for ClusterFuture ...
[16:18:49.663] - result already collected: FutureResult
[16:18:49.663] result() for ClusterFuture ... done
[16:18:49.663] signalConditionsASAP(MultisessionFuture, pos=2) ...
[16:18:49.663] - nx: 2
[16:18:49.663] - relay: TRUE
[16:18:49.663] - stdout: TRUE
[16:18:49.663] - signal: TRUE
[16:18:49.663] - resignal: FALSE
[16:18:49.663] - force: TRUE
[16:18:49.663] - relayed: [n=2] TRUE, FALSE
[16:18:49.663] - queued futures: [n=2] TRUE, FALSE
[16:18:49.664]  - until=2
[16:18:49.664]  - relaying element #2
[16:18:49.664] result() for ClusterFuture ...
[16:18:49.664] - result already collected: FutureResult
[16:18:49.664] result() for ClusterFuture ... done
[16:18:49.664] result() for ClusterFuture ...
[16:18:49.664] - result already collected: FutureResult
[16:18:49.664] result() for ClusterFuture ... done
[16:18:49.664] result() for ClusterFuture ...
[16:18:49.664] - result already collected: FutureResult
[16:18:49.665] result() for ClusterFuture ... done
[16:18:49.665] result() for ClusterFuture ...
[16:18:49.665] - result already collected: FutureResult
[16:18:49.665] result() for ClusterFuture ... done
[16:18:49.665] - relayed: [n=2] TRUE, TRUE
[16:18:49.665] - queued futures: [n=2] TRUE, TRUE
[16:18:49.665] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[16:18:49.665]  length: 0 (resolved future 2)
[16:18:49.665] Relaying remaining futures
[16:18:49.665] signalConditionsASAP(NULL, pos=0) ...
[16:18:49.665] - nx: 2
[16:18:49.665] - relay: TRUE
[16:18:49.666] - stdout: TRUE
[16:18:49.666] - signal: TRUE
[16:18:49.666] - resignal: FALSE
[16:18:49.666] - force: TRUE
[16:18:49.666] - relayed: [n=2] TRUE, TRUE
[16:18:49.666] - queued futures: [n=2] TRUE, TRUE
 - flush all
[16:18:49.666] - relayed: [n=2] TRUE, TRUE
[16:18:49.666] - queued futures: [n=2] TRUE, TRUE
[16:18:49.666] signalConditionsASAP(NULL, pos=0) ... done
[16:18:49.666] resolve() on list ... DONE
[16:18:49.666] result() for ClusterFuture ...
[16:18:49.667] - result already collected: FutureResult
[16:18:49.667] result() for ClusterFuture ... done
[16:18:49.667] result() for ClusterFuture ...
[16:18:49.667] - result already collected: FutureResult
[16:18:49.667] result() for ClusterFuture ... done
[16:18:49.667] result() for ClusterFuture ...
[16:18:49.667] - result already collected: FutureResult
[16:18:49.667] result() for ClusterFuture ... done
[16:18:49.667] result() for ClusterFuture ...
[16:18:49.667] - result already collected: FutureResult
[16:18:49.667] result() for ClusterFuture ... done
[16:18:49.668]  - Number of value chunks collected: 2
[16:18:49.668] Resolving 2 futures (chunks) ... DONE
[16:18:49.668] Reducing values from 2 chunks ...
[16:18:49.668]  - Number of values collected after concatenation: 5
[16:18:49.668]  - Number of values expected: 5
[16:18:49.668] Reducing values from 2 chunks ... DONE
[16:18:49.668] future_lapply() ... DONE
[16:18:49.668] future_lapply() ...
[16:18:49.669] Generating random seeds ...
[16:18:49.669] Generating random seed streams for 5 elements ...
[16:18:49.669] Generating random seed streams for 5 elements ... DONE
[16:18:49.669] Generating random seeds ... DONE
[16:18:49.669] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:18:49.674] Number of chunks: 2
[16:18:49.674] getGlobalsAndPackagesXApply() ...
[16:18:49.674]  - future.globals: TRUE
[16:18:49.674] getGlobalsAndPackages() ...
[16:18:49.674] Searching for globals...
[16:18:49.675] - globals found: [2] ‘FUN’, ‘sample’
[16:18:49.675] Searching for globals ... DONE
[16:18:49.675] Resolving globals: FALSE
[16:18:49.676] The total size of the 1 globals is 616 bytes (616 bytes)
[16:18:49.676] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:18:49.676] - globals: [1] ‘FUN’
[16:18:49.676] 
[16:18:49.676] getGlobalsAndPackages() ... DONE
[16:18:49.676]  - globals found/used: [n=1] ‘FUN’
[16:18:49.677]  - needed namespaces: [n=0] 
[16:18:49.677] Finding globals ... DONE
[16:18:49.677]  - use_args: TRUE
[16:18:49.677]  - Getting '...' globals ...
[16:18:49.677] resolve() on list ...
[16:18:49.677]  recursive: 0
[16:18:49.677]  length: 1
[16:18:49.677]  elements: ‘...’
[16:18:49.678]  length: 0 (resolved future 1)
[16:18:49.678] resolve() on list ... DONE
[16:18:49.678]    - '...' content: [n=0] 
[16:18:49.678] List of 1
[16:18:49.678]  $ ...: list()
[16:18:49.678]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:49.678]  - attr(*, "where")=List of 1
[16:18:49.678]   ..$ ...:<environment: 0x55e7a0704620> 
[16:18:49.678]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:49.678]  - attr(*, "resolved")= logi TRUE
[16:18:49.678]  - attr(*, "total_size")= num NA
[16:18:49.680]  - Getting '...' globals ... DONE
[16:18:49.681] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:18:49.681] List of 2
[16:18:49.681]  $ ...future.FUN:function (...)  
[16:18:49.681]  $ ...          : list()
[16:18:49.681]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:49.681]  - attr(*, "where")=List of 2
[16:18:49.681]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:18:49.681]   ..$ ...          :<environment: 0x55e7a0704620> 
[16:18:49.681]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:49.681]  - attr(*, "resolved")= logi FALSE
[16:18:49.681]  - attr(*, "total_size")= num 616
[16:18:49.683] Packages to be attached in all futures: [n=0] 
[16:18:49.683] getGlobalsAndPackagesXApply() ... DONE
[16:18:49.684] Number of futures (= number of chunks): 2
[16:18:49.684] Launching 2 futures (chunks) ...
[16:18:49.684] Chunk #1 of 2 ...
[16:18:49.684]  - Finding globals in 'X' for chunk #1 ...
[16:18:49.684] getGlobalsAndPackages() ...
[16:18:49.684] Searching for globals...
[16:18:49.684] 
[16:18:49.685] Searching for globals ... DONE
[16:18:49.685] - globals: [0] <none>
[16:18:49.685] getGlobalsAndPackages() ... DONE
[16:18:49.685]    + additional globals found: [n=0] 
[16:18:49.685]    + additional namespaces needed: [n=0] 
[16:18:49.685]  - Finding globals in 'X' for chunk #1 ... DONE
[16:18:49.685]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:18:49.685]  - seeds: [2] <seeds>
[16:18:49.685]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:49.685] getGlobalsAndPackages() ...
[16:18:49.685] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:49.686] Resolving globals: FALSE
[16:18:49.686] Tweak future expression to call with '...' arguments ...
[16:18:49.686] {
[16:18:49.686]     do.call(function(...) {
[16:18:49.686]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:49.686]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:49.686]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:49.686]             on.exit(options(oopts), add = TRUE)
[16:18:49.686]         }
[16:18:49.686]         {
[16:18:49.686]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:49.686]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:49.686]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:49.686]                   envir = globalenv(), inherits = FALSE)
[16:18:49.686]                 ...future.FUN(...future.X_jj, ...)
[16:18:49.686]             })
[16:18:49.686]         }
[16:18:49.686]     }, args = future.call.arguments)
[16:18:49.686] }
[16:18:49.686] Tweak future expression to call with '...' arguments ... DONE
[16:18:49.686] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:49.687] 
[16:18:49.687] getGlobalsAndPackages() ... DONE
[16:18:49.687] run() for ‘Future’ ...
[16:18:49.687] - state: ‘created’
[16:18:49.687] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:18:49.701] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:49.701] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:18:49.702]   - Field: ‘node’
[16:18:49.702]   - Field: ‘label’
[16:18:49.702]   - Field: ‘local’
[16:18:49.702]   - Field: ‘owner’
[16:18:49.702]   - Field: ‘envir’
[16:18:49.702]   - Field: ‘workers’
[16:18:49.702]   - Field: ‘packages’
[16:18:49.702]   - Field: ‘gc’
[16:18:49.702]   - Field: ‘conditions’
[16:18:49.702]   - Field: ‘persistent’
[16:18:49.703]   - Field: ‘expr’
[16:18:49.703]   - Field: ‘uuid’
[16:18:49.703]   - Field: ‘seed’
[16:18:49.703]   - Field: ‘version’
[16:18:49.703]   - Field: ‘result’
[16:18:49.703]   - Field: ‘asynchronous’
[16:18:49.703]   - Field: ‘calls’
[16:18:49.703]   - Field: ‘globals’
[16:18:49.703]   - Field: ‘stdout’
[16:18:49.703]   - Field: ‘earlySignal’
[16:18:49.703]   - Field: ‘lazy’
[16:18:49.704]   - Field: ‘state’
[16:18:49.704] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:18:49.704] - Launch lazy future ...
[16:18:49.704] Packages needed by the future expression (n = 0): <none>
[16:18:49.704] Packages needed by future strategies (n = 0): <none>
[16:18:49.705] {
[16:18:49.705]     {
[16:18:49.705]         {
[16:18:49.705]             ...future.startTime <- base::Sys.time()
[16:18:49.705]             {
[16:18:49.705]                 {
[16:18:49.705]                   {
[16:18:49.705]                     {
[16:18:49.705]                       base::local({
[16:18:49.705]                         has_future <- base::requireNamespace("future", 
[16:18:49.705]                           quietly = TRUE)
[16:18:49.705]                         if (has_future) {
[16:18:49.705]                           ns <- base::getNamespace("future")
[16:18:49.705]                           version <- ns[[".package"]][["version"]]
[16:18:49.705]                           if (is.null(version)) 
[16:18:49.705]                             version <- utils::packageVersion("future")
[16:18:49.705]                         }
[16:18:49.705]                         else {
[16:18:49.705]                           version <- NULL
[16:18:49.705]                         }
[16:18:49.705]                         if (!has_future || version < "1.8.0") {
[16:18:49.705]                           info <- base::c(r_version = base::gsub("R version ", 
[16:18:49.705]                             "", base::R.version$version.string), 
[16:18:49.705]                             platform = base::sprintf("%s (%s-bit)", 
[16:18:49.705]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:18:49.705]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:18:49.705]                               "release", "version")], collapse = " "), 
[16:18:49.705]                             hostname = base::Sys.info()[["nodename"]])
[16:18:49.705]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:18:49.705]                             info)
[16:18:49.705]                           info <- base::paste(info, collapse = "; ")
[16:18:49.705]                           if (!has_future) {
[16:18:49.705]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:18:49.705]                               info)
[16:18:49.705]                           }
[16:18:49.705]                           else {
[16:18:49.705]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:18:49.705]                               info, version)
[16:18:49.705]                           }
[16:18:49.705]                           base::stop(msg)
[16:18:49.705]                         }
[16:18:49.705]                       })
[16:18:49.705]                     }
[16:18:49.705]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:18:49.705]                     base::options(mc.cores = 1L)
[16:18:49.705]                   }
[16:18:49.705]                   ...future.strategy.old <- future::plan("list")
[16:18:49.705]                   options(future.plan = NULL)
[16:18:49.705]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:18:49.705]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:18:49.705]                 }
[16:18:49.705]                 ...future.workdir <- getwd()
[16:18:49.705]             }
[16:18:49.705]             ...future.oldOptions <- base::as.list(base::.Options)
[16:18:49.705]             ...future.oldEnvVars <- base::Sys.getenv()
[16:18:49.705]         }
[16:18:49.705]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:18:49.705]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:18:49.705]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:18:49.705]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:18:49.705]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:18:49.705]             future.stdout.windows.reencode = NULL, width = 80L)
[16:18:49.705]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:18:49.705]             base::names(...future.oldOptions))
[16:18:49.705]     }
[16:18:49.705]     if (FALSE) {
[16:18:49.705]     }
[16:18:49.705]     else {
[16:18:49.705]         if (TRUE) {
[16:18:49.705]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:18:49.705]                 open = "w")
[16:18:49.705]         }
[16:18:49.705]         else {
[16:18:49.705]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:18:49.705]                 windows = "NUL", "/dev/null"), open = "w")
[16:18:49.705]         }
[16:18:49.705]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:18:49.705]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:18:49.705]             base::sink(type = "output", split = FALSE)
[16:18:49.705]             base::close(...future.stdout)
[16:18:49.705]         }, add = TRUE)
[16:18:49.705]     }
[16:18:49.705]     ...future.frame <- base::sys.nframe()
[16:18:49.705]     ...future.conditions <- base::list()
[16:18:49.705]     ...future.rng <- base::globalenv()$.Random.seed
[16:18:49.705]     if (FALSE) {
[16:18:49.705]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:18:49.705]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:18:49.705]     }
[16:18:49.705]     ...future.result <- base::tryCatch({
[16:18:49.705]         base::withCallingHandlers({
[16:18:49.705]             ...future.value <- base::withVisible(base::local({
[16:18:49.705]                 ...future.makeSendCondition <- base::local({
[16:18:49.705]                   sendCondition <- NULL
[16:18:49.705]                   function(frame = 1L) {
[16:18:49.705]                     if (is.function(sendCondition)) 
[16:18:49.705]                       return(sendCondition)
[16:18:49.705]                     ns <- getNamespace("parallel")
[16:18:49.705]                     if (exists("sendData", mode = "function", 
[16:18:49.705]                       envir = ns)) {
[16:18:49.705]                       parallel_sendData <- get("sendData", mode = "function", 
[16:18:49.705]                         envir = ns)
[16:18:49.705]                       envir <- sys.frame(frame)
[16:18:49.705]                       master <- NULL
[16:18:49.705]                       while (!identical(envir, .GlobalEnv) && 
[16:18:49.705]                         !identical(envir, emptyenv())) {
[16:18:49.705]                         if (exists("master", mode = "list", envir = envir, 
[16:18:49.705]                           inherits = FALSE)) {
[16:18:49.705]                           master <- get("master", mode = "list", 
[16:18:49.705]                             envir = envir, inherits = FALSE)
[16:18:49.705]                           if (inherits(master, c("SOCKnode", 
[16:18:49.705]                             "SOCK0node"))) {
[16:18:49.705]                             sendCondition <<- function(cond) {
[16:18:49.705]                               data <- list(type = "VALUE", value = cond, 
[16:18:49.705]                                 success = TRUE)
[16:18:49.705]                               parallel_sendData(master, data)
[16:18:49.705]                             }
[16:18:49.705]                             return(sendCondition)
[16:18:49.705]                           }
[16:18:49.705]                         }
[16:18:49.705]                         frame <- frame + 1L
[16:18:49.705]                         envir <- sys.frame(frame)
[16:18:49.705]                       }
[16:18:49.705]                     }
[16:18:49.705]                     sendCondition <<- function(cond) NULL
[16:18:49.705]                   }
[16:18:49.705]                 })
[16:18:49.705]                 withCallingHandlers({
[16:18:49.705]                   {
[16:18:49.705]                     do.call(function(...) {
[16:18:49.705]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:49.705]                       if (!identical(...future.globals.maxSize.org, 
[16:18:49.705]                         ...future.globals.maxSize)) {
[16:18:49.705]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:49.705]                         on.exit(options(oopts), add = TRUE)
[16:18:49.705]                       }
[16:18:49.705]                       {
[16:18:49.705]                         lapply(seq_along(...future.elements_ii), 
[16:18:49.705]                           FUN = function(jj) {
[16:18:49.705]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:49.705]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:49.705]                               envir = globalenv(), inherits = FALSE)
[16:18:49.705]                             ...future.FUN(...future.X_jj, ...)
[16:18:49.705]                           })
[16:18:49.705]                       }
[16:18:49.705]                     }, args = future.call.arguments)
[16:18:49.705]                   }
[16:18:49.705]                 }, immediateCondition = function(cond) {
[16:18:49.705]                   sendCondition <- ...future.makeSendCondition()
[16:18:49.705]                   sendCondition(cond)
[16:18:49.705]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:49.705]                   {
[16:18:49.705]                     inherits <- base::inherits
[16:18:49.705]                     invokeRestart <- base::invokeRestart
[16:18:49.705]                     is.null <- base::is.null
[16:18:49.705]                     muffled <- FALSE
[16:18:49.705]                     if (inherits(cond, "message")) {
[16:18:49.705]                       muffled <- grepl(pattern, "muffleMessage")
[16:18:49.705]                       if (muffled) 
[16:18:49.705]                         invokeRestart("muffleMessage")
[16:18:49.705]                     }
[16:18:49.705]                     else if (inherits(cond, "warning")) {
[16:18:49.705]                       muffled <- grepl(pattern, "muffleWarning")
[16:18:49.705]                       if (muffled) 
[16:18:49.705]                         invokeRestart("muffleWarning")
[16:18:49.705]                     }
[16:18:49.705]                     else if (inherits(cond, "condition")) {
[16:18:49.705]                       if (!is.null(pattern)) {
[16:18:49.705]                         computeRestarts <- base::computeRestarts
[16:18:49.705]                         grepl <- base::grepl
[16:18:49.705]                         restarts <- computeRestarts(cond)
[16:18:49.705]                         for (restart in restarts) {
[16:18:49.705]                           name <- restart$name
[16:18:49.705]                           if (is.null(name)) 
[16:18:49.705]                             next
[16:18:49.705]                           if (!grepl(pattern, name)) 
[16:18:49.705]                             next
[16:18:49.705]                           invokeRestart(restart)
[16:18:49.705]                           muffled <- TRUE
[16:18:49.705]                           break
[16:18:49.705]                         }
[16:18:49.705]                       }
[16:18:49.705]                     }
[16:18:49.705]                     invisible(muffled)
[16:18:49.705]                   }
[16:18:49.705]                   muffleCondition(cond)
[16:18:49.705]                 })
[16:18:49.705]             }))
[16:18:49.705]             future::FutureResult(value = ...future.value$value, 
[16:18:49.705]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:49.705]                   ...future.rng), globalenv = if (FALSE) 
[16:18:49.705]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:18:49.705]                     ...future.globalenv.names))
[16:18:49.705]                 else NULL, started = ...future.startTime, version = "1.8")
[16:18:49.705]         }, condition = base::local({
[16:18:49.705]             c <- base::c
[16:18:49.705]             inherits <- base::inherits
[16:18:49.705]             invokeRestart <- base::invokeRestart
[16:18:49.705]             length <- base::length
[16:18:49.705]             list <- base::list
[16:18:49.705]             seq.int <- base::seq.int
[16:18:49.705]             signalCondition <- base::signalCondition
[16:18:49.705]             sys.calls <- base::sys.calls
[16:18:49.705]             `[[` <- base::`[[`
[16:18:49.705]             `+` <- base::`+`
[16:18:49.705]             `<<-` <- base::`<<-`
[16:18:49.705]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:18:49.705]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:18:49.705]                   3L)]
[16:18:49.705]             }
[16:18:49.705]             function(cond) {
[16:18:49.705]                 is_error <- inherits(cond, "error")
[16:18:49.705]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:18:49.705]                   NULL)
[16:18:49.705]                 if (is_error) {
[16:18:49.705]                   sessionInformation <- function() {
[16:18:49.705]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:18:49.705]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:18:49.705]                       search = base::search(), system = base::Sys.info())
[16:18:49.705]                   }
[16:18:49.705]                   ...future.conditions[[length(...future.conditions) + 
[16:18:49.705]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:18:49.705]                     cond$call), session = sessionInformation(), 
[16:18:49.705]                     timestamp = base::Sys.time(), signaled = 0L)
[16:18:49.705]                   signalCondition(cond)
[16:18:49.705]                 }
[16:18:49.705]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:18:49.705]                 "immediateCondition"))) {
[16:18:49.705]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:18:49.705]                   ...future.conditions[[length(...future.conditions) + 
[16:18:49.705]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:18:49.705]                   if (TRUE && !signal) {
[16:18:49.705]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:49.705]                     {
[16:18:49.705]                       inherits <- base::inherits
[16:18:49.705]                       invokeRestart <- base::invokeRestart
[16:18:49.705]                       is.null <- base::is.null
[16:18:49.705]                       muffled <- FALSE
[16:18:49.705]                       if (inherits(cond, "message")) {
[16:18:49.705]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:49.705]                         if (muffled) 
[16:18:49.705]                           invokeRestart("muffleMessage")
[16:18:49.705]                       }
[16:18:49.705]                       else if (inherits(cond, "warning")) {
[16:18:49.705]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:49.705]                         if (muffled) 
[16:18:49.705]                           invokeRestart("muffleWarning")
[16:18:49.705]                       }
[16:18:49.705]                       else if (inherits(cond, "condition")) {
[16:18:49.705]                         if (!is.null(pattern)) {
[16:18:49.705]                           computeRestarts <- base::computeRestarts
[16:18:49.705]                           grepl <- base::grepl
[16:18:49.705]                           restarts <- computeRestarts(cond)
[16:18:49.705]                           for (restart in restarts) {
[16:18:49.705]                             name <- restart$name
[16:18:49.705]                             if (is.null(name)) 
[16:18:49.705]                               next
[16:18:49.705]                             if (!grepl(pattern, name)) 
[16:18:49.705]                               next
[16:18:49.705]                             invokeRestart(restart)
[16:18:49.705]                             muffled <- TRUE
[16:18:49.705]                             break
[16:18:49.705]                           }
[16:18:49.705]                         }
[16:18:49.705]                       }
[16:18:49.705]                       invisible(muffled)
[16:18:49.705]                     }
[16:18:49.705]                     muffleCondition(cond, pattern = "^muffle")
[16:18:49.705]                   }
[16:18:49.705]                 }
[16:18:49.705]                 else {
[16:18:49.705]                   if (TRUE) {
[16:18:49.705]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:49.705]                     {
[16:18:49.705]                       inherits <- base::inherits
[16:18:49.705]                       invokeRestart <- base::invokeRestart
[16:18:49.705]                       is.null <- base::is.null
[16:18:49.705]                       muffled <- FALSE
[16:18:49.705]                       if (inherits(cond, "message")) {
[16:18:49.705]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:49.705]                         if (muffled) 
[16:18:49.705]                           invokeRestart("muffleMessage")
[16:18:49.705]                       }
[16:18:49.705]                       else if (inherits(cond, "warning")) {
[16:18:49.705]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:49.705]                         if (muffled) 
[16:18:49.705]                           invokeRestart("muffleWarning")
[16:18:49.705]                       }
[16:18:49.705]                       else if (inherits(cond, "condition")) {
[16:18:49.705]                         if (!is.null(pattern)) {
[16:18:49.705]                           computeRestarts <- base::computeRestarts
[16:18:49.705]                           grepl <- base::grepl
[16:18:49.705]                           restarts <- computeRestarts(cond)
[16:18:49.705]                           for (restart in restarts) {
[16:18:49.705]                             name <- restart$name
[16:18:49.705]                             if (is.null(name)) 
[16:18:49.705]                               next
[16:18:49.705]                             if (!grepl(pattern, name)) 
[16:18:49.705]                               next
[16:18:49.705]                             invokeRestart(restart)
[16:18:49.705]                             muffled <- TRUE
[16:18:49.705]                             break
[16:18:49.705]                           }
[16:18:49.705]                         }
[16:18:49.705]                       }
[16:18:49.705]                       invisible(muffled)
[16:18:49.705]                     }
[16:18:49.705]                     muffleCondition(cond, pattern = "^muffle")
[16:18:49.705]                   }
[16:18:49.705]                 }
[16:18:49.705]             }
[16:18:49.705]         }))
[16:18:49.705]     }, error = function(ex) {
[16:18:49.705]         base::structure(base::list(value = NULL, visible = NULL, 
[16:18:49.705]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:49.705]                 ...future.rng), started = ...future.startTime, 
[16:18:49.705]             finished = Sys.time(), session_uuid = NA_character_, 
[16:18:49.705]             version = "1.8"), class = "FutureResult")
[16:18:49.705]     }, finally = {
[16:18:49.705]         if (!identical(...future.workdir, getwd())) 
[16:18:49.705]             setwd(...future.workdir)
[16:18:49.705]         {
[16:18:49.705]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:18:49.705]                 ...future.oldOptions$nwarnings <- NULL
[16:18:49.705]             }
[16:18:49.705]             base::options(...future.oldOptions)
[16:18:49.705]             if (.Platform$OS.type == "windows") {
[16:18:49.705]                 old_names <- names(...future.oldEnvVars)
[16:18:49.705]                 envs <- base::Sys.getenv()
[16:18:49.705]                 names <- names(envs)
[16:18:49.705]                 common <- intersect(names, old_names)
[16:18:49.705]                 added <- setdiff(names, old_names)
[16:18:49.705]                 removed <- setdiff(old_names, names)
[16:18:49.705]                 changed <- common[...future.oldEnvVars[common] != 
[16:18:49.705]                   envs[common]]
[16:18:49.705]                 NAMES <- toupper(changed)
[16:18:49.705]                 args <- list()
[16:18:49.705]                 for (kk in seq_along(NAMES)) {
[16:18:49.705]                   name <- changed[[kk]]
[16:18:49.705]                   NAME <- NAMES[[kk]]
[16:18:49.705]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:49.705]                     next
[16:18:49.705]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:49.705]                 }
[16:18:49.705]                 NAMES <- toupper(added)
[16:18:49.705]                 for (kk in seq_along(NAMES)) {
[16:18:49.705]                   name <- added[[kk]]
[16:18:49.705]                   NAME <- NAMES[[kk]]
[16:18:49.705]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:49.705]                     next
[16:18:49.705]                   args[[name]] <- ""
[16:18:49.705]                 }
[16:18:49.705]                 NAMES <- toupper(removed)
[16:18:49.705]                 for (kk in seq_along(NAMES)) {
[16:18:49.705]                   name <- removed[[kk]]
[16:18:49.705]                   NAME <- NAMES[[kk]]
[16:18:49.705]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:49.705]                     next
[16:18:49.705]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:49.705]                 }
[16:18:49.705]                 if (length(args) > 0) 
[16:18:49.705]                   base::do.call(base::Sys.setenv, args = args)
[16:18:49.705]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:18:49.705]             }
[16:18:49.705]             else {
[16:18:49.705]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:18:49.705]             }
[16:18:49.705]             {
[16:18:49.705]                 if (base::length(...future.futureOptionsAdded) > 
[16:18:49.705]                   0L) {
[16:18:49.705]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:18:49.705]                   base::names(opts) <- ...future.futureOptionsAdded
[16:18:49.705]                   base::options(opts)
[16:18:49.705]                 }
[16:18:49.705]                 {
[16:18:49.705]                   {
[16:18:49.705]                     base::options(mc.cores = ...future.mc.cores.old)
[16:18:49.705]                     NULL
[16:18:49.705]                   }
[16:18:49.705]                   options(future.plan = NULL)
[16:18:49.705]                   if (is.na(NA_character_)) 
[16:18:49.705]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:18:49.705]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:18:49.705]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:18:49.705]                     .init = FALSE)
[16:18:49.705]                 }
[16:18:49.705]             }
[16:18:49.705]         }
[16:18:49.705]     })
[16:18:49.705]     if (TRUE) {
[16:18:49.705]         base::sink(type = "output", split = FALSE)
[16:18:49.705]         if (TRUE) {
[16:18:49.705]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:18:49.705]         }
[16:18:49.705]         else {
[16:18:49.705]             ...future.result["stdout"] <- base::list(NULL)
[16:18:49.705]         }
[16:18:49.705]         base::close(...future.stdout)
[16:18:49.705]         ...future.stdout <- NULL
[16:18:49.705]     }
[16:18:49.705]     ...future.result$conditions <- ...future.conditions
[16:18:49.705]     ...future.result$finished <- base::Sys.time()
[16:18:49.705]     ...future.result
[16:18:49.705] }
[16:18:49.708] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[16:18:49.708] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[16:18:49.708] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[16:18:49.708] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[16:18:49.709] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[16:18:49.709] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[16:18:49.709] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[16:18:49.709] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[16:18:49.710] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[16:18:49.710] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[16:18:49.710] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[16:18:49.710] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[16:18:49.711] MultisessionFuture started
[16:18:49.711] - Launch lazy future ... done
[16:18:49.711] run() for ‘MultisessionFuture’ ... done
[16:18:49.711] Created future:
[16:18:49.711] MultisessionFuture:
[16:18:49.711] Label: ‘future_replicate-1’
[16:18:49.711] Expression:
[16:18:49.711] {
[16:18:49.711]     do.call(function(...) {
[16:18:49.711]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:49.711]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:49.711]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:49.711]             on.exit(options(oopts), add = TRUE)
[16:18:49.711]         }
[16:18:49.711]         {
[16:18:49.711]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:49.711]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:49.711]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:49.711]                   envir = globalenv(), inherits = FALSE)
[16:18:49.711]                 ...future.FUN(...future.X_jj, ...)
[16:18:49.711]             })
[16:18:49.711]         }
[16:18:49.711]     }, args = future.call.arguments)
[16:18:49.711] }
[16:18:49.711] Lazy evaluation: FALSE
[16:18:49.711] Asynchronous evaluation: TRUE
[16:18:49.711] Local evaluation: TRUE
[16:18:49.711] Environment: R_GlobalEnv
[16:18:49.711] Capture standard output: TRUE
[16:18:49.711] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:18:49.711] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:18:49.711] Packages: <none>
[16:18:49.711] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:18:49.711] Resolved: FALSE
[16:18:49.711] Value: <not collected>
[16:18:49.711] Conditions captured: <none>
[16:18:49.711] Early signaling: FALSE
[16:18:49.711] Owner process: 20271db5-d788-b537-4432-0a26f2d2d030
[16:18:49.711] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:49.723] Chunk #1 of 2 ... DONE
[16:18:49.723] Chunk #2 of 2 ...
[16:18:49.723]  - Finding globals in 'X' for chunk #2 ...
[16:18:49.723] getGlobalsAndPackages() ...
[16:18:49.723] Searching for globals...
[16:18:49.724] 
[16:18:49.724] Searching for globals ... DONE
[16:18:49.724] - globals: [0] <none>
[16:18:49.724] getGlobalsAndPackages() ... DONE
[16:18:49.724]    + additional globals found: [n=0] 
[16:18:49.724]    + additional namespaces needed: [n=0] 
[16:18:49.724]  - Finding globals in 'X' for chunk #2 ... DONE
[16:18:49.724]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:18:49.724]  - seeds: [3] <seeds>
[16:18:49.725]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:49.725] getGlobalsAndPackages() ...
[16:18:49.725] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:49.725] Resolving globals: FALSE
[16:18:49.725] Tweak future expression to call with '...' arguments ...
[16:18:49.725] {
[16:18:49.725]     do.call(function(...) {
[16:18:49.725]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:49.725]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:49.725]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:49.725]             on.exit(options(oopts), add = TRUE)
[16:18:49.725]         }
[16:18:49.725]         {
[16:18:49.725]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:49.725]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:49.725]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:49.725]                   envir = globalenv(), inherits = FALSE)
[16:18:49.725]                 ...future.FUN(...future.X_jj, ...)
[16:18:49.725]             })
[16:18:49.725]         }
[16:18:49.725]     }, args = future.call.arguments)
[16:18:49.725] }
[16:18:49.725] Tweak future expression to call with '...' arguments ... DONE
[16:18:49.726] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:49.726] 
[16:18:49.726] getGlobalsAndPackages() ... DONE
[16:18:49.726] run() for ‘Future’ ...
[16:18:49.726] - state: ‘created’
[16:18:49.727] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:18:49.741] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:49.741] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:18:49.741]   - Field: ‘node’
[16:18:49.741]   - Field: ‘label’
[16:18:49.741]   - Field: ‘local’
[16:18:49.741]   - Field: ‘owner’
[16:18:49.741]   - Field: ‘envir’
[16:18:49.741]   - Field: ‘workers’
[16:18:49.742]   - Field: ‘packages’
[16:18:49.742]   - Field: ‘gc’
[16:18:49.742]   - Field: ‘conditions’
[16:18:49.742]   - Field: ‘persistent’
[16:18:49.742]   - Field: ‘expr’
[16:18:49.742]   - Field: ‘uuid’
[16:18:49.742]   - Field: ‘seed’
[16:18:49.742]   - Field: ‘version’
[16:18:49.742]   - Field: ‘result’
[16:18:49.742]   - Field: ‘asynchronous’
[16:18:49.742]   - Field: ‘calls’
[16:18:49.743]   - Field: ‘globals’
[16:18:49.743]   - Field: ‘stdout’
[16:18:49.743]   - Field: ‘earlySignal’
[16:18:49.743]   - Field: ‘lazy’
[16:18:49.743]   - Field: ‘state’
[16:18:49.743] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:18:49.743] - Launch lazy future ...
[16:18:49.743] Packages needed by the future expression (n = 0): <none>
[16:18:49.744] Packages needed by future strategies (n = 0): <none>
[16:18:49.744] {
[16:18:49.744]     {
[16:18:49.744]         {
[16:18:49.744]             ...future.startTime <- base::Sys.time()
[16:18:49.744]             {
[16:18:49.744]                 {
[16:18:49.744]                   {
[16:18:49.744]                     {
[16:18:49.744]                       base::local({
[16:18:49.744]                         has_future <- base::requireNamespace("future", 
[16:18:49.744]                           quietly = TRUE)
[16:18:49.744]                         if (has_future) {
[16:18:49.744]                           ns <- base::getNamespace("future")
[16:18:49.744]                           version <- ns[[".package"]][["version"]]
[16:18:49.744]                           if (is.null(version)) 
[16:18:49.744]                             version <- utils::packageVersion("future")
[16:18:49.744]                         }
[16:18:49.744]                         else {
[16:18:49.744]                           version <- NULL
[16:18:49.744]                         }
[16:18:49.744]                         if (!has_future || version < "1.8.0") {
[16:18:49.744]                           info <- base::c(r_version = base::gsub("R version ", 
[16:18:49.744]                             "", base::R.version$version.string), 
[16:18:49.744]                             platform = base::sprintf("%s (%s-bit)", 
[16:18:49.744]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:18:49.744]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:18:49.744]                               "release", "version")], collapse = " "), 
[16:18:49.744]                             hostname = base::Sys.info()[["nodename"]])
[16:18:49.744]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:18:49.744]                             info)
[16:18:49.744]                           info <- base::paste(info, collapse = "; ")
[16:18:49.744]                           if (!has_future) {
[16:18:49.744]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:18:49.744]                               info)
[16:18:49.744]                           }
[16:18:49.744]                           else {
[16:18:49.744]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:18:49.744]                               info, version)
[16:18:49.744]                           }
[16:18:49.744]                           base::stop(msg)
[16:18:49.744]                         }
[16:18:49.744]                       })
[16:18:49.744]                     }
[16:18:49.744]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:18:49.744]                     base::options(mc.cores = 1L)
[16:18:49.744]                   }
[16:18:49.744]                   ...future.strategy.old <- future::plan("list")
[16:18:49.744]                   options(future.plan = NULL)
[16:18:49.744]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:18:49.744]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:18:49.744]                 }
[16:18:49.744]                 ...future.workdir <- getwd()
[16:18:49.744]             }
[16:18:49.744]             ...future.oldOptions <- base::as.list(base::.Options)
[16:18:49.744]             ...future.oldEnvVars <- base::Sys.getenv()
[16:18:49.744]         }
[16:18:49.744]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:18:49.744]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:18:49.744]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:18:49.744]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:18:49.744]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:18:49.744]             future.stdout.windows.reencode = NULL, width = 80L)
[16:18:49.744]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:18:49.744]             base::names(...future.oldOptions))
[16:18:49.744]     }
[16:18:49.744]     if (FALSE) {
[16:18:49.744]     }
[16:18:49.744]     else {
[16:18:49.744]         if (TRUE) {
[16:18:49.744]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:18:49.744]                 open = "w")
[16:18:49.744]         }
[16:18:49.744]         else {
[16:18:49.744]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:18:49.744]                 windows = "NUL", "/dev/null"), open = "w")
[16:18:49.744]         }
[16:18:49.744]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:18:49.744]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:18:49.744]             base::sink(type = "output", split = FALSE)
[16:18:49.744]             base::close(...future.stdout)
[16:18:49.744]         }, add = TRUE)
[16:18:49.744]     }
[16:18:49.744]     ...future.frame <- base::sys.nframe()
[16:18:49.744]     ...future.conditions <- base::list()
[16:18:49.744]     ...future.rng <- base::globalenv()$.Random.seed
[16:18:49.744]     if (FALSE) {
[16:18:49.744]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:18:49.744]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:18:49.744]     }
[16:18:49.744]     ...future.result <- base::tryCatch({
[16:18:49.744]         base::withCallingHandlers({
[16:18:49.744]             ...future.value <- base::withVisible(base::local({
[16:18:49.744]                 ...future.makeSendCondition <- base::local({
[16:18:49.744]                   sendCondition <- NULL
[16:18:49.744]                   function(frame = 1L) {
[16:18:49.744]                     if (is.function(sendCondition)) 
[16:18:49.744]                       return(sendCondition)
[16:18:49.744]                     ns <- getNamespace("parallel")
[16:18:49.744]                     if (exists("sendData", mode = "function", 
[16:18:49.744]                       envir = ns)) {
[16:18:49.744]                       parallel_sendData <- get("sendData", mode = "function", 
[16:18:49.744]                         envir = ns)
[16:18:49.744]                       envir <- sys.frame(frame)
[16:18:49.744]                       master <- NULL
[16:18:49.744]                       while (!identical(envir, .GlobalEnv) && 
[16:18:49.744]                         !identical(envir, emptyenv())) {
[16:18:49.744]                         if (exists("master", mode = "list", envir = envir, 
[16:18:49.744]                           inherits = FALSE)) {
[16:18:49.744]                           master <- get("master", mode = "list", 
[16:18:49.744]                             envir = envir, inherits = FALSE)
[16:18:49.744]                           if (inherits(master, c("SOCKnode", 
[16:18:49.744]                             "SOCK0node"))) {
[16:18:49.744]                             sendCondition <<- function(cond) {
[16:18:49.744]                               data <- list(type = "VALUE", value = cond, 
[16:18:49.744]                                 success = TRUE)
[16:18:49.744]                               parallel_sendData(master, data)
[16:18:49.744]                             }
[16:18:49.744]                             return(sendCondition)
[16:18:49.744]                           }
[16:18:49.744]                         }
[16:18:49.744]                         frame <- frame + 1L
[16:18:49.744]                         envir <- sys.frame(frame)
[16:18:49.744]                       }
[16:18:49.744]                     }
[16:18:49.744]                     sendCondition <<- function(cond) NULL
[16:18:49.744]                   }
[16:18:49.744]                 })
[16:18:49.744]                 withCallingHandlers({
[16:18:49.744]                   {
[16:18:49.744]                     do.call(function(...) {
[16:18:49.744]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:49.744]                       if (!identical(...future.globals.maxSize.org, 
[16:18:49.744]                         ...future.globals.maxSize)) {
[16:18:49.744]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:49.744]                         on.exit(options(oopts), add = TRUE)
[16:18:49.744]                       }
[16:18:49.744]                       {
[16:18:49.744]                         lapply(seq_along(...future.elements_ii), 
[16:18:49.744]                           FUN = function(jj) {
[16:18:49.744]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:49.744]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:49.744]                               envir = globalenv(), inherits = FALSE)
[16:18:49.744]                             ...future.FUN(...future.X_jj, ...)
[16:18:49.744]                           })
[16:18:49.744]                       }
[16:18:49.744]                     }, args = future.call.arguments)
[16:18:49.744]                   }
[16:18:49.744]                 }, immediateCondition = function(cond) {
[16:18:49.744]                   sendCondition <- ...future.makeSendCondition()
[16:18:49.744]                   sendCondition(cond)
[16:18:49.744]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:49.744]                   {
[16:18:49.744]                     inherits <- base::inherits
[16:18:49.744]                     invokeRestart <- base::invokeRestart
[16:18:49.744]                     is.null <- base::is.null
[16:18:49.744]                     muffled <- FALSE
[16:18:49.744]                     if (inherits(cond, "message")) {
[16:18:49.744]                       muffled <- grepl(pattern, "muffleMessage")
[16:18:49.744]                       if (muffled) 
[16:18:49.744]                         invokeRestart("muffleMessage")
[16:18:49.744]                     }
[16:18:49.744]                     else if (inherits(cond, "warning")) {
[16:18:49.744]                       muffled <- grepl(pattern, "muffleWarning")
[16:18:49.744]                       if (muffled) 
[16:18:49.744]                         invokeRestart("muffleWarning")
[16:18:49.744]                     }
[16:18:49.744]                     else if (inherits(cond, "condition")) {
[16:18:49.744]                       if (!is.null(pattern)) {
[16:18:49.744]                         computeRestarts <- base::computeRestarts
[16:18:49.744]                         grepl <- base::grepl
[16:18:49.744]                         restarts <- computeRestarts(cond)
[16:18:49.744]                         for (restart in restarts) {
[16:18:49.744]                           name <- restart$name
[16:18:49.744]                           if (is.null(name)) 
[16:18:49.744]                             next
[16:18:49.744]                           if (!grepl(pattern, name)) 
[16:18:49.744]                             next
[16:18:49.744]                           invokeRestart(restart)
[16:18:49.744]                           muffled <- TRUE
[16:18:49.744]                           break
[16:18:49.744]                         }
[16:18:49.744]                       }
[16:18:49.744]                     }
[16:18:49.744]                     invisible(muffled)
[16:18:49.744]                   }
[16:18:49.744]                   muffleCondition(cond)
[16:18:49.744]                 })
[16:18:49.744]             }))
[16:18:49.744]             future::FutureResult(value = ...future.value$value, 
[16:18:49.744]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:49.744]                   ...future.rng), globalenv = if (FALSE) 
[16:18:49.744]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:18:49.744]                     ...future.globalenv.names))
[16:18:49.744]                 else NULL, started = ...future.startTime, version = "1.8")
[16:18:49.744]         }, condition = base::local({
[16:18:49.744]             c <- base::c
[16:18:49.744]             inherits <- base::inherits
[16:18:49.744]             invokeRestart <- base::invokeRestart
[16:18:49.744]             length <- base::length
[16:18:49.744]             list <- base::list
[16:18:49.744]             seq.int <- base::seq.int
[16:18:49.744]             signalCondition <- base::signalCondition
[16:18:49.744]             sys.calls <- base::sys.calls
[16:18:49.744]             `[[` <- base::`[[`
[16:18:49.744]             `+` <- base::`+`
[16:18:49.744]             `<<-` <- base::`<<-`
[16:18:49.744]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:18:49.744]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:18:49.744]                   3L)]
[16:18:49.744]             }
[16:18:49.744]             function(cond) {
[16:18:49.744]                 is_error <- inherits(cond, "error")
[16:18:49.744]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:18:49.744]                   NULL)
[16:18:49.744]                 if (is_error) {
[16:18:49.744]                   sessionInformation <- function() {
[16:18:49.744]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:18:49.744]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:18:49.744]                       search = base::search(), system = base::Sys.info())
[16:18:49.744]                   }
[16:18:49.744]                   ...future.conditions[[length(...future.conditions) + 
[16:18:49.744]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:18:49.744]                     cond$call), session = sessionInformation(), 
[16:18:49.744]                     timestamp = base::Sys.time(), signaled = 0L)
[16:18:49.744]                   signalCondition(cond)
[16:18:49.744]                 }
[16:18:49.744]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:18:49.744]                 "immediateCondition"))) {
[16:18:49.744]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:18:49.744]                   ...future.conditions[[length(...future.conditions) + 
[16:18:49.744]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:18:49.744]                   if (TRUE && !signal) {
[16:18:49.744]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:49.744]                     {
[16:18:49.744]                       inherits <- base::inherits
[16:18:49.744]                       invokeRestart <- base::invokeRestart
[16:18:49.744]                       is.null <- base::is.null
[16:18:49.744]                       muffled <- FALSE
[16:18:49.744]                       if (inherits(cond, "message")) {
[16:18:49.744]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:49.744]                         if (muffled) 
[16:18:49.744]                           invokeRestart("muffleMessage")
[16:18:49.744]                       }
[16:18:49.744]                       else if (inherits(cond, "warning")) {
[16:18:49.744]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:49.744]                         if (muffled) 
[16:18:49.744]                           invokeRestart("muffleWarning")
[16:18:49.744]                       }
[16:18:49.744]                       else if (inherits(cond, "condition")) {
[16:18:49.744]                         if (!is.null(pattern)) {
[16:18:49.744]                           computeRestarts <- base::computeRestarts
[16:18:49.744]                           grepl <- base::grepl
[16:18:49.744]                           restarts <- computeRestarts(cond)
[16:18:49.744]                           for (restart in restarts) {
[16:18:49.744]                             name <- restart$name
[16:18:49.744]                             if (is.null(name)) 
[16:18:49.744]                               next
[16:18:49.744]                             if (!grepl(pattern, name)) 
[16:18:49.744]                               next
[16:18:49.744]                             invokeRestart(restart)
[16:18:49.744]                             muffled <- TRUE
[16:18:49.744]                             break
[16:18:49.744]                           }
[16:18:49.744]                         }
[16:18:49.744]                       }
[16:18:49.744]                       invisible(muffled)
[16:18:49.744]                     }
[16:18:49.744]                     muffleCondition(cond, pattern = "^muffle")
[16:18:49.744]                   }
[16:18:49.744]                 }
[16:18:49.744]                 else {
[16:18:49.744]                   if (TRUE) {
[16:18:49.744]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:49.744]                     {
[16:18:49.744]                       inherits <- base::inherits
[16:18:49.744]                       invokeRestart <- base::invokeRestart
[16:18:49.744]                       is.null <- base::is.null
[16:18:49.744]                       muffled <- FALSE
[16:18:49.744]                       if (inherits(cond, "message")) {
[16:18:49.744]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:49.744]                         if (muffled) 
[16:18:49.744]                           invokeRestart("muffleMessage")
[16:18:49.744]                       }
[16:18:49.744]                       else if (inherits(cond, "warning")) {
[16:18:49.744]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:49.744]                         if (muffled) 
[16:18:49.744]                           invokeRestart("muffleWarning")
[16:18:49.744]                       }
[16:18:49.744]                       else if (inherits(cond, "condition")) {
[16:18:49.744]                         if (!is.null(pattern)) {
[16:18:49.744]                           computeRestarts <- base::computeRestarts
[16:18:49.744]                           grepl <- base::grepl
[16:18:49.744]                           restarts <- computeRestarts(cond)
[16:18:49.744]                           for (restart in restarts) {
[16:18:49.744]                             name <- restart$name
[16:18:49.744]                             if (is.null(name)) 
[16:18:49.744]                               next
[16:18:49.744]                             if (!grepl(pattern, name)) 
[16:18:49.744]                               next
[16:18:49.744]                             invokeRestart(restart)
[16:18:49.744]                             muffled <- TRUE
[16:18:49.744]                             break
[16:18:49.744]                           }
[16:18:49.744]                         }
[16:18:49.744]                       }
[16:18:49.744]                       invisible(muffled)
[16:18:49.744]                     }
[16:18:49.744]                     muffleCondition(cond, pattern = "^muffle")
[16:18:49.744]                   }
[16:18:49.744]                 }
[16:18:49.744]             }
[16:18:49.744]         }))
[16:18:49.744]     }, error = function(ex) {
[16:18:49.744]         base::structure(base::list(value = NULL, visible = NULL, 
[16:18:49.744]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:49.744]                 ...future.rng), started = ...future.startTime, 
[16:18:49.744]             finished = Sys.time(), session_uuid = NA_character_, 
[16:18:49.744]             version = "1.8"), class = "FutureResult")
[16:18:49.744]     }, finally = {
[16:18:49.744]         if (!identical(...future.workdir, getwd())) 
[16:18:49.744]             setwd(...future.workdir)
[16:18:49.744]         {
[16:18:49.744]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:18:49.744]                 ...future.oldOptions$nwarnings <- NULL
[16:18:49.744]             }
[16:18:49.744]             base::options(...future.oldOptions)
[16:18:49.744]             if (.Platform$OS.type == "windows") {
[16:18:49.744]                 old_names <- names(...future.oldEnvVars)
[16:18:49.744]                 envs <- base::Sys.getenv()
[16:18:49.744]                 names <- names(envs)
[16:18:49.744]                 common <- intersect(names, old_names)
[16:18:49.744]                 added <- setdiff(names, old_names)
[16:18:49.744]                 removed <- setdiff(old_names, names)
[16:18:49.744]                 changed <- common[...future.oldEnvVars[common] != 
[16:18:49.744]                   envs[common]]
[16:18:49.744]                 NAMES <- toupper(changed)
[16:18:49.744]                 args <- list()
[16:18:49.744]                 for (kk in seq_along(NAMES)) {
[16:18:49.744]                   name <- changed[[kk]]
[16:18:49.744]                   NAME <- NAMES[[kk]]
[16:18:49.744]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:49.744]                     next
[16:18:49.744]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:49.744]                 }
[16:18:49.744]                 NAMES <- toupper(added)
[16:18:49.744]                 for (kk in seq_along(NAMES)) {
[16:18:49.744]                   name <- added[[kk]]
[16:18:49.744]                   NAME <- NAMES[[kk]]
[16:18:49.744]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:49.744]                     next
[16:18:49.744]                   args[[name]] <- ""
[16:18:49.744]                 }
[16:18:49.744]                 NAMES <- toupper(removed)
[16:18:49.744]                 for (kk in seq_along(NAMES)) {
[16:18:49.744]                   name <- removed[[kk]]
[16:18:49.744]                   NAME <- NAMES[[kk]]
[16:18:49.744]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:49.744]                     next
[16:18:49.744]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:49.744]                 }
[16:18:49.744]                 if (length(args) > 0) 
[16:18:49.744]                   base::do.call(base::Sys.setenv, args = args)
[16:18:49.744]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:18:49.744]             }
[16:18:49.744]             else {
[16:18:49.744]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:18:49.744]             }
[16:18:49.744]             {
[16:18:49.744]                 if (base::length(...future.futureOptionsAdded) > 
[16:18:49.744]                   0L) {
[16:18:49.744]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:18:49.744]                   base::names(opts) <- ...future.futureOptionsAdded
[16:18:49.744]                   base::options(opts)
[16:18:49.744]                 }
[16:18:49.744]                 {
[16:18:49.744]                   {
[16:18:49.744]                     base::options(mc.cores = ...future.mc.cores.old)
[16:18:49.744]                     NULL
[16:18:49.744]                   }
[16:18:49.744]                   options(future.plan = NULL)
[16:18:49.744]                   if (is.na(NA_character_)) 
[16:18:49.744]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:18:49.744]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:18:49.744]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:18:49.744]                     .init = FALSE)
[16:18:49.744]                 }
[16:18:49.744]             }
[16:18:49.744]         }
[16:18:49.744]     })
[16:18:49.744]     if (TRUE) {
[16:18:49.744]         base::sink(type = "output", split = FALSE)
[16:18:49.744]         if (TRUE) {
[16:18:49.744]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:18:49.744]         }
[16:18:49.744]         else {
[16:18:49.744]             ...future.result["stdout"] <- base::list(NULL)
[16:18:49.744]         }
[16:18:49.744]         base::close(...future.stdout)
[16:18:49.744]         ...future.stdout <- NULL
[16:18:49.744]     }
[16:18:49.744]     ...future.result$conditions <- ...future.conditions
[16:18:49.744]     ...future.result$finished <- base::Sys.time()
[16:18:49.744]     ...future.result
[16:18:49.744] }
[16:18:49.747] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[16:18:49.747] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[16:18:49.747] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[16:18:49.748] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[16:18:49.748] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[16:18:49.748] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[16:18:49.748] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[16:18:49.749] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[16:18:49.749] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[16:18:49.749] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[16:18:49.749] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[16:18:49.749] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[16:18:49.750] MultisessionFuture started
[16:18:49.750] - Launch lazy future ... done
[16:18:49.750] run() for ‘MultisessionFuture’ ... done
[16:18:49.750] Created future:
[16:18:49.750] MultisessionFuture:
[16:18:49.750] Label: ‘future_replicate-2’
[16:18:49.750] Expression:
[16:18:49.750] {
[16:18:49.750]     do.call(function(...) {
[16:18:49.750]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:49.750]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:49.750]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:49.750]             on.exit(options(oopts), add = TRUE)
[16:18:49.750]         }
[16:18:49.750]         {
[16:18:49.750]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:49.750]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:49.750]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:49.750]                   envir = globalenv(), inherits = FALSE)
[16:18:49.750]                 ...future.FUN(...future.X_jj, ...)
[16:18:49.750]             })
[16:18:49.750]         }
[16:18:49.750]     }, args = future.call.arguments)
[16:18:49.750] }
[16:18:49.750] Lazy evaluation: FALSE
[16:18:49.750] Asynchronous evaluation: TRUE
[16:18:49.750] Local evaluation: TRUE
[16:18:49.750] Environment: R_GlobalEnv
[16:18:49.750] Capture standard output: TRUE
[16:18:49.750] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:18:49.750] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:18:49.750] Packages: <none>
[16:18:49.750] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:18:49.750] Resolved: FALSE
[16:18:49.750] Value: <not collected>
[16:18:49.750] Conditions captured: <none>
[16:18:49.750] Early signaling: FALSE
[16:18:49.750] Owner process: 20271db5-d788-b537-4432-0a26f2d2d030
[16:18:49.750] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:49.762] Chunk #2 of 2 ... DONE
[16:18:49.762] Launching 2 futures (chunks) ... DONE
[16:18:49.762] Resolving 2 futures (chunks) ...
[16:18:49.762] resolve() on list ...
[16:18:49.762]  recursive: 0
[16:18:49.762]  length: 2
[16:18:49.763] 
[16:18:49.763] receiveMessageFromWorker() for ClusterFuture ...
[16:18:49.763] - Validating connection of MultisessionFuture
[16:18:49.763] - received message: FutureResult
[16:18:49.763] - Received FutureResult
[16:18:49.764] - Erased future from FutureRegistry
[16:18:49.764] result() for ClusterFuture ...
[16:18:49.764] - result already collected: FutureResult
[16:18:49.764] result() for ClusterFuture ... done
[16:18:49.764] receiveMessageFromWorker() for ClusterFuture ... done
[16:18:49.764] Future #1
[16:18:49.764] result() for ClusterFuture ...
[16:18:49.764] - result already collected: FutureResult
[16:18:49.764] result() for ClusterFuture ... done
[16:18:49.764] result() for ClusterFuture ...
[16:18:49.764] - result already collected: FutureResult
[16:18:49.765] result() for ClusterFuture ... done
[16:18:49.765] signalConditionsASAP(MultisessionFuture, pos=1) ...
[16:18:49.765] - nx: 2
[16:18:49.765] - relay: TRUE
[16:18:49.765] - stdout: TRUE
[16:18:49.765] - signal: TRUE
[16:18:49.765] - resignal: FALSE
[16:18:49.765] - force: TRUE
[16:18:49.765] - relayed: [n=2] FALSE, FALSE
[16:18:49.765] - queued futures: [n=2] FALSE, FALSE
[16:18:49.765]  - until=1
[16:18:49.766]  - relaying element #1
[16:18:49.766] result() for ClusterFuture ...
[16:18:49.766] - result already collected: FutureResult
[16:18:49.766] result() for ClusterFuture ... done
[16:18:49.766] result() for ClusterFuture ...
[16:18:49.766] - result already collected: FutureResult
[16:18:49.766] result() for ClusterFuture ... done
[16:18:49.766] result() for ClusterFuture ...
[16:18:49.766] - result already collected: FutureResult
[16:18:49.766] result() for ClusterFuture ... done
[16:18:49.766] result() for ClusterFuture ...
[16:18:49.767] - result already collected: FutureResult
[16:18:49.767] result() for ClusterFuture ... done
[16:18:49.767] - relayed: [n=2] TRUE, FALSE
[16:18:49.767] - queued futures: [n=2] TRUE, FALSE
[16:18:49.767] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[16:18:49.767]  length: 1 (resolved future 1)
[16:18:49.794] receiveMessageFromWorker() for ClusterFuture ...
[16:18:49.794] - Validating connection of MultisessionFuture
[16:18:49.794] - received message: FutureResult
[16:18:49.794] - Received FutureResult
[16:18:49.795] - Erased future from FutureRegistry
[16:18:49.795] result() for ClusterFuture ...
[16:18:49.795] - result already collected: FutureResult
[16:18:49.795] result() for ClusterFuture ... done
[16:18:49.795] receiveMessageFromWorker() for ClusterFuture ... done
[16:18:49.795] Future #2
[16:18:49.795] result() for ClusterFuture ...
[16:18:49.795] - result already collected: FutureResult
[16:18:49.795] result() for ClusterFuture ... done
[16:18:49.795] result() for ClusterFuture ...
[16:18:49.796] - result already collected: FutureResult
[16:18:49.796] result() for ClusterFuture ... done
[16:18:49.796] signalConditionsASAP(MultisessionFuture, pos=2) ...
[16:18:49.796] - nx: 2
[16:18:49.796] - relay: TRUE
[16:18:49.796] - stdout: TRUE
[16:18:49.796] - signal: TRUE
[16:18:49.796] - resignal: FALSE
[16:18:49.796] - force: TRUE
[16:18:49.796] - relayed: [n=2] TRUE, FALSE
[16:18:49.796] - queued futures: [n=2] TRUE, FALSE
[16:18:49.797]  - until=2
[16:18:49.797]  - relaying element #2
[16:18:49.797] result() for ClusterFuture ...
[16:18:49.797] - result already collected: FutureResult
[16:18:49.797] result() for ClusterFuture ... done
[16:18:49.797] result() for ClusterFuture ...
[16:18:49.797] - result already collected: FutureResult
[16:18:49.797] result() for ClusterFuture ... done
[16:18:49.797] result() for ClusterFuture ...
[16:18:49.797] - result already collected: FutureResult
[16:18:49.797] result() for ClusterFuture ... done
[16:18:49.797] result() for ClusterFuture ...
[16:18:49.798] - result already collected: FutureResult
[16:18:49.798] result() for ClusterFuture ... done
[16:18:49.798] - relayed: [n=2] TRUE, TRUE
[16:18:49.798] - queued futures: [n=2] TRUE, TRUE
[16:18:49.798] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[16:18:49.798]  length: 0 (resolved future 2)
[16:18:49.798] Relaying remaining futures
[16:18:49.798] signalConditionsASAP(NULL, pos=0) ...
[16:18:49.798] - nx: 2
[16:18:49.798] - relay: TRUE
[16:18:49.798] - stdout: TRUE
[16:18:49.799] - signal: TRUE
[16:18:49.799] - resignal: FALSE
[16:18:49.799] - force: TRUE
[16:18:49.799] - relayed: [n=2] TRUE, TRUE
[16:18:49.799] - queued futures: [n=2] TRUE, TRUE
 - flush all
[16:18:49.799] - relayed: [n=2] TRUE, TRUE
[16:18:49.799] - queued futures: [n=2] TRUE, TRUE
[16:18:49.799] signalConditionsASAP(NULL, pos=0) ... done
[16:18:49.799] resolve() on list ... DONE
[16:18:49.799] result() for ClusterFuture ...
[16:18:49.799] - result already collected: FutureResult
[16:18:49.799] result() for ClusterFuture ... done
[16:18:49.800] result() for ClusterFuture ...
[16:18:49.800] - result already collected: FutureResult
[16:18:49.800] result() for ClusterFuture ... done
[16:18:49.800] result() for ClusterFuture ...
[16:18:49.800] - result already collected: FutureResult
[16:18:49.800] result() for ClusterFuture ... done
[16:18:49.800] result() for ClusterFuture ...
[16:18:49.800] - result already collected: FutureResult
[16:18:49.800] result() for ClusterFuture ... done
[16:18:49.800]  - Number of value chunks collected: 2
[16:18:49.800] Resolving 2 futures (chunks) ... DONE
[16:18:49.801] Reducing values from 2 chunks ...
[16:18:49.801]  - Number of values collected after concatenation: 5
[16:18:49.801]  - Number of values expected: 5
[16:18:49.801] Reducing values from 2 chunks ... DONE
[16:18:49.801] future_lapply() ... DONE
[16:18:49.801] future_lapply() ...
[16:18:49.802] Generating random seeds ...
[16:18:49.802] Generating random seed streams for 5 elements ...
[16:18:49.802] Generating random seed streams for 5 elements ... DONE
[16:18:49.802] Generating random seeds ... DONE
[16:18:49.802] Will set RNG state on exit: 10403, 2, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:18:49.806] Number of chunks: 2
[16:18:49.806] getGlobalsAndPackagesXApply() ...
[16:18:49.806]  - future.globals: TRUE
[16:18:49.807] getGlobalsAndPackages() ...
[16:18:49.807] Searching for globals...
[16:18:49.808] - globals found: [2] ‘FUN’, ‘sample’
[16:18:49.808] Searching for globals ... DONE
[16:18:49.808] Resolving globals: FALSE
[16:18:49.808] The total size of the 1 globals is 616 bytes (616 bytes)
[16:18:49.809] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:18:49.809] - globals: [1] ‘FUN’
[16:18:49.809] 
[16:18:49.809] getGlobalsAndPackages() ... DONE
[16:18:49.809]  - globals found/used: [n=1] ‘FUN’
[16:18:49.809]  - needed namespaces: [n=0] 
[16:18:49.809] Finding globals ... DONE
[16:18:49.809]  - use_args: TRUE
[16:18:49.809]  - Getting '...' globals ...
[16:18:49.810] resolve() on list ...
[16:18:49.810]  recursive: 0
[16:18:49.810]  length: 1
[16:18:49.810]  elements: ‘...’
[16:18:49.810]  length: 0 (resolved future 1)
[16:18:49.810] resolve() on list ... DONE
[16:18:49.810]    - '...' content: [n=0] 
[16:18:49.810] List of 1
[16:18:49.810]  $ ...: list()
[16:18:49.810]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:49.810]  - attr(*, "where")=List of 1
[16:18:49.810]   ..$ ...:<environment: 0x55e7a2762c40> 
[16:18:49.810]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:49.810]  - attr(*, "resolved")= logi TRUE
[16:18:49.810]  - attr(*, "total_size")= num NA
[16:18:49.815]  - Getting '...' globals ... DONE
[16:18:49.815] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:18:49.815] List of 2
[16:18:49.815]  $ ...future.FUN:function (...)  
[16:18:49.815]  $ ...          : list()
[16:18:49.815]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:49.815]  - attr(*, "where")=List of 2
[16:18:49.815]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:18:49.815]   ..$ ...          :<environment: 0x55e7a2762c40> 
[16:18:49.815]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:49.815]  - attr(*, "resolved")= logi FALSE
[16:18:49.815]  - attr(*, "total_size")= num 616
[16:18:49.818] Packages to be attached in all futures: [n=0] 
[16:18:49.818] getGlobalsAndPackagesXApply() ... DONE
[16:18:49.818] Number of futures (= number of chunks): 2
[16:18:49.818] Launching 2 futures (chunks) ...
[16:18:49.818] Chunk #1 of 2 ...
[16:18:49.818]  - Finding globals in 'X' for chunk #1 ...
[16:18:49.818] getGlobalsAndPackages() ...
[16:18:49.819] Searching for globals...
[16:18:49.819] 
[16:18:49.819] Searching for globals ... DONE
[16:18:49.819] - globals: [0] <none>
[16:18:49.819] getGlobalsAndPackages() ... DONE
[16:18:49.819]    + additional globals found: [n=0] 
[16:18:49.819]    + additional namespaces needed: [n=0] 
[16:18:49.819]  - Finding globals in 'X' for chunk #1 ... DONE
[16:18:49.819]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:18:49.819]  - seeds: [2] <seeds>
[16:18:49.820]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:49.820] getGlobalsAndPackages() ...
[16:18:49.820] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:49.820] Resolving globals: FALSE
[16:18:49.820] Tweak future expression to call with '...' arguments ...
[16:18:49.820] {
[16:18:49.820]     do.call(function(...) {
[16:18:49.820]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:49.820]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:49.820]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:49.820]             on.exit(options(oopts), add = TRUE)
[16:18:49.820]         }
[16:18:49.820]         {
[16:18:49.820]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:49.820]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:49.820]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:49.820]                   envir = globalenv(), inherits = FALSE)
[16:18:49.820]                 ...future.FUN(...future.X_jj, ...)
[16:18:49.820]             })
[16:18:49.820]         }
[16:18:49.820]     }, args = future.call.arguments)
[16:18:49.820] }
[16:18:49.820] Tweak future expression to call with '...' arguments ... DONE
[16:18:49.821] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:49.821] 
[16:18:49.821] getGlobalsAndPackages() ... DONE
[16:18:49.821] run() for ‘Future’ ...
[16:18:49.821] - state: ‘created’
[16:18:49.821] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:18:49.836] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:49.836] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:18:49.836]   - Field: ‘node’
[16:18:49.836]   - Field: ‘label’
[16:18:49.836]   - Field: ‘local’
[16:18:49.836]   - Field: ‘owner’
[16:18:49.836]   - Field: ‘envir’
[16:18:49.836]   - Field: ‘workers’
[16:18:49.836]   - Field: ‘packages’
[16:18:49.837]   - Field: ‘gc’
[16:18:49.837]   - Field: ‘conditions’
[16:18:49.837]   - Field: ‘persistent’
[16:18:49.837]   - Field: ‘expr’
[16:18:49.837]   - Field: ‘uuid’
[16:18:49.837]   - Field: ‘seed’
[16:18:49.837]   - Field: ‘version’
[16:18:49.837]   - Field: ‘result’
[16:18:49.837]   - Field: ‘asynchronous’
[16:18:49.837]   - Field: ‘calls’
[16:18:49.837]   - Field: ‘globals’
[16:18:49.838]   - Field: ‘stdout’
[16:18:49.838]   - Field: ‘earlySignal’
[16:18:49.838]   - Field: ‘lazy’
[16:18:49.838]   - Field: ‘state’
[16:18:49.838] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:18:49.838] - Launch lazy future ...
[16:18:49.838] Packages needed by the future expression (n = 0): <none>
[16:18:49.838] Packages needed by future strategies (n = 0): <none>
[16:18:49.839] {
[16:18:49.839]     {
[16:18:49.839]         {
[16:18:49.839]             ...future.startTime <- base::Sys.time()
[16:18:49.839]             {
[16:18:49.839]                 {
[16:18:49.839]                   {
[16:18:49.839]                     {
[16:18:49.839]                       base::local({
[16:18:49.839]                         has_future <- base::requireNamespace("future", 
[16:18:49.839]                           quietly = TRUE)
[16:18:49.839]                         if (has_future) {
[16:18:49.839]                           ns <- base::getNamespace("future")
[16:18:49.839]                           version <- ns[[".package"]][["version"]]
[16:18:49.839]                           if (is.null(version)) 
[16:18:49.839]                             version <- utils::packageVersion("future")
[16:18:49.839]                         }
[16:18:49.839]                         else {
[16:18:49.839]                           version <- NULL
[16:18:49.839]                         }
[16:18:49.839]                         if (!has_future || version < "1.8.0") {
[16:18:49.839]                           info <- base::c(r_version = base::gsub("R version ", 
[16:18:49.839]                             "", base::R.version$version.string), 
[16:18:49.839]                             platform = base::sprintf("%s (%s-bit)", 
[16:18:49.839]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:18:49.839]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:18:49.839]                               "release", "version")], collapse = " "), 
[16:18:49.839]                             hostname = base::Sys.info()[["nodename"]])
[16:18:49.839]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:18:49.839]                             info)
[16:18:49.839]                           info <- base::paste(info, collapse = "; ")
[16:18:49.839]                           if (!has_future) {
[16:18:49.839]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:18:49.839]                               info)
[16:18:49.839]                           }
[16:18:49.839]                           else {
[16:18:49.839]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:18:49.839]                               info, version)
[16:18:49.839]                           }
[16:18:49.839]                           base::stop(msg)
[16:18:49.839]                         }
[16:18:49.839]                       })
[16:18:49.839]                     }
[16:18:49.839]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:18:49.839]                     base::options(mc.cores = 1L)
[16:18:49.839]                   }
[16:18:49.839]                   ...future.strategy.old <- future::plan("list")
[16:18:49.839]                   options(future.plan = NULL)
[16:18:49.839]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:18:49.839]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:18:49.839]                 }
[16:18:49.839]                 ...future.workdir <- getwd()
[16:18:49.839]             }
[16:18:49.839]             ...future.oldOptions <- base::as.list(base::.Options)
[16:18:49.839]             ...future.oldEnvVars <- base::Sys.getenv()
[16:18:49.839]         }
[16:18:49.839]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:18:49.839]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:18:49.839]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:18:49.839]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:18:49.839]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:18:49.839]             future.stdout.windows.reencode = NULL, width = 80L)
[16:18:49.839]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:18:49.839]             base::names(...future.oldOptions))
[16:18:49.839]     }
[16:18:49.839]     if (FALSE) {
[16:18:49.839]     }
[16:18:49.839]     else {
[16:18:49.839]         if (TRUE) {
[16:18:49.839]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:18:49.839]                 open = "w")
[16:18:49.839]         }
[16:18:49.839]         else {
[16:18:49.839]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:18:49.839]                 windows = "NUL", "/dev/null"), open = "w")
[16:18:49.839]         }
[16:18:49.839]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:18:49.839]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:18:49.839]             base::sink(type = "output", split = FALSE)
[16:18:49.839]             base::close(...future.stdout)
[16:18:49.839]         }, add = TRUE)
[16:18:49.839]     }
[16:18:49.839]     ...future.frame <- base::sys.nframe()
[16:18:49.839]     ...future.conditions <- base::list()
[16:18:49.839]     ...future.rng <- base::globalenv()$.Random.seed
[16:18:49.839]     if (FALSE) {
[16:18:49.839]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:18:49.839]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:18:49.839]     }
[16:18:49.839]     ...future.result <- base::tryCatch({
[16:18:49.839]         base::withCallingHandlers({
[16:18:49.839]             ...future.value <- base::withVisible(base::local({
[16:18:49.839]                 ...future.makeSendCondition <- base::local({
[16:18:49.839]                   sendCondition <- NULL
[16:18:49.839]                   function(frame = 1L) {
[16:18:49.839]                     if (is.function(sendCondition)) 
[16:18:49.839]                       return(sendCondition)
[16:18:49.839]                     ns <- getNamespace("parallel")
[16:18:49.839]                     if (exists("sendData", mode = "function", 
[16:18:49.839]                       envir = ns)) {
[16:18:49.839]                       parallel_sendData <- get("sendData", mode = "function", 
[16:18:49.839]                         envir = ns)
[16:18:49.839]                       envir <- sys.frame(frame)
[16:18:49.839]                       master <- NULL
[16:18:49.839]                       while (!identical(envir, .GlobalEnv) && 
[16:18:49.839]                         !identical(envir, emptyenv())) {
[16:18:49.839]                         if (exists("master", mode = "list", envir = envir, 
[16:18:49.839]                           inherits = FALSE)) {
[16:18:49.839]                           master <- get("master", mode = "list", 
[16:18:49.839]                             envir = envir, inherits = FALSE)
[16:18:49.839]                           if (inherits(master, c("SOCKnode", 
[16:18:49.839]                             "SOCK0node"))) {
[16:18:49.839]                             sendCondition <<- function(cond) {
[16:18:49.839]                               data <- list(type = "VALUE", value = cond, 
[16:18:49.839]                                 success = TRUE)
[16:18:49.839]                               parallel_sendData(master, data)
[16:18:49.839]                             }
[16:18:49.839]                             return(sendCondition)
[16:18:49.839]                           }
[16:18:49.839]                         }
[16:18:49.839]                         frame <- frame + 1L
[16:18:49.839]                         envir <- sys.frame(frame)
[16:18:49.839]                       }
[16:18:49.839]                     }
[16:18:49.839]                     sendCondition <<- function(cond) NULL
[16:18:49.839]                   }
[16:18:49.839]                 })
[16:18:49.839]                 withCallingHandlers({
[16:18:49.839]                   {
[16:18:49.839]                     do.call(function(...) {
[16:18:49.839]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:49.839]                       if (!identical(...future.globals.maxSize.org, 
[16:18:49.839]                         ...future.globals.maxSize)) {
[16:18:49.839]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:49.839]                         on.exit(options(oopts), add = TRUE)
[16:18:49.839]                       }
[16:18:49.839]                       {
[16:18:49.839]                         lapply(seq_along(...future.elements_ii), 
[16:18:49.839]                           FUN = function(jj) {
[16:18:49.839]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:49.839]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:49.839]                               envir = globalenv(), inherits = FALSE)
[16:18:49.839]                             ...future.FUN(...future.X_jj, ...)
[16:18:49.839]                           })
[16:18:49.839]                       }
[16:18:49.839]                     }, args = future.call.arguments)
[16:18:49.839]                   }
[16:18:49.839]                 }, immediateCondition = function(cond) {
[16:18:49.839]                   sendCondition <- ...future.makeSendCondition()
[16:18:49.839]                   sendCondition(cond)
[16:18:49.839]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:49.839]                   {
[16:18:49.839]                     inherits <- base::inherits
[16:18:49.839]                     invokeRestart <- base::invokeRestart
[16:18:49.839]                     is.null <- base::is.null
[16:18:49.839]                     muffled <- FALSE
[16:18:49.839]                     if (inherits(cond, "message")) {
[16:18:49.839]                       muffled <- grepl(pattern, "muffleMessage")
[16:18:49.839]                       if (muffled) 
[16:18:49.839]                         invokeRestart("muffleMessage")
[16:18:49.839]                     }
[16:18:49.839]                     else if (inherits(cond, "warning")) {
[16:18:49.839]                       muffled <- grepl(pattern, "muffleWarning")
[16:18:49.839]                       if (muffled) 
[16:18:49.839]                         invokeRestart("muffleWarning")
[16:18:49.839]                     }
[16:18:49.839]                     else if (inherits(cond, "condition")) {
[16:18:49.839]                       if (!is.null(pattern)) {
[16:18:49.839]                         computeRestarts <- base::computeRestarts
[16:18:49.839]                         grepl <- base::grepl
[16:18:49.839]                         restarts <- computeRestarts(cond)
[16:18:49.839]                         for (restart in restarts) {
[16:18:49.839]                           name <- restart$name
[16:18:49.839]                           if (is.null(name)) 
[16:18:49.839]                             next
[16:18:49.839]                           if (!grepl(pattern, name)) 
[16:18:49.839]                             next
[16:18:49.839]                           invokeRestart(restart)
[16:18:49.839]                           muffled <- TRUE
[16:18:49.839]                           break
[16:18:49.839]                         }
[16:18:49.839]                       }
[16:18:49.839]                     }
[16:18:49.839]                     invisible(muffled)
[16:18:49.839]                   }
[16:18:49.839]                   muffleCondition(cond)
[16:18:49.839]                 })
[16:18:49.839]             }))
[16:18:49.839]             future::FutureResult(value = ...future.value$value, 
[16:18:49.839]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:49.839]                   ...future.rng), globalenv = if (FALSE) 
[16:18:49.839]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:18:49.839]                     ...future.globalenv.names))
[16:18:49.839]                 else NULL, started = ...future.startTime, version = "1.8")
[16:18:49.839]         }, condition = base::local({
[16:18:49.839]             c <- base::c
[16:18:49.839]             inherits <- base::inherits
[16:18:49.839]             invokeRestart <- base::invokeRestart
[16:18:49.839]             length <- base::length
[16:18:49.839]             list <- base::list
[16:18:49.839]             seq.int <- base::seq.int
[16:18:49.839]             signalCondition <- base::signalCondition
[16:18:49.839]             sys.calls <- base::sys.calls
[16:18:49.839]             `[[` <- base::`[[`
[16:18:49.839]             `+` <- base::`+`
[16:18:49.839]             `<<-` <- base::`<<-`
[16:18:49.839]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:18:49.839]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:18:49.839]                   3L)]
[16:18:49.839]             }
[16:18:49.839]             function(cond) {
[16:18:49.839]                 is_error <- inherits(cond, "error")
[16:18:49.839]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:18:49.839]                   NULL)
[16:18:49.839]                 if (is_error) {
[16:18:49.839]                   sessionInformation <- function() {
[16:18:49.839]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:18:49.839]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:18:49.839]                       search = base::search(), system = base::Sys.info())
[16:18:49.839]                   }
[16:18:49.839]                   ...future.conditions[[length(...future.conditions) + 
[16:18:49.839]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:18:49.839]                     cond$call), session = sessionInformation(), 
[16:18:49.839]                     timestamp = base::Sys.time(), signaled = 0L)
[16:18:49.839]                   signalCondition(cond)
[16:18:49.839]                 }
[16:18:49.839]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:18:49.839]                 "immediateCondition"))) {
[16:18:49.839]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:18:49.839]                   ...future.conditions[[length(...future.conditions) + 
[16:18:49.839]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:18:49.839]                   if (TRUE && !signal) {
[16:18:49.839]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:49.839]                     {
[16:18:49.839]                       inherits <- base::inherits
[16:18:49.839]                       invokeRestart <- base::invokeRestart
[16:18:49.839]                       is.null <- base::is.null
[16:18:49.839]                       muffled <- FALSE
[16:18:49.839]                       if (inherits(cond, "message")) {
[16:18:49.839]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:49.839]                         if (muffled) 
[16:18:49.839]                           invokeRestart("muffleMessage")
[16:18:49.839]                       }
[16:18:49.839]                       else if (inherits(cond, "warning")) {
[16:18:49.839]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:49.839]                         if (muffled) 
[16:18:49.839]                           invokeRestart("muffleWarning")
[16:18:49.839]                       }
[16:18:49.839]                       else if (inherits(cond, "condition")) {
[16:18:49.839]                         if (!is.null(pattern)) {
[16:18:49.839]                           computeRestarts <- base::computeRestarts
[16:18:49.839]                           grepl <- base::grepl
[16:18:49.839]                           restarts <- computeRestarts(cond)
[16:18:49.839]                           for (restart in restarts) {
[16:18:49.839]                             name <- restart$name
[16:18:49.839]                             if (is.null(name)) 
[16:18:49.839]                               next
[16:18:49.839]                             if (!grepl(pattern, name)) 
[16:18:49.839]                               next
[16:18:49.839]                             invokeRestart(restart)
[16:18:49.839]                             muffled <- TRUE
[16:18:49.839]                             break
[16:18:49.839]                           }
[16:18:49.839]                         }
[16:18:49.839]                       }
[16:18:49.839]                       invisible(muffled)
[16:18:49.839]                     }
[16:18:49.839]                     muffleCondition(cond, pattern = "^muffle")
[16:18:49.839]                   }
[16:18:49.839]                 }
[16:18:49.839]                 else {
[16:18:49.839]                   if (TRUE) {
[16:18:49.839]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:49.839]                     {
[16:18:49.839]                       inherits <- base::inherits
[16:18:49.839]                       invokeRestart <- base::invokeRestart
[16:18:49.839]                       is.null <- base::is.null
[16:18:49.839]                       muffled <- FALSE
[16:18:49.839]                       if (inherits(cond, "message")) {
[16:18:49.839]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:49.839]                         if (muffled) 
[16:18:49.839]                           invokeRestart("muffleMessage")
[16:18:49.839]                       }
[16:18:49.839]                       else if (inherits(cond, "warning")) {
[16:18:49.839]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:49.839]                         if (muffled) 
[16:18:49.839]                           invokeRestart("muffleWarning")
[16:18:49.839]                       }
[16:18:49.839]                       else if (inherits(cond, "condition")) {
[16:18:49.839]                         if (!is.null(pattern)) {
[16:18:49.839]                           computeRestarts <- base::computeRestarts
[16:18:49.839]                           grepl <- base::grepl
[16:18:49.839]                           restarts <- computeRestarts(cond)
[16:18:49.839]                           for (restart in restarts) {
[16:18:49.839]                             name <- restart$name
[16:18:49.839]                             if (is.null(name)) 
[16:18:49.839]                               next
[16:18:49.839]                             if (!grepl(pattern, name)) 
[16:18:49.839]                               next
[16:18:49.839]                             invokeRestart(restart)
[16:18:49.839]                             muffled <- TRUE
[16:18:49.839]                             break
[16:18:49.839]                           }
[16:18:49.839]                         }
[16:18:49.839]                       }
[16:18:49.839]                       invisible(muffled)
[16:18:49.839]                     }
[16:18:49.839]                     muffleCondition(cond, pattern = "^muffle")
[16:18:49.839]                   }
[16:18:49.839]                 }
[16:18:49.839]             }
[16:18:49.839]         }))
[16:18:49.839]     }, error = function(ex) {
[16:18:49.839]         base::structure(base::list(value = NULL, visible = NULL, 
[16:18:49.839]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:49.839]                 ...future.rng), started = ...future.startTime, 
[16:18:49.839]             finished = Sys.time(), session_uuid = NA_character_, 
[16:18:49.839]             version = "1.8"), class = "FutureResult")
[16:18:49.839]     }, finally = {
[16:18:49.839]         if (!identical(...future.workdir, getwd())) 
[16:18:49.839]             setwd(...future.workdir)
[16:18:49.839]         {
[16:18:49.839]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:18:49.839]                 ...future.oldOptions$nwarnings <- NULL
[16:18:49.839]             }
[16:18:49.839]             base::options(...future.oldOptions)
[16:18:49.839]             if (.Platform$OS.type == "windows") {
[16:18:49.839]                 old_names <- names(...future.oldEnvVars)
[16:18:49.839]                 envs <- base::Sys.getenv()
[16:18:49.839]                 names <- names(envs)
[16:18:49.839]                 common <- intersect(names, old_names)
[16:18:49.839]                 added <- setdiff(names, old_names)
[16:18:49.839]                 removed <- setdiff(old_names, names)
[16:18:49.839]                 changed <- common[...future.oldEnvVars[common] != 
[16:18:49.839]                   envs[common]]
[16:18:49.839]                 NAMES <- toupper(changed)
[16:18:49.839]                 args <- list()
[16:18:49.839]                 for (kk in seq_along(NAMES)) {
[16:18:49.839]                   name <- changed[[kk]]
[16:18:49.839]                   NAME <- NAMES[[kk]]
[16:18:49.839]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:49.839]                     next
[16:18:49.839]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:49.839]                 }
[16:18:49.839]                 NAMES <- toupper(added)
[16:18:49.839]                 for (kk in seq_along(NAMES)) {
[16:18:49.839]                   name <- added[[kk]]
[16:18:49.839]                   NAME <- NAMES[[kk]]
[16:18:49.839]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:49.839]                     next
[16:18:49.839]                   args[[name]] <- ""
[16:18:49.839]                 }
[16:18:49.839]                 NAMES <- toupper(removed)
[16:18:49.839]                 for (kk in seq_along(NAMES)) {
[16:18:49.839]                   name <- removed[[kk]]
[16:18:49.839]                   NAME <- NAMES[[kk]]
[16:18:49.839]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:49.839]                     next
[16:18:49.839]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:49.839]                 }
[16:18:49.839]                 if (length(args) > 0) 
[16:18:49.839]                   base::do.call(base::Sys.setenv, args = args)
[16:18:49.839]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:18:49.839]             }
[16:18:49.839]             else {
[16:18:49.839]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:18:49.839]             }
[16:18:49.839]             {
[16:18:49.839]                 if (base::length(...future.futureOptionsAdded) > 
[16:18:49.839]                   0L) {
[16:18:49.839]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:18:49.839]                   base::names(opts) <- ...future.futureOptionsAdded
[16:18:49.839]                   base::options(opts)
[16:18:49.839]                 }
[16:18:49.839]                 {
[16:18:49.839]                   {
[16:18:49.839]                     base::options(mc.cores = ...future.mc.cores.old)
[16:18:49.839]                     NULL
[16:18:49.839]                   }
[16:18:49.839]                   options(future.plan = NULL)
[16:18:49.839]                   if (is.na(NA_character_)) 
[16:18:49.839]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:18:49.839]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:18:49.839]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:18:49.839]                     .init = FALSE)
[16:18:49.839]                 }
[16:18:49.839]             }
[16:18:49.839]         }
[16:18:49.839]     })
[16:18:49.839]     if (TRUE) {
[16:18:49.839]         base::sink(type = "output", split = FALSE)
[16:18:49.839]         if (TRUE) {
[16:18:49.839]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:18:49.839]         }
[16:18:49.839]         else {
[16:18:49.839]             ...future.result["stdout"] <- base::list(NULL)
[16:18:49.839]         }
[16:18:49.839]         base::close(...future.stdout)
[16:18:49.839]         ...future.stdout <- NULL
[16:18:49.839]     }
[16:18:49.839]     ...future.result$conditions <- ...future.conditions
[16:18:49.839]     ...future.result$finished <- base::Sys.time()
[16:18:49.839]     ...future.result
[16:18:49.839] }
[16:18:49.842] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[16:18:49.842] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[16:18:49.842] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[16:18:49.842] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[16:18:49.843] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[16:18:49.843] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[16:18:49.843] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[16:18:49.843] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[16:18:49.844] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[16:18:49.844] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[16:18:49.844] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[16:18:49.844] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[16:18:49.845] MultisessionFuture started
[16:18:49.845] - Launch lazy future ... done
[16:18:49.845] run() for ‘MultisessionFuture’ ... done
[16:18:49.845] Created future:
[16:18:49.845] MultisessionFuture:
[16:18:49.845] Label: ‘future_replicate-1’
[16:18:49.845] Expression:
[16:18:49.845] {
[16:18:49.845]     do.call(function(...) {
[16:18:49.845]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:49.845]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:49.845]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:49.845]             on.exit(options(oopts), add = TRUE)
[16:18:49.845]         }
[16:18:49.845]         {
[16:18:49.845]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:49.845]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:49.845]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:49.845]                   envir = globalenv(), inherits = FALSE)
[16:18:49.845]                 ...future.FUN(...future.X_jj, ...)
[16:18:49.845]             })
[16:18:49.845]         }
[16:18:49.845]     }, args = future.call.arguments)
[16:18:49.845] }
[16:18:49.845] Lazy evaluation: FALSE
[16:18:49.845] Asynchronous evaluation: TRUE
[16:18:49.845] Local evaluation: TRUE
[16:18:49.845] Environment: R_GlobalEnv
[16:18:49.845] Capture standard output: TRUE
[16:18:49.845] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:18:49.845] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:18:49.845] Packages: <none>
[16:18:49.845] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:18:49.845] Resolved: FALSE
[16:18:49.845] Value: <not collected>
[16:18:49.845] Conditions captured: <none>
[16:18:49.845] Early signaling: FALSE
[16:18:49.845] Owner process: 20271db5-d788-b537-4432-0a26f2d2d030
[16:18:49.845] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:49.857] Chunk #1 of 2 ... DONE
[16:18:49.857] Chunk #2 of 2 ...
[16:18:49.857]  - Finding globals in 'X' for chunk #2 ...
[16:18:49.857] getGlobalsAndPackages() ...
[16:18:49.857] Searching for globals...
[16:18:49.857] 
[16:18:49.857] Searching for globals ... DONE
[16:18:49.858] - globals: [0] <none>
[16:18:49.858] getGlobalsAndPackages() ... DONE
[16:18:49.858]    + additional globals found: [n=0] 
[16:18:49.858]    + additional namespaces needed: [n=0] 
[16:18:49.858]  - Finding globals in 'X' for chunk #2 ... DONE
[16:18:49.858]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:18:49.858]  - seeds: [3] <seeds>
[16:18:49.858]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:49.858] getGlobalsAndPackages() ...
[16:18:49.858] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:49.859] Resolving globals: FALSE
[16:18:49.859] Tweak future expression to call with '...' arguments ...
[16:18:49.859] {
[16:18:49.859]     do.call(function(...) {
[16:18:49.859]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:49.859]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:49.859]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:49.859]             on.exit(options(oopts), add = TRUE)
[16:18:49.859]         }
[16:18:49.859]         {
[16:18:49.859]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:49.859]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:49.859]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:49.859]                   envir = globalenv(), inherits = FALSE)
[16:18:49.859]                 ...future.FUN(...future.X_jj, ...)
[16:18:49.859]             })
[16:18:49.859]         }
[16:18:49.859]     }, args = future.call.arguments)
[16:18:49.859] }
[16:18:49.859] Tweak future expression to call with '...' arguments ... DONE
[16:18:49.859] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:49.859] 
[16:18:49.860] getGlobalsAndPackages() ... DONE
[16:18:49.860] run() for ‘Future’ ...
[16:18:49.860] - state: ‘created’
[16:18:49.860] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:18:49.875] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:49.875] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:18:49.875]   - Field: ‘node’
[16:18:49.875]   - Field: ‘label’
[16:18:49.875]   - Field: ‘local’
[16:18:49.876]   - Field: ‘owner’
[16:18:49.876]   - Field: ‘envir’
[16:18:49.876]   - Field: ‘workers’
[16:18:49.876]   - Field: ‘packages’
[16:18:49.876]   - Field: ‘gc’
[16:18:49.876]   - Field: ‘conditions’
[16:18:49.876]   - Field: ‘persistent’
[16:18:49.876]   - Field: ‘expr’
[16:18:49.876]   - Field: ‘uuid’
[16:18:49.877]   - Field: ‘seed’
[16:18:49.877]   - Field: ‘version’
[16:18:49.877]   - Field: ‘result’
[16:18:49.877]   - Field: ‘asynchronous’
[16:18:49.877]   - Field: ‘calls’
[16:18:49.877]   - Field: ‘globals’
[16:18:49.877]   - Field: ‘stdout’
[16:18:49.877]   - Field: ‘earlySignal’
[16:18:49.877]   - Field: ‘lazy’
[16:18:49.877]   - Field: ‘state’
[16:18:49.877] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:18:49.878] - Launch lazy future ...
[16:18:49.878] Packages needed by the future expression (n = 0): <none>
[16:18:49.878] Packages needed by future strategies (n = 0): <none>
[16:18:49.878] {
[16:18:49.878]     {
[16:18:49.878]         {
[16:18:49.878]             ...future.startTime <- base::Sys.time()
[16:18:49.878]             {
[16:18:49.878]                 {
[16:18:49.878]                   {
[16:18:49.878]                     {
[16:18:49.878]                       base::local({
[16:18:49.878]                         has_future <- base::requireNamespace("future", 
[16:18:49.878]                           quietly = TRUE)
[16:18:49.878]                         if (has_future) {
[16:18:49.878]                           ns <- base::getNamespace("future")
[16:18:49.878]                           version <- ns[[".package"]][["version"]]
[16:18:49.878]                           if (is.null(version)) 
[16:18:49.878]                             version <- utils::packageVersion("future")
[16:18:49.878]                         }
[16:18:49.878]                         else {
[16:18:49.878]                           version <- NULL
[16:18:49.878]                         }
[16:18:49.878]                         if (!has_future || version < "1.8.0") {
[16:18:49.878]                           info <- base::c(r_version = base::gsub("R version ", 
[16:18:49.878]                             "", base::R.version$version.string), 
[16:18:49.878]                             platform = base::sprintf("%s (%s-bit)", 
[16:18:49.878]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:18:49.878]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:18:49.878]                               "release", "version")], collapse = " "), 
[16:18:49.878]                             hostname = base::Sys.info()[["nodename"]])
[16:18:49.878]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:18:49.878]                             info)
[16:18:49.878]                           info <- base::paste(info, collapse = "; ")
[16:18:49.878]                           if (!has_future) {
[16:18:49.878]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:18:49.878]                               info)
[16:18:49.878]                           }
[16:18:49.878]                           else {
[16:18:49.878]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:18:49.878]                               info, version)
[16:18:49.878]                           }
[16:18:49.878]                           base::stop(msg)
[16:18:49.878]                         }
[16:18:49.878]                       })
[16:18:49.878]                     }
[16:18:49.878]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:18:49.878]                     base::options(mc.cores = 1L)
[16:18:49.878]                   }
[16:18:49.878]                   ...future.strategy.old <- future::plan("list")
[16:18:49.878]                   options(future.plan = NULL)
[16:18:49.878]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:18:49.878]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:18:49.878]                 }
[16:18:49.878]                 ...future.workdir <- getwd()
[16:18:49.878]             }
[16:18:49.878]             ...future.oldOptions <- base::as.list(base::.Options)
[16:18:49.878]             ...future.oldEnvVars <- base::Sys.getenv()
[16:18:49.878]         }
[16:18:49.878]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:18:49.878]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:18:49.878]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:18:49.878]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:18:49.878]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:18:49.878]             future.stdout.windows.reencode = NULL, width = 80L)
[16:18:49.878]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:18:49.878]             base::names(...future.oldOptions))
[16:18:49.878]     }
[16:18:49.878]     if (FALSE) {
[16:18:49.878]     }
[16:18:49.878]     else {
[16:18:49.878]         if (TRUE) {
[16:18:49.878]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:18:49.878]                 open = "w")
[16:18:49.878]         }
[16:18:49.878]         else {
[16:18:49.878]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:18:49.878]                 windows = "NUL", "/dev/null"), open = "w")
[16:18:49.878]         }
[16:18:49.878]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:18:49.878]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:18:49.878]             base::sink(type = "output", split = FALSE)
[16:18:49.878]             base::close(...future.stdout)
[16:18:49.878]         }, add = TRUE)
[16:18:49.878]     }
[16:18:49.878]     ...future.frame <- base::sys.nframe()
[16:18:49.878]     ...future.conditions <- base::list()
[16:18:49.878]     ...future.rng <- base::globalenv()$.Random.seed
[16:18:49.878]     if (FALSE) {
[16:18:49.878]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:18:49.878]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:18:49.878]     }
[16:18:49.878]     ...future.result <- base::tryCatch({
[16:18:49.878]         base::withCallingHandlers({
[16:18:49.878]             ...future.value <- base::withVisible(base::local({
[16:18:49.878]                 ...future.makeSendCondition <- base::local({
[16:18:49.878]                   sendCondition <- NULL
[16:18:49.878]                   function(frame = 1L) {
[16:18:49.878]                     if (is.function(sendCondition)) 
[16:18:49.878]                       return(sendCondition)
[16:18:49.878]                     ns <- getNamespace("parallel")
[16:18:49.878]                     if (exists("sendData", mode = "function", 
[16:18:49.878]                       envir = ns)) {
[16:18:49.878]                       parallel_sendData <- get("sendData", mode = "function", 
[16:18:49.878]                         envir = ns)
[16:18:49.878]                       envir <- sys.frame(frame)
[16:18:49.878]                       master <- NULL
[16:18:49.878]                       while (!identical(envir, .GlobalEnv) && 
[16:18:49.878]                         !identical(envir, emptyenv())) {
[16:18:49.878]                         if (exists("master", mode = "list", envir = envir, 
[16:18:49.878]                           inherits = FALSE)) {
[16:18:49.878]                           master <- get("master", mode = "list", 
[16:18:49.878]                             envir = envir, inherits = FALSE)
[16:18:49.878]                           if (inherits(master, c("SOCKnode", 
[16:18:49.878]                             "SOCK0node"))) {
[16:18:49.878]                             sendCondition <<- function(cond) {
[16:18:49.878]                               data <- list(type = "VALUE", value = cond, 
[16:18:49.878]                                 success = TRUE)
[16:18:49.878]                               parallel_sendData(master, data)
[16:18:49.878]                             }
[16:18:49.878]                             return(sendCondition)
[16:18:49.878]                           }
[16:18:49.878]                         }
[16:18:49.878]                         frame <- frame + 1L
[16:18:49.878]                         envir <- sys.frame(frame)
[16:18:49.878]                       }
[16:18:49.878]                     }
[16:18:49.878]                     sendCondition <<- function(cond) NULL
[16:18:49.878]                   }
[16:18:49.878]                 })
[16:18:49.878]                 withCallingHandlers({
[16:18:49.878]                   {
[16:18:49.878]                     do.call(function(...) {
[16:18:49.878]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:49.878]                       if (!identical(...future.globals.maxSize.org, 
[16:18:49.878]                         ...future.globals.maxSize)) {
[16:18:49.878]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:49.878]                         on.exit(options(oopts), add = TRUE)
[16:18:49.878]                       }
[16:18:49.878]                       {
[16:18:49.878]                         lapply(seq_along(...future.elements_ii), 
[16:18:49.878]                           FUN = function(jj) {
[16:18:49.878]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:49.878]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:49.878]                               envir = globalenv(), inherits = FALSE)
[16:18:49.878]                             ...future.FUN(...future.X_jj, ...)
[16:18:49.878]                           })
[16:18:49.878]                       }
[16:18:49.878]                     }, args = future.call.arguments)
[16:18:49.878]                   }
[16:18:49.878]                 }, immediateCondition = function(cond) {
[16:18:49.878]                   sendCondition <- ...future.makeSendCondition()
[16:18:49.878]                   sendCondition(cond)
[16:18:49.878]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:49.878]                   {
[16:18:49.878]                     inherits <- base::inherits
[16:18:49.878]                     invokeRestart <- base::invokeRestart
[16:18:49.878]                     is.null <- base::is.null
[16:18:49.878]                     muffled <- FALSE
[16:18:49.878]                     if (inherits(cond, "message")) {
[16:18:49.878]                       muffled <- grepl(pattern, "muffleMessage")
[16:18:49.878]                       if (muffled) 
[16:18:49.878]                         invokeRestart("muffleMessage")
[16:18:49.878]                     }
[16:18:49.878]                     else if (inherits(cond, "warning")) {
[16:18:49.878]                       muffled <- grepl(pattern, "muffleWarning")
[16:18:49.878]                       if (muffled) 
[16:18:49.878]                         invokeRestart("muffleWarning")
[16:18:49.878]                     }
[16:18:49.878]                     else if (inherits(cond, "condition")) {
[16:18:49.878]                       if (!is.null(pattern)) {
[16:18:49.878]                         computeRestarts <- base::computeRestarts
[16:18:49.878]                         grepl <- base::grepl
[16:18:49.878]                         restarts <- computeRestarts(cond)
[16:18:49.878]                         for (restart in restarts) {
[16:18:49.878]                           name <- restart$name
[16:18:49.878]                           if (is.null(name)) 
[16:18:49.878]                             next
[16:18:49.878]                           if (!grepl(pattern, name)) 
[16:18:49.878]                             next
[16:18:49.878]                           invokeRestart(restart)
[16:18:49.878]                           muffled <- TRUE
[16:18:49.878]                           break
[16:18:49.878]                         }
[16:18:49.878]                       }
[16:18:49.878]                     }
[16:18:49.878]                     invisible(muffled)
[16:18:49.878]                   }
[16:18:49.878]                   muffleCondition(cond)
[16:18:49.878]                 })
[16:18:49.878]             }))
[16:18:49.878]             future::FutureResult(value = ...future.value$value, 
[16:18:49.878]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:49.878]                   ...future.rng), globalenv = if (FALSE) 
[16:18:49.878]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:18:49.878]                     ...future.globalenv.names))
[16:18:49.878]                 else NULL, started = ...future.startTime, version = "1.8")
[16:18:49.878]         }, condition = base::local({
[16:18:49.878]             c <- base::c
[16:18:49.878]             inherits <- base::inherits
[16:18:49.878]             invokeRestart <- base::invokeRestart
[16:18:49.878]             length <- base::length
[16:18:49.878]             list <- base::list
[16:18:49.878]             seq.int <- base::seq.int
[16:18:49.878]             signalCondition <- base::signalCondition
[16:18:49.878]             sys.calls <- base::sys.calls
[16:18:49.878]             `[[` <- base::`[[`
[16:18:49.878]             `+` <- base::`+`
[16:18:49.878]             `<<-` <- base::`<<-`
[16:18:49.878]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:18:49.878]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:18:49.878]                   3L)]
[16:18:49.878]             }
[16:18:49.878]             function(cond) {
[16:18:49.878]                 is_error <- inherits(cond, "error")
[16:18:49.878]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:18:49.878]                   NULL)
[16:18:49.878]                 if (is_error) {
[16:18:49.878]                   sessionInformation <- function() {
[16:18:49.878]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:18:49.878]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:18:49.878]                       search = base::search(), system = base::Sys.info())
[16:18:49.878]                   }
[16:18:49.878]                   ...future.conditions[[length(...future.conditions) + 
[16:18:49.878]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:18:49.878]                     cond$call), session = sessionInformation(), 
[16:18:49.878]                     timestamp = base::Sys.time(), signaled = 0L)
[16:18:49.878]                   signalCondition(cond)
[16:18:49.878]                 }
[16:18:49.878]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:18:49.878]                 "immediateCondition"))) {
[16:18:49.878]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:18:49.878]                   ...future.conditions[[length(...future.conditions) + 
[16:18:49.878]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:18:49.878]                   if (TRUE && !signal) {
[16:18:49.878]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:49.878]                     {
[16:18:49.878]                       inherits <- base::inherits
[16:18:49.878]                       invokeRestart <- base::invokeRestart
[16:18:49.878]                       is.null <- base::is.null
[16:18:49.878]                       muffled <- FALSE
[16:18:49.878]                       if (inherits(cond, "message")) {
[16:18:49.878]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:49.878]                         if (muffled) 
[16:18:49.878]                           invokeRestart("muffleMessage")
[16:18:49.878]                       }
[16:18:49.878]                       else if (inherits(cond, "warning")) {
[16:18:49.878]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:49.878]                         if (muffled) 
[16:18:49.878]                           invokeRestart("muffleWarning")
[16:18:49.878]                       }
[16:18:49.878]                       else if (inherits(cond, "condition")) {
[16:18:49.878]                         if (!is.null(pattern)) {
[16:18:49.878]                           computeRestarts <- base::computeRestarts
[16:18:49.878]                           grepl <- base::grepl
[16:18:49.878]                           restarts <- computeRestarts(cond)
[16:18:49.878]                           for (restart in restarts) {
[16:18:49.878]                             name <- restart$name
[16:18:49.878]                             if (is.null(name)) 
[16:18:49.878]                               next
[16:18:49.878]                             if (!grepl(pattern, name)) 
[16:18:49.878]                               next
[16:18:49.878]                             invokeRestart(restart)
[16:18:49.878]                             muffled <- TRUE
[16:18:49.878]                             break
[16:18:49.878]                           }
[16:18:49.878]                         }
[16:18:49.878]                       }
[16:18:49.878]                       invisible(muffled)
[16:18:49.878]                     }
[16:18:49.878]                     muffleCondition(cond, pattern = "^muffle")
[16:18:49.878]                   }
[16:18:49.878]                 }
[16:18:49.878]                 else {
[16:18:49.878]                   if (TRUE) {
[16:18:49.878]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:49.878]                     {
[16:18:49.878]                       inherits <- base::inherits
[16:18:49.878]                       invokeRestart <- base::invokeRestart
[16:18:49.878]                       is.null <- base::is.null
[16:18:49.878]                       muffled <- FALSE
[16:18:49.878]                       if (inherits(cond, "message")) {
[16:18:49.878]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:49.878]                         if (muffled) 
[16:18:49.878]                           invokeRestart("muffleMessage")
[16:18:49.878]                       }
[16:18:49.878]                       else if (inherits(cond, "warning")) {
[16:18:49.878]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:49.878]                         if (muffled) 
[16:18:49.878]                           invokeRestart("muffleWarning")
[16:18:49.878]                       }
[16:18:49.878]                       else if (inherits(cond, "condition")) {
[16:18:49.878]                         if (!is.null(pattern)) {
[16:18:49.878]                           computeRestarts <- base::computeRestarts
[16:18:49.878]                           grepl <- base::grepl
[16:18:49.878]                           restarts <- computeRestarts(cond)
[16:18:49.878]                           for (restart in restarts) {
[16:18:49.878]                             name <- restart$name
[16:18:49.878]                             if (is.null(name)) 
[16:18:49.878]                               next
[16:18:49.878]                             if (!grepl(pattern, name)) 
[16:18:49.878]                               next
[16:18:49.878]                             invokeRestart(restart)
[16:18:49.878]                             muffled <- TRUE
[16:18:49.878]                             break
[16:18:49.878]                           }
[16:18:49.878]                         }
[16:18:49.878]                       }
[16:18:49.878]                       invisible(muffled)
[16:18:49.878]                     }
[16:18:49.878]                     muffleCondition(cond, pattern = "^muffle")
[16:18:49.878]                   }
[16:18:49.878]                 }
[16:18:49.878]             }
[16:18:49.878]         }))
[16:18:49.878]     }, error = function(ex) {
[16:18:49.878]         base::structure(base::list(value = NULL, visible = NULL, 
[16:18:49.878]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:49.878]                 ...future.rng), started = ...future.startTime, 
[16:18:49.878]             finished = Sys.time(), session_uuid = NA_character_, 
[16:18:49.878]             version = "1.8"), class = "FutureResult")
[16:18:49.878]     }, finally = {
[16:18:49.878]         if (!identical(...future.workdir, getwd())) 
[16:18:49.878]             setwd(...future.workdir)
[16:18:49.878]         {
[16:18:49.878]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:18:49.878]                 ...future.oldOptions$nwarnings <- NULL
[16:18:49.878]             }
[16:18:49.878]             base::options(...future.oldOptions)
[16:18:49.878]             if (.Platform$OS.type == "windows") {
[16:18:49.878]                 old_names <- names(...future.oldEnvVars)
[16:18:49.878]                 envs <- base::Sys.getenv()
[16:18:49.878]                 names <- names(envs)
[16:18:49.878]                 common <- intersect(names, old_names)
[16:18:49.878]                 added <- setdiff(names, old_names)
[16:18:49.878]                 removed <- setdiff(old_names, names)
[16:18:49.878]                 changed <- common[...future.oldEnvVars[common] != 
[16:18:49.878]                   envs[common]]
[16:18:49.878]                 NAMES <- toupper(changed)
[16:18:49.878]                 args <- list()
[16:18:49.878]                 for (kk in seq_along(NAMES)) {
[16:18:49.878]                   name <- changed[[kk]]
[16:18:49.878]                   NAME <- NAMES[[kk]]
[16:18:49.878]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:49.878]                     next
[16:18:49.878]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:49.878]                 }
[16:18:49.878]                 NAMES <- toupper(added)
[16:18:49.878]                 for (kk in seq_along(NAMES)) {
[16:18:49.878]                   name <- added[[kk]]
[16:18:49.878]                   NAME <- NAMES[[kk]]
[16:18:49.878]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:49.878]                     next
[16:18:49.878]                   args[[name]] <- ""
[16:18:49.878]                 }
[16:18:49.878]                 NAMES <- toupper(removed)
[16:18:49.878]                 for (kk in seq_along(NAMES)) {
[16:18:49.878]                   name <- removed[[kk]]
[16:18:49.878]                   NAME <- NAMES[[kk]]
[16:18:49.878]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:49.878]                     next
[16:18:49.878]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:49.878]                 }
[16:18:49.878]                 if (length(args) > 0) 
[16:18:49.878]                   base::do.call(base::Sys.setenv, args = args)
[16:18:49.878]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:18:49.878]             }
[16:18:49.878]             else {
[16:18:49.878]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:18:49.878]             }
[16:18:49.878]             {
[16:18:49.878]                 if (base::length(...future.futureOptionsAdded) > 
[16:18:49.878]                   0L) {
[16:18:49.878]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:18:49.878]                   base::names(opts) <- ...future.futureOptionsAdded
[16:18:49.878]                   base::options(opts)
[16:18:49.878]                 }
[16:18:49.878]                 {
[16:18:49.878]                   {
[16:18:49.878]                     base::options(mc.cores = ...future.mc.cores.old)
[16:18:49.878]                     NULL
[16:18:49.878]                   }
[16:18:49.878]                   options(future.plan = NULL)
[16:18:49.878]                   if (is.na(NA_character_)) 
[16:18:49.878]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:18:49.878]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:18:49.878]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:18:49.878]                     .init = FALSE)
[16:18:49.878]                 }
[16:18:49.878]             }
[16:18:49.878]         }
[16:18:49.878]     })
[16:18:49.878]     if (TRUE) {
[16:18:49.878]         base::sink(type = "output", split = FALSE)
[16:18:49.878]         if (TRUE) {
[16:18:49.878]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:18:49.878]         }
[16:18:49.878]         else {
[16:18:49.878]             ...future.result["stdout"] <- base::list(NULL)
[16:18:49.878]         }
[16:18:49.878]         base::close(...future.stdout)
[16:18:49.878]         ...future.stdout <- NULL
[16:18:49.878]     }
[16:18:49.878]     ...future.result$conditions <- ...future.conditions
[16:18:49.878]     ...future.result$finished <- base::Sys.time()
[16:18:49.878]     ...future.result
[16:18:49.878] }
[16:18:49.881] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[16:18:49.881] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[16:18:49.882] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[16:18:49.882] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[16:18:49.882] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[16:18:49.882] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[16:18:49.883] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[16:18:49.883] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[16:18:49.883] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[16:18:49.883] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[16:18:49.884] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[16:18:49.884] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[16:18:49.884] MultisessionFuture started
[16:18:49.884] - Launch lazy future ... done
[16:18:49.884] run() for ‘MultisessionFuture’ ... done
[16:18:49.885] Created future:
[16:18:49.885] MultisessionFuture:
[16:18:49.885] Label: ‘future_replicate-2’
[16:18:49.885] Expression:
[16:18:49.885] {
[16:18:49.885]     do.call(function(...) {
[16:18:49.885]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:49.885]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:49.885]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:49.885]             on.exit(options(oopts), add = TRUE)
[16:18:49.885]         }
[16:18:49.885]         {
[16:18:49.885]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:49.885]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:49.885]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:49.885]                   envir = globalenv(), inherits = FALSE)
[16:18:49.885]                 ...future.FUN(...future.X_jj, ...)
[16:18:49.885]             })
[16:18:49.885]         }
[16:18:49.885]     }, args = future.call.arguments)
[16:18:49.885] }
[16:18:49.885] Lazy evaluation: FALSE
[16:18:49.885] Asynchronous evaluation: TRUE
[16:18:49.885] Local evaluation: TRUE
[16:18:49.885] Environment: R_GlobalEnv
[16:18:49.885] Capture standard output: TRUE
[16:18:49.885] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:18:49.885] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:18:49.885] Packages: <none>
[16:18:49.885] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:18:49.885] Resolved: FALSE
[16:18:49.885] Value: <not collected>
[16:18:49.885] Conditions captured: <none>
[16:18:49.885] Early signaling: FALSE
[16:18:49.885] Owner process: 20271db5-d788-b537-4432-0a26f2d2d030
[16:18:49.885] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:49.896] Chunk #2 of 2 ... DONE
[16:18:49.896] Launching 2 futures (chunks) ... DONE
[16:18:49.897] Resolving 2 futures (chunks) ...
[16:18:49.897] resolve() on list ...
[16:18:49.897]  recursive: 0
[16:18:49.897]  length: 2
[16:18:49.897] 
[16:18:49.897] receiveMessageFromWorker() for ClusterFuture ...
[16:18:49.898] - Validating connection of MultisessionFuture
[16:18:49.898] - received message: FutureResult
[16:18:49.898] - Received FutureResult
[16:18:49.898] - Erased future from FutureRegistry
[16:18:49.898] result() for ClusterFuture ...
[16:18:49.898] - result already collected: FutureResult
[16:18:49.898] result() for ClusterFuture ... done
[16:18:49.898] receiveMessageFromWorker() for ClusterFuture ... done
[16:18:49.898] Future #1
[16:18:49.899] result() for ClusterFuture ...
[16:18:49.899] - result already collected: FutureResult
[16:18:49.899] result() for ClusterFuture ... done
[16:18:49.899] result() for ClusterFuture ...
[16:18:49.899] - result already collected: FutureResult
[16:18:49.899] result() for ClusterFuture ... done
[16:18:49.899] signalConditionsASAP(MultisessionFuture, pos=1) ...
[16:18:49.899] - nx: 2
[16:18:49.899] - relay: TRUE
[16:18:49.899] - stdout: TRUE
[16:18:49.899] - signal: TRUE
[16:18:49.899] - resignal: FALSE
[16:18:49.900] - force: TRUE
[16:18:49.900] - relayed: [n=2] FALSE, FALSE
[16:18:49.900] - queued futures: [n=2] FALSE, FALSE
[16:18:49.900]  - until=1
[16:18:49.900]  - relaying element #1
[16:18:49.900] result() for ClusterFuture ...
[16:18:49.900] - result already collected: FutureResult
[16:18:49.900] result() for ClusterFuture ... done
[16:18:49.900] result() for ClusterFuture ...
[16:18:49.900] - result already collected: FutureResult
[16:18:49.900] result() for ClusterFuture ... done
[16:18:49.901] result() for ClusterFuture ...
[16:18:49.901] - result already collected: FutureResult
[16:18:49.901] result() for ClusterFuture ... done
[16:18:49.901] result() for ClusterFuture ...
[16:18:49.901] - result already collected: FutureResult
[16:18:49.901] result() for ClusterFuture ... done
[16:18:49.901] - relayed: [n=2] TRUE, FALSE
[16:18:49.901] - queued futures: [n=2] TRUE, FALSE
[16:18:49.901] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[16:18:49.901]  length: 1 (resolved future 1)
[16:18:49.926] receiveMessageFromWorker() for ClusterFuture ...
[16:18:49.926] - Validating connection of MultisessionFuture
[16:18:49.926] - received message: FutureResult
[16:18:49.927] - Received FutureResult
[16:18:49.927] - Erased future from FutureRegistry
[16:18:49.927] result() for ClusterFuture ...
[16:18:49.927] - result already collected: FutureResult
[16:18:49.927] result() for ClusterFuture ... done
[16:18:49.927] receiveMessageFromWorker() for ClusterFuture ... done
[16:18:49.927] Future #2
[16:18:49.927] result() for ClusterFuture ...
[16:18:49.927] - result already collected: FutureResult
[16:18:49.927] result() for ClusterFuture ... done
[16:18:49.928] result() for ClusterFuture ...
[16:18:49.928] - result already collected: FutureResult
[16:18:49.928] result() for ClusterFuture ... done
[16:18:49.928] signalConditionsASAP(MultisessionFuture, pos=2) ...
[16:18:49.928] - nx: 2
[16:18:49.928] - relay: TRUE
[16:18:49.928] - stdout: TRUE
[16:18:49.928] - signal: TRUE
[16:18:49.928] - resignal: FALSE
[16:18:49.928] - force: TRUE
[16:18:49.928] - relayed: [n=2] TRUE, FALSE
[16:18:49.929] - queued futures: [n=2] TRUE, FALSE
[16:18:49.929]  - until=2
[16:18:49.929]  - relaying element #2
[16:18:49.929] result() for ClusterFuture ...
[16:18:49.929] - result already collected: FutureResult
[16:18:49.929] result() for ClusterFuture ... done
[16:18:49.929] result() for ClusterFuture ...
[16:18:49.929] - result already collected: FutureResult
[16:18:49.929] result() for ClusterFuture ... done
[16:18:49.929] result() for ClusterFuture ...
[16:18:49.929] - result already collected: FutureResult
[16:18:49.930] result() for ClusterFuture ... done
[16:18:49.930] result() for ClusterFuture ...
[16:18:49.930] - result already collected: FutureResult
[16:18:49.930] result() for ClusterFuture ... done
[16:18:49.930] - relayed: [n=2] TRUE, TRUE
[16:18:49.930] - queued futures: [n=2] TRUE, TRUE
[16:18:49.930] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[16:18:49.930]  length: 0 (resolved future 2)
[16:18:49.930] Relaying remaining futures
[16:18:49.930] signalConditionsASAP(NULL, pos=0) ...
[16:18:49.930] - nx: 2
[16:18:49.931] - relay: TRUE
[16:18:49.931] - stdout: TRUE
[16:18:49.931] - signal: TRUE
[16:18:49.931] - resignal: FALSE
[16:18:49.931] - force: TRUE
[16:18:49.931] - relayed: [n=2] TRUE, TRUE
[16:18:49.931] - queued futures: [n=2] TRUE, TRUE
 - flush all
[16:18:49.931] - relayed: [n=2] TRUE, TRUE
[16:18:49.931] - queued futures: [n=2] TRUE, TRUE
[16:18:49.931] signalConditionsASAP(NULL, pos=0) ... done
[16:18:49.931] resolve() on list ... DONE
[16:18:49.931] result() for ClusterFuture ...
[16:18:49.932] - result already collected: FutureResult
[16:18:49.932] result() for ClusterFuture ... done
[16:18:49.932] result() for ClusterFuture ...
[16:18:49.932] - result already collected: FutureResult
[16:18:49.932] result() for ClusterFuture ... done
[16:18:49.932] result() for ClusterFuture ...
[16:18:49.932] - result already collected: FutureResult
[16:18:49.932] result() for ClusterFuture ... done
[16:18:49.932] result() for ClusterFuture ...
[16:18:49.932] - result already collected: FutureResult
[16:18:49.932] result() for ClusterFuture ... done
[16:18:49.933]  - Number of value chunks collected: 2
[16:18:49.933] Resolving 2 futures (chunks) ... DONE
[16:18:49.933] Reducing values from 2 chunks ...
[16:18:49.933]  - Number of values collected after concatenation: 5
[16:18:49.933]  - Number of values expected: 5
[16:18:49.933] Reducing values from 2 chunks ... DONE
[16:18:49.933] future_lapply() ... DONE
[16:18:49.933] future_lapply() ...
[16:18:49.934] Generating random seeds ...
[16:18:49.934] Generating random seed streams for 5 elements ...
[16:18:49.934] Generating random seed streams for 5 elements ... DONE
[16:18:49.934] Generating random seeds ... DONE
[16:18:49.934] Will set RNG state on exit: 10403, 4, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:18:49.938] Number of chunks: 2
[16:18:49.939] getGlobalsAndPackagesXApply() ...
[16:18:49.939]  - future.globals: TRUE
[16:18:49.939] getGlobalsAndPackages() ...
[16:18:49.939] Searching for globals...
[16:18:49.940] - globals found: [2] ‘FUN’, ‘sample’
[16:18:49.940] Searching for globals ... DONE
[16:18:49.940] Resolving globals: FALSE
[16:18:49.941] The total size of the 1 globals is 616 bytes (616 bytes)
[16:18:49.941] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:18:49.941] - globals: [1] ‘FUN’
[16:18:49.941] 
[16:18:49.941] getGlobalsAndPackages() ... DONE
[16:18:49.941]  - globals found/used: [n=1] ‘FUN’
[16:18:49.942]  - needed namespaces: [n=0] 
[16:18:49.942] Finding globals ... DONE
[16:18:49.942]  - use_args: TRUE
[16:18:49.942]  - Getting '...' globals ...
[16:18:49.942] resolve() on list ...
[16:18:49.942]  recursive: 0
[16:18:49.942]  length: 1
[16:18:49.942]  elements: ‘...’
[16:18:49.943]  length: 0 (resolved future 1)
[16:18:49.943] resolve() on list ... DONE
[16:18:49.943]    - '...' content: [n=0] 
[16:18:49.943] List of 1
[16:18:49.943]  $ ...: list()
[16:18:49.943]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:49.943]  - attr(*, "where")=List of 1
[16:18:49.943]   ..$ ...:<environment: 0x55e7a1cf22a0> 
[16:18:49.943]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:49.943]  - attr(*, "resolved")= logi TRUE
[16:18:49.943]  - attr(*, "total_size")= num NA
[16:18:49.945]  - Getting '...' globals ... DONE
[16:18:49.946] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:18:49.946] List of 2
[16:18:49.946]  $ ...future.FUN:function (...)  
[16:18:49.946]  $ ...          : list()
[16:18:49.946]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:49.946]  - attr(*, "where")=List of 2
[16:18:49.946]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:18:49.946]   ..$ ...          :<environment: 0x55e7a1cf22a0> 
[16:18:49.946]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:49.946]  - attr(*, "resolved")= logi FALSE
[16:18:49.946]  - attr(*, "total_size")= num 616
[16:18:49.948] Packages to be attached in all futures: [n=0] 
[16:18:49.948] getGlobalsAndPackagesXApply() ... DONE
[16:18:49.949] Number of futures (= number of chunks): 2
[16:18:49.949] Launching 2 futures (chunks) ...
[16:18:49.949] Chunk #1 of 2 ...
[16:18:49.949]  - Finding globals in 'X' for chunk #1 ...
[16:18:49.949] getGlobalsAndPackages() ...
[16:18:49.949] Searching for globals...
[16:18:49.949] 
[16:18:49.950] Searching for globals ... DONE
[16:18:49.950] - globals: [0] <none>
[16:18:49.950] getGlobalsAndPackages() ... DONE
[16:18:49.950]    + additional globals found: [n=0] 
[16:18:49.950]    + additional namespaces needed: [n=0] 
[16:18:49.950]  - Finding globals in 'X' for chunk #1 ... DONE
[16:18:49.950]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:18:49.950]  - seeds: [2] <seeds>
[16:18:49.950]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:49.950] getGlobalsAndPackages() ...
[16:18:49.951] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:49.951] Resolving globals: FALSE
[16:18:49.951] Tweak future expression to call with '...' arguments ...
[16:18:49.951] {
[16:18:49.951]     do.call(function(...) {
[16:18:49.951]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:49.951]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:49.951]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:49.951]             on.exit(options(oopts), add = TRUE)
[16:18:49.951]         }
[16:18:49.951]         {
[16:18:49.951]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:49.951]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:49.951]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:49.951]                   envir = globalenv(), inherits = FALSE)
[16:18:49.951]                 ...future.FUN(...future.X_jj, ...)
[16:18:49.951]             })
[16:18:49.951]         }
[16:18:49.951]     }, args = future.call.arguments)
[16:18:49.951] }
[16:18:49.951] Tweak future expression to call with '...' arguments ... DONE
[16:18:49.951] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:49.952] 
[16:18:49.952] getGlobalsAndPackages() ... DONE
[16:18:49.952] run() for ‘Future’ ...
[16:18:49.952] - state: ‘created’
[16:18:49.952] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:18:49.966] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:49.966] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:18:49.966]   - Field: ‘node’
[16:18:49.966]   - Field: ‘label’
[16:18:49.966]   - Field: ‘local’
[16:18:49.966]   - Field: ‘owner’
[16:18:49.967]   - Field: ‘envir’
[16:18:49.967]   - Field: ‘workers’
[16:18:49.967]   - Field: ‘packages’
[16:18:49.967]   - Field: ‘gc’
[16:18:49.967]   - Field: ‘conditions’
[16:18:49.967]   - Field: ‘persistent’
[16:18:49.967]   - Field: ‘expr’
[16:18:49.967]   - Field: ‘uuid’
[16:18:49.967]   - Field: ‘seed’
[16:18:49.967]   - Field: ‘version’
[16:18:49.967]   - Field: ‘result’
[16:18:49.968]   - Field: ‘asynchronous’
[16:18:49.968]   - Field: ‘calls’
[16:18:49.968]   - Field: ‘globals’
[16:18:49.968]   - Field: ‘stdout’
[16:18:49.968]   - Field: ‘earlySignal’
[16:18:49.968]   - Field: ‘lazy’
[16:18:49.968]   - Field: ‘state’
[16:18:49.968] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:18:49.968] - Launch lazy future ...
[16:18:49.969] Packages needed by the future expression (n = 0): <none>
[16:18:49.969] Packages needed by future strategies (n = 0): <none>
[16:18:49.969] {
[16:18:49.969]     {
[16:18:49.969]         {
[16:18:49.969]             ...future.startTime <- base::Sys.time()
[16:18:49.969]             {
[16:18:49.969]                 {
[16:18:49.969]                   {
[16:18:49.969]                     {
[16:18:49.969]                       base::local({
[16:18:49.969]                         has_future <- base::requireNamespace("future", 
[16:18:49.969]                           quietly = TRUE)
[16:18:49.969]                         if (has_future) {
[16:18:49.969]                           ns <- base::getNamespace("future")
[16:18:49.969]                           version <- ns[[".package"]][["version"]]
[16:18:49.969]                           if (is.null(version)) 
[16:18:49.969]                             version <- utils::packageVersion("future")
[16:18:49.969]                         }
[16:18:49.969]                         else {
[16:18:49.969]                           version <- NULL
[16:18:49.969]                         }
[16:18:49.969]                         if (!has_future || version < "1.8.0") {
[16:18:49.969]                           info <- base::c(r_version = base::gsub("R version ", 
[16:18:49.969]                             "", base::R.version$version.string), 
[16:18:49.969]                             platform = base::sprintf("%s (%s-bit)", 
[16:18:49.969]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:18:49.969]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:18:49.969]                               "release", "version")], collapse = " "), 
[16:18:49.969]                             hostname = base::Sys.info()[["nodename"]])
[16:18:49.969]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:18:49.969]                             info)
[16:18:49.969]                           info <- base::paste(info, collapse = "; ")
[16:18:49.969]                           if (!has_future) {
[16:18:49.969]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:18:49.969]                               info)
[16:18:49.969]                           }
[16:18:49.969]                           else {
[16:18:49.969]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:18:49.969]                               info, version)
[16:18:49.969]                           }
[16:18:49.969]                           base::stop(msg)
[16:18:49.969]                         }
[16:18:49.969]                       })
[16:18:49.969]                     }
[16:18:49.969]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:18:49.969]                     base::options(mc.cores = 1L)
[16:18:49.969]                   }
[16:18:49.969]                   ...future.strategy.old <- future::plan("list")
[16:18:49.969]                   options(future.plan = NULL)
[16:18:49.969]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:18:49.969]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:18:49.969]                 }
[16:18:49.969]                 ...future.workdir <- getwd()
[16:18:49.969]             }
[16:18:49.969]             ...future.oldOptions <- base::as.list(base::.Options)
[16:18:49.969]             ...future.oldEnvVars <- base::Sys.getenv()
[16:18:49.969]         }
[16:18:49.969]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:18:49.969]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:18:49.969]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:18:49.969]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:18:49.969]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:18:49.969]             future.stdout.windows.reencode = NULL, width = 80L)
[16:18:49.969]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:18:49.969]             base::names(...future.oldOptions))
[16:18:49.969]     }
[16:18:49.969]     if (FALSE) {
[16:18:49.969]     }
[16:18:49.969]     else {
[16:18:49.969]         if (TRUE) {
[16:18:49.969]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:18:49.969]                 open = "w")
[16:18:49.969]         }
[16:18:49.969]         else {
[16:18:49.969]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:18:49.969]                 windows = "NUL", "/dev/null"), open = "w")
[16:18:49.969]         }
[16:18:49.969]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:18:49.969]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:18:49.969]             base::sink(type = "output", split = FALSE)
[16:18:49.969]             base::close(...future.stdout)
[16:18:49.969]         }, add = TRUE)
[16:18:49.969]     }
[16:18:49.969]     ...future.frame <- base::sys.nframe()
[16:18:49.969]     ...future.conditions <- base::list()
[16:18:49.969]     ...future.rng <- base::globalenv()$.Random.seed
[16:18:49.969]     if (FALSE) {
[16:18:49.969]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:18:49.969]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:18:49.969]     }
[16:18:49.969]     ...future.result <- base::tryCatch({
[16:18:49.969]         base::withCallingHandlers({
[16:18:49.969]             ...future.value <- base::withVisible(base::local({
[16:18:49.969]                 ...future.makeSendCondition <- base::local({
[16:18:49.969]                   sendCondition <- NULL
[16:18:49.969]                   function(frame = 1L) {
[16:18:49.969]                     if (is.function(sendCondition)) 
[16:18:49.969]                       return(sendCondition)
[16:18:49.969]                     ns <- getNamespace("parallel")
[16:18:49.969]                     if (exists("sendData", mode = "function", 
[16:18:49.969]                       envir = ns)) {
[16:18:49.969]                       parallel_sendData <- get("sendData", mode = "function", 
[16:18:49.969]                         envir = ns)
[16:18:49.969]                       envir <- sys.frame(frame)
[16:18:49.969]                       master <- NULL
[16:18:49.969]                       while (!identical(envir, .GlobalEnv) && 
[16:18:49.969]                         !identical(envir, emptyenv())) {
[16:18:49.969]                         if (exists("master", mode = "list", envir = envir, 
[16:18:49.969]                           inherits = FALSE)) {
[16:18:49.969]                           master <- get("master", mode = "list", 
[16:18:49.969]                             envir = envir, inherits = FALSE)
[16:18:49.969]                           if (inherits(master, c("SOCKnode", 
[16:18:49.969]                             "SOCK0node"))) {
[16:18:49.969]                             sendCondition <<- function(cond) {
[16:18:49.969]                               data <- list(type = "VALUE", value = cond, 
[16:18:49.969]                                 success = TRUE)
[16:18:49.969]                               parallel_sendData(master, data)
[16:18:49.969]                             }
[16:18:49.969]                             return(sendCondition)
[16:18:49.969]                           }
[16:18:49.969]                         }
[16:18:49.969]                         frame <- frame + 1L
[16:18:49.969]                         envir <- sys.frame(frame)
[16:18:49.969]                       }
[16:18:49.969]                     }
[16:18:49.969]                     sendCondition <<- function(cond) NULL
[16:18:49.969]                   }
[16:18:49.969]                 })
[16:18:49.969]                 withCallingHandlers({
[16:18:49.969]                   {
[16:18:49.969]                     do.call(function(...) {
[16:18:49.969]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:49.969]                       if (!identical(...future.globals.maxSize.org, 
[16:18:49.969]                         ...future.globals.maxSize)) {
[16:18:49.969]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:49.969]                         on.exit(options(oopts), add = TRUE)
[16:18:49.969]                       }
[16:18:49.969]                       {
[16:18:49.969]                         lapply(seq_along(...future.elements_ii), 
[16:18:49.969]                           FUN = function(jj) {
[16:18:49.969]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:49.969]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:49.969]                               envir = globalenv(), inherits = FALSE)
[16:18:49.969]                             ...future.FUN(...future.X_jj, ...)
[16:18:49.969]                           })
[16:18:49.969]                       }
[16:18:49.969]                     }, args = future.call.arguments)
[16:18:49.969]                   }
[16:18:49.969]                 }, immediateCondition = function(cond) {
[16:18:49.969]                   sendCondition <- ...future.makeSendCondition()
[16:18:49.969]                   sendCondition(cond)
[16:18:49.969]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:49.969]                   {
[16:18:49.969]                     inherits <- base::inherits
[16:18:49.969]                     invokeRestart <- base::invokeRestart
[16:18:49.969]                     is.null <- base::is.null
[16:18:49.969]                     muffled <- FALSE
[16:18:49.969]                     if (inherits(cond, "message")) {
[16:18:49.969]                       muffled <- grepl(pattern, "muffleMessage")
[16:18:49.969]                       if (muffled) 
[16:18:49.969]                         invokeRestart("muffleMessage")
[16:18:49.969]                     }
[16:18:49.969]                     else if (inherits(cond, "warning")) {
[16:18:49.969]                       muffled <- grepl(pattern, "muffleWarning")
[16:18:49.969]                       if (muffled) 
[16:18:49.969]                         invokeRestart("muffleWarning")
[16:18:49.969]                     }
[16:18:49.969]                     else if (inherits(cond, "condition")) {
[16:18:49.969]                       if (!is.null(pattern)) {
[16:18:49.969]                         computeRestarts <- base::computeRestarts
[16:18:49.969]                         grepl <- base::grepl
[16:18:49.969]                         restarts <- computeRestarts(cond)
[16:18:49.969]                         for (restart in restarts) {
[16:18:49.969]                           name <- restart$name
[16:18:49.969]                           if (is.null(name)) 
[16:18:49.969]                             next
[16:18:49.969]                           if (!grepl(pattern, name)) 
[16:18:49.969]                             next
[16:18:49.969]                           invokeRestart(restart)
[16:18:49.969]                           muffled <- TRUE
[16:18:49.969]                           break
[16:18:49.969]                         }
[16:18:49.969]                       }
[16:18:49.969]                     }
[16:18:49.969]                     invisible(muffled)
[16:18:49.969]                   }
[16:18:49.969]                   muffleCondition(cond)
[16:18:49.969]                 })
[16:18:49.969]             }))
[16:18:49.969]             future::FutureResult(value = ...future.value$value, 
[16:18:49.969]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:49.969]                   ...future.rng), globalenv = if (FALSE) 
[16:18:49.969]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:18:49.969]                     ...future.globalenv.names))
[16:18:49.969]                 else NULL, started = ...future.startTime, version = "1.8")
[16:18:49.969]         }, condition = base::local({
[16:18:49.969]             c <- base::c
[16:18:49.969]             inherits <- base::inherits
[16:18:49.969]             invokeRestart <- base::invokeRestart
[16:18:49.969]             length <- base::length
[16:18:49.969]             list <- base::list
[16:18:49.969]             seq.int <- base::seq.int
[16:18:49.969]             signalCondition <- base::signalCondition
[16:18:49.969]             sys.calls <- base::sys.calls
[16:18:49.969]             `[[` <- base::`[[`
[16:18:49.969]             `+` <- base::`+`
[16:18:49.969]             `<<-` <- base::`<<-`
[16:18:49.969]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:18:49.969]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:18:49.969]                   3L)]
[16:18:49.969]             }
[16:18:49.969]             function(cond) {
[16:18:49.969]                 is_error <- inherits(cond, "error")
[16:18:49.969]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:18:49.969]                   NULL)
[16:18:49.969]                 if (is_error) {
[16:18:49.969]                   sessionInformation <- function() {
[16:18:49.969]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:18:49.969]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:18:49.969]                       search = base::search(), system = base::Sys.info())
[16:18:49.969]                   }
[16:18:49.969]                   ...future.conditions[[length(...future.conditions) + 
[16:18:49.969]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:18:49.969]                     cond$call), session = sessionInformation(), 
[16:18:49.969]                     timestamp = base::Sys.time(), signaled = 0L)
[16:18:49.969]                   signalCondition(cond)
[16:18:49.969]                 }
[16:18:49.969]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:18:49.969]                 "immediateCondition"))) {
[16:18:49.969]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:18:49.969]                   ...future.conditions[[length(...future.conditions) + 
[16:18:49.969]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:18:49.969]                   if (TRUE && !signal) {
[16:18:49.969]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:49.969]                     {
[16:18:49.969]                       inherits <- base::inherits
[16:18:49.969]                       invokeRestart <- base::invokeRestart
[16:18:49.969]                       is.null <- base::is.null
[16:18:49.969]                       muffled <- FALSE
[16:18:49.969]                       if (inherits(cond, "message")) {
[16:18:49.969]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:49.969]                         if (muffled) 
[16:18:49.969]                           invokeRestart("muffleMessage")
[16:18:49.969]                       }
[16:18:49.969]                       else if (inherits(cond, "warning")) {
[16:18:49.969]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:49.969]                         if (muffled) 
[16:18:49.969]                           invokeRestart("muffleWarning")
[16:18:49.969]                       }
[16:18:49.969]                       else if (inherits(cond, "condition")) {
[16:18:49.969]                         if (!is.null(pattern)) {
[16:18:49.969]                           computeRestarts <- base::computeRestarts
[16:18:49.969]                           grepl <- base::grepl
[16:18:49.969]                           restarts <- computeRestarts(cond)
[16:18:49.969]                           for (restart in restarts) {
[16:18:49.969]                             name <- restart$name
[16:18:49.969]                             if (is.null(name)) 
[16:18:49.969]                               next
[16:18:49.969]                             if (!grepl(pattern, name)) 
[16:18:49.969]                               next
[16:18:49.969]                             invokeRestart(restart)
[16:18:49.969]                             muffled <- TRUE
[16:18:49.969]                             break
[16:18:49.969]                           }
[16:18:49.969]                         }
[16:18:49.969]                       }
[16:18:49.969]                       invisible(muffled)
[16:18:49.969]                     }
[16:18:49.969]                     muffleCondition(cond, pattern = "^muffle")
[16:18:49.969]                   }
[16:18:49.969]                 }
[16:18:49.969]                 else {
[16:18:49.969]                   if (TRUE) {
[16:18:49.969]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:49.969]                     {
[16:18:49.969]                       inherits <- base::inherits
[16:18:49.969]                       invokeRestart <- base::invokeRestart
[16:18:49.969]                       is.null <- base::is.null
[16:18:49.969]                       muffled <- FALSE
[16:18:49.969]                       if (inherits(cond, "message")) {
[16:18:49.969]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:49.969]                         if (muffled) 
[16:18:49.969]                           invokeRestart("muffleMessage")
[16:18:49.969]                       }
[16:18:49.969]                       else if (inherits(cond, "warning")) {
[16:18:49.969]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:49.969]                         if (muffled) 
[16:18:49.969]                           invokeRestart("muffleWarning")
[16:18:49.969]                       }
[16:18:49.969]                       else if (inherits(cond, "condition")) {
[16:18:49.969]                         if (!is.null(pattern)) {
[16:18:49.969]                           computeRestarts <- base::computeRestarts
[16:18:49.969]                           grepl <- base::grepl
[16:18:49.969]                           restarts <- computeRestarts(cond)
[16:18:49.969]                           for (restart in restarts) {
[16:18:49.969]                             name <- restart$name
[16:18:49.969]                             if (is.null(name)) 
[16:18:49.969]                               next
[16:18:49.969]                             if (!grepl(pattern, name)) 
[16:18:49.969]                               next
[16:18:49.969]                             invokeRestart(restart)
[16:18:49.969]                             muffled <- TRUE
[16:18:49.969]                             break
[16:18:49.969]                           }
[16:18:49.969]                         }
[16:18:49.969]                       }
[16:18:49.969]                       invisible(muffled)
[16:18:49.969]                     }
[16:18:49.969]                     muffleCondition(cond, pattern = "^muffle")
[16:18:49.969]                   }
[16:18:49.969]                 }
[16:18:49.969]             }
[16:18:49.969]         }))
[16:18:49.969]     }, error = function(ex) {
[16:18:49.969]         base::structure(base::list(value = NULL, visible = NULL, 
[16:18:49.969]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:49.969]                 ...future.rng), started = ...future.startTime, 
[16:18:49.969]             finished = Sys.time(), session_uuid = NA_character_, 
[16:18:49.969]             version = "1.8"), class = "FutureResult")
[16:18:49.969]     }, finally = {
[16:18:49.969]         if (!identical(...future.workdir, getwd())) 
[16:18:49.969]             setwd(...future.workdir)
[16:18:49.969]         {
[16:18:49.969]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:18:49.969]                 ...future.oldOptions$nwarnings <- NULL
[16:18:49.969]             }
[16:18:49.969]             base::options(...future.oldOptions)
[16:18:49.969]             if (.Platform$OS.type == "windows") {
[16:18:49.969]                 old_names <- names(...future.oldEnvVars)
[16:18:49.969]                 envs <- base::Sys.getenv()
[16:18:49.969]                 names <- names(envs)
[16:18:49.969]                 common <- intersect(names, old_names)
[16:18:49.969]                 added <- setdiff(names, old_names)
[16:18:49.969]                 removed <- setdiff(old_names, names)
[16:18:49.969]                 changed <- common[...future.oldEnvVars[common] != 
[16:18:49.969]                   envs[common]]
[16:18:49.969]                 NAMES <- toupper(changed)
[16:18:49.969]                 args <- list()
[16:18:49.969]                 for (kk in seq_along(NAMES)) {
[16:18:49.969]                   name <- changed[[kk]]
[16:18:49.969]                   NAME <- NAMES[[kk]]
[16:18:49.969]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:49.969]                     next
[16:18:49.969]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:49.969]                 }
[16:18:49.969]                 NAMES <- toupper(added)
[16:18:49.969]                 for (kk in seq_along(NAMES)) {
[16:18:49.969]                   name <- added[[kk]]
[16:18:49.969]                   NAME <- NAMES[[kk]]
[16:18:49.969]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:49.969]                     next
[16:18:49.969]                   args[[name]] <- ""
[16:18:49.969]                 }
[16:18:49.969]                 NAMES <- toupper(removed)
[16:18:49.969]                 for (kk in seq_along(NAMES)) {
[16:18:49.969]                   name <- removed[[kk]]
[16:18:49.969]                   NAME <- NAMES[[kk]]
[16:18:49.969]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:49.969]                     next
[16:18:49.969]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:49.969]                 }
[16:18:49.969]                 if (length(args) > 0) 
[16:18:49.969]                   base::do.call(base::Sys.setenv, args = args)
[16:18:49.969]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:18:49.969]             }
[16:18:49.969]             else {
[16:18:49.969]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:18:49.969]             }
[16:18:49.969]             {
[16:18:49.969]                 if (base::length(...future.futureOptionsAdded) > 
[16:18:49.969]                   0L) {
[16:18:49.969]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:18:49.969]                   base::names(opts) <- ...future.futureOptionsAdded
[16:18:49.969]                   base::options(opts)
[16:18:49.969]                 }
[16:18:49.969]                 {
[16:18:49.969]                   {
[16:18:49.969]                     base::options(mc.cores = ...future.mc.cores.old)
[16:18:49.969]                     NULL
[16:18:49.969]                   }
[16:18:49.969]                   options(future.plan = NULL)
[16:18:49.969]                   if (is.na(NA_character_)) 
[16:18:49.969]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:18:49.969]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:18:49.969]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:18:49.969]                     .init = FALSE)
[16:18:49.969]                 }
[16:18:49.969]             }
[16:18:49.969]         }
[16:18:49.969]     })
[16:18:49.969]     if (TRUE) {
[16:18:49.969]         base::sink(type = "output", split = FALSE)
[16:18:49.969]         if (TRUE) {
[16:18:49.969]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:18:49.969]         }
[16:18:49.969]         else {
[16:18:49.969]             ...future.result["stdout"] <- base::list(NULL)
[16:18:49.969]         }
[16:18:49.969]         base::close(...future.stdout)
[16:18:49.969]         ...future.stdout <- NULL
[16:18:49.969]     }
[16:18:49.969]     ...future.result$conditions <- ...future.conditions
[16:18:49.969]     ...future.result$finished <- base::Sys.time()
[16:18:49.969]     ...future.result
[16:18:49.969] }
[16:18:49.972] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[16:18:49.972] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[16:18:49.973] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[16:18:49.973] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[16:18:49.973] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[16:18:49.973] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[16:18:49.974] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[16:18:49.974] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[16:18:49.974] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[16:18:49.974] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[16:18:49.975] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[16:18:49.975] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[16:18:49.975] MultisessionFuture started
[16:18:49.975] - Launch lazy future ... done
[16:18:49.975] run() for ‘MultisessionFuture’ ... done
[16:18:49.975] Created future:
[16:18:49.976] MultisessionFuture:
[16:18:49.976] Label: ‘future_replicate-1’
[16:18:49.976] Expression:
[16:18:49.976] {
[16:18:49.976]     do.call(function(...) {
[16:18:49.976]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:49.976]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:49.976]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:49.976]             on.exit(options(oopts), add = TRUE)
[16:18:49.976]         }
[16:18:49.976]         {
[16:18:49.976]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:49.976]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:49.976]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:49.976]                   envir = globalenv(), inherits = FALSE)
[16:18:49.976]                 ...future.FUN(...future.X_jj, ...)
[16:18:49.976]             })
[16:18:49.976]         }
[16:18:49.976]     }, args = future.call.arguments)
[16:18:49.976] }
[16:18:49.976] Lazy evaluation: FALSE
[16:18:49.976] Asynchronous evaluation: TRUE
[16:18:49.976] Local evaluation: TRUE
[16:18:49.976] Environment: R_GlobalEnv
[16:18:49.976] Capture standard output: TRUE
[16:18:49.976] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:18:49.976] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:18:49.976] Packages: <none>
[16:18:49.976] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:18:49.976] Resolved: FALSE
[16:18:49.976] Value: <not collected>
[16:18:49.976] Conditions captured: <none>
[16:18:49.976] Early signaling: FALSE
[16:18:49.976] Owner process: 20271db5-d788-b537-4432-0a26f2d2d030
[16:18:49.976] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:49.987] Chunk #1 of 2 ... DONE
[16:18:49.987] Chunk #2 of 2 ...
[16:18:49.987]  - Finding globals in 'X' for chunk #2 ...
[16:18:49.988] getGlobalsAndPackages() ...
[16:18:49.988] Searching for globals...
[16:18:49.988] 
[16:18:49.988] Searching for globals ... DONE
[16:18:49.988] - globals: [0] <none>
[16:18:49.988] getGlobalsAndPackages() ... DONE
[16:18:49.988]    + additional globals found: [n=0] 
[16:18:49.989]    + additional namespaces needed: [n=0] 
[16:18:49.989]  - Finding globals in 'X' for chunk #2 ... DONE
[16:18:49.989]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:18:49.989]  - seeds: [3] <seeds>
[16:18:49.989]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:49.989] getGlobalsAndPackages() ...
[16:18:49.989] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:49.989] Resolving globals: FALSE
[16:18:49.989] Tweak future expression to call with '...' arguments ...
[16:18:49.989] {
[16:18:49.989]     do.call(function(...) {
[16:18:49.989]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:49.989]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:49.989]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:49.989]             on.exit(options(oopts), add = TRUE)
[16:18:49.989]         }
[16:18:49.989]         {
[16:18:49.989]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:49.989]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:49.989]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:49.989]                   envir = globalenv(), inherits = FALSE)
[16:18:49.989]                 ...future.FUN(...future.X_jj, ...)
[16:18:49.989]             })
[16:18:49.989]         }
[16:18:49.989]     }, args = future.call.arguments)
[16:18:49.989] }
[16:18:49.990] Tweak future expression to call with '...' arguments ... DONE
[16:18:49.993] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:49.993] 
[16:18:49.993] getGlobalsAndPackages() ... DONE
[16:18:49.993] run() for ‘Future’ ...
[16:18:49.993] - state: ‘created’
[16:18:49.993] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:18:50.007] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:50.008] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:18:50.008]   - Field: ‘node’
[16:18:50.008]   - Field: ‘label’
[16:18:50.008]   - Field: ‘local’
[16:18:50.008]   - Field: ‘owner’
[16:18:50.008]   - Field: ‘envir’
[16:18:50.008]   - Field: ‘workers’
[16:18:50.008]   - Field: ‘packages’
[16:18:50.008]   - Field: ‘gc’
[16:18:50.009]   - Field: ‘conditions’
[16:18:50.009]   - Field: ‘persistent’
[16:18:50.009]   - Field: ‘expr’
[16:18:50.009]   - Field: ‘uuid’
[16:18:50.009]   - Field: ‘seed’
[16:18:50.009]   - Field: ‘version’
[16:18:50.009]   - Field: ‘result’
[16:18:50.009]   - Field: ‘asynchronous’
[16:18:50.009]   - Field: ‘calls’
[16:18:50.009]   - Field: ‘globals’
[16:18:50.009]   - Field: ‘stdout’
[16:18:50.010]   - Field: ‘earlySignal’
[16:18:50.010]   - Field: ‘lazy’
[16:18:50.010]   - Field: ‘state’
[16:18:50.010] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:18:50.010] - Launch lazy future ...
[16:18:50.010] Packages needed by the future expression (n = 0): <none>
[16:18:50.010] Packages needed by future strategies (n = 0): <none>
[16:18:50.011] {
[16:18:50.011]     {
[16:18:50.011]         {
[16:18:50.011]             ...future.startTime <- base::Sys.time()
[16:18:50.011]             {
[16:18:50.011]                 {
[16:18:50.011]                   {
[16:18:50.011]                     {
[16:18:50.011]                       base::local({
[16:18:50.011]                         has_future <- base::requireNamespace("future", 
[16:18:50.011]                           quietly = TRUE)
[16:18:50.011]                         if (has_future) {
[16:18:50.011]                           ns <- base::getNamespace("future")
[16:18:50.011]                           version <- ns[[".package"]][["version"]]
[16:18:50.011]                           if (is.null(version)) 
[16:18:50.011]                             version <- utils::packageVersion("future")
[16:18:50.011]                         }
[16:18:50.011]                         else {
[16:18:50.011]                           version <- NULL
[16:18:50.011]                         }
[16:18:50.011]                         if (!has_future || version < "1.8.0") {
[16:18:50.011]                           info <- base::c(r_version = base::gsub("R version ", 
[16:18:50.011]                             "", base::R.version$version.string), 
[16:18:50.011]                             platform = base::sprintf("%s (%s-bit)", 
[16:18:50.011]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:18:50.011]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:18:50.011]                               "release", "version")], collapse = " "), 
[16:18:50.011]                             hostname = base::Sys.info()[["nodename"]])
[16:18:50.011]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:18:50.011]                             info)
[16:18:50.011]                           info <- base::paste(info, collapse = "; ")
[16:18:50.011]                           if (!has_future) {
[16:18:50.011]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:18:50.011]                               info)
[16:18:50.011]                           }
[16:18:50.011]                           else {
[16:18:50.011]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:18:50.011]                               info, version)
[16:18:50.011]                           }
[16:18:50.011]                           base::stop(msg)
[16:18:50.011]                         }
[16:18:50.011]                       })
[16:18:50.011]                     }
[16:18:50.011]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:18:50.011]                     base::options(mc.cores = 1L)
[16:18:50.011]                   }
[16:18:50.011]                   ...future.strategy.old <- future::plan("list")
[16:18:50.011]                   options(future.plan = NULL)
[16:18:50.011]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:18:50.011]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:18:50.011]                 }
[16:18:50.011]                 ...future.workdir <- getwd()
[16:18:50.011]             }
[16:18:50.011]             ...future.oldOptions <- base::as.list(base::.Options)
[16:18:50.011]             ...future.oldEnvVars <- base::Sys.getenv()
[16:18:50.011]         }
[16:18:50.011]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:18:50.011]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:18:50.011]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:18:50.011]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:18:50.011]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:18:50.011]             future.stdout.windows.reencode = NULL, width = 80L)
[16:18:50.011]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:18:50.011]             base::names(...future.oldOptions))
[16:18:50.011]     }
[16:18:50.011]     if (FALSE) {
[16:18:50.011]     }
[16:18:50.011]     else {
[16:18:50.011]         if (TRUE) {
[16:18:50.011]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:18:50.011]                 open = "w")
[16:18:50.011]         }
[16:18:50.011]         else {
[16:18:50.011]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:18:50.011]                 windows = "NUL", "/dev/null"), open = "w")
[16:18:50.011]         }
[16:18:50.011]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:18:50.011]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:18:50.011]             base::sink(type = "output", split = FALSE)
[16:18:50.011]             base::close(...future.stdout)
[16:18:50.011]         }, add = TRUE)
[16:18:50.011]     }
[16:18:50.011]     ...future.frame <- base::sys.nframe()
[16:18:50.011]     ...future.conditions <- base::list()
[16:18:50.011]     ...future.rng <- base::globalenv()$.Random.seed
[16:18:50.011]     if (FALSE) {
[16:18:50.011]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:18:50.011]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:18:50.011]     }
[16:18:50.011]     ...future.result <- base::tryCatch({
[16:18:50.011]         base::withCallingHandlers({
[16:18:50.011]             ...future.value <- base::withVisible(base::local({
[16:18:50.011]                 ...future.makeSendCondition <- base::local({
[16:18:50.011]                   sendCondition <- NULL
[16:18:50.011]                   function(frame = 1L) {
[16:18:50.011]                     if (is.function(sendCondition)) 
[16:18:50.011]                       return(sendCondition)
[16:18:50.011]                     ns <- getNamespace("parallel")
[16:18:50.011]                     if (exists("sendData", mode = "function", 
[16:18:50.011]                       envir = ns)) {
[16:18:50.011]                       parallel_sendData <- get("sendData", mode = "function", 
[16:18:50.011]                         envir = ns)
[16:18:50.011]                       envir <- sys.frame(frame)
[16:18:50.011]                       master <- NULL
[16:18:50.011]                       while (!identical(envir, .GlobalEnv) && 
[16:18:50.011]                         !identical(envir, emptyenv())) {
[16:18:50.011]                         if (exists("master", mode = "list", envir = envir, 
[16:18:50.011]                           inherits = FALSE)) {
[16:18:50.011]                           master <- get("master", mode = "list", 
[16:18:50.011]                             envir = envir, inherits = FALSE)
[16:18:50.011]                           if (inherits(master, c("SOCKnode", 
[16:18:50.011]                             "SOCK0node"))) {
[16:18:50.011]                             sendCondition <<- function(cond) {
[16:18:50.011]                               data <- list(type = "VALUE", value = cond, 
[16:18:50.011]                                 success = TRUE)
[16:18:50.011]                               parallel_sendData(master, data)
[16:18:50.011]                             }
[16:18:50.011]                             return(sendCondition)
[16:18:50.011]                           }
[16:18:50.011]                         }
[16:18:50.011]                         frame <- frame + 1L
[16:18:50.011]                         envir <- sys.frame(frame)
[16:18:50.011]                       }
[16:18:50.011]                     }
[16:18:50.011]                     sendCondition <<- function(cond) NULL
[16:18:50.011]                   }
[16:18:50.011]                 })
[16:18:50.011]                 withCallingHandlers({
[16:18:50.011]                   {
[16:18:50.011]                     do.call(function(...) {
[16:18:50.011]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:50.011]                       if (!identical(...future.globals.maxSize.org, 
[16:18:50.011]                         ...future.globals.maxSize)) {
[16:18:50.011]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:50.011]                         on.exit(options(oopts), add = TRUE)
[16:18:50.011]                       }
[16:18:50.011]                       {
[16:18:50.011]                         lapply(seq_along(...future.elements_ii), 
[16:18:50.011]                           FUN = function(jj) {
[16:18:50.011]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:50.011]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:50.011]                               envir = globalenv(), inherits = FALSE)
[16:18:50.011]                             ...future.FUN(...future.X_jj, ...)
[16:18:50.011]                           })
[16:18:50.011]                       }
[16:18:50.011]                     }, args = future.call.arguments)
[16:18:50.011]                   }
[16:18:50.011]                 }, immediateCondition = function(cond) {
[16:18:50.011]                   sendCondition <- ...future.makeSendCondition()
[16:18:50.011]                   sendCondition(cond)
[16:18:50.011]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:50.011]                   {
[16:18:50.011]                     inherits <- base::inherits
[16:18:50.011]                     invokeRestart <- base::invokeRestart
[16:18:50.011]                     is.null <- base::is.null
[16:18:50.011]                     muffled <- FALSE
[16:18:50.011]                     if (inherits(cond, "message")) {
[16:18:50.011]                       muffled <- grepl(pattern, "muffleMessage")
[16:18:50.011]                       if (muffled) 
[16:18:50.011]                         invokeRestart("muffleMessage")
[16:18:50.011]                     }
[16:18:50.011]                     else if (inherits(cond, "warning")) {
[16:18:50.011]                       muffled <- grepl(pattern, "muffleWarning")
[16:18:50.011]                       if (muffled) 
[16:18:50.011]                         invokeRestart("muffleWarning")
[16:18:50.011]                     }
[16:18:50.011]                     else if (inherits(cond, "condition")) {
[16:18:50.011]                       if (!is.null(pattern)) {
[16:18:50.011]                         computeRestarts <- base::computeRestarts
[16:18:50.011]                         grepl <- base::grepl
[16:18:50.011]                         restarts <- computeRestarts(cond)
[16:18:50.011]                         for (restart in restarts) {
[16:18:50.011]                           name <- restart$name
[16:18:50.011]                           if (is.null(name)) 
[16:18:50.011]                             next
[16:18:50.011]                           if (!grepl(pattern, name)) 
[16:18:50.011]                             next
[16:18:50.011]                           invokeRestart(restart)
[16:18:50.011]                           muffled <- TRUE
[16:18:50.011]                           break
[16:18:50.011]                         }
[16:18:50.011]                       }
[16:18:50.011]                     }
[16:18:50.011]                     invisible(muffled)
[16:18:50.011]                   }
[16:18:50.011]                   muffleCondition(cond)
[16:18:50.011]                 })
[16:18:50.011]             }))
[16:18:50.011]             future::FutureResult(value = ...future.value$value, 
[16:18:50.011]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:50.011]                   ...future.rng), globalenv = if (FALSE) 
[16:18:50.011]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:18:50.011]                     ...future.globalenv.names))
[16:18:50.011]                 else NULL, started = ...future.startTime, version = "1.8")
[16:18:50.011]         }, condition = base::local({
[16:18:50.011]             c <- base::c
[16:18:50.011]             inherits <- base::inherits
[16:18:50.011]             invokeRestart <- base::invokeRestart
[16:18:50.011]             length <- base::length
[16:18:50.011]             list <- base::list
[16:18:50.011]             seq.int <- base::seq.int
[16:18:50.011]             signalCondition <- base::signalCondition
[16:18:50.011]             sys.calls <- base::sys.calls
[16:18:50.011]             `[[` <- base::`[[`
[16:18:50.011]             `+` <- base::`+`
[16:18:50.011]             `<<-` <- base::`<<-`
[16:18:50.011]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:18:50.011]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:18:50.011]                   3L)]
[16:18:50.011]             }
[16:18:50.011]             function(cond) {
[16:18:50.011]                 is_error <- inherits(cond, "error")
[16:18:50.011]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:18:50.011]                   NULL)
[16:18:50.011]                 if (is_error) {
[16:18:50.011]                   sessionInformation <- function() {
[16:18:50.011]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:18:50.011]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:18:50.011]                       search = base::search(), system = base::Sys.info())
[16:18:50.011]                   }
[16:18:50.011]                   ...future.conditions[[length(...future.conditions) + 
[16:18:50.011]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:18:50.011]                     cond$call), session = sessionInformation(), 
[16:18:50.011]                     timestamp = base::Sys.time(), signaled = 0L)
[16:18:50.011]                   signalCondition(cond)
[16:18:50.011]                 }
[16:18:50.011]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:18:50.011]                 "immediateCondition"))) {
[16:18:50.011]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:18:50.011]                   ...future.conditions[[length(...future.conditions) + 
[16:18:50.011]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:18:50.011]                   if (TRUE && !signal) {
[16:18:50.011]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:50.011]                     {
[16:18:50.011]                       inherits <- base::inherits
[16:18:50.011]                       invokeRestart <- base::invokeRestart
[16:18:50.011]                       is.null <- base::is.null
[16:18:50.011]                       muffled <- FALSE
[16:18:50.011]                       if (inherits(cond, "message")) {
[16:18:50.011]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:50.011]                         if (muffled) 
[16:18:50.011]                           invokeRestart("muffleMessage")
[16:18:50.011]                       }
[16:18:50.011]                       else if (inherits(cond, "warning")) {
[16:18:50.011]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:50.011]                         if (muffled) 
[16:18:50.011]                           invokeRestart("muffleWarning")
[16:18:50.011]                       }
[16:18:50.011]                       else if (inherits(cond, "condition")) {
[16:18:50.011]                         if (!is.null(pattern)) {
[16:18:50.011]                           computeRestarts <- base::computeRestarts
[16:18:50.011]                           grepl <- base::grepl
[16:18:50.011]                           restarts <- computeRestarts(cond)
[16:18:50.011]                           for (restart in restarts) {
[16:18:50.011]                             name <- restart$name
[16:18:50.011]                             if (is.null(name)) 
[16:18:50.011]                               next
[16:18:50.011]                             if (!grepl(pattern, name)) 
[16:18:50.011]                               next
[16:18:50.011]                             invokeRestart(restart)
[16:18:50.011]                             muffled <- TRUE
[16:18:50.011]                             break
[16:18:50.011]                           }
[16:18:50.011]                         }
[16:18:50.011]                       }
[16:18:50.011]                       invisible(muffled)
[16:18:50.011]                     }
[16:18:50.011]                     muffleCondition(cond, pattern = "^muffle")
[16:18:50.011]                   }
[16:18:50.011]                 }
[16:18:50.011]                 else {
[16:18:50.011]                   if (TRUE) {
[16:18:50.011]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:50.011]                     {
[16:18:50.011]                       inherits <- base::inherits
[16:18:50.011]                       invokeRestart <- base::invokeRestart
[16:18:50.011]                       is.null <- base::is.null
[16:18:50.011]                       muffled <- FALSE
[16:18:50.011]                       if (inherits(cond, "message")) {
[16:18:50.011]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:50.011]                         if (muffled) 
[16:18:50.011]                           invokeRestart("muffleMessage")
[16:18:50.011]                       }
[16:18:50.011]                       else if (inherits(cond, "warning")) {
[16:18:50.011]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:50.011]                         if (muffled) 
[16:18:50.011]                           invokeRestart("muffleWarning")
[16:18:50.011]                       }
[16:18:50.011]                       else if (inherits(cond, "condition")) {
[16:18:50.011]                         if (!is.null(pattern)) {
[16:18:50.011]                           computeRestarts <- base::computeRestarts
[16:18:50.011]                           grepl <- base::grepl
[16:18:50.011]                           restarts <- computeRestarts(cond)
[16:18:50.011]                           for (restart in restarts) {
[16:18:50.011]                             name <- restart$name
[16:18:50.011]                             if (is.null(name)) 
[16:18:50.011]                               next
[16:18:50.011]                             if (!grepl(pattern, name)) 
[16:18:50.011]                               next
[16:18:50.011]                             invokeRestart(restart)
[16:18:50.011]                             muffled <- TRUE
[16:18:50.011]                             break
[16:18:50.011]                           }
[16:18:50.011]                         }
[16:18:50.011]                       }
[16:18:50.011]                       invisible(muffled)
[16:18:50.011]                     }
[16:18:50.011]                     muffleCondition(cond, pattern = "^muffle")
[16:18:50.011]                   }
[16:18:50.011]                 }
[16:18:50.011]             }
[16:18:50.011]         }))
[16:18:50.011]     }, error = function(ex) {
[16:18:50.011]         base::structure(base::list(value = NULL, visible = NULL, 
[16:18:50.011]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:50.011]                 ...future.rng), started = ...future.startTime, 
[16:18:50.011]             finished = Sys.time(), session_uuid = NA_character_, 
[16:18:50.011]             version = "1.8"), class = "FutureResult")
[16:18:50.011]     }, finally = {
[16:18:50.011]         if (!identical(...future.workdir, getwd())) 
[16:18:50.011]             setwd(...future.workdir)
[16:18:50.011]         {
[16:18:50.011]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:18:50.011]                 ...future.oldOptions$nwarnings <- NULL
[16:18:50.011]             }
[16:18:50.011]             base::options(...future.oldOptions)
[16:18:50.011]             if (.Platform$OS.type == "windows") {
[16:18:50.011]                 old_names <- names(...future.oldEnvVars)
[16:18:50.011]                 envs <- base::Sys.getenv()
[16:18:50.011]                 names <- names(envs)
[16:18:50.011]                 common <- intersect(names, old_names)
[16:18:50.011]                 added <- setdiff(names, old_names)
[16:18:50.011]                 removed <- setdiff(old_names, names)
[16:18:50.011]                 changed <- common[...future.oldEnvVars[common] != 
[16:18:50.011]                   envs[common]]
[16:18:50.011]                 NAMES <- toupper(changed)
[16:18:50.011]                 args <- list()
[16:18:50.011]                 for (kk in seq_along(NAMES)) {
[16:18:50.011]                   name <- changed[[kk]]
[16:18:50.011]                   NAME <- NAMES[[kk]]
[16:18:50.011]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:50.011]                     next
[16:18:50.011]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:50.011]                 }
[16:18:50.011]                 NAMES <- toupper(added)
[16:18:50.011]                 for (kk in seq_along(NAMES)) {
[16:18:50.011]                   name <- added[[kk]]
[16:18:50.011]                   NAME <- NAMES[[kk]]
[16:18:50.011]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:50.011]                     next
[16:18:50.011]                   args[[name]] <- ""
[16:18:50.011]                 }
[16:18:50.011]                 NAMES <- toupper(removed)
[16:18:50.011]                 for (kk in seq_along(NAMES)) {
[16:18:50.011]                   name <- removed[[kk]]
[16:18:50.011]                   NAME <- NAMES[[kk]]
[16:18:50.011]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:50.011]                     next
[16:18:50.011]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:50.011]                 }
[16:18:50.011]                 if (length(args) > 0) 
[16:18:50.011]                   base::do.call(base::Sys.setenv, args = args)
[16:18:50.011]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:18:50.011]             }
[16:18:50.011]             else {
[16:18:50.011]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:18:50.011]             }
[16:18:50.011]             {
[16:18:50.011]                 if (base::length(...future.futureOptionsAdded) > 
[16:18:50.011]                   0L) {
[16:18:50.011]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:18:50.011]                   base::names(opts) <- ...future.futureOptionsAdded
[16:18:50.011]                   base::options(opts)
[16:18:50.011]                 }
[16:18:50.011]                 {
[16:18:50.011]                   {
[16:18:50.011]                     base::options(mc.cores = ...future.mc.cores.old)
[16:18:50.011]                     NULL
[16:18:50.011]                   }
[16:18:50.011]                   options(future.plan = NULL)
[16:18:50.011]                   if (is.na(NA_character_)) 
[16:18:50.011]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:18:50.011]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:18:50.011]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:18:50.011]                     .init = FALSE)
[16:18:50.011]                 }
[16:18:50.011]             }
[16:18:50.011]         }
[16:18:50.011]     })
[16:18:50.011]     if (TRUE) {
[16:18:50.011]         base::sink(type = "output", split = FALSE)
[16:18:50.011]         if (TRUE) {
[16:18:50.011]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:18:50.011]         }
[16:18:50.011]         else {
[16:18:50.011]             ...future.result["stdout"] <- base::list(NULL)
[16:18:50.011]         }
[16:18:50.011]         base::close(...future.stdout)
[16:18:50.011]         ...future.stdout <- NULL
[16:18:50.011]     }
[16:18:50.011]     ...future.result$conditions <- ...future.conditions
[16:18:50.011]     ...future.result$finished <- base::Sys.time()
[16:18:50.011]     ...future.result
[16:18:50.011] }
[16:18:50.013] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[16:18:50.014] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[16:18:50.014] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[16:18:50.014] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[16:18:50.015] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[16:18:50.015] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[16:18:50.015] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[16:18:50.015] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[16:18:50.015] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[16:18:50.016] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[16:18:50.016] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[16:18:50.016] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[16:18:50.016] MultisessionFuture started
[16:18:50.017] - Launch lazy future ... done
[16:18:50.017] run() for ‘MultisessionFuture’ ... done
[16:18:50.017] Created future:
[16:18:50.019] receiveMessageFromWorker() for ClusterFuture ...
[16:18:50.019] - Validating connection of MultisessionFuture
[16:18:50.019] - received message: FutureResult
[16:18:50.019] - Received FutureResult
[16:18:50.019] - Erased future from FutureRegistry
[16:18:50.019] result() for ClusterFuture ...
[16:18:50.019] - result already collected: FutureResult
[16:18:50.019] result() for ClusterFuture ... done
[16:18:50.020] receiveMessageFromWorker() for ClusterFuture ... done
[16:18:50.017] MultisessionFuture:
[16:18:50.017] Label: ‘future_replicate-2’
[16:18:50.017] Expression:
[16:18:50.017] {
[16:18:50.017]     do.call(function(...) {
[16:18:50.017]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:50.017]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:50.017]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:50.017]             on.exit(options(oopts), add = TRUE)
[16:18:50.017]         }
[16:18:50.017]         {
[16:18:50.017]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:50.017]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:50.017]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:50.017]                   envir = globalenv(), inherits = FALSE)
[16:18:50.017]                 ...future.FUN(...future.X_jj, ...)
[16:18:50.017]             })
[16:18:50.017]         }
[16:18:50.017]     }, args = future.call.arguments)
[16:18:50.017] }
[16:18:50.017] Lazy evaluation: FALSE
[16:18:50.017] Asynchronous evaluation: TRUE
[16:18:50.017] Local evaluation: TRUE
[16:18:50.017] Environment: R_GlobalEnv
[16:18:50.017] Capture standard output: TRUE
[16:18:50.017] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:18:50.017] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:18:50.017] Packages: <none>
[16:18:50.017] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:18:50.017] Resolved: TRUE
[16:18:50.017] Value: <not collected>
[16:18:50.017] Conditions captured: <none>
[16:18:50.017] Early signaling: FALSE
[16:18:50.017] Owner process: 20271db5-d788-b537-4432-0a26f2d2d030
[16:18:50.017] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:50.020] Chunk #2 of 2 ... DONE
[16:18:50.020] Launching 2 futures (chunks) ... DONE
[16:18:50.020] Resolving 2 futures (chunks) ...
[16:18:50.020] resolve() on list ...
[16:18:50.020]  recursive: 0
[16:18:50.020]  length: 2
[16:18:50.020] 
[16:18:50.021] receiveMessageFromWorker() for ClusterFuture ...
[16:18:50.021] - Validating connection of MultisessionFuture
[16:18:50.021] - received message: FutureResult
[16:18:50.021] - Received FutureResult
[16:18:50.021] - Erased future from FutureRegistry
[16:18:50.021] result() for ClusterFuture ...
[16:18:50.022] - result already collected: FutureResult
[16:18:50.022] result() for ClusterFuture ... done
[16:18:50.022] receiveMessageFromWorker() for ClusterFuture ... done
[16:18:50.022] Future #1
[16:18:50.022] result() for ClusterFuture ...
[16:18:50.022] - result already collected: FutureResult
[16:18:50.022] result() for ClusterFuture ... done
[16:18:50.022] result() for ClusterFuture ...
[16:18:50.022] - result already collected: FutureResult
[16:18:50.022] result() for ClusterFuture ... done
[16:18:50.022] signalConditionsASAP(MultisessionFuture, pos=1) ...
[16:18:50.023] - nx: 2
[16:18:50.023] - relay: TRUE
[16:18:50.023] - stdout: TRUE
[16:18:50.023] - signal: TRUE
[16:18:50.023] - resignal: FALSE
[16:18:50.023] - force: TRUE
[16:18:50.023] - relayed: [n=2] FALSE, FALSE
[16:18:50.023] - queued futures: [n=2] FALSE, FALSE
[16:18:50.023]  - until=1
[16:18:50.023]  - relaying element #1
[16:18:50.023] result() for ClusterFuture ...
[16:18:50.023] - result already collected: FutureResult
[16:18:50.024] result() for ClusterFuture ... done
[16:18:50.024] result() for ClusterFuture ...
[16:18:50.024] - result already collected: FutureResult
[16:18:50.024] result() for ClusterFuture ... done
[16:18:50.024] result() for ClusterFuture ...
[16:18:50.024] - result already collected: FutureResult
[16:18:50.024] result() for ClusterFuture ... done
[16:18:50.024] result() for ClusterFuture ...
[16:18:50.024] - result already collected: FutureResult
[16:18:50.024] result() for ClusterFuture ... done
[16:18:50.025] - relayed: [n=2] TRUE, FALSE
[16:18:50.025] - queued futures: [n=2] TRUE, FALSE
[16:18:50.025] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[16:18:50.025]  length: 1 (resolved future 1)
[16:18:50.025] Future #2
[16:18:50.025] result() for ClusterFuture ...
[16:18:50.025] - result already collected: FutureResult
[16:18:50.025] result() for ClusterFuture ... done
[16:18:50.025] result() for ClusterFuture ...
[16:18:50.025] - result already collected: FutureResult
[16:18:50.025] result() for ClusterFuture ... done
[16:18:50.026] signalConditionsASAP(MultisessionFuture, pos=2) ...
[16:18:50.026] - nx: 2
[16:18:50.026] - relay: TRUE
[16:18:50.026] - stdout: TRUE
[16:18:50.026] - signal: TRUE
[16:18:50.026] - resignal: FALSE
[16:18:50.026] - force: TRUE
[16:18:50.026] - relayed: [n=2] TRUE, FALSE
[16:18:50.026] - queued futures: [n=2] TRUE, FALSE
[16:18:50.026]  - until=2
[16:18:50.026]  - relaying element #2
[16:18:50.026] result() for ClusterFuture ...
[16:18:50.027] - result already collected: FutureResult
[16:18:50.027] result() for ClusterFuture ... done
[16:18:50.027] result() for ClusterFuture ...
[16:18:50.027] - result already collected: FutureResult
[16:18:50.027] result() for ClusterFuture ... done
[16:18:50.027] result() for ClusterFuture ...
[16:18:50.027] - result already collected: FutureResult
[16:18:50.027] result() for ClusterFuture ... done
[16:18:50.027] result() for ClusterFuture ...
[16:18:50.027] - result already collected: FutureResult
[16:18:50.027] result() for ClusterFuture ... done
[16:18:50.028] - relayed: [n=2] TRUE, TRUE
[16:18:50.028] - queued futures: [n=2] TRUE, TRUE
[16:18:50.028] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[16:18:50.028]  length: 0 (resolved future 2)
[16:18:50.028] Relaying remaining futures
[16:18:50.028] signalConditionsASAP(NULL, pos=0) ...
[16:18:50.028] - nx: 2
[16:18:50.028] - relay: TRUE
[16:18:50.028] - stdout: TRUE
[16:18:50.028] - signal: TRUE
[16:18:50.028] - resignal: FALSE
[16:18:50.029] - force: TRUE
[16:18:50.029] - relayed: [n=2] TRUE, TRUE
[16:18:50.029] - queued futures: [n=2] TRUE, TRUE
 - flush all
[16:18:50.029] - relayed: [n=2] TRUE, TRUE
[16:18:50.029] - queued futures: [n=2] TRUE, TRUE
[16:18:50.029] signalConditionsASAP(NULL, pos=0) ... done
[16:18:50.029] resolve() on list ... DONE
[16:18:50.029] result() for ClusterFuture ...
[16:18:50.029] - result already collected: FutureResult
[16:18:50.029] result() for ClusterFuture ... done
[16:18:50.029] result() for ClusterFuture ...
[16:18:50.030] - result already collected: FutureResult
[16:18:50.030] result() for ClusterFuture ... done
[16:18:50.030] result() for ClusterFuture ...
[16:18:50.030] - result already collected: FutureResult
[16:18:50.030] result() for ClusterFuture ... done
[16:18:50.030] result() for ClusterFuture ...
[16:18:50.030] - result already collected: FutureResult
[16:18:50.030] result() for ClusterFuture ... done
[16:18:50.030]  - Number of value chunks collected: 2
[16:18:50.030] Resolving 2 futures (chunks) ... DONE
[16:18:50.030] Reducing values from 2 chunks ...
[16:18:50.031]  - Number of values collected after concatenation: 5
[16:18:50.031]  - Number of values expected: 5
[16:18:50.031] Reducing values from 2 chunks ... DONE
[16:18:50.031] future_lapply() ... DONE
[16:18:50.031] future_lapply() ...
[16:18:50.031] Generating random seeds ...
[16:18:50.032] Generating random seed streams for 5 elements ...
[16:18:50.032] Generating random seed streams for 5 elements ... DONE
[16:18:50.032] Generating random seeds ... DONE
[16:18:50.032] Will set RNG state on exit: 10403, 6, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:18:50.036] Number of chunks: 2
[16:18:50.036] getGlobalsAndPackagesXApply() ...
[16:18:50.036]  - future.globals: TRUE
[16:18:50.037] getGlobalsAndPackages() ...
[16:18:50.037] Searching for globals...
[16:18:50.038] - globals found: [2] ‘FUN’, ‘sample’
[16:18:50.038] Searching for globals ... DONE
[16:18:50.038] Resolving globals: FALSE
[16:18:50.038] The total size of the 1 globals is 616 bytes (616 bytes)
[16:18:50.039] The total size of the 1 globals exported for future expression (‘FUN()’) is 616 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘FUN’ (616 bytes of class ‘function’)
[16:18:50.039] - globals: [1] ‘FUN’
[16:18:50.039] 
[16:18:50.039] getGlobalsAndPackages() ... DONE
[16:18:50.039]  - globals found/used: [n=1] ‘FUN’
[16:18:50.039]  - needed namespaces: [n=0] 
[16:18:50.039] Finding globals ... DONE
[16:18:50.039]  - use_args: TRUE
[16:18:50.039]  - Getting '...' globals ...
[16:18:50.040] resolve() on list ...
[16:18:50.040]  recursive: 0
[16:18:50.040]  length: 1
[16:18:50.040]  elements: ‘...’
[16:18:50.040]  length: 0 (resolved future 1)
[16:18:50.040] resolve() on list ... DONE
[16:18:50.040]    - '...' content: [n=0] 
[16:18:50.040] List of 1
[16:18:50.040]  $ ...: list()
[16:18:50.040]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:50.040]  - attr(*, "where")=List of 1
[16:18:50.040]   ..$ ...:<environment: 0x55e79f002408> 
[16:18:50.040]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:50.040]  - attr(*, "resolved")= logi TRUE
[16:18:50.040]  - attr(*, "total_size")= num NA
[16:18:50.043]  - Getting '...' globals ... DONE
[16:18:50.043] Globals to be used in all futures (chunks): [n=2] ‘...future.FUN’, ‘...’
[16:18:50.043] List of 2
[16:18:50.043]  $ ...future.FUN:function (...)  
[16:18:50.043]  $ ...          : list()
[16:18:50.043]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:50.043]  - attr(*, "where")=List of 2
[16:18:50.043]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:18:50.043]   ..$ ...          :<environment: 0x55e79f002408> 
[16:18:50.043]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:50.043]  - attr(*, "resolved")= logi FALSE
[16:18:50.043]  - attr(*, "total_size")= num 616
[16:18:50.046] Packages to be attached in all futures: [n=0] 
[16:18:50.046] getGlobalsAndPackagesXApply() ... DONE
[16:18:50.046] Number of futures (= number of chunks): 2
[16:18:50.046] Launching 2 futures (chunks) ...
[16:18:50.046] Chunk #1 of 2 ...
[16:18:50.047]  - Finding globals in 'X' for chunk #1 ...
[16:18:50.047] getGlobalsAndPackages() ...
[16:18:50.047] Searching for globals...
[16:18:50.047] 
[16:18:50.047] Searching for globals ... DONE
[16:18:50.047] - globals: [0] <none>
[16:18:50.047] getGlobalsAndPackages() ... DONE
[16:18:50.047]    + additional globals found: [n=0] 
[16:18:50.047]    + additional namespaces needed: [n=0] 
[16:18:50.048]  - Finding globals in 'X' for chunk #1 ... DONE
[16:18:50.048]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:18:50.048]  - seeds: [2] <seeds>
[16:18:50.048]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:50.048] getGlobalsAndPackages() ...
[16:18:50.048] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:50.048] Resolving globals: FALSE
[16:18:50.048] Tweak future expression to call with '...' arguments ...
[16:18:50.048] {
[16:18:50.048]     do.call(function(...) {
[16:18:50.048]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:50.048]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:50.048]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:50.048]             on.exit(options(oopts), add = TRUE)
[16:18:50.048]         }
[16:18:50.048]         {
[16:18:50.048]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:50.048]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:50.048]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:50.048]                   envir = globalenv(), inherits = FALSE)
[16:18:50.048]                 ...future.FUN(...future.X_jj, ...)
[16:18:50.048]             })
[16:18:50.048]         }
[16:18:50.048]     }, args = future.call.arguments)
[16:18:50.048] }
[16:18:50.049] Tweak future expression to call with '...' arguments ... DONE
[16:18:50.049] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:50.049] 
[16:18:50.049] getGlobalsAndPackages() ... DONE
[16:18:50.050] run() for ‘Future’ ...
[16:18:50.050] - state: ‘created’
[16:18:50.050] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:18:50.064] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:50.064] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:18:50.064]   - Field: ‘node’
[16:18:50.064]   - Field: ‘label’
[16:18:50.064]   - Field: ‘local’
[16:18:50.065]   - Field: ‘owner’
[16:18:50.065]   - Field: ‘envir’
[16:18:50.065]   - Field: ‘workers’
[16:18:50.065]   - Field: ‘packages’
[16:18:50.065]   - Field: ‘gc’
[16:18:50.065]   - Field: ‘conditions’
[16:18:50.065]   - Field: ‘persistent’
[16:18:50.065]   - Field: ‘expr’
[16:18:50.065]   - Field: ‘uuid’
[16:18:50.065]   - Field: ‘seed’
[16:18:50.065]   - Field: ‘version’
[16:18:50.066]   - Field: ‘result’
[16:18:50.066]   - Field: ‘asynchronous’
[16:18:50.066]   - Field: ‘calls’
[16:18:50.066]   - Field: ‘globals’
[16:18:50.066]   - Field: ‘stdout’
[16:18:50.066]   - Field: ‘earlySignal’
[16:18:50.066]   - Field: ‘lazy’
[16:18:50.066]   - Field: ‘state’
[16:18:50.066] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:18:50.066] - Launch lazy future ...
[16:18:50.067] Packages needed by the future expression (n = 0): <none>
[16:18:50.067] Packages needed by future strategies (n = 0): <none>
[16:18:50.067] {
[16:18:50.067]     {
[16:18:50.067]         {
[16:18:50.067]             ...future.startTime <- base::Sys.time()
[16:18:50.067]             {
[16:18:50.067]                 {
[16:18:50.067]                   {
[16:18:50.067]                     {
[16:18:50.067]                       base::local({
[16:18:50.067]                         has_future <- base::requireNamespace("future", 
[16:18:50.067]                           quietly = TRUE)
[16:18:50.067]                         if (has_future) {
[16:18:50.067]                           ns <- base::getNamespace("future")
[16:18:50.067]                           version <- ns[[".package"]][["version"]]
[16:18:50.067]                           if (is.null(version)) 
[16:18:50.067]                             version <- utils::packageVersion("future")
[16:18:50.067]                         }
[16:18:50.067]                         else {
[16:18:50.067]                           version <- NULL
[16:18:50.067]                         }
[16:18:50.067]                         if (!has_future || version < "1.8.0") {
[16:18:50.067]                           info <- base::c(r_version = base::gsub("R version ", 
[16:18:50.067]                             "", base::R.version$version.string), 
[16:18:50.067]                             platform = base::sprintf("%s (%s-bit)", 
[16:18:50.067]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:18:50.067]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:18:50.067]                               "release", "version")], collapse = " "), 
[16:18:50.067]                             hostname = base::Sys.info()[["nodename"]])
[16:18:50.067]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:18:50.067]                             info)
[16:18:50.067]                           info <- base::paste(info, collapse = "; ")
[16:18:50.067]                           if (!has_future) {
[16:18:50.067]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:18:50.067]                               info)
[16:18:50.067]                           }
[16:18:50.067]                           else {
[16:18:50.067]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:18:50.067]                               info, version)
[16:18:50.067]                           }
[16:18:50.067]                           base::stop(msg)
[16:18:50.067]                         }
[16:18:50.067]                       })
[16:18:50.067]                     }
[16:18:50.067]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:18:50.067]                     base::options(mc.cores = 1L)
[16:18:50.067]                   }
[16:18:50.067]                   ...future.strategy.old <- future::plan("list")
[16:18:50.067]                   options(future.plan = NULL)
[16:18:50.067]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:18:50.067]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:18:50.067]                 }
[16:18:50.067]                 ...future.workdir <- getwd()
[16:18:50.067]             }
[16:18:50.067]             ...future.oldOptions <- base::as.list(base::.Options)
[16:18:50.067]             ...future.oldEnvVars <- base::Sys.getenv()
[16:18:50.067]         }
[16:18:50.067]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:18:50.067]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:18:50.067]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:18:50.067]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:18:50.067]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:18:50.067]             future.stdout.windows.reencode = NULL, width = 80L)
[16:18:50.067]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:18:50.067]             base::names(...future.oldOptions))
[16:18:50.067]     }
[16:18:50.067]     if (FALSE) {
[16:18:50.067]     }
[16:18:50.067]     else {
[16:18:50.067]         if (TRUE) {
[16:18:50.067]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:18:50.067]                 open = "w")
[16:18:50.067]         }
[16:18:50.067]         else {
[16:18:50.067]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:18:50.067]                 windows = "NUL", "/dev/null"), open = "w")
[16:18:50.067]         }
[16:18:50.067]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:18:50.067]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:18:50.067]             base::sink(type = "output", split = FALSE)
[16:18:50.067]             base::close(...future.stdout)
[16:18:50.067]         }, add = TRUE)
[16:18:50.067]     }
[16:18:50.067]     ...future.frame <- base::sys.nframe()
[16:18:50.067]     ...future.conditions <- base::list()
[16:18:50.067]     ...future.rng <- base::globalenv()$.Random.seed
[16:18:50.067]     if (FALSE) {
[16:18:50.067]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:18:50.067]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:18:50.067]     }
[16:18:50.067]     ...future.result <- base::tryCatch({
[16:18:50.067]         base::withCallingHandlers({
[16:18:50.067]             ...future.value <- base::withVisible(base::local({
[16:18:50.067]                 ...future.makeSendCondition <- base::local({
[16:18:50.067]                   sendCondition <- NULL
[16:18:50.067]                   function(frame = 1L) {
[16:18:50.067]                     if (is.function(sendCondition)) 
[16:18:50.067]                       return(sendCondition)
[16:18:50.067]                     ns <- getNamespace("parallel")
[16:18:50.067]                     if (exists("sendData", mode = "function", 
[16:18:50.067]                       envir = ns)) {
[16:18:50.067]                       parallel_sendData <- get("sendData", mode = "function", 
[16:18:50.067]                         envir = ns)
[16:18:50.067]                       envir <- sys.frame(frame)
[16:18:50.067]                       master <- NULL
[16:18:50.067]                       while (!identical(envir, .GlobalEnv) && 
[16:18:50.067]                         !identical(envir, emptyenv())) {
[16:18:50.067]                         if (exists("master", mode = "list", envir = envir, 
[16:18:50.067]                           inherits = FALSE)) {
[16:18:50.067]                           master <- get("master", mode = "list", 
[16:18:50.067]                             envir = envir, inherits = FALSE)
[16:18:50.067]                           if (inherits(master, c("SOCKnode", 
[16:18:50.067]                             "SOCK0node"))) {
[16:18:50.067]                             sendCondition <<- function(cond) {
[16:18:50.067]                               data <- list(type = "VALUE", value = cond, 
[16:18:50.067]                                 success = TRUE)
[16:18:50.067]                               parallel_sendData(master, data)
[16:18:50.067]                             }
[16:18:50.067]                             return(sendCondition)
[16:18:50.067]                           }
[16:18:50.067]                         }
[16:18:50.067]                         frame <- frame + 1L
[16:18:50.067]                         envir <- sys.frame(frame)
[16:18:50.067]                       }
[16:18:50.067]                     }
[16:18:50.067]                     sendCondition <<- function(cond) NULL
[16:18:50.067]                   }
[16:18:50.067]                 })
[16:18:50.067]                 withCallingHandlers({
[16:18:50.067]                   {
[16:18:50.067]                     do.call(function(...) {
[16:18:50.067]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:50.067]                       if (!identical(...future.globals.maxSize.org, 
[16:18:50.067]                         ...future.globals.maxSize)) {
[16:18:50.067]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:50.067]                         on.exit(options(oopts), add = TRUE)
[16:18:50.067]                       }
[16:18:50.067]                       {
[16:18:50.067]                         lapply(seq_along(...future.elements_ii), 
[16:18:50.067]                           FUN = function(jj) {
[16:18:50.067]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:50.067]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:50.067]                               envir = globalenv(), inherits = FALSE)
[16:18:50.067]                             ...future.FUN(...future.X_jj, ...)
[16:18:50.067]                           })
[16:18:50.067]                       }
[16:18:50.067]                     }, args = future.call.arguments)
[16:18:50.067]                   }
[16:18:50.067]                 }, immediateCondition = function(cond) {
[16:18:50.067]                   sendCondition <- ...future.makeSendCondition()
[16:18:50.067]                   sendCondition(cond)
[16:18:50.067]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:50.067]                   {
[16:18:50.067]                     inherits <- base::inherits
[16:18:50.067]                     invokeRestart <- base::invokeRestart
[16:18:50.067]                     is.null <- base::is.null
[16:18:50.067]                     muffled <- FALSE
[16:18:50.067]                     if (inherits(cond, "message")) {
[16:18:50.067]                       muffled <- grepl(pattern, "muffleMessage")
[16:18:50.067]                       if (muffled) 
[16:18:50.067]                         invokeRestart("muffleMessage")
[16:18:50.067]                     }
[16:18:50.067]                     else if (inherits(cond, "warning")) {
[16:18:50.067]                       muffled <- grepl(pattern, "muffleWarning")
[16:18:50.067]                       if (muffled) 
[16:18:50.067]                         invokeRestart("muffleWarning")
[16:18:50.067]                     }
[16:18:50.067]                     else if (inherits(cond, "condition")) {
[16:18:50.067]                       if (!is.null(pattern)) {
[16:18:50.067]                         computeRestarts <- base::computeRestarts
[16:18:50.067]                         grepl <- base::grepl
[16:18:50.067]                         restarts <- computeRestarts(cond)
[16:18:50.067]                         for (restart in restarts) {
[16:18:50.067]                           name <- restart$name
[16:18:50.067]                           if (is.null(name)) 
[16:18:50.067]                             next
[16:18:50.067]                           if (!grepl(pattern, name)) 
[16:18:50.067]                             next
[16:18:50.067]                           invokeRestart(restart)
[16:18:50.067]                           muffled <- TRUE
[16:18:50.067]                           break
[16:18:50.067]                         }
[16:18:50.067]                       }
[16:18:50.067]                     }
[16:18:50.067]                     invisible(muffled)
[16:18:50.067]                   }
[16:18:50.067]                   muffleCondition(cond)
[16:18:50.067]                 })
[16:18:50.067]             }))
[16:18:50.067]             future::FutureResult(value = ...future.value$value, 
[16:18:50.067]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:50.067]                   ...future.rng), globalenv = if (FALSE) 
[16:18:50.067]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:18:50.067]                     ...future.globalenv.names))
[16:18:50.067]                 else NULL, started = ...future.startTime, version = "1.8")
[16:18:50.067]         }, condition = base::local({
[16:18:50.067]             c <- base::c
[16:18:50.067]             inherits <- base::inherits
[16:18:50.067]             invokeRestart <- base::invokeRestart
[16:18:50.067]             length <- base::length
[16:18:50.067]             list <- base::list
[16:18:50.067]             seq.int <- base::seq.int
[16:18:50.067]             signalCondition <- base::signalCondition
[16:18:50.067]             sys.calls <- base::sys.calls
[16:18:50.067]             `[[` <- base::`[[`
[16:18:50.067]             `+` <- base::`+`
[16:18:50.067]             `<<-` <- base::`<<-`
[16:18:50.067]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:18:50.067]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:18:50.067]                   3L)]
[16:18:50.067]             }
[16:18:50.067]             function(cond) {
[16:18:50.067]                 is_error <- inherits(cond, "error")
[16:18:50.067]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:18:50.067]                   NULL)
[16:18:50.067]                 if (is_error) {
[16:18:50.067]                   sessionInformation <- function() {
[16:18:50.067]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:18:50.067]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:18:50.067]                       search = base::search(), system = base::Sys.info())
[16:18:50.067]                   }
[16:18:50.067]                   ...future.conditions[[length(...future.conditions) + 
[16:18:50.067]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:18:50.067]                     cond$call), session = sessionInformation(), 
[16:18:50.067]                     timestamp = base::Sys.time(), signaled = 0L)
[16:18:50.067]                   signalCondition(cond)
[16:18:50.067]                 }
[16:18:50.067]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:18:50.067]                 "immediateCondition"))) {
[16:18:50.067]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:18:50.067]                   ...future.conditions[[length(...future.conditions) + 
[16:18:50.067]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:18:50.067]                   if (TRUE && !signal) {
[16:18:50.067]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:50.067]                     {
[16:18:50.067]                       inherits <- base::inherits
[16:18:50.067]                       invokeRestart <- base::invokeRestart
[16:18:50.067]                       is.null <- base::is.null
[16:18:50.067]                       muffled <- FALSE
[16:18:50.067]                       if (inherits(cond, "message")) {
[16:18:50.067]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:50.067]                         if (muffled) 
[16:18:50.067]                           invokeRestart("muffleMessage")
[16:18:50.067]                       }
[16:18:50.067]                       else if (inherits(cond, "warning")) {
[16:18:50.067]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:50.067]                         if (muffled) 
[16:18:50.067]                           invokeRestart("muffleWarning")
[16:18:50.067]                       }
[16:18:50.067]                       else if (inherits(cond, "condition")) {
[16:18:50.067]                         if (!is.null(pattern)) {
[16:18:50.067]                           computeRestarts <- base::computeRestarts
[16:18:50.067]                           grepl <- base::grepl
[16:18:50.067]                           restarts <- computeRestarts(cond)
[16:18:50.067]                           for (restart in restarts) {
[16:18:50.067]                             name <- restart$name
[16:18:50.067]                             if (is.null(name)) 
[16:18:50.067]                               next
[16:18:50.067]                             if (!grepl(pattern, name)) 
[16:18:50.067]                               next
[16:18:50.067]                             invokeRestart(restart)
[16:18:50.067]                             muffled <- TRUE
[16:18:50.067]                             break
[16:18:50.067]                           }
[16:18:50.067]                         }
[16:18:50.067]                       }
[16:18:50.067]                       invisible(muffled)
[16:18:50.067]                     }
[16:18:50.067]                     muffleCondition(cond, pattern = "^muffle")
[16:18:50.067]                   }
[16:18:50.067]                 }
[16:18:50.067]                 else {
[16:18:50.067]                   if (TRUE) {
[16:18:50.067]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:50.067]                     {
[16:18:50.067]                       inherits <- base::inherits
[16:18:50.067]                       invokeRestart <- base::invokeRestart
[16:18:50.067]                       is.null <- base::is.null
[16:18:50.067]                       muffled <- FALSE
[16:18:50.067]                       if (inherits(cond, "message")) {
[16:18:50.067]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:50.067]                         if (muffled) 
[16:18:50.067]                           invokeRestart("muffleMessage")
[16:18:50.067]                       }
[16:18:50.067]                       else if (inherits(cond, "warning")) {
[16:18:50.067]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:50.067]                         if (muffled) 
[16:18:50.067]                           invokeRestart("muffleWarning")
[16:18:50.067]                       }
[16:18:50.067]                       else if (inherits(cond, "condition")) {
[16:18:50.067]                         if (!is.null(pattern)) {
[16:18:50.067]                           computeRestarts <- base::computeRestarts
[16:18:50.067]                           grepl <- base::grepl
[16:18:50.067]                           restarts <- computeRestarts(cond)
[16:18:50.067]                           for (restart in restarts) {
[16:18:50.067]                             name <- restart$name
[16:18:50.067]                             if (is.null(name)) 
[16:18:50.067]                               next
[16:18:50.067]                             if (!grepl(pattern, name)) 
[16:18:50.067]                               next
[16:18:50.067]                             invokeRestart(restart)
[16:18:50.067]                             muffled <- TRUE
[16:18:50.067]                             break
[16:18:50.067]                           }
[16:18:50.067]                         }
[16:18:50.067]                       }
[16:18:50.067]                       invisible(muffled)
[16:18:50.067]                     }
[16:18:50.067]                     muffleCondition(cond, pattern = "^muffle")
[16:18:50.067]                   }
[16:18:50.067]                 }
[16:18:50.067]             }
[16:18:50.067]         }))
[16:18:50.067]     }, error = function(ex) {
[16:18:50.067]         base::structure(base::list(value = NULL, visible = NULL, 
[16:18:50.067]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:50.067]                 ...future.rng), started = ...future.startTime, 
[16:18:50.067]             finished = Sys.time(), session_uuid = NA_character_, 
[16:18:50.067]             version = "1.8"), class = "FutureResult")
[16:18:50.067]     }, finally = {
[16:18:50.067]         if (!identical(...future.workdir, getwd())) 
[16:18:50.067]             setwd(...future.workdir)
[16:18:50.067]         {
[16:18:50.067]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:18:50.067]                 ...future.oldOptions$nwarnings <- NULL
[16:18:50.067]             }
[16:18:50.067]             base::options(...future.oldOptions)
[16:18:50.067]             if (.Platform$OS.type == "windows") {
[16:18:50.067]                 old_names <- names(...future.oldEnvVars)
[16:18:50.067]                 envs <- base::Sys.getenv()
[16:18:50.067]                 names <- names(envs)
[16:18:50.067]                 common <- intersect(names, old_names)
[16:18:50.067]                 added <- setdiff(names, old_names)
[16:18:50.067]                 removed <- setdiff(old_names, names)
[16:18:50.067]                 changed <- common[...future.oldEnvVars[common] != 
[16:18:50.067]                   envs[common]]
[16:18:50.067]                 NAMES <- toupper(changed)
[16:18:50.067]                 args <- list()
[16:18:50.067]                 for (kk in seq_along(NAMES)) {
[16:18:50.067]                   name <- changed[[kk]]
[16:18:50.067]                   NAME <- NAMES[[kk]]
[16:18:50.067]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:50.067]                     next
[16:18:50.067]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:50.067]                 }
[16:18:50.067]                 NAMES <- toupper(added)
[16:18:50.067]                 for (kk in seq_along(NAMES)) {
[16:18:50.067]                   name <- added[[kk]]
[16:18:50.067]                   NAME <- NAMES[[kk]]
[16:18:50.067]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:50.067]                     next
[16:18:50.067]                   args[[name]] <- ""
[16:18:50.067]                 }
[16:18:50.067]                 NAMES <- toupper(removed)
[16:18:50.067]                 for (kk in seq_along(NAMES)) {
[16:18:50.067]                   name <- removed[[kk]]
[16:18:50.067]                   NAME <- NAMES[[kk]]
[16:18:50.067]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:50.067]                     next
[16:18:50.067]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:50.067]                 }
[16:18:50.067]                 if (length(args) > 0) 
[16:18:50.067]                   base::do.call(base::Sys.setenv, args = args)
[16:18:50.067]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:18:50.067]             }
[16:18:50.067]             else {
[16:18:50.067]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:18:50.067]             }
[16:18:50.067]             {
[16:18:50.067]                 if (base::length(...future.futureOptionsAdded) > 
[16:18:50.067]                   0L) {
[16:18:50.067]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:18:50.067]                   base::names(opts) <- ...future.futureOptionsAdded
[16:18:50.067]                   base::options(opts)
[16:18:50.067]                 }
[16:18:50.067]                 {
[16:18:50.067]                   {
[16:18:50.067]                     base::options(mc.cores = ...future.mc.cores.old)
[16:18:50.067]                     NULL
[16:18:50.067]                   }
[16:18:50.067]                   options(future.plan = NULL)
[16:18:50.067]                   if (is.na(NA_character_)) 
[16:18:50.067]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:18:50.067]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:18:50.067]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:18:50.067]                     .init = FALSE)
[16:18:50.067]                 }
[16:18:50.067]             }
[16:18:50.067]         }
[16:18:50.067]     })
[16:18:50.067]     if (TRUE) {
[16:18:50.067]         base::sink(type = "output", split = FALSE)
[16:18:50.067]         if (TRUE) {
[16:18:50.067]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:18:50.067]         }
[16:18:50.067]         else {
[16:18:50.067]             ...future.result["stdout"] <- base::list(NULL)
[16:18:50.067]         }
[16:18:50.067]         base::close(...future.stdout)
[16:18:50.067]         ...future.stdout <- NULL
[16:18:50.067]     }
[16:18:50.067]     ...future.result$conditions <- ...future.conditions
[16:18:50.067]     ...future.result$finished <- base::Sys.time()
[16:18:50.067]     ...future.result
[16:18:50.067] }
[16:18:50.070] Exporting 5 global objects (616 bytes) to cluster node #1 ...
[16:18:50.070] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ...
[16:18:50.071] Exporting ‘...future.FUN’ (616 bytes) to cluster node #1 ... DONE
[16:18:50.071] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[16:18:50.071] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[16:18:50.071] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[16:18:50.072] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[16:18:50.072] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[16:18:50.072] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[16:18:50.072] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[16:18:50.073] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[16:18:50.073] Exporting 5 global objects (616 bytes) to cluster node #1 ... DONE
[16:18:50.073] MultisessionFuture started
[16:18:50.073] - Launch lazy future ... done
[16:18:50.073] run() for ‘MultisessionFuture’ ... done
[16:18:50.073] Created future:
[16:18:50.074] MultisessionFuture:
[16:18:50.074] Label: ‘future_replicate-1’
[16:18:50.074] Expression:
[16:18:50.074] {
[16:18:50.074]     do.call(function(...) {
[16:18:50.074]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:50.074]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:50.074]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:50.074]             on.exit(options(oopts), add = TRUE)
[16:18:50.074]         }
[16:18:50.074]         {
[16:18:50.074]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:50.074]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:50.074]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:50.074]                   envir = globalenv(), inherits = FALSE)
[16:18:50.074]                 ...future.FUN(...future.X_jj, ...)
[16:18:50.074]             })
[16:18:50.074]         }
[16:18:50.074]     }, args = future.call.arguments)
[16:18:50.074] }
[16:18:50.074] Lazy evaluation: FALSE
[16:18:50.074] Asynchronous evaluation: TRUE
[16:18:50.074] Local evaluation: TRUE
[16:18:50.074] Environment: R_GlobalEnv
[16:18:50.074] Capture standard output: TRUE
[16:18:50.074] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:18:50.074] Globals: 5 objects totaling 888 bytes (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, list ‘...future.seeds_ii’ of 160 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:18:50.074] Packages: <none>
[16:18:50.074] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:18:50.074] Resolved: FALSE
[16:18:50.074] Value: <not collected>
[16:18:50.074] Conditions captured: <none>
[16:18:50.074] Early signaling: FALSE
[16:18:50.074] Owner process: 20271db5-d788-b537-4432-0a26f2d2d030
[16:18:50.074] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:50.085] Chunk #1 of 2 ... DONE
[16:18:50.085] Chunk #2 of 2 ...
[16:18:50.085]  - Finding globals in 'X' for chunk #2 ...
[16:18:50.085] getGlobalsAndPackages() ...
[16:18:50.086] Searching for globals...
[16:18:50.086] 
[16:18:50.086] Searching for globals ... DONE
[16:18:50.086] - globals: [0] <none>
[16:18:50.086] getGlobalsAndPackages() ... DONE
[16:18:50.086]    + additional globals found: [n=0] 
[16:18:50.086]    + additional namespaces needed: [n=0] 
[16:18:50.086]  - Finding globals in 'X' for chunk #2 ... DONE
[16:18:50.086]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:18:50.087]  - seeds: [3] <seeds>
[16:18:50.087]  - All globals exported: [n=5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:50.087] getGlobalsAndPackages() ...
[16:18:50.087] - globals passed as-is: [5] ‘...future.FUN’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:50.087] Resolving globals: FALSE
[16:18:50.087] Tweak future expression to call with '...' arguments ...
[16:18:50.087] {
[16:18:50.087]     do.call(function(...) {
[16:18:50.087]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:50.087]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:50.087]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:50.087]             on.exit(options(oopts), add = TRUE)
[16:18:50.087]         }
[16:18:50.087]         {
[16:18:50.087]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:50.087]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:50.087]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:50.087]                   envir = globalenv(), inherits = FALSE)
[16:18:50.087]                 ...future.FUN(...future.X_jj, ...)
[16:18:50.087]             })
[16:18:50.087]         }
[16:18:50.087]     }, args = future.call.arguments)
[16:18:50.087] }
[16:18:50.087] Tweak future expression to call with '...' arguments ... DONE
[16:18:50.088] - globals: [5] ‘...future.FUN’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:50.088] 
[16:18:50.088] getGlobalsAndPackages() ... DONE
[16:18:50.088] run() for ‘Future’ ...
[16:18:50.088] - state: ‘created’
[16:18:50.089] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:18:50.102] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:50.102] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:18:50.103]   - Field: ‘node’
[16:18:50.103]   - Field: ‘label’
[16:18:50.103]   - Field: ‘local’
[16:18:50.103]   - Field: ‘owner’
[16:18:50.103]   - Field: ‘envir’
[16:18:50.103]   - Field: ‘workers’
[16:18:50.103]   - Field: ‘packages’
[16:18:50.103]   - Field: ‘gc’
[16:18:50.103]   - Field: ‘conditions’
[16:18:50.103]   - Field: ‘persistent’
[16:18:50.104]   - Field: ‘expr’
[16:18:50.104]   - Field: ‘uuid’
[16:18:50.104]   - Field: ‘seed’
[16:18:50.104]   - Field: ‘version’
[16:18:50.104]   - Field: ‘result’
[16:18:50.104]   - Field: ‘asynchronous’
[16:18:50.104]   - Field: ‘calls’
[16:18:50.104]   - Field: ‘globals’
[16:18:50.104]   - Field: ‘stdout’
[16:18:50.105]   - Field: ‘earlySignal’
[16:18:50.105]   - Field: ‘lazy’
[16:18:50.105]   - Field: ‘state’
[16:18:50.105] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:18:50.105] - Launch lazy future ...
[16:18:50.105] Packages needed by the future expression (n = 0): <none>
[16:18:50.105] Packages needed by future strategies (n = 0): <none>
[16:18:50.106] {
[16:18:50.106]     {
[16:18:50.106]         {
[16:18:50.106]             ...future.startTime <- base::Sys.time()
[16:18:50.106]             {
[16:18:50.106]                 {
[16:18:50.106]                   {
[16:18:50.106]                     {
[16:18:50.106]                       base::local({
[16:18:50.106]                         has_future <- base::requireNamespace("future", 
[16:18:50.106]                           quietly = TRUE)
[16:18:50.106]                         if (has_future) {
[16:18:50.106]                           ns <- base::getNamespace("future")
[16:18:50.106]                           version <- ns[[".package"]][["version"]]
[16:18:50.106]                           if (is.null(version)) 
[16:18:50.106]                             version <- utils::packageVersion("future")
[16:18:50.106]                         }
[16:18:50.106]                         else {
[16:18:50.106]                           version <- NULL
[16:18:50.106]                         }
[16:18:50.106]                         if (!has_future || version < "1.8.0") {
[16:18:50.106]                           info <- base::c(r_version = base::gsub("R version ", 
[16:18:50.106]                             "", base::R.version$version.string), 
[16:18:50.106]                             platform = base::sprintf("%s (%s-bit)", 
[16:18:50.106]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:18:50.106]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:18:50.106]                               "release", "version")], collapse = " "), 
[16:18:50.106]                             hostname = base::Sys.info()[["nodename"]])
[16:18:50.106]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:18:50.106]                             info)
[16:18:50.106]                           info <- base::paste(info, collapse = "; ")
[16:18:50.106]                           if (!has_future) {
[16:18:50.106]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:18:50.106]                               info)
[16:18:50.106]                           }
[16:18:50.106]                           else {
[16:18:50.106]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:18:50.106]                               info, version)
[16:18:50.106]                           }
[16:18:50.106]                           base::stop(msg)
[16:18:50.106]                         }
[16:18:50.106]                       })
[16:18:50.106]                     }
[16:18:50.106]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:18:50.106]                     base::options(mc.cores = 1L)
[16:18:50.106]                   }
[16:18:50.106]                   ...future.strategy.old <- future::plan("list")
[16:18:50.106]                   options(future.plan = NULL)
[16:18:50.106]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:18:50.106]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:18:50.106]                 }
[16:18:50.106]                 ...future.workdir <- getwd()
[16:18:50.106]             }
[16:18:50.106]             ...future.oldOptions <- base::as.list(base::.Options)
[16:18:50.106]             ...future.oldEnvVars <- base::Sys.getenv()
[16:18:50.106]         }
[16:18:50.106]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:18:50.106]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:18:50.106]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:18:50.106]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:18:50.106]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:18:50.106]             future.stdout.windows.reencode = NULL, width = 80L)
[16:18:50.106]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:18:50.106]             base::names(...future.oldOptions))
[16:18:50.106]     }
[16:18:50.106]     if (FALSE) {
[16:18:50.106]     }
[16:18:50.106]     else {
[16:18:50.106]         if (TRUE) {
[16:18:50.106]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:18:50.106]                 open = "w")
[16:18:50.106]         }
[16:18:50.106]         else {
[16:18:50.106]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:18:50.106]                 windows = "NUL", "/dev/null"), open = "w")
[16:18:50.106]         }
[16:18:50.106]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:18:50.106]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:18:50.106]             base::sink(type = "output", split = FALSE)
[16:18:50.106]             base::close(...future.stdout)
[16:18:50.106]         }, add = TRUE)
[16:18:50.106]     }
[16:18:50.106]     ...future.frame <- base::sys.nframe()
[16:18:50.106]     ...future.conditions <- base::list()
[16:18:50.106]     ...future.rng <- base::globalenv()$.Random.seed
[16:18:50.106]     if (FALSE) {
[16:18:50.106]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:18:50.106]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:18:50.106]     }
[16:18:50.106]     ...future.result <- base::tryCatch({
[16:18:50.106]         base::withCallingHandlers({
[16:18:50.106]             ...future.value <- base::withVisible(base::local({
[16:18:50.106]                 ...future.makeSendCondition <- base::local({
[16:18:50.106]                   sendCondition <- NULL
[16:18:50.106]                   function(frame = 1L) {
[16:18:50.106]                     if (is.function(sendCondition)) 
[16:18:50.106]                       return(sendCondition)
[16:18:50.106]                     ns <- getNamespace("parallel")
[16:18:50.106]                     if (exists("sendData", mode = "function", 
[16:18:50.106]                       envir = ns)) {
[16:18:50.106]                       parallel_sendData <- get("sendData", mode = "function", 
[16:18:50.106]                         envir = ns)
[16:18:50.106]                       envir <- sys.frame(frame)
[16:18:50.106]                       master <- NULL
[16:18:50.106]                       while (!identical(envir, .GlobalEnv) && 
[16:18:50.106]                         !identical(envir, emptyenv())) {
[16:18:50.106]                         if (exists("master", mode = "list", envir = envir, 
[16:18:50.106]                           inherits = FALSE)) {
[16:18:50.106]                           master <- get("master", mode = "list", 
[16:18:50.106]                             envir = envir, inherits = FALSE)
[16:18:50.106]                           if (inherits(master, c("SOCKnode", 
[16:18:50.106]                             "SOCK0node"))) {
[16:18:50.106]                             sendCondition <<- function(cond) {
[16:18:50.106]                               data <- list(type = "VALUE", value = cond, 
[16:18:50.106]                                 success = TRUE)
[16:18:50.106]                               parallel_sendData(master, data)
[16:18:50.106]                             }
[16:18:50.106]                             return(sendCondition)
[16:18:50.106]                           }
[16:18:50.106]                         }
[16:18:50.106]                         frame <- frame + 1L
[16:18:50.106]                         envir <- sys.frame(frame)
[16:18:50.106]                       }
[16:18:50.106]                     }
[16:18:50.106]                     sendCondition <<- function(cond) NULL
[16:18:50.106]                   }
[16:18:50.106]                 })
[16:18:50.106]                 withCallingHandlers({
[16:18:50.106]                   {
[16:18:50.106]                     do.call(function(...) {
[16:18:50.106]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:50.106]                       if (!identical(...future.globals.maxSize.org, 
[16:18:50.106]                         ...future.globals.maxSize)) {
[16:18:50.106]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:50.106]                         on.exit(options(oopts), add = TRUE)
[16:18:50.106]                       }
[16:18:50.106]                       {
[16:18:50.106]                         lapply(seq_along(...future.elements_ii), 
[16:18:50.106]                           FUN = function(jj) {
[16:18:50.106]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:50.106]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:50.106]                               envir = globalenv(), inherits = FALSE)
[16:18:50.106]                             ...future.FUN(...future.X_jj, ...)
[16:18:50.106]                           })
[16:18:50.106]                       }
[16:18:50.106]                     }, args = future.call.arguments)
[16:18:50.106]                   }
[16:18:50.106]                 }, immediateCondition = function(cond) {
[16:18:50.106]                   sendCondition <- ...future.makeSendCondition()
[16:18:50.106]                   sendCondition(cond)
[16:18:50.106]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:50.106]                   {
[16:18:50.106]                     inherits <- base::inherits
[16:18:50.106]                     invokeRestart <- base::invokeRestart
[16:18:50.106]                     is.null <- base::is.null
[16:18:50.106]                     muffled <- FALSE
[16:18:50.106]                     if (inherits(cond, "message")) {
[16:18:50.106]                       muffled <- grepl(pattern, "muffleMessage")
[16:18:50.106]                       if (muffled) 
[16:18:50.106]                         invokeRestart("muffleMessage")
[16:18:50.106]                     }
[16:18:50.106]                     else if (inherits(cond, "warning")) {
[16:18:50.106]                       muffled <- grepl(pattern, "muffleWarning")
[16:18:50.106]                       if (muffled) 
[16:18:50.106]                         invokeRestart("muffleWarning")
[16:18:50.106]                     }
[16:18:50.106]                     else if (inherits(cond, "condition")) {
[16:18:50.106]                       if (!is.null(pattern)) {
[16:18:50.106]                         computeRestarts <- base::computeRestarts
[16:18:50.106]                         grepl <- base::grepl
[16:18:50.106]                         restarts <- computeRestarts(cond)
[16:18:50.106]                         for (restart in restarts) {
[16:18:50.106]                           name <- restart$name
[16:18:50.106]                           if (is.null(name)) 
[16:18:50.106]                             next
[16:18:50.106]                           if (!grepl(pattern, name)) 
[16:18:50.106]                             next
[16:18:50.106]                           invokeRestart(restart)
[16:18:50.106]                           muffled <- TRUE
[16:18:50.106]                           break
[16:18:50.106]                         }
[16:18:50.106]                       }
[16:18:50.106]                     }
[16:18:50.106]                     invisible(muffled)
[16:18:50.106]                   }
[16:18:50.106]                   muffleCondition(cond)
[16:18:50.106]                 })
[16:18:50.106]             }))
[16:18:50.106]             future::FutureResult(value = ...future.value$value, 
[16:18:50.106]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:50.106]                   ...future.rng), globalenv = if (FALSE) 
[16:18:50.106]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:18:50.106]                     ...future.globalenv.names))
[16:18:50.106]                 else NULL, started = ...future.startTime, version = "1.8")
[16:18:50.106]         }, condition = base::local({
[16:18:50.106]             c <- base::c
[16:18:50.106]             inherits <- base::inherits
[16:18:50.106]             invokeRestart <- base::invokeRestart
[16:18:50.106]             length <- base::length
[16:18:50.106]             list <- base::list
[16:18:50.106]             seq.int <- base::seq.int
[16:18:50.106]             signalCondition <- base::signalCondition
[16:18:50.106]             sys.calls <- base::sys.calls
[16:18:50.106]             `[[` <- base::`[[`
[16:18:50.106]             `+` <- base::`+`
[16:18:50.106]             `<<-` <- base::`<<-`
[16:18:50.106]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:18:50.106]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:18:50.106]                   3L)]
[16:18:50.106]             }
[16:18:50.106]             function(cond) {
[16:18:50.106]                 is_error <- inherits(cond, "error")
[16:18:50.106]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:18:50.106]                   NULL)
[16:18:50.106]                 if (is_error) {
[16:18:50.106]                   sessionInformation <- function() {
[16:18:50.106]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:18:50.106]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:18:50.106]                       search = base::search(), system = base::Sys.info())
[16:18:50.106]                   }
[16:18:50.106]                   ...future.conditions[[length(...future.conditions) + 
[16:18:50.106]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:18:50.106]                     cond$call), session = sessionInformation(), 
[16:18:50.106]                     timestamp = base::Sys.time(), signaled = 0L)
[16:18:50.106]                   signalCondition(cond)
[16:18:50.106]                 }
[16:18:50.106]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:18:50.106]                 "immediateCondition"))) {
[16:18:50.106]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:18:50.106]                   ...future.conditions[[length(...future.conditions) + 
[16:18:50.106]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:18:50.106]                   if (TRUE && !signal) {
[16:18:50.106]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:50.106]                     {
[16:18:50.106]                       inherits <- base::inherits
[16:18:50.106]                       invokeRestart <- base::invokeRestart
[16:18:50.106]                       is.null <- base::is.null
[16:18:50.106]                       muffled <- FALSE
[16:18:50.106]                       if (inherits(cond, "message")) {
[16:18:50.106]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:50.106]                         if (muffled) 
[16:18:50.106]                           invokeRestart("muffleMessage")
[16:18:50.106]                       }
[16:18:50.106]                       else if (inherits(cond, "warning")) {
[16:18:50.106]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:50.106]                         if (muffled) 
[16:18:50.106]                           invokeRestart("muffleWarning")
[16:18:50.106]                       }
[16:18:50.106]                       else if (inherits(cond, "condition")) {
[16:18:50.106]                         if (!is.null(pattern)) {
[16:18:50.106]                           computeRestarts <- base::computeRestarts
[16:18:50.106]                           grepl <- base::grepl
[16:18:50.106]                           restarts <- computeRestarts(cond)
[16:18:50.106]                           for (restart in restarts) {
[16:18:50.106]                             name <- restart$name
[16:18:50.106]                             if (is.null(name)) 
[16:18:50.106]                               next
[16:18:50.106]                             if (!grepl(pattern, name)) 
[16:18:50.106]                               next
[16:18:50.106]                             invokeRestart(restart)
[16:18:50.106]                             muffled <- TRUE
[16:18:50.106]                             break
[16:18:50.106]                           }
[16:18:50.106]                         }
[16:18:50.106]                       }
[16:18:50.106]                       invisible(muffled)
[16:18:50.106]                     }
[16:18:50.106]                     muffleCondition(cond, pattern = "^muffle")
[16:18:50.106]                   }
[16:18:50.106]                 }
[16:18:50.106]                 else {
[16:18:50.106]                   if (TRUE) {
[16:18:50.106]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:50.106]                     {
[16:18:50.106]                       inherits <- base::inherits
[16:18:50.106]                       invokeRestart <- base::invokeRestart
[16:18:50.106]                       is.null <- base::is.null
[16:18:50.106]                       muffled <- FALSE
[16:18:50.106]                       if (inherits(cond, "message")) {
[16:18:50.106]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:50.106]                         if (muffled) 
[16:18:50.106]                           invokeRestart("muffleMessage")
[16:18:50.106]                       }
[16:18:50.106]                       else if (inherits(cond, "warning")) {
[16:18:50.106]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:50.106]                         if (muffled) 
[16:18:50.106]                           invokeRestart("muffleWarning")
[16:18:50.106]                       }
[16:18:50.106]                       else if (inherits(cond, "condition")) {
[16:18:50.106]                         if (!is.null(pattern)) {
[16:18:50.106]                           computeRestarts <- base::computeRestarts
[16:18:50.106]                           grepl <- base::grepl
[16:18:50.106]                           restarts <- computeRestarts(cond)
[16:18:50.106]                           for (restart in restarts) {
[16:18:50.106]                             name <- restart$name
[16:18:50.106]                             if (is.null(name)) 
[16:18:50.106]                               next
[16:18:50.106]                             if (!grepl(pattern, name)) 
[16:18:50.106]                               next
[16:18:50.106]                             invokeRestart(restart)
[16:18:50.106]                             muffled <- TRUE
[16:18:50.106]                             break
[16:18:50.106]                           }
[16:18:50.106]                         }
[16:18:50.106]                       }
[16:18:50.106]                       invisible(muffled)
[16:18:50.106]                     }
[16:18:50.106]                     muffleCondition(cond, pattern = "^muffle")
[16:18:50.106]                   }
[16:18:50.106]                 }
[16:18:50.106]             }
[16:18:50.106]         }))
[16:18:50.106]     }, error = function(ex) {
[16:18:50.106]         base::structure(base::list(value = NULL, visible = NULL, 
[16:18:50.106]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:50.106]                 ...future.rng), started = ...future.startTime, 
[16:18:50.106]             finished = Sys.time(), session_uuid = NA_character_, 
[16:18:50.106]             version = "1.8"), class = "FutureResult")
[16:18:50.106]     }, finally = {
[16:18:50.106]         if (!identical(...future.workdir, getwd())) 
[16:18:50.106]             setwd(...future.workdir)
[16:18:50.106]         {
[16:18:50.106]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:18:50.106]                 ...future.oldOptions$nwarnings <- NULL
[16:18:50.106]             }
[16:18:50.106]             base::options(...future.oldOptions)
[16:18:50.106]             if (.Platform$OS.type == "windows") {
[16:18:50.106]                 old_names <- names(...future.oldEnvVars)
[16:18:50.106]                 envs <- base::Sys.getenv()
[16:18:50.106]                 names <- names(envs)
[16:18:50.106]                 common <- intersect(names, old_names)
[16:18:50.106]                 added <- setdiff(names, old_names)
[16:18:50.106]                 removed <- setdiff(old_names, names)
[16:18:50.106]                 changed <- common[...future.oldEnvVars[common] != 
[16:18:50.106]                   envs[common]]
[16:18:50.106]                 NAMES <- toupper(changed)
[16:18:50.106]                 args <- list()
[16:18:50.106]                 for (kk in seq_along(NAMES)) {
[16:18:50.106]                   name <- changed[[kk]]
[16:18:50.106]                   NAME <- NAMES[[kk]]
[16:18:50.106]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:50.106]                     next
[16:18:50.106]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:50.106]                 }
[16:18:50.106]                 NAMES <- toupper(added)
[16:18:50.106]                 for (kk in seq_along(NAMES)) {
[16:18:50.106]                   name <- added[[kk]]
[16:18:50.106]                   NAME <- NAMES[[kk]]
[16:18:50.106]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:50.106]                     next
[16:18:50.106]                   args[[name]] <- ""
[16:18:50.106]                 }
[16:18:50.106]                 NAMES <- toupper(removed)
[16:18:50.106]                 for (kk in seq_along(NAMES)) {
[16:18:50.106]                   name <- removed[[kk]]
[16:18:50.106]                   NAME <- NAMES[[kk]]
[16:18:50.106]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:50.106]                     next
[16:18:50.106]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:50.106]                 }
[16:18:50.106]                 if (length(args) > 0) 
[16:18:50.106]                   base::do.call(base::Sys.setenv, args = args)
[16:18:50.106]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:18:50.106]             }
[16:18:50.106]             else {
[16:18:50.106]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:18:50.106]             }
[16:18:50.106]             {
[16:18:50.106]                 if (base::length(...future.futureOptionsAdded) > 
[16:18:50.106]                   0L) {
[16:18:50.106]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:18:50.106]                   base::names(opts) <- ...future.futureOptionsAdded
[16:18:50.106]                   base::options(opts)
[16:18:50.106]                 }
[16:18:50.106]                 {
[16:18:50.106]                   {
[16:18:50.106]                     base::options(mc.cores = ...future.mc.cores.old)
[16:18:50.106]                     NULL
[16:18:50.106]                   }
[16:18:50.106]                   options(future.plan = NULL)
[16:18:50.106]                   if (is.na(NA_character_)) 
[16:18:50.106]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:18:50.106]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:18:50.106]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:18:50.106]                     .init = FALSE)
[16:18:50.106]                 }
[16:18:50.106]             }
[16:18:50.106]         }
[16:18:50.106]     })
[16:18:50.106]     if (TRUE) {
[16:18:50.106]         base::sink(type = "output", split = FALSE)
[16:18:50.106]         if (TRUE) {
[16:18:50.106]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:18:50.106]         }
[16:18:50.106]         else {
[16:18:50.106]             ...future.result["stdout"] <- base::list(NULL)
[16:18:50.106]         }
[16:18:50.106]         base::close(...future.stdout)
[16:18:50.106]         ...future.stdout <- NULL
[16:18:50.106]     }
[16:18:50.106]     ...future.result$conditions <- ...future.conditions
[16:18:50.106]     ...future.result$finished <- base::Sys.time()
[16:18:50.106]     ...future.result
[16:18:50.106] }
[16:18:50.109] Exporting 5 global objects (616 bytes) to cluster node #2 ...
[16:18:50.109] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ...
[16:18:50.109] Exporting ‘...future.FUN’ (616 bytes) to cluster node #2 ... DONE
[16:18:50.109] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[16:18:50.110] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[16:18:50.110] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[16:18:50.110] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[16:18:50.110] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[16:18:50.111] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[16:18:50.111] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[16:18:50.111] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[16:18:50.111] Exporting 5 global objects (616 bytes) to cluster node #2 ... DONE
[16:18:50.112] MultisessionFuture started
[16:18:50.112] - Launch lazy future ... done
[16:18:50.112] run() for ‘MultisessionFuture’ ... done
[16:18:50.112] Created future:
[16:18:50.112] MultisessionFuture:
[16:18:50.112] Label: ‘future_replicate-2’
[16:18:50.112] Expression:
[16:18:50.112] {
[16:18:50.112]     do.call(function(...) {
[16:18:50.112]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:50.112]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:50.112]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:50.112]             on.exit(options(oopts), add = TRUE)
[16:18:50.112]         }
[16:18:50.112]         {
[16:18:50.112]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:50.112]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:50.112]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:50.112]                   envir = globalenv(), inherits = FALSE)
[16:18:50.112]                 ...future.FUN(...future.X_jj, ...)
[16:18:50.112]             })
[16:18:50.112]         }
[16:18:50.112]     }, args = future.call.arguments)
[16:18:50.112] }
[16:18:50.112] Lazy evaluation: FALSE
[16:18:50.112] Asynchronous evaluation: TRUE
[16:18:50.112] Local evaluation: TRUE
[16:18:50.112] Environment: R_GlobalEnv
[16:18:50.112] Capture standard output: TRUE
[16:18:50.112] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:18:50.112] Globals: 5 objects totaling 1.00 KiB (function ‘...future.FUN’ of 616 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, list ‘...future.seeds_ii’ of 240 bytes, NULL ‘...future.globals.maxSize’ of 0 bytes)
[16:18:50.112] Packages: <none>
[16:18:50.112] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:18:50.112] Resolved: FALSE
[16:18:50.112] Value: <not collected>
[16:18:50.112] Conditions captured: <none>
[16:18:50.112] Early signaling: FALSE
[16:18:50.112] Owner process: 20271db5-d788-b537-4432-0a26f2d2d030
[16:18:50.112] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:50.124] Chunk #2 of 2 ... DONE
[16:18:50.124] Launching 2 futures (chunks) ... DONE
[16:18:50.124] Resolving 2 futures (chunks) ...
[16:18:50.124] resolve() on list ...
[16:18:50.124]  recursive: 0
[16:18:50.124]  length: 2
[16:18:50.124] 
[16:18:50.125] receiveMessageFromWorker() for ClusterFuture ...
[16:18:50.125] - Validating connection of MultisessionFuture
[16:18:50.125] - received message: FutureResult
[16:18:50.125] - Received FutureResult
[16:18:50.125] - Erased future from FutureRegistry
[16:18:50.126] result() for ClusterFuture ...
[16:18:50.126] - result already collected: FutureResult
[16:18:50.126] result() for ClusterFuture ... done
[16:18:50.126] receiveMessageFromWorker() for ClusterFuture ... done
[16:18:50.126] Future #1
[16:18:50.126] result() for ClusterFuture ...
[16:18:50.126] - result already collected: FutureResult
[16:18:50.126] result() for ClusterFuture ... done
[16:18:50.126] result() for ClusterFuture ...
[16:18:50.126] - result already collected: FutureResult
[16:18:50.126] result() for ClusterFuture ... done
[16:18:50.127] signalConditionsASAP(MultisessionFuture, pos=1) ...
[16:18:50.127] - nx: 2
[16:18:50.127] - relay: TRUE
[16:18:50.127] - stdout: TRUE
[16:18:50.127] - signal: TRUE
[16:18:50.127] - resignal: FALSE
[16:18:50.127] - force: TRUE
[16:18:50.127] - relayed: [n=2] FALSE, FALSE
[16:18:50.127] - queued futures: [n=2] FALSE, FALSE
[16:18:50.127]  - until=1
[16:18:50.127]  - relaying element #1
[16:18:50.128] result() for ClusterFuture ...
[16:18:50.128] - result already collected: FutureResult
[16:18:50.128] result() for ClusterFuture ... done
[16:18:50.128] result() for ClusterFuture ...
[16:18:50.128] - result already collected: FutureResult
[16:18:50.128] result() for ClusterFuture ... done
[16:18:50.128] result() for ClusterFuture ...
[16:18:50.128] - result already collected: FutureResult
[16:18:50.128] result() for ClusterFuture ... done
[16:18:50.128] result() for ClusterFuture ...
[16:18:50.129] - result already collected: FutureResult
[16:18:50.129] result() for ClusterFuture ... done
[16:18:50.129] - relayed: [n=2] TRUE, FALSE
[16:18:50.129] - queued futures: [n=2] TRUE, FALSE
[16:18:50.129] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[16:18:50.129]  length: 1 (resolved future 1)
[16:18:50.154] receiveMessageFromWorker() for ClusterFuture ...
[16:18:50.154] - Validating connection of MultisessionFuture
[16:18:50.154] - received message: FutureResult
[16:18:50.154] - Received FutureResult
[16:18:50.155] - Erased future from FutureRegistry
[16:18:50.155] result() for ClusterFuture ...
[16:18:50.155] - result already collected: FutureResult
[16:18:50.155] result() for ClusterFuture ... done
[16:18:50.155] receiveMessageFromWorker() for ClusterFuture ... done
[16:18:50.155] Future #2
[16:18:50.155] result() for ClusterFuture ...
[16:18:50.155] - result already collected: FutureResult
[16:18:50.155] result() for ClusterFuture ... done
[16:18:50.155] result() for ClusterFuture ...
[16:18:50.155] - result already collected: FutureResult
[16:18:50.156] result() for ClusterFuture ... done
[16:18:50.156] signalConditionsASAP(MultisessionFuture, pos=2) ...
[16:18:50.156] - nx: 2
[16:18:50.156] - relay: TRUE
[16:18:50.156] - stdout: TRUE
[16:18:50.156] - signal: TRUE
[16:18:50.156] - resignal: FALSE
[16:18:50.156] - force: TRUE
[16:18:50.156] - relayed: [n=2] TRUE, FALSE
[16:18:50.156] - queued futures: [n=2] TRUE, FALSE
[16:18:50.156]  - until=2
[16:18:50.157]  - relaying element #2
[16:18:50.157] result() for ClusterFuture ...
[16:18:50.157] - result already collected: FutureResult
[16:18:50.157] result() for ClusterFuture ... done
[16:18:50.157] result() for ClusterFuture ...
[16:18:50.157] - result already collected: FutureResult
[16:18:50.157] result() for ClusterFuture ... done
[16:18:50.157] result() for ClusterFuture ...
[16:18:50.157] - result already collected: FutureResult
[16:18:50.157] result() for ClusterFuture ... done
[16:18:50.158] result() for ClusterFuture ...
[16:18:50.158] - result already collected: FutureResult
[16:18:50.158] result() for ClusterFuture ... done
[16:18:50.158] - relayed: [n=2] TRUE, TRUE
[16:18:50.160] - queued futures: [n=2] TRUE, TRUE
[16:18:50.161] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[16:18:50.161]  length: 0 (resolved future 2)
[16:18:50.161] Relaying remaining futures
[16:18:50.161] signalConditionsASAP(NULL, pos=0) ...
[16:18:50.161] - nx: 2
[16:18:50.161] - relay: TRUE
[16:18:50.161] - stdout: TRUE
[16:18:50.161] - signal: TRUE
[16:18:50.161] - resignal: FALSE
[16:18:50.161] - force: TRUE
[16:18:50.161] - relayed: [n=2] TRUE, TRUE
[16:18:50.161] - queued futures: [n=2] TRUE, TRUE
 - flush all
[16:18:50.162] - relayed: [n=2] TRUE, TRUE
[16:18:50.162] - queued futures: [n=2] TRUE, TRUE
[16:18:50.162] signalConditionsASAP(NULL, pos=0) ... done
[16:18:50.162] resolve() on list ... DONE
[16:18:50.162] result() for ClusterFuture ...
[16:18:50.162] - result already collected: FutureResult
[16:18:50.162] result() for ClusterFuture ... done
[16:18:50.162] result() for ClusterFuture ...
[16:18:50.162] - result already collected: FutureResult
[16:18:50.162] result() for ClusterFuture ... done
[16:18:50.162] result() for ClusterFuture ...
[16:18:50.163] - result already collected: FutureResult
[16:18:50.163] result() for ClusterFuture ... done
[16:18:50.163] result() for ClusterFuture ...
[16:18:50.163] - result already collected: FutureResult
[16:18:50.163] result() for ClusterFuture ... done
[16:18:50.163]  - Number of value chunks collected: 2
[16:18:50.163] Resolving 2 futures (chunks) ... DONE
[16:18:50.163] Reducing values from 2 chunks ...
[16:18:50.163]  - Number of values collected after concatenation: 5
[16:18:50.163]  - Number of values expected: 5
[16:18:50.163] Reducing values from 2 chunks ... DONE
[16:18:50.164] future_lapply() ... DONE
- example(replicate) ...
[16:18:50.164] future_lapply() ...
[16:18:50.164] Generating random seeds ...
[16:18:50.165] Generating random seed streams for 5 elements ...
[16:18:50.165] Generating random seed streams for 5 elements ... DONE
[16:18:50.165] Generating random seeds ... DONE
[16:18:50.165] Will set RNG state on exit: 10403, 8, 133210212, 1945833034, 115858357, -364452081, -390319082, 926195392, 2057013379, -803887967, -1078998384, 705296750, -1682614503, 830917547, -331376230, 1352842588, 1960957023, 1997081653, 374446028, 1510359842, 1146109309, -1295266185, -1545472098, 1268700760, 1627111355, -855092903, -215790872, -1958931690, 1906054289, -782874301, -399096750, -1740777756, 1763676455, -832683651, 1369376884, 430697050, 1699587749, -1503628097, 856180550, -242424368, -2127251469, 505777937, 257347392, -856180962, 886024169, -1464480485, -1512233174, -1985955764, -425390065, -589669563, 381897980, -790840494, 1136483533, -1535370105, -607934610, 1641470280, -1050403509, 1965932713, 362996216, 1596838182, -1829498303, -1824465965, 1872669058, -417374796, -1713346249, 1818328109, -1284085436, -1981489558, 1940543701, 1673049711, -1514495114, 467096736, 943410531, -1431020031, 1115626864, 965475598, -1718567047, -793788661, -1133789126, -80588996, 2018258047, 1866186709, 42791404, -1823521982, -1345991523, -1672661737, -180777858, -452713416, 1448313627, -1459492743, -600706872, -909649674, -2081822415, -1697455773, 1517613874, -820020092, 188336327, -1149897827, -475203820, -368005702, 204442629, 437854687, 1163191398, -760699920, 104455443, 819708593, 1129180512, 48636670, 1066049161, 398150075, -852036726, -906028436, -1265740817, -1824646107, -2126068516, 1815435954, -146408019, -860012185, -682500466, 1443186536, 1789394795, -1078204151, 809467800, 1514112710, -1097673695, 919601331, -331916766, 795008020, 1042337943, -371219827, 1558967204, 1563528586, -2133607947, -1904454577, -264006826, 770017792, 153477955, 1189667553, -363253680, 1882362030, 967246937, -793119637, -1401964070, 2129232540, -542810977, -1277899019, -377097332, -406748574, -1722157507, -1577740105, -455170210, 372239000, -1535936005, -1332632679, -1623884760, -359633706, 935827793, 1357445123, 997040018, -1506538204, -147930137, -166569923, -2103753036, 1366641946, 30482021, 1876964095, 2008557446, 657856784, -103814733, 774877777, -486350336, -555057442, -1821756119, -963495717, 853311466, 1671241612, -942337841, 409538693, 1992831804, 489867794, 357105933, -1611412921, -1119334354, -1521015416, -2041922421, 2048874089, -700216776, 1651628774, -10471807, 736942611, 380607938, -1742088588, 1124231287, 1232111981, -1801753084, -1608606422, -1172096363, 1420874031, -1210473418, -18317216, -571709789, 1107403201, 1952554416, 1991660750, -442973639, 581522507, -430787078, 1105375484, -1481218753, -748152299, -641535700, 679371266, -591318819, -104578089, -172818754, -1321694984, -98191653, 1709083961, -344680312, -159571914, 581309553, -63938909, 76420082, 951019332, -1797740537, 1291470301, -2079866156, -332493318, -1978392251, -1691039632, 388791868, -1101109484, -1365177662, 321737440, 1812890748, -133313328, -1252731998, 2044530216, 1263927564, 325388220, 520794418, 1449646272, 87560756, -87565624, 426345146, -699970416, 240322284, -1074080172, -1536268654, 1338615584, 478476236, -1933154080, -192786750, 1559942184, -1178330196, -687617348, -1701912078, 352314928, -999229532, -2052800072, -1913644198, -1345416048, 1816730492, -1570431212, -269427390, -2122969344, -520963140, 1398087504, 264692002, -1682658744, -1422452724, -1601893284, -66383406, 1443075584, -456249004, 943694056, -1493184262, -1943836976, -590788308, -405505804, -1796837998, 1991543136, 1170376716, 1707420384, 1899700834, -1643595096, 47299148, 1274857340, -1205842638, -1938479504, -1773978812, 532695000, 1306451834, 258403888, -284747844, -1780705708, 1621936194, 1129070752, 540946108, -294270512, -1426480286, -356302104, 349847756, 1849803260, -1299125774, 511654528, -1259964940, -1879857528, 535666490, -2020097200, -1460751252, 1201879444, -1459788718, 447195616, -730891060, -1875530592, -2146183806, 193274088, -1224605972, 1616153916, -1896973198, -420945808, -1997735900, -1838404552, -413698278, 1984019664, -1760209092, -1288743020, 392579970, -1382567488, -1295004100, -33348208, 1536615970, -428761848, 643368588, -1596336356, 1797431442, 352422272, -1043800556, 60591912, -1115663814, 1043682768, 521144684, 4793268, -1924265966, 978890208, 370048972, -1607474976, -1443637214, -632405720, 691912204, 166321980, 942193650, 751741680, 689743428, -18455976, -1946329286, -1619184144, 239341244, 371382548, -2069808446, 154176608, 385987452, -385611824, 1967391010, 2140654248, 1720087436, -1591007044, -1612486862, 1295747648, 1726784692, 597326408, -973152838, 628505104, -1089631508, 3230036, -593837806, 244006304, 1357912780, 1839234656, -1357570110, 1896595240, -2066952276, -1724304580, 986188146, -1200604368, -279100124, 131128120, -1088465190, 596533136, 170602236, -1051262060, 215660610, -686217984, 444449852, 769655120, 236357794, 181393736, -13334772, 644690652, -1969263278, -2107982720, 1429553236, 794236904, 1997299962, -458224816, 904978220, -537093772, -842839150, 1828989024, -679303796, 1396292448, 76319202, 1896098728, 418430156, 2005956604, 1370351026, -1178923536, -1154073660, -1218863784, 89928058, 816597936, -1141767748, 1579714644, 1343385538, 371259424, -245180228, 365724240, 1606388706, -823678872, 1281309772, 1395210492, 1217887218, 1420531968, 1349501300, 271647752, -69959750, 360452560, 1565334508, 1956526484, -930709038, 1961808224, -1745916084, 443656480, 1990137730, 694374120, -1050566420, -1365842884, -438961294, -1851472272, 614534180, 1401930552, 3652762, 1928284880, -1637703492, 26107540, -132725907, -371944998, -1311388776, 8516097, 741008307, -1149566252, -1802640414, 2019636855, 1587818433, -151040698, 1598381188, -205462987, 1911327, -1382519432, -594809770, -2146766621, -2013964635, -965534910, -2077626064, 1964788057, 1821395659, -1953549508, -719348886, 1442511263, 1969287209, 1754221246, -442299476, 1981692157, 113456199, 1587794736, -1811033010, 1149417595, -1760887843, -1426021878, -1285634264, 1507547537, -1114120317, 1897370756, 1142575794, -375814649, -1661041071, 881081814, -548925260, 2073840837, 1156484623, 2011334280, 1107815334, 969024339, -55972683, 2006780434, -1486403616, 1698650697, 1813794939, -1717763764, 1268815066, -1200630577, -773717863, -12215122, 1354639804, 1213207085, -978295337, 340143136, 485429630, -568148149, 1257440589, 930106234, -883274312, -1632538783, 894748435, -1592959180, -596177598, 120963415, -1174532959, -561474202, 1438545764, 1429911189, 1075965887, 367866712, -892333706, -485158013, -682634811, 963344098, 2110199632, 1990767225, 1348335019, 269581084, -2040640438, 1453561919, 853952649, 1195494558, 1614051660, 2040242461, -1604604761, 1421229008, -1268333714, 174113307, 2044969853, 190112106, -998776824, -2070476623, -2099222749, 1141171236, -146426158, -1797385433, -1129376399, -1496589386, -419561644, -613549595, 1243456495, 451212072, 1923543942, 1146113971, 93579029, -397504142, 597218752, 459048489, 1447221915, -272948372, -373834886, 934888623, -2099351623, -1672042034, 193924380, -704518003, 781993207, -258875392, -1853783458, 1315003691, -41214419, -59447654, 1203745368, 426003905, 452670067, -1092079724, -1765622238, -1882554057, 1278087169, -1994822394, -124954300, 1994460277, 1816829407, -1568282312, 1563616022, 1255996195, 1702121701, 1784032514, 1842995056, 748060441, 1432229643, -1905232900, 2016890922, 1403944031, 351712233, 1338932478, -1359366932, -803018691, -1551885305, 248629232, 1839395726, 1411789243, 840085405, -1849000630, -669518488, -1453417647, -1527179197, -377159356, 1674525170, -313742393, 865377681, -1127426242
[16:18:50.169] Number of chunks: 2
[16:18:50.169] getGlobalsAndPackagesXApply() ...
[16:18:50.169]  - future.globals: TRUE
[16:18:50.169] getGlobalsAndPackages() ...
[16:18:50.169] Searching for globals...
[16:18:50.171] - globals found: [4] ‘FUN’, ‘foo’, ‘x’, ‘c’
[16:18:50.171] Searching for globals ... DONE
[16:18:50.171] Resolving globals: FALSE
[16:18:50.172] The total size of the 3 globals is 2.15 KiB (2200 bytes)
[16:18:50.172] The total size of the 3 globals exported for future expression (‘FUN()’) is 2.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘foo’ (1.60 KiB of class ‘function’), ‘FUN’ (504 bytes of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[16:18:50.172] - globals: [3] ‘FUN’, ‘foo’, ‘x’
[16:18:50.173] 
[16:18:50.173] getGlobalsAndPackages() ... DONE
[16:18:50.173]  - globals found/used: [n=3] ‘FUN’, ‘foo’, ‘x’
[16:18:50.173]  - needed namespaces: [n=0] 
[16:18:50.173] Finding globals ... DONE
[16:18:50.173]  - use_args: TRUE
[16:18:50.173]  - Getting '...' globals ...
[16:18:50.173] resolve() on list ...
[16:18:50.174]  recursive: 0
[16:18:50.174]  length: 1
[16:18:50.174]  elements: ‘...’
[16:18:50.174]  length: 0 (resolved future 1)
[16:18:50.174] resolve() on list ... DONE
[16:18:50.174]    - '...' content: [n=0] 
[16:18:50.174] List of 1
[16:18:50.174]  $ ...: list()
[16:18:50.174]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:50.174]  - attr(*, "where")=List of 1
[16:18:50.174]   ..$ ...:<environment: 0x55e7a0e68310> 
[16:18:50.174]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:50.174]  - attr(*, "resolved")= logi TRUE
[16:18:50.174]  - attr(*, "total_size")= num NA
[16:18:50.177]  - Getting '...' globals ... DONE
[16:18:50.177] Globals to be used in all futures (chunks): [n=4] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’
[16:18:50.177] List of 4
[16:18:50.177]  $ ...future.FUN:function (...)  
[16:18:50.177]  $ foo          :function (x = 1, y = 2)  
[16:18:50.177]  $ x            : num 3
[16:18:50.177]  $ ...          : list()
[16:18:50.177]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:18:50.177]  - attr(*, "where")=List of 4
[16:18:50.177]   ..$ ...future.FUN:<environment: R_EmptyEnv> 
[16:18:50.177]   ..$ foo          :<environment: R_EmptyEnv> 
[16:18:50.177]   ..$ x            :<environment: R_EmptyEnv> 
[16:18:50.177]   ..$ ...          :<environment: 0x55e7a0e68310> 
[16:18:50.177]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:18:50.177]  - attr(*, "resolved")= logi FALSE
[16:18:50.177]  - attr(*, "total_size")= num 2200
[16:18:50.180] Packages to be attached in all futures: [n=0] 
[16:18:50.181] getGlobalsAndPackagesXApply() ... DONE
[16:18:50.181] Number of futures (= number of chunks): 2
[16:18:50.181] Launching 2 futures (chunks) ...
[16:18:50.181] Chunk #1 of 2 ...
[16:18:50.181]  - Finding globals in 'X' for chunk #1 ...
[16:18:50.181] getGlobalsAndPackages() ...
[16:18:50.181] Searching for globals...
[16:18:50.182] 
[16:18:50.182] Searching for globals ... DONE
[16:18:50.182] - globals: [0] <none>
[16:18:50.182] getGlobalsAndPackages() ... DONE
[16:18:50.182]    + additional globals found: [n=0] 
[16:18:50.182]    + additional namespaces needed: [n=0] 
[16:18:50.182]  - Finding globals in 'X' for chunk #1 ... DONE
[16:18:50.182]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:18:50.182]  - seeds: [2] <seeds>
[16:18:50.182]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:50.183] getGlobalsAndPackages() ...
[16:18:50.183] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:50.183] Resolving globals: FALSE
[16:18:50.183] Tweak future expression to call with '...' arguments ...
[16:18:50.183] {
[16:18:50.183]     do.call(function(...) {
[16:18:50.183]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:50.183]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:50.183]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:50.183]             on.exit(options(oopts), add = TRUE)
[16:18:50.183]         }
[16:18:50.183]         {
[16:18:50.183]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:50.183]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:50.183]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:50.183]                   envir = globalenv(), inherits = FALSE)
[16:18:50.183]                 ...future.FUN(...future.X_jj, ...)
[16:18:50.183]             })
[16:18:50.183]         }
[16:18:50.183]     }, args = future.call.arguments)
[16:18:50.183] }
[16:18:50.183] Tweak future expression to call with '...' arguments ... DONE
[16:18:50.184] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:50.184] 
[16:18:50.184] getGlobalsAndPackages() ... DONE
[16:18:50.184] run() for ‘Future’ ...
[16:18:50.184] - state: ‘created’
[16:18:50.184] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:18:50.200] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:50.201] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:18:50.201]   - Field: ‘node’
[16:18:50.201]   - Field: ‘label’
[16:18:50.201]   - Field: ‘local’
[16:18:50.201]   - Field: ‘owner’
[16:18:50.201]   - Field: ‘envir’
[16:18:50.201]   - Field: ‘workers’
[16:18:50.201]   - Field: ‘packages’
[16:18:50.201]   - Field: ‘gc’
[16:18:50.201]   - Field: ‘conditions’
[16:18:50.202]   - Field: ‘persistent’
[16:18:50.202]   - Field: ‘expr’
[16:18:50.202]   - Field: ‘uuid’
[16:18:50.202]   - Field: ‘seed’
[16:18:50.202]   - Field: ‘version’
[16:18:50.202]   - Field: ‘result’
[16:18:50.202]   - Field: ‘asynchronous’
[16:18:50.202]   - Field: ‘calls’
[16:18:50.202]   - Field: ‘globals’
[16:18:50.202]   - Field: ‘stdout’
[16:18:50.202]   - Field: ‘earlySignal’
[16:18:50.203]   - Field: ‘lazy’
[16:18:50.203]   - Field: ‘state’
[16:18:50.203] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:18:50.203] - Launch lazy future ...
[16:18:50.203] Packages needed by the future expression (n = 0): <none>
[16:18:50.203] Packages needed by future strategies (n = 0): <none>
[16:18:50.204] {
[16:18:50.204]     {
[16:18:50.204]         {
[16:18:50.204]             ...future.startTime <- base::Sys.time()
[16:18:50.204]             {
[16:18:50.204]                 {
[16:18:50.204]                   {
[16:18:50.204]                     {
[16:18:50.204]                       base::local({
[16:18:50.204]                         has_future <- base::requireNamespace("future", 
[16:18:50.204]                           quietly = TRUE)
[16:18:50.204]                         if (has_future) {
[16:18:50.204]                           ns <- base::getNamespace("future")
[16:18:50.204]                           version <- ns[[".package"]][["version"]]
[16:18:50.204]                           if (is.null(version)) 
[16:18:50.204]                             version <- utils::packageVersion("future")
[16:18:50.204]                         }
[16:18:50.204]                         else {
[16:18:50.204]                           version <- NULL
[16:18:50.204]                         }
[16:18:50.204]                         if (!has_future || version < "1.8.0") {
[16:18:50.204]                           info <- base::c(r_version = base::gsub("R version ", 
[16:18:50.204]                             "", base::R.version$version.string), 
[16:18:50.204]                             platform = base::sprintf("%s (%s-bit)", 
[16:18:50.204]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:18:50.204]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:18:50.204]                               "release", "version")], collapse = " "), 
[16:18:50.204]                             hostname = base::Sys.info()[["nodename"]])
[16:18:50.204]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:18:50.204]                             info)
[16:18:50.204]                           info <- base::paste(info, collapse = "; ")
[16:18:50.204]                           if (!has_future) {
[16:18:50.204]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:18:50.204]                               info)
[16:18:50.204]                           }
[16:18:50.204]                           else {
[16:18:50.204]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:18:50.204]                               info, version)
[16:18:50.204]                           }
[16:18:50.204]                           base::stop(msg)
[16:18:50.204]                         }
[16:18:50.204]                       })
[16:18:50.204]                     }
[16:18:50.204]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:18:50.204]                     base::options(mc.cores = 1L)
[16:18:50.204]                   }
[16:18:50.204]                   ...future.strategy.old <- future::plan("list")
[16:18:50.204]                   options(future.plan = NULL)
[16:18:50.204]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:18:50.204]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:18:50.204]                 }
[16:18:50.204]                 ...future.workdir <- getwd()
[16:18:50.204]             }
[16:18:50.204]             ...future.oldOptions <- base::as.list(base::.Options)
[16:18:50.204]             ...future.oldEnvVars <- base::Sys.getenv()
[16:18:50.204]         }
[16:18:50.204]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:18:50.204]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:18:50.204]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:18:50.204]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:18:50.204]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:18:50.204]             future.stdout.windows.reencode = NULL, width = 80L)
[16:18:50.204]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:18:50.204]             base::names(...future.oldOptions))
[16:18:50.204]     }
[16:18:50.204]     if (FALSE) {
[16:18:50.204]     }
[16:18:50.204]     else {
[16:18:50.204]         if (TRUE) {
[16:18:50.204]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:18:50.204]                 open = "w")
[16:18:50.204]         }
[16:18:50.204]         else {
[16:18:50.204]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:18:50.204]                 windows = "NUL", "/dev/null"), open = "w")
[16:18:50.204]         }
[16:18:50.204]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:18:50.204]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:18:50.204]             base::sink(type = "output", split = FALSE)
[16:18:50.204]             base::close(...future.stdout)
[16:18:50.204]         }, add = TRUE)
[16:18:50.204]     }
[16:18:50.204]     ...future.frame <- base::sys.nframe()
[16:18:50.204]     ...future.conditions <- base::list()
[16:18:50.204]     ...future.rng <- base::globalenv()$.Random.seed
[16:18:50.204]     if (FALSE) {
[16:18:50.204]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:18:50.204]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:18:50.204]     }
[16:18:50.204]     ...future.result <- base::tryCatch({
[16:18:50.204]         base::withCallingHandlers({
[16:18:50.204]             ...future.value <- base::withVisible(base::local({
[16:18:50.204]                 ...future.makeSendCondition <- base::local({
[16:18:50.204]                   sendCondition <- NULL
[16:18:50.204]                   function(frame = 1L) {
[16:18:50.204]                     if (is.function(sendCondition)) 
[16:18:50.204]                       return(sendCondition)
[16:18:50.204]                     ns <- getNamespace("parallel")
[16:18:50.204]                     if (exists("sendData", mode = "function", 
[16:18:50.204]                       envir = ns)) {
[16:18:50.204]                       parallel_sendData <- get("sendData", mode = "function", 
[16:18:50.204]                         envir = ns)
[16:18:50.204]                       envir <- sys.frame(frame)
[16:18:50.204]                       master <- NULL
[16:18:50.204]                       while (!identical(envir, .GlobalEnv) && 
[16:18:50.204]                         !identical(envir, emptyenv())) {
[16:18:50.204]                         if (exists("master", mode = "list", envir = envir, 
[16:18:50.204]                           inherits = FALSE)) {
[16:18:50.204]                           master <- get("master", mode = "list", 
[16:18:50.204]                             envir = envir, inherits = FALSE)
[16:18:50.204]                           if (inherits(master, c("SOCKnode", 
[16:18:50.204]                             "SOCK0node"))) {
[16:18:50.204]                             sendCondition <<- function(cond) {
[16:18:50.204]                               data <- list(type = "VALUE", value = cond, 
[16:18:50.204]                                 success = TRUE)
[16:18:50.204]                               parallel_sendData(master, data)
[16:18:50.204]                             }
[16:18:50.204]                             return(sendCondition)
[16:18:50.204]                           }
[16:18:50.204]                         }
[16:18:50.204]                         frame <- frame + 1L
[16:18:50.204]                         envir <- sys.frame(frame)
[16:18:50.204]                       }
[16:18:50.204]                     }
[16:18:50.204]                     sendCondition <<- function(cond) NULL
[16:18:50.204]                   }
[16:18:50.204]                 })
[16:18:50.204]                 withCallingHandlers({
[16:18:50.204]                   {
[16:18:50.204]                     do.call(function(...) {
[16:18:50.204]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:50.204]                       if (!identical(...future.globals.maxSize.org, 
[16:18:50.204]                         ...future.globals.maxSize)) {
[16:18:50.204]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:50.204]                         on.exit(options(oopts), add = TRUE)
[16:18:50.204]                       }
[16:18:50.204]                       {
[16:18:50.204]                         lapply(seq_along(...future.elements_ii), 
[16:18:50.204]                           FUN = function(jj) {
[16:18:50.204]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:50.204]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:50.204]                               envir = globalenv(), inherits = FALSE)
[16:18:50.204]                             ...future.FUN(...future.X_jj, ...)
[16:18:50.204]                           })
[16:18:50.204]                       }
[16:18:50.204]                     }, args = future.call.arguments)
[16:18:50.204]                   }
[16:18:50.204]                 }, immediateCondition = function(cond) {
[16:18:50.204]                   sendCondition <- ...future.makeSendCondition()
[16:18:50.204]                   sendCondition(cond)
[16:18:50.204]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:50.204]                   {
[16:18:50.204]                     inherits <- base::inherits
[16:18:50.204]                     invokeRestart <- base::invokeRestart
[16:18:50.204]                     is.null <- base::is.null
[16:18:50.204]                     muffled <- FALSE
[16:18:50.204]                     if (inherits(cond, "message")) {
[16:18:50.204]                       muffled <- grepl(pattern, "muffleMessage")
[16:18:50.204]                       if (muffled) 
[16:18:50.204]                         invokeRestart("muffleMessage")
[16:18:50.204]                     }
[16:18:50.204]                     else if (inherits(cond, "warning")) {
[16:18:50.204]                       muffled <- grepl(pattern, "muffleWarning")
[16:18:50.204]                       if (muffled) 
[16:18:50.204]                         invokeRestart("muffleWarning")
[16:18:50.204]                     }
[16:18:50.204]                     else if (inherits(cond, "condition")) {
[16:18:50.204]                       if (!is.null(pattern)) {
[16:18:50.204]                         computeRestarts <- base::computeRestarts
[16:18:50.204]                         grepl <- base::grepl
[16:18:50.204]                         restarts <- computeRestarts(cond)
[16:18:50.204]                         for (restart in restarts) {
[16:18:50.204]                           name <- restart$name
[16:18:50.204]                           if (is.null(name)) 
[16:18:50.204]                             next
[16:18:50.204]                           if (!grepl(pattern, name)) 
[16:18:50.204]                             next
[16:18:50.204]                           invokeRestart(restart)
[16:18:50.204]                           muffled <- TRUE
[16:18:50.204]                           break
[16:18:50.204]                         }
[16:18:50.204]                       }
[16:18:50.204]                     }
[16:18:50.204]                     invisible(muffled)
[16:18:50.204]                   }
[16:18:50.204]                   muffleCondition(cond)
[16:18:50.204]                 })
[16:18:50.204]             }))
[16:18:50.204]             future::FutureResult(value = ...future.value$value, 
[16:18:50.204]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:50.204]                   ...future.rng), globalenv = if (FALSE) 
[16:18:50.204]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:18:50.204]                     ...future.globalenv.names))
[16:18:50.204]                 else NULL, started = ...future.startTime, version = "1.8")
[16:18:50.204]         }, condition = base::local({
[16:18:50.204]             c <- base::c
[16:18:50.204]             inherits <- base::inherits
[16:18:50.204]             invokeRestart <- base::invokeRestart
[16:18:50.204]             length <- base::length
[16:18:50.204]             list <- base::list
[16:18:50.204]             seq.int <- base::seq.int
[16:18:50.204]             signalCondition <- base::signalCondition
[16:18:50.204]             sys.calls <- base::sys.calls
[16:18:50.204]             `[[` <- base::`[[`
[16:18:50.204]             `+` <- base::`+`
[16:18:50.204]             `<<-` <- base::`<<-`
[16:18:50.204]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:18:50.204]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:18:50.204]                   3L)]
[16:18:50.204]             }
[16:18:50.204]             function(cond) {
[16:18:50.204]                 is_error <- inherits(cond, "error")
[16:18:50.204]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:18:50.204]                   NULL)
[16:18:50.204]                 if (is_error) {
[16:18:50.204]                   sessionInformation <- function() {
[16:18:50.204]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:18:50.204]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:18:50.204]                       search = base::search(), system = base::Sys.info())
[16:18:50.204]                   }
[16:18:50.204]                   ...future.conditions[[length(...future.conditions) + 
[16:18:50.204]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:18:50.204]                     cond$call), session = sessionInformation(), 
[16:18:50.204]                     timestamp = base::Sys.time(), signaled = 0L)
[16:18:50.204]                   signalCondition(cond)
[16:18:50.204]                 }
[16:18:50.204]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:18:50.204]                 "immediateCondition"))) {
[16:18:50.204]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:18:50.204]                   ...future.conditions[[length(...future.conditions) + 
[16:18:50.204]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:18:50.204]                   if (TRUE && !signal) {
[16:18:50.204]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:50.204]                     {
[16:18:50.204]                       inherits <- base::inherits
[16:18:50.204]                       invokeRestart <- base::invokeRestart
[16:18:50.204]                       is.null <- base::is.null
[16:18:50.204]                       muffled <- FALSE
[16:18:50.204]                       if (inherits(cond, "message")) {
[16:18:50.204]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:50.204]                         if (muffled) 
[16:18:50.204]                           invokeRestart("muffleMessage")
[16:18:50.204]                       }
[16:18:50.204]                       else if (inherits(cond, "warning")) {
[16:18:50.204]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:50.204]                         if (muffled) 
[16:18:50.204]                           invokeRestart("muffleWarning")
[16:18:50.204]                       }
[16:18:50.204]                       else if (inherits(cond, "condition")) {
[16:18:50.204]                         if (!is.null(pattern)) {
[16:18:50.204]                           computeRestarts <- base::computeRestarts
[16:18:50.204]                           grepl <- base::grepl
[16:18:50.204]                           restarts <- computeRestarts(cond)
[16:18:50.204]                           for (restart in restarts) {
[16:18:50.204]                             name <- restart$name
[16:18:50.204]                             if (is.null(name)) 
[16:18:50.204]                               next
[16:18:50.204]                             if (!grepl(pattern, name)) 
[16:18:50.204]                               next
[16:18:50.204]                             invokeRestart(restart)
[16:18:50.204]                             muffled <- TRUE
[16:18:50.204]                             break
[16:18:50.204]                           }
[16:18:50.204]                         }
[16:18:50.204]                       }
[16:18:50.204]                       invisible(muffled)
[16:18:50.204]                     }
[16:18:50.204]                     muffleCondition(cond, pattern = "^muffle")
[16:18:50.204]                   }
[16:18:50.204]                 }
[16:18:50.204]                 else {
[16:18:50.204]                   if (TRUE) {
[16:18:50.204]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:50.204]                     {
[16:18:50.204]                       inherits <- base::inherits
[16:18:50.204]                       invokeRestart <- base::invokeRestart
[16:18:50.204]                       is.null <- base::is.null
[16:18:50.204]                       muffled <- FALSE
[16:18:50.204]                       if (inherits(cond, "message")) {
[16:18:50.204]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:50.204]                         if (muffled) 
[16:18:50.204]                           invokeRestart("muffleMessage")
[16:18:50.204]                       }
[16:18:50.204]                       else if (inherits(cond, "warning")) {
[16:18:50.204]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:50.204]                         if (muffled) 
[16:18:50.204]                           invokeRestart("muffleWarning")
[16:18:50.204]                       }
[16:18:50.204]                       else if (inherits(cond, "condition")) {
[16:18:50.204]                         if (!is.null(pattern)) {
[16:18:50.204]                           computeRestarts <- base::computeRestarts
[16:18:50.204]                           grepl <- base::grepl
[16:18:50.204]                           restarts <- computeRestarts(cond)
[16:18:50.204]                           for (restart in restarts) {
[16:18:50.204]                             name <- restart$name
[16:18:50.204]                             if (is.null(name)) 
[16:18:50.204]                               next
[16:18:50.204]                             if (!grepl(pattern, name)) 
[16:18:50.204]                               next
[16:18:50.204]                             invokeRestart(restart)
[16:18:50.204]                             muffled <- TRUE
[16:18:50.204]                             break
[16:18:50.204]                           }
[16:18:50.204]                         }
[16:18:50.204]                       }
[16:18:50.204]                       invisible(muffled)
[16:18:50.204]                     }
[16:18:50.204]                     muffleCondition(cond, pattern = "^muffle")
[16:18:50.204]                   }
[16:18:50.204]                 }
[16:18:50.204]             }
[16:18:50.204]         }))
[16:18:50.204]     }, error = function(ex) {
[16:18:50.204]         base::structure(base::list(value = NULL, visible = NULL, 
[16:18:50.204]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:50.204]                 ...future.rng), started = ...future.startTime, 
[16:18:50.204]             finished = Sys.time(), session_uuid = NA_character_, 
[16:18:50.204]             version = "1.8"), class = "FutureResult")
[16:18:50.204]     }, finally = {
[16:18:50.204]         if (!identical(...future.workdir, getwd())) 
[16:18:50.204]             setwd(...future.workdir)
[16:18:50.204]         {
[16:18:50.204]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:18:50.204]                 ...future.oldOptions$nwarnings <- NULL
[16:18:50.204]             }
[16:18:50.204]             base::options(...future.oldOptions)
[16:18:50.204]             if (.Platform$OS.type == "windows") {
[16:18:50.204]                 old_names <- names(...future.oldEnvVars)
[16:18:50.204]                 envs <- base::Sys.getenv()
[16:18:50.204]                 names <- names(envs)
[16:18:50.204]                 common <- intersect(names, old_names)
[16:18:50.204]                 added <- setdiff(names, old_names)
[16:18:50.204]                 removed <- setdiff(old_names, names)
[16:18:50.204]                 changed <- common[...future.oldEnvVars[common] != 
[16:18:50.204]                   envs[common]]
[16:18:50.204]                 NAMES <- toupper(changed)
[16:18:50.204]                 args <- list()
[16:18:50.204]                 for (kk in seq_along(NAMES)) {
[16:18:50.204]                   name <- changed[[kk]]
[16:18:50.204]                   NAME <- NAMES[[kk]]
[16:18:50.204]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:50.204]                     next
[16:18:50.204]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:50.204]                 }
[16:18:50.204]                 NAMES <- toupper(added)
[16:18:50.204]                 for (kk in seq_along(NAMES)) {
[16:18:50.204]                   name <- added[[kk]]
[16:18:50.204]                   NAME <- NAMES[[kk]]
[16:18:50.204]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:50.204]                     next
[16:18:50.204]                   args[[name]] <- ""
[16:18:50.204]                 }
[16:18:50.204]                 NAMES <- toupper(removed)
[16:18:50.204]                 for (kk in seq_along(NAMES)) {
[16:18:50.204]                   name <- removed[[kk]]
[16:18:50.204]                   NAME <- NAMES[[kk]]
[16:18:50.204]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:50.204]                     next
[16:18:50.204]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:50.204]                 }
[16:18:50.204]                 if (length(args) > 0) 
[16:18:50.204]                   base::do.call(base::Sys.setenv, args = args)
[16:18:50.204]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:18:50.204]             }
[16:18:50.204]             else {
[16:18:50.204]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:18:50.204]             }
[16:18:50.204]             {
[16:18:50.204]                 if (base::length(...future.futureOptionsAdded) > 
[16:18:50.204]                   0L) {
[16:18:50.204]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:18:50.204]                   base::names(opts) <- ...future.futureOptionsAdded
[16:18:50.204]                   base::options(opts)
[16:18:50.204]                 }
[16:18:50.204]                 {
[16:18:50.204]                   {
[16:18:50.204]                     base::options(mc.cores = ...future.mc.cores.old)
[16:18:50.204]                     NULL
[16:18:50.204]                   }
[16:18:50.204]                   options(future.plan = NULL)
[16:18:50.204]                   if (is.na(NA_character_)) 
[16:18:50.204]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:18:50.204]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:18:50.204]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:18:50.204]                     .init = FALSE)
[16:18:50.204]                 }
[16:18:50.204]             }
[16:18:50.204]         }
[16:18:50.204]     })
[16:18:50.204]     if (TRUE) {
[16:18:50.204]         base::sink(type = "output", split = FALSE)
[16:18:50.204]         if (TRUE) {
[16:18:50.204]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:18:50.204]         }
[16:18:50.204]         else {
[16:18:50.204]             ...future.result["stdout"] <- base::list(NULL)
[16:18:50.204]         }
[16:18:50.204]         base::close(...future.stdout)
[16:18:50.204]         ...future.stdout <- NULL
[16:18:50.204]     }
[16:18:50.204]     ...future.result$conditions <- ...future.conditions
[16:18:50.204]     ...future.result$finished <- base::Sys.time()
[16:18:50.204]     ...future.result
[16:18:50.204] }
[16:18:50.207] Exporting 7 global objects (2.15 KiB) to cluster node #1 ...
[16:18:50.207] Exporting ‘...future.FUN’ (504 bytes) to cluster node #1 ...
[16:18:50.207] Exporting ‘...future.FUN’ (504 bytes) to cluster node #1 ... DONE
[16:18:50.207] Exporting ‘foo’ (1.60 KiB) to cluster node #1 ...
[16:18:50.208] Exporting ‘foo’ (1.60 KiB) to cluster node #1 ... DONE
[16:18:50.208] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[16:18:50.208] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[16:18:50.208] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ...
[16:18:50.209] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #1 ... DONE
[16:18:50.209] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ...
[16:18:50.209] Exporting ‘...future.elements_ii’ (112 bytes) to cluster node #1 ... DONE
[16:18:50.209] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ...
[16:18:50.209] Exporting ‘...future.seeds_ii’ (160 bytes) to cluster node #1 ... DONE
[16:18:50.210] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ...
[16:18:50.210] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #1 ... DONE
[16:18:50.210] Exporting 7 global objects (2.15 KiB) to cluster node #1 ... DONE
[16:18:50.210] MultisessionFuture started
[16:18:50.211] - Launch lazy future ... done
[16:18:50.211] run() for ‘MultisessionFuture’ ... done
[16:18:50.211] Created future:
[16:18:50.211] MultisessionFuture:
[16:18:50.211] Label: ‘future_replicate-1’
[16:18:50.211] Expression:
[16:18:50.211] {
[16:18:50.211]     do.call(function(...) {
[16:18:50.211]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:50.211]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:50.211]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:50.211]             on.exit(options(oopts), add = TRUE)
[16:18:50.211]         }
[16:18:50.211]         {
[16:18:50.211]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:50.211]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:50.211]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:50.211]                   envir = globalenv(), inherits = FALSE)
[16:18:50.211]                 ...future.FUN(...future.X_jj, ...)
[16:18:50.211]             })
[16:18:50.211]         }
[16:18:50.211]     }, args = future.call.arguments)
[16:18:50.211] }
[16:18:50.211] Lazy evaluation: FALSE
[16:18:50.211] Asynchronous evaluation: TRUE
[16:18:50.211] Local evaluation: TRUE
[16:18:50.211] Environment: 0x55e7a0e6a6c8
[16:18:50.211] Capture standard output: TRUE
[16:18:50.211] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:18:50.211] Globals: 7 objects totaling 2.41 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 112 bytes, ...)
[16:18:50.211] Packages: <none>
[16:18:50.211] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:18:50.211] Resolved: FALSE
[16:18:50.211] Value: <not collected>
[16:18:50.211] Conditions captured: <none>
[16:18:50.211] Early signaling: FALSE
[16:18:50.211] Owner process: 20271db5-d788-b537-4432-0a26f2d2d030
[16:18:50.211] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:50.223] Chunk #1 of 2 ... DONE
[16:18:50.223] Chunk #2 of 2 ...
[16:18:50.223]  - Finding globals in 'X' for chunk #2 ...
[16:18:50.223] getGlobalsAndPackages() ...
[16:18:50.223] Searching for globals...
[16:18:50.223] 
[16:18:50.223] Searching for globals ... DONE
[16:18:50.224] - globals: [0] <none>
[16:18:50.224] getGlobalsAndPackages() ... DONE
[16:18:50.224]    + additional globals found: [n=0] 
[16:18:50.224]    + additional namespaces needed: [n=0] 
[16:18:50.224]  - Finding globals in 'X' for chunk #2 ... DONE
[16:18:50.224]  - Adjusted option 'future.globals.maxSize': 524288000 -> 2 * 524288000 = 1048576000 (bytes)
[16:18:50.224]  - seeds: [3] <seeds>
[16:18:50.224]  - All globals exported: [n=7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:50.224] getGlobalsAndPackages() ...
[16:18:50.225] - globals passed as-is: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘...’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:50.225] Resolving globals: FALSE
[16:18:50.225] Tweak future expression to call with '...' arguments ...
[16:18:50.225] {
[16:18:50.225]     do.call(function(...) {
[16:18:50.225]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:50.225]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:50.225]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:50.225]             on.exit(options(oopts), add = TRUE)
[16:18:50.225]         }
[16:18:50.225]         {
[16:18:50.225]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:50.225]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:50.225]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:50.225]                   envir = globalenv(), inherits = FALSE)
[16:18:50.225]                 ...future.FUN(...future.X_jj, ...)
[16:18:50.225]             })
[16:18:50.225]         }
[16:18:50.225]     }, args = future.call.arguments)
[16:18:50.225] }
[16:18:50.225] Tweak future expression to call with '...' arguments ... DONE
[16:18:50.226] - globals: [7] ‘...future.FUN’, ‘foo’, ‘x’, ‘future.call.arguments’, ‘...future.elements_ii’, ‘...future.seeds_ii’, ‘...future.globals.maxSize’
[16:18:50.226] 
[16:18:50.226] getGlobalsAndPackages() ... DONE
[16:18:50.226] run() for ‘Future’ ...
[16:18:50.226] - state: ‘created’
[16:18:50.226] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:18:50.241] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:50.241] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:18:50.241]   - Field: ‘node’
[16:18:50.241]   - Field: ‘label’
[16:18:50.241]   - Field: ‘local’
[16:18:50.241]   - Field: ‘owner’
[16:18:50.241]   - Field: ‘envir’
[16:18:50.241]   - Field: ‘workers’
[16:18:50.241]   - Field: ‘packages’
[16:18:50.241]   - Field: ‘gc’
[16:18:50.242]   - Field: ‘conditions’
[16:18:50.242]   - Field: ‘persistent’
[16:18:50.242]   - Field: ‘expr’
[16:18:50.242]   - Field: ‘uuid’
[16:18:50.242]   - Field: ‘seed’
[16:18:50.242]   - Field: ‘version’
[16:18:50.242]   - Field: ‘result’
[16:18:50.242]   - Field: ‘asynchronous’
[16:18:50.242]   - Field: ‘calls’
[16:18:50.242]   - Field: ‘globals’
[16:18:50.243]   - Field: ‘stdout’
[16:18:50.243]   - Field: ‘earlySignal’
[16:18:50.243]   - Field: ‘lazy’
[16:18:50.243]   - Field: ‘state’
[16:18:50.243] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:18:50.243] - Launch lazy future ...
[16:18:50.243] Packages needed by the future expression (n = 0): <none>
[16:18:50.243] Packages needed by future strategies (n = 0): <none>
[16:18:50.244] {
[16:18:50.244]     {
[16:18:50.244]         {
[16:18:50.244]             ...future.startTime <- base::Sys.time()
[16:18:50.244]             {
[16:18:50.244]                 {
[16:18:50.244]                   {
[16:18:50.244]                     {
[16:18:50.244]                       base::local({
[16:18:50.244]                         has_future <- base::requireNamespace("future", 
[16:18:50.244]                           quietly = TRUE)
[16:18:50.244]                         if (has_future) {
[16:18:50.244]                           ns <- base::getNamespace("future")
[16:18:50.244]                           version <- ns[[".package"]][["version"]]
[16:18:50.244]                           if (is.null(version)) 
[16:18:50.244]                             version <- utils::packageVersion("future")
[16:18:50.244]                         }
[16:18:50.244]                         else {
[16:18:50.244]                           version <- NULL
[16:18:50.244]                         }
[16:18:50.244]                         if (!has_future || version < "1.8.0") {
[16:18:50.244]                           info <- base::c(r_version = base::gsub("R version ", 
[16:18:50.244]                             "", base::R.version$version.string), 
[16:18:50.244]                             platform = base::sprintf("%s (%s-bit)", 
[16:18:50.244]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:18:50.244]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:18:50.244]                               "release", "version")], collapse = " "), 
[16:18:50.244]                             hostname = base::Sys.info()[["nodename"]])
[16:18:50.244]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:18:50.244]                             info)
[16:18:50.244]                           info <- base::paste(info, collapse = "; ")
[16:18:50.244]                           if (!has_future) {
[16:18:50.244]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:18:50.244]                               info)
[16:18:50.244]                           }
[16:18:50.244]                           else {
[16:18:50.244]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:18:50.244]                               info, version)
[16:18:50.244]                           }
[16:18:50.244]                           base::stop(msg)
[16:18:50.244]                         }
[16:18:50.244]                       })
[16:18:50.244]                     }
[16:18:50.244]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:18:50.244]                     base::options(mc.cores = 1L)
[16:18:50.244]                   }
[16:18:50.244]                   ...future.strategy.old <- future::plan("list")
[16:18:50.244]                   options(future.plan = NULL)
[16:18:50.244]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:18:50.244]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:18:50.244]                 }
[16:18:50.244]                 ...future.workdir <- getwd()
[16:18:50.244]             }
[16:18:50.244]             ...future.oldOptions <- base::as.list(base::.Options)
[16:18:50.244]             ...future.oldEnvVars <- base::Sys.getenv()
[16:18:50.244]         }
[16:18:50.244]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:18:50.244]             future.globals.maxSize = 1048576000, future.globals.method = NULL, 
[16:18:50.244]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:18:50.244]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:18:50.244]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:18:50.244]             future.stdout.windows.reencode = NULL, width = 80L)
[16:18:50.244]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:18:50.244]             base::names(...future.oldOptions))
[16:18:50.244]     }
[16:18:50.244]     if (FALSE) {
[16:18:50.244]     }
[16:18:50.244]     else {
[16:18:50.244]         if (TRUE) {
[16:18:50.244]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:18:50.244]                 open = "w")
[16:18:50.244]         }
[16:18:50.244]         else {
[16:18:50.244]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:18:50.244]                 windows = "NUL", "/dev/null"), open = "w")
[16:18:50.244]         }
[16:18:50.244]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:18:50.244]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:18:50.244]             base::sink(type = "output", split = FALSE)
[16:18:50.244]             base::close(...future.stdout)
[16:18:50.244]         }, add = TRUE)
[16:18:50.244]     }
[16:18:50.244]     ...future.frame <- base::sys.nframe()
[16:18:50.244]     ...future.conditions <- base::list()
[16:18:50.244]     ...future.rng <- base::globalenv()$.Random.seed
[16:18:50.244]     if (FALSE) {
[16:18:50.244]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:18:50.244]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:18:50.244]     }
[16:18:50.244]     ...future.result <- base::tryCatch({
[16:18:50.244]         base::withCallingHandlers({
[16:18:50.244]             ...future.value <- base::withVisible(base::local({
[16:18:50.244]                 ...future.makeSendCondition <- base::local({
[16:18:50.244]                   sendCondition <- NULL
[16:18:50.244]                   function(frame = 1L) {
[16:18:50.244]                     if (is.function(sendCondition)) 
[16:18:50.244]                       return(sendCondition)
[16:18:50.244]                     ns <- getNamespace("parallel")
[16:18:50.244]                     if (exists("sendData", mode = "function", 
[16:18:50.244]                       envir = ns)) {
[16:18:50.244]                       parallel_sendData <- get("sendData", mode = "function", 
[16:18:50.244]                         envir = ns)
[16:18:50.244]                       envir <- sys.frame(frame)
[16:18:50.244]                       master <- NULL
[16:18:50.244]                       while (!identical(envir, .GlobalEnv) && 
[16:18:50.244]                         !identical(envir, emptyenv())) {
[16:18:50.244]                         if (exists("master", mode = "list", envir = envir, 
[16:18:50.244]                           inherits = FALSE)) {
[16:18:50.244]                           master <- get("master", mode = "list", 
[16:18:50.244]                             envir = envir, inherits = FALSE)
[16:18:50.244]                           if (inherits(master, c("SOCKnode", 
[16:18:50.244]                             "SOCK0node"))) {
[16:18:50.244]                             sendCondition <<- function(cond) {
[16:18:50.244]                               data <- list(type = "VALUE", value = cond, 
[16:18:50.244]                                 success = TRUE)
[16:18:50.244]                               parallel_sendData(master, data)
[16:18:50.244]                             }
[16:18:50.244]                             return(sendCondition)
[16:18:50.244]                           }
[16:18:50.244]                         }
[16:18:50.244]                         frame <- frame + 1L
[16:18:50.244]                         envir <- sys.frame(frame)
[16:18:50.244]                       }
[16:18:50.244]                     }
[16:18:50.244]                     sendCondition <<- function(cond) NULL
[16:18:50.244]                   }
[16:18:50.244]                 })
[16:18:50.244]                 withCallingHandlers({
[16:18:50.244]                   {
[16:18:50.244]                     do.call(function(...) {
[16:18:50.244]                       ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:50.244]                       if (!identical(...future.globals.maxSize.org, 
[16:18:50.244]                         ...future.globals.maxSize)) {
[16:18:50.244]                         oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:50.244]                         on.exit(options(oopts), add = TRUE)
[16:18:50.244]                       }
[16:18:50.244]                       {
[16:18:50.244]                         lapply(seq_along(...future.elements_ii), 
[16:18:50.244]                           FUN = function(jj) {
[16:18:50.244]                             ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:50.244]                             assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:50.244]                               envir = globalenv(), inherits = FALSE)
[16:18:50.244]                             ...future.FUN(...future.X_jj, ...)
[16:18:50.244]                           })
[16:18:50.244]                       }
[16:18:50.244]                     }, args = future.call.arguments)
[16:18:50.244]                   }
[16:18:50.244]                 }, immediateCondition = function(cond) {
[16:18:50.244]                   sendCondition <- ...future.makeSendCondition()
[16:18:50.244]                   sendCondition(cond)
[16:18:50.244]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:50.244]                   {
[16:18:50.244]                     inherits <- base::inherits
[16:18:50.244]                     invokeRestart <- base::invokeRestart
[16:18:50.244]                     is.null <- base::is.null
[16:18:50.244]                     muffled <- FALSE
[16:18:50.244]                     if (inherits(cond, "message")) {
[16:18:50.244]                       muffled <- grepl(pattern, "muffleMessage")
[16:18:50.244]                       if (muffled) 
[16:18:50.244]                         invokeRestart("muffleMessage")
[16:18:50.244]                     }
[16:18:50.244]                     else if (inherits(cond, "warning")) {
[16:18:50.244]                       muffled <- grepl(pattern, "muffleWarning")
[16:18:50.244]                       if (muffled) 
[16:18:50.244]                         invokeRestart("muffleWarning")
[16:18:50.244]                     }
[16:18:50.244]                     else if (inherits(cond, "condition")) {
[16:18:50.244]                       if (!is.null(pattern)) {
[16:18:50.244]                         computeRestarts <- base::computeRestarts
[16:18:50.244]                         grepl <- base::grepl
[16:18:50.244]                         restarts <- computeRestarts(cond)
[16:18:50.244]                         for (restart in restarts) {
[16:18:50.244]                           name <- restart$name
[16:18:50.244]                           if (is.null(name)) 
[16:18:50.244]                             next
[16:18:50.244]                           if (!grepl(pattern, name)) 
[16:18:50.244]                             next
[16:18:50.244]                           invokeRestart(restart)
[16:18:50.244]                           muffled <- TRUE
[16:18:50.244]                           break
[16:18:50.244]                         }
[16:18:50.244]                       }
[16:18:50.244]                     }
[16:18:50.244]                     invisible(muffled)
[16:18:50.244]                   }
[16:18:50.244]                   muffleCondition(cond)
[16:18:50.244]                 })
[16:18:50.244]             }))
[16:18:50.244]             future::FutureResult(value = ...future.value$value, 
[16:18:50.244]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:50.244]                   ...future.rng), globalenv = if (FALSE) 
[16:18:50.244]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:18:50.244]                     ...future.globalenv.names))
[16:18:50.244]                 else NULL, started = ...future.startTime, version = "1.8")
[16:18:50.244]         }, condition = base::local({
[16:18:50.244]             c <- base::c
[16:18:50.244]             inherits <- base::inherits
[16:18:50.244]             invokeRestart <- base::invokeRestart
[16:18:50.244]             length <- base::length
[16:18:50.244]             list <- base::list
[16:18:50.244]             seq.int <- base::seq.int
[16:18:50.244]             signalCondition <- base::signalCondition
[16:18:50.244]             sys.calls <- base::sys.calls
[16:18:50.244]             `[[` <- base::`[[`
[16:18:50.244]             `+` <- base::`+`
[16:18:50.244]             `<<-` <- base::`<<-`
[16:18:50.244]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:18:50.244]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:18:50.244]                   3L)]
[16:18:50.244]             }
[16:18:50.244]             function(cond) {
[16:18:50.244]                 is_error <- inherits(cond, "error")
[16:18:50.244]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:18:50.244]                   NULL)
[16:18:50.244]                 if (is_error) {
[16:18:50.244]                   sessionInformation <- function() {
[16:18:50.244]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:18:50.244]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:18:50.244]                       search = base::search(), system = base::Sys.info())
[16:18:50.244]                   }
[16:18:50.244]                   ...future.conditions[[length(...future.conditions) + 
[16:18:50.244]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:18:50.244]                     cond$call), session = sessionInformation(), 
[16:18:50.244]                     timestamp = base::Sys.time(), signaled = 0L)
[16:18:50.244]                   signalCondition(cond)
[16:18:50.244]                 }
[16:18:50.244]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:18:50.244]                 "immediateCondition"))) {
[16:18:50.244]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:18:50.244]                   ...future.conditions[[length(...future.conditions) + 
[16:18:50.244]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:18:50.244]                   if (TRUE && !signal) {
[16:18:50.244]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:50.244]                     {
[16:18:50.244]                       inherits <- base::inherits
[16:18:50.244]                       invokeRestart <- base::invokeRestart
[16:18:50.244]                       is.null <- base::is.null
[16:18:50.244]                       muffled <- FALSE
[16:18:50.244]                       if (inherits(cond, "message")) {
[16:18:50.244]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:50.244]                         if (muffled) 
[16:18:50.244]                           invokeRestart("muffleMessage")
[16:18:50.244]                       }
[16:18:50.244]                       else if (inherits(cond, "warning")) {
[16:18:50.244]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:50.244]                         if (muffled) 
[16:18:50.244]                           invokeRestart("muffleWarning")
[16:18:50.244]                       }
[16:18:50.244]                       else if (inherits(cond, "condition")) {
[16:18:50.244]                         if (!is.null(pattern)) {
[16:18:50.244]                           computeRestarts <- base::computeRestarts
[16:18:50.244]                           grepl <- base::grepl
[16:18:50.244]                           restarts <- computeRestarts(cond)
[16:18:50.244]                           for (restart in restarts) {
[16:18:50.244]                             name <- restart$name
[16:18:50.244]                             if (is.null(name)) 
[16:18:50.244]                               next
[16:18:50.244]                             if (!grepl(pattern, name)) 
[16:18:50.244]                               next
[16:18:50.244]                             invokeRestart(restart)
[16:18:50.244]                             muffled <- TRUE
[16:18:50.244]                             break
[16:18:50.244]                           }
[16:18:50.244]                         }
[16:18:50.244]                       }
[16:18:50.244]                       invisible(muffled)
[16:18:50.244]                     }
[16:18:50.244]                     muffleCondition(cond, pattern = "^muffle")
[16:18:50.244]                   }
[16:18:50.244]                 }
[16:18:50.244]                 else {
[16:18:50.244]                   if (TRUE) {
[16:18:50.244]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:18:50.244]                     {
[16:18:50.244]                       inherits <- base::inherits
[16:18:50.244]                       invokeRestart <- base::invokeRestart
[16:18:50.244]                       is.null <- base::is.null
[16:18:50.244]                       muffled <- FALSE
[16:18:50.244]                       if (inherits(cond, "message")) {
[16:18:50.244]                         muffled <- grepl(pattern, "muffleMessage")
[16:18:50.244]                         if (muffled) 
[16:18:50.244]                           invokeRestart("muffleMessage")
[16:18:50.244]                       }
[16:18:50.244]                       else if (inherits(cond, "warning")) {
[16:18:50.244]                         muffled <- grepl(pattern, "muffleWarning")
[16:18:50.244]                         if (muffled) 
[16:18:50.244]                           invokeRestart("muffleWarning")
[16:18:50.244]                       }
[16:18:50.244]                       else if (inherits(cond, "condition")) {
[16:18:50.244]                         if (!is.null(pattern)) {
[16:18:50.244]                           computeRestarts <- base::computeRestarts
[16:18:50.244]                           grepl <- base::grepl
[16:18:50.244]                           restarts <- computeRestarts(cond)
[16:18:50.244]                           for (restart in restarts) {
[16:18:50.244]                             name <- restart$name
[16:18:50.244]                             if (is.null(name)) 
[16:18:50.244]                               next
[16:18:50.244]                             if (!grepl(pattern, name)) 
[16:18:50.244]                               next
[16:18:50.244]                             invokeRestart(restart)
[16:18:50.244]                             muffled <- TRUE
[16:18:50.244]                             break
[16:18:50.244]                           }
[16:18:50.244]                         }
[16:18:50.244]                       }
[16:18:50.244]                       invisible(muffled)
[16:18:50.244]                     }
[16:18:50.244]                     muffleCondition(cond, pattern = "^muffle")
[16:18:50.244]                   }
[16:18:50.244]                 }
[16:18:50.244]             }
[16:18:50.244]         }))
[16:18:50.244]     }, error = function(ex) {
[16:18:50.244]         base::structure(base::list(value = NULL, visible = NULL, 
[16:18:50.244]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:18:50.244]                 ...future.rng), started = ...future.startTime, 
[16:18:50.244]             finished = Sys.time(), session_uuid = NA_character_, 
[16:18:50.244]             version = "1.8"), class = "FutureResult")
[16:18:50.244]     }, finally = {
[16:18:50.244]         if (!identical(...future.workdir, getwd())) 
[16:18:50.244]             setwd(...future.workdir)
[16:18:50.244]         {
[16:18:50.244]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:18:50.244]                 ...future.oldOptions$nwarnings <- NULL
[16:18:50.244]             }
[16:18:50.244]             base::options(...future.oldOptions)
[16:18:50.244]             if (.Platform$OS.type == "windows") {
[16:18:50.244]                 old_names <- names(...future.oldEnvVars)
[16:18:50.244]                 envs <- base::Sys.getenv()
[16:18:50.244]                 names <- names(envs)
[16:18:50.244]                 common <- intersect(names, old_names)
[16:18:50.244]                 added <- setdiff(names, old_names)
[16:18:50.244]                 removed <- setdiff(old_names, names)
[16:18:50.244]                 changed <- common[...future.oldEnvVars[common] != 
[16:18:50.244]                   envs[common]]
[16:18:50.244]                 NAMES <- toupper(changed)
[16:18:50.244]                 args <- list()
[16:18:50.244]                 for (kk in seq_along(NAMES)) {
[16:18:50.244]                   name <- changed[[kk]]
[16:18:50.244]                   NAME <- NAMES[[kk]]
[16:18:50.244]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:50.244]                     next
[16:18:50.244]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:50.244]                 }
[16:18:50.244]                 NAMES <- toupper(added)
[16:18:50.244]                 for (kk in seq_along(NAMES)) {
[16:18:50.244]                   name <- added[[kk]]
[16:18:50.244]                   NAME <- NAMES[[kk]]
[16:18:50.244]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:50.244]                     next
[16:18:50.244]                   args[[name]] <- ""
[16:18:50.244]                 }
[16:18:50.244]                 NAMES <- toupper(removed)
[16:18:50.244]                 for (kk in seq_along(NAMES)) {
[16:18:50.244]                   name <- removed[[kk]]
[16:18:50.244]                   NAME <- NAMES[[kk]]
[16:18:50.244]                   if (name != NAME && is.element(NAME, old_names)) 
[16:18:50.244]                     next
[16:18:50.244]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:18:50.244]                 }
[16:18:50.244]                 if (length(args) > 0) 
[16:18:50.244]                   base::do.call(base::Sys.setenv, args = args)
[16:18:50.244]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:18:50.244]             }
[16:18:50.244]             else {
[16:18:50.244]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:18:50.244]             }
[16:18:50.244]             {
[16:18:50.244]                 if (base::length(...future.futureOptionsAdded) > 
[16:18:50.244]                   0L) {
[16:18:50.244]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:18:50.244]                   base::names(opts) <- ...future.futureOptionsAdded
[16:18:50.244]                   base::options(opts)
[16:18:50.244]                 }
[16:18:50.244]                 {
[16:18:50.244]                   {
[16:18:50.244]                     base::options(mc.cores = ...future.mc.cores.old)
[16:18:50.244]                     NULL
[16:18:50.244]                   }
[16:18:50.244]                   options(future.plan = NULL)
[16:18:50.244]                   if (is.na(NA_character_)) 
[16:18:50.244]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:18:50.244]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:18:50.244]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:18:50.244]                     .init = FALSE)
[16:18:50.244]                 }
[16:18:50.244]             }
[16:18:50.244]         }
[16:18:50.244]     })
[16:18:50.244]     if (TRUE) {
[16:18:50.244]         base::sink(type = "output", split = FALSE)
[16:18:50.244]         if (TRUE) {
[16:18:50.244]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:18:50.244]         }
[16:18:50.244]         else {
[16:18:50.244]             ...future.result["stdout"] <- base::list(NULL)
[16:18:50.244]         }
[16:18:50.244]         base::close(...future.stdout)
[16:18:50.244]         ...future.stdout <- NULL
[16:18:50.244]     }
[16:18:50.244]     ...future.result$conditions <- ...future.conditions
[16:18:50.244]     ...future.result$finished <- base::Sys.time()
[16:18:50.244]     ...future.result
[16:18:50.244] }
[16:18:50.247] Exporting 7 global objects (2.15 KiB) to cluster node #2 ...
[16:18:50.247] Exporting ‘...future.FUN’ (504 bytes) to cluster node #2 ...
[16:18:50.247] Exporting ‘...future.FUN’ (504 bytes) to cluster node #2 ... DONE
[16:18:50.247] Exporting ‘foo’ (1.60 KiB) to cluster node #2 ...
[16:18:50.248] Exporting ‘foo’ (1.60 KiB) to cluster node #2 ... DONE
[16:18:50.248] Exporting ‘x’ (56 bytes) to cluster node #2 ...
[16:18:50.248] Exporting ‘x’ (56 bytes) to cluster node #2 ... DONE
[16:18:50.248] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ...
[16:18:50.249] Exporting ‘future.call.arguments’ (0 bytes) to cluster node #2 ... DONE
[16:18:50.249] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ...
[16:18:50.249] Exporting ‘...future.elements_ii’ (168 bytes) to cluster node #2 ... DONE
[16:18:50.250] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ...
[16:18:50.250] Exporting ‘...future.seeds_ii’ (240 bytes) to cluster node #2 ... DONE
[16:18:50.250] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ...
[16:18:50.250] Exporting ‘...future.globals.maxSize’ (0 bytes) to cluster node #2 ... DONE
[16:18:50.251] Exporting 7 global objects (2.15 KiB) to cluster node #2 ... DONE
[16:18:50.251] MultisessionFuture started
[16:18:50.251] - Launch lazy future ... done
[16:18:50.251] run() for ‘MultisessionFuture’ ... done
[16:18:50.252] Created future:
[16:18:50.252] MultisessionFuture:
[16:18:50.252] Label: ‘future_replicate-2’
[16:18:50.252] Expression:
[16:18:50.252] {
[16:18:50.252]     do.call(function(...) {
[16:18:50.252]         ...future.globals.maxSize.org <- getOption("future.globals.maxSize")
[16:18:50.252]         if (!identical(...future.globals.maxSize.org, ...future.globals.maxSize)) {
[16:18:50.252]             oopts <- options(future.globals.maxSize = ...future.globals.maxSize)
[16:18:50.252]             on.exit(options(oopts), add = TRUE)
[16:18:50.252]         }
[16:18:50.252]         {
[16:18:50.252]             lapply(seq_along(...future.elements_ii), FUN = function(jj) {
[16:18:50.252]                 ...future.X_jj <- ...future.elements_ii[[jj]]
[16:18:50.252]                 assign(".Random.seed", ...future.seeds_ii[[jj]], 
[16:18:50.252]                   envir = globalenv(), inherits = FALSE)
[16:18:50.252]                 ...future.FUN(...future.X_jj, ...)
[16:18:50.252]             })
[16:18:50.252]         }
[16:18:50.252]     }, args = future.call.arguments)
[16:18:50.252] }
[16:18:50.252] Lazy evaluation: FALSE
[16:18:50.252] Asynchronous evaluation: TRUE
[16:18:50.252] Local evaluation: TRUE
[16:18:50.252] Environment: 0x55e7a0e6a6c8
[16:18:50.252] Capture standard output: TRUE
[16:18:50.252] Capture condition classes: ‘condition’ (excluding ‘nothing’)
[16:18:50.252] Globals: 7 objects totaling 2.55 KiB (function ‘...future.FUN’ of 504 bytes, function ‘foo’ of 1.60 KiB, numeric ‘x’ of 56 bytes, DotDotDotList ‘future.call.arguments’ of 0 bytes, list ‘...future.elements_ii’ of 168 bytes, ...)
[16:18:50.252] Packages: <none>
[16:18:50.252] L'Ecuyer-CMRG RNG seed: <none> (seed = NULL)
[16:18:50.252] Resolved: FALSE
[16:18:50.252] Value: <not collected>
[16:18:50.252] Conditions captured: <none>
[16:18:50.252] Early signaling: FALSE
[16:18:50.252] Owner process: 20271db5-d788-b537-4432-0a26f2d2d030
[16:18:50.252] Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:18:50.263] Chunk #2 of 2 ... DONE
[16:18:50.263] Launching 2 futures (chunks) ... DONE
[16:18:50.264] Resolving 2 futures (chunks) ...
[16:18:50.264] resolve() on list ...
[16:18:50.264]  recursive: 0
[16:18:50.264]  length: 2
[16:18:50.264] 
[16:18:50.264] receiveMessageFromWorker() for ClusterFuture ...
[16:18:50.264] - Validating connection of MultisessionFuture
[16:18:50.265] - received message: FutureResult
[16:18:50.265] - Received FutureResult
[16:18:50.265] - Erased future from FutureRegistry
[16:18:50.265] result() for ClusterFuture ...
[16:18:50.265] - result already collected: FutureResult
[16:18:50.265] result() for ClusterFuture ... done
[16:18:50.265] receiveMessageFromWorker() for ClusterFuture ... done
[16:18:50.265] Future #1
[16:18:50.265] result() for ClusterFuture ...
[16:18:50.265] - result already collected: FutureResult
[16:18:50.266] result() for ClusterFuture ... done
[16:18:50.266] result() for ClusterFuture ...
[16:18:50.266] - result already collected: FutureResult
[16:18:50.266] result() for ClusterFuture ... done
[16:18:50.266] signalConditionsASAP(MultisessionFuture, pos=1) ...
[16:18:50.266] - nx: 2
[16:18:50.266] - relay: TRUE
[16:18:50.266] - stdout: TRUE
[16:18:50.266] - signal: TRUE
[16:18:50.266] - resignal: FALSE
[16:18:50.266] - force: TRUE
[16:18:50.267] - relayed: [n=2] FALSE, FALSE
[16:18:50.267] - queued futures: [n=2] FALSE, FALSE
[16:18:50.267]  - until=1
[16:18:50.267]  - relaying element #1
[16:18:50.267] result() for ClusterFuture ...
[16:18:50.267] - result already collected: FutureResult
[16:18:50.267] result() for ClusterFuture ... done
[16:18:50.267] result() for ClusterFuture ...
[16:18:50.267] - result already collected: FutureResult
[16:18:50.267] result() for ClusterFuture ... done
[16:18:50.267] result() for ClusterFuture ...
[16:18:50.268] - result already collected: FutureResult
[16:18:50.268] result() for ClusterFuture ... done
[16:18:50.268] result() for ClusterFuture ...
[16:18:50.268] - result already collected: FutureResult
[16:18:50.268] result() for ClusterFuture ... done
[16:18:50.268] - relayed: [n=2] TRUE, FALSE
[16:18:50.268] - queued futures: [n=2] TRUE, FALSE
[16:18:50.268] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[16:18:50.268]  length: 1 (resolved future 1)
[16:18:50.294] receiveMessageFromWorker() for ClusterFuture ...
[16:18:50.294] - Validating connection of MultisessionFuture
[16:18:50.294] - received message: FutureResult
[16:18:50.294] - Received FutureResult
[16:18:50.294] - Erased future from FutureRegistry
[16:18:50.295] result() for ClusterFuture ...
[16:18:50.295] - result already collected: FutureResult
[16:18:50.295] result() for ClusterFuture ... done
[16:18:50.295] receiveMessageFromWorker() for ClusterFuture ... done
[16:18:50.295] Future #2
[16:18:50.295] result() for ClusterFuture ...
[16:18:50.295] - result already collected: FutureResult
[16:18:50.295] result() for ClusterFuture ... done
[16:18:50.295] result() for ClusterFuture ...
[16:18:50.295] - result already collected: FutureResult
[16:18:50.295] result() for ClusterFuture ... done
[16:18:50.296] signalConditionsASAP(MultisessionFuture, pos=2) ...
[16:18:50.296] - nx: 2
[16:18:50.296] - relay: TRUE
[16:18:50.296] - stdout: TRUE
[16:18:50.296] - signal: TRUE
[16:18:50.296] - resignal: FALSE
[16:18:50.296] - force: TRUE
[16:18:50.296] - relayed: [n=2] TRUE, FALSE
[16:18:50.296] - queued futures: [n=2] TRUE, FALSE
[16:18:50.296]  - until=2
[16:18:50.296]  - relaying element #2
[16:18:50.297] result() for ClusterFuture ...
[16:18:50.297] - result already collected: FutureResult
[16:18:50.297] result() for ClusterFuture ... done
[16:18:50.297] result() for ClusterFuture ...
[16:18:50.297] - result already collected: FutureResult
[16:18:50.297] result() for ClusterFuture ... done
[16:18:50.297] result() for ClusterFuture ...
[16:18:50.297] - result already collected: FutureResult
[16:18:50.297] result() for ClusterFuture ... done
[16:18:50.297] result() for ClusterFuture ...
[16:18:50.297] - result already collected: FutureResult
[16:18:50.298] result() for ClusterFuture ... done
[16:18:50.298] - relayed: [n=2] TRUE, TRUE
[16:18:50.298] - queued futures: [n=2] TRUE, TRUE
[16:18:50.298] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[16:18:50.298]  length: 0 (resolved future 2)
[16:18:50.298] Relaying remaining futures
[16:18:50.298] signalConditionsASAP(NULL, pos=0) ...
[16:18:50.298] - nx: 2
[16:18:50.298] - relay: TRUE
[16:18:50.298] - stdout: TRUE
[16:18:50.298] - signal: TRUE
[16:18:50.298] - resignal: FALSE
[16:18:50.299] - force: TRUE
[16:18:50.299] - relayed: [n=2] TRUE, TRUE
[16:18:50.299] - queued futures: [n=2] TRUE, TRUE
 - flush all
[16:18:50.299] - relayed: [n=2] TRUE, TRUE
[16:18:50.299] - queued futures: [n=2] TRUE, TRUE
[16:18:50.299] signalConditionsASAP(NULL, pos=0) ... done
[16:18:50.299] resolve() on list ... DONE
[16:18:50.299] result() for ClusterFuture ...
[16:18:50.299] - result already collected: FutureResult
[16:18:50.299] result() for ClusterFuture ... done
[16:18:50.299] result() for ClusterFuture ...
[16:18:50.300] - result already collected: FutureResult
[16:18:50.300] result() for ClusterFuture ... done
[16:18:50.300] result() for ClusterFuture ...
[16:18:50.300] - result already collected: FutureResult
[16:18:50.300] result() for ClusterFuture ... done
[16:18:50.300] result() for ClusterFuture ...
[16:18:50.300] - result already collected: FutureResult
[16:18:50.300] result() for ClusterFuture ... done
[16:18:50.300]  - Number of value chunks collected: 2
[16:18:50.300] Resolving 2 futures (chunks) ... DONE
[16:18:50.300] Reducing values from 2 chunks ...
[16:18:50.301]  - Number of values collected after concatenation: 5
[16:18:50.301]  - Number of values expected: 5
[16:18:50.301] Reducing values from 2 chunks ... DONE
[16:18:50.301] future_lapply() ... DONE
[16:18:50.301] plan(): Setting new future strategy stack:
[16:18:50.301] List of future strategies:
[16:18:50.301] 1. sequential:
[16:18:50.301]    - args: function (..., envir = parent.frame())
[16:18:50.301]    - tweaked: FALSE
[16:18:50.301]    - call: plan(sequential)
[16:18:50.302] plan(): nbrOfWorkers() = 1
*** strategy = ‘multisession’ ... done
> 
> message("*** future_replicate() ... DONE")
*** future_replicate() ... DONE
> 
> source("incl/end.R")
[16:18:50.303] plan(): Setting new future strategy stack:
[16:18:50.303] List of future strategies:
[16:18:50.303] 1. FutureStrategy:
[16:18:50.303]    - args: function (..., envir = parent.frame())
[16:18:50.303]    - tweaked: FALSE
[16:18:50.303]    - call: future::plan(oplan)
[16:18:50.303] plan(): nbrOfWorkers() = 1
> 
