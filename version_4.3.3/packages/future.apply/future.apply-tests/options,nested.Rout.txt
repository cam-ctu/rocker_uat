
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
Loading required package: future
[16:19:23.831] plan(): Setting new future strategy stack:
[16:19:23.832] List of future strategies:
[16:19:23.832] 1. sequential:
[16:19:23.832]    - args: function (..., envir = parent.frame())
[16:19:23.832]    - tweaked: FALSE
[16:19:23.832]    - call: future::plan("sequential")
[16:19:23.845] plan(): nbrOfWorkers() = 1
> 
> message("*** Options in nested parallelization ...")
*** Options in nested parallelization ...
> 
> options(future.debug = FALSE)
> options(future.apply.debug = FALSE)
> options(future.globals.maxSize = 1234000)
> 
> for (cores in 1:availCores) {
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+   strategies <- supportedStrategies(cores)
+ 
+   for (strategy1 in strategies) {
+     for (strategy2 in strategies) {
+       message(sprintf("- plan('%s') ...", strategy2))
+       plan(list(outer = tweak(strategy1), inner = strategy2))
+ 
+       v <- future_lapply(1:2, FUN = function(x) {
+         outer <- data.frame(
+           label   = "outer",
+           idx     = x,
+           pid     = Sys.getpid(),
+           maxSize = getOption("future.globals.maxSize", NA_real_)
+         )
+         
+         inner <- future_lapply(3:4, FUN = function(x) {
+           data.frame(
+             label   = "inner",
+             idx     = x,
+             pid     = Sys.getpid(),
+             maxSize = getOption("future.globals.maxSize", NA_real_))
+         })
+         inner <- do.call(rbind, inner)
+         rbind(outer, inner)
+       })
+       v <- do.call(rbind, v)
+       print(v)
+       stopifnot(!anyNA(v$maxSize))
+     } ## for (strategy2 ...)
+   } ## for (strategy1 ...)
+ } ## for (cores in ...)
Testing with 1 cores ...
- plan('sequential') ...
  label idx   pid maxSize
1 outer   1 76684 1234000
2 inner   3 76684 1234000
3 inner   4 76684 1234000
4 outer   2 76684 1234000
5 inner   3 76684 1234000
6 inner   4 76684 1234000
- plan('multicore') ...
  label idx   pid maxSize
1 outer   1 76684 1234000
2 inner   3 76684 1234000
3 inner   4 76684 1234000
4 outer   2 76684 1234000
5 inner   3 76684 1234000
6 inner   4 76684 1234000
- plan('multisession') ...
  label idx   pid maxSize
1 outer   1 76684 1234000
2 inner   3 76684 1234000
3 inner   4 76684 1234000
4 outer   2 76684 1234000
5 inner   3 76684 1234000
6 inner   4 76684 1234000
- plan('sequential') ...
  label idx   pid maxSize
1 outer   1 76684 1234000
2 inner   3 76684 1234000
3 inner   4 76684 1234000
4 outer   2 76684 1234000
5 inner   3 76684 1234000
6 inner   4 76684 1234000
- plan('multicore') ...
  label idx   pid maxSize
1 outer   1 76684 1234000
2 inner   3 76684 1234000
3 inner   4 76684 1234000
4 outer   2 76684 1234000
5 inner   3 76684 1234000
6 inner   4 76684 1234000
- plan('multisession') ...
  label idx   pid maxSize
1 outer   1 76684 1234000
2 inner   3 76684 1234000
3 inner   4 76684 1234000
4 outer   2 76684 1234000
5 inner   3 76684 1234000
6 inner   4 76684 1234000
- plan('sequential') ...
  label idx   pid maxSize
1 outer   1 76684 1234000
2 inner   3 76684 1234000
3 inner   4 76684 1234000
4 outer   2 76684 1234000
5 inner   3 76684 1234000
6 inner   4 76684 1234000
- plan('multicore') ...
  label idx   pid maxSize
1 outer   1 76684 1234000
2 inner   3 76684 1234000
3 inner   4 76684 1234000
4 outer   2 76684 1234000
5 inner   3 76684 1234000
6 inner   4 76684 1234000
- plan('multisession') ...
  label idx   pid maxSize
1 outer   1 76684 1234000
2 inner   3 76684 1234000
3 inner   4 76684 1234000
4 outer   2 76684 1234000
5 inner   3 76684 1234000
6 inner   4 76684 1234000
Testing with 2 cores ...
- plan('multicore') ...
  label idx   pid maxSize
1 outer   1 76858 1234000
2 inner   3 76858 1234000
3 inner   4 76858 1234000
4 outer   2 76865 1234000
5 inner   3 76865 1234000
6 inner   4 76865 1234000
- plan('multisession') ...
  label idx   pid maxSize
1 outer   1 76888 1234000
2 inner   3 76888 1234000
3 inner   4 76888 1234000
4 outer   2 76894 1234000
5 inner   3 76894 1234000
6 inner   4 76894 1234000
- plan('multicore') ...
  label idx   pid maxSize
1 outer   1 76947 1234000
2 inner   3 76947 1234000
3 inner   4 76947 1234000
4 outer   2 76948 1234000
5 inner   3 76948 1234000
6 inner   4 76948 1234000
- plan('multisession') ...
  label idx   pid maxSize
1 outer   1 77071 1234000
2 inner   3 77071 1234000
3 inner   4 77071 1234000
4 outer   2 77070 1234000
5 inner   3 77070 1234000
6 inner   4 77070 1234000
> 
> message("*** Options in nested parallelization ... done")
*** Options in nested parallelization ... done
> 
> source("incl/end.R")
> 
