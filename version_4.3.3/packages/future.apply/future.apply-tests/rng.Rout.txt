
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start,load-only.R")
[16:19:26.509] Set package option ‘parallelly.availableCores.methods’
[16:19:26.510] Environment variable ‘R_PARALLELLY_AVAILABLECORES_METHODS’ not set
[16:19:26.510] Set package option ‘parallelly.availableCores.fallback’
[16:19:26.510] Environment variable ‘R_PARALLELLY_AVAILABLECORES_FALLBACK’ not set
[16:19:26.511] Set package option ‘parallelly.availableCores.min’
[16:19:26.511] Environment variable ‘R_PARALLELLY_AVAILABLECORES_MIN’ not set
[16:19:26.511] Set package option ‘parallelly.availableCores.system’
[16:19:26.511] Environment variable ‘R_PARALLELLY_AVAILABLECORES_SYSTEM’ not set
[16:19:26.511] Set package option ‘parallelly.availableCores.logical’
[16:19:26.512] Environment variable ‘R_PARALLELLY_AVAILABLECORES_LOGICAL’ not set
[16:19:26.512] Set package option ‘parallelly.availableCores.omit’
[16:19:26.515] Environment variable ‘R_PARALLELLY_AVAILABLECORES_OMIT’ not set
[16:19:26.516] Set package option ‘parallelly.availableWorkers.methods’
[16:19:26.516] Environment variable ‘R_PARALLELLY_AVAILABLEWORKERS_METHODS’ not set
[16:19:26.516] Set package option ‘parallelly.maxWorkers.localhost’
[16:19:26.516] Environment variable ‘R_PARALLELLY_MAXWORKERS_LOCALHOST’ not set
[16:19:26.516] Set package option ‘parallelly.maxWorkers.localhost.ignore’
[16:19:26.516] Environment variable ‘R_PARALLELLY_MAXWORKERS_LOCALHOST_IGNORE’ not set
[16:19:26.517] Set package option ‘parallelly.fork.enable’
[16:19:26.517] Environment variable ‘R_PARALLELLY_FORK_ENABLE’ not set
[16:19:26.517] Set package option ‘parallelly.supportsMulticore.disableOn’
[16:19:26.517] Environment variable ‘R_PARALLELLY_SUPPORTSMULTICORE_DISABLEON’ not set
[16:19:26.517] Set package option ‘parallelly.supportsMulticore.unstable’
[16:19:26.518] Environment variable ‘R_PARALLELLY_SUPPORTSMULTICORE_UNSTABLE’ not set
[16:19:26.518] Set package option ‘parallelly.makeNodePSOCK.setup_strategy’
[16:19:26.518] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_SETUP_STRATEGY’ not set
[16:19:26.518] Set package option ‘parallelly.makeNodePSOCK.validate’
[16:19:26.518] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_VALIDATE’ not set
[16:19:26.518] Set package option ‘parallelly.makeNodePSOCK.connectTimeout’
[16:19:26.518] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_CONNECTTIMEOUT’ not set
[16:19:26.519] Set package option ‘parallelly.makeNodePSOCK.timeout’
[16:19:26.519] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_TIMEOUT’ not set
[16:19:26.519] Set package option ‘parallelly.makeNodePSOCK.useXDR’
[16:19:26.519] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_USEXDR’ not set
[16:19:26.519] Set package option ‘parallelly.makeNodePSOCK.socketOptions’
[16:19:26.519] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_SOCKETOPTIONS’ not set
[16:19:26.520] Set package option ‘parallelly.makeNodePSOCK.rshcmd’
[16:19:26.520] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_RSHCMD’ not set
[16:19:26.520] Set package option ‘parallelly.makeNodePSOCK.rshopts’
[16:19:26.520] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_RSHOPTS’ not set
[16:19:26.520] Set package option ‘parallelly.makeNodePSOCK.tries’
[16:19:26.520] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_TRIES’ not set
[16:19:26.521] Set package option ‘parallelly.makeNodePSOCK.tries.delay’
[16:19:26.521] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_TRIES_DELAY’ not set
[16:19:26.521] Set package option ‘parallelly.makeNodePSOCK.rscript_label’
[16:19:26.521] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_RSCRIPT_LABEL’ not set
[16:19:26.521] Set package option ‘parallelly.makeNodePSOCK.sessionInfo.pkgs’
[16:19:26.521] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_SESSIONINFO_PKGS’ not set
[16:19:26.522] Set package option ‘parallelly.makeNodePSOCK.autoKill’
[16:19:26.522] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_AUTOKILL’ not set
[16:19:26.522] Set package option ‘parallelly.makeNodePSOCK.master.localhost.hostname’
[16:19:26.522] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_MASTER_LOCALHOST_HOSTNAME’ not set
[16:19:26.522] Set package option ‘parallelly.makeNodePSOCK.port.increment’
[16:19:26.522] Environment variable ‘R_PARALLELLY_MAKENODEPSOCK_PORT_INCREMENT’ not set
[16:19:26.523] parallelly-specific environment variables:
[16:19:26.529] Future-specific environment variables:
[16:19:26.529] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[16:19:26.529] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[16:19:26.529] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[16:19:26.529] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[16:19:26.530] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[16:19:26.530] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[16:19:26.530] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[16:19:26.530] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[16:19:26.530] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[16:19:26.530] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[16:19:26.530] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[16:19:26.530] Environment variable ‘R_FUTURE_PLAN’ not set
[16:19:26.530] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[16:19:26.530] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[16:19:26.531] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[16:19:26.531] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[16:19:26.531] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[16:19:26.531] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[16:19:26.531] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[16:19:26.531] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[16:19:26.531] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[16:19:26.531] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[16:19:26.531] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[16:19:26.532] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[16:19:26.532] Environment variable ‘R_FUTURE_WAIT_INTERVAL’ not set
[16:19:26.532] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[16:19:26.532] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[16:19:26.532] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[16:19:26.532] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[16:19:26.532] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[16:19:26.532] Environment variable ‘R_FUTURE_JOURNAL’ not set
[16:19:26.532] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[16:19:26.533] R process uuid: 52262a3d-9932-df64-d910-af5cce98a77b
[16:19:26.533] Setting plan('default')
[16:19:26.534] plan(): Setting new future strategy stack:
[16:19:26.534] List of future strategies:
[16:19:26.534] 1. sequential:
[16:19:26.534]    - args: function (..., envir = parent.frame())
[16:19:26.534]    - tweaked: FALSE
[16:19:26.534]    - call: NULL
[16:19:26.535] plan(): nbrOfWorkers() = 1
[16:19:26.557] plan(): Setting new future strategy stack:
[16:19:26.557] List of future strategies:
[16:19:26.557] 1. sequential:
[16:19:26.557]    - args: function (..., envir = parent.frame())
[16:19:26.557]    - tweaked: FALSE
[16:19:26.557]    - call: future::plan("sequential")
[16:19:26.570] plan(): nbrOfWorkers() = 1
> 
> message("*** RNG ...")
*** RNG ...
> 
> set_random_seed(seed = NULL)
Warning in rm(list = ".Random.seed", envir = env, inherits = FALSE) :
  object '.Random.seed' not found
> seed <- get_random_seed()
> stopifnot(is.null(seed))
> 
> set_random_seed(seed = 42L)
> seed <- get_random_seed()
> stopifnot(identical(seed, 42L))
> 
> res <- tryCatch({
+   seed <- as_lecyer_cmrg_seed(seed = FALSE)
+ }, error = identity)
> print(res)
<simpleError: Argument 'seed' must be TRUE if logical: FALSE>
> stopifnot(inherits(res, "error"))
> 
> seed <- as_lecyer_cmrg_seed(seed = 42L)
Warning in RNGkind("L'Ecuyer-CMRG") :
  '.Random.seed[1]' is not a valid RNG kind so ignored
> str(seed)
 int [1:7] 10407 -2133391687 507561766 1260545903 1362917092 -1772566379 -1344458670
> stopifnot(is_lecyer_cmrg_seed(seed))
> set_random_seed(seed = seed)
> stopifnot(identical(get_random_seed(), seed))
> 
> seed2 <- as_lecyer_cmrg_seed(seed = TRUE)
> str(seed2)
 int [1:7] 10407 -2133391687 507561766 1260545903 1362917092 -1772566379 -1344458670
> stopifnot(identical(seed2, seed))
> 
> seed3 <- as_lecyer_cmrg_seed(seed = seed)
> str(seed3)
 int [1:7] 10407 -2133391687 507561766 1260545903 1362917092 -1772566379 -1344458670
> stopifnot(identical(seed3, seed))
> 
> ## A random seed
> seed4 <- as_lecyer_cmrg_seed(seed = NA)
> str(seed4)
 int [1:7] 10407 1279540750 -941988041 -2007404020 745992093 -1794778694 2071448563
> stopifnot(is_lecyer_cmrg_seed(seed4))
> 
> 
> message(" - make_rng_seeds ...")
 - make_rng_seeds ...
> 
> seeds <- make_rng_seeds(2L, seed = NULL)
> stopifnot(is.null(seeds))
> 
> seeds <- make_rng_seeds(2L, seed = FALSE)
> stopifnot(is.null(seeds))
> 
> seeds <- make_rng_seeds(0L, seed = 42L)
[16:19:26.587] Generating random seeds ...
[16:19:26.587] Generating random seed streams for 0 elements ...
[16:19:26.587] Generating random seed streams for 0 elements ... DONE
[16:19:26.587] Generating random seeds ... DONE
> stopifnot(length(seeds) == 0L, identical(seeds, list()))
> 
> seeds <- make_rng_seeds(2L, seed = TRUE)
[16:19:26.587] Generating random seeds ...
[16:19:26.587] Generating random seed streams for 2 elements ...
[16:19:26.588] Generating random seed streams for 2 elements ... DONE
[16:19:26.588] Generating random seeds ... DONE
> stopifnot(length(seeds) == 2L, all(sapply(seeds, FUN = is_lecyer_cmrg_seed)))
> 
> seeds <- make_rng_seeds(3L, seed = 42L)
[16:19:26.588] Generating random seeds ...
[16:19:26.588] Generating random seed streams for 3 elements ...
[16:19:26.588] Generating random seed streams for 3 elements ... DONE
[16:19:26.588] Generating random seeds ... DONE
> stopifnot(length(seeds) == 3L, all(sapply(seeds, FUN = is_lecyer_cmrg_seed)))
> 
> seeds <- make_rng_seeds(1L, seed = 42L)
[16:19:26.588] Generating random seeds ...
[16:19:26.588] Generating random seed streams for 1 elements ...
[16:19:26.589] Generating random seed streams for 1 elements ... DONE
[16:19:26.589] Generating random seeds ... DONE
> stopifnot(length(seeds) == 1L, all(sapply(seeds, FUN = is_lecyer_cmrg_seed)))
> 
> seeds0 <- lapply(1:3, FUN = as_lecyer_cmrg_seed)
> seeds <- make_rng_seeds(length(seeds0), seed = seeds0)
[16:19:26.589] Generating random seeds ...
[16:19:26.589] Using a pre-define stream of 3 random seeds ...
[16:19:26.589] Using a pre-define stream of 3 random seeds ... DONE
[16:19:26.589] Generating random seeds ... DONE
> stopifnot(length(seeds) == length(seeds0),
+           all(sapply(seeds, FUN = is_lecyer_cmrg_seed)))
> 
> 
> message(" - exceptions ...")
 - exceptions ...
> 
> ## Invalid L'Ecuyer seed
> seed_invalid <- seed + 1L
> res <- tryCatch({
+   seed <- as_lecyer_cmrg_seed(seed = seed_invalid)
+ }, error = identity)
> print(res)
<simpleError: Argument 'seed' must be L'Ecuyer-CMRG RNG seed as returned by parallel::nextRNGStream() or an single integer:  int [1:7] 10408 -2133391686 507561767 1260545904 1362917093 -1772566378 -1344458669>
> stopifnot(inherits(res, "error"))
> 
> ## Invalid seed
> res <- tryCatch({
+   seed <- as_lecyer_cmrg_seed(seed = 1:2)
+ }, error = identity)
> print(res)
<simpleError: Argument 'seed' must be L'Ecuyer-CMRG RNG seed as returned by parallel::nextRNGStream() or an single integer:  int [1:2] 1 2>
> stopifnot(inherits(res, "error"))
> 
> ## Invalid length
> seeds0 <- lapply(1:2, FUN = as_lecyer_cmrg_seed)
> res <- tryCatch({
+   seeds <- make_rng_seeds(1L, seed = seeds0)
+ }, error = identity)
[16:19:26.591] Generating random seeds ...
[16:19:26.591] Using a pre-define stream of 1 random seeds ...
> print(res)
<simpleError: Argument 'seed' is a list, which specifies the sequence of seeds to be used for each element iterated over, but length(seed) != number of elements: 2 != 1>
> stopifnot(inherits(res, "error"))
> 
> ## Seeds of different kinds
> seeds0 <- lapply(1:2, FUN = as_lecyer_cmrg_seed)
> seeds0[[1]] <- seeds0[[1]][-1]
> res <- tryCatch({
+   seeds <- make_rng_seeds(2L, seed = seeds0)
+ }, error = identity)
[16:19:26.591] Generating random seeds ...
[16:19:26.591] Using a pre-define stream of 2 random seeds ...
> print(res)
<simpleError: The elements of the list specified in argument 'seed' are not all of the same lengths (did you really pass RNG seeds?): 6, 7>
> stopifnot(inherits(res, "error"))
> 
> ## List of scalar seeds?
> res <- tryCatch({
+   seeds <- make_rng_seeds(1L, seed = list(42L))
+ }, error = identity)
[16:19:26.591] Generating random seeds ...
[16:19:26.591] Using a pre-define stream of 1 random seeds ...
> print(res)
<simpleError in make_rng_seeds(1L, seed = list(42L)): Argument 'seed' is invalid. Pre-generated random seeds must be valid .Random.seed seeds, which means they should be all integers and consists of two or more elements, not just one.>
> stopifnot(inherits(res, "error"))
> 
> ## Not seeds at all?
> seeds0 <- lapply(1:2, FUN = as_lecyer_cmrg_seed)
> seeds0[[1]] <- letters[1:7]
> res <- tryCatch({
+   seeds <- make_rng_seeds(2L, seed = seeds0)
+ }, error = identity)
[16:19:26.592] Generating random seeds ...
[16:19:26.592] Using a pre-define stream of 2 random seeds ...
> print(res)
<simpleError: The elements of the list specified in argument 'seed' are not all integers (did you really pass RNG seeds?): character, integer>
> stopifnot(inherits(res, "error"))
> 
> ## Invalid seeds?
> seeds0 <- lapply(1:2, FUN = as_lecyer_cmrg_seed)
> seeds0 <- lapply(seeds0, FUN = rev)
> res <- tryCatch({
+   seeds <- make_rng_seeds(2L, seed = seeds0)
+ }, error = identity)
[16:19:26.592] Generating random seeds ...
[16:19:26.592] Using a pre-define stream of 2 random seeds ...
> print(res)
<simpleError: The list in argument 'seed' does not seem to hold elements that are valid .Random.seed values:  int [1:7] 1489374793 -222347416 -603558397 -442010614 -169270483 1280795612 10407>
> stopifnot(inherits(res, "error"))
> 
> 
> message(" - replicated RNG draws")
 - replicated RNG draws
> library(future.apply)
Loading required package: future
[16:19:26.597] Option 'future.startup.script': TRUE
[16:19:26.597] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[16:19:26.597] Future startup scripts found: <none>
> 
> seed_org <- next_random_seed()
> set.seed(42)
> 
> ## Draw two random number from 1:100 one after the other
> seed_before <- get_random_seed()
> kind_before <- RNGkind()
> x <- sample.int(100L, size = 5L)
> y <- sample.int(100L, size = 5L)
> seed_after <- get_random_seed()
> kind_after <- RNGkind()
> print(c(x, y))
 [1]  2  4 63 76 97  9 85 10 66 23
> 
> ## Draw two random number from 1:100 at once
> set_random_seed(seed_before)
> kind_before2 <- RNGkind()
> z <- sample.int(100L, size = 10L)
> seed_after2 <- get_random_seed()
> kind_after2 <- RNGkind()
> print(z)
 [1]  2  4 63 76 97  9 85 10 66 23
> 
> ## The RNG state is the same after the second ...
> ## run as after the first, two-step, approach
> stopifnot(identical(seed_after2, seed_after))
> stopifnot(identical(kind_before2, kind_before))
> stopifnot(identical(kind_after2, kind_after))
> 
> ## .... and the exact same set of random numbers where
> ## drawn [only true in R (>= 4.0.0)]
> if (getRversion() >= "4.0.0") {
+   stopifnot(identical(z, c(x, y)))
+ } else {
+   stopifnot(identical(z[seq_along(x)], x))
+ }
> 
> set_random_seed(seed_org)
> stopifnot(identical(get_random_seed(), seed_org))
> 
> message("*** RNG ... DONE")
*** RNG ... DONE
> 
> source("incl/end.R")
[16:19:26.600] plan(): Setting new future strategy stack:
[16:19:26.600] List of future strategies:
[16:19:26.600] 1. FutureStrategy:
[16:19:26.600]    - args: function (..., envir = parent.frame())
[16:19:26.600]    - tweaked: FALSE
[16:19:26.600]    - call: future::plan(oplan)
[16:19:26.613] plan(): nbrOfWorkers() = 1
> 
