
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("listenv")
> 
> ovars <- ls(envir = globalenv())
> if (exists("x")) rm(list = "x")
> if (exists("y")) rm(list = "y")
> 
> ## - - - - - - - - - - - - - - - - - - - - - - - - - -
> ## Multi-dimensional subsetting
> ## - - - - - - - - - - - - - - - - - - - - - - - - - -
> message("*** parse_env_subset() on multi-dim listenv ...")
*** parse_env_subset() on multi-dim listenv ...
> 
> x <- listenv()
> length(x) <- 6
> dim(x) <- c(2, 3)
> 
> target <- parse_env_subset(x[2], substitute = TRUE)
> str(target)
List of 7
 $ envir :Classes 'listenv', 'environment' <environment: 0x56198c231c00> 
  ..- attr(*, "dim.")= int [1:2] 2 3
 $ op    : chr "["
 $ subset:List of 1
  ..$ : num 2
 $ idx   : num 2
 $ exists: logi FALSE
 $ code  : chr "x[2]"
 $ name  : chr ""
> stopifnot(identical(target$envir, x), target$idx  == 2, !target$exists)
> 
> target <- parse_env_subset(x[[2]], substitute = TRUE)
> str(target)
List of 7
 $ envir :Classes 'listenv', 'environment' <environment: 0x56198c231c00> 
  ..- attr(*, "dim.")= int [1:2] 2 3
 $ op    : chr "[["
 $ subset:List of 1
  ..$ : num 2
 $ idx   : num 2
 $ exists: logi FALSE
 $ code  : chr "x[[2]]"
 $ name  : chr ""
> stopifnot(identical(target$envir, x), target$idx  == 2, !target$exists)
> 
> target <- parse_env_subset(x[1, 2], substitute = TRUE)
> str(target)
List of 7
 $ envir :Classes 'listenv', 'environment' <environment: 0x56198c231c00> 
  ..- attr(*, "dim.")= int [1:2] 2 3
 $ op    : chr "["
 $ subset:List of 2
  ..$ : num 1
  ..$ : num 2
 $ idx   : num [1, 1] 3
 $ exists: logi [1, 1] FALSE
 $ code  : chr "x[1, 2]"
 $ name  : chr ""
> stopifnot(identical(target$envir, x), target$idx == 3, !target$exists)
> 
> target <- parse_env_subset(x[[1, 2]], substitute = TRUE)
> str(target)
List of 7
 $ envir :Classes 'listenv', 'environment' <environment: 0x56198c231c00> 
  ..- attr(*, "dim.")= int [1:2] 2 3
 $ op    : chr "[["
 $ subset:List of 2
  ..$ : num 1
  ..$ : num 2
 $ idx   : num [1, 1] 3
 $ exists: logi [1, 1] FALSE
 $ code  : chr "x[[1, 2]]"
 $ name  : chr ""
> stopifnot(identical(target$envir, x), target$idx == 3, !target$exists)
> 
> x[[1, 2]] <- 1.2
> target <- parse_env_subset(x[1, 2], substitute = TRUE)
> str(target)
List of 7
 $ envir :Classes 'listenv', 'environment' <environment: 0x56198c231c00> 
  ..- attr(*, "dim.")= int [1:2] 2 3
 $ op    : chr "["
 $ subset:List of 2
  ..$ : num 1
  ..$ : num 2
 $ idx   : num [1, 1] 3
 $ exists: logi [1, 1] TRUE
 $ code  : chr "x[1, 2]"
 $ name  : chr ""
> stopifnot(identical(target$envir, x), target$idx == 3, target$exists)
> 
> target <- parse_env_subset(x[[1, 2]], substitute = TRUE)
> str(target)
List of 7
 $ envir :Classes 'listenv', 'environment' <environment: 0x56198c231c00> 
  ..- attr(*, "dim.")= int [1:2] 2 3
 $ op    : chr "[["
 $ subset:List of 2
  ..$ : num 1
  ..$ : num 2
 $ idx   : num [1, 1] 3
 $ exists: logi [1, 1] TRUE
 $ code  : chr "x[[1, 2]]"
 $ name  : chr ""
> stopifnot(identical(target$envir, x), target$idx == 3, target$exists)
> 
> target <- parse_env_subset(x[1, 4], substitute = TRUE)
> str(target)
List of 7
 $ envir :Classes 'listenv', 'environment' <environment: 0x56198c231c00> 
  ..- attr(*, "dim.")= int [1:2] 2 3
 $ op    : chr "["
 $ subset:List of 2
  ..$ : num 1
  ..$ : num 4
 $ idx   : num [1, 1] NA
 $ exists: logi [1, 1] FALSE
 $ code  : chr "x[1, 4]"
 $ name  : chr ""
> stopifnot(identical(target$envir, x), is.na(target$idx), !target$exists)
> 
> target <- parse_env_subset(x[[1, 4]], substitute = TRUE)
> str(target)
List of 7
 $ envir :Classes 'listenv', 'environment' <environment: 0x56198c231c00> 
  ..- attr(*, "dim.")= int [1:2] 2 3
 $ op    : chr "[["
 $ subset:List of 2
  ..$ : num 1
  ..$ : num 4
 $ idx   : num [1, 1] NA
 $ exists: logi [1, 1] FALSE
 $ code  : chr "x[[1, 4]]"
 $ name  : chr ""
> stopifnot(identical(target$envir, x), is.na(target$idx), !target$exists)
> 
> target <- parse_env_subset(x[1, 1:2], substitute = TRUE)
> str(target)
List of 7
 $ envir :Classes 'listenv', 'environment' <environment: 0x56198c231c00> 
  ..- attr(*, "dim.")= int [1:2] 2 3
 $ op    : chr "["
 $ subset:List of 2
  ..$ : num 1
  ..$ : int [1:2] 1 2
 $ idx   : num [1, 1:2] 1 3
 $ exists: logi [1, 1:2] FALSE TRUE
 $ code  : chr "x[1, 1:2]"
 $ name  : chr ""
> stopifnot(identical(target$envir, x),
+           length(target$idx) == 2L, all(target$idx == c(1,3)),
+ 	  length(target$exists) == 2L, all(target$exists == c(FALSE, TRUE)))
> 
> target <- parse_env_subset(x[1, -3], substitute = TRUE)
> str(target)
List of 7
 $ envir :Classes 'listenv', 'environment' <environment: 0x56198c231c00> 
  ..- attr(*, "dim.")= int [1:2] 2 3
 $ op    : chr "["
 $ subset:List of 2
  ..$ : num 1
  ..$ : num -3
 $ idx   : num [1, 1:2] 1 3
 $ exists: logi [1, 1:2] FALSE TRUE
 $ code  : chr "x[1, -3]"
 $ name  : chr ""
> stopifnot(identical(target$envir, x),
+           length(target$idx) == 2L, all(target$idx == c(1,3)),
+ 	  length(target$exists) == 2L, all(target$exists == c(FALSE, TRUE)))
> 
> ## Assert that x[[1, 4]] is not the same as x[[c(1, 4)]]
> target <- parse_env_subset(x[[1, 4]], substitute = TRUE)
> str(target)
List of 7
 $ envir :Classes 'listenv', 'environment' <environment: 0x56198c231c00> 
  ..- attr(*, "dim.")= int [1:2] 2 3
 $ op    : chr "[["
 $ subset:List of 2
  ..$ : num 1
  ..$ : num 4
 $ idx   : num [1, 1] NA
 $ exists: logi [1, 1] FALSE
 $ code  : chr "x[[1, 4]]"
 $ name  : chr ""
> target2 <- parse_env_subset(x[[c(1, 4)]], substitute = TRUE)
> str(target2)
List of 7
 $ envir :Classes 'listenv', 'environment' <environment: 0x56198c231c00> 
  ..- attr(*, "dim.")= int [1:2] 2 3
 $ op    : chr "[["
 $ subset:List of 1
  ..$ : num [1:2] 1 4
 $ idx   : num [1:2] 1 4
 $ exists: logi [1:2] FALSE FALSE
 $ code  : chr "x[[c(1, 4)]]"
 $ name  : chr ""
> target$code <- target2$code <- NULL
> stopifnot(!isTRUE(all.equal(target2, target)))
> 
> 
> dimnames(x) <- list(c("a", "b"), c("A", "B", "C"))
> print(x)
A ‘listenv’ matrix with 6 elements (unnamed) arranged in 2x3 rows (‘a’, ‘b’) and columns (‘A’, ‘B’, ‘C’).
> 
> target <- parse_env_subset(x[["a", 2]], substitute = TRUE)
> str(target)
List of 7
 $ envir :Classes 'listenv', 'environment' <environment: 0x56198c231c00> 
  ..- attr(*, "dim.")= int [1:2] 2 3
  ..- attr(*, "dimnames.")=List of 2
  .. ..$ : chr [1:2] "a" "b"
  .. ..$ : chr [1:3] "A" "B" "C"
 $ op    : chr "[["
 $ subset:List of 2
  ..$ : chr "a"
  ..$ : num 2
 $ idx   : num [1, 1] 3
 $ exists: logi [1, 1] TRUE
 $ code  : chr "x[[\"a\", 2]]"
 $ name  : chr ""
> stopifnot(identical(target$envir, x), target$idx == 3, target$exists)
> 
> target <- parse_env_subset(x[["a", "B"]], substitute = TRUE)
> str(target)
List of 7
 $ envir :Classes 'listenv', 'environment' <environment: 0x56198c231c00> 
  ..- attr(*, "dim.")= int [1:2] 2 3
  ..- attr(*, "dimnames.")=List of 2
  .. ..$ : chr [1:2] "a" "b"
  .. ..$ : chr [1:3] "A" "B" "C"
 $ op    : chr "[["
 $ subset:List of 2
  ..$ : chr "a"
  ..$ : chr "B"
 $ idx   : num [1, 1] 3
 $ exists: logi [1, 1] TRUE
 $ code  : chr "x[[\"a\", \"B\"]]"
 $ name  : chr ""
> stopifnot(identical(target$envir, x), target$idx == 3, target$exists)
> 
> target <- parse_env_subset(x["a", "B"], substitute = TRUE)
> str(target)
List of 7
 $ envir :Classes 'listenv', 'environment' <environment: 0x56198c231c00> 
  ..- attr(*, "dim.")= int [1:2] 2 3
  ..- attr(*, "dimnames.")=List of 2
  .. ..$ : chr [1:2] "a" "b"
  .. ..$ : chr [1:3] "A" "B" "C"
 $ op    : chr "["
 $ subset:List of 2
  ..$ : chr "a"
  ..$ : chr "B"
 $ idx   : num [1, 1] 3
 $ exists: logi [1, 1] TRUE
 $ code  : chr "x[\"a\", \"B\"]"
 $ name  : chr ""
> stopifnot(identical(target$envir, x), target$idx == 3, target$exists)
> 
> target <- parse_env_subset(x["a", 1:3], substitute = TRUE)
> str(target)
List of 7
 $ envir :Classes 'listenv', 'environment' <environment: 0x56198c231c00> 
  ..- attr(*, "dim.")= int [1:2] 2 3
  ..- attr(*, "dimnames.")=List of 2
  .. ..$ : chr [1:2] "a" "b"
  .. ..$ : chr [1:3] "A" "B" "C"
 $ op    : chr "["
 $ subset:List of 2
  ..$ : chr "a"
  ..$ : int [1:3] 1 2 3
 $ idx   : num [1, 1:3] 1 3 5
 $ exists: logi [1, 1:3] FALSE TRUE FALSE
 $ code  : chr "x[\"a\", 1:3]"
 $ name  : chr ""
> stopifnot(identical(target$envir, x), length(target$idx) == 3,
+           all(target$idx == c(1, 3, 5)),
+           all(target$exists == c(FALSE, TRUE, FALSE)))
> 
> target <- parse_env_subset(x["a", ], substitute = TRUE)
> str(target)
List of 7
 $ envir :Classes 'listenv', 'environment' <environment: 0x56198c231c00> 
  ..- attr(*, "dim.")= int [1:2] 2 3
  ..- attr(*, "dimnames.")=List of 2
  .. ..$ : chr [1:2] "a" "b"
  .. ..$ : chr [1:3] "A" "B" "C"
 $ op    : chr "["
 $ subset:List of 2
  ..$ : chr "a"
  ..$ : NULL
 $ idx   : num [1, 1:3] 1 3 5
 $ exists: logi [1, 1:3] FALSE TRUE FALSE
 $ code  : chr "x[\"a\", ]"
 $ name  : chr ""
> stopifnot(identical(target$envir, x), length(target$idx) == 3,
+           all(target$idx == c(1, 3, 5)),
+           all(target$exists == c(FALSE, TRUE, FALSE)))
> 
> target <- parse_env_subset(x["a", -1], substitute = TRUE)
> str(target)
List of 7
 $ envir :Classes 'listenv', 'environment' <environment: 0x56198c231c00> 
  ..- attr(*, "dim.")= int [1:2] 2 3
  ..- attr(*, "dimnames.")=List of 2
  .. ..$ : chr [1:2] "a" "b"
  .. ..$ : chr [1:3] "A" "B" "C"
 $ op    : chr "["
 $ subset:List of 2
  ..$ : chr "a"
  ..$ : num -1
 $ idx   : num [1, 1:2] 3 5
 $ exists: logi [1, 1:2] TRUE FALSE
 $ code  : chr "x[\"a\", -1]"
 $ name  : chr ""
> stopifnot(identical(target$envir, x), length(target$idx) == 2,
+           all(target$idx == c(3, 5)),
+           all(target$exists == c(TRUE, FALSE)))
> 
> message("*** parse_env_subset() on multi-dim listenv ... DONE")
*** parse_env_subset() on multi-dim listenv ... DONE
> 
> 
> ## - - - - - - - - - - - - - - - - - - - - - - - - - -
> ## Exception handling
> ## - - - - - - - - - - - - - - - - - - - - - - - - - -
> message("*** parse_env_subset() on multi-dim listenv - exceptions ...")
*** parse_env_subset() on multi-dim listenv - exceptions ...
> 
> x <- listenv()
> 
> ## Multidimensional subsetting on 'x' without dimensions
> res <- try(target <- parse_env_subset(x[[1, 2]], substitute = TRUE),
+            silent = TRUE)
> stopifnot(inherits(res, "try-error"))
> 
> ## Multi-dimensional subsetting
> x <- listenv()
> length(x) <- 6
> dim(x) <- c(2, 3)
> 
> 
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - -
> ## FIXME: Should zero indices give parse errors or not?
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - -
> res <- try(target <- parse_env_subset(x[[0]], substitute = TRUE), silent = TRUE)
> ## stopifnot(inherits(res, "try-error"))
> 
> res <- try(target <- parse_env_subset(x[[1, 0]], substitute = TRUE),
+            silent = TRUE)
> ## stopifnot(inherits(res, "try-error"))
> 
> res <- try(target <- parse_env_subset(x[[1, 2, 3]], substitute = TRUE),
+            silent = TRUE)
> ## stopifnot(inherits(res, "try-error"))
> 
> message("*** parse_env_subset() on multi-dim listenv - exceptions ... DONE")
*** parse_env_subset() on multi-dim listenv - exceptions ... DONE
> 
> 
> ## Cleanup
> rm(list = setdiff(ls(envir = globalenv()), ovars), envir = globalenv())
> 
