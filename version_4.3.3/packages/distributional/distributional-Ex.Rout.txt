
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "distributional"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('distributional')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("dist_bernoulli")
> ### * dist_bernoulli
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist_bernoulli
> ### Title: The Bernoulli distribution
> ### Aliases: dist_bernoulli
> 
> ### ** Examples
> 
> dist <- dist_bernoulli(prob = c(0.05, 0.5, 0.3, 0.9, 0.1))
> 
> dist
<distribution[5]>
[1] Bernoulli(0.05) Bernoulli(0.5)  Bernoulli(0.3)  Bernoulli(0.9) 
[5] Bernoulli(0.1) 
> mean(dist)
[1] 0.05 0.50 0.30 0.90 0.10
> variance(dist)
[1] 0.0475 0.2500 0.2100 0.0900 0.0900
> skewness(dist)
[1]  4.1294832  0.0000000  0.8728716 -2.6666667  2.6666667
> kurtosis(dist)
[1] 15.052632 -2.000000 -1.238095  5.111111  5.111111
> 
> generate(dist, 10)
[[1]]
 [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE

[[2]]
 [1] FALSE FALSE  TRUE FALSE  TRUE FALSE  TRUE  TRUE FALSE  TRUE

[[3]]
 [1]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE

[[4]]
 [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE

[[5]]
 [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE

> 
> density(dist, 2)
[1] 0 0 0 0 0
> density(dist, 2, log = TRUE)
[1] -Inf -Inf -Inf -Inf -Inf
> 
> cdf(dist, 4)
[1] 1 1 1 1 1
> 
> quantile(dist, 0.7)
[1] FALSE  TRUE FALSE  TRUE FALSE
> 
> 
> 
> 
> cleanEx()
> nameEx("dist_beta")
> ### * dist_beta
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist_beta
> ### Title: The Beta distribution
> ### Aliases: dist_beta
> 
> ### ** Examples
> 
> dist <- dist_beta(shape1 = c(0.5, 5, 1, 2, 2), shape2 = c(0.5, 1, 3, 2, 5))
> 
> dist
<distribution[5]>
[1] Beta(0.5, 0.5) Beta(5, 1)     Beta(1, 3)     Beta(2, 2)     Beta(2, 5)    
> mean(dist)
[1] 0.5000000 0.8333333 0.2500000 0.5000000 0.2857143
> variance(dist)
[1] 0.12500000 0.01984127 0.03750000 0.05000000 0.02551020
> skewness(dist)
[1]  0.000000 -5.916080  2.581989  0.000000  5.962848
> kurtosis(dist)
[1] -1.5000000  1.2000000  0.0952381 -0.8571429 -0.1200000
> 
> generate(dist, 10)
[[1]]
 [1] 0.884429438 0.357322383 0.257914590 0.936951396 0.171863889 0.082048653
 [7] 0.726869612 0.004856163 0.222214237 0.882626362

[[2]]
 [1] 0.9709051 0.8231342 0.8297140 0.9599427 0.9507393 0.9290629 0.9582020
 [8] 0.9474634 0.8492149 0.9318735

[[3]]
 [1] 0.26716954 0.29949079 0.81422382 0.41881171 0.14543608 0.03083218
 [7] 0.28201105 0.15168064 0.26644386 0.39384363

[[4]]
 [1] 0.3898226 0.4832716 0.7874173 0.7076439 0.4536649 0.4288061 0.6907914
 [8] 0.6540721 0.3113203 0.3065061

[[5]]
 [1] 0.3650998 0.4662332 0.2635616 0.4966202 0.3729784 0.3596436 0.1092267
 [8] 0.2172194 0.1191203 0.4148053

> 
> density(dist, 2)
[1] 0 0 0 0 0
> density(dist, 2, log = TRUE)
[1] -Inf -Inf -Inf -Inf -Inf
> 
> cdf(dist, 4)
[1] 1 1 1 1 1
> 
> quantile(dist, 0.7)
[1] 0.7938926 0.9311499 0.3305670 0.6367425 0.3603577
> 
> 
> 
> 
> cleanEx()
> nameEx("dist_binomial")
> ### * dist_binomial
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist_binomial
> ### Title: The Binomial distribution
> ### Aliases: dist_binomial
> 
> ### ** Examples
> 
> dist <- dist_binomial(size = 1:5, prob = c(0.05, 0.5, 0.3, 0.9, 0.1))
> 
> dist
<distribution[5]>
[1] B(1, 0.05) B(2, 0.5)  B(3, 0.3)  B(4, 0.9)  B(5, 0.1) 
> mean(dist)
[1] 0.05 1.00 0.90 3.60 0.50
> variance(dist)
[1] 0.0475 0.5000 0.6300 0.3600 0.4500
> skewness(dist)
[1]  4.1294832  0.0000000  0.5039526 -1.3333333  1.1925696
> kurtosis(dist)
[1] 15.0526316 -1.0000000 -0.4126984  1.2777778  1.0222222
> 
> generate(dist, 10)
[[1]]
 [1] 0 0 0 0 0 0 0 0 0 0

[[2]]
 [1] 0 0 1 1 2 1 1 2 1 2

[[3]]
 [1] 2 0 1 0 0 1 0 1 2 0

[[4]]
 [1] 4 4 4 4 3 3 3 4 3 4

[[5]]
 [1] 1 1 1 0 0 1 0 0 1 1

> 
> density(dist, 2)
[1] 0.0000 0.2500 0.1890 0.0486 0.0729
> density(dist, 2, log = TRUE)
[1]      -Inf -1.386294 -1.666008 -3.024132 -2.618667
> 
> cdf(dist, 4)
[1] 1.00000 1.00000 1.00000 1.00000 0.99999
> 
> quantile(dist, 0.7)
[1] 0 1 1 4 1
> 
> 
> 
> 
> cleanEx()
> nameEx("dist_burr")
> ### * dist_burr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist_burr
> ### Title: The Burr distribution
> ### Aliases: dist_burr
> 
> ### ** Examples
> 
> dist <- dist_burr(shape1 = c(1,1,1,2,3,0.5), shape2 = c(1,2,3,1,1,2))
> dist
<distribution[6]>
[1] Burr12(1, 1, 1)   Burr12(1, 2, 1)   Burr12(1, 3, 1)   Burr12(2, 1, 1)  
[5] Burr12(3, 1, 1)   Burr12(0.5, 2, 1)
> 
> ## Don't show: 
> if (requireNamespace("actuar", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ mean(dist)
+ variance(dist)
+ support(dist)
+ generate(dist, 10)
+ 
+ density(dist, 2)
+ density(dist, 2, log = TRUE)
+ 
+ cdf(dist, 4)
+ 
+ quantile(dist, 0.7)
+ ## Don't show: 
+ }) # examplesIf
> mean(dist)
[1]      Inf 1.570796 1.209200 1.000000 0.500000      Inf
> variance(dist)
[1]       NaN       Inf 0.9562355       Inf 0.7500000       NaN
> support(dist)
<support_region[6]>
[1] [0,Inf] [0,Inf] [0,Inf] [0,Inf] [0,Inf] [0,Inf]
> generate(dist, 10)
[[1]]
 [1]  0.05856481  0.51332225  0.58953692 15.18482541  3.85496815  4.66390119
 [7]  0.45555567  1.60346347  0.29896882  1.00924558

[[2]]
 [1] 0.62729424 0.09033245 1.27723739 0.53503669 0.26430286 1.92712537
 [7] 0.73110200 2.63905872 1.65596664 1.26091556

[[3]]
 [1] 4.1922901 1.1732859 0.5311331 1.2467994 1.0241914 0.8741073 1.0086493
 [8] 1.6349175 0.5931103 0.7915574

[[4]]
 [1] 0.1220809 2.0436976 0.1754859 0.5593160 0.1036786 0.2431618 0.1301544
 [8] 0.3446931 0.3739692 0.1255466

[[5]]
 [1] 2.4996206 0.2796486 0.1094326 0.1301732 0.2793006 0.0510670 0.3166688
 [8] 0.5985681 1.4186319 1.1582821

[[6]]
 [1] 2.9995369 1.6485532 1.1321656 2.2454179 0.4471989 3.2558459 1.9352399
 [8] 2.8374112 1.1664207 3.7444868

> density(dist, 2)
[1] 0.11111111 0.16000000 0.14814815 0.07407407 0.03703704 0.17888544
> density(dist, 2, log = TRUE)
[1] -2.197225 -1.832581 -1.909543 -2.602690 -3.295837 -1.721010
> cdf(dist, 4)
[1] 0.8000000 0.9411765 0.9846154 0.9600000 0.9920000 0.7574644
> quantile(dist, 0.7)
[1] 2.3333333 1.5275252 1.3263524 0.8257419 0.4938016 3.1797973
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dist_categorical")
> ### * dist_categorical
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist_categorical
> ### Title: The Categorical distribution
> ### Aliases: dist_categorical
> 
> ### ** Examples
> 
> dist <- dist_categorical(prob = list(c(0.05, 0.5, 0.15, 0.2, 0.1), c(0.3, 0.1, 0.6)))
> 
> dist
<distribution[2]>
[1] Categorical[5] Categorical[3]
> 
> generate(dist, 10)
[[1]]
 [1] 2 2 4 5 2 5 5 4 4 2

[[2]]
 [1] 3 3 1 3 1 3 1 2 3 1

> 
> density(dist, 2)
[1] 0.5 0.1
> density(dist, 2, log = TRUE)
[1] -0.6931472 -2.3025851
> 
> # The outcomes aren't ordered, so many statistics are not applicable.
> cdf(dist, 4)
[1] NA NA
> quantile(dist, 0.7)
[1] NA NA
> mean(dist)
[1] NA NA
> variance(dist)
[1] NA NA
> skewness(dist)
[1] NA NA
> kurtosis(dist)
[1] NA NA
> 
> dist <- dist_categorical(
+   prob = list(c(0.05, 0.5, 0.15, 0.2, 0.1), c(0.3, 0.1, 0.6)),
+   outcomes = list(letters[1:5], letters[24:26])
+ )
> 
> generate(dist, 10)
[[1]]
 [1] "e" "b" "d" "b" "b" "b" "b" "b" "e" "b"

[[2]]
 [1] "z" "z" "z" "z" "x" "x" "x" "z" "x" "z"

> 
> density(dist, "a")
[1] 0.05   NA
> density(dist, "z", log = TRUE)
[1]         NA -0.5108256
> 
> 
> 
> 
> cleanEx()
> nameEx("dist_cauchy")
> ### * dist_cauchy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist_cauchy
> ### Title: The Cauchy distribution
> ### Aliases: dist_cauchy
> 
> ### ** Examples
> 
> dist <- dist_cauchy(location = c(0, 0, 0, -2), scale = c(0.5, 1, 2, 1))
> 
> dist
<distribution[4]>
[1] Cauchy(0, 0.5) Cauchy(0, 1)   Cauchy(0, 2)   Cauchy(-2, 1) 
> mean(dist)
[1] NA NA NA NA
> variance(dist)
[1] NA NA NA NA
> skewness(dist)
[1] NA NA NA NA
> kurtosis(dist)
[1] NA NA NA NA
> 
> generate(dist, 10)
[[1]]
 [1]  0.55125995  1.17691530 -2.14631312 -0.14832128  0.36732343 -0.16526100
 [7] -0.08778969 -0.90412154 -1.16431220  0.09829122

[[2]]
 [1]   0.75561999   0.61954832  -1.50147326   2.62405381  -0.88250440
 [6] 138.34760311  -1.22737450  -0.02543323   2.52652746  -0.84088155

[[3]]
 [1] -0.41611198  1.57303409 -3.87471697  0.83251626  2.22901454  5.34939573
 [7]  0.08418361  5.16428156 -0.86778448  3.64745362

[[4]]
 [1] 15.744173 -5.092028 47.277184 -1.337633 -2.602591 -3.709650 -2.754562
 [8] -1.647259 -3.180497  1.494180

> 
> density(dist, 2)
[1] 0.03744822 0.06366198 0.07957747 0.01872411
> density(dist, 2, log = TRUE)
[1] -3.284796 -2.754168 -2.531024 -3.977943
> 
> cdf(dist, 4)
[1] 0.9604166 0.9220209 0.8524164 0.9474315
> 
> quantile(dist, 0.7)
[1]  0.3632713  0.7265425  1.4530851 -1.2734575
> 
> 
> 
> 
> cleanEx()
> nameEx("dist_chisq")
> ### * dist_chisq
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist_chisq
> ### Title: The (non-central) Chi-Squared Distribution
> ### Aliases: dist_chisq
> 
> ### ** Examples
> 
> dist <- dist_chisq(df = c(1,2,3,4,6,9))
> 
> dist
<distribution[6]>
[1] ᵪ²(1) ᵪ²(2) ᵪ²(3) ᵪ²(4) ᵪ²(6) ᵪ²(9)
> mean(dist)
[1] 1 2 3 4 6 9
> variance(dist)
[1]  2  4  6  8 12 18
> skewness(dist)
[1] 2.828427 2.000000 1.632993 1.414214 1.154701 0.942809
> kurtosis(dist)
[1] 12.000000  6.000000  4.000000  3.000000  2.000000  1.333333
> 
> generate(dist, 10)
[[1]]
 [1] 0.19762713 1.10955271 0.41360540 0.69442147 7.90929829 0.04419345
 [7] 0.41794630 0.32474175 0.09721441 0.03266504

[[2]]
 [1] 0.7079854 2.4119764 1.1082308 2.4140052 3.1249573 0.2615523 0.4381074
 [8] 0.6944394 0.8599189 0.2924151

[[3]]
 [1] 3.92723387 1.23321454 4.80507865 3.81757011 1.68448681 1.19693872
 [7] 3.26826336 0.85968081 0.09514305 3.83238728

[[4]]
 [1] 2.7311199 3.6873153 2.1482230 3.8937505 0.8713672 3.6440039 4.7054930
 [8] 2.5920599 4.5578126 2.6783050

[[5]]
 [1]  4.965132  7.419018  5.088943  2.925791  1.508896 10.708417  5.496373
 [8] 14.230522  6.616748  3.006964

[[6]]
 [1]  7.530426  3.771265  8.585421  7.535919  8.300129  5.815684 13.802695
 [8] 11.386671  7.146031 10.552171

> 
> density(dist, 2)
[1] 0.10377687 0.18393972 0.20755375 0.18393972 0.09196986 0.01581362
> density(dist, 2, log = TRUE)
[1] -2.265512 -1.693147 -1.572365 -1.693147 -2.386294 -4.146884
> 
> cdf(dist, 4)
[1] 0.95449974 0.86466472 0.73853587 0.59399415 0.32332358 0.08858747
> 
> quantile(dist, 0.7)
[1]  1.074194  2.407946  3.664871  4.878433  7.231135 10.656372
> 
> 
> 
> 
> cleanEx()
> nameEx("dist_degenerate")
> ### * dist_degenerate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist_degenerate
> ### Title: The degenerate distribution
> ### Aliases: dist_degenerate
> 
> ### ** Examples
> 
> dist_degenerate(x = 1:5)
<distribution[5]>
[1] 1 2 3 4 5
> 
> 
> 
> 
> cleanEx()
> nameEx("dist_exponential")
> ### * dist_exponential
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist_exponential
> ### Title: The Exponential Distribution
> ### Aliases: dist_exponential
> 
> ### ** Examples
> 
> dist <- dist_exponential(rate = c(2, 1, 2/3))
> 
> dist
<distribution[3]>
[1] Exp(2)    Exp(1)    Exp(0.67)
> mean(dist)
[1] 0.5 1.0 1.5
> variance(dist)
[1] 0.25 1.00 2.25
> skewness(dist)
[1] 2 2 2
> kurtosis(dist)
[1] 6 6 6
> 
> generate(dist, 10)
[[1]]
 [1] 0.37759092 0.59082139 0.07285336 0.06989763 0.21803431 1.44748427
 [7] 0.61478103 0.26984142 0.47828375 0.07352300

[[2]]
 [1] 1.3907351 0.7620299 1.2376036 4.4239342 1.0545432 1.0352439 1.8760352
 [8] 0.6547466 0.3369335 0.5884797

[[3]]
 [1] 3.54677288 0.96283888 0.44118058 0.84879829 0.15910893 0.08915874
 [7] 0.86806870 5.93839928 1.75996816 1.49521943

> 
> density(dist, 2)
[1] 0.03663128 0.13533528 0.17573143
> density(dist, 2, log = TRUE)
[1] -3.306853 -2.000000 -1.738798
> 
> cdf(dist, 4)
[1] 0.9996645 0.9816844 0.9305165
> 
> quantile(dist, 0.7)
[1] 0.6019864 1.2039728 1.8059592
> 
> 
> 
> 
> cleanEx()
> nameEx("dist_f")
> ### * dist_f
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist_f
> ### Title: The F Distribution
> ### Aliases: dist_f
> 
> ### ** Examples
> 
> dist <- dist_f(df1 = c(1,2,5,10,100), df2 = c(1,1,2,1,100))
> 
> dist
<distribution[5]>
[1] F(1, 1)     F(2, 1)     F(5, 2)     F(10, 1)    F(100, 100)
> mean(dist)
[1]       NA       NA       NA       NA 1.020408
> variance(dist)
[1]         NA         NA         NA         NA 0.04295085
> skewness(dist)
[1]        NA        NA        NA        NA 0.6243619
> kurtosis(dist)
[1]        NA        NA        NA        NA 0.7278883
> 
> generate(dist, 10)
[[1]]
 [1]   0.1781142   0.5956115 178.9699382   1.2870113   2.9760995   0.2714672
 [7]   0.4745977   6.0570682   1.6596336   1.2351745

[[2]]
 [1] 0.1067311 2.2378176 2.9250288 3.1324802 1.2623934 1.2948897 1.7623072
 [8] 5.5349208 1.5107497 6.7594487

[[3]]
 [1] 1.4765247 1.6302530 6.5047701 0.2268987 2.1023132 4.9556493 1.3946746
 [8] 0.6751219 0.6514046 0.6000862

[[4]]
 [1] 14.9746851  0.3978956  0.4498730  6.2247440 19.6699272 41.3082647
 [7]  6.4617272  5.4095001  2.8741334 16.8094469

[[5]]
 [1] 0.9782633 1.0371560 1.2374544 0.7681790 1.1887599 1.0224002 1.3532686
 [8] 0.9071490 0.8873568 1.0578809

> 
> density(dist, 2)
[1] 0.075026360 0.089442719 0.132070447 0.105192421 0.002755106
> density(dist, 2, log = TRUE)
[1] -2.589916 -2.414157 -2.024420 -2.251964 -5.894300
> 
> cdf(dist, 4)
[1] 0.7048328 0.6666667 0.7879856 0.6278936 1.0000000
> 
> quantile(dist, 0.7)
[1] 3.851840 5.055556 2.608427 6.357893 1.110896
> 
> 
> 
> 
> cleanEx()
> nameEx("dist_gamma")
> ### * dist_gamma
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist_gamma
> ### Title: The Gamma distribution
> ### Aliases: dist_gamma
> 
> ### ** Examples
> 
> dist <- dist_gamma(shape = c(1,2,3,5,9,7.5,0.5), rate = c(0.5,0.5,0.5,1,2,1,1))
> 
> dist
<distribution[7]>
[1] Γ(1, 0.5) Γ(2, 0.5) Γ(3, 0.5) Γ(5, 1)   Γ(9, 2)   Γ(7.5, 1) Γ(0.5, 1)
> mean(dist)
[1] 2.0 4.0 6.0 5.0 4.5 7.5 0.5
> variance(dist)
[1]  4.00  8.00 12.00  5.00  2.25  7.50  0.50
> skewness(dist)
[1] 2.0000000 1.4142136 1.1547005 0.8944272 0.6666667 0.7302967 2.8284271
> kurtosis(dist)
[1]  6.0000000  3.0000000  2.0000000  1.2000000  0.6666667  0.8000000 12.0000000
> 
> generate(dist, 10)
[[1]]
 [1] 0.3102827 3.7648032 3.6090250 1.6723553 2.4450873 2.3167105 1.9800399
 [8] 0.6147466 0.1892382 0.3144031

[[2]]
 [1] 2.311840 2.890945 1.213010 5.348775 4.631115 5.673285 5.221703 3.185426
 [9] 7.715329 6.249028

[[3]]
 [1] 3.053721 3.602271 4.282409 4.680239 3.157097 1.593502 8.629678 3.734001
 [9] 9.083614 7.704592

[[4]]
 [1] 4.157760 3.590753 5.758329 3.157525 1.794071 6.277965 4.264833 5.082270
 [9] 3.736369 5.252715

[[5]]
 [1] 2.763117 4.622462 5.199015 4.002085 5.121074 4.055406 4.233914 5.314927
 [9] 4.290918 3.235559

[[6]]
 [1]  3.737270 11.414456  7.411342 13.928251  8.314607  5.247664  6.688259
 [8]  4.076097  7.385551  6.691920

[[7]]
 [1] 0.393192590 0.108139877 0.279117504 1.263440708 0.005707107 0.734188315
 [7] 0.557071640 1.076861932 0.202933874 1.234044058

> 
> density(dist, 2)
[1] 0.183939721 0.183939721 0.091969860 0.090223522 0.059540363 0.006545958
[7] 0.053990967
> density(dist, 2, log = TRUE)
[1] -1.693147 -1.693147 -2.386294 -2.405465 -2.821101 -5.028908 -2.918939
> 
> cdf(dist, 4)
[1] 0.8646647 0.5939942 0.3233236 0.3711631 0.4074527 0.0762173 0.9953223
> 
> quantile(dist, 0.7)
[1] 2.4079456 4.8784330 7.2311353 5.8903613 5.1503385 8.6608472 0.5370971
> 
> 
> 
> 
> cleanEx()
> nameEx("dist_geometric")
> ### * dist_geometric
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist_geometric
> ### Title: The Geometric Distribution
> ### Aliases: dist_geometric
> 
> ### ** Examples
> 
> dist <- dist_geometric(prob = c(0.2, 0.5, 0.8))
> 
> dist
<distribution[3]>
[1] Geometric(0.2) Geometric(0.5) Geometric(0.8)
> mean(dist)
[1] 4.00 1.00 0.25
> variance(dist)
[1] 20.0000  2.0000  0.3125
> skewness(dist)
[1] 2.012461 2.121320 2.683282
> kurtosis(dist)
[1] 6.05 6.50 9.20
> 
> generate(dist, 10)
[[1]]
 [1]  2  2 12  0  5  1  2  6  6  0

[[2]]
 [1] 0 3 0 1 0 0 1 0 0 4

[[3]]
 [1] 0 0 0 0 0 0 0 1 1 0

> 
> density(dist, 2)
[1] 0.128 0.125 0.032
> density(dist, 2, log = TRUE)
[1] -2.055725 -2.079442 -3.442019
> 
> cdf(dist, 4)
[1] 0.67232 0.96875 0.99968
> 
> quantile(dist, 0.7)
[1] 5 1 0
> 
> 
> 
> cleanEx()
> nameEx("dist_gumbel")
> ### * dist_gumbel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist_gumbel
> ### Title: The Gumbel distribution
> ### Aliases: dist_gumbel
> 
> ### ** Examples
> 
> dist <- dist_gumbel(alpha = c(0.5, 1, 1.5, 3), scale = c(2, 2, 3, 4))
> dist
<distribution[4]>
[1] Gumbel(0.5, 2) Gumbel(1, 2)   Gumbel(1.5, 3) Gumbel(3, 4)  
> 
> ## Don't show: 
> if (requireNamespace("actuar", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ mean(dist)
+ variance(dist)
+ skewness(dist)
+ kurtosis(dist)
+ support(dist)
+ generate(dist, 10)
+ 
+ density(dist, 2)
+ density(dist, 2, log = TRUE)
+ 
+ cdf(dist, 4)
+ 
+ quantile(dist, 0.7)
+ ## Don't show: 
+ }) # examplesIf
> mean(dist)
[1] 1.654431 2.154431 3.231647 5.308863
> variance(dist)
[1]  6.579736  6.579736 14.804407 26.318945
> skewness(dist)
[1] 1.139547 1.139547 1.139547 1.139547
> kurtosis(dist)
[1] 2.4 2.4 2.4 2.4
> support(dist)
<support_region[4]>
[1] R R R R
> generate(dist, 10)
[[1]]
 [1]  2.15991130 -1.62594849  0.08668390  1.73354729  0.58880786  4.33401976
 [7] -0.15966495  1.04353909  0.07364622 -2.47405879

[[2]]
 [1]  0.8937847  0.9307258 -0.2583212  1.8470139  3.1757395  2.0604256
 [7] -0.7211461  1.8866686  3.4475322  2.1387976

[[3]]
 [1]  8.2308939  9.9684060  3.1408486 -2.6279235  1.0205082  1.5095764
 [7]  0.4159090 11.3688183  4.8809413  0.6660415

[[4]]
 [1] 9.368154 2.910114 7.792746 4.285152 4.142509 8.792212 2.692596 2.888579
 [9] 1.974424 2.097501

> density(dist, 2)
[1] 0.14726616 0.16535215 0.12102469 0.08889319
> density(dist, 2, log = TRUE)
[1] -1.915514 -1.799678 -2.111761 -2.420320
> cdf(dist, 4)
[1] 0.8404869 0.8000107 0.6475248 0.4589561
> quantile(dist, 0.7)
[1] 2.561861 3.061861 4.592791 7.123722
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dist_hypergeometric")
> ### * dist_hypergeometric
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist_hypergeometric
> ### Title: The Hypergeometric distribution
> ### Aliases: dist_hypergeometric
> 
> ### ** Examples
> 
> dist <- dist_hypergeometric(m = rep(500, 3), n = c(50, 60, 70), k = c(100, 200, 300))
> 
> dist
<distribution[3]>
[1] Hypergeometric(500, 50, 100) Hypergeometric(500, 60, 200)
[3] Hypergeometric(500, 70, 300)
> mean(dist)
[1]  90.90909 178.57143 263.15789
> variance(dist)
[1]  6.77415 12.32157 15.33526
> skewness(dist)
Warning in n * K * (N - K) * (N - n) : NAs produced by integer overflow
Warning in n * K * (N - K) * (N - n) : NAs produced by integer overflow
[1] -0.2007751         NA         NA
> kurtosis(dist)
Warning in n * K * (N - K) * (N - n) : NAs produced by integer overflow
Warning in n * K * (N - K) * (N - n) : NAs produced by integer overflow
[1] 2.965375e-15           NA           NA
> 
> generate(dist, 10)
[[1]]
 [1] 93 92 91 87 93 88 87 90 90 95

[[2]]
 [1] 182 176 175 180 170 176 181 187 178 178

[[3]]
 [1] 256 268 267 256 265 264 263 258 262 266

> 
> density(dist, 2)
[1] 0 0 0
> density(dist, 2, log = TRUE)
[1] -Inf -Inf -Inf
> 
> cdf(dist, 4)
[1] 0 0 0
> 
> quantile(dist, 0.7)
[1]  92 180 265
> 
> 
> 
> 
> cleanEx()
> nameEx("dist_inverse_exponential")
> ### * dist_inverse_exponential
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist_inverse_exponential
> ### Title: The Inverse Exponential distribution
> ### Aliases: dist_inverse_exponential
> 
> ### ** Examples
> 
> dist <- dist_inverse_exponential(rate = 1:5)
> dist
<distribution[5]>
[1] InvExp(1) InvExp(2) InvExp(3) InvExp(4) InvExp(5)
> 
> ## Don't show: 
> if (requireNamespace("actuar", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ mean(dist)
+ variance(dist)
+ support(dist)
+ generate(dist, 10)
+ 
+ density(dist, 2)
+ density(dist, 2, log = TRUE)
+ 
+ cdf(dist, 4)
+ 
+ quantile(dist, 0.7)
+ ## Don't show: 
+ }) # examplesIf
> mean(dist)
[1] NA NA NA NA NA
> variance(dist)
[1] NA NA NA NA NA
> support(dist)
<support_region[5]>
[1] [0,Inf] [0,Inf] [0,Inf] [0,Inf] [0,Inf]
> generate(dist, 10)
[[1]]
 [1] 0.3454269 0.8132977 1.8529401 1.0454045 6.8005935 0.7190442 1.3122845
 [8] 0.8080132 0.2260431 0.9482779

[[2]]
 [1] 0.4829780 0.2665195 0.7636542 1.4839725 0.8496469 0.2114598 0.7789465
 [8] 1.6999842 0.8836022 4.7137516

[[3]]
 [1] 5.60797513 0.57599128 0.08419777 0.28409605 0.33439908 0.23224186
 [7] 8.94409749 1.02877435 0.25243577 1.63791833

[[4]]
 [1] 0.2444448 0.8285253 0.3447257 0.3326491 1.0637055 0.2315070 0.2431323
 [8] 0.1934593 0.1995044 0.4507417

[[5]]
 [1] 0.66382770 0.15466413 0.20109480 0.38897316 0.09960991 0.47366152
 [7] 0.09179480 0.06215448 0.35853258 0.33635059

> density(dist, 2)
[1] 0.15163266 0.09735010 0.07054014 0.05515606 0.04524187
> density(dist, 2, log = TRUE)
[1] -1.886294 -2.329442 -2.651573 -2.897589 -3.095732
> cdf(dist, 4)
[1] 0.7788008 0.8824969 0.9200444 0.9394131 0.9512294
> quantile(dist, 0.7)
[1] 2.8036733 1.4018366 0.9345578 0.7009183 0.5607347
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dist_inverse_gamma")
> ### * dist_inverse_gamma
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist_inverse_gamma
> ### Title: The Inverse Gamma distribution
> ### Aliases: dist_inverse_gamma
> 
> ### ** Examples
> 
> dist <- dist_inverse_gamma(shape = c(1,2,3,3), rate = c(1,1,1,2))
> dist
<distribution[4]>
[1] InvGamma(1, 1)   InvGamma(2, 1)   InvGamma(3, 1)   InvGamma(3, 0.5)
> 
> ## Don't show: 
> if (requireNamespace("actuar", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ mean(dist)
+ variance(dist)
+ support(dist)
+ generate(dist, 10)
+ 
+ density(dist, 2)
+ density(dist, 2, log = TRUE)
+ 
+ cdf(dist, 4)
+ 
+ quantile(dist, 0.7)
+ ## Don't show: 
+ }) # examplesIf
> mean(dist)
[1]   NA 1.00 0.50 0.25
> variance(dist)
[1]     NA     NA 0.2500 0.0625
> support(dist)
<support_region[4]>
[1] [0,Inf] [0,Inf] [0,Inf] [0,Inf]
> generate(dist, 10)
[[1]]
 [1]  0.8179667  0.8632930  1.0100807  3.2533728 10.5686922  6.3612609
 [7]  3.2174475  2.1334157 14.6633270  0.8004533

[[2]]
 [1] 0.4318615 0.3525294 0.3830168 0.6278595 0.2592242 0.3200498 1.2934734
 [8] 1.0292884 0.8161873 0.7263469

[[3]]
 [1] 0.6334934 1.2550974 0.2317584 0.5356185 0.2201767 0.2595854 0.4451107
 [8] 0.5448585 0.2892154 0.6537752

[[4]]
 [1] 0.7827212 0.1294392 0.2150056 0.1701544 0.2577510 0.1629488 0.4839402
 [8] 0.1717534 0.1399351 0.2237629

> density(dist, 2)
[1] 0.151632665 0.075816332 0.018954083 0.003042191
> density(dist, 2, log = TRUE)
[1] -1.886294 -2.579442 -3.965736 -5.795177
> cdf(dist, 4)
[1] 0.7788008 0.9735010 0.9978385 0.9997035
> quantile(dist, 0.7)
[1] 2.8036733 0.9112869 0.5225272 0.2612636
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dist_inverse_gaussian")
> ### * dist_inverse_gaussian
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist_inverse_gaussian
> ### Title: The Inverse Gaussian distribution
> ### Aliases: dist_inverse_gaussian
> 
> ### ** Examples
> 
> dist <- dist_inverse_gaussian(mean = c(1,1,1,3,3), shape = c(0.2, 1, 3, 0.2, 1))
> dist
<distribution[5]>
[1] IG(1, 0.2) IG(1, 1)   IG(1, 3)   IG(3, 0.2) IG(3, 1)  
> 
> ## Don't show: 
> if (requireNamespace("actuar", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ mean(dist)
+ variance(dist)
+ support(dist)
+ generate(dist, 10)
+ 
+ density(dist, 2)
+ density(dist, 2, log = TRUE)
+ 
+ cdf(dist, 4)
+ 
+ quantile(dist, 0.7)
+ ## Don't show: 
+ }) # examplesIf
> mean(dist)
[1] 1 1 1 3 3
> variance(dist)
[1]   5.0000000   1.0000000   0.3333333 135.0000000  27.0000000
> support(dist)
<support_region[5]>
[1] [0,Inf] [0,Inf] [0,Inf] [0,Inf] [0,Inf]
> generate(dist, 10)
[[1]]
 [1] 1.0129792 1.9547310 0.2003306 0.2735087 0.5183133 0.9044463 0.1722545
 [8] 0.1930900 1.6427422 0.2060746

[[2]]
 [1] 0.4565947 0.5431827 0.3539948 0.2559395 0.9543527 0.2804618 0.6505155
 [8] 0.9476230 2.9927611 0.6758531

[[3]]
 [1] 0.4963255 0.6458868 0.7244450 1.4914152 0.5161291 1.5003296 1.9268877
 [8] 1.0670008 0.8576976 1.4212555

[[4]]
 [1]  0.26314056 98.31852262  0.39464212  0.16394690  0.11577546  0.03389631
 [7]  0.19728339  2.69180904  1.21134132  0.05899883

[[5]]
 [1]  1.9573677  0.1863515  1.9280299  1.0884817  8.9658806  1.8203418
 [7]  2.4473577  2.6377812 10.8918603  3.7894352

> density(dist, 2)
[1] 0.06000195 0.10984782 0.11539974 0.06272885 0.13718333
> density(dist, 2, log = TRUE)
[1] -2.813378 -2.208659 -2.159353 -2.768934 -1.986437
> cdf(dist, 4)
[1] 0.9454196 0.9790764 0.9983186 0.8735512 0.8031695
> quantile(dist, 0.7)
[1] 0.6758386 1.0851197 1.1505484 1.0143030 2.5216357
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dist_logarithmic")
> ### * dist_logarithmic
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist_logarithmic
> ### Title: The Logarithmic distribution
> ### Aliases: dist_logarithmic
> 
> ### ** Examples
> 
> dist <- dist_logarithmic(prob = c(0.33, 0.66, 0.99))
> dist
<distribution[3]>
[1] Logarithmic(0.33) Logarithmic(0.66) Logarithmic(0.99)
> 
> ## Don't show: 
> if (requireNamespace("actuar", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ mean(dist)
+ variance(dist)
+ support(dist)
+ generate(dist, 10)
+ 
+ density(dist, 2)
+ density(dist, 2, log = TRUE)
+ 
+ cdf(dist, 4)
+ 
+ quantile(dist, 0.7)
+ ## Don't show: 
+ }) # examplesIf
> mean(dist)
[1]  1.229875  1.799369 21.497577
> variance(dist)
[1]    0.3230419    2.0545331 1687.6118748
> support(dist)
<support_region[3]>
[1] [1,2,...,Inf] [1,2,...,Inf] [1,2,...,Inf]
> generate(dist, 10)
[[1]]
 [1] 1 2 2 1 1 1 1 1 1 1

[[2]]
 [1] 2 1 2 8 1 2 4 1 2 1

[[3]]
 [1]  8 23  1 12  2  5  1  2  4  4

> density(dist, 2)
[1] 0.1359627 0.2018892 0.1064130
> density(dist, 2, log = TRUE)
[1] -1.995375 -1.600036 -2.240427
> cdf(dist, 4)
[1] 0.9972938 0.9464773 0.4437691
> quantile(dist, 0.7)
[1]  1  2 16
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dist_logistic")
> ### * dist_logistic
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist_logistic
> ### Title: The Logistic distribution
> ### Aliases: dist_logistic
> 
> ### ** Examples
> 
> dist <- dist_logistic(location = c(5,9,9,6,2), scale = c(2,3,4,2,1))
> 
> dist
<distribution[5]>
[1] Logistic(5, 2) Logistic(9, 3) Logistic(9, 4) Logistic(6, 2) Logistic(2, 1)
> mean(dist)
[1] 5 9 9 6 2
> variance(dist)
[1] 13.159473 29.608813 52.637890 13.159473  3.289868
> skewness(dist)
[1] 0 0 0 0 0
> kurtosis(dist)
[1] 1.2 1.2 1.2 1.2 1.2
> 
> generate(dist, 10)
[[1]]
 [1]  2.9649385  3.9537680  5.5870048  9.5838915  2.2483695  9.3589177
 [7] 10.6752424  6.3337029  6.0568359 -0.4405932

[[2]]
 [1]  4.951912  4.380443 11.358712  7.583502 12.622248  8.972391 11.798037
 [8] 23.425551  7.531803 12.752520

[[3]]
 [1] 19.645277  3.751764 11.505618  1.236622  4.964921  7.145295 -8.198966
 [8]  7.082301 16.592912  6.353043

[[4]]
 [1] 5.856579 6.807313 5.948328 3.050446 9.134249 7.402517 8.701349 1.776160
 [9] 7.925889 5.282601

[[5]]
 [1]  3.522772  2.606142  3.282840  2.212946  2.119019  3.321049 -1.734356
 [8]  1.908857  3.006393  2.812921

> 
> density(dist, 2)
[1] 0.07457323 0.02686172 0.03153231 0.05249679 0.25000000
> density(dist, 2, log = TRUE)
[1] -2.595974 -3.617053 -3.456743 -2.947003 -1.386294
> 
> cdf(dist, 4)
[1] 0.3775407 0.1588691 0.2227001 0.2689414 0.8807971
> 
> quantile(dist, 0.7)
[1]  6.694596 11.541894 12.389191  7.694596  2.847298
> 
> 
> 
> 
> cleanEx()
> nameEx("dist_lognormal")
> ### * dist_lognormal
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist_lognormal
> ### Title: The log-normal distribution
> ### Aliases: dist_lognormal
> 
> ### ** Examples
> 
> dist <- dist_lognormal(mu = 1:5, sigma = 0.1)
> 
> dist
<distribution[5]>
[1] lN(1, 0.01) lN(2, 0.01) lN(3, 0.01) lN(4, 0.01) lN(5, 0.01)
> mean(dist)
[1]   2.731907   7.426094  20.186216  54.871824 149.157083
> variance(dist)
[1]   0.07500759   0.55423526   4.09527545  30.26022006 223.59446360
> skewness(dist)
[1] 0.3017591 0.3017591 0.3017591 0.3017591 0.3017591
> kurtosis(dist)
[1] 0.1623239 0.1623239 0.1623239 0.1623239 0.1623239
> 
> generate(dist, 10)
[[1]]
 [1] 2.553218 2.768662 2.500366 3.188428 2.809343 2.504160 2.854061 2.926574
 [9] 2.879389 2.636523

[[2]]
 [1] 8.594978 7.682802 6.943986 5.921146 8.268831 7.355929 7.377103 8.120434
 [9] 8.021473 7.841186

[[3]]
 [1] 22.01882 21.71957 20.23586 16.46217 21.36988 19.97312 19.77504 17.33842
 [9] 19.14775 20.94278

[[4]]
 [1] 62.54385 54.03982 56.75633 54.30517 47.57436 52.37873 52.48729 54.27527
 [9] 60.94687 58.92807

[[5]]
 [1] 145.9914 144.7002 159.1260 156.9090 138.5352 138.2758 153.9239 160.2689
 [9] 146.7551 162.0834

> 
> density(dist, 2)
[1]  1.799910e-02  1.637111e-37 5.539330e-116 6.972494e-238  0.000000e+00
> density(dist, 2, log = TRUE)
[1]   -4.017433  -84.702715 -265.387997 -546.073279 -926.758561
> 
> cdf(dist, 4)
[1]  9.999440e-01  4.203228e-10  7.003186e-59 6.915322e-151 2.970982e-286
> 
> quantile(dist, 0.7)
[1]   2.864632   7.786878  21.166930  57.537681 156.403632
> 
> # A log-normal distribution X is exp(Y), where Y is a Normal distribution of
> # the same parameters. So log(X) will produce the Normal distribution Y.
> log(dist)
<distribution[5]>
[1] N(1, 0.01) N(2, 0.01) N(3, 0.01) N(4, 0.01) N(5, 0.01)
> 
> 
> 
> cleanEx()
> nameEx("dist_missing")
> ### * dist_missing
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist_missing
> ### Title: Missing distribution
> ### Aliases: dist_missing
> 
> ### ** Examples
> 
> dist <- dist_missing(3L)
> 
> dist
<distribution[3]>
[1] NA NA NA
> mean(dist)
[1] NA NA NA
> variance(dist)
[1] NA NA NA
> 
> generate(dist, 10)
[[1]]
 [1] NA NA NA NA NA NA NA NA NA NA

[[2]]
 [1] NA NA NA NA NA NA NA NA NA NA

[[3]]
 [1] NA NA NA NA NA NA NA NA NA NA

> 
> density(dist, 2)
[1] NA NA NA
> density(dist, 2, log = TRUE)
[1] NA NA NA
> 
> cdf(dist, 4)
[1] NA NA NA
> 
> quantile(dist, 0.7)
[1] NA NA NA
> 
> 
> 
> 
> cleanEx()
> nameEx("dist_mixture")
> ### * dist_mixture
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist_mixture
> ### Title: Create a mixture of distributions
> ### Aliases: dist_mixture
> 
> ### ** Examples
> 
> dist_mixture(dist_normal(0, 1), dist_normal(5, 2), weights = c(0.3, 0.7))
<distribution[1]>
[1] mixture(n=2)
> 
> 
> 
> 
> cleanEx()
> nameEx("dist_multinomial")
> ### * dist_multinomial
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist_multinomial
> ### Title: The Multinomial distribution
> ### Aliases: dist_multinomial
> 
> ### ** Examples
> 
> dist <- dist_multinomial(size = c(4, 3), prob = list(c(0.3, 0.5, 0.2), c(0.1, 0.5, 0.4)))
> 
> dist
<distribution[2]>
[1] Multinomial(4)[3] Multinomial(3)[3]
> mean(dist)
     [,1] [,2] [,3]
[1,]  1.2  2.0  0.8
[2,]  0.3  1.5  1.2
> variance(dist)
     [,1] [,2] [,3]
[1,] 0.84 1.00 0.64
[2,] 0.27 0.75 0.72
> 
> generate(dist, 10)
[[1]]
      [,1] [,2] [,3]
 [1,]    1    2    1
 [2,]    1    1    2
 [3,]    0    2    2
 [4,]    3    1    0
 [5,]    1    3    0
 [6,]    0    4    0
 [7,]    2    2    0
 [8,]    2    2    0
 [9,]    2    0    2
[10,]    1    2    1

[[2]]
      [,1] [,2] [,3]
 [1,]    1    2    0
 [2,]    0    3    0
 [3,]    0    2    1
 [4,]    0    2    1
 [5,]    1    1    1
 [6,]    0    1    2
 [7,]    0    2    1
 [8,]    1    1    1
 [9,]    1    2    0
[10,]    0    2    1

> 
> # TODO: Needs fixing to support multiple inputs
> # density(dist, 2)
> # density(dist, 2, log = TRUE)
> 
> 
> 
> 
> cleanEx()
> nameEx("dist_multivariate_normal")
> ### * dist_multivariate_normal
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist_multivariate_normal
> ### Title: The multivariate normal distribution
> ### Aliases: dist_multivariate_normal
> 
> ### ** Examples
> 
> dist <- dist_multivariate_normal(mu = list(c(1,2)), sigma = list(matrix(c(4,2,2,3), ncol=2)))
> dist
<distribution[1]>
[1] MVN[2]
> 
> ## Don't show: 
> if (requireNamespace("mvtnorm", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ mean(dist)
+ variance(dist)
+ support(dist)
+ generate(dist, 10)
+ 
+ density(dist, c(2, 1))
+ density(dist, c(2, 1), log = TRUE)
+ 
+ cdf(dist, 4)
+ 
+ quantile(dist, 0.7)
+ ## Don't show: 
+ }) # examplesIf
> mean(dist)
     [,1] [,2]
[1,]    1    2
> variance(dist)
     [,1] [,2]
[1,]    4    3
> support(dist)
<support_region[1]>
[1] R^2
> generate(dist, 10)
[[1]]
            [,1]       [,2]
 [1,]  0.2929407  4.1437540
 [2,]  1.1712039  0.8410811
 [3,]  2.3506182  3.4836012
 [4,]  1.9334552  1.8233745
 [5,]  4.1208192  3.4885498
 [6,] -1.4374243 -1.9775438
 [7,]  3.1338938  2.5587877
 [8,]  1.4995207  3.5371676
 [9,]  2.9100971  3.4346428
[10,]  3.2035469  3.7979801

> density(dist, c(2, 1))
[[1]]
[1] 0.02829422

> density(dist, c(2, 1), log = TRUE)
[[1]]
[1] -3.565098

> cdf(dist, 4)
[1] 0.03217391
> quantile(dist, 0.7)
         [,1]     [,2]
[1,] 2.048801 2.908288
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dist_negative_binomial")
> ### * dist_negative_binomial
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist_negative_binomial
> ### Title: The Negative Binomial distribution
> ### Aliases: dist_negative_binomial
> 
> ### ** Examples
> 
> dist <- dist_negative_binomial(size = 10, prob = 0.5)
> 
> dist
<distribution[1]>
[1] NB(10, 0.5)
> mean(dist)
[1] 10
> variance(dist)
[1] 20
> skewness(dist)
[1] 0.6708204
> kurtosis(dist)
[1] 0.6125
> support(dist)
<support_region[1]>
[1] N0
> 
> generate(dist, 10)
[[1]]
 [1]  8  7 10 21  5 12  8  9  8 11

> 
> density(dist, 2)
[1] 0.01342773
> density(dist, 2, log = TRUE)
[1] -4.310433
> 
> cdf(dist, 4)
[1] 0.08978271
> 
> quantile(dist, 0.7)
[1] 12
> 
> 
> 
> 
> cleanEx()
> nameEx("dist_normal")
> ### * dist_normal
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist_normal
> ### Title: The Normal distribution
> ### Aliases: dist_normal
> 
> ### ** Examples
> 
> dist <- dist_normal(mu = 1:5, sigma = 3)
> 
> dist
<distribution[5]>
[1] N(1, 9) N(2, 9) N(3, 9) N(4, 9) N(5, 9)
> mean(dist)
[1] 1 2 3 4 5
> variance(dist)
[1] 9 9 9 9 9
> skewness(dist)
[1] 0 0 0 0 0
> kurtosis(dist)
[1] 0 0 0 0 0
> 
> generate(dist, 10)
[[1]]
 [1] -0.87936143  1.55092997 -1.50688584  5.78584241  1.98852332 -1.46140515
 [7]  2.46228716  3.21497412  2.72734405  0.08383484

[[2]]
 [1]  6.5353435  3.1695297  0.1362783 -4.6440997  5.3747928  1.8651992
 [7]  1.9514292  4.8315086  4.4636636  3.7817040

[[3]]
 [1]  5.756932  5.346409  3.223695 -2.968055  4.859477  2.831614  2.532613
 [8] -1.412257  1.565550  4.253825

[[4]]
 [1]  8.0760387  3.6916368  5.1630148  3.8385849 -0.1311787  2.7550163
 [7]  2.8171301  3.8220598  7.3000761  6.2895272

[[5]]
 [1] 4.506429 4.239915 7.090890 6.669990 2.933733 2.877515 6.093746 7.305599
 [9] 4.662961 7.643323

> 
> density(dist, 2)
[1] 0.12579441 0.13298076 0.12579441 0.10648267 0.08065691
> density(dist, 2, log = TRUE)
[1] -2.073106 -2.017551 -2.073106 -2.239773 -2.517551
> 
> cdf(dist, 4)
[1] 0.8413447 0.7475075 0.6305587 0.5000000 0.3694413
> 
> quantile(dist, 0.7)
[1] 2.573202 3.573202 4.573202 5.573202 6.573202
> 
> 
> 
> 
> cleanEx()
> nameEx("dist_pareto")
> ### * dist_pareto
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist_pareto
> ### Title: The Pareto distribution
> ### Aliases: dist_pareto
> 
> ### ** Examples
> 
> dist <- dist_pareto(shape = c(10, 3, 2, 1), scale = rep(1, 4))
> dist
<distribution[4]>
[1] Pareto(10, 1) Pareto(3, 1)  Pareto(2, 1)  Pareto(1, 1) 
> 
> ## Don't show: 
> if (requireNamespace("actuar", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ mean(dist)
+ variance(dist)
+ support(dist)
+ generate(dist, 10)
+ 
+ density(dist, 2)
+ density(dist, 2, log = TRUE)
+ 
+ cdf(dist, 4)
+ 
+ quantile(dist, 0.7)
+ ## Don't show: 
+ }) # examplesIf
> mean(dist)
[1] 0.1111111 0.5000000 1.0000000       Inf
> variance(dist)
[1] 0.0154321 0.7500000       Inf       NaN
> support(dist)
<support_region[4]>
[1] [0,Inf] [0,Inf] [0,Inf] [0,Inf]
> generate(dist, 10)
[[1]]
 [1] 0.173635671 0.010772748 0.005707631 0.042300969 0.047434952 0.321024286
 [7] 0.171166492 0.189355176 0.038252253 0.100411572

[[2]]
 [1] 0.091104237 0.261859515 0.116954433 0.002712619 0.380570958 0.087535395
 [7] 0.022763237 0.676707954 0.153426488 0.997048223

[[3]]
 [1] 0.93448326 0.60931913 7.64180194 0.61714103 0.07230307 0.71410635
 [7] 0.44025831 0.29146180 0.42343699 1.31733935

[[4]]
 [1] 0.2086442 0.4959607 0.2590655 8.2640950 0.3817671 1.4314665 0.2181065
 [8] 0.5454513 0.2772489 0.8081995

> density(dist, 2)
[1] 5.645029e-05 3.703704e-02 7.407407e-02 1.111111e-01
> density(dist, 2, log = TRUE)
[1] -9.782150 -3.295837 -2.602690 -2.197225
> cdf(dist, 4)
[1] 0.9999999 0.9920000 0.9600000 0.8000000
> quantile(dist, 0.7)
[1] 0.1279449 0.4938016 0.8257419 2.3333333
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dist_percentile")
> ### * dist_percentile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist_percentile
> ### Title: Percentile distribution
> ### Aliases: dist_percentile
> 
> ### ** Examples
> 
> dist <- dist_normal()
> percentiles <- seq(0.01, 0.99, by = 0.01)
> x <- vapply(percentiles, quantile, double(1L), x = dist)
> dist_percentile(list(x), list(percentiles*100))
<distribution[1]>
[1] percentile[99]
> 
> 
> 
> 
> cleanEx()
> nameEx("dist_poisson")
> ### * dist_poisson
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist_poisson
> ### Title: The Poisson Distribution
> ### Aliases: dist_poisson
> 
> ### ** Examples
> 
> dist <- dist_poisson(lambda = c(1, 4, 10))
> 
> dist
<distribution[3]>
[1] Pois(1)  Pois(4)  Pois(10)
> mean(dist)
[1]  1  4 10
> variance(dist)
[1]  1  4 10
> skewness(dist)
[1] 1.0000000 0.5000000 0.3162278
> kurtosis(dist)
[1] 1.00 0.25 0.10
> 
> generate(dist, 10)
[[1]]
 [1] 0 1 1 2 0 2 3 1 1 0

[[2]]
 [1]  2  2  5  3  5  4  5 10  3  5

[[3]]
 [1] 14 11  8  2  8 10  7 12 11 12

> 
> density(dist, 2)
[1] 0.183939721 0.146525111 0.002269996
> density(dist, 2, log = TRUE)
[1] -1.693147 -1.920558 -6.087977
> 
> cdf(dist, 4)
[1] 0.99634015 0.62883694 0.02925269
> 
> quantile(dist, 0.7)
[1]  1  5 12
> 
> 
> 
> 
> cleanEx()
> nameEx("dist_poisson_inverse_gaussian")
> ### * dist_poisson_inverse_gaussian
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist_poisson_inverse_gaussian
> ### Title: The Poisson-Inverse Gaussian distribution
> ### Aliases: dist_poisson_inverse_gaussian
> 
> ### ** Examples
> 
> dist <- dist_poisson_inverse_gaussian(mean = rep(0.1, 3), shape = c(0.4, 0.8, 1))
> dist
<distribution[3]>
[1] PIG(0.1, 0.4) PIG(0.1, 0.8) PIG(0.1, 1)  
> 
> ## Don't show: 
> if (requireNamespace("actuar", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ mean(dist)
+ variance(dist)
+ support(dist)
+ generate(dist, 10)
+ 
+ density(dist, 2)
+ density(dist, 2, log = TRUE)
+ 
+ cdf(dist, 4)
+ 
+ quantile(dist, 0.7)
+ ## Don't show: 
+ }) # examplesIf
> mean(dist)
[1] 0.1 0.1 0.1
> variance(dist)
[1] 0.10250 0.10125 0.10100
> support(dist)
<support_region[3]>
[1] N0 N0 N0
> generate(dist, 10)
[[1]]
 [1] 0 0 0 0 0 0 0 0 0 0

[[2]]
 [1] 0 0 0 0 0 0 1 0 0 0

[[3]]
 [1] 0 0 1 0 0 0 0 0 0 0

> density(dist, 2)
[1] 0.005366518 0.004961863 0.004877069
> density(dist, 2, log = TRUE)
[1] -5.227576 -5.305974 -5.323211
> cdf(dist, 4)
[1] 0.9999994 0.9999998 0.9999998
> quantile(dist, 0.7)
[1] 0 0 0
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dist_sample")
> ### * dist_sample
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist_sample
> ### Title: Sampling distribution
> ### Aliases: dist_sample
> 
> ### ** Examples
> 
> # Univariate numeric samples
> dist <- dist_sample(x = list(rnorm(100), rnorm(100, 10)))
> 
> dist
<distribution[2]>
[1] sample[100] sample[100]
> mean(dist)
[1] 0.1088874 9.9621919
> variance(dist)
[1] 0.8067621 0.9175323
> skewness(dist)
[1] -0.07115113  0.44168127
> generate(dist, 10)
[[1]]
 [1] -0.68875569 -1.27659221  1.17808700  0.26709879  0.07456498  1.46555486
 [7] -0.58952095 -0.54252003 -0.36722148 -0.61202639

[[2]]
 [1] 11.207908  8.481606  9.268252 10.306558  9.922847 10.207538 11.869291
 [8]  9.347905  8.713699 11.441158

> 
> density(dist, 1)
[1] 0.2704942 0.0000000
> 
> # Multivariate numeric samples
> dist <- dist_sample(x = list(cbind(rnorm(100), rnorm(100, 10))))
> 
> dist
<distribution[1]>
[1] sample[100]
> mean(dist)
[1]  0.03077435 10.02578015
> variance(dist)
           [,1]       [,2]
[1,] 1.02185781 0.02836986
[2,] 0.02836986 0.94975971
> skewness(dist)
[1] -0.005947119
> generate(dist, 10)
[[1]]
            [,1]     [,2]
 [1,]  0.7655990 11.59291
 [2,]  0.9198037 11.76355
 [3,]  0.7655990 11.59291
 [4,] -0.5447907 10.91602
 [5,]  0.3763703 10.61564
 [6,]  0.2234804 10.24621
 [7,]  0.6955508 11.57789
 [8,]  1.8031419 10.45614
 [9,]  0.2441649 11.09167
[10,] -0.1661210 10.80328

> 
> density(dist, 1)
[1] 0.2745042 0.0000000
> 
> 
> 
> 
> cleanEx()
> nameEx("dist_student_t")
> ### * dist_student_t
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist_student_t
> ### Title: The (non-central) location-scale Student t Distribution
> ### Aliases: dist_student_t
> 
> ### ** Examples
> 
> dist <- dist_student_t(df = c(1,2,5), mu = c(0,1,2), sigma = c(1,2,3))
> 
> dist
<distribution[3]>
[1] t(1, 0, 1) t(2, 1, 2) t(5, 2, 3)
> mean(dist)
[1] NA  1  2
> variance(dist)
[1]  NA Inf  15
> 
> generate(dist, 10)
[[1]]
 [1] -0.59472348 -0.35367039 11.43861787 -0.45210793  0.80894714  2.41062314
 [7] -0.16968735 -0.04923547 -4.14886299  0.08395790

[[2]]
 [1] -0.2134189  2.9147677  0.3522937  0.6477478  3.3329679  4.0693068
 [7] -1.4331914  3.8041376  2.9851022 -1.3403752

[[3]]
 [1]   9.6335446 -11.4826168  10.1685974   1.4542646   3.7499718   2.8144026
 [7]   2.0588941  -0.2725962  -1.8120171   0.5137347

> 
> density(dist, 2)
[1] 0.06366198 0.14814815 0.12653556
> density(dist, 2, log = TRUE)
[1] -2.754168 -1.909543 -2.067232
> 
> cdf(dist, 4)
[1] 0.9220209 0.8638034 0.7327454
> 
> quantile(dist, 0.7)
[1] 0.7265425 2.2344268 3.6782889
> 
> 
> 
> 
> cleanEx()
> nameEx("dist_studentized_range")
> ### * dist_studentized_range
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist_studentized_range
> ### Title: The Studentized Range distribution
> ### Aliases: dist_studentized_range
> 
> ### ** Examples
> 
> dist <- dist_studentized_range(nmeans = c(6, 2), df = c(5, 4), nranges = c(1, 1))
> 
> dist
<distribution[2]>
[1] StudentizedRange(6, 5, 1) StudentizedRange(2, 4, 1)
> 
> cdf(dist, 4)
[1] 0.8017144 0.9525787
> 
> quantile(dist, 0.7)
[1] 3.414964 1.682303
> 
> 
> 
> 
> cleanEx()
> nameEx("dist_transformed")
> ### * dist_transformed
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist_transformed
> ### Title: Modify a distribution with a transformation
> ### Aliases: dist_transformed
> 
> ### ** Examples
> 
> # Create a log normal distribution
> dist <- dist_transformed(dist_normal(0, 0.5), exp, log)
> density(dist, 1) # dlnorm(1, 0, 0.5)
[1] 0.7978846
> cdf(dist, 4) # plnorm(4, 0, 0.5)
[1] 0.9972194
> quantile(dist, 0.1) # qlnorm(0.1, 0, 0.5)
[1] 0.5268835
> generate(dist, 10) # rlnorm(10, 0, 0.5)
[[1]]
 [1] 0.7310840 1.0961693 0.6584845 2.2202957 1.1791029 0.6634948 1.2759800
 [8] 1.4465224 1.3336115 0.8583922

> 
> 
> 
> 
> cleanEx()
> nameEx("dist_truncated")
> ### * dist_truncated
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist_truncated
> ### Title: Truncate a distribution
> ### Aliases: dist_truncated
> 
> ### ** Examples
> 
> dist <- dist_truncated(dist_normal(2,1), lower = 0)
> 
> dist
<distribution[1]>
[1] N(2, 1)[0,Inf]
> mean(dist)
[1] 2.055248
> variance(dist)
[1] 0.8864519
> 
> generate(dist, 10)
[[1]]
 [1] 1.7113070 2.2084751 3.3425805 1.2272790 3.2855581 3.6066454 2.4358155
 [8] 2.3519223 0.6156833 1.2413760

> 
> density(dist, 2)
[1] 0.4082296
> density(dist, 2, log = TRUE)
[1] -0.8959256
> 
> cdf(dist, 4)
[1] 0.9767203
> 
> quantile(dist, 0.7)
[1] 2.544133
> 
> if(requireNamespace("ggdist")) {
+ library(ggplot2)
+ ggplot() +
+   ggdist::stat_dist_halfeye(
+     aes(y = c("Normal", "Truncated"),
+         dist = c(dist_normal(2,1), dist_truncated(dist_normal(2,1), lower = 0)))
+   )
+ }
Loading required namespace: ggdist
> 
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("dist_uniform")
> ### * dist_uniform
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist_uniform
> ### Title: The Uniform distribution
> ### Aliases: dist_uniform
> 
> ### ** Examples
> 
> dist <- dist_uniform(min = c(3, -2), max = c(5, 4))
> 
> dist
<distribution[2]>
[1] U(3, 5)  U(-2, 4)
> mean(dist)
[1] 4 1
> variance(dist)
[1] 0.3333333 3.0000000
> skewness(dist)
[1] 0 0
> kurtosis(dist)
[1] -1.2 -1.2
> 
> generate(dist, 10)
[[1]]
 [1] 3.531017 3.744248 4.145707 4.816416 3.403364 4.796779 4.889351 4.321596
 [9] 4.258228 3.123573

[[2]]
 [1] -0.7641526 -0.9406595  2.1221371  0.3046223  2.6190485  0.9861955
 [7]  2.3057110  3.9514366  0.2802111  2.6646713

> 
> density(dist, 2)
[1] 0.0000000 0.1666667
> density(dist, 2, log = TRUE)
[1]      -Inf -1.791759
> 
> cdf(dist, 4)
[1] 0.5 1.0
> 
> quantile(dist, 0.7)
[1] 4.4 2.2
> 
> 
> 
> 
> cleanEx()
> nameEx("dist_weibull")
> ### * dist_weibull
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist_weibull
> ### Title: The Weibull distribution
> ### Aliases: dist_weibull
> 
> ### ** Examples
> 
> dist <- dist_weibull(shape = c(0.5, 1, 1.5, 5), scale = rep(1, 4))
> 
> dist
<distribution[4]>
[1] Weibull(0.5, 1) Weibull(1, 1)   Weibull(1.5, 1) Weibull(5, 1)  
> mean(dist)
[1] 2.0000000 1.0000000 0.9027453 0.9181687
> variance(dist)
[1] 20.00000000  1.00000000  0.37569028  0.04422998
> skewness(dist)
[1]   5.0737409   0.0000000  -0.7764597 -38.1055455
> kurtosis(dist)
[1]  87.48382  14.00000  12.28013 660.88795
> 
> generate(dist, 10)
[[1]]
 [1] 1.758561922 0.977188430 0.310388829 0.009270239 2.563404079 0.011481413
 [7] 0.003239208 0.171650620 0.214779163 7.751068594

[[2]]
 [1] 1.580002541 1.734112910 0.375387732 0.956842663 0.261570733 0.697759316
 [7] 0.331817177 0.008126839 0.967491453 0.251742092

[[3]]
 [1] 0.1658208 1.3396169 0.5681182 1.6268476 1.2031299 0.9674825 2.6497276
 [8] 0.9740439 0.2691286 1.0512058

[[4]]
 [1] 0.9389064 0.8745357 0.9327800 1.1094436 0.7170039 0.8337025 0.7455643
 [8] 1.1735747 0.7978810 0.9766320

> 
> density(dist, 2)
[1] 8.595475e-02 1.353353e-01 1.253822e-01 1.013133e-12
> density(dist, 2, log = TRUE)
[1]  -2.453934  -2.000000  -2.076388 -27.617973
> 
> cdf(dist, 4)
[1] 0.8646647 0.9816844 0.9996645 1.0000000
> 
> quantile(dist, 0.7)
[1] 1.449551 1.203973 1.131734 1.037823
> 
> 
> 
> 
> cleanEx()
> nameEx("dist_wrap")
> ### * dist_wrap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dist_wrap
> ### Title: Create a distribution from p/d/q/r style functions
> ### Aliases: dist_wrap
> 
> ### ** Examples
> 
> dist <- dist_wrap("norm", mean = 1:3, sd = c(3, 9, 2))
> 
> density(dist, 1) # dnorm()
[1] 0.13298076 0.04405414 0.12098536
> cdf(dist, 4) # pnorm()
[1] 0.8413447 0.5879296 0.6914625
> quantile(dist, 0.975) # qnorm()
[1]  6.879892 19.639676  6.919928
> generate(dist, 10) # rnorm()
[[1]]
 [1] -0.87936143  1.55092997 -1.50688584  5.78584241  1.98852332 -1.46140515
 [7]  2.46228716  3.21497412  2.72734405  0.08383484

[[2]]
 [1]  15.606031   5.508589  -3.591165 -17.932299  12.124378   1.595598
 [7]   1.854288  10.494526   9.390991   7.345112

[[3]]
 [1]  4.83795474  4.56427260  3.14912997 -0.97870339  4.23965150  2.88774252
 [7]  2.68840899  0.05849523  2.04369989  3.83588312

> 
> library(actuar)

Attaching package: ‘actuar’

The following objects are masked from ‘package:stats’:

    sd, var

The following object is masked from ‘package:grDevices’:

    cm

> dist <- dist_wrap("invparalogis", package = "actuar", shape = 2, rate = 2)
> density(dist, 1) # actuar::dinvparalogis()
[1] 0.512
> cdf(dist, 4) # actuar::pinvparalogis()
[1] 0.9694675
> quantile(dist, 0.975) # actuar::qinvparalogis()
[1] 4.429922
> generate(dist, 10) # actuar::rinvparalogis()
[[1]]
 [1] 2.3154036 0.5437600 0.7247754 0.5834124 1.0216479 0.5080178 0.7490539
 [8] 1.3252499 0.3197472 1.9055575

> 
> 
> 
> 
> cleanEx()

detaching ‘package:actuar’

> nameEx("family.distribution")
> ### * family.distribution
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: family.distribution
> ### Title: Extract the name of the distribution family
> ### Aliases: family.distribution
> 
> ### ** Examples
> 
> dist <- c(
+   dist_normal(1:2),
+   dist_poisson(3),
+   dist_multinomial(size = c(4, 3),
+   prob = list(c(0.3, 0.5, 0.2), c(0.1, 0.5, 0.4)))
+   )
> family(dist)
[1] "normal"      "normal"      "poisson"     "multinomial" "multinomial"
> 
> 
> 
> 
> cleanEx()
> nameEx("hilo")
> ### * hilo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hilo
> ### Title: Compute intervals
> ### Aliases: hilo
> 
> ### ** Examples
> 
> # 95% interval from a standard normal distribution
> interval <- hilo(dist_normal(0, 1), 95)
> interval
<hilo[1]>
[1] [-1.959964, 1.959964]95
> 
> # Extract the individual quantities with `$lower`, `$upper`, and `$level`
> interval$lower
[1] -1.959964
> interval$upper
[1] 1.959964
> interval$level
[1] 95
> 
> 
> 
> cleanEx()
> nameEx("is-distribution")
> ### * is-distribution
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is_distribution
> ### Title: Test if the object is a distribution
> ### Aliases: is_distribution
> 
> ### ** Examples
> 
> dist <- dist_normal()
> is_distribution(dist)
[1] TRUE
> is_distribution("distributional")
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("new_hdr")
> ### * new_hdr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: new_hdr
> ### Title: Construct hdr intervals
> ### Aliases: new_hdr
> 
> ### ** Examples
> 
> 
> new_hdr(lower = list(1, c(3,6)), upper = list(10, c(5, 8)), size = c(80, 95))
<hdr[2]>
[1] [1, 10]80      [3, 5][6, 8]95
> 
> 
> 
> 
> cleanEx()
> nameEx("new_hilo")
> ### * new_hilo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: new_hilo
> ### Title: Construct hilo intervals
> ### Aliases: new_hilo
> 
> ### ** Examples
> 
> new_hilo(lower = rnorm(10), upper = rnorm(10) + 5, size = 95)
<hilo[10]>
 [1] [-0.6264538, 6.511781]95 [ 0.1836433, 5.389843]95 [-0.8356286, 4.378759]95
 [4] [ 1.5952808, 2.785300]95 [ 0.3295078, 6.124931]95 [-0.8204684, 4.955066]95
 [7] [ 0.4874291, 4.983810]95 [ 0.7383247, 5.943836]95 [ 0.5757814, 5.821221]95
[10] [-0.3053884, 5.593901]95
> 
> 
> 
> 
> cleanEx()
> nameEx("parameters")
> ### * parameters
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: parameters
> ### Title: Extract the parameters of a distribution
> ### Aliases: parameters parameters.distribution
> 
> ### ** Examples
> 
> dist <- c(
+   dist_normal(1:2),
+   dist_poisson(3),
+   dist_multinomial(size = c(4, 3),
+   prob = list(c(0.3, 0.5, 0.2), c(0.1, 0.5, 0.4)))
+   )
> parameters(dist)
  mu sigma  l  s             p
1  1     1 NA NA          NULL
2  2     1 NA NA          NULL
3 NA    NA  3 NA          NULL
4 NA    NA NA  4 0.3, 0.5, 0.2
5 NA    NA NA  3 0.1, 0.5, 0.4
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.857 0.084 0.942 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
