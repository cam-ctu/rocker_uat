
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(testthat)
> library(vctrs)
> 
> test_check("vctrs")
[ FAIL 8 | WARN 0 | SKIP 259 | PASS 4797 ]

══ Skipped tests (259) ═════════════════════════════════════════════════════════
• Factors now have a `c()` method (1): 'test-type-factor.R:26:3'
• FIXME: dimnames of matrices are not properly concatenated (1):
  'test-type-table.R:250:3'
• On CRAN (257): 'test-cast.R:3:3', 'test-cast.R:55:3', 'test-cast.R:101:3',
  'test-cast.R:143:3', 'test-compare.R:204:3', 'test-compare.R:227:3',
  'test-compare.R:278:3', 'test-conditions.R:35:3', 'test-conditions.R:42:3',
  'test-conditions.R:68:3', 'test-conditions.R:81:3', 'test-conditions.R:98:3',
  'test-conditions.R:111:3', 'test-conditions.R:142:3',
  'test-conditions.R:152:3', 'test-conditions.R:158:3',
  'test-conditions.R:167:3', 'test-dictionary.R:222:3', 'test-equal.R:194:3',
  'test-equal.R:356:3', 'test-error-call.R:3:3', 'test-error-call.R:8:3',
  'test-error-call.R:22:3', 'test-error-call.R:27:3', 'test-error-call.R:38:3',
  'test-error-call.R:46:3', 'test-error-call.R:51:3', 'test-error-call.R:56:3',
  'test-error-call.R:71:3', 'test-error-call.R:76:3', 'test-error-call.R:87:3',
  'test-error-call.R:110:3', 'test-error-call.R:118:3',
  'test-error-call.R:125:3', 'test-error-call.R:132:3',
  'test-error-call.R:141:3', 'test-error-call.R:148:3',
  'test-error-call.R:160:3', 'test-expand.R:95:3', 'test-expand.R:104:3',
  'test-expand.R:110:3', 'test-expand.R:120:3', 'test-expand.R:133:3',
  'test-expand.R:145:3', 'test-expand.R:151:3', 'test-group.R:135:3',
  'test-hash.R:71:3', 'test-interval.R:296:3', 'test-interval.R:301:3',
  'test-interval.R:547:3', 'test-interval.R:668:3',
  'test-lifecycle-deprecated.R:19:3', 'test-lifecycle-deprecated.R:32:3',
  'test-lifecycle-deprecated.R:51:3', 'test-match.R:394:3',
  'test-match.R:543:3', 'test-match.R:817:3', 'test-match.R:829:3',
  'test-match.R:961:3', 'test-match.R:974:3', 'test-match.R:983:3',
  'test-match.R:1007:3', 'test-match.R:1031:3', 'test-match.R:1047:3',
  'test-match.R:1092:3', 'test-match.R:1111:3', 'test-match.R:1129:3',
  'test-match.R:1188:3', 'test-match.R:1198:3', 'test-match.R:1219:3',
  'test-match.R:1243:3', 'test-match.R:1269:3', 'test-match.R:1276:3',
  'test-match.R:1289:3', 'test-match.R:1305:3', 'test-match.R:1322:3',
  'test-match.R:1369:3', 'test-match.R:1378:3', 'test-match.R:1386:3',
  'test-match.R:1434:3', 'test-match.R:1461:3', 'test-match.R:1467:3',
  'test-match.R:1558:3', 'test-match.R:1567:3', 'test-match.R:1794:3',
  'test-names.R:66:3', 'test-names.R:80:3', 'test-names.R:125:3',
  'test-names.R:135:3', 'test-names.R:162:3', 'test-names.R:170:3',
  'test-names.R:316:3', 'test-names.R:475:3', 'test-names.R:564:3',
  'test-names.R:597:3', 'test-names.R:826:3', 'test-names.R:898:3',
  'test-order.R:897:3', 'test-order.R:924:3', 'test-order.R:1396:3',
  'test-order.R:1425:3', 'test-partial-factor.R:4:3',
  'test-partial-frame.R:4:3', 'test-print-str.R:4:3',
  'test-ptype-abbr-full.R:102:3', 'test-rank.R:145:3', 'test-rank.R:150:3',
  'test-recycle.R:3:3', 'test-recycle.R:27:3', 'test-recycle.R:91:3',
  'test-recycle.R:113:3', 'test-recycle.R:132:3', 'test-recycle.R:169:3',
  'test-recycle.R:175:3', 'test-rep.R:32:3', 'test-rep.R:80:3',
  'test-rep.R:90:3', 'test-rep.R:98:3', 'test-rep.R:105:3', 'test-rep.R:113:3',
  'test-rep.R:164:3', 'test-runs.R:46:3', 'test-runs.R:133:3',
  'test-runs.R:196:3', 'test-runs.R:229:3', 'test-set.R:359:3',
  'test-set.R:374:3', 'test-set.R:394:3', 'test-set.R:409:3',
  'test-set.R:441:3', 'test-shape.R:18:3', 'test-shape.R:25:3',
  'test-shape.R:98:3', 'test-shape.R:127:3', 'test-size.R:6:3',
  'test-size.R:23:3', 'test-size.R:86:3', 'test-size.R:94:3',
  'test-size.R:106:3', 'test-size.R:112:3', 'test-size.R:134:3',
  'test-slice-assign.R:419:3', 'test-slice-assign.R:428:3',
  'test-slice-assign.R:444:3', 'test-slice-assign.R:465:3',
  'test-slice-assign.R:478:3', 'test-slice-assign.R:561:3',
  'test-slice-chop.R:164:3', 'test-slice-chop.R:176:3',
  'test-slice-chop.R:194:3', 'test-slice-chop.R:355:3',
  'test-slice-chop.R:420:3', 'test-slice-chop.R:432:3',
  'test-slice-chop.R:578:3', 'test-slice-chop.R:588:3',
  'test-slice-chop.R:599:3', 'test-slice-chop.R:624:3',
  'test-slice-chop.R:753:3', 'test-slice-chop.R:767:3',
  'test-slice-chop.R:791:3', 'test-slice-chop.R:800:3',
  'test-slice-chop.R:875:3', 'test-slice-chop.R:919:3',
  'test-slice-chop.R:951:3', 'test-slice-chop.R:983:3',
  'test-slice-chop.R:996:3', 'test-slice-interleave.R:37:3',
  'test-slice-interleave.R:43:3', 'test-slice-interleave.R:86:3',
  'test-slice-interleave.R:93:3', 'test-slice.R:7:3', 'test-slice.R:73:3',
  'test-slice.R:186:3', 'test-slice.R:437:3', 'test-slice.R:441:3',
  'test-slice.R:446:3', 'test-slice.R:509:3', 'test-subscript-loc.R:9:3',
  'test-subscript-loc.R:26:3', 'test-subscript-loc.R:66:3',
  'test-subscript-loc.R:87:3', 'test-subscript-loc.R:99:3',
  'test-subscript-loc.R:109:3', 'test-subscript-loc.R:170:3',
  'test-subscript-loc.R:181:3', 'test-subscript-loc.R:201:3',
  'test-subscript-loc.R:214:3', 'test-subscript-loc.R:227:3',
  'test-subscript-loc.R:236:3', 'test-subscript-loc.R:255:3',
  'test-subscript-loc.R:291:3', 'test-subscript-loc.R:318:3',
  'test-subscript-loc.R:339:3', 'test-subscript-loc.R:353:3',
  'test-subscript-loc.R:380:3', 'test-subscript-loc.R:393:3',
  'test-subscript-loc.R:436:3', 'test-subscript-loc.R:469:3',
  'test-subscript-loc.R:486:3', 'test-subscript-loc.R:494:3',
  'test-subscript-loc.R:517:3', 'test-subscript-loc.R:545:3',
  'test-subscript-loc.R:633:3', 'test-subscript-loc.R:712:3',
  'test-subscript-loc.R:724:3', 'test-subscript-loc.R:728:3',
  'test-subscript-loc.R:735:3', 'test-subscript.R:46:3',
  'test-subscript.R:62:3', 'test-subscript.R:75:3', 'test-subscript.R:84:3',
  'test-subscript.R:90:3', 'test-subscript.R:95:3', 'test-subscript.R:109:3',
  'test-subscript.R:122:3', 'test-type-asis.R:61:3', 'test-type-asis.R:80:3',
  'test-type-data-frame.R:6:3', 'test-type-data-frame.R:16:3',
  'test-type-data-frame.R:369:3', 'test-type-data-frame.R:376:3',
  'test-type-data-frame.R:383:3', 'test-type-data-frame.R:390:3',
  'test-type-data-frame.R:441:3', 'test-type-data-frame.R:470:3',
  'test-type-data-frame.R:526:3', 'test-type-data-frame.R:570:3',
  'test-type-data-frame.R:598:3', 'test-type-data-table.R:4:1',
  'test-type-date-time.R:118:3', 'test-type-factor.R:50:3',
  'test-type-list-of.R:42:3', 'test-type-list-of.R:50:3',
  'test-type-list-of.R:138:3', 'test-type-list-of.R:189:3',
  'test-type-misc.R:145:3', 'test-type-rcrd.R:105:3', 'test-type-rcrd.R:212:3',
  'test-type-rcrd.R:303:3', 'test-type-sf.R:4:1', 'test-type-table.R:137:3',
  'test-type-tibble.R:22:3', 'test-type-tibble.R:100:3',
  'test-type-unspecified.R:51:3', 'test-type-vctr.R:280:3',
  'test-type-vctr.R:451:3', 'test-type-vctr.R:521:3', 'test-type-vctr.R:528:3',
  'test-type.R:50:3', 'test-type.R:70:3', 'test-type.R:248:3',
  'test-type2.R:14:3', 'test-type2.R:123:3', 'test-type2.R:203:3',
  'test-type2.R:210:3', 'test-type2.R:217:3', 'test-type2.R:230:3'

══ Failed tests ════════════════════════════════════════════════════════════════
── Error ('test-arith.R:3:3'): logical/integer/numeric works ───────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─vctrs:::expect_equal(vec_arith("+", TRUE, TRUE), 2L) at test-arith.R:3:3
  2. │ └─vctrs:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance) at vctrs-tests/testthat/helper-vctrs.R:53:3
  3. └─base::loadNamespace(x) at vctrs-tests/testthat/helper-vctrs.R:25:3
  4.   ├─base::namespaceImportFrom(...)
  5.   │ └─base::asNamespace(ns)
  6.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  7.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  8.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
  9.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 10.           └─base::get(genname, envir = envir)
── Error ('test-arith.R:2:1'): (code run outside of `test_that()`) ─────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::test_check("vctrs")
  2. │ └─testthat::test_dir(...)
  3. │   └─testthat:::test_files(...)
  4. │     └─testthat:::test_files_serial(...)
  5. │       ├─testthat::with_reporter(...)
  6. │       │ └─base::tryCatch(...)
  7. │       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  8. │       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  9. │       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 10. │       └─base::lapply(...)
 11. │         └─testthat (local) FUN(X[[i]], ...)
 12. │           └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 13. │             └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 14. │               ├─base::tryCatch(...)
 15. │               │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 16. │               │   ├─base (local) tryCatchOne(...)
 17. │               │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 18. │               │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 19. │               │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 20. │               │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 21. │               ├─base::withCallingHandlers(...)
 22. │               └─base::eval(code, test_env)
 23. │                 └─base::eval(code, test_env)
 24. │                   └─testthat::test_that(...) at test-arith.R:2:1
 25. │                     └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 26. │                       └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 27. │                         └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 28. └─base::loadNamespace(x)
 29.   ├─base::namespaceImportFrom(...)
 30.   │ └─base::asNamespace(ns)
 31.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 32.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 33.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 34.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 35.           └─base::get(genname, envir = envir)
── Error ('test-assert.R:5:3'): basic assert is idempotent ─────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_true(vec_is(x)) at test-assert.R:5:3
  2. │ └─testthat:::expect_waldo_constant(act, TRUE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-assert.R:2:1'): (code run outside of `test_that()`) ────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::test_check("vctrs")
  2. │ └─testthat::test_dir(...)
  3. │   └─testthat:::test_files(...)
  4. │     └─testthat:::test_files_serial(...)
  5. │       ├─testthat::with_reporter(...)
  6. │       │ └─base::tryCatch(...)
  7. │       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  8. │       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  9. │       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 10. │       └─base::lapply(...)
 11. │         └─testthat (local) FUN(X[[i]], ...)
 12. │           └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 13. │             └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 14. │               ├─base::tryCatch(...)
 15. │               │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 16. │               │   ├─base (local) tryCatchOne(...)
 17. │               │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 18. │               │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 19. │               │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 20. │               │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 21. │               ├─base::withCallingHandlers(...)
 22. │               └─base::eval(code, test_env)
 23. │                 └─base::eval(code, test_env)
 24. │                   └─testthat::test_that(...) at test-assert.R:2:1
 25. │                     └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 26. │                       └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 27. │                         └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 28. └─base::loadNamespace(x)
 29.   ├─base::namespaceImportFrom(...)
 30.   │ └─base::asNamespace(ns)
 31.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 32.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 33.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 34.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 35.           └─base::get(genname, envir = envir)
── Error ('test-bind.R:6:3'): empty inputs return an empty data frame ──────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─vctrs:::expect_equal(vec_rbind(), data_frame()) at test-bind.R:6:3
  2. │ └─vctrs:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance) at vctrs-tests/testthat/helper-vctrs.R:53:3
  3. └─base::loadNamespace(x) at vctrs-tests/testthat/helper-vctrs.R:25:3
  4.   ├─base::namespaceImportFrom(...)
  5.   │ └─base::asNamespace(ns)
  6.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  7.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  8.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
  9.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 10.           └─base::get(genname, envir = envir)
── Error ('test-bind.R:5:1'): (code run outside of `test_that()`) ──────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::test_check("vctrs")
  2. │ └─testthat::test_dir(...)
  3. │   └─testthat:::test_files(...)
  4. │     └─testthat:::test_files_serial(...)
  5. │       ├─testthat::with_reporter(...)
  6. │       │ └─base::tryCatch(...)
  7. │       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  8. │       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  9. │       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 10. │       └─base::lapply(...)
 11. │         └─testthat (local) FUN(X[[i]], ...)
 12. │           └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 13. │             └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 14. │               ├─base::tryCatch(...)
 15. │               │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 16. │               │   ├─base (local) tryCatchOne(...)
 17. │               │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 18. │               │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 19. │               │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 20. │               │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 21. │               ├─base::withCallingHandlers(...)
 22. │               └─base::eval(code, test_env)
 23. │                 └─base::eval(code, test_env)
 24. │                   └─testthat::test_that(...) at test-bind.R:5:1
 25. │                     └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 26. │                       └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 27. │                         └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 28. └─base::loadNamespace(x)
 29.   ├─base::namespaceImportFrom(...)
 30.   │ └─base::asNamespace(ns)
 31.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 32.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 33.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 34.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 35.           └─base::get(genname, envir = envir)
── Error ('test-c.R:4:3'): zero length input returns NULL ──────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─vctrs:::expect_equal(vec_c(), NULL) at test-c.R:4:3
  2. │ └─vctrs:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance) at vctrs-tests/testthat/helper-vctrs.R:53:3
  3. └─base::loadNamespace(x) at vctrs-tests/testthat/helper-vctrs.R:25:3
  4.   ├─base::namespaceImportFrom(...)
  5.   │ └─base::asNamespace(ns)
  6.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  7.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  8.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
  9.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 10.           └─base::get(genname, envir = envir)
── Error ('test-c.R:3:1'): (code run outside of `test_that()`) ─────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::test_check("vctrs")
  2. │ └─testthat::test_dir(...)
  3. │   └─testthat:::test_files(...)
  4. │     └─testthat:::test_files_serial(...)
  5. │       ├─testthat::with_reporter(...)
  6. │       │ └─base::tryCatch(...)
  7. │       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  8. │       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  9. │       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 10. │       └─base::lapply(...)
 11. │         └─testthat (local) FUN(X[[i]], ...)
 12. │           └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 13. │             └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 14. │               ├─base::tryCatch(...)
 15. │               │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 16. │               │   ├─base (local) tryCatchOne(...)
 17. │               │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 18. │               │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 19. │               │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 20. │               │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 21. │               ├─base::withCallingHandlers(...)
 22. │               └─base::eval(code, test_env)
 23. │                 └─base::eval(code, test_env)
 24. │                   └─testthat::test_that(...) at test-c.R:3:1
 25. │                     └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 26. │                       └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 27. │                         └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 28. └─base::loadNamespace(x)
 29.   ├─base::namespaceImportFrom(...)
 30.   │ └─base::asNamespace(ns)
 31.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 32.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 33.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 34.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 35.           └─base::get(genname, envir = envir)

[ FAIL 8 | WARN 0 | SKIP 259 | PASS 4797 ]
Error: Test failures
Execution halted
