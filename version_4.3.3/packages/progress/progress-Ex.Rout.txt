
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "progress"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('progress')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("progress_bar")
> ### * progress_bar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: progress_bar
> ### Title: Progress bar in the terminal
> ### Aliases: progress_bar
> 
> ### ** Examples
> 
> 
> ## We don't run the examples on CRAN, because they takes >10s
> ## altogether. Unfortunately it is hard to create a set of
> ## meaningful progress bar examples that also run quickly.
> ## Not run: 
> ##D 
> ##D ## Basic
> ##D pb <- progress_bar$new(total = 100)
> ##D for (i in 1:100) {
> ##D   pb$tick()
> ##D   Sys.sleep(1 / 100)
> ##D }
> ##D 
> ##D ## ETA
> ##D pb <- progress_bar$new(
> ##D   format = "  downloading [:bar] :percent eta: :eta",
> ##D   total = 100, clear = FALSE, width= 60)
> ##D for (i in 1:100) {
> ##D   pb$tick()
> ##D   Sys.sleep(1 / 100)
> ##D }
> ##D 
> ##D ## Elapsed time
> ##D pb <- progress_bar$new(
> ##D   format = "  downloading [:bar] :percent in :elapsed",
> ##D   total = 100, clear = FALSE, width= 60)
> ##D for (i in 1:100) {
> ##D   pb$tick()
> ##D   Sys.sleep(1 / 100)
> ##D }
> ##D 
> ##D ## Spinner
> ##D pb <- progress_bar$new(
> ##D   format = "(:spin) [:bar] :percent",
> ##D   total = 30, clear = FALSE, width = 60)
> ##D for (i in 1:30) {
> ##D   pb$tick()
> ##D   Sys.sleep(3 / 100)
> ##D }
> ##D 
> ##D ## Custom tokens
> ##D pb <- progress_bar$new(
> ##D   format = "  downloading :what [:bar] :percent eta: :eta",
> ##D   clear = FALSE, total = 200, width = 60)
> ##D f <- function() {
> ##D   for (i in 1:100) {
> ##D     pb$tick(tokens = list(what = "foo   "))
> ##D     Sys.sleep(2 / 100)
> ##D   }
> ##D   for (i in 1:100) {
> ##D     pb$tick(tokens = list(what = "foobar"))
> ##D     Sys.sleep(2 / 100)
> ##D   }
> ##D }
> ##D f()
> ##D 
> ##D ## Download (or other) rates
> ##D pb <- progress_bar$new(
> ##D   format = "  downloading foobar at :rate, got :bytes in :elapsed",
> ##D   clear = FALSE, total = NA, width = 60)
> ##D f <- function() {
> ##D   for (i in 1:100) {
> ##D     pb$tick(sample(1:100 * 1000, 1))
> ##D     Sys.sleep(2/100)
> ##D   }
> ##D   pb$tick(1e7)
> ##D   invisible()
> ##D }
> ##D f()
> ##D 
> ##D pb <- progress_bar$new(
> ##D   format = "  got :current rows at :tick_rate/sec",
> ##D   clear = FALSE, total = NA, width = 60)
> ##D f <- function() {
> ##D   for (i in 1:100) {
> ##D     pb$tick(sample(1:100, 1))
> ##D     Sys.sleep(2/100)
> ##D   }
> ##D   pb$terminate()
> ##D   invisible()
> ##D }
> ##D f()
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.159 0.031 0.19 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
