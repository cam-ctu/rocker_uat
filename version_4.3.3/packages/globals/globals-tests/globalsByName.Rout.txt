
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
> 
> message("*** globalsByName() ...")
*** globalsByName() ...
> 
> globals_c <- globalsByName(c("{", "<-", "c", "d"))
> str(globals_c)
List of 4
 $ { :.Primitive("{") 
 $ <-:.Primitive("<-") 
 $ c : num 3
 $ d : NULL
 - attr(*, "where")=List of 4
  ..$ { :<environment: base> 
  ..$ <-:<environment: base> 
  ..$ c :<environment: R_GlobalEnv> 
  ..$ d :<environment: R_GlobalEnv> 
 - attr(*, "class")= chr [1:2] "Globals" "list"
> assert_identical_sets(names(globals_c), c("{", "<-", "c", "d"))
> globals_c <- cleanup(globals_c)
> str(globals_c)
List of 2
 $ c: num 3
 $ d: NULL
 - attr(*, "where")=List of 2
  ..$ c:<environment: R_GlobalEnv> 
  ..$ d:<environment: R_GlobalEnv> 
 - attr(*, "class")= chr [1:2] "Globals" "list"
> assert_identical_sets(names(globals_c), c("c", "d"))
> where <- attr(globals_c, "where")
> stopifnot(
+   length(where) == length(globals_c),
+   identical(where$c, globalenv()),
+   identical(where$d, globalenv())
+ )
> 
> foo <- globals::Globals
> globals <- globalsByName(c("{", "foo", "list"), recursive = FALSE)
> str(globals)
List of 3
 $ {   :.Primitive("{") 
 $ foo :function (object = list(), ...)  
 $ list:function (...)  
 - attr(*, "where")=List of 3
  ..$ {   :<environment: base> 
  ..$ foo :<environment: R_GlobalEnv> 
  ..$ list:<environment: base> 
 - attr(*, "class")= chr [1:2] "Globals" "list"
> assert_identical_sets(names(globals), c("{", "foo", "list"))
> where <- attr(globals, "where")
> stopifnot(length(where) == length(globals))
> if (!covr) stopifnot(
+   identical(where$`{`, baseenv()),
+   identical(where$foo, globalenv()),
+   identical(where$list, baseenv())
+ )
> 
> globals <- cleanup(globals)
> str(globals)
List of 1
 $ foo:function (object = list(), ...)  
 - attr(*, "where")=List of 1
  ..$ foo:<environment: R_GlobalEnv> 
 - attr(*, "class")= chr [1:2] "Globals" "list"
> assert_identical_sets(names(globals), c("foo"))
> globals <- cleanup(globals, drop = "internals")
> str(globals)
List of 1
 $ foo:function (object = list(), ...)  
 - attr(*, "where")=List of 1
  ..$ foo:<environment: R_GlobalEnv> 
 - attr(*, "class")= chr [1:2] "Globals" "list"
> assert_identical_sets(names(globals), c("foo"))
> pkgs <- packagesOf(globals)
> stopifnot(pkgs == "globals")
> 
> 
> ## Also '...'
> myGlobals <- function(x, ...) {
+   globalsByName(c("a", "x", "..."))
+ }
> globals <- myGlobals(x = 2, y = 3, z = 4)
> str(globals)
List of 3
 $ a  : num 0
 $ x  : num 2
 $ ...:List of 2
  ..$ y: num 3
  ..$ z: num 4
  ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
 - attr(*, "where")=List of 3
  ..$ a  :<environment: R_GlobalEnv> 
  ..$ x  :<environment: 0x55959f8f2dc8> 
  ..$ ...:<environment: 0x55959f8f2dc8> 
 - attr(*, "class")= chr [1:2] "Globals" "list"
> assert_identical_sets(names(globals), c("a", "x", "..."))
> assert_identical_sets(names(globals[["..."]]), c("y", "z"))
> 
> ## And '..1', '..2', etc.
> myGlobals <- function(x, ...) {
+   globalsByName(c("a", "x", "..1", "..2"))
+ }
> globals <- myGlobals(x = 2, y = 3, 4)
> str(globals)
List of 4
 $ a  : num 0
 $ x  : num 2
 $ ..1:List of 1
  ..$ : num 3
  ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
 $ ..2:List of 1
  ..$ : num 4
  ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
 - attr(*, "where")=List of 4
  ..$ a  :<environment: R_GlobalEnv> 
  ..$ x  :<environment: 0x55959fb57f90> 
  ..$ ..1:<environment: 0x55959fb57f90> 
  ..$ ..2:<environment: 0x55959fb57f90> 
 - attr(*, "class")= chr [1:2] "Globals" "list"
> assert_identical_sets(names(globals), c("a", "x", "..1", "..2"))
> stopifnot(
+   globals[["..1"]] == 3,
+   globals[["..2"]] == 4
+ )
> 
> ## BUG FIX: Assert that '...' does not have to be specified at the end
> myGlobals <- function(x, ...) {
+   globalsByName(c("a", "...", "x"))
+ }
> globals <- myGlobals(x = 2, y = 3, z = 4)
> str(globals)
List of 3
 $ a  : num 0
 $ ...:List of 2
  ..$ y: num 3
  ..$ z: num 4
  ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
 $ x  : num 2
 - attr(*, "where")=List of 3
  ..$ a  :<environment: R_GlobalEnv> 
  ..$ ...:<environment: 0x5595a138e9b8> 
  ..$ x  :<environment: 0x5595a138e9b8> 
 - attr(*, "class")= chr [1:2] "Globals" "list"
> assert_identical_sets(names(globals), c("a", "x", "..."))
> assert_identical_sets(names(globals[["..."]]), c("y", "z"))
> 
> 
> ## Test with arguments defaulting to other arguments
> myGlobals <- function(x, y, z = y) {
+   globalsByName(c("a", "x", "y", "z"))
+ }
> globals <- myGlobals(x = 2, y = 3)
> assert_identical_sets(names(globals), c("a", "x", "y", "z"))
> stopifnot(globals$y == 3, identical(globals$z, globals$y))
> 
> globals <- myGlobals(x = 2, y = 3, z = 4)
> assert_identical_sets(names(globals), c("a", "x", "y", "z"))
> stopifnot(globals$y == 3, globals$z == 4)
> 
> myGlobals <- function(x, ...) {
+   globalsByName(c("a", "x", "..."))
+ }
> globals <- myGlobals(x = 2, y = 3)
> assert_identical_sets(names(globals), c("a", "x", "..."))
> assert_identical_sets(names(globals[["..."]]), c("y"))
> stopifnot(globals[["..."]]$y == 3)
> 
> globals <- myGlobals(x = 2, y = 3, z = 4)
> assert_identical_sets(names(globals), c("a", "x", "..."))
> assert_identical_sets(names(globals[["..."]]), c("y", "z"))
> stopifnot(globals[["..."]]$y == 3, globals[["..."]]$z == 4)
> 
> message("*** globalsByName() ... DONE")
*** globalsByName() ... DONE
> 
> source("incl/end.R")
> 
