
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "rematch2"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('rematch2')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("bind_re_match")
> ### * bind_re_match
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bind_re_match
> ### Title: Match results from a data frame column and attach results
> ### Aliases: bind_re_match bind_re_match_
> 
> ### ** Examples
> 
> match_cars <- tibble::rownames_to_column(mtcars)
> bind_re_match(match_cars, rowname, "^(?<make>\\w+) ?(?<model>.+)?$")
               rowname  mpg cyl  disp  hp drat    wt  qsec vs am gear carb
1            Mazda RX4 21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
2        Mazda RX4 Wag 21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
3           Datsun 710 22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
4       Hornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
5    Hornet Sportabout 18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
6              Valiant 18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
7           Duster 360 14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4
8            Merc 240D 24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
9             Merc 230 22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
10            Merc 280 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
11           Merc 280C 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4
12          Merc 450SE 16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3
13          Merc 450SL 17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3
14         Merc 450SLC 15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3
15  Cadillac Fleetwood 10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4
16 Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4
17   Chrysler Imperial 14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4
18            Fiat 128 32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
19         Honda Civic 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
20      Toyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
21       Toyota Corona 21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
22    Dodge Challenger 15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2
23         AMC Javelin 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2
24          Camaro Z28 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4
25    Pontiac Firebird 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2
26           Fiat X1-9 27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
27       Porsche 914-2 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
28        Lotus Europa 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
29      Ford Pantera L 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4
30        Ferrari Dino 19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6
31       Maserati Bora 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8
32          Volvo 142E 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2
       make       model
1     Mazda         RX4
2     Mazda     RX4 Wag
3    Datsun         710
4    Hornet     4 Drive
5    Hornet  Sportabout
6   Valiant            
7    Duster         360
8      Merc        240D
9      Merc         230
10     Merc         280
11     Merc        280C
12     Merc       450SE
13     Merc       450SL
14     Merc      450SLC
15 Cadillac   Fleetwood
16  Lincoln Continental
17 Chrysler    Imperial
18     Fiat         128
19    Honda       Civic
20   Toyota     Corolla
21   Toyota      Corona
22    Dodge  Challenger
23      AMC     Javelin
24   Camaro         Z28
25  Pontiac    Firebird
26     Fiat        X1-9
27  Porsche       914-2
28    Lotus      Europa
29     Ford   Pantera L
30  Ferrari        Dino
31 Maserati        Bora
32    Volvo        142E
> 
> 
> 
> 
> cleanEx()
> nameEx("re_exec")
> ### * re_exec
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: re_exec
> ### Title: Extract Data From First Regular Expression Match Into a Data
> ###   Frame
> ### Aliases: re_exec $.rematch_records $.rematch_allrecords
> 
> ### ** Examples
> 
> name_rex <- paste0(
+   "(?<first>[[:upper:]][[:lower:]]+) ",
+   "(?<last>[[:upper:]][[:lower:]]+)"
+ )
> notables <- c(
+   "  Ben Franklin and Jefferson Davis",
+   "\tMillard Fillmore"
+ )
> # Match first occurrence
> pos <- re_exec(notables, name_rex)
> pos
# A tibble: 2 × 4
  first            last             .text                           .match      
  <rmtch_rc>       <rmtch_rc>       <chr>                           <rmtch_rc>  
1 <named list [3]> <named list [3]> "  Ben Franklin and Jefferson … <named list>
2 <named list [3]> <named list [3]> "\tMillard Fillmore"            <named list>
> 
> # Custom $ to extract matches and positions
> pos$first$match
[1] "Ben"     "Millard"
> pos$first$start
[1] 3 2
> pos$first$end
[1] 5 8
> 
> 
> 
> cleanEx()
> nameEx("re_exec_all")
> ### * re_exec_all
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: re_exec_all
> ### Title: Extract Data From All Regular Expression Matches Into a Data
> ###   Frame
> ### Aliases: re_exec_all
> 
> ### ** Examples
> 
> name_rex <- paste0(
+   "(?<first>[[:upper:]][[:lower:]]+) ",
+   "(?<last>[[:upper:]][[:lower:]]+)"
+ )
> notables <- c(
+   "  Ben Franklin and Jefferson Davis",
+   "\tMillard Fillmore"
+ )
> # All occurrences
> allpos <- re_exec_all(notables, name_rex)
> allpos
# A tibble: 2 × 4
  first            last             .text                           .match      
  <rmtch_ll>       <rmtch_ll>       <chr>                           <rmtch_ll>  
1 <named list [3]> <named list [3]> "  Ben Franklin and Jefferson … <named list>
2 <named list [3]> <named list [3]> "\tMillard Fillmore"            <named list>
> 
> # Custom $ to extract matches and positions
> allpos$first$match
[[1]]
[1] "Ben"       "Jefferson"

[[2]]
[1] "Millard"

> allpos$first$start
[[1]]
[1]  3 20

[[2]]
[1] 2

> allpos$first$end
[[1]]
[1]  5 28

[[2]]
[1] 8

> 
> 
> 
> cleanEx()
> nameEx("re_match")
> ### * re_match
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: re_match
> ### Title: Extract Regular Expression Matches Into a Data Frame
> ### Aliases: re_match
> 
> ### ** Examples
> 
> dates <- c("2016-04-20", "1977-08-08", "not a date", "2016",
+   "76-03-02", "2012-06-30", "2015-01-21 19:58")
> isodate <- "([0-9]{4})-([0-1][0-9])-([0-3][0-9])"
> re_match(text = dates, pattern = isodate)
# A tibble: 7 × 5
  ``    ``    ``    .text            .match    
  <chr> <chr> <chr> <chr>            <chr>     
1 2016  04    20    2016-04-20       2016-04-20
2 1977  08    08    1977-08-08       1977-08-08
3 <NA>  <NA>  <NA>  not a date       <NA>      
4 <NA>  <NA>  <NA>  2016             <NA>      
5 <NA>  <NA>  <NA>  76-03-02         <NA>      
6 2012  06    30    2012-06-30       2012-06-30
7 2015  01    21    2015-01-21 19:58 2015-01-21
> 
> # The same with named groups
> isodaten <- "(?<year>[0-9]{4})-(?<month>[0-1][0-9])-(?<day>[0-3][0-9])"
> re_match(text = dates, pattern = isodaten)
# A tibble: 7 × 5
  year  month day   .text            .match    
  <chr> <chr> <chr> <chr>            <chr>     
1 2016  04    20    2016-04-20       2016-04-20
2 1977  08    08    1977-08-08       1977-08-08
3 <NA>  <NA>  <NA>  not a date       <NA>      
4 <NA>  <NA>  <NA>  2016             <NA>      
5 <NA>  <NA>  <NA>  76-03-02         <NA>      
6 2012  06    30    2012-06-30       2012-06-30
7 2015  01    21    2015-01-21 19:58 2015-01-21
> 
> 
> 
> cleanEx()
> nameEx("re_match_all")
> ### * re_match_all
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: re_match_all
> ### Title: Extract All Regular Expression Matches Into a Data Frame
> ### Aliases: re_match_all
> 
> ### ** Examples
> 
> name_rex <- paste0(
+   "(?<first>[[:upper:]][[:lower:]]+) ",
+   "(?<last>[[:upper:]][[:lower:]]+)"
+ )
> notables <- c(
+   "  Ben Franklin and Jefferson Davis",
+   "\tMillard Fillmore"
+ )
> re_match_all(notables, name_rex)
# A tibble: 2 × 4
  first     last      .text                                .match   
  <list>    <list>    <chr>                                <list>   
1 <chr [2]> <chr [2]> "  Ben Franklin and Jefferson Davis" <chr [2]>
2 <chr [1]> <chr [1]> "\tMillard Fillmore"                 <chr [1]>
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.38 0.023 0.403 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
