
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "phylolm"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('phylolm')
Loading required package: ape
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("OU1d.loglik")
> ### * OU1d.loglik
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: OU1d.loglik
> ### Title: Log likelihood of an one-dimensional Ornstein-Uhlenbeck model
> ### Aliases: OU1d.loglik
> 
> ### ** Examples
> 
> tr = rtree(100)
> alpha = 1
> sigma2 = 1
> sigma2_error = 0.5
> ancestral.state = 0
> optimal.value = 1
>   
> trait = rTrait(n = 1, tr, model = "OU", 
+               parameters = list(ancestral.state=ancestral.state, alpha=alpha,
+                                 sigma2=sigma2,sigma2_error=sigma2_error,
+                                 optimal.value=optimal.value))
> OU1d.loglik(trait=trait, phy=tr, model="OUfixedRoot", 
+             parameters=list(ancestral.state=ancestral.state, alpha=alpha,sigma2=sigma2,
+                             sigma2_error=sigma2_error,optimal.value=optimal.value))
[1] -115.176
> 
> 
> 
> cleanEx()
> nameEx("OUshifts")
> ### * OUshifts
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: OUshifts
> ### Title: Detections of shifts in the OU process along a phylogeny.
> ### Aliases: OUshifts
> 
> ### ** Examples
> 
> data(flowerSize)
> data(flowerTree)
> result <- OUshifts(flowerSize$log_transformed_size, flowerTree, 
+                    method = "mbic", nmax = 1)
> plot.OUshifts(result,show.tip.label=FALSE)
> 
> 
> 
> cleanEx()
> nameEx("phyloglm")
> ### * phyloglm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: phyloglm
> ### Title: Phylogenetic Generalized Linear Model
> ### Aliases: phyloglm
> 
> ### ** Examples
> 
> set.seed(123456)
> tre = rtree(50)
> x = rTrait(n=1,phy=tre)
> X = cbind(rep(1,50),x)
> y = rbinTrait(n=1,phy=tre, beta=c(-1,0.5), alpha=1 ,X=X)
> dat = data.frame(trait01 = y, predictor = x)
> fit = phyloglm(trait01~predictor,phy=tre,data=dat,boot=100)
> summary(fit)

Call:
phyloglm(formula = trait01 ~ predictor, data = dat, phy = tre, 
    boot = 100)
       AIC     logLik Pen.logLik 
     47.11     -20.55     -18.23 

Method: logistic_MPLE
Mean tip height: 3.275955
Parameter estimate(s):
alpha: 1.796432 
      bootstrap mean: 2.586022 (on log scale, then back transformed)
      so possible upward bias.
      bootstrap 95% CI: (0.08552315,16.39159)

Coefficients:
             Estimate    StdErr   z.value lowerbootCI upperbootCI  p.value   
(Intercept) -1.133224  0.418294 -2.709156   -1.834285     -0.1075 0.006745 **
predictor    0.451883  0.236235  1.912855    0.090158      0.9038 0.055767 . 
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Note: Wald-type p-values for coefficients, conditional on alpha=1.796432
      Parametric bootstrap results based on 100 fitted replicates

> coef(fit)
(Intercept)   predictor 
 -1.1332236   0.4518826 
> vcov(fit)
            (Intercept)  predictor
(Intercept)  0.17496982 0.01368795
predictor    0.01368795 0.05580681
> 
> 
> 
> cleanEx()
> nameEx("phyloglmstep")
> ### * phyloglmstep
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: phyloglmstep
> ### Title: Stepwise model selection for Phylogenetic Generalized Linear
> ###   Model
> ### Aliases: phyloglmstep
> 
> ### ** Examples
> 
> set.seed(123456)
> tre = rcoal(60)
> taxa = sort(tre$tip.label)
> b0=0; b1=1;
> x1 = rTrait(phy=tre,model="BM",
+            parameters=list(ancestral.state=0,sigma2=10))
> x2 = rTrait(phy=tre,model="BM",
+             parameters=list(ancestral.state=0,sigma2=10))
> x3 = rTrait(phy=tre,model="BM",
+             parameters=list(ancestral.state=0,sigma2=10))
> X = cbind(rep(1,60), x1)
> y = rbinTrait(n=1,phy=tre, beta=c(-1,0.5), alpha=1 ,X=X)
> dat = data.frame(trait=y[taxa],pred1=x1[taxa],pred2=x2[taxa],pred3=x3[taxa])
> fit = phyloglmstep(trait~pred1+pred2+pred3,data=dat,phy=tre,method="logistic_MPLE",direction="both")
Warning: glm.fit: algorithm did not converge
Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred
Warning in phyloglm(formula, data, phy, method, btol, log.alpha.bound, start.beta,  :
  The estimated coefficients in the absence of phylogenetic signal lead
  to some linear predictors beyond 'btol'. Increase btol?
  Starting from beta=0 other than intercept.
Warning in phyloglm(formula, data, phy, method, btol, log.alpha.bound, start.beta,  :
  phyloglm failed to converge.

----------
Starting model: trait ~ 1 + pred1 + pred2 + pred3
Direction: both
AIC(k=2): 18.3022809094149
Warning in phyloglm(create.formula(plm), data, phy, method, btol, log.alpha.bound,  :
  the boundary of the linear predictor has been reached during the optimization procedure.
You can increase this bound by increasing 'btol'.
	Proposed: trait ~ 1 + pred2 + pred3
	AIC(k=2): 15.5581166121866
Warning: glm.fit: algorithm did not converge
Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred
Warning in phyloglm(create.formula(plm), data, phy, method, btol, log.alpha.bound,  :
  The estimated coefficients in the absence of phylogenetic signal lead
  to some linear predictors beyond 'btol'. Increase btol?
  Starting from beta=0 other than intercept.
	Proposed: trait ~ 1 + pred1 + pred3
	AIC(k=2): 10.3622503416672
Warning: glm.fit: algorithm did not converge
Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred
Warning in phyloglm(create.formula(plm), data, phy, method, btol, log.alpha.bound,  :
  The estimated coefficients in the absence of phylogenetic signal lead
  to some linear predictors beyond 'btol'. Increase btol?
  Starting from beta=0 other than intercept.
	Proposed: trait ~ 1 + pred1 + pred2
	AIC(k=2): 10.3737067848011
----------
Step 1
Current model: trait ~ 1 + pred1 + pred3
AIC(k=2): 10.3622503416672
	Proposed: trait ~ 1 + pred3
	AIC(k=2): 13.6212547118843
Warning: glm.fit: algorithm did not converge
Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred
Warning in phyloglm(create.formula(plm), data, phy, method, btol, log.alpha.bound,  :
  The estimated coefficients in the absence of phylogenetic signal lead
  to some linear predictors beyond 'btol'. Increase btol?
  Starting from beta=0 other than intercept.
Warning in phyloglm(create.formula(plm), data, phy, method, btol, log.alpha.bound,  :
  phyloglm failed to converge.

	Proposed: trait ~ 1 + pred1 + pred2 + pred3
	AIC(k=2): 18.3022809094149
Warning: glm.fit: algorithm did not converge
Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred
Warning in phyloglm(create.formula(plm), data, phy, method, btol, log.alpha.bound,  :
  The estimated coefficients in the absence of phylogenetic signal lead
  to some linear predictors beyond 'btol'. Increase btol?
  Starting from beta=0 other than intercept.
Warning in phyloglm(create.formula(plm), data, phy, method, btol, log.alpha.bound,  :
  the estimate of 'alpha' (33.064844464665) reached the upper bound (33.0836351894731).
 This may simply reflect a flat likelihood at large alpha values,
 meaning that the phylogenetic correlation is estimated to be negligible.
	Proposed: trait ~ 1 + pred1
	AIC(k=2): 7.90572591676469
----------
Step 2
Current model: trait ~ 1 + pred1
AIC(k=2): 7.90572591676469
	Proposed: trait ~ 1
	AIC(k=2): 11.3907754373814
Warning: glm.fit: algorithm did not converge
Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred
Warning in phyloglm(create.formula(plm), data, phy, method, btol, log.alpha.bound,  :
  The estimated coefficients in the absence of phylogenetic signal lead
  to some linear predictors beyond 'btol'. Increase btol?
  Starting from beta=0 other than intercept.
	Proposed: trait ~ 1 + pred1 + pred2
	AIC(k=2): 10.3737067848011
Warning: glm.fit: algorithm did not converge
Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred
Warning in phyloglm(create.formula(plm), data, phy, method, btol, log.alpha.bound,  :
  The estimated coefficients in the absence of phylogenetic signal lead
  to some linear predictors beyond 'btol'. Increase btol?
  Starting from beta=0 other than intercept.
	Proposed: trait ~ 1 + pred1 + pred3
	AIC(k=2): 10.3622503416672
----------
Step 3
Current model: trait ~ 1 + pred1
AIC(k=2): 7.90572591676469
---END
> summary(fit)

Call:
phyloglm(formula = create.formula(plm), data = data, phy = phy, 
    method = method, btol = btol, log.alpha.bound = log.alpha.bound, 
    start.beta = start.beta, start.alpha = start.alpha, boot = boot, 
    full.matrix = full.matrix)
       AIC     logLik Pen.logLik 
    7.9057    -0.9529     0.2199 

Method: logistic_MPLE
Mean tip height: 1.650307
Parameter estimate(s):
alpha: 33.06484 

Coefficients:
            Estimate   StdErr z.value  p.value   
(Intercept) -3.87195  1.48910 -2.6002 0.009317 **
pred1        0.73438  0.27636  2.6573 0.007876 **
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Note: Wald-type p-values for coefficients, conditional on alpha=33.06484

> 
> 
> 
> cleanEx()
> nameEx("phylolm-methods")
> ### * phylolm-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: phylolm-methods
> ### Title: Methods for class 'phylolm'.
> ### Aliases: print.phylolm summary.phylolm print.summary.phylolm
> ###   residuals.phylolm predict.phylolm vcov.phylolm logLik.phylolm
> ###   print.logLik.phylolm AIC.phylolm AIC.logLik.phylolm
> ###   extractAIC.phylolm nobs.phylolm plot.phylolm
> 
> ### ** Examples
> 
> set.seed(321123)
> tre = rcoal(50)
> y = rTrait(n=1,phy=tre,model="BM")
> fit = phylolm(y~1,phy=tre,model="BM")
> summary(fit)

Call:
phylolm(formula = y ~ 1, phy = tre, model = "BM")

   AIC logLik 
-3.206  3.603 

Raw residuals:
   Min     1Q Median     3Q    Max 
-2.765 -2.530  1.016  2.050  2.450 

Mean tip height: 2.662381
Parameter estimate(s) using ML:
sigma2: 1.062328 

Coefficients:
            Estimate StdErr t.value p.value
(Intercept)   0.6822 1.0716  0.6366  0.5273

R-squared:     0	Adjusted R-squared:     0 
> vcov(fit)
            (Intercept)
(Intercept)    1.148264
> 
> 
> 
> cleanEx()
> nameEx("phylolm")
> ### * phylolm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: phylolm
> ### Title: Phylogenetic Linear Model
> ### Aliases: phylolm
> 
> ### ** Examples
> 
> set.seed(123456)
> tre = rcoal(60)
> taxa = sort(tre$tip.label)
> b0=0; b1=1;
> x <- rTrait(n=1, phy=tre,model="BM",
+             parameters=list(ancestral.state=0,sigma2=10))
> y <- b0 + b1*x + 
+      rTrait(n=1,phy=tre,model="lambda",parameters=list(
+               ancestral.state=0,sigma2=1,lambda=0.5))
> dat = data.frame(trait=y[taxa],pred=x[taxa])
> fit = phylolm(trait~pred,data=dat,phy=tre,model="lambda")
> summary(fit)

Call:
phylolm(formula = trait ~ pred, data = dat, phy = tre, model = "lambda")

   AIC logLik 
176.58 -84.29 

Raw residuals:
    Min      1Q  Median      3Q     Max 
-3.2863 -1.5592 -0.6652  0.3384  3.3698 

Mean tip height: 1.650307
Parameter estimate(s) using ML:
lambda : 0.7180128
sigma2: 1.350034 

Coefficients:
             Estimate    StdErr t.value p.value    
(Intercept) -0.695697  0.660271 -1.0537  0.2964    
pred         1.071519  0.086209 12.4294  <2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

R-squared: 0.727	Adjusted R-squared: 0.7223 

Note: p-values and R-squared are conditional on lambda=0.7180128.
> 
> # adding measurement errors and bootstrap
> z <- y + rnorm(60,0,1)
> dat = data.frame(trait=z[taxa],pred=x[taxa])
> fit = phylolm(trait~pred,data=dat,phy=tre,model="BM",measurement_error=TRUE,boot=100)
> summary(fit)

Call:
phylolm(formula = trait ~ pred, data = dat, phy = tre, model = "BM", 
    measurement_error = TRUE, boot = 100)

   AIC logLik 
 217.5 -104.8 

Raw residuals:
    Min      1Q  Median      3Q     Max 
-4.0481 -1.2653 -0.1976  0.8336  3.2326 

Mean tip height: 1.650307
Parameter estimate(s) using ML:
sigma2: 0.7083453 
sigma2_error: 1.520405 

Coefficients:
             Estimate    StdErr   t.value lowerbootCI upperbootCI p.value    
(Intercept) -0.909755  0.594383 -1.530587   -2.150155      0.3293  0.1313    
pred         1.150596  0.095309 12.072308    0.999605      1.3032  <2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

R-squared: 0.7153	Adjusted R-squared: 0.7104 

sigma2: 0.7083453
      bootstrap mean: 0.7071898 (on raw scale)
                      0.6971552 (on log scale, then back transformed)
      bootstrap 95% CI: (0.4940893,0.9311371)

sigma2_error: 1.520405
      bootstrap mean: 1.517925 (on raw scale)
                      1.496386 (on log scale, then back transformed)
      bootstrap 95% CI: (1.060522,1.99861)

Parametric bootstrap results based on 100 fitted replicates
> 
> 
> 
> 
> cleanEx()
> nameEx("phylostep")
> ### * phylostep
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: phylostep
> ### Title: Stepwise model selection for Phylogenetic Linear Model
> ### Aliases: phylostep
> 
> ### ** Examples
> 
> set.seed(123456)
> tre = rcoal(60)
> taxa = sort(tre$tip.label)
> b0=0; b1=1;
> x1 = rTrait(phy=tre,model="BM",
+            parameters=list(ancestral.state=0,sigma2=10))
> x2 = rTrait(phy=tre,model="BM",
+             parameters=list(ancestral.state=0,sigma2=10))
> x3 = rTrait(phy=tre,model="BM",
+             parameters=list(ancestral.state=0,sigma2=10))
> y <- b0 + b1*x1 + 
+      rTrait(n=1,phy=tre,model="BM",parameters=list(
+               ancestral.state=0,sigma2=1))
> dat = data.frame(trait=y[taxa],pred1=x1[taxa],pred2=x2[taxa],pred3=x3[taxa])
> fit = phylostep(trait~pred1+pred2+pred3,data=dat,phy=tre,model="BM",direction="both")
----------
Starting model: trait ~ 1 + pred1 + pred2 + pred3
Direction: both
AIC(k=2): 0.994525495492354
	Proposed: trait ~ 1 + pred2 + pred3
	AIC(k=2): 148.892306267804
	Proposed: trait ~ 1 + pred1 + pred3
	AIC(k=2): 0.802620245851188
	Proposed: trait ~ 1 + pred1 + pred2
	AIC(k=2): -0.6602142290063
----------
Step 1
Current model: trait ~ 1 + pred1 + pred2
AIC(k=2): -0.6602142290063
	Proposed: trait ~ 1 + pred2
	AIC(k=2): 146.994878905861
	Proposed: trait ~ 1 + pred1
	AIC(k=2): -0.845621012630858
	Proposed: trait ~ 1 + pred1 + pred2 + pred3
	AIC(k=2): 0.994525495492354
----------
Step 2
Current model: trait ~ 1 + pred1
AIC(k=2): -0.845621012630858
	Proposed: trait ~ 1
	AIC(k=2): 146.914900571509
	Proposed: trait ~ 1 + pred1 + pred2
	AIC(k=2): -0.6602142290063
	Proposed: trait ~ 1 + pred1 + pred3
	AIC(k=2): 0.802620245851188
----------
Step 3
Current model: trait ~ 1 + pred1
AIC(k=2): -0.845621012630858
---END
> summary(fit)

Call:
phylolm(formula = create.formula(plm), data = data, phy = phy, 
    model = model, lower.bound = lower.bound, upper.bound = upper.bound, 
    starting.value = starting.value)

    AIC  logLik 
-0.8456  3.4228 

Raw residuals:
    Min      1Q  Median      3Q     Max 
-2.0058  0.7759  1.0029  1.2490  2.0711 

Mean tip height: 1.650307
Parameter estimate(s) using ML:
sigma2: 0.8436687 

Coefficients:
            Estimate  StdErr t.value p.value    
(Intercept)  0.28171 0.59803  0.4711  0.6394    
pred1        0.98573 0.03879 25.4120  <2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

R-squared: 0.9176	Adjusted R-squared: 0.9162 
> 
> 
> 
> cleanEx()
> nameEx("pruningwise.branching.times")
> ### * pruningwise.branching.times
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pruningwise.branching.times
> ### Title: Calculates internal node ages in an ultrametric "pruningwise"
> ###   tree
> ### Aliases: pruningwise.branching.times
> 
> ### ** Examples
> 
> tre = reorder(rcoal(50),"pruningwise")
> pruningwise.branching.times(tre)
         51          52          53          54          55          56 
1.413083048 0.898908752 0.567390156 0.351869380 0.321741080 0.284764987 
         57          58          59          60          61          62 
0.225093303 0.178941102 0.150378688 0.126381329 0.122108103 0.110721092 
         63          64          65          66          67          68 
0.101423473 0.098107639 0.088367392 0.086671473 0.076962150 0.074844436 
         69          70          71          72          73          74 
0.074626491 0.067072358 0.062325630 0.057246357 0.041598401 0.039501616 
         75          76          77          78          79          80 
0.039303486 0.038977108 0.037364956 0.036586860 0.035005844 0.029570176 
         81          82          83          84          85          86 
0.028304628 0.027625327 0.026385277 0.023041185 0.021301280 0.019627402 
         87          88          89          90          91          92 
0.012984858 0.011224398 0.010196017 0.008413023 0.008233699 0.007122703 
         93          94          95          96          97          98 
0.006525048 0.005225299 0.002301089 0.001879766 0.001750446 0.001621273 
         99 
0.000616475 
> 
> 
> 
> cleanEx()
> nameEx("pruningwise.distFromRoot")
> ### * pruningwise.distFromRoot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pruningwise.distFromRoot
> ### Title: Calculates node distance from the root in an "pruningwise" tree
> ### Aliases: pruningwise.distFromRoot
> 
> ### ** Examples
> 
> tre = reorder(rtree(50),"pruningwise")
> pruningwise.distFromRoot(tre)
         1          2          3          4          5          6          7 
2.49900613 2.61135486 2.68610164 1.07228603 2.91005189 2.41380685 2.69072503 
         8          9         10         11         12         13         14 
2.90096936 2.59734469 2.58683189 2.64305647 3.24432816 4.68914104 4.65426802 
        15         16         17         18         19         20         21 
4.51524309 2.86266767 2.88196492 3.37926500 4.05582414 4.81538145 3.36621237 
        22         23         24         25         26         27         28 
2.67853800 2.90671389 3.33075388 3.74593358 3.81802455 2.79172334 2.83548289 
        29         30         31         32         33         34         35 
2.76728404 3.15552249 3.33601752 3.54621795 2.80286380 3.31781534 4.02170849 
        36         37         38         39         40         41         42 
4.31948665 3.16031666 3.85550749 3.06527017 3.83214268 3.99623997 1.97157333 
        43         44         45         46         47         48         49 
3.40581608 4.13596251 3.02284600 3.20450116 1.76185594 1.52080977 1.43302751 
        50         51         52         53         54         55         56 
1.25363848 0.00000000 0.92407447 1.52283544 2.25462795 0.01307758 0.72864364 
        57         58         59         60         61         62         63 
0.83182788 1.27811223 1.91821327 1.76246175 1.93590409 2.38979957 1.99111989 
        64         65         66         67         68         69         70 
2.56599209 2.60153267 3.53014787 4.12824029 1.33946970 2.02225778 2.62379900 
        71         72         73         74         75         76         77 
2.75156740 3.20413823 3.95083650 1.89662924 2.22540656 2.72584753 3.25547813 
        78         79         80         81         82         83         84 
3.53323407 1.17487896 1.95486385 2.36798806 2.43179654 2.70560340 2.03101063 
        85         86         87         88         89         90         91 
2.42236991 2.67532639 3.41640504 2.96905655 0.51641706 1.39347460 1.58266823 
        92         93         94         95         96         97         98 
2.34077128 3.28449610 1.49434773 2.42164982 2.70488232 3.29545548 0.73506235 
        99 
1.25185918 
> 
> 
> 
> cleanEx()
> nameEx("rTrait")
> ### * rTrait
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rTrait
> ### Title: Continuous trait simulation
> ### Aliases: rTrait
> 
> ### ** Examples
> 
> tre = rtree(50)
> y = rTrait(n=1, phy=tre, model="OU",
+            parameters=list(optimal.value=2,sigma2=1,alpha=0.1))
> 
> 
> 
> cleanEx()
> nameEx("rbinTrait")
> ### * rbinTrait
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rbinTrait
> ### Title: Binary trait simulation
> ### Aliases: rbinTrait
> 
> ### ** Examples
> 
> tre = rtree(50)
> x = rTrait(n=1,phy=tre)
> X = cbind(rep(1,50),x)
> y = rbinTrait(n=1, phy=tre, beta=c(-1,0.5), alpha=1, X=X)
> 
> 
> 
> cleanEx()
> nameEx("stepwise.test.tree")
> ### * stepwise.test.tree
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stepwise.test.tree
> ### Title: Fits a population tree to data from quartet concordance factors
> ### Aliases: stepwise.test.tree
> 
> ### ** Examples
> 
> data(quartetCF)
> data(guidetree)
> 
> 
> 
> cleanEx()
> nameEx("test.one.species.tree")
> ### * test.one.species.tree
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: test.one.species.tree
> ### Title: Tests the fit of a population tree to quartet concordance factor
> ###   data
> ### Aliases: test.one.species.tree
> 
> ### ** Examples
> 
> data(quartetCF)
> data(guidetree)
> 
> 
> 
> cleanEx()
> nameEx("three.point.compute")
> ### * three.point.compute
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: three.point.compute
> ### Title: Computations with a (generalized) three-point structured tree
> ### Aliases: three.point.compute
> 
> ### ** Examples
> 
> tre1 = rtree(500)
> tre2 = transf.branch.lengths(phy=tre1, model="OUrandomRoot",
+                              parameters = list(alpha = 0.5))
> Q = rTrait(n=2,tre1)
> y = rTrait(n=1,tre1)
> P = cbind(1,y)
> three.point.compute(tre2$tree,P,Q,tre2$diagWeight)
$vec11
[1] 84.5338

$P1
[1] 84.53380 79.23046

$PP
         [,1]       [,2]
[1,] 84.53380   79.23046
[2,] 79.23046 1118.54137

$Q1
[1] -39.74805  98.37531

$QQ
           [,1]       [,2]
[1,] 1090.93152  -15.93643
[2,]  -15.93643 1040.45135

$QP
          [,1]     [,2]
[1,] -39.74805 47.69228
[2,]  98.37531 78.39587

$logd
[1] -210.5371

> 
> 
> 
> cleanEx()
> nameEx("transf.branch.lengths")
> ### * transf.branch.lengths
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: transf.branch.lengths
> ### Title: Creates a tree with branch lengths to represent the 3-point
> ###   structure of a covariance matrix
> ### Aliases: transf.branch.lengths
> 
> ### ** Examples
> 
> set.seed(123456)
> tre1 = rcoal(10)
> tre2 = transf.branch.lengths(phy=tre1, model="OUrandomRoot",
+                              parameters = list(alpha=1))
> par(mfrow = c(2,1))
> plot(tre1)
> plot(tre2$tree,root.edge=TRUE)
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  3.64 2.397 3.253 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
