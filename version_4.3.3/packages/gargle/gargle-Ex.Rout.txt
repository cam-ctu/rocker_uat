
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "gargle"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('gargle')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("cred_funs")
> ### * cred_funs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cred_funs
> ### Title: Credential function registry
> ### Aliases: cred_funs cred_funs_list cred_funs_add cred_funs_set
> ###   cred_funs_clear cred_funs_list_default cred_funs_set_default
> ###   local_cred_funs with_cred_funs
> 
> ### ** Examples
> 
> names(cred_funs_list())
[1] "credentials_byo_oauth2"       "credentials_service_account" 
[3] "credentials_external_account" "credentials_app_default"     
[5] "credentials_gce"              "credentials_user_oauth2"     
> 
> creds_one <- function(scopes, ...) {}
> 
> cred_funs_add(one = creds_one)
> cred_funs_add(two = creds_one, three = creds_one)
> names(cred_funs_list())
[1] "three"                        "two"                         
[3] "one"                          "credentials_byo_oauth2"      
[5] "credentials_service_account"  "credentials_external_account"
[7] "credentials_app_default"      "credentials_gce"             
[9] "credentials_user_oauth2"     
> 
> cred_funs_add(two = NULL)
> names(cred_funs_list())
[1] "three"                        "one"                         
[3] "credentials_byo_oauth2"       "credentials_service_account" 
[5] "credentials_external_account" "credentials_app_default"     
[7] "credentials_gce"              "credentials_user_oauth2"     
> 
> # restore the default list
> cred_funs_set_default()
> 
> # remove one specific credential fetcher
> cred_funs_add(credentials_gce = NULL)
> names(cred_funs_list())
[1] "credentials_byo_oauth2"       "credentials_service_account" 
[3] "credentials_external_account" "credentials_app_default"     
[5] "credentials_user_oauth2"     
> 
> # force the use of one specific credential fetcher
> cred_funs_set(list(credentials_user_oauth2 = credentials_user_oauth2))
> names(cred_funs_list())
[1] "credentials_user_oauth2"
> 
> # restore the default list
> cred_funs_set_default()
> 
> # run some code with a temporary change to the registry
> # creds_one ONLY
> with_cred_funs(
+   list(one = creds_one),
+   names(cred_funs_list())
+ )
[1] "one"
> # add creds_one to the list
> with_cred_funs(
+   list(one = creds_one),
+   names(cred_funs_list()),
+   action = "modify"
+ )
[1] "one"                          "credentials_byo_oauth2"      
[3] "credentials_service_account"  "credentials_external_account"
[5] "credentials_app_default"      "credentials_gce"             
[7] "credentials_user_oauth2"     
> # remove credentials_gce
> with_cred_funs(
+   list(credentials_gce = NULL),
+   names(cred_funs_list()),
+   action = "modify"
+ )
[1] "credentials_byo_oauth2"       "credentials_service_account" 
[3] "credentials_external_account" "credentials_app_default"     
[5] "credentials_user_oauth2"     
> 
> 
> 
> cleanEx()
> nameEx("credentials_app_default")
> ### * credentials_app_default
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: credentials_app_default
> ### Title: Load Application Default Credentials
> ### Aliases: credentials_app_default
> 
> ### ** Examples
> 
> ## Not run: 
> ##D credentials_app_default()
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("credentials_byo_oauth2")
> ### * credentials_byo_oauth2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: credentials_byo_oauth2
> ### Title: Load a user-provided token
> ### Aliases: credentials_byo_oauth2
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # assume `my_token` is a Token2.0 object returned by a function such as
> ##D # credentials_user_oauth2()
> ##D credentials_byo_oauth2(token = my_token)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("credentials_external_account")
> ### * credentials_external_account
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: credentials_external_account
> ### Title: Get a token for an external account
> ### Aliases: credentials_external_account
> 
> ### ** Examples
> 
> ## Not run: 
> ##D credentials_external_account()
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("credentials_gce")
> ### * credentials_gce
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: credentials_gce
> ### Title: Get a token from the Google metadata server
> ### Aliases: credentials_gce
> 
> ### ** Examples
> 
> ## Not run: 
> ##D credentials_gce()
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("credentials_service_account")
> ### * credentials_service_account
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: credentials_service_account
> ### Title: Load a service account token
> ### Aliases: credentials_service_account
> 
> ### ** Examples
> 
> ## Not run: 
> ##D token <- credentials_service_account(
> ##D   scopes = "https://www.googleapis.com/auth/userinfo.email",
> ##D   path = "/path/to/your/service-account.json"
> ##D )
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("credentials_user_oauth2")
> ### * credentials_user_oauth2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: credentials_user_oauth2
> ### Title: Get an OAuth token for a user
> ### Aliases: credentials_user_oauth2
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Drive scope, built-in gargle demo client
> ##D scopes <- "https://www.googleapis.com/auth/drive"
> ##D credentials_user_oauth2(scopes, client = gargle_client())
> ##D 
> ##D # bring your own client
> ##D client <- gargle_oauth_client_from_json(
> ##D   path = "/path/to/the/JSON/you/downloaded/from/gcp/console.json",
> ##D   name = "my-nifty-oauth-client"
> ##D )
> ##D credentials_user_oauth2(scopes, client)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("field_mask")
> ### * field_mask
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: field_mask
> ### Title: Generate a field mask
> ### Aliases: field_mask
> 
> ### ** Examples
> 
> x <- list(sheetId = 1234, title = "my_favorite_worksheet")
> field_mask(x)
[1] "sheetId,title"
> 
> x <- list(
+   userEnteredFormat = list(
+     backgroundColor = list(
+       red = 159 / 255, green = 183 / 255, blue = 196 / 255
+     )
+   )
+ )
> field_mask(x)
[1] "userEnteredFormat.backgroundColor(red,green,blue)"
> 
> x <- list(
+   sheetId = 1234,
+   gridProperties = list(rowCount = 5, columnCount = 3)
+ )
> field_mask(x)
[1] "sheetId,gridProperties(rowCount,columnCount)"
> 
> 
> 
> cleanEx()
> nameEx("gargle2.0_token")
> ### * gargle2.0_token
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gargle2.0_token
> ### Title: Generate a gargle token
> ### Aliases: gargle2.0_token
> 
> ### ** Examples
> 
> ## Not run: 
> ##D gargle2.0_token()
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("gargle_api_key")
> ### * gargle_api_key
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gargle_api_key
> ### Title: API key for demonstration purposes
> ### Aliases: gargle_api_key
> ### Keywords: internal
> 
> ### ** Examples
> 
> gargle_api_key()
> 
> 
> 
> cleanEx()
> nameEx("gargle_client")
> ### * gargle_client
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gargle_client
> ### Title: OAuth client for demonstration purposes
> ### Aliases: gargle_client
> ### Keywords: internal
> 
> ### ** Examples
> 
> ## Not run: 
> ##D gargle_client()
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("gargle_oauth_client_from_json")
> ### * gargle_oauth_client_from_json
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gargle_oauth_client_from_json
> ### Title: Create an OAuth client for Google
> ### Aliases: gargle_oauth_client_from_json gargle_oauth_client
> 
> ### ** Examples
> 
> ## Not run: 
> ##D gargle_oauth_client_from_json(
> ##D   path = "/path/to/the/JSON/you/downloaded/from/gcp/console.json",
> ##D   name = "my-nifty-oauth-client"
> ##D )
> ## End(Not run)
> 
> gargle_oauth_client(
+   id = "some_long_id",
+   secret = "ssshhhhh_its_a_secret",
+   name = "my-nifty-oauth-client"
+ )
<gargle_oauth_client>
name: my-nifty-oauth-client
id: some_long_id
secret: <REDACTED>
type: installed
> 
> 
> 
> cleanEx()
> nameEx("gargle_oauth_sitrep")
> ### * gargle_oauth_sitrep
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gargle_oauth_sitrep
> ### Title: OAuth token situation report
> ### Aliases: gargle_oauth_sitrep
> 
> ### ** Examples
> 
> gargle_oauth_sitrep()
â„¹ Reporting the default cache location.
No gargle OAuth cache found at '~/.cache/gargle'.
> 
> 
> 
> cleanEx()
> nameEx("gargle_options")
> ### * gargle_options
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gargle_options
> ### Title: Options consulted by gargle
> ### Aliases: gargle_options gargle_oauth_email gargle_oob_default
> ###   gargle_oauth_cache gargle_oauth_client_type gargle_verbosity
> ###   local_gargle_verbosity with_gargle_verbosity
> 
> ### ** Examples
> 
> gargle_oauth_email()
NULL
> gargle_oob_default()
[1] FALSE
> gargle_oauth_cache()
[1] NA
> gargle_oauth_client_type()
[1] "installed"
> gargle_verbosity()
[1] "info"
> 
> 
> 
> cleanEx()
> nameEx("gargle_secret")
> ### * gargle_secret
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gargle_secret
> ### Title: Encrypt/decrypt JSON or an R object
> ### Aliases: gargle_secret secret_encrypt_json secret_decrypt_json
> ###   secret_make_key secret_write_rds secret_read_rds secret_has_key
> 
> ### ** Examples
> 
> ## Don't show: 
> if (secret_has_key("GARGLE_KEY")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # gargle ships with JSON for a fake service account
+ # here we put the encrypted JSON into a new file
+ tmp <- tempfile()
+ secret_encrypt_json(
+   fs::path_package("gargle", "extdata", "fake_service_account.json"),
+   tmp,
+   key = "GARGLE_KEY"
+ )
+ 
+ # complete the round trip by providing the decrypted JSON to a credential
+ # function
+ credentials_service_account(
+  scopes = "https://www.googleapis.com/auth/userinfo.email",
+  path = secret_decrypt_json(
+    fs::path_package("gargle", "secret", "gargle-testing.json"),
+    key = "GARGLE_KEY"
+  )
+ )
+ 
+ file.remove(tmp)
+ 
+ # make an artificial Gargle2.0 token
+ fauxen <- gargle2.0_token(
+   email = "jane@example.org",
+   client = gargle_oauth_client(
+     id = "CLIENT_ID", secret = "SECRET", name = "CLIENT"
+   ),
+   credentials = list(token = "fauxen"),
+   cache = FALSE
+ )
+ fauxen
+ 
+ # store the fake token in an encrypted file
+ tmp2 <- tempfile()
+ secret_write_rds(fauxen, path = tmp2, key = "GARGLE_KEY")
+ 
+ # complete the round trip by providing the decrypted token to the "BYO token"
+ # credential function
+ rt_fauxen <- credentials_byo_oauth2(
+   token  = secret_read_rds(tmp2, key = "GARGLE_KEY")
+ )
+ rt_fauxen
+ 
+ file.remove(tmp2)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("gce_instance_service_accounts")
> ### * gce_instance_service_accounts
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gce_instance_service_accounts
> ### Title: List all service accounts available on this GCE instance
> ### Aliases: gce_instance_service_accounts
> 
> ### ** Examples
> 
> ## Don't show: 
> if (gargle:::is_gce()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ credentials_gce()
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("init_AuthState")
> ### * init_AuthState
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: init_AuthState
> ### Title: Create an AuthState
> ### Aliases: init_AuthState
> 
> ### ** Examples
> 
> my_client <- gargle_oauth_client(
+   id = "some_long_client_id",
+   secret = "ssshhhhh_its_a_secret",
+   name = "my-nifty-oauth-client"
+ )
> 
> init_AuthState(
+   package = "my_package",
+   client = my_client,
+   api_key = "api_key_api_key_api_key",
+ )

â”€â”€ <AuthState (via gargle)> â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    package: my_package
     client: my-nifty-oauth-client
    api_key: api_key...
auth_active: TRUE
credentials: <NULL>
> 
> 
> 
> cleanEx()
> nameEx("request_develop")
> ### * request_develop
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: request_develop
> ### Title: Build a Google API request
> ### Aliases: request_develop request_build
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ## Example with a prepared endpoint
> ##D ept <- googledrive::drive_endpoints("drive.files.update")[[1]]
> ##D req <- request_develop(
> ##D   ept,
> ##D   params = list(
> ##D     fileId = "abc",
> ##D     addParents = "123",
> ##D     description = "Exciting File"
> ##D   )
> ##D )
> ##D req
> ##D 
> ##D req <- request_build(
> ##D   method = req$method,
> ##D   path = req$path,
> ##D   params = req$params,
> ##D   body = req$body,
> ##D   token = "PRETEND_I_AM_A_TOKEN"
> ##D )
> ##D req
> ##D 
> ##D ## Example with no previous knowledge of the endpoint
> ##D ## List a file's comments
> ##D ## https://developers.google.com/drive/v3/reference/comments/list
> ##D req <- request_build(
> ##D   method = "GET",
> ##D   path = "drive/v3/files/{fileId}/comments",
> ##D   params = list(
> ##D     fileId = "your-file-id-goes-here",
> ##D     fields = "*"
> ##D   ),
> ##D   token = "PRETEND_I_AM_A_TOKEN"
> ##D )
> ##D req
> ##D 
> ##D # Example with no previous knowledge of the endpoint and no token
> ##D # use an API key for which the Places API is enabled!
> ##D API_KEY <- "1234567890"
> ##D 
> ##D # get restaurants close to a location in Vancouver, BC
> ##D req <- request_build(
> ##D   method = "GET",
> ##D   path = "maps/api/place/nearbysearch/json",
> ##D   params = list(
> ##D     location = "49.268682,-123.167117",
> ##D     radius = 100,
> ##D     type = "restaurant"
> ##D   ),
> ##D   key = API_KEY,
> ##D   base_url = "https://maps.googleapis.com"
> ##D )
> ##D resp <- request_make(req)
> ##D out <- response_process(resp)
> ##D vapply(out$results, function(x) x$name, character(1))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("request_make")
> ### * request_make
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: request_make
> ### Title: Make a Google API request
> ### Aliases: request_make
> 
> ### ** Examples
> 
> ## Not run: 
> ##D req <- gargle::request_build(
> ##D   method = "GET",
> ##D   path = "path/to/the/resource",
> ##D   token = "PRETEND_I_AM_TOKEN"
> ##D )
> ##D gargle::request_make(req)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("request_retry")
> ### * request_retry
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: request_retry
> ### Title: Make a Google API request, repeatedly
> ### Aliases: request_retry
> 
> ### ** Examples
> 
> ## Not run: 
> ##D req <- gargle::request_build(
> ##D   method = "GET",
> ##D   path = "path/to/the/resource",
> ##D   token = "PRETEND_I_AM_TOKEN"
> ##D )
> ##D gargle::request_retry(req)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("response_process")
> ### * response_process
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: response_process
> ### Title: Process a Google API response
> ### Aliases: response_process response_as_json gargle_error_message
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # get an OAuth2 token with 'userinfo.email' scope
> ##D token <- token_fetch(scopes = "https://www.googleapis.com/auth/userinfo.email")
> ##D 
> ##D # see the email associated with this token
> ##D req <- gargle::request_build(
> ##D   method = "GET",
> ##D   path = "v1/userinfo",
> ##D   token = token,
> ##D   base_url = "https://openidconnect.googleapis.com"
> ##D )
> ##D resp <- gargle::request_make(req)
> ##D response_process(resp)
> ##D 
> ##D # make a bad request (this token has incorrect scope)
> ##D req <- gargle::request_build(
> ##D   method = "GET",
> ##D   path = "fitness/v1/users/{userId}/dataSources",
> ##D   token = token,
> ##D   params = list(userId = 12345)
> ##D )
> ##D resp <- gargle::request_make(req)
> ##D response_process(resp)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("token-info")
> ### * token-info
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: token-info
> ### Title: Get info from a token
> ### Aliases: token-info token_userinfo token_email token_tokeninfo
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # with service account token
> ##D t <- token_fetch(
> ##D   scopes = "https://www.googleapis.com/auth/drive",
> ##D   path   = "path/to/service/account/token/blah-blah-blah.json"
> ##D )
> ##D # or with an OAuth token
> ##D t <- token_fetch(
> ##D   scopes = "https://www.googleapis.com/auth/drive",
> ##D   email  = "janedoe@example.com"
> ##D )
> ##D token_userinfo(t)
> ##D token_email(t)
> ##D tokens_tokeninfo(t)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("token_fetch")
> ### * token_fetch
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: token_fetch
> ### Title: Fetch a token for the given scopes
> ### Aliases: token_fetch
> 
> ### ** Examples
> 
> ## Not run: 
> ##D token_fetch(scopes = "https://www.googleapis.com/auth/userinfo.email")
> ## End(Not run)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.47 0.023 0.512 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
