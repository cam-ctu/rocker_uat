
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("testthat")
> library("DBI")
> 
> test_check("duckdb")
Loading required package: duckdb
[ FAIL 2 | WARN 0 | SKIP 47 | PASS 595 ]

══ Skipped tests (47) ══════════════════════════════════════════════════════════
• empty test (1): 'test-factor.R:82:1'
• interactive() is not TRUE (2): 'test-connect.R:5:3', 'test-connect.R:15:3'
• On CRAN (19): 'test-arrow_stream.R:1:1', 'test-arrow.R:18:1',
  'test-backend-dbplyr__duckdb_connection.R:229:3',
  'test-backend-dbplyr__duckdb_connection.R:261:3',
  'test-backend-dbplyr__duckdb_connection.R:304:3',
  'test-backend-dbplyr__duckdb_connection.R:329:3',
  'test-backend-dbplyr__duckdb_connection.R:375:3',
  'test-backend-dbplyr__duckdb_connection.R:405:3',
  'test-backend-dbplyr__duckdb_connection.R:430:3',
  'test-backend-dbplyr__duckdb_connection.R:446:3', 'test-DBItest.R:1:1',
  'test-explain.R:1:1', 'test-extension_path.R:1:1', 'test-fetch_arrow.R:1:1',
  'test-multi_statement.R:1:1', 'test-register_arrow.R:1:1',
  'test-struct.R:52:3', 'test-tbl__duckdb_connection.R:1:1',
  'test-types.R:11:3'
• TEST_RE2 is not TRUE (25): 'test-connect.R:59:3', 'test-connect.R:79:3',
  'test-connect.R:99:3', 'test-connect.R:119:3', 'test-connect.R:144:3',
  'test-connect.R:167:3', 'test-dbwritetable.R:2:3', 'test-factor.R:2:3',
  'test-factor.R:25:3', 'test-factor.R:40:3', 'test-factor.R:69:3',
  'test-read.R:2:3', 'test-readonly.R:2:3', 'test-register.R:41:3',
  'test-rel_api.R:8217:3', 'test-rel_api.R:11259:3', 'test-shutdown.R:2:3',
  'test-struct.R:113:3', 'test-struct.R:133:3', 'test-timestamp.R:2:3',
  'test-viewer.R:2:3', 'test-viewer.R:17:3', 'test-viewer.R:37:3',
  'test-viewer.R:60:3', 'test-viewer.R:80:3'

══ Failed tests ════════════════════════════════════════════════════════════════
── Error ('test-adbc.R:1:1'): (code run outside of `test_that()`) ──────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::test_check("duckdb")
  2. │ └─testthat::test_dir(...)
  3. │   └─testthat:::test_files(...)
  4. │     └─testthat:::test_files_serial(...)
  5. │       ├─testthat::with_reporter(...)
  6. │       │ └─base::tryCatch(...)
  7. │       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  8. │       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  9. │       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 10. │       └─base::lapply(...)
 11. │         └─testthat (local) FUN(X[[i]], ...)
 12. │           └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 13. │             └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 14. │               ├─base::tryCatch(...)
 15. │               │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 16. │               │   ├─base (local) tryCatchOne(...)
 17. │               │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 18. │               │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 19. │               │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 20. │               │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 21. │               ├─base::withCallingHandlers(...)
 22. │               └─base::eval(code, test_env)
 23. │                 └─base::eval(code, test_env)
 24. │                   └─testthat::test_that(...) at test-adbc.R:1:1
 25. │                     └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 26. │                       └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 27. │                         └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 28. └─base::loadNamespace(x)
 29.   ├─base::namespaceImportFrom(...)
 30.   │ └─base::asNamespace(ns)
 31.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 32.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 33.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 34.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 35.           └─base::get(genname, envir = envir)
── Error ('test-ambiguous_prepare.R:1:1'): (code run outside of `test_that()`) ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::test_check("duckdb")
  2. │ └─testthat::test_dir(...)
  3. │   └─testthat:::test_files(...)
  4. │     └─testthat:::test_files_serial(...)
  5. │       ├─testthat::with_reporter(...)
  6. │       │ └─base::tryCatch(...)
  7. │       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  8. │       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  9. │       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 10. │       └─base::lapply(...)
 11. │         └─testthat (local) FUN(X[[i]], ...)
 12. │           └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 13. │             └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 14. │               ├─base::tryCatch(...)
 15. │               │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 16. │               │   ├─base (local) tryCatchOne(...)
 17. │               │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 18. │               │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 19. │               │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 20. │               │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 21. │               ├─base::withCallingHandlers(...)
 22. │               └─base::eval(code, test_env)
 23. │                 └─base::eval(code, test_env)
 24. │                   └─testthat::test_that(...) at test-ambiguous_prepare.R:1:1
 25. │                     └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 26. │                       └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 27. │                         └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 28. └─base::loadNamespace(x)
 29.   ├─base::namespaceImportFrom(...)
 30.   │ └─base::asNamespace(ns)
 31.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 32.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 33.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 34.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 35.           └─base::get(genname, envir = envir)

[ FAIL 2 | WARN 0 | SKIP 47 | PASS 595 ]
Error: Test failures
In addition: Warning messages:
1: Connection is garbage-collected, use dbDisconnect() to avoid this. 
2: Connection is garbage-collected, use dbDisconnect() to avoid this. 
Execution halted
Warning message:
Database is garbage-collected, use dbConnect(duckdb()) with dbDisconnect(), or duckdb::duckdb_shutdown(drv) to avoid this. 
