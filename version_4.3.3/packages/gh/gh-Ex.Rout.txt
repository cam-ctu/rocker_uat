
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "gh"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('gh')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("gh")
> ### * gh
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gh
> ### Title: Query the GitHub API
> ### Aliases: gh
> 
> ### ** Examples
> 
> ## Don't show: 
> if (identical(Sys.getenv("IN_PKGDOWN"), "true")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Repositories of a user, these are equivalent
+ gh("/users/hadley/repos", .limit = 2)
+ gh("/users/{username}/repos", username = "hadley", .limit = 2)
+ 
+ ## Starred repositories of a user
+ gh("/users/hadley/starred", .limit = 2)
+ gh("/users/{username}/starred", username = "hadley", .limit = 2)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> ## Don't show: 
> if (FALSE) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Create a repository, needs a token in GITHUB_PAT (or GITHUB_TOKEN)
+ ## environment variable
+ gh("POST /user/repos", name = "foobar")
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> ## Don't show: 
> if (identical(Sys.getenv("IN_PKGDOWN"), "true")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Issues of a repository
+ gh("/repos/hadley/dplyr/issues")
+ gh("/repos/{owner}/{repo}/issues", owner = "hadley", repo = "dplyr")
+ 
+ ## Automatic pagination
+ users <- gh("/users", .limit = 50)
+ length(users)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> ## Don't show: 
> if (FALSE) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Access developer preview of Licenses API (in preview as of 2015-09-24)
+ gh("/licenses") # used to error code 415
+ gh("/licenses", .accept = "application/vnd.github.drax-preview+json")
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> ## Don't show: 
> if (FALSE) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Access Github Enterprise API
+ ## Use GITHUB_API_URL environment variable to change the default.
+ gh("/user/repos", type = "public", .api_url = "https://github.foobar.edu/api/v3")
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> ## Don't show: 
> if (FALSE) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Use I() to force body part to be sent as an array, even if length 1
+ ## This works whether assignees has length 1 or > 1
+ assignees <- "gh_user"
+ assignees <- c("gh_user1", "gh_user2")
+ gh("PATCH /repos/OWNER/REPO/issues/1", assignees = I(assignees))
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> ## Don't show: 
> if (FALSE) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## There are two ways to send JSON data. One is that you supply one or
+ ## more objects that will be converted to JSON automatically via
+ ## jsonlite::toJSON(). In this case sometimes you need to use
+ ## jsonlite::unbox() because fromJSON() creates lists from scalar vectors
+ ## by default. The Content-Type header is automatically added in this
+ ## case. For example this request turns on GitHub Pages, using this
+ ## API: https://docs.github.com/v3/repos/pages/#enable-a-pages-site
+ 
+ gh::gh(
+   "POST /repos/{owner}/{repo}/pages",
+   owner = "r-lib",
+   repo = "gh",
+   source = list(
+     branch = jsonlite::unbox("gh-pages"),
+     path = jsonlite::unbox("/")
+   ),
+   .send_headers = c(Accept = "application/vnd.github.switcheroo-preview+json")
+ )
+ 
+ ## The second way is to handle the JSON encoding manually, and supply it
+ ## as a raw vector in an unnamed argument, and also a Content-Type header:
+ 
+ body <- '{ "source": { "branch": "gh-pages", "path": "/" } }'
+ gh::gh(
+   "POST /repos/{owner}/{repo}/pages",
+   owner = "r-lib",
+   repo = "gh",
+   charToRaw(body),
+   .send_headers = c(
+     Accept = "application/vnd.github.switcheroo-preview+json",
+     "Content-Type" = "application/json"
+   )
+ )
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> ## Don't show: 
> if (FALSE) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Pass along a query to the search/code endpoint via the ... argument
+ x <- gh::gh(
+             "/search/code",
+             q = "installation repo:r-lib/gh",
+             .send_headers = c("X-GitHub-Api-Version" = "2022-11-28")
+             )
+  str(x, list.len = 3, give.attr = FALSE)
+ 
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("gh_gql")
> ### * gh_gql
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gh_gql
> ### Title: A simple interface for the GitHub GraphQL API v4.
> ### Aliases: gh_gql
> 
> ### ** Examples
> 
> ## Don't show: 
> if (FALSE) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ gh_gql("query { viewer { login }}")
+ 
+ # Get rate limit
+ ratelimit_query <- "query {
+   viewer {
+     login
+   }
+   rateLimit {
+     limit
+     cost
+     remaining
+     resetAt
+   }
+ }"
+ 
+ gh_gql(ratelimit_query)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("gh_next")
> ### * gh_next
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gh_next
> ### Title: Get the next, previous, first or last page of results
> ### Aliases: gh_next gh_prev gh_first gh_last
> 
> ### ** Examples
> 
> ## Don't show: 
> if (identical(Sys.getenv("IN_PKGDOWN"), "true")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ x <- gh("/users")
+ vapply(x, "[[", character(1), "login")
+ x2 <- gh_next(x)
+ vapply(x2, "[[", character(1), "login")
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("gh_token")
> ### * gh_token
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gh_token
> ### Title: Return the local user's GitHub Personal Access Token (PAT)
> ### Aliases: gh_token
> 
> ### ** Examples
> 
> ## Not run: 
> ##D gh_token()
> ##D 
> ##D format(gh_token())
> ##D 
> ##D str(gh_token())
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("gh_tree_remote")
> ### * gh_tree_remote
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gh_tree_remote
> ### Title: Find the GitHub remote associated with a path
> ### Aliases: gh_tree_remote
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ gh_tree_remote()
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("gh_whoami")
> ### * gh_whoami
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gh_whoami
> ### Title: Info on current GitHub user and token
> ### Aliases: gh_whoami
> 
> ### ** Examples
> 
> ## Don't show: 
> if (identical(Sys.getenv("IN_PKGDOWN"), "true")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ gh_whoami()
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> ## Don't show: 
> if (FALSE) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## explicit token + use with GitHub Enterprise
+ gh_whoami(
+   .token = "8c70fd8419398999c9ac5bacf3192882193cadf2",
+   .api_url = "https://github.foobar.edu/api/v3"
+ )
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.179 0.013 0.192 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
