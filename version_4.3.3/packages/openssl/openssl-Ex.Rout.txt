
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "openssl"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('openssl')
Linking to: OpenSSL 3.0.2 15 Mar 2022
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("aes_cbc")
> ### * aes_cbc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: aes_cbc
> ### Title: Symmetric AES encryption
> ### Aliases: aes_cbc aes_ctr_encrypt aes_ctr_decrypt aes_cbc_encrypt
> ###   aes_cbc_decrypt aes_gcm_encrypt aes_gcm_decrypt aes_keygen
> 
> ### ** Examples
> 
> # aes-256 requires 32 byte key
> passphrase <- charToRaw("This is super secret")
> key <- sha256(passphrase)
> 
> # symmetric encryption uses same key for decryption
> x <- serialize(iris, NULL)
> y <- aes_cbc_encrypt(x, key = key)
> x2 <- aes_cbc_decrypt(y, key = key)
> stopifnot(identical(x, x2))
> 
> 
> 
> cleanEx()
> nameEx("base64_encode")
> ### * base64_encode
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: base64_encode
> ### Title: Encode and decode base64
> ### Aliases: base64_encode base64_decode
> 
> ### ** Examples
> 
> input <- charToRaw("foo = bar + 5")
> message <- base64_encode(input)
> output <- base64_decode(message)
> identical(output, input)
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("bignum")
> ### * bignum
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bignum
> ### Title: Big number arithmetic
> ### Aliases: bignum bignum_mod_exp bignum_mod_inv
> 
> ### ** Examples
> 
> # create a bignum
> x <- bignum(123L)
> y <- bignum("123456789123456789")
> z <- bignum("D41D8CD98F00B204E9800998ECF8427E", hex = TRUE)
> 
> # Basic arithmetic
> div <- z %/% y
> mod <- z %% y
> z2 <- div * y + mod
> stopifnot(z2 == z)
> stopifnot(div < z)
> 
> 
> 
> cleanEx()
> nameEx("certificates")
> ### * certificates
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cert_verify
> ### Title: X509 certificates
> ### Aliases: cert_verify certificates download_ssl_cert ca_bundle
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("curve25519")
> ### * curve25519
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: curve25519
> ### Title: Curve25519
> ### Aliases: curve25519 read_ed25519_key read_ed25519_pubkey
> ###   read_x25519_key read_x25519_pubkey ed25519_sign ed25519_verify
> ###   x25519_diffie_hellman
> 
> ### ** Examples
> 
> # Generate a keypair
> if(openssl_config()$x25519){
+ key <- ed25519_keygen()
+ pubkey <- as.list(key)$pubkey
+ 
+ # Sign message
+ msg <- serialize(iris, NULL)
+ sig <- ed25519_sign(msg, key)
+ 
+ # Verify the signature
+ ed25519_verify(msg, sig, pubkey)
+ 
+ # Diffie Hellman example:
+ key1 <- x25519_keygen()
+ key2 <- x25519_keygen()
+ 
+ # Both parties can derive the same secret
+ x25519_diffie_hellman(key1, key2$pubkey)
+ x25519_diffie_hellman(key2, key1$pubkey)
+ 
+ # Import/export sodium keys
+ rawkey <- sodium::sig_keygen()
+ rawpubkey <- sodium::sig_pubkey(rawkey)
+ key <- read_ed25519_key(rawkey)
+ pubkey <- read_ed25519_pubkey(rawpubkey)
+ 
+ # To get the raw key data back for use in sodium
+ as.list(key)$data
+ as.list(pubkey)$data
+ }
 [1] 9c 1a 8f 11 a0 e8 01 5f 30 4e d4 ba 18 1b 85 71 0b 6f 94 21 fa 5b 7a 4f 4f
[26] 76 7b 5b 92 bd e7 6c
> 
> 
> 
> cleanEx()
> nameEx("ec_dh")
> ### * ec_dh
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ec_dh
> ### Title: Diffie-Hellman Key Agreement
> ### Aliases: ec_dh
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Need two EC keypairs from the same curve
> ##D alice_key <- ec_keygen("P-521")
> ##D bob_key <- ec_keygen("P-521")
> ##D 
> ##D # Derive public keys
> ##D alice_pub <- as.list(alice_key)$pubkey
> ##D bob_pub <- as.list(bob_key)$pubkey
> ##D 
> ##D # Both peers can derive the (same) shared secret via each other's pubkey
> ##D ec_dh(alice_key, bob_pub)
> ##D ec_dh(bob_key, alice_pub)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("encrypt_envelope")
> ### * encrypt_envelope
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: encrypt_envelope
> ### Title: Envelope encryption
> ### Aliases: encrypt_envelope envelope decrypt_envelope
> 
> ### ** Examples
> 
> # Requires RSA key
> key <- rsa_keygen()
> pubkey <- key$pubkey
> msg <- serialize(iris, NULL)
> 
> # Encrypt
> out <- encrypt_envelope(msg, pubkey)
> str(out)
List of 3
 $ iv     : raw [1:16] 37 5d 18 f8 ...
 $ session: raw [1:256] 60 ae ed 64 ...
 $ data   : raw [1:5808] 8e 15 b2 c4 ...
> 
> # Decrypt
> orig <- decrypt_envelope(out$data, out$iv, out$session, key)
> stopifnot(identical(msg, orig))
> 
> 
> 
> cleanEx()
> nameEx("fingerprint")
> ### * fingerprint
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fingerprint
> ### Title: OpenSSH fingerprint
> ### Aliases: fingerprint
> 
> ### ** Examples
> 
> mykey <- rsa_keygen()
> pubkey <- as.list(mykey)$pubkey
> fingerprint(mykey)
sha256 a9:03:14:b9:09:a2:87:ca:1e:ba:ca:a2:f9:12:d0:98:6c:94:08:5e:22:a6:06:1a:c9:b8:8d:4a:70:29:76:40 
> fingerprint(pubkey)
sha256 a9:03:14:b9:09:a2:87:ca:1e:ba:ca:a2:f9:12:d0:98:6c:94:08:5e:22:a6:06:1a:c9:b8:8d:4a:70:29:76:40 
> 
> # Some systems use other hash functions
> fingerprint(pubkey, sha1)
sha1 11:68:1b:9a:84:3f:24:ee:e6:43:9f:6a:bf:d7:5c:c8:24:53:b5:0b 
> fingerprint(pubkey, sha256)
sha256 a9:03:14:b9:09:a2:87:ca:1e:ba:ca:a2:f9:12:d0:98:6c:94:08:5e:22:a6:06:1a:c9:b8:8d:4a:70:29:76:40 
> 
> # Other key types
> fingerprint(dsa_keygen())
sha256 4a:36:22:bc:46:66:a8:57:36:8b:d3:34:19:bd:46:37:49:3a:d1:61:b7:59:e6:32:99:a7:29:1e:1a:a0:cc:9e 
> 
> 
> 
> cleanEx()
> nameEx("hash")
> ### * hash
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hashing
> ### Title: Vectorized hash/hmac functions
> ### Aliases: hashing sha1 hash hmac mac sha224 sha256 sha384 sha512 sha2
> ###   sha3 md4 md5 blake2b blake2s ripemd160 multihash
> 
> ### ** Examples
> 
> # Support both strings and binary
> md5(c("foo", "bar"))
[1] "acbd18db4cc2f85cedef654fccc4a4d8" "37b51d194a7513e45b56f6524f2d51f2"
> md5("foo", key = "secret")
[1] "ba19fbc606a960051b60244e9a5ed3d2"
> 
> hash <- md5(charToRaw("foo"))
> as.character(hash, sep = ":")
[1] "ac:bd:18:db:4c:c2:f8:5c:ed:ef:65:4f:cc:c4:a4:d8"
> 
> # Compare to digest
> digest::digest("foo", "md5", serialize = FALSE)
[1] "acbd18db4cc2f85cedef654fccc4a4d8"
> 
> # Other way around
> digest::digest(cars, skip = 0)
[1] "7a3855520121afca99205d4d2b6d7ac5"
> md5(serialize(cars, NULL))
md5 94:12:bf:fc:73:3a:2e:db:5b:ae:ce:cb:06:6b:63:4b 
> 
> # Stream-verify from connections (including files)
> myfile <- system.file("CITATION")
> md5(file(myfile))
md5 48:9e:35:00:38:d0:47:ad:99:03:b8:c5:35:d3:ec:e7 
> md5(file(myfile), key = "secret")
md5 hmac c9:ea:8a:9e:eb:44:e7:98:7a:a3:e7:9f:db:b0:73:02 
> 
> ## Not run: 
> ##D check md5 from: http://cran.r-project.org/bin/windows/base/old/3.1.1/md5sum.txt
> ##D md5(url("http://cran.r-project.org/bin/windows/base/old/3.1.1/R-3.1.1-win.exe"))
> ## End(Not run)
> 
> # Use a salt to prevent dictionary attacks
> sha1("admin") # googleable
[1] "d033e22ae348aeb5660fc2140aec35850c4da997"
> sha1("admin", key = "random_salt_value") #not googleable
[1] "4a6e59fa5cc72c6785d9f4652664acce5d2da63f"
> 
> # Use a random salt to identify duplicates while anonymizing values
> sha256("john") # googleable
[1] "96d9632f363564cc3032521409cf22a852f2032eec099ed5967c0d000cec607a"
> sha256(c("john", "mary", "john"), key = "random_salt_value")
[1] "5540b6f6e1fa6552ea7402b4841fac08eee56b55dbe9f9180aa7bb539b284f8b"
[2] "9ea418fd421465da254bccf930db3efce304841bb5e95797903e9e721af2819f"
[3] "5540b6f6e1fa6552ea7402b4841fac08eee56b55dbe9f9180aa7bb539b284f8b"
> 
> 
> 
> cleanEx()
> nameEx("keygen")
> ### * keygen
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: keygen
> ### Title: Generate Key pair
> ### Aliases: keygen rsa_keygen dsa_keygen ec_keygen x25519_keygen
> ###   ed25519_keygen
> 
> ### ** Examples
> 
> # Generate keypair
> key <- rsa_keygen()
> pubkey <- as.list(key)$pubkey
> 
> # Write/read the key with a passphrase
> write_pem(key, "id_rsa", password = "supersecret")
> read_key("id_rsa", password = "supersecret")
[2048-bit rsa private key]
md5: d2bc05a1c097aee926d94c38cb576909
sha256: b727fbafb38931e26383ffd96cb09c24e3901cf120cc3d4055785cae9b416bc7
> unlink("id_rsa")
> 
> 
> 
> cleanEx()
> nameEx("my_key")
> ### * my_key
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: my_key
> ### Title: Default key
> ### Aliases: my_key my_pubkey
> 
> ### ** Examples
> 
> # Set random RSA key as default
> key <- rsa_keygen()
> write_pem(key, tmp <- tempfile(), password = "")
> rm(key)
> Sys.setenv("USER_KEY" = tmp)
> 
> # Check the new keys
> print(my_key())
[2048-bit rsa private key]
md5: fdf321770d14caf986a35c463c8e0ad6
sha256: 0267c254ac3936ddd6c2f49df252a34189925692b1bb7e7f934e7c3c90591b89
> print(my_pubkey())
[2048-bit rsa public key]
md5: fdf321770d14caf986a35c463c8e0ad6
sha256: 0267c254ac3936ddd6c2f49df252a34189925692b1bb7e7f934e7c3c90591b89
> 
> 
> 
> cleanEx()
> nameEx("rand_bytes")
> ### * rand_bytes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rand_bytes
> ### Title: Generate random bytes and numbers with OpenSSL
> ### Aliases: rand_bytes rand_num
> 
> ### ** Examples
> 
> rnd <- rand_bytes(10)
> as.numeric(rnd)
 [1]  80 250 204  27  99  82 141  82 128 208
> as.character(rnd)
 [1] "50" "fa" "cc" "1b" "63" "52" "8d" "52" "80" "d0"
> as.logical(rawToBits(rnd))
 [1] FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE
[13]  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE FALSE  TRUE  TRUE
[25]  TRUE  TRUE FALSE  TRUE  TRUE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE
[37] FALSE  TRUE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE FALSE
[49]  TRUE FALSE  TRUE  TRUE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE
[61]  TRUE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE
[73] FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE
> 
> # bytes range from 0 to 255
> rnd <- rand_bytes(100000)
> hist(as.numeric(rnd), breaks=-1:255)
> 
> # Generate random doubles between 0 and 1
> rand_num(5)
[1] 0.3289333 0.7881964 0.1434356 0.3042360 0.5349155
> 
> # Use CDF to map [0,1] into random draws from a distribution
> x <- qnorm(rand_num(1000), mean=100, sd=15)
> hist(x)
> 
> y <- qbinom(rand_num(1000), size=10, prob=0.3)
> hist(y)
> 
> 
> 
> cleanEx()
> nameEx("read_key")
> ### * read_key
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: read_key
> ### Title: Parsing keys and certificates
> ### Aliases: read_key read_pubkey read_cert read_cert_bundle read_pem
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Read private key
> ##D key <- read_key("~/.ssh/id_rsa")
> ##D str(key)
> ##D 
> ##D # Read public key
> ##D pubkey <- read_pubkey("~/.ssh/id_rsa.pub")
> ##D str(pubkey)
> ##D 
> ##D # Read certificates
> ##D txt <- readLines("https://curl.haxx.se/ca/cacert.pem")
> ##D bundle <- read_cert_bundle(txt)
> ##D print(bundle)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("rsa_encrypt")
> ### * rsa_encrypt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rsa_encrypt
> ### Title: Low-level RSA encryption
> ### Aliases: rsa_encrypt rsa encrypt rsa_decrypt
> 
> ### ** Examples
> 
> # Generate test keys
> key <- rsa_keygen()
> pubkey <- key$pubkey
> 
> # Encrypt data with AES
> tempkey <- rand_bytes(32)
> iv <- rand_bytes(16)
> blob <- aes_cbc_encrypt(system.file("CITATION"), tempkey, iv = iv)
> 
> # Encrypt tempkey using receivers public RSA key
> ciphertext <- rsa_encrypt(tempkey, pubkey)
> 
> # Receiver decrypts tempkey from private RSA key
> tempkey <- rsa_decrypt(ciphertext, key)
> message <- aes_cbc_decrypt(blob, tempkey, iv)
> out <- rawToChar(message)
> 
> 
> 
> cleanEx()
> nameEx("signatures")
> ### * signatures
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: signature_create
> ### Title: Signatures
> ### Aliases: signature_create signatures signature_verify ecdsa_parse
> ###   ecdsa_write
> 
> ### ** Examples
> 
> # Generate a keypair
> key <- rsa_keygen()
> pubkey <- key$pubkey
> 
> # Sign a file
> data <- system.file("DESCRIPTION")
> sig <- signature_create(data, key = key)
> stopifnot(signature_verify(data, sig, pubkey = pubkey))
> 
> # Sign raw data
> data <- serialize(iris, NULL)
> sig <- signature_create(data, sha256, key = key)
> stopifnot(signature_verify(data, sig, sha256, pubkey = pubkey))
> 
> # Sign a hash
> md <- md5(data)
> sig <- signature_create(md, hash = NULL, key = key)
> stopifnot(signature_verify(md, sig, hash = NULL, pubkey = pubkey))
> #
> # ECDSA example
> data <- serialize(iris, NULL)
> key <- ec_keygen()
> pubkey <- key$pubkey
> sig <- signature_create(data, sha256, key = key)
> stopifnot(signature_verify(data, sig, sha256, pubkey = pubkey))
> 
> # Convert signature to (r, s) parameters and then back
> params <- ecdsa_parse(sig)
> out <- ecdsa_write(params$r, params$s)
> identical(sig, out)
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("ssl_ctx")
> ### * ssl_ctx
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ssl_ctx
> ### Title: Hooks to manipulate the SSL context for curl requests
> ### Aliases: ssl_ctx ssl_ctx_add_cert_to_store ssl_ctx_set_verify_callback
> ###   ssl_ctx_curl_version_match
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Example 1: accept your local snakeoil https cert
> ##D mycert <- openssl::download_ssl_cert('localhost')[[1]]
> ##D 
> ##D # Setup the callback
> ##D h <- curl::new_handle(ssl_ctx_function = function(ssl_ctx){
> ##D   ssl_ctx_add_cert_to_store(ssl_ctx, mycert)
> ##D }, verbose = TRUE, forbid_reuse = TRUE)
> ##D 
> ##D # Perform the request
> ##D req <- curl::curl_fetch_memory('https://localhost', handle = h)
> ##D 
> ##D # Example 2 using a custom verify function
> ##D verify_cb <- function(cert){
> ##D   id <- cert$pubkey$fingerprint
> ##D   cat("Server cert from:", as.character(id), "\n")
> ##D   TRUE # always accept cert
> ##D }
> ##D 
> ##D h <- curl::new_handle(ssl_ctx_function = function(ssl_ctx){
> ##D   ssl_ctx_set_verify_callback(ssl_ctx, verify_cb)
> ##D }, verbose = TRUE, forbid_reuse = TRUE)
> ##D 
> ##D # Perform the request
> ##D req <- curl::curl_fetch_memory('https://localhost', handle = h)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("write_pem")
> ### * write_pem
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: write_pem
> ### Title: Export key or certificate
> ### Aliases: write_pem write_der write_pkcs1 write_ssh write_openssh_pem
> 
> ### ** Examples
> 
> # Generate RSA keypair
> key <- rsa_keygen()
> pubkey <- key$pubkey
> 
> # Write to output formats
> write_ssh(pubkey)
[1] "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCy64/qJ1zvmIggLfW+q9Roz7tjeKunetIS5WV0qd3eIZT4jQeUYsiJtwtWW5p+sLdnYbHlhbpOY6LhR40goAA10y0RtNpcKnzDs+aCrLmFL+Ancc4VS/98JDTIVxxTCiEr9M4gHtLTUTOjPX1zKCpV0yXJJJzAT/OTgFZj4bn4+SGWj6edBYhGgDdROxQnja7wY8QxwYHh2lnEubD+Ee5QhuQ018bHOCMpx1fh4GAZbjIxDdSST+mfVmFWCad8rgDH0BeesI30MFP9EytueXpLPg5RNXB5R/J1k5n/HLPurghuJpRsNK554uqSXB+X52Hw2RMoEG34BamRD3SMaE/X"
> write_pem(pubkey)
[1] "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsuuP6idc75iIIC31vqvU\naM+7Y3irp3rSEuVldKnd3iGU+I0HlGLIibcLVluafrC3Z2Gx5YW6TmOi4UeNIKAA\nNdMtEbTaXCp8w7Pmgqy5hS/gJ3HOFUv/fCQ0yFccUwohK/TOIB7S01Ezoz19cygq\nVdMlySScwE/zk4BWY+G5+Pkhlo+nnQWIRoA3UTsUJ42u8GPEMcGB4dpZxLmw/hHu\nUIbkNNfGxzgjKcdX4eBgGW4yMQ3Ukk/pn1ZhVgmnfK4Ax9AXnrCN9DBT/RMrbnl6\nSz4OUTVweUfydZOZ/xyz7q4IbiaUbDSueeLqklwfl+dh8NkTKBBt+AWpkQ90jGhP\n1wIDAQAB\n-----END PUBLIC KEY-----\n"
> write_pem(key, password = "super secret")
[1] "-----BEGIN ENCRYPTED PRIVATE KEY-----\nMIIFHDBOBgkqhkiG9w0BBQ0wQTApBgkqhkiG9w0BBQwwHAQIJcZfr59gxOACAggA\nMAwGCCqGSIb3DQIJBQAwFAYIKoZIhvcNAwcECCOfypBWK5d6BIIEyBNmm0GJTOxz\nwbv/4ohnRQp0DVyCz2EEzSzTIk/2+T+jTptl0QwoiLe3oLhJxJ2NBTUyxUucujs6\n9w19AVyxcedHaRD1Uo4TrCc5F8e4cnb4fY5n0rPkmL1CumO0rNTqR5DD8JSTOpBC\nPZU6QSJHtgpc544dYA+0Zrxm9uVsiEbrotZkMbte8qdKu7dkkxW00o6Y3GBaAKbY\nyX0DymCCBS5mZOIyTiVljmQY53sDlVwm97xeJJeSD9mbpkXI3U4Me9p77KORtyiB\nqvf5wcg7El+IJZWRFy1mTMDdD//jYleaN+/vlM36GiJmZpP4uAQwIUey1JcnXVS+\nbPjc9bPtVy9znmkgpuJbSsAlXC7EdyGtdpkB237be6tW1nuXsLofI1ChznnawbAP\n7EQXmxFZtry9ec1mD5msvKBpXSHhQXPoZlyLRLzGHSzZXjMjHxhYLWVgLiqPMusx\nMdRkYeM44w9Ajecr5N+i3yznpp+3RtZ5QAXGHCxd0+Yp7j4v+vidvgpnz0thfS7x\nJRsuxCTa6ZAxy7tMojlwnEawos7T8WU6foFpsOkuNAXDJSLBoT3Salku08sUhXX+\nREeFbuEJCKEzxDIBhtkxKHMwAfBRSQpfnfQLRCnQAVXBEXbDBD4oWFoLWSC/3lio\nHq8iG0baJIskOoX0ZGYuC5FCiGiTq89dh713VXZoUt5QuQD679UZDE2omnEWnyJs\ndX4b+17TzOciwaLjij/gBC/BXplA0bVaJ4DuoFWm94SScq/6exSS/o5eroJweE1R\n+BqvaEAPdeaF3zmaM3tu14y97qzsQYuEQ48FJwbh9EbVuZ4mVbgse7n0tkMPbkxu\nY50B29H8hf8qysFfVl0UH2UyxhFat0OPoLBLFaoKo7RgZgXV3yS85yukYM3JNWr/\n9o4OFTyY8KCfDcdnWWN8Y/ZZUhfZ396w7YfN1I2LumKLTiOoMWH5zDUP/ONSFN93\n3jHzahdoL4f+15jSHACi6CB+Z/0q1MkIF35x8Te5eq79VYyZXkmpGIy0yVShNdDu\n+4B2f/9WRC4ymEUFXiT+h986RJKN5qtCOgW3MnCTyULam4QM4a0CaU50I3hvR9GL\nE6st+DQ7It9BBGtFDPqMJU33ZRd5vPJIWE/Yafr3TUx7vBOYz5Ex5gP2fGH6rpGB\nDTCsqeoh1DCFwvty9Qal7V8zndF5hgbSYj93gzKcOzpZlJl05AA/cmlGFCdb/N3I\nfkM0mOKcHz7DFx435WMfCu+7NJxsbu/sN+rv69EyY+aWJxDbjN2T7bRubFywctmK\n53IyV6bt/7GU40Y7SMhSnrtHRpXhX7tWCsLJTUFXlJuXBLqjPs2BCvWAuuepjq9k\nKx5QFkVTyDbcqiQSOVwjn6U8vTvycVO/Ng2tIF1sqmGkAEcujiRsS/HNYWyvugm6\nxmqKfA41I2EW1DA+XL4LlAfUwoQInN697kdGhlDQOevVIiF3buPpinbvEJFs1yYW\nTOQVYoRwBor3SayvhJSIOjt3mSNWruK/gd7/egFh2B9kdq8P+qOfLDk1+vJ0731w\njTGH52Q9JQlVW57vUhSsUB0SIF66207rVSBgzn0UqD1RMSmhzqwI4WldwVjZ7GQU\nYbcj+5K21DgPP9XHfwFSDw==\n-----END ENCRYPTED PRIVATE KEY-----\n"
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.549 0.025 1.575 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
