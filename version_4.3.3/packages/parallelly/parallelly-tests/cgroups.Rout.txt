
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
> 
> message("*** cgroups ...")
*** cgroups ...
> 
> message("- getCGroups()")
- getCGroups()
> groups <- parallelly:::getCGroups()
> print(groups)
    
"/" 
> stopifnot(
+   is.character(groups),
+   length(groups) == 0L || !is.null(names(groups))
+ )
> 
> message("- getCGroupsRoot()")
- getCGroupsRoot()
> root <- parallelly:::getCGroupsRoot()
> cat(sprintf("cgroups root path: %s\n", sQuote(root)))
cgroups root path: ‘/sys/fs/cgroup’
> stopifnot(length(root) == 1L, is.character(root))
> 
> message("- getCGroupsPath()")
- getCGroupsPath()
> path <- parallelly:::getCGroupsPath("cpu")
> cat(sprintf("cgroups 'cpu' path: %s\n", sQuote(path)))
cgroups 'cpu' path: ‘NA’
> stopifnot(length(path) == 1L, is.character(path))
> 
> path <- parallelly:::getCGroupsPath("cpuset")
> cat(sprintf("cgroups 'cpuset' path: %s\n", sQuote(path)))
cgroups 'cpuset' path: ‘NA’
> stopifnot(length(path) == 1L, is.character(path))
> 
> 
> message("- getCGroupsValue()")
- getCGroupsValue()
> value <- parallelly:::getCGroupsValue("cpu", "cpu.cfs_quota_us")
> cat(sprintf("cgroups 'cpu.cfs_quota_us' value: %s\n", sQuote(value)))
cgroups 'cpu.cfs_quota_us' value: ‘NA’
> stopifnot(length(value) == 1L, is.character(value))
> 
> value <- parallelly:::getCGroupsValue("cpu", "cpu.cfs_total_us")
> cat(sprintf("cgroups 'cpu.cfs_total_us' value: %s\n", sQuote(value)))
cgroups 'cpu.cfs_total_us' value: ‘NA’
> stopifnot(length(value) == 1L, is.character(value))
> 
> value <- parallelly:::getCGroupsValue("cpuset", "cpuset.cpus")
> cat(sprintf("cgroups 'cpuset.cpus' value: %s\n", sQuote(value)))
cgroups 'cpuset.cpus' value: ‘NA’
> stopifnot(length(value) == 1L, is.character(value))
> 
> 
> message("- getCGroupsCpuSet()")
- getCGroupsCpuSet()
> value <- parallelly:::getCGroupsCpuSet()
> cat(sprintf("CPU set: [n=%d] %s\n", length(value), paste(sQuote(value), collapse = ", ")))
CPU set: [n=0] 
> stopifnot(length(value) >= 0L, is.integer(value), !any(is.na(value)))
> 
> 
> message("- getCGroupsCpuQuotaMicroseconds()")
- getCGroupsCpuQuotaMicroseconds()
> value <- parallelly:::getCGroupsCpuQuotaMicroseconds()
> cat(sprintf("CPU quota (ms): %d\n", value))
CPU quota (ms): NA
> stopifnot(
+   length(value) == 1L,
+   is.integer(value),
+   is.na(value) || value == -1 || value > 0
+ )
> 
> message("- getCGroupsCpuPeriodMicroseconds()")
- getCGroupsCpuPeriodMicroseconds()
> value <- parallelly:::getCGroupsCpuPeriodMicroseconds()
> cat(sprintf("CPU total (ms): %d\n", value))
CPU total (ms): NA
> stopifnot(
+   length(value) == 1L,
+   is.integer(value),
+   is.na(value) || value > 0
+ )
> 
> message("- getCGroupsCpuQuota()")
- getCGroupsCpuQuota()
> value <- parallelly:::getCGroupsCpuQuota()
> cat(sprintf("CPU quota (ratio): %g\n", value))
CPU quota (ratio): NA
> stopifnot(
+   length(value) == 1L,
+   is.numeric(value),
+   !is.infinite(value),
+   is.na(value) || value > 0
+ )
> 
> message("- getCGroups2CpuMax()")
- getCGroups2CpuMax()
> value <- parallelly:::getCGroups2CpuMax()
> cat(sprintf("CPU quota (ratio): %g\n", value))
CPU quota (ratio): NA
> stopifnot(
+   length(value) == 1L,
+   is.numeric(value),
+   !is.infinite(value),
+   is.na(value) || value > 0
+ )
> 
> message("*** cgroups ... DONE")
*** cgroups ... DONE
> 
> source("incl/end.R")
> 
