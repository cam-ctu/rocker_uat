
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(testthat)
> library(igraph)

Attaching package: ‘igraph’

The following object is masked from ‘package:testthat’:

    compare

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

> 
> test_check("igraph")
Starting 2 test processes
[ FAIL 32 | WARN 1 | SKIP 40 | PASS 3399 ]

══ Skipped tests (40) ══════════════════════════════════════════════════════════
• empty test (1): 'test-topology.R:45:1'
• graph cannot be loaded (2): 'test-graphNEL.R:2:3', 'test-graphNEL.R:32:3'
• nested igraph call handling not implemented yet (1): 'test-graph.bfs.R:99:3'
• On CRAN (36): 'test-authority.score.R:68:3',
  'test-bug-501-rectangles.R:14:3', 'test-graph.bfs.R:115:3',
  'test-graph.adjacency.R:537:3', 'test-graph.adjacency.R:568:3',
  'test-graph.data.frame.R:49:3', 'test-hrg.R:15:3', 'test-layout.kk.R:2:3',
  'test-make.R:58:3', 'test-make.R:67:3', 'test-make.R:75:3',
  'test-make.R:85:3', 'test-make.R:93:3', 'test-minimal.st.separators.R:12:3',
  'test-old-data-type.R:94:3', 'test-operators.R:130:3', 'test-par.R:5:3',
  'test-par.R:15:3', 'test-plot.R:15:3', 'test-plot.R:38:3',
  'test-plot.R:61:3', 'test-print.R:53:3', 'test-rng.R:2:3',
  'test-serialize.R:9:3', 'test-utils-ensure.R:2:3', 'test-versions.R:9:3',
  'test-versions.R:19:3', 'test-versions.R:25:3', 'test-versions.R:40:3',
  'test-versions.R:55:3', 'test-versions.R:72:3', 'test-versions.R:98:3',
  'test-vs-es-printing.R:10:3', 'test-vs-es-printing.R:28:3',
  'test-vs-es-printing.R:43:3', 'test-vs-es-printing.R:59:3'

══ Failed tests ════════════════════════════════════════════════════════════════
── Error ('test-vs-es.R:3:3'): we can create vertex/edge seqs ──────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─V(g) %&&% expect_true(TRUE) at test-vs-es.R:3:3
  2. │ └─base::eval(rhs, envir = parent.frame())
  3. ├─testthat::expect_true(TRUE)
  4. │ └─testthat:::expect_waldo_constant(act, TRUE, info = info)
  5. │   └─testthat:::waldo_compare(...)
  6. └─base::loadNamespace(x)
  7.   ├─base::namespaceImportFrom(...)
  8.   │ └─base::asNamespace(ns)
  9.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 10.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 11.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 12.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 13.           └─base::get(genname, envir = envir)
── Error ('test-vs-es.R:1:1'): (code run outside of `test_that()`) ─────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-vs-es.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-vs-es.R:1:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Error ('test-scan.R:12:3'): General scan-stat works, US, scan-0, unweighted ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─igraph:::expect_that(digest::digest(s1), equals("659ffaaf303742f0806a79b8ff3d88b3")) at test-scan.R:12:3
  2. │ ├─base::suppressWarnings(condition(object)) at igraph-tests/testthat/helper.R:24:3
  3. │ │ └─base::withCallingHandlers(...)
  4. │ └─testthat (local) condition(object)
  5. │   └─testthat::expect_equal(x, expected, ..., expected.label = label)
  6. │     └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  7. │       └─testthat:::waldo_compare(...)
  8. └─base::loadNamespace(x)
  9.   ├─base::namespaceImportFrom(...)
 10.   │ └─base::asNamespace(ns)
 11.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 12.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 13.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 14.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 15.           └─base::get(genname, envir = envir)
── Error ('test-scan.R:10:1'): (code run outside of `test_that()`) ─────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-scan.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-scan.R:10:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Error ('test-weakref.R:7:3'): we can create weak references ─────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_identical(typeof(vs), "weakref") at test-weakref.R:7:3
  2. │ └─testthat:::expect_waldo_equal("identical", act, exp, info, ...)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-weakref.R:1:1'): (code run outside of `test_that()`) ───────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-weakref.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-weakref.R:1:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Error ('test-vs-operators.R:6:3'): c on attached vs ─────────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(ignore_attr = TRUE, c(vg, vg2), V(g)) at test-vs-operators.R:6:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-vs-operators.R:1:1'): (code run outside of `test_that()`) ──────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-vs-operators.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-vs-operators.R:1:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Error ('test-watts.strogatz.game.R:7:5'): sample_smallworld works ───────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_false(any(which_loop(g))) at test-watts.strogatz.game.R:7:5
  2. │ └─testthat:::expect_waldo_constant(act, FALSE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-watts.strogatz.game.R:1:1'): (code run outside of `test_that()`) ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-watts.strogatz.game.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-watts.strogatz.game.R:1:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Error ('test-add.edges.R:7:3'): add_edges keeps edge id order ───────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_equal(ec, ec2) at test-add.edges.R:7:3
  2. │ └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-add.edges.R:1:1'): (code run outside of `test_that()`) ─────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-add.edges.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-add.edges.R:1:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Error ('test-add.vertices.R:4:3'): add_vertices works ───────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─igraph:::expect_that(vcount(g2), equals(vcount(g) + nv)) at test-add.vertices.R:4:3
  2. │ ├─base::suppressWarnings(condition(object)) at igraph-tests/testthat/helper.R:24:3
  3. │ │ └─base::withCallingHandlers(...)
  4. │ └─testthat (local) condition(object)
  5. │   └─testthat::expect_equal(x, expected, ..., expected.label = label)
  6. │     └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  7. │       └─testthat:::waldo_compare(...)
  8. └─base::loadNamespace(x)
  9.   ├─base::namespaceImportFrom(...)
 10.   │ └─base::asNamespace(ns)
 11.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 12.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 13.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 14.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 15.           └─base::get(genname, envir = envir)
── Error ('test-add.vertices.R:1:1'): (code run outside of `test_that()`) ──────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-add.vertices.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-add.vertices.R:1:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Error ('test-adjacency.R:5:3'): `is_symmetric()` works ──────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_true(is_symmetric(sym)) at test-adjacency.R:5:3
  2. │ └─testthat:::expect_waldo_constant(act, TRUE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-adjacency.R:1:1'): (code run outside of `test_that()`) ─────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-adjacency.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-adjacency.R:1:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Error ('test-all.st.cuts.R:6:3'): all.st.cuts works ─────────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─igraph:::expect_that(unvs(cc$cuts), equals(list(1, 2, 3, 4))) at test-all.st.cuts.R:6:3
  2. │ ├─base::suppressWarnings(condition(object)) at igraph-tests/testthat/helper.R:24:3
  3. │ │ └─base::withCallingHandlers(...)
  4. │ └─testthat (local) condition(object)
  5. │   └─testthat::expect_equal(x, expected, ..., expected.label = label)
  6. │     └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  7. │       └─testthat:::waldo_compare(...)
  8. └─base::loadNamespace(x)
  9.   ├─base::namespaceImportFrom(...)
 10.   │ └─base::asNamespace(ns)
 11.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 12.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 13.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 14.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 15.           └─base::get(genname, envir = envir)
── Error ('test-all.st.cuts.R:1:1'): (code run outside of `test_that()`) ───────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-all.st.cuts.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-all.st.cuts.R:1:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Error ('test-alpha.centrality.R:4:3'): dense alpha_centrality works ─────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─igraph:::expect_that(ac1, equals(c(1, 1, 3, 4, 5))) at test-alpha.centrality.R:4:3
  2. │ ├─base::suppressWarnings(condition(object)) at igraph-tests/testthat/helper.R:24:3
  3. │ │ └─base::withCallingHandlers(...)
  4. │ └─testthat (local) condition(object)
  5. │   └─testthat::expect_equal(x, expected, ..., expected.label = label)
  6. │     └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  7. │       └─testthat:::waldo_compare(...)
  8. └─base::loadNamespace(x)
  9.   ├─base::namespaceImportFrom(...)
 10.   │ └─base::asNamespace(ns)
 11.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 12.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 13.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 14.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 15.           └─base::get(genname, envir = envir)
── Error ('test-alpha.centrality.R:1:1'): (code run outside of `test_that()`) ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-alpha.centrality.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-alpha.centrality.R:1:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Error ('test-are_adjacent.R:3:3'): are_adjacent works ───────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_true(are_adjacent(g, "A", "B")) at test-are_adjacent.R:3:3
  2. │ └─testthat:::expect_waldo_constant(act, TRUE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-are_adjacent.R:1:1'): (code run outside of `test_that()`) ──────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-are_adjacent.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-are_adjacent.R:1:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Error ('test-adjacency.spectral.embedding.R:41:3'): Undirected, unweighted case works ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─igraph:::expect_that(as_la$D, equals(ss$values[1:no])) at test-adjacency.spectral.embedding.R:41:3
  2. │ ├─base::suppressWarnings(condition(object)) at igraph-tests/testthat/helper.R:24:3
  3. │ │ └─base::withCallingHandlers(...)
  4. │ └─testthat (local) condition(object)
  5. │   └─testthat::expect_equal(x, expected, ..., expected.label = label)
  6. │     └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  7. │       └─testthat:::waldo_compare(...)
  8. └─base::loadNamespace(x)
  9.   ├─base::namespaceImportFrom(...)
 10.   │ └─base::asNamespace(ns)
 11.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 12.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 13.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 14.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 15.           └─base::get(genname, envir = envir)
── Error ('test-adjacency.spectral.embedding.R:20:1'): (code run outside of `test_that()`) ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-adjacency.spectral.embedding.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-adjacency.spectral.embedding.R:20:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Error ('test-articulation.points.R:8:3'): articulation_points works ─────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─igraph:::expect_that(sort(which(deg == max(deg))), equals(sort(ap))) at test-articulation.points.R:8:3
  2. │ ├─base::suppressWarnings(condition(object)) at igraph-tests/testthat/helper.R:24:3
  3. │ │ └─base::withCallingHandlers(...)
  4. │ └─testthat (local) condition(object)
  5. │   └─testthat::expect_equal(x, expected, ..., expected.label = label)
  6. │     └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  7. │       └─testthat:::waldo_compare(...)
  8. └─base::loadNamespace(x)
  9.   ├─base::namespaceImportFrom(...)
 10.   │ └─base::asNamespace(ns)
 11.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 12.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 13.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 14.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 15.           └─base::get(genname, envir = envir)
── Error ('test-articulation.points.R:1:1'): (code run outside of `test_that()`) ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-articulation.points.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-articulation.points.R:1:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Error ('test-as.directed.R:8:3'): as.directed works ─────────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─igraph:::expect_that(degree(g), equals(degree(g2)/2)) at test-as.directed.R:8:3
  2. │ ├─base::suppressWarnings(condition(object)) at igraph-tests/testthat/helper.R:24:3
  3. │ │ └─base::withCallingHandlers(...)
  4. │ └─testthat (local) condition(object)
  5. │   └─testthat::expect_equal(x, expected, ..., expected.label = label)
  6. │     └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  7. │       └─testthat:::waldo_compare(...)
  8. └─base::loadNamespace(x)
  9.   ├─base::namespaceImportFrom(...)
 10.   │ └─base::asNamespace(ns)
 11.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 12.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 13.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 14.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 15.           └─base::get(genname, envir = envir)
── Error ('test-as.directed.R:1:1'): (code run outside of `test_that()`) ───────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-as.directed.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-as.directed.R:1:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Error ('test-as.undirected.R:13:3'): as.undirected keeps attributes ─────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─igraph:::expect_that(g2$name, equals(g$name)) at test-as.undirected.R:13:3
  2. │ ├─base::suppressWarnings(condition(object)) at igraph-tests/testthat/helper.R:24:3
  3. │ │ └─base::withCallingHandlers(...)
  4. │ └─testthat (local) condition(object)
  5. │   └─testthat::expect_equal(x, expected, ..., expected.label = label)
  6. │     └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  7. │       └─testthat:::waldo_compare(...)
  8. └─base::loadNamespace(x)
  9.   ├─base::namespaceImportFrom(...)
 10.   │ └─base::asNamespace(ns)
 11.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 12.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 13.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 14.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 15.           └─base::get(genname, envir = envir)
── Error ('test-as.undirected.R:1:1'): (code run outside of `test_that()`) ─────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-as.undirected.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-as.undirected.R:1:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)
── Error ('test-assortativity.R:20:3'): assortativity works ────────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─igraph:::expect_that(asd, equals(as)) at test-assortativity.R:20:3
  2. │ ├─base::suppressWarnings(condition(object)) at igraph-tests/testthat/helper.R:24:3
  3. │ │ └─base::withCallingHandlers(...)
  4. │ └─testthat (local) condition(object)
  5. │   └─testthat::expect_equal(x, expected, ..., expected.label = label)
  6. │     └─testthat:::expect_waldo_equal("equal", act, exp, info, ..., tolerance = tolerance)
  7. │       └─testthat:::waldo_compare(...)
  8. └─base::loadNamespace(x)
  9.   ├─base::namespaceImportFrom(...)
 10.   │ └─base::asNamespace(ns)
 11.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 12.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 13.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 14.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 15.           └─base::get(genname, envir = envir)
── Error ('test-assortativity.R:1:1'): (code run outside of `test_that()`) ─────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─base::tryCatch(...)
  2. │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  3. │   ├─base (local) tryCatchOne(...)
  4. │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  5. │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
  6. │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  7. │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
  8. ├─base::withCallingHandlers(...)
  9. ├─base::saveRDS(...)
 10. ├─base::do.call(...)
 11. ├─base (local) `<fn>`(...)
 12. ├─global `<fn>`(base::quote("test-assortativity.R"))
 13. │ └─asNamespace("testthat")$queue_task(path)
 14. │   ├─testthat::with_reporter(multi, test_one_file(path, env = the$testing_env))
 15. │   │ └─base::tryCatch(...)
 16. │   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 17. │   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 18. │   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 19. │   └─testthat:::test_one_file(path, env = the$testing_env)
 20. │     └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 21. │       └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 22. │         ├─base::tryCatch(...)
 23. │         │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 24. │         │   ├─base (local) tryCatchOne(...)
 25. │         │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 26. │         │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 27. │         │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 28. │         │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 29. │         ├─base::withCallingHandlers(...)
 30. │         └─base::eval(code, test_env)
 31. │           └─base::eval(code, test_env)
 32. │             └─testthat::test_that(...) at test-assortativity.R:1:1
 33. │               └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 34. │                 └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 35. │                   └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 36. └─base::loadNamespace(x)
 37.   ├─base::namespaceImportFrom(...)
 38.   │ └─base::asNamespace(ns)
 39.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 40.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 41.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 42.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 43.           └─base::get(genname, envir = envir)

[ FAIL 32 | WARN 1 | SKIP 40 | PASS 3399 ]
Error: Test failures
Execution halted
