
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## simple test suite - avoid testthat! It has an insane amount of
> ## unnecessary dependencies. A test package should have exactly 0
> 
> assert <- function(msg, what) {
+     cat("   . ", msg,"\n")
+     stopifnot(what)
+     .GlobalEnv$ok <- .GlobalEnv$ok + 1L
+ }
> 
> xfail <- function(...) suppressWarnings(tryCatch({ ...; FALSE }, error=function(e) TRUE))
> 
> ## none of these are fatal
> info <- function(...) message(" -- ", ...)
> err  <- function(...) message(" ** ERROR: ", ...)
> warn <- function(...) message(" !! ", ...)
> 
> ## all warnings (unless suppressed) are errors
> options(warn=2)
> 
> library(PKI)
Loading required package: base64enc
> 
> .GlobalEnv$ok <- 0L
> 
> ## Majority of tests are in th3 examples,
> ## so we won't repeat those, but some special cases
> ## not covered there as well as expected failures
> 
> info("Checking failure paths")
 -- Checking failure paths
> xfail(PKI.load.cert(what="foo", file="bar")) ## set both what and file
[1] TRUE
> xfail(PKI.load.cert("foo", "DER")) ## binary format with text
[1] TRUE
> xfail(PKI.load.cert("nothing")) ## invalid content
[1] TRUE
> xfail(PKI.digest("foo", "bar")) ## invalid hash spec
[1] TRUE
> xfail(PKI.load.key(what="foo", file="bar"))
[1] TRUE
> xfail(PKI:::PKI.decode.SSH2(fn.priv.der)) ## try to load invalid content
[1] TRUE
> 
> info("Checking key paths via files/connections")
 -- Checking key paths via files/connections
> key <- PKI.genRSAkey(bits = 2048L)
> fn.priv.pem <- tempfile()
> PKI.save.key(key, target=fn.priv.pem)
 [1] "-----BEGIN RSA PRIVATE KEY-----"                                 
 [2] "MIIEowIBAAKCAQEArcgnON1kcq56MCLW6mTfQ7510GuMXUVWabhaaaju0jSVpA7j"
 [3] "USN5y5V/IiPixYJfpmmFJ0BviXgjjbjr5IH2jFmEkkNEEslXDOxWWL/IbGILl8A/"
 [4] "tMRQ0PIQm4dSvTPOEJjQ32nBuZNA4KJdXgG8FgYY1lw3P31iuzcowEy/oovPEBLj"
 [5] "IGB2IB7DCBSTLpz/s/PcL+dVpRZPZFx3I+Zg7liq1POi5L9wS6ZOZvh8GAbSUeP5"
 [6] "mmwDfrZhD4Lr5SEOTTW2YCsvqAVTO3hiFt+6VTI7zLwFDy0d6obRwwd7BFNG5/HZ"
 [7] "8f6Yns3br6EHvAOgMi2syhtXNEZLA9ICTdjhXQIDAQABAoIBAAnoFxROyqMe/ygv"
 [8] "VEEYbwHVobG379CBW2O7dqv/TV3+UWmAz8SYWSEZ7J1tnkfUHs/FxClwqusTRjOW"
 [9] "Dxx/rCZkFAKigwbvI19BOcrlY++Jx09nTjpn1pOSuQ+krzrJ8T1Q+NdDmB+UHWaw"
[10] "2tG5F5fJ0TCnIR8lbrNteY080s/ZQDOy9TPuTaAkVj1qabs989FWV/UAr7Z92Zhn"
[11] "ZjluDp0Vl9vMBWw0XHBXH9AgMOpRzSmh7S98Wf5gRtCV7kPfL3jjGkitpPIqibI+"
[12] "jWuCp5o4r7ngYXe768QoeX1nBdeB8Amf7w9QFtjOmlP+vNzBWFlGl2ICBHTFDn6/"
[13] "k9dbFKECgYEAt1Wrl/kwPvn733Z35gkT5vCT/2W9GyXd/YTHXUCBWTPAfVKSdUAd"
[14] "1fE+7lRzLX4aVb2lENQl0DR97eo/qyrMhLX3PKmvoiEVhiNA9BU1STmjOcsagy2K"
[15] "nuUUTCDN8nMohDC8drB0Hfi3/SIkkjNuM87r24l2/r/opkFdwPhzlqsCgYEA8qkx"
[16] "gphr3EH1gDpoHAol8Mty9cbU8AA1kq2hQUzmZczxvZXZJWepO756AL2NdVmZvzjD"
[17] "GgOQpsTbc6J4gUogx4e39D77/V5oItTF+r9UtmRyXnkgdLealPFsGuJTn7D6APbM"
[18] "o3HWzVzN18vn1/dwWHlBxbMdmTkPB7grt9BDCBcCgYAyDeTUkEdY2l2nLCweFRpm"
[19] "8gYmM7vGvrb2MZtQ3XyzQwrp7HJqKsA6miwpW8s6f3RnNmjryFAuoTZEj7EkZYID"
[20] "Nb8zw8xdApVi0xs3yNaMkHz9GXO6nuN68GZzRn2UFVbZiIjcCt8ZE8AAD6NWe046"
[21] "PONuRADGGtVFFxGmzu6YEwKBgFGyBKkjB60vx6dUApjuEbfvxtRYDHiAmYi4TAHg"
[22] "EfFT/k8FlAWz0JX8mraFGorXj5uBUK4BZUHAJOHZYRimDEMgvh3M1qmGjyiq2byB"
[23] "jdOaHacQwIyLA9ABN5QVfnHU81Y/wMWGHfsls2djjrp246vlpu8YTm63dwfySUWp"
[24] "J+ghAoGBAKrTW5+2A0+jdhBnjXmMbvbJSV+/EM2YWbFvuXnE5zszXIpQhp172yfQ"
[25] "BNE31TbYpKIgMWLTj6Fo1WEfmnusfp4Vw5z5TOq1+hVHcU0KgZbnes/Ej4d6JIte"
[26] "wLCUpIMbSCyAex4d4O1hYYgELG0dZoesDJx1Du7JOQ8x2gZ0B1s+"            
[27] "-----END RSA PRIVATE KEY-----"                                   
> fn.priv.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.priv.der)
   [1] 30 82 04 a3 02 01 00 02 82 01 01 00 ad c8 27 38 dd 64 72 ae 7a 30 22 d6
  [25] ea 64 df 43 be 75 d0 6b 8c 5d 45 56 69 b8 5a 69 a8 ee d2 34 95 a4 0e e3
  [49] 51 23 79 cb 95 7f 22 23 e2 c5 82 5f a6 69 85 27 40 6f 89 78 23 8d b8 eb
  [73] e4 81 f6 8c 59 84 92 43 44 12 c9 57 0c ec 56 58 bf c8 6c 62 0b 97 c0 3f
  [97] b4 c4 50 d0 f2 10 9b 87 52 bd 33 ce 10 98 d0 df 69 c1 b9 93 40 e0 a2 5d
 [121] 5e 01 bc 16 06 18 d6 5c 37 3f 7d 62 bb 37 28 c0 4c bf a2 8b cf 10 12 e3
 [145] 20 60 76 20 1e c3 08 14 93 2e 9c ff b3 f3 dc 2f e7 55 a5 16 4f 64 5c 77
 [169] 23 e6 60 ee 58 aa d4 f3 a2 e4 bf 70 4b a6 4e 66 f8 7c 18 06 d2 51 e3 f9
 [193] 9a 6c 03 7e b6 61 0f 82 eb e5 21 0e 4d 35 b6 60 2b 2f a8 05 53 3b 78 62
 [217] 16 df ba 55 32 3b cc bc 05 0f 2d 1d ea 86 d1 c3 07 7b 04 53 46 e7 f1 d9
 [241] f1 fe 98 9e cd db af a1 07 bc 03 a0 32 2d ac ca 1b 57 34 46 4b 03 d2 02
 [265] 4d d8 e1 5d 02 03 01 00 01 02 82 01 00 09 e8 17 14 4e ca a3 1e ff 28 2f
 [289] 54 41 18 6f 01 d5 a1 b1 b7 ef d0 81 5b 63 bb 76 ab ff 4d 5d fe 51 69 80
 [313] cf c4 98 59 21 19 ec 9d 6d 9e 47 d4 1e cf c5 c4 29 70 aa eb 13 46 33 96
 [337] 0f 1c 7f ac 26 64 14 02 a2 83 06 ef 23 5f 41 39 ca e5 63 ef 89 c7 4f 67
 [361] 4e 3a 67 d6 93 92 b9 0f a4 af 3a c9 f1 3d 50 f8 d7 43 98 1f 94 1d 66 b0
 [385] da d1 b9 17 97 c9 d1 30 a7 21 1f 25 6e b3 6d 79 8d 3c d2 cf d9 40 33 b2
 [409] f5 33 ee 4d a0 24 56 3d 6a 69 bb 3d f3 d1 56 57 f5 00 af b6 7d d9 98 67
 [433] 66 39 6e 0e 9d 15 97 db cc 05 6c 34 5c 70 57 1f d0 20 30 ea 51 cd 29 a1
 [457] ed 2f 7c 59 fe 60 46 d0 95 ee 43 df 2f 78 e3 1a 48 ad a4 f2 2a 89 b2 3e
 [481] 8d 6b 82 a7 9a 38 af b9 e0 61 77 bb eb c4 28 79 7d 67 05 d7 81 f0 09 9f
 [505] ef 0f 50 16 d8 ce 9a 53 fe bc dc c1 58 59 46 97 62 02 04 74 c5 0e 7e bf
 [529] 93 d7 5b 14 a1 02 81 81 00 b7 55 ab 97 f9 30 3e f9 fb df 76 77 e6 09 13
 [553] e6 f0 93 ff 65 bd 1b 25 dd fd 84 c7 5d 40 81 59 33 c0 7d 52 92 75 40 1d
 [577] d5 f1 3e ee 54 73 2d 7e 1a 55 bd a5 10 d4 25 d0 34 7d ed ea 3f ab 2a cc
 [601] 84 b5 f7 3c a9 af a2 21 15 86 23 40 f4 15 35 49 39 a3 39 cb 1a 83 2d 8a
 [625] 9e e5 14 4c 20 cd f2 73 28 84 30 bc 76 b0 74 1d f8 b7 fd 22 24 92 33 6e
 [649] 33 ce eb db 89 76 fe bf e8 a6 41 5d c0 f8 73 96 ab 02 81 81 00 f2 a9 31
 [673] 82 98 6b dc 41 f5 80 3a 68 1c 0a 25 f0 cb 72 f5 c6 d4 f0 00 35 92 ad a1
 [697] 41 4c e6 65 cc f1 bd 95 d9 25 67 a9 3b be 7a 00 bd 8d 75 59 99 bf 38 c3
 [721] 1a 03 90 a6 c4 db 73 a2 78 81 4a 20 c7 87 b7 f4 3e fb fd 5e 68 22 d4 c5
 [745] fa bf 54 b6 64 72 5e 79 20 74 b7 9a 94 f1 6c 1a e2 53 9f b0 fa 00 f6 cc
 [769] a3 71 d6 cd 5c cd d7 cb e7 d7 f7 70 58 79 41 c5 b3 1d 99 39 0f 07 b8 2b
 [793] b7 d0 43 08 17 02 81 80 32 0d e4 d4 90 47 58 da 5d a7 2c 2c 1e 15 1a 66
 [817] f2 06 26 33 bb c6 be b6 f6 31 9b 50 dd 7c b3 43 0a e9 ec 72 6a 2a c0 3a
 [841] 9a 2c 29 5b cb 3a 7f 74 67 36 68 eb c8 50 2e a1 36 44 8f b1 24 65 82 03
 [865] 35 bf 33 c3 cc 5d 02 95 62 d3 1b 37 c8 d6 8c 90 7c fd 19 73 ba 9e e3 7a
 [889] f0 66 73 46 7d 94 15 56 d9 88 88 dc 0a df 19 13 c0 00 0f a3 56 7b 4e 3a
 [913] 3c e3 6e 44 00 c6 1a d5 45 17 11 a6 ce ee 98 13 02 81 80 51 b2 04 a9 23
 [937] 07 ad 2f c7 a7 54 02 98 ee 11 b7 ef c6 d4 58 0c 78 80 99 88 b8 4c 01 e0
 [961] 11 f1 53 fe 4f 05 94 05 b3 d0 95 fc 9a b6 85 1a 8a d7 8f 9b 81 50 ae 01
 [985] 65 41 c0 24 e1 d9 61 18 a6 0c 43 20 be 1d cc d6 a9 86 8f 28 aa d9 bc 81
[1009] 8d d3 9a 1d a7 10 c0 8c 8b 03 d0 01 37 94 15 7e 71 d4 f3 56 3f c0 c5 86
[1033] 1d fb 25 b3 67 63 8e ba 76 e3 ab e5 a6 ef 18 4e 6e b7 77 07 f2 49 45 a9
[1057] 27 e8 21 02 81 81 00 aa d3 5b 9f b6 03 4f a3 76 10 67 8d 79 8c 6e f6 c9
[1081] 49 5f bf 10 cd 98 59 b1 6f b9 79 c4 e7 3b 33 5c 8a 50 86 9d 7b db 27 d0
[1105] 04 d1 37 d5 36 d8 a4 a2 20 31 62 d3 8f a1 68 d5 61 1f 9a 7b ac 7e 9e 15
[1129] c3 9c f9 4c ea b5 fa 15 47 71 4d 0a 81 96 e7 7a cf c4 8f 87 7a 24 8b 5e
[1153] c0 b0 94 a4 83 1b 48 2c 80 7b 1e 1d e0 ed 61 61 88 04 2c 6d 1d 66 87 ac
[1177] 0c 9c 75 0e ee c9 39 0f 31 da 06 74 07 5b 3e
attr(,"class")
[1] "private.key.DER"
> PKI.load.key(file=fn.priv.pem)
<pointer: 0x5602a9ed6f50>
attr(,"class")
[1] "private.key"
> PKI.load.key(file=fn.priv.der, format="DER", private=TRUE)
<pointer: 0x5602a9ec86b0>
attr(,"class")
[1] "private.key"
> fn.pub.pem <- tempfile()
> PKI.save.key(key, target=fn.pub.pem, private=FALSE)
[1] "-----BEGIN PUBLIC KEY-----"                                      
[2] "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArcgnON1kcq56MCLW6mTf"
[3] "Q7510GuMXUVWabhaaaju0jSVpA7jUSN5y5V/IiPixYJfpmmFJ0BviXgjjbjr5IH2"
[4] "jFmEkkNEEslXDOxWWL/IbGILl8A/tMRQ0PIQm4dSvTPOEJjQ32nBuZNA4KJdXgG8"
[5] "FgYY1lw3P31iuzcowEy/oovPEBLjIGB2IB7DCBSTLpz/s/PcL+dVpRZPZFx3I+Zg"
[6] "7liq1POi5L9wS6ZOZvh8GAbSUeP5mmwDfrZhD4Lr5SEOTTW2YCsvqAVTO3hiFt+6"
[7] "VTI7zLwFDy0d6obRwwd7BFNG5/HZ8f6Yns3br6EHvAOgMi2syhtXNEZLA9ICTdjh"
[8] "XQIDAQAB"                                                        
[9] "-----END PUBLIC KEY-----"                                        
> fn.pub.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.pub.der, private=FALSE)
  [1] 30 82 01 22 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 82 01 0f 00 30
 [26] 82 01 0a 02 82 01 01 00 ad c8 27 38 dd 64 72 ae 7a 30 22 d6 ea 64 df 43 be
 [51] 75 d0 6b 8c 5d 45 56 69 b8 5a 69 a8 ee d2 34 95 a4 0e e3 51 23 79 cb 95 7f
 [76] 22 23 e2 c5 82 5f a6 69 85 27 40 6f 89 78 23 8d b8 eb e4 81 f6 8c 59 84 92
[101] 43 44 12 c9 57 0c ec 56 58 bf c8 6c 62 0b 97 c0 3f b4 c4 50 d0 f2 10 9b 87
[126] 52 bd 33 ce 10 98 d0 df 69 c1 b9 93 40 e0 a2 5d 5e 01 bc 16 06 18 d6 5c 37
[151] 3f 7d 62 bb 37 28 c0 4c bf a2 8b cf 10 12 e3 20 60 76 20 1e c3 08 14 93 2e
[176] 9c ff b3 f3 dc 2f e7 55 a5 16 4f 64 5c 77 23 e6 60 ee 58 aa d4 f3 a2 e4 bf
[201] 70 4b a6 4e 66 f8 7c 18 06 d2 51 e3 f9 9a 6c 03 7e b6 61 0f 82 eb e5 21 0e
[226] 4d 35 b6 60 2b 2f a8 05 53 3b 78 62 16 df ba 55 32 3b cc bc 05 0f 2d 1d ea
[251] 86 d1 c3 07 7b 04 53 46 e7 f1 d9 f1 fe 98 9e cd db af a1 07 bc 03 a0 32 2d
[276] ac ca 1b 57 34 46 4b 03 d2 02 4d d8 e1 5d 02 03 01 00 01
attr(,"class")
[1] "public.key.DER"
> PKI.load.key(file=fn.pub.pem)
<pointer: 0x5602a77f2ad0>
attr(,"class")
[1] "public.key"
> PKI.load.key(file=fn.pub.der, format="DER", private=FALSE)
<pointer: 0x5602a8174660>
attr(,"class")
[1] "public.key"
> 
> info("gmp")
 -- gmp
> if (requireNamespace("gmp", quietly=TRUE)) {
+     PKI.mkRSApubkey(gmp::as.bigz("119445732379544598056145200053932732877863846799652384989588303737527328743970559883211146487286317168142202446955508902936035124709397221178664495721428029984726868375359168203283442617134197706515425366188396513684446494070223079865755643116690165578452542158755074958452695530623055205290232290667934914919"))
+ } else {
+     warn("gmp not found, skipping bignum tests")
+ }
  [1] 30 81 9f 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 81 8d 00 30 81 89
 [26] 02 81 81 00 aa 18 ab a4 3b 50 de ef 38 59 8f af 87 d2 ab 63 4e 45 71 c1 30
 [51] a9 bc a7 b8 78 26 74 14 fa ab 8b 47 1b d8 96 5f 5c 9f c3 81 84 85 ea f5 29
 [76] c2 62 46 f3 05 50 64 a8 de 19 c8 c3 38 be 54 96 cb ae b0 59 dc 0b 35 81 43
[101] b4 4a 35 44 9e b2 64 11 31 21 a4 55 bd 7f de 3f ac 91 9e 94 b5 6f b9 bb 4f
[126] 65 1c db 23 ea d4 39 d6 cd 52 3e b0 81 91 e7 5b 35 fd 13 a7 41 9b 30 90 f2
[151] 47 87 bd 4f 4e 19 67 02 03 01 00 01
> 
> info("Ciphers")
 -- Ciphers
> skey <- PKI.random(256)
> for (cipher in c("aes256ecb", "aes256ofb", "bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(cipher, all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher), skey, cipher)[1:4] == charToRaw("foo!")))
   .  aes256ecb 
   .  aes256ofb 
   .  bfcbc 
   .  bfecb 
   .  bfofb 
   .  bfcfb 
> iv <- PKI.random(256)
> for (cipher in c("bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(paste0(cipher, " (with IV)"),
+                   all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher, iv=iv), skey, cipher, iv=iv)[1:4] == charToRaw("foo!")))
   .  bfcbc (with IV) 
   .  bfecb (with IV) 
   .  bfofb (with IV) 
   .  bfcfb (with IV) 
> 
> info("ASN.1")
 -- ASN.1
> 
> assert("ASN.1 encode/decode", 
+ { d <- ASN1.decode(ASN1.encode(ASN1.item(0:255, 3L)))
+   ASN1.type(d) == 3L && all(d == as.raw(0:255)) })
   .  ASN.1 encode/decode 
> 
> info("Tar ball signing")
 -- Tar ball signing
> tmpfn <- c(fn.pub.der, fn.pub.pem, fn.priv.der, fn.priv.pem)
> fn <- tempfile()
> ## on some systems using abs paths can break 100 byte limit
> ## so we must do this in the tempdir
> wd <- getwd()
> td <- tempdir()
> setwd(td)
> tar(fn, basename(tmpfn), "none")
> PKI.sign.tar(fn, key)
> PKI.verify.tar(fn, key)
[1] TRUE
> setwd(wd)
> 
> unlink(c(fn, tmpfn))
> 
