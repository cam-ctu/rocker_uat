
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## simple test suite - avoid testthat! It has an insane amount of
> ## unnecessary dependencies. A test package should have exactly 0
> 
> assert <- function(msg, what) {
+     cat("   . ", msg,"\n")
+     stopifnot(what)
+     .GlobalEnv$ok <- .GlobalEnv$ok + 1L
+ }
> 
> xfail <- function(...) suppressWarnings(tryCatch({ ...; FALSE }, error=function(e) TRUE))
> 
> ## none of these are fatal
> info <- function(...) message(" -- ", ...)
> err  <- function(...) message(" ** ERROR: ", ...)
> warn <- function(...) message(" !! ", ...)
> 
> ## all warnings (unless suppressed) are errors
> options(warn=2)
> 
> library(PKI)
Loading required package: base64enc
> 
> .GlobalEnv$ok <- 0L
> 
> ## Majority of tests are in th3 examples,
> ## so we won't repeat those, but some special cases
> ## not covered there as well as expected failures
> 
> info("Checking failure paths")
 -- Checking failure paths
> xfail(PKI.load.cert(what="foo", file="bar")) ## set both what and file
[1] TRUE
> xfail(PKI.load.cert("foo", "DER")) ## binary format with text
[1] TRUE
> xfail(PKI.load.cert("nothing")) ## invalid content
[1] TRUE
> xfail(PKI.digest("foo", "bar")) ## invalid hash spec
[1] TRUE
> xfail(PKI.load.key(what="foo", file="bar"))
[1] TRUE
> xfail(PKI:::PKI.decode.SSH2(fn.priv.der)) ## try to load invalid content
[1] TRUE
> 
> info("Checking key paths via files/connections")
 -- Checking key paths via files/connections
> key <- PKI.genRSAkey(bits = 2048L)
> fn.priv.pem <- tempfile()
> PKI.save.key(key, target=fn.priv.pem)
 [1] "-----BEGIN RSA PRIVATE KEY-----"                                 
 [2] "MIIEpQIBAAKCAQEAvMkS+VGPY7i2LFWNjZBV5jCsEfi/5DFtijePj1M4jU4R90TL"
 [3] "137izd00lu24LwbAP1wUDWrbpY25fXFEnxnSN1rJmnL9pwbubm+JxTOYi03PA1Bg"
 [4] "xYiG9hkyZ7dt+0XcxvCV21P9e41/cPN7EJMG1g40Gb9JN7LkbThJo9FZ9qx3i3jA"
 [5] "YtmztxA65VB1TRv3E8YeLQVXXQddeN4QhWrpRMUQqnZNQdxQJfXInx4VfvyN4Rfh"
 [6] "yde81J9ss68dxLf6WL5Cs0e18qkGtWHdLd59f+iq3WCGjW3FdqkwVVmjDOVUQ6cY"
 [7] "J+VOsBdF/OnxrmhJEdIOt64CvewSQquHVzdcDwIDAQABAoIBABGKl24+I1YvQBIf"
 [8] "gu8f9bNVW2+yDtZ7t0NsBTValLsggW/Z3xzvZ9CcGLpbbU1FUdCxVBWpE66u3Ajp"
 [9] "YOhtpEhLcccdny8JaFcvmvwNXsO236Dds5g3Jt8wGSxk8V2zMJ/1k98Uz01PKQPM"
[10] "Q+eW2cBDAplP2lRIFYyGeeU0Wykd1Xz+iaA2abd8T99F92/ycFWnkcJ/EHtwph/h"
[11] "x65HUdcZRS/AtBaCuy01PeyI7PBAxIMYVJ1TvRme14IHpRRJUYdl2uYDK+A9R1lO"
[12] "zIVGb/EHh92JHSPJtv1OUBAsbTNxx8UM6sY5EfHuTQ/ygeri8gYzTCdP+AnNXz3n"
[13] "vWtzJ7ECgYEA01WWBzKidIdei18vS8V20D6bs/5HxDVnlGKxV8BabaRmvAaP8v1I"
[14] "3U+PU+Zqk+wzpeN8aftgTYYHTcnGGIBptu/kY8CU9GSWMNYtaheddc0hZCUWnUg3"
[15] "D8TQF7VUEbbvFciGhckLGFyiXR/Lo8qTvN4v0yvbyuj5OB/n7Xx+NHECgYEA5K92"
[16] "h4zTziAIe3mxTpzGdMqIoQqdalrtjlXDeRkvgMz9JOdAeJyHxlSmA6T4ThaiHRJG"
[17] "v9sQRdHi4fuU2k4ls/C/tbZ5QCkxb8EOaTRbK2mRUqgFMK3AUIvvyDQ2MRdzJ9mK"
[18] "TwRpKSWEofl9/fTHKWxvyo9pD/eHq5t7Qhwc2H8CgYEAmVUZm3NTh3TIVhrjt/g3"
[19] "cnRaiEfQTj3pPzI0NdTsR2zm1Tl1q/m1qk0VUux1G4pfFtds54BpqRW7qubhAdn5"
[20] "2a9IaE/MQ13P0vMy1Cz6JASHW5/FPqystpY33VvE+W1fHtD1OZBaqnxbmXF+UQKk"
[21] "Gn6i+HZz7E8Is34Cyr5u2yECgYEAgJIdw8vrcSIVYsZiZ15BPXx5IIGFSzxf/vw8"
[22] "8CK20GVvlYXme2kV9O22gKoJaG3VKx8RY+BX38lHE+KMJ8hz7hzWy+URen8uajRS"
[23] "U9e5wkiSCbSpZlrpmt9yKk8ggK08cxUda5uBPD75uM86hMNQDfwHRg0m9nEmd9bs"
[24] "j5iapyUCgYEApgrcMb1jowTCgIG+QR6thGqP8KVblMYrkQfoLh01ZqVSN6Mvl7rT"
[25] "CqmPCeDhbp6zfU1elpmxIKpTf8sxJoBYkM1i8S+eo7nRc3XHZbeFXpmC2QtuYUug"
[26] "yQQoampCXbAl9+dCkyrOvF6SSI7bIGs9SNpcXBga5d1i9KotkKlucMo="        
[27] "-----END RSA PRIVATE KEY-----"                                   
> fn.priv.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.priv.der)
   [1] 30 82 04 a5 02 01 00 02 82 01 01 00 bc c9 12 f9 51 8f 63 b8 b6 2c 55 8d
  [25] 8d 90 55 e6 30 ac 11 f8 bf e4 31 6d 8a 37 8f 8f 53 38 8d 4e 11 f7 44 cb
  [49] d7 7e e2 cd dd 34 96 ed b8 2f 06 c0 3f 5c 14 0d 6a db a5 8d b9 7d 71 44
  [73] 9f 19 d2 37 5a c9 9a 72 fd a7 06 ee 6e 6f 89 c5 33 98 8b 4d cf 03 50 60
  [97] c5 88 86 f6 19 32 67 b7 6d fb 45 dc c6 f0 95 db 53 fd 7b 8d 7f 70 f3 7b
 [121] 10 93 06 d6 0e 34 19 bf 49 37 b2 e4 6d 38 49 a3 d1 59 f6 ac 77 8b 78 c0
 [145] 62 d9 b3 b7 10 3a e5 50 75 4d 1b f7 13 c6 1e 2d 05 57 5d 07 5d 78 de 10
 [169] 85 6a e9 44 c5 10 aa 76 4d 41 dc 50 25 f5 c8 9f 1e 15 7e fc 8d e1 17 e1
 [193] c9 d7 bc d4 9f 6c b3 af 1d c4 b7 fa 58 be 42 b3 47 b5 f2 a9 06 b5 61 dd
 [217] 2d de 7d 7f e8 aa dd 60 86 8d 6d c5 76 a9 30 55 59 a3 0c e5 54 43 a7 18
 [241] 27 e5 4e b0 17 45 fc e9 f1 ae 68 49 11 d2 0e b7 ae 02 bd ec 12 42 ab 87
 [265] 57 37 5c 0f 02 03 01 00 01 02 82 01 00 11 8a 97 6e 3e 23 56 2f 40 12 1f
 [289] 82 ef 1f f5 b3 55 5b 6f b2 0e d6 7b b7 43 6c 05 35 5a 94 bb 20 81 6f d9
 [313] df 1c ef 67 d0 9c 18 ba 5b 6d 4d 45 51 d0 b1 54 15 a9 13 ae ae dc 08 e9
 [337] 60 e8 6d a4 48 4b 71 c7 1d 9f 2f 09 68 57 2f 9a fc 0d 5e c3 b6 df a0 dd
 [361] b3 98 37 26 df 30 19 2c 64 f1 5d b3 30 9f f5 93 df 14 cf 4d 4f 29 03 cc
 [385] 43 e7 96 d9 c0 43 02 99 4f da 54 48 15 8c 86 79 e5 34 5b 29 1d d5 7c fe
 [409] 89 a0 36 69 b7 7c 4f df 45 f7 6f f2 70 55 a7 91 c2 7f 10 7b 70 a6 1f e1
 [433] c7 ae 47 51 d7 19 45 2f c0 b4 16 82 bb 2d 35 3d ec 88 ec f0 40 c4 83 18
 [457] 54 9d 53 bd 19 9e d7 82 07 a5 14 49 51 87 65 da e6 03 2b e0 3d 47 59 4e
 [481] cc 85 46 6f f1 07 87 dd 89 1d 23 c9 b6 fd 4e 50 10 2c 6d 33 71 c7 c5 0c
 [505] ea c6 39 11 f1 ee 4d 0f f2 81 ea e2 f2 06 33 4c 27 4f f8 09 cd 5f 3d e7
 [529] bd 6b 73 27 b1 02 81 81 00 d3 55 96 07 32 a2 74 87 5e 8b 5f 2f 4b c5 76
 [553] d0 3e 9b b3 fe 47 c4 35 67 94 62 b1 57 c0 5a 6d a4 66 bc 06 8f f2 fd 48
 [577] dd 4f 8f 53 e6 6a 93 ec 33 a5 e3 7c 69 fb 60 4d 86 07 4d c9 c6 18 80 69
 [601] b6 ef e4 63 c0 94 f4 64 96 30 d6 2d 6a 17 9d 75 cd 21 64 25 16 9d 48 37
 [625] 0f c4 d0 17 b5 54 11 b6 ef 15 c8 86 85 c9 0b 18 5c a2 5d 1f cb a3 ca 93
 [649] bc de 2f d3 2b db ca e8 f9 38 1f e7 ed 7c 7e 34 71 02 81 81 00 e4 af 76
 [673] 87 8c d3 ce 20 08 7b 79 b1 4e 9c c6 74 ca 88 a1 0a 9d 6a 5a ed 8e 55 c3
 [697] 79 19 2f 80 cc fd 24 e7 40 78 9c 87 c6 54 a6 03 a4 f8 4e 16 a2 1d 12 46
 [721] bf db 10 45 d1 e2 e1 fb 94 da 4e 25 b3 f0 bf b5 b6 79 40 29 31 6f c1 0e
 [745] 69 34 5b 2b 69 91 52 a8 05 30 ad c0 50 8b ef c8 34 36 31 17 73 27 d9 8a
 [769] 4f 04 69 29 25 84 a1 f9 7d fd f4 c7 29 6c 6f ca 8f 69 0f f7 87 ab 9b 7b
 [793] 42 1c 1c d8 7f 02 81 81 00 99 55 19 9b 73 53 87 74 c8 56 1a e3 b7 f8 37
 [817] 72 74 5a 88 47 d0 4e 3d e9 3f 32 34 35 d4 ec 47 6c e6 d5 39 75 ab f9 b5
 [841] aa 4d 15 52 ec 75 1b 8a 5f 16 d7 6c e7 80 69 a9 15 bb aa e6 e1 01 d9 f9
 [865] d9 af 48 68 4f cc 43 5d cf d2 f3 32 d4 2c fa 24 04 87 5b 9f c5 3e ac ac
 [889] b6 96 37 dd 5b c4 f9 6d 5f 1e d0 f5 39 90 5a aa 7c 5b 99 71 7e 51 02 a4
 [913] 1a 7e a2 f8 76 73 ec 4f 08 b3 7e 02 ca be 6e db 21 02 81 81 00 80 92 1d
 [937] c3 cb eb 71 22 15 62 c6 62 67 5e 41 3d 7c 79 20 81 85 4b 3c 5f fe fc 3c
 [961] f0 22 b6 d0 65 6f 95 85 e6 7b 69 15 f4 ed b6 80 aa 09 68 6d d5 2b 1f 11
 [985] 63 e0 57 df c9 47 13 e2 8c 27 c8 73 ee 1c d6 cb e5 11 7a 7f 2e 6a 34 52
[1009] 53 d7 b9 c2 48 92 09 b4 a9 66 5a e9 9a df 72 2a 4f 20 80 ad 3c 73 15 1d
[1033] 6b 9b 81 3c 3e f9 b8 cf 3a 84 c3 50 0d fc 07 46 0d 26 f6 71 26 77 d6 ec
[1057] 8f 98 9a a7 25 02 81 81 00 a6 0a dc 31 bd 63 a3 04 c2 80 81 be 41 1e ad
[1081] 84 6a 8f f0 a5 5b 94 c6 2b 91 07 e8 2e 1d 35 66 a5 52 37 a3 2f 97 ba d3
[1105] 0a a9 8f 09 e0 e1 6e 9e b3 7d 4d 5e 96 99 b1 20 aa 53 7f cb 31 26 80 58
[1129] 90 cd 62 f1 2f 9e a3 b9 d1 73 75 c7 65 b7 85 5e 99 82 d9 0b 6e 61 4b a0
[1153] c9 04 28 6a 6a 42 5d b0 25 f7 e7 42 93 2a ce bc 5e 92 48 8e db 20 6b 3d
[1177] 48 da 5c 5c 18 1a e5 dd 62 f4 aa 2d 90 a9 6e 70 ca
attr(,"class")
[1] "private.key.DER"
> PKI.load.key(file=fn.priv.pem)
<pointer: 0x55688b9eff90>
attr(,"class")
[1] "private.key"
> PKI.load.key(file=fn.priv.der, format="DER", private=TRUE)
<pointer: 0x55688b9e16f0>
attr(,"class")
[1] "private.key"
> fn.pub.pem <- tempfile()
> PKI.save.key(key, target=fn.pub.pem, private=FALSE)
[1] "-----BEGIN PUBLIC KEY-----"                                      
[2] "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvMkS+VGPY7i2LFWNjZBV"
[3] "5jCsEfi/5DFtijePj1M4jU4R90TL137izd00lu24LwbAP1wUDWrbpY25fXFEnxnS"
[4] "N1rJmnL9pwbubm+JxTOYi03PA1BgxYiG9hkyZ7dt+0XcxvCV21P9e41/cPN7EJMG"
[5] "1g40Gb9JN7LkbThJo9FZ9qx3i3jAYtmztxA65VB1TRv3E8YeLQVXXQddeN4QhWrp"
[6] "RMUQqnZNQdxQJfXInx4VfvyN4Rfhyde81J9ss68dxLf6WL5Cs0e18qkGtWHdLd59"
[7] "f+iq3WCGjW3FdqkwVVmjDOVUQ6cYJ+VOsBdF/OnxrmhJEdIOt64CvewSQquHVzdc"
[8] "DwIDAQAB"                                                        
[9] "-----END PUBLIC KEY-----"                                        
> fn.pub.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.pub.der, private=FALSE)
  [1] 30 82 01 22 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 82 01 0f 00 30
 [26] 82 01 0a 02 82 01 01 00 bc c9 12 f9 51 8f 63 b8 b6 2c 55 8d 8d 90 55 e6 30
 [51] ac 11 f8 bf e4 31 6d 8a 37 8f 8f 53 38 8d 4e 11 f7 44 cb d7 7e e2 cd dd 34
 [76] 96 ed b8 2f 06 c0 3f 5c 14 0d 6a db a5 8d b9 7d 71 44 9f 19 d2 37 5a c9 9a
[101] 72 fd a7 06 ee 6e 6f 89 c5 33 98 8b 4d cf 03 50 60 c5 88 86 f6 19 32 67 b7
[126] 6d fb 45 dc c6 f0 95 db 53 fd 7b 8d 7f 70 f3 7b 10 93 06 d6 0e 34 19 bf 49
[151] 37 b2 e4 6d 38 49 a3 d1 59 f6 ac 77 8b 78 c0 62 d9 b3 b7 10 3a e5 50 75 4d
[176] 1b f7 13 c6 1e 2d 05 57 5d 07 5d 78 de 10 85 6a e9 44 c5 10 aa 76 4d 41 dc
[201] 50 25 f5 c8 9f 1e 15 7e fc 8d e1 17 e1 c9 d7 bc d4 9f 6c b3 af 1d c4 b7 fa
[226] 58 be 42 b3 47 b5 f2 a9 06 b5 61 dd 2d de 7d 7f e8 aa dd 60 86 8d 6d c5 76
[251] a9 30 55 59 a3 0c e5 54 43 a7 18 27 e5 4e b0 17 45 fc e9 f1 ae 68 49 11 d2
[276] 0e b7 ae 02 bd ec 12 42 ab 87 57 37 5c 0f 02 03 01 00 01
attr(,"class")
[1] "public.key.DER"
> PKI.load.key(file=fn.pub.pem)
<pointer: 0x55688930bad0>
attr(,"class")
[1] "public.key"
> PKI.load.key(file=fn.pub.der, format="DER", private=FALSE)
<pointer: 0x556889c8d660>
attr(,"class")
[1] "public.key"
> 
> info("gmp")
 -- gmp
> if (requireNamespace("gmp", quietly=TRUE)) {
+     PKI.mkRSApubkey(gmp::as.bigz("119445732379544598056145200053932732877863846799652384989588303737527328743970559883211146487286317168142202446955508902936035124709397221178664495721428029984726868375359168203283442617134197706515425366188396513684446494070223079865755643116690165578452542158755074958452695530623055205290232290667934914919"))
+ } else {
+     warn("gmp not found, skipping bignum tests")
+ }
  [1] 30 81 9f 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 81 8d 00 30 81 89
 [26] 02 81 81 00 aa 18 ab a4 3b 50 de ef 38 59 8f af 87 d2 ab 63 4e 45 71 c1 30
 [51] a9 bc a7 b8 78 26 74 14 fa ab 8b 47 1b d8 96 5f 5c 9f c3 81 84 85 ea f5 29
 [76] c2 62 46 f3 05 50 64 a8 de 19 c8 c3 38 be 54 96 cb ae b0 59 dc 0b 35 81 43
[101] b4 4a 35 44 9e b2 64 11 31 21 a4 55 bd 7f de 3f ac 91 9e 94 b5 6f b9 bb 4f
[126] 65 1c db 23 ea d4 39 d6 cd 52 3e b0 81 91 e7 5b 35 fd 13 a7 41 9b 30 90 f2
[151] 47 87 bd 4f 4e 19 67 02 03 01 00 01
> 
> info("Ciphers")
 -- Ciphers
> skey <- PKI.random(256)
> for (cipher in c("aes256ecb", "aes256ofb", "bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(cipher, all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher), skey, cipher)[1:4] == charToRaw("foo!")))
   .  aes256ecb 
   .  aes256ofb 
   .  bfcbc 
   .  bfecb 
   .  bfofb 
   .  bfcfb 
> iv <- PKI.random(256)
> for (cipher in c("bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(paste0(cipher, " (with IV)"),
+                   all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher, iv=iv), skey, cipher, iv=iv)[1:4] == charToRaw("foo!")))
   .  bfcbc (with IV) 
   .  bfecb (with IV) 
   .  bfofb (with IV) 
   .  bfcfb (with IV) 
> 
> info("ASN.1")
 -- ASN.1
> 
> assert("ASN.1 encode/decode", 
+ { d <- ASN1.decode(ASN1.encode(ASN1.item(0:255, 3L)))
+   ASN1.type(d) == 3L && all(d == as.raw(0:255)) })
   .  ASN.1 encode/decode 
> 
> info("Tar ball signing")
 -- Tar ball signing
> tmpfn <- c(fn.pub.der, fn.pub.pem, fn.priv.der, fn.priv.pem)
> fn <- tempfile()
> ## on some systems using abs paths can break 100 byte limit
> ## so we must do this in the tempdir
> wd <- getwd()
> td <- tempdir()
> setwd(td)
> tar(fn, basename(tmpfn), "none")
> PKI.sign.tar(fn, key)
> PKI.verify.tar(fn, key)
[1] TRUE
> setwd(wd)
> 
> unlink(c(fn, tmpfn))
> 
