
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(testthat)
> library(ps)
> 
> if (ps::ps_is_supported() && Sys.getenv("R_COVR", "") != "true" &&
+     Sys.getenv("NOT_CRAN") != "" ) {
+   reporter <- ps::CleanupReporter(testthat::SummaryReporter)$new()
+ } else {
+   reporter <- "summary"
+ }
> 
> if (ps_is_supported()) test_check("ps", reporter = reporter)
cleanup-reporter: 1.......................................................SSS
common: .....................................................2.SSSSS
connections: ...............SSSSSSSSS
finished: S
kill-tree: ....SSSSSSS
linux: ......S
macos: 
pid-reuse: .........................................345
posix-zombie: ...............................................................
posix: .S..........
ps: .
system: ..................
utils: ................
windows: 
winver: ......

══ Skipped ═════════════════════════════════════════════════════════════════════
1. Network cleanup, test, fail ('test-cleanup-reporter.R:348:3') - Reason: On CRAN

2. Network cleanup, unit: testsuite ('test-cleanup-reporter.R:371:3') - Reason: On CRAN

3. Network connections already open are ignored ('test-cleanup-reporter.R:399:3') - Reason: On CRAN

4. children ('test-common.R:236:3') - Reason: On CRAN

5. num_fds ('test-common.R:265:3') - Reason: On CRAN

6. open_files ('test-common.R:281:3') - Reason: On CRAN

7. interrupt ('test-common.R:298:3') - Reason: On CRAN

8. cpu affinity ('test-common.R:315:3') - Reason: On CRAN

9. UNIX sockets with path ('test-connections.R:43:3') - Reason: socat is not available

10. TCP ('test-connections.R:67:3') - Reason: On CRAN

11. TCP on loopback ('test-connections.R:87:3') - Reason: socat is not available

12. UDP ('test-connections.R:121:3') - Reason: On CRAN

13. UDP on loopback ('test-connections.R:147:3') - Reason: socat is not available

14. TCP6 ('test-connections.R:179:3') - Reason: socat is not available

15. TCP6 on loopback ('test-connections.R:200:3') - Reason: socat is not available

16. UDP6 ('test-connections.R:238:3') - Reason: Needs working IPv6 connection

17. UDP6 on loopback ('test-connections.R:263:3') - Reason: socat is not available

18. process already finished ('test-finished.R:3:3') - Reason: On CRAN

19. kill_tree ('test-kill-tree.R:12:3') - Reason: On CRAN

20. kill_tree, grandchild ('test-kill-tree.R:59:3') - Reason: On CRAN

21. kill_tree, orphaned grandchild ('test-kill-tree.R:127:3') - Reason: On CRAN

22. with_process_cleanup ('test-kill-tree.R:155:3') - Reason: On CRAN

23. find_tree ('test-kill-tree.R:182:3') - Reason: On CRAN

24. find_tree, grandchild ('test-kill-tree.R:207:3') - Reason: On CRAN

25. find_tree, orphaned grandchild ('test-kill-tree.R:255:3') - Reason: On CRAN

26. memory_info ('test-linux.R:30:3') - Reason: On CRAN

27. terminal ('test-posix.R:14:3') - Reason: no terminal

══ Failed ══════════════════════════════════════════════════════════════════════
── 1. Error ('test-cleanup-reporter.R:9:9'): unit: test, mode: cleanup-fail ────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::test_check("ps", reporter = reporter)
  2. │ └─testthat::test_dir(...)
  3. │   └─testthat:::test_files(...)
  4. │     └─testthat:::test_files_serial(...)
  5. │       ├─testthat::with_reporter(...)
  6. │       │ └─base::tryCatch(...)
  7. │       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  8. │       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  9. │       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 10. │       └─base::lapply(...)
 11. │         └─testthat (local) FUN(X[[i]], ...)
 12. │           └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 13. │             └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 14. │               ├─base::tryCatch(...)
 15. │               │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 16. │               │   ├─base (local) tryCatchOne(...)
 17. │               │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 18. │               │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 19. │               │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 20. │               │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 21. │               ├─base::withCallingHandlers(...)
 22. │               └─base::eval(code, test_env)
 23. │                 └─base::eval(code, test_env)
 24. │                   └─testthat::test_that(...) at test-cleanup-reporter.R:2:1
 25. │                     └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 26. │                       ├─base::tryCatch(...)
 27. │                       │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 28. │                       │   ├─base (local) tryCatchOne(...)
 29. │                       │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 30. │                       │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 31. │                       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 32. │                       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 33. │                       ├─base::withCallingHandlers(...)
 34. │                       └─base::eval(code, test_env)
 35. │                         └─base::eval(code, test_env)
 36. │                           ├─testthat::expect_failure(...) at test-cleanup-reporter.R:6:3
 37. │                           │ └─testthat::capture_expectation(expr)
 38. │                           │   └─base::tryCatch(...)
 39. │                           │     └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 40. │                           │       └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 41. │                           │         └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 42. │                           ├─testthat::with_reporter(...)
 43. │                           │ └─base::tryCatch(...)
 44. │                           │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 45. │                           │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 46. │                           │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 47. │                           └─testthat::test_that(...) at test-cleanup-reporter.R:9:9
 48. │                             └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 49. │                               └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 50. │                                 └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 51. └─base::loadNamespace(x)
 52.   ├─base::namespaceImportFrom(...)
 53.   │ └─base::asNamespace(ns)
 54.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 55.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 56.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 57.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 58.           └─base::get(genname, envir = envir)

── 2. Failure ('test-common.R:227:5'): kill ────────────────────────────────────
p1$get_exit_status() (`actual`) not equal to -signals()$SIGKILL (`expected`).

  `actual`: -15
`expected`:  -9

── 3. Failure ('test-pid-reuse.R:24:5'): pid reuse ─────────────────────────────
`err` is not an S3 object
Backtrace:
    ▆
 1. └─ps (local) chk(ps_kill(p)) at test-pid-reuse.R:43:3
 2.   └─testthat::expect_s3_class(err, "no_such_process") at test-pid-reuse.R:24:5

── 4. Failure ('test-pid-reuse.R:25:5'): pid reuse ─────────────────────────────
`err` is not an S3 object
Backtrace:
    ▆
 1. └─ps (local) chk(ps_kill(p)) at test-pid-reuse.R:43:3
 2.   └─testthat::expect_s3_class(err, "ps_error") at test-pid-reuse.R:25:5

── 5. Error ('test-pid-reuse.R:26:5'): pid reuse ───────────────────────────────
Error in `err$pid`: $ operator is invalid for atomic vectors
Backtrace:
    ▆
 1. └─ps (local) chk(ps_kill(p)) at test-pid-reuse.R:43:3
 2.   └─testthat::expect_equal(err$pid, zpid) at test-pid-reuse.R:26:5
 3.     └─testthat::quasi_label(enquo(object), label, arg = "object")
 4.       └─rlang::eval_bare(expr, quo_get_env(quo))

══ DONE ════════════════════════════════════════════════════════════════════════
Keep trying!
Error: Test failures
Execution halted
