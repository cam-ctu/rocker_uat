
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "MEMSS"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('MEMSS')
Loading required package: lme4
Loading required package: Matrix

Attaching package: ‘MEMSS’

The following objects are masked from ‘package:datasets’:

    CO2, Orange, Theoph

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Alfalfa")
> ### * Alfalfa
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Alfalfa
> ### Title: Split-Plot Experiment on Varieties of Alfalfa
> ### Aliases: Alfalfa
> ### Keywords: datasets
> 
> ### ** Examples
> 
> str(Alfalfa)
'data.frame':	72 obs. of  4 variables:
 $ Variety: Factor w/ 3 levels "Ranger","Cossack",..: 3 3 3 3 3 3 3 3 3 3 ...
 $ Date   : Ord.factor w/ 4 levels "09-01"<"09-20"<..: 4 1 2 3 4 1 2 3 4 1 ...
 $ Block  : Factor w/ 6 levels "A","B","C","D",..: 1 1 1 1 2 2 2 2 3 3 ...
 $ Yield  : num  2.17 1.58 2.29 2.23 1.88 1.26 1.6 2.01 1.62 1.22 ...
> (m1 <- lmer(Yield ~ Variety * Date + (1|Block), Alfalfa, verbose = TRUE))
iteration: 1
	f(x) = 28.137495
iteration: 2
	f(x) = 28.287091
iteration: 3
	f(x) = 51.310633
iteration: 4
	f(x) = 27.627245
iteration: 5
	f(x) = 27.613790
iteration: 6
	f(x) = 27.595778
iteration: 7
	f(x) = 27.592135
iteration: 8
	f(x) = 27.591187
iteration: 9
	f(x) = 27.590782
iteration: 10
	f(x) = 27.590932
iteration: 11
	f(x) = 27.590767
iteration: 12
	f(x) = 27.590770
iteration: 13
	f(x) = 27.590767
Linear mixed model fit by REML ['lmerMod']
Formula: Yield ~ Variety * Date + (1 | Block)
   Data: Alfalfa
REML criterion at convergence: 27.5908
Random effects:
 Groups   Name        Std.Dev.
 Block    (Intercept) 0.2553  
 Residual             0.2183  
Number of obs: 72, groups:  Block, 6
Fixed Effects:
          (Intercept)         VarietyCossack           VarietyLadak  
              1.55250                0.01917                0.11375  
               Date.L                 Date.Q                 Date.C  
              0.22286                0.01167               -0.02012  
VarietyCossack:Date.L    VarietyLadak:Date.L  VarietyCossack:Date.Q  
              0.10286                0.19342               -0.08833  
  VarietyLadak:Date.Q  VarietyCossack:Date.C    VarietyLadak:Date.C  
             -0.16250                0.07901                0.04211  
> 
> 
> 
> cleanEx()
> nameEx("Assay")
> ### * Assay
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Assay
> ### Title: Bioassay on Cell Culture Plate
> ### Aliases: Assay
> ### Keywords: datasets
> 
> ### ** Examples
> 
> str(Assay)
'data.frame':	60 obs. of  4 variables:
 $ Block  : Factor w/ 2 levels "A","B": 1 1 1 1 1 1 1 1 1 1 ...
 $ sample : Factor w/ 6 levels "a","b","c","d",..: 1 1 1 1 1 2 2 2 2 2 ...
 $ dilut  : Ord.factor w/ 5 levels "1"<"2"<"3"<"4"<..: 1 2 3 4 5 1 2 3 4 5 ...
 $ logDens: num  -0.2332 -0.0566 0.2111 0.3464 0.5939 ...
> m1 <- lmer(logDens ~ sample * dilut + (1|Block) + (1|Block:sample) +
+            (1|Block:dilut), Assay, verbose = TRUE)
iteration: 1
	f(x) = -42.203699
iteration: 2
	f(x) = -37.271539
iteration: 3
	f(x) = -36.699140
iteration: 4
	f(x) = -42.183329
iteration: 5
	f(x) = -46.443195
iteration: 6
	f(x) = -54.636339
iteration: 7
	f(x) = -42.213097
iteration: 8
	f(x) = -67.262350
iteration: 9
	f(x) = -63.600502
iteration: 10
	f(x) = -64.346677
iteration: 11
	f(x) = -66.642085
iteration: 12
	f(x) = -65.490635
iteration: 13
	f(x) = -66.322028
iteration: 14
	f(x) = -67.278244
iteration: 15
	f(x) = -67.265772
iteration: 16
	f(x) = -66.483529
iteration: 17
	f(x) = -67.287346
iteration: 18
	f(x) = -67.285252
iteration: 19
	f(x) = -67.274303
iteration: 20
	f(x) = -67.290397
iteration: 21
	f(x) = -67.294412
iteration: 22
	f(x) = -67.299962
iteration: 23
	f(x) = -67.301978
iteration: 24
	f(x) = -67.302208
iteration: 25
	f(x) = -67.301175
iteration: 26
	f(x) = -67.301488
iteration: 27
	f(x) = -67.304254
iteration: 28
	f(x) = -67.326626
iteration: 29
	f(x) = -67.396181
iteration: 30
	f(x) = -67.366708
iteration: 31
	f(x) = -67.398463
iteration: 32
	f(x) = -67.406529
iteration: 33
	f(x) = -67.406889
iteration: 34
	f(x) = -67.403773
iteration: 35
	f(x) = -67.405318
iteration: 36
	f(x) = -67.402637
iteration: 37
	f(x) = -67.410748
iteration: 38
	f(x) = -67.411208
iteration: 39
	f(x) = -67.409571
iteration: 40
	f(x) = -67.412705
iteration: 41
	f(x) = -67.413906
iteration: 42
	f(x) = -67.412892
iteration: 43
	f(x) = -67.412817
iteration: 44
	f(x) = -67.414527
iteration: 45
	f(x) = -67.414602
iteration: 46
	f(x) = -67.415382
iteration: 47
	f(x) = -67.415769
iteration: 48
	f(x) = -67.415788
iteration: 49
	f(x) = -67.415839
iteration: 50
	f(x) = -67.415830
iteration: 51
	f(x) = -67.415732
iteration: 52
	f(x) = -67.415825
iteration: 53
	f(x) = -67.415722
iteration: 54
	f(x) = -67.415822
iteration: 55
	f(x) = -67.415832
iteration: 56
	f(x) = -67.415843
iteration: 57
	f(x) = -67.415844
iteration: 58
	f(x) = -67.415845
iteration: 59
	f(x) = -67.415841
iteration: 60
	f(x) = -67.415847
iteration: 61
	f(x) = -67.415847
iteration: 62
	f(x) = -67.415847
iteration: 63
	f(x) = -67.415848
iteration: 64
	f(x) = -67.415847
iteration: 65
	f(x) = -67.415848
iteration: 66
	f(x) = -67.415849
Warning in checkConv(attr(opt, "derivs"), opt$par, ctrl = control$checkConv,  :
  Model failed to converge with max|grad| = 0.0124562 (tol = 0.002, component 1)
> print(m1, corr = FALSE)
Linear mixed model fit by REML ['lmerMod']
Formula: logDens ~ sample * dilut + (1 | Block) + (1 | Block:sample) +  
    (1 | Block:dilut)
   Data: Assay
REML criterion at convergence: -67.4158
Random effects:
 Groups       Name        Std.Dev.
 Block:sample (Intercept) 0.02527 
 Block:dilut  (Intercept) 0.00911 
 Block        (Intercept) 0.00999 
 Residual                 0.04156 
Number of obs: 60, groups:  Block:sample, 12; Block:dilut, 10; Block, 2
Fixed Effects:
    (Intercept)          sampleb          samplec          sampled  
      0.1980322        0.0805331        0.1225386        0.1698639  
        samplee          samplef          dilut.L          dilut.Q  
     -0.0249165        0.1017819        0.5723827       -0.0395748  
        dilut.C          dilut^4  sampleb:dilut.L  samplec:dilut.L  
     -0.0053406        0.0054184       -0.0125464       -0.0415654  
sampled:dilut.L  samplee:dilut.L  samplef:dilut.L  sampleb:dilut.Q  
     -0.1179776        0.0376115        0.0164649       -0.0296982  
samplec:dilut.Q  sampled:dilut.Q  samplee:dilut.Q  samplef:dilut.Q  
     -0.0479069       -0.0930294        0.0199821       -0.0489915  
sampleb:dilut.C  samplec:dilut.C  sampled:dilut.C  samplee:dilut.C  
     -0.0472640       -0.0316570       -0.0451026       -0.0537023  
samplef:dilut.C  sampleb:dilut^4  samplec:dilut^4  sampled:dilut^4  
     -0.0265683       -0.0567816        0.0062408       -0.0110200  
samplee:dilut^4  samplef:dilut^4  
     -0.0220150       -0.0001167  
optimizer (nloptwrap) convergence code: 0 (OK) ; 0 optimizer warnings; 1 lme4 warnings 
> anova(m1)
Analysis of Variance Table
             npar  Sum Sq Mean Sq  F value
sample          5 0.09697 0.01939  11.2261
dilut           4 2.91023 0.72756 421.1603
sample:dilut   20 0.05552 0.00278   1.6071
> m2 <- lmer(logDens ~ sample + dilut + (1|Block) + (1|Block:sample) +
+            (1|Block:dilut), Assay, verbose = TRUE)
iteration: 1
	f(x) = -105.458329
iteration: 2
	f(x) = -100.304178
iteration: 3
	f(x) = -99.943317
iteration: 4
	f(x) = -105.437808
iteration: 5
	f(x) = -111.823441
iteration: 6
	f(x) = -118.055254
iteration: 7
	f(x) = -105.467797
iteration: 8
	f(x) = -133.741653
iteration: 9
	f(x) = -131.227211
iteration: 10
	f(x) = -131.798699
iteration: 11
	f(x) = -132.272942
iteration: 12
	f(x) = -130.659095
iteration: 13
	f(x) = -132.386595
iteration: 14
	f(x) = -133.859888
iteration: 15
	f(x) = -133.945734
iteration: 16
	f(x) = -133.951804
iteration: 17
	f(x) = -132.495650
iteration: 18
	f(x) = -133.965630
iteration: 19
	f(x) = -133.965814
iteration: 20
	f(x) = -133.966674
iteration: 21
	f(x) = -133.968544
iteration: 22
	f(x) = -133.970052
iteration: 23
	f(x) = -133.968688
iteration: 24
	f(x) = -133.938535
iteration: 25
	f(x) = -133.972425
iteration: 26
	f(x) = -133.972464
iteration: 27
	f(x) = -133.967589
iteration: 28
	f(x) = -133.967636
iteration: 29
	f(x) = -133.972306
iteration: 30
	f(x) = -133.972005
iteration: 31
	f(x) = -133.972417
iteration: 32
	f(x) = -133.972895
iteration: 33
	f(x) = -133.971627
iteration: 34
	f(x) = -133.972997
iteration: 35
	f(x) = -133.972960
iteration: 36
	f(x) = -133.972998
iteration: 37
	f(x) = -133.972828
iteration: 38
	f(x) = -133.973000
iteration: 39
	f(x) = -133.972969
iteration: 40
	f(x) = -133.972956
iteration: 41
	f(x) = -133.972994
iteration: 42
	f(x) = -133.973000
iteration: 43
	f(x) = -133.973000
iteration: 44
	f(x) = -133.973000
iteration: 45
	f(x) = -133.973000
iteration: 46
	f(x) = -133.973000
iteration: 47
	f(x) = -133.973000
boundary (singular) fit: see help('isSingular')
> print(m2, corr = FALSE)
Linear mixed model fit by REML ['lmerMod']
Formula: logDens ~ sample + dilut + (1 | Block) + (1 | Block:sample) +  
    (1 | Block:dilut)
   Data: Assay
REML criterion at convergence: -133.973
Random effects:
 Groups       Name        Std.Dev.
 Block:sample (Intercept) 0.02313 
 Block:dilut  (Intercept) 0.00000 
 Block        (Intercept) 0.01062 
 Residual                 0.04743 
Number of obs: 60, groups:  Block:sample, 12; Block:dilut, 10; Block, 2
Fixed Effects:
(Intercept)      sampleb      samplec      sampled      samplee      samplef  
    0.19803      0.08053      0.12254      0.16986     -0.02492      0.10178  
    dilut.L      dilut.Q      dilut.C      dilut^4  
    0.55271     -0.07285     -0.03939     -0.00853  
optimizer (nloptwrap) convergence code: 0 (OK) ; 0 optimizer warnings; 1 lme4 warnings 
> anova(m2)
Analysis of Variance Table
       npar Sum Sq Mean Sq F value
sample    5 0.1261 0.02523  11.213
dilut     4 3.7491 0.93727 416.613
> m3 <- lmer(logDens ~ sample + dilut + (1|Block) + (1|Block:sample),
+            Assay, verbose = TRUE)
iteration: 1
	f(x) = -132.977028
iteration: 2
	f(x) = -133.841646
iteration: 3
	f(x) = -133.083871
iteration: 4
	f(x) = -131.508505
iteration: 5
	f(x) = -132.919204
iteration: 6
	f(x) = -133.703210
iteration: 7
	f(x) = -133.839052
iteration: 8
	f(x) = -133.818055
iteration: 9
	f(x) = -133.861272
iteration: 10
	f(x) = -133.860790
iteration: 11
	f(x) = -133.860126
iteration: 12
	f(x) = -133.862039
iteration: 13
	f(x) = -133.863151
iteration: 14
	f(x) = -133.865289
iteration: 15
	f(x) = -133.869782
iteration: 16
	f(x) = -133.880373
iteration: 17
	f(x) = -133.903949
iteration: 18
	f(x) = -133.949692
iteration: 19
	f(x) = -133.956624
iteration: 20
	f(x) = -133.635199
iteration: 21
	f(x) = -133.969864
iteration: 22
	f(x) = -133.969810
iteration: 23
	f(x) = -133.968207
iteration: 24
	f(x) = -133.971079
iteration: 25
	f(x) = -133.972209
iteration: 26
	f(x) = -133.972590
iteration: 27
	f(x) = -133.972798
iteration: 28
	f(x) = -133.972713
iteration: 29
	f(x) = -133.969899
iteration: 30
	f(x) = -133.972967
iteration: 31
	f(x) = -133.972992
iteration: 32
	f(x) = -133.973000
iteration: 33
	f(x) = -133.972990
iteration: 34
	f(x) = -133.973000
iteration: 35
	f(x) = -133.972950
iteration: 36
	f(x) = -133.973000
iteration: 37
	f(x) = -133.973000
iteration: 38
	f(x) = -133.973000
iteration: 39
	f(x) = -133.973000
> print(m3, corr = FALSE)
Linear mixed model fit by REML ['lmerMod']
Formula: logDens ~ sample + dilut + (1 | Block) + (1 | Block:sample)
   Data: Assay
REML criterion at convergence: -133.973
Random effects:
 Groups       Name        Std.Dev.
 Block:sample (Intercept) 0.02313 
 Block        (Intercept) 0.01062 
 Residual                 0.04743 
Number of obs: 60, groups:  Block:sample, 12; Block, 2
Fixed Effects:
(Intercept)      sampleb      samplec      sampled      samplee      samplef  
    0.19803      0.08053      0.12254      0.16986     -0.02492      0.10178  
    dilut.L      dilut.Q      dilut.C      dilut^4  
    0.55271     -0.07285     -0.03939     -0.00853  
> anova(m3)
Analysis of Variance Table
       npar Sum Sq Mean Sq F value
sample    5 0.1261 0.02523  11.213
dilut     4 3.7491 0.93727 416.611
> anova(m2, m3)
refitting model(s) with ML (instead of REML)
Data: Assay
Models:
m3: logDens ~ sample + dilut + (1 | Block) + (1 | Block:sample)
m2: logDens ~ sample + dilut + (1 | Block) + (1 | Block:sample) + (1 | Block:dilut)
   npar     AIC     BIC logLik deviance Chisq Df Pr(>Chisq)
m3   13 -171.59 -144.36 98.794  -197.59                    
m2   14 -169.59 -140.27 98.794  -197.59     0  1          1
> 
> 
> 
> cleanEx()
> nameEx("BodyWeight")
> ### * BodyWeight
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BodyWeight
> ### Title: Rat weight over time for different diets
> ### Aliases: BodyWeight
> ### Keywords: datasets
> 
> ### ** Examples
> 
> str(BodyWeight)
'data.frame':	176 obs. of  4 variables:
 $ weight: num  240 250 255 260 262 258 266 266 265 272 ...
 $ Time  : num  1 8 15 22 29 36 43 44 50 57 ...
 $ Rat   : Factor w/ 16 levels "A","B","C","D",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ Diet  : Factor w/ 3 levels "a","b","c": 1 1 1 1 1 1 1 1 1 1 ...
> 
> 
> 
> cleanEx()
> nameEx("CO2")
> ### * CO2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CO2
> ### Title: Carbon Dioxide uptake in grass plants
> ### Aliases: CO2
> ### Keywords: datasets
> 
> ### ** Examples
> 
> require(stats); require(graphics)
> coplot(uptake ~ conc | Plant, data = CO2, show.given = FALSE, type = "b")
> ## fit the data for the first plant
> fm1 <- nls(uptake ~ SSasymp(conc, Asym, lrc, c0),
+    data = CO2, subset = Plant == 'Qn1')
> summary(fm1)

Formula: uptake ~ SSasymp(conc, Asym, lrc, c0)

Parameters:
     Estimate Std. Error t value Pr(>|t|)    
Asym  38.1398     0.9164  41.620 1.99e-06 ***
lrc  -34.2766    18.9661  -1.807    0.145    
c0    -4.3806     0.2042 -21.457 2.79e-05 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 1.663 on 4 degrees of freedom

Number of iterations to convergence: 0 
Achieved convergence tolerance: 1.663e-06

> ## fit each plant separately
> fmlist <- list()
> for (pp in levels(CO2$Plant)) {
+   fmlist[[pp]] <- nls(uptake ~ SSasymp(conc, Asym, lrc, c0),
+       data = CO2, subset = Plant == pp)
+ }
> ## check the coefficients by plant
> sapply(fmlist, coef)
           Mc1       Mc2         Mc3       Mn1        Mn2        Mn3       Qc1
Asym 21.787232 13.555203   18.535062 34.084807  32.128265  28.482853 36.428732
lrc   2.448758 -1.982271 -136.114734 -8.813218 -29.044263 -17.370807 -9.901194
c0   -5.142256 -4.560851   -3.465158 -5.064579  -4.466157  -4.591566 -4.861741
            Qc2        Qc3        Qn1        Qn2        Qn3
Asym  39.819497  40.683704  38.139782  42.871686  44.227996
lrc  -51.534564 -11.541640 -34.276585 -29.656171 -37.626788
c0    -4.463838  -4.945218  -4.380647  -4.665728  -4.486118
> 
> 
> 
> cleanEx()
> nameEx("Cefamandole")
> ### * Cefamandole
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Cefamandole
> ### Title: Pharmacokinetics of Cefamandole
> ### Aliases: Cefamandole
> ### Keywords: datasets
> 
> ### ** Examples
> 
> require(lattice)
Loading required package: lattice
> str(Cefamandole)
'data.frame':	84 obs. of  3 variables:
 $ Subject: Factor w/ 6 levels "A","B","C","D",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ Time   : num  10 15 20 30 45 60 75 90 120 150 ...
 $ conc   : num  127 80 47.4 39.9 24.8 17.9 11.7 10.9 5.7 2.55 ...
> xyplot(conc ~ Time, Cefamandole, groups = Subject, type = c("g", "b"),
+        aspect = 'xy', scales = list(y = list(log = 2)),
+        auto.key = list(space = "right", lines= TRUE))
> xyplot(conc ~ Time|Subject, Cefamandole, type = c("g", "b"),
+        index.cond = function(x,y) min(y), aspect = 'xy',
+        scales = list(y = list(log = 2)))
> #fm1 <- nlsList(SSbiexp, data = Cefamandole)
> 
> 
> 
> cleanEx()

detaching ‘package:lattice’

> nameEx("Dialyzer")
> ### * Dialyzer
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Dialyzer
> ### Title: High-Flux Hemodialyzer
> ### Aliases: Dialyzer
> ### Keywords: datasets
> 
> ### ** Examples
> 
> str(Dialyzer)
'data.frame':	140 obs. of  5 variables:
 $ Subject : Factor w/ 20 levels "A","B","C","D",..: 1 1 1 1 1 1 1 2 2 2 ...
 $ QB      : Factor w/ 2 levels "200","300": 1 1 1 1 1 1 1 1 1 1 ...
 $ pressure: num  0.24 0.505 0.995 1.485 2.02 ...
 $ rate    : num  0.645 20.115 38.46 44.985 51.765 ...
 $ index   : num  1 2 3 4 5 6 7 1 2 3 ...
> 
> 
> 
> cleanEx()
> nameEx("Earthquake")
> ### * Earthquake
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Earthquake
> ### Title: Earthquake Intensity
> ### Aliases: Earthquake
> ### Keywords: datasets
> 
> ### ** Examples
> 
> str(Earthquake)
'data.frame':	182 obs. of  5 variables:
 $ Quake   : Factor w/ 23 levels "A","B","C","D",..: 20 20 20 20 20 20 20 20 20 20 ...
 $ Richter : num  5 5 5 5 5 5 5 5 5 5 ...
 $ distance: num  7.5 8.8 8.9 9.4 9.7 9.7 10.5 10.5 12 12.2 ...
 $ soil    : Factor w/ 2 levels "S","R": 2 2 2 2 2 2 2 2 2 2 ...
 $ accel   : num  0.264 0.263 0.23 0.147 0.286 0.157 0.237 0.133 0.055 0.097 ...
> 
> 
> 
> cleanEx()
> nameEx("Fatigue")
> ### * Fatigue
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Fatigue
> ### Title: Cracks caused by metal fatigue
> ### Aliases: Fatigue
> ### Keywords: datasets
> 
> ### ** Examples
> 
> require(lattice)
Loading required package: lattice
> str(Fatigue)
'data.frame':	262 obs. of  3 variables:
 $ Path     : Factor w/ 21 levels "1","10","11",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ cycles   : num  0 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 ...
 $ relLength: num  1 1.06 1.11 1.17 1.24 ...
> xyplot(relLength ~ cycles | Path, Fatigue, type = c("g", "b"),
+        aspect = 'xy', xlab = "Number of test cycles (millions)",
+        ylab = "Relative crack length (dimensionless)",
+        layout = c(7,3))
> 
> 
> 
> cleanEx()

detaching ‘package:lattice’

> nameEx("Gasoline")
> ### * Gasoline
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Gasoline
> ### Title: Refinery yield of gasoline
> ### Aliases: Gasoline
> ### Keywords: datasets
> 
> ### ** Examples
> 
> require(lattice)
Loading required package: lattice
> str(Gasoline)
'data.frame':	32 obs. of  6 variables:
 $ yield   : num  6.9 14.4 7.4 8.5 8 2.8 5 12.2 10 15.2 ...
 $ endpoint: num  235 307 212 365 218 235 285 205 267 300 ...
 $ Sample  : Factor w/ 10 levels "A","B","C","D",..: 5 6 8 1 7 9 4 10 3 5 ...
 $ API     : num  38.4 40.3 40 31.8 40.8 41.3 38.1 50.8 32.2 38.4 ...
 $ vapor   : num  6.1 4.8 6.1 0.2 3.5 1.8 1.2 8.6 5.2 6.1 ...
 $ ASTM    : num  220 231 217 316 210 267 274 190 236 220 ...
> xyplot(yield ~ endpoint | Sample, Gasoline, aspect = 'xy',
+        main = "Gasoline data", xlab = "Endpoint (degrees F)",
+        ylab = "Percentage yield",
+        type = c("g", "p", "r"),
+        index.cond = function(x,y) coef(lm(y~x))[2],
+        layout = c(5,2))
> print(m1 <- lmer(yield ~ endpoint + (1|Sample), Gasoline), corr = FALSE)
Linear mixed model fit by REML ['lmerMod']
Formula: yield ~ endpoint + (1 | Sample)
   Data: Gasoline
REML criterion at convergence: 175.4306
Random effects:
 Groups   Name        Std.Dev.
 Sample   (Intercept) 8.388   
 Residual             1.880   
Number of obs: 32, groups:  Sample, 10
Fixed Effects:
(Intercept)     endpoint  
   -33.3063       0.1576  
> m2 <- lmer(yield ~ endpoint + (endpoint|Sample), Gasoline, verbose = 1)
iteration: 1
	f(x) = 245.910051
iteration: 2
	f(x) = 244.477085
iteration: 3
	f(x) = 252.598440
iteration: 4
	f(x) = 255.981895
iteration: 5
	f(x) = 246.813046
iteration: 6
	f(x) = 252.606218
iteration: 7
	f(x) = 220.984353
iteration: 8
	f(x) = 177.134711
iteration: 9
	f(x) = 173.635328
iteration: 10
	f(x) = 173.406852
iteration: 11
	f(x) = 189.313666
iteration: 12
	f(x) = 213.562479
iteration: 13
	f(x) = 221.764819
iteration: 14
	f(x) = 193.775636
iteration: 15
	f(x) = 188.483959
iteration: 16
	f(x) = 196.693322
iteration: 17
	f(x) = 195.153555
iteration: 18
	f(x) = 219.138072
iteration: 19
	f(x) = 175.986510
iteration: 20
	f(x) = 172.792337
iteration: 21
	f(x) = 173.170826
iteration: 22
	f(x) = 173.199688
iteration: 23
	f(x) = 172.863689
iteration: 24
	f(x) = 173.173220
iteration: 25
	f(x) = 173.433493
iteration: 26
	f(x) = 173.065043
iteration: 27
	f(x) = 172.803232
iteration: 28
	f(x) = 172.839403
iteration: 29
	f(x) = 172.791633
iteration: 30
	f(x) = 172.791856
iteration: 31
	f(x) = 172.790692
iteration: 32
	f(x) = 172.792796
iteration: 33
	f(x) = 172.790421
iteration: 34
	f(x) = 172.790311
iteration: 35
	f(x) = 172.790302
iteration: 36
	f(x) = 172.790382
iteration: 37
	f(x) = 172.790302
iteration: 38
	f(x) = 172.790296
iteration: 39
	f(x) = 172.790289
iteration: 40
	f(x) = 172.790288
boundary (singular) fit: see help('isSingular')
> print(m2)
Linear mixed model fit by REML ['lmerMod']
Formula: yield ~ endpoint + (endpoint | Sample)
   Data: Gasoline
REML criterion at convergence: 172.7903
Random effects:
 Groups   Name        Std.Dev. Corr
 Sample   (Intercept) 4.53752      
          endpoint    0.01062  1.00
 Residual             1.79047      
Number of obs: 32, groups:  Sample, 10
Fixed Effects:
(Intercept)     endpoint  
   -31.8894       0.1543  
optimizer (nloptwrap) convergence code: 0 (OK) ; 0 optimizer warnings; 1 lme4 warnings 
> Gasoline$endptC <- with(Gasoline, endpoint - mean(endpoint))
> m3 <- lmer(yield ~ endpoint + (endptC|Sample), Gasoline, verbose = 1)
iteration: 1
	f(x) = 270.772588
iteration: 2
	f(x) = 257.199808
iteration: 3
	f(x) = 284.266784
iteration: 4
	f(x) = 280.843034
iteration: 5
	f(x) = 291.077528
iteration: 6
	f(x) = 284.390191
iteration: 7
	f(x) = 245.877857
iteration: 8
	f(x) = 184.987769
iteration: 9
	f(x) = 176.935525
iteration: 10
	f(x) = 177.210253
iteration: 11
	f(x) = 221.398772
iteration: 12
	f(x) = 213.799171
iteration: 13
	f(x) = 269.318953
iteration: 14
	f(x) = 254.116989
iteration: 15
	f(x) = 252.809983
iteration: 16
	f(x) = 183.418959
iteration: 17
	f(x) = 204.972310
iteration: 18
	f(x) = 211.966629
iteration: 19
	f(x) = 180.028929
iteration: 20
	f(x) = 174.507121
iteration: 21
	f(x) = 205.515479
iteration: 22
	f(x) = 182.380692
iteration: 23
	f(x) = 180.642299
iteration: 24
	f(x) = 177.523272
iteration: 25
	f(x) = 178.446217
iteration: 26
	f(x) = 174.423815
iteration: 27
	f(x) = 174.398137
iteration: 28
	f(x) = 174.410428
iteration: 29
	f(x) = 174.406391
iteration: 30
	f(x) = 174.389145
iteration: 31
	f(x) = 174.390294
iteration: 32
	f(x) = 174.388875
iteration: 33
	f(x) = 174.389343
iteration: 34
	f(x) = 174.389101
iteration: 35
	f(x) = 174.389927
iteration: 36
	f(x) = 174.389358
iteration: 37
	f(x) = 174.388748
boundary (singular) fit: see help('isSingular')
> print(m3)
Linear mixed model fit by REML ['lmerMod']
Formula: yield ~ endpoint + (endptC | Sample)
   Data: Gasoline
REML criterion at convergence: 174.3887
Random effects:
 Groups   Name        Std.Dev. Corr
 Sample   (Intercept) 6.542021     
          endptC      0.008715 1.00
 Residual             2.027737     
Number of obs: 32, groups:  Sample, 10
Fixed Effects:
(Intercept)     endpoint  
   -31.5621       0.1533  
optimizer (nloptwrap) convergence code: 0 (OK) ; 0 optimizer warnings; 1 lme4 warnings 
> xyplot(endptC ~ `(Intercept)`, ranef(m3)[[1]], type = c("g", "p", "r"),
+        aspect = 1)
> 
> 
> 
> cleanEx()

detaching ‘package:lattice’

> nameEx("Glucose")
> ### * Glucose
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Glucose
> ### Title: Glucose levels over time
> ### Aliases: Glucose
> ### Keywords: datasets
> 
> ### ** Examples
> 
> require(lattice)
Loading required package: lattice
> str(Glucose)
'data.frame':	378 obs. of  4 variables:
 $ Subject: Factor w/ 6 levels "A","B","C","D",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ Time   : num  -0.25 0 0.5 1 1.5 2 3 4 5 6 ...
 $ conc   : num  4.9 4.5 7.84 5.46 5.08 4.32 3.91 3.99 4.15 4.41 ...
 $ Meal   : Ord.factor w/ 6 levels "2am"<"6am"<"10am"<..: 3 3 3 3 3 3 3 3 3 3 ...
> xyplot(conc ~ Time | Meal * Subject, Glucose)
> 
> 
> 
> cleanEx()

detaching ‘package:lattice’

> nameEx("Glucose2")
> ### * Glucose2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Glucose2
> ### Title: Glucose Levels Following Alcohol Ingestion
> ### Aliases: Glucose2
> ### Keywords: datasets
> 
> ### ** Examples
> 
> require(lattice)
Loading required package: lattice
> str(Glucose2)
'data.frame':	196 obs. of  4 variables:
 $ Subject: Factor w/ 7 levels "1","2","3","4",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ Date   : Factor w/ 2 levels "1","2": 1 1 1 1 1 1 1 1 1 1 ...
 $ Time   : num  -1 0 2 4 6 8 10 12 15 18 ...
 $ glucose: num  3 3 4.7 6 6.3 4.3 3 2 4.5 3.8 ...
> xyplot(glucose ~ Time | Subject, Glucose2, type = c("g", "b"),
+        groups = Date, aspect = 'xy', layout = c(4,2),
+        index.cond = function(x,y) max(y))
> 
> 
> 
> cleanEx()

detaching ‘package:lattice’

> nameEx("Gun")
> ### * Gun
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Gun
> ### Title: Methods for firing naval guns
> ### Aliases: Gun
> ### Keywords: datasets
> 
> ### ** Examples
> 
> str(Gun)
'data.frame':	36 obs. of  4 variables:
 $ rounds  : num  20.2 14.2 22 14.1 23.1 14.1 26.2 18 22.6 14 ...
 $ Method  : Factor w/ 2 levels "M1","M2": 1 2 1 2 1 2 1 2 1 2 ...
 $ Team    : Factor w/ 9 levels "T1A","T1H","T1S",..: 3 3 1 1 2 2 6 6 4 4 ...
 $ Physique: Ord.factor w/ 3 levels "Slight"<"Average"<..: 1 1 2 2 3 3 1 1 2 2 ...
> 
> 
> 
> cleanEx()
> nameEx("IGF")
> ### * IGF
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: IGF
> ### Title: Radioimmunoassay of IGF-I Protein
> ### Aliases: IGF
> ### Keywords: datasets
> 
> ### ** Examples
> 
> str(IGF)
'data.frame':	237 obs. of  3 variables:
 $ Lot : Factor w/ 10 levels "1","10","2","3",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ age : num  7 7 8 8 13 13 14 14 15 15 ...
 $ conc: num  4.9 5.68 5.32 5.5 4.94 5.19 5.18 5.67 5.02 5.88 ...
> 
> 
> 
> cleanEx()
> nameEx("Machines")
> ### * Machines
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Machines
> ### Title: Productivity Scores for Machines and Workers
> ### Aliases: Machines
> ### Keywords: datasets
> 
> ### ** Examples
> 
> str(Machines)
'data.frame':	54 obs. of  3 variables:
 $ Worker : Factor w/ 6 levels "1","2","3","4",..: 1 1 1 2 2 2 3 3 3 4 ...
 $ Machine: Factor w/ 3 levels "A","B","C": 1 1 1 1 1 1 1 1 1 1 ...
 $ score  : num  52 52.8 53.1 51.8 52.8 53.1 60 60.2 58.4 51.1 ...
> 
> 
> 
> cleanEx()
> nameEx("MathAchSchool")
> ### * MathAchSchool
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MathAchSchool
> ### Title: School demographic data for MathAchieve
> ### Aliases: MathAchSchool
> ### Keywords: datasets
> 
> ### ** Examples
> 
> str(MathAchSchool)
'data.frame':	160 obs. of  7 variables:
 $ School : Factor w/ 160 levels "1224","1288",..: 1 2 3 4 5 6 7 8 9 10 ...
 $ Size   : num  842 1855 1719 716 455 ...
 $ Sector : Factor w/ 2 levels "Public","Catholic": 1 1 1 2 2 1 1 2 2 1 ...
 $ PRACAD : num  0.35 0.27 0.32 0.96 0.95 0.25 0.5 0.96 1 0.78 ...
 $ DISCLIM: num  1.597 0.174 -0.137 -0.622 -1.694 ...
 $ HIMINTY: Factor w/ 2 levels "0","1": 1 1 2 1 2 1 1 1 1 1 ...
 $ MEANSES: num  -0.428 0.128 -0.42 0.534 0.351 -0.014 -0.007 0.718 0.569 0.683 ...
> 
> 
> 
> cleanEx()
> nameEx("MathAchieve")
> ### * MathAchieve
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MathAchieve
> ### Title: Mathematics achievement scores
> ### Aliases: MathAchieve
> ### Keywords: datasets
> 
> ### ** Examples
> 
> str(MathAchieve)
'data.frame':	7185 obs. of  6 variables:
 $ School  : Factor w/ 160 levels "1224","1288",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ Minority: Factor w/ 2 levels "No","Yes": 1 1 1 1 1 1 1 1 1 1 ...
 $ Sex     : Factor w/ 2 levels "Female","Male": 1 1 2 2 2 2 1 2 1 2 ...
 $ SES     : num  -1.528 -0.588 -0.528 -0.668 -0.158 ...
 $ MathAch : num  5.88 19.71 20.35 8.78 17.9 ...
 $ MEANSES : num  -0.428 -0.428 -0.428 -0.428 -0.428 -0.428 -0.428 -0.428 -0.428 -0.428 ...
> 
> 
> 
> cleanEx()
> nameEx("Meat")
> ### * Meat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Meat
> ### Title: Tenderness of meat
> ### Aliases: Meat
> ### Keywords: datasets
> 
> ### ** Examples
> 
> str(Meat)
'data.frame':	30 obs. of  4 variables:
 $ Storage: Factor w/ 6 levels " 0"," 1"," 2",..: 1 2 3 4 5 6 1 3 2 5 ...
 $ score  : num  7 17 26 25 33 29 17 27 23 27 ...
 $ Block  : Factor w/ 5 levels "I","II","III",..: 1 1 1 1 1 1 2 2 2 2 ...
 $ Pair   : Factor w/ 15 levels "I-1","I-2","I-3",..: 1 1 2 2 3 3 4 4 5 5 ...
> 
> 
> 
> cleanEx()
> nameEx("Milk")
> ### * Milk
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Milk
> ### Title: Protein content of cows' milk
> ### Aliases: Milk
> ### Keywords: datasets
> 
> ### ** Examples
> 
> str(Milk)
'data.frame':	1337 obs. of  4 variables:
 $ protein: num  3.63 3.57 3.47 3.65 3.89 3.73 3.77 3.9 3.78 3.82 ...
 $ Time   : num  1 2 3 4 5 6 7 8 9 10 ...
 $ Cow    : Factor w/ 79 levels "B01","B02","B03",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ Diet   : Factor w/ 3 levels "barley","barley+lupins",..: 1 1 1 1 1 1 1 1 1 1 ...
> 
> 
> 
> cleanEx()
> nameEx("Muscle")
> ### * Muscle
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Muscle
> ### Title: Contraction of heart muscle sections
> ### Aliases: Muscle
> ### Keywords: datasets
> 
> ### ** Examples
> 
> str(Muscle)
'data.frame':	60 obs. of  3 variables:
 $ Strip : Factor w/ 21 levels "S01","S02","S03",..: 1 1 1 1 2 2 2 2 3 3 ...
 $ conc  : num  2.2 4.4 6.6 8.8 2.2 4.4 6.6 8.8 0.55 1.1 ...
 $ length: num  15.8 20.8 22.6 23.8 20.6 26.8 28.4 27 7.2 15.4 ...
> 
> 
> 
> cleanEx()
> nameEx("Nitrendipene")
> ### * Nitrendipene
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Nitrendipene
> ### Title: Assay of nitrendipene
> ### Aliases: Nitrendipene
> ### Keywords: datasets
> 
> ### ** Examples
> 
> str(Nitrendipene)
'data.frame':	89 obs. of  4 variables:
 $ activity: num  6696 6211 6385 6396 6283 ...
 $ NIF     : num  0e+00 0e+00 0e+00 1e-11 1e-11 ...
 $ Tissue  : Factor w/ 4 levels "1","2","3","4": 1 1 1 1 1 1 1 1 1 1 ...
 $ log.NIF : num  -14 -14 -14 -11 -11 -11 -10 -10 -10 -9 ...
> 
> 
> 
> cleanEx()
> nameEx("Oats")
> ### * Oats
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Oats
> ### Title: Split-plot Experiment on Varieties of Oats
> ### Aliases: Oats
> ### Keywords: datasets
> 
> ### ** Examples
> 
> str(Oats)
'data.frame':	72 obs. of  4 variables:
 $ Block  : Factor w/ 6 levels "I","II","III",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ Variety: Factor w/ 3 levels "Golden Rain",..: 3 3 3 3 1 1 1 1 2 2 ...
 $ nitro  : num  0 0.2 0.4 0.6 0 0.2 0.4 0.6 0 0.2 ...
 $ yield  : num  111 130 157 174 117 114 161 141 105 140 ...
> 
> 
> 
> cleanEx()
> nameEx("Orange")
> ### * Orange
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Orange
> ### Title: Growth of orange trees
> ### Aliases: Orange
> ### Keywords: datasets
> 
> ### ** Examples
> 
> require(lattice)
Loading required package: lattice
> xyplot(circumference ~ age, Orange, groups = Tree, type = c("g", "b"),
+        auto.key = list(space = "right", lines = TRUE), aspect = "xy",
+        xlab = "Age (days since 1968/12/31)", ylab = "Circumference (mm)")
> ## Not run: 
> ##D m1 <- nlmer(circumference ~ SSlogis(age, Asym, xmid, scal) ~ Asym|Tree,
> ##D             Orange, verbose = TRUE,
> ##D             start = c(Asym = 190, xmid = 730, scal = 350))
> ##D .Call("mer_optimize", m1, 1L, 1L, PACKAGE = "lme4")
> ##D print(m1)
> ##D ranef(m1)
> ## End(Not run)
> 
> 
> 
> cleanEx()

detaching ‘package:lattice’

> nameEx("Orthodont")
> ### * Orthodont
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Orthodont
> ### Title: Growth curve data on an orthdontic measurement
> ### Aliases: Orthodont
> ### Keywords: datasets
> 
> ### ** Examples
> 
> str(Orthodont)
'data.frame':	108 obs. of  4 variables:
 $ distance: num  26 25 29 31 21.5 22.5 23 26.5 23 22.5 ...
 $ age     : num  8 10 12 14 8 10 12 14 8 10 ...
 $ Subject : Factor w/ 27 levels "F01","F02","F03",..: 12 12 12 12 13 13 13 13 14 14 ...
 $ Sex     : Factor w/ 2 levels "Female","Male": 2 2 2 2 2 2 2 2 2 2 ...
> 
> 
> 
> cleanEx()
> nameEx("Ovary")
> ### * Ovary
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Ovary
> ### Title: Counts of Ovarian Follicles
> ### Aliases: Ovary
> ### Keywords: datasets
> 
> ### ** Examples
> 
> str(Ovary)
'data.frame':	308 obs. of  3 variables:
 $ Mare     : Factor w/ 11 levels "1","10","11",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ Time     : num  -0.1364 -0.0909 -0.0455 0 0.0455 ...
 $ follicles: num  20 15 19 16 13 10 12 14 13 20 ...
> 
> 
> 
> cleanEx()
> nameEx("Oxide")
> ### * Oxide
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Oxide
> ### Title: Variability in Semiconductor Manufacturing
> ### Aliases: Oxide
> ### Keywords: datasets
> 
> ### ** Examples
> 
> str(Oxide)
'data.frame':	72 obs. of  5 variables:
 $ Source   : Factor w/ 2 levels "1","2": 1 1 1 1 1 1 1 1 1 1 ...
 $ Lot      : Factor w/ 8 levels "1","2","3","4",..: 1 1 1 1 1 1 1 1 1 2 ...
 $ Wafer    : Factor w/ 3 levels "1","2","3": 1 1 1 2 2 2 3 3 3 1 ...
 $ Site     : Factor w/ 3 levels "1","2","3": 1 2 3 1 2 3 1 2 3 1 ...
 $ Thickness: num  2006 1999 2007 1980 1988 ...
> 
> 
> 
> cleanEx()
> nameEx("PBG")
> ### * PBG
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: PBG
> ### Title: Effect of Phenylbiguanide on Blood Pressure
> ### Aliases: PBG
> ### Keywords: datasets
> 
> ### ** Examples
> 
> str(PBG)
'data.frame':	60 obs. of  5 variables:
 $ deltaBP  : num  0.5 4.5 10 26 37 32 1 1.25 4 12 ...
 $ dose     : num  6.25 12.5 25 50 100 200 6.25 12.5 25 50 ...
 $ Run      : Factor w/ 10 levels "P1","P2","P3",..: 1 1 1 1 1 1 2 2 2 2 ...
 $ Treatment: Factor w/ 2 levels "MDL 72222","Placebo": 2 2 2 2 2 2 2 2 2 2 ...
 $ Rabbit   : Factor w/ 5 levels "1","2","3","4",..: 1 1 1 1 1 1 2 2 2 2 ...
> 
> 
> 
> cleanEx()
> nameEx("Phenobarb")
> ### * Phenobarb
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Phenobarb
> ### Title: Phenobarbitol Kinetics
> ### Aliases: Phenobarb
> ### Keywords: datasets
> 
> ### ** Examples
> 
> str(Phenobarb)
'data.frame':	744 obs. of  7 variables:
 $ Subject : Factor w/ 59 levels "1","10","11",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ Wt      : num  1.4 1.4 1.4 1.4 1.4 1.4 1.4 1.4 1.4 1.4 ...
 $ Apgar   : Factor w/ 10 levels "1","10","2","3",..: 8 8 8 8 8 8 8 8 8 8 ...
 $ ApgarInd: Factor w/ 2 levels "< 5",">= 5": 2 2 2 2 2 2 2 2 2 2 ...
 $ time    : num  0 2 12.5 24.5 37 48 60.5 72.5 85.3 96.5 ...
 $ dose    : num  25 NA 3.5 3.5 3.5 3.5 3.5 3.5 3.5 3.5 ...
 $ conc    : num  NA 17.3 NA NA NA NA NA NA NA NA ...
> 
> 
> 
> cleanEx()
> nameEx("Pixel")
> ### * Pixel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Pixel
> ### Title: X-ray pixel intensities over time
> ### Aliases: Pixel
> ### Keywords: datasets
> 
> ### ** Examples
> 
> options(show.signif.stars = FALSE)
> str(Pixel)
'data.frame':	102 obs. of  4 variables:
 $ Dog  : Factor w/ 10 levels "A","B","C","D",..: 1 1 1 1 1 1 1 2 2 2 ...
 $ Side : Factor w/ 2 levels "L","R": 2 2 2 2 2 2 2 2 2 2 ...
 $ day  : num  0 1 2 4 6 10 14 0 1 2 ...
 $ pixel: num  1046 1044 1043 1050 1045 ...
> summary(Pixel)
      Dog     Side        day            pixel     
 A      :14   L:51   Min.   : 0.00   Min.   :1034  
 B      :14   R:51   1st Qu.: 4.00   1st Qu.:1054  
 C      :14          Median : 6.00   Median :1088  
 D      :14          Mean   : 7.49   Mean   :1087  
 E      :10          3rd Qu.:10.00   3rd Qu.:1110  
 F      :10          Max.   :21.00   Max.   :1161  
 (Other):26                                        
> (fm1 <- lmer(pixel ~ day + I(day^2) + (1|Dog:Side) + (day|Dog), Pixel))
Linear mixed model fit by REML ['lmerMod']
Formula: pixel ~ day + I(day^2) + (1 | Dog:Side) + (day | Dog)
   Data: Pixel
REML criterion at convergence: 825.2102
Random effects:
 Groups   Name        Std.Dev. Corr 
 Dog:Side (Intercept) 16.824        
 Dog      (Intercept) 28.372        
          day          1.844   -0.55
 Residual              8.990        
Number of obs: 102, groups:  Dog:Side, 20; Dog, 10
Fixed Effects:
(Intercept)          day     I(day^2)  
  1073.3392       6.1296      -0.3673  
> 
> 
> 
> cleanEx()
> nameEx("Quinidine")
> ### * Quinidine
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Quinidine
> ### Title: Quinidine Kinetics
> ### Aliases: Quinidine
> ### Keywords: datasets
> 
> ### ** Examples
> 
> str(Quinidine)
'data.frame':	1471 obs. of  14 variables:
 $ Subject   : Factor w/ 136 levels "1","10","100",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ time      : num  0 3 6 16 24 ...
 $ conc      : num  NA NA NA NA NA NA NA 1.4 NA NA ...
 $ dose      : num  249 249 249 201 201 201 201 NA 201 201 ...
 $ interval  : num  NA NA NA NA NA NA NA NA 6 NA ...
 $ Age       : num  60 60 60 60 60 60 60 60 60 60 ...
 $ Height    : num  69 69 69 69 69 69 69 69 69 69 ...
 $ Weight    : num  106 106 106 106 106 106 106 106 106 106 ...
 $ Race      : Factor w/ 3 levels "Black","Caucasian",..: 2 2 2 2 2 2 2 2 2 2 ...
 $ Smoke     : Factor w/ 2 levels "no","yes": 1 1 1 1 1 1 1 1 1 1 ...
 $ Ethanol   : Factor w/ 3 levels "current","former",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ Heart     : Factor w/ 3 levels "Moderate","No/Mild",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ Creatinine: Factor w/ 2 levels "< 50",">= 50": 2 2 2 2 2 2 2 2 2 2 ...
 $ glyco     : num  0.41 0.41 0.41 0.41 0.41 0.41 0.41 0.41 1.11 1.11 ...
> 
> 
> 
> cleanEx()
> nameEx("Rail")
> ### * Rail
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Rail
> ### Title: Evaluation of Stress in Railway Rails
> ### Aliases: Rail
> ### Keywords: datasets
> 
> ### ** Examples
> 
> str(Rail)
'data.frame':	18 obs. of  2 variables:
 $ Rail  : Factor w/ 6 levels "A","B","C","D",..: 1 1 1 2 2 2 3 3 3 4 ...
 $ travel: num  55 53 54 26 37 32 78 91 85 92 ...
> (fm1 <- lmer(travel ~ 1 | Rail, Rail))
Linear mixed model fit by REML ['lmerMod']
Formula: travel ~ 1 | Rail
   Data: Rail
REML criterion at convergence: 122.177
Random effects:
 Groups   Name        Std.Dev.
 Rail     (Intercept) 24.805  
 Residual              4.021  
Number of obs: 18, groups:  Rail, 6
Fixed Effects:
(Intercept)  
       66.5  
> 
> 
> 
> cleanEx()
> nameEx("RatPupWeight")
> ### * RatPupWeight
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: RatPupWeight
> ### Title: The weight of rat pups
> ### Aliases: RatPupWeight
> ### Keywords: datasets
> 
> ### ** Examples
> 
> str(RatPupWeight)
'data.frame':	322 obs. of  5 variables:
 $ weight   : num  6.6 7.4 7.15 7.24 7.1 6.04 6.98 7.05 6.95 6.29 ...
 $ sex      : Factor w/ 2 levels "Female","Male": 2 2 2 2 2 2 2 2 1 1 ...
 $ Litter   : Factor w/ 27 levels "1","10","11",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ Lsize    : num  12 12 12 12 12 12 12 12 12 12 ...
 $ Treatment: Factor w/ 3 levels "Control","High",..: 1 1 1 1 1 1 1 1 1 1 ...
> 
> 
> 
> cleanEx()
> nameEx("Relaxin")
> ### * Relaxin
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Relaxin
> ### Title: Assay for Relaxin
> ### Aliases: Relaxin
> ### Keywords: datasets
> 
> ### ** Examples
> 
> str(Relaxin)
'data.frame':	198 obs. of  3 variables:
 $ Run : Factor w/ 9 levels "1","2","3","4",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ conc: num  0.085 0.34 0.34 0.34 0.69 0.69 0.69 1.38 1.38 1.38 ...
 $ cAMP: num  1.77 3.35 4 6.1 8.4 ...
> 
> 
> 
> cleanEx()
> nameEx("Remifentanil")
> ### * Remifentanil
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Remifentanil
> ### Title: Pharmacokinetics of remifentanil
> ### Aliases: Remifentanil
> ### Keywords: datasets
> 
> ### ** Examples
> 
> str(Remifentanil)
'data.frame':	2107 obs. of  12 variables:
 $ ID     : num  1 1 1 1 1 1 1 1 1 1 ...
 $ Subject: Factor w/ 65 levels "1","10","11",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ Time   : num  0 1.5 2 2.52 3.02 3.63 4.05 5.02 6.02 7.03 ...
 $ conc   : num  NA 9.51 11.5 14.1 16.7 17.1 16.8 18.7 14.2 15.8 ...
 $ Rate   : num  72 72 72 72 72 ...
 $ Amt    : num  108 36 37.4 36 43.9 ...
 $ Age    : num  30.6 30.6 30.6 30.6 30.6 ...
 $ Sex    : Factor w/ 2 levels "Female","Male": 2 2 2 2 2 2 2 2 2 2 ...
 $ Ht     : num  171 171 171 171 171 171 171 171 171 171 ...
 $ Wt     : num  72 72 72 72 72 72 72 72 72 72 ...
 $ BSA    : num  1.84 1.84 1.84 1.84 1.84 ...
 $ LBM    : num  56.5 56.5 56.5 56.5 56.5 ...
> 
> 
> 
> cleanEx()
> nameEx("Soybean")
> ### * Soybean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Soybean
> ### Title: Growth of soybean plants
> ### Aliases: Soybean
> ### Keywords: datasets
> 
> ### ** Examples
> 
> str(Soybean)
'data.frame':	412 obs. of  5 variables:
 $ Plot   : Factor w/ 48 levels "1988F1","1988F2",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ Variety: Factor w/ 2 levels "F","P": 1 1 1 1 1 1 1 1 1 1 ...
 $ Year   : Factor w/ 3 levels "1988","1989",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ Time   : num  14 21 28 35 42 49 56 63 70 77 ...
 $ weight : num  0.106 0.261 0.666 2.11 3.56 ...
> #summary(fm1 <- nlsList(SSlogis, data = Soybean))
> 
> 
> 
> cleanEx()
> nameEx("Spruce")
> ### * Spruce
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Spruce
> ### Title: Growth of Spruce Trees
> ### Aliases: Spruce
> ### Keywords: datasets
> 
> ### ** Examples
> 
> str(Spruce)
'data.frame':	1027 obs. of  4 variables:
 $ Tree   : Factor w/ 79 levels "N1T01","N1T02",..: 26 26 26 26 26 26 26 26 26 26 ...
 $ days   : num  152 174 201 227 258 469 496 528 556 579 ...
 $ logSize: num  4.51 4.98 5.41 5.9 6.15 6.16 6.18 6.48 6.65 6.87 ...
 $ plot   : Factor w/ 4 levels "1","2","3","4": 1 1 1 1 1 1 1 1 1 1 ...
> 
> 
> 
> cleanEx()
> nameEx("Tetracycline1")
> ### * Tetracycline1
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Tetracycline1
> ### Title: Pharmacokinetics of tetracycline
> ### Aliases: Tetracycline1
> ### Keywords: datasets
> 
> ### ** Examples
> 
> str(Tetracycline1)
'data.frame':	40 obs. of  4 variables:
 $ conc       : num  1.08 1.99 1.46 1.21 1.48 2.5 2.62 1.95 1.19 2.1 ...
 $ Time       : num  1 2 3 6 1 2 3 6 1 2 ...
 $ Subject    : Factor w/ 5 levels "1","2","3","4",..: 1 1 1 1 1 1 1 1 2 2 ...
 $ Formulation: Factor w/ 2 levels "tetrachel","tetracyn": 1 1 1 1 2 2 2 2 1 1 ...
> 
> 
> 
> cleanEx()
> nameEx("Tetracycline2")
> ### * Tetracycline2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Tetracycline2
> ### Title: Pharmacokinetics of tetracycline
> ### Aliases: Tetracycline2
> ### Keywords: datasets
> 
> ### ** Examples
> 
> str(Tetracycline2)
'data.frame':	40 obs. of  4 variables:
 $ conc       : num  1.2 1.54 1.28 0.79 1.28 2.25 1.95 1.24 0.96 2.05 ...
 $ Time       : num  1 2 3 6 1 2 3 6 1 2 ...
 $ Subject    : Factor w/ 5 levels "1","2","3","4",..: 1 1 1 1 1 1 1 1 2 2 ...
 $ Formulation: Factor w/ 2 levels "Berkmycin","tetramycin": 1 1 1 1 2 2 2 2 1 1 ...
> 
> 
> 
> cleanEx()
> nameEx("Theoph")
> ### * Theoph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Theoph
> ### Title: Pharmacokinetics of theophylline
> ### Aliases: Theoph
> ### Keywords: datasets
> 
> ### ** Examples
> 
> require(lattice)
Loading required package: lattice
> xyplot(conc ~ Time | Subject, Theoph, aspect = 'xy',
+      xlab = "Time since drug administration (hr)",
+      ylab = "Theophylline concentration (mg/L)")
> Theoph.D <- subset(Theoph, Subject == "D")
> fm1 <- nls(conc ~ SSfol(Dose, Time, lKe, lKa, lCl),
+            data = Theoph.D)
> summary(fm1)

Formula: conc ~ SSfol(Dose, Time, lKe, lKa, lCl)

Parameters:
    Estimate Std. Error t value Pr(>|t|)
lKe -2.24833    0.14775 -15.217 3.45e-07
lKa -0.18284    0.15145  -1.207    0.262
lCl -3.17016    0.08236 -38.493 2.28e-10

Residual standard error: 0.5926 on 8 degrees of freedom

Number of iterations to convergence: 5 
Achieved convergence tolerance: 5.796e-06

> plot(conc ~ Time, data = Theoph.D,
+      xlab = "Time since drug administration (hr)",
+      ylab = "Theophylline concentration (mg/L)",
+      main = "Observed concentrations and fitted model",
+      sub  = "Theophylline data - Subject 4 only",
+      las = 1, col = 4)
> xvals <- seq(0, par("usr")[2], len = 55)
> lines(xvals, predict(fm1, newdata = list(Time = xvals)),
+       col = 4)
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()

detaching ‘package:lattice’

> nameEx("Wafer")
> ### * Wafer
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Wafer
> ### Title: Modeling of Analog MOS Circuits
> ### Aliases: Wafer
> ### Keywords: datasets
> 
> ### ** Examples
> 
> str(Wafer)
'data.frame':	400 obs. of  4 variables:
 $ Wafer  : Factor w/ 10 levels "1","10","2","3",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ Site   : Factor w/ 8 levels "1","2","3","4",..: 1 1 1 1 1 2 2 2 2 2 ...
 $ voltage: num  0.8 1.2 1.6 2 2.4 0.8 1.2 1.6 2 2.4 ...
 $ current: num  0.901 3.868 7.641 11.736 15.934 ...
> 
> 
> 
> cleanEx()
> nameEx("Wheat")
> ### * Wheat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Wheat
> ### Title: Yields by growing conditions
> ### Aliases: Wheat
> ### Keywords: datasets
> 
> ### ** Examples
> 
> str(Wheat)
'data.frame':	48 obs. of  4 variables:
 $ Tray      : Factor w/ 12 levels "1","2","3","4",..: 1 1 1 1 2 2 2 2 3 3 ...
 $ Moisture  : num  10 10 10 10 10 10 10 10 10 10 ...
 $ fertilizer: num  2 4 6 8 2 4 6 8 2 4 ...
 $ DryMatter : num  3.35 4.32 4.56 5.88 4.04 ...
> 
> 
> 
> cleanEx()
> nameEx("Wheat2")
> ### * Wheat2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Wheat2
> ### Title: Wheat Yield Trials
> ### Aliases: Wheat2
> ### Keywords: datasets
> 
> ### ** Examples
> 
> str(Wheat2)
'data.frame':	224 obs. of  5 variables:
 $ Block    : Factor w/ 4 levels "1","2","3","4": 1 1 1 1 1 1 1 1 1 1 ...
 $ variety  : Factor w/ 56 levels "ARAPAHOE","BRULE",..: 12 2 50 7 1 14 15 16 4 52 ...
 $ yield    : num  29.2 31.6 35 30.1 33 ...
 $ latitude : num  4.3 4.3 4.3 4.3 4.3 4.3 4.3 8.6 8.6 8.6 ...
 $ longitude: num  19.2 20.4 21.6 22.8 24 25.2 26.4 1.2 2.4 3.6 ...
> 
> 
> 
> cleanEx()
> nameEx("ergoStool")
> ### * ergoStool
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ergoStool
> ### Title: Ergometrics experiment with stool types
> ### Aliases: ergoStool
> ### Keywords: datasets
> 
> ### ** Examples
> 
> options(show.signif.stars = FALSE)
> str(ergoStool)
'data.frame':	36 obs. of  3 variables:
 $ effort : num  12 15 12 10 10 14 13 12 7 14 ...
 $ Type   : Factor w/ 4 levels "T1","T2","T3",..: 1 2 3 4 1 2 3 4 1 2 ...
 $ Subject: Factor w/ 9 levels "A","B","C","D",..: 1 1 1 1 2 2 2 2 3 3 ...
> print(m1 <- lmer(effort ~ Type + (1|Subject), ergoStool), corr = FALSE)
Linear mixed model fit by REML ['lmerMod']
Formula: effort ~ Type + (1 | Subject)
   Data: ergoStool
REML criterion at convergence: 121.1308
Random effects:
 Groups   Name        Std.Dev.
 Subject  (Intercept) 1.332   
 Residual             1.100   
Number of obs: 36, groups:  Subject, 9
Fixed Effects:
(Intercept)       TypeT2       TypeT3       TypeT4  
     8.5556       3.8889       2.2222       0.6667  
> anova(m1)
Analysis of Variance Table
     npar Sum Sq Mean Sq F value
Type    3 81.194  27.065  22.356
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  2.394 0.119 2.515 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
