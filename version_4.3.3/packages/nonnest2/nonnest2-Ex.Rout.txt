
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "nonnest2"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('nonnest2')
This is nonnest2 0.5-6.
nonnest2 has not been tested with all combinations of supported model classes.
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("icci")
> ### * icci
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: icci
> ### Title: Information Criteria Confidence Intervals
> ### Aliases: icci
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ## Count regression comparisons
> ##D require(MASS)
> ##D house1 <- glm(Freq ~ Infl + Type + Cont, family=poisson, data=housing)
> ##D house2 <- glm(Freq ~ Infl + Sat, family=poisson, data=housing)
> ##D 
> ##D ## CI for BIC
> ##D icci(house2, house1)
> ##D 
> ##D ## Further comparisons to hurdle, zero-inflated models
> ##D require(pscl)
> ##D bio1 <- glm(art ~ fem + mar + phd + ment, family=poisson, data=bioChemists)
> ##D bio2 <- hurdle(art ~ fem + mar + phd + ment, data=bioChemists)
> ##D bio3 <- zeroinfl(art ~ fem + mar + phd + ment, data=bioChemists)
> ##D icci(bio2, bio1)
> ##D icci(bio3, bio1)
> ##D icci(bio3, bio2)
> ##D 
> ##D ## Latent variable model comparisons
> ##D require(lavaan)
> ##D HS.model <- 'visual  =~ x1 + x2 + x3
> ##D               textual =~ x4 + x5 + x6
> ##D               speed   =~ x7 + x8 + x9 '
> ##D fit1 <- cfa(HS.model, data=HolzingerSwineford1939, meanstructure=TRUE)
> ##D fit2 <- cfa(HS.model, data=HolzingerSwineford1939, group="school")
> ##D icci(fit1, fit2)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("llcont")
> ### * llcont
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: llcont
> ### Title: Individual Log-Likelihoods
> ### Aliases: llcont
> 
> ### ** Examples
> 
> ## Fit gamma glm, check that sum of llcont() equals
> ## the model loglikelihood:
> clotting <- data.frame(u = c(5,10,15,20,30,40,60,80,100),
+                        lot1 = c(118,58,42,35,27,25,21,19,18),
+                        lot2 = c(69,35,26,21,18,16,13,12,12))
> gam1 <- glm(lot1 ~ log(u), data = clotting, family = Gamma)
> sum(llcont(gam1))
[1] -15.99496
> logLik(gam1)
'log Lik.' -15.99496 (df=3)
> 
> 
> 
> 
> cleanEx()
> nameEx("vuongtest")
> ### * vuongtest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: vuongtest
> ### Title: Vuong Tests for Model Comparison
> ### Aliases: vuongtest
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ## Count regression comparisons
> ##D require(MASS)
> ##D house1 <- glm(Freq ~ Infl + Type + Cont, family=poisson, data=housing)
> ##D house2 <- glm(Freq ~ Infl + Sat, family=poisson, data=housing)
> ##D house3 <- glm(Freq ~ Infl, family=poisson, data=housing)
> ##D ## house3 is nested within house1 and house2
> ##D anova(house3, house1, test="Chisq")
> ##D anova(house3, house2, test="Chisq")
> ##D 
> ##D ## house 2 is not nested in house1, so this test is invalid
> ##D anova(house2, house1, test="Chisq")
> ##D 
> ##D ## Use vuongtest() instead
> ##D vuongtest(house2, house1)
> ##D 
> ##D ## Application to models with different distributional assumptions
> ##D require(pscl)
> ##D bio1 <- glm(art ~ fem + mar + phd + ment, family=poisson, data=bioChemists)
> ##D bio2 <- hurdle(art ~ fem + mar + phd + ment, data=bioChemists)
> ##D bio3 <- zeroinfl(art ~ fem + mar + phd + ment, data=bioChemists)
> ##D vuongtest(bio2, bio1)
> ##D vuongtest(bio3, bio1)
> ##D vuongtest(bio1, bio2)
> ##D vuongtest(bio1, bio3)
> ##D vuongtest(bio3, bio2)
> ##D 
> ##D ## Application to latent variable models
> ##D require(lavaan)
> ##D HS.model <- 'visual  =~ x1 + x2 + x3
> ##D               textual =~ x4 + x5 + x6
> ##D               speed   =~ x7 + x8 + x9 '
> ##D fit1 <- cfa(HS.model, data=HolzingerSwineford1939)
> ##D fit2 <- cfa(HS.model, data=HolzingerSwineford1939, group="school")
> ##D vuongtest(fit1, fit2)
> ##D 
> ##D ## Supplying custom vcov function
> ##D require(lme4)
> ##D require(merDeriv)
> ##D 
> ##D fm1 <- lmer(Reaction ~ Days + (Days | Subject), sleepstudy, REML=FALSE)
> ##D fm2 <- lmer(Reaction ~ Days + (Days || Subject), sleepstudy, REML=FALSE)
> ##D 
> ##D vcl <- function(obj) vcov(obj, full=TRUE)
> ##D vuongtest(fm1, fm2, vc1=vcl, vc2=vcl, nested=TRUE)
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.233 0.013 0.246 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
