
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[10:32:26.288] plan(): Setting new future strategy stack:
[10:32:26.289] List of future strategies:
[10:32:26.289] 1. sequential:
[10:32:26.289]    - args: function (..., envir = parent.frame())
[10:32:26.289]    - tweaked: FALSE
[10:32:26.289]    - call: future::plan("sequential")
[10:32:26.303] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   message("*** Global argument '...' ...")
+ 
+   sum_fcns <- list()
+ 
+   sum_fcns$A <- function(x, ...) {
+     message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+     y %<-% { sum(x, ...) }
+     y
+   }
+ 
+ 
+   sum_fcns$B <- function(x, ...) {
+     sumt <- function(x) {
+       message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+       y %<-% { sum(x, ...) }
+       y
+     }
+     sumt(x)
+   }
+ 
+   sum_fcns$C <- function(x, y) {
+     message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+     y %<-% { sum(x, y) }
+     y
+   }
+ 
+   sum_fcns$D <- function(x, y) {
+     message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+     y %<-% { sum(x, y, ...) }
+     y
+   }
+ 
+   ## Issue/PR #400: Emulate how '...' may be used by the 'rlang' package
+   sum_fcns$E <- function(...) {
+     message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+ 
+     ## Grab '...' into a Globals object
+     globals <- globals::globalsByName("...", envir=environment())
+ 
+     ## Evaluate an expression with '...' in an environment that does not
+     ## have an '...' object - hence the parent.frame().  This will produce
+     ## an error unless we pass 'globals' which contains '...'
+     f <- future({
+       fcn <- function() sum(...)
+       fcn()
+     }, envir = parent.frame(), globals = globals)
+     y <- value(f)
+     y
+   }
+ 
+   ## Issue: https://github.com/HenrikBengtsson/globals/issues/72
+   sum_fcns$F <- function(x, y) {
+     message("Using '...' in a formula")
+ 
+     fcn <- function(x, y) {
+       z = ~ list(...)
+       sum(x, y)
+     }
+     
+     f <- future(fcn(x, y))
+     y <- value(f)
+     y
+   }
+ 
+ 
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("- plan('%s') ...", strategy))
+     plan(strategy, substitute = FALSE)
+ 
+     for (name in names(sum_fcns)) {
+       message(sprintf("** Sum function '%s' with plan('%s') ...", name, strategy))
+       sum_fcn <- sum_fcns[[name]]
+       print(sum_fcn)
+       y <- try(sum_fcn(1:2, 3))
+       print(y)
+       if (name %in% c("D")) {
+         stopifnot(inherits(y, "try-error"))
+       } else {
+         stopifnot(y == 6)
+       }
+     }
+   }
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
*** Global argument '...' ...
- plan('sequential') ...
[10:32:26.349] plan(): Setting new future strategy stack:
[10:32:26.349] List of future strategies:
[10:32:26.349] 1. sequential:
[10:32:26.349]    - args: function (..., envir = parent.frame())
[10:32:26.349]    - tweaked: FALSE
[10:32:26.349]    - call: plan(strategy, substitute = FALSE)
[10:32:26.359] plan(): nbrOfWorkers() = 1
** Sum function 'A' with plan('sequential') ...
function (x, ...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, ...)
    }
    y
}
<bytecode: 0x5644c8250160>
Arguments '...' exists: TRUE
[10:32:26.361] getGlobalsAndPackages() ...
[10:32:26.361] Searching for globals...
[10:32:26.369] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[10:32:26.369] Searching for globals ... DONE
[10:32:26.369] Resolving globals: FALSE
[10:32:26.369] Tweak future expression to call with '...' arguments ...
[10:32:26.369] {
[10:32:26.369]     do.call(function(...) {
[10:32:26.369]         sum(x, ...)
[10:32:26.369]     }, args = future.call.arguments)
[10:32:26.369] }
[10:32:26.370] Tweak future expression to call with '...' arguments ... DONE
[10:32:26.371] The total size of the 2 globals is 112 bytes (112 bytes)
[10:32:26.371] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[10:32:26.372] - globals: [2] ‘x’, ‘future.call.arguments’
[10:32:26.372] 
[10:32:26.372] getGlobalsAndPackages() ... DONE
[10:32:26.372] run() for ‘Future’ ...
[10:32:26.373] - state: ‘created’
[10:32:26.373] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:26.373] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:26.373] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:26.373]   - Field: ‘label’
[10:32:26.373]   - Field: ‘local’
[10:32:26.373]   - Field: ‘owner’
[10:32:26.374]   - Field: ‘envir’
[10:32:26.374]   - Field: ‘packages’
[10:32:26.374]   - Field: ‘gc’
[10:32:26.374]   - Field: ‘conditions’
[10:32:26.374]   - Field: ‘expr’
[10:32:26.374]   - Field: ‘uuid’
[10:32:26.374]   - Field: ‘seed’
[10:32:26.374]   - Field: ‘version’
[10:32:26.374]   - Field: ‘result’
[10:32:26.374]   - Field: ‘asynchronous’
[10:32:26.374]   - Field: ‘calls’
[10:32:26.375]   - Field: ‘globals’
[10:32:26.375]   - Field: ‘stdout’
[10:32:26.375]   - Field: ‘earlySignal’
[10:32:26.375]   - Field: ‘lazy’
[10:32:26.375]   - Field: ‘state’
[10:32:26.375] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:26.375] - Launch lazy future ...
[10:32:26.376] Packages needed by the future expression (n = 0): <none>
[10:32:26.376] Packages needed by future strategies (n = 0): <none>
[10:32:26.377] {
[10:32:26.377]     {
[10:32:26.377]         {
[10:32:26.377]             ...future.startTime <- base::Sys.time()
[10:32:26.377]             {
[10:32:26.377]                 {
[10:32:26.377]                   {
[10:32:26.377]                     base::local({
[10:32:26.377]                       has_future <- base::requireNamespace("future", 
[10:32:26.377]                         quietly = TRUE)
[10:32:26.377]                       if (has_future) {
[10:32:26.377]                         ns <- base::getNamespace("future")
[10:32:26.377]                         version <- ns[[".package"]][["version"]]
[10:32:26.377]                         if (is.null(version)) 
[10:32:26.377]                           version <- utils::packageVersion("future")
[10:32:26.377]                       }
[10:32:26.377]                       else {
[10:32:26.377]                         version <- NULL
[10:32:26.377]                       }
[10:32:26.377]                       if (!has_future || version < "1.8.0") {
[10:32:26.377]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:26.377]                           "", base::R.version$version.string), 
[10:32:26.377]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:26.377]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:26.377]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:26.377]                             "release", "version")], collapse = " "), 
[10:32:26.377]                           hostname = base::Sys.info()[["nodename"]])
[10:32:26.377]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:26.377]                           info)
[10:32:26.377]                         info <- base::paste(info, collapse = "; ")
[10:32:26.377]                         if (!has_future) {
[10:32:26.377]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:26.377]                             info)
[10:32:26.377]                         }
[10:32:26.377]                         else {
[10:32:26.377]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:26.377]                             info, version)
[10:32:26.377]                         }
[10:32:26.377]                         base::stop(msg)
[10:32:26.377]                       }
[10:32:26.377]                     })
[10:32:26.377]                   }
[10:32:26.377]                   ...future.strategy.old <- future::plan("list")
[10:32:26.377]                   options(future.plan = NULL)
[10:32:26.377]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:26.377]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:26.377]                 }
[10:32:26.377]                 ...future.workdir <- getwd()
[10:32:26.377]             }
[10:32:26.377]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:26.377]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:26.377]         }
[10:32:26.377]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:26.377]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:26.377]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:26.377]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:26.377]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:26.377]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:26.377]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:26.377]             base::names(...future.oldOptions))
[10:32:26.377]     }
[10:32:26.377]     if (FALSE) {
[10:32:26.377]     }
[10:32:26.377]     else {
[10:32:26.377]         if (TRUE) {
[10:32:26.377]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:26.377]                 open = "w")
[10:32:26.377]         }
[10:32:26.377]         else {
[10:32:26.377]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:26.377]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:26.377]         }
[10:32:26.377]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:26.377]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:26.377]             base::sink(type = "output", split = FALSE)
[10:32:26.377]             base::close(...future.stdout)
[10:32:26.377]         }, add = TRUE)
[10:32:26.377]     }
[10:32:26.377]     ...future.frame <- base::sys.nframe()
[10:32:26.377]     ...future.conditions <- base::list()
[10:32:26.377]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:26.377]     if (FALSE) {
[10:32:26.377]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:26.377]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:26.377]     }
[10:32:26.377]     ...future.result <- base::tryCatch({
[10:32:26.377]         base::withCallingHandlers({
[10:32:26.377]             ...future.value <- base::withVisible(base::local({
[10:32:26.377]                 do.call(function(...) {
[10:32:26.377]                   sum(x, ...)
[10:32:26.377]                 }, args = future.call.arguments)
[10:32:26.377]             }))
[10:32:26.377]             future::FutureResult(value = ...future.value$value, 
[10:32:26.377]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:26.377]                   ...future.rng), globalenv = if (FALSE) 
[10:32:26.377]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:26.377]                     ...future.globalenv.names))
[10:32:26.377]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:26.377]         }, condition = base::local({
[10:32:26.377]             c <- base::c
[10:32:26.377]             inherits <- base::inherits
[10:32:26.377]             invokeRestart <- base::invokeRestart
[10:32:26.377]             length <- base::length
[10:32:26.377]             list <- base::list
[10:32:26.377]             seq.int <- base::seq.int
[10:32:26.377]             signalCondition <- base::signalCondition
[10:32:26.377]             sys.calls <- base::sys.calls
[10:32:26.377]             `[[` <- base::`[[`
[10:32:26.377]             `+` <- base::`+`
[10:32:26.377]             `<<-` <- base::`<<-`
[10:32:26.377]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:26.377]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:26.377]                   3L)]
[10:32:26.377]             }
[10:32:26.377]             function(cond) {
[10:32:26.377]                 is_error <- inherits(cond, "error")
[10:32:26.377]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:26.377]                   NULL)
[10:32:26.377]                 if (is_error) {
[10:32:26.377]                   sessionInformation <- function() {
[10:32:26.377]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:26.377]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:26.377]                       search = base::search(), system = base::Sys.info())
[10:32:26.377]                   }
[10:32:26.377]                   ...future.conditions[[length(...future.conditions) + 
[10:32:26.377]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:26.377]                     cond$call), session = sessionInformation(), 
[10:32:26.377]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:26.377]                   signalCondition(cond)
[10:32:26.377]                 }
[10:32:26.377]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:26.377]                 "immediateCondition"))) {
[10:32:26.377]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:26.377]                   ...future.conditions[[length(...future.conditions) + 
[10:32:26.377]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:26.377]                   if (TRUE && !signal) {
[10:32:26.377]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:26.377]                     {
[10:32:26.377]                       inherits <- base::inherits
[10:32:26.377]                       invokeRestart <- base::invokeRestart
[10:32:26.377]                       is.null <- base::is.null
[10:32:26.377]                       muffled <- FALSE
[10:32:26.377]                       if (inherits(cond, "message")) {
[10:32:26.377]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:26.377]                         if (muffled) 
[10:32:26.377]                           invokeRestart("muffleMessage")
[10:32:26.377]                       }
[10:32:26.377]                       else if (inherits(cond, "warning")) {
[10:32:26.377]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:26.377]                         if (muffled) 
[10:32:26.377]                           invokeRestart("muffleWarning")
[10:32:26.377]                       }
[10:32:26.377]                       else if (inherits(cond, "condition")) {
[10:32:26.377]                         if (!is.null(pattern)) {
[10:32:26.377]                           computeRestarts <- base::computeRestarts
[10:32:26.377]                           grepl <- base::grepl
[10:32:26.377]                           restarts <- computeRestarts(cond)
[10:32:26.377]                           for (restart in restarts) {
[10:32:26.377]                             name <- restart$name
[10:32:26.377]                             if (is.null(name)) 
[10:32:26.377]                               next
[10:32:26.377]                             if (!grepl(pattern, name)) 
[10:32:26.377]                               next
[10:32:26.377]                             invokeRestart(restart)
[10:32:26.377]                             muffled <- TRUE
[10:32:26.377]                             break
[10:32:26.377]                           }
[10:32:26.377]                         }
[10:32:26.377]                       }
[10:32:26.377]                       invisible(muffled)
[10:32:26.377]                     }
[10:32:26.377]                     muffleCondition(cond, pattern = "^muffle")
[10:32:26.377]                   }
[10:32:26.377]                 }
[10:32:26.377]                 else {
[10:32:26.377]                   if (TRUE) {
[10:32:26.377]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:26.377]                     {
[10:32:26.377]                       inherits <- base::inherits
[10:32:26.377]                       invokeRestart <- base::invokeRestart
[10:32:26.377]                       is.null <- base::is.null
[10:32:26.377]                       muffled <- FALSE
[10:32:26.377]                       if (inherits(cond, "message")) {
[10:32:26.377]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:26.377]                         if (muffled) 
[10:32:26.377]                           invokeRestart("muffleMessage")
[10:32:26.377]                       }
[10:32:26.377]                       else if (inherits(cond, "warning")) {
[10:32:26.377]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:26.377]                         if (muffled) 
[10:32:26.377]                           invokeRestart("muffleWarning")
[10:32:26.377]                       }
[10:32:26.377]                       else if (inherits(cond, "condition")) {
[10:32:26.377]                         if (!is.null(pattern)) {
[10:32:26.377]                           computeRestarts <- base::computeRestarts
[10:32:26.377]                           grepl <- base::grepl
[10:32:26.377]                           restarts <- computeRestarts(cond)
[10:32:26.377]                           for (restart in restarts) {
[10:32:26.377]                             name <- restart$name
[10:32:26.377]                             if (is.null(name)) 
[10:32:26.377]                               next
[10:32:26.377]                             if (!grepl(pattern, name)) 
[10:32:26.377]                               next
[10:32:26.377]                             invokeRestart(restart)
[10:32:26.377]                             muffled <- TRUE
[10:32:26.377]                             break
[10:32:26.377]                           }
[10:32:26.377]                         }
[10:32:26.377]                       }
[10:32:26.377]                       invisible(muffled)
[10:32:26.377]                     }
[10:32:26.377]                     muffleCondition(cond, pattern = "^muffle")
[10:32:26.377]                   }
[10:32:26.377]                 }
[10:32:26.377]             }
[10:32:26.377]         }))
[10:32:26.377]     }, error = function(ex) {
[10:32:26.377]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:26.377]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:26.377]                 ...future.rng), started = ...future.startTime, 
[10:32:26.377]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:26.377]             version = "1.8"), class = "FutureResult")
[10:32:26.377]     }, finally = {
[10:32:26.377]         if (!identical(...future.workdir, getwd())) 
[10:32:26.377]             setwd(...future.workdir)
[10:32:26.377]         {
[10:32:26.377]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:26.377]                 ...future.oldOptions$nwarnings <- NULL
[10:32:26.377]             }
[10:32:26.377]             base::options(...future.oldOptions)
[10:32:26.377]             if (.Platform$OS.type == "windows") {
[10:32:26.377]                 old_names <- names(...future.oldEnvVars)
[10:32:26.377]                 envs <- base::Sys.getenv()
[10:32:26.377]                 names <- names(envs)
[10:32:26.377]                 common <- intersect(names, old_names)
[10:32:26.377]                 added <- setdiff(names, old_names)
[10:32:26.377]                 removed <- setdiff(old_names, names)
[10:32:26.377]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:26.377]                   envs[common]]
[10:32:26.377]                 NAMES <- toupper(changed)
[10:32:26.377]                 args <- list()
[10:32:26.377]                 for (kk in seq_along(NAMES)) {
[10:32:26.377]                   name <- changed[[kk]]
[10:32:26.377]                   NAME <- NAMES[[kk]]
[10:32:26.377]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:26.377]                     next
[10:32:26.377]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:26.377]                 }
[10:32:26.377]                 NAMES <- toupper(added)
[10:32:26.377]                 for (kk in seq_along(NAMES)) {
[10:32:26.377]                   name <- added[[kk]]
[10:32:26.377]                   NAME <- NAMES[[kk]]
[10:32:26.377]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:26.377]                     next
[10:32:26.377]                   args[[name]] <- ""
[10:32:26.377]                 }
[10:32:26.377]                 NAMES <- toupper(removed)
[10:32:26.377]                 for (kk in seq_along(NAMES)) {
[10:32:26.377]                   name <- removed[[kk]]
[10:32:26.377]                   NAME <- NAMES[[kk]]
[10:32:26.377]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:26.377]                     next
[10:32:26.377]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:26.377]                 }
[10:32:26.377]                 if (length(args) > 0) 
[10:32:26.377]                   base::do.call(base::Sys.setenv, args = args)
[10:32:26.377]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:26.377]             }
[10:32:26.377]             else {
[10:32:26.377]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:26.377]             }
[10:32:26.377]             {
[10:32:26.377]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:26.377]                   0L) {
[10:32:26.377]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:26.377]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:26.377]                   base::options(opts)
[10:32:26.377]                 }
[10:32:26.377]                 {
[10:32:26.377]                   {
[10:32:26.377]                     NULL
[10:32:26.377]                     RNGkind("Mersenne-Twister")
[10:32:26.377]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:26.377]                       inherits = FALSE)
[10:32:26.377]                   }
[10:32:26.377]                   options(future.plan = NULL)
[10:32:26.377]                   if (is.na(NA_character_)) 
[10:32:26.377]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:26.377]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:26.377]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:26.377]                     .init = FALSE)
[10:32:26.377]                 }
[10:32:26.377]             }
[10:32:26.377]         }
[10:32:26.377]     })
[10:32:26.377]     if (TRUE) {
[10:32:26.377]         base::sink(type = "output", split = FALSE)
[10:32:26.377]         if (TRUE) {
[10:32:26.377]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:26.377]         }
[10:32:26.377]         else {
[10:32:26.377]             ...future.result["stdout"] <- base::list(NULL)
[10:32:26.377]         }
[10:32:26.377]         base::close(...future.stdout)
[10:32:26.377]         ...future.stdout <- NULL
[10:32:26.377]     }
[10:32:26.377]     ...future.result$conditions <- ...future.conditions
[10:32:26.377]     ...future.result$finished <- base::Sys.time()
[10:32:26.377]     ...future.result
[10:32:26.377] }
[10:32:26.378] assign_globals() ...
[10:32:26.378] List of 2
[10:32:26.378]  $ x                    : int [1:2] 1 2
[10:32:26.378]  $ future.call.arguments:List of 1
[10:32:26.378]   ..$ : num 3
[10:32:26.378]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:32:26.378]  - attr(*, "where")=List of 2
[10:32:26.378]   ..$ x                    :<environment: R_EmptyEnv> 
[10:32:26.378]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[10:32:26.378]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:32:26.378]  - attr(*, "resolved")= logi FALSE
[10:32:26.378]  - attr(*, "total_size")= num 112
[10:32:26.378]  - attr(*, "already-done")= logi TRUE
[10:32:26.384] - copied ‘x’ to environment
[10:32:26.384] - copied ‘future.call.arguments’ to environment
[10:32:26.384] assign_globals() ... done
[10:32:26.385] plan(): Setting new future strategy stack:
[10:32:26.385] List of future strategies:
[10:32:26.385] 1. sequential:
[10:32:26.385]    - args: function (..., envir = parent.frame())
[10:32:26.385]    - tweaked: FALSE
[10:32:26.385]    - call: NULL
[10:32:26.385] plan(): nbrOfWorkers() = 1
[10:32:26.386] plan(): Setting new future strategy stack:
[10:32:26.386] List of future strategies:
[10:32:26.386] 1. sequential:
[10:32:26.386]    - args: function (..., envir = parent.frame())
[10:32:26.386]    - tweaked: FALSE
[10:32:26.386]    - call: plan(strategy, substitute = FALSE)
[10:32:26.387] plan(): nbrOfWorkers() = 1
[10:32:26.387] SequentialFuture started (and completed)
[10:32:26.387] - Launch lazy future ... done
[10:32:26.387] run() for ‘SequentialFuture’ ... done
[1] 6
** Sum function 'B' with plan('sequential') ...
function (x, ...) 
{
    sumt <- function(x) {
        message("Arguments '...' exists: ", exists("...", inherits = TRUE))
        y %<-% {
            sum(x, ...)
        }
        y
    }
    sumt(x)
}
<bytecode: 0x5644c8507af0>
Arguments '...' exists: TRUE
[10:32:26.388] getGlobalsAndPackages() ...
[10:32:26.388] Searching for globals...
[10:32:26.389] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[10:32:26.390] Searching for globals ... DONE
[10:32:26.390] Resolving globals: FALSE
[10:32:26.390] Tweak future expression to call with '...' arguments ...
[10:32:26.390] {
[10:32:26.390]     do.call(function(...) {
[10:32:26.390]         sum(x, ...)
[10:32:26.390]     }, args = future.call.arguments)
[10:32:26.390] }
[10:32:26.390] Tweak future expression to call with '...' arguments ... DONE
[10:32:26.391] The total size of the 2 globals is 112 bytes (112 bytes)
[10:32:26.391] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[10:32:26.391] - globals: [2] ‘x’, ‘future.call.arguments’
[10:32:26.391] 
[10:32:26.391] getGlobalsAndPackages() ... DONE
[10:32:26.391] run() for ‘Future’ ...
[10:32:26.392] - state: ‘created’
[10:32:26.392] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:26.392] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:26.392] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:26.392]   - Field: ‘label’
[10:32:26.392]   - Field: ‘local’
[10:32:26.392]   - Field: ‘owner’
[10:32:26.392]   - Field: ‘envir’
[10:32:26.392]   - Field: ‘packages’
[10:32:26.393]   - Field: ‘gc’
[10:32:26.393]   - Field: ‘conditions’
[10:32:26.393]   - Field: ‘expr’
[10:32:26.393]   - Field: ‘uuid’
[10:32:26.393]   - Field: ‘seed’
[10:32:26.393]   - Field: ‘version’
[10:32:26.393]   - Field: ‘result’
[10:32:26.393]   - Field: ‘asynchronous’
[10:32:26.393]   - Field: ‘calls’
[10:32:26.393]   - Field: ‘globals’
[10:32:26.393]   - Field: ‘stdout’
[10:32:26.394]   - Field: ‘earlySignal’
[10:32:26.394]   - Field: ‘lazy’
[10:32:26.394]   - Field: ‘state’
[10:32:26.394] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:26.394] - Launch lazy future ...
[10:32:26.394] Packages needed by the future expression (n = 0): <none>
[10:32:26.394] Packages needed by future strategies (n = 0): <none>
[10:32:26.395] {
[10:32:26.395]     {
[10:32:26.395]         {
[10:32:26.395]             ...future.startTime <- base::Sys.time()
[10:32:26.395]             {
[10:32:26.395]                 {
[10:32:26.395]                   {
[10:32:26.395]                     base::local({
[10:32:26.395]                       has_future <- base::requireNamespace("future", 
[10:32:26.395]                         quietly = TRUE)
[10:32:26.395]                       if (has_future) {
[10:32:26.395]                         ns <- base::getNamespace("future")
[10:32:26.395]                         version <- ns[[".package"]][["version"]]
[10:32:26.395]                         if (is.null(version)) 
[10:32:26.395]                           version <- utils::packageVersion("future")
[10:32:26.395]                       }
[10:32:26.395]                       else {
[10:32:26.395]                         version <- NULL
[10:32:26.395]                       }
[10:32:26.395]                       if (!has_future || version < "1.8.0") {
[10:32:26.395]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:26.395]                           "", base::R.version$version.string), 
[10:32:26.395]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:26.395]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:26.395]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:26.395]                             "release", "version")], collapse = " "), 
[10:32:26.395]                           hostname = base::Sys.info()[["nodename"]])
[10:32:26.395]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:26.395]                           info)
[10:32:26.395]                         info <- base::paste(info, collapse = "; ")
[10:32:26.395]                         if (!has_future) {
[10:32:26.395]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:26.395]                             info)
[10:32:26.395]                         }
[10:32:26.395]                         else {
[10:32:26.395]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:26.395]                             info, version)
[10:32:26.395]                         }
[10:32:26.395]                         base::stop(msg)
[10:32:26.395]                       }
[10:32:26.395]                     })
[10:32:26.395]                   }
[10:32:26.395]                   ...future.strategy.old <- future::plan("list")
[10:32:26.395]                   options(future.plan = NULL)
[10:32:26.395]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:26.395]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:26.395]                 }
[10:32:26.395]                 ...future.workdir <- getwd()
[10:32:26.395]             }
[10:32:26.395]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:26.395]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:26.395]         }
[10:32:26.395]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:26.395]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:26.395]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:26.395]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:26.395]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:26.395]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:26.395]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:26.395]             base::names(...future.oldOptions))
[10:32:26.395]     }
[10:32:26.395]     if (FALSE) {
[10:32:26.395]     }
[10:32:26.395]     else {
[10:32:26.395]         if (TRUE) {
[10:32:26.395]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:26.395]                 open = "w")
[10:32:26.395]         }
[10:32:26.395]         else {
[10:32:26.395]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:26.395]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:26.395]         }
[10:32:26.395]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:26.395]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:26.395]             base::sink(type = "output", split = FALSE)
[10:32:26.395]             base::close(...future.stdout)
[10:32:26.395]         }, add = TRUE)
[10:32:26.395]     }
[10:32:26.395]     ...future.frame <- base::sys.nframe()
[10:32:26.395]     ...future.conditions <- base::list()
[10:32:26.395]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:26.395]     if (FALSE) {
[10:32:26.395]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:26.395]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:26.395]     }
[10:32:26.395]     ...future.result <- base::tryCatch({
[10:32:26.395]         base::withCallingHandlers({
[10:32:26.395]             ...future.value <- base::withVisible(base::local({
[10:32:26.395]                 do.call(function(...) {
[10:32:26.395]                   sum(x, ...)
[10:32:26.395]                 }, args = future.call.arguments)
[10:32:26.395]             }))
[10:32:26.395]             future::FutureResult(value = ...future.value$value, 
[10:32:26.395]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:26.395]                   ...future.rng), globalenv = if (FALSE) 
[10:32:26.395]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:26.395]                     ...future.globalenv.names))
[10:32:26.395]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:26.395]         }, condition = base::local({
[10:32:26.395]             c <- base::c
[10:32:26.395]             inherits <- base::inherits
[10:32:26.395]             invokeRestart <- base::invokeRestart
[10:32:26.395]             length <- base::length
[10:32:26.395]             list <- base::list
[10:32:26.395]             seq.int <- base::seq.int
[10:32:26.395]             signalCondition <- base::signalCondition
[10:32:26.395]             sys.calls <- base::sys.calls
[10:32:26.395]             `[[` <- base::`[[`
[10:32:26.395]             `+` <- base::`+`
[10:32:26.395]             `<<-` <- base::`<<-`
[10:32:26.395]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:26.395]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:26.395]                   3L)]
[10:32:26.395]             }
[10:32:26.395]             function(cond) {
[10:32:26.395]                 is_error <- inherits(cond, "error")
[10:32:26.395]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:26.395]                   NULL)
[10:32:26.395]                 if (is_error) {
[10:32:26.395]                   sessionInformation <- function() {
[10:32:26.395]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:26.395]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:26.395]                       search = base::search(), system = base::Sys.info())
[10:32:26.395]                   }
[10:32:26.395]                   ...future.conditions[[length(...future.conditions) + 
[10:32:26.395]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:26.395]                     cond$call), session = sessionInformation(), 
[10:32:26.395]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:26.395]                   signalCondition(cond)
[10:32:26.395]                 }
[10:32:26.395]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:26.395]                 "immediateCondition"))) {
[10:32:26.395]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:26.395]                   ...future.conditions[[length(...future.conditions) + 
[10:32:26.395]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:26.395]                   if (TRUE && !signal) {
[10:32:26.395]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:26.395]                     {
[10:32:26.395]                       inherits <- base::inherits
[10:32:26.395]                       invokeRestart <- base::invokeRestart
[10:32:26.395]                       is.null <- base::is.null
[10:32:26.395]                       muffled <- FALSE
[10:32:26.395]                       if (inherits(cond, "message")) {
[10:32:26.395]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:26.395]                         if (muffled) 
[10:32:26.395]                           invokeRestart("muffleMessage")
[10:32:26.395]                       }
[10:32:26.395]                       else if (inherits(cond, "warning")) {
[10:32:26.395]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:26.395]                         if (muffled) 
[10:32:26.395]                           invokeRestart("muffleWarning")
[10:32:26.395]                       }
[10:32:26.395]                       else if (inherits(cond, "condition")) {
[10:32:26.395]                         if (!is.null(pattern)) {
[10:32:26.395]                           computeRestarts <- base::computeRestarts
[10:32:26.395]                           grepl <- base::grepl
[10:32:26.395]                           restarts <- computeRestarts(cond)
[10:32:26.395]                           for (restart in restarts) {
[10:32:26.395]                             name <- restart$name
[10:32:26.395]                             if (is.null(name)) 
[10:32:26.395]                               next
[10:32:26.395]                             if (!grepl(pattern, name)) 
[10:32:26.395]                               next
[10:32:26.395]                             invokeRestart(restart)
[10:32:26.395]                             muffled <- TRUE
[10:32:26.395]                             break
[10:32:26.395]                           }
[10:32:26.395]                         }
[10:32:26.395]                       }
[10:32:26.395]                       invisible(muffled)
[10:32:26.395]                     }
[10:32:26.395]                     muffleCondition(cond, pattern = "^muffle")
[10:32:26.395]                   }
[10:32:26.395]                 }
[10:32:26.395]                 else {
[10:32:26.395]                   if (TRUE) {
[10:32:26.395]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:26.395]                     {
[10:32:26.395]                       inherits <- base::inherits
[10:32:26.395]                       invokeRestart <- base::invokeRestart
[10:32:26.395]                       is.null <- base::is.null
[10:32:26.395]                       muffled <- FALSE
[10:32:26.395]                       if (inherits(cond, "message")) {
[10:32:26.395]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:26.395]                         if (muffled) 
[10:32:26.395]                           invokeRestart("muffleMessage")
[10:32:26.395]                       }
[10:32:26.395]                       else if (inherits(cond, "warning")) {
[10:32:26.395]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:26.395]                         if (muffled) 
[10:32:26.395]                           invokeRestart("muffleWarning")
[10:32:26.395]                       }
[10:32:26.395]                       else if (inherits(cond, "condition")) {
[10:32:26.395]                         if (!is.null(pattern)) {
[10:32:26.395]                           computeRestarts <- base::computeRestarts
[10:32:26.395]                           grepl <- base::grepl
[10:32:26.395]                           restarts <- computeRestarts(cond)
[10:32:26.395]                           for (restart in restarts) {
[10:32:26.395]                             name <- restart$name
[10:32:26.395]                             if (is.null(name)) 
[10:32:26.395]                               next
[10:32:26.395]                             if (!grepl(pattern, name)) 
[10:32:26.395]                               next
[10:32:26.395]                             invokeRestart(restart)
[10:32:26.395]                             muffled <- TRUE
[10:32:26.395]                             break
[10:32:26.395]                           }
[10:32:26.395]                         }
[10:32:26.395]                       }
[10:32:26.395]                       invisible(muffled)
[10:32:26.395]                     }
[10:32:26.395]                     muffleCondition(cond, pattern = "^muffle")
[10:32:26.395]                   }
[10:32:26.395]                 }
[10:32:26.395]             }
[10:32:26.395]         }))
[10:32:26.395]     }, error = function(ex) {
[10:32:26.395]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:26.395]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:26.395]                 ...future.rng), started = ...future.startTime, 
[10:32:26.395]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:26.395]             version = "1.8"), class = "FutureResult")
[10:32:26.395]     }, finally = {
[10:32:26.395]         if (!identical(...future.workdir, getwd())) 
[10:32:26.395]             setwd(...future.workdir)
[10:32:26.395]         {
[10:32:26.395]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:26.395]                 ...future.oldOptions$nwarnings <- NULL
[10:32:26.395]             }
[10:32:26.395]             base::options(...future.oldOptions)
[10:32:26.395]             if (.Platform$OS.type == "windows") {
[10:32:26.395]                 old_names <- names(...future.oldEnvVars)
[10:32:26.395]                 envs <- base::Sys.getenv()
[10:32:26.395]                 names <- names(envs)
[10:32:26.395]                 common <- intersect(names, old_names)
[10:32:26.395]                 added <- setdiff(names, old_names)
[10:32:26.395]                 removed <- setdiff(old_names, names)
[10:32:26.395]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:26.395]                   envs[common]]
[10:32:26.395]                 NAMES <- toupper(changed)
[10:32:26.395]                 args <- list()
[10:32:26.395]                 for (kk in seq_along(NAMES)) {
[10:32:26.395]                   name <- changed[[kk]]
[10:32:26.395]                   NAME <- NAMES[[kk]]
[10:32:26.395]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:26.395]                     next
[10:32:26.395]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:26.395]                 }
[10:32:26.395]                 NAMES <- toupper(added)
[10:32:26.395]                 for (kk in seq_along(NAMES)) {
[10:32:26.395]                   name <- added[[kk]]
[10:32:26.395]                   NAME <- NAMES[[kk]]
[10:32:26.395]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:26.395]                     next
[10:32:26.395]                   args[[name]] <- ""
[10:32:26.395]                 }
[10:32:26.395]                 NAMES <- toupper(removed)
[10:32:26.395]                 for (kk in seq_along(NAMES)) {
[10:32:26.395]                   name <- removed[[kk]]
[10:32:26.395]                   NAME <- NAMES[[kk]]
[10:32:26.395]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:26.395]                     next
[10:32:26.395]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:26.395]                 }
[10:32:26.395]                 if (length(args) > 0) 
[10:32:26.395]                   base::do.call(base::Sys.setenv, args = args)
[10:32:26.395]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:26.395]             }
[10:32:26.395]             else {
[10:32:26.395]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:26.395]             }
[10:32:26.395]             {
[10:32:26.395]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:26.395]                   0L) {
[10:32:26.395]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:26.395]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:26.395]                   base::options(opts)
[10:32:26.395]                 }
[10:32:26.395]                 {
[10:32:26.395]                   {
[10:32:26.395]                     NULL
[10:32:26.395]                     RNGkind("Mersenne-Twister")
[10:32:26.395]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:26.395]                       inherits = FALSE)
[10:32:26.395]                   }
[10:32:26.395]                   options(future.plan = NULL)
[10:32:26.395]                   if (is.na(NA_character_)) 
[10:32:26.395]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:26.395]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:26.395]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:26.395]                     .init = FALSE)
[10:32:26.395]                 }
[10:32:26.395]             }
[10:32:26.395]         }
[10:32:26.395]     })
[10:32:26.395]     if (TRUE) {
[10:32:26.395]         base::sink(type = "output", split = FALSE)
[10:32:26.395]         if (TRUE) {
[10:32:26.395]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:26.395]         }
[10:32:26.395]         else {
[10:32:26.395]             ...future.result["stdout"] <- base::list(NULL)
[10:32:26.395]         }
[10:32:26.395]         base::close(...future.stdout)
[10:32:26.395]         ...future.stdout <- NULL
[10:32:26.395]     }
[10:32:26.395]     ...future.result$conditions <- ...future.conditions
[10:32:26.395]     ...future.result$finished <- base::Sys.time()
[10:32:26.395]     ...future.result
[10:32:26.395] }
[10:32:26.396] assign_globals() ...
[10:32:26.396] List of 2
[10:32:26.396]  $ x                    : int [1:2] 1 2
[10:32:26.396]  $ future.call.arguments:List of 1
[10:32:26.396]   ..$ : num 3
[10:32:26.396]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:32:26.396]  - attr(*, "where")=List of 2
[10:32:26.396]   ..$ x                    :<environment: R_EmptyEnv> 
[10:32:26.396]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[10:32:26.396]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:32:26.396]  - attr(*, "resolved")= logi FALSE
[10:32:26.396]  - attr(*, "total_size")= num 112
[10:32:26.396]  - attr(*, "already-done")= logi TRUE
[10:32:26.401] - copied ‘x’ to environment
[10:32:26.402] - copied ‘future.call.arguments’ to environment
[10:32:26.402] assign_globals() ... done
[10:32:26.402] plan(): Setting new future strategy stack:
[10:32:26.402] List of future strategies:
[10:32:26.402] 1. sequential:
[10:32:26.402]    - args: function (..., envir = parent.frame())
[10:32:26.402]    - tweaked: FALSE
[10:32:26.402]    - call: NULL
[10:32:26.402] plan(): nbrOfWorkers() = 1
[10:32:26.403] plan(): Setting new future strategy stack:
[10:32:26.403] List of future strategies:
[10:32:26.403] 1. sequential:
[10:32:26.403]    - args: function (..., envir = parent.frame())
[10:32:26.403]    - tweaked: FALSE
[10:32:26.403]    - call: plan(strategy, substitute = FALSE)
[10:32:26.403] plan(): nbrOfWorkers() = 1
[10:32:26.404] SequentialFuture started (and completed)
[10:32:26.404] - Launch lazy future ... done
[10:32:26.404] run() for ‘SequentialFuture’ ... done
[1] 6
** Sum function 'C' with plan('sequential') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y)
    }
    y
}
<bytecode: 0x5644c86693a8>
Arguments '...' exists: FALSE
[10:32:26.404] getGlobalsAndPackages() ...
[10:32:26.404] Searching for globals...
[10:32:26.405] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘y’
[10:32:26.406] Searching for globals ... DONE
[10:32:26.406] Resolving globals: FALSE
[10:32:26.406] The total size of the 2 globals is 112 bytes (112 bytes)
[10:32:26.406] The total size of the 2 globals exported for future expression (‘{; sum(x, y); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[10:32:26.406] - globals: [2] ‘x’, ‘y’
[10:32:26.407] 
[10:32:26.407] getGlobalsAndPackages() ... DONE
[10:32:26.407] run() for ‘Future’ ...
[10:32:26.407] - state: ‘created’
[10:32:26.407] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:26.407] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:26.407] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:26.408]   - Field: ‘label’
[10:32:26.408]   - Field: ‘local’
[10:32:26.408]   - Field: ‘owner’
[10:32:26.408]   - Field: ‘envir’
[10:32:26.408]   - Field: ‘packages’
[10:32:26.408]   - Field: ‘gc’
[10:32:26.408]   - Field: ‘conditions’
[10:32:26.408]   - Field: ‘expr’
[10:32:26.408]   - Field: ‘uuid’
[10:32:26.408]   - Field: ‘seed’
[10:32:26.408]   - Field: ‘version’
[10:32:26.409]   - Field: ‘result’
[10:32:26.409]   - Field: ‘asynchronous’
[10:32:26.409]   - Field: ‘calls’
[10:32:26.409]   - Field: ‘globals’
[10:32:26.409]   - Field: ‘stdout’
[10:32:26.409]   - Field: ‘earlySignal’
[10:32:26.409]   - Field: ‘lazy’
[10:32:26.409]   - Field: ‘state’
[10:32:26.409] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:26.409] - Launch lazy future ...
[10:32:26.409] Packages needed by the future expression (n = 0): <none>
[10:32:26.410] Packages needed by future strategies (n = 0): <none>
[10:32:26.410] {
[10:32:26.410]     {
[10:32:26.410]         {
[10:32:26.410]             ...future.startTime <- base::Sys.time()
[10:32:26.410]             {
[10:32:26.410]                 {
[10:32:26.410]                   {
[10:32:26.410]                     base::local({
[10:32:26.410]                       has_future <- base::requireNamespace("future", 
[10:32:26.410]                         quietly = TRUE)
[10:32:26.410]                       if (has_future) {
[10:32:26.410]                         ns <- base::getNamespace("future")
[10:32:26.410]                         version <- ns[[".package"]][["version"]]
[10:32:26.410]                         if (is.null(version)) 
[10:32:26.410]                           version <- utils::packageVersion("future")
[10:32:26.410]                       }
[10:32:26.410]                       else {
[10:32:26.410]                         version <- NULL
[10:32:26.410]                       }
[10:32:26.410]                       if (!has_future || version < "1.8.0") {
[10:32:26.410]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:26.410]                           "", base::R.version$version.string), 
[10:32:26.410]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:26.410]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:26.410]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:26.410]                             "release", "version")], collapse = " "), 
[10:32:26.410]                           hostname = base::Sys.info()[["nodename"]])
[10:32:26.410]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:26.410]                           info)
[10:32:26.410]                         info <- base::paste(info, collapse = "; ")
[10:32:26.410]                         if (!has_future) {
[10:32:26.410]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:26.410]                             info)
[10:32:26.410]                         }
[10:32:26.410]                         else {
[10:32:26.410]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:26.410]                             info, version)
[10:32:26.410]                         }
[10:32:26.410]                         base::stop(msg)
[10:32:26.410]                       }
[10:32:26.410]                     })
[10:32:26.410]                   }
[10:32:26.410]                   ...future.strategy.old <- future::plan("list")
[10:32:26.410]                   options(future.plan = NULL)
[10:32:26.410]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:26.410]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:26.410]                 }
[10:32:26.410]                 ...future.workdir <- getwd()
[10:32:26.410]             }
[10:32:26.410]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:26.410]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:26.410]         }
[10:32:26.410]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:26.410]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:26.410]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:26.410]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:26.410]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:26.410]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:26.410]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:26.410]             base::names(...future.oldOptions))
[10:32:26.410]     }
[10:32:26.410]     if (FALSE) {
[10:32:26.410]     }
[10:32:26.410]     else {
[10:32:26.410]         if (TRUE) {
[10:32:26.410]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:26.410]                 open = "w")
[10:32:26.410]         }
[10:32:26.410]         else {
[10:32:26.410]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:26.410]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:26.410]         }
[10:32:26.410]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:26.410]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:26.410]             base::sink(type = "output", split = FALSE)
[10:32:26.410]             base::close(...future.stdout)
[10:32:26.410]         }, add = TRUE)
[10:32:26.410]     }
[10:32:26.410]     ...future.frame <- base::sys.nframe()
[10:32:26.410]     ...future.conditions <- base::list()
[10:32:26.410]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:26.410]     if (FALSE) {
[10:32:26.410]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:26.410]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:26.410]     }
[10:32:26.410]     ...future.result <- base::tryCatch({
[10:32:26.410]         base::withCallingHandlers({
[10:32:26.410]             ...future.value <- base::withVisible(base::local({
[10:32:26.410]                 sum(x, y)
[10:32:26.410]             }))
[10:32:26.410]             future::FutureResult(value = ...future.value$value, 
[10:32:26.410]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:26.410]                   ...future.rng), globalenv = if (FALSE) 
[10:32:26.410]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:26.410]                     ...future.globalenv.names))
[10:32:26.410]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:26.410]         }, condition = base::local({
[10:32:26.410]             c <- base::c
[10:32:26.410]             inherits <- base::inherits
[10:32:26.410]             invokeRestart <- base::invokeRestart
[10:32:26.410]             length <- base::length
[10:32:26.410]             list <- base::list
[10:32:26.410]             seq.int <- base::seq.int
[10:32:26.410]             signalCondition <- base::signalCondition
[10:32:26.410]             sys.calls <- base::sys.calls
[10:32:26.410]             `[[` <- base::`[[`
[10:32:26.410]             `+` <- base::`+`
[10:32:26.410]             `<<-` <- base::`<<-`
[10:32:26.410]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:26.410]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:26.410]                   3L)]
[10:32:26.410]             }
[10:32:26.410]             function(cond) {
[10:32:26.410]                 is_error <- inherits(cond, "error")
[10:32:26.410]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:26.410]                   NULL)
[10:32:26.410]                 if (is_error) {
[10:32:26.410]                   sessionInformation <- function() {
[10:32:26.410]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:26.410]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:26.410]                       search = base::search(), system = base::Sys.info())
[10:32:26.410]                   }
[10:32:26.410]                   ...future.conditions[[length(...future.conditions) + 
[10:32:26.410]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:26.410]                     cond$call), session = sessionInformation(), 
[10:32:26.410]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:26.410]                   signalCondition(cond)
[10:32:26.410]                 }
[10:32:26.410]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:26.410]                 "immediateCondition"))) {
[10:32:26.410]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:26.410]                   ...future.conditions[[length(...future.conditions) + 
[10:32:26.410]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:26.410]                   if (TRUE && !signal) {
[10:32:26.410]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:26.410]                     {
[10:32:26.410]                       inherits <- base::inherits
[10:32:26.410]                       invokeRestart <- base::invokeRestart
[10:32:26.410]                       is.null <- base::is.null
[10:32:26.410]                       muffled <- FALSE
[10:32:26.410]                       if (inherits(cond, "message")) {
[10:32:26.410]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:26.410]                         if (muffled) 
[10:32:26.410]                           invokeRestart("muffleMessage")
[10:32:26.410]                       }
[10:32:26.410]                       else if (inherits(cond, "warning")) {
[10:32:26.410]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:26.410]                         if (muffled) 
[10:32:26.410]                           invokeRestart("muffleWarning")
[10:32:26.410]                       }
[10:32:26.410]                       else if (inherits(cond, "condition")) {
[10:32:26.410]                         if (!is.null(pattern)) {
[10:32:26.410]                           computeRestarts <- base::computeRestarts
[10:32:26.410]                           grepl <- base::grepl
[10:32:26.410]                           restarts <- computeRestarts(cond)
[10:32:26.410]                           for (restart in restarts) {
[10:32:26.410]                             name <- restart$name
[10:32:26.410]                             if (is.null(name)) 
[10:32:26.410]                               next
[10:32:26.410]                             if (!grepl(pattern, name)) 
[10:32:26.410]                               next
[10:32:26.410]                             invokeRestart(restart)
[10:32:26.410]                             muffled <- TRUE
[10:32:26.410]                             break
[10:32:26.410]                           }
[10:32:26.410]                         }
[10:32:26.410]                       }
[10:32:26.410]                       invisible(muffled)
[10:32:26.410]                     }
[10:32:26.410]                     muffleCondition(cond, pattern = "^muffle")
[10:32:26.410]                   }
[10:32:26.410]                 }
[10:32:26.410]                 else {
[10:32:26.410]                   if (TRUE) {
[10:32:26.410]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:26.410]                     {
[10:32:26.410]                       inherits <- base::inherits
[10:32:26.410]                       invokeRestart <- base::invokeRestart
[10:32:26.410]                       is.null <- base::is.null
[10:32:26.410]                       muffled <- FALSE
[10:32:26.410]                       if (inherits(cond, "message")) {
[10:32:26.410]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:26.410]                         if (muffled) 
[10:32:26.410]                           invokeRestart("muffleMessage")
[10:32:26.410]                       }
[10:32:26.410]                       else if (inherits(cond, "warning")) {
[10:32:26.410]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:26.410]                         if (muffled) 
[10:32:26.410]                           invokeRestart("muffleWarning")
[10:32:26.410]                       }
[10:32:26.410]                       else if (inherits(cond, "condition")) {
[10:32:26.410]                         if (!is.null(pattern)) {
[10:32:26.410]                           computeRestarts <- base::computeRestarts
[10:32:26.410]                           grepl <- base::grepl
[10:32:26.410]                           restarts <- computeRestarts(cond)
[10:32:26.410]                           for (restart in restarts) {
[10:32:26.410]                             name <- restart$name
[10:32:26.410]                             if (is.null(name)) 
[10:32:26.410]                               next
[10:32:26.410]                             if (!grepl(pattern, name)) 
[10:32:26.410]                               next
[10:32:26.410]                             invokeRestart(restart)
[10:32:26.410]                             muffled <- TRUE
[10:32:26.410]                             break
[10:32:26.410]                           }
[10:32:26.410]                         }
[10:32:26.410]                       }
[10:32:26.410]                       invisible(muffled)
[10:32:26.410]                     }
[10:32:26.410]                     muffleCondition(cond, pattern = "^muffle")
[10:32:26.410]                   }
[10:32:26.410]                 }
[10:32:26.410]             }
[10:32:26.410]         }))
[10:32:26.410]     }, error = function(ex) {
[10:32:26.410]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:26.410]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:26.410]                 ...future.rng), started = ...future.startTime, 
[10:32:26.410]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:26.410]             version = "1.8"), class = "FutureResult")
[10:32:26.410]     }, finally = {
[10:32:26.410]         if (!identical(...future.workdir, getwd())) 
[10:32:26.410]             setwd(...future.workdir)
[10:32:26.410]         {
[10:32:26.410]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:26.410]                 ...future.oldOptions$nwarnings <- NULL
[10:32:26.410]             }
[10:32:26.410]             base::options(...future.oldOptions)
[10:32:26.410]             if (.Platform$OS.type == "windows") {
[10:32:26.410]                 old_names <- names(...future.oldEnvVars)
[10:32:26.410]                 envs <- base::Sys.getenv()
[10:32:26.410]                 names <- names(envs)
[10:32:26.410]                 common <- intersect(names, old_names)
[10:32:26.410]                 added <- setdiff(names, old_names)
[10:32:26.410]                 removed <- setdiff(old_names, names)
[10:32:26.410]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:26.410]                   envs[common]]
[10:32:26.410]                 NAMES <- toupper(changed)
[10:32:26.410]                 args <- list()
[10:32:26.410]                 for (kk in seq_along(NAMES)) {
[10:32:26.410]                   name <- changed[[kk]]
[10:32:26.410]                   NAME <- NAMES[[kk]]
[10:32:26.410]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:26.410]                     next
[10:32:26.410]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:26.410]                 }
[10:32:26.410]                 NAMES <- toupper(added)
[10:32:26.410]                 for (kk in seq_along(NAMES)) {
[10:32:26.410]                   name <- added[[kk]]
[10:32:26.410]                   NAME <- NAMES[[kk]]
[10:32:26.410]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:26.410]                     next
[10:32:26.410]                   args[[name]] <- ""
[10:32:26.410]                 }
[10:32:26.410]                 NAMES <- toupper(removed)
[10:32:26.410]                 for (kk in seq_along(NAMES)) {
[10:32:26.410]                   name <- removed[[kk]]
[10:32:26.410]                   NAME <- NAMES[[kk]]
[10:32:26.410]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:26.410]                     next
[10:32:26.410]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:26.410]                 }
[10:32:26.410]                 if (length(args) > 0) 
[10:32:26.410]                   base::do.call(base::Sys.setenv, args = args)
[10:32:26.410]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:26.410]             }
[10:32:26.410]             else {
[10:32:26.410]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:26.410]             }
[10:32:26.410]             {
[10:32:26.410]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:26.410]                   0L) {
[10:32:26.410]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:26.410]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:26.410]                   base::options(opts)
[10:32:26.410]                 }
[10:32:26.410]                 {
[10:32:26.410]                   {
[10:32:26.410]                     NULL
[10:32:26.410]                     RNGkind("Mersenne-Twister")
[10:32:26.410]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:26.410]                       inherits = FALSE)
[10:32:26.410]                   }
[10:32:26.410]                   options(future.plan = NULL)
[10:32:26.410]                   if (is.na(NA_character_)) 
[10:32:26.410]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:26.410]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:26.410]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:26.410]                     .init = FALSE)
[10:32:26.410]                 }
[10:32:26.410]             }
[10:32:26.410]         }
[10:32:26.410]     })
[10:32:26.410]     if (TRUE) {
[10:32:26.410]         base::sink(type = "output", split = FALSE)
[10:32:26.410]         if (TRUE) {
[10:32:26.410]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:26.410]         }
[10:32:26.410]         else {
[10:32:26.410]             ...future.result["stdout"] <- base::list(NULL)
[10:32:26.410]         }
[10:32:26.410]         base::close(...future.stdout)
[10:32:26.410]         ...future.stdout <- NULL
[10:32:26.410]     }
[10:32:26.410]     ...future.result$conditions <- ...future.conditions
[10:32:26.410]     ...future.result$finished <- base::Sys.time()
[10:32:26.410]     ...future.result
[10:32:26.410] }
[10:32:26.411] assign_globals() ...
[10:32:26.412] List of 2
[10:32:26.412]  $ x: int [1:2] 1 2
[10:32:26.412]  $ y: num 3
[10:32:26.412]  - attr(*, "where")=List of 2
[10:32:26.412]   ..$ x:<environment: R_EmptyEnv> 
[10:32:26.412]   ..$ y:<environment: R_EmptyEnv> 
[10:32:26.412]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:32:26.412]  - attr(*, "resolved")= logi FALSE
[10:32:26.412]  - attr(*, "total_size")= num 112
[10:32:26.412]  - attr(*, "already-done")= logi TRUE
[10:32:26.414] - copied ‘x’ to environment
[10:32:26.415] - copied ‘y’ to environment
[10:32:26.415] assign_globals() ... done
[10:32:26.415] plan(): Setting new future strategy stack:
[10:32:26.415] List of future strategies:
[10:32:26.415] 1. sequential:
[10:32:26.415]    - args: function (..., envir = parent.frame())
[10:32:26.415]    - tweaked: FALSE
[10:32:26.415]    - call: NULL
[10:32:26.415] plan(): nbrOfWorkers() = 1
[10:32:26.416] plan(): Setting new future strategy stack:
[10:32:26.416] List of future strategies:
[10:32:26.416] 1. sequential:
[10:32:26.416]    - args: function (..., envir = parent.frame())
[10:32:26.416]    - tweaked: FALSE
[10:32:26.416]    - call: plan(strategy, substitute = FALSE)
[10:32:26.416] plan(): nbrOfWorkers() = 1
[10:32:26.416] SequentialFuture started (and completed)
[10:32:26.417] - Launch lazy future ... done
[10:32:26.417] run() for ‘SequentialFuture’ ... done
[1] 6
** Sum function 'D' with plan('sequential') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y, ...)
    }
    y
}
<bytecode: 0x5644c8855f00>
Arguments '...' exists: FALSE
[10:32:26.417] getGlobalsAndPackages() ...
[10:32:26.417] Searching for globals...
[10:32:26.419] - globals found: [5] ‘{’, ‘sum’, ‘x’, ‘y’, ‘...’
[10:32:26.419] Searching for globals ... DONE
[10:32:26.419] Resolving globals: FALSE
[10:32:26.419] Tweak future expression to call with '...' arguments ...
[10:32:26.419] The total size of the 2 globals is 112 bytes (112 bytes)
[10:32:26.420] The total size of the 2 globals exported for future expression (‘{; sum(x, y, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[10:32:26.420] - globals: [2] ‘x’, ‘y’
[10:32:26.420] 
[10:32:26.420] getGlobalsAndPackages() ... DONE
[10:32:26.420] run() for ‘Future’ ...
[10:32:26.420] - state: ‘created’
[10:32:26.420] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:26.421] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:26.421] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:26.421]   - Field: ‘label’
[10:32:26.421]   - Field: ‘local’
[10:32:26.421]   - Field: ‘owner’
[10:32:26.421]   - Field: ‘envir’
[10:32:26.421]   - Field: ‘packages’
[10:32:26.421]   - Field: ‘gc’
[10:32:26.422]   - Field: ‘conditions’
[10:32:26.422]   - Field: ‘expr’
[10:32:26.422]   - Field: ‘uuid’
[10:32:26.422]   - Field: ‘seed’
[10:32:26.422]   - Field: ‘version’
[10:32:26.422]   - Field: ‘result’
[10:32:26.422]   - Field: ‘asynchronous’
[10:32:26.422]   - Field: ‘calls’
[10:32:26.422]   - Field: ‘globals’
[10:32:26.422]   - Field: ‘stdout’
[10:32:26.422]   - Field: ‘earlySignal’
[10:32:26.422]   - Field: ‘lazy’
[10:32:26.423]   - Field: ‘state’
[10:32:26.423] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:26.423] - Launch lazy future ...
[10:32:26.423] Packages needed by the future expression (n = 0): <none>
[10:32:26.423] Packages needed by future strategies (n = 0): <none>
[10:32:26.423] {
[10:32:26.423]     {
[10:32:26.423]         {
[10:32:26.423]             ...future.startTime <- base::Sys.time()
[10:32:26.423]             {
[10:32:26.423]                 {
[10:32:26.423]                   {
[10:32:26.423]                     base::local({
[10:32:26.423]                       has_future <- base::requireNamespace("future", 
[10:32:26.423]                         quietly = TRUE)
[10:32:26.423]                       if (has_future) {
[10:32:26.423]                         ns <- base::getNamespace("future")
[10:32:26.423]                         version <- ns[[".package"]][["version"]]
[10:32:26.423]                         if (is.null(version)) 
[10:32:26.423]                           version <- utils::packageVersion("future")
[10:32:26.423]                       }
[10:32:26.423]                       else {
[10:32:26.423]                         version <- NULL
[10:32:26.423]                       }
[10:32:26.423]                       if (!has_future || version < "1.8.0") {
[10:32:26.423]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:26.423]                           "", base::R.version$version.string), 
[10:32:26.423]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:26.423]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:26.423]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:26.423]                             "release", "version")], collapse = " "), 
[10:32:26.423]                           hostname = base::Sys.info()[["nodename"]])
[10:32:26.423]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:26.423]                           info)
[10:32:26.423]                         info <- base::paste(info, collapse = "; ")
[10:32:26.423]                         if (!has_future) {
[10:32:26.423]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:26.423]                             info)
[10:32:26.423]                         }
[10:32:26.423]                         else {
[10:32:26.423]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:26.423]                             info, version)
[10:32:26.423]                         }
[10:32:26.423]                         base::stop(msg)
[10:32:26.423]                       }
[10:32:26.423]                     })
[10:32:26.423]                   }
[10:32:26.423]                   ...future.strategy.old <- future::plan("list")
[10:32:26.423]                   options(future.plan = NULL)
[10:32:26.423]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:26.423]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:26.423]                 }
[10:32:26.423]                 ...future.workdir <- getwd()
[10:32:26.423]             }
[10:32:26.423]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:26.423]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:26.423]         }
[10:32:26.423]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:26.423]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:26.423]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:26.423]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:26.423]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:26.423]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:26.423]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:26.423]             base::names(...future.oldOptions))
[10:32:26.423]     }
[10:32:26.423]     if (FALSE) {
[10:32:26.423]     }
[10:32:26.423]     else {
[10:32:26.423]         if (TRUE) {
[10:32:26.423]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:26.423]                 open = "w")
[10:32:26.423]         }
[10:32:26.423]         else {
[10:32:26.423]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:26.423]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:26.423]         }
[10:32:26.423]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:26.423]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:26.423]             base::sink(type = "output", split = FALSE)
[10:32:26.423]             base::close(...future.stdout)
[10:32:26.423]         }, add = TRUE)
[10:32:26.423]     }
[10:32:26.423]     ...future.frame <- base::sys.nframe()
[10:32:26.423]     ...future.conditions <- base::list()
[10:32:26.423]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:26.423]     if (FALSE) {
[10:32:26.423]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:26.423]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:26.423]     }
[10:32:26.423]     ...future.result <- base::tryCatch({
[10:32:26.423]         base::withCallingHandlers({
[10:32:26.423]             ...future.value <- base::withVisible(base::local({
[10:32:26.423]                 sum(x, y, ...)
[10:32:26.423]             }))
[10:32:26.423]             future::FutureResult(value = ...future.value$value, 
[10:32:26.423]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:26.423]                   ...future.rng), globalenv = if (FALSE) 
[10:32:26.423]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:26.423]                     ...future.globalenv.names))
[10:32:26.423]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:26.423]         }, condition = base::local({
[10:32:26.423]             c <- base::c
[10:32:26.423]             inherits <- base::inherits
[10:32:26.423]             invokeRestart <- base::invokeRestart
[10:32:26.423]             length <- base::length
[10:32:26.423]             list <- base::list
[10:32:26.423]             seq.int <- base::seq.int
[10:32:26.423]             signalCondition <- base::signalCondition
[10:32:26.423]             sys.calls <- base::sys.calls
[10:32:26.423]             `[[` <- base::`[[`
[10:32:26.423]             `+` <- base::`+`
[10:32:26.423]             `<<-` <- base::`<<-`
[10:32:26.423]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:26.423]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:26.423]                   3L)]
[10:32:26.423]             }
[10:32:26.423]             function(cond) {
[10:32:26.423]                 is_error <- inherits(cond, "error")
[10:32:26.423]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:26.423]                   NULL)
[10:32:26.423]                 if (is_error) {
[10:32:26.423]                   sessionInformation <- function() {
[10:32:26.423]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:26.423]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:26.423]                       search = base::search(), system = base::Sys.info())
[10:32:26.423]                   }
[10:32:26.423]                   ...future.conditions[[length(...future.conditions) + 
[10:32:26.423]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:26.423]                     cond$call), session = sessionInformation(), 
[10:32:26.423]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:26.423]                   signalCondition(cond)
[10:32:26.423]                 }
[10:32:26.423]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:26.423]                 "immediateCondition"))) {
[10:32:26.423]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:26.423]                   ...future.conditions[[length(...future.conditions) + 
[10:32:26.423]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:26.423]                   if (TRUE && !signal) {
[10:32:26.423]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:26.423]                     {
[10:32:26.423]                       inherits <- base::inherits
[10:32:26.423]                       invokeRestart <- base::invokeRestart
[10:32:26.423]                       is.null <- base::is.null
[10:32:26.423]                       muffled <- FALSE
[10:32:26.423]                       if (inherits(cond, "message")) {
[10:32:26.423]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:26.423]                         if (muffled) 
[10:32:26.423]                           invokeRestart("muffleMessage")
[10:32:26.423]                       }
[10:32:26.423]                       else if (inherits(cond, "warning")) {
[10:32:26.423]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:26.423]                         if (muffled) 
[10:32:26.423]                           invokeRestart("muffleWarning")
[10:32:26.423]                       }
[10:32:26.423]                       else if (inherits(cond, "condition")) {
[10:32:26.423]                         if (!is.null(pattern)) {
[10:32:26.423]                           computeRestarts <- base::computeRestarts
[10:32:26.423]                           grepl <- base::grepl
[10:32:26.423]                           restarts <- computeRestarts(cond)
[10:32:26.423]                           for (restart in restarts) {
[10:32:26.423]                             name <- restart$name
[10:32:26.423]                             if (is.null(name)) 
[10:32:26.423]                               next
[10:32:26.423]                             if (!grepl(pattern, name)) 
[10:32:26.423]                               next
[10:32:26.423]                             invokeRestart(restart)
[10:32:26.423]                             muffled <- TRUE
[10:32:26.423]                             break
[10:32:26.423]                           }
[10:32:26.423]                         }
[10:32:26.423]                       }
[10:32:26.423]                       invisible(muffled)
[10:32:26.423]                     }
[10:32:26.423]                     muffleCondition(cond, pattern = "^muffle")
[10:32:26.423]                   }
[10:32:26.423]                 }
[10:32:26.423]                 else {
[10:32:26.423]                   if (TRUE) {
[10:32:26.423]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:26.423]                     {
[10:32:26.423]                       inherits <- base::inherits
[10:32:26.423]                       invokeRestart <- base::invokeRestart
[10:32:26.423]                       is.null <- base::is.null
[10:32:26.423]                       muffled <- FALSE
[10:32:26.423]                       if (inherits(cond, "message")) {
[10:32:26.423]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:26.423]                         if (muffled) 
[10:32:26.423]                           invokeRestart("muffleMessage")
[10:32:26.423]                       }
[10:32:26.423]                       else if (inherits(cond, "warning")) {
[10:32:26.423]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:26.423]                         if (muffled) 
[10:32:26.423]                           invokeRestart("muffleWarning")
[10:32:26.423]                       }
[10:32:26.423]                       else if (inherits(cond, "condition")) {
[10:32:26.423]                         if (!is.null(pattern)) {
[10:32:26.423]                           computeRestarts <- base::computeRestarts
[10:32:26.423]                           grepl <- base::grepl
[10:32:26.423]                           restarts <- computeRestarts(cond)
[10:32:26.423]                           for (restart in restarts) {
[10:32:26.423]                             name <- restart$name
[10:32:26.423]                             if (is.null(name)) 
[10:32:26.423]                               next
[10:32:26.423]                             if (!grepl(pattern, name)) 
[10:32:26.423]                               next
[10:32:26.423]                             invokeRestart(restart)
[10:32:26.423]                             muffled <- TRUE
[10:32:26.423]                             break
[10:32:26.423]                           }
[10:32:26.423]                         }
[10:32:26.423]                       }
[10:32:26.423]                       invisible(muffled)
[10:32:26.423]                     }
[10:32:26.423]                     muffleCondition(cond, pattern = "^muffle")
[10:32:26.423]                   }
[10:32:26.423]                 }
[10:32:26.423]             }
[10:32:26.423]         }))
[10:32:26.423]     }, error = function(ex) {
[10:32:26.423]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:26.423]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:26.423]                 ...future.rng), started = ...future.startTime, 
[10:32:26.423]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:26.423]             version = "1.8"), class = "FutureResult")
[10:32:26.423]     }, finally = {
[10:32:26.423]         if (!identical(...future.workdir, getwd())) 
[10:32:26.423]             setwd(...future.workdir)
[10:32:26.423]         {
[10:32:26.423]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:26.423]                 ...future.oldOptions$nwarnings <- NULL
[10:32:26.423]             }
[10:32:26.423]             base::options(...future.oldOptions)
[10:32:26.423]             if (.Platform$OS.type == "windows") {
[10:32:26.423]                 old_names <- names(...future.oldEnvVars)
[10:32:26.423]                 envs <- base::Sys.getenv()
[10:32:26.423]                 names <- names(envs)
[10:32:26.423]                 common <- intersect(names, old_names)
[10:32:26.423]                 added <- setdiff(names, old_names)
[10:32:26.423]                 removed <- setdiff(old_names, names)
[10:32:26.423]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:26.423]                   envs[common]]
[10:32:26.423]                 NAMES <- toupper(changed)
[10:32:26.423]                 args <- list()
[10:32:26.423]                 for (kk in seq_along(NAMES)) {
[10:32:26.423]                   name <- changed[[kk]]
[10:32:26.423]                   NAME <- NAMES[[kk]]
[10:32:26.423]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:26.423]                     next
[10:32:26.423]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:26.423]                 }
[10:32:26.423]                 NAMES <- toupper(added)
[10:32:26.423]                 for (kk in seq_along(NAMES)) {
[10:32:26.423]                   name <- added[[kk]]
[10:32:26.423]                   NAME <- NAMES[[kk]]
[10:32:26.423]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:26.423]                     next
[10:32:26.423]                   args[[name]] <- ""
[10:32:26.423]                 }
[10:32:26.423]                 NAMES <- toupper(removed)
[10:32:26.423]                 for (kk in seq_along(NAMES)) {
[10:32:26.423]                   name <- removed[[kk]]
[10:32:26.423]                   NAME <- NAMES[[kk]]
[10:32:26.423]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:26.423]                     next
[10:32:26.423]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:26.423]                 }
[10:32:26.423]                 if (length(args) > 0) 
[10:32:26.423]                   base::do.call(base::Sys.setenv, args = args)
[10:32:26.423]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:26.423]             }
[10:32:26.423]             else {
[10:32:26.423]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:26.423]             }
[10:32:26.423]             {
[10:32:26.423]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:26.423]                   0L) {
[10:32:26.423]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:26.423]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:26.423]                   base::options(opts)
[10:32:26.423]                 }
[10:32:26.423]                 {
[10:32:26.423]                   {
[10:32:26.423]                     NULL
[10:32:26.423]                     RNGkind("Mersenne-Twister")
[10:32:26.423]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:26.423]                       inherits = FALSE)
[10:32:26.423]                   }
[10:32:26.423]                   options(future.plan = NULL)
[10:32:26.423]                   if (is.na(NA_character_)) 
[10:32:26.423]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:26.423]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:26.423]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:26.423]                     .init = FALSE)
[10:32:26.423]                 }
[10:32:26.423]             }
[10:32:26.423]         }
[10:32:26.423]     })
[10:32:26.423]     if (TRUE) {
[10:32:26.423]         base::sink(type = "output", split = FALSE)
[10:32:26.423]         if (TRUE) {
[10:32:26.423]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:26.423]         }
[10:32:26.423]         else {
[10:32:26.423]             ...future.result["stdout"] <- base::list(NULL)
[10:32:26.423]         }
[10:32:26.423]         base::close(...future.stdout)
[10:32:26.423]         ...future.stdout <- NULL
[10:32:26.423]     }
[10:32:26.423]     ...future.result$conditions <- ...future.conditions
[10:32:26.423]     ...future.result$finished <- base::Sys.time()
[10:32:26.423]     ...future.result
[10:32:26.423] }
[10:32:26.425] assign_globals() ...
[10:32:26.425] List of 2
[10:32:26.425]  $ x: int [1:2] 1 2
[10:32:26.425]  $ y: num 3
[10:32:26.425]  - attr(*, "where")=List of 2
[10:32:26.425]   ..$ x:<environment: R_EmptyEnv> 
[10:32:26.425]   ..$ y:<environment: R_EmptyEnv> 
[10:32:26.425]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:32:26.425]  - attr(*, "resolved")= logi FALSE
[10:32:26.425]  - attr(*, "total_size")= num 112
[10:32:26.425]  - attr(*, "already-done")= logi TRUE
[10:32:26.429] - copied ‘x’ to environment
[10:32:26.429] - copied ‘y’ to environment
[10:32:26.429] assign_globals() ... done
[10:32:26.429] plan(): Setting new future strategy stack:
[10:32:26.429] List of future strategies:
[10:32:26.429] 1. sequential:
[10:32:26.429]    - args: function (..., envir = parent.frame())
[10:32:26.429]    - tweaked: FALSE
[10:32:26.429]    - call: NULL
[10:32:26.430] plan(): nbrOfWorkers() = 1
[10:32:26.430] plan(): Setting new future strategy stack:
[10:32:26.430] List of future strategies:
[10:32:26.430] 1. sequential:
[10:32:26.430]    - args: function (..., envir = parent.frame())
[10:32:26.430]    - tweaked: FALSE
[10:32:26.430]    - call: plan(strategy, substitute = FALSE)
[10:32:26.431] plan(): nbrOfWorkers() = 1
[10:32:26.431] SequentialFuture started (and completed)
[10:32:26.431] signalConditions() ...
[10:32:26.431]  - include = ‘immediateCondition’
[10:32:26.431]  - exclude = 
[10:32:26.431]  - resignal = FALSE
[10:32:26.431]  - Number of conditions: 1
[10:32:26.432] signalConditions() ... done
[10:32:26.432] - Launch lazy future ... done
[10:32:26.432] run() for ‘SequentialFuture’ ... done
[10:32:26.432] signalConditions() ...
[10:32:26.432]  - include = ‘immediateCondition’
[10:32:26.432]  - exclude = 
[10:32:26.432]  - resignal = FALSE
[10:32:26.432]  - Number of conditions: 1
[10:32:26.432] signalConditions() ... done
[10:32:26.432] Future state: ‘finished’
[10:32:26.433] signalConditions() ...
[10:32:26.433]  - include = ‘condition’
[10:32:26.433]  - exclude = ‘immediateCondition’
[10:32:26.433]  - resignal = TRUE
[10:32:26.433]  - Number of conditions: 1
[10:32:26.433]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[10:32:26.433] signalConditions() ... done
Error in eval(quote({ : '...' used in an incorrect context
[1] "Error in eval(quote({ : '...' used in an incorrect context\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    sum(x, y, ...)}), new.env()): '...' used in an incorrect context>
** Sum function 'E' with plan('sequential') ...
function (...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    globals <- globals::globalsByName("...", envir = environment())
    f <- future({
        fcn <- function() sum(...)
        fcn()
    }, envir = parent.frame(), globals = globals)
    y <- value(f)
    y
}
<bytecode: 0x5644c7a692f0>
Arguments '...' exists: TRUE
[10:32:26.434] getGlobalsAndPackages() ...
[10:32:26.434] - globals passed as-is: [1] ‘...’
[10:32:26.434] Resolving globals: FALSE
[10:32:26.434] Tweak future expression to call with '...' arguments ...
[10:32:26.434] {
[10:32:26.434]     do.call(function(...) {
[10:32:26.434]         fcn <- function() sum(...)
[10:32:26.434]         fcn()
[10:32:26.434]     }, args = future.call.arguments)
[10:32:26.434] }
[10:32:26.434] Tweak future expression to call with '...' arguments ... DONE
[10:32:26.435] The total size of the 1 globals is 112 bytes (112 bytes)
[10:32:26.435] The total size of the 1 globals exported for future expression (‘{; fcn <- function() sum(...); fcn(); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘future.call.arguments’ (112 bytes of class ‘list’)
[10:32:26.435] - globals: [1] ‘future.call.arguments’
[10:32:26.435] 
[10:32:26.435] getGlobalsAndPackages() ... DONE
[10:32:26.436] run() for ‘Future’ ...
[10:32:26.436] - state: ‘created’
[10:32:26.436] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:26.436] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:26.436] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:26.436]   - Field: ‘label’
[10:32:26.436]   - Field: ‘local’
[10:32:26.436]   - Field: ‘owner’
[10:32:26.436]   - Field: ‘envir’
[10:32:26.437]   - Field: ‘packages’
[10:32:26.437]   - Field: ‘gc’
[10:32:26.437]   - Field: ‘conditions’
[10:32:26.437]   - Field: ‘expr’
[10:32:26.437]   - Field: ‘uuid’
[10:32:26.437]   - Field: ‘seed’
[10:32:26.437]   - Field: ‘version’
[10:32:26.437]   - Field: ‘result’
[10:32:26.437]   - Field: ‘asynchronous’
[10:32:26.437]   - Field: ‘calls’
[10:32:26.437]   - Field: ‘globals’
[10:32:26.438]   - Field: ‘stdout’
[10:32:26.438]   - Field: ‘earlySignal’
[10:32:26.438]   - Field: ‘lazy’
[10:32:26.438]   - Field: ‘state’
[10:32:26.438] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:26.438] - Launch lazy future ...
[10:32:26.438] Packages needed by the future expression (n = 0): <none>
[10:32:26.438] Packages needed by future strategies (n = 0): <none>
[10:32:26.439] {
[10:32:26.439]     {
[10:32:26.439]         {
[10:32:26.439]             ...future.startTime <- base::Sys.time()
[10:32:26.439]             {
[10:32:26.439]                 {
[10:32:26.439]                   {
[10:32:26.439]                     base::local({
[10:32:26.439]                       has_future <- base::requireNamespace("future", 
[10:32:26.439]                         quietly = TRUE)
[10:32:26.439]                       if (has_future) {
[10:32:26.439]                         ns <- base::getNamespace("future")
[10:32:26.439]                         version <- ns[[".package"]][["version"]]
[10:32:26.439]                         if (is.null(version)) 
[10:32:26.439]                           version <- utils::packageVersion("future")
[10:32:26.439]                       }
[10:32:26.439]                       else {
[10:32:26.439]                         version <- NULL
[10:32:26.439]                       }
[10:32:26.439]                       if (!has_future || version < "1.8.0") {
[10:32:26.439]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:26.439]                           "", base::R.version$version.string), 
[10:32:26.439]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:26.439]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:26.439]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:26.439]                             "release", "version")], collapse = " "), 
[10:32:26.439]                           hostname = base::Sys.info()[["nodename"]])
[10:32:26.439]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:26.439]                           info)
[10:32:26.439]                         info <- base::paste(info, collapse = "; ")
[10:32:26.439]                         if (!has_future) {
[10:32:26.439]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:26.439]                             info)
[10:32:26.439]                         }
[10:32:26.439]                         else {
[10:32:26.439]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:26.439]                             info, version)
[10:32:26.439]                         }
[10:32:26.439]                         base::stop(msg)
[10:32:26.439]                       }
[10:32:26.439]                     })
[10:32:26.439]                   }
[10:32:26.439]                   ...future.strategy.old <- future::plan("list")
[10:32:26.439]                   options(future.plan = NULL)
[10:32:26.439]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:26.439]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:26.439]                 }
[10:32:26.439]                 ...future.workdir <- getwd()
[10:32:26.439]             }
[10:32:26.439]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:26.439]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:26.439]         }
[10:32:26.439]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:26.439]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:26.439]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:26.439]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:26.439]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:26.439]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:26.439]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:26.439]             base::names(...future.oldOptions))
[10:32:26.439]     }
[10:32:26.439]     if (FALSE) {
[10:32:26.439]     }
[10:32:26.439]     else {
[10:32:26.439]         if (TRUE) {
[10:32:26.439]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:26.439]                 open = "w")
[10:32:26.439]         }
[10:32:26.439]         else {
[10:32:26.439]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:26.439]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:26.439]         }
[10:32:26.439]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:26.439]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:26.439]             base::sink(type = "output", split = FALSE)
[10:32:26.439]             base::close(...future.stdout)
[10:32:26.439]         }, add = TRUE)
[10:32:26.439]     }
[10:32:26.439]     ...future.frame <- base::sys.nframe()
[10:32:26.439]     ...future.conditions <- base::list()
[10:32:26.439]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:26.439]     if (FALSE) {
[10:32:26.439]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:26.439]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:26.439]     }
[10:32:26.439]     ...future.result <- base::tryCatch({
[10:32:26.439]         base::withCallingHandlers({
[10:32:26.439]             ...future.value <- base::withVisible(base::local({
[10:32:26.439]                 do.call(function(...) {
[10:32:26.439]                   fcn <- function() sum(...)
[10:32:26.439]                   fcn()
[10:32:26.439]                 }, args = future.call.arguments)
[10:32:26.439]             }))
[10:32:26.439]             future::FutureResult(value = ...future.value$value, 
[10:32:26.439]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:26.439]                   ...future.rng), globalenv = if (FALSE) 
[10:32:26.439]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:26.439]                     ...future.globalenv.names))
[10:32:26.439]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:26.439]         }, condition = base::local({
[10:32:26.439]             c <- base::c
[10:32:26.439]             inherits <- base::inherits
[10:32:26.439]             invokeRestart <- base::invokeRestart
[10:32:26.439]             length <- base::length
[10:32:26.439]             list <- base::list
[10:32:26.439]             seq.int <- base::seq.int
[10:32:26.439]             signalCondition <- base::signalCondition
[10:32:26.439]             sys.calls <- base::sys.calls
[10:32:26.439]             `[[` <- base::`[[`
[10:32:26.439]             `+` <- base::`+`
[10:32:26.439]             `<<-` <- base::`<<-`
[10:32:26.439]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:26.439]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:26.439]                   3L)]
[10:32:26.439]             }
[10:32:26.439]             function(cond) {
[10:32:26.439]                 is_error <- inherits(cond, "error")
[10:32:26.439]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:26.439]                   NULL)
[10:32:26.439]                 if (is_error) {
[10:32:26.439]                   sessionInformation <- function() {
[10:32:26.439]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:26.439]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:26.439]                       search = base::search(), system = base::Sys.info())
[10:32:26.439]                   }
[10:32:26.439]                   ...future.conditions[[length(...future.conditions) + 
[10:32:26.439]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:26.439]                     cond$call), session = sessionInformation(), 
[10:32:26.439]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:26.439]                   signalCondition(cond)
[10:32:26.439]                 }
[10:32:26.439]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:26.439]                 "immediateCondition"))) {
[10:32:26.439]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:26.439]                   ...future.conditions[[length(...future.conditions) + 
[10:32:26.439]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:26.439]                   if (TRUE && !signal) {
[10:32:26.439]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:26.439]                     {
[10:32:26.439]                       inherits <- base::inherits
[10:32:26.439]                       invokeRestart <- base::invokeRestart
[10:32:26.439]                       is.null <- base::is.null
[10:32:26.439]                       muffled <- FALSE
[10:32:26.439]                       if (inherits(cond, "message")) {
[10:32:26.439]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:26.439]                         if (muffled) 
[10:32:26.439]                           invokeRestart("muffleMessage")
[10:32:26.439]                       }
[10:32:26.439]                       else if (inherits(cond, "warning")) {
[10:32:26.439]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:26.439]                         if (muffled) 
[10:32:26.439]                           invokeRestart("muffleWarning")
[10:32:26.439]                       }
[10:32:26.439]                       else if (inherits(cond, "condition")) {
[10:32:26.439]                         if (!is.null(pattern)) {
[10:32:26.439]                           computeRestarts <- base::computeRestarts
[10:32:26.439]                           grepl <- base::grepl
[10:32:26.439]                           restarts <- computeRestarts(cond)
[10:32:26.439]                           for (restart in restarts) {
[10:32:26.439]                             name <- restart$name
[10:32:26.439]                             if (is.null(name)) 
[10:32:26.439]                               next
[10:32:26.439]                             if (!grepl(pattern, name)) 
[10:32:26.439]                               next
[10:32:26.439]                             invokeRestart(restart)
[10:32:26.439]                             muffled <- TRUE
[10:32:26.439]                             break
[10:32:26.439]                           }
[10:32:26.439]                         }
[10:32:26.439]                       }
[10:32:26.439]                       invisible(muffled)
[10:32:26.439]                     }
[10:32:26.439]                     muffleCondition(cond, pattern = "^muffle")
[10:32:26.439]                   }
[10:32:26.439]                 }
[10:32:26.439]                 else {
[10:32:26.439]                   if (TRUE) {
[10:32:26.439]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:26.439]                     {
[10:32:26.439]                       inherits <- base::inherits
[10:32:26.439]                       invokeRestart <- base::invokeRestart
[10:32:26.439]                       is.null <- base::is.null
[10:32:26.439]                       muffled <- FALSE
[10:32:26.439]                       if (inherits(cond, "message")) {
[10:32:26.439]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:26.439]                         if (muffled) 
[10:32:26.439]                           invokeRestart("muffleMessage")
[10:32:26.439]                       }
[10:32:26.439]                       else if (inherits(cond, "warning")) {
[10:32:26.439]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:26.439]                         if (muffled) 
[10:32:26.439]                           invokeRestart("muffleWarning")
[10:32:26.439]                       }
[10:32:26.439]                       else if (inherits(cond, "condition")) {
[10:32:26.439]                         if (!is.null(pattern)) {
[10:32:26.439]                           computeRestarts <- base::computeRestarts
[10:32:26.439]                           grepl <- base::grepl
[10:32:26.439]                           restarts <- computeRestarts(cond)
[10:32:26.439]                           for (restart in restarts) {
[10:32:26.439]                             name <- restart$name
[10:32:26.439]                             if (is.null(name)) 
[10:32:26.439]                               next
[10:32:26.439]                             if (!grepl(pattern, name)) 
[10:32:26.439]                               next
[10:32:26.439]                             invokeRestart(restart)
[10:32:26.439]                             muffled <- TRUE
[10:32:26.439]                             break
[10:32:26.439]                           }
[10:32:26.439]                         }
[10:32:26.439]                       }
[10:32:26.439]                       invisible(muffled)
[10:32:26.439]                     }
[10:32:26.439]                     muffleCondition(cond, pattern = "^muffle")
[10:32:26.439]                   }
[10:32:26.439]                 }
[10:32:26.439]             }
[10:32:26.439]         }))
[10:32:26.439]     }, error = function(ex) {
[10:32:26.439]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:26.439]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:26.439]                 ...future.rng), started = ...future.startTime, 
[10:32:26.439]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:26.439]             version = "1.8"), class = "FutureResult")
[10:32:26.439]     }, finally = {
[10:32:26.439]         if (!identical(...future.workdir, getwd())) 
[10:32:26.439]             setwd(...future.workdir)
[10:32:26.439]         {
[10:32:26.439]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:26.439]                 ...future.oldOptions$nwarnings <- NULL
[10:32:26.439]             }
[10:32:26.439]             base::options(...future.oldOptions)
[10:32:26.439]             if (.Platform$OS.type == "windows") {
[10:32:26.439]                 old_names <- names(...future.oldEnvVars)
[10:32:26.439]                 envs <- base::Sys.getenv()
[10:32:26.439]                 names <- names(envs)
[10:32:26.439]                 common <- intersect(names, old_names)
[10:32:26.439]                 added <- setdiff(names, old_names)
[10:32:26.439]                 removed <- setdiff(old_names, names)
[10:32:26.439]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:26.439]                   envs[common]]
[10:32:26.439]                 NAMES <- toupper(changed)
[10:32:26.439]                 args <- list()
[10:32:26.439]                 for (kk in seq_along(NAMES)) {
[10:32:26.439]                   name <- changed[[kk]]
[10:32:26.439]                   NAME <- NAMES[[kk]]
[10:32:26.439]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:26.439]                     next
[10:32:26.439]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:26.439]                 }
[10:32:26.439]                 NAMES <- toupper(added)
[10:32:26.439]                 for (kk in seq_along(NAMES)) {
[10:32:26.439]                   name <- added[[kk]]
[10:32:26.439]                   NAME <- NAMES[[kk]]
[10:32:26.439]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:26.439]                     next
[10:32:26.439]                   args[[name]] <- ""
[10:32:26.439]                 }
[10:32:26.439]                 NAMES <- toupper(removed)
[10:32:26.439]                 for (kk in seq_along(NAMES)) {
[10:32:26.439]                   name <- removed[[kk]]
[10:32:26.439]                   NAME <- NAMES[[kk]]
[10:32:26.439]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:26.439]                     next
[10:32:26.439]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:26.439]                 }
[10:32:26.439]                 if (length(args) > 0) 
[10:32:26.439]                   base::do.call(base::Sys.setenv, args = args)
[10:32:26.439]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:26.439]             }
[10:32:26.439]             else {
[10:32:26.439]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:26.439]             }
[10:32:26.439]             {
[10:32:26.439]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:26.439]                   0L) {
[10:32:26.439]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:26.439]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:26.439]                   base::options(opts)
[10:32:26.439]                 }
[10:32:26.439]                 {
[10:32:26.439]                   {
[10:32:26.439]                     NULL
[10:32:26.439]                     RNGkind("Mersenne-Twister")
[10:32:26.439]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:26.439]                       inherits = FALSE)
[10:32:26.439]                   }
[10:32:26.439]                   options(future.plan = NULL)
[10:32:26.439]                   if (is.na(NA_character_)) 
[10:32:26.439]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:26.439]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:26.439]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:26.439]                     .init = FALSE)
[10:32:26.439]                 }
[10:32:26.439]             }
[10:32:26.439]         }
[10:32:26.439]     })
[10:32:26.439]     if (TRUE) {
[10:32:26.439]         base::sink(type = "output", split = FALSE)
[10:32:26.439]         if (TRUE) {
[10:32:26.439]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:26.439]         }
[10:32:26.439]         else {
[10:32:26.439]             ...future.result["stdout"] <- base::list(NULL)
[10:32:26.439]         }
[10:32:26.439]         base::close(...future.stdout)
[10:32:26.439]         ...future.stdout <- NULL
[10:32:26.439]     }
[10:32:26.439]     ...future.result$conditions <- ...future.conditions
[10:32:26.439]     ...future.result$finished <- base::Sys.time()
[10:32:26.439]     ...future.result
[10:32:26.439] }
[10:32:26.440] assign_globals() ...
[10:32:26.440] List of 1
[10:32:26.440]  $ future.call.arguments:List of 2
[10:32:26.440]   ..$ : int [1:2] 1 2
[10:32:26.440]   ..$ : num 3
[10:32:26.440]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:32:26.440]  - attr(*, "where")=List of 1
[10:32:26.440]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[10:32:26.440]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:32:26.440]  - attr(*, "resolved")= logi FALSE
[10:32:26.440]  - attr(*, "total_size")= num 112
[10:32:26.440]  - attr(*, "already-done")= logi TRUE
[10:32:26.443] - copied ‘future.call.arguments’ to environment
[10:32:26.443] assign_globals() ... done
[10:32:26.444] plan(): Setting new future strategy stack:
[10:32:26.444] List of future strategies:
[10:32:26.444] 1. sequential:
[10:32:26.444]    - args: function (..., envir = parent.frame())
[10:32:26.444]    - tweaked: FALSE
[10:32:26.444]    - call: NULL
[10:32:26.444] plan(): nbrOfWorkers() = 1
[10:32:26.445] plan(): Setting new future strategy stack:
[10:32:26.445] List of future strategies:
[10:32:26.445] 1. sequential:
[10:32:26.445]    - args: function (..., envir = parent.frame())
[10:32:26.445]    - tweaked: FALSE
[10:32:26.445]    - call: plan(strategy, substitute = FALSE)
[10:32:26.445] plan(): nbrOfWorkers() = 1
[10:32:26.445] SequentialFuture started (and completed)
[10:32:26.445] - Launch lazy future ... done
[10:32:26.445] run() for ‘SequentialFuture’ ... done
[1] 6
** Sum function 'F' with plan('sequential') ...
function (x, y) 
{
    message("Using '...' in a formula")
    fcn <- function(x, y) {
        z = ~list(...)
        sum(x, y)
    }
    f <- future(fcn(x, y))
    y <- value(f)
    y
}
<bytecode: 0x5644c62fa9b0>
Using '...' in a formula
[10:32:26.446] getGlobalsAndPackages() ...
[10:32:26.446] Searching for globals...
[10:32:26.449] - globals found: [9] ‘fcn’, ‘x’, ‘y’, ‘{’, ‘=’, ‘~’, ‘list’, ‘...’, ‘sum’
[10:32:26.449] Searching for globals ... DONE
[10:32:26.449] Resolving globals: FALSE
[10:32:26.449] Tweak future expression to call with '...' arguments ...
[10:32:26.449] The total size of the 3 globals is 4.18 KiB (4280 bytes)
[10:32:26.450] The total size of the 3 globals exported for future expression (‘fcn(x, y)’) is 4.18 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘fcn’ (4.07 KiB of class ‘function’), ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[10:32:26.450] - globals: [3] ‘fcn’, ‘x’, ‘y’
[10:32:26.450] 
[10:32:26.450] getGlobalsAndPackages() ... DONE
[10:32:26.450] run() for ‘Future’ ...
[10:32:26.450] - state: ‘created’
[10:32:26.451] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:26.451] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:26.451] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:26.451]   - Field: ‘label’
[10:32:26.451]   - Field: ‘local’
[10:32:26.452]   - Field: ‘owner’
[10:32:26.452]   - Field: ‘envir’
[10:32:26.452]   - Field: ‘packages’
[10:32:26.452]   - Field: ‘gc’
[10:32:26.452]   - Field: ‘conditions’
[10:32:26.453]   - Field: ‘expr’
[10:32:26.453]   - Field: ‘uuid’
[10:32:26.453]   - Field: ‘seed’
[10:32:26.453]   - Field: ‘version’
[10:32:26.453]   - Field: ‘result’
[10:32:26.453]   - Field: ‘asynchronous’
[10:32:26.453]   - Field: ‘calls’
[10:32:26.453]   - Field: ‘globals’
[10:32:26.453]   - Field: ‘stdout’
[10:32:26.453]   - Field: ‘earlySignal’
[10:32:26.453]   - Field: ‘lazy’
[10:32:26.454]   - Field: ‘state’
[10:32:26.454] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:26.454] - Launch lazy future ...
[10:32:26.454] Packages needed by the future expression (n = 0): <none>
[10:32:26.454] Packages needed by future strategies (n = 0): <none>
[10:32:26.454] {
[10:32:26.454]     {
[10:32:26.454]         {
[10:32:26.454]             ...future.startTime <- base::Sys.time()
[10:32:26.454]             {
[10:32:26.454]                 {
[10:32:26.454]                   {
[10:32:26.454]                     base::local({
[10:32:26.454]                       has_future <- base::requireNamespace("future", 
[10:32:26.454]                         quietly = TRUE)
[10:32:26.454]                       if (has_future) {
[10:32:26.454]                         ns <- base::getNamespace("future")
[10:32:26.454]                         version <- ns[[".package"]][["version"]]
[10:32:26.454]                         if (is.null(version)) 
[10:32:26.454]                           version <- utils::packageVersion("future")
[10:32:26.454]                       }
[10:32:26.454]                       else {
[10:32:26.454]                         version <- NULL
[10:32:26.454]                       }
[10:32:26.454]                       if (!has_future || version < "1.8.0") {
[10:32:26.454]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:26.454]                           "", base::R.version$version.string), 
[10:32:26.454]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:26.454]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:26.454]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:26.454]                             "release", "version")], collapse = " "), 
[10:32:26.454]                           hostname = base::Sys.info()[["nodename"]])
[10:32:26.454]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:26.454]                           info)
[10:32:26.454]                         info <- base::paste(info, collapse = "; ")
[10:32:26.454]                         if (!has_future) {
[10:32:26.454]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:26.454]                             info)
[10:32:26.454]                         }
[10:32:26.454]                         else {
[10:32:26.454]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:26.454]                             info, version)
[10:32:26.454]                         }
[10:32:26.454]                         base::stop(msg)
[10:32:26.454]                       }
[10:32:26.454]                     })
[10:32:26.454]                   }
[10:32:26.454]                   ...future.strategy.old <- future::plan("list")
[10:32:26.454]                   options(future.plan = NULL)
[10:32:26.454]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:26.454]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:26.454]                 }
[10:32:26.454]                 ...future.workdir <- getwd()
[10:32:26.454]             }
[10:32:26.454]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:26.454]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:26.454]         }
[10:32:26.454]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:26.454]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:26.454]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:26.454]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:26.454]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:26.454]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:26.454]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:26.454]             base::names(...future.oldOptions))
[10:32:26.454]     }
[10:32:26.454]     if (FALSE) {
[10:32:26.454]     }
[10:32:26.454]     else {
[10:32:26.454]         if (TRUE) {
[10:32:26.454]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:26.454]                 open = "w")
[10:32:26.454]         }
[10:32:26.454]         else {
[10:32:26.454]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:26.454]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:26.454]         }
[10:32:26.454]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:26.454]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:26.454]             base::sink(type = "output", split = FALSE)
[10:32:26.454]             base::close(...future.stdout)
[10:32:26.454]         }, add = TRUE)
[10:32:26.454]     }
[10:32:26.454]     ...future.frame <- base::sys.nframe()
[10:32:26.454]     ...future.conditions <- base::list()
[10:32:26.454]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:26.454]     if (FALSE) {
[10:32:26.454]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:26.454]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:26.454]     }
[10:32:26.454]     ...future.result <- base::tryCatch({
[10:32:26.454]         base::withCallingHandlers({
[10:32:26.454]             ...future.value <- base::withVisible(base::local(fcn(x, 
[10:32:26.454]                 y)))
[10:32:26.454]             future::FutureResult(value = ...future.value$value, 
[10:32:26.454]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:26.454]                   ...future.rng), globalenv = if (FALSE) 
[10:32:26.454]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:26.454]                     ...future.globalenv.names))
[10:32:26.454]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:26.454]         }, condition = base::local({
[10:32:26.454]             c <- base::c
[10:32:26.454]             inherits <- base::inherits
[10:32:26.454]             invokeRestart <- base::invokeRestart
[10:32:26.454]             length <- base::length
[10:32:26.454]             list <- base::list
[10:32:26.454]             seq.int <- base::seq.int
[10:32:26.454]             signalCondition <- base::signalCondition
[10:32:26.454]             sys.calls <- base::sys.calls
[10:32:26.454]             `[[` <- base::`[[`
[10:32:26.454]             `+` <- base::`+`
[10:32:26.454]             `<<-` <- base::`<<-`
[10:32:26.454]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:26.454]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:26.454]                   3L)]
[10:32:26.454]             }
[10:32:26.454]             function(cond) {
[10:32:26.454]                 is_error <- inherits(cond, "error")
[10:32:26.454]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:26.454]                   NULL)
[10:32:26.454]                 if (is_error) {
[10:32:26.454]                   sessionInformation <- function() {
[10:32:26.454]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:26.454]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:26.454]                       search = base::search(), system = base::Sys.info())
[10:32:26.454]                   }
[10:32:26.454]                   ...future.conditions[[length(...future.conditions) + 
[10:32:26.454]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:26.454]                     cond$call), session = sessionInformation(), 
[10:32:26.454]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:26.454]                   signalCondition(cond)
[10:32:26.454]                 }
[10:32:26.454]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:26.454]                 "immediateCondition"))) {
[10:32:26.454]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:26.454]                   ...future.conditions[[length(...future.conditions) + 
[10:32:26.454]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:26.454]                   if (TRUE && !signal) {
[10:32:26.454]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:26.454]                     {
[10:32:26.454]                       inherits <- base::inherits
[10:32:26.454]                       invokeRestart <- base::invokeRestart
[10:32:26.454]                       is.null <- base::is.null
[10:32:26.454]                       muffled <- FALSE
[10:32:26.454]                       if (inherits(cond, "message")) {
[10:32:26.454]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:26.454]                         if (muffled) 
[10:32:26.454]                           invokeRestart("muffleMessage")
[10:32:26.454]                       }
[10:32:26.454]                       else if (inherits(cond, "warning")) {
[10:32:26.454]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:26.454]                         if (muffled) 
[10:32:26.454]                           invokeRestart("muffleWarning")
[10:32:26.454]                       }
[10:32:26.454]                       else if (inherits(cond, "condition")) {
[10:32:26.454]                         if (!is.null(pattern)) {
[10:32:26.454]                           computeRestarts <- base::computeRestarts
[10:32:26.454]                           grepl <- base::grepl
[10:32:26.454]                           restarts <- computeRestarts(cond)
[10:32:26.454]                           for (restart in restarts) {
[10:32:26.454]                             name <- restart$name
[10:32:26.454]                             if (is.null(name)) 
[10:32:26.454]                               next
[10:32:26.454]                             if (!grepl(pattern, name)) 
[10:32:26.454]                               next
[10:32:26.454]                             invokeRestart(restart)
[10:32:26.454]                             muffled <- TRUE
[10:32:26.454]                             break
[10:32:26.454]                           }
[10:32:26.454]                         }
[10:32:26.454]                       }
[10:32:26.454]                       invisible(muffled)
[10:32:26.454]                     }
[10:32:26.454]                     muffleCondition(cond, pattern = "^muffle")
[10:32:26.454]                   }
[10:32:26.454]                 }
[10:32:26.454]                 else {
[10:32:26.454]                   if (TRUE) {
[10:32:26.454]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:26.454]                     {
[10:32:26.454]                       inherits <- base::inherits
[10:32:26.454]                       invokeRestart <- base::invokeRestart
[10:32:26.454]                       is.null <- base::is.null
[10:32:26.454]                       muffled <- FALSE
[10:32:26.454]                       if (inherits(cond, "message")) {
[10:32:26.454]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:26.454]                         if (muffled) 
[10:32:26.454]                           invokeRestart("muffleMessage")
[10:32:26.454]                       }
[10:32:26.454]                       else if (inherits(cond, "warning")) {
[10:32:26.454]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:26.454]                         if (muffled) 
[10:32:26.454]                           invokeRestart("muffleWarning")
[10:32:26.454]                       }
[10:32:26.454]                       else if (inherits(cond, "condition")) {
[10:32:26.454]                         if (!is.null(pattern)) {
[10:32:26.454]                           computeRestarts <- base::computeRestarts
[10:32:26.454]                           grepl <- base::grepl
[10:32:26.454]                           restarts <- computeRestarts(cond)
[10:32:26.454]                           for (restart in restarts) {
[10:32:26.454]                             name <- restart$name
[10:32:26.454]                             if (is.null(name)) 
[10:32:26.454]                               next
[10:32:26.454]                             if (!grepl(pattern, name)) 
[10:32:26.454]                               next
[10:32:26.454]                             invokeRestart(restart)
[10:32:26.454]                             muffled <- TRUE
[10:32:26.454]                             break
[10:32:26.454]                           }
[10:32:26.454]                         }
[10:32:26.454]                       }
[10:32:26.454]                       invisible(muffled)
[10:32:26.454]                     }
[10:32:26.454]                     muffleCondition(cond, pattern = "^muffle")
[10:32:26.454]                   }
[10:32:26.454]                 }
[10:32:26.454]             }
[10:32:26.454]         }))
[10:32:26.454]     }, error = function(ex) {
[10:32:26.454]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:26.454]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:26.454]                 ...future.rng), started = ...future.startTime, 
[10:32:26.454]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:26.454]             version = "1.8"), class = "FutureResult")
[10:32:26.454]     }, finally = {
[10:32:26.454]         if (!identical(...future.workdir, getwd())) 
[10:32:26.454]             setwd(...future.workdir)
[10:32:26.454]         {
[10:32:26.454]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:26.454]                 ...future.oldOptions$nwarnings <- NULL
[10:32:26.454]             }
[10:32:26.454]             base::options(...future.oldOptions)
[10:32:26.454]             if (.Platform$OS.type == "windows") {
[10:32:26.454]                 old_names <- names(...future.oldEnvVars)
[10:32:26.454]                 envs <- base::Sys.getenv()
[10:32:26.454]                 names <- names(envs)
[10:32:26.454]                 common <- intersect(names, old_names)
[10:32:26.454]                 added <- setdiff(names, old_names)
[10:32:26.454]                 removed <- setdiff(old_names, names)
[10:32:26.454]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:26.454]                   envs[common]]
[10:32:26.454]                 NAMES <- toupper(changed)
[10:32:26.454]                 args <- list()
[10:32:26.454]                 for (kk in seq_along(NAMES)) {
[10:32:26.454]                   name <- changed[[kk]]
[10:32:26.454]                   NAME <- NAMES[[kk]]
[10:32:26.454]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:26.454]                     next
[10:32:26.454]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:26.454]                 }
[10:32:26.454]                 NAMES <- toupper(added)
[10:32:26.454]                 for (kk in seq_along(NAMES)) {
[10:32:26.454]                   name <- added[[kk]]
[10:32:26.454]                   NAME <- NAMES[[kk]]
[10:32:26.454]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:26.454]                     next
[10:32:26.454]                   args[[name]] <- ""
[10:32:26.454]                 }
[10:32:26.454]                 NAMES <- toupper(removed)
[10:32:26.454]                 for (kk in seq_along(NAMES)) {
[10:32:26.454]                   name <- removed[[kk]]
[10:32:26.454]                   NAME <- NAMES[[kk]]
[10:32:26.454]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:26.454]                     next
[10:32:26.454]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:26.454]                 }
[10:32:26.454]                 if (length(args) > 0) 
[10:32:26.454]                   base::do.call(base::Sys.setenv, args = args)
[10:32:26.454]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:26.454]             }
[10:32:26.454]             else {
[10:32:26.454]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:26.454]             }
[10:32:26.454]             {
[10:32:26.454]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:26.454]                   0L) {
[10:32:26.454]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:26.454]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:26.454]                   base::options(opts)
[10:32:26.454]                 }
[10:32:26.454]                 {
[10:32:26.454]                   {
[10:32:26.454]                     NULL
[10:32:26.454]                     RNGkind("Mersenne-Twister")
[10:32:26.454]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:26.454]                       inherits = FALSE)
[10:32:26.454]                   }
[10:32:26.454]                   options(future.plan = NULL)
[10:32:26.454]                   if (is.na(NA_character_)) 
[10:32:26.454]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:26.454]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:26.454]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:26.454]                     .init = FALSE)
[10:32:26.454]                 }
[10:32:26.454]             }
[10:32:26.454]         }
[10:32:26.454]     })
[10:32:26.454]     if (TRUE) {
[10:32:26.454]         base::sink(type = "output", split = FALSE)
[10:32:26.454]         if (TRUE) {
[10:32:26.454]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:26.454]         }
[10:32:26.454]         else {
[10:32:26.454]             ...future.result["stdout"] <- base::list(NULL)
[10:32:26.454]         }
[10:32:26.454]         base::close(...future.stdout)
[10:32:26.454]         ...future.stdout <- NULL
[10:32:26.454]     }
[10:32:26.454]     ...future.result$conditions <- ...future.conditions
[10:32:26.454]     ...future.result$finished <- base::Sys.time()
[10:32:26.454]     ...future.result
[10:32:26.454] }
[10:32:26.456] assign_globals() ...
[10:32:26.456] List of 3
[10:32:26.456]  $ fcn:function (x, y)  
[10:32:26.456]  $ x  : int [1:2] 1 2
[10:32:26.456]  $ y  : num 3
[10:32:26.456]  - attr(*, "where")=List of 3
[10:32:26.456]   ..$ fcn:<environment: R_EmptyEnv> 
[10:32:26.456]   ..$ x  :<environment: R_EmptyEnv> 
[10:32:26.456]   ..$ y  :<environment: R_EmptyEnv> 
[10:32:26.456]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:32:26.456]  - attr(*, "resolved")= logi FALSE
[10:32:26.456]  - attr(*, "total_size")= num 4280
[10:32:26.456]  - attr(*, "already-done")= logi TRUE
[10:32:26.459] - reassign environment for ‘fcn’
[10:32:26.459] - copied ‘fcn’ to environment
[10:32:26.459] - copied ‘x’ to environment
[10:32:26.459] - copied ‘y’ to environment
[10:32:26.460] assign_globals() ... done
[10:32:26.460] plan(): Setting new future strategy stack:
[10:32:26.460] List of future strategies:
[10:32:26.460] 1. sequential:
[10:32:26.460]    - args: function (..., envir = parent.frame())
[10:32:26.460]    - tweaked: FALSE
[10:32:26.460]    - call: NULL
[10:32:26.460] plan(): nbrOfWorkers() = 1
[10:32:26.461] plan(): Setting new future strategy stack:
[10:32:26.461] List of future strategies:
[10:32:26.461] 1. sequential:
[10:32:26.461]    - args: function (..., envir = parent.frame())
[10:32:26.461]    - tweaked: FALSE
[10:32:26.461]    - call: plan(strategy, substitute = FALSE)
[10:32:26.461] plan(): nbrOfWorkers() = 1
[10:32:26.461] SequentialFuture started (and completed)
[10:32:26.462] - Launch lazy future ... done
[10:32:26.462] run() for ‘SequentialFuture’ ... done
[1] 6
Testing with 1 cores ... DONE
Testing with 2 cores ...
*** Global argument '...' ...
- plan('multicore') ...
[10:32:26.467] plan(): Setting new future strategy stack:
[10:32:26.467] List of future strategies:
[10:32:26.467] 1. multicore:
[10:32:26.467]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:32:26.467]    - tweaked: FALSE
[10:32:26.467]    - call: plan(strategy, substitute = FALSE)
[10:32:26.471] plan(): nbrOfWorkers() = 2
** Sum function 'A' with plan('multicore') ...
function (x, ...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, ...)
    }
    y
}
<bytecode: 0x5644c8250160>
Arguments '...' exists: TRUE
[10:32:26.471] getGlobalsAndPackages() ...
[10:32:26.471] Searching for globals...
[10:32:26.472] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[10:32:26.472] Searching for globals ... DONE
[10:32:26.472] Resolving globals: FALSE
[10:32:26.473] Tweak future expression to call with '...' arguments ...
[10:32:26.473] {
[10:32:26.473]     do.call(function(...) {
[10:32:26.473]         sum(x, ...)
[10:32:26.473]     }, args = future.call.arguments)
[10:32:26.473] }
[10:32:26.473] Tweak future expression to call with '...' arguments ... DONE
[10:32:26.473] The total size of the 2 globals is 112 bytes (112 bytes)
[10:32:26.474] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[10:32:26.474] - globals: [2] ‘x’, ‘future.call.arguments’
[10:32:26.474] 
[10:32:26.474] getGlobalsAndPackages() ... DONE
[10:32:26.474] run() for ‘Future’ ...
[10:32:26.474] - state: ‘created’
[10:32:26.474] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:32:26.478] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:26.478] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:32:26.478]   - Field: ‘label’
[10:32:26.478]   - Field: ‘local’
[10:32:26.478]   - Field: ‘owner’
[10:32:26.478]   - Field: ‘envir’
[10:32:26.478]   - Field: ‘workers’
[10:32:26.479]   - Field: ‘packages’
[10:32:26.479]   - Field: ‘gc’
[10:32:26.479]   - Field: ‘job’
[10:32:26.479]   - Field: ‘conditions’
[10:32:26.479]   - Field: ‘expr’
[10:32:26.479]   - Field: ‘uuid’
[10:32:26.479]   - Field: ‘seed’
[10:32:26.479]   - Field: ‘version’
[10:32:26.480]   - Field: ‘result’
[10:32:26.480]   - Field: ‘asynchronous’
[10:32:26.480]   - Field: ‘calls’
[10:32:26.481]   - Field: ‘globals’
[10:32:26.481]   - Field: ‘stdout’
[10:32:26.481]   - Field: ‘earlySignal’
[10:32:26.481]   - Field: ‘lazy’
[10:32:26.481]   - Field: ‘state’
[10:32:26.481] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:32:26.481] - Launch lazy future ...
[10:32:26.482] Packages needed by the future expression (n = 0): <none>
[10:32:26.482] Packages needed by future strategies (n = 0): <none>
[10:32:26.483] {
[10:32:26.483]     {
[10:32:26.483]         {
[10:32:26.483]             ...future.startTime <- base::Sys.time()
[10:32:26.483]             {
[10:32:26.483]                 {
[10:32:26.483]                   {
[10:32:26.483]                     {
[10:32:26.483]                       base::local({
[10:32:26.483]                         has_future <- base::requireNamespace("future", 
[10:32:26.483]                           quietly = TRUE)
[10:32:26.483]                         if (has_future) {
[10:32:26.483]                           ns <- base::getNamespace("future")
[10:32:26.483]                           version <- ns[[".package"]][["version"]]
[10:32:26.483]                           if (is.null(version)) 
[10:32:26.483]                             version <- utils::packageVersion("future")
[10:32:26.483]                         }
[10:32:26.483]                         else {
[10:32:26.483]                           version <- NULL
[10:32:26.483]                         }
[10:32:26.483]                         if (!has_future || version < "1.8.0") {
[10:32:26.483]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:26.483]                             "", base::R.version$version.string), 
[10:32:26.483]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:26.483]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:26.483]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:26.483]                               "release", "version")], collapse = " "), 
[10:32:26.483]                             hostname = base::Sys.info()[["nodename"]])
[10:32:26.483]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:26.483]                             info)
[10:32:26.483]                           info <- base::paste(info, collapse = "; ")
[10:32:26.483]                           if (!has_future) {
[10:32:26.483]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:26.483]                               info)
[10:32:26.483]                           }
[10:32:26.483]                           else {
[10:32:26.483]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:26.483]                               info, version)
[10:32:26.483]                           }
[10:32:26.483]                           base::stop(msg)
[10:32:26.483]                         }
[10:32:26.483]                       })
[10:32:26.483]                     }
[10:32:26.483]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:26.483]                     base::options(mc.cores = 1L)
[10:32:26.483]                   }
[10:32:26.483]                   ...future.strategy.old <- future::plan("list")
[10:32:26.483]                   options(future.plan = NULL)
[10:32:26.483]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:26.483]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:26.483]                 }
[10:32:26.483]                 ...future.workdir <- getwd()
[10:32:26.483]             }
[10:32:26.483]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:26.483]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:26.483]         }
[10:32:26.483]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:26.483]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:26.483]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:26.483]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:26.483]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:26.483]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:26.483]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:26.483]             base::names(...future.oldOptions))
[10:32:26.483]     }
[10:32:26.483]     if (FALSE) {
[10:32:26.483]     }
[10:32:26.483]     else {
[10:32:26.483]         if (TRUE) {
[10:32:26.483]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:26.483]                 open = "w")
[10:32:26.483]         }
[10:32:26.483]         else {
[10:32:26.483]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:26.483]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:26.483]         }
[10:32:26.483]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:26.483]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:26.483]             base::sink(type = "output", split = FALSE)
[10:32:26.483]             base::close(...future.stdout)
[10:32:26.483]         }, add = TRUE)
[10:32:26.483]     }
[10:32:26.483]     ...future.frame <- base::sys.nframe()
[10:32:26.483]     ...future.conditions <- base::list()
[10:32:26.483]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:26.483]     if (FALSE) {
[10:32:26.483]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:26.483]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:26.483]     }
[10:32:26.483]     ...future.result <- base::tryCatch({
[10:32:26.483]         base::withCallingHandlers({
[10:32:26.483]             ...future.value <- base::withVisible(base::local({
[10:32:26.483]                 withCallingHandlers({
[10:32:26.483]                   {
[10:32:26.483]                     do.call(function(...) {
[10:32:26.483]                       sum(x, ...)
[10:32:26.483]                     }, args = future.call.arguments)
[10:32:26.483]                   }
[10:32:26.483]                 }, immediateCondition = function(cond) {
[10:32:26.483]                   save_rds <- function (object, pathname, ...) 
[10:32:26.483]                   {
[10:32:26.483]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:32:26.483]                     if (file_test("-f", pathname_tmp)) {
[10:32:26.483]                       fi_tmp <- file.info(pathname_tmp)
[10:32:26.483]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:32:26.483]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:26.483]                         fi_tmp[["mtime"]])
[10:32:26.483]                     }
[10:32:26.483]                     tryCatch({
[10:32:26.483]                       saveRDS(object, file = pathname_tmp, ...)
[10:32:26.483]                     }, error = function(ex) {
[10:32:26.483]                       msg <- conditionMessage(ex)
[10:32:26.483]                       fi_tmp <- file.info(pathname_tmp)
[10:32:26.483]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:32:26.483]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:26.483]                         fi_tmp[["mtime"]], msg)
[10:32:26.483]                       ex$message <- msg
[10:32:26.483]                       stop(ex)
[10:32:26.483]                     })
[10:32:26.483]                     stopifnot(file_test("-f", pathname_tmp))
[10:32:26.483]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:32:26.483]                     if (!res || file_test("-f", pathname_tmp)) {
[10:32:26.483]                       fi_tmp <- file.info(pathname_tmp)
[10:32:26.483]                       fi <- file.info(pathname)
[10:32:26.483]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:32:26.483]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:26.483]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:32:26.483]                         fi[["size"]], fi[["mtime"]])
[10:32:26.483]                       stop(msg)
[10:32:26.483]                     }
[10:32:26.483]                     invisible(pathname)
[10:32:26.483]                   }
[10:32:26.483]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:32:26.483]                     rootPath = tempdir()) 
[10:32:26.483]                   {
[10:32:26.483]                     obj <- list(time = Sys.time(), condition = cond)
[10:32:26.483]                     file <- tempfile(pattern = class(cond)[1], 
[10:32:26.483]                       tmpdir = path, fileext = ".rds")
[10:32:26.483]                     save_rds(obj, file)
[10:32:26.483]                   }
[10:32:26.483]                   saveImmediateCondition(cond, path = "/tmp/RtmpojvsR9/.future/immediateConditions")
[10:32:26.483]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:26.483]                   {
[10:32:26.483]                     inherits <- base::inherits
[10:32:26.483]                     invokeRestart <- base::invokeRestart
[10:32:26.483]                     is.null <- base::is.null
[10:32:26.483]                     muffled <- FALSE
[10:32:26.483]                     if (inherits(cond, "message")) {
[10:32:26.483]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:26.483]                       if (muffled) 
[10:32:26.483]                         invokeRestart("muffleMessage")
[10:32:26.483]                     }
[10:32:26.483]                     else if (inherits(cond, "warning")) {
[10:32:26.483]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:26.483]                       if (muffled) 
[10:32:26.483]                         invokeRestart("muffleWarning")
[10:32:26.483]                     }
[10:32:26.483]                     else if (inherits(cond, "condition")) {
[10:32:26.483]                       if (!is.null(pattern)) {
[10:32:26.483]                         computeRestarts <- base::computeRestarts
[10:32:26.483]                         grepl <- base::grepl
[10:32:26.483]                         restarts <- computeRestarts(cond)
[10:32:26.483]                         for (restart in restarts) {
[10:32:26.483]                           name <- restart$name
[10:32:26.483]                           if (is.null(name)) 
[10:32:26.483]                             next
[10:32:26.483]                           if (!grepl(pattern, name)) 
[10:32:26.483]                             next
[10:32:26.483]                           invokeRestart(restart)
[10:32:26.483]                           muffled <- TRUE
[10:32:26.483]                           break
[10:32:26.483]                         }
[10:32:26.483]                       }
[10:32:26.483]                     }
[10:32:26.483]                     invisible(muffled)
[10:32:26.483]                   }
[10:32:26.483]                   muffleCondition(cond)
[10:32:26.483]                 })
[10:32:26.483]             }))
[10:32:26.483]             future::FutureResult(value = ...future.value$value, 
[10:32:26.483]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:26.483]                   ...future.rng), globalenv = if (FALSE) 
[10:32:26.483]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:26.483]                     ...future.globalenv.names))
[10:32:26.483]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:26.483]         }, condition = base::local({
[10:32:26.483]             c <- base::c
[10:32:26.483]             inherits <- base::inherits
[10:32:26.483]             invokeRestart <- base::invokeRestart
[10:32:26.483]             length <- base::length
[10:32:26.483]             list <- base::list
[10:32:26.483]             seq.int <- base::seq.int
[10:32:26.483]             signalCondition <- base::signalCondition
[10:32:26.483]             sys.calls <- base::sys.calls
[10:32:26.483]             `[[` <- base::`[[`
[10:32:26.483]             `+` <- base::`+`
[10:32:26.483]             `<<-` <- base::`<<-`
[10:32:26.483]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:26.483]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:26.483]                   3L)]
[10:32:26.483]             }
[10:32:26.483]             function(cond) {
[10:32:26.483]                 is_error <- inherits(cond, "error")
[10:32:26.483]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:26.483]                   NULL)
[10:32:26.483]                 if (is_error) {
[10:32:26.483]                   sessionInformation <- function() {
[10:32:26.483]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:26.483]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:26.483]                       search = base::search(), system = base::Sys.info())
[10:32:26.483]                   }
[10:32:26.483]                   ...future.conditions[[length(...future.conditions) + 
[10:32:26.483]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:26.483]                     cond$call), session = sessionInformation(), 
[10:32:26.483]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:26.483]                   signalCondition(cond)
[10:32:26.483]                 }
[10:32:26.483]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:26.483]                 "immediateCondition"))) {
[10:32:26.483]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:26.483]                   ...future.conditions[[length(...future.conditions) + 
[10:32:26.483]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:26.483]                   if (TRUE && !signal) {
[10:32:26.483]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:26.483]                     {
[10:32:26.483]                       inherits <- base::inherits
[10:32:26.483]                       invokeRestart <- base::invokeRestart
[10:32:26.483]                       is.null <- base::is.null
[10:32:26.483]                       muffled <- FALSE
[10:32:26.483]                       if (inherits(cond, "message")) {
[10:32:26.483]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:26.483]                         if (muffled) 
[10:32:26.483]                           invokeRestart("muffleMessage")
[10:32:26.483]                       }
[10:32:26.483]                       else if (inherits(cond, "warning")) {
[10:32:26.483]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:26.483]                         if (muffled) 
[10:32:26.483]                           invokeRestart("muffleWarning")
[10:32:26.483]                       }
[10:32:26.483]                       else if (inherits(cond, "condition")) {
[10:32:26.483]                         if (!is.null(pattern)) {
[10:32:26.483]                           computeRestarts <- base::computeRestarts
[10:32:26.483]                           grepl <- base::grepl
[10:32:26.483]                           restarts <- computeRestarts(cond)
[10:32:26.483]                           for (restart in restarts) {
[10:32:26.483]                             name <- restart$name
[10:32:26.483]                             if (is.null(name)) 
[10:32:26.483]                               next
[10:32:26.483]                             if (!grepl(pattern, name)) 
[10:32:26.483]                               next
[10:32:26.483]                             invokeRestart(restart)
[10:32:26.483]                             muffled <- TRUE
[10:32:26.483]                             break
[10:32:26.483]                           }
[10:32:26.483]                         }
[10:32:26.483]                       }
[10:32:26.483]                       invisible(muffled)
[10:32:26.483]                     }
[10:32:26.483]                     muffleCondition(cond, pattern = "^muffle")
[10:32:26.483]                   }
[10:32:26.483]                 }
[10:32:26.483]                 else {
[10:32:26.483]                   if (TRUE) {
[10:32:26.483]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:26.483]                     {
[10:32:26.483]                       inherits <- base::inherits
[10:32:26.483]                       invokeRestart <- base::invokeRestart
[10:32:26.483]                       is.null <- base::is.null
[10:32:26.483]                       muffled <- FALSE
[10:32:26.483]                       if (inherits(cond, "message")) {
[10:32:26.483]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:26.483]                         if (muffled) 
[10:32:26.483]                           invokeRestart("muffleMessage")
[10:32:26.483]                       }
[10:32:26.483]                       else if (inherits(cond, "warning")) {
[10:32:26.483]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:26.483]                         if (muffled) 
[10:32:26.483]                           invokeRestart("muffleWarning")
[10:32:26.483]                       }
[10:32:26.483]                       else if (inherits(cond, "condition")) {
[10:32:26.483]                         if (!is.null(pattern)) {
[10:32:26.483]                           computeRestarts <- base::computeRestarts
[10:32:26.483]                           grepl <- base::grepl
[10:32:26.483]                           restarts <- computeRestarts(cond)
[10:32:26.483]                           for (restart in restarts) {
[10:32:26.483]                             name <- restart$name
[10:32:26.483]                             if (is.null(name)) 
[10:32:26.483]                               next
[10:32:26.483]                             if (!grepl(pattern, name)) 
[10:32:26.483]                               next
[10:32:26.483]                             invokeRestart(restart)
[10:32:26.483]                             muffled <- TRUE
[10:32:26.483]                             break
[10:32:26.483]                           }
[10:32:26.483]                         }
[10:32:26.483]                       }
[10:32:26.483]                       invisible(muffled)
[10:32:26.483]                     }
[10:32:26.483]                     muffleCondition(cond, pattern = "^muffle")
[10:32:26.483]                   }
[10:32:26.483]                 }
[10:32:26.483]             }
[10:32:26.483]         }))
[10:32:26.483]     }, error = function(ex) {
[10:32:26.483]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:26.483]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:26.483]                 ...future.rng), started = ...future.startTime, 
[10:32:26.483]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:26.483]             version = "1.8"), class = "FutureResult")
[10:32:26.483]     }, finally = {
[10:32:26.483]         if (!identical(...future.workdir, getwd())) 
[10:32:26.483]             setwd(...future.workdir)
[10:32:26.483]         {
[10:32:26.483]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:26.483]                 ...future.oldOptions$nwarnings <- NULL
[10:32:26.483]             }
[10:32:26.483]             base::options(...future.oldOptions)
[10:32:26.483]             if (.Platform$OS.type == "windows") {
[10:32:26.483]                 old_names <- names(...future.oldEnvVars)
[10:32:26.483]                 envs <- base::Sys.getenv()
[10:32:26.483]                 names <- names(envs)
[10:32:26.483]                 common <- intersect(names, old_names)
[10:32:26.483]                 added <- setdiff(names, old_names)
[10:32:26.483]                 removed <- setdiff(old_names, names)
[10:32:26.483]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:26.483]                   envs[common]]
[10:32:26.483]                 NAMES <- toupper(changed)
[10:32:26.483]                 args <- list()
[10:32:26.483]                 for (kk in seq_along(NAMES)) {
[10:32:26.483]                   name <- changed[[kk]]
[10:32:26.483]                   NAME <- NAMES[[kk]]
[10:32:26.483]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:26.483]                     next
[10:32:26.483]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:26.483]                 }
[10:32:26.483]                 NAMES <- toupper(added)
[10:32:26.483]                 for (kk in seq_along(NAMES)) {
[10:32:26.483]                   name <- added[[kk]]
[10:32:26.483]                   NAME <- NAMES[[kk]]
[10:32:26.483]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:26.483]                     next
[10:32:26.483]                   args[[name]] <- ""
[10:32:26.483]                 }
[10:32:26.483]                 NAMES <- toupper(removed)
[10:32:26.483]                 for (kk in seq_along(NAMES)) {
[10:32:26.483]                   name <- removed[[kk]]
[10:32:26.483]                   NAME <- NAMES[[kk]]
[10:32:26.483]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:26.483]                     next
[10:32:26.483]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:26.483]                 }
[10:32:26.483]                 if (length(args) > 0) 
[10:32:26.483]                   base::do.call(base::Sys.setenv, args = args)
[10:32:26.483]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:26.483]             }
[10:32:26.483]             else {
[10:32:26.483]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:26.483]             }
[10:32:26.483]             {
[10:32:26.483]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:26.483]                   0L) {
[10:32:26.483]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:26.483]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:26.483]                   base::options(opts)
[10:32:26.483]                 }
[10:32:26.483]                 {
[10:32:26.483]                   {
[10:32:26.483]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:26.483]                     NULL
[10:32:26.483]                   }
[10:32:26.483]                   options(future.plan = NULL)
[10:32:26.483]                   if (is.na(NA_character_)) 
[10:32:26.483]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:26.483]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:26.483]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:26.483]                     .init = FALSE)
[10:32:26.483]                 }
[10:32:26.483]             }
[10:32:26.483]         }
[10:32:26.483]     })
[10:32:26.483]     if (TRUE) {
[10:32:26.483]         base::sink(type = "output", split = FALSE)
[10:32:26.483]         if (TRUE) {
[10:32:26.483]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:26.483]         }
[10:32:26.483]         else {
[10:32:26.483]             ...future.result["stdout"] <- base::list(NULL)
[10:32:26.483]         }
[10:32:26.483]         base::close(...future.stdout)
[10:32:26.483]         ...future.stdout <- NULL
[10:32:26.483]     }
[10:32:26.483]     ...future.result$conditions <- ...future.conditions
[10:32:26.483]     ...future.result$finished <- base::Sys.time()
[10:32:26.483]     ...future.result
[10:32:26.483] }
[10:32:26.485] assign_globals() ...
[10:32:26.485] List of 2
[10:32:26.485]  $ x                    : int [1:2] 1 2
[10:32:26.485]  $ future.call.arguments:List of 1
[10:32:26.485]   ..$ : num 3
[10:32:26.485]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:32:26.485]  - attr(*, "where")=List of 2
[10:32:26.485]   ..$ x                    :<environment: R_EmptyEnv> 
[10:32:26.485]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[10:32:26.485]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:32:26.485]  - attr(*, "resolved")= logi FALSE
[10:32:26.485]  - attr(*, "total_size")= num 112
[10:32:26.485]  - attr(*, "already-done")= logi TRUE
[10:32:26.488] - copied ‘x’ to environment
[10:32:26.488] - copied ‘future.call.arguments’ to environment
[10:32:26.488] assign_globals() ... done
[10:32:26.489] requestCore(): workers = 2
[10:32:26.491] MulticoreFuture started
[10:32:26.492] - Launch lazy future ... done
[10:32:26.492] run() for ‘MulticoreFuture’ ... done
[10:32:26.492] plan(): Setting new future strategy stack:
[10:32:26.492] List of future strategies:
[10:32:26.492] 1. sequential:
[10:32:26.492]    - args: function (..., envir = parent.frame())
[10:32:26.492]    - tweaked: FALSE
[10:32:26.492]    - call: NULL
[10:32:26.493] plan(): nbrOfWorkers() = 1
[10:32:26.493] result() for MulticoreFuture ...
[10:32:26.495] plan(): Setting new future strategy stack:
[10:32:26.495] List of future strategies:
[10:32:26.495] 1. multicore:
[10:32:26.495]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:32:26.495]    - tweaked: FALSE
[10:32:26.495]    - call: plan(strategy, substitute = FALSE)
[10:32:26.500] plan(): nbrOfWorkers() = 2
[10:32:26.505] result() for MulticoreFuture ...
[10:32:26.505] result() for MulticoreFuture ... done
[10:32:26.505] result() for MulticoreFuture ... done
[10:32:26.505] result() for MulticoreFuture ...
[10:32:26.505] result() for MulticoreFuture ... done
[1] 6
** Sum function 'B' with plan('multicore') ...
function (x, ...) 
{
    sumt <- function(x) {
        message("Arguments '...' exists: ", exists("...", inherits = TRUE))
        y %<-% {
            sum(x, ...)
        }
        y
    }
    sumt(x)
}
<bytecode: 0x5644c8507af0>
Arguments '...' exists: TRUE
[10:32:26.506] getGlobalsAndPackages() ...
[10:32:26.506] Searching for globals...
[10:32:26.508] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[10:32:26.508] Searching for globals ... DONE
[10:32:26.508] Resolving globals: FALSE
[10:32:26.509] Tweak future expression to call with '...' arguments ...
[10:32:26.509] {
[10:32:26.509]     do.call(function(...) {
[10:32:26.509]         sum(x, ...)
[10:32:26.509]     }, args = future.call.arguments)
[10:32:26.509] }
[10:32:26.509] Tweak future expression to call with '...' arguments ... DONE
[10:32:26.510] The total size of the 2 globals is 112 bytes (112 bytes)
[10:32:26.510] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[10:32:26.510] - globals: [2] ‘x’, ‘future.call.arguments’
[10:32:26.511] 
[10:32:26.511] getGlobalsAndPackages() ... DONE
[10:32:26.511] run() for ‘Future’ ...
[10:32:26.511] - state: ‘created’
[10:32:26.511] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:32:26.515] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:26.515] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:32:26.515]   - Field: ‘label’
[10:32:26.516]   - Field: ‘local’
[10:32:26.516]   - Field: ‘owner’
[10:32:26.516]   - Field: ‘envir’
[10:32:26.516]   - Field: ‘workers’
[10:32:26.516]   - Field: ‘packages’
[10:32:26.516]   - Field: ‘gc’
[10:32:26.516]   - Field: ‘job’
[10:32:26.516]   - Field: ‘conditions’
[10:32:26.516]   - Field: ‘expr’
[10:32:26.517]   - Field: ‘uuid’
[10:32:26.517]   - Field: ‘seed’
[10:32:26.517]   - Field: ‘version’
[10:32:26.517]   - Field: ‘result’
[10:32:26.517]   - Field: ‘asynchronous’
[10:32:26.517]   - Field: ‘calls’
[10:32:26.517]   - Field: ‘globals’
[10:32:26.517]   - Field: ‘stdout’
[10:32:26.517]   - Field: ‘earlySignal’
[10:32:26.518]   - Field: ‘lazy’
[10:32:26.518]   - Field: ‘state’
[10:32:26.518] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:32:26.518] - Launch lazy future ...
[10:32:26.518] Packages needed by the future expression (n = 0): <none>
[10:32:26.518] Packages needed by future strategies (n = 0): <none>
[10:32:26.519] {
[10:32:26.519]     {
[10:32:26.519]         {
[10:32:26.519]             ...future.startTime <- base::Sys.time()
[10:32:26.519]             {
[10:32:26.519]                 {
[10:32:26.519]                   {
[10:32:26.519]                     {
[10:32:26.519]                       base::local({
[10:32:26.519]                         has_future <- base::requireNamespace("future", 
[10:32:26.519]                           quietly = TRUE)
[10:32:26.519]                         if (has_future) {
[10:32:26.519]                           ns <- base::getNamespace("future")
[10:32:26.519]                           version <- ns[[".package"]][["version"]]
[10:32:26.519]                           if (is.null(version)) 
[10:32:26.519]                             version <- utils::packageVersion("future")
[10:32:26.519]                         }
[10:32:26.519]                         else {
[10:32:26.519]                           version <- NULL
[10:32:26.519]                         }
[10:32:26.519]                         if (!has_future || version < "1.8.0") {
[10:32:26.519]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:26.519]                             "", base::R.version$version.string), 
[10:32:26.519]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:26.519]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:26.519]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:26.519]                               "release", "version")], collapse = " "), 
[10:32:26.519]                             hostname = base::Sys.info()[["nodename"]])
[10:32:26.519]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:26.519]                             info)
[10:32:26.519]                           info <- base::paste(info, collapse = "; ")
[10:32:26.519]                           if (!has_future) {
[10:32:26.519]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:26.519]                               info)
[10:32:26.519]                           }
[10:32:26.519]                           else {
[10:32:26.519]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:26.519]                               info, version)
[10:32:26.519]                           }
[10:32:26.519]                           base::stop(msg)
[10:32:26.519]                         }
[10:32:26.519]                       })
[10:32:26.519]                     }
[10:32:26.519]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:26.519]                     base::options(mc.cores = 1L)
[10:32:26.519]                   }
[10:32:26.519]                   ...future.strategy.old <- future::plan("list")
[10:32:26.519]                   options(future.plan = NULL)
[10:32:26.519]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:26.519]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:26.519]                 }
[10:32:26.519]                 ...future.workdir <- getwd()
[10:32:26.519]             }
[10:32:26.519]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:26.519]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:26.519]         }
[10:32:26.519]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:26.519]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:26.519]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:26.519]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:26.519]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:26.519]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:26.519]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:26.519]             base::names(...future.oldOptions))
[10:32:26.519]     }
[10:32:26.519]     if (FALSE) {
[10:32:26.519]     }
[10:32:26.519]     else {
[10:32:26.519]         if (TRUE) {
[10:32:26.519]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:26.519]                 open = "w")
[10:32:26.519]         }
[10:32:26.519]         else {
[10:32:26.519]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:26.519]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:26.519]         }
[10:32:26.519]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:26.519]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:26.519]             base::sink(type = "output", split = FALSE)
[10:32:26.519]             base::close(...future.stdout)
[10:32:26.519]         }, add = TRUE)
[10:32:26.519]     }
[10:32:26.519]     ...future.frame <- base::sys.nframe()
[10:32:26.519]     ...future.conditions <- base::list()
[10:32:26.519]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:26.519]     if (FALSE) {
[10:32:26.519]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:26.519]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:26.519]     }
[10:32:26.519]     ...future.result <- base::tryCatch({
[10:32:26.519]         base::withCallingHandlers({
[10:32:26.519]             ...future.value <- base::withVisible(base::local({
[10:32:26.519]                 withCallingHandlers({
[10:32:26.519]                   {
[10:32:26.519]                     do.call(function(...) {
[10:32:26.519]                       sum(x, ...)
[10:32:26.519]                     }, args = future.call.arguments)
[10:32:26.519]                   }
[10:32:26.519]                 }, immediateCondition = function(cond) {
[10:32:26.519]                   save_rds <- function (object, pathname, ...) 
[10:32:26.519]                   {
[10:32:26.519]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:32:26.519]                     if (file_test("-f", pathname_tmp)) {
[10:32:26.519]                       fi_tmp <- file.info(pathname_tmp)
[10:32:26.519]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:32:26.519]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:26.519]                         fi_tmp[["mtime"]])
[10:32:26.519]                     }
[10:32:26.519]                     tryCatch({
[10:32:26.519]                       saveRDS(object, file = pathname_tmp, ...)
[10:32:26.519]                     }, error = function(ex) {
[10:32:26.519]                       msg <- conditionMessage(ex)
[10:32:26.519]                       fi_tmp <- file.info(pathname_tmp)
[10:32:26.519]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:32:26.519]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:26.519]                         fi_tmp[["mtime"]], msg)
[10:32:26.519]                       ex$message <- msg
[10:32:26.519]                       stop(ex)
[10:32:26.519]                     })
[10:32:26.519]                     stopifnot(file_test("-f", pathname_tmp))
[10:32:26.519]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:32:26.519]                     if (!res || file_test("-f", pathname_tmp)) {
[10:32:26.519]                       fi_tmp <- file.info(pathname_tmp)
[10:32:26.519]                       fi <- file.info(pathname)
[10:32:26.519]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:32:26.519]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:26.519]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:32:26.519]                         fi[["size"]], fi[["mtime"]])
[10:32:26.519]                       stop(msg)
[10:32:26.519]                     }
[10:32:26.519]                     invisible(pathname)
[10:32:26.519]                   }
[10:32:26.519]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:32:26.519]                     rootPath = tempdir()) 
[10:32:26.519]                   {
[10:32:26.519]                     obj <- list(time = Sys.time(), condition = cond)
[10:32:26.519]                     file <- tempfile(pattern = class(cond)[1], 
[10:32:26.519]                       tmpdir = path, fileext = ".rds")
[10:32:26.519]                     save_rds(obj, file)
[10:32:26.519]                   }
[10:32:26.519]                   saveImmediateCondition(cond, path = "/tmp/RtmpojvsR9/.future/immediateConditions")
[10:32:26.519]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:26.519]                   {
[10:32:26.519]                     inherits <- base::inherits
[10:32:26.519]                     invokeRestart <- base::invokeRestart
[10:32:26.519]                     is.null <- base::is.null
[10:32:26.519]                     muffled <- FALSE
[10:32:26.519]                     if (inherits(cond, "message")) {
[10:32:26.519]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:26.519]                       if (muffled) 
[10:32:26.519]                         invokeRestart("muffleMessage")
[10:32:26.519]                     }
[10:32:26.519]                     else if (inherits(cond, "warning")) {
[10:32:26.519]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:26.519]                       if (muffled) 
[10:32:26.519]                         invokeRestart("muffleWarning")
[10:32:26.519]                     }
[10:32:26.519]                     else if (inherits(cond, "condition")) {
[10:32:26.519]                       if (!is.null(pattern)) {
[10:32:26.519]                         computeRestarts <- base::computeRestarts
[10:32:26.519]                         grepl <- base::grepl
[10:32:26.519]                         restarts <- computeRestarts(cond)
[10:32:26.519]                         for (restart in restarts) {
[10:32:26.519]                           name <- restart$name
[10:32:26.519]                           if (is.null(name)) 
[10:32:26.519]                             next
[10:32:26.519]                           if (!grepl(pattern, name)) 
[10:32:26.519]                             next
[10:32:26.519]                           invokeRestart(restart)
[10:32:26.519]                           muffled <- TRUE
[10:32:26.519]                           break
[10:32:26.519]                         }
[10:32:26.519]                       }
[10:32:26.519]                     }
[10:32:26.519]                     invisible(muffled)
[10:32:26.519]                   }
[10:32:26.519]                   muffleCondition(cond)
[10:32:26.519]                 })
[10:32:26.519]             }))
[10:32:26.519]             future::FutureResult(value = ...future.value$value, 
[10:32:26.519]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:26.519]                   ...future.rng), globalenv = if (FALSE) 
[10:32:26.519]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:26.519]                     ...future.globalenv.names))
[10:32:26.519]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:26.519]         }, condition = base::local({
[10:32:26.519]             c <- base::c
[10:32:26.519]             inherits <- base::inherits
[10:32:26.519]             invokeRestart <- base::invokeRestart
[10:32:26.519]             length <- base::length
[10:32:26.519]             list <- base::list
[10:32:26.519]             seq.int <- base::seq.int
[10:32:26.519]             signalCondition <- base::signalCondition
[10:32:26.519]             sys.calls <- base::sys.calls
[10:32:26.519]             `[[` <- base::`[[`
[10:32:26.519]             `+` <- base::`+`
[10:32:26.519]             `<<-` <- base::`<<-`
[10:32:26.519]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:26.519]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:26.519]                   3L)]
[10:32:26.519]             }
[10:32:26.519]             function(cond) {
[10:32:26.519]                 is_error <- inherits(cond, "error")
[10:32:26.519]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:26.519]                   NULL)
[10:32:26.519]                 if (is_error) {
[10:32:26.519]                   sessionInformation <- function() {
[10:32:26.519]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:26.519]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:26.519]                       search = base::search(), system = base::Sys.info())
[10:32:26.519]                   }
[10:32:26.519]                   ...future.conditions[[length(...future.conditions) + 
[10:32:26.519]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:26.519]                     cond$call), session = sessionInformation(), 
[10:32:26.519]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:26.519]                   signalCondition(cond)
[10:32:26.519]                 }
[10:32:26.519]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:26.519]                 "immediateCondition"))) {
[10:32:26.519]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:26.519]                   ...future.conditions[[length(...future.conditions) + 
[10:32:26.519]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:26.519]                   if (TRUE && !signal) {
[10:32:26.519]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:26.519]                     {
[10:32:26.519]                       inherits <- base::inherits
[10:32:26.519]                       invokeRestart <- base::invokeRestart
[10:32:26.519]                       is.null <- base::is.null
[10:32:26.519]                       muffled <- FALSE
[10:32:26.519]                       if (inherits(cond, "message")) {
[10:32:26.519]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:26.519]                         if (muffled) 
[10:32:26.519]                           invokeRestart("muffleMessage")
[10:32:26.519]                       }
[10:32:26.519]                       else if (inherits(cond, "warning")) {
[10:32:26.519]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:26.519]                         if (muffled) 
[10:32:26.519]                           invokeRestart("muffleWarning")
[10:32:26.519]                       }
[10:32:26.519]                       else if (inherits(cond, "condition")) {
[10:32:26.519]                         if (!is.null(pattern)) {
[10:32:26.519]                           computeRestarts <- base::computeRestarts
[10:32:26.519]                           grepl <- base::grepl
[10:32:26.519]                           restarts <- computeRestarts(cond)
[10:32:26.519]                           for (restart in restarts) {
[10:32:26.519]                             name <- restart$name
[10:32:26.519]                             if (is.null(name)) 
[10:32:26.519]                               next
[10:32:26.519]                             if (!grepl(pattern, name)) 
[10:32:26.519]                               next
[10:32:26.519]                             invokeRestart(restart)
[10:32:26.519]                             muffled <- TRUE
[10:32:26.519]                             break
[10:32:26.519]                           }
[10:32:26.519]                         }
[10:32:26.519]                       }
[10:32:26.519]                       invisible(muffled)
[10:32:26.519]                     }
[10:32:26.519]                     muffleCondition(cond, pattern = "^muffle")
[10:32:26.519]                   }
[10:32:26.519]                 }
[10:32:26.519]                 else {
[10:32:26.519]                   if (TRUE) {
[10:32:26.519]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:26.519]                     {
[10:32:26.519]                       inherits <- base::inherits
[10:32:26.519]                       invokeRestart <- base::invokeRestart
[10:32:26.519]                       is.null <- base::is.null
[10:32:26.519]                       muffled <- FALSE
[10:32:26.519]                       if (inherits(cond, "message")) {
[10:32:26.519]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:26.519]                         if (muffled) 
[10:32:26.519]                           invokeRestart("muffleMessage")
[10:32:26.519]                       }
[10:32:26.519]                       else if (inherits(cond, "warning")) {
[10:32:26.519]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:26.519]                         if (muffled) 
[10:32:26.519]                           invokeRestart("muffleWarning")
[10:32:26.519]                       }
[10:32:26.519]                       else if (inherits(cond, "condition")) {
[10:32:26.519]                         if (!is.null(pattern)) {
[10:32:26.519]                           computeRestarts <- base::computeRestarts
[10:32:26.519]                           grepl <- base::grepl
[10:32:26.519]                           restarts <- computeRestarts(cond)
[10:32:26.519]                           for (restart in restarts) {
[10:32:26.519]                             name <- restart$name
[10:32:26.519]                             if (is.null(name)) 
[10:32:26.519]                               next
[10:32:26.519]                             if (!grepl(pattern, name)) 
[10:32:26.519]                               next
[10:32:26.519]                             invokeRestart(restart)
[10:32:26.519]                             muffled <- TRUE
[10:32:26.519]                             break
[10:32:26.519]                           }
[10:32:26.519]                         }
[10:32:26.519]                       }
[10:32:26.519]                       invisible(muffled)
[10:32:26.519]                     }
[10:32:26.519]                     muffleCondition(cond, pattern = "^muffle")
[10:32:26.519]                   }
[10:32:26.519]                 }
[10:32:26.519]             }
[10:32:26.519]         }))
[10:32:26.519]     }, error = function(ex) {
[10:32:26.519]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:26.519]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:26.519]                 ...future.rng), started = ...future.startTime, 
[10:32:26.519]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:26.519]             version = "1.8"), class = "FutureResult")
[10:32:26.519]     }, finally = {
[10:32:26.519]         if (!identical(...future.workdir, getwd())) 
[10:32:26.519]             setwd(...future.workdir)
[10:32:26.519]         {
[10:32:26.519]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:26.519]                 ...future.oldOptions$nwarnings <- NULL
[10:32:26.519]             }
[10:32:26.519]             base::options(...future.oldOptions)
[10:32:26.519]             if (.Platform$OS.type == "windows") {
[10:32:26.519]                 old_names <- names(...future.oldEnvVars)
[10:32:26.519]                 envs <- base::Sys.getenv()
[10:32:26.519]                 names <- names(envs)
[10:32:26.519]                 common <- intersect(names, old_names)
[10:32:26.519]                 added <- setdiff(names, old_names)
[10:32:26.519]                 removed <- setdiff(old_names, names)
[10:32:26.519]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:26.519]                   envs[common]]
[10:32:26.519]                 NAMES <- toupper(changed)
[10:32:26.519]                 args <- list()
[10:32:26.519]                 for (kk in seq_along(NAMES)) {
[10:32:26.519]                   name <- changed[[kk]]
[10:32:26.519]                   NAME <- NAMES[[kk]]
[10:32:26.519]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:26.519]                     next
[10:32:26.519]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:26.519]                 }
[10:32:26.519]                 NAMES <- toupper(added)
[10:32:26.519]                 for (kk in seq_along(NAMES)) {
[10:32:26.519]                   name <- added[[kk]]
[10:32:26.519]                   NAME <- NAMES[[kk]]
[10:32:26.519]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:26.519]                     next
[10:32:26.519]                   args[[name]] <- ""
[10:32:26.519]                 }
[10:32:26.519]                 NAMES <- toupper(removed)
[10:32:26.519]                 for (kk in seq_along(NAMES)) {
[10:32:26.519]                   name <- removed[[kk]]
[10:32:26.519]                   NAME <- NAMES[[kk]]
[10:32:26.519]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:26.519]                     next
[10:32:26.519]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:26.519]                 }
[10:32:26.519]                 if (length(args) > 0) 
[10:32:26.519]                   base::do.call(base::Sys.setenv, args = args)
[10:32:26.519]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:26.519]             }
[10:32:26.519]             else {
[10:32:26.519]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:26.519]             }
[10:32:26.519]             {
[10:32:26.519]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:26.519]                   0L) {
[10:32:26.519]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:26.519]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:26.519]                   base::options(opts)
[10:32:26.519]                 }
[10:32:26.519]                 {
[10:32:26.519]                   {
[10:32:26.519]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:26.519]                     NULL
[10:32:26.519]                   }
[10:32:26.519]                   options(future.plan = NULL)
[10:32:26.519]                   if (is.na(NA_character_)) 
[10:32:26.519]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:26.519]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:26.519]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:26.519]                     .init = FALSE)
[10:32:26.519]                 }
[10:32:26.519]             }
[10:32:26.519]         }
[10:32:26.519]     })
[10:32:26.519]     if (TRUE) {
[10:32:26.519]         base::sink(type = "output", split = FALSE)
[10:32:26.519]         if (TRUE) {
[10:32:26.519]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:26.519]         }
[10:32:26.519]         else {
[10:32:26.519]             ...future.result["stdout"] <- base::list(NULL)
[10:32:26.519]         }
[10:32:26.519]         base::close(...future.stdout)
[10:32:26.519]         ...future.stdout <- NULL
[10:32:26.519]     }
[10:32:26.519]     ...future.result$conditions <- ...future.conditions
[10:32:26.519]     ...future.result$finished <- base::Sys.time()
[10:32:26.519]     ...future.result
[10:32:26.519] }
[10:32:26.521] assign_globals() ...
[10:32:26.521] List of 2
[10:32:26.521]  $ x                    : int [1:2] 1 2
[10:32:26.521]  $ future.call.arguments:List of 1
[10:32:26.521]   ..$ : num 3
[10:32:26.521]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:32:26.521]  - attr(*, "where")=List of 2
[10:32:26.521]   ..$ x                    :<environment: R_EmptyEnv> 
[10:32:26.521]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[10:32:26.521]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:32:26.521]  - attr(*, "resolved")= logi FALSE
[10:32:26.521]  - attr(*, "total_size")= num 112
[10:32:26.521]  - attr(*, "already-done")= logi TRUE
[10:32:26.527] - copied ‘x’ to environment
[10:32:26.528] - copied ‘future.call.arguments’ to environment
[10:32:26.528] assign_globals() ... done
[10:32:26.528] requestCore(): workers = 2
[10:32:26.530] MulticoreFuture started
[10:32:26.530] - Launch lazy future ... done
[10:32:26.530] run() for ‘MulticoreFuture’ ... done
[10:32:26.531] result() for MulticoreFuture ...
[10:32:26.531] plan(): Setting new future strategy stack:
[10:32:26.531] List of future strategies:
[10:32:26.531] 1. sequential:
[10:32:26.531]    - args: function (..., envir = parent.frame())
[10:32:26.531]    - tweaked: FALSE
[10:32:26.531]    - call: NULL
[10:32:26.532] plan(): nbrOfWorkers() = 1
[10:32:26.534] plan(): Setting new future strategy stack:
[10:32:26.534] List of future strategies:
[10:32:26.534] 1. multicore:
[10:32:26.534]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:32:26.534]    - tweaked: FALSE
[10:32:26.534]    - call: plan(strategy, substitute = FALSE)
[10:32:26.540] plan(): nbrOfWorkers() = 2
[10:32:26.541] result() for MulticoreFuture ...
[10:32:26.541] result() for MulticoreFuture ... done
[10:32:26.541] result() for MulticoreFuture ... done
[10:32:26.541] result() for MulticoreFuture ...
[10:32:26.541] result() for MulticoreFuture ... done
[1] 6
** Sum function 'C' with plan('multicore') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y)
    }
    y
}
<bytecode: 0x5644c86693a8>
Arguments '...' exists: FALSE
[10:32:26.542] getGlobalsAndPackages() ...
[10:32:26.542] Searching for globals...
[10:32:26.544] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘y’
[10:32:26.544] Searching for globals ... DONE
[10:32:26.544] Resolving globals: FALSE
[10:32:26.545] The total size of the 2 globals is 112 bytes (112 bytes)
[10:32:26.546] The total size of the 2 globals exported for future expression (‘{; sum(x, y); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[10:32:26.546] - globals: [2] ‘x’, ‘y’
[10:32:26.546] 
[10:32:26.546] getGlobalsAndPackages() ... DONE
[10:32:26.546] run() for ‘Future’ ...
[10:32:26.546] - state: ‘created’
[10:32:26.547] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:32:26.550] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:26.550] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:32:26.551]   - Field: ‘label’
[10:32:26.551]   - Field: ‘local’
[10:32:26.551]   - Field: ‘owner’
[10:32:26.551]   - Field: ‘envir’
[10:32:26.551]   - Field: ‘workers’
[10:32:26.551]   - Field: ‘packages’
[10:32:26.551]   - Field: ‘gc’
[10:32:26.551]   - Field: ‘job’
[10:32:26.552]   - Field: ‘conditions’
[10:32:26.552]   - Field: ‘expr’
[10:32:26.552]   - Field: ‘uuid’
[10:32:26.552]   - Field: ‘seed’
[10:32:26.552]   - Field: ‘version’
[10:32:26.552]   - Field: ‘result’
[10:32:26.552]   - Field: ‘asynchronous’
[10:32:26.552]   - Field: ‘calls’
[10:32:26.552]   - Field: ‘globals’
[10:32:26.553]   - Field: ‘stdout’
[10:32:26.553]   - Field: ‘earlySignal’
[10:32:26.553]   - Field: ‘lazy’
[10:32:26.553]   - Field: ‘state’
[10:32:26.553] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:32:26.553] - Launch lazy future ...
[10:32:26.554] Packages needed by the future expression (n = 0): <none>
[10:32:26.554] Packages needed by future strategies (n = 0): <none>
[10:32:26.554] {
[10:32:26.554]     {
[10:32:26.554]         {
[10:32:26.554]             ...future.startTime <- base::Sys.time()
[10:32:26.554]             {
[10:32:26.554]                 {
[10:32:26.554]                   {
[10:32:26.554]                     {
[10:32:26.554]                       base::local({
[10:32:26.554]                         has_future <- base::requireNamespace("future", 
[10:32:26.554]                           quietly = TRUE)
[10:32:26.554]                         if (has_future) {
[10:32:26.554]                           ns <- base::getNamespace("future")
[10:32:26.554]                           version <- ns[[".package"]][["version"]]
[10:32:26.554]                           if (is.null(version)) 
[10:32:26.554]                             version <- utils::packageVersion("future")
[10:32:26.554]                         }
[10:32:26.554]                         else {
[10:32:26.554]                           version <- NULL
[10:32:26.554]                         }
[10:32:26.554]                         if (!has_future || version < "1.8.0") {
[10:32:26.554]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:26.554]                             "", base::R.version$version.string), 
[10:32:26.554]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:26.554]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:26.554]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:26.554]                               "release", "version")], collapse = " "), 
[10:32:26.554]                             hostname = base::Sys.info()[["nodename"]])
[10:32:26.554]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:26.554]                             info)
[10:32:26.554]                           info <- base::paste(info, collapse = "; ")
[10:32:26.554]                           if (!has_future) {
[10:32:26.554]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:26.554]                               info)
[10:32:26.554]                           }
[10:32:26.554]                           else {
[10:32:26.554]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:26.554]                               info, version)
[10:32:26.554]                           }
[10:32:26.554]                           base::stop(msg)
[10:32:26.554]                         }
[10:32:26.554]                       })
[10:32:26.554]                     }
[10:32:26.554]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:26.554]                     base::options(mc.cores = 1L)
[10:32:26.554]                   }
[10:32:26.554]                   ...future.strategy.old <- future::plan("list")
[10:32:26.554]                   options(future.plan = NULL)
[10:32:26.554]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:26.554]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:26.554]                 }
[10:32:26.554]                 ...future.workdir <- getwd()
[10:32:26.554]             }
[10:32:26.554]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:26.554]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:26.554]         }
[10:32:26.554]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:26.554]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:26.554]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:26.554]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:26.554]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:26.554]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:26.554]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:26.554]             base::names(...future.oldOptions))
[10:32:26.554]     }
[10:32:26.554]     if (FALSE) {
[10:32:26.554]     }
[10:32:26.554]     else {
[10:32:26.554]         if (TRUE) {
[10:32:26.554]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:26.554]                 open = "w")
[10:32:26.554]         }
[10:32:26.554]         else {
[10:32:26.554]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:26.554]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:26.554]         }
[10:32:26.554]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:26.554]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:26.554]             base::sink(type = "output", split = FALSE)
[10:32:26.554]             base::close(...future.stdout)
[10:32:26.554]         }, add = TRUE)
[10:32:26.554]     }
[10:32:26.554]     ...future.frame <- base::sys.nframe()
[10:32:26.554]     ...future.conditions <- base::list()
[10:32:26.554]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:26.554]     if (FALSE) {
[10:32:26.554]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:26.554]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:26.554]     }
[10:32:26.554]     ...future.result <- base::tryCatch({
[10:32:26.554]         base::withCallingHandlers({
[10:32:26.554]             ...future.value <- base::withVisible(base::local({
[10:32:26.554]                 withCallingHandlers({
[10:32:26.554]                   {
[10:32:26.554]                     sum(x, y)
[10:32:26.554]                   }
[10:32:26.554]                 }, immediateCondition = function(cond) {
[10:32:26.554]                   save_rds <- function (object, pathname, ...) 
[10:32:26.554]                   {
[10:32:26.554]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:32:26.554]                     if (file_test("-f", pathname_tmp)) {
[10:32:26.554]                       fi_tmp <- file.info(pathname_tmp)
[10:32:26.554]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:32:26.554]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:26.554]                         fi_tmp[["mtime"]])
[10:32:26.554]                     }
[10:32:26.554]                     tryCatch({
[10:32:26.554]                       saveRDS(object, file = pathname_tmp, ...)
[10:32:26.554]                     }, error = function(ex) {
[10:32:26.554]                       msg <- conditionMessage(ex)
[10:32:26.554]                       fi_tmp <- file.info(pathname_tmp)
[10:32:26.554]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:32:26.554]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:26.554]                         fi_tmp[["mtime"]], msg)
[10:32:26.554]                       ex$message <- msg
[10:32:26.554]                       stop(ex)
[10:32:26.554]                     })
[10:32:26.554]                     stopifnot(file_test("-f", pathname_tmp))
[10:32:26.554]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:32:26.554]                     if (!res || file_test("-f", pathname_tmp)) {
[10:32:26.554]                       fi_tmp <- file.info(pathname_tmp)
[10:32:26.554]                       fi <- file.info(pathname)
[10:32:26.554]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:32:26.554]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:26.554]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:32:26.554]                         fi[["size"]], fi[["mtime"]])
[10:32:26.554]                       stop(msg)
[10:32:26.554]                     }
[10:32:26.554]                     invisible(pathname)
[10:32:26.554]                   }
[10:32:26.554]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:32:26.554]                     rootPath = tempdir()) 
[10:32:26.554]                   {
[10:32:26.554]                     obj <- list(time = Sys.time(), condition = cond)
[10:32:26.554]                     file <- tempfile(pattern = class(cond)[1], 
[10:32:26.554]                       tmpdir = path, fileext = ".rds")
[10:32:26.554]                     save_rds(obj, file)
[10:32:26.554]                   }
[10:32:26.554]                   saveImmediateCondition(cond, path = "/tmp/RtmpojvsR9/.future/immediateConditions")
[10:32:26.554]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:26.554]                   {
[10:32:26.554]                     inherits <- base::inherits
[10:32:26.554]                     invokeRestart <- base::invokeRestart
[10:32:26.554]                     is.null <- base::is.null
[10:32:26.554]                     muffled <- FALSE
[10:32:26.554]                     if (inherits(cond, "message")) {
[10:32:26.554]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:26.554]                       if (muffled) 
[10:32:26.554]                         invokeRestart("muffleMessage")
[10:32:26.554]                     }
[10:32:26.554]                     else if (inherits(cond, "warning")) {
[10:32:26.554]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:26.554]                       if (muffled) 
[10:32:26.554]                         invokeRestart("muffleWarning")
[10:32:26.554]                     }
[10:32:26.554]                     else if (inherits(cond, "condition")) {
[10:32:26.554]                       if (!is.null(pattern)) {
[10:32:26.554]                         computeRestarts <- base::computeRestarts
[10:32:26.554]                         grepl <- base::grepl
[10:32:26.554]                         restarts <- computeRestarts(cond)
[10:32:26.554]                         for (restart in restarts) {
[10:32:26.554]                           name <- restart$name
[10:32:26.554]                           if (is.null(name)) 
[10:32:26.554]                             next
[10:32:26.554]                           if (!grepl(pattern, name)) 
[10:32:26.554]                             next
[10:32:26.554]                           invokeRestart(restart)
[10:32:26.554]                           muffled <- TRUE
[10:32:26.554]                           break
[10:32:26.554]                         }
[10:32:26.554]                       }
[10:32:26.554]                     }
[10:32:26.554]                     invisible(muffled)
[10:32:26.554]                   }
[10:32:26.554]                   muffleCondition(cond)
[10:32:26.554]                 })
[10:32:26.554]             }))
[10:32:26.554]             future::FutureResult(value = ...future.value$value, 
[10:32:26.554]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:26.554]                   ...future.rng), globalenv = if (FALSE) 
[10:32:26.554]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:26.554]                     ...future.globalenv.names))
[10:32:26.554]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:26.554]         }, condition = base::local({
[10:32:26.554]             c <- base::c
[10:32:26.554]             inherits <- base::inherits
[10:32:26.554]             invokeRestart <- base::invokeRestart
[10:32:26.554]             length <- base::length
[10:32:26.554]             list <- base::list
[10:32:26.554]             seq.int <- base::seq.int
[10:32:26.554]             signalCondition <- base::signalCondition
[10:32:26.554]             sys.calls <- base::sys.calls
[10:32:26.554]             `[[` <- base::`[[`
[10:32:26.554]             `+` <- base::`+`
[10:32:26.554]             `<<-` <- base::`<<-`
[10:32:26.554]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:26.554]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:26.554]                   3L)]
[10:32:26.554]             }
[10:32:26.554]             function(cond) {
[10:32:26.554]                 is_error <- inherits(cond, "error")
[10:32:26.554]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:26.554]                   NULL)
[10:32:26.554]                 if (is_error) {
[10:32:26.554]                   sessionInformation <- function() {
[10:32:26.554]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:26.554]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:26.554]                       search = base::search(), system = base::Sys.info())
[10:32:26.554]                   }
[10:32:26.554]                   ...future.conditions[[length(...future.conditions) + 
[10:32:26.554]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:26.554]                     cond$call), session = sessionInformation(), 
[10:32:26.554]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:26.554]                   signalCondition(cond)
[10:32:26.554]                 }
[10:32:26.554]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:26.554]                 "immediateCondition"))) {
[10:32:26.554]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:26.554]                   ...future.conditions[[length(...future.conditions) + 
[10:32:26.554]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:26.554]                   if (TRUE && !signal) {
[10:32:26.554]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:26.554]                     {
[10:32:26.554]                       inherits <- base::inherits
[10:32:26.554]                       invokeRestart <- base::invokeRestart
[10:32:26.554]                       is.null <- base::is.null
[10:32:26.554]                       muffled <- FALSE
[10:32:26.554]                       if (inherits(cond, "message")) {
[10:32:26.554]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:26.554]                         if (muffled) 
[10:32:26.554]                           invokeRestart("muffleMessage")
[10:32:26.554]                       }
[10:32:26.554]                       else if (inherits(cond, "warning")) {
[10:32:26.554]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:26.554]                         if (muffled) 
[10:32:26.554]                           invokeRestart("muffleWarning")
[10:32:26.554]                       }
[10:32:26.554]                       else if (inherits(cond, "condition")) {
[10:32:26.554]                         if (!is.null(pattern)) {
[10:32:26.554]                           computeRestarts <- base::computeRestarts
[10:32:26.554]                           grepl <- base::grepl
[10:32:26.554]                           restarts <- computeRestarts(cond)
[10:32:26.554]                           for (restart in restarts) {
[10:32:26.554]                             name <- restart$name
[10:32:26.554]                             if (is.null(name)) 
[10:32:26.554]                               next
[10:32:26.554]                             if (!grepl(pattern, name)) 
[10:32:26.554]                               next
[10:32:26.554]                             invokeRestart(restart)
[10:32:26.554]                             muffled <- TRUE
[10:32:26.554]                             break
[10:32:26.554]                           }
[10:32:26.554]                         }
[10:32:26.554]                       }
[10:32:26.554]                       invisible(muffled)
[10:32:26.554]                     }
[10:32:26.554]                     muffleCondition(cond, pattern = "^muffle")
[10:32:26.554]                   }
[10:32:26.554]                 }
[10:32:26.554]                 else {
[10:32:26.554]                   if (TRUE) {
[10:32:26.554]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:26.554]                     {
[10:32:26.554]                       inherits <- base::inherits
[10:32:26.554]                       invokeRestart <- base::invokeRestart
[10:32:26.554]                       is.null <- base::is.null
[10:32:26.554]                       muffled <- FALSE
[10:32:26.554]                       if (inherits(cond, "message")) {
[10:32:26.554]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:26.554]                         if (muffled) 
[10:32:26.554]                           invokeRestart("muffleMessage")
[10:32:26.554]                       }
[10:32:26.554]                       else if (inherits(cond, "warning")) {
[10:32:26.554]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:26.554]                         if (muffled) 
[10:32:26.554]                           invokeRestart("muffleWarning")
[10:32:26.554]                       }
[10:32:26.554]                       else if (inherits(cond, "condition")) {
[10:32:26.554]                         if (!is.null(pattern)) {
[10:32:26.554]                           computeRestarts <- base::computeRestarts
[10:32:26.554]                           grepl <- base::grepl
[10:32:26.554]                           restarts <- computeRestarts(cond)
[10:32:26.554]                           for (restart in restarts) {
[10:32:26.554]                             name <- restart$name
[10:32:26.554]                             if (is.null(name)) 
[10:32:26.554]                               next
[10:32:26.554]                             if (!grepl(pattern, name)) 
[10:32:26.554]                               next
[10:32:26.554]                             invokeRestart(restart)
[10:32:26.554]                             muffled <- TRUE
[10:32:26.554]                             break
[10:32:26.554]                           }
[10:32:26.554]                         }
[10:32:26.554]                       }
[10:32:26.554]                       invisible(muffled)
[10:32:26.554]                     }
[10:32:26.554]                     muffleCondition(cond, pattern = "^muffle")
[10:32:26.554]                   }
[10:32:26.554]                 }
[10:32:26.554]             }
[10:32:26.554]         }))
[10:32:26.554]     }, error = function(ex) {
[10:32:26.554]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:26.554]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:26.554]                 ...future.rng), started = ...future.startTime, 
[10:32:26.554]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:26.554]             version = "1.8"), class = "FutureResult")
[10:32:26.554]     }, finally = {
[10:32:26.554]         if (!identical(...future.workdir, getwd())) 
[10:32:26.554]             setwd(...future.workdir)
[10:32:26.554]         {
[10:32:26.554]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:26.554]                 ...future.oldOptions$nwarnings <- NULL
[10:32:26.554]             }
[10:32:26.554]             base::options(...future.oldOptions)
[10:32:26.554]             if (.Platform$OS.type == "windows") {
[10:32:26.554]                 old_names <- names(...future.oldEnvVars)
[10:32:26.554]                 envs <- base::Sys.getenv()
[10:32:26.554]                 names <- names(envs)
[10:32:26.554]                 common <- intersect(names, old_names)
[10:32:26.554]                 added <- setdiff(names, old_names)
[10:32:26.554]                 removed <- setdiff(old_names, names)
[10:32:26.554]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:26.554]                   envs[common]]
[10:32:26.554]                 NAMES <- toupper(changed)
[10:32:26.554]                 args <- list()
[10:32:26.554]                 for (kk in seq_along(NAMES)) {
[10:32:26.554]                   name <- changed[[kk]]
[10:32:26.554]                   NAME <- NAMES[[kk]]
[10:32:26.554]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:26.554]                     next
[10:32:26.554]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:26.554]                 }
[10:32:26.554]                 NAMES <- toupper(added)
[10:32:26.554]                 for (kk in seq_along(NAMES)) {
[10:32:26.554]                   name <- added[[kk]]
[10:32:26.554]                   NAME <- NAMES[[kk]]
[10:32:26.554]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:26.554]                     next
[10:32:26.554]                   args[[name]] <- ""
[10:32:26.554]                 }
[10:32:26.554]                 NAMES <- toupper(removed)
[10:32:26.554]                 for (kk in seq_along(NAMES)) {
[10:32:26.554]                   name <- removed[[kk]]
[10:32:26.554]                   NAME <- NAMES[[kk]]
[10:32:26.554]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:26.554]                     next
[10:32:26.554]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:26.554]                 }
[10:32:26.554]                 if (length(args) > 0) 
[10:32:26.554]                   base::do.call(base::Sys.setenv, args = args)
[10:32:26.554]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:26.554]             }
[10:32:26.554]             else {
[10:32:26.554]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:26.554]             }
[10:32:26.554]             {
[10:32:26.554]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:26.554]                   0L) {
[10:32:26.554]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:26.554]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:26.554]                   base::options(opts)
[10:32:26.554]                 }
[10:32:26.554]                 {
[10:32:26.554]                   {
[10:32:26.554]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:26.554]                     NULL
[10:32:26.554]                   }
[10:32:26.554]                   options(future.plan = NULL)
[10:32:26.554]                   if (is.na(NA_character_)) 
[10:32:26.554]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:26.554]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:26.554]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:26.554]                     .init = FALSE)
[10:32:26.554]                 }
[10:32:26.554]             }
[10:32:26.554]         }
[10:32:26.554]     })
[10:32:26.554]     if (TRUE) {
[10:32:26.554]         base::sink(type = "output", split = FALSE)
[10:32:26.554]         if (TRUE) {
[10:32:26.554]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:26.554]         }
[10:32:26.554]         else {
[10:32:26.554]             ...future.result["stdout"] <- base::list(NULL)
[10:32:26.554]         }
[10:32:26.554]         base::close(...future.stdout)
[10:32:26.554]         ...future.stdout <- NULL
[10:32:26.554]     }
[10:32:26.554]     ...future.result$conditions <- ...future.conditions
[10:32:26.554]     ...future.result$finished <- base::Sys.time()
[10:32:26.554]     ...future.result
[10:32:26.554] }
[10:32:26.557] assign_globals() ...
[10:32:26.557] List of 2
[10:32:26.557]  $ x: int [1:2] 1 2
[10:32:26.557]  $ y: num 3
[10:32:26.557]  - attr(*, "where")=List of 2
[10:32:26.557]   ..$ x:<environment: R_EmptyEnv> 
[10:32:26.557]   ..$ y:<environment: R_EmptyEnv> 
[10:32:26.557]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:32:26.557]  - attr(*, "resolved")= logi FALSE
[10:32:26.557]  - attr(*, "total_size")= num 112
[10:32:26.557]  - attr(*, "already-done")= logi TRUE
[10:32:26.560] - copied ‘x’ to environment
[10:32:26.561] - copied ‘y’ to environment
[10:32:26.561] assign_globals() ... done
[10:32:26.561] requestCore(): workers = 2
[10:32:26.563] MulticoreFuture started
[10:32:26.563] - Launch lazy future ... done
[10:32:26.563] run() for ‘MulticoreFuture’ ... done
[10:32:26.564] result() for MulticoreFuture ...
[10:32:26.564] plan(): Setting new future strategy stack:
[10:32:26.564] List of future strategies:
[10:32:26.564] 1. sequential:
[10:32:26.564]    - args: function (..., envir = parent.frame())
[10:32:26.564]    - tweaked: FALSE
[10:32:26.564]    - call: NULL
[10:32:26.565] plan(): nbrOfWorkers() = 1
[10:32:26.567] plan(): Setting new future strategy stack:
[10:32:26.567] List of future strategies:
[10:32:26.567] 1. multicore:
[10:32:26.567]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:32:26.567]    - tweaked: FALSE
[10:32:26.567]    - call: plan(strategy, substitute = FALSE)
[10:32:26.572] plan(): nbrOfWorkers() = 2
[10:32:26.573] result() for MulticoreFuture ...
[10:32:26.573] result() for MulticoreFuture ... done
[10:32:26.573] result() for MulticoreFuture ... done
[10:32:26.573] result() for MulticoreFuture ...
[10:32:26.573] result() for MulticoreFuture ... done
[1] 6
** Sum function 'D' with plan('multicore') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y, ...)
    }
    y
}
<bytecode: 0x5644c8855f00>
Arguments '...' exists: FALSE
[10:32:26.574] getGlobalsAndPackages() ...
[10:32:26.575] Searching for globals...
[10:32:26.576] - globals found: [5] ‘{’, ‘sum’, ‘x’, ‘y’, ‘...’
[10:32:26.577] Searching for globals ... DONE
[10:32:26.577] Resolving globals: FALSE
[10:32:26.577] Tweak future expression to call with '...' arguments ...
[10:32:26.578] The total size of the 2 globals is 112 bytes (112 bytes)
[10:32:26.578] The total size of the 2 globals exported for future expression (‘{; sum(x, y, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[10:32:26.578] - globals: [2] ‘x’, ‘y’
[10:32:26.578] 
[10:32:26.578] getGlobalsAndPackages() ... DONE
[10:32:26.579] run() for ‘Future’ ...
[10:32:26.579] - state: ‘created’
[10:32:26.579] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:32:26.583] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:26.583] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:32:26.583]   - Field: ‘label’
[10:32:26.583]   - Field: ‘local’
[10:32:26.584]   - Field: ‘owner’
[10:32:26.584]   - Field: ‘envir’
[10:32:26.584]   - Field: ‘workers’
[10:32:26.584]   - Field: ‘packages’
[10:32:26.584]   - Field: ‘gc’
[10:32:26.584]   - Field: ‘job’
[10:32:26.584]   - Field: ‘conditions’
[10:32:26.584]   - Field: ‘expr’
[10:32:26.584]   - Field: ‘uuid’
[10:32:26.585]   - Field: ‘seed’
[10:32:26.585]   - Field: ‘version’
[10:32:26.585]   - Field: ‘result’
[10:32:26.585]   - Field: ‘asynchronous’
[10:32:26.585]   - Field: ‘calls’
[10:32:26.585]   - Field: ‘globals’
[10:32:26.585]   - Field: ‘stdout’
[10:32:26.585]   - Field: ‘earlySignal’
[10:32:26.586]   - Field: ‘lazy’
[10:32:26.586]   - Field: ‘state’
[10:32:26.586] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:32:26.586] - Launch lazy future ...
[10:32:26.586] Packages needed by the future expression (n = 0): <none>
[10:32:26.586] Packages needed by future strategies (n = 0): <none>
[10:32:26.587] {
[10:32:26.587]     {
[10:32:26.587]         {
[10:32:26.587]             ...future.startTime <- base::Sys.time()
[10:32:26.587]             {
[10:32:26.587]                 {
[10:32:26.587]                   {
[10:32:26.587]                     {
[10:32:26.587]                       base::local({
[10:32:26.587]                         has_future <- base::requireNamespace("future", 
[10:32:26.587]                           quietly = TRUE)
[10:32:26.587]                         if (has_future) {
[10:32:26.587]                           ns <- base::getNamespace("future")
[10:32:26.587]                           version <- ns[[".package"]][["version"]]
[10:32:26.587]                           if (is.null(version)) 
[10:32:26.587]                             version <- utils::packageVersion("future")
[10:32:26.587]                         }
[10:32:26.587]                         else {
[10:32:26.587]                           version <- NULL
[10:32:26.587]                         }
[10:32:26.587]                         if (!has_future || version < "1.8.0") {
[10:32:26.587]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:26.587]                             "", base::R.version$version.string), 
[10:32:26.587]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:26.587]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:26.587]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:26.587]                               "release", "version")], collapse = " "), 
[10:32:26.587]                             hostname = base::Sys.info()[["nodename"]])
[10:32:26.587]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:26.587]                             info)
[10:32:26.587]                           info <- base::paste(info, collapse = "; ")
[10:32:26.587]                           if (!has_future) {
[10:32:26.587]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:26.587]                               info)
[10:32:26.587]                           }
[10:32:26.587]                           else {
[10:32:26.587]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:26.587]                               info, version)
[10:32:26.587]                           }
[10:32:26.587]                           base::stop(msg)
[10:32:26.587]                         }
[10:32:26.587]                       })
[10:32:26.587]                     }
[10:32:26.587]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:26.587]                     base::options(mc.cores = 1L)
[10:32:26.587]                   }
[10:32:26.587]                   ...future.strategy.old <- future::plan("list")
[10:32:26.587]                   options(future.plan = NULL)
[10:32:26.587]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:26.587]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:26.587]                 }
[10:32:26.587]                 ...future.workdir <- getwd()
[10:32:26.587]             }
[10:32:26.587]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:26.587]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:26.587]         }
[10:32:26.587]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:26.587]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:26.587]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:26.587]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:26.587]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:26.587]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:26.587]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:26.587]             base::names(...future.oldOptions))
[10:32:26.587]     }
[10:32:26.587]     if (FALSE) {
[10:32:26.587]     }
[10:32:26.587]     else {
[10:32:26.587]         if (TRUE) {
[10:32:26.587]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:26.587]                 open = "w")
[10:32:26.587]         }
[10:32:26.587]         else {
[10:32:26.587]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:26.587]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:26.587]         }
[10:32:26.587]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:26.587]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:26.587]             base::sink(type = "output", split = FALSE)
[10:32:26.587]             base::close(...future.stdout)
[10:32:26.587]         }, add = TRUE)
[10:32:26.587]     }
[10:32:26.587]     ...future.frame <- base::sys.nframe()
[10:32:26.587]     ...future.conditions <- base::list()
[10:32:26.587]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:26.587]     if (FALSE) {
[10:32:26.587]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:26.587]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:26.587]     }
[10:32:26.587]     ...future.result <- base::tryCatch({
[10:32:26.587]         base::withCallingHandlers({
[10:32:26.587]             ...future.value <- base::withVisible(base::local({
[10:32:26.587]                 withCallingHandlers({
[10:32:26.587]                   {
[10:32:26.587]                     sum(x, y, ...)
[10:32:26.587]                   }
[10:32:26.587]                 }, immediateCondition = function(cond) {
[10:32:26.587]                   save_rds <- function (object, pathname, ...) 
[10:32:26.587]                   {
[10:32:26.587]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:32:26.587]                     if (file_test("-f", pathname_tmp)) {
[10:32:26.587]                       fi_tmp <- file.info(pathname_tmp)
[10:32:26.587]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:32:26.587]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:26.587]                         fi_tmp[["mtime"]])
[10:32:26.587]                     }
[10:32:26.587]                     tryCatch({
[10:32:26.587]                       saveRDS(object, file = pathname_tmp, ...)
[10:32:26.587]                     }, error = function(ex) {
[10:32:26.587]                       msg <- conditionMessage(ex)
[10:32:26.587]                       fi_tmp <- file.info(pathname_tmp)
[10:32:26.587]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:32:26.587]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:26.587]                         fi_tmp[["mtime"]], msg)
[10:32:26.587]                       ex$message <- msg
[10:32:26.587]                       stop(ex)
[10:32:26.587]                     })
[10:32:26.587]                     stopifnot(file_test("-f", pathname_tmp))
[10:32:26.587]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:32:26.587]                     if (!res || file_test("-f", pathname_tmp)) {
[10:32:26.587]                       fi_tmp <- file.info(pathname_tmp)
[10:32:26.587]                       fi <- file.info(pathname)
[10:32:26.587]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:32:26.587]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:26.587]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:32:26.587]                         fi[["size"]], fi[["mtime"]])
[10:32:26.587]                       stop(msg)
[10:32:26.587]                     }
[10:32:26.587]                     invisible(pathname)
[10:32:26.587]                   }
[10:32:26.587]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:32:26.587]                     rootPath = tempdir()) 
[10:32:26.587]                   {
[10:32:26.587]                     obj <- list(time = Sys.time(), condition = cond)
[10:32:26.587]                     file <- tempfile(pattern = class(cond)[1], 
[10:32:26.587]                       tmpdir = path, fileext = ".rds")
[10:32:26.587]                     save_rds(obj, file)
[10:32:26.587]                   }
[10:32:26.587]                   saveImmediateCondition(cond, path = "/tmp/RtmpojvsR9/.future/immediateConditions")
[10:32:26.587]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:26.587]                   {
[10:32:26.587]                     inherits <- base::inherits
[10:32:26.587]                     invokeRestart <- base::invokeRestart
[10:32:26.587]                     is.null <- base::is.null
[10:32:26.587]                     muffled <- FALSE
[10:32:26.587]                     if (inherits(cond, "message")) {
[10:32:26.587]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:26.587]                       if (muffled) 
[10:32:26.587]                         invokeRestart("muffleMessage")
[10:32:26.587]                     }
[10:32:26.587]                     else if (inherits(cond, "warning")) {
[10:32:26.587]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:26.587]                       if (muffled) 
[10:32:26.587]                         invokeRestart("muffleWarning")
[10:32:26.587]                     }
[10:32:26.587]                     else if (inherits(cond, "condition")) {
[10:32:26.587]                       if (!is.null(pattern)) {
[10:32:26.587]                         computeRestarts <- base::computeRestarts
[10:32:26.587]                         grepl <- base::grepl
[10:32:26.587]                         restarts <- computeRestarts(cond)
[10:32:26.587]                         for (restart in restarts) {
[10:32:26.587]                           name <- restart$name
[10:32:26.587]                           if (is.null(name)) 
[10:32:26.587]                             next
[10:32:26.587]                           if (!grepl(pattern, name)) 
[10:32:26.587]                             next
[10:32:26.587]                           invokeRestart(restart)
[10:32:26.587]                           muffled <- TRUE
[10:32:26.587]                           break
[10:32:26.587]                         }
[10:32:26.587]                       }
[10:32:26.587]                     }
[10:32:26.587]                     invisible(muffled)
[10:32:26.587]                   }
[10:32:26.587]                   muffleCondition(cond)
[10:32:26.587]                 })
[10:32:26.587]             }))
[10:32:26.587]             future::FutureResult(value = ...future.value$value, 
[10:32:26.587]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:26.587]                   ...future.rng), globalenv = if (FALSE) 
[10:32:26.587]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:26.587]                     ...future.globalenv.names))
[10:32:26.587]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:26.587]         }, condition = base::local({
[10:32:26.587]             c <- base::c
[10:32:26.587]             inherits <- base::inherits
[10:32:26.587]             invokeRestart <- base::invokeRestart
[10:32:26.587]             length <- base::length
[10:32:26.587]             list <- base::list
[10:32:26.587]             seq.int <- base::seq.int
[10:32:26.587]             signalCondition <- base::signalCondition
[10:32:26.587]             sys.calls <- base::sys.calls
[10:32:26.587]             `[[` <- base::`[[`
[10:32:26.587]             `+` <- base::`+`
[10:32:26.587]             `<<-` <- base::`<<-`
[10:32:26.587]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:26.587]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:26.587]                   3L)]
[10:32:26.587]             }
[10:32:26.587]             function(cond) {
[10:32:26.587]                 is_error <- inherits(cond, "error")
[10:32:26.587]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:26.587]                   NULL)
[10:32:26.587]                 if (is_error) {
[10:32:26.587]                   sessionInformation <- function() {
[10:32:26.587]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:26.587]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:26.587]                       search = base::search(), system = base::Sys.info())
[10:32:26.587]                   }
[10:32:26.587]                   ...future.conditions[[length(...future.conditions) + 
[10:32:26.587]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:26.587]                     cond$call), session = sessionInformation(), 
[10:32:26.587]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:26.587]                   signalCondition(cond)
[10:32:26.587]                 }
[10:32:26.587]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:26.587]                 "immediateCondition"))) {
[10:32:26.587]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:26.587]                   ...future.conditions[[length(...future.conditions) + 
[10:32:26.587]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:26.587]                   if (TRUE && !signal) {
[10:32:26.587]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:26.587]                     {
[10:32:26.587]                       inherits <- base::inherits
[10:32:26.587]                       invokeRestart <- base::invokeRestart
[10:32:26.587]                       is.null <- base::is.null
[10:32:26.587]                       muffled <- FALSE
[10:32:26.587]                       if (inherits(cond, "message")) {
[10:32:26.587]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:26.587]                         if (muffled) 
[10:32:26.587]                           invokeRestart("muffleMessage")
[10:32:26.587]                       }
[10:32:26.587]                       else if (inherits(cond, "warning")) {
[10:32:26.587]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:26.587]                         if (muffled) 
[10:32:26.587]                           invokeRestart("muffleWarning")
[10:32:26.587]                       }
[10:32:26.587]                       else if (inherits(cond, "condition")) {
[10:32:26.587]                         if (!is.null(pattern)) {
[10:32:26.587]                           computeRestarts <- base::computeRestarts
[10:32:26.587]                           grepl <- base::grepl
[10:32:26.587]                           restarts <- computeRestarts(cond)
[10:32:26.587]                           for (restart in restarts) {
[10:32:26.587]                             name <- restart$name
[10:32:26.587]                             if (is.null(name)) 
[10:32:26.587]                               next
[10:32:26.587]                             if (!grepl(pattern, name)) 
[10:32:26.587]                               next
[10:32:26.587]                             invokeRestart(restart)
[10:32:26.587]                             muffled <- TRUE
[10:32:26.587]                             break
[10:32:26.587]                           }
[10:32:26.587]                         }
[10:32:26.587]                       }
[10:32:26.587]                       invisible(muffled)
[10:32:26.587]                     }
[10:32:26.587]                     muffleCondition(cond, pattern = "^muffle")
[10:32:26.587]                   }
[10:32:26.587]                 }
[10:32:26.587]                 else {
[10:32:26.587]                   if (TRUE) {
[10:32:26.587]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:26.587]                     {
[10:32:26.587]                       inherits <- base::inherits
[10:32:26.587]                       invokeRestart <- base::invokeRestart
[10:32:26.587]                       is.null <- base::is.null
[10:32:26.587]                       muffled <- FALSE
[10:32:26.587]                       if (inherits(cond, "message")) {
[10:32:26.587]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:26.587]                         if (muffled) 
[10:32:26.587]                           invokeRestart("muffleMessage")
[10:32:26.587]                       }
[10:32:26.587]                       else if (inherits(cond, "warning")) {
[10:32:26.587]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:26.587]                         if (muffled) 
[10:32:26.587]                           invokeRestart("muffleWarning")
[10:32:26.587]                       }
[10:32:26.587]                       else if (inherits(cond, "condition")) {
[10:32:26.587]                         if (!is.null(pattern)) {
[10:32:26.587]                           computeRestarts <- base::computeRestarts
[10:32:26.587]                           grepl <- base::grepl
[10:32:26.587]                           restarts <- computeRestarts(cond)
[10:32:26.587]                           for (restart in restarts) {
[10:32:26.587]                             name <- restart$name
[10:32:26.587]                             if (is.null(name)) 
[10:32:26.587]                               next
[10:32:26.587]                             if (!grepl(pattern, name)) 
[10:32:26.587]                               next
[10:32:26.587]                             invokeRestart(restart)
[10:32:26.587]                             muffled <- TRUE
[10:32:26.587]                             break
[10:32:26.587]                           }
[10:32:26.587]                         }
[10:32:26.587]                       }
[10:32:26.587]                       invisible(muffled)
[10:32:26.587]                     }
[10:32:26.587]                     muffleCondition(cond, pattern = "^muffle")
[10:32:26.587]                   }
[10:32:26.587]                 }
[10:32:26.587]             }
[10:32:26.587]         }))
[10:32:26.587]     }, error = function(ex) {
[10:32:26.587]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:26.587]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:26.587]                 ...future.rng), started = ...future.startTime, 
[10:32:26.587]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:26.587]             version = "1.8"), class = "FutureResult")
[10:32:26.587]     }, finally = {
[10:32:26.587]         if (!identical(...future.workdir, getwd())) 
[10:32:26.587]             setwd(...future.workdir)
[10:32:26.587]         {
[10:32:26.587]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:26.587]                 ...future.oldOptions$nwarnings <- NULL
[10:32:26.587]             }
[10:32:26.587]             base::options(...future.oldOptions)
[10:32:26.587]             if (.Platform$OS.type == "windows") {
[10:32:26.587]                 old_names <- names(...future.oldEnvVars)
[10:32:26.587]                 envs <- base::Sys.getenv()
[10:32:26.587]                 names <- names(envs)
[10:32:26.587]                 common <- intersect(names, old_names)
[10:32:26.587]                 added <- setdiff(names, old_names)
[10:32:26.587]                 removed <- setdiff(old_names, names)
[10:32:26.587]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:26.587]                   envs[common]]
[10:32:26.587]                 NAMES <- toupper(changed)
[10:32:26.587]                 args <- list()
[10:32:26.587]                 for (kk in seq_along(NAMES)) {
[10:32:26.587]                   name <- changed[[kk]]
[10:32:26.587]                   NAME <- NAMES[[kk]]
[10:32:26.587]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:26.587]                     next
[10:32:26.587]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:26.587]                 }
[10:32:26.587]                 NAMES <- toupper(added)
[10:32:26.587]                 for (kk in seq_along(NAMES)) {
[10:32:26.587]                   name <- added[[kk]]
[10:32:26.587]                   NAME <- NAMES[[kk]]
[10:32:26.587]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:26.587]                     next
[10:32:26.587]                   args[[name]] <- ""
[10:32:26.587]                 }
[10:32:26.587]                 NAMES <- toupper(removed)
[10:32:26.587]                 for (kk in seq_along(NAMES)) {
[10:32:26.587]                   name <- removed[[kk]]
[10:32:26.587]                   NAME <- NAMES[[kk]]
[10:32:26.587]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:26.587]                     next
[10:32:26.587]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:26.587]                 }
[10:32:26.587]                 if (length(args) > 0) 
[10:32:26.587]                   base::do.call(base::Sys.setenv, args = args)
[10:32:26.587]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:26.587]             }
[10:32:26.587]             else {
[10:32:26.587]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:26.587]             }
[10:32:26.587]             {
[10:32:26.587]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:26.587]                   0L) {
[10:32:26.587]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:26.587]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:26.587]                   base::options(opts)
[10:32:26.587]                 }
[10:32:26.587]                 {
[10:32:26.587]                   {
[10:32:26.587]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:26.587]                     NULL
[10:32:26.587]                   }
[10:32:26.587]                   options(future.plan = NULL)
[10:32:26.587]                   if (is.na(NA_character_)) 
[10:32:26.587]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:26.587]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:26.587]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:26.587]                     .init = FALSE)
[10:32:26.587]                 }
[10:32:26.587]             }
[10:32:26.587]         }
[10:32:26.587]     })
[10:32:26.587]     if (TRUE) {
[10:32:26.587]         base::sink(type = "output", split = FALSE)
[10:32:26.587]         if (TRUE) {
[10:32:26.587]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:26.587]         }
[10:32:26.587]         else {
[10:32:26.587]             ...future.result["stdout"] <- base::list(NULL)
[10:32:26.587]         }
[10:32:26.587]         base::close(...future.stdout)
[10:32:26.587]         ...future.stdout <- NULL
[10:32:26.587]     }
[10:32:26.587]     ...future.result$conditions <- ...future.conditions
[10:32:26.587]     ...future.result$finished <- base::Sys.time()
[10:32:26.587]     ...future.result
[10:32:26.587] }
[10:32:26.591] assign_globals() ...
[10:32:26.592] List of 2
[10:32:26.592]  $ x: int [1:2] 1 2
[10:32:26.592]  $ y: num 3
[10:32:26.592]  - attr(*, "where")=List of 2
[10:32:26.592]   ..$ x:<environment: R_EmptyEnv> 
[10:32:26.592]   ..$ y:<environment: R_EmptyEnv> 
[10:32:26.592]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:32:26.592]  - attr(*, "resolved")= logi FALSE
[10:32:26.592]  - attr(*, "total_size")= num 112
[10:32:26.592]  - attr(*, "already-done")= logi TRUE
[10:32:26.595] - copied ‘x’ to environment
[10:32:26.596] - copied ‘y’ to environment
[10:32:26.596] assign_globals() ... done
[10:32:26.596] requestCore(): workers = 2
[10:32:26.598] MulticoreFuture started
[10:32:26.598] - Launch lazy future ... done
[10:32:26.598] run() for ‘MulticoreFuture’ ... done
[10:32:26.599] result() for MulticoreFuture ...
[10:32:26.599] plan(): Setting new future strategy stack:
[10:32:26.599] List of future strategies:
[10:32:26.599] 1. sequential:
[10:32:26.599]    - args: function (..., envir = parent.frame())
[10:32:26.599]    - tweaked: FALSE
[10:32:26.599]    - call: NULL
[10:32:26.600] plan(): nbrOfWorkers() = 1
[10:32:26.602] plan(): Setting new future strategy stack:
[10:32:26.602] List of future strategies:
[10:32:26.602] 1. multicore:
[10:32:26.602]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:32:26.602]    - tweaked: FALSE
[10:32:26.602]    - call: plan(strategy, substitute = FALSE)
[10:32:26.607] plan(): nbrOfWorkers() = 2
[10:32:26.613] result() for MulticoreFuture ...
[10:32:26.613] result() for MulticoreFuture ... done
[10:32:26.613] signalConditions() ...
[10:32:26.613]  - include = ‘immediateCondition’
[10:32:26.613]  - exclude = 
[10:32:26.614]  - resignal = FALSE
[10:32:26.614]  - Number of conditions: 1
[10:32:26.614] signalConditions() ... done
[10:32:26.614] result() for MulticoreFuture ... done
[10:32:26.614] result() for MulticoreFuture ...
[10:32:26.614] result() for MulticoreFuture ... done
[10:32:26.614] signalConditions() ...
[10:32:26.614]  - include = ‘immediateCondition’
[10:32:26.614]  - exclude = 
[10:32:26.615]  - resignal = FALSE
[10:32:26.615]  - Number of conditions: 1
[10:32:26.615] signalConditions() ... done
[10:32:26.615] Future state: ‘finished’
[10:32:26.615] result() for MulticoreFuture ...
[10:32:26.615] result() for MulticoreFuture ... done
[10:32:26.615] signalConditions() ...
[10:32:26.615]  - include = ‘condition’
[10:32:26.616]  - exclude = ‘immediateCondition’
[10:32:26.616]  - resignal = TRUE
[10:32:26.616]  - Number of conditions: 1
[10:32:26.616]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[10:32:26.616] signalConditions() ... done
Error in withCallingHandlers({ : '...' used in an incorrect context
[1] "Error in withCallingHandlers({ : '...' used in an incorrect context\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        sum(x, y, ...)    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpojvsR9/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): '...' used in an incorrect context>
** Sum function 'E' with plan('multicore') ...
function (...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    globals <- globals::globalsByName("...", envir = environment())
    f <- future({
        fcn <- function() sum(...)
        fcn()
    }, envir = parent.frame(), globals = globals)
    y <- value(f)
    y
}
<bytecode: 0x5644c7a692f0>
Arguments '...' exists: TRUE
[10:32:26.618] getGlobalsAndPackages() ...
[10:32:26.618] - globals passed as-is: [1] ‘...’
[10:32:26.618] Resolving globals: FALSE
[10:32:26.618] Tweak future expression to call with '...' arguments ...
[10:32:26.618] {
[10:32:26.618]     do.call(function(...) {
[10:32:26.618]         fcn <- function() sum(...)
[10:32:26.618]         fcn()
[10:32:26.618]     }, args = future.call.arguments)
[10:32:26.618] }
[10:32:26.618] Tweak future expression to call with '...' arguments ... DONE
[10:32:26.619] The total size of the 1 globals is 112 bytes (112 bytes)
[10:32:26.619] The total size of the 1 globals exported for future expression (‘{; fcn <- function() sum(...); fcn(); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘future.call.arguments’ (112 bytes of class ‘list’)
[10:32:26.619] - globals: [1] ‘future.call.arguments’
[10:32:26.620] 
[10:32:26.620] getGlobalsAndPackages() ... DONE
[10:32:26.620] run() for ‘Future’ ...
[10:32:26.620] - state: ‘created’
[10:32:26.620] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:32:26.624] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:26.624] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:32:26.625]   - Field: ‘label’
[10:32:26.625]   - Field: ‘local’
[10:32:26.625]   - Field: ‘owner’
[10:32:26.625]   - Field: ‘envir’
[10:32:26.625]   - Field: ‘workers’
[10:32:26.625]   - Field: ‘packages’
[10:32:26.625]   - Field: ‘gc’
[10:32:26.625]   - Field: ‘job’
[10:32:26.626]   - Field: ‘conditions’
[10:32:26.626]   - Field: ‘expr’
[10:32:26.626]   - Field: ‘uuid’
[10:32:26.626]   - Field: ‘seed’
[10:32:26.626]   - Field: ‘version’
[10:32:26.626]   - Field: ‘result’
[10:32:26.626]   - Field: ‘asynchronous’
[10:32:26.626]   - Field: ‘calls’
[10:32:26.626]   - Field: ‘globals’
[10:32:26.627]   - Field: ‘stdout’
[10:32:26.627]   - Field: ‘earlySignal’
[10:32:26.627]   - Field: ‘lazy’
[10:32:26.627]   - Field: ‘state’
[10:32:26.627] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:32:26.627] - Launch lazy future ...
[10:32:26.627] Packages needed by the future expression (n = 0): <none>
[10:32:26.628] Packages needed by future strategies (n = 0): <none>
[10:32:26.628] {
[10:32:26.628]     {
[10:32:26.628]         {
[10:32:26.628]             ...future.startTime <- base::Sys.time()
[10:32:26.628]             {
[10:32:26.628]                 {
[10:32:26.628]                   {
[10:32:26.628]                     {
[10:32:26.628]                       base::local({
[10:32:26.628]                         has_future <- base::requireNamespace("future", 
[10:32:26.628]                           quietly = TRUE)
[10:32:26.628]                         if (has_future) {
[10:32:26.628]                           ns <- base::getNamespace("future")
[10:32:26.628]                           version <- ns[[".package"]][["version"]]
[10:32:26.628]                           if (is.null(version)) 
[10:32:26.628]                             version <- utils::packageVersion("future")
[10:32:26.628]                         }
[10:32:26.628]                         else {
[10:32:26.628]                           version <- NULL
[10:32:26.628]                         }
[10:32:26.628]                         if (!has_future || version < "1.8.0") {
[10:32:26.628]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:26.628]                             "", base::R.version$version.string), 
[10:32:26.628]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:26.628]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:26.628]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:26.628]                               "release", "version")], collapse = " "), 
[10:32:26.628]                             hostname = base::Sys.info()[["nodename"]])
[10:32:26.628]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:26.628]                             info)
[10:32:26.628]                           info <- base::paste(info, collapse = "; ")
[10:32:26.628]                           if (!has_future) {
[10:32:26.628]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:26.628]                               info)
[10:32:26.628]                           }
[10:32:26.628]                           else {
[10:32:26.628]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:26.628]                               info, version)
[10:32:26.628]                           }
[10:32:26.628]                           base::stop(msg)
[10:32:26.628]                         }
[10:32:26.628]                       })
[10:32:26.628]                     }
[10:32:26.628]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:26.628]                     base::options(mc.cores = 1L)
[10:32:26.628]                   }
[10:32:26.628]                   ...future.strategy.old <- future::plan("list")
[10:32:26.628]                   options(future.plan = NULL)
[10:32:26.628]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:26.628]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:26.628]                 }
[10:32:26.628]                 ...future.workdir <- getwd()
[10:32:26.628]             }
[10:32:26.628]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:26.628]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:26.628]         }
[10:32:26.628]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:26.628]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:26.628]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:26.628]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:26.628]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:26.628]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:26.628]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:26.628]             base::names(...future.oldOptions))
[10:32:26.628]     }
[10:32:26.628]     if (FALSE) {
[10:32:26.628]     }
[10:32:26.628]     else {
[10:32:26.628]         if (TRUE) {
[10:32:26.628]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:26.628]                 open = "w")
[10:32:26.628]         }
[10:32:26.628]         else {
[10:32:26.628]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:26.628]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:26.628]         }
[10:32:26.628]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:26.628]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:26.628]             base::sink(type = "output", split = FALSE)
[10:32:26.628]             base::close(...future.stdout)
[10:32:26.628]         }, add = TRUE)
[10:32:26.628]     }
[10:32:26.628]     ...future.frame <- base::sys.nframe()
[10:32:26.628]     ...future.conditions <- base::list()
[10:32:26.628]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:26.628]     if (FALSE) {
[10:32:26.628]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:26.628]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:26.628]     }
[10:32:26.628]     ...future.result <- base::tryCatch({
[10:32:26.628]         base::withCallingHandlers({
[10:32:26.628]             ...future.value <- base::withVisible(base::local({
[10:32:26.628]                 withCallingHandlers({
[10:32:26.628]                   {
[10:32:26.628]                     do.call(function(...) {
[10:32:26.628]                       fcn <- function() sum(...)
[10:32:26.628]                       fcn()
[10:32:26.628]                     }, args = future.call.arguments)
[10:32:26.628]                   }
[10:32:26.628]                 }, immediateCondition = function(cond) {
[10:32:26.628]                   save_rds <- function (object, pathname, ...) 
[10:32:26.628]                   {
[10:32:26.628]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:32:26.628]                     if (file_test("-f", pathname_tmp)) {
[10:32:26.628]                       fi_tmp <- file.info(pathname_tmp)
[10:32:26.628]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:32:26.628]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:26.628]                         fi_tmp[["mtime"]])
[10:32:26.628]                     }
[10:32:26.628]                     tryCatch({
[10:32:26.628]                       saveRDS(object, file = pathname_tmp, ...)
[10:32:26.628]                     }, error = function(ex) {
[10:32:26.628]                       msg <- conditionMessage(ex)
[10:32:26.628]                       fi_tmp <- file.info(pathname_tmp)
[10:32:26.628]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:32:26.628]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:26.628]                         fi_tmp[["mtime"]], msg)
[10:32:26.628]                       ex$message <- msg
[10:32:26.628]                       stop(ex)
[10:32:26.628]                     })
[10:32:26.628]                     stopifnot(file_test("-f", pathname_tmp))
[10:32:26.628]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:32:26.628]                     if (!res || file_test("-f", pathname_tmp)) {
[10:32:26.628]                       fi_tmp <- file.info(pathname_tmp)
[10:32:26.628]                       fi <- file.info(pathname)
[10:32:26.628]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:32:26.628]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:26.628]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:32:26.628]                         fi[["size"]], fi[["mtime"]])
[10:32:26.628]                       stop(msg)
[10:32:26.628]                     }
[10:32:26.628]                     invisible(pathname)
[10:32:26.628]                   }
[10:32:26.628]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:32:26.628]                     rootPath = tempdir()) 
[10:32:26.628]                   {
[10:32:26.628]                     obj <- list(time = Sys.time(), condition = cond)
[10:32:26.628]                     file <- tempfile(pattern = class(cond)[1], 
[10:32:26.628]                       tmpdir = path, fileext = ".rds")
[10:32:26.628]                     save_rds(obj, file)
[10:32:26.628]                   }
[10:32:26.628]                   saveImmediateCondition(cond, path = "/tmp/RtmpojvsR9/.future/immediateConditions")
[10:32:26.628]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:26.628]                   {
[10:32:26.628]                     inherits <- base::inherits
[10:32:26.628]                     invokeRestart <- base::invokeRestart
[10:32:26.628]                     is.null <- base::is.null
[10:32:26.628]                     muffled <- FALSE
[10:32:26.628]                     if (inherits(cond, "message")) {
[10:32:26.628]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:26.628]                       if (muffled) 
[10:32:26.628]                         invokeRestart("muffleMessage")
[10:32:26.628]                     }
[10:32:26.628]                     else if (inherits(cond, "warning")) {
[10:32:26.628]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:26.628]                       if (muffled) 
[10:32:26.628]                         invokeRestart("muffleWarning")
[10:32:26.628]                     }
[10:32:26.628]                     else if (inherits(cond, "condition")) {
[10:32:26.628]                       if (!is.null(pattern)) {
[10:32:26.628]                         computeRestarts <- base::computeRestarts
[10:32:26.628]                         grepl <- base::grepl
[10:32:26.628]                         restarts <- computeRestarts(cond)
[10:32:26.628]                         for (restart in restarts) {
[10:32:26.628]                           name <- restart$name
[10:32:26.628]                           if (is.null(name)) 
[10:32:26.628]                             next
[10:32:26.628]                           if (!grepl(pattern, name)) 
[10:32:26.628]                             next
[10:32:26.628]                           invokeRestart(restart)
[10:32:26.628]                           muffled <- TRUE
[10:32:26.628]                           break
[10:32:26.628]                         }
[10:32:26.628]                       }
[10:32:26.628]                     }
[10:32:26.628]                     invisible(muffled)
[10:32:26.628]                   }
[10:32:26.628]                   muffleCondition(cond)
[10:32:26.628]                 })
[10:32:26.628]             }))
[10:32:26.628]             future::FutureResult(value = ...future.value$value, 
[10:32:26.628]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:26.628]                   ...future.rng), globalenv = if (FALSE) 
[10:32:26.628]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:26.628]                     ...future.globalenv.names))
[10:32:26.628]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:26.628]         }, condition = base::local({
[10:32:26.628]             c <- base::c
[10:32:26.628]             inherits <- base::inherits
[10:32:26.628]             invokeRestart <- base::invokeRestart
[10:32:26.628]             length <- base::length
[10:32:26.628]             list <- base::list
[10:32:26.628]             seq.int <- base::seq.int
[10:32:26.628]             signalCondition <- base::signalCondition
[10:32:26.628]             sys.calls <- base::sys.calls
[10:32:26.628]             `[[` <- base::`[[`
[10:32:26.628]             `+` <- base::`+`
[10:32:26.628]             `<<-` <- base::`<<-`
[10:32:26.628]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:26.628]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:26.628]                   3L)]
[10:32:26.628]             }
[10:32:26.628]             function(cond) {
[10:32:26.628]                 is_error <- inherits(cond, "error")
[10:32:26.628]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:26.628]                   NULL)
[10:32:26.628]                 if (is_error) {
[10:32:26.628]                   sessionInformation <- function() {
[10:32:26.628]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:26.628]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:26.628]                       search = base::search(), system = base::Sys.info())
[10:32:26.628]                   }
[10:32:26.628]                   ...future.conditions[[length(...future.conditions) + 
[10:32:26.628]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:26.628]                     cond$call), session = sessionInformation(), 
[10:32:26.628]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:26.628]                   signalCondition(cond)
[10:32:26.628]                 }
[10:32:26.628]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:26.628]                 "immediateCondition"))) {
[10:32:26.628]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:26.628]                   ...future.conditions[[length(...future.conditions) + 
[10:32:26.628]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:26.628]                   if (TRUE && !signal) {
[10:32:26.628]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:26.628]                     {
[10:32:26.628]                       inherits <- base::inherits
[10:32:26.628]                       invokeRestart <- base::invokeRestart
[10:32:26.628]                       is.null <- base::is.null
[10:32:26.628]                       muffled <- FALSE
[10:32:26.628]                       if (inherits(cond, "message")) {
[10:32:26.628]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:26.628]                         if (muffled) 
[10:32:26.628]                           invokeRestart("muffleMessage")
[10:32:26.628]                       }
[10:32:26.628]                       else if (inherits(cond, "warning")) {
[10:32:26.628]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:26.628]                         if (muffled) 
[10:32:26.628]                           invokeRestart("muffleWarning")
[10:32:26.628]                       }
[10:32:26.628]                       else if (inherits(cond, "condition")) {
[10:32:26.628]                         if (!is.null(pattern)) {
[10:32:26.628]                           computeRestarts <- base::computeRestarts
[10:32:26.628]                           grepl <- base::grepl
[10:32:26.628]                           restarts <- computeRestarts(cond)
[10:32:26.628]                           for (restart in restarts) {
[10:32:26.628]                             name <- restart$name
[10:32:26.628]                             if (is.null(name)) 
[10:32:26.628]                               next
[10:32:26.628]                             if (!grepl(pattern, name)) 
[10:32:26.628]                               next
[10:32:26.628]                             invokeRestart(restart)
[10:32:26.628]                             muffled <- TRUE
[10:32:26.628]                             break
[10:32:26.628]                           }
[10:32:26.628]                         }
[10:32:26.628]                       }
[10:32:26.628]                       invisible(muffled)
[10:32:26.628]                     }
[10:32:26.628]                     muffleCondition(cond, pattern = "^muffle")
[10:32:26.628]                   }
[10:32:26.628]                 }
[10:32:26.628]                 else {
[10:32:26.628]                   if (TRUE) {
[10:32:26.628]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:26.628]                     {
[10:32:26.628]                       inherits <- base::inherits
[10:32:26.628]                       invokeRestart <- base::invokeRestart
[10:32:26.628]                       is.null <- base::is.null
[10:32:26.628]                       muffled <- FALSE
[10:32:26.628]                       if (inherits(cond, "message")) {
[10:32:26.628]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:26.628]                         if (muffled) 
[10:32:26.628]                           invokeRestart("muffleMessage")
[10:32:26.628]                       }
[10:32:26.628]                       else if (inherits(cond, "warning")) {
[10:32:26.628]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:26.628]                         if (muffled) 
[10:32:26.628]                           invokeRestart("muffleWarning")
[10:32:26.628]                       }
[10:32:26.628]                       else if (inherits(cond, "condition")) {
[10:32:26.628]                         if (!is.null(pattern)) {
[10:32:26.628]                           computeRestarts <- base::computeRestarts
[10:32:26.628]                           grepl <- base::grepl
[10:32:26.628]                           restarts <- computeRestarts(cond)
[10:32:26.628]                           for (restart in restarts) {
[10:32:26.628]                             name <- restart$name
[10:32:26.628]                             if (is.null(name)) 
[10:32:26.628]                               next
[10:32:26.628]                             if (!grepl(pattern, name)) 
[10:32:26.628]                               next
[10:32:26.628]                             invokeRestart(restart)
[10:32:26.628]                             muffled <- TRUE
[10:32:26.628]                             break
[10:32:26.628]                           }
[10:32:26.628]                         }
[10:32:26.628]                       }
[10:32:26.628]                       invisible(muffled)
[10:32:26.628]                     }
[10:32:26.628]                     muffleCondition(cond, pattern = "^muffle")
[10:32:26.628]                   }
[10:32:26.628]                 }
[10:32:26.628]             }
[10:32:26.628]         }))
[10:32:26.628]     }, error = function(ex) {
[10:32:26.628]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:26.628]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:26.628]                 ...future.rng), started = ...future.startTime, 
[10:32:26.628]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:26.628]             version = "1.8"), class = "FutureResult")
[10:32:26.628]     }, finally = {
[10:32:26.628]         if (!identical(...future.workdir, getwd())) 
[10:32:26.628]             setwd(...future.workdir)
[10:32:26.628]         {
[10:32:26.628]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:26.628]                 ...future.oldOptions$nwarnings <- NULL
[10:32:26.628]             }
[10:32:26.628]             base::options(...future.oldOptions)
[10:32:26.628]             if (.Platform$OS.type == "windows") {
[10:32:26.628]                 old_names <- names(...future.oldEnvVars)
[10:32:26.628]                 envs <- base::Sys.getenv()
[10:32:26.628]                 names <- names(envs)
[10:32:26.628]                 common <- intersect(names, old_names)
[10:32:26.628]                 added <- setdiff(names, old_names)
[10:32:26.628]                 removed <- setdiff(old_names, names)
[10:32:26.628]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:26.628]                   envs[common]]
[10:32:26.628]                 NAMES <- toupper(changed)
[10:32:26.628]                 args <- list()
[10:32:26.628]                 for (kk in seq_along(NAMES)) {
[10:32:26.628]                   name <- changed[[kk]]
[10:32:26.628]                   NAME <- NAMES[[kk]]
[10:32:26.628]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:26.628]                     next
[10:32:26.628]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:26.628]                 }
[10:32:26.628]                 NAMES <- toupper(added)
[10:32:26.628]                 for (kk in seq_along(NAMES)) {
[10:32:26.628]                   name <- added[[kk]]
[10:32:26.628]                   NAME <- NAMES[[kk]]
[10:32:26.628]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:26.628]                     next
[10:32:26.628]                   args[[name]] <- ""
[10:32:26.628]                 }
[10:32:26.628]                 NAMES <- toupper(removed)
[10:32:26.628]                 for (kk in seq_along(NAMES)) {
[10:32:26.628]                   name <- removed[[kk]]
[10:32:26.628]                   NAME <- NAMES[[kk]]
[10:32:26.628]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:26.628]                     next
[10:32:26.628]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:26.628]                 }
[10:32:26.628]                 if (length(args) > 0) 
[10:32:26.628]                   base::do.call(base::Sys.setenv, args = args)
[10:32:26.628]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:26.628]             }
[10:32:26.628]             else {
[10:32:26.628]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:26.628]             }
[10:32:26.628]             {
[10:32:26.628]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:26.628]                   0L) {
[10:32:26.628]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:26.628]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:26.628]                   base::options(opts)
[10:32:26.628]                 }
[10:32:26.628]                 {
[10:32:26.628]                   {
[10:32:26.628]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:26.628]                     NULL
[10:32:26.628]                   }
[10:32:26.628]                   options(future.plan = NULL)
[10:32:26.628]                   if (is.na(NA_character_)) 
[10:32:26.628]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:26.628]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:26.628]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:26.628]                     .init = FALSE)
[10:32:26.628]                 }
[10:32:26.628]             }
[10:32:26.628]         }
[10:32:26.628]     })
[10:32:26.628]     if (TRUE) {
[10:32:26.628]         base::sink(type = "output", split = FALSE)
[10:32:26.628]         if (TRUE) {
[10:32:26.628]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:26.628]         }
[10:32:26.628]         else {
[10:32:26.628]             ...future.result["stdout"] <- base::list(NULL)
[10:32:26.628]         }
[10:32:26.628]         base::close(...future.stdout)
[10:32:26.628]         ...future.stdout <- NULL
[10:32:26.628]     }
[10:32:26.628]     ...future.result$conditions <- ...future.conditions
[10:32:26.628]     ...future.result$finished <- base::Sys.time()
[10:32:26.628]     ...future.result
[10:32:26.628] }
[10:32:26.630] assign_globals() ...
[10:32:26.631] List of 1
[10:32:26.631]  $ future.call.arguments:List of 2
[10:32:26.631]   ..$ : int [1:2] 1 2
[10:32:26.631]   ..$ : num 3
[10:32:26.631]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[10:32:26.631]  - attr(*, "where")=List of 1
[10:32:26.631]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[10:32:26.631]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:32:26.631]  - attr(*, "resolved")= logi FALSE
[10:32:26.631]  - attr(*, "total_size")= num 112
[10:32:26.631]  - attr(*, "already-done")= logi TRUE
[10:32:26.634] - copied ‘future.call.arguments’ to environment
[10:32:26.635] assign_globals() ... done
[10:32:26.635] requestCore(): workers = 2
[10:32:26.636] MulticoreFuture started
[10:32:26.637] - Launch lazy future ... done
[10:32:26.637] run() for ‘MulticoreFuture’ ... done
[10:32:26.637] result() for MulticoreFuture ...
[10:32:26.638] plan(): Setting new future strategy stack:
[10:32:26.638] List of future strategies:
[10:32:26.638] 1. sequential:
[10:32:26.638]    - args: function (..., envir = parent.frame())
[10:32:26.638]    - tweaked: FALSE
[10:32:26.638]    - call: NULL
[10:32:26.639] plan(): nbrOfWorkers() = 1
[10:32:26.641] plan(): Setting new future strategy stack:
[10:32:26.641] List of future strategies:
[10:32:26.641] 1. multicore:
[10:32:26.641]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:32:26.641]    - tweaked: FALSE
[10:32:26.641]    - call: plan(strategy, substitute = FALSE)
[10:32:26.646] plan(): nbrOfWorkers() = 2
[10:32:26.646] result() for MulticoreFuture ...
[10:32:26.646] result() for MulticoreFuture ... done
[10:32:26.647] result() for MulticoreFuture ... done
[10:32:26.647] result() for MulticoreFuture ...
[10:32:26.647] result() for MulticoreFuture ... done
[1] 6
** Sum function 'F' with plan('multicore') ...
function (x, y) 
{
    message("Using '...' in a formula")
    fcn <- function(x, y) {
        z = ~list(...)
        sum(x, y)
    }
    f <- future(fcn(x, y))
    y <- value(f)
    y
}
<bytecode: 0x5644c62fa9b0>
Using '...' in a formula
[10:32:26.647] getGlobalsAndPackages() ...
[10:32:26.648] Searching for globals...
[10:32:26.655] - globals found: [9] ‘fcn’, ‘x’, ‘y’, ‘{’, ‘=’, ‘~’, ‘list’, ‘...’, ‘sum’
[10:32:26.655] Searching for globals ... DONE
[10:32:26.655] Resolving globals: FALSE
[10:32:26.655] Tweak future expression to call with '...' arguments ...
[10:32:26.656] The total size of the 3 globals is 4.18 KiB (4280 bytes)
[10:32:26.656] The total size of the 3 globals exported for future expression (‘fcn(x, y)’) is 4.18 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘fcn’ (4.07 KiB of class ‘function’), ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[10:32:26.657] - globals: [3] ‘fcn’, ‘x’, ‘y’
[10:32:26.657] 
[10:32:26.657] getGlobalsAndPackages() ... DONE
[10:32:26.657] run() for ‘Future’ ...
[10:32:26.657] - state: ‘created’
[10:32:26.657] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:32:26.661] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:26.661] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:32:26.662]   - Field: ‘label’
[10:32:26.662]   - Field: ‘local’
[10:32:26.662]   - Field: ‘owner’
[10:32:26.662]   - Field: ‘envir’
[10:32:26.662]   - Field: ‘workers’
[10:32:26.662]   - Field: ‘packages’
[10:32:26.662]   - Field: ‘gc’
[10:32:26.662]   - Field: ‘job’
[10:32:26.662]   - Field: ‘conditions’
[10:32:26.663]   - Field: ‘expr’
[10:32:26.663]   - Field: ‘uuid’
[10:32:26.663]   - Field: ‘seed’
[10:32:26.663]   - Field: ‘version’
[10:32:26.663]   - Field: ‘result’
[10:32:26.663]   - Field: ‘asynchronous’
[10:32:26.663]   - Field: ‘calls’
[10:32:26.663]   - Field: ‘globals’
[10:32:26.663]   - Field: ‘stdout’
[10:32:26.664]   - Field: ‘earlySignal’
[10:32:26.664]   - Field: ‘lazy’
[10:32:26.664]   - Field: ‘state’
[10:32:26.664] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:32:26.664] - Launch lazy future ...
[10:32:26.664] Packages needed by the future expression (n = 0): <none>
[10:32:26.664] Packages needed by future strategies (n = 0): <none>
[10:32:26.665] {
[10:32:26.665]     {
[10:32:26.665]         {
[10:32:26.665]             ...future.startTime <- base::Sys.time()
[10:32:26.665]             {
[10:32:26.665]                 {
[10:32:26.665]                   {
[10:32:26.665]                     {
[10:32:26.665]                       base::local({
[10:32:26.665]                         has_future <- base::requireNamespace("future", 
[10:32:26.665]                           quietly = TRUE)
[10:32:26.665]                         if (has_future) {
[10:32:26.665]                           ns <- base::getNamespace("future")
[10:32:26.665]                           version <- ns[[".package"]][["version"]]
[10:32:26.665]                           if (is.null(version)) 
[10:32:26.665]                             version <- utils::packageVersion("future")
[10:32:26.665]                         }
[10:32:26.665]                         else {
[10:32:26.665]                           version <- NULL
[10:32:26.665]                         }
[10:32:26.665]                         if (!has_future || version < "1.8.0") {
[10:32:26.665]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:26.665]                             "", base::R.version$version.string), 
[10:32:26.665]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:26.665]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:26.665]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:26.665]                               "release", "version")], collapse = " "), 
[10:32:26.665]                             hostname = base::Sys.info()[["nodename"]])
[10:32:26.665]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:26.665]                             info)
[10:32:26.665]                           info <- base::paste(info, collapse = "; ")
[10:32:26.665]                           if (!has_future) {
[10:32:26.665]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:26.665]                               info)
[10:32:26.665]                           }
[10:32:26.665]                           else {
[10:32:26.665]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:26.665]                               info, version)
[10:32:26.665]                           }
[10:32:26.665]                           base::stop(msg)
[10:32:26.665]                         }
[10:32:26.665]                       })
[10:32:26.665]                     }
[10:32:26.665]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:26.665]                     base::options(mc.cores = 1L)
[10:32:26.665]                   }
[10:32:26.665]                   ...future.strategy.old <- future::plan("list")
[10:32:26.665]                   options(future.plan = NULL)
[10:32:26.665]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:26.665]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:26.665]                 }
[10:32:26.665]                 ...future.workdir <- getwd()
[10:32:26.665]             }
[10:32:26.665]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:26.665]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:26.665]         }
[10:32:26.665]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:26.665]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:26.665]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:26.665]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:26.665]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:26.665]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:26.665]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:26.665]             base::names(...future.oldOptions))
[10:32:26.665]     }
[10:32:26.665]     if (FALSE) {
[10:32:26.665]     }
[10:32:26.665]     else {
[10:32:26.665]         if (TRUE) {
[10:32:26.665]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:26.665]                 open = "w")
[10:32:26.665]         }
[10:32:26.665]         else {
[10:32:26.665]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:26.665]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:26.665]         }
[10:32:26.665]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:26.665]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:26.665]             base::sink(type = "output", split = FALSE)
[10:32:26.665]             base::close(...future.stdout)
[10:32:26.665]         }, add = TRUE)
[10:32:26.665]     }
[10:32:26.665]     ...future.frame <- base::sys.nframe()
[10:32:26.665]     ...future.conditions <- base::list()
[10:32:26.665]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:26.665]     if (FALSE) {
[10:32:26.665]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:26.665]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:26.665]     }
[10:32:26.665]     ...future.result <- base::tryCatch({
[10:32:26.665]         base::withCallingHandlers({
[10:32:26.665]             ...future.value <- base::withVisible(base::local({
[10:32:26.665]                 withCallingHandlers({
[10:32:26.665]                   fcn(x, y)
[10:32:26.665]                 }, immediateCondition = function(cond) {
[10:32:26.665]                   save_rds <- function (object, pathname, ...) 
[10:32:26.665]                   {
[10:32:26.665]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:32:26.665]                     if (file_test("-f", pathname_tmp)) {
[10:32:26.665]                       fi_tmp <- file.info(pathname_tmp)
[10:32:26.665]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:32:26.665]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:26.665]                         fi_tmp[["mtime"]])
[10:32:26.665]                     }
[10:32:26.665]                     tryCatch({
[10:32:26.665]                       saveRDS(object, file = pathname_tmp, ...)
[10:32:26.665]                     }, error = function(ex) {
[10:32:26.665]                       msg <- conditionMessage(ex)
[10:32:26.665]                       fi_tmp <- file.info(pathname_tmp)
[10:32:26.665]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:32:26.665]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:26.665]                         fi_tmp[["mtime"]], msg)
[10:32:26.665]                       ex$message <- msg
[10:32:26.665]                       stop(ex)
[10:32:26.665]                     })
[10:32:26.665]                     stopifnot(file_test("-f", pathname_tmp))
[10:32:26.665]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:32:26.665]                     if (!res || file_test("-f", pathname_tmp)) {
[10:32:26.665]                       fi_tmp <- file.info(pathname_tmp)
[10:32:26.665]                       fi <- file.info(pathname)
[10:32:26.665]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:32:26.665]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:26.665]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:32:26.665]                         fi[["size"]], fi[["mtime"]])
[10:32:26.665]                       stop(msg)
[10:32:26.665]                     }
[10:32:26.665]                     invisible(pathname)
[10:32:26.665]                   }
[10:32:26.665]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:32:26.665]                     rootPath = tempdir()) 
[10:32:26.665]                   {
[10:32:26.665]                     obj <- list(time = Sys.time(), condition = cond)
[10:32:26.665]                     file <- tempfile(pattern = class(cond)[1], 
[10:32:26.665]                       tmpdir = path, fileext = ".rds")
[10:32:26.665]                     save_rds(obj, file)
[10:32:26.665]                   }
[10:32:26.665]                   saveImmediateCondition(cond, path = "/tmp/RtmpojvsR9/.future/immediateConditions")
[10:32:26.665]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:26.665]                   {
[10:32:26.665]                     inherits <- base::inherits
[10:32:26.665]                     invokeRestart <- base::invokeRestart
[10:32:26.665]                     is.null <- base::is.null
[10:32:26.665]                     muffled <- FALSE
[10:32:26.665]                     if (inherits(cond, "message")) {
[10:32:26.665]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:26.665]                       if (muffled) 
[10:32:26.665]                         invokeRestart("muffleMessage")
[10:32:26.665]                     }
[10:32:26.665]                     else if (inherits(cond, "warning")) {
[10:32:26.665]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:26.665]                       if (muffled) 
[10:32:26.665]                         invokeRestart("muffleWarning")
[10:32:26.665]                     }
[10:32:26.665]                     else if (inherits(cond, "condition")) {
[10:32:26.665]                       if (!is.null(pattern)) {
[10:32:26.665]                         computeRestarts <- base::computeRestarts
[10:32:26.665]                         grepl <- base::grepl
[10:32:26.665]                         restarts <- computeRestarts(cond)
[10:32:26.665]                         for (restart in restarts) {
[10:32:26.665]                           name <- restart$name
[10:32:26.665]                           if (is.null(name)) 
[10:32:26.665]                             next
[10:32:26.665]                           if (!grepl(pattern, name)) 
[10:32:26.665]                             next
[10:32:26.665]                           invokeRestart(restart)
[10:32:26.665]                           muffled <- TRUE
[10:32:26.665]                           break
[10:32:26.665]                         }
[10:32:26.665]                       }
[10:32:26.665]                     }
[10:32:26.665]                     invisible(muffled)
[10:32:26.665]                   }
[10:32:26.665]                   muffleCondition(cond)
[10:32:26.665]                 })
[10:32:26.665]             }))
[10:32:26.665]             future::FutureResult(value = ...future.value$value, 
[10:32:26.665]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:26.665]                   ...future.rng), globalenv = if (FALSE) 
[10:32:26.665]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:26.665]                     ...future.globalenv.names))
[10:32:26.665]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:26.665]         }, condition = base::local({
[10:32:26.665]             c <- base::c
[10:32:26.665]             inherits <- base::inherits
[10:32:26.665]             invokeRestart <- base::invokeRestart
[10:32:26.665]             length <- base::length
[10:32:26.665]             list <- base::list
[10:32:26.665]             seq.int <- base::seq.int
[10:32:26.665]             signalCondition <- base::signalCondition
[10:32:26.665]             sys.calls <- base::sys.calls
[10:32:26.665]             `[[` <- base::`[[`
[10:32:26.665]             `+` <- base::`+`
[10:32:26.665]             `<<-` <- base::`<<-`
[10:32:26.665]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:26.665]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:26.665]                   3L)]
[10:32:26.665]             }
[10:32:26.665]             function(cond) {
[10:32:26.665]                 is_error <- inherits(cond, "error")
[10:32:26.665]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:26.665]                   NULL)
[10:32:26.665]                 if (is_error) {
[10:32:26.665]                   sessionInformation <- function() {
[10:32:26.665]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:26.665]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:26.665]                       search = base::search(), system = base::Sys.info())
[10:32:26.665]                   }
[10:32:26.665]                   ...future.conditions[[length(...future.conditions) + 
[10:32:26.665]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:26.665]                     cond$call), session = sessionInformation(), 
[10:32:26.665]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:26.665]                   signalCondition(cond)
[10:32:26.665]                 }
[10:32:26.665]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:26.665]                 "immediateCondition"))) {
[10:32:26.665]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:26.665]                   ...future.conditions[[length(...future.conditions) + 
[10:32:26.665]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:26.665]                   if (TRUE && !signal) {
[10:32:26.665]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:26.665]                     {
[10:32:26.665]                       inherits <- base::inherits
[10:32:26.665]                       invokeRestart <- base::invokeRestart
[10:32:26.665]                       is.null <- base::is.null
[10:32:26.665]                       muffled <- FALSE
[10:32:26.665]                       if (inherits(cond, "message")) {
[10:32:26.665]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:26.665]                         if (muffled) 
[10:32:26.665]                           invokeRestart("muffleMessage")
[10:32:26.665]                       }
[10:32:26.665]                       else if (inherits(cond, "warning")) {
[10:32:26.665]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:26.665]                         if (muffled) 
[10:32:26.665]                           invokeRestart("muffleWarning")
[10:32:26.665]                       }
[10:32:26.665]                       else if (inherits(cond, "condition")) {
[10:32:26.665]                         if (!is.null(pattern)) {
[10:32:26.665]                           computeRestarts <- base::computeRestarts
[10:32:26.665]                           grepl <- base::grepl
[10:32:26.665]                           restarts <- computeRestarts(cond)
[10:32:26.665]                           for (restart in restarts) {
[10:32:26.665]                             name <- restart$name
[10:32:26.665]                             if (is.null(name)) 
[10:32:26.665]                               next
[10:32:26.665]                             if (!grepl(pattern, name)) 
[10:32:26.665]                               next
[10:32:26.665]                             invokeRestart(restart)
[10:32:26.665]                             muffled <- TRUE
[10:32:26.665]                             break
[10:32:26.665]                           }
[10:32:26.665]                         }
[10:32:26.665]                       }
[10:32:26.665]                       invisible(muffled)
[10:32:26.665]                     }
[10:32:26.665]                     muffleCondition(cond, pattern = "^muffle")
[10:32:26.665]                   }
[10:32:26.665]                 }
[10:32:26.665]                 else {
[10:32:26.665]                   if (TRUE) {
[10:32:26.665]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:26.665]                     {
[10:32:26.665]                       inherits <- base::inherits
[10:32:26.665]                       invokeRestart <- base::invokeRestart
[10:32:26.665]                       is.null <- base::is.null
[10:32:26.665]                       muffled <- FALSE
[10:32:26.665]                       if (inherits(cond, "message")) {
[10:32:26.665]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:26.665]                         if (muffled) 
[10:32:26.665]                           invokeRestart("muffleMessage")
[10:32:26.665]                       }
[10:32:26.665]                       else if (inherits(cond, "warning")) {
[10:32:26.665]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:26.665]                         if (muffled) 
[10:32:26.665]                           invokeRestart("muffleWarning")
[10:32:26.665]                       }
[10:32:26.665]                       else if (inherits(cond, "condition")) {
[10:32:26.665]                         if (!is.null(pattern)) {
[10:32:26.665]                           computeRestarts <- base::computeRestarts
[10:32:26.665]                           grepl <- base::grepl
[10:32:26.665]                           restarts <- computeRestarts(cond)
[10:32:26.665]                           for (restart in restarts) {
[10:32:26.665]                             name <- restart$name
[10:32:26.665]                             if (is.null(name)) 
[10:32:26.665]                               next
[10:32:26.665]                             if (!grepl(pattern, name)) 
[10:32:26.665]                               next
[10:32:26.665]                             invokeRestart(restart)
[10:32:26.665]                             muffled <- TRUE
[10:32:26.665]                             break
[10:32:26.665]                           }
[10:32:26.665]                         }
[10:32:26.665]                       }
[10:32:26.665]                       invisible(muffled)
[10:32:26.665]                     }
[10:32:26.665]                     muffleCondition(cond, pattern = "^muffle")
[10:32:26.665]                   }
[10:32:26.665]                 }
[10:32:26.665]             }
[10:32:26.665]         }))
[10:32:26.665]     }, error = function(ex) {
[10:32:26.665]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:26.665]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:26.665]                 ...future.rng), started = ...future.startTime, 
[10:32:26.665]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:26.665]             version = "1.8"), class = "FutureResult")
[10:32:26.665]     }, finally = {
[10:32:26.665]         if (!identical(...future.workdir, getwd())) 
[10:32:26.665]             setwd(...future.workdir)
[10:32:26.665]         {
[10:32:26.665]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:26.665]                 ...future.oldOptions$nwarnings <- NULL
[10:32:26.665]             }
[10:32:26.665]             base::options(...future.oldOptions)
[10:32:26.665]             if (.Platform$OS.type == "windows") {
[10:32:26.665]                 old_names <- names(...future.oldEnvVars)
[10:32:26.665]                 envs <- base::Sys.getenv()
[10:32:26.665]                 names <- names(envs)
[10:32:26.665]                 common <- intersect(names, old_names)
[10:32:26.665]                 added <- setdiff(names, old_names)
[10:32:26.665]                 removed <- setdiff(old_names, names)
[10:32:26.665]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:26.665]                   envs[common]]
[10:32:26.665]                 NAMES <- toupper(changed)
[10:32:26.665]                 args <- list()
[10:32:26.665]                 for (kk in seq_along(NAMES)) {
[10:32:26.665]                   name <- changed[[kk]]
[10:32:26.665]                   NAME <- NAMES[[kk]]
[10:32:26.665]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:26.665]                     next
[10:32:26.665]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:26.665]                 }
[10:32:26.665]                 NAMES <- toupper(added)
[10:32:26.665]                 for (kk in seq_along(NAMES)) {
[10:32:26.665]                   name <- added[[kk]]
[10:32:26.665]                   NAME <- NAMES[[kk]]
[10:32:26.665]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:26.665]                     next
[10:32:26.665]                   args[[name]] <- ""
[10:32:26.665]                 }
[10:32:26.665]                 NAMES <- toupper(removed)
[10:32:26.665]                 for (kk in seq_along(NAMES)) {
[10:32:26.665]                   name <- removed[[kk]]
[10:32:26.665]                   NAME <- NAMES[[kk]]
[10:32:26.665]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:26.665]                     next
[10:32:26.665]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:26.665]                 }
[10:32:26.665]                 if (length(args) > 0) 
[10:32:26.665]                   base::do.call(base::Sys.setenv, args = args)
[10:32:26.665]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:26.665]             }
[10:32:26.665]             else {
[10:32:26.665]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:26.665]             }
[10:32:26.665]             {
[10:32:26.665]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:26.665]                   0L) {
[10:32:26.665]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:26.665]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:26.665]                   base::options(opts)
[10:32:26.665]                 }
[10:32:26.665]                 {
[10:32:26.665]                   {
[10:32:26.665]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:26.665]                     NULL
[10:32:26.665]                   }
[10:32:26.665]                   options(future.plan = NULL)
[10:32:26.665]                   if (is.na(NA_character_)) 
[10:32:26.665]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:26.665]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:26.665]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:26.665]                     .init = FALSE)
[10:32:26.665]                 }
[10:32:26.665]             }
[10:32:26.665]         }
[10:32:26.665]     })
[10:32:26.665]     if (TRUE) {
[10:32:26.665]         base::sink(type = "output", split = FALSE)
[10:32:26.665]         if (TRUE) {
[10:32:26.665]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:26.665]         }
[10:32:26.665]         else {
[10:32:26.665]             ...future.result["stdout"] <- base::list(NULL)
[10:32:26.665]         }
[10:32:26.665]         base::close(...future.stdout)
[10:32:26.665]         ...future.stdout <- NULL
[10:32:26.665]     }
[10:32:26.665]     ...future.result$conditions <- ...future.conditions
[10:32:26.665]     ...future.result$finished <- base::Sys.time()
[10:32:26.665]     ...future.result
[10:32:26.665] }
[10:32:26.667] assign_globals() ...
[10:32:26.667] List of 3
[10:32:26.667]  $ fcn:function (x, y)  
[10:32:26.667]  $ x  : int [1:2] 1 2
[10:32:26.667]  $ y  : num 3
[10:32:26.667]  - attr(*, "where")=List of 3
[10:32:26.667]   ..$ fcn:<environment: R_EmptyEnv> 
[10:32:26.667]   ..$ x  :<environment: R_EmptyEnv> 
[10:32:26.667]   ..$ y  :<environment: R_EmptyEnv> 
[10:32:26.667]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:32:26.667]  - attr(*, "resolved")= logi FALSE
[10:32:26.667]  - attr(*, "total_size")= num 4280
[10:32:26.667]  - attr(*, "already-done")= logi TRUE
[10:32:26.671] - reassign environment for ‘fcn’
[10:32:26.672] - copied ‘fcn’ to environment
[10:32:26.672] - copied ‘x’ to environment
[10:32:26.672] - copied ‘y’ to environment
[10:32:26.672] assign_globals() ... done
[10:32:26.672] requestCore(): workers = 2
[10:32:26.674] MulticoreFuture started
[10:32:26.674] - Launch lazy future ... done
[10:32:26.674] run() for ‘MulticoreFuture’ ... done
[10:32:26.675] result() for MulticoreFuture ...
[10:32:26.675] plan(): Setting new future strategy stack:
[10:32:26.675] List of future strategies:
[10:32:26.675] 1. sequential:
[10:32:26.675]    - args: function (..., envir = parent.frame())
[10:32:26.675]    - tweaked: FALSE
[10:32:26.675]    - call: NULL
[10:32:26.676] plan(): nbrOfWorkers() = 1
[10:32:26.678] plan(): Setting new future strategy stack:
[10:32:26.678] List of future strategies:
[10:32:26.678] 1. multicore:
[10:32:26.678]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:32:26.678]    - tweaked: FALSE
[10:32:26.678]    - call: plan(strategy, substitute = FALSE)
[10:32:26.683] plan(): nbrOfWorkers() = 2
[10:32:26.684] result() for MulticoreFuture ...
[10:32:26.684] result() for MulticoreFuture ... done
[10:32:26.684] result() for MulticoreFuture ... done
[10:32:26.684] result() for MulticoreFuture ...
[10:32:26.685] result() for MulticoreFuture ... done
[1] 6
- plan('multisession') ...
[10:32:26.685] plan(): Setting new future strategy stack:
[10:32:26.685] List of future strategies:
[10:32:26.685] 1. multisession:
[10:32:26.685]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:32:26.685]    - tweaked: FALSE
[10:32:26.685]    - call: plan(strategy, substitute = FALSE)
[10:32:26.686] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:32:26.686] multisession:
[10:32:26.686] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:32:26.686] - tweaked: FALSE
[10:32:26.686] - call: plan(strategy, substitute = FALSE)
[10:32:26.693] getGlobalsAndPackages() ...
[10:32:26.693] Not searching for globals
[10:32:26.693] - globals: [0] <none>
[10:32:26.693] getGlobalsAndPackages() ... DONE
[10:32:26.694] [local output] makeClusterPSOCK() ...
[10:32:26.739] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[10:32:26.740] [local output] Base port: 11155
[10:32:26.740] [local output] Getting setup options for 2 cluster nodes ...
[10:32:26.740] [local output]  - Node 1 of 2 ...
[10:32:26.741] [local output] localMachine=TRUE => revtunnel=FALSE

[10:32:26.741] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpojvsR9/worker.rank=1.parallelly.parent=79828.137d418487a76.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpojvsR9/worker.rank=1.parallelly.parent=79828.137d418487a76.pid")'’
[10:32:26.929] - Possible to infer worker's PID: TRUE
[10:32:26.929] [local output] Rscript port: 11155

[10:32:26.929] [local output]  - Node 2 of 2 ...
[10:32:26.930] [local output] localMachine=TRUE => revtunnel=FALSE

[10:32:26.930] [local output] Rscript port: 11155

[10:32:26.930] [local output] Getting setup options for 2 cluster nodes ... done
[10:32:26.931] [local output]  - Parallel setup requested for some PSOCK nodes
[10:32:26.931] [local output] Setting up PSOCK nodes in parallel
[10:32:26.931] List of 36
[10:32:26.931]  $ worker          : chr "localhost"
[10:32:26.931]   ..- attr(*, "localhost")= logi TRUE
[10:32:26.931]  $ master          : chr "localhost"
[10:32:26.931]  $ port            : int 11155
[10:32:26.931]  $ connectTimeout  : num 120
[10:32:26.931]  $ timeout         : num 2592000
[10:32:26.931]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:32:26.931]  $ homogeneous     : logi TRUE
[10:32:26.931]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:32:26.931]  $ rscript_envs    : NULL
[10:32:26.931]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:32:26.931]  $ rscript_startup : NULL
[10:32:26.931]  $ rscript_sh      : chr "sh"
[10:32:26.931]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:32:26.931]  $ methods         : logi TRUE
[10:32:26.931]  $ socketOptions   : chr "no-delay"
[10:32:26.931]  $ useXDR          : logi FALSE
[10:32:26.931]  $ outfile         : chr "/dev/null"
[10:32:26.931]  $ renice          : int NA
[10:32:26.931]  $ rshcmd          : NULL
[10:32:26.931]  $ user            : chr(0) 
[10:32:26.931]  $ revtunnel       : logi FALSE
[10:32:26.931]  $ rshlogfile      : NULL
[10:32:26.931]  $ rshopts         : chr(0) 
[10:32:26.931]  $ rank            : int 1
[10:32:26.931]  $ manual          : logi FALSE
[10:32:26.931]  $ dryrun          : logi FALSE
[10:32:26.931]  $ quiet           : logi FALSE
[10:32:26.931]  $ setup_strategy  : chr "parallel"
[10:32:26.931]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:32:26.931]  $ pidfile         : chr "/tmp/RtmpojvsR9/worker.rank=1.parallelly.parent=79828.137d418487a76.pid"
[10:32:26.931]  $ rshcmd_label    : NULL
[10:32:26.931]  $ rsh_call        : NULL
[10:32:26.931]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:32:26.931]  $ localMachine    : logi TRUE
[10:32:26.931]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:32:26.931]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:32:26.931]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:32:26.931]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:32:26.931]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:32:26.931]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:32:26.931]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:32:26.931]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:32:26.931]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:32:26.931]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:32:26.931]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:32:26.931]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:32:26.931]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:32:26.931]  $ arguments       :List of 28
[10:32:26.931]   ..$ worker          : chr "localhost"
[10:32:26.931]   ..$ master          : NULL
[10:32:26.931]   ..$ port            : int 11155
[10:32:26.931]   ..$ connectTimeout  : num 120
[10:32:26.931]   ..$ timeout         : num 2592000
[10:32:26.931]   ..$ rscript         : NULL
[10:32:26.931]   ..$ homogeneous     : NULL
[10:32:26.931]   ..$ rscript_args    : NULL
[10:32:26.931]   ..$ rscript_envs    : NULL
[10:32:26.931]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:32:26.931]   ..$ rscript_startup : NULL
[10:32:26.931]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:32:26.931]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:32:26.931]   ..$ methods         : logi TRUE
[10:32:26.931]   ..$ socketOptions   : chr "no-delay"
[10:32:26.931]   ..$ useXDR          : logi FALSE
[10:32:26.931]   ..$ outfile         : chr "/dev/null"
[10:32:26.931]   ..$ renice          : int NA
[10:32:26.931]   ..$ rshcmd          : NULL
[10:32:26.931]   ..$ user            : NULL
[10:32:26.931]   ..$ revtunnel       : logi NA
[10:32:26.931]   ..$ rshlogfile      : NULL
[10:32:26.931]   ..$ rshopts         : NULL
[10:32:26.931]   ..$ rank            : int 1
[10:32:26.931]   ..$ manual          : logi FALSE
[10:32:26.931]   ..$ dryrun          : logi FALSE
[10:32:26.931]   ..$ quiet           : logi FALSE
[10:32:26.931]   ..$ setup_strategy  : chr "parallel"
[10:32:26.931]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:32:26.948] [local output] System call to launch all workers:
[10:32:26.948] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpojvsR9/worker.rank=1.parallelly.parent=79828.137d418487a76.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11155 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:32:26.948] [local output] Starting PSOCK main server
[10:32:26.953] [local output] Workers launched
[10:32:26.954] [local output] Waiting for workers to connect back
[10:32:26.954]  - [local output] 0 workers out of 2 ready
[10:32:27.206]  - [local output] 0 workers out of 2 ready
[10:32:27.206]  - [local output] 1 workers out of 2 ready
[10:32:27.207]  - [local output] 2 workers out of 2 ready
[10:32:27.207] [local output] Launching of workers completed
[10:32:27.207] [local output] Collecting session information from workers
[10:32:27.208] [local output]  - Worker #1 of 2
[10:32:27.208] [local output]  - Worker #2 of 2
[10:32:27.208] [local output] makeClusterPSOCK() ... done
[10:32:27.220] Packages needed by the future expression (n = 0): <none>
[10:32:27.220] Packages needed by future strategies (n = 0): <none>
[10:32:27.220] {
[10:32:27.220]     {
[10:32:27.220]         {
[10:32:27.220]             ...future.startTime <- base::Sys.time()
[10:32:27.220]             {
[10:32:27.220]                 {
[10:32:27.220]                   {
[10:32:27.220]                     {
[10:32:27.220]                       base::local({
[10:32:27.220]                         has_future <- base::requireNamespace("future", 
[10:32:27.220]                           quietly = TRUE)
[10:32:27.220]                         if (has_future) {
[10:32:27.220]                           ns <- base::getNamespace("future")
[10:32:27.220]                           version <- ns[[".package"]][["version"]]
[10:32:27.220]                           if (is.null(version)) 
[10:32:27.220]                             version <- utils::packageVersion("future")
[10:32:27.220]                         }
[10:32:27.220]                         else {
[10:32:27.220]                           version <- NULL
[10:32:27.220]                         }
[10:32:27.220]                         if (!has_future || version < "1.8.0") {
[10:32:27.220]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:27.220]                             "", base::R.version$version.string), 
[10:32:27.220]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:27.220]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:27.220]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:27.220]                               "release", "version")], collapse = " "), 
[10:32:27.220]                             hostname = base::Sys.info()[["nodename"]])
[10:32:27.220]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:27.220]                             info)
[10:32:27.220]                           info <- base::paste(info, collapse = "; ")
[10:32:27.220]                           if (!has_future) {
[10:32:27.220]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:27.220]                               info)
[10:32:27.220]                           }
[10:32:27.220]                           else {
[10:32:27.220]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:27.220]                               info, version)
[10:32:27.220]                           }
[10:32:27.220]                           base::stop(msg)
[10:32:27.220]                         }
[10:32:27.220]                       })
[10:32:27.220]                     }
[10:32:27.220]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:27.220]                     base::options(mc.cores = 1L)
[10:32:27.220]                   }
[10:32:27.220]                   ...future.strategy.old <- future::plan("list")
[10:32:27.220]                   options(future.plan = NULL)
[10:32:27.220]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:27.220]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:27.220]                 }
[10:32:27.220]                 ...future.workdir <- getwd()
[10:32:27.220]             }
[10:32:27.220]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:27.220]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:27.220]         }
[10:32:27.220]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:27.220]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:27.220]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:27.220]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:27.220]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:27.220]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:27.220]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:27.220]             base::names(...future.oldOptions))
[10:32:27.220]     }
[10:32:27.220]     if (FALSE) {
[10:32:27.220]     }
[10:32:27.220]     else {
[10:32:27.220]         if (TRUE) {
[10:32:27.220]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:27.220]                 open = "w")
[10:32:27.220]         }
[10:32:27.220]         else {
[10:32:27.220]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:27.220]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:27.220]         }
[10:32:27.220]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:27.220]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:27.220]             base::sink(type = "output", split = FALSE)
[10:32:27.220]             base::close(...future.stdout)
[10:32:27.220]         }, add = TRUE)
[10:32:27.220]     }
[10:32:27.220]     ...future.frame <- base::sys.nframe()
[10:32:27.220]     ...future.conditions <- base::list()
[10:32:27.220]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:27.220]     if (FALSE) {
[10:32:27.220]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:27.220]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:27.220]     }
[10:32:27.220]     ...future.result <- base::tryCatch({
[10:32:27.220]         base::withCallingHandlers({
[10:32:27.220]             ...future.value <- base::withVisible(base::local({
[10:32:27.220]                 ...future.makeSendCondition <- base::local({
[10:32:27.220]                   sendCondition <- NULL
[10:32:27.220]                   function(frame = 1L) {
[10:32:27.220]                     if (is.function(sendCondition)) 
[10:32:27.220]                       return(sendCondition)
[10:32:27.220]                     ns <- getNamespace("parallel")
[10:32:27.220]                     if (exists("sendData", mode = "function", 
[10:32:27.220]                       envir = ns)) {
[10:32:27.220]                       parallel_sendData <- get("sendData", mode = "function", 
[10:32:27.220]                         envir = ns)
[10:32:27.220]                       envir <- sys.frame(frame)
[10:32:27.220]                       master <- NULL
[10:32:27.220]                       while (!identical(envir, .GlobalEnv) && 
[10:32:27.220]                         !identical(envir, emptyenv())) {
[10:32:27.220]                         if (exists("master", mode = "list", envir = envir, 
[10:32:27.220]                           inherits = FALSE)) {
[10:32:27.220]                           master <- get("master", mode = "list", 
[10:32:27.220]                             envir = envir, inherits = FALSE)
[10:32:27.220]                           if (inherits(master, c("SOCKnode", 
[10:32:27.220]                             "SOCK0node"))) {
[10:32:27.220]                             sendCondition <<- function(cond) {
[10:32:27.220]                               data <- list(type = "VALUE", value = cond, 
[10:32:27.220]                                 success = TRUE)
[10:32:27.220]                               parallel_sendData(master, data)
[10:32:27.220]                             }
[10:32:27.220]                             return(sendCondition)
[10:32:27.220]                           }
[10:32:27.220]                         }
[10:32:27.220]                         frame <- frame + 1L
[10:32:27.220]                         envir <- sys.frame(frame)
[10:32:27.220]                       }
[10:32:27.220]                     }
[10:32:27.220]                     sendCondition <<- function(cond) NULL
[10:32:27.220]                   }
[10:32:27.220]                 })
[10:32:27.220]                 withCallingHandlers({
[10:32:27.220]                   NA
[10:32:27.220]                 }, immediateCondition = function(cond) {
[10:32:27.220]                   sendCondition <- ...future.makeSendCondition()
[10:32:27.220]                   sendCondition(cond)
[10:32:27.220]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:27.220]                   {
[10:32:27.220]                     inherits <- base::inherits
[10:32:27.220]                     invokeRestart <- base::invokeRestart
[10:32:27.220]                     is.null <- base::is.null
[10:32:27.220]                     muffled <- FALSE
[10:32:27.220]                     if (inherits(cond, "message")) {
[10:32:27.220]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:27.220]                       if (muffled) 
[10:32:27.220]                         invokeRestart("muffleMessage")
[10:32:27.220]                     }
[10:32:27.220]                     else if (inherits(cond, "warning")) {
[10:32:27.220]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:27.220]                       if (muffled) 
[10:32:27.220]                         invokeRestart("muffleWarning")
[10:32:27.220]                     }
[10:32:27.220]                     else if (inherits(cond, "condition")) {
[10:32:27.220]                       if (!is.null(pattern)) {
[10:32:27.220]                         computeRestarts <- base::computeRestarts
[10:32:27.220]                         grepl <- base::grepl
[10:32:27.220]                         restarts <- computeRestarts(cond)
[10:32:27.220]                         for (restart in restarts) {
[10:32:27.220]                           name <- restart$name
[10:32:27.220]                           if (is.null(name)) 
[10:32:27.220]                             next
[10:32:27.220]                           if (!grepl(pattern, name)) 
[10:32:27.220]                             next
[10:32:27.220]                           invokeRestart(restart)
[10:32:27.220]                           muffled <- TRUE
[10:32:27.220]                           break
[10:32:27.220]                         }
[10:32:27.220]                       }
[10:32:27.220]                     }
[10:32:27.220]                     invisible(muffled)
[10:32:27.220]                   }
[10:32:27.220]                   muffleCondition(cond)
[10:32:27.220]                 })
[10:32:27.220]             }))
[10:32:27.220]             future::FutureResult(value = ...future.value$value, 
[10:32:27.220]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:27.220]                   ...future.rng), globalenv = if (FALSE) 
[10:32:27.220]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:27.220]                     ...future.globalenv.names))
[10:32:27.220]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:27.220]         }, condition = base::local({
[10:32:27.220]             c <- base::c
[10:32:27.220]             inherits <- base::inherits
[10:32:27.220]             invokeRestart <- base::invokeRestart
[10:32:27.220]             length <- base::length
[10:32:27.220]             list <- base::list
[10:32:27.220]             seq.int <- base::seq.int
[10:32:27.220]             signalCondition <- base::signalCondition
[10:32:27.220]             sys.calls <- base::sys.calls
[10:32:27.220]             `[[` <- base::`[[`
[10:32:27.220]             `+` <- base::`+`
[10:32:27.220]             `<<-` <- base::`<<-`
[10:32:27.220]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:27.220]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:27.220]                   3L)]
[10:32:27.220]             }
[10:32:27.220]             function(cond) {
[10:32:27.220]                 is_error <- inherits(cond, "error")
[10:32:27.220]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:27.220]                   NULL)
[10:32:27.220]                 if (is_error) {
[10:32:27.220]                   sessionInformation <- function() {
[10:32:27.220]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:27.220]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:27.220]                       search = base::search(), system = base::Sys.info())
[10:32:27.220]                   }
[10:32:27.220]                   ...future.conditions[[length(...future.conditions) + 
[10:32:27.220]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:27.220]                     cond$call), session = sessionInformation(), 
[10:32:27.220]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:27.220]                   signalCondition(cond)
[10:32:27.220]                 }
[10:32:27.220]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:27.220]                 "immediateCondition"))) {
[10:32:27.220]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:27.220]                   ...future.conditions[[length(...future.conditions) + 
[10:32:27.220]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:27.220]                   if (TRUE && !signal) {
[10:32:27.220]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:27.220]                     {
[10:32:27.220]                       inherits <- base::inherits
[10:32:27.220]                       invokeRestart <- base::invokeRestart
[10:32:27.220]                       is.null <- base::is.null
[10:32:27.220]                       muffled <- FALSE
[10:32:27.220]                       if (inherits(cond, "message")) {
[10:32:27.220]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:27.220]                         if (muffled) 
[10:32:27.220]                           invokeRestart("muffleMessage")
[10:32:27.220]                       }
[10:32:27.220]                       else if (inherits(cond, "warning")) {
[10:32:27.220]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:27.220]                         if (muffled) 
[10:32:27.220]                           invokeRestart("muffleWarning")
[10:32:27.220]                       }
[10:32:27.220]                       else if (inherits(cond, "condition")) {
[10:32:27.220]                         if (!is.null(pattern)) {
[10:32:27.220]                           computeRestarts <- base::computeRestarts
[10:32:27.220]                           grepl <- base::grepl
[10:32:27.220]                           restarts <- computeRestarts(cond)
[10:32:27.220]                           for (restart in restarts) {
[10:32:27.220]                             name <- restart$name
[10:32:27.220]                             if (is.null(name)) 
[10:32:27.220]                               next
[10:32:27.220]                             if (!grepl(pattern, name)) 
[10:32:27.220]                               next
[10:32:27.220]                             invokeRestart(restart)
[10:32:27.220]                             muffled <- TRUE
[10:32:27.220]                             break
[10:32:27.220]                           }
[10:32:27.220]                         }
[10:32:27.220]                       }
[10:32:27.220]                       invisible(muffled)
[10:32:27.220]                     }
[10:32:27.220]                     muffleCondition(cond, pattern = "^muffle")
[10:32:27.220]                   }
[10:32:27.220]                 }
[10:32:27.220]                 else {
[10:32:27.220]                   if (TRUE) {
[10:32:27.220]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:27.220]                     {
[10:32:27.220]                       inherits <- base::inherits
[10:32:27.220]                       invokeRestart <- base::invokeRestart
[10:32:27.220]                       is.null <- base::is.null
[10:32:27.220]                       muffled <- FALSE
[10:32:27.220]                       if (inherits(cond, "message")) {
[10:32:27.220]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:27.220]                         if (muffled) 
[10:32:27.220]                           invokeRestart("muffleMessage")
[10:32:27.220]                       }
[10:32:27.220]                       else if (inherits(cond, "warning")) {
[10:32:27.220]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:27.220]                         if (muffled) 
[10:32:27.220]                           invokeRestart("muffleWarning")
[10:32:27.220]                       }
[10:32:27.220]                       else if (inherits(cond, "condition")) {
[10:32:27.220]                         if (!is.null(pattern)) {
[10:32:27.220]                           computeRestarts <- base::computeRestarts
[10:32:27.220]                           grepl <- base::grepl
[10:32:27.220]                           restarts <- computeRestarts(cond)
[10:32:27.220]                           for (restart in restarts) {
[10:32:27.220]                             name <- restart$name
[10:32:27.220]                             if (is.null(name)) 
[10:32:27.220]                               next
[10:32:27.220]                             if (!grepl(pattern, name)) 
[10:32:27.220]                               next
[10:32:27.220]                             invokeRestart(restart)
[10:32:27.220]                             muffled <- TRUE
[10:32:27.220]                             break
[10:32:27.220]                           }
[10:32:27.220]                         }
[10:32:27.220]                       }
[10:32:27.220]                       invisible(muffled)
[10:32:27.220]                     }
[10:32:27.220]                     muffleCondition(cond, pattern = "^muffle")
[10:32:27.220]                   }
[10:32:27.220]                 }
[10:32:27.220]             }
[10:32:27.220]         }))
[10:32:27.220]     }, error = function(ex) {
[10:32:27.220]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:27.220]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:27.220]                 ...future.rng), started = ...future.startTime, 
[10:32:27.220]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:27.220]             version = "1.8"), class = "FutureResult")
[10:32:27.220]     }, finally = {
[10:32:27.220]         if (!identical(...future.workdir, getwd())) 
[10:32:27.220]             setwd(...future.workdir)
[10:32:27.220]         {
[10:32:27.220]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:27.220]                 ...future.oldOptions$nwarnings <- NULL
[10:32:27.220]             }
[10:32:27.220]             base::options(...future.oldOptions)
[10:32:27.220]             if (.Platform$OS.type == "windows") {
[10:32:27.220]                 old_names <- names(...future.oldEnvVars)
[10:32:27.220]                 envs <- base::Sys.getenv()
[10:32:27.220]                 names <- names(envs)
[10:32:27.220]                 common <- intersect(names, old_names)
[10:32:27.220]                 added <- setdiff(names, old_names)
[10:32:27.220]                 removed <- setdiff(old_names, names)
[10:32:27.220]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:27.220]                   envs[common]]
[10:32:27.220]                 NAMES <- toupper(changed)
[10:32:27.220]                 args <- list()
[10:32:27.220]                 for (kk in seq_along(NAMES)) {
[10:32:27.220]                   name <- changed[[kk]]
[10:32:27.220]                   NAME <- NAMES[[kk]]
[10:32:27.220]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:27.220]                     next
[10:32:27.220]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:27.220]                 }
[10:32:27.220]                 NAMES <- toupper(added)
[10:32:27.220]                 for (kk in seq_along(NAMES)) {
[10:32:27.220]                   name <- added[[kk]]
[10:32:27.220]                   NAME <- NAMES[[kk]]
[10:32:27.220]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:27.220]                     next
[10:32:27.220]                   args[[name]] <- ""
[10:32:27.220]                 }
[10:32:27.220]                 NAMES <- toupper(removed)
[10:32:27.220]                 for (kk in seq_along(NAMES)) {
[10:32:27.220]                   name <- removed[[kk]]
[10:32:27.220]                   NAME <- NAMES[[kk]]
[10:32:27.220]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:27.220]                     next
[10:32:27.220]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:27.220]                 }
[10:32:27.220]                 if (length(args) > 0) 
[10:32:27.220]                   base::do.call(base::Sys.setenv, args = args)
[10:32:27.220]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:27.220]             }
[10:32:27.220]             else {
[10:32:27.220]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:27.220]             }
[10:32:27.220]             {
[10:32:27.220]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:27.220]                   0L) {
[10:32:27.220]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:27.220]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:27.220]                   base::options(opts)
[10:32:27.220]                 }
[10:32:27.220]                 {
[10:32:27.220]                   {
[10:32:27.220]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:27.220]                     NULL
[10:32:27.220]                   }
[10:32:27.220]                   options(future.plan = NULL)
[10:32:27.220]                   if (is.na(NA_character_)) 
[10:32:27.220]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:27.220]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:27.220]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:27.220]                     .init = FALSE)
[10:32:27.220]                 }
[10:32:27.220]             }
[10:32:27.220]         }
[10:32:27.220]     })
[10:32:27.220]     if (TRUE) {
[10:32:27.220]         base::sink(type = "output", split = FALSE)
[10:32:27.220]         if (TRUE) {
[10:32:27.220]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:27.220]         }
[10:32:27.220]         else {
[10:32:27.220]             ...future.result["stdout"] <- base::list(NULL)
[10:32:27.220]         }
[10:32:27.220]         base::close(...future.stdout)
[10:32:27.220]         ...future.stdout <- NULL
[10:32:27.220]     }
[10:32:27.220]     ...future.result$conditions <- ...future.conditions
[10:32:27.220]     ...future.result$finished <- base::Sys.time()
[10:32:27.220]     ...future.result
[10:32:27.220] }
[10:32:27.273] MultisessionFuture started
[10:32:27.273] result() for ClusterFuture ...
[10:32:27.274] receiveMessageFromWorker() for ClusterFuture ...
[10:32:27.274] - Validating connection of MultisessionFuture
[10:32:27.307] - received message: FutureResult
[10:32:27.307] - Received FutureResult
[10:32:27.307] - Erased future from FutureRegistry
[10:32:27.307] result() for ClusterFuture ...
[10:32:27.307] - result already collected: FutureResult
[10:32:27.307] result() for ClusterFuture ... done
[10:32:27.308] receiveMessageFromWorker() for ClusterFuture ... done
[10:32:27.308] result() for ClusterFuture ... done
[10:32:27.308] result() for ClusterFuture ...
[10:32:27.308] - result already collected: FutureResult
[10:32:27.308] result() for ClusterFuture ... done
[10:32:27.308] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:32:27.312] plan(): nbrOfWorkers() = 2
** Sum function 'A' with plan('multisession') ...
function (x, ...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, ...)
    }
    y
}
<bytecode: 0x5644c8250160>
Arguments '...' exists: TRUE
[10:32:27.313] getGlobalsAndPackages() ...
[10:32:27.313] Searching for globals...
[10:32:27.315] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[10:32:27.315] Searching for globals ... DONE
[10:32:27.315] Resolving globals: FALSE
[10:32:27.315] Tweak future expression to call with '...' arguments ...
[10:32:27.316] {
[10:32:27.316]     do.call(function(...) {
[10:32:27.316]         sum(x, ...)
[10:32:27.316]     }, args = future.call.arguments)
[10:32:27.316] }
[10:32:27.316] Tweak future expression to call with '...' arguments ... DONE
[10:32:27.317] The total size of the 2 globals is 112 bytes (112 bytes)
[10:32:27.317] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[10:32:27.317] - globals: [2] ‘x’, ‘future.call.arguments’
[10:32:27.317] 
[10:32:27.317] getGlobalsAndPackages() ... DONE
[10:32:27.318] run() for ‘Future’ ...
[10:32:27.318] - state: ‘created’
[10:32:27.318] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:32:27.332] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:27.332] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:32:27.333]   - Field: ‘node’
[10:32:27.333]   - Field: ‘label’
[10:32:27.333]   - Field: ‘local’
[10:32:27.333]   - Field: ‘owner’
[10:32:27.333]   - Field: ‘envir’
[10:32:27.333]   - Field: ‘workers’
[10:32:27.333]   - Field: ‘packages’
[10:32:27.333]   - Field: ‘gc’
[10:32:27.333]   - Field: ‘conditions’
[10:32:27.333]   - Field: ‘persistent’
[10:32:27.334]   - Field: ‘expr’
[10:32:27.334]   - Field: ‘uuid’
[10:32:27.334]   - Field: ‘seed’
[10:32:27.334]   - Field: ‘version’
[10:32:27.334]   - Field: ‘result’
[10:32:27.334]   - Field: ‘asynchronous’
[10:32:27.334]   - Field: ‘calls’
[10:32:27.334]   - Field: ‘globals’
[10:32:27.335]   - Field: ‘stdout’
[10:32:27.335]   - Field: ‘earlySignal’
[10:32:27.335]   - Field: ‘lazy’
[10:32:27.335]   - Field: ‘state’
[10:32:27.335] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:32:27.335] - Launch lazy future ...
[10:32:27.336] Packages needed by the future expression (n = 0): <none>
[10:32:27.336] Packages needed by future strategies (n = 0): <none>
[10:32:27.336] {
[10:32:27.336]     {
[10:32:27.336]         {
[10:32:27.336]             ...future.startTime <- base::Sys.time()
[10:32:27.336]             {
[10:32:27.336]                 {
[10:32:27.336]                   {
[10:32:27.336]                     {
[10:32:27.336]                       base::local({
[10:32:27.336]                         has_future <- base::requireNamespace("future", 
[10:32:27.336]                           quietly = TRUE)
[10:32:27.336]                         if (has_future) {
[10:32:27.336]                           ns <- base::getNamespace("future")
[10:32:27.336]                           version <- ns[[".package"]][["version"]]
[10:32:27.336]                           if (is.null(version)) 
[10:32:27.336]                             version <- utils::packageVersion("future")
[10:32:27.336]                         }
[10:32:27.336]                         else {
[10:32:27.336]                           version <- NULL
[10:32:27.336]                         }
[10:32:27.336]                         if (!has_future || version < "1.8.0") {
[10:32:27.336]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:27.336]                             "", base::R.version$version.string), 
[10:32:27.336]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:27.336]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:27.336]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:27.336]                               "release", "version")], collapse = " "), 
[10:32:27.336]                             hostname = base::Sys.info()[["nodename"]])
[10:32:27.336]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:27.336]                             info)
[10:32:27.336]                           info <- base::paste(info, collapse = "; ")
[10:32:27.336]                           if (!has_future) {
[10:32:27.336]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:27.336]                               info)
[10:32:27.336]                           }
[10:32:27.336]                           else {
[10:32:27.336]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:27.336]                               info, version)
[10:32:27.336]                           }
[10:32:27.336]                           base::stop(msg)
[10:32:27.336]                         }
[10:32:27.336]                       })
[10:32:27.336]                     }
[10:32:27.336]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:27.336]                     base::options(mc.cores = 1L)
[10:32:27.336]                   }
[10:32:27.336]                   ...future.strategy.old <- future::plan("list")
[10:32:27.336]                   options(future.plan = NULL)
[10:32:27.336]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:27.336]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:27.336]                 }
[10:32:27.336]                 ...future.workdir <- getwd()
[10:32:27.336]             }
[10:32:27.336]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:27.336]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:27.336]         }
[10:32:27.336]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:27.336]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:27.336]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:27.336]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:27.336]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:27.336]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:27.336]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:27.336]             base::names(...future.oldOptions))
[10:32:27.336]     }
[10:32:27.336]     if (FALSE) {
[10:32:27.336]     }
[10:32:27.336]     else {
[10:32:27.336]         if (TRUE) {
[10:32:27.336]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:27.336]                 open = "w")
[10:32:27.336]         }
[10:32:27.336]         else {
[10:32:27.336]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:27.336]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:27.336]         }
[10:32:27.336]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:27.336]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:27.336]             base::sink(type = "output", split = FALSE)
[10:32:27.336]             base::close(...future.stdout)
[10:32:27.336]         }, add = TRUE)
[10:32:27.336]     }
[10:32:27.336]     ...future.frame <- base::sys.nframe()
[10:32:27.336]     ...future.conditions <- base::list()
[10:32:27.336]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:27.336]     if (FALSE) {
[10:32:27.336]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:27.336]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:27.336]     }
[10:32:27.336]     ...future.result <- base::tryCatch({
[10:32:27.336]         base::withCallingHandlers({
[10:32:27.336]             ...future.value <- base::withVisible(base::local({
[10:32:27.336]                 ...future.makeSendCondition <- base::local({
[10:32:27.336]                   sendCondition <- NULL
[10:32:27.336]                   function(frame = 1L) {
[10:32:27.336]                     if (is.function(sendCondition)) 
[10:32:27.336]                       return(sendCondition)
[10:32:27.336]                     ns <- getNamespace("parallel")
[10:32:27.336]                     if (exists("sendData", mode = "function", 
[10:32:27.336]                       envir = ns)) {
[10:32:27.336]                       parallel_sendData <- get("sendData", mode = "function", 
[10:32:27.336]                         envir = ns)
[10:32:27.336]                       envir <- sys.frame(frame)
[10:32:27.336]                       master <- NULL
[10:32:27.336]                       while (!identical(envir, .GlobalEnv) && 
[10:32:27.336]                         !identical(envir, emptyenv())) {
[10:32:27.336]                         if (exists("master", mode = "list", envir = envir, 
[10:32:27.336]                           inherits = FALSE)) {
[10:32:27.336]                           master <- get("master", mode = "list", 
[10:32:27.336]                             envir = envir, inherits = FALSE)
[10:32:27.336]                           if (inherits(master, c("SOCKnode", 
[10:32:27.336]                             "SOCK0node"))) {
[10:32:27.336]                             sendCondition <<- function(cond) {
[10:32:27.336]                               data <- list(type = "VALUE", value = cond, 
[10:32:27.336]                                 success = TRUE)
[10:32:27.336]                               parallel_sendData(master, data)
[10:32:27.336]                             }
[10:32:27.336]                             return(sendCondition)
[10:32:27.336]                           }
[10:32:27.336]                         }
[10:32:27.336]                         frame <- frame + 1L
[10:32:27.336]                         envir <- sys.frame(frame)
[10:32:27.336]                       }
[10:32:27.336]                     }
[10:32:27.336]                     sendCondition <<- function(cond) NULL
[10:32:27.336]                   }
[10:32:27.336]                 })
[10:32:27.336]                 withCallingHandlers({
[10:32:27.336]                   {
[10:32:27.336]                     do.call(function(...) {
[10:32:27.336]                       sum(x, ...)
[10:32:27.336]                     }, args = future.call.arguments)
[10:32:27.336]                   }
[10:32:27.336]                 }, immediateCondition = function(cond) {
[10:32:27.336]                   sendCondition <- ...future.makeSendCondition()
[10:32:27.336]                   sendCondition(cond)
[10:32:27.336]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:27.336]                   {
[10:32:27.336]                     inherits <- base::inherits
[10:32:27.336]                     invokeRestart <- base::invokeRestart
[10:32:27.336]                     is.null <- base::is.null
[10:32:27.336]                     muffled <- FALSE
[10:32:27.336]                     if (inherits(cond, "message")) {
[10:32:27.336]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:27.336]                       if (muffled) 
[10:32:27.336]                         invokeRestart("muffleMessage")
[10:32:27.336]                     }
[10:32:27.336]                     else if (inherits(cond, "warning")) {
[10:32:27.336]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:27.336]                       if (muffled) 
[10:32:27.336]                         invokeRestart("muffleWarning")
[10:32:27.336]                     }
[10:32:27.336]                     else if (inherits(cond, "condition")) {
[10:32:27.336]                       if (!is.null(pattern)) {
[10:32:27.336]                         computeRestarts <- base::computeRestarts
[10:32:27.336]                         grepl <- base::grepl
[10:32:27.336]                         restarts <- computeRestarts(cond)
[10:32:27.336]                         for (restart in restarts) {
[10:32:27.336]                           name <- restart$name
[10:32:27.336]                           if (is.null(name)) 
[10:32:27.336]                             next
[10:32:27.336]                           if (!grepl(pattern, name)) 
[10:32:27.336]                             next
[10:32:27.336]                           invokeRestart(restart)
[10:32:27.336]                           muffled <- TRUE
[10:32:27.336]                           break
[10:32:27.336]                         }
[10:32:27.336]                       }
[10:32:27.336]                     }
[10:32:27.336]                     invisible(muffled)
[10:32:27.336]                   }
[10:32:27.336]                   muffleCondition(cond)
[10:32:27.336]                 })
[10:32:27.336]             }))
[10:32:27.336]             future::FutureResult(value = ...future.value$value, 
[10:32:27.336]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:27.336]                   ...future.rng), globalenv = if (FALSE) 
[10:32:27.336]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:27.336]                     ...future.globalenv.names))
[10:32:27.336]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:27.336]         }, condition = base::local({
[10:32:27.336]             c <- base::c
[10:32:27.336]             inherits <- base::inherits
[10:32:27.336]             invokeRestart <- base::invokeRestart
[10:32:27.336]             length <- base::length
[10:32:27.336]             list <- base::list
[10:32:27.336]             seq.int <- base::seq.int
[10:32:27.336]             signalCondition <- base::signalCondition
[10:32:27.336]             sys.calls <- base::sys.calls
[10:32:27.336]             `[[` <- base::`[[`
[10:32:27.336]             `+` <- base::`+`
[10:32:27.336]             `<<-` <- base::`<<-`
[10:32:27.336]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:27.336]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:27.336]                   3L)]
[10:32:27.336]             }
[10:32:27.336]             function(cond) {
[10:32:27.336]                 is_error <- inherits(cond, "error")
[10:32:27.336]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:27.336]                   NULL)
[10:32:27.336]                 if (is_error) {
[10:32:27.336]                   sessionInformation <- function() {
[10:32:27.336]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:27.336]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:27.336]                       search = base::search(), system = base::Sys.info())
[10:32:27.336]                   }
[10:32:27.336]                   ...future.conditions[[length(...future.conditions) + 
[10:32:27.336]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:27.336]                     cond$call), session = sessionInformation(), 
[10:32:27.336]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:27.336]                   signalCondition(cond)
[10:32:27.336]                 }
[10:32:27.336]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:27.336]                 "immediateCondition"))) {
[10:32:27.336]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:27.336]                   ...future.conditions[[length(...future.conditions) + 
[10:32:27.336]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:27.336]                   if (TRUE && !signal) {
[10:32:27.336]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:27.336]                     {
[10:32:27.336]                       inherits <- base::inherits
[10:32:27.336]                       invokeRestart <- base::invokeRestart
[10:32:27.336]                       is.null <- base::is.null
[10:32:27.336]                       muffled <- FALSE
[10:32:27.336]                       if (inherits(cond, "message")) {
[10:32:27.336]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:27.336]                         if (muffled) 
[10:32:27.336]                           invokeRestart("muffleMessage")
[10:32:27.336]                       }
[10:32:27.336]                       else if (inherits(cond, "warning")) {
[10:32:27.336]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:27.336]                         if (muffled) 
[10:32:27.336]                           invokeRestart("muffleWarning")
[10:32:27.336]                       }
[10:32:27.336]                       else if (inherits(cond, "condition")) {
[10:32:27.336]                         if (!is.null(pattern)) {
[10:32:27.336]                           computeRestarts <- base::computeRestarts
[10:32:27.336]                           grepl <- base::grepl
[10:32:27.336]                           restarts <- computeRestarts(cond)
[10:32:27.336]                           for (restart in restarts) {
[10:32:27.336]                             name <- restart$name
[10:32:27.336]                             if (is.null(name)) 
[10:32:27.336]                               next
[10:32:27.336]                             if (!grepl(pattern, name)) 
[10:32:27.336]                               next
[10:32:27.336]                             invokeRestart(restart)
[10:32:27.336]                             muffled <- TRUE
[10:32:27.336]                             break
[10:32:27.336]                           }
[10:32:27.336]                         }
[10:32:27.336]                       }
[10:32:27.336]                       invisible(muffled)
[10:32:27.336]                     }
[10:32:27.336]                     muffleCondition(cond, pattern = "^muffle")
[10:32:27.336]                   }
[10:32:27.336]                 }
[10:32:27.336]                 else {
[10:32:27.336]                   if (TRUE) {
[10:32:27.336]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:27.336]                     {
[10:32:27.336]                       inherits <- base::inherits
[10:32:27.336]                       invokeRestart <- base::invokeRestart
[10:32:27.336]                       is.null <- base::is.null
[10:32:27.336]                       muffled <- FALSE
[10:32:27.336]                       if (inherits(cond, "message")) {
[10:32:27.336]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:27.336]                         if (muffled) 
[10:32:27.336]                           invokeRestart("muffleMessage")
[10:32:27.336]                       }
[10:32:27.336]                       else if (inherits(cond, "warning")) {
[10:32:27.336]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:27.336]                         if (muffled) 
[10:32:27.336]                           invokeRestart("muffleWarning")
[10:32:27.336]                       }
[10:32:27.336]                       else if (inherits(cond, "condition")) {
[10:32:27.336]                         if (!is.null(pattern)) {
[10:32:27.336]                           computeRestarts <- base::computeRestarts
[10:32:27.336]                           grepl <- base::grepl
[10:32:27.336]                           restarts <- computeRestarts(cond)
[10:32:27.336]                           for (restart in restarts) {
[10:32:27.336]                             name <- restart$name
[10:32:27.336]                             if (is.null(name)) 
[10:32:27.336]                               next
[10:32:27.336]                             if (!grepl(pattern, name)) 
[10:32:27.336]                               next
[10:32:27.336]                             invokeRestart(restart)
[10:32:27.336]                             muffled <- TRUE
[10:32:27.336]                             break
[10:32:27.336]                           }
[10:32:27.336]                         }
[10:32:27.336]                       }
[10:32:27.336]                       invisible(muffled)
[10:32:27.336]                     }
[10:32:27.336]                     muffleCondition(cond, pattern = "^muffle")
[10:32:27.336]                   }
[10:32:27.336]                 }
[10:32:27.336]             }
[10:32:27.336]         }))
[10:32:27.336]     }, error = function(ex) {
[10:32:27.336]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:27.336]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:27.336]                 ...future.rng), started = ...future.startTime, 
[10:32:27.336]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:27.336]             version = "1.8"), class = "FutureResult")
[10:32:27.336]     }, finally = {
[10:32:27.336]         if (!identical(...future.workdir, getwd())) 
[10:32:27.336]             setwd(...future.workdir)
[10:32:27.336]         {
[10:32:27.336]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:27.336]                 ...future.oldOptions$nwarnings <- NULL
[10:32:27.336]             }
[10:32:27.336]             base::options(...future.oldOptions)
[10:32:27.336]             if (.Platform$OS.type == "windows") {
[10:32:27.336]                 old_names <- names(...future.oldEnvVars)
[10:32:27.336]                 envs <- base::Sys.getenv()
[10:32:27.336]                 names <- names(envs)
[10:32:27.336]                 common <- intersect(names, old_names)
[10:32:27.336]                 added <- setdiff(names, old_names)
[10:32:27.336]                 removed <- setdiff(old_names, names)
[10:32:27.336]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:27.336]                   envs[common]]
[10:32:27.336]                 NAMES <- toupper(changed)
[10:32:27.336]                 args <- list()
[10:32:27.336]                 for (kk in seq_along(NAMES)) {
[10:32:27.336]                   name <- changed[[kk]]
[10:32:27.336]                   NAME <- NAMES[[kk]]
[10:32:27.336]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:27.336]                     next
[10:32:27.336]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:27.336]                 }
[10:32:27.336]                 NAMES <- toupper(added)
[10:32:27.336]                 for (kk in seq_along(NAMES)) {
[10:32:27.336]                   name <- added[[kk]]
[10:32:27.336]                   NAME <- NAMES[[kk]]
[10:32:27.336]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:27.336]                     next
[10:32:27.336]                   args[[name]] <- ""
[10:32:27.336]                 }
[10:32:27.336]                 NAMES <- toupper(removed)
[10:32:27.336]                 for (kk in seq_along(NAMES)) {
[10:32:27.336]                   name <- removed[[kk]]
[10:32:27.336]                   NAME <- NAMES[[kk]]
[10:32:27.336]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:27.336]                     next
[10:32:27.336]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:27.336]                 }
[10:32:27.336]                 if (length(args) > 0) 
[10:32:27.336]                   base::do.call(base::Sys.setenv, args = args)
[10:32:27.336]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:27.336]             }
[10:32:27.336]             else {
[10:32:27.336]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:27.336]             }
[10:32:27.336]             {
[10:32:27.336]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:27.336]                   0L) {
[10:32:27.336]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:27.336]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:27.336]                   base::options(opts)
[10:32:27.336]                 }
[10:32:27.336]                 {
[10:32:27.336]                   {
[10:32:27.336]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:27.336]                     NULL
[10:32:27.336]                   }
[10:32:27.336]                   options(future.plan = NULL)
[10:32:27.336]                   if (is.na(NA_character_)) 
[10:32:27.336]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:27.336]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:27.336]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:27.336]                     .init = FALSE)
[10:32:27.336]                 }
[10:32:27.336]             }
[10:32:27.336]         }
[10:32:27.336]     })
[10:32:27.336]     if (TRUE) {
[10:32:27.336]         base::sink(type = "output", split = FALSE)
[10:32:27.336]         if (TRUE) {
[10:32:27.336]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:27.336]         }
[10:32:27.336]         else {
[10:32:27.336]             ...future.result["stdout"] <- base::list(NULL)
[10:32:27.336]         }
[10:32:27.336]         base::close(...future.stdout)
[10:32:27.336]         ...future.stdout <- NULL
[10:32:27.336]     }
[10:32:27.336]     ...future.result$conditions <- ...future.conditions
[10:32:27.336]     ...future.result$finished <- base::Sys.time()
[10:32:27.336]     ...future.result
[10:32:27.336] }
[10:32:27.339] Exporting 2 global objects (112 bytes) to cluster node #1 ...
[10:32:27.339] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[10:32:27.340] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[10:32:27.340] Exporting ‘future.call.arguments’ (56 bytes) to cluster node #1 ...
[10:32:27.340] Exporting ‘future.call.arguments’ (56 bytes) to cluster node #1 ... DONE
[10:32:27.341] Exporting 2 global objects (112 bytes) to cluster node #1 ... DONE
[10:32:27.341] MultisessionFuture started
[10:32:27.341] - Launch lazy future ... done
[10:32:27.342] run() for ‘MultisessionFuture’ ... done
[10:32:27.342] result() for ClusterFuture ...
[10:32:27.342] receiveMessageFromWorker() for ClusterFuture ...
[10:32:27.342] - Validating connection of MultisessionFuture
[10:32:27.346] - received message: FutureResult
[10:32:27.346] - Received FutureResult
[10:32:27.346] - Erased future from FutureRegistry
[10:32:27.347] result() for ClusterFuture ...
[10:32:27.347] - result already collected: FutureResult
[10:32:27.347] result() for ClusterFuture ... done
[10:32:27.347] receiveMessageFromWorker() for ClusterFuture ... done
[10:32:27.347] result() for ClusterFuture ... done
[10:32:27.347] result() for ClusterFuture ...
[10:32:27.347] - result already collected: FutureResult
[10:32:27.347] result() for ClusterFuture ... done
[1] 6
** Sum function 'B' with plan('multisession') ...
function (x, ...) 
{
    sumt <- function(x) {
        message("Arguments '...' exists: ", exists("...", inherits = TRUE))
        y %<-% {
            sum(x, ...)
        }
        y
    }
    sumt(x)
}
<bytecode: 0x5644c8507af0>
Arguments '...' exists: TRUE
[10:32:27.348] getGlobalsAndPackages() ...
[10:32:27.348] Searching for globals...
[10:32:27.350] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[10:32:27.350] Searching for globals ... DONE
[10:32:27.350] Resolving globals: FALSE
[10:32:27.350] Tweak future expression to call with '...' arguments ...
[10:32:27.350] {
[10:32:27.350]     do.call(function(...) {
[10:32:27.350]         sum(x, ...)
[10:32:27.350]     }, args = future.call.arguments)
[10:32:27.350] }
[10:32:27.351] Tweak future expression to call with '...' arguments ... DONE
[10:32:27.351] The total size of the 2 globals is 112 bytes (112 bytes)
[10:32:27.352] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[10:32:27.352] - globals: [2] ‘x’, ‘future.call.arguments’
[10:32:27.352] 
[10:32:27.352] getGlobalsAndPackages() ... DONE
[10:32:27.352] run() for ‘Future’ ...
[10:32:27.352] - state: ‘created’
[10:32:27.353] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:32:27.367] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:27.367] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:32:27.367]   - Field: ‘node’
[10:32:27.368]   - Field: ‘label’
[10:32:27.368]   - Field: ‘local’
[10:32:27.368]   - Field: ‘owner’
[10:32:27.368]   - Field: ‘envir’
[10:32:27.368]   - Field: ‘workers’
[10:32:27.368]   - Field: ‘packages’
[10:32:27.368]   - Field: ‘gc’
[10:32:27.368]   - Field: ‘conditions’
[10:32:27.368]   - Field: ‘persistent’
[10:32:27.369]   - Field: ‘expr’
[10:32:27.369]   - Field: ‘uuid’
[10:32:27.369]   - Field: ‘seed’
[10:32:27.369]   - Field: ‘version’
[10:32:27.369]   - Field: ‘result’
[10:32:27.369]   - Field: ‘asynchronous’
[10:32:27.369]   - Field: ‘calls’
[10:32:27.369]   - Field: ‘globals’
[10:32:27.369]   - Field: ‘stdout’
[10:32:27.370]   - Field: ‘earlySignal’
[10:32:27.370]   - Field: ‘lazy’
[10:32:27.370]   - Field: ‘state’
[10:32:27.370] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:32:27.370] - Launch lazy future ...
[10:32:27.370] Packages needed by the future expression (n = 0): <none>
[10:32:27.371] Packages needed by future strategies (n = 0): <none>
[10:32:27.371] {
[10:32:27.371]     {
[10:32:27.371]         {
[10:32:27.371]             ...future.startTime <- base::Sys.time()
[10:32:27.371]             {
[10:32:27.371]                 {
[10:32:27.371]                   {
[10:32:27.371]                     {
[10:32:27.371]                       base::local({
[10:32:27.371]                         has_future <- base::requireNamespace("future", 
[10:32:27.371]                           quietly = TRUE)
[10:32:27.371]                         if (has_future) {
[10:32:27.371]                           ns <- base::getNamespace("future")
[10:32:27.371]                           version <- ns[[".package"]][["version"]]
[10:32:27.371]                           if (is.null(version)) 
[10:32:27.371]                             version <- utils::packageVersion("future")
[10:32:27.371]                         }
[10:32:27.371]                         else {
[10:32:27.371]                           version <- NULL
[10:32:27.371]                         }
[10:32:27.371]                         if (!has_future || version < "1.8.0") {
[10:32:27.371]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:27.371]                             "", base::R.version$version.string), 
[10:32:27.371]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:27.371]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:27.371]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:27.371]                               "release", "version")], collapse = " "), 
[10:32:27.371]                             hostname = base::Sys.info()[["nodename"]])
[10:32:27.371]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:27.371]                             info)
[10:32:27.371]                           info <- base::paste(info, collapse = "; ")
[10:32:27.371]                           if (!has_future) {
[10:32:27.371]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:27.371]                               info)
[10:32:27.371]                           }
[10:32:27.371]                           else {
[10:32:27.371]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:27.371]                               info, version)
[10:32:27.371]                           }
[10:32:27.371]                           base::stop(msg)
[10:32:27.371]                         }
[10:32:27.371]                       })
[10:32:27.371]                     }
[10:32:27.371]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:27.371]                     base::options(mc.cores = 1L)
[10:32:27.371]                   }
[10:32:27.371]                   ...future.strategy.old <- future::plan("list")
[10:32:27.371]                   options(future.plan = NULL)
[10:32:27.371]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:27.371]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:27.371]                 }
[10:32:27.371]                 ...future.workdir <- getwd()
[10:32:27.371]             }
[10:32:27.371]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:27.371]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:27.371]         }
[10:32:27.371]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:27.371]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:27.371]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:27.371]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:27.371]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:27.371]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:27.371]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:27.371]             base::names(...future.oldOptions))
[10:32:27.371]     }
[10:32:27.371]     if (FALSE) {
[10:32:27.371]     }
[10:32:27.371]     else {
[10:32:27.371]         if (TRUE) {
[10:32:27.371]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:27.371]                 open = "w")
[10:32:27.371]         }
[10:32:27.371]         else {
[10:32:27.371]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:27.371]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:27.371]         }
[10:32:27.371]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:27.371]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:27.371]             base::sink(type = "output", split = FALSE)
[10:32:27.371]             base::close(...future.stdout)
[10:32:27.371]         }, add = TRUE)
[10:32:27.371]     }
[10:32:27.371]     ...future.frame <- base::sys.nframe()
[10:32:27.371]     ...future.conditions <- base::list()
[10:32:27.371]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:27.371]     if (FALSE) {
[10:32:27.371]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:27.371]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:27.371]     }
[10:32:27.371]     ...future.result <- base::tryCatch({
[10:32:27.371]         base::withCallingHandlers({
[10:32:27.371]             ...future.value <- base::withVisible(base::local({
[10:32:27.371]                 ...future.makeSendCondition <- base::local({
[10:32:27.371]                   sendCondition <- NULL
[10:32:27.371]                   function(frame = 1L) {
[10:32:27.371]                     if (is.function(sendCondition)) 
[10:32:27.371]                       return(sendCondition)
[10:32:27.371]                     ns <- getNamespace("parallel")
[10:32:27.371]                     if (exists("sendData", mode = "function", 
[10:32:27.371]                       envir = ns)) {
[10:32:27.371]                       parallel_sendData <- get("sendData", mode = "function", 
[10:32:27.371]                         envir = ns)
[10:32:27.371]                       envir <- sys.frame(frame)
[10:32:27.371]                       master <- NULL
[10:32:27.371]                       while (!identical(envir, .GlobalEnv) && 
[10:32:27.371]                         !identical(envir, emptyenv())) {
[10:32:27.371]                         if (exists("master", mode = "list", envir = envir, 
[10:32:27.371]                           inherits = FALSE)) {
[10:32:27.371]                           master <- get("master", mode = "list", 
[10:32:27.371]                             envir = envir, inherits = FALSE)
[10:32:27.371]                           if (inherits(master, c("SOCKnode", 
[10:32:27.371]                             "SOCK0node"))) {
[10:32:27.371]                             sendCondition <<- function(cond) {
[10:32:27.371]                               data <- list(type = "VALUE", value = cond, 
[10:32:27.371]                                 success = TRUE)
[10:32:27.371]                               parallel_sendData(master, data)
[10:32:27.371]                             }
[10:32:27.371]                             return(sendCondition)
[10:32:27.371]                           }
[10:32:27.371]                         }
[10:32:27.371]                         frame <- frame + 1L
[10:32:27.371]                         envir <- sys.frame(frame)
[10:32:27.371]                       }
[10:32:27.371]                     }
[10:32:27.371]                     sendCondition <<- function(cond) NULL
[10:32:27.371]                   }
[10:32:27.371]                 })
[10:32:27.371]                 withCallingHandlers({
[10:32:27.371]                   {
[10:32:27.371]                     do.call(function(...) {
[10:32:27.371]                       sum(x, ...)
[10:32:27.371]                     }, args = future.call.arguments)
[10:32:27.371]                   }
[10:32:27.371]                 }, immediateCondition = function(cond) {
[10:32:27.371]                   sendCondition <- ...future.makeSendCondition()
[10:32:27.371]                   sendCondition(cond)
[10:32:27.371]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:27.371]                   {
[10:32:27.371]                     inherits <- base::inherits
[10:32:27.371]                     invokeRestart <- base::invokeRestart
[10:32:27.371]                     is.null <- base::is.null
[10:32:27.371]                     muffled <- FALSE
[10:32:27.371]                     if (inherits(cond, "message")) {
[10:32:27.371]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:27.371]                       if (muffled) 
[10:32:27.371]                         invokeRestart("muffleMessage")
[10:32:27.371]                     }
[10:32:27.371]                     else if (inherits(cond, "warning")) {
[10:32:27.371]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:27.371]                       if (muffled) 
[10:32:27.371]                         invokeRestart("muffleWarning")
[10:32:27.371]                     }
[10:32:27.371]                     else if (inherits(cond, "condition")) {
[10:32:27.371]                       if (!is.null(pattern)) {
[10:32:27.371]                         computeRestarts <- base::computeRestarts
[10:32:27.371]                         grepl <- base::grepl
[10:32:27.371]                         restarts <- computeRestarts(cond)
[10:32:27.371]                         for (restart in restarts) {
[10:32:27.371]                           name <- restart$name
[10:32:27.371]                           if (is.null(name)) 
[10:32:27.371]                             next
[10:32:27.371]                           if (!grepl(pattern, name)) 
[10:32:27.371]                             next
[10:32:27.371]                           invokeRestart(restart)
[10:32:27.371]                           muffled <- TRUE
[10:32:27.371]                           break
[10:32:27.371]                         }
[10:32:27.371]                       }
[10:32:27.371]                     }
[10:32:27.371]                     invisible(muffled)
[10:32:27.371]                   }
[10:32:27.371]                   muffleCondition(cond)
[10:32:27.371]                 })
[10:32:27.371]             }))
[10:32:27.371]             future::FutureResult(value = ...future.value$value, 
[10:32:27.371]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:27.371]                   ...future.rng), globalenv = if (FALSE) 
[10:32:27.371]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:27.371]                     ...future.globalenv.names))
[10:32:27.371]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:27.371]         }, condition = base::local({
[10:32:27.371]             c <- base::c
[10:32:27.371]             inherits <- base::inherits
[10:32:27.371]             invokeRestart <- base::invokeRestart
[10:32:27.371]             length <- base::length
[10:32:27.371]             list <- base::list
[10:32:27.371]             seq.int <- base::seq.int
[10:32:27.371]             signalCondition <- base::signalCondition
[10:32:27.371]             sys.calls <- base::sys.calls
[10:32:27.371]             `[[` <- base::`[[`
[10:32:27.371]             `+` <- base::`+`
[10:32:27.371]             `<<-` <- base::`<<-`
[10:32:27.371]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:27.371]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:27.371]                   3L)]
[10:32:27.371]             }
[10:32:27.371]             function(cond) {
[10:32:27.371]                 is_error <- inherits(cond, "error")
[10:32:27.371]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:27.371]                   NULL)
[10:32:27.371]                 if (is_error) {
[10:32:27.371]                   sessionInformation <- function() {
[10:32:27.371]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:27.371]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:27.371]                       search = base::search(), system = base::Sys.info())
[10:32:27.371]                   }
[10:32:27.371]                   ...future.conditions[[length(...future.conditions) + 
[10:32:27.371]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:27.371]                     cond$call), session = sessionInformation(), 
[10:32:27.371]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:27.371]                   signalCondition(cond)
[10:32:27.371]                 }
[10:32:27.371]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:27.371]                 "immediateCondition"))) {
[10:32:27.371]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:27.371]                   ...future.conditions[[length(...future.conditions) + 
[10:32:27.371]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:27.371]                   if (TRUE && !signal) {
[10:32:27.371]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:27.371]                     {
[10:32:27.371]                       inherits <- base::inherits
[10:32:27.371]                       invokeRestart <- base::invokeRestart
[10:32:27.371]                       is.null <- base::is.null
[10:32:27.371]                       muffled <- FALSE
[10:32:27.371]                       if (inherits(cond, "message")) {
[10:32:27.371]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:27.371]                         if (muffled) 
[10:32:27.371]                           invokeRestart("muffleMessage")
[10:32:27.371]                       }
[10:32:27.371]                       else if (inherits(cond, "warning")) {
[10:32:27.371]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:27.371]                         if (muffled) 
[10:32:27.371]                           invokeRestart("muffleWarning")
[10:32:27.371]                       }
[10:32:27.371]                       else if (inherits(cond, "condition")) {
[10:32:27.371]                         if (!is.null(pattern)) {
[10:32:27.371]                           computeRestarts <- base::computeRestarts
[10:32:27.371]                           grepl <- base::grepl
[10:32:27.371]                           restarts <- computeRestarts(cond)
[10:32:27.371]                           for (restart in restarts) {
[10:32:27.371]                             name <- restart$name
[10:32:27.371]                             if (is.null(name)) 
[10:32:27.371]                               next
[10:32:27.371]                             if (!grepl(pattern, name)) 
[10:32:27.371]                               next
[10:32:27.371]                             invokeRestart(restart)
[10:32:27.371]                             muffled <- TRUE
[10:32:27.371]                             break
[10:32:27.371]                           }
[10:32:27.371]                         }
[10:32:27.371]                       }
[10:32:27.371]                       invisible(muffled)
[10:32:27.371]                     }
[10:32:27.371]                     muffleCondition(cond, pattern = "^muffle")
[10:32:27.371]                   }
[10:32:27.371]                 }
[10:32:27.371]                 else {
[10:32:27.371]                   if (TRUE) {
[10:32:27.371]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:27.371]                     {
[10:32:27.371]                       inherits <- base::inherits
[10:32:27.371]                       invokeRestart <- base::invokeRestart
[10:32:27.371]                       is.null <- base::is.null
[10:32:27.371]                       muffled <- FALSE
[10:32:27.371]                       if (inherits(cond, "message")) {
[10:32:27.371]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:27.371]                         if (muffled) 
[10:32:27.371]                           invokeRestart("muffleMessage")
[10:32:27.371]                       }
[10:32:27.371]                       else if (inherits(cond, "warning")) {
[10:32:27.371]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:27.371]                         if (muffled) 
[10:32:27.371]                           invokeRestart("muffleWarning")
[10:32:27.371]                       }
[10:32:27.371]                       else if (inherits(cond, "condition")) {
[10:32:27.371]                         if (!is.null(pattern)) {
[10:32:27.371]                           computeRestarts <- base::computeRestarts
[10:32:27.371]                           grepl <- base::grepl
[10:32:27.371]                           restarts <- computeRestarts(cond)
[10:32:27.371]                           for (restart in restarts) {
[10:32:27.371]                             name <- restart$name
[10:32:27.371]                             if (is.null(name)) 
[10:32:27.371]                               next
[10:32:27.371]                             if (!grepl(pattern, name)) 
[10:32:27.371]                               next
[10:32:27.371]                             invokeRestart(restart)
[10:32:27.371]                             muffled <- TRUE
[10:32:27.371]                             break
[10:32:27.371]                           }
[10:32:27.371]                         }
[10:32:27.371]                       }
[10:32:27.371]                       invisible(muffled)
[10:32:27.371]                     }
[10:32:27.371]                     muffleCondition(cond, pattern = "^muffle")
[10:32:27.371]                   }
[10:32:27.371]                 }
[10:32:27.371]             }
[10:32:27.371]         }))
[10:32:27.371]     }, error = function(ex) {
[10:32:27.371]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:27.371]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:27.371]                 ...future.rng), started = ...future.startTime, 
[10:32:27.371]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:27.371]             version = "1.8"), class = "FutureResult")
[10:32:27.371]     }, finally = {
[10:32:27.371]         if (!identical(...future.workdir, getwd())) 
[10:32:27.371]             setwd(...future.workdir)
[10:32:27.371]         {
[10:32:27.371]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:27.371]                 ...future.oldOptions$nwarnings <- NULL
[10:32:27.371]             }
[10:32:27.371]             base::options(...future.oldOptions)
[10:32:27.371]             if (.Platform$OS.type == "windows") {
[10:32:27.371]                 old_names <- names(...future.oldEnvVars)
[10:32:27.371]                 envs <- base::Sys.getenv()
[10:32:27.371]                 names <- names(envs)
[10:32:27.371]                 common <- intersect(names, old_names)
[10:32:27.371]                 added <- setdiff(names, old_names)
[10:32:27.371]                 removed <- setdiff(old_names, names)
[10:32:27.371]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:27.371]                   envs[common]]
[10:32:27.371]                 NAMES <- toupper(changed)
[10:32:27.371]                 args <- list()
[10:32:27.371]                 for (kk in seq_along(NAMES)) {
[10:32:27.371]                   name <- changed[[kk]]
[10:32:27.371]                   NAME <- NAMES[[kk]]
[10:32:27.371]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:27.371]                     next
[10:32:27.371]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:27.371]                 }
[10:32:27.371]                 NAMES <- toupper(added)
[10:32:27.371]                 for (kk in seq_along(NAMES)) {
[10:32:27.371]                   name <- added[[kk]]
[10:32:27.371]                   NAME <- NAMES[[kk]]
[10:32:27.371]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:27.371]                     next
[10:32:27.371]                   args[[name]] <- ""
[10:32:27.371]                 }
[10:32:27.371]                 NAMES <- toupper(removed)
[10:32:27.371]                 for (kk in seq_along(NAMES)) {
[10:32:27.371]                   name <- removed[[kk]]
[10:32:27.371]                   NAME <- NAMES[[kk]]
[10:32:27.371]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:27.371]                     next
[10:32:27.371]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:27.371]                 }
[10:32:27.371]                 if (length(args) > 0) 
[10:32:27.371]                   base::do.call(base::Sys.setenv, args = args)
[10:32:27.371]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:27.371]             }
[10:32:27.371]             else {
[10:32:27.371]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:27.371]             }
[10:32:27.371]             {
[10:32:27.371]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:27.371]                   0L) {
[10:32:27.371]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:27.371]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:27.371]                   base::options(opts)
[10:32:27.371]                 }
[10:32:27.371]                 {
[10:32:27.371]                   {
[10:32:27.371]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:27.371]                     NULL
[10:32:27.371]                   }
[10:32:27.371]                   options(future.plan = NULL)
[10:32:27.371]                   if (is.na(NA_character_)) 
[10:32:27.371]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:27.371]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:27.371]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:27.371]                     .init = FALSE)
[10:32:27.371]                 }
[10:32:27.371]             }
[10:32:27.371]         }
[10:32:27.371]     })
[10:32:27.371]     if (TRUE) {
[10:32:27.371]         base::sink(type = "output", split = FALSE)
[10:32:27.371]         if (TRUE) {
[10:32:27.371]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:27.371]         }
[10:32:27.371]         else {
[10:32:27.371]             ...future.result["stdout"] <- base::list(NULL)
[10:32:27.371]         }
[10:32:27.371]         base::close(...future.stdout)
[10:32:27.371]         ...future.stdout <- NULL
[10:32:27.371]     }
[10:32:27.371]     ...future.result$conditions <- ...future.conditions
[10:32:27.371]     ...future.result$finished <- base::Sys.time()
[10:32:27.371]     ...future.result
[10:32:27.371] }
[10:32:27.374] Exporting 2 global objects (112 bytes) to cluster node #1 ...
[10:32:27.374] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[10:32:27.374] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[10:32:27.375] Exporting ‘future.call.arguments’ (56 bytes) to cluster node #1 ...
[10:32:27.375] Exporting ‘future.call.arguments’ (56 bytes) to cluster node #1 ... DONE
[10:32:27.375] Exporting 2 global objects (112 bytes) to cluster node #1 ... DONE
[10:32:27.376] MultisessionFuture started
[10:32:27.376] - Launch lazy future ... done
[10:32:27.376] run() for ‘MultisessionFuture’ ... done
[10:32:27.377] result() for ClusterFuture ...
[10:32:27.377] receiveMessageFromWorker() for ClusterFuture ...
[10:32:27.377] - Validating connection of MultisessionFuture
[10:32:27.378] - received message: FutureResult
[10:32:27.378] - Received FutureResult
[10:32:27.378] - Erased future from FutureRegistry
[10:32:27.379] result() for ClusterFuture ...
[10:32:27.379] - result already collected: FutureResult
[10:32:27.379] result() for ClusterFuture ... done
[10:32:27.379] receiveMessageFromWorker() for ClusterFuture ... done
[10:32:27.379] result() for ClusterFuture ... done
[10:32:27.379] result() for ClusterFuture ...
[10:32:27.379] - result already collected: FutureResult
[10:32:27.379] result() for ClusterFuture ... done
[1] 6
** Sum function 'C' with plan('multisession') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y)
    }
    y
}
<bytecode: 0x5644c86693a8>
Arguments '...' exists: FALSE
[10:32:27.380] getGlobalsAndPackages() ...
[10:32:27.380] Searching for globals...
[10:32:27.382] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘y’
[10:32:27.382] Searching for globals ... DONE
[10:32:27.382] Resolving globals: FALSE
[10:32:27.382] The total size of the 2 globals is 112 bytes (112 bytes)
[10:32:27.383] The total size of the 2 globals exported for future expression (‘{; sum(x, y); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[10:32:27.383] - globals: [2] ‘x’, ‘y’
[10:32:27.383] 
[10:32:27.383] getGlobalsAndPackages() ... DONE
[10:32:27.383] run() for ‘Future’ ...
[10:32:27.384] - state: ‘created’
[10:32:27.384] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:32:27.398] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:27.398] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:32:27.398]   - Field: ‘node’
[10:32:27.398]   - Field: ‘label’
[10:32:27.399]   - Field: ‘local’
[10:32:27.399]   - Field: ‘owner’
[10:32:27.399]   - Field: ‘envir’
[10:32:27.399]   - Field: ‘workers’
[10:32:27.399]   - Field: ‘packages’
[10:32:27.399]   - Field: ‘gc’
[10:32:27.399]   - Field: ‘conditions’
[10:32:27.399]   - Field: ‘persistent’
[10:32:27.399]   - Field: ‘expr’
[10:32:27.400]   - Field: ‘uuid’
[10:32:27.400]   - Field: ‘seed’
[10:32:27.400]   - Field: ‘version’
[10:32:27.400]   - Field: ‘result’
[10:32:27.400]   - Field: ‘asynchronous’
[10:32:27.400]   - Field: ‘calls’
[10:32:27.400]   - Field: ‘globals’
[10:32:27.400]   - Field: ‘stdout’
[10:32:27.400]   - Field: ‘earlySignal’
[10:32:27.401]   - Field: ‘lazy’
[10:32:27.401]   - Field: ‘state’
[10:32:27.401] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:32:27.401] - Launch lazy future ...
[10:32:27.401] Packages needed by the future expression (n = 0): <none>
[10:32:27.401] Packages needed by future strategies (n = 0): <none>
[10:32:27.402] {
[10:32:27.402]     {
[10:32:27.402]         {
[10:32:27.402]             ...future.startTime <- base::Sys.time()
[10:32:27.402]             {
[10:32:27.402]                 {
[10:32:27.402]                   {
[10:32:27.402]                     {
[10:32:27.402]                       base::local({
[10:32:27.402]                         has_future <- base::requireNamespace("future", 
[10:32:27.402]                           quietly = TRUE)
[10:32:27.402]                         if (has_future) {
[10:32:27.402]                           ns <- base::getNamespace("future")
[10:32:27.402]                           version <- ns[[".package"]][["version"]]
[10:32:27.402]                           if (is.null(version)) 
[10:32:27.402]                             version <- utils::packageVersion("future")
[10:32:27.402]                         }
[10:32:27.402]                         else {
[10:32:27.402]                           version <- NULL
[10:32:27.402]                         }
[10:32:27.402]                         if (!has_future || version < "1.8.0") {
[10:32:27.402]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:27.402]                             "", base::R.version$version.string), 
[10:32:27.402]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:27.402]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:27.402]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:27.402]                               "release", "version")], collapse = " "), 
[10:32:27.402]                             hostname = base::Sys.info()[["nodename"]])
[10:32:27.402]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:27.402]                             info)
[10:32:27.402]                           info <- base::paste(info, collapse = "; ")
[10:32:27.402]                           if (!has_future) {
[10:32:27.402]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:27.402]                               info)
[10:32:27.402]                           }
[10:32:27.402]                           else {
[10:32:27.402]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:27.402]                               info, version)
[10:32:27.402]                           }
[10:32:27.402]                           base::stop(msg)
[10:32:27.402]                         }
[10:32:27.402]                       })
[10:32:27.402]                     }
[10:32:27.402]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:27.402]                     base::options(mc.cores = 1L)
[10:32:27.402]                   }
[10:32:27.402]                   ...future.strategy.old <- future::plan("list")
[10:32:27.402]                   options(future.plan = NULL)
[10:32:27.402]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:27.402]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:27.402]                 }
[10:32:27.402]                 ...future.workdir <- getwd()
[10:32:27.402]             }
[10:32:27.402]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:27.402]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:27.402]         }
[10:32:27.402]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:27.402]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:27.402]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:27.402]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:27.402]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:27.402]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:27.402]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:27.402]             base::names(...future.oldOptions))
[10:32:27.402]     }
[10:32:27.402]     if (FALSE) {
[10:32:27.402]     }
[10:32:27.402]     else {
[10:32:27.402]         if (TRUE) {
[10:32:27.402]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:27.402]                 open = "w")
[10:32:27.402]         }
[10:32:27.402]         else {
[10:32:27.402]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:27.402]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:27.402]         }
[10:32:27.402]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:27.402]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:27.402]             base::sink(type = "output", split = FALSE)
[10:32:27.402]             base::close(...future.stdout)
[10:32:27.402]         }, add = TRUE)
[10:32:27.402]     }
[10:32:27.402]     ...future.frame <- base::sys.nframe()
[10:32:27.402]     ...future.conditions <- base::list()
[10:32:27.402]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:27.402]     if (FALSE) {
[10:32:27.402]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:27.402]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:27.402]     }
[10:32:27.402]     ...future.result <- base::tryCatch({
[10:32:27.402]         base::withCallingHandlers({
[10:32:27.402]             ...future.value <- base::withVisible(base::local({
[10:32:27.402]                 ...future.makeSendCondition <- base::local({
[10:32:27.402]                   sendCondition <- NULL
[10:32:27.402]                   function(frame = 1L) {
[10:32:27.402]                     if (is.function(sendCondition)) 
[10:32:27.402]                       return(sendCondition)
[10:32:27.402]                     ns <- getNamespace("parallel")
[10:32:27.402]                     if (exists("sendData", mode = "function", 
[10:32:27.402]                       envir = ns)) {
[10:32:27.402]                       parallel_sendData <- get("sendData", mode = "function", 
[10:32:27.402]                         envir = ns)
[10:32:27.402]                       envir <- sys.frame(frame)
[10:32:27.402]                       master <- NULL
[10:32:27.402]                       while (!identical(envir, .GlobalEnv) && 
[10:32:27.402]                         !identical(envir, emptyenv())) {
[10:32:27.402]                         if (exists("master", mode = "list", envir = envir, 
[10:32:27.402]                           inherits = FALSE)) {
[10:32:27.402]                           master <- get("master", mode = "list", 
[10:32:27.402]                             envir = envir, inherits = FALSE)
[10:32:27.402]                           if (inherits(master, c("SOCKnode", 
[10:32:27.402]                             "SOCK0node"))) {
[10:32:27.402]                             sendCondition <<- function(cond) {
[10:32:27.402]                               data <- list(type = "VALUE", value = cond, 
[10:32:27.402]                                 success = TRUE)
[10:32:27.402]                               parallel_sendData(master, data)
[10:32:27.402]                             }
[10:32:27.402]                             return(sendCondition)
[10:32:27.402]                           }
[10:32:27.402]                         }
[10:32:27.402]                         frame <- frame + 1L
[10:32:27.402]                         envir <- sys.frame(frame)
[10:32:27.402]                       }
[10:32:27.402]                     }
[10:32:27.402]                     sendCondition <<- function(cond) NULL
[10:32:27.402]                   }
[10:32:27.402]                 })
[10:32:27.402]                 withCallingHandlers({
[10:32:27.402]                   {
[10:32:27.402]                     sum(x, y)
[10:32:27.402]                   }
[10:32:27.402]                 }, immediateCondition = function(cond) {
[10:32:27.402]                   sendCondition <- ...future.makeSendCondition()
[10:32:27.402]                   sendCondition(cond)
[10:32:27.402]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:27.402]                   {
[10:32:27.402]                     inherits <- base::inherits
[10:32:27.402]                     invokeRestart <- base::invokeRestart
[10:32:27.402]                     is.null <- base::is.null
[10:32:27.402]                     muffled <- FALSE
[10:32:27.402]                     if (inherits(cond, "message")) {
[10:32:27.402]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:27.402]                       if (muffled) 
[10:32:27.402]                         invokeRestart("muffleMessage")
[10:32:27.402]                     }
[10:32:27.402]                     else if (inherits(cond, "warning")) {
[10:32:27.402]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:27.402]                       if (muffled) 
[10:32:27.402]                         invokeRestart("muffleWarning")
[10:32:27.402]                     }
[10:32:27.402]                     else if (inherits(cond, "condition")) {
[10:32:27.402]                       if (!is.null(pattern)) {
[10:32:27.402]                         computeRestarts <- base::computeRestarts
[10:32:27.402]                         grepl <- base::grepl
[10:32:27.402]                         restarts <- computeRestarts(cond)
[10:32:27.402]                         for (restart in restarts) {
[10:32:27.402]                           name <- restart$name
[10:32:27.402]                           if (is.null(name)) 
[10:32:27.402]                             next
[10:32:27.402]                           if (!grepl(pattern, name)) 
[10:32:27.402]                             next
[10:32:27.402]                           invokeRestart(restart)
[10:32:27.402]                           muffled <- TRUE
[10:32:27.402]                           break
[10:32:27.402]                         }
[10:32:27.402]                       }
[10:32:27.402]                     }
[10:32:27.402]                     invisible(muffled)
[10:32:27.402]                   }
[10:32:27.402]                   muffleCondition(cond)
[10:32:27.402]                 })
[10:32:27.402]             }))
[10:32:27.402]             future::FutureResult(value = ...future.value$value, 
[10:32:27.402]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:27.402]                   ...future.rng), globalenv = if (FALSE) 
[10:32:27.402]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:27.402]                     ...future.globalenv.names))
[10:32:27.402]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:27.402]         }, condition = base::local({
[10:32:27.402]             c <- base::c
[10:32:27.402]             inherits <- base::inherits
[10:32:27.402]             invokeRestart <- base::invokeRestart
[10:32:27.402]             length <- base::length
[10:32:27.402]             list <- base::list
[10:32:27.402]             seq.int <- base::seq.int
[10:32:27.402]             signalCondition <- base::signalCondition
[10:32:27.402]             sys.calls <- base::sys.calls
[10:32:27.402]             `[[` <- base::`[[`
[10:32:27.402]             `+` <- base::`+`
[10:32:27.402]             `<<-` <- base::`<<-`
[10:32:27.402]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:27.402]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:27.402]                   3L)]
[10:32:27.402]             }
[10:32:27.402]             function(cond) {
[10:32:27.402]                 is_error <- inherits(cond, "error")
[10:32:27.402]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:27.402]                   NULL)
[10:32:27.402]                 if (is_error) {
[10:32:27.402]                   sessionInformation <- function() {
[10:32:27.402]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:27.402]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:27.402]                       search = base::search(), system = base::Sys.info())
[10:32:27.402]                   }
[10:32:27.402]                   ...future.conditions[[length(...future.conditions) + 
[10:32:27.402]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:27.402]                     cond$call), session = sessionInformation(), 
[10:32:27.402]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:27.402]                   signalCondition(cond)
[10:32:27.402]                 }
[10:32:27.402]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:27.402]                 "immediateCondition"))) {
[10:32:27.402]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:27.402]                   ...future.conditions[[length(...future.conditions) + 
[10:32:27.402]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:27.402]                   if (TRUE && !signal) {
[10:32:27.402]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:27.402]                     {
[10:32:27.402]                       inherits <- base::inherits
[10:32:27.402]                       invokeRestart <- base::invokeRestart
[10:32:27.402]                       is.null <- base::is.null
[10:32:27.402]                       muffled <- FALSE
[10:32:27.402]                       if (inherits(cond, "message")) {
[10:32:27.402]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:27.402]                         if (muffled) 
[10:32:27.402]                           invokeRestart("muffleMessage")
[10:32:27.402]                       }
[10:32:27.402]                       else if (inherits(cond, "warning")) {
[10:32:27.402]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:27.402]                         if (muffled) 
[10:32:27.402]                           invokeRestart("muffleWarning")
[10:32:27.402]                       }
[10:32:27.402]                       else if (inherits(cond, "condition")) {
[10:32:27.402]                         if (!is.null(pattern)) {
[10:32:27.402]                           computeRestarts <- base::computeRestarts
[10:32:27.402]                           grepl <- base::grepl
[10:32:27.402]                           restarts <- computeRestarts(cond)
[10:32:27.402]                           for (restart in restarts) {
[10:32:27.402]                             name <- restart$name
[10:32:27.402]                             if (is.null(name)) 
[10:32:27.402]                               next
[10:32:27.402]                             if (!grepl(pattern, name)) 
[10:32:27.402]                               next
[10:32:27.402]                             invokeRestart(restart)
[10:32:27.402]                             muffled <- TRUE
[10:32:27.402]                             break
[10:32:27.402]                           }
[10:32:27.402]                         }
[10:32:27.402]                       }
[10:32:27.402]                       invisible(muffled)
[10:32:27.402]                     }
[10:32:27.402]                     muffleCondition(cond, pattern = "^muffle")
[10:32:27.402]                   }
[10:32:27.402]                 }
[10:32:27.402]                 else {
[10:32:27.402]                   if (TRUE) {
[10:32:27.402]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:27.402]                     {
[10:32:27.402]                       inherits <- base::inherits
[10:32:27.402]                       invokeRestart <- base::invokeRestart
[10:32:27.402]                       is.null <- base::is.null
[10:32:27.402]                       muffled <- FALSE
[10:32:27.402]                       if (inherits(cond, "message")) {
[10:32:27.402]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:27.402]                         if (muffled) 
[10:32:27.402]                           invokeRestart("muffleMessage")
[10:32:27.402]                       }
[10:32:27.402]                       else if (inherits(cond, "warning")) {
[10:32:27.402]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:27.402]                         if (muffled) 
[10:32:27.402]                           invokeRestart("muffleWarning")
[10:32:27.402]                       }
[10:32:27.402]                       else if (inherits(cond, "condition")) {
[10:32:27.402]                         if (!is.null(pattern)) {
[10:32:27.402]                           computeRestarts <- base::computeRestarts
[10:32:27.402]                           grepl <- base::grepl
[10:32:27.402]                           restarts <- computeRestarts(cond)
[10:32:27.402]                           for (restart in restarts) {
[10:32:27.402]                             name <- restart$name
[10:32:27.402]                             if (is.null(name)) 
[10:32:27.402]                               next
[10:32:27.402]                             if (!grepl(pattern, name)) 
[10:32:27.402]                               next
[10:32:27.402]                             invokeRestart(restart)
[10:32:27.402]                             muffled <- TRUE
[10:32:27.402]                             break
[10:32:27.402]                           }
[10:32:27.402]                         }
[10:32:27.402]                       }
[10:32:27.402]                       invisible(muffled)
[10:32:27.402]                     }
[10:32:27.402]                     muffleCondition(cond, pattern = "^muffle")
[10:32:27.402]                   }
[10:32:27.402]                 }
[10:32:27.402]             }
[10:32:27.402]         }))
[10:32:27.402]     }, error = function(ex) {
[10:32:27.402]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:27.402]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:27.402]                 ...future.rng), started = ...future.startTime, 
[10:32:27.402]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:27.402]             version = "1.8"), class = "FutureResult")
[10:32:27.402]     }, finally = {
[10:32:27.402]         if (!identical(...future.workdir, getwd())) 
[10:32:27.402]             setwd(...future.workdir)
[10:32:27.402]         {
[10:32:27.402]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:27.402]                 ...future.oldOptions$nwarnings <- NULL
[10:32:27.402]             }
[10:32:27.402]             base::options(...future.oldOptions)
[10:32:27.402]             if (.Platform$OS.type == "windows") {
[10:32:27.402]                 old_names <- names(...future.oldEnvVars)
[10:32:27.402]                 envs <- base::Sys.getenv()
[10:32:27.402]                 names <- names(envs)
[10:32:27.402]                 common <- intersect(names, old_names)
[10:32:27.402]                 added <- setdiff(names, old_names)
[10:32:27.402]                 removed <- setdiff(old_names, names)
[10:32:27.402]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:27.402]                   envs[common]]
[10:32:27.402]                 NAMES <- toupper(changed)
[10:32:27.402]                 args <- list()
[10:32:27.402]                 for (kk in seq_along(NAMES)) {
[10:32:27.402]                   name <- changed[[kk]]
[10:32:27.402]                   NAME <- NAMES[[kk]]
[10:32:27.402]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:27.402]                     next
[10:32:27.402]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:27.402]                 }
[10:32:27.402]                 NAMES <- toupper(added)
[10:32:27.402]                 for (kk in seq_along(NAMES)) {
[10:32:27.402]                   name <- added[[kk]]
[10:32:27.402]                   NAME <- NAMES[[kk]]
[10:32:27.402]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:27.402]                     next
[10:32:27.402]                   args[[name]] <- ""
[10:32:27.402]                 }
[10:32:27.402]                 NAMES <- toupper(removed)
[10:32:27.402]                 for (kk in seq_along(NAMES)) {
[10:32:27.402]                   name <- removed[[kk]]
[10:32:27.402]                   NAME <- NAMES[[kk]]
[10:32:27.402]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:27.402]                     next
[10:32:27.402]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:27.402]                 }
[10:32:27.402]                 if (length(args) > 0) 
[10:32:27.402]                   base::do.call(base::Sys.setenv, args = args)
[10:32:27.402]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:27.402]             }
[10:32:27.402]             else {
[10:32:27.402]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:27.402]             }
[10:32:27.402]             {
[10:32:27.402]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:27.402]                   0L) {
[10:32:27.402]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:27.402]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:27.402]                   base::options(opts)
[10:32:27.402]                 }
[10:32:27.402]                 {
[10:32:27.402]                   {
[10:32:27.402]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:27.402]                     NULL
[10:32:27.402]                   }
[10:32:27.402]                   options(future.plan = NULL)
[10:32:27.402]                   if (is.na(NA_character_)) 
[10:32:27.402]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:27.402]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:27.402]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:27.402]                     .init = FALSE)
[10:32:27.402]                 }
[10:32:27.402]             }
[10:32:27.402]         }
[10:32:27.402]     })
[10:32:27.402]     if (TRUE) {
[10:32:27.402]         base::sink(type = "output", split = FALSE)
[10:32:27.402]         if (TRUE) {
[10:32:27.402]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:27.402]         }
[10:32:27.402]         else {
[10:32:27.402]             ...future.result["stdout"] <- base::list(NULL)
[10:32:27.402]         }
[10:32:27.402]         base::close(...future.stdout)
[10:32:27.402]         ...future.stdout <- NULL
[10:32:27.402]     }
[10:32:27.402]     ...future.result$conditions <- ...future.conditions
[10:32:27.402]     ...future.result$finished <- base::Sys.time()
[10:32:27.402]     ...future.result
[10:32:27.402] }
[10:32:27.405] Exporting 2 global objects (112 bytes) to cluster node #1 ...
[10:32:27.405] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[10:32:27.405] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[10:32:27.408] Exporting ‘y’ (56 bytes) to cluster node #1 ...
[10:32:27.408] Exporting ‘y’ (56 bytes) to cluster node #1 ... DONE
[10:32:27.408] Exporting 2 global objects (112 bytes) to cluster node #1 ... DONE
[10:32:27.409] MultisessionFuture started
[10:32:27.409] - Launch lazy future ... done
[10:32:27.409] run() for ‘MultisessionFuture’ ... done
[10:32:27.409] result() for ClusterFuture ...
[10:32:27.409] receiveMessageFromWorker() for ClusterFuture ...
[10:32:27.409] - Validating connection of MultisessionFuture
[10:32:27.410] - received message: FutureResult
[10:32:27.410] - Received FutureResult
[10:32:27.410] - Erased future from FutureRegistry
[10:32:27.410] result() for ClusterFuture ...
[10:32:27.410] - result already collected: FutureResult
[10:32:27.410] result() for ClusterFuture ... done
[10:32:27.410] receiveMessageFromWorker() for ClusterFuture ... done
[10:32:27.411] result() for ClusterFuture ... done
[10:32:27.411] result() for ClusterFuture ...
[10:32:27.411] - result already collected: FutureResult
[10:32:27.411] result() for ClusterFuture ... done
[1] 6
** Sum function 'D' with plan('multisession') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y, ...)
    }
    y
}
<bytecode: 0x5644c8855f00>
Arguments '...' exists: FALSE
[10:32:27.411] getGlobalsAndPackages() ...
[10:32:27.411] Searching for globals...
[10:32:27.413] - globals found: [5] ‘{’, ‘sum’, ‘x’, ‘y’, ‘...’
[10:32:27.413] Searching for globals ... DONE
[10:32:27.413] Resolving globals: FALSE
[10:32:27.413] Tweak future expression to call with '...' arguments ...
[10:32:27.413] The total size of the 2 globals is 112 bytes (112 bytes)
[10:32:27.414] The total size of the 2 globals exported for future expression (‘{; sum(x, y, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[10:32:27.414] - globals: [2] ‘x’, ‘y’
[10:32:27.414] 
[10:32:27.414] getGlobalsAndPackages() ... DONE
[10:32:27.414] run() for ‘Future’ ...
[10:32:27.414] - state: ‘created’
[10:32:27.415] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:32:27.428] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:27.428] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:32:27.428]   - Field: ‘node’
[10:32:27.428]   - Field: ‘label’
[10:32:27.428]   - Field: ‘local’
[10:32:27.429]   - Field: ‘owner’
[10:32:27.429]   - Field: ‘envir’
[10:32:27.429]   - Field: ‘workers’
[10:32:27.429]   - Field: ‘packages’
[10:32:27.429]   - Field: ‘gc’
[10:32:27.429]   - Field: ‘conditions’
[10:32:27.429]   - Field: ‘persistent’
[10:32:27.429]   - Field: ‘expr’
[10:32:27.429]   - Field: ‘uuid’
[10:32:27.429]   - Field: ‘seed’
[10:32:27.429]   - Field: ‘version’
[10:32:27.430]   - Field: ‘result’
[10:32:27.430]   - Field: ‘asynchronous’
[10:32:27.430]   - Field: ‘calls’
[10:32:27.430]   - Field: ‘globals’
[10:32:27.430]   - Field: ‘stdout’
[10:32:27.430]   - Field: ‘earlySignal’
[10:32:27.430]   - Field: ‘lazy’
[10:32:27.430]   - Field: ‘state’
[10:32:27.430] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:32:27.430] - Launch lazy future ...
[10:32:27.431] Packages needed by the future expression (n = 0): <none>
[10:32:27.431] Packages needed by future strategies (n = 0): <none>
[10:32:27.431] {
[10:32:27.431]     {
[10:32:27.431]         {
[10:32:27.431]             ...future.startTime <- base::Sys.time()
[10:32:27.431]             {
[10:32:27.431]                 {
[10:32:27.431]                   {
[10:32:27.431]                     {
[10:32:27.431]                       base::local({
[10:32:27.431]                         has_future <- base::requireNamespace("future", 
[10:32:27.431]                           quietly = TRUE)
[10:32:27.431]                         if (has_future) {
[10:32:27.431]                           ns <- base::getNamespace("future")
[10:32:27.431]                           version <- ns[[".package"]][["version"]]
[10:32:27.431]                           if (is.null(version)) 
[10:32:27.431]                             version <- utils::packageVersion("future")
[10:32:27.431]                         }
[10:32:27.431]                         else {
[10:32:27.431]                           version <- NULL
[10:32:27.431]                         }
[10:32:27.431]                         if (!has_future || version < "1.8.0") {
[10:32:27.431]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:27.431]                             "", base::R.version$version.string), 
[10:32:27.431]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:27.431]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:27.431]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:27.431]                               "release", "version")], collapse = " "), 
[10:32:27.431]                             hostname = base::Sys.info()[["nodename"]])
[10:32:27.431]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:27.431]                             info)
[10:32:27.431]                           info <- base::paste(info, collapse = "; ")
[10:32:27.431]                           if (!has_future) {
[10:32:27.431]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:27.431]                               info)
[10:32:27.431]                           }
[10:32:27.431]                           else {
[10:32:27.431]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:27.431]                               info, version)
[10:32:27.431]                           }
[10:32:27.431]                           base::stop(msg)
[10:32:27.431]                         }
[10:32:27.431]                       })
[10:32:27.431]                     }
[10:32:27.431]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:27.431]                     base::options(mc.cores = 1L)
[10:32:27.431]                   }
[10:32:27.431]                   ...future.strategy.old <- future::plan("list")
[10:32:27.431]                   options(future.plan = NULL)
[10:32:27.431]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:27.431]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:27.431]                 }
[10:32:27.431]                 ...future.workdir <- getwd()
[10:32:27.431]             }
[10:32:27.431]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:27.431]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:27.431]         }
[10:32:27.431]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:27.431]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:27.431]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:27.431]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:27.431]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:27.431]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:27.431]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:27.431]             base::names(...future.oldOptions))
[10:32:27.431]     }
[10:32:27.431]     if (FALSE) {
[10:32:27.431]     }
[10:32:27.431]     else {
[10:32:27.431]         if (TRUE) {
[10:32:27.431]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:27.431]                 open = "w")
[10:32:27.431]         }
[10:32:27.431]         else {
[10:32:27.431]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:27.431]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:27.431]         }
[10:32:27.431]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:27.431]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:27.431]             base::sink(type = "output", split = FALSE)
[10:32:27.431]             base::close(...future.stdout)
[10:32:27.431]         }, add = TRUE)
[10:32:27.431]     }
[10:32:27.431]     ...future.frame <- base::sys.nframe()
[10:32:27.431]     ...future.conditions <- base::list()
[10:32:27.431]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:27.431]     if (FALSE) {
[10:32:27.431]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:27.431]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:27.431]     }
[10:32:27.431]     ...future.result <- base::tryCatch({
[10:32:27.431]         base::withCallingHandlers({
[10:32:27.431]             ...future.value <- base::withVisible(base::local({
[10:32:27.431]                 ...future.makeSendCondition <- base::local({
[10:32:27.431]                   sendCondition <- NULL
[10:32:27.431]                   function(frame = 1L) {
[10:32:27.431]                     if (is.function(sendCondition)) 
[10:32:27.431]                       return(sendCondition)
[10:32:27.431]                     ns <- getNamespace("parallel")
[10:32:27.431]                     if (exists("sendData", mode = "function", 
[10:32:27.431]                       envir = ns)) {
[10:32:27.431]                       parallel_sendData <- get("sendData", mode = "function", 
[10:32:27.431]                         envir = ns)
[10:32:27.431]                       envir <- sys.frame(frame)
[10:32:27.431]                       master <- NULL
[10:32:27.431]                       while (!identical(envir, .GlobalEnv) && 
[10:32:27.431]                         !identical(envir, emptyenv())) {
[10:32:27.431]                         if (exists("master", mode = "list", envir = envir, 
[10:32:27.431]                           inherits = FALSE)) {
[10:32:27.431]                           master <- get("master", mode = "list", 
[10:32:27.431]                             envir = envir, inherits = FALSE)
[10:32:27.431]                           if (inherits(master, c("SOCKnode", 
[10:32:27.431]                             "SOCK0node"))) {
[10:32:27.431]                             sendCondition <<- function(cond) {
[10:32:27.431]                               data <- list(type = "VALUE", value = cond, 
[10:32:27.431]                                 success = TRUE)
[10:32:27.431]                               parallel_sendData(master, data)
[10:32:27.431]                             }
[10:32:27.431]                             return(sendCondition)
[10:32:27.431]                           }
[10:32:27.431]                         }
[10:32:27.431]                         frame <- frame + 1L
[10:32:27.431]                         envir <- sys.frame(frame)
[10:32:27.431]                       }
[10:32:27.431]                     }
[10:32:27.431]                     sendCondition <<- function(cond) NULL
[10:32:27.431]                   }
[10:32:27.431]                 })
[10:32:27.431]                 withCallingHandlers({
[10:32:27.431]                   {
[10:32:27.431]                     sum(x, y, ...)
[10:32:27.431]                   }
[10:32:27.431]                 }, immediateCondition = function(cond) {
[10:32:27.431]                   sendCondition <- ...future.makeSendCondition()
[10:32:27.431]                   sendCondition(cond)
[10:32:27.431]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:27.431]                   {
[10:32:27.431]                     inherits <- base::inherits
[10:32:27.431]                     invokeRestart <- base::invokeRestart
[10:32:27.431]                     is.null <- base::is.null
[10:32:27.431]                     muffled <- FALSE
[10:32:27.431]                     if (inherits(cond, "message")) {
[10:32:27.431]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:27.431]                       if (muffled) 
[10:32:27.431]                         invokeRestart("muffleMessage")
[10:32:27.431]                     }
[10:32:27.431]                     else if (inherits(cond, "warning")) {
[10:32:27.431]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:27.431]                       if (muffled) 
[10:32:27.431]                         invokeRestart("muffleWarning")
[10:32:27.431]                     }
[10:32:27.431]                     else if (inherits(cond, "condition")) {
[10:32:27.431]                       if (!is.null(pattern)) {
[10:32:27.431]                         computeRestarts <- base::computeRestarts
[10:32:27.431]                         grepl <- base::grepl
[10:32:27.431]                         restarts <- computeRestarts(cond)
[10:32:27.431]                         for (restart in restarts) {
[10:32:27.431]                           name <- restart$name
[10:32:27.431]                           if (is.null(name)) 
[10:32:27.431]                             next
[10:32:27.431]                           if (!grepl(pattern, name)) 
[10:32:27.431]                             next
[10:32:27.431]                           invokeRestart(restart)
[10:32:27.431]                           muffled <- TRUE
[10:32:27.431]                           break
[10:32:27.431]                         }
[10:32:27.431]                       }
[10:32:27.431]                     }
[10:32:27.431]                     invisible(muffled)
[10:32:27.431]                   }
[10:32:27.431]                   muffleCondition(cond)
[10:32:27.431]                 })
[10:32:27.431]             }))
[10:32:27.431]             future::FutureResult(value = ...future.value$value, 
[10:32:27.431]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:27.431]                   ...future.rng), globalenv = if (FALSE) 
[10:32:27.431]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:27.431]                     ...future.globalenv.names))
[10:32:27.431]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:27.431]         }, condition = base::local({
[10:32:27.431]             c <- base::c
[10:32:27.431]             inherits <- base::inherits
[10:32:27.431]             invokeRestart <- base::invokeRestart
[10:32:27.431]             length <- base::length
[10:32:27.431]             list <- base::list
[10:32:27.431]             seq.int <- base::seq.int
[10:32:27.431]             signalCondition <- base::signalCondition
[10:32:27.431]             sys.calls <- base::sys.calls
[10:32:27.431]             `[[` <- base::`[[`
[10:32:27.431]             `+` <- base::`+`
[10:32:27.431]             `<<-` <- base::`<<-`
[10:32:27.431]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:27.431]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:27.431]                   3L)]
[10:32:27.431]             }
[10:32:27.431]             function(cond) {
[10:32:27.431]                 is_error <- inherits(cond, "error")
[10:32:27.431]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:27.431]                   NULL)
[10:32:27.431]                 if (is_error) {
[10:32:27.431]                   sessionInformation <- function() {
[10:32:27.431]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:27.431]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:27.431]                       search = base::search(), system = base::Sys.info())
[10:32:27.431]                   }
[10:32:27.431]                   ...future.conditions[[length(...future.conditions) + 
[10:32:27.431]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:27.431]                     cond$call), session = sessionInformation(), 
[10:32:27.431]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:27.431]                   signalCondition(cond)
[10:32:27.431]                 }
[10:32:27.431]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:27.431]                 "immediateCondition"))) {
[10:32:27.431]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:27.431]                   ...future.conditions[[length(...future.conditions) + 
[10:32:27.431]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:27.431]                   if (TRUE && !signal) {
[10:32:27.431]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:27.431]                     {
[10:32:27.431]                       inherits <- base::inherits
[10:32:27.431]                       invokeRestart <- base::invokeRestart
[10:32:27.431]                       is.null <- base::is.null
[10:32:27.431]                       muffled <- FALSE
[10:32:27.431]                       if (inherits(cond, "message")) {
[10:32:27.431]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:27.431]                         if (muffled) 
[10:32:27.431]                           invokeRestart("muffleMessage")
[10:32:27.431]                       }
[10:32:27.431]                       else if (inherits(cond, "warning")) {
[10:32:27.431]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:27.431]                         if (muffled) 
[10:32:27.431]                           invokeRestart("muffleWarning")
[10:32:27.431]                       }
[10:32:27.431]                       else if (inherits(cond, "condition")) {
[10:32:27.431]                         if (!is.null(pattern)) {
[10:32:27.431]                           computeRestarts <- base::computeRestarts
[10:32:27.431]                           grepl <- base::grepl
[10:32:27.431]                           restarts <- computeRestarts(cond)
[10:32:27.431]                           for (restart in restarts) {
[10:32:27.431]                             name <- restart$name
[10:32:27.431]                             if (is.null(name)) 
[10:32:27.431]                               next
[10:32:27.431]                             if (!grepl(pattern, name)) 
[10:32:27.431]                               next
[10:32:27.431]                             invokeRestart(restart)
[10:32:27.431]                             muffled <- TRUE
[10:32:27.431]                             break
[10:32:27.431]                           }
[10:32:27.431]                         }
[10:32:27.431]                       }
[10:32:27.431]                       invisible(muffled)
[10:32:27.431]                     }
[10:32:27.431]                     muffleCondition(cond, pattern = "^muffle")
[10:32:27.431]                   }
[10:32:27.431]                 }
[10:32:27.431]                 else {
[10:32:27.431]                   if (TRUE) {
[10:32:27.431]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:27.431]                     {
[10:32:27.431]                       inherits <- base::inherits
[10:32:27.431]                       invokeRestart <- base::invokeRestart
[10:32:27.431]                       is.null <- base::is.null
[10:32:27.431]                       muffled <- FALSE
[10:32:27.431]                       if (inherits(cond, "message")) {
[10:32:27.431]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:27.431]                         if (muffled) 
[10:32:27.431]                           invokeRestart("muffleMessage")
[10:32:27.431]                       }
[10:32:27.431]                       else if (inherits(cond, "warning")) {
[10:32:27.431]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:27.431]                         if (muffled) 
[10:32:27.431]                           invokeRestart("muffleWarning")
[10:32:27.431]                       }
[10:32:27.431]                       else if (inherits(cond, "condition")) {
[10:32:27.431]                         if (!is.null(pattern)) {
[10:32:27.431]                           computeRestarts <- base::computeRestarts
[10:32:27.431]                           grepl <- base::grepl
[10:32:27.431]                           restarts <- computeRestarts(cond)
[10:32:27.431]                           for (restart in restarts) {
[10:32:27.431]                             name <- restart$name
[10:32:27.431]                             if (is.null(name)) 
[10:32:27.431]                               next
[10:32:27.431]                             if (!grepl(pattern, name)) 
[10:32:27.431]                               next
[10:32:27.431]                             invokeRestart(restart)
[10:32:27.431]                             muffled <- TRUE
[10:32:27.431]                             break
[10:32:27.431]                           }
[10:32:27.431]                         }
[10:32:27.431]                       }
[10:32:27.431]                       invisible(muffled)
[10:32:27.431]                     }
[10:32:27.431]                     muffleCondition(cond, pattern = "^muffle")
[10:32:27.431]                   }
[10:32:27.431]                 }
[10:32:27.431]             }
[10:32:27.431]         }))
[10:32:27.431]     }, error = function(ex) {
[10:32:27.431]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:27.431]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:27.431]                 ...future.rng), started = ...future.startTime, 
[10:32:27.431]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:27.431]             version = "1.8"), class = "FutureResult")
[10:32:27.431]     }, finally = {
[10:32:27.431]         if (!identical(...future.workdir, getwd())) 
[10:32:27.431]             setwd(...future.workdir)
[10:32:27.431]         {
[10:32:27.431]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:27.431]                 ...future.oldOptions$nwarnings <- NULL
[10:32:27.431]             }
[10:32:27.431]             base::options(...future.oldOptions)
[10:32:27.431]             if (.Platform$OS.type == "windows") {
[10:32:27.431]                 old_names <- names(...future.oldEnvVars)
[10:32:27.431]                 envs <- base::Sys.getenv()
[10:32:27.431]                 names <- names(envs)
[10:32:27.431]                 common <- intersect(names, old_names)
[10:32:27.431]                 added <- setdiff(names, old_names)
[10:32:27.431]                 removed <- setdiff(old_names, names)
[10:32:27.431]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:27.431]                   envs[common]]
[10:32:27.431]                 NAMES <- toupper(changed)
[10:32:27.431]                 args <- list()
[10:32:27.431]                 for (kk in seq_along(NAMES)) {
[10:32:27.431]                   name <- changed[[kk]]
[10:32:27.431]                   NAME <- NAMES[[kk]]
[10:32:27.431]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:27.431]                     next
[10:32:27.431]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:27.431]                 }
[10:32:27.431]                 NAMES <- toupper(added)
[10:32:27.431]                 for (kk in seq_along(NAMES)) {
[10:32:27.431]                   name <- added[[kk]]
[10:32:27.431]                   NAME <- NAMES[[kk]]
[10:32:27.431]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:27.431]                     next
[10:32:27.431]                   args[[name]] <- ""
[10:32:27.431]                 }
[10:32:27.431]                 NAMES <- toupper(removed)
[10:32:27.431]                 for (kk in seq_along(NAMES)) {
[10:32:27.431]                   name <- removed[[kk]]
[10:32:27.431]                   NAME <- NAMES[[kk]]
[10:32:27.431]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:27.431]                     next
[10:32:27.431]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:27.431]                 }
[10:32:27.431]                 if (length(args) > 0) 
[10:32:27.431]                   base::do.call(base::Sys.setenv, args = args)
[10:32:27.431]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:27.431]             }
[10:32:27.431]             else {
[10:32:27.431]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:27.431]             }
[10:32:27.431]             {
[10:32:27.431]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:27.431]                   0L) {
[10:32:27.431]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:27.431]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:27.431]                   base::options(opts)
[10:32:27.431]                 }
[10:32:27.431]                 {
[10:32:27.431]                   {
[10:32:27.431]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:27.431]                     NULL
[10:32:27.431]                   }
[10:32:27.431]                   options(future.plan = NULL)
[10:32:27.431]                   if (is.na(NA_character_)) 
[10:32:27.431]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:27.431]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:27.431]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:27.431]                     .init = FALSE)
[10:32:27.431]                 }
[10:32:27.431]             }
[10:32:27.431]         }
[10:32:27.431]     })
[10:32:27.431]     if (TRUE) {
[10:32:27.431]         base::sink(type = "output", split = FALSE)
[10:32:27.431]         if (TRUE) {
[10:32:27.431]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:27.431]         }
[10:32:27.431]         else {
[10:32:27.431]             ...future.result["stdout"] <- base::list(NULL)
[10:32:27.431]         }
[10:32:27.431]         base::close(...future.stdout)
[10:32:27.431]         ...future.stdout <- NULL
[10:32:27.431]     }
[10:32:27.431]     ...future.result$conditions <- ...future.conditions
[10:32:27.431]     ...future.result$finished <- base::Sys.time()
[10:32:27.431]     ...future.result
[10:32:27.431] }
[10:32:27.433] Exporting 2 global objects (112 bytes) to cluster node #1 ...
[10:32:27.434] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[10:32:27.434] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[10:32:27.434] Exporting ‘y’ (56 bytes) to cluster node #1 ...
[10:32:27.435] Exporting ‘y’ (56 bytes) to cluster node #1 ... DONE
[10:32:27.435] Exporting 2 global objects (112 bytes) to cluster node #1 ... DONE
[10:32:27.435] MultisessionFuture started
[10:32:27.435] - Launch lazy future ... done
[10:32:27.435] run() for ‘MultisessionFuture’ ... done
[10:32:27.436] result() for ClusterFuture ...
[10:32:27.436] receiveMessageFromWorker() for ClusterFuture ...
[10:32:27.436] - Validating connection of MultisessionFuture
[10:32:27.438] - received message: FutureResult
[10:32:27.438] - Received FutureResult
[10:32:27.438] - Erased future from FutureRegistry
[10:32:27.438] result() for ClusterFuture ...
[10:32:27.438] - result already collected: FutureResult
[10:32:27.438] result() for ClusterFuture ... done
[10:32:27.438] signalConditions() ...
[10:32:27.438]  - include = ‘immediateCondition’
[10:32:27.438]  - exclude = 
[10:32:27.439]  - resignal = FALSE
[10:32:27.439]  - Number of conditions: 1
[10:32:27.439] signalConditions() ... done
[10:32:27.439] receiveMessageFromWorker() for ClusterFuture ... done
[10:32:27.439] result() for ClusterFuture ... done
[10:32:27.439] result() for ClusterFuture ...
[10:32:27.439] - result already collected: FutureResult
[10:32:27.439] result() for ClusterFuture ... done
[10:32:27.439] signalConditions() ...
[10:32:27.439]  - include = ‘immediateCondition’
[10:32:27.439]  - exclude = 
[10:32:27.439]  - resignal = FALSE
[10:32:27.440]  - Number of conditions: 1
[10:32:27.440] signalConditions() ... done
[10:32:27.440] Future state: ‘finished’
[10:32:27.440] result() for ClusterFuture ...
[10:32:27.440] - result already collected: FutureResult
[10:32:27.440] result() for ClusterFuture ... done
[10:32:27.440] signalConditions() ...
[10:32:27.440]  - include = ‘condition’
[10:32:27.440]  - exclude = ‘immediateCondition’
[10:32:27.440]  - resignal = TRUE
[10:32:27.440]  - Number of conditions: 1
[10:32:27.441]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[10:32:27.441] signalConditions() ... done
Error in withCallingHandlers({ : '...' used in an incorrect context
[1] "Error in withCallingHandlers({ : '...' used in an incorrect context\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        sum(x, y, ...)    }}, immediateCondition = function(cond) {    sendCondition <- ...future.makeSendCondition()    sendCondition(cond)    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): '...' used in an incorrect context>
** Sum function 'E' with plan('multisession') ...
function (...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    globals <- globals::globalsByName("...", envir = environment())
    f <- future({
        fcn <- function() sum(...)
        fcn()
    }, envir = parent.frame(), globals = globals)
    y <- value(f)
    y
}
<bytecode: 0x5644c7a692f0>
Arguments '...' exists: TRUE
[10:32:27.442] getGlobalsAndPackages() ...
[10:32:27.442] - globals passed as-is: [1] ‘...’
[10:32:27.442] Resolving globals: FALSE
[10:32:27.442] Tweak future expression to call with '...' arguments ...
[10:32:27.442] {
[10:32:27.442]     do.call(function(...) {
[10:32:27.442]         fcn <- function() sum(...)
[10:32:27.442]         fcn()
[10:32:27.442]     }, args = future.call.arguments)
[10:32:27.442] }
[10:32:27.442] Tweak future expression to call with '...' arguments ... DONE
[10:32:27.443] The total size of the 1 globals is 112 bytes (112 bytes)
[10:32:27.443] The total size of the 1 globals exported for future expression (‘{; fcn <- function() sum(...); fcn(); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘future.call.arguments’ (112 bytes of class ‘list’)
[10:32:27.443] - globals: [1] ‘future.call.arguments’
[10:32:27.443] 
[10:32:27.443] getGlobalsAndPackages() ... DONE
[10:32:27.444] run() for ‘Future’ ...
[10:32:27.444] - state: ‘created’
[10:32:27.444] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:32:27.457] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:27.457] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:32:27.458]   - Field: ‘node’
[10:32:27.458]   - Field: ‘label’
[10:32:27.458]   - Field: ‘local’
[10:32:27.458]   - Field: ‘owner’
[10:32:27.458]   - Field: ‘envir’
[10:32:27.458]   - Field: ‘workers’
[10:32:27.458]   - Field: ‘packages’
[10:32:27.458]   - Field: ‘gc’
[10:32:27.458]   - Field: ‘conditions’
[10:32:27.458]   - Field: ‘persistent’
[10:32:27.459]   - Field: ‘expr’
[10:32:27.459]   - Field: ‘uuid’
[10:32:27.459]   - Field: ‘seed’
[10:32:27.459]   - Field: ‘version’
[10:32:27.459]   - Field: ‘result’
[10:32:27.459]   - Field: ‘asynchronous’
[10:32:27.459]   - Field: ‘calls’
[10:32:27.459]   - Field: ‘globals’
[10:32:27.459]   - Field: ‘stdout’
[10:32:27.459]   - Field: ‘earlySignal’
[10:32:27.459]   - Field: ‘lazy’
[10:32:27.460]   - Field: ‘state’
[10:32:27.460] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:32:27.460] - Launch lazy future ...
[10:32:27.460] Packages needed by the future expression (n = 0): <none>
[10:32:27.460] Packages needed by future strategies (n = 0): <none>
[10:32:27.461] {
[10:32:27.461]     {
[10:32:27.461]         {
[10:32:27.461]             ...future.startTime <- base::Sys.time()
[10:32:27.461]             {
[10:32:27.461]                 {
[10:32:27.461]                   {
[10:32:27.461]                     {
[10:32:27.461]                       base::local({
[10:32:27.461]                         has_future <- base::requireNamespace("future", 
[10:32:27.461]                           quietly = TRUE)
[10:32:27.461]                         if (has_future) {
[10:32:27.461]                           ns <- base::getNamespace("future")
[10:32:27.461]                           version <- ns[[".package"]][["version"]]
[10:32:27.461]                           if (is.null(version)) 
[10:32:27.461]                             version <- utils::packageVersion("future")
[10:32:27.461]                         }
[10:32:27.461]                         else {
[10:32:27.461]                           version <- NULL
[10:32:27.461]                         }
[10:32:27.461]                         if (!has_future || version < "1.8.0") {
[10:32:27.461]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:27.461]                             "", base::R.version$version.string), 
[10:32:27.461]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:27.461]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:27.461]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:27.461]                               "release", "version")], collapse = " "), 
[10:32:27.461]                             hostname = base::Sys.info()[["nodename"]])
[10:32:27.461]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:27.461]                             info)
[10:32:27.461]                           info <- base::paste(info, collapse = "; ")
[10:32:27.461]                           if (!has_future) {
[10:32:27.461]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:27.461]                               info)
[10:32:27.461]                           }
[10:32:27.461]                           else {
[10:32:27.461]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:27.461]                               info, version)
[10:32:27.461]                           }
[10:32:27.461]                           base::stop(msg)
[10:32:27.461]                         }
[10:32:27.461]                       })
[10:32:27.461]                     }
[10:32:27.461]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:27.461]                     base::options(mc.cores = 1L)
[10:32:27.461]                   }
[10:32:27.461]                   ...future.strategy.old <- future::plan("list")
[10:32:27.461]                   options(future.plan = NULL)
[10:32:27.461]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:27.461]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:27.461]                 }
[10:32:27.461]                 ...future.workdir <- getwd()
[10:32:27.461]             }
[10:32:27.461]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:27.461]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:27.461]         }
[10:32:27.461]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:27.461]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:27.461]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:27.461]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:27.461]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:27.461]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:27.461]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:27.461]             base::names(...future.oldOptions))
[10:32:27.461]     }
[10:32:27.461]     if (FALSE) {
[10:32:27.461]     }
[10:32:27.461]     else {
[10:32:27.461]         if (TRUE) {
[10:32:27.461]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:27.461]                 open = "w")
[10:32:27.461]         }
[10:32:27.461]         else {
[10:32:27.461]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:27.461]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:27.461]         }
[10:32:27.461]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:27.461]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:27.461]             base::sink(type = "output", split = FALSE)
[10:32:27.461]             base::close(...future.stdout)
[10:32:27.461]         }, add = TRUE)
[10:32:27.461]     }
[10:32:27.461]     ...future.frame <- base::sys.nframe()
[10:32:27.461]     ...future.conditions <- base::list()
[10:32:27.461]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:27.461]     if (FALSE) {
[10:32:27.461]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:27.461]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:27.461]     }
[10:32:27.461]     ...future.result <- base::tryCatch({
[10:32:27.461]         base::withCallingHandlers({
[10:32:27.461]             ...future.value <- base::withVisible(base::local({
[10:32:27.461]                 ...future.makeSendCondition <- base::local({
[10:32:27.461]                   sendCondition <- NULL
[10:32:27.461]                   function(frame = 1L) {
[10:32:27.461]                     if (is.function(sendCondition)) 
[10:32:27.461]                       return(sendCondition)
[10:32:27.461]                     ns <- getNamespace("parallel")
[10:32:27.461]                     if (exists("sendData", mode = "function", 
[10:32:27.461]                       envir = ns)) {
[10:32:27.461]                       parallel_sendData <- get("sendData", mode = "function", 
[10:32:27.461]                         envir = ns)
[10:32:27.461]                       envir <- sys.frame(frame)
[10:32:27.461]                       master <- NULL
[10:32:27.461]                       while (!identical(envir, .GlobalEnv) && 
[10:32:27.461]                         !identical(envir, emptyenv())) {
[10:32:27.461]                         if (exists("master", mode = "list", envir = envir, 
[10:32:27.461]                           inherits = FALSE)) {
[10:32:27.461]                           master <- get("master", mode = "list", 
[10:32:27.461]                             envir = envir, inherits = FALSE)
[10:32:27.461]                           if (inherits(master, c("SOCKnode", 
[10:32:27.461]                             "SOCK0node"))) {
[10:32:27.461]                             sendCondition <<- function(cond) {
[10:32:27.461]                               data <- list(type = "VALUE", value = cond, 
[10:32:27.461]                                 success = TRUE)
[10:32:27.461]                               parallel_sendData(master, data)
[10:32:27.461]                             }
[10:32:27.461]                             return(sendCondition)
[10:32:27.461]                           }
[10:32:27.461]                         }
[10:32:27.461]                         frame <- frame + 1L
[10:32:27.461]                         envir <- sys.frame(frame)
[10:32:27.461]                       }
[10:32:27.461]                     }
[10:32:27.461]                     sendCondition <<- function(cond) NULL
[10:32:27.461]                   }
[10:32:27.461]                 })
[10:32:27.461]                 withCallingHandlers({
[10:32:27.461]                   {
[10:32:27.461]                     do.call(function(...) {
[10:32:27.461]                       fcn <- function() sum(...)
[10:32:27.461]                       fcn()
[10:32:27.461]                     }, args = future.call.arguments)
[10:32:27.461]                   }
[10:32:27.461]                 }, immediateCondition = function(cond) {
[10:32:27.461]                   sendCondition <- ...future.makeSendCondition()
[10:32:27.461]                   sendCondition(cond)
[10:32:27.461]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:27.461]                   {
[10:32:27.461]                     inherits <- base::inherits
[10:32:27.461]                     invokeRestart <- base::invokeRestart
[10:32:27.461]                     is.null <- base::is.null
[10:32:27.461]                     muffled <- FALSE
[10:32:27.461]                     if (inherits(cond, "message")) {
[10:32:27.461]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:27.461]                       if (muffled) 
[10:32:27.461]                         invokeRestart("muffleMessage")
[10:32:27.461]                     }
[10:32:27.461]                     else if (inherits(cond, "warning")) {
[10:32:27.461]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:27.461]                       if (muffled) 
[10:32:27.461]                         invokeRestart("muffleWarning")
[10:32:27.461]                     }
[10:32:27.461]                     else if (inherits(cond, "condition")) {
[10:32:27.461]                       if (!is.null(pattern)) {
[10:32:27.461]                         computeRestarts <- base::computeRestarts
[10:32:27.461]                         grepl <- base::grepl
[10:32:27.461]                         restarts <- computeRestarts(cond)
[10:32:27.461]                         for (restart in restarts) {
[10:32:27.461]                           name <- restart$name
[10:32:27.461]                           if (is.null(name)) 
[10:32:27.461]                             next
[10:32:27.461]                           if (!grepl(pattern, name)) 
[10:32:27.461]                             next
[10:32:27.461]                           invokeRestart(restart)
[10:32:27.461]                           muffled <- TRUE
[10:32:27.461]                           break
[10:32:27.461]                         }
[10:32:27.461]                       }
[10:32:27.461]                     }
[10:32:27.461]                     invisible(muffled)
[10:32:27.461]                   }
[10:32:27.461]                   muffleCondition(cond)
[10:32:27.461]                 })
[10:32:27.461]             }))
[10:32:27.461]             future::FutureResult(value = ...future.value$value, 
[10:32:27.461]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:27.461]                   ...future.rng), globalenv = if (FALSE) 
[10:32:27.461]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:27.461]                     ...future.globalenv.names))
[10:32:27.461]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:27.461]         }, condition = base::local({
[10:32:27.461]             c <- base::c
[10:32:27.461]             inherits <- base::inherits
[10:32:27.461]             invokeRestart <- base::invokeRestart
[10:32:27.461]             length <- base::length
[10:32:27.461]             list <- base::list
[10:32:27.461]             seq.int <- base::seq.int
[10:32:27.461]             signalCondition <- base::signalCondition
[10:32:27.461]             sys.calls <- base::sys.calls
[10:32:27.461]             `[[` <- base::`[[`
[10:32:27.461]             `+` <- base::`+`
[10:32:27.461]             `<<-` <- base::`<<-`
[10:32:27.461]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:27.461]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:27.461]                   3L)]
[10:32:27.461]             }
[10:32:27.461]             function(cond) {
[10:32:27.461]                 is_error <- inherits(cond, "error")
[10:32:27.461]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:27.461]                   NULL)
[10:32:27.461]                 if (is_error) {
[10:32:27.461]                   sessionInformation <- function() {
[10:32:27.461]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:27.461]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:27.461]                       search = base::search(), system = base::Sys.info())
[10:32:27.461]                   }
[10:32:27.461]                   ...future.conditions[[length(...future.conditions) + 
[10:32:27.461]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:27.461]                     cond$call), session = sessionInformation(), 
[10:32:27.461]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:27.461]                   signalCondition(cond)
[10:32:27.461]                 }
[10:32:27.461]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:27.461]                 "immediateCondition"))) {
[10:32:27.461]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:27.461]                   ...future.conditions[[length(...future.conditions) + 
[10:32:27.461]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:27.461]                   if (TRUE && !signal) {
[10:32:27.461]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:27.461]                     {
[10:32:27.461]                       inherits <- base::inherits
[10:32:27.461]                       invokeRestart <- base::invokeRestart
[10:32:27.461]                       is.null <- base::is.null
[10:32:27.461]                       muffled <- FALSE
[10:32:27.461]                       if (inherits(cond, "message")) {
[10:32:27.461]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:27.461]                         if (muffled) 
[10:32:27.461]                           invokeRestart("muffleMessage")
[10:32:27.461]                       }
[10:32:27.461]                       else if (inherits(cond, "warning")) {
[10:32:27.461]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:27.461]                         if (muffled) 
[10:32:27.461]                           invokeRestart("muffleWarning")
[10:32:27.461]                       }
[10:32:27.461]                       else if (inherits(cond, "condition")) {
[10:32:27.461]                         if (!is.null(pattern)) {
[10:32:27.461]                           computeRestarts <- base::computeRestarts
[10:32:27.461]                           grepl <- base::grepl
[10:32:27.461]                           restarts <- computeRestarts(cond)
[10:32:27.461]                           for (restart in restarts) {
[10:32:27.461]                             name <- restart$name
[10:32:27.461]                             if (is.null(name)) 
[10:32:27.461]                               next
[10:32:27.461]                             if (!grepl(pattern, name)) 
[10:32:27.461]                               next
[10:32:27.461]                             invokeRestart(restart)
[10:32:27.461]                             muffled <- TRUE
[10:32:27.461]                             break
[10:32:27.461]                           }
[10:32:27.461]                         }
[10:32:27.461]                       }
[10:32:27.461]                       invisible(muffled)
[10:32:27.461]                     }
[10:32:27.461]                     muffleCondition(cond, pattern = "^muffle")
[10:32:27.461]                   }
[10:32:27.461]                 }
[10:32:27.461]                 else {
[10:32:27.461]                   if (TRUE) {
[10:32:27.461]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:27.461]                     {
[10:32:27.461]                       inherits <- base::inherits
[10:32:27.461]                       invokeRestart <- base::invokeRestart
[10:32:27.461]                       is.null <- base::is.null
[10:32:27.461]                       muffled <- FALSE
[10:32:27.461]                       if (inherits(cond, "message")) {
[10:32:27.461]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:27.461]                         if (muffled) 
[10:32:27.461]                           invokeRestart("muffleMessage")
[10:32:27.461]                       }
[10:32:27.461]                       else if (inherits(cond, "warning")) {
[10:32:27.461]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:27.461]                         if (muffled) 
[10:32:27.461]                           invokeRestart("muffleWarning")
[10:32:27.461]                       }
[10:32:27.461]                       else if (inherits(cond, "condition")) {
[10:32:27.461]                         if (!is.null(pattern)) {
[10:32:27.461]                           computeRestarts <- base::computeRestarts
[10:32:27.461]                           grepl <- base::grepl
[10:32:27.461]                           restarts <- computeRestarts(cond)
[10:32:27.461]                           for (restart in restarts) {
[10:32:27.461]                             name <- restart$name
[10:32:27.461]                             if (is.null(name)) 
[10:32:27.461]                               next
[10:32:27.461]                             if (!grepl(pattern, name)) 
[10:32:27.461]                               next
[10:32:27.461]                             invokeRestart(restart)
[10:32:27.461]                             muffled <- TRUE
[10:32:27.461]                             break
[10:32:27.461]                           }
[10:32:27.461]                         }
[10:32:27.461]                       }
[10:32:27.461]                       invisible(muffled)
[10:32:27.461]                     }
[10:32:27.461]                     muffleCondition(cond, pattern = "^muffle")
[10:32:27.461]                   }
[10:32:27.461]                 }
[10:32:27.461]             }
[10:32:27.461]         }))
[10:32:27.461]     }, error = function(ex) {
[10:32:27.461]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:27.461]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:27.461]                 ...future.rng), started = ...future.startTime, 
[10:32:27.461]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:27.461]             version = "1.8"), class = "FutureResult")
[10:32:27.461]     }, finally = {
[10:32:27.461]         if (!identical(...future.workdir, getwd())) 
[10:32:27.461]             setwd(...future.workdir)
[10:32:27.461]         {
[10:32:27.461]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:27.461]                 ...future.oldOptions$nwarnings <- NULL
[10:32:27.461]             }
[10:32:27.461]             base::options(...future.oldOptions)
[10:32:27.461]             if (.Platform$OS.type == "windows") {
[10:32:27.461]                 old_names <- names(...future.oldEnvVars)
[10:32:27.461]                 envs <- base::Sys.getenv()
[10:32:27.461]                 names <- names(envs)
[10:32:27.461]                 common <- intersect(names, old_names)
[10:32:27.461]                 added <- setdiff(names, old_names)
[10:32:27.461]                 removed <- setdiff(old_names, names)
[10:32:27.461]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:27.461]                   envs[common]]
[10:32:27.461]                 NAMES <- toupper(changed)
[10:32:27.461]                 args <- list()
[10:32:27.461]                 for (kk in seq_along(NAMES)) {
[10:32:27.461]                   name <- changed[[kk]]
[10:32:27.461]                   NAME <- NAMES[[kk]]
[10:32:27.461]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:27.461]                     next
[10:32:27.461]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:27.461]                 }
[10:32:27.461]                 NAMES <- toupper(added)
[10:32:27.461]                 for (kk in seq_along(NAMES)) {
[10:32:27.461]                   name <- added[[kk]]
[10:32:27.461]                   NAME <- NAMES[[kk]]
[10:32:27.461]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:27.461]                     next
[10:32:27.461]                   args[[name]] <- ""
[10:32:27.461]                 }
[10:32:27.461]                 NAMES <- toupper(removed)
[10:32:27.461]                 for (kk in seq_along(NAMES)) {
[10:32:27.461]                   name <- removed[[kk]]
[10:32:27.461]                   NAME <- NAMES[[kk]]
[10:32:27.461]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:27.461]                     next
[10:32:27.461]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:27.461]                 }
[10:32:27.461]                 if (length(args) > 0) 
[10:32:27.461]                   base::do.call(base::Sys.setenv, args = args)
[10:32:27.461]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:27.461]             }
[10:32:27.461]             else {
[10:32:27.461]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:27.461]             }
[10:32:27.461]             {
[10:32:27.461]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:27.461]                   0L) {
[10:32:27.461]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:27.461]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:27.461]                   base::options(opts)
[10:32:27.461]                 }
[10:32:27.461]                 {
[10:32:27.461]                   {
[10:32:27.461]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:27.461]                     NULL
[10:32:27.461]                   }
[10:32:27.461]                   options(future.plan = NULL)
[10:32:27.461]                   if (is.na(NA_character_)) 
[10:32:27.461]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:27.461]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:27.461]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:27.461]                     .init = FALSE)
[10:32:27.461]                 }
[10:32:27.461]             }
[10:32:27.461]         }
[10:32:27.461]     })
[10:32:27.461]     if (TRUE) {
[10:32:27.461]         base::sink(type = "output", split = FALSE)
[10:32:27.461]         if (TRUE) {
[10:32:27.461]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:27.461]         }
[10:32:27.461]         else {
[10:32:27.461]             ...future.result["stdout"] <- base::list(NULL)
[10:32:27.461]         }
[10:32:27.461]         base::close(...future.stdout)
[10:32:27.461]         ...future.stdout <- NULL
[10:32:27.461]     }
[10:32:27.461]     ...future.result$conditions <- ...future.conditions
[10:32:27.461]     ...future.result$finished <- base::Sys.time()
[10:32:27.461]     ...future.result
[10:32:27.461] }
[10:32:27.463] Exporting 1 global objects (112 bytes) to cluster node #1 ...
[10:32:27.463] Exporting ‘future.call.arguments’ (112 bytes) to cluster node #1 ...
[10:32:27.464] Exporting ‘future.call.arguments’ (112 bytes) to cluster node #1 ... DONE
[10:32:27.464] Exporting 1 global objects (112 bytes) to cluster node #1 ... DONE
[10:32:27.464] MultisessionFuture started
[10:32:27.464] - Launch lazy future ... done
[10:32:27.464] run() for ‘MultisessionFuture’ ... done
[10:32:27.465] result() for ClusterFuture ...
[10:32:27.465] receiveMessageFromWorker() for ClusterFuture ...
[10:32:27.465] - Validating connection of MultisessionFuture
[10:32:27.466] - received message: FutureResult
[10:32:27.466] - Received FutureResult
[10:32:27.466] - Erased future from FutureRegistry
[10:32:27.466] result() for ClusterFuture ...
[10:32:27.466] - result already collected: FutureResult
[10:32:27.467] result() for ClusterFuture ... done
[10:32:27.467] receiveMessageFromWorker() for ClusterFuture ... done
[10:32:27.467] result() for ClusterFuture ... done
[10:32:27.467] result() for ClusterFuture ...
[10:32:27.467] - result already collected: FutureResult
[10:32:27.467] result() for ClusterFuture ... done
[1] 6
** Sum function 'F' with plan('multisession') ...
function (x, y) 
{
    message("Using '...' in a formula")
    fcn <- function(x, y) {
        z = ~list(...)
        sum(x, y)
    }
    f <- future(fcn(x, y))
    y <- value(f)
    y
}
<bytecode: 0x5644c62fa9b0>
Using '...' in a formula
[10:32:27.467] getGlobalsAndPackages() ...
[10:32:27.467] Searching for globals...
[10:32:27.470] - globals found: [9] ‘fcn’, ‘x’, ‘y’, ‘{’, ‘=’, ‘~’, ‘list’, ‘...’, ‘sum’
[10:32:27.470] Searching for globals ... DONE
[10:32:27.470] Resolving globals: FALSE
[10:32:27.470] Tweak future expression to call with '...' arguments ...
[10:32:27.471] The total size of the 3 globals is 4.18 KiB (4280 bytes)
[10:32:27.471] The total size of the 3 globals exported for future expression (‘fcn(x, y)’) is 4.18 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘fcn’ (4.07 KiB of class ‘function’), ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[10:32:27.471] - globals: [3] ‘fcn’, ‘x’, ‘y’
[10:32:27.471] 
[10:32:27.471] getGlobalsAndPackages() ... DONE
[10:32:27.472] run() for ‘Future’ ...
[10:32:27.472] - state: ‘created’
[10:32:27.472] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:32:27.485] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:27.485] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:32:27.485]   - Field: ‘node’
[10:32:27.486]   - Field: ‘label’
[10:32:27.486]   - Field: ‘local’
[10:32:27.486]   - Field: ‘owner’
[10:32:27.486]   - Field: ‘envir’
[10:32:27.486]   - Field: ‘workers’
[10:32:27.486]   - Field: ‘packages’
[10:32:27.486]   - Field: ‘gc’
[10:32:27.486]   - Field: ‘conditions’
[10:32:27.486]   - Field: ‘persistent’
[10:32:27.486]   - Field: ‘expr’
[10:32:27.486]   - Field: ‘uuid’
[10:32:27.487]   - Field: ‘seed’
[10:32:27.487]   - Field: ‘version’
[10:32:27.487]   - Field: ‘result’
[10:32:27.487]   - Field: ‘asynchronous’
[10:32:27.487]   - Field: ‘calls’
[10:32:27.487]   - Field: ‘globals’
[10:32:27.487]   - Field: ‘stdout’
[10:32:27.487]   - Field: ‘earlySignal’
[10:32:27.487]   - Field: ‘lazy’
[10:32:27.487]   - Field: ‘state’
[10:32:27.487] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:32:27.488] - Launch lazy future ...
[10:32:27.488] Packages needed by the future expression (n = 0): <none>
[10:32:27.488] Packages needed by future strategies (n = 0): <none>
[10:32:27.488] {
[10:32:27.488]     {
[10:32:27.488]         {
[10:32:27.488]             ...future.startTime <- base::Sys.time()
[10:32:27.488]             {
[10:32:27.488]                 {
[10:32:27.488]                   {
[10:32:27.488]                     {
[10:32:27.488]                       base::local({
[10:32:27.488]                         has_future <- base::requireNamespace("future", 
[10:32:27.488]                           quietly = TRUE)
[10:32:27.488]                         if (has_future) {
[10:32:27.488]                           ns <- base::getNamespace("future")
[10:32:27.488]                           version <- ns[[".package"]][["version"]]
[10:32:27.488]                           if (is.null(version)) 
[10:32:27.488]                             version <- utils::packageVersion("future")
[10:32:27.488]                         }
[10:32:27.488]                         else {
[10:32:27.488]                           version <- NULL
[10:32:27.488]                         }
[10:32:27.488]                         if (!has_future || version < "1.8.0") {
[10:32:27.488]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:27.488]                             "", base::R.version$version.string), 
[10:32:27.488]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:27.488]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:27.488]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:27.488]                               "release", "version")], collapse = " "), 
[10:32:27.488]                             hostname = base::Sys.info()[["nodename"]])
[10:32:27.488]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:27.488]                             info)
[10:32:27.488]                           info <- base::paste(info, collapse = "; ")
[10:32:27.488]                           if (!has_future) {
[10:32:27.488]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:27.488]                               info)
[10:32:27.488]                           }
[10:32:27.488]                           else {
[10:32:27.488]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:27.488]                               info, version)
[10:32:27.488]                           }
[10:32:27.488]                           base::stop(msg)
[10:32:27.488]                         }
[10:32:27.488]                       })
[10:32:27.488]                     }
[10:32:27.488]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:27.488]                     base::options(mc.cores = 1L)
[10:32:27.488]                   }
[10:32:27.488]                   ...future.strategy.old <- future::plan("list")
[10:32:27.488]                   options(future.plan = NULL)
[10:32:27.488]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:27.488]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:27.488]                 }
[10:32:27.488]                 ...future.workdir <- getwd()
[10:32:27.488]             }
[10:32:27.488]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:27.488]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:27.488]         }
[10:32:27.488]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:27.488]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:27.488]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:27.488]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:27.488]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:27.488]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:27.488]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:27.488]             base::names(...future.oldOptions))
[10:32:27.488]     }
[10:32:27.488]     if (FALSE) {
[10:32:27.488]     }
[10:32:27.488]     else {
[10:32:27.488]         if (TRUE) {
[10:32:27.488]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:27.488]                 open = "w")
[10:32:27.488]         }
[10:32:27.488]         else {
[10:32:27.488]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:27.488]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:27.488]         }
[10:32:27.488]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:27.488]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:27.488]             base::sink(type = "output", split = FALSE)
[10:32:27.488]             base::close(...future.stdout)
[10:32:27.488]         }, add = TRUE)
[10:32:27.488]     }
[10:32:27.488]     ...future.frame <- base::sys.nframe()
[10:32:27.488]     ...future.conditions <- base::list()
[10:32:27.488]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:27.488]     if (FALSE) {
[10:32:27.488]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:27.488]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:27.488]     }
[10:32:27.488]     ...future.result <- base::tryCatch({
[10:32:27.488]         base::withCallingHandlers({
[10:32:27.488]             ...future.value <- base::withVisible(base::local({
[10:32:27.488]                 ...future.makeSendCondition <- base::local({
[10:32:27.488]                   sendCondition <- NULL
[10:32:27.488]                   function(frame = 1L) {
[10:32:27.488]                     if (is.function(sendCondition)) 
[10:32:27.488]                       return(sendCondition)
[10:32:27.488]                     ns <- getNamespace("parallel")
[10:32:27.488]                     if (exists("sendData", mode = "function", 
[10:32:27.488]                       envir = ns)) {
[10:32:27.488]                       parallel_sendData <- get("sendData", mode = "function", 
[10:32:27.488]                         envir = ns)
[10:32:27.488]                       envir <- sys.frame(frame)
[10:32:27.488]                       master <- NULL
[10:32:27.488]                       while (!identical(envir, .GlobalEnv) && 
[10:32:27.488]                         !identical(envir, emptyenv())) {
[10:32:27.488]                         if (exists("master", mode = "list", envir = envir, 
[10:32:27.488]                           inherits = FALSE)) {
[10:32:27.488]                           master <- get("master", mode = "list", 
[10:32:27.488]                             envir = envir, inherits = FALSE)
[10:32:27.488]                           if (inherits(master, c("SOCKnode", 
[10:32:27.488]                             "SOCK0node"))) {
[10:32:27.488]                             sendCondition <<- function(cond) {
[10:32:27.488]                               data <- list(type = "VALUE", value = cond, 
[10:32:27.488]                                 success = TRUE)
[10:32:27.488]                               parallel_sendData(master, data)
[10:32:27.488]                             }
[10:32:27.488]                             return(sendCondition)
[10:32:27.488]                           }
[10:32:27.488]                         }
[10:32:27.488]                         frame <- frame + 1L
[10:32:27.488]                         envir <- sys.frame(frame)
[10:32:27.488]                       }
[10:32:27.488]                     }
[10:32:27.488]                     sendCondition <<- function(cond) NULL
[10:32:27.488]                   }
[10:32:27.488]                 })
[10:32:27.488]                 withCallingHandlers({
[10:32:27.488]                   fcn(x, y)
[10:32:27.488]                 }, immediateCondition = function(cond) {
[10:32:27.488]                   sendCondition <- ...future.makeSendCondition()
[10:32:27.488]                   sendCondition(cond)
[10:32:27.488]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:27.488]                   {
[10:32:27.488]                     inherits <- base::inherits
[10:32:27.488]                     invokeRestart <- base::invokeRestart
[10:32:27.488]                     is.null <- base::is.null
[10:32:27.488]                     muffled <- FALSE
[10:32:27.488]                     if (inherits(cond, "message")) {
[10:32:27.488]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:27.488]                       if (muffled) 
[10:32:27.488]                         invokeRestart("muffleMessage")
[10:32:27.488]                     }
[10:32:27.488]                     else if (inherits(cond, "warning")) {
[10:32:27.488]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:27.488]                       if (muffled) 
[10:32:27.488]                         invokeRestart("muffleWarning")
[10:32:27.488]                     }
[10:32:27.488]                     else if (inherits(cond, "condition")) {
[10:32:27.488]                       if (!is.null(pattern)) {
[10:32:27.488]                         computeRestarts <- base::computeRestarts
[10:32:27.488]                         grepl <- base::grepl
[10:32:27.488]                         restarts <- computeRestarts(cond)
[10:32:27.488]                         for (restart in restarts) {
[10:32:27.488]                           name <- restart$name
[10:32:27.488]                           if (is.null(name)) 
[10:32:27.488]                             next
[10:32:27.488]                           if (!grepl(pattern, name)) 
[10:32:27.488]                             next
[10:32:27.488]                           invokeRestart(restart)
[10:32:27.488]                           muffled <- TRUE
[10:32:27.488]                           break
[10:32:27.488]                         }
[10:32:27.488]                       }
[10:32:27.488]                     }
[10:32:27.488]                     invisible(muffled)
[10:32:27.488]                   }
[10:32:27.488]                   muffleCondition(cond)
[10:32:27.488]                 })
[10:32:27.488]             }))
[10:32:27.488]             future::FutureResult(value = ...future.value$value, 
[10:32:27.488]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:27.488]                   ...future.rng), globalenv = if (FALSE) 
[10:32:27.488]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:27.488]                     ...future.globalenv.names))
[10:32:27.488]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:27.488]         }, condition = base::local({
[10:32:27.488]             c <- base::c
[10:32:27.488]             inherits <- base::inherits
[10:32:27.488]             invokeRestart <- base::invokeRestart
[10:32:27.488]             length <- base::length
[10:32:27.488]             list <- base::list
[10:32:27.488]             seq.int <- base::seq.int
[10:32:27.488]             signalCondition <- base::signalCondition
[10:32:27.488]             sys.calls <- base::sys.calls
[10:32:27.488]             `[[` <- base::`[[`
[10:32:27.488]             `+` <- base::`+`
[10:32:27.488]             `<<-` <- base::`<<-`
[10:32:27.488]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:27.488]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:27.488]                   3L)]
[10:32:27.488]             }
[10:32:27.488]             function(cond) {
[10:32:27.488]                 is_error <- inherits(cond, "error")
[10:32:27.488]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:27.488]                   NULL)
[10:32:27.488]                 if (is_error) {
[10:32:27.488]                   sessionInformation <- function() {
[10:32:27.488]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:27.488]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:27.488]                       search = base::search(), system = base::Sys.info())
[10:32:27.488]                   }
[10:32:27.488]                   ...future.conditions[[length(...future.conditions) + 
[10:32:27.488]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:27.488]                     cond$call), session = sessionInformation(), 
[10:32:27.488]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:27.488]                   signalCondition(cond)
[10:32:27.488]                 }
[10:32:27.488]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:27.488]                 "immediateCondition"))) {
[10:32:27.488]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:27.488]                   ...future.conditions[[length(...future.conditions) + 
[10:32:27.488]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:27.488]                   if (TRUE && !signal) {
[10:32:27.488]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:27.488]                     {
[10:32:27.488]                       inherits <- base::inherits
[10:32:27.488]                       invokeRestart <- base::invokeRestart
[10:32:27.488]                       is.null <- base::is.null
[10:32:27.488]                       muffled <- FALSE
[10:32:27.488]                       if (inherits(cond, "message")) {
[10:32:27.488]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:27.488]                         if (muffled) 
[10:32:27.488]                           invokeRestart("muffleMessage")
[10:32:27.488]                       }
[10:32:27.488]                       else if (inherits(cond, "warning")) {
[10:32:27.488]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:27.488]                         if (muffled) 
[10:32:27.488]                           invokeRestart("muffleWarning")
[10:32:27.488]                       }
[10:32:27.488]                       else if (inherits(cond, "condition")) {
[10:32:27.488]                         if (!is.null(pattern)) {
[10:32:27.488]                           computeRestarts <- base::computeRestarts
[10:32:27.488]                           grepl <- base::grepl
[10:32:27.488]                           restarts <- computeRestarts(cond)
[10:32:27.488]                           for (restart in restarts) {
[10:32:27.488]                             name <- restart$name
[10:32:27.488]                             if (is.null(name)) 
[10:32:27.488]                               next
[10:32:27.488]                             if (!grepl(pattern, name)) 
[10:32:27.488]                               next
[10:32:27.488]                             invokeRestart(restart)
[10:32:27.488]                             muffled <- TRUE
[10:32:27.488]                             break
[10:32:27.488]                           }
[10:32:27.488]                         }
[10:32:27.488]                       }
[10:32:27.488]                       invisible(muffled)
[10:32:27.488]                     }
[10:32:27.488]                     muffleCondition(cond, pattern = "^muffle")
[10:32:27.488]                   }
[10:32:27.488]                 }
[10:32:27.488]                 else {
[10:32:27.488]                   if (TRUE) {
[10:32:27.488]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:27.488]                     {
[10:32:27.488]                       inherits <- base::inherits
[10:32:27.488]                       invokeRestart <- base::invokeRestart
[10:32:27.488]                       is.null <- base::is.null
[10:32:27.488]                       muffled <- FALSE
[10:32:27.488]                       if (inherits(cond, "message")) {
[10:32:27.488]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:27.488]                         if (muffled) 
[10:32:27.488]                           invokeRestart("muffleMessage")
[10:32:27.488]                       }
[10:32:27.488]                       else if (inherits(cond, "warning")) {
[10:32:27.488]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:27.488]                         if (muffled) 
[10:32:27.488]                           invokeRestart("muffleWarning")
[10:32:27.488]                       }
[10:32:27.488]                       else if (inherits(cond, "condition")) {
[10:32:27.488]                         if (!is.null(pattern)) {
[10:32:27.488]                           computeRestarts <- base::computeRestarts
[10:32:27.488]                           grepl <- base::grepl
[10:32:27.488]                           restarts <- computeRestarts(cond)
[10:32:27.488]                           for (restart in restarts) {
[10:32:27.488]                             name <- restart$name
[10:32:27.488]                             if (is.null(name)) 
[10:32:27.488]                               next
[10:32:27.488]                             if (!grepl(pattern, name)) 
[10:32:27.488]                               next
[10:32:27.488]                             invokeRestart(restart)
[10:32:27.488]                             muffled <- TRUE
[10:32:27.488]                             break
[10:32:27.488]                           }
[10:32:27.488]                         }
[10:32:27.488]                       }
[10:32:27.488]                       invisible(muffled)
[10:32:27.488]                     }
[10:32:27.488]                     muffleCondition(cond, pattern = "^muffle")
[10:32:27.488]                   }
[10:32:27.488]                 }
[10:32:27.488]             }
[10:32:27.488]         }))
[10:32:27.488]     }, error = function(ex) {
[10:32:27.488]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:27.488]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:27.488]                 ...future.rng), started = ...future.startTime, 
[10:32:27.488]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:27.488]             version = "1.8"), class = "FutureResult")
[10:32:27.488]     }, finally = {
[10:32:27.488]         if (!identical(...future.workdir, getwd())) 
[10:32:27.488]             setwd(...future.workdir)
[10:32:27.488]         {
[10:32:27.488]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:27.488]                 ...future.oldOptions$nwarnings <- NULL
[10:32:27.488]             }
[10:32:27.488]             base::options(...future.oldOptions)
[10:32:27.488]             if (.Platform$OS.type == "windows") {
[10:32:27.488]                 old_names <- names(...future.oldEnvVars)
[10:32:27.488]                 envs <- base::Sys.getenv()
[10:32:27.488]                 names <- names(envs)
[10:32:27.488]                 common <- intersect(names, old_names)
[10:32:27.488]                 added <- setdiff(names, old_names)
[10:32:27.488]                 removed <- setdiff(old_names, names)
[10:32:27.488]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:27.488]                   envs[common]]
[10:32:27.488]                 NAMES <- toupper(changed)
[10:32:27.488]                 args <- list()
[10:32:27.488]                 for (kk in seq_along(NAMES)) {
[10:32:27.488]                   name <- changed[[kk]]
[10:32:27.488]                   NAME <- NAMES[[kk]]
[10:32:27.488]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:27.488]                     next
[10:32:27.488]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:27.488]                 }
[10:32:27.488]                 NAMES <- toupper(added)
[10:32:27.488]                 for (kk in seq_along(NAMES)) {
[10:32:27.488]                   name <- added[[kk]]
[10:32:27.488]                   NAME <- NAMES[[kk]]
[10:32:27.488]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:27.488]                     next
[10:32:27.488]                   args[[name]] <- ""
[10:32:27.488]                 }
[10:32:27.488]                 NAMES <- toupper(removed)
[10:32:27.488]                 for (kk in seq_along(NAMES)) {
[10:32:27.488]                   name <- removed[[kk]]
[10:32:27.488]                   NAME <- NAMES[[kk]]
[10:32:27.488]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:27.488]                     next
[10:32:27.488]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:27.488]                 }
[10:32:27.488]                 if (length(args) > 0) 
[10:32:27.488]                   base::do.call(base::Sys.setenv, args = args)
[10:32:27.488]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:27.488]             }
[10:32:27.488]             else {
[10:32:27.488]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:27.488]             }
[10:32:27.488]             {
[10:32:27.488]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:27.488]                   0L) {
[10:32:27.488]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:27.488]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:27.488]                   base::options(opts)
[10:32:27.488]                 }
[10:32:27.488]                 {
[10:32:27.488]                   {
[10:32:27.488]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:27.488]                     NULL
[10:32:27.488]                   }
[10:32:27.488]                   options(future.plan = NULL)
[10:32:27.488]                   if (is.na(NA_character_)) 
[10:32:27.488]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:27.488]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:27.488]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:27.488]                     .init = FALSE)
[10:32:27.488]                 }
[10:32:27.488]             }
[10:32:27.488]         }
[10:32:27.488]     })
[10:32:27.488]     if (TRUE) {
[10:32:27.488]         base::sink(type = "output", split = FALSE)
[10:32:27.488]         if (TRUE) {
[10:32:27.488]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:27.488]         }
[10:32:27.488]         else {
[10:32:27.488]             ...future.result["stdout"] <- base::list(NULL)
[10:32:27.488]         }
[10:32:27.488]         base::close(...future.stdout)
[10:32:27.488]         ...future.stdout <- NULL
[10:32:27.488]     }
[10:32:27.488]     ...future.result$conditions <- ...future.conditions
[10:32:27.488]     ...future.result$finished <- base::Sys.time()
[10:32:27.488]     ...future.result
[10:32:27.488] }
[10:32:27.491] Exporting 3 global objects (4.18 KiB) to cluster node #1 ...
[10:32:27.491] Exporting ‘fcn’ (4.07 KiB) to cluster node #1 ...
[10:32:27.491] Exporting ‘fcn’ (4.07 KiB) to cluster node #1 ... DONE
[10:32:27.491] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[10:32:27.492] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[10:32:27.492] Exporting ‘y’ (56 bytes) to cluster node #1 ...
[10:32:27.492] Exporting ‘y’ (56 bytes) to cluster node #1 ... DONE
[10:32:27.492] Exporting 3 global objects (4.18 KiB) to cluster node #1 ... DONE
[10:32:27.492] MultisessionFuture started
[10:32:27.493] - Launch lazy future ... done
[10:32:27.493] run() for ‘MultisessionFuture’ ... done
[10:32:27.493] result() for ClusterFuture ...
[10:32:27.493] receiveMessageFromWorker() for ClusterFuture ...
[10:32:27.493] - Validating connection of MultisessionFuture
[10:32:27.494] - received message: FutureResult
[10:32:27.494] - Received FutureResult
[10:32:27.494] - Erased future from FutureRegistry
[10:32:27.494] result() for ClusterFuture ...
[10:32:27.494] - result already collected: FutureResult
[10:32:27.494] result() for ClusterFuture ... done
[10:32:27.494] receiveMessageFromWorker() for ClusterFuture ... done
[10:32:27.494] result() for ClusterFuture ... done
[10:32:27.495] result() for ClusterFuture ...
[10:32:27.495] - result already collected: FutureResult
[10:32:27.495] result() for ClusterFuture ... done
[1] 6
Testing with 2 cores ... DONE
> 
> message("*** Global argument '...' ... DONE")
*** Global argument '...' ... DONE
> 
> source("incl/end.R")
[10:32:27.495] plan(): Setting new future strategy stack:
[10:32:27.496] List of future strategies:
[10:32:27.496] 1. FutureStrategy:
[10:32:27.496]    - args: function (..., envir = parent.frame())
[10:32:27.496]    - tweaked: FALSE
[10:32:27.496]    - call: future::plan(oplan)
[10:32:27.496] plan(): nbrOfWorkers() = 1
> 
