
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:36:10.034] plan(): Setting new future strategy stack:
[13:36:10.035] List of future strategies:
[13:36:10.035] 1. sequential:
[13:36:10.035]    - args: function (..., envir = parent.frame())
[13:36:10.035]    - tweaked: FALSE
[13:36:10.035]    - call: future::plan("sequential")
[13:36:10.048] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   message("*** Global argument '...' ...")
+ 
+   sum_fcns <- list()
+ 
+   sum_fcns$A <- function(x, ...) {
+     message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+     y %<-% { sum(x, ...) }
+     y
+   }
+ 
+ 
+   sum_fcns$B <- function(x, ...) {
+     sumt <- function(x) {
+       message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+       y %<-% { sum(x, ...) }
+       y
+     }
+     sumt(x)
+   }
+ 
+   sum_fcns$C <- function(x, y) {
+     message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+     y %<-% { sum(x, y) }
+     y
+   }
+ 
+   sum_fcns$D <- function(x, y) {
+     message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+     y %<-% { sum(x, y, ...) }
+     y
+   }
+ 
+   ## Issue/PR #400: Emulate how '...' may be used by the 'rlang' package
+   sum_fcns$E <- function(...) {
+     message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+ 
+     ## Grab '...' into a Globals object
+     globals <- globals::globalsByName("...", envir=environment())
+ 
+     ## Evaluate an expression with '...' in an environment that does not
+     ## have an '...' object - hence the parent.frame().  This will produce
+     ## an error unless we pass 'globals' which contains '...'
+     f <- future({
+       fcn <- function() sum(...)
+       fcn()
+     }, envir = parent.frame(), globals = globals)
+     y <- value(f)
+     y
+   }
+ 
+   ## Issue: https://github.com/HenrikBengtsson/globals/issues/72
+   sum_fcns$F <- function(x, y) {
+     message("Using '...' in a formula")
+ 
+     fcn <- function(x, y) {
+       z = ~ list(...)
+       sum(x, y)
+     }
+     
+     f <- future(fcn(x, y))
+     y <- value(f)
+     y
+   }
+ 
+ 
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("- plan('%s') ...", strategy))
+     plan(strategy, substitute = FALSE)
+ 
+     for (name in names(sum_fcns)) {
+       message(sprintf("** Sum function '%s' with plan('%s') ...", name, strategy))
+       sum_fcn <- sum_fcns[[name]]
+       print(sum_fcn)
+       y <- try(sum_fcn(1:2, 3))
+       print(y)
+       if (name %in% c("D")) {
+         stopifnot(inherits(y, "try-error"))
+       } else {
+         stopifnot(y == 6)
+       }
+     }
+   }
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
*** Global argument '...' ...
- plan('sequential') ...
[13:36:10.093] plan(): Setting new future strategy stack:
[13:36:10.093] List of future strategies:
[13:36:10.093] 1. sequential:
[13:36:10.093]    - args: function (..., envir = parent.frame())
[13:36:10.093]    - tweaked: FALSE
[13:36:10.093]    - call: plan(strategy, substitute = FALSE)
[13:36:10.103] plan(): nbrOfWorkers() = 1
** Sum function 'A' with plan('sequential') ...
function (x, ...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, ...)
    }
    y
}
<bytecode: 0x558322ef4160>
Arguments '...' exists: TRUE
[13:36:10.105] getGlobalsAndPackages() ...
[13:36:10.105] Searching for globals...
[13:36:10.113] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[13:36:10.113] Searching for globals ... DONE
[13:36:10.113] Resolving globals: FALSE
[13:36:10.113] Tweak future expression to call with '...' arguments ...
[13:36:10.113] {
[13:36:10.113]     do.call(function(...) {
[13:36:10.113]         sum(x, ...)
[13:36:10.113]     }, args = future.call.arguments)
[13:36:10.113] }
[13:36:10.113] Tweak future expression to call with '...' arguments ... DONE
[13:36:10.115] The total size of the 2 globals is 112 bytes (112 bytes)
[13:36:10.115] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[13:36:10.115] - globals: [2] ‘x’, ‘future.call.arguments’
[13:36:10.115] 
[13:36:10.115] getGlobalsAndPackages() ... DONE
[13:36:10.116] run() for ‘Future’ ...
[13:36:10.116] - state: ‘created’
[13:36:10.116] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:10.117] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:10.117] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:10.117]   - Field: ‘label’
[13:36:10.117]   - Field: ‘local’
[13:36:10.117]   - Field: ‘owner’
[13:36:10.117]   - Field: ‘envir’
[13:36:10.117]   - Field: ‘packages’
[13:36:10.117]   - Field: ‘gc’
[13:36:10.118]   - Field: ‘conditions’
[13:36:10.118]   - Field: ‘expr’
[13:36:10.118]   - Field: ‘uuid’
[13:36:10.118]   - Field: ‘seed’
[13:36:10.118]   - Field: ‘version’
[13:36:10.118]   - Field: ‘result’
[13:36:10.118]   - Field: ‘asynchronous’
[13:36:10.118]   - Field: ‘calls’
[13:36:10.118]   - Field: ‘globals’
[13:36:10.118]   - Field: ‘stdout’
[13:36:10.118]   - Field: ‘earlySignal’
[13:36:10.119]   - Field: ‘lazy’
[13:36:10.119]   - Field: ‘state’
[13:36:10.119] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:10.119] - Launch lazy future ...
[13:36:10.120] Packages needed by the future expression (n = 0): <none>
[13:36:10.120] Packages needed by future strategies (n = 0): <none>
[13:36:10.120] {
[13:36:10.120]     {
[13:36:10.120]         {
[13:36:10.120]             ...future.startTime <- base::Sys.time()
[13:36:10.120]             {
[13:36:10.120]                 {
[13:36:10.120]                   {
[13:36:10.120]                     base::local({
[13:36:10.120]                       has_future <- base::requireNamespace("future", 
[13:36:10.120]                         quietly = TRUE)
[13:36:10.120]                       if (has_future) {
[13:36:10.120]                         ns <- base::getNamespace("future")
[13:36:10.120]                         version <- ns[[".package"]][["version"]]
[13:36:10.120]                         if (is.null(version)) 
[13:36:10.120]                           version <- utils::packageVersion("future")
[13:36:10.120]                       }
[13:36:10.120]                       else {
[13:36:10.120]                         version <- NULL
[13:36:10.120]                       }
[13:36:10.120]                       if (!has_future || version < "1.8.0") {
[13:36:10.120]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:10.120]                           "", base::R.version$version.string), 
[13:36:10.120]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:10.120]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:10.120]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:10.120]                             "release", "version")], collapse = " "), 
[13:36:10.120]                           hostname = base::Sys.info()[["nodename"]])
[13:36:10.120]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:10.120]                           info)
[13:36:10.120]                         info <- base::paste(info, collapse = "; ")
[13:36:10.120]                         if (!has_future) {
[13:36:10.120]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:10.120]                             info)
[13:36:10.120]                         }
[13:36:10.120]                         else {
[13:36:10.120]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:10.120]                             info, version)
[13:36:10.120]                         }
[13:36:10.120]                         base::stop(msg)
[13:36:10.120]                       }
[13:36:10.120]                     })
[13:36:10.120]                   }
[13:36:10.120]                   ...future.strategy.old <- future::plan("list")
[13:36:10.120]                   options(future.plan = NULL)
[13:36:10.120]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:10.120]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:10.120]                 }
[13:36:10.120]                 ...future.workdir <- getwd()
[13:36:10.120]             }
[13:36:10.120]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:10.120]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:10.120]         }
[13:36:10.120]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:10.120]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:10.120]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:10.120]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:10.120]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:10.120]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:10.120]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:10.120]             base::names(...future.oldOptions))
[13:36:10.120]     }
[13:36:10.120]     if (FALSE) {
[13:36:10.120]     }
[13:36:10.120]     else {
[13:36:10.120]         if (TRUE) {
[13:36:10.120]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:10.120]                 open = "w")
[13:36:10.120]         }
[13:36:10.120]         else {
[13:36:10.120]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:10.120]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:10.120]         }
[13:36:10.120]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:10.120]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:10.120]             base::sink(type = "output", split = FALSE)
[13:36:10.120]             base::close(...future.stdout)
[13:36:10.120]         }, add = TRUE)
[13:36:10.120]     }
[13:36:10.120]     ...future.frame <- base::sys.nframe()
[13:36:10.120]     ...future.conditions <- base::list()
[13:36:10.120]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:10.120]     if (FALSE) {
[13:36:10.120]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:10.120]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:10.120]     }
[13:36:10.120]     ...future.result <- base::tryCatch({
[13:36:10.120]         base::withCallingHandlers({
[13:36:10.120]             ...future.value <- base::withVisible(base::local({
[13:36:10.120]                 do.call(function(...) {
[13:36:10.120]                   sum(x, ...)
[13:36:10.120]                 }, args = future.call.arguments)
[13:36:10.120]             }))
[13:36:10.120]             future::FutureResult(value = ...future.value$value, 
[13:36:10.120]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:10.120]                   ...future.rng), globalenv = if (FALSE) 
[13:36:10.120]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:10.120]                     ...future.globalenv.names))
[13:36:10.120]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:10.120]         }, condition = base::local({
[13:36:10.120]             c <- base::c
[13:36:10.120]             inherits <- base::inherits
[13:36:10.120]             invokeRestart <- base::invokeRestart
[13:36:10.120]             length <- base::length
[13:36:10.120]             list <- base::list
[13:36:10.120]             seq.int <- base::seq.int
[13:36:10.120]             signalCondition <- base::signalCondition
[13:36:10.120]             sys.calls <- base::sys.calls
[13:36:10.120]             `[[` <- base::`[[`
[13:36:10.120]             `+` <- base::`+`
[13:36:10.120]             `<<-` <- base::`<<-`
[13:36:10.120]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:10.120]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:10.120]                   3L)]
[13:36:10.120]             }
[13:36:10.120]             function(cond) {
[13:36:10.120]                 is_error <- inherits(cond, "error")
[13:36:10.120]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:10.120]                   NULL)
[13:36:10.120]                 if (is_error) {
[13:36:10.120]                   sessionInformation <- function() {
[13:36:10.120]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:10.120]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:10.120]                       search = base::search(), system = base::Sys.info())
[13:36:10.120]                   }
[13:36:10.120]                   ...future.conditions[[length(...future.conditions) + 
[13:36:10.120]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:10.120]                     cond$call), session = sessionInformation(), 
[13:36:10.120]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:10.120]                   signalCondition(cond)
[13:36:10.120]                 }
[13:36:10.120]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:10.120]                 "immediateCondition"))) {
[13:36:10.120]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:10.120]                   ...future.conditions[[length(...future.conditions) + 
[13:36:10.120]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:10.120]                   if (TRUE && !signal) {
[13:36:10.120]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:10.120]                     {
[13:36:10.120]                       inherits <- base::inherits
[13:36:10.120]                       invokeRestart <- base::invokeRestart
[13:36:10.120]                       is.null <- base::is.null
[13:36:10.120]                       muffled <- FALSE
[13:36:10.120]                       if (inherits(cond, "message")) {
[13:36:10.120]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:10.120]                         if (muffled) 
[13:36:10.120]                           invokeRestart("muffleMessage")
[13:36:10.120]                       }
[13:36:10.120]                       else if (inherits(cond, "warning")) {
[13:36:10.120]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:10.120]                         if (muffled) 
[13:36:10.120]                           invokeRestart("muffleWarning")
[13:36:10.120]                       }
[13:36:10.120]                       else if (inherits(cond, "condition")) {
[13:36:10.120]                         if (!is.null(pattern)) {
[13:36:10.120]                           computeRestarts <- base::computeRestarts
[13:36:10.120]                           grepl <- base::grepl
[13:36:10.120]                           restarts <- computeRestarts(cond)
[13:36:10.120]                           for (restart in restarts) {
[13:36:10.120]                             name <- restart$name
[13:36:10.120]                             if (is.null(name)) 
[13:36:10.120]                               next
[13:36:10.120]                             if (!grepl(pattern, name)) 
[13:36:10.120]                               next
[13:36:10.120]                             invokeRestart(restart)
[13:36:10.120]                             muffled <- TRUE
[13:36:10.120]                             break
[13:36:10.120]                           }
[13:36:10.120]                         }
[13:36:10.120]                       }
[13:36:10.120]                       invisible(muffled)
[13:36:10.120]                     }
[13:36:10.120]                     muffleCondition(cond, pattern = "^muffle")
[13:36:10.120]                   }
[13:36:10.120]                 }
[13:36:10.120]                 else {
[13:36:10.120]                   if (TRUE) {
[13:36:10.120]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:10.120]                     {
[13:36:10.120]                       inherits <- base::inherits
[13:36:10.120]                       invokeRestart <- base::invokeRestart
[13:36:10.120]                       is.null <- base::is.null
[13:36:10.120]                       muffled <- FALSE
[13:36:10.120]                       if (inherits(cond, "message")) {
[13:36:10.120]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:10.120]                         if (muffled) 
[13:36:10.120]                           invokeRestart("muffleMessage")
[13:36:10.120]                       }
[13:36:10.120]                       else if (inherits(cond, "warning")) {
[13:36:10.120]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:10.120]                         if (muffled) 
[13:36:10.120]                           invokeRestart("muffleWarning")
[13:36:10.120]                       }
[13:36:10.120]                       else if (inherits(cond, "condition")) {
[13:36:10.120]                         if (!is.null(pattern)) {
[13:36:10.120]                           computeRestarts <- base::computeRestarts
[13:36:10.120]                           grepl <- base::grepl
[13:36:10.120]                           restarts <- computeRestarts(cond)
[13:36:10.120]                           for (restart in restarts) {
[13:36:10.120]                             name <- restart$name
[13:36:10.120]                             if (is.null(name)) 
[13:36:10.120]                               next
[13:36:10.120]                             if (!grepl(pattern, name)) 
[13:36:10.120]                               next
[13:36:10.120]                             invokeRestart(restart)
[13:36:10.120]                             muffled <- TRUE
[13:36:10.120]                             break
[13:36:10.120]                           }
[13:36:10.120]                         }
[13:36:10.120]                       }
[13:36:10.120]                       invisible(muffled)
[13:36:10.120]                     }
[13:36:10.120]                     muffleCondition(cond, pattern = "^muffle")
[13:36:10.120]                   }
[13:36:10.120]                 }
[13:36:10.120]             }
[13:36:10.120]         }))
[13:36:10.120]     }, error = function(ex) {
[13:36:10.120]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:10.120]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:10.120]                 ...future.rng), started = ...future.startTime, 
[13:36:10.120]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:10.120]             version = "1.8"), class = "FutureResult")
[13:36:10.120]     }, finally = {
[13:36:10.120]         if (!identical(...future.workdir, getwd())) 
[13:36:10.120]             setwd(...future.workdir)
[13:36:10.120]         {
[13:36:10.120]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:10.120]                 ...future.oldOptions$nwarnings <- NULL
[13:36:10.120]             }
[13:36:10.120]             base::options(...future.oldOptions)
[13:36:10.120]             if (.Platform$OS.type == "windows") {
[13:36:10.120]                 old_names <- names(...future.oldEnvVars)
[13:36:10.120]                 envs <- base::Sys.getenv()
[13:36:10.120]                 names <- names(envs)
[13:36:10.120]                 common <- intersect(names, old_names)
[13:36:10.120]                 added <- setdiff(names, old_names)
[13:36:10.120]                 removed <- setdiff(old_names, names)
[13:36:10.120]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:10.120]                   envs[common]]
[13:36:10.120]                 NAMES <- toupper(changed)
[13:36:10.120]                 args <- list()
[13:36:10.120]                 for (kk in seq_along(NAMES)) {
[13:36:10.120]                   name <- changed[[kk]]
[13:36:10.120]                   NAME <- NAMES[[kk]]
[13:36:10.120]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:10.120]                     next
[13:36:10.120]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:10.120]                 }
[13:36:10.120]                 NAMES <- toupper(added)
[13:36:10.120]                 for (kk in seq_along(NAMES)) {
[13:36:10.120]                   name <- added[[kk]]
[13:36:10.120]                   NAME <- NAMES[[kk]]
[13:36:10.120]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:10.120]                     next
[13:36:10.120]                   args[[name]] <- ""
[13:36:10.120]                 }
[13:36:10.120]                 NAMES <- toupper(removed)
[13:36:10.120]                 for (kk in seq_along(NAMES)) {
[13:36:10.120]                   name <- removed[[kk]]
[13:36:10.120]                   NAME <- NAMES[[kk]]
[13:36:10.120]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:10.120]                     next
[13:36:10.120]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:10.120]                 }
[13:36:10.120]                 if (length(args) > 0) 
[13:36:10.120]                   base::do.call(base::Sys.setenv, args = args)
[13:36:10.120]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:10.120]             }
[13:36:10.120]             else {
[13:36:10.120]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:10.120]             }
[13:36:10.120]             {
[13:36:10.120]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:10.120]                   0L) {
[13:36:10.120]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:10.120]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:10.120]                   base::options(opts)
[13:36:10.120]                 }
[13:36:10.120]                 {
[13:36:10.120]                   {
[13:36:10.120]                     NULL
[13:36:10.120]                     RNGkind("Mersenne-Twister")
[13:36:10.120]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:10.120]                       inherits = FALSE)
[13:36:10.120]                   }
[13:36:10.120]                   options(future.plan = NULL)
[13:36:10.120]                   if (is.na(NA_character_)) 
[13:36:10.120]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:10.120]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:10.120]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:10.120]                     .init = FALSE)
[13:36:10.120]                 }
[13:36:10.120]             }
[13:36:10.120]         }
[13:36:10.120]     })
[13:36:10.120]     if (TRUE) {
[13:36:10.120]         base::sink(type = "output", split = FALSE)
[13:36:10.120]         if (TRUE) {
[13:36:10.120]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:10.120]         }
[13:36:10.120]         else {
[13:36:10.120]             ...future.result["stdout"] <- base::list(NULL)
[13:36:10.120]         }
[13:36:10.120]         base::close(...future.stdout)
[13:36:10.120]         ...future.stdout <- NULL
[13:36:10.120]     }
[13:36:10.120]     ...future.result$conditions <- ...future.conditions
[13:36:10.120]     ...future.result$finished <- base::Sys.time()
[13:36:10.120]     ...future.result
[13:36:10.120] }
[13:36:10.122] assign_globals() ...
[13:36:10.122] List of 2
[13:36:10.122]  $ x                    : int [1:2] 1 2
[13:36:10.122]  $ future.call.arguments:List of 1
[13:36:10.122]   ..$ : num 3
[13:36:10.122]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:36:10.122]  - attr(*, "where")=List of 2
[13:36:10.122]   ..$ x                    :<environment: R_EmptyEnv> 
[13:36:10.122]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[13:36:10.122]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:10.122]  - attr(*, "resolved")= logi FALSE
[13:36:10.122]  - attr(*, "total_size")= num 112
[13:36:10.122]  - attr(*, "already-done")= logi TRUE
[13:36:10.128] - copied ‘x’ to environment
[13:36:10.128] - copied ‘future.call.arguments’ to environment
[13:36:10.128] assign_globals() ... done
[13:36:10.128] plan(): Setting new future strategy stack:
[13:36:10.129] List of future strategies:
[13:36:10.129] 1. sequential:
[13:36:10.129]    - args: function (..., envir = parent.frame())
[13:36:10.129]    - tweaked: FALSE
[13:36:10.129]    - call: NULL
[13:36:10.129] plan(): nbrOfWorkers() = 1
[13:36:10.130] plan(): Setting new future strategy stack:
[13:36:10.130] List of future strategies:
[13:36:10.130] 1. sequential:
[13:36:10.130]    - args: function (..., envir = parent.frame())
[13:36:10.130]    - tweaked: FALSE
[13:36:10.130]    - call: plan(strategy, substitute = FALSE)
[13:36:10.130] plan(): nbrOfWorkers() = 1
[13:36:10.131] SequentialFuture started (and completed)
[13:36:10.131] - Launch lazy future ... done
[13:36:10.131] run() for ‘SequentialFuture’ ... done
[1] 6
** Sum function 'B' with plan('sequential') ...
function (x, ...) 
{
    sumt <- function(x) {
        message("Arguments '...' exists: ", exists("...", inherits = TRUE))
        y %<-% {
            sum(x, ...)
        }
        y
    }
    sumt(x)
}
<bytecode: 0x5583231abaf0>
Arguments '...' exists: TRUE
[13:36:10.132] getGlobalsAndPackages() ...
[13:36:10.132] Searching for globals...
[13:36:10.133] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[13:36:10.133] Searching for globals ... DONE
[13:36:10.133] Resolving globals: FALSE
[13:36:10.134] Tweak future expression to call with '...' arguments ...
[13:36:10.134] {
[13:36:10.134]     do.call(function(...) {
[13:36:10.134]         sum(x, ...)
[13:36:10.134]     }, args = future.call.arguments)
[13:36:10.134] }
[13:36:10.134] Tweak future expression to call with '...' arguments ... DONE
[13:36:10.134] The total size of the 2 globals is 112 bytes (112 bytes)
[13:36:10.135] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[13:36:10.135] - globals: [2] ‘x’, ‘future.call.arguments’
[13:36:10.135] 
[13:36:10.135] getGlobalsAndPackages() ... DONE
[13:36:10.135] run() for ‘Future’ ...
[13:36:10.135] - state: ‘created’
[13:36:10.135] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:10.136] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:10.136] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:10.136]   - Field: ‘label’
[13:36:10.136]   - Field: ‘local’
[13:36:10.136]   - Field: ‘owner’
[13:36:10.136]   - Field: ‘envir’
[13:36:10.136]   - Field: ‘packages’
[13:36:10.136]   - Field: ‘gc’
[13:36:10.136]   - Field: ‘conditions’
[13:36:10.137]   - Field: ‘expr’
[13:36:10.137]   - Field: ‘uuid’
[13:36:10.137]   - Field: ‘seed’
[13:36:10.137]   - Field: ‘version’
[13:36:10.137]   - Field: ‘result’
[13:36:10.137]   - Field: ‘asynchronous’
[13:36:10.137]   - Field: ‘calls’
[13:36:10.137]   - Field: ‘globals’
[13:36:10.137]   - Field: ‘stdout’
[13:36:10.137]   - Field: ‘earlySignal’
[13:36:10.137]   - Field: ‘lazy’
[13:36:10.138]   - Field: ‘state’
[13:36:10.138] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:10.138] - Launch lazy future ...
[13:36:10.138] Packages needed by the future expression (n = 0): <none>
[13:36:10.138] Packages needed by future strategies (n = 0): <none>
[13:36:10.138] {
[13:36:10.138]     {
[13:36:10.138]         {
[13:36:10.138]             ...future.startTime <- base::Sys.time()
[13:36:10.138]             {
[13:36:10.138]                 {
[13:36:10.138]                   {
[13:36:10.138]                     base::local({
[13:36:10.138]                       has_future <- base::requireNamespace("future", 
[13:36:10.138]                         quietly = TRUE)
[13:36:10.138]                       if (has_future) {
[13:36:10.138]                         ns <- base::getNamespace("future")
[13:36:10.138]                         version <- ns[[".package"]][["version"]]
[13:36:10.138]                         if (is.null(version)) 
[13:36:10.138]                           version <- utils::packageVersion("future")
[13:36:10.138]                       }
[13:36:10.138]                       else {
[13:36:10.138]                         version <- NULL
[13:36:10.138]                       }
[13:36:10.138]                       if (!has_future || version < "1.8.0") {
[13:36:10.138]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:10.138]                           "", base::R.version$version.string), 
[13:36:10.138]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:10.138]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:10.138]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:10.138]                             "release", "version")], collapse = " "), 
[13:36:10.138]                           hostname = base::Sys.info()[["nodename"]])
[13:36:10.138]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:10.138]                           info)
[13:36:10.138]                         info <- base::paste(info, collapse = "; ")
[13:36:10.138]                         if (!has_future) {
[13:36:10.138]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:10.138]                             info)
[13:36:10.138]                         }
[13:36:10.138]                         else {
[13:36:10.138]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:10.138]                             info, version)
[13:36:10.138]                         }
[13:36:10.138]                         base::stop(msg)
[13:36:10.138]                       }
[13:36:10.138]                     })
[13:36:10.138]                   }
[13:36:10.138]                   ...future.strategy.old <- future::plan("list")
[13:36:10.138]                   options(future.plan = NULL)
[13:36:10.138]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:10.138]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:10.138]                 }
[13:36:10.138]                 ...future.workdir <- getwd()
[13:36:10.138]             }
[13:36:10.138]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:10.138]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:10.138]         }
[13:36:10.138]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:10.138]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:10.138]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:10.138]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:10.138]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:10.138]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:10.138]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:10.138]             base::names(...future.oldOptions))
[13:36:10.138]     }
[13:36:10.138]     if (FALSE) {
[13:36:10.138]     }
[13:36:10.138]     else {
[13:36:10.138]         if (TRUE) {
[13:36:10.138]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:10.138]                 open = "w")
[13:36:10.138]         }
[13:36:10.138]         else {
[13:36:10.138]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:10.138]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:10.138]         }
[13:36:10.138]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:10.138]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:10.138]             base::sink(type = "output", split = FALSE)
[13:36:10.138]             base::close(...future.stdout)
[13:36:10.138]         }, add = TRUE)
[13:36:10.138]     }
[13:36:10.138]     ...future.frame <- base::sys.nframe()
[13:36:10.138]     ...future.conditions <- base::list()
[13:36:10.138]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:10.138]     if (FALSE) {
[13:36:10.138]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:10.138]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:10.138]     }
[13:36:10.138]     ...future.result <- base::tryCatch({
[13:36:10.138]         base::withCallingHandlers({
[13:36:10.138]             ...future.value <- base::withVisible(base::local({
[13:36:10.138]                 do.call(function(...) {
[13:36:10.138]                   sum(x, ...)
[13:36:10.138]                 }, args = future.call.arguments)
[13:36:10.138]             }))
[13:36:10.138]             future::FutureResult(value = ...future.value$value, 
[13:36:10.138]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:10.138]                   ...future.rng), globalenv = if (FALSE) 
[13:36:10.138]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:10.138]                     ...future.globalenv.names))
[13:36:10.138]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:10.138]         }, condition = base::local({
[13:36:10.138]             c <- base::c
[13:36:10.138]             inherits <- base::inherits
[13:36:10.138]             invokeRestart <- base::invokeRestart
[13:36:10.138]             length <- base::length
[13:36:10.138]             list <- base::list
[13:36:10.138]             seq.int <- base::seq.int
[13:36:10.138]             signalCondition <- base::signalCondition
[13:36:10.138]             sys.calls <- base::sys.calls
[13:36:10.138]             `[[` <- base::`[[`
[13:36:10.138]             `+` <- base::`+`
[13:36:10.138]             `<<-` <- base::`<<-`
[13:36:10.138]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:10.138]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:10.138]                   3L)]
[13:36:10.138]             }
[13:36:10.138]             function(cond) {
[13:36:10.138]                 is_error <- inherits(cond, "error")
[13:36:10.138]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:10.138]                   NULL)
[13:36:10.138]                 if (is_error) {
[13:36:10.138]                   sessionInformation <- function() {
[13:36:10.138]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:10.138]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:10.138]                       search = base::search(), system = base::Sys.info())
[13:36:10.138]                   }
[13:36:10.138]                   ...future.conditions[[length(...future.conditions) + 
[13:36:10.138]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:10.138]                     cond$call), session = sessionInformation(), 
[13:36:10.138]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:10.138]                   signalCondition(cond)
[13:36:10.138]                 }
[13:36:10.138]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:10.138]                 "immediateCondition"))) {
[13:36:10.138]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:10.138]                   ...future.conditions[[length(...future.conditions) + 
[13:36:10.138]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:10.138]                   if (TRUE && !signal) {
[13:36:10.138]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:10.138]                     {
[13:36:10.138]                       inherits <- base::inherits
[13:36:10.138]                       invokeRestart <- base::invokeRestart
[13:36:10.138]                       is.null <- base::is.null
[13:36:10.138]                       muffled <- FALSE
[13:36:10.138]                       if (inherits(cond, "message")) {
[13:36:10.138]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:10.138]                         if (muffled) 
[13:36:10.138]                           invokeRestart("muffleMessage")
[13:36:10.138]                       }
[13:36:10.138]                       else if (inherits(cond, "warning")) {
[13:36:10.138]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:10.138]                         if (muffled) 
[13:36:10.138]                           invokeRestart("muffleWarning")
[13:36:10.138]                       }
[13:36:10.138]                       else if (inherits(cond, "condition")) {
[13:36:10.138]                         if (!is.null(pattern)) {
[13:36:10.138]                           computeRestarts <- base::computeRestarts
[13:36:10.138]                           grepl <- base::grepl
[13:36:10.138]                           restarts <- computeRestarts(cond)
[13:36:10.138]                           for (restart in restarts) {
[13:36:10.138]                             name <- restart$name
[13:36:10.138]                             if (is.null(name)) 
[13:36:10.138]                               next
[13:36:10.138]                             if (!grepl(pattern, name)) 
[13:36:10.138]                               next
[13:36:10.138]                             invokeRestart(restart)
[13:36:10.138]                             muffled <- TRUE
[13:36:10.138]                             break
[13:36:10.138]                           }
[13:36:10.138]                         }
[13:36:10.138]                       }
[13:36:10.138]                       invisible(muffled)
[13:36:10.138]                     }
[13:36:10.138]                     muffleCondition(cond, pattern = "^muffle")
[13:36:10.138]                   }
[13:36:10.138]                 }
[13:36:10.138]                 else {
[13:36:10.138]                   if (TRUE) {
[13:36:10.138]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:10.138]                     {
[13:36:10.138]                       inherits <- base::inherits
[13:36:10.138]                       invokeRestart <- base::invokeRestart
[13:36:10.138]                       is.null <- base::is.null
[13:36:10.138]                       muffled <- FALSE
[13:36:10.138]                       if (inherits(cond, "message")) {
[13:36:10.138]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:10.138]                         if (muffled) 
[13:36:10.138]                           invokeRestart("muffleMessage")
[13:36:10.138]                       }
[13:36:10.138]                       else if (inherits(cond, "warning")) {
[13:36:10.138]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:10.138]                         if (muffled) 
[13:36:10.138]                           invokeRestart("muffleWarning")
[13:36:10.138]                       }
[13:36:10.138]                       else if (inherits(cond, "condition")) {
[13:36:10.138]                         if (!is.null(pattern)) {
[13:36:10.138]                           computeRestarts <- base::computeRestarts
[13:36:10.138]                           grepl <- base::grepl
[13:36:10.138]                           restarts <- computeRestarts(cond)
[13:36:10.138]                           for (restart in restarts) {
[13:36:10.138]                             name <- restart$name
[13:36:10.138]                             if (is.null(name)) 
[13:36:10.138]                               next
[13:36:10.138]                             if (!grepl(pattern, name)) 
[13:36:10.138]                               next
[13:36:10.138]                             invokeRestart(restart)
[13:36:10.138]                             muffled <- TRUE
[13:36:10.138]                             break
[13:36:10.138]                           }
[13:36:10.138]                         }
[13:36:10.138]                       }
[13:36:10.138]                       invisible(muffled)
[13:36:10.138]                     }
[13:36:10.138]                     muffleCondition(cond, pattern = "^muffle")
[13:36:10.138]                   }
[13:36:10.138]                 }
[13:36:10.138]             }
[13:36:10.138]         }))
[13:36:10.138]     }, error = function(ex) {
[13:36:10.138]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:10.138]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:10.138]                 ...future.rng), started = ...future.startTime, 
[13:36:10.138]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:10.138]             version = "1.8"), class = "FutureResult")
[13:36:10.138]     }, finally = {
[13:36:10.138]         if (!identical(...future.workdir, getwd())) 
[13:36:10.138]             setwd(...future.workdir)
[13:36:10.138]         {
[13:36:10.138]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:10.138]                 ...future.oldOptions$nwarnings <- NULL
[13:36:10.138]             }
[13:36:10.138]             base::options(...future.oldOptions)
[13:36:10.138]             if (.Platform$OS.type == "windows") {
[13:36:10.138]                 old_names <- names(...future.oldEnvVars)
[13:36:10.138]                 envs <- base::Sys.getenv()
[13:36:10.138]                 names <- names(envs)
[13:36:10.138]                 common <- intersect(names, old_names)
[13:36:10.138]                 added <- setdiff(names, old_names)
[13:36:10.138]                 removed <- setdiff(old_names, names)
[13:36:10.138]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:10.138]                   envs[common]]
[13:36:10.138]                 NAMES <- toupper(changed)
[13:36:10.138]                 args <- list()
[13:36:10.138]                 for (kk in seq_along(NAMES)) {
[13:36:10.138]                   name <- changed[[kk]]
[13:36:10.138]                   NAME <- NAMES[[kk]]
[13:36:10.138]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:10.138]                     next
[13:36:10.138]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:10.138]                 }
[13:36:10.138]                 NAMES <- toupper(added)
[13:36:10.138]                 for (kk in seq_along(NAMES)) {
[13:36:10.138]                   name <- added[[kk]]
[13:36:10.138]                   NAME <- NAMES[[kk]]
[13:36:10.138]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:10.138]                     next
[13:36:10.138]                   args[[name]] <- ""
[13:36:10.138]                 }
[13:36:10.138]                 NAMES <- toupper(removed)
[13:36:10.138]                 for (kk in seq_along(NAMES)) {
[13:36:10.138]                   name <- removed[[kk]]
[13:36:10.138]                   NAME <- NAMES[[kk]]
[13:36:10.138]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:10.138]                     next
[13:36:10.138]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:10.138]                 }
[13:36:10.138]                 if (length(args) > 0) 
[13:36:10.138]                   base::do.call(base::Sys.setenv, args = args)
[13:36:10.138]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:10.138]             }
[13:36:10.138]             else {
[13:36:10.138]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:10.138]             }
[13:36:10.138]             {
[13:36:10.138]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:10.138]                   0L) {
[13:36:10.138]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:10.138]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:10.138]                   base::options(opts)
[13:36:10.138]                 }
[13:36:10.138]                 {
[13:36:10.138]                   {
[13:36:10.138]                     NULL
[13:36:10.138]                     RNGkind("Mersenne-Twister")
[13:36:10.138]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:10.138]                       inherits = FALSE)
[13:36:10.138]                   }
[13:36:10.138]                   options(future.plan = NULL)
[13:36:10.138]                   if (is.na(NA_character_)) 
[13:36:10.138]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:10.138]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:10.138]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:10.138]                     .init = FALSE)
[13:36:10.138]                 }
[13:36:10.138]             }
[13:36:10.138]         }
[13:36:10.138]     })
[13:36:10.138]     if (TRUE) {
[13:36:10.138]         base::sink(type = "output", split = FALSE)
[13:36:10.138]         if (TRUE) {
[13:36:10.138]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:10.138]         }
[13:36:10.138]         else {
[13:36:10.138]             ...future.result["stdout"] <- base::list(NULL)
[13:36:10.138]         }
[13:36:10.138]         base::close(...future.stdout)
[13:36:10.138]         ...future.stdout <- NULL
[13:36:10.138]     }
[13:36:10.138]     ...future.result$conditions <- ...future.conditions
[13:36:10.138]     ...future.result$finished <- base::Sys.time()
[13:36:10.138]     ...future.result
[13:36:10.138] }
[13:36:10.140] assign_globals() ...
[13:36:10.140] List of 2
[13:36:10.140]  $ x                    : int [1:2] 1 2
[13:36:10.140]  $ future.call.arguments:List of 1
[13:36:10.140]   ..$ : num 3
[13:36:10.140]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:36:10.140]  - attr(*, "where")=List of 2
[13:36:10.140]   ..$ x                    :<environment: R_EmptyEnv> 
[13:36:10.140]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[13:36:10.140]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:10.140]  - attr(*, "resolved")= logi FALSE
[13:36:10.140]  - attr(*, "total_size")= num 112
[13:36:10.140]  - attr(*, "already-done")= logi TRUE
[13:36:10.145] - copied ‘x’ to environment
[13:36:10.145] - copied ‘future.call.arguments’ to environment
[13:36:10.145] assign_globals() ... done
[13:36:10.145] plan(): Setting new future strategy stack:
[13:36:10.145] List of future strategies:
[13:36:10.145] 1. sequential:
[13:36:10.145]    - args: function (..., envir = parent.frame())
[13:36:10.145]    - tweaked: FALSE
[13:36:10.145]    - call: NULL
[13:36:10.146] plan(): nbrOfWorkers() = 1
[13:36:10.146] plan(): Setting new future strategy stack:
[13:36:10.147] List of future strategies:
[13:36:10.147] 1. sequential:
[13:36:10.147]    - args: function (..., envir = parent.frame())
[13:36:10.147]    - tweaked: FALSE
[13:36:10.147]    - call: plan(strategy, substitute = FALSE)
[13:36:10.147] plan(): nbrOfWorkers() = 1
[13:36:10.147] SequentialFuture started (and completed)
[13:36:10.147] - Launch lazy future ... done
[13:36:10.147] run() for ‘SequentialFuture’ ... done
[1] 6
** Sum function 'C' with plan('sequential') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y)
    }
    y
}
<bytecode: 0x55832330d3a8>
Arguments '...' exists: FALSE
[13:36:10.148] getGlobalsAndPackages() ...
[13:36:10.148] Searching for globals...
[13:36:10.149] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘y’
[13:36:10.149] Searching for globals ... DONE
[13:36:10.149] Resolving globals: FALSE
[13:36:10.149] The total size of the 2 globals is 112 bytes (112 bytes)
[13:36:10.150] The total size of the 2 globals exported for future expression (‘{; sum(x, y); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[13:36:10.150] - globals: [2] ‘x’, ‘y’
[13:36:10.150] 
[13:36:10.150] getGlobalsAndPackages() ... DONE
[13:36:10.150] run() for ‘Future’ ...
[13:36:10.150] - state: ‘created’
[13:36:10.151] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:10.151] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:10.151] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:10.151]   - Field: ‘label’
[13:36:10.151]   - Field: ‘local’
[13:36:10.151]   - Field: ‘owner’
[13:36:10.151]   - Field: ‘envir’
[13:36:10.151]   - Field: ‘packages’
[13:36:10.151]   - Field: ‘gc’
[13:36:10.151]   - Field: ‘conditions’
[13:36:10.152]   - Field: ‘expr’
[13:36:10.152]   - Field: ‘uuid’
[13:36:10.152]   - Field: ‘seed’
[13:36:10.152]   - Field: ‘version’
[13:36:10.152]   - Field: ‘result’
[13:36:10.152]   - Field: ‘asynchronous’
[13:36:10.152]   - Field: ‘calls’
[13:36:10.152]   - Field: ‘globals’
[13:36:10.152]   - Field: ‘stdout’
[13:36:10.152]   - Field: ‘earlySignal’
[13:36:10.152]   - Field: ‘lazy’
[13:36:10.153]   - Field: ‘state’
[13:36:10.153] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:10.153] - Launch lazy future ...
[13:36:10.153] Packages needed by the future expression (n = 0): <none>
[13:36:10.153] Packages needed by future strategies (n = 0): <none>
[13:36:10.153] {
[13:36:10.153]     {
[13:36:10.153]         {
[13:36:10.153]             ...future.startTime <- base::Sys.time()
[13:36:10.153]             {
[13:36:10.153]                 {
[13:36:10.153]                   {
[13:36:10.153]                     base::local({
[13:36:10.153]                       has_future <- base::requireNamespace("future", 
[13:36:10.153]                         quietly = TRUE)
[13:36:10.153]                       if (has_future) {
[13:36:10.153]                         ns <- base::getNamespace("future")
[13:36:10.153]                         version <- ns[[".package"]][["version"]]
[13:36:10.153]                         if (is.null(version)) 
[13:36:10.153]                           version <- utils::packageVersion("future")
[13:36:10.153]                       }
[13:36:10.153]                       else {
[13:36:10.153]                         version <- NULL
[13:36:10.153]                       }
[13:36:10.153]                       if (!has_future || version < "1.8.0") {
[13:36:10.153]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:10.153]                           "", base::R.version$version.string), 
[13:36:10.153]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:10.153]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:10.153]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:10.153]                             "release", "version")], collapse = " "), 
[13:36:10.153]                           hostname = base::Sys.info()[["nodename"]])
[13:36:10.153]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:10.153]                           info)
[13:36:10.153]                         info <- base::paste(info, collapse = "; ")
[13:36:10.153]                         if (!has_future) {
[13:36:10.153]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:10.153]                             info)
[13:36:10.153]                         }
[13:36:10.153]                         else {
[13:36:10.153]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:10.153]                             info, version)
[13:36:10.153]                         }
[13:36:10.153]                         base::stop(msg)
[13:36:10.153]                       }
[13:36:10.153]                     })
[13:36:10.153]                   }
[13:36:10.153]                   ...future.strategy.old <- future::plan("list")
[13:36:10.153]                   options(future.plan = NULL)
[13:36:10.153]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:10.153]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:10.153]                 }
[13:36:10.153]                 ...future.workdir <- getwd()
[13:36:10.153]             }
[13:36:10.153]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:10.153]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:10.153]         }
[13:36:10.153]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:10.153]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:10.153]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:10.153]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:10.153]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:10.153]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:10.153]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:10.153]             base::names(...future.oldOptions))
[13:36:10.153]     }
[13:36:10.153]     if (FALSE) {
[13:36:10.153]     }
[13:36:10.153]     else {
[13:36:10.153]         if (TRUE) {
[13:36:10.153]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:10.153]                 open = "w")
[13:36:10.153]         }
[13:36:10.153]         else {
[13:36:10.153]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:10.153]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:10.153]         }
[13:36:10.153]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:10.153]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:10.153]             base::sink(type = "output", split = FALSE)
[13:36:10.153]             base::close(...future.stdout)
[13:36:10.153]         }, add = TRUE)
[13:36:10.153]     }
[13:36:10.153]     ...future.frame <- base::sys.nframe()
[13:36:10.153]     ...future.conditions <- base::list()
[13:36:10.153]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:10.153]     if (FALSE) {
[13:36:10.153]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:10.153]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:10.153]     }
[13:36:10.153]     ...future.result <- base::tryCatch({
[13:36:10.153]         base::withCallingHandlers({
[13:36:10.153]             ...future.value <- base::withVisible(base::local({
[13:36:10.153]                 sum(x, y)
[13:36:10.153]             }))
[13:36:10.153]             future::FutureResult(value = ...future.value$value, 
[13:36:10.153]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:10.153]                   ...future.rng), globalenv = if (FALSE) 
[13:36:10.153]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:10.153]                     ...future.globalenv.names))
[13:36:10.153]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:10.153]         }, condition = base::local({
[13:36:10.153]             c <- base::c
[13:36:10.153]             inherits <- base::inherits
[13:36:10.153]             invokeRestart <- base::invokeRestart
[13:36:10.153]             length <- base::length
[13:36:10.153]             list <- base::list
[13:36:10.153]             seq.int <- base::seq.int
[13:36:10.153]             signalCondition <- base::signalCondition
[13:36:10.153]             sys.calls <- base::sys.calls
[13:36:10.153]             `[[` <- base::`[[`
[13:36:10.153]             `+` <- base::`+`
[13:36:10.153]             `<<-` <- base::`<<-`
[13:36:10.153]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:10.153]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:10.153]                   3L)]
[13:36:10.153]             }
[13:36:10.153]             function(cond) {
[13:36:10.153]                 is_error <- inherits(cond, "error")
[13:36:10.153]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:10.153]                   NULL)
[13:36:10.153]                 if (is_error) {
[13:36:10.153]                   sessionInformation <- function() {
[13:36:10.153]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:10.153]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:10.153]                       search = base::search(), system = base::Sys.info())
[13:36:10.153]                   }
[13:36:10.153]                   ...future.conditions[[length(...future.conditions) + 
[13:36:10.153]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:10.153]                     cond$call), session = sessionInformation(), 
[13:36:10.153]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:10.153]                   signalCondition(cond)
[13:36:10.153]                 }
[13:36:10.153]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:10.153]                 "immediateCondition"))) {
[13:36:10.153]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:10.153]                   ...future.conditions[[length(...future.conditions) + 
[13:36:10.153]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:10.153]                   if (TRUE && !signal) {
[13:36:10.153]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:10.153]                     {
[13:36:10.153]                       inherits <- base::inherits
[13:36:10.153]                       invokeRestart <- base::invokeRestart
[13:36:10.153]                       is.null <- base::is.null
[13:36:10.153]                       muffled <- FALSE
[13:36:10.153]                       if (inherits(cond, "message")) {
[13:36:10.153]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:10.153]                         if (muffled) 
[13:36:10.153]                           invokeRestart("muffleMessage")
[13:36:10.153]                       }
[13:36:10.153]                       else if (inherits(cond, "warning")) {
[13:36:10.153]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:10.153]                         if (muffled) 
[13:36:10.153]                           invokeRestart("muffleWarning")
[13:36:10.153]                       }
[13:36:10.153]                       else if (inherits(cond, "condition")) {
[13:36:10.153]                         if (!is.null(pattern)) {
[13:36:10.153]                           computeRestarts <- base::computeRestarts
[13:36:10.153]                           grepl <- base::grepl
[13:36:10.153]                           restarts <- computeRestarts(cond)
[13:36:10.153]                           for (restart in restarts) {
[13:36:10.153]                             name <- restart$name
[13:36:10.153]                             if (is.null(name)) 
[13:36:10.153]                               next
[13:36:10.153]                             if (!grepl(pattern, name)) 
[13:36:10.153]                               next
[13:36:10.153]                             invokeRestart(restart)
[13:36:10.153]                             muffled <- TRUE
[13:36:10.153]                             break
[13:36:10.153]                           }
[13:36:10.153]                         }
[13:36:10.153]                       }
[13:36:10.153]                       invisible(muffled)
[13:36:10.153]                     }
[13:36:10.153]                     muffleCondition(cond, pattern = "^muffle")
[13:36:10.153]                   }
[13:36:10.153]                 }
[13:36:10.153]                 else {
[13:36:10.153]                   if (TRUE) {
[13:36:10.153]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:10.153]                     {
[13:36:10.153]                       inherits <- base::inherits
[13:36:10.153]                       invokeRestart <- base::invokeRestart
[13:36:10.153]                       is.null <- base::is.null
[13:36:10.153]                       muffled <- FALSE
[13:36:10.153]                       if (inherits(cond, "message")) {
[13:36:10.153]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:10.153]                         if (muffled) 
[13:36:10.153]                           invokeRestart("muffleMessage")
[13:36:10.153]                       }
[13:36:10.153]                       else if (inherits(cond, "warning")) {
[13:36:10.153]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:10.153]                         if (muffled) 
[13:36:10.153]                           invokeRestart("muffleWarning")
[13:36:10.153]                       }
[13:36:10.153]                       else if (inherits(cond, "condition")) {
[13:36:10.153]                         if (!is.null(pattern)) {
[13:36:10.153]                           computeRestarts <- base::computeRestarts
[13:36:10.153]                           grepl <- base::grepl
[13:36:10.153]                           restarts <- computeRestarts(cond)
[13:36:10.153]                           for (restart in restarts) {
[13:36:10.153]                             name <- restart$name
[13:36:10.153]                             if (is.null(name)) 
[13:36:10.153]                               next
[13:36:10.153]                             if (!grepl(pattern, name)) 
[13:36:10.153]                               next
[13:36:10.153]                             invokeRestart(restart)
[13:36:10.153]                             muffled <- TRUE
[13:36:10.153]                             break
[13:36:10.153]                           }
[13:36:10.153]                         }
[13:36:10.153]                       }
[13:36:10.153]                       invisible(muffled)
[13:36:10.153]                     }
[13:36:10.153]                     muffleCondition(cond, pattern = "^muffle")
[13:36:10.153]                   }
[13:36:10.153]                 }
[13:36:10.153]             }
[13:36:10.153]         }))
[13:36:10.153]     }, error = function(ex) {
[13:36:10.153]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:10.153]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:10.153]                 ...future.rng), started = ...future.startTime, 
[13:36:10.153]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:10.153]             version = "1.8"), class = "FutureResult")
[13:36:10.153]     }, finally = {
[13:36:10.153]         if (!identical(...future.workdir, getwd())) 
[13:36:10.153]             setwd(...future.workdir)
[13:36:10.153]         {
[13:36:10.153]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:10.153]                 ...future.oldOptions$nwarnings <- NULL
[13:36:10.153]             }
[13:36:10.153]             base::options(...future.oldOptions)
[13:36:10.153]             if (.Platform$OS.type == "windows") {
[13:36:10.153]                 old_names <- names(...future.oldEnvVars)
[13:36:10.153]                 envs <- base::Sys.getenv()
[13:36:10.153]                 names <- names(envs)
[13:36:10.153]                 common <- intersect(names, old_names)
[13:36:10.153]                 added <- setdiff(names, old_names)
[13:36:10.153]                 removed <- setdiff(old_names, names)
[13:36:10.153]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:10.153]                   envs[common]]
[13:36:10.153]                 NAMES <- toupper(changed)
[13:36:10.153]                 args <- list()
[13:36:10.153]                 for (kk in seq_along(NAMES)) {
[13:36:10.153]                   name <- changed[[kk]]
[13:36:10.153]                   NAME <- NAMES[[kk]]
[13:36:10.153]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:10.153]                     next
[13:36:10.153]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:10.153]                 }
[13:36:10.153]                 NAMES <- toupper(added)
[13:36:10.153]                 for (kk in seq_along(NAMES)) {
[13:36:10.153]                   name <- added[[kk]]
[13:36:10.153]                   NAME <- NAMES[[kk]]
[13:36:10.153]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:10.153]                     next
[13:36:10.153]                   args[[name]] <- ""
[13:36:10.153]                 }
[13:36:10.153]                 NAMES <- toupper(removed)
[13:36:10.153]                 for (kk in seq_along(NAMES)) {
[13:36:10.153]                   name <- removed[[kk]]
[13:36:10.153]                   NAME <- NAMES[[kk]]
[13:36:10.153]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:10.153]                     next
[13:36:10.153]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:10.153]                 }
[13:36:10.153]                 if (length(args) > 0) 
[13:36:10.153]                   base::do.call(base::Sys.setenv, args = args)
[13:36:10.153]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:10.153]             }
[13:36:10.153]             else {
[13:36:10.153]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:10.153]             }
[13:36:10.153]             {
[13:36:10.153]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:10.153]                   0L) {
[13:36:10.153]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:10.153]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:10.153]                   base::options(opts)
[13:36:10.153]                 }
[13:36:10.153]                 {
[13:36:10.153]                   {
[13:36:10.153]                     NULL
[13:36:10.153]                     RNGkind("Mersenne-Twister")
[13:36:10.153]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:10.153]                       inherits = FALSE)
[13:36:10.153]                   }
[13:36:10.153]                   options(future.plan = NULL)
[13:36:10.153]                   if (is.na(NA_character_)) 
[13:36:10.153]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:10.153]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:10.153]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:10.153]                     .init = FALSE)
[13:36:10.153]                 }
[13:36:10.153]             }
[13:36:10.153]         }
[13:36:10.153]     })
[13:36:10.153]     if (TRUE) {
[13:36:10.153]         base::sink(type = "output", split = FALSE)
[13:36:10.153]         if (TRUE) {
[13:36:10.153]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:10.153]         }
[13:36:10.153]         else {
[13:36:10.153]             ...future.result["stdout"] <- base::list(NULL)
[13:36:10.153]         }
[13:36:10.153]         base::close(...future.stdout)
[13:36:10.153]         ...future.stdout <- NULL
[13:36:10.153]     }
[13:36:10.153]     ...future.result$conditions <- ...future.conditions
[13:36:10.153]     ...future.result$finished <- base::Sys.time()
[13:36:10.153]     ...future.result
[13:36:10.153] }
[13:36:10.155] assign_globals() ...
[13:36:10.155] List of 2
[13:36:10.155]  $ x: int [1:2] 1 2
[13:36:10.155]  $ y: num 3
[13:36:10.155]  - attr(*, "where")=List of 2
[13:36:10.155]   ..$ x:<environment: R_EmptyEnv> 
[13:36:10.155]   ..$ y:<environment: R_EmptyEnv> 
[13:36:10.155]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:10.155]  - attr(*, "resolved")= logi FALSE
[13:36:10.155]  - attr(*, "total_size")= num 112
[13:36:10.155]  - attr(*, "already-done")= logi TRUE
[13:36:10.158] - copied ‘x’ to environment
[13:36:10.158] - copied ‘y’ to environment
[13:36:10.158] assign_globals() ... done
[13:36:10.158] plan(): Setting new future strategy stack:
[13:36:10.158] List of future strategies:
[13:36:10.158] 1. sequential:
[13:36:10.158]    - args: function (..., envir = parent.frame())
[13:36:10.158]    - tweaked: FALSE
[13:36:10.158]    - call: NULL
[13:36:10.159] plan(): nbrOfWorkers() = 1
[13:36:10.159] plan(): Setting new future strategy stack:
[13:36:10.159] List of future strategies:
[13:36:10.159] 1. sequential:
[13:36:10.159]    - args: function (..., envir = parent.frame())
[13:36:10.159]    - tweaked: FALSE
[13:36:10.159]    - call: plan(strategy, substitute = FALSE)
[13:36:10.160] plan(): nbrOfWorkers() = 1
[13:36:10.160] SequentialFuture started (and completed)
[13:36:10.160] - Launch lazy future ... done
[13:36:10.160] run() for ‘SequentialFuture’ ... done
[1] 6
** Sum function 'D' with plan('sequential') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y, ...)
    }
    y
}
<bytecode: 0x5583234f9f00>
Arguments '...' exists: FALSE
[13:36:10.161] getGlobalsAndPackages() ...
[13:36:10.161] Searching for globals...
[13:36:10.162] - globals found: [5] ‘{’, ‘sum’, ‘x’, ‘y’, ‘...’
[13:36:10.162] Searching for globals ... DONE
[13:36:10.162] Resolving globals: FALSE
[13:36:10.162] Tweak future expression to call with '...' arguments ...
[13:36:10.163] The total size of the 2 globals is 112 bytes (112 bytes)
[13:36:10.163] The total size of the 2 globals exported for future expression (‘{; sum(x, y, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[13:36:10.163] - globals: [2] ‘x’, ‘y’
[13:36:10.163] 
[13:36:10.163] getGlobalsAndPackages() ... DONE
[13:36:10.164] run() for ‘Future’ ...
[13:36:10.164] - state: ‘created’
[13:36:10.164] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:10.164] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:10.164] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:10.164]   - Field: ‘label’
[13:36:10.164]   - Field: ‘local’
[13:36:10.164]   - Field: ‘owner’
[13:36:10.164]   - Field: ‘envir’
[13:36:10.165]   - Field: ‘packages’
[13:36:10.165]   - Field: ‘gc’
[13:36:10.165]   - Field: ‘conditions’
[13:36:10.165]   - Field: ‘expr’
[13:36:10.165]   - Field: ‘uuid’
[13:36:10.165]   - Field: ‘seed’
[13:36:10.165]   - Field: ‘version’
[13:36:10.165]   - Field: ‘result’
[13:36:10.165]   - Field: ‘asynchronous’
[13:36:10.165]   - Field: ‘calls’
[13:36:10.165]   - Field: ‘globals’
[13:36:10.166]   - Field: ‘stdout’
[13:36:10.166]   - Field: ‘earlySignal’
[13:36:10.166]   - Field: ‘lazy’
[13:36:10.166]   - Field: ‘state’
[13:36:10.166] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:10.166] - Launch lazy future ...
[13:36:10.166] Packages needed by the future expression (n = 0): <none>
[13:36:10.166] Packages needed by future strategies (n = 0): <none>
[13:36:10.167] {
[13:36:10.167]     {
[13:36:10.167]         {
[13:36:10.167]             ...future.startTime <- base::Sys.time()
[13:36:10.167]             {
[13:36:10.167]                 {
[13:36:10.167]                   {
[13:36:10.167]                     base::local({
[13:36:10.167]                       has_future <- base::requireNamespace("future", 
[13:36:10.167]                         quietly = TRUE)
[13:36:10.167]                       if (has_future) {
[13:36:10.167]                         ns <- base::getNamespace("future")
[13:36:10.167]                         version <- ns[[".package"]][["version"]]
[13:36:10.167]                         if (is.null(version)) 
[13:36:10.167]                           version <- utils::packageVersion("future")
[13:36:10.167]                       }
[13:36:10.167]                       else {
[13:36:10.167]                         version <- NULL
[13:36:10.167]                       }
[13:36:10.167]                       if (!has_future || version < "1.8.0") {
[13:36:10.167]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:10.167]                           "", base::R.version$version.string), 
[13:36:10.167]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:10.167]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:10.167]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:10.167]                             "release", "version")], collapse = " "), 
[13:36:10.167]                           hostname = base::Sys.info()[["nodename"]])
[13:36:10.167]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:10.167]                           info)
[13:36:10.167]                         info <- base::paste(info, collapse = "; ")
[13:36:10.167]                         if (!has_future) {
[13:36:10.167]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:10.167]                             info)
[13:36:10.167]                         }
[13:36:10.167]                         else {
[13:36:10.167]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:10.167]                             info, version)
[13:36:10.167]                         }
[13:36:10.167]                         base::stop(msg)
[13:36:10.167]                       }
[13:36:10.167]                     })
[13:36:10.167]                   }
[13:36:10.167]                   ...future.strategy.old <- future::plan("list")
[13:36:10.167]                   options(future.plan = NULL)
[13:36:10.167]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:10.167]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:10.167]                 }
[13:36:10.167]                 ...future.workdir <- getwd()
[13:36:10.167]             }
[13:36:10.167]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:10.167]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:10.167]         }
[13:36:10.167]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:10.167]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:10.167]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:10.167]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:10.167]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:10.167]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:10.167]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:10.167]             base::names(...future.oldOptions))
[13:36:10.167]     }
[13:36:10.167]     if (FALSE) {
[13:36:10.167]     }
[13:36:10.167]     else {
[13:36:10.167]         if (TRUE) {
[13:36:10.167]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:10.167]                 open = "w")
[13:36:10.167]         }
[13:36:10.167]         else {
[13:36:10.167]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:10.167]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:10.167]         }
[13:36:10.167]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:10.167]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:10.167]             base::sink(type = "output", split = FALSE)
[13:36:10.167]             base::close(...future.stdout)
[13:36:10.167]         }, add = TRUE)
[13:36:10.167]     }
[13:36:10.167]     ...future.frame <- base::sys.nframe()
[13:36:10.167]     ...future.conditions <- base::list()
[13:36:10.167]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:10.167]     if (FALSE) {
[13:36:10.167]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:10.167]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:10.167]     }
[13:36:10.167]     ...future.result <- base::tryCatch({
[13:36:10.167]         base::withCallingHandlers({
[13:36:10.167]             ...future.value <- base::withVisible(base::local({
[13:36:10.167]                 sum(x, y, ...)
[13:36:10.167]             }))
[13:36:10.167]             future::FutureResult(value = ...future.value$value, 
[13:36:10.167]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:10.167]                   ...future.rng), globalenv = if (FALSE) 
[13:36:10.167]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:10.167]                     ...future.globalenv.names))
[13:36:10.167]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:10.167]         }, condition = base::local({
[13:36:10.167]             c <- base::c
[13:36:10.167]             inherits <- base::inherits
[13:36:10.167]             invokeRestart <- base::invokeRestart
[13:36:10.167]             length <- base::length
[13:36:10.167]             list <- base::list
[13:36:10.167]             seq.int <- base::seq.int
[13:36:10.167]             signalCondition <- base::signalCondition
[13:36:10.167]             sys.calls <- base::sys.calls
[13:36:10.167]             `[[` <- base::`[[`
[13:36:10.167]             `+` <- base::`+`
[13:36:10.167]             `<<-` <- base::`<<-`
[13:36:10.167]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:10.167]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:10.167]                   3L)]
[13:36:10.167]             }
[13:36:10.167]             function(cond) {
[13:36:10.167]                 is_error <- inherits(cond, "error")
[13:36:10.167]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:10.167]                   NULL)
[13:36:10.167]                 if (is_error) {
[13:36:10.167]                   sessionInformation <- function() {
[13:36:10.167]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:10.167]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:10.167]                       search = base::search(), system = base::Sys.info())
[13:36:10.167]                   }
[13:36:10.167]                   ...future.conditions[[length(...future.conditions) + 
[13:36:10.167]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:10.167]                     cond$call), session = sessionInformation(), 
[13:36:10.167]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:10.167]                   signalCondition(cond)
[13:36:10.167]                 }
[13:36:10.167]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:10.167]                 "immediateCondition"))) {
[13:36:10.167]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:10.167]                   ...future.conditions[[length(...future.conditions) + 
[13:36:10.167]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:10.167]                   if (TRUE && !signal) {
[13:36:10.167]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:10.167]                     {
[13:36:10.167]                       inherits <- base::inherits
[13:36:10.167]                       invokeRestart <- base::invokeRestart
[13:36:10.167]                       is.null <- base::is.null
[13:36:10.167]                       muffled <- FALSE
[13:36:10.167]                       if (inherits(cond, "message")) {
[13:36:10.167]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:10.167]                         if (muffled) 
[13:36:10.167]                           invokeRestart("muffleMessage")
[13:36:10.167]                       }
[13:36:10.167]                       else if (inherits(cond, "warning")) {
[13:36:10.167]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:10.167]                         if (muffled) 
[13:36:10.167]                           invokeRestart("muffleWarning")
[13:36:10.167]                       }
[13:36:10.167]                       else if (inherits(cond, "condition")) {
[13:36:10.167]                         if (!is.null(pattern)) {
[13:36:10.167]                           computeRestarts <- base::computeRestarts
[13:36:10.167]                           grepl <- base::grepl
[13:36:10.167]                           restarts <- computeRestarts(cond)
[13:36:10.167]                           for (restart in restarts) {
[13:36:10.167]                             name <- restart$name
[13:36:10.167]                             if (is.null(name)) 
[13:36:10.167]                               next
[13:36:10.167]                             if (!grepl(pattern, name)) 
[13:36:10.167]                               next
[13:36:10.167]                             invokeRestart(restart)
[13:36:10.167]                             muffled <- TRUE
[13:36:10.167]                             break
[13:36:10.167]                           }
[13:36:10.167]                         }
[13:36:10.167]                       }
[13:36:10.167]                       invisible(muffled)
[13:36:10.167]                     }
[13:36:10.167]                     muffleCondition(cond, pattern = "^muffle")
[13:36:10.167]                   }
[13:36:10.167]                 }
[13:36:10.167]                 else {
[13:36:10.167]                   if (TRUE) {
[13:36:10.167]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:10.167]                     {
[13:36:10.167]                       inherits <- base::inherits
[13:36:10.167]                       invokeRestart <- base::invokeRestart
[13:36:10.167]                       is.null <- base::is.null
[13:36:10.167]                       muffled <- FALSE
[13:36:10.167]                       if (inherits(cond, "message")) {
[13:36:10.167]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:10.167]                         if (muffled) 
[13:36:10.167]                           invokeRestart("muffleMessage")
[13:36:10.167]                       }
[13:36:10.167]                       else if (inherits(cond, "warning")) {
[13:36:10.167]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:10.167]                         if (muffled) 
[13:36:10.167]                           invokeRestart("muffleWarning")
[13:36:10.167]                       }
[13:36:10.167]                       else if (inherits(cond, "condition")) {
[13:36:10.167]                         if (!is.null(pattern)) {
[13:36:10.167]                           computeRestarts <- base::computeRestarts
[13:36:10.167]                           grepl <- base::grepl
[13:36:10.167]                           restarts <- computeRestarts(cond)
[13:36:10.167]                           for (restart in restarts) {
[13:36:10.167]                             name <- restart$name
[13:36:10.167]                             if (is.null(name)) 
[13:36:10.167]                               next
[13:36:10.167]                             if (!grepl(pattern, name)) 
[13:36:10.167]                               next
[13:36:10.167]                             invokeRestart(restart)
[13:36:10.167]                             muffled <- TRUE
[13:36:10.167]                             break
[13:36:10.167]                           }
[13:36:10.167]                         }
[13:36:10.167]                       }
[13:36:10.167]                       invisible(muffled)
[13:36:10.167]                     }
[13:36:10.167]                     muffleCondition(cond, pattern = "^muffle")
[13:36:10.167]                   }
[13:36:10.167]                 }
[13:36:10.167]             }
[13:36:10.167]         }))
[13:36:10.167]     }, error = function(ex) {
[13:36:10.167]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:10.167]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:10.167]                 ...future.rng), started = ...future.startTime, 
[13:36:10.167]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:10.167]             version = "1.8"), class = "FutureResult")
[13:36:10.167]     }, finally = {
[13:36:10.167]         if (!identical(...future.workdir, getwd())) 
[13:36:10.167]             setwd(...future.workdir)
[13:36:10.167]         {
[13:36:10.167]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:10.167]                 ...future.oldOptions$nwarnings <- NULL
[13:36:10.167]             }
[13:36:10.167]             base::options(...future.oldOptions)
[13:36:10.167]             if (.Platform$OS.type == "windows") {
[13:36:10.167]                 old_names <- names(...future.oldEnvVars)
[13:36:10.167]                 envs <- base::Sys.getenv()
[13:36:10.167]                 names <- names(envs)
[13:36:10.167]                 common <- intersect(names, old_names)
[13:36:10.167]                 added <- setdiff(names, old_names)
[13:36:10.167]                 removed <- setdiff(old_names, names)
[13:36:10.167]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:10.167]                   envs[common]]
[13:36:10.167]                 NAMES <- toupper(changed)
[13:36:10.167]                 args <- list()
[13:36:10.167]                 for (kk in seq_along(NAMES)) {
[13:36:10.167]                   name <- changed[[kk]]
[13:36:10.167]                   NAME <- NAMES[[kk]]
[13:36:10.167]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:10.167]                     next
[13:36:10.167]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:10.167]                 }
[13:36:10.167]                 NAMES <- toupper(added)
[13:36:10.167]                 for (kk in seq_along(NAMES)) {
[13:36:10.167]                   name <- added[[kk]]
[13:36:10.167]                   NAME <- NAMES[[kk]]
[13:36:10.167]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:10.167]                     next
[13:36:10.167]                   args[[name]] <- ""
[13:36:10.167]                 }
[13:36:10.167]                 NAMES <- toupper(removed)
[13:36:10.167]                 for (kk in seq_along(NAMES)) {
[13:36:10.167]                   name <- removed[[kk]]
[13:36:10.167]                   NAME <- NAMES[[kk]]
[13:36:10.167]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:10.167]                     next
[13:36:10.167]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:10.167]                 }
[13:36:10.167]                 if (length(args) > 0) 
[13:36:10.167]                   base::do.call(base::Sys.setenv, args = args)
[13:36:10.167]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:10.167]             }
[13:36:10.167]             else {
[13:36:10.167]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:10.167]             }
[13:36:10.167]             {
[13:36:10.167]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:10.167]                   0L) {
[13:36:10.167]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:10.167]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:10.167]                   base::options(opts)
[13:36:10.167]                 }
[13:36:10.167]                 {
[13:36:10.167]                   {
[13:36:10.167]                     NULL
[13:36:10.167]                     RNGkind("Mersenne-Twister")
[13:36:10.167]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:10.167]                       inherits = FALSE)
[13:36:10.167]                   }
[13:36:10.167]                   options(future.plan = NULL)
[13:36:10.167]                   if (is.na(NA_character_)) 
[13:36:10.167]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:10.167]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:10.167]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:10.167]                     .init = FALSE)
[13:36:10.167]                 }
[13:36:10.167]             }
[13:36:10.167]         }
[13:36:10.167]     })
[13:36:10.167]     if (TRUE) {
[13:36:10.167]         base::sink(type = "output", split = FALSE)
[13:36:10.167]         if (TRUE) {
[13:36:10.167]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:10.167]         }
[13:36:10.167]         else {
[13:36:10.167]             ...future.result["stdout"] <- base::list(NULL)
[13:36:10.167]         }
[13:36:10.167]         base::close(...future.stdout)
[13:36:10.167]         ...future.stdout <- NULL
[13:36:10.167]     }
[13:36:10.167]     ...future.result$conditions <- ...future.conditions
[13:36:10.167]     ...future.result$finished <- base::Sys.time()
[13:36:10.167]     ...future.result
[13:36:10.167] }
[13:36:10.168] assign_globals() ...
[13:36:10.168] List of 2
[13:36:10.168]  $ x: int [1:2] 1 2
[13:36:10.168]  $ y: num 3
[13:36:10.168]  - attr(*, "where")=List of 2
[13:36:10.168]   ..$ x:<environment: R_EmptyEnv> 
[13:36:10.168]   ..$ y:<environment: R_EmptyEnv> 
[13:36:10.168]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:10.168]  - attr(*, "resolved")= logi FALSE
[13:36:10.168]  - attr(*, "total_size")= num 112
[13:36:10.168]  - attr(*, "already-done")= logi TRUE
[13:36:10.172] - copied ‘x’ to environment
[13:36:10.172] - copied ‘y’ to environment
[13:36:10.172] assign_globals() ... done
[13:36:10.172] plan(): Setting new future strategy stack:
[13:36:10.173] List of future strategies:
[13:36:10.173] 1. sequential:
[13:36:10.173]    - args: function (..., envir = parent.frame())
[13:36:10.173]    - tweaked: FALSE
[13:36:10.173]    - call: NULL
[13:36:10.173] plan(): nbrOfWorkers() = 1
[13:36:10.174] plan(): Setting new future strategy stack:
[13:36:10.174] List of future strategies:
[13:36:10.174] 1. sequential:
[13:36:10.174]    - args: function (..., envir = parent.frame())
[13:36:10.174]    - tweaked: FALSE
[13:36:10.174]    - call: plan(strategy, substitute = FALSE)
[13:36:10.174] plan(): nbrOfWorkers() = 1
[13:36:10.174] SequentialFuture started (and completed)
[13:36:10.174] signalConditions() ...
[13:36:10.175]  - include = ‘immediateCondition’
[13:36:10.175]  - exclude = 
[13:36:10.175]  - resignal = FALSE
[13:36:10.175]  - Number of conditions: 1
[13:36:10.175] signalConditions() ... done
[13:36:10.175] - Launch lazy future ... done
[13:36:10.175] run() for ‘SequentialFuture’ ... done
[13:36:10.175] signalConditions() ...
[13:36:10.175]  - include = ‘immediateCondition’
[13:36:10.175]  - exclude = 
[13:36:10.175]  - resignal = FALSE
[13:36:10.176]  - Number of conditions: 1
[13:36:10.176] signalConditions() ... done
[13:36:10.176] Future state: ‘finished’
[13:36:10.176] signalConditions() ...
[13:36:10.176]  - include = ‘condition’
[13:36:10.176]  - exclude = ‘immediateCondition’
[13:36:10.176]  - resignal = TRUE
[13:36:10.176]  - Number of conditions: 1
[13:36:10.176]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[13:36:10.176] signalConditions() ... done
Error in eval(quote({ : '...' used in an incorrect context
[1] "Error in eval(quote({ : '...' used in an incorrect context\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    sum(x, y, ...)}), new.env()): '...' used in an incorrect context>
** Sum function 'E' with plan('sequential') ...
function (...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    globals <- globals::globalsByName("...", envir = environment())
    f <- future({
        fcn <- function() sum(...)
        fcn()
    }, envir = parent.frame(), globals = globals)
    y <- value(f)
    y
}
<bytecode: 0x55832270d2f0>
Arguments '...' exists: TRUE
[13:36:10.177] getGlobalsAndPackages() ...
[13:36:10.177] - globals passed as-is: [1] ‘...’
[13:36:10.177] Resolving globals: FALSE
[13:36:10.177] Tweak future expression to call with '...' arguments ...
[13:36:10.177] {
[13:36:10.177]     do.call(function(...) {
[13:36:10.177]         fcn <- function() sum(...)
[13:36:10.177]         fcn()
[13:36:10.177]     }, args = future.call.arguments)
[13:36:10.177] }
[13:36:10.178] Tweak future expression to call with '...' arguments ... DONE
[13:36:10.178] The total size of the 1 globals is 112 bytes (112 bytes)
[13:36:10.178] The total size of the 1 globals exported for future expression (‘{; fcn <- function() sum(...); fcn(); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘future.call.arguments’ (112 bytes of class ‘list’)
[13:36:10.178] - globals: [1] ‘future.call.arguments’
[13:36:10.178] 
[13:36:10.179] getGlobalsAndPackages() ... DONE
[13:36:10.179] run() for ‘Future’ ...
[13:36:10.179] - state: ‘created’
[13:36:10.179] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:10.179] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:10.179] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:10.179]   - Field: ‘label’
[13:36:10.180]   - Field: ‘local’
[13:36:10.180]   - Field: ‘owner’
[13:36:10.180]   - Field: ‘envir’
[13:36:10.180]   - Field: ‘packages’
[13:36:10.180]   - Field: ‘gc’
[13:36:10.180]   - Field: ‘conditions’
[13:36:10.180]   - Field: ‘expr’
[13:36:10.180]   - Field: ‘uuid’
[13:36:10.180]   - Field: ‘seed’
[13:36:10.180]   - Field: ‘version’
[13:36:10.180]   - Field: ‘result’
[13:36:10.180]   - Field: ‘asynchronous’
[13:36:10.181]   - Field: ‘calls’
[13:36:10.181]   - Field: ‘globals’
[13:36:10.181]   - Field: ‘stdout’
[13:36:10.181]   - Field: ‘earlySignal’
[13:36:10.181]   - Field: ‘lazy’
[13:36:10.181]   - Field: ‘state’
[13:36:10.181] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:10.181] - Launch lazy future ...
[13:36:10.181] Packages needed by the future expression (n = 0): <none>
[13:36:10.181] Packages needed by future strategies (n = 0): <none>
[13:36:10.182] {
[13:36:10.182]     {
[13:36:10.182]         {
[13:36:10.182]             ...future.startTime <- base::Sys.time()
[13:36:10.182]             {
[13:36:10.182]                 {
[13:36:10.182]                   {
[13:36:10.182]                     base::local({
[13:36:10.182]                       has_future <- base::requireNamespace("future", 
[13:36:10.182]                         quietly = TRUE)
[13:36:10.182]                       if (has_future) {
[13:36:10.182]                         ns <- base::getNamespace("future")
[13:36:10.182]                         version <- ns[[".package"]][["version"]]
[13:36:10.182]                         if (is.null(version)) 
[13:36:10.182]                           version <- utils::packageVersion("future")
[13:36:10.182]                       }
[13:36:10.182]                       else {
[13:36:10.182]                         version <- NULL
[13:36:10.182]                       }
[13:36:10.182]                       if (!has_future || version < "1.8.0") {
[13:36:10.182]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:10.182]                           "", base::R.version$version.string), 
[13:36:10.182]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:10.182]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:10.182]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:10.182]                             "release", "version")], collapse = " "), 
[13:36:10.182]                           hostname = base::Sys.info()[["nodename"]])
[13:36:10.182]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:10.182]                           info)
[13:36:10.182]                         info <- base::paste(info, collapse = "; ")
[13:36:10.182]                         if (!has_future) {
[13:36:10.182]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:10.182]                             info)
[13:36:10.182]                         }
[13:36:10.182]                         else {
[13:36:10.182]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:10.182]                             info, version)
[13:36:10.182]                         }
[13:36:10.182]                         base::stop(msg)
[13:36:10.182]                       }
[13:36:10.182]                     })
[13:36:10.182]                   }
[13:36:10.182]                   ...future.strategy.old <- future::plan("list")
[13:36:10.182]                   options(future.plan = NULL)
[13:36:10.182]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:10.182]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:10.182]                 }
[13:36:10.182]                 ...future.workdir <- getwd()
[13:36:10.182]             }
[13:36:10.182]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:10.182]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:10.182]         }
[13:36:10.182]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:10.182]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:10.182]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:10.182]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:10.182]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:10.182]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:10.182]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:10.182]             base::names(...future.oldOptions))
[13:36:10.182]     }
[13:36:10.182]     if (FALSE) {
[13:36:10.182]     }
[13:36:10.182]     else {
[13:36:10.182]         if (TRUE) {
[13:36:10.182]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:10.182]                 open = "w")
[13:36:10.182]         }
[13:36:10.182]         else {
[13:36:10.182]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:10.182]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:10.182]         }
[13:36:10.182]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:10.182]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:10.182]             base::sink(type = "output", split = FALSE)
[13:36:10.182]             base::close(...future.stdout)
[13:36:10.182]         }, add = TRUE)
[13:36:10.182]     }
[13:36:10.182]     ...future.frame <- base::sys.nframe()
[13:36:10.182]     ...future.conditions <- base::list()
[13:36:10.182]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:10.182]     if (FALSE) {
[13:36:10.182]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:10.182]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:10.182]     }
[13:36:10.182]     ...future.result <- base::tryCatch({
[13:36:10.182]         base::withCallingHandlers({
[13:36:10.182]             ...future.value <- base::withVisible(base::local({
[13:36:10.182]                 do.call(function(...) {
[13:36:10.182]                   fcn <- function() sum(...)
[13:36:10.182]                   fcn()
[13:36:10.182]                 }, args = future.call.arguments)
[13:36:10.182]             }))
[13:36:10.182]             future::FutureResult(value = ...future.value$value, 
[13:36:10.182]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:10.182]                   ...future.rng), globalenv = if (FALSE) 
[13:36:10.182]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:10.182]                     ...future.globalenv.names))
[13:36:10.182]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:10.182]         }, condition = base::local({
[13:36:10.182]             c <- base::c
[13:36:10.182]             inherits <- base::inherits
[13:36:10.182]             invokeRestart <- base::invokeRestart
[13:36:10.182]             length <- base::length
[13:36:10.182]             list <- base::list
[13:36:10.182]             seq.int <- base::seq.int
[13:36:10.182]             signalCondition <- base::signalCondition
[13:36:10.182]             sys.calls <- base::sys.calls
[13:36:10.182]             `[[` <- base::`[[`
[13:36:10.182]             `+` <- base::`+`
[13:36:10.182]             `<<-` <- base::`<<-`
[13:36:10.182]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:10.182]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:10.182]                   3L)]
[13:36:10.182]             }
[13:36:10.182]             function(cond) {
[13:36:10.182]                 is_error <- inherits(cond, "error")
[13:36:10.182]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:10.182]                   NULL)
[13:36:10.182]                 if (is_error) {
[13:36:10.182]                   sessionInformation <- function() {
[13:36:10.182]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:10.182]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:10.182]                       search = base::search(), system = base::Sys.info())
[13:36:10.182]                   }
[13:36:10.182]                   ...future.conditions[[length(...future.conditions) + 
[13:36:10.182]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:10.182]                     cond$call), session = sessionInformation(), 
[13:36:10.182]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:10.182]                   signalCondition(cond)
[13:36:10.182]                 }
[13:36:10.182]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:10.182]                 "immediateCondition"))) {
[13:36:10.182]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:10.182]                   ...future.conditions[[length(...future.conditions) + 
[13:36:10.182]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:10.182]                   if (TRUE && !signal) {
[13:36:10.182]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:10.182]                     {
[13:36:10.182]                       inherits <- base::inherits
[13:36:10.182]                       invokeRestart <- base::invokeRestart
[13:36:10.182]                       is.null <- base::is.null
[13:36:10.182]                       muffled <- FALSE
[13:36:10.182]                       if (inherits(cond, "message")) {
[13:36:10.182]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:10.182]                         if (muffled) 
[13:36:10.182]                           invokeRestart("muffleMessage")
[13:36:10.182]                       }
[13:36:10.182]                       else if (inherits(cond, "warning")) {
[13:36:10.182]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:10.182]                         if (muffled) 
[13:36:10.182]                           invokeRestart("muffleWarning")
[13:36:10.182]                       }
[13:36:10.182]                       else if (inherits(cond, "condition")) {
[13:36:10.182]                         if (!is.null(pattern)) {
[13:36:10.182]                           computeRestarts <- base::computeRestarts
[13:36:10.182]                           grepl <- base::grepl
[13:36:10.182]                           restarts <- computeRestarts(cond)
[13:36:10.182]                           for (restart in restarts) {
[13:36:10.182]                             name <- restart$name
[13:36:10.182]                             if (is.null(name)) 
[13:36:10.182]                               next
[13:36:10.182]                             if (!grepl(pattern, name)) 
[13:36:10.182]                               next
[13:36:10.182]                             invokeRestart(restart)
[13:36:10.182]                             muffled <- TRUE
[13:36:10.182]                             break
[13:36:10.182]                           }
[13:36:10.182]                         }
[13:36:10.182]                       }
[13:36:10.182]                       invisible(muffled)
[13:36:10.182]                     }
[13:36:10.182]                     muffleCondition(cond, pattern = "^muffle")
[13:36:10.182]                   }
[13:36:10.182]                 }
[13:36:10.182]                 else {
[13:36:10.182]                   if (TRUE) {
[13:36:10.182]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:10.182]                     {
[13:36:10.182]                       inherits <- base::inherits
[13:36:10.182]                       invokeRestart <- base::invokeRestart
[13:36:10.182]                       is.null <- base::is.null
[13:36:10.182]                       muffled <- FALSE
[13:36:10.182]                       if (inherits(cond, "message")) {
[13:36:10.182]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:10.182]                         if (muffled) 
[13:36:10.182]                           invokeRestart("muffleMessage")
[13:36:10.182]                       }
[13:36:10.182]                       else if (inherits(cond, "warning")) {
[13:36:10.182]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:10.182]                         if (muffled) 
[13:36:10.182]                           invokeRestart("muffleWarning")
[13:36:10.182]                       }
[13:36:10.182]                       else if (inherits(cond, "condition")) {
[13:36:10.182]                         if (!is.null(pattern)) {
[13:36:10.182]                           computeRestarts <- base::computeRestarts
[13:36:10.182]                           grepl <- base::grepl
[13:36:10.182]                           restarts <- computeRestarts(cond)
[13:36:10.182]                           for (restart in restarts) {
[13:36:10.182]                             name <- restart$name
[13:36:10.182]                             if (is.null(name)) 
[13:36:10.182]                               next
[13:36:10.182]                             if (!grepl(pattern, name)) 
[13:36:10.182]                               next
[13:36:10.182]                             invokeRestart(restart)
[13:36:10.182]                             muffled <- TRUE
[13:36:10.182]                             break
[13:36:10.182]                           }
[13:36:10.182]                         }
[13:36:10.182]                       }
[13:36:10.182]                       invisible(muffled)
[13:36:10.182]                     }
[13:36:10.182]                     muffleCondition(cond, pattern = "^muffle")
[13:36:10.182]                   }
[13:36:10.182]                 }
[13:36:10.182]             }
[13:36:10.182]         }))
[13:36:10.182]     }, error = function(ex) {
[13:36:10.182]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:10.182]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:10.182]                 ...future.rng), started = ...future.startTime, 
[13:36:10.182]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:10.182]             version = "1.8"), class = "FutureResult")
[13:36:10.182]     }, finally = {
[13:36:10.182]         if (!identical(...future.workdir, getwd())) 
[13:36:10.182]             setwd(...future.workdir)
[13:36:10.182]         {
[13:36:10.182]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:10.182]                 ...future.oldOptions$nwarnings <- NULL
[13:36:10.182]             }
[13:36:10.182]             base::options(...future.oldOptions)
[13:36:10.182]             if (.Platform$OS.type == "windows") {
[13:36:10.182]                 old_names <- names(...future.oldEnvVars)
[13:36:10.182]                 envs <- base::Sys.getenv()
[13:36:10.182]                 names <- names(envs)
[13:36:10.182]                 common <- intersect(names, old_names)
[13:36:10.182]                 added <- setdiff(names, old_names)
[13:36:10.182]                 removed <- setdiff(old_names, names)
[13:36:10.182]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:10.182]                   envs[common]]
[13:36:10.182]                 NAMES <- toupper(changed)
[13:36:10.182]                 args <- list()
[13:36:10.182]                 for (kk in seq_along(NAMES)) {
[13:36:10.182]                   name <- changed[[kk]]
[13:36:10.182]                   NAME <- NAMES[[kk]]
[13:36:10.182]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:10.182]                     next
[13:36:10.182]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:10.182]                 }
[13:36:10.182]                 NAMES <- toupper(added)
[13:36:10.182]                 for (kk in seq_along(NAMES)) {
[13:36:10.182]                   name <- added[[kk]]
[13:36:10.182]                   NAME <- NAMES[[kk]]
[13:36:10.182]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:10.182]                     next
[13:36:10.182]                   args[[name]] <- ""
[13:36:10.182]                 }
[13:36:10.182]                 NAMES <- toupper(removed)
[13:36:10.182]                 for (kk in seq_along(NAMES)) {
[13:36:10.182]                   name <- removed[[kk]]
[13:36:10.182]                   NAME <- NAMES[[kk]]
[13:36:10.182]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:10.182]                     next
[13:36:10.182]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:10.182]                 }
[13:36:10.182]                 if (length(args) > 0) 
[13:36:10.182]                   base::do.call(base::Sys.setenv, args = args)
[13:36:10.182]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:10.182]             }
[13:36:10.182]             else {
[13:36:10.182]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:10.182]             }
[13:36:10.182]             {
[13:36:10.182]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:10.182]                   0L) {
[13:36:10.182]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:10.182]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:10.182]                   base::options(opts)
[13:36:10.182]                 }
[13:36:10.182]                 {
[13:36:10.182]                   {
[13:36:10.182]                     NULL
[13:36:10.182]                     RNGkind("Mersenne-Twister")
[13:36:10.182]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:10.182]                       inherits = FALSE)
[13:36:10.182]                   }
[13:36:10.182]                   options(future.plan = NULL)
[13:36:10.182]                   if (is.na(NA_character_)) 
[13:36:10.182]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:10.182]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:10.182]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:10.182]                     .init = FALSE)
[13:36:10.182]                 }
[13:36:10.182]             }
[13:36:10.182]         }
[13:36:10.182]     })
[13:36:10.182]     if (TRUE) {
[13:36:10.182]         base::sink(type = "output", split = FALSE)
[13:36:10.182]         if (TRUE) {
[13:36:10.182]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:10.182]         }
[13:36:10.182]         else {
[13:36:10.182]             ...future.result["stdout"] <- base::list(NULL)
[13:36:10.182]         }
[13:36:10.182]         base::close(...future.stdout)
[13:36:10.182]         ...future.stdout <- NULL
[13:36:10.182]     }
[13:36:10.182]     ...future.result$conditions <- ...future.conditions
[13:36:10.182]     ...future.result$finished <- base::Sys.time()
[13:36:10.182]     ...future.result
[13:36:10.182] }
[13:36:10.183] assign_globals() ...
[13:36:10.183] List of 1
[13:36:10.183]  $ future.call.arguments:List of 2
[13:36:10.183]   ..$ : int [1:2] 1 2
[13:36:10.183]   ..$ : num 3
[13:36:10.183]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:36:10.183]  - attr(*, "where")=List of 1
[13:36:10.183]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[13:36:10.183]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:10.183]  - attr(*, "resolved")= logi FALSE
[13:36:10.183]  - attr(*, "total_size")= num 112
[13:36:10.183]  - attr(*, "already-done")= logi TRUE
[13:36:10.187] - copied ‘future.call.arguments’ to environment
[13:36:10.187] assign_globals() ... done
[13:36:10.187] plan(): Setting new future strategy stack:
[13:36:10.187] List of future strategies:
[13:36:10.187] 1. sequential:
[13:36:10.187]    - args: function (..., envir = parent.frame())
[13:36:10.187]    - tweaked: FALSE
[13:36:10.187]    - call: NULL
[13:36:10.187] plan(): nbrOfWorkers() = 1
[13:36:10.188] plan(): Setting new future strategy stack:
[13:36:10.188] List of future strategies:
[13:36:10.188] 1. sequential:
[13:36:10.188]    - args: function (..., envir = parent.frame())
[13:36:10.188]    - tweaked: FALSE
[13:36:10.188]    - call: plan(strategy, substitute = FALSE)
[13:36:10.188] plan(): nbrOfWorkers() = 1
[13:36:10.189] SequentialFuture started (and completed)
[13:36:10.189] - Launch lazy future ... done
[13:36:10.189] run() for ‘SequentialFuture’ ... done
[1] 6
** Sum function 'F' with plan('sequential') ...
function (x, y) 
{
    message("Using '...' in a formula")
    fcn <- function(x, y) {
        z = ~list(...)
        sum(x, y)
    }
    f <- future(fcn(x, y))
    y <- value(f)
    y
}
<bytecode: 0x558320f9e9b0>
Using '...' in a formula
[13:36:10.189] getGlobalsAndPackages() ...
[13:36:10.189] Searching for globals...
[13:36:10.192] - globals found: [9] ‘fcn’, ‘x’, ‘y’, ‘{’, ‘=’, ‘~’, ‘list’, ‘...’, ‘sum’
[13:36:10.192] Searching for globals ... DONE
[13:36:10.192] Resolving globals: FALSE
[13:36:10.192] Tweak future expression to call with '...' arguments ...
[13:36:10.193] The total size of the 3 globals is 4.18 KiB (4280 bytes)
[13:36:10.193] The total size of the 3 globals exported for future expression (‘fcn(x, y)’) is 4.18 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘fcn’ (4.07 KiB of class ‘function’), ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[13:36:10.193] - globals: [3] ‘fcn’, ‘x’, ‘y’
[13:36:10.193] 
[13:36:10.193] getGlobalsAndPackages() ... DONE
[13:36:10.194] run() for ‘Future’ ...
[13:36:10.194] - state: ‘created’
[13:36:10.194] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:10.194] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:10.194] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:10.194]   - Field: ‘label’
[13:36:10.194]   - Field: ‘local’
[13:36:10.195]   - Field: ‘owner’
[13:36:10.196]   - Field: ‘envir’
[13:36:10.196]   - Field: ‘packages’
[13:36:10.196]   - Field: ‘gc’
[13:36:10.196]   - Field: ‘conditions’
[13:36:10.196]   - Field: ‘expr’
[13:36:10.196]   - Field: ‘uuid’
[13:36:10.196]   - Field: ‘seed’
[13:36:10.196]   - Field: ‘version’
[13:36:10.196]   - Field: ‘result’
[13:36:10.196]   - Field: ‘asynchronous’
[13:36:10.196]   - Field: ‘calls’
[13:36:10.196]   - Field: ‘globals’
[13:36:10.197]   - Field: ‘stdout’
[13:36:10.197]   - Field: ‘earlySignal’
[13:36:10.197]   - Field: ‘lazy’
[13:36:10.197]   - Field: ‘state’
[13:36:10.197] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:10.197] - Launch lazy future ...
[13:36:10.197] Packages needed by the future expression (n = 0): <none>
[13:36:10.197] Packages needed by future strategies (n = 0): <none>
[13:36:10.198] {
[13:36:10.198]     {
[13:36:10.198]         {
[13:36:10.198]             ...future.startTime <- base::Sys.time()
[13:36:10.198]             {
[13:36:10.198]                 {
[13:36:10.198]                   {
[13:36:10.198]                     base::local({
[13:36:10.198]                       has_future <- base::requireNamespace("future", 
[13:36:10.198]                         quietly = TRUE)
[13:36:10.198]                       if (has_future) {
[13:36:10.198]                         ns <- base::getNamespace("future")
[13:36:10.198]                         version <- ns[[".package"]][["version"]]
[13:36:10.198]                         if (is.null(version)) 
[13:36:10.198]                           version <- utils::packageVersion("future")
[13:36:10.198]                       }
[13:36:10.198]                       else {
[13:36:10.198]                         version <- NULL
[13:36:10.198]                       }
[13:36:10.198]                       if (!has_future || version < "1.8.0") {
[13:36:10.198]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:10.198]                           "", base::R.version$version.string), 
[13:36:10.198]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:10.198]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:10.198]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:10.198]                             "release", "version")], collapse = " "), 
[13:36:10.198]                           hostname = base::Sys.info()[["nodename"]])
[13:36:10.198]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:10.198]                           info)
[13:36:10.198]                         info <- base::paste(info, collapse = "; ")
[13:36:10.198]                         if (!has_future) {
[13:36:10.198]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:10.198]                             info)
[13:36:10.198]                         }
[13:36:10.198]                         else {
[13:36:10.198]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:10.198]                             info, version)
[13:36:10.198]                         }
[13:36:10.198]                         base::stop(msg)
[13:36:10.198]                       }
[13:36:10.198]                     })
[13:36:10.198]                   }
[13:36:10.198]                   ...future.strategy.old <- future::plan("list")
[13:36:10.198]                   options(future.plan = NULL)
[13:36:10.198]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:10.198]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:10.198]                 }
[13:36:10.198]                 ...future.workdir <- getwd()
[13:36:10.198]             }
[13:36:10.198]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:10.198]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:10.198]         }
[13:36:10.198]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:10.198]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:10.198]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:10.198]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:10.198]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:10.198]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:10.198]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:10.198]             base::names(...future.oldOptions))
[13:36:10.198]     }
[13:36:10.198]     if (FALSE) {
[13:36:10.198]     }
[13:36:10.198]     else {
[13:36:10.198]         if (TRUE) {
[13:36:10.198]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:10.198]                 open = "w")
[13:36:10.198]         }
[13:36:10.198]         else {
[13:36:10.198]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:10.198]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:10.198]         }
[13:36:10.198]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:10.198]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:10.198]             base::sink(type = "output", split = FALSE)
[13:36:10.198]             base::close(...future.stdout)
[13:36:10.198]         }, add = TRUE)
[13:36:10.198]     }
[13:36:10.198]     ...future.frame <- base::sys.nframe()
[13:36:10.198]     ...future.conditions <- base::list()
[13:36:10.198]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:10.198]     if (FALSE) {
[13:36:10.198]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:10.198]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:10.198]     }
[13:36:10.198]     ...future.result <- base::tryCatch({
[13:36:10.198]         base::withCallingHandlers({
[13:36:10.198]             ...future.value <- base::withVisible(base::local(fcn(x, 
[13:36:10.198]                 y)))
[13:36:10.198]             future::FutureResult(value = ...future.value$value, 
[13:36:10.198]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:10.198]                   ...future.rng), globalenv = if (FALSE) 
[13:36:10.198]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:10.198]                     ...future.globalenv.names))
[13:36:10.198]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:10.198]         }, condition = base::local({
[13:36:10.198]             c <- base::c
[13:36:10.198]             inherits <- base::inherits
[13:36:10.198]             invokeRestart <- base::invokeRestart
[13:36:10.198]             length <- base::length
[13:36:10.198]             list <- base::list
[13:36:10.198]             seq.int <- base::seq.int
[13:36:10.198]             signalCondition <- base::signalCondition
[13:36:10.198]             sys.calls <- base::sys.calls
[13:36:10.198]             `[[` <- base::`[[`
[13:36:10.198]             `+` <- base::`+`
[13:36:10.198]             `<<-` <- base::`<<-`
[13:36:10.198]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:10.198]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:10.198]                   3L)]
[13:36:10.198]             }
[13:36:10.198]             function(cond) {
[13:36:10.198]                 is_error <- inherits(cond, "error")
[13:36:10.198]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:10.198]                   NULL)
[13:36:10.198]                 if (is_error) {
[13:36:10.198]                   sessionInformation <- function() {
[13:36:10.198]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:10.198]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:10.198]                       search = base::search(), system = base::Sys.info())
[13:36:10.198]                   }
[13:36:10.198]                   ...future.conditions[[length(...future.conditions) + 
[13:36:10.198]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:10.198]                     cond$call), session = sessionInformation(), 
[13:36:10.198]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:10.198]                   signalCondition(cond)
[13:36:10.198]                 }
[13:36:10.198]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:10.198]                 "immediateCondition"))) {
[13:36:10.198]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:10.198]                   ...future.conditions[[length(...future.conditions) + 
[13:36:10.198]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:10.198]                   if (TRUE && !signal) {
[13:36:10.198]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:10.198]                     {
[13:36:10.198]                       inherits <- base::inherits
[13:36:10.198]                       invokeRestart <- base::invokeRestart
[13:36:10.198]                       is.null <- base::is.null
[13:36:10.198]                       muffled <- FALSE
[13:36:10.198]                       if (inherits(cond, "message")) {
[13:36:10.198]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:10.198]                         if (muffled) 
[13:36:10.198]                           invokeRestart("muffleMessage")
[13:36:10.198]                       }
[13:36:10.198]                       else if (inherits(cond, "warning")) {
[13:36:10.198]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:10.198]                         if (muffled) 
[13:36:10.198]                           invokeRestart("muffleWarning")
[13:36:10.198]                       }
[13:36:10.198]                       else if (inherits(cond, "condition")) {
[13:36:10.198]                         if (!is.null(pattern)) {
[13:36:10.198]                           computeRestarts <- base::computeRestarts
[13:36:10.198]                           grepl <- base::grepl
[13:36:10.198]                           restarts <- computeRestarts(cond)
[13:36:10.198]                           for (restart in restarts) {
[13:36:10.198]                             name <- restart$name
[13:36:10.198]                             if (is.null(name)) 
[13:36:10.198]                               next
[13:36:10.198]                             if (!grepl(pattern, name)) 
[13:36:10.198]                               next
[13:36:10.198]                             invokeRestart(restart)
[13:36:10.198]                             muffled <- TRUE
[13:36:10.198]                             break
[13:36:10.198]                           }
[13:36:10.198]                         }
[13:36:10.198]                       }
[13:36:10.198]                       invisible(muffled)
[13:36:10.198]                     }
[13:36:10.198]                     muffleCondition(cond, pattern = "^muffle")
[13:36:10.198]                   }
[13:36:10.198]                 }
[13:36:10.198]                 else {
[13:36:10.198]                   if (TRUE) {
[13:36:10.198]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:10.198]                     {
[13:36:10.198]                       inherits <- base::inherits
[13:36:10.198]                       invokeRestart <- base::invokeRestart
[13:36:10.198]                       is.null <- base::is.null
[13:36:10.198]                       muffled <- FALSE
[13:36:10.198]                       if (inherits(cond, "message")) {
[13:36:10.198]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:10.198]                         if (muffled) 
[13:36:10.198]                           invokeRestart("muffleMessage")
[13:36:10.198]                       }
[13:36:10.198]                       else if (inherits(cond, "warning")) {
[13:36:10.198]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:10.198]                         if (muffled) 
[13:36:10.198]                           invokeRestart("muffleWarning")
[13:36:10.198]                       }
[13:36:10.198]                       else if (inherits(cond, "condition")) {
[13:36:10.198]                         if (!is.null(pattern)) {
[13:36:10.198]                           computeRestarts <- base::computeRestarts
[13:36:10.198]                           grepl <- base::grepl
[13:36:10.198]                           restarts <- computeRestarts(cond)
[13:36:10.198]                           for (restart in restarts) {
[13:36:10.198]                             name <- restart$name
[13:36:10.198]                             if (is.null(name)) 
[13:36:10.198]                               next
[13:36:10.198]                             if (!grepl(pattern, name)) 
[13:36:10.198]                               next
[13:36:10.198]                             invokeRestart(restart)
[13:36:10.198]                             muffled <- TRUE
[13:36:10.198]                             break
[13:36:10.198]                           }
[13:36:10.198]                         }
[13:36:10.198]                       }
[13:36:10.198]                       invisible(muffled)
[13:36:10.198]                     }
[13:36:10.198]                     muffleCondition(cond, pattern = "^muffle")
[13:36:10.198]                   }
[13:36:10.198]                 }
[13:36:10.198]             }
[13:36:10.198]         }))
[13:36:10.198]     }, error = function(ex) {
[13:36:10.198]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:10.198]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:10.198]                 ...future.rng), started = ...future.startTime, 
[13:36:10.198]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:10.198]             version = "1.8"), class = "FutureResult")
[13:36:10.198]     }, finally = {
[13:36:10.198]         if (!identical(...future.workdir, getwd())) 
[13:36:10.198]             setwd(...future.workdir)
[13:36:10.198]         {
[13:36:10.198]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:10.198]                 ...future.oldOptions$nwarnings <- NULL
[13:36:10.198]             }
[13:36:10.198]             base::options(...future.oldOptions)
[13:36:10.198]             if (.Platform$OS.type == "windows") {
[13:36:10.198]                 old_names <- names(...future.oldEnvVars)
[13:36:10.198]                 envs <- base::Sys.getenv()
[13:36:10.198]                 names <- names(envs)
[13:36:10.198]                 common <- intersect(names, old_names)
[13:36:10.198]                 added <- setdiff(names, old_names)
[13:36:10.198]                 removed <- setdiff(old_names, names)
[13:36:10.198]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:10.198]                   envs[common]]
[13:36:10.198]                 NAMES <- toupper(changed)
[13:36:10.198]                 args <- list()
[13:36:10.198]                 for (kk in seq_along(NAMES)) {
[13:36:10.198]                   name <- changed[[kk]]
[13:36:10.198]                   NAME <- NAMES[[kk]]
[13:36:10.198]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:10.198]                     next
[13:36:10.198]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:10.198]                 }
[13:36:10.198]                 NAMES <- toupper(added)
[13:36:10.198]                 for (kk in seq_along(NAMES)) {
[13:36:10.198]                   name <- added[[kk]]
[13:36:10.198]                   NAME <- NAMES[[kk]]
[13:36:10.198]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:10.198]                     next
[13:36:10.198]                   args[[name]] <- ""
[13:36:10.198]                 }
[13:36:10.198]                 NAMES <- toupper(removed)
[13:36:10.198]                 for (kk in seq_along(NAMES)) {
[13:36:10.198]                   name <- removed[[kk]]
[13:36:10.198]                   NAME <- NAMES[[kk]]
[13:36:10.198]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:10.198]                     next
[13:36:10.198]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:10.198]                 }
[13:36:10.198]                 if (length(args) > 0) 
[13:36:10.198]                   base::do.call(base::Sys.setenv, args = args)
[13:36:10.198]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:10.198]             }
[13:36:10.198]             else {
[13:36:10.198]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:10.198]             }
[13:36:10.198]             {
[13:36:10.198]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:10.198]                   0L) {
[13:36:10.198]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:10.198]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:10.198]                   base::options(opts)
[13:36:10.198]                 }
[13:36:10.198]                 {
[13:36:10.198]                   {
[13:36:10.198]                     NULL
[13:36:10.198]                     RNGkind("Mersenne-Twister")
[13:36:10.198]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:10.198]                       inherits = FALSE)
[13:36:10.198]                   }
[13:36:10.198]                   options(future.plan = NULL)
[13:36:10.198]                   if (is.na(NA_character_)) 
[13:36:10.198]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:10.198]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:10.198]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:10.198]                     .init = FALSE)
[13:36:10.198]                 }
[13:36:10.198]             }
[13:36:10.198]         }
[13:36:10.198]     })
[13:36:10.198]     if (TRUE) {
[13:36:10.198]         base::sink(type = "output", split = FALSE)
[13:36:10.198]         if (TRUE) {
[13:36:10.198]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:10.198]         }
[13:36:10.198]         else {
[13:36:10.198]             ...future.result["stdout"] <- base::list(NULL)
[13:36:10.198]         }
[13:36:10.198]         base::close(...future.stdout)
[13:36:10.198]         ...future.stdout <- NULL
[13:36:10.198]     }
[13:36:10.198]     ...future.result$conditions <- ...future.conditions
[13:36:10.198]     ...future.result$finished <- base::Sys.time()
[13:36:10.198]     ...future.result
[13:36:10.198] }
[13:36:10.199] assign_globals() ...
[13:36:10.199] List of 3
[13:36:10.199]  $ fcn:function (x, y)  
[13:36:10.199]  $ x  : int [1:2] 1 2
[13:36:10.199]  $ y  : num 3
[13:36:10.199]  - attr(*, "where")=List of 3
[13:36:10.199]   ..$ fcn:<environment: R_EmptyEnv> 
[13:36:10.199]   ..$ x  :<environment: R_EmptyEnv> 
[13:36:10.199]   ..$ y  :<environment: R_EmptyEnv> 
[13:36:10.199]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:10.199]  - attr(*, "resolved")= logi FALSE
[13:36:10.199]  - attr(*, "total_size")= num 4280
[13:36:10.199]  - attr(*, "already-done")= logi TRUE
[13:36:10.203] - reassign environment for ‘fcn’
[13:36:10.203] - copied ‘fcn’ to environment
[13:36:10.203] - copied ‘x’ to environment
[13:36:10.203] - copied ‘y’ to environment
[13:36:10.203] assign_globals() ... done
[13:36:10.203] plan(): Setting new future strategy stack:
[13:36:10.203] List of future strategies:
[13:36:10.203] 1. sequential:
[13:36:10.203]    - args: function (..., envir = parent.frame())
[13:36:10.203]    - tweaked: FALSE
[13:36:10.203]    - call: NULL
[13:36:10.204] plan(): nbrOfWorkers() = 1
[13:36:10.204] plan(): Setting new future strategy stack:
[13:36:10.204] List of future strategies:
[13:36:10.204] 1. sequential:
[13:36:10.204]    - args: function (..., envir = parent.frame())
[13:36:10.204]    - tweaked: FALSE
[13:36:10.204]    - call: plan(strategy, substitute = FALSE)
[13:36:10.205] plan(): nbrOfWorkers() = 1
[13:36:10.205] SequentialFuture started (and completed)
[13:36:10.205] - Launch lazy future ... done
[13:36:10.205] run() for ‘SequentialFuture’ ... done
[1] 6
Testing with 1 cores ... DONE
Testing with 2 cores ...
*** Global argument '...' ...
- plan('multicore') ...
[13:36:10.210] plan(): Setting new future strategy stack:
[13:36:10.210] List of future strategies:
[13:36:10.210] 1. multicore:
[13:36:10.210]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:10.210]    - tweaked: FALSE
[13:36:10.210]    - call: plan(strategy, substitute = FALSE)
[13:36:10.214] plan(): nbrOfWorkers() = 2
** Sum function 'A' with plan('multicore') ...
function (x, ...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, ...)
    }
    y
}
<bytecode: 0x558322ef4160>
Arguments '...' exists: TRUE
[13:36:10.214] getGlobalsAndPackages() ...
[13:36:10.214] Searching for globals...
[13:36:10.215] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[13:36:10.216] Searching for globals ... DONE
[13:36:10.216] Resolving globals: FALSE
[13:36:10.216] Tweak future expression to call with '...' arguments ...
[13:36:10.216] {
[13:36:10.216]     do.call(function(...) {
[13:36:10.216]         sum(x, ...)
[13:36:10.216]     }, args = future.call.arguments)
[13:36:10.216] }
[13:36:10.216] Tweak future expression to call with '...' arguments ... DONE
[13:36:10.216] The total size of the 2 globals is 112 bytes (112 bytes)
[13:36:10.217] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[13:36:10.217] - globals: [2] ‘x’, ‘future.call.arguments’
[13:36:10.217] 
[13:36:10.217] getGlobalsAndPackages() ... DONE
[13:36:10.217] run() for ‘Future’ ...
[13:36:10.217] - state: ‘created’
[13:36:10.218] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:36:10.221] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:10.221] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:36:10.221]   - Field: ‘label’
[13:36:10.221]   - Field: ‘local’
[13:36:10.221]   - Field: ‘owner’
[13:36:10.221]   - Field: ‘envir’
[13:36:10.222]   - Field: ‘workers’
[13:36:10.222]   - Field: ‘packages’
[13:36:10.222]   - Field: ‘gc’
[13:36:10.222]   - Field: ‘job’
[13:36:10.222]   - Field: ‘conditions’
[13:36:10.222]   - Field: ‘expr’
[13:36:10.222]   - Field: ‘uuid’
[13:36:10.222]   - Field: ‘seed’
[13:36:10.222]   - Field: ‘version’
[13:36:10.223]   - Field: ‘result’
[13:36:10.223]   - Field: ‘asynchronous’
[13:36:10.223]   - Field: ‘calls’
[13:36:10.224]   - Field: ‘globals’
[13:36:10.224]   - Field: ‘stdout’
[13:36:10.224]   - Field: ‘earlySignal’
[13:36:10.224]   - Field: ‘lazy’
[13:36:10.224]   - Field: ‘state’
[13:36:10.224] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:36:10.224] - Launch lazy future ...
[13:36:10.225] Packages needed by the future expression (n = 0): <none>
[13:36:10.225] Packages needed by future strategies (n = 0): <none>
[13:36:10.226] {
[13:36:10.226]     {
[13:36:10.226]         {
[13:36:10.226]             ...future.startTime <- base::Sys.time()
[13:36:10.226]             {
[13:36:10.226]                 {
[13:36:10.226]                   {
[13:36:10.226]                     {
[13:36:10.226]                       base::local({
[13:36:10.226]                         has_future <- base::requireNamespace("future", 
[13:36:10.226]                           quietly = TRUE)
[13:36:10.226]                         if (has_future) {
[13:36:10.226]                           ns <- base::getNamespace("future")
[13:36:10.226]                           version <- ns[[".package"]][["version"]]
[13:36:10.226]                           if (is.null(version)) 
[13:36:10.226]                             version <- utils::packageVersion("future")
[13:36:10.226]                         }
[13:36:10.226]                         else {
[13:36:10.226]                           version <- NULL
[13:36:10.226]                         }
[13:36:10.226]                         if (!has_future || version < "1.8.0") {
[13:36:10.226]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:10.226]                             "", base::R.version$version.string), 
[13:36:10.226]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:10.226]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:10.226]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:10.226]                               "release", "version")], collapse = " "), 
[13:36:10.226]                             hostname = base::Sys.info()[["nodename"]])
[13:36:10.226]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:10.226]                             info)
[13:36:10.226]                           info <- base::paste(info, collapse = "; ")
[13:36:10.226]                           if (!has_future) {
[13:36:10.226]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:10.226]                               info)
[13:36:10.226]                           }
[13:36:10.226]                           else {
[13:36:10.226]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:10.226]                               info, version)
[13:36:10.226]                           }
[13:36:10.226]                           base::stop(msg)
[13:36:10.226]                         }
[13:36:10.226]                       })
[13:36:10.226]                     }
[13:36:10.226]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:10.226]                     base::options(mc.cores = 1L)
[13:36:10.226]                   }
[13:36:10.226]                   ...future.strategy.old <- future::plan("list")
[13:36:10.226]                   options(future.plan = NULL)
[13:36:10.226]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:10.226]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:10.226]                 }
[13:36:10.226]                 ...future.workdir <- getwd()
[13:36:10.226]             }
[13:36:10.226]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:10.226]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:10.226]         }
[13:36:10.226]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:10.226]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:10.226]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:10.226]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:10.226]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:10.226]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:10.226]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:10.226]             base::names(...future.oldOptions))
[13:36:10.226]     }
[13:36:10.226]     if (FALSE) {
[13:36:10.226]     }
[13:36:10.226]     else {
[13:36:10.226]         if (TRUE) {
[13:36:10.226]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:10.226]                 open = "w")
[13:36:10.226]         }
[13:36:10.226]         else {
[13:36:10.226]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:10.226]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:10.226]         }
[13:36:10.226]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:10.226]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:10.226]             base::sink(type = "output", split = FALSE)
[13:36:10.226]             base::close(...future.stdout)
[13:36:10.226]         }, add = TRUE)
[13:36:10.226]     }
[13:36:10.226]     ...future.frame <- base::sys.nframe()
[13:36:10.226]     ...future.conditions <- base::list()
[13:36:10.226]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:10.226]     if (FALSE) {
[13:36:10.226]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:10.226]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:10.226]     }
[13:36:10.226]     ...future.result <- base::tryCatch({
[13:36:10.226]         base::withCallingHandlers({
[13:36:10.226]             ...future.value <- base::withVisible(base::local({
[13:36:10.226]                 withCallingHandlers({
[13:36:10.226]                   {
[13:36:10.226]                     do.call(function(...) {
[13:36:10.226]                       sum(x, ...)
[13:36:10.226]                     }, args = future.call.arguments)
[13:36:10.226]                   }
[13:36:10.226]                 }, immediateCondition = function(cond) {
[13:36:10.226]                   save_rds <- function (object, pathname, ...) 
[13:36:10.226]                   {
[13:36:10.226]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:10.226]                     if (file_test("-f", pathname_tmp)) {
[13:36:10.226]                       fi_tmp <- file.info(pathname_tmp)
[13:36:10.226]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:10.226]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:10.226]                         fi_tmp[["mtime"]])
[13:36:10.226]                     }
[13:36:10.226]                     tryCatch({
[13:36:10.226]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:10.226]                     }, error = function(ex) {
[13:36:10.226]                       msg <- conditionMessage(ex)
[13:36:10.226]                       fi_tmp <- file.info(pathname_tmp)
[13:36:10.226]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:10.226]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:10.226]                         fi_tmp[["mtime"]], msg)
[13:36:10.226]                       ex$message <- msg
[13:36:10.226]                       stop(ex)
[13:36:10.226]                     })
[13:36:10.226]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:10.226]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:10.226]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:10.226]                       fi_tmp <- file.info(pathname_tmp)
[13:36:10.226]                       fi <- file.info(pathname)
[13:36:10.226]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:10.226]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:10.226]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:10.226]                         fi[["size"]], fi[["mtime"]])
[13:36:10.226]                       stop(msg)
[13:36:10.226]                     }
[13:36:10.226]                     invisible(pathname)
[13:36:10.226]                   }
[13:36:10.226]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:10.226]                     rootPath = tempdir()) 
[13:36:10.226]                   {
[13:36:10.226]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:10.226]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:10.226]                       tmpdir = path, fileext = ".rds")
[13:36:10.226]                     save_rds(obj, file)
[13:36:10.226]                   }
[13:36:10.226]                   saveImmediateCondition(cond, path = "/tmp/RtmpajcPkb/.future/immediateConditions")
[13:36:10.226]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:10.226]                   {
[13:36:10.226]                     inherits <- base::inherits
[13:36:10.226]                     invokeRestart <- base::invokeRestart
[13:36:10.226]                     is.null <- base::is.null
[13:36:10.226]                     muffled <- FALSE
[13:36:10.226]                     if (inherits(cond, "message")) {
[13:36:10.226]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:10.226]                       if (muffled) 
[13:36:10.226]                         invokeRestart("muffleMessage")
[13:36:10.226]                     }
[13:36:10.226]                     else if (inherits(cond, "warning")) {
[13:36:10.226]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:10.226]                       if (muffled) 
[13:36:10.226]                         invokeRestart("muffleWarning")
[13:36:10.226]                     }
[13:36:10.226]                     else if (inherits(cond, "condition")) {
[13:36:10.226]                       if (!is.null(pattern)) {
[13:36:10.226]                         computeRestarts <- base::computeRestarts
[13:36:10.226]                         grepl <- base::grepl
[13:36:10.226]                         restarts <- computeRestarts(cond)
[13:36:10.226]                         for (restart in restarts) {
[13:36:10.226]                           name <- restart$name
[13:36:10.226]                           if (is.null(name)) 
[13:36:10.226]                             next
[13:36:10.226]                           if (!grepl(pattern, name)) 
[13:36:10.226]                             next
[13:36:10.226]                           invokeRestart(restart)
[13:36:10.226]                           muffled <- TRUE
[13:36:10.226]                           break
[13:36:10.226]                         }
[13:36:10.226]                       }
[13:36:10.226]                     }
[13:36:10.226]                     invisible(muffled)
[13:36:10.226]                   }
[13:36:10.226]                   muffleCondition(cond)
[13:36:10.226]                 })
[13:36:10.226]             }))
[13:36:10.226]             future::FutureResult(value = ...future.value$value, 
[13:36:10.226]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:10.226]                   ...future.rng), globalenv = if (FALSE) 
[13:36:10.226]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:10.226]                     ...future.globalenv.names))
[13:36:10.226]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:10.226]         }, condition = base::local({
[13:36:10.226]             c <- base::c
[13:36:10.226]             inherits <- base::inherits
[13:36:10.226]             invokeRestart <- base::invokeRestart
[13:36:10.226]             length <- base::length
[13:36:10.226]             list <- base::list
[13:36:10.226]             seq.int <- base::seq.int
[13:36:10.226]             signalCondition <- base::signalCondition
[13:36:10.226]             sys.calls <- base::sys.calls
[13:36:10.226]             `[[` <- base::`[[`
[13:36:10.226]             `+` <- base::`+`
[13:36:10.226]             `<<-` <- base::`<<-`
[13:36:10.226]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:10.226]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:10.226]                   3L)]
[13:36:10.226]             }
[13:36:10.226]             function(cond) {
[13:36:10.226]                 is_error <- inherits(cond, "error")
[13:36:10.226]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:10.226]                   NULL)
[13:36:10.226]                 if (is_error) {
[13:36:10.226]                   sessionInformation <- function() {
[13:36:10.226]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:10.226]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:10.226]                       search = base::search(), system = base::Sys.info())
[13:36:10.226]                   }
[13:36:10.226]                   ...future.conditions[[length(...future.conditions) + 
[13:36:10.226]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:10.226]                     cond$call), session = sessionInformation(), 
[13:36:10.226]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:10.226]                   signalCondition(cond)
[13:36:10.226]                 }
[13:36:10.226]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:10.226]                 "immediateCondition"))) {
[13:36:10.226]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:10.226]                   ...future.conditions[[length(...future.conditions) + 
[13:36:10.226]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:10.226]                   if (TRUE && !signal) {
[13:36:10.226]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:10.226]                     {
[13:36:10.226]                       inherits <- base::inherits
[13:36:10.226]                       invokeRestart <- base::invokeRestart
[13:36:10.226]                       is.null <- base::is.null
[13:36:10.226]                       muffled <- FALSE
[13:36:10.226]                       if (inherits(cond, "message")) {
[13:36:10.226]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:10.226]                         if (muffled) 
[13:36:10.226]                           invokeRestart("muffleMessage")
[13:36:10.226]                       }
[13:36:10.226]                       else if (inherits(cond, "warning")) {
[13:36:10.226]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:10.226]                         if (muffled) 
[13:36:10.226]                           invokeRestart("muffleWarning")
[13:36:10.226]                       }
[13:36:10.226]                       else if (inherits(cond, "condition")) {
[13:36:10.226]                         if (!is.null(pattern)) {
[13:36:10.226]                           computeRestarts <- base::computeRestarts
[13:36:10.226]                           grepl <- base::grepl
[13:36:10.226]                           restarts <- computeRestarts(cond)
[13:36:10.226]                           for (restart in restarts) {
[13:36:10.226]                             name <- restart$name
[13:36:10.226]                             if (is.null(name)) 
[13:36:10.226]                               next
[13:36:10.226]                             if (!grepl(pattern, name)) 
[13:36:10.226]                               next
[13:36:10.226]                             invokeRestart(restart)
[13:36:10.226]                             muffled <- TRUE
[13:36:10.226]                             break
[13:36:10.226]                           }
[13:36:10.226]                         }
[13:36:10.226]                       }
[13:36:10.226]                       invisible(muffled)
[13:36:10.226]                     }
[13:36:10.226]                     muffleCondition(cond, pattern = "^muffle")
[13:36:10.226]                   }
[13:36:10.226]                 }
[13:36:10.226]                 else {
[13:36:10.226]                   if (TRUE) {
[13:36:10.226]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:10.226]                     {
[13:36:10.226]                       inherits <- base::inherits
[13:36:10.226]                       invokeRestart <- base::invokeRestart
[13:36:10.226]                       is.null <- base::is.null
[13:36:10.226]                       muffled <- FALSE
[13:36:10.226]                       if (inherits(cond, "message")) {
[13:36:10.226]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:10.226]                         if (muffled) 
[13:36:10.226]                           invokeRestart("muffleMessage")
[13:36:10.226]                       }
[13:36:10.226]                       else if (inherits(cond, "warning")) {
[13:36:10.226]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:10.226]                         if (muffled) 
[13:36:10.226]                           invokeRestart("muffleWarning")
[13:36:10.226]                       }
[13:36:10.226]                       else if (inherits(cond, "condition")) {
[13:36:10.226]                         if (!is.null(pattern)) {
[13:36:10.226]                           computeRestarts <- base::computeRestarts
[13:36:10.226]                           grepl <- base::grepl
[13:36:10.226]                           restarts <- computeRestarts(cond)
[13:36:10.226]                           for (restart in restarts) {
[13:36:10.226]                             name <- restart$name
[13:36:10.226]                             if (is.null(name)) 
[13:36:10.226]                               next
[13:36:10.226]                             if (!grepl(pattern, name)) 
[13:36:10.226]                               next
[13:36:10.226]                             invokeRestart(restart)
[13:36:10.226]                             muffled <- TRUE
[13:36:10.226]                             break
[13:36:10.226]                           }
[13:36:10.226]                         }
[13:36:10.226]                       }
[13:36:10.226]                       invisible(muffled)
[13:36:10.226]                     }
[13:36:10.226]                     muffleCondition(cond, pattern = "^muffle")
[13:36:10.226]                   }
[13:36:10.226]                 }
[13:36:10.226]             }
[13:36:10.226]         }))
[13:36:10.226]     }, error = function(ex) {
[13:36:10.226]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:10.226]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:10.226]                 ...future.rng), started = ...future.startTime, 
[13:36:10.226]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:10.226]             version = "1.8"), class = "FutureResult")
[13:36:10.226]     }, finally = {
[13:36:10.226]         if (!identical(...future.workdir, getwd())) 
[13:36:10.226]             setwd(...future.workdir)
[13:36:10.226]         {
[13:36:10.226]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:10.226]                 ...future.oldOptions$nwarnings <- NULL
[13:36:10.226]             }
[13:36:10.226]             base::options(...future.oldOptions)
[13:36:10.226]             if (.Platform$OS.type == "windows") {
[13:36:10.226]                 old_names <- names(...future.oldEnvVars)
[13:36:10.226]                 envs <- base::Sys.getenv()
[13:36:10.226]                 names <- names(envs)
[13:36:10.226]                 common <- intersect(names, old_names)
[13:36:10.226]                 added <- setdiff(names, old_names)
[13:36:10.226]                 removed <- setdiff(old_names, names)
[13:36:10.226]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:10.226]                   envs[common]]
[13:36:10.226]                 NAMES <- toupper(changed)
[13:36:10.226]                 args <- list()
[13:36:10.226]                 for (kk in seq_along(NAMES)) {
[13:36:10.226]                   name <- changed[[kk]]
[13:36:10.226]                   NAME <- NAMES[[kk]]
[13:36:10.226]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:10.226]                     next
[13:36:10.226]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:10.226]                 }
[13:36:10.226]                 NAMES <- toupper(added)
[13:36:10.226]                 for (kk in seq_along(NAMES)) {
[13:36:10.226]                   name <- added[[kk]]
[13:36:10.226]                   NAME <- NAMES[[kk]]
[13:36:10.226]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:10.226]                     next
[13:36:10.226]                   args[[name]] <- ""
[13:36:10.226]                 }
[13:36:10.226]                 NAMES <- toupper(removed)
[13:36:10.226]                 for (kk in seq_along(NAMES)) {
[13:36:10.226]                   name <- removed[[kk]]
[13:36:10.226]                   NAME <- NAMES[[kk]]
[13:36:10.226]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:10.226]                     next
[13:36:10.226]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:10.226]                 }
[13:36:10.226]                 if (length(args) > 0) 
[13:36:10.226]                   base::do.call(base::Sys.setenv, args = args)
[13:36:10.226]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:10.226]             }
[13:36:10.226]             else {
[13:36:10.226]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:10.226]             }
[13:36:10.226]             {
[13:36:10.226]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:10.226]                   0L) {
[13:36:10.226]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:10.226]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:10.226]                   base::options(opts)
[13:36:10.226]                 }
[13:36:10.226]                 {
[13:36:10.226]                   {
[13:36:10.226]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:10.226]                     NULL
[13:36:10.226]                   }
[13:36:10.226]                   options(future.plan = NULL)
[13:36:10.226]                   if (is.na(NA_character_)) 
[13:36:10.226]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:10.226]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:10.226]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:10.226]                     .init = FALSE)
[13:36:10.226]                 }
[13:36:10.226]             }
[13:36:10.226]         }
[13:36:10.226]     })
[13:36:10.226]     if (TRUE) {
[13:36:10.226]         base::sink(type = "output", split = FALSE)
[13:36:10.226]         if (TRUE) {
[13:36:10.226]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:10.226]         }
[13:36:10.226]         else {
[13:36:10.226]             ...future.result["stdout"] <- base::list(NULL)
[13:36:10.226]         }
[13:36:10.226]         base::close(...future.stdout)
[13:36:10.226]         ...future.stdout <- NULL
[13:36:10.226]     }
[13:36:10.226]     ...future.result$conditions <- ...future.conditions
[13:36:10.226]     ...future.result$finished <- base::Sys.time()
[13:36:10.226]     ...future.result
[13:36:10.226] }
[13:36:10.228] assign_globals() ...
[13:36:10.228] List of 2
[13:36:10.228]  $ x                    : int [1:2] 1 2
[13:36:10.228]  $ future.call.arguments:List of 1
[13:36:10.228]   ..$ : num 3
[13:36:10.228]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:36:10.228]  - attr(*, "where")=List of 2
[13:36:10.228]   ..$ x                    :<environment: R_EmptyEnv> 
[13:36:10.228]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[13:36:10.228]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:10.228]  - attr(*, "resolved")= logi FALSE
[13:36:10.228]  - attr(*, "total_size")= num 112
[13:36:10.228]  - attr(*, "already-done")= logi TRUE
[13:36:10.231] - copied ‘x’ to environment
[13:36:10.231] - copied ‘future.call.arguments’ to environment
[13:36:10.231] assign_globals() ... done
[13:36:10.231] requestCore(): workers = 2
[13:36:10.234] MulticoreFuture started
[13:36:10.235] - Launch lazy future ... done
[13:36:10.235] plan(): Setting new future strategy stack:
[13:36:10.235] run() for ‘MulticoreFuture’ ... done
[13:36:10.235] List of future strategies:
[13:36:10.235] 1. sequential:
[13:36:10.235]    - args: function (..., envir = parent.frame())
[13:36:10.235]    - tweaked: FALSE
[13:36:10.235]    - call: NULL
[13:36:10.236] plan(): nbrOfWorkers() = 1
[13:36:10.236] result() for MulticoreFuture ...
[13:36:10.238] plan(): Setting new future strategy stack:
[13:36:10.238] List of future strategies:
[13:36:10.238] 1. multicore:
[13:36:10.238]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:10.238]    - tweaked: FALSE
[13:36:10.238]    - call: plan(strategy, substitute = FALSE)
[13:36:10.243] plan(): nbrOfWorkers() = 2
[13:36:10.248] result() for MulticoreFuture ...
[13:36:10.248] result() for MulticoreFuture ... done
[13:36:10.248] result() for MulticoreFuture ... done
[13:36:10.248] result() for MulticoreFuture ...
[13:36:10.248] result() for MulticoreFuture ... done
[1] 6
** Sum function 'B' with plan('multicore') ...
function (x, ...) 
{
    sumt <- function(x) {
        message("Arguments '...' exists: ", exists("...", inherits = TRUE))
        y %<-% {
            sum(x, ...)
        }
        y
    }
    sumt(x)
}
<bytecode: 0x5583231abaf0>
Arguments '...' exists: TRUE
[13:36:10.249] getGlobalsAndPackages() ...
[13:36:10.249] Searching for globals...
[13:36:10.251] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[13:36:10.251] Searching for globals ... DONE
[13:36:10.251] Resolving globals: FALSE
[13:36:10.251] Tweak future expression to call with '...' arguments ...
[13:36:10.252] {
[13:36:10.252]     do.call(function(...) {
[13:36:10.252]         sum(x, ...)
[13:36:10.252]     }, args = future.call.arguments)
[13:36:10.252] }
[13:36:10.252] Tweak future expression to call with '...' arguments ... DONE
[13:36:10.252] The total size of the 2 globals is 112 bytes (112 bytes)
[13:36:10.253] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[13:36:10.253] - globals: [2] ‘x’, ‘future.call.arguments’
[13:36:10.253] 
[13:36:10.253] getGlobalsAndPackages() ... DONE
[13:36:10.254] run() for ‘Future’ ...
[13:36:10.254] - state: ‘created’
[13:36:10.254] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:36:10.258] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:10.258] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:36:10.258]   - Field: ‘label’
[13:36:10.258]   - Field: ‘local’
[13:36:10.258]   - Field: ‘owner’
[13:36:10.258]   - Field: ‘envir’
[13:36:10.259]   - Field: ‘workers’
[13:36:10.259]   - Field: ‘packages’
[13:36:10.259]   - Field: ‘gc’
[13:36:10.259]   - Field: ‘job’
[13:36:10.259]   - Field: ‘conditions’
[13:36:10.259]   - Field: ‘expr’
[13:36:10.259]   - Field: ‘uuid’
[13:36:10.259]   - Field: ‘seed’
[13:36:10.259]   - Field: ‘version’
[13:36:10.260]   - Field: ‘result’
[13:36:10.260]   - Field: ‘asynchronous’
[13:36:10.260]   - Field: ‘calls’
[13:36:10.260]   - Field: ‘globals’
[13:36:10.260]   - Field: ‘stdout’
[13:36:10.260]   - Field: ‘earlySignal’
[13:36:10.260]   - Field: ‘lazy’
[13:36:10.260]   - Field: ‘state’
[13:36:10.260] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:36:10.261] - Launch lazy future ...
[13:36:10.261] Packages needed by the future expression (n = 0): <none>
[13:36:10.261] Packages needed by future strategies (n = 0): <none>
[13:36:10.261] {
[13:36:10.261]     {
[13:36:10.261]         {
[13:36:10.261]             ...future.startTime <- base::Sys.time()
[13:36:10.261]             {
[13:36:10.261]                 {
[13:36:10.261]                   {
[13:36:10.261]                     {
[13:36:10.261]                       base::local({
[13:36:10.261]                         has_future <- base::requireNamespace("future", 
[13:36:10.261]                           quietly = TRUE)
[13:36:10.261]                         if (has_future) {
[13:36:10.261]                           ns <- base::getNamespace("future")
[13:36:10.261]                           version <- ns[[".package"]][["version"]]
[13:36:10.261]                           if (is.null(version)) 
[13:36:10.261]                             version <- utils::packageVersion("future")
[13:36:10.261]                         }
[13:36:10.261]                         else {
[13:36:10.261]                           version <- NULL
[13:36:10.261]                         }
[13:36:10.261]                         if (!has_future || version < "1.8.0") {
[13:36:10.261]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:10.261]                             "", base::R.version$version.string), 
[13:36:10.261]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:10.261]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:10.261]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:10.261]                               "release", "version")], collapse = " "), 
[13:36:10.261]                             hostname = base::Sys.info()[["nodename"]])
[13:36:10.261]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:10.261]                             info)
[13:36:10.261]                           info <- base::paste(info, collapse = "; ")
[13:36:10.261]                           if (!has_future) {
[13:36:10.261]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:10.261]                               info)
[13:36:10.261]                           }
[13:36:10.261]                           else {
[13:36:10.261]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:10.261]                               info, version)
[13:36:10.261]                           }
[13:36:10.261]                           base::stop(msg)
[13:36:10.261]                         }
[13:36:10.261]                       })
[13:36:10.261]                     }
[13:36:10.261]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:10.261]                     base::options(mc.cores = 1L)
[13:36:10.261]                   }
[13:36:10.261]                   ...future.strategy.old <- future::plan("list")
[13:36:10.261]                   options(future.plan = NULL)
[13:36:10.261]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:10.261]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:10.261]                 }
[13:36:10.261]                 ...future.workdir <- getwd()
[13:36:10.261]             }
[13:36:10.261]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:10.261]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:10.261]         }
[13:36:10.261]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:10.261]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:10.261]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:10.261]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:10.261]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:10.261]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:10.261]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:10.261]             base::names(...future.oldOptions))
[13:36:10.261]     }
[13:36:10.261]     if (FALSE) {
[13:36:10.261]     }
[13:36:10.261]     else {
[13:36:10.261]         if (TRUE) {
[13:36:10.261]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:10.261]                 open = "w")
[13:36:10.261]         }
[13:36:10.261]         else {
[13:36:10.261]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:10.261]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:10.261]         }
[13:36:10.261]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:10.261]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:10.261]             base::sink(type = "output", split = FALSE)
[13:36:10.261]             base::close(...future.stdout)
[13:36:10.261]         }, add = TRUE)
[13:36:10.261]     }
[13:36:10.261]     ...future.frame <- base::sys.nframe()
[13:36:10.261]     ...future.conditions <- base::list()
[13:36:10.261]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:10.261]     if (FALSE) {
[13:36:10.261]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:10.261]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:10.261]     }
[13:36:10.261]     ...future.result <- base::tryCatch({
[13:36:10.261]         base::withCallingHandlers({
[13:36:10.261]             ...future.value <- base::withVisible(base::local({
[13:36:10.261]                 withCallingHandlers({
[13:36:10.261]                   {
[13:36:10.261]                     do.call(function(...) {
[13:36:10.261]                       sum(x, ...)
[13:36:10.261]                     }, args = future.call.arguments)
[13:36:10.261]                   }
[13:36:10.261]                 }, immediateCondition = function(cond) {
[13:36:10.261]                   save_rds <- function (object, pathname, ...) 
[13:36:10.261]                   {
[13:36:10.261]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:10.261]                     if (file_test("-f", pathname_tmp)) {
[13:36:10.261]                       fi_tmp <- file.info(pathname_tmp)
[13:36:10.261]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:10.261]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:10.261]                         fi_tmp[["mtime"]])
[13:36:10.261]                     }
[13:36:10.261]                     tryCatch({
[13:36:10.261]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:10.261]                     }, error = function(ex) {
[13:36:10.261]                       msg <- conditionMessage(ex)
[13:36:10.261]                       fi_tmp <- file.info(pathname_tmp)
[13:36:10.261]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:10.261]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:10.261]                         fi_tmp[["mtime"]], msg)
[13:36:10.261]                       ex$message <- msg
[13:36:10.261]                       stop(ex)
[13:36:10.261]                     })
[13:36:10.261]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:10.261]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:10.261]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:10.261]                       fi_tmp <- file.info(pathname_tmp)
[13:36:10.261]                       fi <- file.info(pathname)
[13:36:10.261]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:10.261]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:10.261]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:10.261]                         fi[["size"]], fi[["mtime"]])
[13:36:10.261]                       stop(msg)
[13:36:10.261]                     }
[13:36:10.261]                     invisible(pathname)
[13:36:10.261]                   }
[13:36:10.261]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:10.261]                     rootPath = tempdir()) 
[13:36:10.261]                   {
[13:36:10.261]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:10.261]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:10.261]                       tmpdir = path, fileext = ".rds")
[13:36:10.261]                     save_rds(obj, file)
[13:36:10.261]                   }
[13:36:10.261]                   saveImmediateCondition(cond, path = "/tmp/RtmpajcPkb/.future/immediateConditions")
[13:36:10.261]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:10.261]                   {
[13:36:10.261]                     inherits <- base::inherits
[13:36:10.261]                     invokeRestart <- base::invokeRestart
[13:36:10.261]                     is.null <- base::is.null
[13:36:10.261]                     muffled <- FALSE
[13:36:10.261]                     if (inherits(cond, "message")) {
[13:36:10.261]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:10.261]                       if (muffled) 
[13:36:10.261]                         invokeRestart("muffleMessage")
[13:36:10.261]                     }
[13:36:10.261]                     else if (inherits(cond, "warning")) {
[13:36:10.261]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:10.261]                       if (muffled) 
[13:36:10.261]                         invokeRestart("muffleWarning")
[13:36:10.261]                     }
[13:36:10.261]                     else if (inherits(cond, "condition")) {
[13:36:10.261]                       if (!is.null(pattern)) {
[13:36:10.261]                         computeRestarts <- base::computeRestarts
[13:36:10.261]                         grepl <- base::grepl
[13:36:10.261]                         restarts <- computeRestarts(cond)
[13:36:10.261]                         for (restart in restarts) {
[13:36:10.261]                           name <- restart$name
[13:36:10.261]                           if (is.null(name)) 
[13:36:10.261]                             next
[13:36:10.261]                           if (!grepl(pattern, name)) 
[13:36:10.261]                             next
[13:36:10.261]                           invokeRestart(restart)
[13:36:10.261]                           muffled <- TRUE
[13:36:10.261]                           break
[13:36:10.261]                         }
[13:36:10.261]                       }
[13:36:10.261]                     }
[13:36:10.261]                     invisible(muffled)
[13:36:10.261]                   }
[13:36:10.261]                   muffleCondition(cond)
[13:36:10.261]                 })
[13:36:10.261]             }))
[13:36:10.261]             future::FutureResult(value = ...future.value$value, 
[13:36:10.261]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:10.261]                   ...future.rng), globalenv = if (FALSE) 
[13:36:10.261]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:10.261]                     ...future.globalenv.names))
[13:36:10.261]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:10.261]         }, condition = base::local({
[13:36:10.261]             c <- base::c
[13:36:10.261]             inherits <- base::inherits
[13:36:10.261]             invokeRestart <- base::invokeRestart
[13:36:10.261]             length <- base::length
[13:36:10.261]             list <- base::list
[13:36:10.261]             seq.int <- base::seq.int
[13:36:10.261]             signalCondition <- base::signalCondition
[13:36:10.261]             sys.calls <- base::sys.calls
[13:36:10.261]             `[[` <- base::`[[`
[13:36:10.261]             `+` <- base::`+`
[13:36:10.261]             `<<-` <- base::`<<-`
[13:36:10.261]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:10.261]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:10.261]                   3L)]
[13:36:10.261]             }
[13:36:10.261]             function(cond) {
[13:36:10.261]                 is_error <- inherits(cond, "error")
[13:36:10.261]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:10.261]                   NULL)
[13:36:10.261]                 if (is_error) {
[13:36:10.261]                   sessionInformation <- function() {
[13:36:10.261]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:10.261]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:10.261]                       search = base::search(), system = base::Sys.info())
[13:36:10.261]                   }
[13:36:10.261]                   ...future.conditions[[length(...future.conditions) + 
[13:36:10.261]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:10.261]                     cond$call), session = sessionInformation(), 
[13:36:10.261]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:10.261]                   signalCondition(cond)
[13:36:10.261]                 }
[13:36:10.261]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:10.261]                 "immediateCondition"))) {
[13:36:10.261]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:10.261]                   ...future.conditions[[length(...future.conditions) + 
[13:36:10.261]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:10.261]                   if (TRUE && !signal) {
[13:36:10.261]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:10.261]                     {
[13:36:10.261]                       inherits <- base::inherits
[13:36:10.261]                       invokeRestart <- base::invokeRestart
[13:36:10.261]                       is.null <- base::is.null
[13:36:10.261]                       muffled <- FALSE
[13:36:10.261]                       if (inherits(cond, "message")) {
[13:36:10.261]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:10.261]                         if (muffled) 
[13:36:10.261]                           invokeRestart("muffleMessage")
[13:36:10.261]                       }
[13:36:10.261]                       else if (inherits(cond, "warning")) {
[13:36:10.261]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:10.261]                         if (muffled) 
[13:36:10.261]                           invokeRestart("muffleWarning")
[13:36:10.261]                       }
[13:36:10.261]                       else if (inherits(cond, "condition")) {
[13:36:10.261]                         if (!is.null(pattern)) {
[13:36:10.261]                           computeRestarts <- base::computeRestarts
[13:36:10.261]                           grepl <- base::grepl
[13:36:10.261]                           restarts <- computeRestarts(cond)
[13:36:10.261]                           for (restart in restarts) {
[13:36:10.261]                             name <- restart$name
[13:36:10.261]                             if (is.null(name)) 
[13:36:10.261]                               next
[13:36:10.261]                             if (!grepl(pattern, name)) 
[13:36:10.261]                               next
[13:36:10.261]                             invokeRestart(restart)
[13:36:10.261]                             muffled <- TRUE
[13:36:10.261]                             break
[13:36:10.261]                           }
[13:36:10.261]                         }
[13:36:10.261]                       }
[13:36:10.261]                       invisible(muffled)
[13:36:10.261]                     }
[13:36:10.261]                     muffleCondition(cond, pattern = "^muffle")
[13:36:10.261]                   }
[13:36:10.261]                 }
[13:36:10.261]                 else {
[13:36:10.261]                   if (TRUE) {
[13:36:10.261]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:10.261]                     {
[13:36:10.261]                       inherits <- base::inherits
[13:36:10.261]                       invokeRestart <- base::invokeRestart
[13:36:10.261]                       is.null <- base::is.null
[13:36:10.261]                       muffled <- FALSE
[13:36:10.261]                       if (inherits(cond, "message")) {
[13:36:10.261]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:10.261]                         if (muffled) 
[13:36:10.261]                           invokeRestart("muffleMessage")
[13:36:10.261]                       }
[13:36:10.261]                       else if (inherits(cond, "warning")) {
[13:36:10.261]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:10.261]                         if (muffled) 
[13:36:10.261]                           invokeRestart("muffleWarning")
[13:36:10.261]                       }
[13:36:10.261]                       else if (inherits(cond, "condition")) {
[13:36:10.261]                         if (!is.null(pattern)) {
[13:36:10.261]                           computeRestarts <- base::computeRestarts
[13:36:10.261]                           grepl <- base::grepl
[13:36:10.261]                           restarts <- computeRestarts(cond)
[13:36:10.261]                           for (restart in restarts) {
[13:36:10.261]                             name <- restart$name
[13:36:10.261]                             if (is.null(name)) 
[13:36:10.261]                               next
[13:36:10.261]                             if (!grepl(pattern, name)) 
[13:36:10.261]                               next
[13:36:10.261]                             invokeRestart(restart)
[13:36:10.261]                             muffled <- TRUE
[13:36:10.261]                             break
[13:36:10.261]                           }
[13:36:10.261]                         }
[13:36:10.261]                       }
[13:36:10.261]                       invisible(muffled)
[13:36:10.261]                     }
[13:36:10.261]                     muffleCondition(cond, pattern = "^muffle")
[13:36:10.261]                   }
[13:36:10.261]                 }
[13:36:10.261]             }
[13:36:10.261]         }))
[13:36:10.261]     }, error = function(ex) {
[13:36:10.261]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:10.261]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:10.261]                 ...future.rng), started = ...future.startTime, 
[13:36:10.261]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:10.261]             version = "1.8"), class = "FutureResult")
[13:36:10.261]     }, finally = {
[13:36:10.261]         if (!identical(...future.workdir, getwd())) 
[13:36:10.261]             setwd(...future.workdir)
[13:36:10.261]         {
[13:36:10.261]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:10.261]                 ...future.oldOptions$nwarnings <- NULL
[13:36:10.261]             }
[13:36:10.261]             base::options(...future.oldOptions)
[13:36:10.261]             if (.Platform$OS.type == "windows") {
[13:36:10.261]                 old_names <- names(...future.oldEnvVars)
[13:36:10.261]                 envs <- base::Sys.getenv()
[13:36:10.261]                 names <- names(envs)
[13:36:10.261]                 common <- intersect(names, old_names)
[13:36:10.261]                 added <- setdiff(names, old_names)
[13:36:10.261]                 removed <- setdiff(old_names, names)
[13:36:10.261]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:10.261]                   envs[common]]
[13:36:10.261]                 NAMES <- toupper(changed)
[13:36:10.261]                 args <- list()
[13:36:10.261]                 for (kk in seq_along(NAMES)) {
[13:36:10.261]                   name <- changed[[kk]]
[13:36:10.261]                   NAME <- NAMES[[kk]]
[13:36:10.261]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:10.261]                     next
[13:36:10.261]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:10.261]                 }
[13:36:10.261]                 NAMES <- toupper(added)
[13:36:10.261]                 for (kk in seq_along(NAMES)) {
[13:36:10.261]                   name <- added[[kk]]
[13:36:10.261]                   NAME <- NAMES[[kk]]
[13:36:10.261]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:10.261]                     next
[13:36:10.261]                   args[[name]] <- ""
[13:36:10.261]                 }
[13:36:10.261]                 NAMES <- toupper(removed)
[13:36:10.261]                 for (kk in seq_along(NAMES)) {
[13:36:10.261]                   name <- removed[[kk]]
[13:36:10.261]                   NAME <- NAMES[[kk]]
[13:36:10.261]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:10.261]                     next
[13:36:10.261]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:10.261]                 }
[13:36:10.261]                 if (length(args) > 0) 
[13:36:10.261]                   base::do.call(base::Sys.setenv, args = args)
[13:36:10.261]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:10.261]             }
[13:36:10.261]             else {
[13:36:10.261]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:10.261]             }
[13:36:10.261]             {
[13:36:10.261]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:10.261]                   0L) {
[13:36:10.261]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:10.261]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:10.261]                   base::options(opts)
[13:36:10.261]                 }
[13:36:10.261]                 {
[13:36:10.261]                   {
[13:36:10.261]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:10.261]                     NULL
[13:36:10.261]                   }
[13:36:10.261]                   options(future.plan = NULL)
[13:36:10.261]                   if (is.na(NA_character_)) 
[13:36:10.261]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:10.261]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:10.261]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:10.261]                     .init = FALSE)
[13:36:10.261]                 }
[13:36:10.261]             }
[13:36:10.261]         }
[13:36:10.261]     })
[13:36:10.261]     if (TRUE) {
[13:36:10.261]         base::sink(type = "output", split = FALSE)
[13:36:10.261]         if (TRUE) {
[13:36:10.261]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:10.261]         }
[13:36:10.261]         else {
[13:36:10.261]             ...future.result["stdout"] <- base::list(NULL)
[13:36:10.261]         }
[13:36:10.261]         base::close(...future.stdout)
[13:36:10.261]         ...future.stdout <- NULL
[13:36:10.261]     }
[13:36:10.261]     ...future.result$conditions <- ...future.conditions
[13:36:10.261]     ...future.result$finished <- base::Sys.time()
[13:36:10.261]     ...future.result
[13:36:10.261] }
[13:36:10.264] assign_globals() ...
[13:36:10.264] List of 2
[13:36:10.264]  $ x                    : int [1:2] 1 2
[13:36:10.264]  $ future.call.arguments:List of 1
[13:36:10.264]   ..$ : num 3
[13:36:10.264]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:36:10.264]  - attr(*, "where")=List of 2
[13:36:10.264]   ..$ x                    :<environment: R_EmptyEnv> 
[13:36:10.264]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[13:36:10.264]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:10.264]  - attr(*, "resolved")= logi FALSE
[13:36:10.264]  - attr(*, "total_size")= num 112
[13:36:10.264]  - attr(*, "already-done")= logi TRUE
[13:36:10.270] - copied ‘x’ to environment
[13:36:10.270] - copied ‘future.call.arguments’ to environment
[13:36:10.270] assign_globals() ... done
[13:36:10.271] requestCore(): workers = 2
[13:36:10.272] MulticoreFuture started
[13:36:10.273] - Launch lazy future ... done
[13:36:10.273] run() for ‘MulticoreFuture’ ... done
[13:36:10.274] plan(): Setting new future strategy stack:
[13:36:10.274] result() for MulticoreFuture ...
[13:36:10.274] List of future strategies:
[13:36:10.274] 1. sequential:
[13:36:10.274]    - args: function (..., envir = parent.frame())
[13:36:10.274]    - tweaked: FALSE
[13:36:10.274]    - call: NULL
[13:36:10.275] plan(): nbrOfWorkers() = 1
[13:36:10.277] plan(): Setting new future strategy stack:
[13:36:10.277] List of future strategies:
[13:36:10.277] 1. multicore:
[13:36:10.277]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:10.277]    - tweaked: FALSE
[13:36:10.277]    - call: plan(strategy, substitute = FALSE)
[13:36:10.282] plan(): nbrOfWorkers() = 2
[13:36:10.283] result() for MulticoreFuture ...
[13:36:10.283] result() for MulticoreFuture ... done
[13:36:10.284] result() for MulticoreFuture ... done
[13:36:10.284] result() for MulticoreFuture ...
[13:36:10.284] result() for MulticoreFuture ... done
[1] 6
** Sum function 'C' with plan('multicore') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y)
    }
    y
}
<bytecode: 0x55832330d3a8>
Arguments '...' exists: FALSE
[13:36:10.285] getGlobalsAndPackages() ...
[13:36:10.285] Searching for globals...
[13:36:10.287] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘y’
[13:36:10.287] Searching for globals ... DONE
[13:36:10.287] Resolving globals: FALSE
[13:36:10.288] The total size of the 2 globals is 112 bytes (112 bytes)
[13:36:10.288] The total size of the 2 globals exported for future expression (‘{; sum(x, y); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[13:36:10.288] - globals: [2] ‘x’, ‘y’
[13:36:10.288] 
[13:36:10.289] getGlobalsAndPackages() ... DONE
[13:36:10.289] run() for ‘Future’ ...
[13:36:10.289] - state: ‘created’
[13:36:10.289] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:36:10.293] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:10.293] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:36:10.293]   - Field: ‘label’
[13:36:10.294]   - Field: ‘local’
[13:36:10.294]   - Field: ‘owner’
[13:36:10.294]   - Field: ‘envir’
[13:36:10.294]   - Field: ‘workers’
[13:36:10.294]   - Field: ‘packages’
[13:36:10.294]   - Field: ‘gc’
[13:36:10.294]   - Field: ‘job’
[13:36:10.294]   - Field: ‘conditions’
[13:36:10.295]   - Field: ‘expr’
[13:36:10.295]   - Field: ‘uuid’
[13:36:10.295]   - Field: ‘seed’
[13:36:10.295]   - Field: ‘version’
[13:36:10.295]   - Field: ‘result’
[13:36:10.295]   - Field: ‘asynchronous’
[13:36:10.295]   - Field: ‘calls’
[13:36:10.295]   - Field: ‘globals’
[13:36:10.295]   - Field: ‘stdout’
[13:36:10.296]   - Field: ‘earlySignal’
[13:36:10.296]   - Field: ‘lazy’
[13:36:10.296]   - Field: ‘state’
[13:36:10.296] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:36:10.296] - Launch lazy future ...
[13:36:10.296] Packages needed by the future expression (n = 0): <none>
[13:36:10.297] Packages needed by future strategies (n = 0): <none>
[13:36:10.297] {
[13:36:10.297]     {
[13:36:10.297]         {
[13:36:10.297]             ...future.startTime <- base::Sys.time()
[13:36:10.297]             {
[13:36:10.297]                 {
[13:36:10.297]                   {
[13:36:10.297]                     {
[13:36:10.297]                       base::local({
[13:36:10.297]                         has_future <- base::requireNamespace("future", 
[13:36:10.297]                           quietly = TRUE)
[13:36:10.297]                         if (has_future) {
[13:36:10.297]                           ns <- base::getNamespace("future")
[13:36:10.297]                           version <- ns[[".package"]][["version"]]
[13:36:10.297]                           if (is.null(version)) 
[13:36:10.297]                             version <- utils::packageVersion("future")
[13:36:10.297]                         }
[13:36:10.297]                         else {
[13:36:10.297]                           version <- NULL
[13:36:10.297]                         }
[13:36:10.297]                         if (!has_future || version < "1.8.0") {
[13:36:10.297]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:10.297]                             "", base::R.version$version.string), 
[13:36:10.297]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:10.297]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:10.297]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:10.297]                               "release", "version")], collapse = " "), 
[13:36:10.297]                             hostname = base::Sys.info()[["nodename"]])
[13:36:10.297]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:10.297]                             info)
[13:36:10.297]                           info <- base::paste(info, collapse = "; ")
[13:36:10.297]                           if (!has_future) {
[13:36:10.297]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:10.297]                               info)
[13:36:10.297]                           }
[13:36:10.297]                           else {
[13:36:10.297]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:10.297]                               info, version)
[13:36:10.297]                           }
[13:36:10.297]                           base::stop(msg)
[13:36:10.297]                         }
[13:36:10.297]                       })
[13:36:10.297]                     }
[13:36:10.297]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:10.297]                     base::options(mc.cores = 1L)
[13:36:10.297]                   }
[13:36:10.297]                   ...future.strategy.old <- future::plan("list")
[13:36:10.297]                   options(future.plan = NULL)
[13:36:10.297]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:10.297]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:10.297]                 }
[13:36:10.297]                 ...future.workdir <- getwd()
[13:36:10.297]             }
[13:36:10.297]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:10.297]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:10.297]         }
[13:36:10.297]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:10.297]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:10.297]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:10.297]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:10.297]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:10.297]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:10.297]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:10.297]             base::names(...future.oldOptions))
[13:36:10.297]     }
[13:36:10.297]     if (FALSE) {
[13:36:10.297]     }
[13:36:10.297]     else {
[13:36:10.297]         if (TRUE) {
[13:36:10.297]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:10.297]                 open = "w")
[13:36:10.297]         }
[13:36:10.297]         else {
[13:36:10.297]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:10.297]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:10.297]         }
[13:36:10.297]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:10.297]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:10.297]             base::sink(type = "output", split = FALSE)
[13:36:10.297]             base::close(...future.stdout)
[13:36:10.297]         }, add = TRUE)
[13:36:10.297]     }
[13:36:10.297]     ...future.frame <- base::sys.nframe()
[13:36:10.297]     ...future.conditions <- base::list()
[13:36:10.297]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:10.297]     if (FALSE) {
[13:36:10.297]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:10.297]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:10.297]     }
[13:36:10.297]     ...future.result <- base::tryCatch({
[13:36:10.297]         base::withCallingHandlers({
[13:36:10.297]             ...future.value <- base::withVisible(base::local({
[13:36:10.297]                 withCallingHandlers({
[13:36:10.297]                   {
[13:36:10.297]                     sum(x, y)
[13:36:10.297]                   }
[13:36:10.297]                 }, immediateCondition = function(cond) {
[13:36:10.297]                   save_rds <- function (object, pathname, ...) 
[13:36:10.297]                   {
[13:36:10.297]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:10.297]                     if (file_test("-f", pathname_tmp)) {
[13:36:10.297]                       fi_tmp <- file.info(pathname_tmp)
[13:36:10.297]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:10.297]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:10.297]                         fi_tmp[["mtime"]])
[13:36:10.297]                     }
[13:36:10.297]                     tryCatch({
[13:36:10.297]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:10.297]                     }, error = function(ex) {
[13:36:10.297]                       msg <- conditionMessage(ex)
[13:36:10.297]                       fi_tmp <- file.info(pathname_tmp)
[13:36:10.297]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:10.297]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:10.297]                         fi_tmp[["mtime"]], msg)
[13:36:10.297]                       ex$message <- msg
[13:36:10.297]                       stop(ex)
[13:36:10.297]                     })
[13:36:10.297]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:10.297]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:10.297]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:10.297]                       fi_tmp <- file.info(pathname_tmp)
[13:36:10.297]                       fi <- file.info(pathname)
[13:36:10.297]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:10.297]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:10.297]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:10.297]                         fi[["size"]], fi[["mtime"]])
[13:36:10.297]                       stop(msg)
[13:36:10.297]                     }
[13:36:10.297]                     invisible(pathname)
[13:36:10.297]                   }
[13:36:10.297]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:10.297]                     rootPath = tempdir()) 
[13:36:10.297]                   {
[13:36:10.297]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:10.297]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:10.297]                       tmpdir = path, fileext = ".rds")
[13:36:10.297]                     save_rds(obj, file)
[13:36:10.297]                   }
[13:36:10.297]                   saveImmediateCondition(cond, path = "/tmp/RtmpajcPkb/.future/immediateConditions")
[13:36:10.297]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:10.297]                   {
[13:36:10.297]                     inherits <- base::inherits
[13:36:10.297]                     invokeRestart <- base::invokeRestart
[13:36:10.297]                     is.null <- base::is.null
[13:36:10.297]                     muffled <- FALSE
[13:36:10.297]                     if (inherits(cond, "message")) {
[13:36:10.297]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:10.297]                       if (muffled) 
[13:36:10.297]                         invokeRestart("muffleMessage")
[13:36:10.297]                     }
[13:36:10.297]                     else if (inherits(cond, "warning")) {
[13:36:10.297]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:10.297]                       if (muffled) 
[13:36:10.297]                         invokeRestart("muffleWarning")
[13:36:10.297]                     }
[13:36:10.297]                     else if (inherits(cond, "condition")) {
[13:36:10.297]                       if (!is.null(pattern)) {
[13:36:10.297]                         computeRestarts <- base::computeRestarts
[13:36:10.297]                         grepl <- base::grepl
[13:36:10.297]                         restarts <- computeRestarts(cond)
[13:36:10.297]                         for (restart in restarts) {
[13:36:10.297]                           name <- restart$name
[13:36:10.297]                           if (is.null(name)) 
[13:36:10.297]                             next
[13:36:10.297]                           if (!grepl(pattern, name)) 
[13:36:10.297]                             next
[13:36:10.297]                           invokeRestart(restart)
[13:36:10.297]                           muffled <- TRUE
[13:36:10.297]                           break
[13:36:10.297]                         }
[13:36:10.297]                       }
[13:36:10.297]                     }
[13:36:10.297]                     invisible(muffled)
[13:36:10.297]                   }
[13:36:10.297]                   muffleCondition(cond)
[13:36:10.297]                 })
[13:36:10.297]             }))
[13:36:10.297]             future::FutureResult(value = ...future.value$value, 
[13:36:10.297]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:10.297]                   ...future.rng), globalenv = if (FALSE) 
[13:36:10.297]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:10.297]                     ...future.globalenv.names))
[13:36:10.297]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:10.297]         }, condition = base::local({
[13:36:10.297]             c <- base::c
[13:36:10.297]             inherits <- base::inherits
[13:36:10.297]             invokeRestart <- base::invokeRestart
[13:36:10.297]             length <- base::length
[13:36:10.297]             list <- base::list
[13:36:10.297]             seq.int <- base::seq.int
[13:36:10.297]             signalCondition <- base::signalCondition
[13:36:10.297]             sys.calls <- base::sys.calls
[13:36:10.297]             `[[` <- base::`[[`
[13:36:10.297]             `+` <- base::`+`
[13:36:10.297]             `<<-` <- base::`<<-`
[13:36:10.297]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:10.297]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:10.297]                   3L)]
[13:36:10.297]             }
[13:36:10.297]             function(cond) {
[13:36:10.297]                 is_error <- inherits(cond, "error")
[13:36:10.297]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:10.297]                   NULL)
[13:36:10.297]                 if (is_error) {
[13:36:10.297]                   sessionInformation <- function() {
[13:36:10.297]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:10.297]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:10.297]                       search = base::search(), system = base::Sys.info())
[13:36:10.297]                   }
[13:36:10.297]                   ...future.conditions[[length(...future.conditions) + 
[13:36:10.297]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:10.297]                     cond$call), session = sessionInformation(), 
[13:36:10.297]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:10.297]                   signalCondition(cond)
[13:36:10.297]                 }
[13:36:10.297]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:10.297]                 "immediateCondition"))) {
[13:36:10.297]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:10.297]                   ...future.conditions[[length(...future.conditions) + 
[13:36:10.297]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:10.297]                   if (TRUE && !signal) {
[13:36:10.297]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:10.297]                     {
[13:36:10.297]                       inherits <- base::inherits
[13:36:10.297]                       invokeRestart <- base::invokeRestart
[13:36:10.297]                       is.null <- base::is.null
[13:36:10.297]                       muffled <- FALSE
[13:36:10.297]                       if (inherits(cond, "message")) {
[13:36:10.297]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:10.297]                         if (muffled) 
[13:36:10.297]                           invokeRestart("muffleMessage")
[13:36:10.297]                       }
[13:36:10.297]                       else if (inherits(cond, "warning")) {
[13:36:10.297]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:10.297]                         if (muffled) 
[13:36:10.297]                           invokeRestart("muffleWarning")
[13:36:10.297]                       }
[13:36:10.297]                       else if (inherits(cond, "condition")) {
[13:36:10.297]                         if (!is.null(pattern)) {
[13:36:10.297]                           computeRestarts <- base::computeRestarts
[13:36:10.297]                           grepl <- base::grepl
[13:36:10.297]                           restarts <- computeRestarts(cond)
[13:36:10.297]                           for (restart in restarts) {
[13:36:10.297]                             name <- restart$name
[13:36:10.297]                             if (is.null(name)) 
[13:36:10.297]                               next
[13:36:10.297]                             if (!grepl(pattern, name)) 
[13:36:10.297]                               next
[13:36:10.297]                             invokeRestart(restart)
[13:36:10.297]                             muffled <- TRUE
[13:36:10.297]                             break
[13:36:10.297]                           }
[13:36:10.297]                         }
[13:36:10.297]                       }
[13:36:10.297]                       invisible(muffled)
[13:36:10.297]                     }
[13:36:10.297]                     muffleCondition(cond, pattern = "^muffle")
[13:36:10.297]                   }
[13:36:10.297]                 }
[13:36:10.297]                 else {
[13:36:10.297]                   if (TRUE) {
[13:36:10.297]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:10.297]                     {
[13:36:10.297]                       inherits <- base::inherits
[13:36:10.297]                       invokeRestart <- base::invokeRestart
[13:36:10.297]                       is.null <- base::is.null
[13:36:10.297]                       muffled <- FALSE
[13:36:10.297]                       if (inherits(cond, "message")) {
[13:36:10.297]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:10.297]                         if (muffled) 
[13:36:10.297]                           invokeRestart("muffleMessage")
[13:36:10.297]                       }
[13:36:10.297]                       else if (inherits(cond, "warning")) {
[13:36:10.297]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:10.297]                         if (muffled) 
[13:36:10.297]                           invokeRestart("muffleWarning")
[13:36:10.297]                       }
[13:36:10.297]                       else if (inherits(cond, "condition")) {
[13:36:10.297]                         if (!is.null(pattern)) {
[13:36:10.297]                           computeRestarts <- base::computeRestarts
[13:36:10.297]                           grepl <- base::grepl
[13:36:10.297]                           restarts <- computeRestarts(cond)
[13:36:10.297]                           for (restart in restarts) {
[13:36:10.297]                             name <- restart$name
[13:36:10.297]                             if (is.null(name)) 
[13:36:10.297]                               next
[13:36:10.297]                             if (!grepl(pattern, name)) 
[13:36:10.297]                               next
[13:36:10.297]                             invokeRestart(restart)
[13:36:10.297]                             muffled <- TRUE
[13:36:10.297]                             break
[13:36:10.297]                           }
[13:36:10.297]                         }
[13:36:10.297]                       }
[13:36:10.297]                       invisible(muffled)
[13:36:10.297]                     }
[13:36:10.297]                     muffleCondition(cond, pattern = "^muffle")
[13:36:10.297]                   }
[13:36:10.297]                 }
[13:36:10.297]             }
[13:36:10.297]         }))
[13:36:10.297]     }, error = function(ex) {
[13:36:10.297]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:10.297]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:10.297]                 ...future.rng), started = ...future.startTime, 
[13:36:10.297]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:10.297]             version = "1.8"), class = "FutureResult")
[13:36:10.297]     }, finally = {
[13:36:10.297]         if (!identical(...future.workdir, getwd())) 
[13:36:10.297]             setwd(...future.workdir)
[13:36:10.297]         {
[13:36:10.297]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:10.297]                 ...future.oldOptions$nwarnings <- NULL
[13:36:10.297]             }
[13:36:10.297]             base::options(...future.oldOptions)
[13:36:10.297]             if (.Platform$OS.type == "windows") {
[13:36:10.297]                 old_names <- names(...future.oldEnvVars)
[13:36:10.297]                 envs <- base::Sys.getenv()
[13:36:10.297]                 names <- names(envs)
[13:36:10.297]                 common <- intersect(names, old_names)
[13:36:10.297]                 added <- setdiff(names, old_names)
[13:36:10.297]                 removed <- setdiff(old_names, names)
[13:36:10.297]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:10.297]                   envs[common]]
[13:36:10.297]                 NAMES <- toupper(changed)
[13:36:10.297]                 args <- list()
[13:36:10.297]                 for (kk in seq_along(NAMES)) {
[13:36:10.297]                   name <- changed[[kk]]
[13:36:10.297]                   NAME <- NAMES[[kk]]
[13:36:10.297]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:10.297]                     next
[13:36:10.297]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:10.297]                 }
[13:36:10.297]                 NAMES <- toupper(added)
[13:36:10.297]                 for (kk in seq_along(NAMES)) {
[13:36:10.297]                   name <- added[[kk]]
[13:36:10.297]                   NAME <- NAMES[[kk]]
[13:36:10.297]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:10.297]                     next
[13:36:10.297]                   args[[name]] <- ""
[13:36:10.297]                 }
[13:36:10.297]                 NAMES <- toupper(removed)
[13:36:10.297]                 for (kk in seq_along(NAMES)) {
[13:36:10.297]                   name <- removed[[kk]]
[13:36:10.297]                   NAME <- NAMES[[kk]]
[13:36:10.297]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:10.297]                     next
[13:36:10.297]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:10.297]                 }
[13:36:10.297]                 if (length(args) > 0) 
[13:36:10.297]                   base::do.call(base::Sys.setenv, args = args)
[13:36:10.297]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:10.297]             }
[13:36:10.297]             else {
[13:36:10.297]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:10.297]             }
[13:36:10.297]             {
[13:36:10.297]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:10.297]                   0L) {
[13:36:10.297]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:10.297]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:10.297]                   base::options(opts)
[13:36:10.297]                 }
[13:36:10.297]                 {
[13:36:10.297]                   {
[13:36:10.297]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:10.297]                     NULL
[13:36:10.297]                   }
[13:36:10.297]                   options(future.plan = NULL)
[13:36:10.297]                   if (is.na(NA_character_)) 
[13:36:10.297]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:10.297]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:10.297]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:10.297]                     .init = FALSE)
[13:36:10.297]                 }
[13:36:10.297]             }
[13:36:10.297]         }
[13:36:10.297]     })
[13:36:10.297]     if (TRUE) {
[13:36:10.297]         base::sink(type = "output", split = FALSE)
[13:36:10.297]         if (TRUE) {
[13:36:10.297]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:10.297]         }
[13:36:10.297]         else {
[13:36:10.297]             ...future.result["stdout"] <- base::list(NULL)
[13:36:10.297]         }
[13:36:10.297]         base::close(...future.stdout)
[13:36:10.297]         ...future.stdout <- NULL
[13:36:10.297]     }
[13:36:10.297]     ...future.result$conditions <- ...future.conditions
[13:36:10.297]     ...future.result$finished <- base::Sys.time()
[13:36:10.297]     ...future.result
[13:36:10.297] }
[13:36:10.300] assign_globals() ...
[13:36:10.300] List of 2
[13:36:10.300]  $ x: int [1:2] 1 2
[13:36:10.300]  $ y: num 3
[13:36:10.300]  - attr(*, "where")=List of 2
[13:36:10.300]   ..$ x:<environment: R_EmptyEnv> 
[13:36:10.300]   ..$ y:<environment: R_EmptyEnv> 
[13:36:10.300]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:10.300]  - attr(*, "resolved")= logi FALSE
[13:36:10.300]  - attr(*, "total_size")= num 112
[13:36:10.300]  - attr(*, "already-done")= logi TRUE
[13:36:10.303] - copied ‘x’ to environment
[13:36:10.303] - copied ‘y’ to environment
[13:36:10.304] assign_globals() ... done
[13:36:10.304] requestCore(): workers = 2
[13:36:10.306] MulticoreFuture started
[13:36:10.306] - Launch lazy future ... done
[13:36:10.306] run() for ‘MulticoreFuture’ ... done
[13:36:10.307] result() for MulticoreFuture ...
[13:36:10.307] plan(): Setting new future strategy stack:
[13:36:10.307] List of future strategies:
[13:36:10.307] 1. sequential:
[13:36:10.307]    - args: function (..., envir = parent.frame())
[13:36:10.307]    - tweaked: FALSE
[13:36:10.307]    - call: NULL
[13:36:10.308] plan(): nbrOfWorkers() = 1
[13:36:10.310] plan(): Setting new future strategy stack:
[13:36:10.310] List of future strategies:
[13:36:10.310] 1. multicore:
[13:36:10.310]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:10.310]    - tweaked: FALSE
[13:36:10.310]    - call: plan(strategy, substitute = FALSE)
[13:36:10.315] plan(): nbrOfWorkers() = 2
[13:36:10.316] result() for MulticoreFuture ...
[13:36:10.316] result() for MulticoreFuture ... done
[13:36:10.316] result() for MulticoreFuture ... done
[13:36:10.316] result() for MulticoreFuture ...
[13:36:10.317] result() for MulticoreFuture ... done
[1] 6
** Sum function 'D' with plan('multicore') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y, ...)
    }
    y
}
<bytecode: 0x5583234f9f00>
Arguments '...' exists: FALSE
[13:36:10.318] getGlobalsAndPackages() ...
[13:36:10.318] Searching for globals...
[13:36:10.320] - globals found: [5] ‘{’, ‘sum’, ‘x’, ‘y’, ‘...’
[13:36:10.320] Searching for globals ... DONE
[13:36:10.320] Resolving globals: FALSE
[13:36:10.320] Tweak future expression to call with '...' arguments ...
[13:36:10.321] The total size of the 2 globals is 112 bytes (112 bytes)
[13:36:10.321] The total size of the 2 globals exported for future expression (‘{; sum(x, y, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[13:36:10.321] - globals: [2] ‘x’, ‘y’
[13:36:10.321] 
[13:36:10.322] getGlobalsAndPackages() ... DONE
[13:36:10.322] run() for ‘Future’ ...
[13:36:10.322] - state: ‘created’
[13:36:10.322] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:36:10.326] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:10.326] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:36:10.326]   - Field: ‘label’
[13:36:10.327]   - Field: ‘local’
[13:36:10.327]   - Field: ‘owner’
[13:36:10.327]   - Field: ‘envir’
[13:36:10.327]   - Field: ‘workers’
[13:36:10.327]   - Field: ‘packages’
[13:36:10.327]   - Field: ‘gc’
[13:36:10.327]   - Field: ‘job’
[13:36:10.327]   - Field: ‘conditions’
[13:36:10.328]   - Field: ‘expr’
[13:36:10.328]   - Field: ‘uuid’
[13:36:10.328]   - Field: ‘seed’
[13:36:10.328]   - Field: ‘version’
[13:36:10.328]   - Field: ‘result’
[13:36:10.328]   - Field: ‘asynchronous’
[13:36:10.328]   - Field: ‘calls’
[13:36:10.328]   - Field: ‘globals’
[13:36:10.328]   - Field: ‘stdout’
[13:36:10.329]   - Field: ‘earlySignal’
[13:36:10.329]   - Field: ‘lazy’
[13:36:10.329]   - Field: ‘state’
[13:36:10.329] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:36:10.329] - Launch lazy future ...
[13:36:10.329] Packages needed by the future expression (n = 0): <none>
[13:36:10.329] Packages needed by future strategies (n = 0): <none>
[13:36:10.330] {
[13:36:10.330]     {
[13:36:10.330]         {
[13:36:10.330]             ...future.startTime <- base::Sys.time()
[13:36:10.330]             {
[13:36:10.330]                 {
[13:36:10.330]                   {
[13:36:10.330]                     {
[13:36:10.330]                       base::local({
[13:36:10.330]                         has_future <- base::requireNamespace("future", 
[13:36:10.330]                           quietly = TRUE)
[13:36:10.330]                         if (has_future) {
[13:36:10.330]                           ns <- base::getNamespace("future")
[13:36:10.330]                           version <- ns[[".package"]][["version"]]
[13:36:10.330]                           if (is.null(version)) 
[13:36:10.330]                             version <- utils::packageVersion("future")
[13:36:10.330]                         }
[13:36:10.330]                         else {
[13:36:10.330]                           version <- NULL
[13:36:10.330]                         }
[13:36:10.330]                         if (!has_future || version < "1.8.0") {
[13:36:10.330]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:10.330]                             "", base::R.version$version.string), 
[13:36:10.330]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:10.330]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:10.330]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:10.330]                               "release", "version")], collapse = " "), 
[13:36:10.330]                             hostname = base::Sys.info()[["nodename"]])
[13:36:10.330]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:10.330]                             info)
[13:36:10.330]                           info <- base::paste(info, collapse = "; ")
[13:36:10.330]                           if (!has_future) {
[13:36:10.330]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:10.330]                               info)
[13:36:10.330]                           }
[13:36:10.330]                           else {
[13:36:10.330]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:10.330]                               info, version)
[13:36:10.330]                           }
[13:36:10.330]                           base::stop(msg)
[13:36:10.330]                         }
[13:36:10.330]                       })
[13:36:10.330]                     }
[13:36:10.330]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:10.330]                     base::options(mc.cores = 1L)
[13:36:10.330]                   }
[13:36:10.330]                   ...future.strategy.old <- future::plan("list")
[13:36:10.330]                   options(future.plan = NULL)
[13:36:10.330]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:10.330]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:10.330]                 }
[13:36:10.330]                 ...future.workdir <- getwd()
[13:36:10.330]             }
[13:36:10.330]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:10.330]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:10.330]         }
[13:36:10.330]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:10.330]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:10.330]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:10.330]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:10.330]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:10.330]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:10.330]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:10.330]             base::names(...future.oldOptions))
[13:36:10.330]     }
[13:36:10.330]     if (FALSE) {
[13:36:10.330]     }
[13:36:10.330]     else {
[13:36:10.330]         if (TRUE) {
[13:36:10.330]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:10.330]                 open = "w")
[13:36:10.330]         }
[13:36:10.330]         else {
[13:36:10.330]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:10.330]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:10.330]         }
[13:36:10.330]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:10.330]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:10.330]             base::sink(type = "output", split = FALSE)
[13:36:10.330]             base::close(...future.stdout)
[13:36:10.330]         }, add = TRUE)
[13:36:10.330]     }
[13:36:10.330]     ...future.frame <- base::sys.nframe()
[13:36:10.330]     ...future.conditions <- base::list()
[13:36:10.330]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:10.330]     if (FALSE) {
[13:36:10.330]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:10.330]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:10.330]     }
[13:36:10.330]     ...future.result <- base::tryCatch({
[13:36:10.330]         base::withCallingHandlers({
[13:36:10.330]             ...future.value <- base::withVisible(base::local({
[13:36:10.330]                 withCallingHandlers({
[13:36:10.330]                   {
[13:36:10.330]                     sum(x, y, ...)
[13:36:10.330]                   }
[13:36:10.330]                 }, immediateCondition = function(cond) {
[13:36:10.330]                   save_rds <- function (object, pathname, ...) 
[13:36:10.330]                   {
[13:36:10.330]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:10.330]                     if (file_test("-f", pathname_tmp)) {
[13:36:10.330]                       fi_tmp <- file.info(pathname_tmp)
[13:36:10.330]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:10.330]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:10.330]                         fi_tmp[["mtime"]])
[13:36:10.330]                     }
[13:36:10.330]                     tryCatch({
[13:36:10.330]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:10.330]                     }, error = function(ex) {
[13:36:10.330]                       msg <- conditionMessage(ex)
[13:36:10.330]                       fi_tmp <- file.info(pathname_tmp)
[13:36:10.330]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:10.330]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:10.330]                         fi_tmp[["mtime"]], msg)
[13:36:10.330]                       ex$message <- msg
[13:36:10.330]                       stop(ex)
[13:36:10.330]                     })
[13:36:10.330]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:10.330]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:10.330]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:10.330]                       fi_tmp <- file.info(pathname_tmp)
[13:36:10.330]                       fi <- file.info(pathname)
[13:36:10.330]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:10.330]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:10.330]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:10.330]                         fi[["size"]], fi[["mtime"]])
[13:36:10.330]                       stop(msg)
[13:36:10.330]                     }
[13:36:10.330]                     invisible(pathname)
[13:36:10.330]                   }
[13:36:10.330]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:10.330]                     rootPath = tempdir()) 
[13:36:10.330]                   {
[13:36:10.330]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:10.330]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:10.330]                       tmpdir = path, fileext = ".rds")
[13:36:10.330]                     save_rds(obj, file)
[13:36:10.330]                   }
[13:36:10.330]                   saveImmediateCondition(cond, path = "/tmp/RtmpajcPkb/.future/immediateConditions")
[13:36:10.330]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:10.330]                   {
[13:36:10.330]                     inherits <- base::inherits
[13:36:10.330]                     invokeRestart <- base::invokeRestart
[13:36:10.330]                     is.null <- base::is.null
[13:36:10.330]                     muffled <- FALSE
[13:36:10.330]                     if (inherits(cond, "message")) {
[13:36:10.330]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:10.330]                       if (muffled) 
[13:36:10.330]                         invokeRestart("muffleMessage")
[13:36:10.330]                     }
[13:36:10.330]                     else if (inherits(cond, "warning")) {
[13:36:10.330]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:10.330]                       if (muffled) 
[13:36:10.330]                         invokeRestart("muffleWarning")
[13:36:10.330]                     }
[13:36:10.330]                     else if (inherits(cond, "condition")) {
[13:36:10.330]                       if (!is.null(pattern)) {
[13:36:10.330]                         computeRestarts <- base::computeRestarts
[13:36:10.330]                         grepl <- base::grepl
[13:36:10.330]                         restarts <- computeRestarts(cond)
[13:36:10.330]                         for (restart in restarts) {
[13:36:10.330]                           name <- restart$name
[13:36:10.330]                           if (is.null(name)) 
[13:36:10.330]                             next
[13:36:10.330]                           if (!grepl(pattern, name)) 
[13:36:10.330]                             next
[13:36:10.330]                           invokeRestart(restart)
[13:36:10.330]                           muffled <- TRUE
[13:36:10.330]                           break
[13:36:10.330]                         }
[13:36:10.330]                       }
[13:36:10.330]                     }
[13:36:10.330]                     invisible(muffled)
[13:36:10.330]                   }
[13:36:10.330]                   muffleCondition(cond)
[13:36:10.330]                 })
[13:36:10.330]             }))
[13:36:10.330]             future::FutureResult(value = ...future.value$value, 
[13:36:10.330]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:10.330]                   ...future.rng), globalenv = if (FALSE) 
[13:36:10.330]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:10.330]                     ...future.globalenv.names))
[13:36:10.330]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:10.330]         }, condition = base::local({
[13:36:10.330]             c <- base::c
[13:36:10.330]             inherits <- base::inherits
[13:36:10.330]             invokeRestart <- base::invokeRestart
[13:36:10.330]             length <- base::length
[13:36:10.330]             list <- base::list
[13:36:10.330]             seq.int <- base::seq.int
[13:36:10.330]             signalCondition <- base::signalCondition
[13:36:10.330]             sys.calls <- base::sys.calls
[13:36:10.330]             `[[` <- base::`[[`
[13:36:10.330]             `+` <- base::`+`
[13:36:10.330]             `<<-` <- base::`<<-`
[13:36:10.330]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:10.330]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:10.330]                   3L)]
[13:36:10.330]             }
[13:36:10.330]             function(cond) {
[13:36:10.330]                 is_error <- inherits(cond, "error")
[13:36:10.330]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:10.330]                   NULL)
[13:36:10.330]                 if (is_error) {
[13:36:10.330]                   sessionInformation <- function() {
[13:36:10.330]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:10.330]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:10.330]                       search = base::search(), system = base::Sys.info())
[13:36:10.330]                   }
[13:36:10.330]                   ...future.conditions[[length(...future.conditions) + 
[13:36:10.330]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:10.330]                     cond$call), session = sessionInformation(), 
[13:36:10.330]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:10.330]                   signalCondition(cond)
[13:36:10.330]                 }
[13:36:10.330]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:10.330]                 "immediateCondition"))) {
[13:36:10.330]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:10.330]                   ...future.conditions[[length(...future.conditions) + 
[13:36:10.330]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:10.330]                   if (TRUE && !signal) {
[13:36:10.330]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:10.330]                     {
[13:36:10.330]                       inherits <- base::inherits
[13:36:10.330]                       invokeRestart <- base::invokeRestart
[13:36:10.330]                       is.null <- base::is.null
[13:36:10.330]                       muffled <- FALSE
[13:36:10.330]                       if (inherits(cond, "message")) {
[13:36:10.330]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:10.330]                         if (muffled) 
[13:36:10.330]                           invokeRestart("muffleMessage")
[13:36:10.330]                       }
[13:36:10.330]                       else if (inherits(cond, "warning")) {
[13:36:10.330]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:10.330]                         if (muffled) 
[13:36:10.330]                           invokeRestart("muffleWarning")
[13:36:10.330]                       }
[13:36:10.330]                       else if (inherits(cond, "condition")) {
[13:36:10.330]                         if (!is.null(pattern)) {
[13:36:10.330]                           computeRestarts <- base::computeRestarts
[13:36:10.330]                           grepl <- base::grepl
[13:36:10.330]                           restarts <- computeRestarts(cond)
[13:36:10.330]                           for (restart in restarts) {
[13:36:10.330]                             name <- restart$name
[13:36:10.330]                             if (is.null(name)) 
[13:36:10.330]                               next
[13:36:10.330]                             if (!grepl(pattern, name)) 
[13:36:10.330]                               next
[13:36:10.330]                             invokeRestart(restart)
[13:36:10.330]                             muffled <- TRUE
[13:36:10.330]                             break
[13:36:10.330]                           }
[13:36:10.330]                         }
[13:36:10.330]                       }
[13:36:10.330]                       invisible(muffled)
[13:36:10.330]                     }
[13:36:10.330]                     muffleCondition(cond, pattern = "^muffle")
[13:36:10.330]                   }
[13:36:10.330]                 }
[13:36:10.330]                 else {
[13:36:10.330]                   if (TRUE) {
[13:36:10.330]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:10.330]                     {
[13:36:10.330]                       inherits <- base::inherits
[13:36:10.330]                       invokeRestart <- base::invokeRestart
[13:36:10.330]                       is.null <- base::is.null
[13:36:10.330]                       muffled <- FALSE
[13:36:10.330]                       if (inherits(cond, "message")) {
[13:36:10.330]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:10.330]                         if (muffled) 
[13:36:10.330]                           invokeRestart("muffleMessage")
[13:36:10.330]                       }
[13:36:10.330]                       else if (inherits(cond, "warning")) {
[13:36:10.330]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:10.330]                         if (muffled) 
[13:36:10.330]                           invokeRestart("muffleWarning")
[13:36:10.330]                       }
[13:36:10.330]                       else if (inherits(cond, "condition")) {
[13:36:10.330]                         if (!is.null(pattern)) {
[13:36:10.330]                           computeRestarts <- base::computeRestarts
[13:36:10.330]                           grepl <- base::grepl
[13:36:10.330]                           restarts <- computeRestarts(cond)
[13:36:10.330]                           for (restart in restarts) {
[13:36:10.330]                             name <- restart$name
[13:36:10.330]                             if (is.null(name)) 
[13:36:10.330]                               next
[13:36:10.330]                             if (!grepl(pattern, name)) 
[13:36:10.330]                               next
[13:36:10.330]                             invokeRestart(restart)
[13:36:10.330]                             muffled <- TRUE
[13:36:10.330]                             break
[13:36:10.330]                           }
[13:36:10.330]                         }
[13:36:10.330]                       }
[13:36:10.330]                       invisible(muffled)
[13:36:10.330]                     }
[13:36:10.330]                     muffleCondition(cond, pattern = "^muffle")
[13:36:10.330]                   }
[13:36:10.330]                 }
[13:36:10.330]             }
[13:36:10.330]         }))
[13:36:10.330]     }, error = function(ex) {
[13:36:10.330]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:10.330]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:10.330]                 ...future.rng), started = ...future.startTime, 
[13:36:10.330]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:10.330]             version = "1.8"), class = "FutureResult")
[13:36:10.330]     }, finally = {
[13:36:10.330]         if (!identical(...future.workdir, getwd())) 
[13:36:10.330]             setwd(...future.workdir)
[13:36:10.330]         {
[13:36:10.330]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:10.330]                 ...future.oldOptions$nwarnings <- NULL
[13:36:10.330]             }
[13:36:10.330]             base::options(...future.oldOptions)
[13:36:10.330]             if (.Platform$OS.type == "windows") {
[13:36:10.330]                 old_names <- names(...future.oldEnvVars)
[13:36:10.330]                 envs <- base::Sys.getenv()
[13:36:10.330]                 names <- names(envs)
[13:36:10.330]                 common <- intersect(names, old_names)
[13:36:10.330]                 added <- setdiff(names, old_names)
[13:36:10.330]                 removed <- setdiff(old_names, names)
[13:36:10.330]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:10.330]                   envs[common]]
[13:36:10.330]                 NAMES <- toupper(changed)
[13:36:10.330]                 args <- list()
[13:36:10.330]                 for (kk in seq_along(NAMES)) {
[13:36:10.330]                   name <- changed[[kk]]
[13:36:10.330]                   NAME <- NAMES[[kk]]
[13:36:10.330]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:10.330]                     next
[13:36:10.330]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:10.330]                 }
[13:36:10.330]                 NAMES <- toupper(added)
[13:36:10.330]                 for (kk in seq_along(NAMES)) {
[13:36:10.330]                   name <- added[[kk]]
[13:36:10.330]                   NAME <- NAMES[[kk]]
[13:36:10.330]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:10.330]                     next
[13:36:10.330]                   args[[name]] <- ""
[13:36:10.330]                 }
[13:36:10.330]                 NAMES <- toupper(removed)
[13:36:10.330]                 for (kk in seq_along(NAMES)) {
[13:36:10.330]                   name <- removed[[kk]]
[13:36:10.330]                   NAME <- NAMES[[kk]]
[13:36:10.330]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:10.330]                     next
[13:36:10.330]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:10.330]                 }
[13:36:10.330]                 if (length(args) > 0) 
[13:36:10.330]                   base::do.call(base::Sys.setenv, args = args)
[13:36:10.330]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:10.330]             }
[13:36:10.330]             else {
[13:36:10.330]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:10.330]             }
[13:36:10.330]             {
[13:36:10.330]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:10.330]                   0L) {
[13:36:10.330]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:10.330]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:10.330]                   base::options(opts)
[13:36:10.330]                 }
[13:36:10.330]                 {
[13:36:10.330]                   {
[13:36:10.330]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:10.330]                     NULL
[13:36:10.330]                   }
[13:36:10.330]                   options(future.plan = NULL)
[13:36:10.330]                   if (is.na(NA_character_)) 
[13:36:10.330]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:10.330]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:10.330]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:10.330]                     .init = FALSE)
[13:36:10.330]                 }
[13:36:10.330]             }
[13:36:10.330]         }
[13:36:10.330]     })
[13:36:10.330]     if (TRUE) {
[13:36:10.330]         base::sink(type = "output", split = FALSE)
[13:36:10.330]         if (TRUE) {
[13:36:10.330]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:10.330]         }
[13:36:10.330]         else {
[13:36:10.330]             ...future.result["stdout"] <- base::list(NULL)
[13:36:10.330]         }
[13:36:10.330]         base::close(...future.stdout)
[13:36:10.330]         ...future.stdout <- NULL
[13:36:10.330]     }
[13:36:10.330]     ...future.result$conditions <- ...future.conditions
[13:36:10.330]     ...future.result$finished <- base::Sys.time()
[13:36:10.330]     ...future.result
[13:36:10.330] }
[13:36:10.335] assign_globals() ...
[13:36:10.335] List of 2
[13:36:10.335]  $ x: int [1:2] 1 2
[13:36:10.335]  $ y: num 3
[13:36:10.335]  - attr(*, "where")=List of 2
[13:36:10.335]   ..$ x:<environment: R_EmptyEnv> 
[13:36:10.335]   ..$ y:<environment: R_EmptyEnv> 
[13:36:10.335]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:10.335]  - attr(*, "resolved")= logi FALSE
[13:36:10.335]  - attr(*, "total_size")= num 112
[13:36:10.335]  - attr(*, "already-done")= logi TRUE
[13:36:10.339] - copied ‘x’ to environment
[13:36:10.339] - copied ‘y’ to environment
[13:36:10.339] assign_globals() ... done
[13:36:10.339] requestCore(): workers = 2
[13:36:10.341] MulticoreFuture started
[13:36:10.341] - Launch lazy future ... done
[13:36:10.341] run() for ‘MulticoreFuture’ ... done
[13:36:10.342] result() for MulticoreFuture ...
[13:36:10.342] plan(): Setting new future strategy stack:
[13:36:10.342] List of future strategies:
[13:36:10.342] 1. sequential:
[13:36:10.342]    - args: function (..., envir = parent.frame())
[13:36:10.342]    - tweaked: FALSE
[13:36:10.342]    - call: NULL
[13:36:10.343] plan(): nbrOfWorkers() = 1
[13:36:10.345] plan(): Setting new future strategy stack:
[13:36:10.345] List of future strategies:
[13:36:10.345] 1. multicore:
[13:36:10.345]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:10.345]    - tweaked: FALSE
[13:36:10.345]    - call: plan(strategy, substitute = FALSE)
[13:36:10.350] plan(): nbrOfWorkers() = 2
[13:36:10.356] result() for MulticoreFuture ...
[13:36:10.356] result() for MulticoreFuture ... done
[13:36:10.356] signalConditions() ...
[13:36:10.357]  - include = ‘immediateCondition’
[13:36:10.357]  - exclude = 
[13:36:10.357]  - resignal = FALSE
[13:36:10.357]  - Number of conditions: 1
[13:36:10.357] signalConditions() ... done
[13:36:10.357] result() for MulticoreFuture ... done
[13:36:10.357] result() for MulticoreFuture ...
[13:36:10.357] result() for MulticoreFuture ... done
[13:36:10.357] signalConditions() ...
[13:36:10.358]  - include = ‘immediateCondition’
[13:36:10.358]  - exclude = 
[13:36:10.358]  - resignal = FALSE
[13:36:10.358]  - Number of conditions: 1
[13:36:10.358] signalConditions() ... done
[13:36:10.358] Future state: ‘finished’
[13:36:10.358] result() for MulticoreFuture ...
[13:36:10.359] result() for MulticoreFuture ... done
[13:36:10.359] signalConditions() ...
[13:36:10.359]  - include = ‘condition’
[13:36:10.359]  - exclude = ‘immediateCondition’
[13:36:10.359]  - resignal = TRUE
[13:36:10.359]  - Number of conditions: 1
[13:36:10.359]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[13:36:10.359] signalConditions() ... done
Error in withCallingHandlers({ : '...' used in an incorrect context
[1] "Error in withCallingHandlers({ : '...' used in an incorrect context\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        sum(x, y, ...)    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpajcPkb/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): '...' used in an incorrect context>
** Sum function 'E' with plan('multicore') ...
function (...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    globals <- globals::globalsByName("...", envir = environment())
    f <- future({
        fcn <- function() sum(...)
        fcn()
    }, envir = parent.frame(), globals = globals)
    y <- value(f)
    y
}
<bytecode: 0x55832270d2f0>
Arguments '...' exists: TRUE
[13:36:10.361] getGlobalsAndPackages() ...
[13:36:10.361] - globals passed as-is: [1] ‘...’
[13:36:10.361] Resolving globals: FALSE
[13:36:10.361] Tweak future expression to call with '...' arguments ...
[13:36:10.361] {
[13:36:10.361]     do.call(function(...) {
[13:36:10.361]         fcn <- function() sum(...)
[13:36:10.361]         fcn()
[13:36:10.361]     }, args = future.call.arguments)
[13:36:10.361] }
[13:36:10.362] Tweak future expression to call with '...' arguments ... DONE
[13:36:10.362] The total size of the 1 globals is 112 bytes (112 bytes)
[13:36:10.363] The total size of the 1 globals exported for future expression (‘{; fcn <- function() sum(...); fcn(); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘future.call.arguments’ (112 bytes of class ‘list’)
[13:36:10.363] - globals: [1] ‘future.call.arguments’
[13:36:10.363] 
[13:36:10.363] getGlobalsAndPackages() ... DONE
[13:36:10.363] run() for ‘Future’ ...
[13:36:10.364] - state: ‘created’
[13:36:10.364] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:36:10.368] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:10.368] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:36:10.368]   - Field: ‘label’
[13:36:10.368]   - Field: ‘local’
[13:36:10.368]   - Field: ‘owner’
[13:36:10.368]   - Field: ‘envir’
[13:36:10.368]   - Field: ‘workers’
[13:36:10.369]   - Field: ‘packages’
[13:36:10.369]   - Field: ‘gc’
[13:36:10.369]   - Field: ‘job’
[13:36:10.369]   - Field: ‘conditions’
[13:36:10.369]   - Field: ‘expr’
[13:36:10.369]   - Field: ‘uuid’
[13:36:10.369]   - Field: ‘seed’
[13:36:10.369]   - Field: ‘version’
[13:36:10.369]   - Field: ‘result’
[13:36:10.369]   - Field: ‘asynchronous’
[13:36:10.370]   - Field: ‘calls’
[13:36:10.370]   - Field: ‘globals’
[13:36:10.370]   - Field: ‘stdout’
[13:36:10.370]   - Field: ‘earlySignal’
[13:36:10.370]   - Field: ‘lazy’
[13:36:10.370]   - Field: ‘state’
[13:36:10.370] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:36:10.370] - Launch lazy future ...
[13:36:10.371] Packages needed by the future expression (n = 0): <none>
[13:36:10.371] Packages needed by future strategies (n = 0): <none>
[13:36:10.371] {
[13:36:10.371]     {
[13:36:10.371]         {
[13:36:10.371]             ...future.startTime <- base::Sys.time()
[13:36:10.371]             {
[13:36:10.371]                 {
[13:36:10.371]                   {
[13:36:10.371]                     {
[13:36:10.371]                       base::local({
[13:36:10.371]                         has_future <- base::requireNamespace("future", 
[13:36:10.371]                           quietly = TRUE)
[13:36:10.371]                         if (has_future) {
[13:36:10.371]                           ns <- base::getNamespace("future")
[13:36:10.371]                           version <- ns[[".package"]][["version"]]
[13:36:10.371]                           if (is.null(version)) 
[13:36:10.371]                             version <- utils::packageVersion("future")
[13:36:10.371]                         }
[13:36:10.371]                         else {
[13:36:10.371]                           version <- NULL
[13:36:10.371]                         }
[13:36:10.371]                         if (!has_future || version < "1.8.0") {
[13:36:10.371]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:10.371]                             "", base::R.version$version.string), 
[13:36:10.371]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:10.371]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:10.371]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:10.371]                               "release", "version")], collapse = " "), 
[13:36:10.371]                             hostname = base::Sys.info()[["nodename"]])
[13:36:10.371]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:10.371]                             info)
[13:36:10.371]                           info <- base::paste(info, collapse = "; ")
[13:36:10.371]                           if (!has_future) {
[13:36:10.371]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:10.371]                               info)
[13:36:10.371]                           }
[13:36:10.371]                           else {
[13:36:10.371]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:10.371]                               info, version)
[13:36:10.371]                           }
[13:36:10.371]                           base::stop(msg)
[13:36:10.371]                         }
[13:36:10.371]                       })
[13:36:10.371]                     }
[13:36:10.371]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:10.371]                     base::options(mc.cores = 1L)
[13:36:10.371]                   }
[13:36:10.371]                   ...future.strategy.old <- future::plan("list")
[13:36:10.371]                   options(future.plan = NULL)
[13:36:10.371]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:10.371]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:10.371]                 }
[13:36:10.371]                 ...future.workdir <- getwd()
[13:36:10.371]             }
[13:36:10.371]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:10.371]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:10.371]         }
[13:36:10.371]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:10.371]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:10.371]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:10.371]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:10.371]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:10.371]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:10.371]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:10.371]             base::names(...future.oldOptions))
[13:36:10.371]     }
[13:36:10.371]     if (FALSE) {
[13:36:10.371]     }
[13:36:10.371]     else {
[13:36:10.371]         if (TRUE) {
[13:36:10.371]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:10.371]                 open = "w")
[13:36:10.371]         }
[13:36:10.371]         else {
[13:36:10.371]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:10.371]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:10.371]         }
[13:36:10.371]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:10.371]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:10.371]             base::sink(type = "output", split = FALSE)
[13:36:10.371]             base::close(...future.stdout)
[13:36:10.371]         }, add = TRUE)
[13:36:10.371]     }
[13:36:10.371]     ...future.frame <- base::sys.nframe()
[13:36:10.371]     ...future.conditions <- base::list()
[13:36:10.371]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:10.371]     if (FALSE) {
[13:36:10.371]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:10.371]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:10.371]     }
[13:36:10.371]     ...future.result <- base::tryCatch({
[13:36:10.371]         base::withCallingHandlers({
[13:36:10.371]             ...future.value <- base::withVisible(base::local({
[13:36:10.371]                 withCallingHandlers({
[13:36:10.371]                   {
[13:36:10.371]                     do.call(function(...) {
[13:36:10.371]                       fcn <- function() sum(...)
[13:36:10.371]                       fcn()
[13:36:10.371]                     }, args = future.call.arguments)
[13:36:10.371]                   }
[13:36:10.371]                 }, immediateCondition = function(cond) {
[13:36:10.371]                   save_rds <- function (object, pathname, ...) 
[13:36:10.371]                   {
[13:36:10.371]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:10.371]                     if (file_test("-f", pathname_tmp)) {
[13:36:10.371]                       fi_tmp <- file.info(pathname_tmp)
[13:36:10.371]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:10.371]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:10.371]                         fi_tmp[["mtime"]])
[13:36:10.371]                     }
[13:36:10.371]                     tryCatch({
[13:36:10.371]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:10.371]                     }, error = function(ex) {
[13:36:10.371]                       msg <- conditionMessage(ex)
[13:36:10.371]                       fi_tmp <- file.info(pathname_tmp)
[13:36:10.371]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:10.371]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:10.371]                         fi_tmp[["mtime"]], msg)
[13:36:10.371]                       ex$message <- msg
[13:36:10.371]                       stop(ex)
[13:36:10.371]                     })
[13:36:10.371]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:10.371]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:10.371]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:10.371]                       fi_tmp <- file.info(pathname_tmp)
[13:36:10.371]                       fi <- file.info(pathname)
[13:36:10.371]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:10.371]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:10.371]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:10.371]                         fi[["size"]], fi[["mtime"]])
[13:36:10.371]                       stop(msg)
[13:36:10.371]                     }
[13:36:10.371]                     invisible(pathname)
[13:36:10.371]                   }
[13:36:10.371]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:10.371]                     rootPath = tempdir()) 
[13:36:10.371]                   {
[13:36:10.371]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:10.371]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:10.371]                       tmpdir = path, fileext = ".rds")
[13:36:10.371]                     save_rds(obj, file)
[13:36:10.371]                   }
[13:36:10.371]                   saveImmediateCondition(cond, path = "/tmp/RtmpajcPkb/.future/immediateConditions")
[13:36:10.371]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:10.371]                   {
[13:36:10.371]                     inherits <- base::inherits
[13:36:10.371]                     invokeRestart <- base::invokeRestart
[13:36:10.371]                     is.null <- base::is.null
[13:36:10.371]                     muffled <- FALSE
[13:36:10.371]                     if (inherits(cond, "message")) {
[13:36:10.371]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:10.371]                       if (muffled) 
[13:36:10.371]                         invokeRestart("muffleMessage")
[13:36:10.371]                     }
[13:36:10.371]                     else if (inherits(cond, "warning")) {
[13:36:10.371]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:10.371]                       if (muffled) 
[13:36:10.371]                         invokeRestart("muffleWarning")
[13:36:10.371]                     }
[13:36:10.371]                     else if (inherits(cond, "condition")) {
[13:36:10.371]                       if (!is.null(pattern)) {
[13:36:10.371]                         computeRestarts <- base::computeRestarts
[13:36:10.371]                         grepl <- base::grepl
[13:36:10.371]                         restarts <- computeRestarts(cond)
[13:36:10.371]                         for (restart in restarts) {
[13:36:10.371]                           name <- restart$name
[13:36:10.371]                           if (is.null(name)) 
[13:36:10.371]                             next
[13:36:10.371]                           if (!grepl(pattern, name)) 
[13:36:10.371]                             next
[13:36:10.371]                           invokeRestart(restart)
[13:36:10.371]                           muffled <- TRUE
[13:36:10.371]                           break
[13:36:10.371]                         }
[13:36:10.371]                       }
[13:36:10.371]                     }
[13:36:10.371]                     invisible(muffled)
[13:36:10.371]                   }
[13:36:10.371]                   muffleCondition(cond)
[13:36:10.371]                 })
[13:36:10.371]             }))
[13:36:10.371]             future::FutureResult(value = ...future.value$value, 
[13:36:10.371]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:10.371]                   ...future.rng), globalenv = if (FALSE) 
[13:36:10.371]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:10.371]                     ...future.globalenv.names))
[13:36:10.371]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:10.371]         }, condition = base::local({
[13:36:10.371]             c <- base::c
[13:36:10.371]             inherits <- base::inherits
[13:36:10.371]             invokeRestart <- base::invokeRestart
[13:36:10.371]             length <- base::length
[13:36:10.371]             list <- base::list
[13:36:10.371]             seq.int <- base::seq.int
[13:36:10.371]             signalCondition <- base::signalCondition
[13:36:10.371]             sys.calls <- base::sys.calls
[13:36:10.371]             `[[` <- base::`[[`
[13:36:10.371]             `+` <- base::`+`
[13:36:10.371]             `<<-` <- base::`<<-`
[13:36:10.371]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:10.371]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:10.371]                   3L)]
[13:36:10.371]             }
[13:36:10.371]             function(cond) {
[13:36:10.371]                 is_error <- inherits(cond, "error")
[13:36:10.371]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:10.371]                   NULL)
[13:36:10.371]                 if (is_error) {
[13:36:10.371]                   sessionInformation <- function() {
[13:36:10.371]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:10.371]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:10.371]                       search = base::search(), system = base::Sys.info())
[13:36:10.371]                   }
[13:36:10.371]                   ...future.conditions[[length(...future.conditions) + 
[13:36:10.371]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:10.371]                     cond$call), session = sessionInformation(), 
[13:36:10.371]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:10.371]                   signalCondition(cond)
[13:36:10.371]                 }
[13:36:10.371]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:10.371]                 "immediateCondition"))) {
[13:36:10.371]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:10.371]                   ...future.conditions[[length(...future.conditions) + 
[13:36:10.371]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:10.371]                   if (TRUE && !signal) {
[13:36:10.371]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:10.371]                     {
[13:36:10.371]                       inherits <- base::inherits
[13:36:10.371]                       invokeRestart <- base::invokeRestart
[13:36:10.371]                       is.null <- base::is.null
[13:36:10.371]                       muffled <- FALSE
[13:36:10.371]                       if (inherits(cond, "message")) {
[13:36:10.371]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:10.371]                         if (muffled) 
[13:36:10.371]                           invokeRestart("muffleMessage")
[13:36:10.371]                       }
[13:36:10.371]                       else if (inherits(cond, "warning")) {
[13:36:10.371]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:10.371]                         if (muffled) 
[13:36:10.371]                           invokeRestart("muffleWarning")
[13:36:10.371]                       }
[13:36:10.371]                       else if (inherits(cond, "condition")) {
[13:36:10.371]                         if (!is.null(pattern)) {
[13:36:10.371]                           computeRestarts <- base::computeRestarts
[13:36:10.371]                           grepl <- base::grepl
[13:36:10.371]                           restarts <- computeRestarts(cond)
[13:36:10.371]                           for (restart in restarts) {
[13:36:10.371]                             name <- restart$name
[13:36:10.371]                             if (is.null(name)) 
[13:36:10.371]                               next
[13:36:10.371]                             if (!grepl(pattern, name)) 
[13:36:10.371]                               next
[13:36:10.371]                             invokeRestart(restart)
[13:36:10.371]                             muffled <- TRUE
[13:36:10.371]                             break
[13:36:10.371]                           }
[13:36:10.371]                         }
[13:36:10.371]                       }
[13:36:10.371]                       invisible(muffled)
[13:36:10.371]                     }
[13:36:10.371]                     muffleCondition(cond, pattern = "^muffle")
[13:36:10.371]                   }
[13:36:10.371]                 }
[13:36:10.371]                 else {
[13:36:10.371]                   if (TRUE) {
[13:36:10.371]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:10.371]                     {
[13:36:10.371]                       inherits <- base::inherits
[13:36:10.371]                       invokeRestart <- base::invokeRestart
[13:36:10.371]                       is.null <- base::is.null
[13:36:10.371]                       muffled <- FALSE
[13:36:10.371]                       if (inherits(cond, "message")) {
[13:36:10.371]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:10.371]                         if (muffled) 
[13:36:10.371]                           invokeRestart("muffleMessage")
[13:36:10.371]                       }
[13:36:10.371]                       else if (inherits(cond, "warning")) {
[13:36:10.371]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:10.371]                         if (muffled) 
[13:36:10.371]                           invokeRestart("muffleWarning")
[13:36:10.371]                       }
[13:36:10.371]                       else if (inherits(cond, "condition")) {
[13:36:10.371]                         if (!is.null(pattern)) {
[13:36:10.371]                           computeRestarts <- base::computeRestarts
[13:36:10.371]                           grepl <- base::grepl
[13:36:10.371]                           restarts <- computeRestarts(cond)
[13:36:10.371]                           for (restart in restarts) {
[13:36:10.371]                             name <- restart$name
[13:36:10.371]                             if (is.null(name)) 
[13:36:10.371]                               next
[13:36:10.371]                             if (!grepl(pattern, name)) 
[13:36:10.371]                               next
[13:36:10.371]                             invokeRestart(restart)
[13:36:10.371]                             muffled <- TRUE
[13:36:10.371]                             break
[13:36:10.371]                           }
[13:36:10.371]                         }
[13:36:10.371]                       }
[13:36:10.371]                       invisible(muffled)
[13:36:10.371]                     }
[13:36:10.371]                     muffleCondition(cond, pattern = "^muffle")
[13:36:10.371]                   }
[13:36:10.371]                 }
[13:36:10.371]             }
[13:36:10.371]         }))
[13:36:10.371]     }, error = function(ex) {
[13:36:10.371]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:10.371]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:10.371]                 ...future.rng), started = ...future.startTime, 
[13:36:10.371]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:10.371]             version = "1.8"), class = "FutureResult")
[13:36:10.371]     }, finally = {
[13:36:10.371]         if (!identical(...future.workdir, getwd())) 
[13:36:10.371]             setwd(...future.workdir)
[13:36:10.371]         {
[13:36:10.371]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:10.371]                 ...future.oldOptions$nwarnings <- NULL
[13:36:10.371]             }
[13:36:10.371]             base::options(...future.oldOptions)
[13:36:10.371]             if (.Platform$OS.type == "windows") {
[13:36:10.371]                 old_names <- names(...future.oldEnvVars)
[13:36:10.371]                 envs <- base::Sys.getenv()
[13:36:10.371]                 names <- names(envs)
[13:36:10.371]                 common <- intersect(names, old_names)
[13:36:10.371]                 added <- setdiff(names, old_names)
[13:36:10.371]                 removed <- setdiff(old_names, names)
[13:36:10.371]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:10.371]                   envs[common]]
[13:36:10.371]                 NAMES <- toupper(changed)
[13:36:10.371]                 args <- list()
[13:36:10.371]                 for (kk in seq_along(NAMES)) {
[13:36:10.371]                   name <- changed[[kk]]
[13:36:10.371]                   NAME <- NAMES[[kk]]
[13:36:10.371]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:10.371]                     next
[13:36:10.371]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:10.371]                 }
[13:36:10.371]                 NAMES <- toupper(added)
[13:36:10.371]                 for (kk in seq_along(NAMES)) {
[13:36:10.371]                   name <- added[[kk]]
[13:36:10.371]                   NAME <- NAMES[[kk]]
[13:36:10.371]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:10.371]                     next
[13:36:10.371]                   args[[name]] <- ""
[13:36:10.371]                 }
[13:36:10.371]                 NAMES <- toupper(removed)
[13:36:10.371]                 for (kk in seq_along(NAMES)) {
[13:36:10.371]                   name <- removed[[kk]]
[13:36:10.371]                   NAME <- NAMES[[kk]]
[13:36:10.371]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:10.371]                     next
[13:36:10.371]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:10.371]                 }
[13:36:10.371]                 if (length(args) > 0) 
[13:36:10.371]                   base::do.call(base::Sys.setenv, args = args)
[13:36:10.371]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:10.371]             }
[13:36:10.371]             else {
[13:36:10.371]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:10.371]             }
[13:36:10.371]             {
[13:36:10.371]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:10.371]                   0L) {
[13:36:10.371]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:10.371]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:10.371]                   base::options(opts)
[13:36:10.371]                 }
[13:36:10.371]                 {
[13:36:10.371]                   {
[13:36:10.371]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:10.371]                     NULL
[13:36:10.371]                   }
[13:36:10.371]                   options(future.plan = NULL)
[13:36:10.371]                   if (is.na(NA_character_)) 
[13:36:10.371]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:10.371]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:10.371]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:10.371]                     .init = FALSE)
[13:36:10.371]                 }
[13:36:10.371]             }
[13:36:10.371]         }
[13:36:10.371]     })
[13:36:10.371]     if (TRUE) {
[13:36:10.371]         base::sink(type = "output", split = FALSE)
[13:36:10.371]         if (TRUE) {
[13:36:10.371]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:10.371]         }
[13:36:10.371]         else {
[13:36:10.371]             ...future.result["stdout"] <- base::list(NULL)
[13:36:10.371]         }
[13:36:10.371]         base::close(...future.stdout)
[13:36:10.371]         ...future.stdout <- NULL
[13:36:10.371]     }
[13:36:10.371]     ...future.result$conditions <- ...future.conditions
[13:36:10.371]     ...future.result$finished <- base::Sys.time()
[13:36:10.371]     ...future.result
[13:36:10.371] }
[13:36:10.374] assign_globals() ...
[13:36:10.374] List of 1
[13:36:10.374]  $ future.call.arguments:List of 2
[13:36:10.374]   ..$ : int [1:2] 1 2
[13:36:10.374]   ..$ : num 3
[13:36:10.374]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:36:10.374]  - attr(*, "where")=List of 1
[13:36:10.374]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[13:36:10.374]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:10.374]  - attr(*, "resolved")= logi FALSE
[13:36:10.374]  - attr(*, "total_size")= num 112
[13:36:10.374]  - attr(*, "already-done")= logi TRUE
[13:36:10.378] - copied ‘future.call.arguments’ to environment
[13:36:10.378] assign_globals() ... done
[13:36:10.378] requestCore(): workers = 2
[13:36:10.380] MulticoreFuture started
[13:36:10.380] - Launch lazy future ... done
[13:36:10.380] run() for ‘MulticoreFuture’ ... done
[13:36:10.381] result() for MulticoreFuture ...
[13:36:10.381] plan(): Setting new future strategy stack:
[13:36:10.381] List of future strategies:
[13:36:10.381] 1. sequential:
[13:36:10.381]    - args: function (..., envir = parent.frame())
[13:36:10.381]    - tweaked: FALSE
[13:36:10.381]    - call: NULL
[13:36:10.382] plan(): nbrOfWorkers() = 1
[13:36:10.384] plan(): Setting new future strategy stack:
[13:36:10.384] List of future strategies:
[13:36:10.384] 1. multicore:
[13:36:10.384]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:10.384]    - tweaked: FALSE
[13:36:10.384]    - call: plan(strategy, substitute = FALSE)
[13:36:10.389] plan(): nbrOfWorkers() = 2
[13:36:10.390] result() for MulticoreFuture ...
[13:36:10.390] result() for MulticoreFuture ... done
[13:36:10.390] result() for MulticoreFuture ... done
[13:36:10.390] result() for MulticoreFuture ...
[13:36:10.390] result() for MulticoreFuture ... done
[1] 6
** Sum function 'F' with plan('multicore') ...
function (x, y) 
{
    message("Using '...' in a formula")
    fcn <- function(x, y) {
        z = ~list(...)
        sum(x, y)
    }
    f <- future(fcn(x, y))
    y <- value(f)
    y
}
<bytecode: 0x558320f9e9b0>
Using '...' in a formula
[13:36:10.391] getGlobalsAndPackages() ...
[13:36:10.391] Searching for globals...
[13:36:10.399] - globals found: [9] ‘fcn’, ‘x’, ‘y’, ‘{’, ‘=’, ‘~’, ‘list’, ‘...’, ‘sum’
[13:36:10.399] Searching for globals ... DONE
[13:36:10.399] Resolving globals: FALSE
[13:36:10.399] Tweak future expression to call with '...' arguments ...
[13:36:10.400] The total size of the 3 globals is 4.18 KiB (4280 bytes)
[13:36:10.400] The total size of the 3 globals exported for future expression (‘fcn(x, y)’) is 4.18 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘fcn’ (4.07 KiB of class ‘function’), ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[13:36:10.400] - globals: [3] ‘fcn’, ‘x’, ‘y’
[13:36:10.401] 
[13:36:10.401] getGlobalsAndPackages() ... DONE
[13:36:10.401] run() for ‘Future’ ...
[13:36:10.401] - state: ‘created’
[13:36:10.401] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:36:10.405] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:10.405] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:36:10.405]   - Field: ‘label’
[13:36:10.406]   - Field: ‘local’
[13:36:10.406]   - Field: ‘owner’
[13:36:10.406]   - Field: ‘envir’
[13:36:10.406]   - Field: ‘workers’
[13:36:10.406]   - Field: ‘packages’
[13:36:10.406]   - Field: ‘gc’
[13:36:10.406]   - Field: ‘job’
[13:36:10.406]   - Field: ‘conditions’
[13:36:10.406]   - Field: ‘expr’
[13:36:10.407]   - Field: ‘uuid’
[13:36:10.407]   - Field: ‘seed’
[13:36:10.407]   - Field: ‘version’
[13:36:10.407]   - Field: ‘result’
[13:36:10.407]   - Field: ‘asynchronous’
[13:36:10.407]   - Field: ‘calls’
[13:36:10.407]   - Field: ‘globals’
[13:36:10.407]   - Field: ‘stdout’
[13:36:10.407]   - Field: ‘earlySignal’
[13:36:10.408]   - Field: ‘lazy’
[13:36:10.408]   - Field: ‘state’
[13:36:10.408] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:36:10.408] - Launch lazy future ...
[13:36:10.408] Packages needed by the future expression (n = 0): <none>
[13:36:10.408] Packages needed by future strategies (n = 0): <none>
[13:36:10.409] {
[13:36:10.409]     {
[13:36:10.409]         {
[13:36:10.409]             ...future.startTime <- base::Sys.time()
[13:36:10.409]             {
[13:36:10.409]                 {
[13:36:10.409]                   {
[13:36:10.409]                     {
[13:36:10.409]                       base::local({
[13:36:10.409]                         has_future <- base::requireNamespace("future", 
[13:36:10.409]                           quietly = TRUE)
[13:36:10.409]                         if (has_future) {
[13:36:10.409]                           ns <- base::getNamespace("future")
[13:36:10.409]                           version <- ns[[".package"]][["version"]]
[13:36:10.409]                           if (is.null(version)) 
[13:36:10.409]                             version <- utils::packageVersion("future")
[13:36:10.409]                         }
[13:36:10.409]                         else {
[13:36:10.409]                           version <- NULL
[13:36:10.409]                         }
[13:36:10.409]                         if (!has_future || version < "1.8.0") {
[13:36:10.409]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:10.409]                             "", base::R.version$version.string), 
[13:36:10.409]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:10.409]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:10.409]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:10.409]                               "release", "version")], collapse = " "), 
[13:36:10.409]                             hostname = base::Sys.info()[["nodename"]])
[13:36:10.409]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:10.409]                             info)
[13:36:10.409]                           info <- base::paste(info, collapse = "; ")
[13:36:10.409]                           if (!has_future) {
[13:36:10.409]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:10.409]                               info)
[13:36:10.409]                           }
[13:36:10.409]                           else {
[13:36:10.409]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:10.409]                               info, version)
[13:36:10.409]                           }
[13:36:10.409]                           base::stop(msg)
[13:36:10.409]                         }
[13:36:10.409]                       })
[13:36:10.409]                     }
[13:36:10.409]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:10.409]                     base::options(mc.cores = 1L)
[13:36:10.409]                   }
[13:36:10.409]                   ...future.strategy.old <- future::plan("list")
[13:36:10.409]                   options(future.plan = NULL)
[13:36:10.409]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:10.409]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:10.409]                 }
[13:36:10.409]                 ...future.workdir <- getwd()
[13:36:10.409]             }
[13:36:10.409]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:10.409]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:10.409]         }
[13:36:10.409]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:10.409]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:10.409]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:10.409]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:10.409]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:10.409]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:10.409]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:10.409]             base::names(...future.oldOptions))
[13:36:10.409]     }
[13:36:10.409]     if (FALSE) {
[13:36:10.409]     }
[13:36:10.409]     else {
[13:36:10.409]         if (TRUE) {
[13:36:10.409]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:10.409]                 open = "w")
[13:36:10.409]         }
[13:36:10.409]         else {
[13:36:10.409]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:10.409]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:10.409]         }
[13:36:10.409]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:10.409]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:10.409]             base::sink(type = "output", split = FALSE)
[13:36:10.409]             base::close(...future.stdout)
[13:36:10.409]         }, add = TRUE)
[13:36:10.409]     }
[13:36:10.409]     ...future.frame <- base::sys.nframe()
[13:36:10.409]     ...future.conditions <- base::list()
[13:36:10.409]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:10.409]     if (FALSE) {
[13:36:10.409]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:10.409]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:10.409]     }
[13:36:10.409]     ...future.result <- base::tryCatch({
[13:36:10.409]         base::withCallingHandlers({
[13:36:10.409]             ...future.value <- base::withVisible(base::local({
[13:36:10.409]                 withCallingHandlers({
[13:36:10.409]                   fcn(x, y)
[13:36:10.409]                 }, immediateCondition = function(cond) {
[13:36:10.409]                   save_rds <- function (object, pathname, ...) 
[13:36:10.409]                   {
[13:36:10.409]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:10.409]                     if (file_test("-f", pathname_tmp)) {
[13:36:10.409]                       fi_tmp <- file.info(pathname_tmp)
[13:36:10.409]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:10.409]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:10.409]                         fi_tmp[["mtime"]])
[13:36:10.409]                     }
[13:36:10.409]                     tryCatch({
[13:36:10.409]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:10.409]                     }, error = function(ex) {
[13:36:10.409]                       msg <- conditionMessage(ex)
[13:36:10.409]                       fi_tmp <- file.info(pathname_tmp)
[13:36:10.409]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:10.409]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:10.409]                         fi_tmp[["mtime"]], msg)
[13:36:10.409]                       ex$message <- msg
[13:36:10.409]                       stop(ex)
[13:36:10.409]                     })
[13:36:10.409]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:10.409]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:10.409]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:10.409]                       fi_tmp <- file.info(pathname_tmp)
[13:36:10.409]                       fi <- file.info(pathname)
[13:36:10.409]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:10.409]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:10.409]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:10.409]                         fi[["size"]], fi[["mtime"]])
[13:36:10.409]                       stop(msg)
[13:36:10.409]                     }
[13:36:10.409]                     invisible(pathname)
[13:36:10.409]                   }
[13:36:10.409]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:10.409]                     rootPath = tempdir()) 
[13:36:10.409]                   {
[13:36:10.409]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:10.409]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:10.409]                       tmpdir = path, fileext = ".rds")
[13:36:10.409]                     save_rds(obj, file)
[13:36:10.409]                   }
[13:36:10.409]                   saveImmediateCondition(cond, path = "/tmp/RtmpajcPkb/.future/immediateConditions")
[13:36:10.409]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:10.409]                   {
[13:36:10.409]                     inherits <- base::inherits
[13:36:10.409]                     invokeRestart <- base::invokeRestart
[13:36:10.409]                     is.null <- base::is.null
[13:36:10.409]                     muffled <- FALSE
[13:36:10.409]                     if (inherits(cond, "message")) {
[13:36:10.409]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:10.409]                       if (muffled) 
[13:36:10.409]                         invokeRestart("muffleMessage")
[13:36:10.409]                     }
[13:36:10.409]                     else if (inherits(cond, "warning")) {
[13:36:10.409]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:10.409]                       if (muffled) 
[13:36:10.409]                         invokeRestart("muffleWarning")
[13:36:10.409]                     }
[13:36:10.409]                     else if (inherits(cond, "condition")) {
[13:36:10.409]                       if (!is.null(pattern)) {
[13:36:10.409]                         computeRestarts <- base::computeRestarts
[13:36:10.409]                         grepl <- base::grepl
[13:36:10.409]                         restarts <- computeRestarts(cond)
[13:36:10.409]                         for (restart in restarts) {
[13:36:10.409]                           name <- restart$name
[13:36:10.409]                           if (is.null(name)) 
[13:36:10.409]                             next
[13:36:10.409]                           if (!grepl(pattern, name)) 
[13:36:10.409]                             next
[13:36:10.409]                           invokeRestart(restart)
[13:36:10.409]                           muffled <- TRUE
[13:36:10.409]                           break
[13:36:10.409]                         }
[13:36:10.409]                       }
[13:36:10.409]                     }
[13:36:10.409]                     invisible(muffled)
[13:36:10.409]                   }
[13:36:10.409]                   muffleCondition(cond)
[13:36:10.409]                 })
[13:36:10.409]             }))
[13:36:10.409]             future::FutureResult(value = ...future.value$value, 
[13:36:10.409]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:10.409]                   ...future.rng), globalenv = if (FALSE) 
[13:36:10.409]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:10.409]                     ...future.globalenv.names))
[13:36:10.409]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:10.409]         }, condition = base::local({
[13:36:10.409]             c <- base::c
[13:36:10.409]             inherits <- base::inherits
[13:36:10.409]             invokeRestart <- base::invokeRestart
[13:36:10.409]             length <- base::length
[13:36:10.409]             list <- base::list
[13:36:10.409]             seq.int <- base::seq.int
[13:36:10.409]             signalCondition <- base::signalCondition
[13:36:10.409]             sys.calls <- base::sys.calls
[13:36:10.409]             `[[` <- base::`[[`
[13:36:10.409]             `+` <- base::`+`
[13:36:10.409]             `<<-` <- base::`<<-`
[13:36:10.409]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:10.409]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:10.409]                   3L)]
[13:36:10.409]             }
[13:36:10.409]             function(cond) {
[13:36:10.409]                 is_error <- inherits(cond, "error")
[13:36:10.409]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:10.409]                   NULL)
[13:36:10.409]                 if (is_error) {
[13:36:10.409]                   sessionInformation <- function() {
[13:36:10.409]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:10.409]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:10.409]                       search = base::search(), system = base::Sys.info())
[13:36:10.409]                   }
[13:36:10.409]                   ...future.conditions[[length(...future.conditions) + 
[13:36:10.409]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:10.409]                     cond$call), session = sessionInformation(), 
[13:36:10.409]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:10.409]                   signalCondition(cond)
[13:36:10.409]                 }
[13:36:10.409]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:10.409]                 "immediateCondition"))) {
[13:36:10.409]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:10.409]                   ...future.conditions[[length(...future.conditions) + 
[13:36:10.409]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:10.409]                   if (TRUE && !signal) {
[13:36:10.409]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:10.409]                     {
[13:36:10.409]                       inherits <- base::inherits
[13:36:10.409]                       invokeRestart <- base::invokeRestart
[13:36:10.409]                       is.null <- base::is.null
[13:36:10.409]                       muffled <- FALSE
[13:36:10.409]                       if (inherits(cond, "message")) {
[13:36:10.409]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:10.409]                         if (muffled) 
[13:36:10.409]                           invokeRestart("muffleMessage")
[13:36:10.409]                       }
[13:36:10.409]                       else if (inherits(cond, "warning")) {
[13:36:10.409]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:10.409]                         if (muffled) 
[13:36:10.409]                           invokeRestart("muffleWarning")
[13:36:10.409]                       }
[13:36:10.409]                       else if (inherits(cond, "condition")) {
[13:36:10.409]                         if (!is.null(pattern)) {
[13:36:10.409]                           computeRestarts <- base::computeRestarts
[13:36:10.409]                           grepl <- base::grepl
[13:36:10.409]                           restarts <- computeRestarts(cond)
[13:36:10.409]                           for (restart in restarts) {
[13:36:10.409]                             name <- restart$name
[13:36:10.409]                             if (is.null(name)) 
[13:36:10.409]                               next
[13:36:10.409]                             if (!grepl(pattern, name)) 
[13:36:10.409]                               next
[13:36:10.409]                             invokeRestart(restart)
[13:36:10.409]                             muffled <- TRUE
[13:36:10.409]                             break
[13:36:10.409]                           }
[13:36:10.409]                         }
[13:36:10.409]                       }
[13:36:10.409]                       invisible(muffled)
[13:36:10.409]                     }
[13:36:10.409]                     muffleCondition(cond, pattern = "^muffle")
[13:36:10.409]                   }
[13:36:10.409]                 }
[13:36:10.409]                 else {
[13:36:10.409]                   if (TRUE) {
[13:36:10.409]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:10.409]                     {
[13:36:10.409]                       inherits <- base::inherits
[13:36:10.409]                       invokeRestart <- base::invokeRestart
[13:36:10.409]                       is.null <- base::is.null
[13:36:10.409]                       muffled <- FALSE
[13:36:10.409]                       if (inherits(cond, "message")) {
[13:36:10.409]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:10.409]                         if (muffled) 
[13:36:10.409]                           invokeRestart("muffleMessage")
[13:36:10.409]                       }
[13:36:10.409]                       else if (inherits(cond, "warning")) {
[13:36:10.409]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:10.409]                         if (muffled) 
[13:36:10.409]                           invokeRestart("muffleWarning")
[13:36:10.409]                       }
[13:36:10.409]                       else if (inherits(cond, "condition")) {
[13:36:10.409]                         if (!is.null(pattern)) {
[13:36:10.409]                           computeRestarts <- base::computeRestarts
[13:36:10.409]                           grepl <- base::grepl
[13:36:10.409]                           restarts <- computeRestarts(cond)
[13:36:10.409]                           for (restart in restarts) {
[13:36:10.409]                             name <- restart$name
[13:36:10.409]                             if (is.null(name)) 
[13:36:10.409]                               next
[13:36:10.409]                             if (!grepl(pattern, name)) 
[13:36:10.409]                               next
[13:36:10.409]                             invokeRestart(restart)
[13:36:10.409]                             muffled <- TRUE
[13:36:10.409]                             break
[13:36:10.409]                           }
[13:36:10.409]                         }
[13:36:10.409]                       }
[13:36:10.409]                       invisible(muffled)
[13:36:10.409]                     }
[13:36:10.409]                     muffleCondition(cond, pattern = "^muffle")
[13:36:10.409]                   }
[13:36:10.409]                 }
[13:36:10.409]             }
[13:36:10.409]         }))
[13:36:10.409]     }, error = function(ex) {
[13:36:10.409]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:10.409]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:10.409]                 ...future.rng), started = ...future.startTime, 
[13:36:10.409]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:10.409]             version = "1.8"), class = "FutureResult")
[13:36:10.409]     }, finally = {
[13:36:10.409]         if (!identical(...future.workdir, getwd())) 
[13:36:10.409]             setwd(...future.workdir)
[13:36:10.409]         {
[13:36:10.409]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:10.409]                 ...future.oldOptions$nwarnings <- NULL
[13:36:10.409]             }
[13:36:10.409]             base::options(...future.oldOptions)
[13:36:10.409]             if (.Platform$OS.type == "windows") {
[13:36:10.409]                 old_names <- names(...future.oldEnvVars)
[13:36:10.409]                 envs <- base::Sys.getenv()
[13:36:10.409]                 names <- names(envs)
[13:36:10.409]                 common <- intersect(names, old_names)
[13:36:10.409]                 added <- setdiff(names, old_names)
[13:36:10.409]                 removed <- setdiff(old_names, names)
[13:36:10.409]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:10.409]                   envs[common]]
[13:36:10.409]                 NAMES <- toupper(changed)
[13:36:10.409]                 args <- list()
[13:36:10.409]                 for (kk in seq_along(NAMES)) {
[13:36:10.409]                   name <- changed[[kk]]
[13:36:10.409]                   NAME <- NAMES[[kk]]
[13:36:10.409]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:10.409]                     next
[13:36:10.409]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:10.409]                 }
[13:36:10.409]                 NAMES <- toupper(added)
[13:36:10.409]                 for (kk in seq_along(NAMES)) {
[13:36:10.409]                   name <- added[[kk]]
[13:36:10.409]                   NAME <- NAMES[[kk]]
[13:36:10.409]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:10.409]                     next
[13:36:10.409]                   args[[name]] <- ""
[13:36:10.409]                 }
[13:36:10.409]                 NAMES <- toupper(removed)
[13:36:10.409]                 for (kk in seq_along(NAMES)) {
[13:36:10.409]                   name <- removed[[kk]]
[13:36:10.409]                   NAME <- NAMES[[kk]]
[13:36:10.409]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:10.409]                     next
[13:36:10.409]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:10.409]                 }
[13:36:10.409]                 if (length(args) > 0) 
[13:36:10.409]                   base::do.call(base::Sys.setenv, args = args)
[13:36:10.409]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:10.409]             }
[13:36:10.409]             else {
[13:36:10.409]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:10.409]             }
[13:36:10.409]             {
[13:36:10.409]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:10.409]                   0L) {
[13:36:10.409]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:10.409]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:10.409]                   base::options(opts)
[13:36:10.409]                 }
[13:36:10.409]                 {
[13:36:10.409]                   {
[13:36:10.409]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:10.409]                     NULL
[13:36:10.409]                   }
[13:36:10.409]                   options(future.plan = NULL)
[13:36:10.409]                   if (is.na(NA_character_)) 
[13:36:10.409]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:10.409]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:10.409]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:10.409]                     .init = FALSE)
[13:36:10.409]                 }
[13:36:10.409]             }
[13:36:10.409]         }
[13:36:10.409]     })
[13:36:10.409]     if (TRUE) {
[13:36:10.409]         base::sink(type = "output", split = FALSE)
[13:36:10.409]         if (TRUE) {
[13:36:10.409]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:10.409]         }
[13:36:10.409]         else {
[13:36:10.409]             ...future.result["stdout"] <- base::list(NULL)
[13:36:10.409]         }
[13:36:10.409]         base::close(...future.stdout)
[13:36:10.409]         ...future.stdout <- NULL
[13:36:10.409]     }
[13:36:10.409]     ...future.result$conditions <- ...future.conditions
[13:36:10.409]     ...future.result$finished <- base::Sys.time()
[13:36:10.409]     ...future.result
[13:36:10.409] }
[13:36:10.411] assign_globals() ...
[13:36:10.411] List of 3
[13:36:10.411]  $ fcn:function (x, y)  
[13:36:10.411]  $ x  : int [1:2] 1 2
[13:36:10.411]  $ y  : num 3
[13:36:10.411]  - attr(*, "where")=List of 3
[13:36:10.411]   ..$ fcn:<environment: R_EmptyEnv> 
[13:36:10.411]   ..$ x  :<environment: R_EmptyEnv> 
[13:36:10.411]   ..$ y  :<environment: R_EmptyEnv> 
[13:36:10.411]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:10.411]  - attr(*, "resolved")= logi FALSE
[13:36:10.411]  - attr(*, "total_size")= num 4280
[13:36:10.411]  - attr(*, "already-done")= logi TRUE
[13:36:10.415] - reassign environment for ‘fcn’
[13:36:10.415] - copied ‘fcn’ to environment
[13:36:10.415] - copied ‘x’ to environment
[13:36:10.415] - copied ‘y’ to environment
[13:36:10.416] assign_globals() ... done
[13:36:10.416] requestCore(): workers = 2
[13:36:10.417] MulticoreFuture started
[13:36:10.418] - Launch lazy future ... done
[13:36:10.418] run() for ‘MulticoreFuture’ ... done
[13:36:10.418] result() for MulticoreFuture ...
[13:36:10.419] plan(): Setting new future strategy stack:
[13:36:10.419] List of future strategies:
[13:36:10.419] 1. sequential:
[13:36:10.419]    - args: function (..., envir = parent.frame())
[13:36:10.419]    - tweaked: FALSE
[13:36:10.419]    - call: NULL
[13:36:10.420] plan(): nbrOfWorkers() = 1
[13:36:10.422] plan(): Setting new future strategy stack:
[13:36:10.422] List of future strategies:
[13:36:10.422] 1. multicore:
[13:36:10.422]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:10.422]    - tweaked: FALSE
[13:36:10.422]    - call: plan(strategy, substitute = FALSE)
[13:36:10.427] plan(): nbrOfWorkers() = 2
[13:36:10.428] result() for MulticoreFuture ...
[13:36:10.428] result() for MulticoreFuture ... done
[13:36:10.428] result() for MulticoreFuture ... done
[13:36:10.428] result() for MulticoreFuture ...
[13:36:10.428] result() for MulticoreFuture ... done
[1] 6
- plan('multisession') ...
[13:36:10.429] plan(): Setting new future strategy stack:
[13:36:10.429] List of future strategies:
[13:36:10.429] 1. multisession:
[13:36:10.429]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:36:10.429]    - tweaked: FALSE
[13:36:10.429]    - call: plan(strategy, substitute = FALSE)
[13:36:10.430] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:36:10.430] multisession:
[13:36:10.430] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:36:10.430] - tweaked: FALSE
[13:36:10.430] - call: plan(strategy, substitute = FALSE)
[13:36:10.436] getGlobalsAndPackages() ...
[13:36:10.437] Not searching for globals
[13:36:10.437] - globals: [0] <none>
[13:36:10.437] getGlobalsAndPackages() ... DONE
[13:36:10.438] [local output] makeClusterPSOCK() ...
[13:36:10.482] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:36:10.484] [local output] Base port: 11540
[13:36:10.484] [local output] Getting setup options for 2 cluster nodes ...
[13:36:10.484] [local output]  - Node 1 of 2 ...
[13:36:10.484] [local output] localMachine=TRUE => revtunnel=FALSE

[13:36:10.485] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpajcPkb/worker.rank=1.parallelly.parent=80666.13b1a63aa9edc.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpajcPkb/worker.rank=1.parallelly.parent=80666.13b1a63aa9edc.pid")'’
[13:36:10.673] - Possible to infer worker's PID: TRUE
[13:36:10.673] [local output] Rscript port: 11540

[13:36:10.674] [local output]  - Node 2 of 2 ...
[13:36:10.674] [local output] localMachine=TRUE => revtunnel=FALSE

[13:36:10.675] [local output] Rscript port: 11540

[13:36:10.675] [local output] Getting setup options for 2 cluster nodes ... done
[13:36:10.675] [local output]  - Parallel setup requested for some PSOCK nodes
[13:36:10.676] [local output] Setting up PSOCK nodes in parallel
[13:36:10.676] List of 36
[13:36:10.676]  $ worker          : chr "localhost"
[13:36:10.676]   ..- attr(*, "localhost")= logi TRUE
[13:36:10.676]  $ master          : chr "localhost"
[13:36:10.676]  $ port            : int 11540
[13:36:10.676]  $ connectTimeout  : num 120
[13:36:10.676]  $ timeout         : num 2592000
[13:36:10.676]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:36:10.676]  $ homogeneous     : logi TRUE
[13:36:10.676]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:36:10.676]  $ rscript_envs    : NULL
[13:36:10.676]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:36:10.676]  $ rscript_startup : NULL
[13:36:10.676]  $ rscript_sh      : chr "sh"
[13:36:10.676]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:36:10.676]  $ methods         : logi TRUE
[13:36:10.676]  $ socketOptions   : chr "no-delay"
[13:36:10.676]  $ useXDR          : logi FALSE
[13:36:10.676]  $ outfile         : chr "/dev/null"
[13:36:10.676]  $ renice          : int NA
[13:36:10.676]  $ rshcmd          : NULL
[13:36:10.676]  $ user            : chr(0) 
[13:36:10.676]  $ revtunnel       : logi FALSE
[13:36:10.676]  $ rshlogfile      : NULL
[13:36:10.676]  $ rshopts         : chr(0) 
[13:36:10.676]  $ rank            : int 1
[13:36:10.676]  $ manual          : logi FALSE
[13:36:10.676]  $ dryrun          : logi FALSE
[13:36:10.676]  $ quiet           : logi FALSE
[13:36:10.676]  $ setup_strategy  : chr "parallel"
[13:36:10.676]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:36:10.676]  $ pidfile         : chr "/tmp/RtmpajcPkb/worker.rank=1.parallelly.parent=80666.13b1a63aa9edc.pid"
[13:36:10.676]  $ rshcmd_label    : NULL
[13:36:10.676]  $ rsh_call        : NULL
[13:36:10.676]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:36:10.676]  $ localMachine    : logi TRUE
[13:36:10.676]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:36:10.676]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:36:10.676]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:36:10.676]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:36:10.676]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:36:10.676]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:36:10.676]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:36:10.676]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:36:10.676]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:36:10.676]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:36:10.676]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:36:10.676]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:36:10.676]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:36:10.676]  $ arguments       :List of 28
[13:36:10.676]   ..$ worker          : chr "localhost"
[13:36:10.676]   ..$ master          : NULL
[13:36:10.676]   ..$ port            : int 11540
[13:36:10.676]   ..$ connectTimeout  : num 120
[13:36:10.676]   ..$ timeout         : num 2592000
[13:36:10.676]   ..$ rscript         : NULL
[13:36:10.676]   ..$ homogeneous     : NULL
[13:36:10.676]   ..$ rscript_args    : NULL
[13:36:10.676]   ..$ rscript_envs    : NULL
[13:36:10.676]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:36:10.676]   ..$ rscript_startup : NULL
[13:36:10.676]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:36:10.676]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:36:10.676]   ..$ methods         : logi TRUE
[13:36:10.676]   ..$ socketOptions   : chr "no-delay"
[13:36:10.676]   ..$ useXDR          : logi FALSE
[13:36:10.676]   ..$ outfile         : chr "/dev/null"
[13:36:10.676]   ..$ renice          : int NA
[13:36:10.676]   ..$ rshcmd          : NULL
[13:36:10.676]   ..$ user            : NULL
[13:36:10.676]   ..$ revtunnel       : logi NA
[13:36:10.676]   ..$ rshlogfile      : NULL
[13:36:10.676]   ..$ rshopts         : NULL
[13:36:10.676]   ..$ rank            : int 1
[13:36:10.676]   ..$ manual          : logi FALSE
[13:36:10.676]   ..$ dryrun          : logi FALSE
[13:36:10.676]   ..$ quiet           : logi FALSE
[13:36:10.676]   ..$ setup_strategy  : chr "parallel"
[13:36:10.676]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:36:10.693] [local output] System call to launch all workers:
[13:36:10.693] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpajcPkb/worker.rank=1.parallelly.parent=80666.13b1a63aa9edc.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11540 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:36:10.693] [local output] Starting PSOCK main server
[13:36:10.698] [local output] Workers launched
[13:36:10.699] [local output] Waiting for workers to connect back
[13:36:10.699]  - [local output] 0 workers out of 2 ready
[13:36:10.944]  - [local output] 0 workers out of 2 ready
[13:36:10.944]  - [local output] 1 workers out of 2 ready
[13:36:10.946]  - [local output] 1 workers out of 2 ready
[13:36:10.946]  - [local output] 2 workers out of 2 ready
[13:36:10.947] [local output] Launching of workers completed
[13:36:10.947] [local output] Collecting session information from workers
[13:36:10.948] [local output]  - Worker #1 of 2
[13:36:10.948] [local output]  - Worker #2 of 2
[13:36:10.948] [local output] makeClusterPSOCK() ... done
[13:36:10.960] Packages needed by the future expression (n = 0): <none>
[13:36:10.960] Packages needed by future strategies (n = 0): <none>
[13:36:10.960] {
[13:36:10.960]     {
[13:36:10.960]         {
[13:36:10.960]             ...future.startTime <- base::Sys.time()
[13:36:10.960]             {
[13:36:10.960]                 {
[13:36:10.960]                   {
[13:36:10.960]                     {
[13:36:10.960]                       base::local({
[13:36:10.960]                         has_future <- base::requireNamespace("future", 
[13:36:10.960]                           quietly = TRUE)
[13:36:10.960]                         if (has_future) {
[13:36:10.960]                           ns <- base::getNamespace("future")
[13:36:10.960]                           version <- ns[[".package"]][["version"]]
[13:36:10.960]                           if (is.null(version)) 
[13:36:10.960]                             version <- utils::packageVersion("future")
[13:36:10.960]                         }
[13:36:10.960]                         else {
[13:36:10.960]                           version <- NULL
[13:36:10.960]                         }
[13:36:10.960]                         if (!has_future || version < "1.8.0") {
[13:36:10.960]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:10.960]                             "", base::R.version$version.string), 
[13:36:10.960]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:10.960]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:10.960]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:10.960]                               "release", "version")], collapse = " "), 
[13:36:10.960]                             hostname = base::Sys.info()[["nodename"]])
[13:36:10.960]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:10.960]                             info)
[13:36:10.960]                           info <- base::paste(info, collapse = "; ")
[13:36:10.960]                           if (!has_future) {
[13:36:10.960]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:10.960]                               info)
[13:36:10.960]                           }
[13:36:10.960]                           else {
[13:36:10.960]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:10.960]                               info, version)
[13:36:10.960]                           }
[13:36:10.960]                           base::stop(msg)
[13:36:10.960]                         }
[13:36:10.960]                       })
[13:36:10.960]                     }
[13:36:10.960]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:10.960]                     base::options(mc.cores = 1L)
[13:36:10.960]                   }
[13:36:10.960]                   ...future.strategy.old <- future::plan("list")
[13:36:10.960]                   options(future.plan = NULL)
[13:36:10.960]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:10.960]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:10.960]                 }
[13:36:10.960]                 ...future.workdir <- getwd()
[13:36:10.960]             }
[13:36:10.960]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:10.960]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:10.960]         }
[13:36:10.960]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:10.960]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:10.960]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:10.960]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:10.960]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:10.960]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:10.960]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:10.960]             base::names(...future.oldOptions))
[13:36:10.960]     }
[13:36:10.960]     if (FALSE) {
[13:36:10.960]     }
[13:36:10.960]     else {
[13:36:10.960]         if (TRUE) {
[13:36:10.960]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:10.960]                 open = "w")
[13:36:10.960]         }
[13:36:10.960]         else {
[13:36:10.960]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:10.960]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:10.960]         }
[13:36:10.960]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:10.960]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:10.960]             base::sink(type = "output", split = FALSE)
[13:36:10.960]             base::close(...future.stdout)
[13:36:10.960]         }, add = TRUE)
[13:36:10.960]     }
[13:36:10.960]     ...future.frame <- base::sys.nframe()
[13:36:10.960]     ...future.conditions <- base::list()
[13:36:10.960]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:10.960]     if (FALSE) {
[13:36:10.960]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:10.960]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:10.960]     }
[13:36:10.960]     ...future.result <- base::tryCatch({
[13:36:10.960]         base::withCallingHandlers({
[13:36:10.960]             ...future.value <- base::withVisible(base::local({
[13:36:10.960]                 ...future.makeSendCondition <- base::local({
[13:36:10.960]                   sendCondition <- NULL
[13:36:10.960]                   function(frame = 1L) {
[13:36:10.960]                     if (is.function(sendCondition)) 
[13:36:10.960]                       return(sendCondition)
[13:36:10.960]                     ns <- getNamespace("parallel")
[13:36:10.960]                     if (exists("sendData", mode = "function", 
[13:36:10.960]                       envir = ns)) {
[13:36:10.960]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:10.960]                         envir = ns)
[13:36:10.960]                       envir <- sys.frame(frame)
[13:36:10.960]                       master <- NULL
[13:36:10.960]                       while (!identical(envir, .GlobalEnv) && 
[13:36:10.960]                         !identical(envir, emptyenv())) {
[13:36:10.960]                         if (exists("master", mode = "list", envir = envir, 
[13:36:10.960]                           inherits = FALSE)) {
[13:36:10.960]                           master <- get("master", mode = "list", 
[13:36:10.960]                             envir = envir, inherits = FALSE)
[13:36:10.960]                           if (inherits(master, c("SOCKnode", 
[13:36:10.960]                             "SOCK0node"))) {
[13:36:10.960]                             sendCondition <<- function(cond) {
[13:36:10.960]                               data <- list(type = "VALUE", value = cond, 
[13:36:10.960]                                 success = TRUE)
[13:36:10.960]                               parallel_sendData(master, data)
[13:36:10.960]                             }
[13:36:10.960]                             return(sendCondition)
[13:36:10.960]                           }
[13:36:10.960]                         }
[13:36:10.960]                         frame <- frame + 1L
[13:36:10.960]                         envir <- sys.frame(frame)
[13:36:10.960]                       }
[13:36:10.960]                     }
[13:36:10.960]                     sendCondition <<- function(cond) NULL
[13:36:10.960]                   }
[13:36:10.960]                 })
[13:36:10.960]                 withCallingHandlers({
[13:36:10.960]                   NA
[13:36:10.960]                 }, immediateCondition = function(cond) {
[13:36:10.960]                   sendCondition <- ...future.makeSendCondition()
[13:36:10.960]                   sendCondition(cond)
[13:36:10.960]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:10.960]                   {
[13:36:10.960]                     inherits <- base::inherits
[13:36:10.960]                     invokeRestart <- base::invokeRestart
[13:36:10.960]                     is.null <- base::is.null
[13:36:10.960]                     muffled <- FALSE
[13:36:10.960]                     if (inherits(cond, "message")) {
[13:36:10.960]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:10.960]                       if (muffled) 
[13:36:10.960]                         invokeRestart("muffleMessage")
[13:36:10.960]                     }
[13:36:10.960]                     else if (inherits(cond, "warning")) {
[13:36:10.960]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:10.960]                       if (muffled) 
[13:36:10.960]                         invokeRestart("muffleWarning")
[13:36:10.960]                     }
[13:36:10.960]                     else if (inherits(cond, "condition")) {
[13:36:10.960]                       if (!is.null(pattern)) {
[13:36:10.960]                         computeRestarts <- base::computeRestarts
[13:36:10.960]                         grepl <- base::grepl
[13:36:10.960]                         restarts <- computeRestarts(cond)
[13:36:10.960]                         for (restart in restarts) {
[13:36:10.960]                           name <- restart$name
[13:36:10.960]                           if (is.null(name)) 
[13:36:10.960]                             next
[13:36:10.960]                           if (!grepl(pattern, name)) 
[13:36:10.960]                             next
[13:36:10.960]                           invokeRestart(restart)
[13:36:10.960]                           muffled <- TRUE
[13:36:10.960]                           break
[13:36:10.960]                         }
[13:36:10.960]                       }
[13:36:10.960]                     }
[13:36:10.960]                     invisible(muffled)
[13:36:10.960]                   }
[13:36:10.960]                   muffleCondition(cond)
[13:36:10.960]                 })
[13:36:10.960]             }))
[13:36:10.960]             future::FutureResult(value = ...future.value$value, 
[13:36:10.960]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:10.960]                   ...future.rng), globalenv = if (FALSE) 
[13:36:10.960]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:10.960]                     ...future.globalenv.names))
[13:36:10.960]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:10.960]         }, condition = base::local({
[13:36:10.960]             c <- base::c
[13:36:10.960]             inherits <- base::inherits
[13:36:10.960]             invokeRestart <- base::invokeRestart
[13:36:10.960]             length <- base::length
[13:36:10.960]             list <- base::list
[13:36:10.960]             seq.int <- base::seq.int
[13:36:10.960]             signalCondition <- base::signalCondition
[13:36:10.960]             sys.calls <- base::sys.calls
[13:36:10.960]             `[[` <- base::`[[`
[13:36:10.960]             `+` <- base::`+`
[13:36:10.960]             `<<-` <- base::`<<-`
[13:36:10.960]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:10.960]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:10.960]                   3L)]
[13:36:10.960]             }
[13:36:10.960]             function(cond) {
[13:36:10.960]                 is_error <- inherits(cond, "error")
[13:36:10.960]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:10.960]                   NULL)
[13:36:10.960]                 if (is_error) {
[13:36:10.960]                   sessionInformation <- function() {
[13:36:10.960]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:10.960]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:10.960]                       search = base::search(), system = base::Sys.info())
[13:36:10.960]                   }
[13:36:10.960]                   ...future.conditions[[length(...future.conditions) + 
[13:36:10.960]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:10.960]                     cond$call), session = sessionInformation(), 
[13:36:10.960]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:10.960]                   signalCondition(cond)
[13:36:10.960]                 }
[13:36:10.960]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:10.960]                 "immediateCondition"))) {
[13:36:10.960]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:10.960]                   ...future.conditions[[length(...future.conditions) + 
[13:36:10.960]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:10.960]                   if (TRUE && !signal) {
[13:36:10.960]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:10.960]                     {
[13:36:10.960]                       inherits <- base::inherits
[13:36:10.960]                       invokeRestart <- base::invokeRestart
[13:36:10.960]                       is.null <- base::is.null
[13:36:10.960]                       muffled <- FALSE
[13:36:10.960]                       if (inherits(cond, "message")) {
[13:36:10.960]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:10.960]                         if (muffled) 
[13:36:10.960]                           invokeRestart("muffleMessage")
[13:36:10.960]                       }
[13:36:10.960]                       else if (inherits(cond, "warning")) {
[13:36:10.960]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:10.960]                         if (muffled) 
[13:36:10.960]                           invokeRestart("muffleWarning")
[13:36:10.960]                       }
[13:36:10.960]                       else if (inherits(cond, "condition")) {
[13:36:10.960]                         if (!is.null(pattern)) {
[13:36:10.960]                           computeRestarts <- base::computeRestarts
[13:36:10.960]                           grepl <- base::grepl
[13:36:10.960]                           restarts <- computeRestarts(cond)
[13:36:10.960]                           for (restart in restarts) {
[13:36:10.960]                             name <- restart$name
[13:36:10.960]                             if (is.null(name)) 
[13:36:10.960]                               next
[13:36:10.960]                             if (!grepl(pattern, name)) 
[13:36:10.960]                               next
[13:36:10.960]                             invokeRestart(restart)
[13:36:10.960]                             muffled <- TRUE
[13:36:10.960]                             break
[13:36:10.960]                           }
[13:36:10.960]                         }
[13:36:10.960]                       }
[13:36:10.960]                       invisible(muffled)
[13:36:10.960]                     }
[13:36:10.960]                     muffleCondition(cond, pattern = "^muffle")
[13:36:10.960]                   }
[13:36:10.960]                 }
[13:36:10.960]                 else {
[13:36:10.960]                   if (TRUE) {
[13:36:10.960]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:10.960]                     {
[13:36:10.960]                       inherits <- base::inherits
[13:36:10.960]                       invokeRestart <- base::invokeRestart
[13:36:10.960]                       is.null <- base::is.null
[13:36:10.960]                       muffled <- FALSE
[13:36:10.960]                       if (inherits(cond, "message")) {
[13:36:10.960]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:10.960]                         if (muffled) 
[13:36:10.960]                           invokeRestart("muffleMessage")
[13:36:10.960]                       }
[13:36:10.960]                       else if (inherits(cond, "warning")) {
[13:36:10.960]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:10.960]                         if (muffled) 
[13:36:10.960]                           invokeRestart("muffleWarning")
[13:36:10.960]                       }
[13:36:10.960]                       else if (inherits(cond, "condition")) {
[13:36:10.960]                         if (!is.null(pattern)) {
[13:36:10.960]                           computeRestarts <- base::computeRestarts
[13:36:10.960]                           grepl <- base::grepl
[13:36:10.960]                           restarts <- computeRestarts(cond)
[13:36:10.960]                           for (restart in restarts) {
[13:36:10.960]                             name <- restart$name
[13:36:10.960]                             if (is.null(name)) 
[13:36:10.960]                               next
[13:36:10.960]                             if (!grepl(pattern, name)) 
[13:36:10.960]                               next
[13:36:10.960]                             invokeRestart(restart)
[13:36:10.960]                             muffled <- TRUE
[13:36:10.960]                             break
[13:36:10.960]                           }
[13:36:10.960]                         }
[13:36:10.960]                       }
[13:36:10.960]                       invisible(muffled)
[13:36:10.960]                     }
[13:36:10.960]                     muffleCondition(cond, pattern = "^muffle")
[13:36:10.960]                   }
[13:36:10.960]                 }
[13:36:10.960]             }
[13:36:10.960]         }))
[13:36:10.960]     }, error = function(ex) {
[13:36:10.960]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:10.960]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:10.960]                 ...future.rng), started = ...future.startTime, 
[13:36:10.960]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:10.960]             version = "1.8"), class = "FutureResult")
[13:36:10.960]     }, finally = {
[13:36:10.960]         if (!identical(...future.workdir, getwd())) 
[13:36:10.960]             setwd(...future.workdir)
[13:36:10.960]         {
[13:36:10.960]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:10.960]                 ...future.oldOptions$nwarnings <- NULL
[13:36:10.960]             }
[13:36:10.960]             base::options(...future.oldOptions)
[13:36:10.960]             if (.Platform$OS.type == "windows") {
[13:36:10.960]                 old_names <- names(...future.oldEnvVars)
[13:36:10.960]                 envs <- base::Sys.getenv()
[13:36:10.960]                 names <- names(envs)
[13:36:10.960]                 common <- intersect(names, old_names)
[13:36:10.960]                 added <- setdiff(names, old_names)
[13:36:10.960]                 removed <- setdiff(old_names, names)
[13:36:10.960]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:10.960]                   envs[common]]
[13:36:10.960]                 NAMES <- toupper(changed)
[13:36:10.960]                 args <- list()
[13:36:10.960]                 for (kk in seq_along(NAMES)) {
[13:36:10.960]                   name <- changed[[kk]]
[13:36:10.960]                   NAME <- NAMES[[kk]]
[13:36:10.960]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:10.960]                     next
[13:36:10.960]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:10.960]                 }
[13:36:10.960]                 NAMES <- toupper(added)
[13:36:10.960]                 for (kk in seq_along(NAMES)) {
[13:36:10.960]                   name <- added[[kk]]
[13:36:10.960]                   NAME <- NAMES[[kk]]
[13:36:10.960]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:10.960]                     next
[13:36:10.960]                   args[[name]] <- ""
[13:36:10.960]                 }
[13:36:10.960]                 NAMES <- toupper(removed)
[13:36:10.960]                 for (kk in seq_along(NAMES)) {
[13:36:10.960]                   name <- removed[[kk]]
[13:36:10.960]                   NAME <- NAMES[[kk]]
[13:36:10.960]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:10.960]                     next
[13:36:10.960]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:10.960]                 }
[13:36:10.960]                 if (length(args) > 0) 
[13:36:10.960]                   base::do.call(base::Sys.setenv, args = args)
[13:36:10.960]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:10.960]             }
[13:36:10.960]             else {
[13:36:10.960]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:10.960]             }
[13:36:10.960]             {
[13:36:10.960]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:10.960]                   0L) {
[13:36:10.960]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:10.960]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:10.960]                   base::options(opts)
[13:36:10.960]                 }
[13:36:10.960]                 {
[13:36:10.960]                   {
[13:36:10.960]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:10.960]                     NULL
[13:36:10.960]                   }
[13:36:10.960]                   options(future.plan = NULL)
[13:36:10.960]                   if (is.na(NA_character_)) 
[13:36:10.960]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:10.960]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:10.960]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:10.960]                     .init = FALSE)
[13:36:10.960]                 }
[13:36:10.960]             }
[13:36:10.960]         }
[13:36:10.960]     })
[13:36:10.960]     if (TRUE) {
[13:36:10.960]         base::sink(type = "output", split = FALSE)
[13:36:10.960]         if (TRUE) {
[13:36:10.960]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:10.960]         }
[13:36:10.960]         else {
[13:36:10.960]             ...future.result["stdout"] <- base::list(NULL)
[13:36:10.960]         }
[13:36:10.960]         base::close(...future.stdout)
[13:36:10.960]         ...future.stdout <- NULL
[13:36:10.960]     }
[13:36:10.960]     ...future.result$conditions <- ...future.conditions
[13:36:10.960]     ...future.result$finished <- base::Sys.time()
[13:36:10.960]     ...future.result
[13:36:10.960] }
[13:36:11.013] MultisessionFuture started
[13:36:11.014] result() for ClusterFuture ...
[13:36:11.015] receiveMessageFromWorker() for ClusterFuture ...
[13:36:11.015] - Validating connection of MultisessionFuture
[13:36:11.047] - received message: FutureResult
[13:36:11.047] - Received FutureResult
[13:36:11.047] - Erased future from FutureRegistry
[13:36:11.047] result() for ClusterFuture ...
[13:36:11.048] - result already collected: FutureResult
[13:36:11.048] result() for ClusterFuture ... done
[13:36:11.048] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:11.048] result() for ClusterFuture ... done
[13:36:11.048] result() for ClusterFuture ...
[13:36:11.048] - result already collected: FutureResult
[13:36:11.048] result() for ClusterFuture ... done
[13:36:11.048] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:36:11.052] plan(): nbrOfWorkers() = 2
** Sum function 'A' with plan('multisession') ...
function (x, ...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, ...)
    }
    y
}
<bytecode: 0x558322ef4160>
Arguments '...' exists: TRUE
[13:36:11.053] getGlobalsAndPackages() ...
[13:36:11.053] Searching for globals...
[13:36:11.055] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[13:36:11.055] Searching for globals ... DONE
[13:36:11.055] Resolving globals: FALSE
[13:36:11.055] Tweak future expression to call with '...' arguments ...
[13:36:11.056] {
[13:36:11.056]     do.call(function(...) {
[13:36:11.056]         sum(x, ...)
[13:36:11.056]     }, args = future.call.arguments)
[13:36:11.056] }
[13:36:11.056] Tweak future expression to call with '...' arguments ... DONE
[13:36:11.056] The total size of the 2 globals is 112 bytes (112 bytes)
[13:36:11.057] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[13:36:11.057] - globals: [2] ‘x’, ‘future.call.arguments’
[13:36:11.057] 
[13:36:11.057] getGlobalsAndPackages() ... DONE
[13:36:11.058] run() for ‘Future’ ...
[13:36:11.058] - state: ‘created’
[13:36:11.058] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:11.073] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:11.073] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:11.073]   - Field: ‘node’
[13:36:11.073]   - Field: ‘label’
[13:36:11.073]   - Field: ‘local’
[13:36:11.073]   - Field: ‘owner’
[13:36:11.073]   - Field: ‘envir’
[13:36:11.073]   - Field: ‘workers’
[13:36:11.073]   - Field: ‘packages’
[13:36:11.073]   - Field: ‘gc’
[13:36:11.074]   - Field: ‘conditions’
[13:36:11.074]   - Field: ‘persistent’
[13:36:11.074]   - Field: ‘expr’
[13:36:11.074]   - Field: ‘uuid’
[13:36:11.074]   - Field: ‘seed’
[13:36:11.074]   - Field: ‘version’
[13:36:11.074]   - Field: ‘result’
[13:36:11.074]   - Field: ‘asynchronous’
[13:36:11.075]   - Field: ‘calls’
[13:36:11.075]   - Field: ‘globals’
[13:36:11.075]   - Field: ‘stdout’
[13:36:11.075]   - Field: ‘earlySignal’
[13:36:11.075]   - Field: ‘lazy’
[13:36:11.075]   - Field: ‘state’
[13:36:11.075] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:11.075] - Launch lazy future ...
[13:36:11.076] Packages needed by the future expression (n = 0): <none>
[13:36:11.076] Packages needed by future strategies (n = 0): <none>
[13:36:11.076] {
[13:36:11.076]     {
[13:36:11.076]         {
[13:36:11.076]             ...future.startTime <- base::Sys.time()
[13:36:11.076]             {
[13:36:11.076]                 {
[13:36:11.076]                   {
[13:36:11.076]                     {
[13:36:11.076]                       base::local({
[13:36:11.076]                         has_future <- base::requireNamespace("future", 
[13:36:11.076]                           quietly = TRUE)
[13:36:11.076]                         if (has_future) {
[13:36:11.076]                           ns <- base::getNamespace("future")
[13:36:11.076]                           version <- ns[[".package"]][["version"]]
[13:36:11.076]                           if (is.null(version)) 
[13:36:11.076]                             version <- utils::packageVersion("future")
[13:36:11.076]                         }
[13:36:11.076]                         else {
[13:36:11.076]                           version <- NULL
[13:36:11.076]                         }
[13:36:11.076]                         if (!has_future || version < "1.8.0") {
[13:36:11.076]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:11.076]                             "", base::R.version$version.string), 
[13:36:11.076]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:11.076]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:11.076]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:11.076]                               "release", "version")], collapse = " "), 
[13:36:11.076]                             hostname = base::Sys.info()[["nodename"]])
[13:36:11.076]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:11.076]                             info)
[13:36:11.076]                           info <- base::paste(info, collapse = "; ")
[13:36:11.076]                           if (!has_future) {
[13:36:11.076]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:11.076]                               info)
[13:36:11.076]                           }
[13:36:11.076]                           else {
[13:36:11.076]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:11.076]                               info, version)
[13:36:11.076]                           }
[13:36:11.076]                           base::stop(msg)
[13:36:11.076]                         }
[13:36:11.076]                       })
[13:36:11.076]                     }
[13:36:11.076]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:11.076]                     base::options(mc.cores = 1L)
[13:36:11.076]                   }
[13:36:11.076]                   ...future.strategy.old <- future::plan("list")
[13:36:11.076]                   options(future.plan = NULL)
[13:36:11.076]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:11.076]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:11.076]                 }
[13:36:11.076]                 ...future.workdir <- getwd()
[13:36:11.076]             }
[13:36:11.076]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:11.076]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:11.076]         }
[13:36:11.076]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:11.076]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:11.076]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:11.076]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:11.076]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:11.076]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:11.076]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:11.076]             base::names(...future.oldOptions))
[13:36:11.076]     }
[13:36:11.076]     if (FALSE) {
[13:36:11.076]     }
[13:36:11.076]     else {
[13:36:11.076]         if (TRUE) {
[13:36:11.076]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:11.076]                 open = "w")
[13:36:11.076]         }
[13:36:11.076]         else {
[13:36:11.076]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:11.076]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:11.076]         }
[13:36:11.076]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:11.076]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:11.076]             base::sink(type = "output", split = FALSE)
[13:36:11.076]             base::close(...future.stdout)
[13:36:11.076]         }, add = TRUE)
[13:36:11.076]     }
[13:36:11.076]     ...future.frame <- base::sys.nframe()
[13:36:11.076]     ...future.conditions <- base::list()
[13:36:11.076]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:11.076]     if (FALSE) {
[13:36:11.076]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:11.076]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:11.076]     }
[13:36:11.076]     ...future.result <- base::tryCatch({
[13:36:11.076]         base::withCallingHandlers({
[13:36:11.076]             ...future.value <- base::withVisible(base::local({
[13:36:11.076]                 ...future.makeSendCondition <- base::local({
[13:36:11.076]                   sendCondition <- NULL
[13:36:11.076]                   function(frame = 1L) {
[13:36:11.076]                     if (is.function(sendCondition)) 
[13:36:11.076]                       return(sendCondition)
[13:36:11.076]                     ns <- getNamespace("parallel")
[13:36:11.076]                     if (exists("sendData", mode = "function", 
[13:36:11.076]                       envir = ns)) {
[13:36:11.076]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:11.076]                         envir = ns)
[13:36:11.076]                       envir <- sys.frame(frame)
[13:36:11.076]                       master <- NULL
[13:36:11.076]                       while (!identical(envir, .GlobalEnv) && 
[13:36:11.076]                         !identical(envir, emptyenv())) {
[13:36:11.076]                         if (exists("master", mode = "list", envir = envir, 
[13:36:11.076]                           inherits = FALSE)) {
[13:36:11.076]                           master <- get("master", mode = "list", 
[13:36:11.076]                             envir = envir, inherits = FALSE)
[13:36:11.076]                           if (inherits(master, c("SOCKnode", 
[13:36:11.076]                             "SOCK0node"))) {
[13:36:11.076]                             sendCondition <<- function(cond) {
[13:36:11.076]                               data <- list(type = "VALUE", value = cond, 
[13:36:11.076]                                 success = TRUE)
[13:36:11.076]                               parallel_sendData(master, data)
[13:36:11.076]                             }
[13:36:11.076]                             return(sendCondition)
[13:36:11.076]                           }
[13:36:11.076]                         }
[13:36:11.076]                         frame <- frame + 1L
[13:36:11.076]                         envir <- sys.frame(frame)
[13:36:11.076]                       }
[13:36:11.076]                     }
[13:36:11.076]                     sendCondition <<- function(cond) NULL
[13:36:11.076]                   }
[13:36:11.076]                 })
[13:36:11.076]                 withCallingHandlers({
[13:36:11.076]                   {
[13:36:11.076]                     do.call(function(...) {
[13:36:11.076]                       sum(x, ...)
[13:36:11.076]                     }, args = future.call.arguments)
[13:36:11.076]                   }
[13:36:11.076]                 }, immediateCondition = function(cond) {
[13:36:11.076]                   sendCondition <- ...future.makeSendCondition()
[13:36:11.076]                   sendCondition(cond)
[13:36:11.076]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:11.076]                   {
[13:36:11.076]                     inherits <- base::inherits
[13:36:11.076]                     invokeRestart <- base::invokeRestart
[13:36:11.076]                     is.null <- base::is.null
[13:36:11.076]                     muffled <- FALSE
[13:36:11.076]                     if (inherits(cond, "message")) {
[13:36:11.076]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:11.076]                       if (muffled) 
[13:36:11.076]                         invokeRestart("muffleMessage")
[13:36:11.076]                     }
[13:36:11.076]                     else if (inherits(cond, "warning")) {
[13:36:11.076]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:11.076]                       if (muffled) 
[13:36:11.076]                         invokeRestart("muffleWarning")
[13:36:11.076]                     }
[13:36:11.076]                     else if (inherits(cond, "condition")) {
[13:36:11.076]                       if (!is.null(pattern)) {
[13:36:11.076]                         computeRestarts <- base::computeRestarts
[13:36:11.076]                         grepl <- base::grepl
[13:36:11.076]                         restarts <- computeRestarts(cond)
[13:36:11.076]                         for (restart in restarts) {
[13:36:11.076]                           name <- restart$name
[13:36:11.076]                           if (is.null(name)) 
[13:36:11.076]                             next
[13:36:11.076]                           if (!grepl(pattern, name)) 
[13:36:11.076]                             next
[13:36:11.076]                           invokeRestart(restart)
[13:36:11.076]                           muffled <- TRUE
[13:36:11.076]                           break
[13:36:11.076]                         }
[13:36:11.076]                       }
[13:36:11.076]                     }
[13:36:11.076]                     invisible(muffled)
[13:36:11.076]                   }
[13:36:11.076]                   muffleCondition(cond)
[13:36:11.076]                 })
[13:36:11.076]             }))
[13:36:11.076]             future::FutureResult(value = ...future.value$value, 
[13:36:11.076]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:11.076]                   ...future.rng), globalenv = if (FALSE) 
[13:36:11.076]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:11.076]                     ...future.globalenv.names))
[13:36:11.076]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:11.076]         }, condition = base::local({
[13:36:11.076]             c <- base::c
[13:36:11.076]             inherits <- base::inherits
[13:36:11.076]             invokeRestart <- base::invokeRestart
[13:36:11.076]             length <- base::length
[13:36:11.076]             list <- base::list
[13:36:11.076]             seq.int <- base::seq.int
[13:36:11.076]             signalCondition <- base::signalCondition
[13:36:11.076]             sys.calls <- base::sys.calls
[13:36:11.076]             `[[` <- base::`[[`
[13:36:11.076]             `+` <- base::`+`
[13:36:11.076]             `<<-` <- base::`<<-`
[13:36:11.076]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:11.076]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:11.076]                   3L)]
[13:36:11.076]             }
[13:36:11.076]             function(cond) {
[13:36:11.076]                 is_error <- inherits(cond, "error")
[13:36:11.076]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:11.076]                   NULL)
[13:36:11.076]                 if (is_error) {
[13:36:11.076]                   sessionInformation <- function() {
[13:36:11.076]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:11.076]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:11.076]                       search = base::search(), system = base::Sys.info())
[13:36:11.076]                   }
[13:36:11.076]                   ...future.conditions[[length(...future.conditions) + 
[13:36:11.076]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:11.076]                     cond$call), session = sessionInformation(), 
[13:36:11.076]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:11.076]                   signalCondition(cond)
[13:36:11.076]                 }
[13:36:11.076]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:11.076]                 "immediateCondition"))) {
[13:36:11.076]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:11.076]                   ...future.conditions[[length(...future.conditions) + 
[13:36:11.076]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:11.076]                   if (TRUE && !signal) {
[13:36:11.076]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:11.076]                     {
[13:36:11.076]                       inherits <- base::inherits
[13:36:11.076]                       invokeRestart <- base::invokeRestart
[13:36:11.076]                       is.null <- base::is.null
[13:36:11.076]                       muffled <- FALSE
[13:36:11.076]                       if (inherits(cond, "message")) {
[13:36:11.076]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:11.076]                         if (muffled) 
[13:36:11.076]                           invokeRestart("muffleMessage")
[13:36:11.076]                       }
[13:36:11.076]                       else if (inherits(cond, "warning")) {
[13:36:11.076]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:11.076]                         if (muffled) 
[13:36:11.076]                           invokeRestart("muffleWarning")
[13:36:11.076]                       }
[13:36:11.076]                       else if (inherits(cond, "condition")) {
[13:36:11.076]                         if (!is.null(pattern)) {
[13:36:11.076]                           computeRestarts <- base::computeRestarts
[13:36:11.076]                           grepl <- base::grepl
[13:36:11.076]                           restarts <- computeRestarts(cond)
[13:36:11.076]                           for (restart in restarts) {
[13:36:11.076]                             name <- restart$name
[13:36:11.076]                             if (is.null(name)) 
[13:36:11.076]                               next
[13:36:11.076]                             if (!grepl(pattern, name)) 
[13:36:11.076]                               next
[13:36:11.076]                             invokeRestart(restart)
[13:36:11.076]                             muffled <- TRUE
[13:36:11.076]                             break
[13:36:11.076]                           }
[13:36:11.076]                         }
[13:36:11.076]                       }
[13:36:11.076]                       invisible(muffled)
[13:36:11.076]                     }
[13:36:11.076]                     muffleCondition(cond, pattern = "^muffle")
[13:36:11.076]                   }
[13:36:11.076]                 }
[13:36:11.076]                 else {
[13:36:11.076]                   if (TRUE) {
[13:36:11.076]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:11.076]                     {
[13:36:11.076]                       inherits <- base::inherits
[13:36:11.076]                       invokeRestart <- base::invokeRestart
[13:36:11.076]                       is.null <- base::is.null
[13:36:11.076]                       muffled <- FALSE
[13:36:11.076]                       if (inherits(cond, "message")) {
[13:36:11.076]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:11.076]                         if (muffled) 
[13:36:11.076]                           invokeRestart("muffleMessage")
[13:36:11.076]                       }
[13:36:11.076]                       else if (inherits(cond, "warning")) {
[13:36:11.076]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:11.076]                         if (muffled) 
[13:36:11.076]                           invokeRestart("muffleWarning")
[13:36:11.076]                       }
[13:36:11.076]                       else if (inherits(cond, "condition")) {
[13:36:11.076]                         if (!is.null(pattern)) {
[13:36:11.076]                           computeRestarts <- base::computeRestarts
[13:36:11.076]                           grepl <- base::grepl
[13:36:11.076]                           restarts <- computeRestarts(cond)
[13:36:11.076]                           for (restart in restarts) {
[13:36:11.076]                             name <- restart$name
[13:36:11.076]                             if (is.null(name)) 
[13:36:11.076]                               next
[13:36:11.076]                             if (!grepl(pattern, name)) 
[13:36:11.076]                               next
[13:36:11.076]                             invokeRestart(restart)
[13:36:11.076]                             muffled <- TRUE
[13:36:11.076]                             break
[13:36:11.076]                           }
[13:36:11.076]                         }
[13:36:11.076]                       }
[13:36:11.076]                       invisible(muffled)
[13:36:11.076]                     }
[13:36:11.076]                     muffleCondition(cond, pattern = "^muffle")
[13:36:11.076]                   }
[13:36:11.076]                 }
[13:36:11.076]             }
[13:36:11.076]         }))
[13:36:11.076]     }, error = function(ex) {
[13:36:11.076]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:11.076]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:11.076]                 ...future.rng), started = ...future.startTime, 
[13:36:11.076]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:11.076]             version = "1.8"), class = "FutureResult")
[13:36:11.076]     }, finally = {
[13:36:11.076]         if (!identical(...future.workdir, getwd())) 
[13:36:11.076]             setwd(...future.workdir)
[13:36:11.076]         {
[13:36:11.076]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:11.076]                 ...future.oldOptions$nwarnings <- NULL
[13:36:11.076]             }
[13:36:11.076]             base::options(...future.oldOptions)
[13:36:11.076]             if (.Platform$OS.type == "windows") {
[13:36:11.076]                 old_names <- names(...future.oldEnvVars)
[13:36:11.076]                 envs <- base::Sys.getenv()
[13:36:11.076]                 names <- names(envs)
[13:36:11.076]                 common <- intersect(names, old_names)
[13:36:11.076]                 added <- setdiff(names, old_names)
[13:36:11.076]                 removed <- setdiff(old_names, names)
[13:36:11.076]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:11.076]                   envs[common]]
[13:36:11.076]                 NAMES <- toupper(changed)
[13:36:11.076]                 args <- list()
[13:36:11.076]                 for (kk in seq_along(NAMES)) {
[13:36:11.076]                   name <- changed[[kk]]
[13:36:11.076]                   NAME <- NAMES[[kk]]
[13:36:11.076]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:11.076]                     next
[13:36:11.076]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:11.076]                 }
[13:36:11.076]                 NAMES <- toupper(added)
[13:36:11.076]                 for (kk in seq_along(NAMES)) {
[13:36:11.076]                   name <- added[[kk]]
[13:36:11.076]                   NAME <- NAMES[[kk]]
[13:36:11.076]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:11.076]                     next
[13:36:11.076]                   args[[name]] <- ""
[13:36:11.076]                 }
[13:36:11.076]                 NAMES <- toupper(removed)
[13:36:11.076]                 for (kk in seq_along(NAMES)) {
[13:36:11.076]                   name <- removed[[kk]]
[13:36:11.076]                   NAME <- NAMES[[kk]]
[13:36:11.076]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:11.076]                     next
[13:36:11.076]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:11.076]                 }
[13:36:11.076]                 if (length(args) > 0) 
[13:36:11.076]                   base::do.call(base::Sys.setenv, args = args)
[13:36:11.076]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:11.076]             }
[13:36:11.076]             else {
[13:36:11.076]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:11.076]             }
[13:36:11.076]             {
[13:36:11.076]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:11.076]                   0L) {
[13:36:11.076]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:11.076]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:11.076]                   base::options(opts)
[13:36:11.076]                 }
[13:36:11.076]                 {
[13:36:11.076]                   {
[13:36:11.076]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:11.076]                     NULL
[13:36:11.076]                   }
[13:36:11.076]                   options(future.plan = NULL)
[13:36:11.076]                   if (is.na(NA_character_)) 
[13:36:11.076]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:11.076]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:11.076]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:11.076]                     .init = FALSE)
[13:36:11.076]                 }
[13:36:11.076]             }
[13:36:11.076]         }
[13:36:11.076]     })
[13:36:11.076]     if (TRUE) {
[13:36:11.076]         base::sink(type = "output", split = FALSE)
[13:36:11.076]         if (TRUE) {
[13:36:11.076]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:11.076]         }
[13:36:11.076]         else {
[13:36:11.076]             ...future.result["stdout"] <- base::list(NULL)
[13:36:11.076]         }
[13:36:11.076]         base::close(...future.stdout)
[13:36:11.076]         ...future.stdout <- NULL
[13:36:11.076]     }
[13:36:11.076]     ...future.result$conditions <- ...future.conditions
[13:36:11.076]     ...future.result$finished <- base::Sys.time()
[13:36:11.076]     ...future.result
[13:36:11.076] }
[13:36:11.079] Exporting 2 global objects (112 bytes) to cluster node #1 ...
[13:36:11.079] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[13:36:11.080] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[13:36:11.080] Exporting ‘future.call.arguments’ (56 bytes) to cluster node #1 ...
[13:36:11.081] Exporting ‘future.call.arguments’ (56 bytes) to cluster node #1 ... DONE
[13:36:11.081] Exporting 2 global objects (112 bytes) to cluster node #1 ... DONE
[13:36:11.081] MultisessionFuture started
[13:36:11.081] - Launch lazy future ... done
[13:36:11.082] run() for ‘MultisessionFuture’ ... done
[13:36:11.082] result() for ClusterFuture ...
[13:36:11.082] receiveMessageFromWorker() for ClusterFuture ...
[13:36:11.082] - Validating connection of MultisessionFuture
[13:36:11.086] - received message: FutureResult
[13:36:11.087] - Received FutureResult
[13:36:11.087] - Erased future from FutureRegistry
[13:36:11.087] result() for ClusterFuture ...
[13:36:11.087] - result already collected: FutureResult
[13:36:11.087] result() for ClusterFuture ... done
[13:36:11.087] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:11.087] result() for ClusterFuture ... done
[13:36:11.087] result() for ClusterFuture ...
[13:36:11.088] - result already collected: FutureResult
[13:36:11.088] result() for ClusterFuture ... done
[1] 6
** Sum function 'B' with plan('multisession') ...
function (x, ...) 
{
    sumt <- function(x) {
        message("Arguments '...' exists: ", exists("...", inherits = TRUE))
        y %<-% {
            sum(x, ...)
        }
        y
    }
    sumt(x)
}
<bytecode: 0x5583231abaf0>
Arguments '...' exists: TRUE
[13:36:11.088] getGlobalsAndPackages() ...
[13:36:11.088] Searching for globals...
[13:36:11.090] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[13:36:11.090] Searching for globals ... DONE
[13:36:11.090] Resolving globals: FALSE
[13:36:11.091] Tweak future expression to call with '...' arguments ...
[13:36:11.091] {
[13:36:11.091]     do.call(function(...) {
[13:36:11.091]         sum(x, ...)
[13:36:11.091]     }, args = future.call.arguments)
[13:36:11.091] }
[13:36:11.091] Tweak future expression to call with '...' arguments ... DONE
[13:36:11.092] The total size of the 2 globals is 112 bytes (112 bytes)
[13:36:11.092] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[13:36:11.092] - globals: [2] ‘x’, ‘future.call.arguments’
[13:36:11.092] 
[13:36:11.092] getGlobalsAndPackages() ... DONE
[13:36:11.093] run() for ‘Future’ ...
[13:36:11.093] - state: ‘created’
[13:36:11.093] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:11.107] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:11.107] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:11.108]   - Field: ‘node’
[13:36:11.108]   - Field: ‘label’
[13:36:11.108]   - Field: ‘local’
[13:36:11.108]   - Field: ‘owner’
[13:36:11.108]   - Field: ‘envir’
[13:36:11.108]   - Field: ‘workers’
[13:36:11.108]   - Field: ‘packages’
[13:36:11.108]   - Field: ‘gc’
[13:36:11.108]   - Field: ‘conditions’
[13:36:11.108]   - Field: ‘persistent’
[13:36:11.109]   - Field: ‘expr’
[13:36:11.109]   - Field: ‘uuid’
[13:36:11.109]   - Field: ‘seed’
[13:36:11.109]   - Field: ‘version’
[13:36:11.109]   - Field: ‘result’
[13:36:11.109]   - Field: ‘asynchronous’
[13:36:11.109]   - Field: ‘calls’
[13:36:11.109]   - Field: ‘globals’
[13:36:11.109]   - Field: ‘stdout’
[13:36:11.110]   - Field: ‘earlySignal’
[13:36:11.110]   - Field: ‘lazy’
[13:36:11.110]   - Field: ‘state’
[13:36:11.110] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:11.110] - Launch lazy future ...
[13:36:11.110] Packages needed by the future expression (n = 0): <none>
[13:36:11.111] Packages needed by future strategies (n = 0): <none>
[13:36:11.111] {
[13:36:11.111]     {
[13:36:11.111]         {
[13:36:11.111]             ...future.startTime <- base::Sys.time()
[13:36:11.111]             {
[13:36:11.111]                 {
[13:36:11.111]                   {
[13:36:11.111]                     {
[13:36:11.111]                       base::local({
[13:36:11.111]                         has_future <- base::requireNamespace("future", 
[13:36:11.111]                           quietly = TRUE)
[13:36:11.111]                         if (has_future) {
[13:36:11.111]                           ns <- base::getNamespace("future")
[13:36:11.111]                           version <- ns[[".package"]][["version"]]
[13:36:11.111]                           if (is.null(version)) 
[13:36:11.111]                             version <- utils::packageVersion("future")
[13:36:11.111]                         }
[13:36:11.111]                         else {
[13:36:11.111]                           version <- NULL
[13:36:11.111]                         }
[13:36:11.111]                         if (!has_future || version < "1.8.0") {
[13:36:11.111]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:11.111]                             "", base::R.version$version.string), 
[13:36:11.111]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:11.111]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:11.111]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:11.111]                               "release", "version")], collapse = " "), 
[13:36:11.111]                             hostname = base::Sys.info()[["nodename"]])
[13:36:11.111]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:11.111]                             info)
[13:36:11.111]                           info <- base::paste(info, collapse = "; ")
[13:36:11.111]                           if (!has_future) {
[13:36:11.111]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:11.111]                               info)
[13:36:11.111]                           }
[13:36:11.111]                           else {
[13:36:11.111]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:11.111]                               info, version)
[13:36:11.111]                           }
[13:36:11.111]                           base::stop(msg)
[13:36:11.111]                         }
[13:36:11.111]                       })
[13:36:11.111]                     }
[13:36:11.111]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:11.111]                     base::options(mc.cores = 1L)
[13:36:11.111]                   }
[13:36:11.111]                   ...future.strategy.old <- future::plan("list")
[13:36:11.111]                   options(future.plan = NULL)
[13:36:11.111]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:11.111]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:11.111]                 }
[13:36:11.111]                 ...future.workdir <- getwd()
[13:36:11.111]             }
[13:36:11.111]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:11.111]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:11.111]         }
[13:36:11.111]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:11.111]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:11.111]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:11.111]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:11.111]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:11.111]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:11.111]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:11.111]             base::names(...future.oldOptions))
[13:36:11.111]     }
[13:36:11.111]     if (FALSE) {
[13:36:11.111]     }
[13:36:11.111]     else {
[13:36:11.111]         if (TRUE) {
[13:36:11.111]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:11.111]                 open = "w")
[13:36:11.111]         }
[13:36:11.111]         else {
[13:36:11.111]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:11.111]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:11.111]         }
[13:36:11.111]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:11.111]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:11.111]             base::sink(type = "output", split = FALSE)
[13:36:11.111]             base::close(...future.stdout)
[13:36:11.111]         }, add = TRUE)
[13:36:11.111]     }
[13:36:11.111]     ...future.frame <- base::sys.nframe()
[13:36:11.111]     ...future.conditions <- base::list()
[13:36:11.111]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:11.111]     if (FALSE) {
[13:36:11.111]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:11.111]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:11.111]     }
[13:36:11.111]     ...future.result <- base::tryCatch({
[13:36:11.111]         base::withCallingHandlers({
[13:36:11.111]             ...future.value <- base::withVisible(base::local({
[13:36:11.111]                 ...future.makeSendCondition <- base::local({
[13:36:11.111]                   sendCondition <- NULL
[13:36:11.111]                   function(frame = 1L) {
[13:36:11.111]                     if (is.function(sendCondition)) 
[13:36:11.111]                       return(sendCondition)
[13:36:11.111]                     ns <- getNamespace("parallel")
[13:36:11.111]                     if (exists("sendData", mode = "function", 
[13:36:11.111]                       envir = ns)) {
[13:36:11.111]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:11.111]                         envir = ns)
[13:36:11.111]                       envir <- sys.frame(frame)
[13:36:11.111]                       master <- NULL
[13:36:11.111]                       while (!identical(envir, .GlobalEnv) && 
[13:36:11.111]                         !identical(envir, emptyenv())) {
[13:36:11.111]                         if (exists("master", mode = "list", envir = envir, 
[13:36:11.111]                           inherits = FALSE)) {
[13:36:11.111]                           master <- get("master", mode = "list", 
[13:36:11.111]                             envir = envir, inherits = FALSE)
[13:36:11.111]                           if (inherits(master, c("SOCKnode", 
[13:36:11.111]                             "SOCK0node"))) {
[13:36:11.111]                             sendCondition <<- function(cond) {
[13:36:11.111]                               data <- list(type = "VALUE", value = cond, 
[13:36:11.111]                                 success = TRUE)
[13:36:11.111]                               parallel_sendData(master, data)
[13:36:11.111]                             }
[13:36:11.111]                             return(sendCondition)
[13:36:11.111]                           }
[13:36:11.111]                         }
[13:36:11.111]                         frame <- frame + 1L
[13:36:11.111]                         envir <- sys.frame(frame)
[13:36:11.111]                       }
[13:36:11.111]                     }
[13:36:11.111]                     sendCondition <<- function(cond) NULL
[13:36:11.111]                   }
[13:36:11.111]                 })
[13:36:11.111]                 withCallingHandlers({
[13:36:11.111]                   {
[13:36:11.111]                     do.call(function(...) {
[13:36:11.111]                       sum(x, ...)
[13:36:11.111]                     }, args = future.call.arguments)
[13:36:11.111]                   }
[13:36:11.111]                 }, immediateCondition = function(cond) {
[13:36:11.111]                   sendCondition <- ...future.makeSendCondition()
[13:36:11.111]                   sendCondition(cond)
[13:36:11.111]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:11.111]                   {
[13:36:11.111]                     inherits <- base::inherits
[13:36:11.111]                     invokeRestart <- base::invokeRestart
[13:36:11.111]                     is.null <- base::is.null
[13:36:11.111]                     muffled <- FALSE
[13:36:11.111]                     if (inherits(cond, "message")) {
[13:36:11.111]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:11.111]                       if (muffled) 
[13:36:11.111]                         invokeRestart("muffleMessage")
[13:36:11.111]                     }
[13:36:11.111]                     else if (inherits(cond, "warning")) {
[13:36:11.111]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:11.111]                       if (muffled) 
[13:36:11.111]                         invokeRestart("muffleWarning")
[13:36:11.111]                     }
[13:36:11.111]                     else if (inherits(cond, "condition")) {
[13:36:11.111]                       if (!is.null(pattern)) {
[13:36:11.111]                         computeRestarts <- base::computeRestarts
[13:36:11.111]                         grepl <- base::grepl
[13:36:11.111]                         restarts <- computeRestarts(cond)
[13:36:11.111]                         for (restart in restarts) {
[13:36:11.111]                           name <- restart$name
[13:36:11.111]                           if (is.null(name)) 
[13:36:11.111]                             next
[13:36:11.111]                           if (!grepl(pattern, name)) 
[13:36:11.111]                             next
[13:36:11.111]                           invokeRestart(restart)
[13:36:11.111]                           muffled <- TRUE
[13:36:11.111]                           break
[13:36:11.111]                         }
[13:36:11.111]                       }
[13:36:11.111]                     }
[13:36:11.111]                     invisible(muffled)
[13:36:11.111]                   }
[13:36:11.111]                   muffleCondition(cond)
[13:36:11.111]                 })
[13:36:11.111]             }))
[13:36:11.111]             future::FutureResult(value = ...future.value$value, 
[13:36:11.111]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:11.111]                   ...future.rng), globalenv = if (FALSE) 
[13:36:11.111]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:11.111]                     ...future.globalenv.names))
[13:36:11.111]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:11.111]         }, condition = base::local({
[13:36:11.111]             c <- base::c
[13:36:11.111]             inherits <- base::inherits
[13:36:11.111]             invokeRestart <- base::invokeRestart
[13:36:11.111]             length <- base::length
[13:36:11.111]             list <- base::list
[13:36:11.111]             seq.int <- base::seq.int
[13:36:11.111]             signalCondition <- base::signalCondition
[13:36:11.111]             sys.calls <- base::sys.calls
[13:36:11.111]             `[[` <- base::`[[`
[13:36:11.111]             `+` <- base::`+`
[13:36:11.111]             `<<-` <- base::`<<-`
[13:36:11.111]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:11.111]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:11.111]                   3L)]
[13:36:11.111]             }
[13:36:11.111]             function(cond) {
[13:36:11.111]                 is_error <- inherits(cond, "error")
[13:36:11.111]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:11.111]                   NULL)
[13:36:11.111]                 if (is_error) {
[13:36:11.111]                   sessionInformation <- function() {
[13:36:11.111]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:11.111]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:11.111]                       search = base::search(), system = base::Sys.info())
[13:36:11.111]                   }
[13:36:11.111]                   ...future.conditions[[length(...future.conditions) + 
[13:36:11.111]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:11.111]                     cond$call), session = sessionInformation(), 
[13:36:11.111]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:11.111]                   signalCondition(cond)
[13:36:11.111]                 }
[13:36:11.111]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:11.111]                 "immediateCondition"))) {
[13:36:11.111]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:11.111]                   ...future.conditions[[length(...future.conditions) + 
[13:36:11.111]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:11.111]                   if (TRUE && !signal) {
[13:36:11.111]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:11.111]                     {
[13:36:11.111]                       inherits <- base::inherits
[13:36:11.111]                       invokeRestart <- base::invokeRestart
[13:36:11.111]                       is.null <- base::is.null
[13:36:11.111]                       muffled <- FALSE
[13:36:11.111]                       if (inherits(cond, "message")) {
[13:36:11.111]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:11.111]                         if (muffled) 
[13:36:11.111]                           invokeRestart("muffleMessage")
[13:36:11.111]                       }
[13:36:11.111]                       else if (inherits(cond, "warning")) {
[13:36:11.111]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:11.111]                         if (muffled) 
[13:36:11.111]                           invokeRestart("muffleWarning")
[13:36:11.111]                       }
[13:36:11.111]                       else if (inherits(cond, "condition")) {
[13:36:11.111]                         if (!is.null(pattern)) {
[13:36:11.111]                           computeRestarts <- base::computeRestarts
[13:36:11.111]                           grepl <- base::grepl
[13:36:11.111]                           restarts <- computeRestarts(cond)
[13:36:11.111]                           for (restart in restarts) {
[13:36:11.111]                             name <- restart$name
[13:36:11.111]                             if (is.null(name)) 
[13:36:11.111]                               next
[13:36:11.111]                             if (!grepl(pattern, name)) 
[13:36:11.111]                               next
[13:36:11.111]                             invokeRestart(restart)
[13:36:11.111]                             muffled <- TRUE
[13:36:11.111]                             break
[13:36:11.111]                           }
[13:36:11.111]                         }
[13:36:11.111]                       }
[13:36:11.111]                       invisible(muffled)
[13:36:11.111]                     }
[13:36:11.111]                     muffleCondition(cond, pattern = "^muffle")
[13:36:11.111]                   }
[13:36:11.111]                 }
[13:36:11.111]                 else {
[13:36:11.111]                   if (TRUE) {
[13:36:11.111]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:11.111]                     {
[13:36:11.111]                       inherits <- base::inherits
[13:36:11.111]                       invokeRestart <- base::invokeRestart
[13:36:11.111]                       is.null <- base::is.null
[13:36:11.111]                       muffled <- FALSE
[13:36:11.111]                       if (inherits(cond, "message")) {
[13:36:11.111]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:11.111]                         if (muffled) 
[13:36:11.111]                           invokeRestart("muffleMessage")
[13:36:11.111]                       }
[13:36:11.111]                       else if (inherits(cond, "warning")) {
[13:36:11.111]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:11.111]                         if (muffled) 
[13:36:11.111]                           invokeRestart("muffleWarning")
[13:36:11.111]                       }
[13:36:11.111]                       else if (inherits(cond, "condition")) {
[13:36:11.111]                         if (!is.null(pattern)) {
[13:36:11.111]                           computeRestarts <- base::computeRestarts
[13:36:11.111]                           grepl <- base::grepl
[13:36:11.111]                           restarts <- computeRestarts(cond)
[13:36:11.111]                           for (restart in restarts) {
[13:36:11.111]                             name <- restart$name
[13:36:11.111]                             if (is.null(name)) 
[13:36:11.111]                               next
[13:36:11.111]                             if (!grepl(pattern, name)) 
[13:36:11.111]                               next
[13:36:11.111]                             invokeRestart(restart)
[13:36:11.111]                             muffled <- TRUE
[13:36:11.111]                             break
[13:36:11.111]                           }
[13:36:11.111]                         }
[13:36:11.111]                       }
[13:36:11.111]                       invisible(muffled)
[13:36:11.111]                     }
[13:36:11.111]                     muffleCondition(cond, pattern = "^muffle")
[13:36:11.111]                   }
[13:36:11.111]                 }
[13:36:11.111]             }
[13:36:11.111]         }))
[13:36:11.111]     }, error = function(ex) {
[13:36:11.111]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:11.111]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:11.111]                 ...future.rng), started = ...future.startTime, 
[13:36:11.111]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:11.111]             version = "1.8"), class = "FutureResult")
[13:36:11.111]     }, finally = {
[13:36:11.111]         if (!identical(...future.workdir, getwd())) 
[13:36:11.111]             setwd(...future.workdir)
[13:36:11.111]         {
[13:36:11.111]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:11.111]                 ...future.oldOptions$nwarnings <- NULL
[13:36:11.111]             }
[13:36:11.111]             base::options(...future.oldOptions)
[13:36:11.111]             if (.Platform$OS.type == "windows") {
[13:36:11.111]                 old_names <- names(...future.oldEnvVars)
[13:36:11.111]                 envs <- base::Sys.getenv()
[13:36:11.111]                 names <- names(envs)
[13:36:11.111]                 common <- intersect(names, old_names)
[13:36:11.111]                 added <- setdiff(names, old_names)
[13:36:11.111]                 removed <- setdiff(old_names, names)
[13:36:11.111]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:11.111]                   envs[common]]
[13:36:11.111]                 NAMES <- toupper(changed)
[13:36:11.111]                 args <- list()
[13:36:11.111]                 for (kk in seq_along(NAMES)) {
[13:36:11.111]                   name <- changed[[kk]]
[13:36:11.111]                   NAME <- NAMES[[kk]]
[13:36:11.111]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:11.111]                     next
[13:36:11.111]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:11.111]                 }
[13:36:11.111]                 NAMES <- toupper(added)
[13:36:11.111]                 for (kk in seq_along(NAMES)) {
[13:36:11.111]                   name <- added[[kk]]
[13:36:11.111]                   NAME <- NAMES[[kk]]
[13:36:11.111]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:11.111]                     next
[13:36:11.111]                   args[[name]] <- ""
[13:36:11.111]                 }
[13:36:11.111]                 NAMES <- toupper(removed)
[13:36:11.111]                 for (kk in seq_along(NAMES)) {
[13:36:11.111]                   name <- removed[[kk]]
[13:36:11.111]                   NAME <- NAMES[[kk]]
[13:36:11.111]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:11.111]                     next
[13:36:11.111]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:11.111]                 }
[13:36:11.111]                 if (length(args) > 0) 
[13:36:11.111]                   base::do.call(base::Sys.setenv, args = args)
[13:36:11.111]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:11.111]             }
[13:36:11.111]             else {
[13:36:11.111]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:11.111]             }
[13:36:11.111]             {
[13:36:11.111]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:11.111]                   0L) {
[13:36:11.111]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:11.111]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:11.111]                   base::options(opts)
[13:36:11.111]                 }
[13:36:11.111]                 {
[13:36:11.111]                   {
[13:36:11.111]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:11.111]                     NULL
[13:36:11.111]                   }
[13:36:11.111]                   options(future.plan = NULL)
[13:36:11.111]                   if (is.na(NA_character_)) 
[13:36:11.111]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:11.111]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:11.111]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:11.111]                     .init = FALSE)
[13:36:11.111]                 }
[13:36:11.111]             }
[13:36:11.111]         }
[13:36:11.111]     })
[13:36:11.111]     if (TRUE) {
[13:36:11.111]         base::sink(type = "output", split = FALSE)
[13:36:11.111]         if (TRUE) {
[13:36:11.111]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:11.111]         }
[13:36:11.111]         else {
[13:36:11.111]             ...future.result["stdout"] <- base::list(NULL)
[13:36:11.111]         }
[13:36:11.111]         base::close(...future.stdout)
[13:36:11.111]         ...future.stdout <- NULL
[13:36:11.111]     }
[13:36:11.111]     ...future.result$conditions <- ...future.conditions
[13:36:11.111]     ...future.result$finished <- base::Sys.time()
[13:36:11.111]     ...future.result
[13:36:11.111] }
[13:36:11.114] Exporting 2 global objects (112 bytes) to cluster node #1 ...
[13:36:11.114] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[13:36:11.115] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[13:36:11.115] Exporting ‘future.call.arguments’ (56 bytes) to cluster node #1 ...
[13:36:11.115] Exporting ‘future.call.arguments’ (56 bytes) to cluster node #1 ... DONE
[13:36:11.115] Exporting 2 global objects (112 bytes) to cluster node #1 ... DONE
[13:36:11.116] MultisessionFuture started
[13:36:11.116] - Launch lazy future ... done
[13:36:11.116] run() for ‘MultisessionFuture’ ... done
[13:36:11.117] result() for ClusterFuture ...
[13:36:11.117] receiveMessageFromWorker() for ClusterFuture ...
[13:36:11.117] - Validating connection of MultisessionFuture
[13:36:11.118] - received message: FutureResult
[13:36:11.118] - Received FutureResult
[13:36:11.118] - Erased future from FutureRegistry
[13:36:11.118] result() for ClusterFuture ...
[13:36:11.119] - result already collected: FutureResult
[13:36:11.119] result() for ClusterFuture ... done
[13:36:11.119] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:11.119] result() for ClusterFuture ... done
[13:36:11.119] result() for ClusterFuture ...
[13:36:11.119] - result already collected: FutureResult
[13:36:11.119] result() for ClusterFuture ... done
[1] 6
** Sum function 'C' with plan('multisession') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y)
    }
    y
}
<bytecode: 0x55832330d3a8>
Arguments '...' exists: FALSE
[13:36:11.120] getGlobalsAndPackages() ...
[13:36:11.120] Searching for globals...
[13:36:11.121] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘y’
[13:36:11.122] Searching for globals ... DONE
[13:36:11.122] Resolving globals: FALSE
[13:36:11.122] The total size of the 2 globals is 112 bytes (112 bytes)
[13:36:11.123] The total size of the 2 globals exported for future expression (‘{; sum(x, y); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[13:36:11.123] - globals: [2] ‘x’, ‘y’
[13:36:11.123] 
[13:36:11.123] getGlobalsAndPackages() ... DONE
[13:36:11.123] run() for ‘Future’ ...
[13:36:11.123] - state: ‘created’
[13:36:11.124] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:11.138] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:11.138] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:11.138]   - Field: ‘node’
[13:36:11.138]   - Field: ‘label’
[13:36:11.138]   - Field: ‘local’
[13:36:11.139]   - Field: ‘owner’
[13:36:11.139]   - Field: ‘envir’
[13:36:11.139]   - Field: ‘workers’
[13:36:11.139]   - Field: ‘packages’
[13:36:11.139]   - Field: ‘gc’
[13:36:11.139]   - Field: ‘conditions’
[13:36:11.139]   - Field: ‘persistent’
[13:36:11.139]   - Field: ‘expr’
[13:36:11.139]   - Field: ‘uuid’
[13:36:11.140]   - Field: ‘seed’
[13:36:11.140]   - Field: ‘version’
[13:36:11.140]   - Field: ‘result’
[13:36:11.140]   - Field: ‘asynchronous’
[13:36:11.140]   - Field: ‘calls’
[13:36:11.140]   - Field: ‘globals’
[13:36:11.140]   - Field: ‘stdout’
[13:36:11.140]   - Field: ‘earlySignal’
[13:36:11.140]   - Field: ‘lazy’
[13:36:11.141]   - Field: ‘state’
[13:36:11.141] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:11.141] - Launch lazy future ...
[13:36:11.141] Packages needed by the future expression (n = 0): <none>
[13:36:11.141] Packages needed by future strategies (n = 0): <none>
[13:36:11.142] {
[13:36:11.142]     {
[13:36:11.142]         {
[13:36:11.142]             ...future.startTime <- base::Sys.time()
[13:36:11.142]             {
[13:36:11.142]                 {
[13:36:11.142]                   {
[13:36:11.142]                     {
[13:36:11.142]                       base::local({
[13:36:11.142]                         has_future <- base::requireNamespace("future", 
[13:36:11.142]                           quietly = TRUE)
[13:36:11.142]                         if (has_future) {
[13:36:11.142]                           ns <- base::getNamespace("future")
[13:36:11.142]                           version <- ns[[".package"]][["version"]]
[13:36:11.142]                           if (is.null(version)) 
[13:36:11.142]                             version <- utils::packageVersion("future")
[13:36:11.142]                         }
[13:36:11.142]                         else {
[13:36:11.142]                           version <- NULL
[13:36:11.142]                         }
[13:36:11.142]                         if (!has_future || version < "1.8.0") {
[13:36:11.142]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:11.142]                             "", base::R.version$version.string), 
[13:36:11.142]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:11.142]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:11.142]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:11.142]                               "release", "version")], collapse = " "), 
[13:36:11.142]                             hostname = base::Sys.info()[["nodename"]])
[13:36:11.142]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:11.142]                             info)
[13:36:11.142]                           info <- base::paste(info, collapse = "; ")
[13:36:11.142]                           if (!has_future) {
[13:36:11.142]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:11.142]                               info)
[13:36:11.142]                           }
[13:36:11.142]                           else {
[13:36:11.142]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:11.142]                               info, version)
[13:36:11.142]                           }
[13:36:11.142]                           base::stop(msg)
[13:36:11.142]                         }
[13:36:11.142]                       })
[13:36:11.142]                     }
[13:36:11.142]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:11.142]                     base::options(mc.cores = 1L)
[13:36:11.142]                   }
[13:36:11.142]                   ...future.strategy.old <- future::plan("list")
[13:36:11.142]                   options(future.plan = NULL)
[13:36:11.142]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:11.142]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:11.142]                 }
[13:36:11.142]                 ...future.workdir <- getwd()
[13:36:11.142]             }
[13:36:11.142]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:11.142]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:11.142]         }
[13:36:11.142]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:11.142]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:11.142]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:11.142]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:11.142]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:11.142]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:11.142]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:11.142]             base::names(...future.oldOptions))
[13:36:11.142]     }
[13:36:11.142]     if (FALSE) {
[13:36:11.142]     }
[13:36:11.142]     else {
[13:36:11.142]         if (TRUE) {
[13:36:11.142]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:11.142]                 open = "w")
[13:36:11.142]         }
[13:36:11.142]         else {
[13:36:11.142]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:11.142]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:11.142]         }
[13:36:11.142]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:11.142]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:11.142]             base::sink(type = "output", split = FALSE)
[13:36:11.142]             base::close(...future.stdout)
[13:36:11.142]         }, add = TRUE)
[13:36:11.142]     }
[13:36:11.142]     ...future.frame <- base::sys.nframe()
[13:36:11.142]     ...future.conditions <- base::list()
[13:36:11.142]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:11.142]     if (FALSE) {
[13:36:11.142]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:11.142]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:11.142]     }
[13:36:11.142]     ...future.result <- base::tryCatch({
[13:36:11.142]         base::withCallingHandlers({
[13:36:11.142]             ...future.value <- base::withVisible(base::local({
[13:36:11.142]                 ...future.makeSendCondition <- base::local({
[13:36:11.142]                   sendCondition <- NULL
[13:36:11.142]                   function(frame = 1L) {
[13:36:11.142]                     if (is.function(sendCondition)) 
[13:36:11.142]                       return(sendCondition)
[13:36:11.142]                     ns <- getNamespace("parallel")
[13:36:11.142]                     if (exists("sendData", mode = "function", 
[13:36:11.142]                       envir = ns)) {
[13:36:11.142]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:11.142]                         envir = ns)
[13:36:11.142]                       envir <- sys.frame(frame)
[13:36:11.142]                       master <- NULL
[13:36:11.142]                       while (!identical(envir, .GlobalEnv) && 
[13:36:11.142]                         !identical(envir, emptyenv())) {
[13:36:11.142]                         if (exists("master", mode = "list", envir = envir, 
[13:36:11.142]                           inherits = FALSE)) {
[13:36:11.142]                           master <- get("master", mode = "list", 
[13:36:11.142]                             envir = envir, inherits = FALSE)
[13:36:11.142]                           if (inherits(master, c("SOCKnode", 
[13:36:11.142]                             "SOCK0node"))) {
[13:36:11.142]                             sendCondition <<- function(cond) {
[13:36:11.142]                               data <- list(type = "VALUE", value = cond, 
[13:36:11.142]                                 success = TRUE)
[13:36:11.142]                               parallel_sendData(master, data)
[13:36:11.142]                             }
[13:36:11.142]                             return(sendCondition)
[13:36:11.142]                           }
[13:36:11.142]                         }
[13:36:11.142]                         frame <- frame + 1L
[13:36:11.142]                         envir <- sys.frame(frame)
[13:36:11.142]                       }
[13:36:11.142]                     }
[13:36:11.142]                     sendCondition <<- function(cond) NULL
[13:36:11.142]                   }
[13:36:11.142]                 })
[13:36:11.142]                 withCallingHandlers({
[13:36:11.142]                   {
[13:36:11.142]                     sum(x, y)
[13:36:11.142]                   }
[13:36:11.142]                 }, immediateCondition = function(cond) {
[13:36:11.142]                   sendCondition <- ...future.makeSendCondition()
[13:36:11.142]                   sendCondition(cond)
[13:36:11.142]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:11.142]                   {
[13:36:11.142]                     inherits <- base::inherits
[13:36:11.142]                     invokeRestart <- base::invokeRestart
[13:36:11.142]                     is.null <- base::is.null
[13:36:11.142]                     muffled <- FALSE
[13:36:11.142]                     if (inherits(cond, "message")) {
[13:36:11.142]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:11.142]                       if (muffled) 
[13:36:11.142]                         invokeRestart("muffleMessage")
[13:36:11.142]                     }
[13:36:11.142]                     else if (inherits(cond, "warning")) {
[13:36:11.142]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:11.142]                       if (muffled) 
[13:36:11.142]                         invokeRestart("muffleWarning")
[13:36:11.142]                     }
[13:36:11.142]                     else if (inherits(cond, "condition")) {
[13:36:11.142]                       if (!is.null(pattern)) {
[13:36:11.142]                         computeRestarts <- base::computeRestarts
[13:36:11.142]                         grepl <- base::grepl
[13:36:11.142]                         restarts <- computeRestarts(cond)
[13:36:11.142]                         for (restart in restarts) {
[13:36:11.142]                           name <- restart$name
[13:36:11.142]                           if (is.null(name)) 
[13:36:11.142]                             next
[13:36:11.142]                           if (!grepl(pattern, name)) 
[13:36:11.142]                             next
[13:36:11.142]                           invokeRestart(restart)
[13:36:11.142]                           muffled <- TRUE
[13:36:11.142]                           break
[13:36:11.142]                         }
[13:36:11.142]                       }
[13:36:11.142]                     }
[13:36:11.142]                     invisible(muffled)
[13:36:11.142]                   }
[13:36:11.142]                   muffleCondition(cond)
[13:36:11.142]                 })
[13:36:11.142]             }))
[13:36:11.142]             future::FutureResult(value = ...future.value$value, 
[13:36:11.142]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:11.142]                   ...future.rng), globalenv = if (FALSE) 
[13:36:11.142]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:11.142]                     ...future.globalenv.names))
[13:36:11.142]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:11.142]         }, condition = base::local({
[13:36:11.142]             c <- base::c
[13:36:11.142]             inherits <- base::inherits
[13:36:11.142]             invokeRestart <- base::invokeRestart
[13:36:11.142]             length <- base::length
[13:36:11.142]             list <- base::list
[13:36:11.142]             seq.int <- base::seq.int
[13:36:11.142]             signalCondition <- base::signalCondition
[13:36:11.142]             sys.calls <- base::sys.calls
[13:36:11.142]             `[[` <- base::`[[`
[13:36:11.142]             `+` <- base::`+`
[13:36:11.142]             `<<-` <- base::`<<-`
[13:36:11.142]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:11.142]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:11.142]                   3L)]
[13:36:11.142]             }
[13:36:11.142]             function(cond) {
[13:36:11.142]                 is_error <- inherits(cond, "error")
[13:36:11.142]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:11.142]                   NULL)
[13:36:11.142]                 if (is_error) {
[13:36:11.142]                   sessionInformation <- function() {
[13:36:11.142]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:11.142]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:11.142]                       search = base::search(), system = base::Sys.info())
[13:36:11.142]                   }
[13:36:11.142]                   ...future.conditions[[length(...future.conditions) + 
[13:36:11.142]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:11.142]                     cond$call), session = sessionInformation(), 
[13:36:11.142]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:11.142]                   signalCondition(cond)
[13:36:11.142]                 }
[13:36:11.142]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:11.142]                 "immediateCondition"))) {
[13:36:11.142]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:11.142]                   ...future.conditions[[length(...future.conditions) + 
[13:36:11.142]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:11.142]                   if (TRUE && !signal) {
[13:36:11.142]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:11.142]                     {
[13:36:11.142]                       inherits <- base::inherits
[13:36:11.142]                       invokeRestart <- base::invokeRestart
[13:36:11.142]                       is.null <- base::is.null
[13:36:11.142]                       muffled <- FALSE
[13:36:11.142]                       if (inherits(cond, "message")) {
[13:36:11.142]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:11.142]                         if (muffled) 
[13:36:11.142]                           invokeRestart("muffleMessage")
[13:36:11.142]                       }
[13:36:11.142]                       else if (inherits(cond, "warning")) {
[13:36:11.142]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:11.142]                         if (muffled) 
[13:36:11.142]                           invokeRestart("muffleWarning")
[13:36:11.142]                       }
[13:36:11.142]                       else if (inherits(cond, "condition")) {
[13:36:11.142]                         if (!is.null(pattern)) {
[13:36:11.142]                           computeRestarts <- base::computeRestarts
[13:36:11.142]                           grepl <- base::grepl
[13:36:11.142]                           restarts <- computeRestarts(cond)
[13:36:11.142]                           for (restart in restarts) {
[13:36:11.142]                             name <- restart$name
[13:36:11.142]                             if (is.null(name)) 
[13:36:11.142]                               next
[13:36:11.142]                             if (!grepl(pattern, name)) 
[13:36:11.142]                               next
[13:36:11.142]                             invokeRestart(restart)
[13:36:11.142]                             muffled <- TRUE
[13:36:11.142]                             break
[13:36:11.142]                           }
[13:36:11.142]                         }
[13:36:11.142]                       }
[13:36:11.142]                       invisible(muffled)
[13:36:11.142]                     }
[13:36:11.142]                     muffleCondition(cond, pattern = "^muffle")
[13:36:11.142]                   }
[13:36:11.142]                 }
[13:36:11.142]                 else {
[13:36:11.142]                   if (TRUE) {
[13:36:11.142]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:11.142]                     {
[13:36:11.142]                       inherits <- base::inherits
[13:36:11.142]                       invokeRestart <- base::invokeRestart
[13:36:11.142]                       is.null <- base::is.null
[13:36:11.142]                       muffled <- FALSE
[13:36:11.142]                       if (inherits(cond, "message")) {
[13:36:11.142]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:11.142]                         if (muffled) 
[13:36:11.142]                           invokeRestart("muffleMessage")
[13:36:11.142]                       }
[13:36:11.142]                       else if (inherits(cond, "warning")) {
[13:36:11.142]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:11.142]                         if (muffled) 
[13:36:11.142]                           invokeRestart("muffleWarning")
[13:36:11.142]                       }
[13:36:11.142]                       else if (inherits(cond, "condition")) {
[13:36:11.142]                         if (!is.null(pattern)) {
[13:36:11.142]                           computeRestarts <- base::computeRestarts
[13:36:11.142]                           grepl <- base::grepl
[13:36:11.142]                           restarts <- computeRestarts(cond)
[13:36:11.142]                           for (restart in restarts) {
[13:36:11.142]                             name <- restart$name
[13:36:11.142]                             if (is.null(name)) 
[13:36:11.142]                               next
[13:36:11.142]                             if (!grepl(pattern, name)) 
[13:36:11.142]                               next
[13:36:11.142]                             invokeRestart(restart)
[13:36:11.142]                             muffled <- TRUE
[13:36:11.142]                             break
[13:36:11.142]                           }
[13:36:11.142]                         }
[13:36:11.142]                       }
[13:36:11.142]                       invisible(muffled)
[13:36:11.142]                     }
[13:36:11.142]                     muffleCondition(cond, pattern = "^muffle")
[13:36:11.142]                   }
[13:36:11.142]                 }
[13:36:11.142]             }
[13:36:11.142]         }))
[13:36:11.142]     }, error = function(ex) {
[13:36:11.142]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:11.142]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:11.142]                 ...future.rng), started = ...future.startTime, 
[13:36:11.142]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:11.142]             version = "1.8"), class = "FutureResult")
[13:36:11.142]     }, finally = {
[13:36:11.142]         if (!identical(...future.workdir, getwd())) 
[13:36:11.142]             setwd(...future.workdir)
[13:36:11.142]         {
[13:36:11.142]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:11.142]                 ...future.oldOptions$nwarnings <- NULL
[13:36:11.142]             }
[13:36:11.142]             base::options(...future.oldOptions)
[13:36:11.142]             if (.Platform$OS.type == "windows") {
[13:36:11.142]                 old_names <- names(...future.oldEnvVars)
[13:36:11.142]                 envs <- base::Sys.getenv()
[13:36:11.142]                 names <- names(envs)
[13:36:11.142]                 common <- intersect(names, old_names)
[13:36:11.142]                 added <- setdiff(names, old_names)
[13:36:11.142]                 removed <- setdiff(old_names, names)
[13:36:11.142]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:11.142]                   envs[common]]
[13:36:11.142]                 NAMES <- toupper(changed)
[13:36:11.142]                 args <- list()
[13:36:11.142]                 for (kk in seq_along(NAMES)) {
[13:36:11.142]                   name <- changed[[kk]]
[13:36:11.142]                   NAME <- NAMES[[kk]]
[13:36:11.142]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:11.142]                     next
[13:36:11.142]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:11.142]                 }
[13:36:11.142]                 NAMES <- toupper(added)
[13:36:11.142]                 for (kk in seq_along(NAMES)) {
[13:36:11.142]                   name <- added[[kk]]
[13:36:11.142]                   NAME <- NAMES[[kk]]
[13:36:11.142]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:11.142]                     next
[13:36:11.142]                   args[[name]] <- ""
[13:36:11.142]                 }
[13:36:11.142]                 NAMES <- toupper(removed)
[13:36:11.142]                 for (kk in seq_along(NAMES)) {
[13:36:11.142]                   name <- removed[[kk]]
[13:36:11.142]                   NAME <- NAMES[[kk]]
[13:36:11.142]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:11.142]                     next
[13:36:11.142]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:11.142]                 }
[13:36:11.142]                 if (length(args) > 0) 
[13:36:11.142]                   base::do.call(base::Sys.setenv, args = args)
[13:36:11.142]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:11.142]             }
[13:36:11.142]             else {
[13:36:11.142]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:11.142]             }
[13:36:11.142]             {
[13:36:11.142]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:11.142]                   0L) {
[13:36:11.142]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:11.142]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:11.142]                   base::options(opts)
[13:36:11.142]                 }
[13:36:11.142]                 {
[13:36:11.142]                   {
[13:36:11.142]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:11.142]                     NULL
[13:36:11.142]                   }
[13:36:11.142]                   options(future.plan = NULL)
[13:36:11.142]                   if (is.na(NA_character_)) 
[13:36:11.142]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:11.142]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:11.142]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:11.142]                     .init = FALSE)
[13:36:11.142]                 }
[13:36:11.142]             }
[13:36:11.142]         }
[13:36:11.142]     })
[13:36:11.142]     if (TRUE) {
[13:36:11.142]         base::sink(type = "output", split = FALSE)
[13:36:11.142]         if (TRUE) {
[13:36:11.142]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:11.142]         }
[13:36:11.142]         else {
[13:36:11.142]             ...future.result["stdout"] <- base::list(NULL)
[13:36:11.142]         }
[13:36:11.142]         base::close(...future.stdout)
[13:36:11.142]         ...future.stdout <- NULL
[13:36:11.142]     }
[13:36:11.142]     ...future.result$conditions <- ...future.conditions
[13:36:11.142]     ...future.result$finished <- base::Sys.time()
[13:36:11.142]     ...future.result
[13:36:11.142] }
[13:36:11.145] Exporting 2 global objects (112 bytes) to cluster node #1 ...
[13:36:11.145] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[13:36:11.148] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[13:36:11.148] Exporting ‘y’ (56 bytes) to cluster node #1 ...
[13:36:11.148] Exporting ‘y’ (56 bytes) to cluster node #1 ... DONE
[13:36:11.148] Exporting 2 global objects (112 bytes) to cluster node #1 ... DONE
[13:36:11.149] MultisessionFuture started
[13:36:11.149] - Launch lazy future ... done
[13:36:11.149] run() for ‘MultisessionFuture’ ... done
[13:36:11.149] result() for ClusterFuture ...
[13:36:11.149] receiveMessageFromWorker() for ClusterFuture ...
[13:36:11.150] - Validating connection of MultisessionFuture
[13:36:11.151] - received message: FutureResult
[13:36:11.151] - Received FutureResult
[13:36:11.151] - Erased future from FutureRegistry
[13:36:11.151] result() for ClusterFuture ...
[13:36:11.151] - result already collected: FutureResult
[13:36:11.151] result() for ClusterFuture ... done
[13:36:11.151] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:11.151] result() for ClusterFuture ... done
[13:36:11.151] result() for ClusterFuture ...
[13:36:11.151] - result already collected: FutureResult
[13:36:11.152] result() for ClusterFuture ... done
[1] 6
** Sum function 'D' with plan('multisession') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y, ...)
    }
    y
}
<bytecode: 0x5583234f9f00>
Arguments '...' exists: FALSE
[13:36:11.152] getGlobalsAndPackages() ...
[13:36:11.152] Searching for globals...
[13:36:11.154] - globals found: [5] ‘{’, ‘sum’, ‘x’, ‘y’, ‘...’
[13:36:11.154] Searching for globals ... DONE
[13:36:11.154] Resolving globals: FALSE
[13:36:11.154] Tweak future expression to call with '...' arguments ...
[13:36:11.154] The total size of the 2 globals is 112 bytes (112 bytes)
[13:36:11.155] The total size of the 2 globals exported for future expression (‘{; sum(x, y, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[13:36:11.155] - globals: [2] ‘x’, ‘y’
[13:36:11.155] 
[13:36:11.155] getGlobalsAndPackages() ... DONE
[13:36:11.155] run() for ‘Future’ ...
[13:36:11.155] - state: ‘created’
[13:36:11.155] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:11.169] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:11.169] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:11.169]   - Field: ‘node’
[13:36:11.169]   - Field: ‘label’
[13:36:11.169]   - Field: ‘local’
[13:36:11.169]   - Field: ‘owner’
[13:36:11.169]   - Field: ‘envir’
[13:36:11.169]   - Field: ‘workers’
[13:36:11.169]   - Field: ‘packages’
[13:36:11.169]   - Field: ‘gc’
[13:36:11.170]   - Field: ‘conditions’
[13:36:11.170]   - Field: ‘persistent’
[13:36:11.170]   - Field: ‘expr’
[13:36:11.170]   - Field: ‘uuid’
[13:36:11.170]   - Field: ‘seed’
[13:36:11.170]   - Field: ‘version’
[13:36:11.170]   - Field: ‘result’
[13:36:11.170]   - Field: ‘asynchronous’
[13:36:11.170]   - Field: ‘calls’
[13:36:11.170]   - Field: ‘globals’
[13:36:11.170]   - Field: ‘stdout’
[13:36:11.171]   - Field: ‘earlySignal’
[13:36:11.171]   - Field: ‘lazy’
[13:36:11.171]   - Field: ‘state’
[13:36:11.171] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:11.171] - Launch lazy future ...
[13:36:11.171] Packages needed by the future expression (n = 0): <none>
[13:36:11.171] Packages needed by future strategies (n = 0): <none>
[13:36:11.172] {
[13:36:11.172]     {
[13:36:11.172]         {
[13:36:11.172]             ...future.startTime <- base::Sys.time()
[13:36:11.172]             {
[13:36:11.172]                 {
[13:36:11.172]                   {
[13:36:11.172]                     {
[13:36:11.172]                       base::local({
[13:36:11.172]                         has_future <- base::requireNamespace("future", 
[13:36:11.172]                           quietly = TRUE)
[13:36:11.172]                         if (has_future) {
[13:36:11.172]                           ns <- base::getNamespace("future")
[13:36:11.172]                           version <- ns[[".package"]][["version"]]
[13:36:11.172]                           if (is.null(version)) 
[13:36:11.172]                             version <- utils::packageVersion("future")
[13:36:11.172]                         }
[13:36:11.172]                         else {
[13:36:11.172]                           version <- NULL
[13:36:11.172]                         }
[13:36:11.172]                         if (!has_future || version < "1.8.0") {
[13:36:11.172]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:11.172]                             "", base::R.version$version.string), 
[13:36:11.172]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:11.172]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:11.172]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:11.172]                               "release", "version")], collapse = " "), 
[13:36:11.172]                             hostname = base::Sys.info()[["nodename"]])
[13:36:11.172]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:11.172]                             info)
[13:36:11.172]                           info <- base::paste(info, collapse = "; ")
[13:36:11.172]                           if (!has_future) {
[13:36:11.172]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:11.172]                               info)
[13:36:11.172]                           }
[13:36:11.172]                           else {
[13:36:11.172]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:11.172]                               info, version)
[13:36:11.172]                           }
[13:36:11.172]                           base::stop(msg)
[13:36:11.172]                         }
[13:36:11.172]                       })
[13:36:11.172]                     }
[13:36:11.172]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:11.172]                     base::options(mc.cores = 1L)
[13:36:11.172]                   }
[13:36:11.172]                   ...future.strategy.old <- future::plan("list")
[13:36:11.172]                   options(future.plan = NULL)
[13:36:11.172]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:11.172]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:11.172]                 }
[13:36:11.172]                 ...future.workdir <- getwd()
[13:36:11.172]             }
[13:36:11.172]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:11.172]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:11.172]         }
[13:36:11.172]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:11.172]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:11.172]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:11.172]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:11.172]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:11.172]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:11.172]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:11.172]             base::names(...future.oldOptions))
[13:36:11.172]     }
[13:36:11.172]     if (FALSE) {
[13:36:11.172]     }
[13:36:11.172]     else {
[13:36:11.172]         if (TRUE) {
[13:36:11.172]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:11.172]                 open = "w")
[13:36:11.172]         }
[13:36:11.172]         else {
[13:36:11.172]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:11.172]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:11.172]         }
[13:36:11.172]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:11.172]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:11.172]             base::sink(type = "output", split = FALSE)
[13:36:11.172]             base::close(...future.stdout)
[13:36:11.172]         }, add = TRUE)
[13:36:11.172]     }
[13:36:11.172]     ...future.frame <- base::sys.nframe()
[13:36:11.172]     ...future.conditions <- base::list()
[13:36:11.172]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:11.172]     if (FALSE) {
[13:36:11.172]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:11.172]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:11.172]     }
[13:36:11.172]     ...future.result <- base::tryCatch({
[13:36:11.172]         base::withCallingHandlers({
[13:36:11.172]             ...future.value <- base::withVisible(base::local({
[13:36:11.172]                 ...future.makeSendCondition <- base::local({
[13:36:11.172]                   sendCondition <- NULL
[13:36:11.172]                   function(frame = 1L) {
[13:36:11.172]                     if (is.function(sendCondition)) 
[13:36:11.172]                       return(sendCondition)
[13:36:11.172]                     ns <- getNamespace("parallel")
[13:36:11.172]                     if (exists("sendData", mode = "function", 
[13:36:11.172]                       envir = ns)) {
[13:36:11.172]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:11.172]                         envir = ns)
[13:36:11.172]                       envir <- sys.frame(frame)
[13:36:11.172]                       master <- NULL
[13:36:11.172]                       while (!identical(envir, .GlobalEnv) && 
[13:36:11.172]                         !identical(envir, emptyenv())) {
[13:36:11.172]                         if (exists("master", mode = "list", envir = envir, 
[13:36:11.172]                           inherits = FALSE)) {
[13:36:11.172]                           master <- get("master", mode = "list", 
[13:36:11.172]                             envir = envir, inherits = FALSE)
[13:36:11.172]                           if (inherits(master, c("SOCKnode", 
[13:36:11.172]                             "SOCK0node"))) {
[13:36:11.172]                             sendCondition <<- function(cond) {
[13:36:11.172]                               data <- list(type = "VALUE", value = cond, 
[13:36:11.172]                                 success = TRUE)
[13:36:11.172]                               parallel_sendData(master, data)
[13:36:11.172]                             }
[13:36:11.172]                             return(sendCondition)
[13:36:11.172]                           }
[13:36:11.172]                         }
[13:36:11.172]                         frame <- frame + 1L
[13:36:11.172]                         envir <- sys.frame(frame)
[13:36:11.172]                       }
[13:36:11.172]                     }
[13:36:11.172]                     sendCondition <<- function(cond) NULL
[13:36:11.172]                   }
[13:36:11.172]                 })
[13:36:11.172]                 withCallingHandlers({
[13:36:11.172]                   {
[13:36:11.172]                     sum(x, y, ...)
[13:36:11.172]                   }
[13:36:11.172]                 }, immediateCondition = function(cond) {
[13:36:11.172]                   sendCondition <- ...future.makeSendCondition()
[13:36:11.172]                   sendCondition(cond)
[13:36:11.172]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:11.172]                   {
[13:36:11.172]                     inherits <- base::inherits
[13:36:11.172]                     invokeRestart <- base::invokeRestart
[13:36:11.172]                     is.null <- base::is.null
[13:36:11.172]                     muffled <- FALSE
[13:36:11.172]                     if (inherits(cond, "message")) {
[13:36:11.172]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:11.172]                       if (muffled) 
[13:36:11.172]                         invokeRestart("muffleMessage")
[13:36:11.172]                     }
[13:36:11.172]                     else if (inherits(cond, "warning")) {
[13:36:11.172]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:11.172]                       if (muffled) 
[13:36:11.172]                         invokeRestart("muffleWarning")
[13:36:11.172]                     }
[13:36:11.172]                     else if (inherits(cond, "condition")) {
[13:36:11.172]                       if (!is.null(pattern)) {
[13:36:11.172]                         computeRestarts <- base::computeRestarts
[13:36:11.172]                         grepl <- base::grepl
[13:36:11.172]                         restarts <- computeRestarts(cond)
[13:36:11.172]                         for (restart in restarts) {
[13:36:11.172]                           name <- restart$name
[13:36:11.172]                           if (is.null(name)) 
[13:36:11.172]                             next
[13:36:11.172]                           if (!grepl(pattern, name)) 
[13:36:11.172]                             next
[13:36:11.172]                           invokeRestart(restart)
[13:36:11.172]                           muffled <- TRUE
[13:36:11.172]                           break
[13:36:11.172]                         }
[13:36:11.172]                       }
[13:36:11.172]                     }
[13:36:11.172]                     invisible(muffled)
[13:36:11.172]                   }
[13:36:11.172]                   muffleCondition(cond)
[13:36:11.172]                 })
[13:36:11.172]             }))
[13:36:11.172]             future::FutureResult(value = ...future.value$value, 
[13:36:11.172]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:11.172]                   ...future.rng), globalenv = if (FALSE) 
[13:36:11.172]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:11.172]                     ...future.globalenv.names))
[13:36:11.172]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:11.172]         }, condition = base::local({
[13:36:11.172]             c <- base::c
[13:36:11.172]             inherits <- base::inherits
[13:36:11.172]             invokeRestart <- base::invokeRestart
[13:36:11.172]             length <- base::length
[13:36:11.172]             list <- base::list
[13:36:11.172]             seq.int <- base::seq.int
[13:36:11.172]             signalCondition <- base::signalCondition
[13:36:11.172]             sys.calls <- base::sys.calls
[13:36:11.172]             `[[` <- base::`[[`
[13:36:11.172]             `+` <- base::`+`
[13:36:11.172]             `<<-` <- base::`<<-`
[13:36:11.172]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:11.172]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:11.172]                   3L)]
[13:36:11.172]             }
[13:36:11.172]             function(cond) {
[13:36:11.172]                 is_error <- inherits(cond, "error")
[13:36:11.172]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:11.172]                   NULL)
[13:36:11.172]                 if (is_error) {
[13:36:11.172]                   sessionInformation <- function() {
[13:36:11.172]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:11.172]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:11.172]                       search = base::search(), system = base::Sys.info())
[13:36:11.172]                   }
[13:36:11.172]                   ...future.conditions[[length(...future.conditions) + 
[13:36:11.172]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:11.172]                     cond$call), session = sessionInformation(), 
[13:36:11.172]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:11.172]                   signalCondition(cond)
[13:36:11.172]                 }
[13:36:11.172]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:11.172]                 "immediateCondition"))) {
[13:36:11.172]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:11.172]                   ...future.conditions[[length(...future.conditions) + 
[13:36:11.172]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:11.172]                   if (TRUE && !signal) {
[13:36:11.172]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:11.172]                     {
[13:36:11.172]                       inherits <- base::inherits
[13:36:11.172]                       invokeRestart <- base::invokeRestart
[13:36:11.172]                       is.null <- base::is.null
[13:36:11.172]                       muffled <- FALSE
[13:36:11.172]                       if (inherits(cond, "message")) {
[13:36:11.172]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:11.172]                         if (muffled) 
[13:36:11.172]                           invokeRestart("muffleMessage")
[13:36:11.172]                       }
[13:36:11.172]                       else if (inherits(cond, "warning")) {
[13:36:11.172]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:11.172]                         if (muffled) 
[13:36:11.172]                           invokeRestart("muffleWarning")
[13:36:11.172]                       }
[13:36:11.172]                       else if (inherits(cond, "condition")) {
[13:36:11.172]                         if (!is.null(pattern)) {
[13:36:11.172]                           computeRestarts <- base::computeRestarts
[13:36:11.172]                           grepl <- base::grepl
[13:36:11.172]                           restarts <- computeRestarts(cond)
[13:36:11.172]                           for (restart in restarts) {
[13:36:11.172]                             name <- restart$name
[13:36:11.172]                             if (is.null(name)) 
[13:36:11.172]                               next
[13:36:11.172]                             if (!grepl(pattern, name)) 
[13:36:11.172]                               next
[13:36:11.172]                             invokeRestart(restart)
[13:36:11.172]                             muffled <- TRUE
[13:36:11.172]                             break
[13:36:11.172]                           }
[13:36:11.172]                         }
[13:36:11.172]                       }
[13:36:11.172]                       invisible(muffled)
[13:36:11.172]                     }
[13:36:11.172]                     muffleCondition(cond, pattern = "^muffle")
[13:36:11.172]                   }
[13:36:11.172]                 }
[13:36:11.172]                 else {
[13:36:11.172]                   if (TRUE) {
[13:36:11.172]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:11.172]                     {
[13:36:11.172]                       inherits <- base::inherits
[13:36:11.172]                       invokeRestart <- base::invokeRestart
[13:36:11.172]                       is.null <- base::is.null
[13:36:11.172]                       muffled <- FALSE
[13:36:11.172]                       if (inherits(cond, "message")) {
[13:36:11.172]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:11.172]                         if (muffled) 
[13:36:11.172]                           invokeRestart("muffleMessage")
[13:36:11.172]                       }
[13:36:11.172]                       else if (inherits(cond, "warning")) {
[13:36:11.172]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:11.172]                         if (muffled) 
[13:36:11.172]                           invokeRestart("muffleWarning")
[13:36:11.172]                       }
[13:36:11.172]                       else if (inherits(cond, "condition")) {
[13:36:11.172]                         if (!is.null(pattern)) {
[13:36:11.172]                           computeRestarts <- base::computeRestarts
[13:36:11.172]                           grepl <- base::grepl
[13:36:11.172]                           restarts <- computeRestarts(cond)
[13:36:11.172]                           for (restart in restarts) {
[13:36:11.172]                             name <- restart$name
[13:36:11.172]                             if (is.null(name)) 
[13:36:11.172]                               next
[13:36:11.172]                             if (!grepl(pattern, name)) 
[13:36:11.172]                               next
[13:36:11.172]                             invokeRestart(restart)
[13:36:11.172]                             muffled <- TRUE
[13:36:11.172]                             break
[13:36:11.172]                           }
[13:36:11.172]                         }
[13:36:11.172]                       }
[13:36:11.172]                       invisible(muffled)
[13:36:11.172]                     }
[13:36:11.172]                     muffleCondition(cond, pattern = "^muffle")
[13:36:11.172]                   }
[13:36:11.172]                 }
[13:36:11.172]             }
[13:36:11.172]         }))
[13:36:11.172]     }, error = function(ex) {
[13:36:11.172]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:11.172]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:11.172]                 ...future.rng), started = ...future.startTime, 
[13:36:11.172]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:11.172]             version = "1.8"), class = "FutureResult")
[13:36:11.172]     }, finally = {
[13:36:11.172]         if (!identical(...future.workdir, getwd())) 
[13:36:11.172]             setwd(...future.workdir)
[13:36:11.172]         {
[13:36:11.172]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:11.172]                 ...future.oldOptions$nwarnings <- NULL
[13:36:11.172]             }
[13:36:11.172]             base::options(...future.oldOptions)
[13:36:11.172]             if (.Platform$OS.type == "windows") {
[13:36:11.172]                 old_names <- names(...future.oldEnvVars)
[13:36:11.172]                 envs <- base::Sys.getenv()
[13:36:11.172]                 names <- names(envs)
[13:36:11.172]                 common <- intersect(names, old_names)
[13:36:11.172]                 added <- setdiff(names, old_names)
[13:36:11.172]                 removed <- setdiff(old_names, names)
[13:36:11.172]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:11.172]                   envs[common]]
[13:36:11.172]                 NAMES <- toupper(changed)
[13:36:11.172]                 args <- list()
[13:36:11.172]                 for (kk in seq_along(NAMES)) {
[13:36:11.172]                   name <- changed[[kk]]
[13:36:11.172]                   NAME <- NAMES[[kk]]
[13:36:11.172]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:11.172]                     next
[13:36:11.172]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:11.172]                 }
[13:36:11.172]                 NAMES <- toupper(added)
[13:36:11.172]                 for (kk in seq_along(NAMES)) {
[13:36:11.172]                   name <- added[[kk]]
[13:36:11.172]                   NAME <- NAMES[[kk]]
[13:36:11.172]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:11.172]                     next
[13:36:11.172]                   args[[name]] <- ""
[13:36:11.172]                 }
[13:36:11.172]                 NAMES <- toupper(removed)
[13:36:11.172]                 for (kk in seq_along(NAMES)) {
[13:36:11.172]                   name <- removed[[kk]]
[13:36:11.172]                   NAME <- NAMES[[kk]]
[13:36:11.172]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:11.172]                     next
[13:36:11.172]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:11.172]                 }
[13:36:11.172]                 if (length(args) > 0) 
[13:36:11.172]                   base::do.call(base::Sys.setenv, args = args)
[13:36:11.172]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:11.172]             }
[13:36:11.172]             else {
[13:36:11.172]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:11.172]             }
[13:36:11.172]             {
[13:36:11.172]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:11.172]                   0L) {
[13:36:11.172]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:11.172]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:11.172]                   base::options(opts)
[13:36:11.172]                 }
[13:36:11.172]                 {
[13:36:11.172]                   {
[13:36:11.172]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:11.172]                     NULL
[13:36:11.172]                   }
[13:36:11.172]                   options(future.plan = NULL)
[13:36:11.172]                   if (is.na(NA_character_)) 
[13:36:11.172]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:11.172]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:11.172]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:11.172]                     .init = FALSE)
[13:36:11.172]                 }
[13:36:11.172]             }
[13:36:11.172]         }
[13:36:11.172]     })
[13:36:11.172]     if (TRUE) {
[13:36:11.172]         base::sink(type = "output", split = FALSE)
[13:36:11.172]         if (TRUE) {
[13:36:11.172]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:11.172]         }
[13:36:11.172]         else {
[13:36:11.172]             ...future.result["stdout"] <- base::list(NULL)
[13:36:11.172]         }
[13:36:11.172]         base::close(...future.stdout)
[13:36:11.172]         ...future.stdout <- NULL
[13:36:11.172]     }
[13:36:11.172]     ...future.result$conditions <- ...future.conditions
[13:36:11.172]     ...future.result$finished <- base::Sys.time()
[13:36:11.172]     ...future.result
[13:36:11.172] }
[13:36:11.174] Exporting 2 global objects (112 bytes) to cluster node #1 ...
[13:36:11.174] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[13:36:11.175] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[13:36:11.175] Exporting ‘y’ (56 bytes) to cluster node #1 ...
[13:36:11.175] Exporting ‘y’ (56 bytes) to cluster node #1 ... DONE
[13:36:11.175] Exporting 2 global objects (112 bytes) to cluster node #1 ... DONE
[13:36:11.176] MultisessionFuture started
[13:36:11.176] - Launch lazy future ... done
[13:36:11.176] run() for ‘MultisessionFuture’ ... done
[13:36:11.176] result() for ClusterFuture ...
[13:36:11.176] receiveMessageFromWorker() for ClusterFuture ...
[13:36:11.177] - Validating connection of MultisessionFuture
[13:36:11.178] - received message: FutureResult
[13:36:11.178] - Received FutureResult
[13:36:11.178] - Erased future from FutureRegistry
[13:36:11.179] result() for ClusterFuture ...
[13:36:11.179] - result already collected: FutureResult
[13:36:11.179] result() for ClusterFuture ... done
[13:36:11.179] signalConditions() ...
[13:36:11.179]  - include = ‘immediateCondition’
[13:36:11.179]  - exclude = 
[13:36:11.179]  - resignal = FALSE
[13:36:11.179]  - Number of conditions: 1
[13:36:11.179] signalConditions() ... done
[13:36:11.179] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:11.179] result() for ClusterFuture ... done
[13:36:11.180] result() for ClusterFuture ...
[13:36:11.180] - result already collected: FutureResult
[13:36:11.180] result() for ClusterFuture ... done
[13:36:11.180] signalConditions() ...
[13:36:11.180]  - include = ‘immediateCondition’
[13:36:11.180]  - exclude = 
[13:36:11.180]  - resignal = FALSE
[13:36:11.180]  - Number of conditions: 1
[13:36:11.180] signalConditions() ... done
[13:36:11.180] Future state: ‘finished’
[13:36:11.180] result() for ClusterFuture ...
[13:36:11.180] - result already collected: FutureResult
[13:36:11.181] result() for ClusterFuture ... done
[13:36:11.181] signalConditions() ...
[13:36:11.181]  - include = ‘condition’
[13:36:11.181]  - exclude = ‘immediateCondition’
[13:36:11.181]  - resignal = TRUE
[13:36:11.181]  - Number of conditions: 1
[13:36:11.181]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[13:36:11.181] signalConditions() ... done
Error in withCallingHandlers({ : '...' used in an incorrect context
[1] "Error in withCallingHandlers({ : '...' used in an incorrect context\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        sum(x, y, ...)    }}, immediateCondition = function(cond) {    sendCondition <- ...future.makeSendCondition()    sendCondition(cond)    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): '...' used in an incorrect context>
** Sum function 'E' with plan('multisession') ...
function (...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    globals <- globals::globalsByName("...", envir = environment())
    f <- future({
        fcn <- function() sum(...)
        fcn()
    }, envir = parent.frame(), globals = globals)
    y <- value(f)
    y
}
<bytecode: 0x55832270d2f0>
Arguments '...' exists: TRUE
[13:36:11.182] getGlobalsAndPackages() ...
[13:36:11.182] - globals passed as-is: [1] ‘...’
[13:36:11.182] Resolving globals: FALSE
[13:36:11.182] Tweak future expression to call with '...' arguments ...
[13:36:11.183] {
[13:36:11.183]     do.call(function(...) {
[13:36:11.183]         fcn <- function() sum(...)
[13:36:11.183]         fcn()
[13:36:11.183]     }, args = future.call.arguments)
[13:36:11.183] }
[13:36:11.183] Tweak future expression to call with '...' arguments ... DONE
[13:36:11.183] The total size of the 1 globals is 112 bytes (112 bytes)
[13:36:11.183] The total size of the 1 globals exported for future expression (‘{; fcn <- function() sum(...); fcn(); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘future.call.arguments’ (112 bytes of class ‘list’)
[13:36:11.184] - globals: [1] ‘future.call.arguments’
[13:36:11.184] 
[13:36:11.184] getGlobalsAndPackages() ... DONE
[13:36:11.184] run() for ‘Future’ ...
[13:36:11.184] - state: ‘created’
[13:36:11.184] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:11.198] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:11.198] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:11.198]   - Field: ‘node’
[13:36:11.198]   - Field: ‘label’
[13:36:11.198]   - Field: ‘local’
[13:36:11.198]   - Field: ‘owner’
[13:36:11.198]   - Field: ‘envir’
[13:36:11.198]   - Field: ‘workers’
[13:36:11.199]   - Field: ‘packages’
[13:36:11.199]   - Field: ‘gc’
[13:36:11.199]   - Field: ‘conditions’
[13:36:11.199]   - Field: ‘persistent’
[13:36:11.199]   - Field: ‘expr’
[13:36:11.199]   - Field: ‘uuid’
[13:36:11.199]   - Field: ‘seed’
[13:36:11.199]   - Field: ‘version’
[13:36:11.199]   - Field: ‘result’
[13:36:11.199]   - Field: ‘asynchronous’
[13:36:11.199]   - Field: ‘calls’
[13:36:11.200]   - Field: ‘globals’
[13:36:11.200]   - Field: ‘stdout’
[13:36:11.200]   - Field: ‘earlySignal’
[13:36:11.200]   - Field: ‘lazy’
[13:36:11.200]   - Field: ‘state’
[13:36:11.200] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:11.200] - Launch lazy future ...
[13:36:11.200] Packages needed by the future expression (n = 0): <none>
[13:36:11.201] Packages needed by future strategies (n = 0): <none>
[13:36:11.201] {
[13:36:11.201]     {
[13:36:11.201]         {
[13:36:11.201]             ...future.startTime <- base::Sys.time()
[13:36:11.201]             {
[13:36:11.201]                 {
[13:36:11.201]                   {
[13:36:11.201]                     {
[13:36:11.201]                       base::local({
[13:36:11.201]                         has_future <- base::requireNamespace("future", 
[13:36:11.201]                           quietly = TRUE)
[13:36:11.201]                         if (has_future) {
[13:36:11.201]                           ns <- base::getNamespace("future")
[13:36:11.201]                           version <- ns[[".package"]][["version"]]
[13:36:11.201]                           if (is.null(version)) 
[13:36:11.201]                             version <- utils::packageVersion("future")
[13:36:11.201]                         }
[13:36:11.201]                         else {
[13:36:11.201]                           version <- NULL
[13:36:11.201]                         }
[13:36:11.201]                         if (!has_future || version < "1.8.0") {
[13:36:11.201]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:11.201]                             "", base::R.version$version.string), 
[13:36:11.201]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:11.201]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:11.201]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:11.201]                               "release", "version")], collapse = " "), 
[13:36:11.201]                             hostname = base::Sys.info()[["nodename"]])
[13:36:11.201]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:11.201]                             info)
[13:36:11.201]                           info <- base::paste(info, collapse = "; ")
[13:36:11.201]                           if (!has_future) {
[13:36:11.201]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:11.201]                               info)
[13:36:11.201]                           }
[13:36:11.201]                           else {
[13:36:11.201]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:11.201]                               info, version)
[13:36:11.201]                           }
[13:36:11.201]                           base::stop(msg)
[13:36:11.201]                         }
[13:36:11.201]                       })
[13:36:11.201]                     }
[13:36:11.201]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:11.201]                     base::options(mc.cores = 1L)
[13:36:11.201]                   }
[13:36:11.201]                   ...future.strategy.old <- future::plan("list")
[13:36:11.201]                   options(future.plan = NULL)
[13:36:11.201]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:11.201]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:11.201]                 }
[13:36:11.201]                 ...future.workdir <- getwd()
[13:36:11.201]             }
[13:36:11.201]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:11.201]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:11.201]         }
[13:36:11.201]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:11.201]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:11.201]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:11.201]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:11.201]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:11.201]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:11.201]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:11.201]             base::names(...future.oldOptions))
[13:36:11.201]     }
[13:36:11.201]     if (FALSE) {
[13:36:11.201]     }
[13:36:11.201]     else {
[13:36:11.201]         if (TRUE) {
[13:36:11.201]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:11.201]                 open = "w")
[13:36:11.201]         }
[13:36:11.201]         else {
[13:36:11.201]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:11.201]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:11.201]         }
[13:36:11.201]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:11.201]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:11.201]             base::sink(type = "output", split = FALSE)
[13:36:11.201]             base::close(...future.stdout)
[13:36:11.201]         }, add = TRUE)
[13:36:11.201]     }
[13:36:11.201]     ...future.frame <- base::sys.nframe()
[13:36:11.201]     ...future.conditions <- base::list()
[13:36:11.201]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:11.201]     if (FALSE) {
[13:36:11.201]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:11.201]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:11.201]     }
[13:36:11.201]     ...future.result <- base::tryCatch({
[13:36:11.201]         base::withCallingHandlers({
[13:36:11.201]             ...future.value <- base::withVisible(base::local({
[13:36:11.201]                 ...future.makeSendCondition <- base::local({
[13:36:11.201]                   sendCondition <- NULL
[13:36:11.201]                   function(frame = 1L) {
[13:36:11.201]                     if (is.function(sendCondition)) 
[13:36:11.201]                       return(sendCondition)
[13:36:11.201]                     ns <- getNamespace("parallel")
[13:36:11.201]                     if (exists("sendData", mode = "function", 
[13:36:11.201]                       envir = ns)) {
[13:36:11.201]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:11.201]                         envir = ns)
[13:36:11.201]                       envir <- sys.frame(frame)
[13:36:11.201]                       master <- NULL
[13:36:11.201]                       while (!identical(envir, .GlobalEnv) && 
[13:36:11.201]                         !identical(envir, emptyenv())) {
[13:36:11.201]                         if (exists("master", mode = "list", envir = envir, 
[13:36:11.201]                           inherits = FALSE)) {
[13:36:11.201]                           master <- get("master", mode = "list", 
[13:36:11.201]                             envir = envir, inherits = FALSE)
[13:36:11.201]                           if (inherits(master, c("SOCKnode", 
[13:36:11.201]                             "SOCK0node"))) {
[13:36:11.201]                             sendCondition <<- function(cond) {
[13:36:11.201]                               data <- list(type = "VALUE", value = cond, 
[13:36:11.201]                                 success = TRUE)
[13:36:11.201]                               parallel_sendData(master, data)
[13:36:11.201]                             }
[13:36:11.201]                             return(sendCondition)
[13:36:11.201]                           }
[13:36:11.201]                         }
[13:36:11.201]                         frame <- frame + 1L
[13:36:11.201]                         envir <- sys.frame(frame)
[13:36:11.201]                       }
[13:36:11.201]                     }
[13:36:11.201]                     sendCondition <<- function(cond) NULL
[13:36:11.201]                   }
[13:36:11.201]                 })
[13:36:11.201]                 withCallingHandlers({
[13:36:11.201]                   {
[13:36:11.201]                     do.call(function(...) {
[13:36:11.201]                       fcn <- function() sum(...)
[13:36:11.201]                       fcn()
[13:36:11.201]                     }, args = future.call.arguments)
[13:36:11.201]                   }
[13:36:11.201]                 }, immediateCondition = function(cond) {
[13:36:11.201]                   sendCondition <- ...future.makeSendCondition()
[13:36:11.201]                   sendCondition(cond)
[13:36:11.201]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:11.201]                   {
[13:36:11.201]                     inherits <- base::inherits
[13:36:11.201]                     invokeRestart <- base::invokeRestart
[13:36:11.201]                     is.null <- base::is.null
[13:36:11.201]                     muffled <- FALSE
[13:36:11.201]                     if (inherits(cond, "message")) {
[13:36:11.201]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:11.201]                       if (muffled) 
[13:36:11.201]                         invokeRestart("muffleMessage")
[13:36:11.201]                     }
[13:36:11.201]                     else if (inherits(cond, "warning")) {
[13:36:11.201]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:11.201]                       if (muffled) 
[13:36:11.201]                         invokeRestart("muffleWarning")
[13:36:11.201]                     }
[13:36:11.201]                     else if (inherits(cond, "condition")) {
[13:36:11.201]                       if (!is.null(pattern)) {
[13:36:11.201]                         computeRestarts <- base::computeRestarts
[13:36:11.201]                         grepl <- base::grepl
[13:36:11.201]                         restarts <- computeRestarts(cond)
[13:36:11.201]                         for (restart in restarts) {
[13:36:11.201]                           name <- restart$name
[13:36:11.201]                           if (is.null(name)) 
[13:36:11.201]                             next
[13:36:11.201]                           if (!grepl(pattern, name)) 
[13:36:11.201]                             next
[13:36:11.201]                           invokeRestart(restart)
[13:36:11.201]                           muffled <- TRUE
[13:36:11.201]                           break
[13:36:11.201]                         }
[13:36:11.201]                       }
[13:36:11.201]                     }
[13:36:11.201]                     invisible(muffled)
[13:36:11.201]                   }
[13:36:11.201]                   muffleCondition(cond)
[13:36:11.201]                 })
[13:36:11.201]             }))
[13:36:11.201]             future::FutureResult(value = ...future.value$value, 
[13:36:11.201]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:11.201]                   ...future.rng), globalenv = if (FALSE) 
[13:36:11.201]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:11.201]                     ...future.globalenv.names))
[13:36:11.201]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:11.201]         }, condition = base::local({
[13:36:11.201]             c <- base::c
[13:36:11.201]             inherits <- base::inherits
[13:36:11.201]             invokeRestart <- base::invokeRestart
[13:36:11.201]             length <- base::length
[13:36:11.201]             list <- base::list
[13:36:11.201]             seq.int <- base::seq.int
[13:36:11.201]             signalCondition <- base::signalCondition
[13:36:11.201]             sys.calls <- base::sys.calls
[13:36:11.201]             `[[` <- base::`[[`
[13:36:11.201]             `+` <- base::`+`
[13:36:11.201]             `<<-` <- base::`<<-`
[13:36:11.201]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:11.201]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:11.201]                   3L)]
[13:36:11.201]             }
[13:36:11.201]             function(cond) {
[13:36:11.201]                 is_error <- inherits(cond, "error")
[13:36:11.201]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:11.201]                   NULL)
[13:36:11.201]                 if (is_error) {
[13:36:11.201]                   sessionInformation <- function() {
[13:36:11.201]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:11.201]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:11.201]                       search = base::search(), system = base::Sys.info())
[13:36:11.201]                   }
[13:36:11.201]                   ...future.conditions[[length(...future.conditions) + 
[13:36:11.201]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:11.201]                     cond$call), session = sessionInformation(), 
[13:36:11.201]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:11.201]                   signalCondition(cond)
[13:36:11.201]                 }
[13:36:11.201]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:11.201]                 "immediateCondition"))) {
[13:36:11.201]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:11.201]                   ...future.conditions[[length(...future.conditions) + 
[13:36:11.201]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:11.201]                   if (TRUE && !signal) {
[13:36:11.201]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:11.201]                     {
[13:36:11.201]                       inherits <- base::inherits
[13:36:11.201]                       invokeRestart <- base::invokeRestart
[13:36:11.201]                       is.null <- base::is.null
[13:36:11.201]                       muffled <- FALSE
[13:36:11.201]                       if (inherits(cond, "message")) {
[13:36:11.201]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:11.201]                         if (muffled) 
[13:36:11.201]                           invokeRestart("muffleMessage")
[13:36:11.201]                       }
[13:36:11.201]                       else if (inherits(cond, "warning")) {
[13:36:11.201]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:11.201]                         if (muffled) 
[13:36:11.201]                           invokeRestart("muffleWarning")
[13:36:11.201]                       }
[13:36:11.201]                       else if (inherits(cond, "condition")) {
[13:36:11.201]                         if (!is.null(pattern)) {
[13:36:11.201]                           computeRestarts <- base::computeRestarts
[13:36:11.201]                           grepl <- base::grepl
[13:36:11.201]                           restarts <- computeRestarts(cond)
[13:36:11.201]                           for (restart in restarts) {
[13:36:11.201]                             name <- restart$name
[13:36:11.201]                             if (is.null(name)) 
[13:36:11.201]                               next
[13:36:11.201]                             if (!grepl(pattern, name)) 
[13:36:11.201]                               next
[13:36:11.201]                             invokeRestart(restart)
[13:36:11.201]                             muffled <- TRUE
[13:36:11.201]                             break
[13:36:11.201]                           }
[13:36:11.201]                         }
[13:36:11.201]                       }
[13:36:11.201]                       invisible(muffled)
[13:36:11.201]                     }
[13:36:11.201]                     muffleCondition(cond, pattern = "^muffle")
[13:36:11.201]                   }
[13:36:11.201]                 }
[13:36:11.201]                 else {
[13:36:11.201]                   if (TRUE) {
[13:36:11.201]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:11.201]                     {
[13:36:11.201]                       inherits <- base::inherits
[13:36:11.201]                       invokeRestart <- base::invokeRestart
[13:36:11.201]                       is.null <- base::is.null
[13:36:11.201]                       muffled <- FALSE
[13:36:11.201]                       if (inherits(cond, "message")) {
[13:36:11.201]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:11.201]                         if (muffled) 
[13:36:11.201]                           invokeRestart("muffleMessage")
[13:36:11.201]                       }
[13:36:11.201]                       else if (inherits(cond, "warning")) {
[13:36:11.201]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:11.201]                         if (muffled) 
[13:36:11.201]                           invokeRestart("muffleWarning")
[13:36:11.201]                       }
[13:36:11.201]                       else if (inherits(cond, "condition")) {
[13:36:11.201]                         if (!is.null(pattern)) {
[13:36:11.201]                           computeRestarts <- base::computeRestarts
[13:36:11.201]                           grepl <- base::grepl
[13:36:11.201]                           restarts <- computeRestarts(cond)
[13:36:11.201]                           for (restart in restarts) {
[13:36:11.201]                             name <- restart$name
[13:36:11.201]                             if (is.null(name)) 
[13:36:11.201]                               next
[13:36:11.201]                             if (!grepl(pattern, name)) 
[13:36:11.201]                               next
[13:36:11.201]                             invokeRestart(restart)
[13:36:11.201]                             muffled <- TRUE
[13:36:11.201]                             break
[13:36:11.201]                           }
[13:36:11.201]                         }
[13:36:11.201]                       }
[13:36:11.201]                       invisible(muffled)
[13:36:11.201]                     }
[13:36:11.201]                     muffleCondition(cond, pattern = "^muffle")
[13:36:11.201]                   }
[13:36:11.201]                 }
[13:36:11.201]             }
[13:36:11.201]         }))
[13:36:11.201]     }, error = function(ex) {
[13:36:11.201]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:11.201]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:11.201]                 ...future.rng), started = ...future.startTime, 
[13:36:11.201]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:11.201]             version = "1.8"), class = "FutureResult")
[13:36:11.201]     }, finally = {
[13:36:11.201]         if (!identical(...future.workdir, getwd())) 
[13:36:11.201]             setwd(...future.workdir)
[13:36:11.201]         {
[13:36:11.201]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:11.201]                 ...future.oldOptions$nwarnings <- NULL
[13:36:11.201]             }
[13:36:11.201]             base::options(...future.oldOptions)
[13:36:11.201]             if (.Platform$OS.type == "windows") {
[13:36:11.201]                 old_names <- names(...future.oldEnvVars)
[13:36:11.201]                 envs <- base::Sys.getenv()
[13:36:11.201]                 names <- names(envs)
[13:36:11.201]                 common <- intersect(names, old_names)
[13:36:11.201]                 added <- setdiff(names, old_names)
[13:36:11.201]                 removed <- setdiff(old_names, names)
[13:36:11.201]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:11.201]                   envs[common]]
[13:36:11.201]                 NAMES <- toupper(changed)
[13:36:11.201]                 args <- list()
[13:36:11.201]                 for (kk in seq_along(NAMES)) {
[13:36:11.201]                   name <- changed[[kk]]
[13:36:11.201]                   NAME <- NAMES[[kk]]
[13:36:11.201]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:11.201]                     next
[13:36:11.201]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:11.201]                 }
[13:36:11.201]                 NAMES <- toupper(added)
[13:36:11.201]                 for (kk in seq_along(NAMES)) {
[13:36:11.201]                   name <- added[[kk]]
[13:36:11.201]                   NAME <- NAMES[[kk]]
[13:36:11.201]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:11.201]                     next
[13:36:11.201]                   args[[name]] <- ""
[13:36:11.201]                 }
[13:36:11.201]                 NAMES <- toupper(removed)
[13:36:11.201]                 for (kk in seq_along(NAMES)) {
[13:36:11.201]                   name <- removed[[kk]]
[13:36:11.201]                   NAME <- NAMES[[kk]]
[13:36:11.201]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:11.201]                     next
[13:36:11.201]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:11.201]                 }
[13:36:11.201]                 if (length(args) > 0) 
[13:36:11.201]                   base::do.call(base::Sys.setenv, args = args)
[13:36:11.201]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:11.201]             }
[13:36:11.201]             else {
[13:36:11.201]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:11.201]             }
[13:36:11.201]             {
[13:36:11.201]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:11.201]                   0L) {
[13:36:11.201]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:11.201]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:11.201]                   base::options(opts)
[13:36:11.201]                 }
[13:36:11.201]                 {
[13:36:11.201]                   {
[13:36:11.201]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:11.201]                     NULL
[13:36:11.201]                   }
[13:36:11.201]                   options(future.plan = NULL)
[13:36:11.201]                   if (is.na(NA_character_)) 
[13:36:11.201]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:11.201]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:11.201]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:11.201]                     .init = FALSE)
[13:36:11.201]                 }
[13:36:11.201]             }
[13:36:11.201]         }
[13:36:11.201]     })
[13:36:11.201]     if (TRUE) {
[13:36:11.201]         base::sink(type = "output", split = FALSE)
[13:36:11.201]         if (TRUE) {
[13:36:11.201]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:11.201]         }
[13:36:11.201]         else {
[13:36:11.201]             ...future.result["stdout"] <- base::list(NULL)
[13:36:11.201]         }
[13:36:11.201]         base::close(...future.stdout)
[13:36:11.201]         ...future.stdout <- NULL
[13:36:11.201]     }
[13:36:11.201]     ...future.result$conditions <- ...future.conditions
[13:36:11.201]     ...future.result$finished <- base::Sys.time()
[13:36:11.201]     ...future.result
[13:36:11.201] }
[13:36:11.203] Exporting 1 global objects (112 bytes) to cluster node #1 ...
[13:36:11.204] Exporting ‘future.call.arguments’ (112 bytes) to cluster node #1 ...
[13:36:11.204] Exporting ‘future.call.arguments’ (112 bytes) to cluster node #1 ... DONE
[13:36:11.204] Exporting 1 global objects (112 bytes) to cluster node #1 ... DONE
[13:36:11.205] MultisessionFuture started
[13:36:11.205] - Launch lazy future ... done
[13:36:11.205] run() for ‘MultisessionFuture’ ... done
[13:36:11.205] result() for ClusterFuture ...
[13:36:11.205] receiveMessageFromWorker() for ClusterFuture ...
[13:36:11.205] - Validating connection of MultisessionFuture
[13:36:11.206] - received message: FutureResult
[13:36:11.207] - Received FutureResult
[13:36:11.207] - Erased future from FutureRegistry
[13:36:11.207] result() for ClusterFuture ...
[13:36:11.207] - result already collected: FutureResult
[13:36:11.207] result() for ClusterFuture ... done
[13:36:11.207] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:11.207] result() for ClusterFuture ... done
[13:36:11.207] result() for ClusterFuture ...
[13:36:11.207] - result already collected: FutureResult
[13:36:11.207] result() for ClusterFuture ... done
[1] 6
** Sum function 'F' with plan('multisession') ...
function (x, y) 
{
    message("Using '...' in a formula")
    fcn <- function(x, y) {
        z = ~list(...)
        sum(x, y)
    }
    f <- future(fcn(x, y))
    y <- value(f)
    y
}
<bytecode: 0x558320f9e9b0>
Using '...' in a formula
[13:36:11.208] getGlobalsAndPackages() ...
[13:36:11.208] Searching for globals...
[13:36:11.210] - globals found: [9] ‘fcn’, ‘x’, ‘y’, ‘{’, ‘=’, ‘~’, ‘list’, ‘...’, ‘sum’
[13:36:11.211] Searching for globals ... DONE
[13:36:11.211] Resolving globals: FALSE
[13:36:11.211] Tweak future expression to call with '...' arguments ...
[13:36:11.211] The total size of the 3 globals is 4.18 KiB (4280 bytes)
[13:36:11.212] The total size of the 3 globals exported for future expression (‘fcn(x, y)’) is 4.18 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘fcn’ (4.07 KiB of class ‘function’), ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[13:36:11.212] - globals: [3] ‘fcn’, ‘x’, ‘y’
[13:36:11.212] 
[13:36:11.212] getGlobalsAndPackages() ... DONE
[13:36:11.212] run() for ‘Future’ ...
[13:36:11.212] - state: ‘created’
[13:36:11.212] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:11.226] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:11.226] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:11.226]   - Field: ‘node’
[13:36:11.226]   - Field: ‘label’
[13:36:11.226]   - Field: ‘local’
[13:36:11.227]   - Field: ‘owner’
[13:36:11.227]   - Field: ‘envir’
[13:36:11.227]   - Field: ‘workers’
[13:36:11.227]   - Field: ‘packages’
[13:36:11.227]   - Field: ‘gc’
[13:36:11.227]   - Field: ‘conditions’
[13:36:11.227]   - Field: ‘persistent’
[13:36:11.227]   - Field: ‘expr’
[13:36:11.227]   - Field: ‘uuid’
[13:36:11.227]   - Field: ‘seed’
[13:36:11.227]   - Field: ‘version’
[13:36:11.228]   - Field: ‘result’
[13:36:11.228]   - Field: ‘asynchronous’
[13:36:11.228]   - Field: ‘calls’
[13:36:11.228]   - Field: ‘globals’
[13:36:11.228]   - Field: ‘stdout’
[13:36:11.228]   - Field: ‘earlySignal’
[13:36:11.228]   - Field: ‘lazy’
[13:36:11.228]   - Field: ‘state’
[13:36:11.228] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:11.228] - Launch lazy future ...
[13:36:11.229] Packages needed by the future expression (n = 0): <none>
[13:36:11.229] Packages needed by future strategies (n = 0): <none>
[13:36:11.229] {
[13:36:11.229]     {
[13:36:11.229]         {
[13:36:11.229]             ...future.startTime <- base::Sys.time()
[13:36:11.229]             {
[13:36:11.229]                 {
[13:36:11.229]                   {
[13:36:11.229]                     {
[13:36:11.229]                       base::local({
[13:36:11.229]                         has_future <- base::requireNamespace("future", 
[13:36:11.229]                           quietly = TRUE)
[13:36:11.229]                         if (has_future) {
[13:36:11.229]                           ns <- base::getNamespace("future")
[13:36:11.229]                           version <- ns[[".package"]][["version"]]
[13:36:11.229]                           if (is.null(version)) 
[13:36:11.229]                             version <- utils::packageVersion("future")
[13:36:11.229]                         }
[13:36:11.229]                         else {
[13:36:11.229]                           version <- NULL
[13:36:11.229]                         }
[13:36:11.229]                         if (!has_future || version < "1.8.0") {
[13:36:11.229]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:11.229]                             "", base::R.version$version.string), 
[13:36:11.229]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:11.229]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:11.229]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:11.229]                               "release", "version")], collapse = " "), 
[13:36:11.229]                             hostname = base::Sys.info()[["nodename"]])
[13:36:11.229]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:11.229]                             info)
[13:36:11.229]                           info <- base::paste(info, collapse = "; ")
[13:36:11.229]                           if (!has_future) {
[13:36:11.229]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:11.229]                               info)
[13:36:11.229]                           }
[13:36:11.229]                           else {
[13:36:11.229]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:11.229]                               info, version)
[13:36:11.229]                           }
[13:36:11.229]                           base::stop(msg)
[13:36:11.229]                         }
[13:36:11.229]                       })
[13:36:11.229]                     }
[13:36:11.229]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:11.229]                     base::options(mc.cores = 1L)
[13:36:11.229]                   }
[13:36:11.229]                   ...future.strategy.old <- future::plan("list")
[13:36:11.229]                   options(future.plan = NULL)
[13:36:11.229]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:11.229]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:11.229]                 }
[13:36:11.229]                 ...future.workdir <- getwd()
[13:36:11.229]             }
[13:36:11.229]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:11.229]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:11.229]         }
[13:36:11.229]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:11.229]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:11.229]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:11.229]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:11.229]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:11.229]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:11.229]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:11.229]             base::names(...future.oldOptions))
[13:36:11.229]     }
[13:36:11.229]     if (FALSE) {
[13:36:11.229]     }
[13:36:11.229]     else {
[13:36:11.229]         if (TRUE) {
[13:36:11.229]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:11.229]                 open = "w")
[13:36:11.229]         }
[13:36:11.229]         else {
[13:36:11.229]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:11.229]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:11.229]         }
[13:36:11.229]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:11.229]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:11.229]             base::sink(type = "output", split = FALSE)
[13:36:11.229]             base::close(...future.stdout)
[13:36:11.229]         }, add = TRUE)
[13:36:11.229]     }
[13:36:11.229]     ...future.frame <- base::sys.nframe()
[13:36:11.229]     ...future.conditions <- base::list()
[13:36:11.229]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:11.229]     if (FALSE) {
[13:36:11.229]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:11.229]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:11.229]     }
[13:36:11.229]     ...future.result <- base::tryCatch({
[13:36:11.229]         base::withCallingHandlers({
[13:36:11.229]             ...future.value <- base::withVisible(base::local({
[13:36:11.229]                 ...future.makeSendCondition <- base::local({
[13:36:11.229]                   sendCondition <- NULL
[13:36:11.229]                   function(frame = 1L) {
[13:36:11.229]                     if (is.function(sendCondition)) 
[13:36:11.229]                       return(sendCondition)
[13:36:11.229]                     ns <- getNamespace("parallel")
[13:36:11.229]                     if (exists("sendData", mode = "function", 
[13:36:11.229]                       envir = ns)) {
[13:36:11.229]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:11.229]                         envir = ns)
[13:36:11.229]                       envir <- sys.frame(frame)
[13:36:11.229]                       master <- NULL
[13:36:11.229]                       while (!identical(envir, .GlobalEnv) && 
[13:36:11.229]                         !identical(envir, emptyenv())) {
[13:36:11.229]                         if (exists("master", mode = "list", envir = envir, 
[13:36:11.229]                           inherits = FALSE)) {
[13:36:11.229]                           master <- get("master", mode = "list", 
[13:36:11.229]                             envir = envir, inherits = FALSE)
[13:36:11.229]                           if (inherits(master, c("SOCKnode", 
[13:36:11.229]                             "SOCK0node"))) {
[13:36:11.229]                             sendCondition <<- function(cond) {
[13:36:11.229]                               data <- list(type = "VALUE", value = cond, 
[13:36:11.229]                                 success = TRUE)
[13:36:11.229]                               parallel_sendData(master, data)
[13:36:11.229]                             }
[13:36:11.229]                             return(sendCondition)
[13:36:11.229]                           }
[13:36:11.229]                         }
[13:36:11.229]                         frame <- frame + 1L
[13:36:11.229]                         envir <- sys.frame(frame)
[13:36:11.229]                       }
[13:36:11.229]                     }
[13:36:11.229]                     sendCondition <<- function(cond) NULL
[13:36:11.229]                   }
[13:36:11.229]                 })
[13:36:11.229]                 withCallingHandlers({
[13:36:11.229]                   fcn(x, y)
[13:36:11.229]                 }, immediateCondition = function(cond) {
[13:36:11.229]                   sendCondition <- ...future.makeSendCondition()
[13:36:11.229]                   sendCondition(cond)
[13:36:11.229]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:11.229]                   {
[13:36:11.229]                     inherits <- base::inherits
[13:36:11.229]                     invokeRestart <- base::invokeRestart
[13:36:11.229]                     is.null <- base::is.null
[13:36:11.229]                     muffled <- FALSE
[13:36:11.229]                     if (inherits(cond, "message")) {
[13:36:11.229]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:11.229]                       if (muffled) 
[13:36:11.229]                         invokeRestart("muffleMessage")
[13:36:11.229]                     }
[13:36:11.229]                     else if (inherits(cond, "warning")) {
[13:36:11.229]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:11.229]                       if (muffled) 
[13:36:11.229]                         invokeRestart("muffleWarning")
[13:36:11.229]                     }
[13:36:11.229]                     else if (inherits(cond, "condition")) {
[13:36:11.229]                       if (!is.null(pattern)) {
[13:36:11.229]                         computeRestarts <- base::computeRestarts
[13:36:11.229]                         grepl <- base::grepl
[13:36:11.229]                         restarts <- computeRestarts(cond)
[13:36:11.229]                         for (restart in restarts) {
[13:36:11.229]                           name <- restart$name
[13:36:11.229]                           if (is.null(name)) 
[13:36:11.229]                             next
[13:36:11.229]                           if (!grepl(pattern, name)) 
[13:36:11.229]                             next
[13:36:11.229]                           invokeRestart(restart)
[13:36:11.229]                           muffled <- TRUE
[13:36:11.229]                           break
[13:36:11.229]                         }
[13:36:11.229]                       }
[13:36:11.229]                     }
[13:36:11.229]                     invisible(muffled)
[13:36:11.229]                   }
[13:36:11.229]                   muffleCondition(cond)
[13:36:11.229]                 })
[13:36:11.229]             }))
[13:36:11.229]             future::FutureResult(value = ...future.value$value, 
[13:36:11.229]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:11.229]                   ...future.rng), globalenv = if (FALSE) 
[13:36:11.229]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:11.229]                     ...future.globalenv.names))
[13:36:11.229]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:11.229]         }, condition = base::local({
[13:36:11.229]             c <- base::c
[13:36:11.229]             inherits <- base::inherits
[13:36:11.229]             invokeRestart <- base::invokeRestart
[13:36:11.229]             length <- base::length
[13:36:11.229]             list <- base::list
[13:36:11.229]             seq.int <- base::seq.int
[13:36:11.229]             signalCondition <- base::signalCondition
[13:36:11.229]             sys.calls <- base::sys.calls
[13:36:11.229]             `[[` <- base::`[[`
[13:36:11.229]             `+` <- base::`+`
[13:36:11.229]             `<<-` <- base::`<<-`
[13:36:11.229]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:11.229]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:11.229]                   3L)]
[13:36:11.229]             }
[13:36:11.229]             function(cond) {
[13:36:11.229]                 is_error <- inherits(cond, "error")
[13:36:11.229]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:11.229]                   NULL)
[13:36:11.229]                 if (is_error) {
[13:36:11.229]                   sessionInformation <- function() {
[13:36:11.229]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:11.229]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:11.229]                       search = base::search(), system = base::Sys.info())
[13:36:11.229]                   }
[13:36:11.229]                   ...future.conditions[[length(...future.conditions) + 
[13:36:11.229]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:11.229]                     cond$call), session = sessionInformation(), 
[13:36:11.229]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:11.229]                   signalCondition(cond)
[13:36:11.229]                 }
[13:36:11.229]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:11.229]                 "immediateCondition"))) {
[13:36:11.229]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:11.229]                   ...future.conditions[[length(...future.conditions) + 
[13:36:11.229]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:11.229]                   if (TRUE && !signal) {
[13:36:11.229]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:11.229]                     {
[13:36:11.229]                       inherits <- base::inherits
[13:36:11.229]                       invokeRestart <- base::invokeRestart
[13:36:11.229]                       is.null <- base::is.null
[13:36:11.229]                       muffled <- FALSE
[13:36:11.229]                       if (inherits(cond, "message")) {
[13:36:11.229]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:11.229]                         if (muffled) 
[13:36:11.229]                           invokeRestart("muffleMessage")
[13:36:11.229]                       }
[13:36:11.229]                       else if (inherits(cond, "warning")) {
[13:36:11.229]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:11.229]                         if (muffled) 
[13:36:11.229]                           invokeRestart("muffleWarning")
[13:36:11.229]                       }
[13:36:11.229]                       else if (inherits(cond, "condition")) {
[13:36:11.229]                         if (!is.null(pattern)) {
[13:36:11.229]                           computeRestarts <- base::computeRestarts
[13:36:11.229]                           grepl <- base::grepl
[13:36:11.229]                           restarts <- computeRestarts(cond)
[13:36:11.229]                           for (restart in restarts) {
[13:36:11.229]                             name <- restart$name
[13:36:11.229]                             if (is.null(name)) 
[13:36:11.229]                               next
[13:36:11.229]                             if (!grepl(pattern, name)) 
[13:36:11.229]                               next
[13:36:11.229]                             invokeRestart(restart)
[13:36:11.229]                             muffled <- TRUE
[13:36:11.229]                             break
[13:36:11.229]                           }
[13:36:11.229]                         }
[13:36:11.229]                       }
[13:36:11.229]                       invisible(muffled)
[13:36:11.229]                     }
[13:36:11.229]                     muffleCondition(cond, pattern = "^muffle")
[13:36:11.229]                   }
[13:36:11.229]                 }
[13:36:11.229]                 else {
[13:36:11.229]                   if (TRUE) {
[13:36:11.229]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:11.229]                     {
[13:36:11.229]                       inherits <- base::inherits
[13:36:11.229]                       invokeRestart <- base::invokeRestart
[13:36:11.229]                       is.null <- base::is.null
[13:36:11.229]                       muffled <- FALSE
[13:36:11.229]                       if (inherits(cond, "message")) {
[13:36:11.229]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:11.229]                         if (muffled) 
[13:36:11.229]                           invokeRestart("muffleMessage")
[13:36:11.229]                       }
[13:36:11.229]                       else if (inherits(cond, "warning")) {
[13:36:11.229]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:11.229]                         if (muffled) 
[13:36:11.229]                           invokeRestart("muffleWarning")
[13:36:11.229]                       }
[13:36:11.229]                       else if (inherits(cond, "condition")) {
[13:36:11.229]                         if (!is.null(pattern)) {
[13:36:11.229]                           computeRestarts <- base::computeRestarts
[13:36:11.229]                           grepl <- base::grepl
[13:36:11.229]                           restarts <- computeRestarts(cond)
[13:36:11.229]                           for (restart in restarts) {
[13:36:11.229]                             name <- restart$name
[13:36:11.229]                             if (is.null(name)) 
[13:36:11.229]                               next
[13:36:11.229]                             if (!grepl(pattern, name)) 
[13:36:11.229]                               next
[13:36:11.229]                             invokeRestart(restart)
[13:36:11.229]                             muffled <- TRUE
[13:36:11.229]                             break
[13:36:11.229]                           }
[13:36:11.229]                         }
[13:36:11.229]                       }
[13:36:11.229]                       invisible(muffled)
[13:36:11.229]                     }
[13:36:11.229]                     muffleCondition(cond, pattern = "^muffle")
[13:36:11.229]                   }
[13:36:11.229]                 }
[13:36:11.229]             }
[13:36:11.229]         }))
[13:36:11.229]     }, error = function(ex) {
[13:36:11.229]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:11.229]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:11.229]                 ...future.rng), started = ...future.startTime, 
[13:36:11.229]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:11.229]             version = "1.8"), class = "FutureResult")
[13:36:11.229]     }, finally = {
[13:36:11.229]         if (!identical(...future.workdir, getwd())) 
[13:36:11.229]             setwd(...future.workdir)
[13:36:11.229]         {
[13:36:11.229]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:11.229]                 ...future.oldOptions$nwarnings <- NULL
[13:36:11.229]             }
[13:36:11.229]             base::options(...future.oldOptions)
[13:36:11.229]             if (.Platform$OS.type == "windows") {
[13:36:11.229]                 old_names <- names(...future.oldEnvVars)
[13:36:11.229]                 envs <- base::Sys.getenv()
[13:36:11.229]                 names <- names(envs)
[13:36:11.229]                 common <- intersect(names, old_names)
[13:36:11.229]                 added <- setdiff(names, old_names)
[13:36:11.229]                 removed <- setdiff(old_names, names)
[13:36:11.229]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:11.229]                   envs[common]]
[13:36:11.229]                 NAMES <- toupper(changed)
[13:36:11.229]                 args <- list()
[13:36:11.229]                 for (kk in seq_along(NAMES)) {
[13:36:11.229]                   name <- changed[[kk]]
[13:36:11.229]                   NAME <- NAMES[[kk]]
[13:36:11.229]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:11.229]                     next
[13:36:11.229]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:11.229]                 }
[13:36:11.229]                 NAMES <- toupper(added)
[13:36:11.229]                 for (kk in seq_along(NAMES)) {
[13:36:11.229]                   name <- added[[kk]]
[13:36:11.229]                   NAME <- NAMES[[kk]]
[13:36:11.229]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:11.229]                     next
[13:36:11.229]                   args[[name]] <- ""
[13:36:11.229]                 }
[13:36:11.229]                 NAMES <- toupper(removed)
[13:36:11.229]                 for (kk in seq_along(NAMES)) {
[13:36:11.229]                   name <- removed[[kk]]
[13:36:11.229]                   NAME <- NAMES[[kk]]
[13:36:11.229]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:11.229]                     next
[13:36:11.229]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:11.229]                 }
[13:36:11.229]                 if (length(args) > 0) 
[13:36:11.229]                   base::do.call(base::Sys.setenv, args = args)
[13:36:11.229]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:11.229]             }
[13:36:11.229]             else {
[13:36:11.229]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:11.229]             }
[13:36:11.229]             {
[13:36:11.229]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:11.229]                   0L) {
[13:36:11.229]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:11.229]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:11.229]                   base::options(opts)
[13:36:11.229]                 }
[13:36:11.229]                 {
[13:36:11.229]                   {
[13:36:11.229]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:11.229]                     NULL
[13:36:11.229]                   }
[13:36:11.229]                   options(future.plan = NULL)
[13:36:11.229]                   if (is.na(NA_character_)) 
[13:36:11.229]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:11.229]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:11.229]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:11.229]                     .init = FALSE)
[13:36:11.229]                 }
[13:36:11.229]             }
[13:36:11.229]         }
[13:36:11.229]     })
[13:36:11.229]     if (TRUE) {
[13:36:11.229]         base::sink(type = "output", split = FALSE)
[13:36:11.229]         if (TRUE) {
[13:36:11.229]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:11.229]         }
[13:36:11.229]         else {
[13:36:11.229]             ...future.result["stdout"] <- base::list(NULL)
[13:36:11.229]         }
[13:36:11.229]         base::close(...future.stdout)
[13:36:11.229]         ...future.stdout <- NULL
[13:36:11.229]     }
[13:36:11.229]     ...future.result$conditions <- ...future.conditions
[13:36:11.229]     ...future.result$finished <- base::Sys.time()
[13:36:11.229]     ...future.result
[13:36:11.229] }
[13:36:11.232] Exporting 3 global objects (4.18 KiB) to cluster node #1 ...
[13:36:11.232] Exporting ‘fcn’ (4.07 KiB) to cluster node #1 ...
[13:36:11.232] Exporting ‘fcn’ (4.07 KiB) to cluster node #1 ... DONE
[13:36:11.232] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[13:36:11.233] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[13:36:11.233] Exporting ‘y’ (56 bytes) to cluster node #1 ...
[13:36:11.233] Exporting ‘y’ (56 bytes) to cluster node #1 ... DONE
[13:36:11.233] Exporting 3 global objects (4.18 KiB) to cluster node #1 ... DONE
[13:36:11.234] MultisessionFuture started
[13:36:11.234] - Launch lazy future ... done
[13:36:11.234] run() for ‘MultisessionFuture’ ... done
[13:36:11.234] result() for ClusterFuture ...
[13:36:11.234] receiveMessageFromWorker() for ClusterFuture ...
[13:36:11.235] - Validating connection of MultisessionFuture
[13:36:11.235] - received message: FutureResult
[13:36:11.236] - Received FutureResult
[13:36:11.236] - Erased future from FutureRegistry
[13:36:11.236] result() for ClusterFuture ...
[13:36:11.236] - result already collected: FutureResult
[13:36:11.236] result() for ClusterFuture ... done
[13:36:11.236] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:11.236] result() for ClusterFuture ... done
[13:36:11.236] result() for ClusterFuture ...
[13:36:11.236] - result already collected: FutureResult
[13:36:11.236] result() for ClusterFuture ... done
[1] 6
Testing with 2 cores ... DONE
> 
> message("*** Global argument '...' ... DONE")
*** Global argument '...' ... DONE
> 
> source("incl/end.R")
[13:36:11.237] plan(): Setting new future strategy stack:
[13:36:11.237] List of future strategies:
[13:36:11.237] 1. FutureStrategy:
[13:36:11.237]    - args: function (..., envir = parent.frame())
[13:36:11.237]    - tweaked: FALSE
[13:36:11.237]    - call: future::plan(oplan)
[13:36:11.238] plan(): nbrOfWorkers() = 1
> 
