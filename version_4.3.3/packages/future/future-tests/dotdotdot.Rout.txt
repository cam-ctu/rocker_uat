
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:20:17.212] plan(): Setting new future strategy stack:
[16:20:17.212] List of future strategies:
[16:20:17.212] 1. sequential:
[16:20:17.212]    - args: function (..., envir = parent.frame())
[16:20:17.212]    - tweaked: FALSE
[16:20:17.212]    - call: future::plan("sequential")
[16:20:17.226] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   message("*** Global argument '...' ...")
+ 
+   sum_fcns <- list()
+ 
+   sum_fcns$A <- function(x, ...) {
+     message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+     y %<-% { sum(x, ...) }
+     y
+   }
+ 
+ 
+   sum_fcns$B <- function(x, ...) {
+     sumt <- function(x) {
+       message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+       y %<-% { sum(x, ...) }
+       y
+     }
+     sumt(x)
+   }
+ 
+   sum_fcns$C <- function(x, y) {
+     message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+     y %<-% { sum(x, y) }
+     y
+   }
+ 
+   sum_fcns$D <- function(x, y) {
+     message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+     y %<-% { sum(x, y, ...) }
+     y
+   }
+ 
+   ## Issue/PR #400: Emulate how '...' may be used by the 'rlang' package
+   sum_fcns$E <- function(...) {
+     message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+ 
+     ## Grab '...' into a Globals object
+     globals <- globals::globalsByName("...", envir=environment())
+ 
+     ## Evaluate an expression with '...' in an environment that does not
+     ## have an '...' object - hence the parent.frame().  This will produce
+     ## an error unless we pass 'globals' which contains '...'
+     f <- future({
+       fcn <- function() sum(...)
+       fcn()
+     }, envir = parent.frame(), globals = globals)
+     y <- value(f)
+     y
+   }
+ 
+   ## Issue: https://github.com/HenrikBengtsson/globals/issues/72
+   sum_fcns$F <- function(x, y) {
+     message("Using '...' in a formula")
+ 
+     fcn <- function(x, y) {
+       z = ~ list(...)
+       sum(x, y)
+     }
+     
+     f <- future(fcn(x, y))
+     y <- value(f)
+     y
+   }
+ 
+ 
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("- plan('%s') ...", strategy))
+     plan(strategy, substitute = FALSE)
+ 
+     for (name in names(sum_fcns)) {
+       message(sprintf("** Sum function '%s' with plan('%s') ...", name, strategy))
+       sum_fcn <- sum_fcns[[name]]
+       print(sum_fcn)
+       y <- try(sum_fcn(1:2, 3))
+       print(y)
+       if (name %in% c("D")) {
+         stopifnot(inherits(y, "try-error"))
+       } else {
+         stopifnot(y == 6)
+       }
+     }
+   }
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
*** Global argument '...' ...
- plan('sequential') ...
[16:20:17.274] plan(): Setting new future strategy stack:
[16:20:17.274] List of future strategies:
[16:20:17.274] 1. sequential:
[16:20:17.274]    - args: function (..., envir = parent.frame())
[16:20:17.274]    - tweaked: FALSE
[16:20:17.274]    - call: plan(strategy, substitute = FALSE)
[16:20:17.284] plan(): nbrOfWorkers() = 1
** Sum function 'A' with plan('sequential') ...
function (x, ...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, ...)
    }
    y
}
<bytecode: 0x55ed022c4198>
Arguments '...' exists: TRUE
[16:20:17.286] getGlobalsAndPackages() ...
[16:20:17.286] Searching for globals...
[16:20:17.295] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[16:20:17.295] Searching for globals ... DONE
[16:20:17.295] Resolving globals: FALSE
[16:20:17.295] Tweak future expression to call with '...' arguments ...
[16:20:17.296] {
[16:20:17.296]     do.call(function(...) {
[16:20:17.296]         sum(x, ...)
[16:20:17.296]     }, args = future.call.arguments)
[16:20:17.296] }
[16:20:17.296] Tweak future expression to call with '...' arguments ... DONE
[16:20:17.297] The total size of the 2 globals is 112 bytes (112 bytes)
[16:20:17.298] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[16:20:17.298] - globals: [2] ‘x’, ‘future.call.arguments’
[16:20:17.298] 
[16:20:17.298] getGlobalsAndPackages() ... DONE
[16:20:17.299] run() for ‘Future’ ...
[16:20:17.299] - state: ‘created’
[16:20:17.299] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:17.299] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:17.299] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:17.300]   - Field: ‘label’
[16:20:17.300]   - Field: ‘local’
[16:20:17.300]   - Field: ‘owner’
[16:20:17.300]   - Field: ‘envir’
[16:20:17.300]   - Field: ‘packages’
[16:20:17.300]   - Field: ‘gc’
[16:20:17.300]   - Field: ‘conditions’
[16:20:17.300]   - Field: ‘expr’
[16:20:17.300]   - Field: ‘uuid’
[16:20:17.300]   - Field: ‘seed’
[16:20:17.301]   - Field: ‘version’
[16:20:17.301]   - Field: ‘result’
[16:20:17.301]   - Field: ‘asynchronous’
[16:20:17.301]   - Field: ‘calls’
[16:20:17.301]   - Field: ‘globals’
[16:20:17.301]   - Field: ‘stdout’
[16:20:17.301]   - Field: ‘earlySignal’
[16:20:17.301]   - Field: ‘lazy’
[16:20:17.301]   - Field: ‘state’
[16:20:17.301] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:17.301] - Launch lazy future ...
[16:20:17.302] Packages needed by the future expression (n = 0): <none>
[16:20:17.302] Packages needed by future strategies (n = 0): <none>
[16:20:17.303] {
[16:20:17.303]     {
[16:20:17.303]         {
[16:20:17.303]             ...future.startTime <- base::Sys.time()
[16:20:17.303]             {
[16:20:17.303]                 {
[16:20:17.303]                   {
[16:20:17.303]                     base::local({
[16:20:17.303]                       has_future <- base::requireNamespace("future", 
[16:20:17.303]                         quietly = TRUE)
[16:20:17.303]                       if (has_future) {
[16:20:17.303]                         ns <- base::getNamespace("future")
[16:20:17.303]                         version <- ns[[".package"]][["version"]]
[16:20:17.303]                         if (is.null(version)) 
[16:20:17.303]                           version <- utils::packageVersion("future")
[16:20:17.303]                       }
[16:20:17.303]                       else {
[16:20:17.303]                         version <- NULL
[16:20:17.303]                       }
[16:20:17.303]                       if (!has_future || version < "1.8.0") {
[16:20:17.303]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:17.303]                           "", base::R.version$version.string), 
[16:20:17.303]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:17.303]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:17.303]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:17.303]                             "release", "version")], collapse = " "), 
[16:20:17.303]                           hostname = base::Sys.info()[["nodename"]])
[16:20:17.303]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:17.303]                           info)
[16:20:17.303]                         info <- base::paste(info, collapse = "; ")
[16:20:17.303]                         if (!has_future) {
[16:20:17.303]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:17.303]                             info)
[16:20:17.303]                         }
[16:20:17.303]                         else {
[16:20:17.303]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:17.303]                             info, version)
[16:20:17.303]                         }
[16:20:17.303]                         base::stop(msg)
[16:20:17.303]                       }
[16:20:17.303]                     })
[16:20:17.303]                   }
[16:20:17.303]                   ...future.strategy.old <- future::plan("list")
[16:20:17.303]                   options(future.plan = NULL)
[16:20:17.303]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:17.303]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:17.303]                 }
[16:20:17.303]                 ...future.workdir <- getwd()
[16:20:17.303]             }
[16:20:17.303]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:17.303]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:17.303]         }
[16:20:17.303]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:17.303]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:17.303]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:17.303]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:17.303]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:17.303]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:17.303]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:17.303]             base::names(...future.oldOptions))
[16:20:17.303]     }
[16:20:17.303]     if (FALSE) {
[16:20:17.303]     }
[16:20:17.303]     else {
[16:20:17.303]         if (TRUE) {
[16:20:17.303]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:17.303]                 open = "w")
[16:20:17.303]         }
[16:20:17.303]         else {
[16:20:17.303]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:17.303]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:17.303]         }
[16:20:17.303]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:17.303]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:17.303]             base::sink(type = "output", split = FALSE)
[16:20:17.303]             base::close(...future.stdout)
[16:20:17.303]         }, add = TRUE)
[16:20:17.303]     }
[16:20:17.303]     ...future.frame <- base::sys.nframe()
[16:20:17.303]     ...future.conditions <- base::list()
[16:20:17.303]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:17.303]     if (FALSE) {
[16:20:17.303]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:17.303]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:17.303]     }
[16:20:17.303]     ...future.result <- base::tryCatch({
[16:20:17.303]         base::withCallingHandlers({
[16:20:17.303]             ...future.value <- base::withVisible(base::local({
[16:20:17.303]                 do.call(function(...) {
[16:20:17.303]                   sum(x, ...)
[16:20:17.303]                 }, args = future.call.arguments)
[16:20:17.303]             }))
[16:20:17.303]             future::FutureResult(value = ...future.value$value, 
[16:20:17.303]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:17.303]                   ...future.rng), globalenv = if (FALSE) 
[16:20:17.303]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:17.303]                     ...future.globalenv.names))
[16:20:17.303]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:17.303]         }, condition = base::local({
[16:20:17.303]             c <- base::c
[16:20:17.303]             inherits <- base::inherits
[16:20:17.303]             invokeRestart <- base::invokeRestart
[16:20:17.303]             length <- base::length
[16:20:17.303]             list <- base::list
[16:20:17.303]             seq.int <- base::seq.int
[16:20:17.303]             signalCondition <- base::signalCondition
[16:20:17.303]             sys.calls <- base::sys.calls
[16:20:17.303]             `[[` <- base::`[[`
[16:20:17.303]             `+` <- base::`+`
[16:20:17.303]             `<<-` <- base::`<<-`
[16:20:17.303]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:17.303]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:17.303]                   3L)]
[16:20:17.303]             }
[16:20:17.303]             function(cond) {
[16:20:17.303]                 is_error <- inherits(cond, "error")
[16:20:17.303]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:17.303]                   NULL)
[16:20:17.303]                 if (is_error) {
[16:20:17.303]                   sessionInformation <- function() {
[16:20:17.303]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:17.303]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:17.303]                       search = base::search(), system = base::Sys.info())
[16:20:17.303]                   }
[16:20:17.303]                   ...future.conditions[[length(...future.conditions) + 
[16:20:17.303]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:17.303]                     cond$call), session = sessionInformation(), 
[16:20:17.303]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:17.303]                   signalCondition(cond)
[16:20:17.303]                 }
[16:20:17.303]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:17.303]                 "immediateCondition"))) {
[16:20:17.303]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:17.303]                   ...future.conditions[[length(...future.conditions) + 
[16:20:17.303]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:17.303]                   if (TRUE && !signal) {
[16:20:17.303]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:17.303]                     {
[16:20:17.303]                       inherits <- base::inherits
[16:20:17.303]                       invokeRestart <- base::invokeRestart
[16:20:17.303]                       is.null <- base::is.null
[16:20:17.303]                       muffled <- FALSE
[16:20:17.303]                       if (inherits(cond, "message")) {
[16:20:17.303]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:17.303]                         if (muffled) 
[16:20:17.303]                           invokeRestart("muffleMessage")
[16:20:17.303]                       }
[16:20:17.303]                       else if (inherits(cond, "warning")) {
[16:20:17.303]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:17.303]                         if (muffled) 
[16:20:17.303]                           invokeRestart("muffleWarning")
[16:20:17.303]                       }
[16:20:17.303]                       else if (inherits(cond, "condition")) {
[16:20:17.303]                         if (!is.null(pattern)) {
[16:20:17.303]                           computeRestarts <- base::computeRestarts
[16:20:17.303]                           grepl <- base::grepl
[16:20:17.303]                           restarts <- computeRestarts(cond)
[16:20:17.303]                           for (restart in restarts) {
[16:20:17.303]                             name <- restart$name
[16:20:17.303]                             if (is.null(name)) 
[16:20:17.303]                               next
[16:20:17.303]                             if (!grepl(pattern, name)) 
[16:20:17.303]                               next
[16:20:17.303]                             invokeRestart(restart)
[16:20:17.303]                             muffled <- TRUE
[16:20:17.303]                             break
[16:20:17.303]                           }
[16:20:17.303]                         }
[16:20:17.303]                       }
[16:20:17.303]                       invisible(muffled)
[16:20:17.303]                     }
[16:20:17.303]                     muffleCondition(cond, pattern = "^muffle")
[16:20:17.303]                   }
[16:20:17.303]                 }
[16:20:17.303]                 else {
[16:20:17.303]                   if (TRUE) {
[16:20:17.303]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:17.303]                     {
[16:20:17.303]                       inherits <- base::inherits
[16:20:17.303]                       invokeRestart <- base::invokeRestart
[16:20:17.303]                       is.null <- base::is.null
[16:20:17.303]                       muffled <- FALSE
[16:20:17.303]                       if (inherits(cond, "message")) {
[16:20:17.303]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:17.303]                         if (muffled) 
[16:20:17.303]                           invokeRestart("muffleMessage")
[16:20:17.303]                       }
[16:20:17.303]                       else if (inherits(cond, "warning")) {
[16:20:17.303]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:17.303]                         if (muffled) 
[16:20:17.303]                           invokeRestart("muffleWarning")
[16:20:17.303]                       }
[16:20:17.303]                       else if (inherits(cond, "condition")) {
[16:20:17.303]                         if (!is.null(pattern)) {
[16:20:17.303]                           computeRestarts <- base::computeRestarts
[16:20:17.303]                           grepl <- base::grepl
[16:20:17.303]                           restarts <- computeRestarts(cond)
[16:20:17.303]                           for (restart in restarts) {
[16:20:17.303]                             name <- restart$name
[16:20:17.303]                             if (is.null(name)) 
[16:20:17.303]                               next
[16:20:17.303]                             if (!grepl(pattern, name)) 
[16:20:17.303]                               next
[16:20:17.303]                             invokeRestart(restart)
[16:20:17.303]                             muffled <- TRUE
[16:20:17.303]                             break
[16:20:17.303]                           }
[16:20:17.303]                         }
[16:20:17.303]                       }
[16:20:17.303]                       invisible(muffled)
[16:20:17.303]                     }
[16:20:17.303]                     muffleCondition(cond, pattern = "^muffle")
[16:20:17.303]                   }
[16:20:17.303]                 }
[16:20:17.303]             }
[16:20:17.303]         }))
[16:20:17.303]     }, error = function(ex) {
[16:20:17.303]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:17.303]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:17.303]                 ...future.rng), started = ...future.startTime, 
[16:20:17.303]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:17.303]             version = "1.8"), class = "FutureResult")
[16:20:17.303]     }, finally = {
[16:20:17.303]         if (!identical(...future.workdir, getwd())) 
[16:20:17.303]             setwd(...future.workdir)
[16:20:17.303]         {
[16:20:17.303]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:17.303]                 ...future.oldOptions$nwarnings <- NULL
[16:20:17.303]             }
[16:20:17.303]             base::options(...future.oldOptions)
[16:20:17.303]             if (.Platform$OS.type == "windows") {
[16:20:17.303]                 old_names <- names(...future.oldEnvVars)
[16:20:17.303]                 envs <- base::Sys.getenv()
[16:20:17.303]                 names <- names(envs)
[16:20:17.303]                 common <- intersect(names, old_names)
[16:20:17.303]                 added <- setdiff(names, old_names)
[16:20:17.303]                 removed <- setdiff(old_names, names)
[16:20:17.303]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:17.303]                   envs[common]]
[16:20:17.303]                 NAMES <- toupper(changed)
[16:20:17.303]                 args <- list()
[16:20:17.303]                 for (kk in seq_along(NAMES)) {
[16:20:17.303]                   name <- changed[[kk]]
[16:20:17.303]                   NAME <- NAMES[[kk]]
[16:20:17.303]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:17.303]                     next
[16:20:17.303]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:17.303]                 }
[16:20:17.303]                 NAMES <- toupper(added)
[16:20:17.303]                 for (kk in seq_along(NAMES)) {
[16:20:17.303]                   name <- added[[kk]]
[16:20:17.303]                   NAME <- NAMES[[kk]]
[16:20:17.303]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:17.303]                     next
[16:20:17.303]                   args[[name]] <- ""
[16:20:17.303]                 }
[16:20:17.303]                 NAMES <- toupper(removed)
[16:20:17.303]                 for (kk in seq_along(NAMES)) {
[16:20:17.303]                   name <- removed[[kk]]
[16:20:17.303]                   NAME <- NAMES[[kk]]
[16:20:17.303]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:17.303]                     next
[16:20:17.303]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:17.303]                 }
[16:20:17.303]                 if (length(args) > 0) 
[16:20:17.303]                   base::do.call(base::Sys.setenv, args = args)
[16:20:17.303]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:17.303]             }
[16:20:17.303]             else {
[16:20:17.303]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:17.303]             }
[16:20:17.303]             {
[16:20:17.303]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:17.303]                   0L) {
[16:20:17.303]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:17.303]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:17.303]                   base::options(opts)
[16:20:17.303]                 }
[16:20:17.303]                 {
[16:20:17.303]                   {
[16:20:17.303]                     NULL
[16:20:17.303]                     RNGkind("Mersenne-Twister")
[16:20:17.303]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:17.303]                       inherits = FALSE)
[16:20:17.303]                   }
[16:20:17.303]                   options(future.plan = NULL)
[16:20:17.303]                   if (is.na(NA_character_)) 
[16:20:17.303]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:17.303]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:17.303]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:17.303]                     .init = FALSE)
[16:20:17.303]                 }
[16:20:17.303]             }
[16:20:17.303]         }
[16:20:17.303]     })
[16:20:17.303]     if (TRUE) {
[16:20:17.303]         base::sink(type = "output", split = FALSE)
[16:20:17.303]         if (TRUE) {
[16:20:17.303]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:17.303]         }
[16:20:17.303]         else {
[16:20:17.303]             ...future.result["stdout"] <- base::list(NULL)
[16:20:17.303]         }
[16:20:17.303]         base::close(...future.stdout)
[16:20:17.303]         ...future.stdout <- NULL
[16:20:17.303]     }
[16:20:17.303]     ...future.result$conditions <- ...future.conditions
[16:20:17.303]     ...future.result$finished <- base::Sys.time()
[16:20:17.303]     ...future.result
[16:20:17.303] }
[16:20:17.305] assign_globals() ...
[16:20:17.305] List of 2
[16:20:17.305]  $ x                    : int [1:2] 1 2
[16:20:17.305]  $ future.call.arguments:List of 1
[16:20:17.305]   ..$ : num 3
[16:20:17.305]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:20:17.305]  - attr(*, "where")=List of 2
[16:20:17.305]   ..$ x                    :<environment: R_EmptyEnv> 
[16:20:17.305]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[16:20:17.305]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:17.305]  - attr(*, "resolved")= logi FALSE
[16:20:17.305]  - attr(*, "total_size")= num 112
[16:20:17.305]  - attr(*, "already-done")= logi TRUE
[16:20:17.311] - copied ‘x’ to environment
[16:20:17.311] - copied ‘future.call.arguments’ to environment
[16:20:17.311] assign_globals() ... done
[16:20:17.311] plan(): Setting new future strategy stack:
[16:20:17.311] List of future strategies:
[16:20:17.311] 1. sequential:
[16:20:17.311]    - args: function (..., envir = parent.frame())
[16:20:17.311]    - tweaked: FALSE
[16:20:17.311]    - call: NULL
[16:20:17.312] plan(): nbrOfWorkers() = 1
[16:20:17.313] plan(): Setting new future strategy stack:
[16:20:17.313] List of future strategies:
[16:20:17.313] 1. sequential:
[16:20:17.313]    - args: function (..., envir = parent.frame())
[16:20:17.313]    - tweaked: FALSE
[16:20:17.313]    - call: plan(strategy, substitute = FALSE)
[16:20:17.313] plan(): nbrOfWorkers() = 1
[16:20:17.314] SequentialFuture started (and completed)
[16:20:17.314] - Launch lazy future ... done
[16:20:17.314] run() for ‘SequentialFuture’ ... done
[1] 6
** Sum function 'B' with plan('sequential') ...
function (x, ...) 
{
    sumt <- function(x) {
        message("Arguments '...' exists: ", exists("...", inherits = TRUE))
        y %<-% {
            sum(x, ...)
        }
        y
    }
    sumt(x)
}
<bytecode: 0x55ed0257bb98>
Arguments '...' exists: TRUE
[16:20:17.315] getGlobalsAndPackages() ...
[16:20:17.315] Searching for globals...
[16:20:17.316] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[16:20:17.317] Searching for globals ... DONE
[16:20:17.317] Resolving globals: FALSE
[16:20:17.317] Tweak future expression to call with '...' arguments ...
[16:20:17.317] {
[16:20:17.317]     do.call(function(...) {
[16:20:17.317]         sum(x, ...)
[16:20:17.317]     }, args = future.call.arguments)
[16:20:17.317] }
[16:20:17.317] Tweak future expression to call with '...' arguments ... DONE
[16:20:17.318] The total size of the 2 globals is 112 bytes (112 bytes)
[16:20:17.318] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[16:20:17.318] - globals: [2] ‘x’, ‘future.call.arguments’
[16:20:17.318] 
[16:20:17.318] getGlobalsAndPackages() ... DONE
[16:20:17.318] run() for ‘Future’ ...
[16:20:17.319] - state: ‘created’
[16:20:17.319] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:17.319] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:17.319] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:17.319]   - Field: ‘label’
[16:20:17.319]   - Field: ‘local’
[16:20:17.319]   - Field: ‘owner’
[16:20:17.319]   - Field: ‘envir’
[16:20:17.320]   - Field: ‘packages’
[16:20:17.320]   - Field: ‘gc’
[16:20:17.320]   - Field: ‘conditions’
[16:20:17.320]   - Field: ‘expr’
[16:20:17.320]   - Field: ‘uuid’
[16:20:17.320]   - Field: ‘seed’
[16:20:17.320]   - Field: ‘version’
[16:20:17.320]   - Field: ‘result’
[16:20:17.320]   - Field: ‘asynchronous’
[16:20:17.320]   - Field: ‘calls’
[16:20:17.320]   - Field: ‘globals’
[16:20:17.321]   - Field: ‘stdout’
[16:20:17.321]   - Field: ‘earlySignal’
[16:20:17.321]   - Field: ‘lazy’
[16:20:17.321]   - Field: ‘state’
[16:20:17.321] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:17.321] - Launch lazy future ...
[16:20:17.321] Packages needed by the future expression (n = 0): <none>
[16:20:17.321] Packages needed by future strategies (n = 0): <none>
[16:20:17.322] {
[16:20:17.322]     {
[16:20:17.322]         {
[16:20:17.322]             ...future.startTime <- base::Sys.time()
[16:20:17.322]             {
[16:20:17.322]                 {
[16:20:17.322]                   {
[16:20:17.322]                     base::local({
[16:20:17.322]                       has_future <- base::requireNamespace("future", 
[16:20:17.322]                         quietly = TRUE)
[16:20:17.322]                       if (has_future) {
[16:20:17.322]                         ns <- base::getNamespace("future")
[16:20:17.322]                         version <- ns[[".package"]][["version"]]
[16:20:17.322]                         if (is.null(version)) 
[16:20:17.322]                           version <- utils::packageVersion("future")
[16:20:17.322]                       }
[16:20:17.322]                       else {
[16:20:17.322]                         version <- NULL
[16:20:17.322]                       }
[16:20:17.322]                       if (!has_future || version < "1.8.0") {
[16:20:17.322]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:17.322]                           "", base::R.version$version.string), 
[16:20:17.322]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:17.322]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:17.322]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:17.322]                             "release", "version")], collapse = " "), 
[16:20:17.322]                           hostname = base::Sys.info()[["nodename"]])
[16:20:17.322]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:17.322]                           info)
[16:20:17.322]                         info <- base::paste(info, collapse = "; ")
[16:20:17.322]                         if (!has_future) {
[16:20:17.322]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:17.322]                             info)
[16:20:17.322]                         }
[16:20:17.322]                         else {
[16:20:17.322]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:17.322]                             info, version)
[16:20:17.322]                         }
[16:20:17.322]                         base::stop(msg)
[16:20:17.322]                       }
[16:20:17.322]                     })
[16:20:17.322]                   }
[16:20:17.322]                   ...future.strategy.old <- future::plan("list")
[16:20:17.322]                   options(future.plan = NULL)
[16:20:17.322]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:17.322]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:17.322]                 }
[16:20:17.322]                 ...future.workdir <- getwd()
[16:20:17.322]             }
[16:20:17.322]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:17.322]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:17.322]         }
[16:20:17.322]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:17.322]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:17.322]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:17.322]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:17.322]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:17.322]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:17.322]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:17.322]             base::names(...future.oldOptions))
[16:20:17.322]     }
[16:20:17.322]     if (FALSE) {
[16:20:17.322]     }
[16:20:17.322]     else {
[16:20:17.322]         if (TRUE) {
[16:20:17.322]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:17.322]                 open = "w")
[16:20:17.322]         }
[16:20:17.322]         else {
[16:20:17.322]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:17.322]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:17.322]         }
[16:20:17.322]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:17.322]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:17.322]             base::sink(type = "output", split = FALSE)
[16:20:17.322]             base::close(...future.stdout)
[16:20:17.322]         }, add = TRUE)
[16:20:17.322]     }
[16:20:17.322]     ...future.frame <- base::sys.nframe()
[16:20:17.322]     ...future.conditions <- base::list()
[16:20:17.322]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:17.322]     if (FALSE) {
[16:20:17.322]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:17.322]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:17.322]     }
[16:20:17.322]     ...future.result <- base::tryCatch({
[16:20:17.322]         base::withCallingHandlers({
[16:20:17.322]             ...future.value <- base::withVisible(base::local({
[16:20:17.322]                 do.call(function(...) {
[16:20:17.322]                   sum(x, ...)
[16:20:17.322]                 }, args = future.call.arguments)
[16:20:17.322]             }))
[16:20:17.322]             future::FutureResult(value = ...future.value$value, 
[16:20:17.322]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:17.322]                   ...future.rng), globalenv = if (FALSE) 
[16:20:17.322]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:17.322]                     ...future.globalenv.names))
[16:20:17.322]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:17.322]         }, condition = base::local({
[16:20:17.322]             c <- base::c
[16:20:17.322]             inherits <- base::inherits
[16:20:17.322]             invokeRestart <- base::invokeRestart
[16:20:17.322]             length <- base::length
[16:20:17.322]             list <- base::list
[16:20:17.322]             seq.int <- base::seq.int
[16:20:17.322]             signalCondition <- base::signalCondition
[16:20:17.322]             sys.calls <- base::sys.calls
[16:20:17.322]             `[[` <- base::`[[`
[16:20:17.322]             `+` <- base::`+`
[16:20:17.322]             `<<-` <- base::`<<-`
[16:20:17.322]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:17.322]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:17.322]                   3L)]
[16:20:17.322]             }
[16:20:17.322]             function(cond) {
[16:20:17.322]                 is_error <- inherits(cond, "error")
[16:20:17.322]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:17.322]                   NULL)
[16:20:17.322]                 if (is_error) {
[16:20:17.322]                   sessionInformation <- function() {
[16:20:17.322]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:17.322]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:17.322]                       search = base::search(), system = base::Sys.info())
[16:20:17.322]                   }
[16:20:17.322]                   ...future.conditions[[length(...future.conditions) + 
[16:20:17.322]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:17.322]                     cond$call), session = sessionInformation(), 
[16:20:17.322]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:17.322]                   signalCondition(cond)
[16:20:17.322]                 }
[16:20:17.322]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:17.322]                 "immediateCondition"))) {
[16:20:17.322]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:17.322]                   ...future.conditions[[length(...future.conditions) + 
[16:20:17.322]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:17.322]                   if (TRUE && !signal) {
[16:20:17.322]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:17.322]                     {
[16:20:17.322]                       inherits <- base::inherits
[16:20:17.322]                       invokeRestart <- base::invokeRestart
[16:20:17.322]                       is.null <- base::is.null
[16:20:17.322]                       muffled <- FALSE
[16:20:17.322]                       if (inherits(cond, "message")) {
[16:20:17.322]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:17.322]                         if (muffled) 
[16:20:17.322]                           invokeRestart("muffleMessage")
[16:20:17.322]                       }
[16:20:17.322]                       else if (inherits(cond, "warning")) {
[16:20:17.322]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:17.322]                         if (muffled) 
[16:20:17.322]                           invokeRestart("muffleWarning")
[16:20:17.322]                       }
[16:20:17.322]                       else if (inherits(cond, "condition")) {
[16:20:17.322]                         if (!is.null(pattern)) {
[16:20:17.322]                           computeRestarts <- base::computeRestarts
[16:20:17.322]                           grepl <- base::grepl
[16:20:17.322]                           restarts <- computeRestarts(cond)
[16:20:17.322]                           for (restart in restarts) {
[16:20:17.322]                             name <- restart$name
[16:20:17.322]                             if (is.null(name)) 
[16:20:17.322]                               next
[16:20:17.322]                             if (!grepl(pattern, name)) 
[16:20:17.322]                               next
[16:20:17.322]                             invokeRestart(restart)
[16:20:17.322]                             muffled <- TRUE
[16:20:17.322]                             break
[16:20:17.322]                           }
[16:20:17.322]                         }
[16:20:17.322]                       }
[16:20:17.322]                       invisible(muffled)
[16:20:17.322]                     }
[16:20:17.322]                     muffleCondition(cond, pattern = "^muffle")
[16:20:17.322]                   }
[16:20:17.322]                 }
[16:20:17.322]                 else {
[16:20:17.322]                   if (TRUE) {
[16:20:17.322]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:17.322]                     {
[16:20:17.322]                       inherits <- base::inherits
[16:20:17.322]                       invokeRestart <- base::invokeRestart
[16:20:17.322]                       is.null <- base::is.null
[16:20:17.322]                       muffled <- FALSE
[16:20:17.322]                       if (inherits(cond, "message")) {
[16:20:17.322]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:17.322]                         if (muffled) 
[16:20:17.322]                           invokeRestart("muffleMessage")
[16:20:17.322]                       }
[16:20:17.322]                       else if (inherits(cond, "warning")) {
[16:20:17.322]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:17.322]                         if (muffled) 
[16:20:17.322]                           invokeRestart("muffleWarning")
[16:20:17.322]                       }
[16:20:17.322]                       else if (inherits(cond, "condition")) {
[16:20:17.322]                         if (!is.null(pattern)) {
[16:20:17.322]                           computeRestarts <- base::computeRestarts
[16:20:17.322]                           grepl <- base::grepl
[16:20:17.322]                           restarts <- computeRestarts(cond)
[16:20:17.322]                           for (restart in restarts) {
[16:20:17.322]                             name <- restart$name
[16:20:17.322]                             if (is.null(name)) 
[16:20:17.322]                               next
[16:20:17.322]                             if (!grepl(pattern, name)) 
[16:20:17.322]                               next
[16:20:17.322]                             invokeRestart(restart)
[16:20:17.322]                             muffled <- TRUE
[16:20:17.322]                             break
[16:20:17.322]                           }
[16:20:17.322]                         }
[16:20:17.322]                       }
[16:20:17.322]                       invisible(muffled)
[16:20:17.322]                     }
[16:20:17.322]                     muffleCondition(cond, pattern = "^muffle")
[16:20:17.322]                   }
[16:20:17.322]                 }
[16:20:17.322]             }
[16:20:17.322]         }))
[16:20:17.322]     }, error = function(ex) {
[16:20:17.322]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:17.322]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:17.322]                 ...future.rng), started = ...future.startTime, 
[16:20:17.322]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:17.322]             version = "1.8"), class = "FutureResult")
[16:20:17.322]     }, finally = {
[16:20:17.322]         if (!identical(...future.workdir, getwd())) 
[16:20:17.322]             setwd(...future.workdir)
[16:20:17.322]         {
[16:20:17.322]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:17.322]                 ...future.oldOptions$nwarnings <- NULL
[16:20:17.322]             }
[16:20:17.322]             base::options(...future.oldOptions)
[16:20:17.322]             if (.Platform$OS.type == "windows") {
[16:20:17.322]                 old_names <- names(...future.oldEnvVars)
[16:20:17.322]                 envs <- base::Sys.getenv()
[16:20:17.322]                 names <- names(envs)
[16:20:17.322]                 common <- intersect(names, old_names)
[16:20:17.322]                 added <- setdiff(names, old_names)
[16:20:17.322]                 removed <- setdiff(old_names, names)
[16:20:17.322]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:17.322]                   envs[common]]
[16:20:17.322]                 NAMES <- toupper(changed)
[16:20:17.322]                 args <- list()
[16:20:17.322]                 for (kk in seq_along(NAMES)) {
[16:20:17.322]                   name <- changed[[kk]]
[16:20:17.322]                   NAME <- NAMES[[kk]]
[16:20:17.322]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:17.322]                     next
[16:20:17.322]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:17.322]                 }
[16:20:17.322]                 NAMES <- toupper(added)
[16:20:17.322]                 for (kk in seq_along(NAMES)) {
[16:20:17.322]                   name <- added[[kk]]
[16:20:17.322]                   NAME <- NAMES[[kk]]
[16:20:17.322]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:17.322]                     next
[16:20:17.322]                   args[[name]] <- ""
[16:20:17.322]                 }
[16:20:17.322]                 NAMES <- toupper(removed)
[16:20:17.322]                 for (kk in seq_along(NAMES)) {
[16:20:17.322]                   name <- removed[[kk]]
[16:20:17.322]                   NAME <- NAMES[[kk]]
[16:20:17.322]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:17.322]                     next
[16:20:17.322]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:17.322]                 }
[16:20:17.322]                 if (length(args) > 0) 
[16:20:17.322]                   base::do.call(base::Sys.setenv, args = args)
[16:20:17.322]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:17.322]             }
[16:20:17.322]             else {
[16:20:17.322]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:17.322]             }
[16:20:17.322]             {
[16:20:17.322]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:17.322]                   0L) {
[16:20:17.322]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:17.322]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:17.322]                   base::options(opts)
[16:20:17.322]                 }
[16:20:17.322]                 {
[16:20:17.322]                   {
[16:20:17.322]                     NULL
[16:20:17.322]                     RNGkind("Mersenne-Twister")
[16:20:17.322]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:17.322]                       inherits = FALSE)
[16:20:17.322]                   }
[16:20:17.322]                   options(future.plan = NULL)
[16:20:17.322]                   if (is.na(NA_character_)) 
[16:20:17.322]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:17.322]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:17.322]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:17.322]                     .init = FALSE)
[16:20:17.322]                 }
[16:20:17.322]             }
[16:20:17.322]         }
[16:20:17.322]     })
[16:20:17.322]     if (TRUE) {
[16:20:17.322]         base::sink(type = "output", split = FALSE)
[16:20:17.322]         if (TRUE) {
[16:20:17.322]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:17.322]         }
[16:20:17.322]         else {
[16:20:17.322]             ...future.result["stdout"] <- base::list(NULL)
[16:20:17.322]         }
[16:20:17.322]         base::close(...future.stdout)
[16:20:17.322]         ...future.stdout <- NULL
[16:20:17.322]     }
[16:20:17.322]     ...future.result$conditions <- ...future.conditions
[16:20:17.322]     ...future.result$finished <- base::Sys.time()
[16:20:17.322]     ...future.result
[16:20:17.322] }
[16:20:17.323] assign_globals() ...
[16:20:17.323] List of 2
[16:20:17.323]  $ x                    : int [1:2] 1 2
[16:20:17.323]  $ future.call.arguments:List of 1
[16:20:17.323]   ..$ : num 3
[16:20:17.323]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:20:17.323]  - attr(*, "where")=List of 2
[16:20:17.323]   ..$ x                    :<environment: R_EmptyEnv> 
[16:20:17.323]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[16:20:17.323]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:17.323]  - attr(*, "resolved")= logi FALSE
[16:20:17.323]  - attr(*, "total_size")= num 112
[16:20:17.323]  - attr(*, "already-done")= logi TRUE
[16:20:17.329] - copied ‘x’ to environment
[16:20:17.329] - copied ‘future.call.arguments’ to environment
[16:20:17.330] assign_globals() ... done
[16:20:17.330] plan(): Setting new future strategy stack:
[16:20:17.330] List of future strategies:
[16:20:17.330] 1. sequential:
[16:20:17.330]    - args: function (..., envir = parent.frame())
[16:20:17.330]    - tweaked: FALSE
[16:20:17.330]    - call: NULL
[16:20:17.330] plan(): nbrOfWorkers() = 1
[16:20:17.331] plan(): Setting new future strategy stack:
[16:20:17.331] List of future strategies:
[16:20:17.331] 1. sequential:
[16:20:17.331]    - args: function (..., envir = parent.frame())
[16:20:17.331]    - tweaked: FALSE
[16:20:17.331]    - call: plan(strategy, substitute = FALSE)
[16:20:17.331] plan(): nbrOfWorkers() = 1
[16:20:17.332] SequentialFuture started (and completed)
[16:20:17.332] - Launch lazy future ... done
[16:20:17.332] run() for ‘SequentialFuture’ ... done
[1] 6
** Sum function 'C' with plan('sequential') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y)
    }
    y
}
<bytecode: 0x55ed026dd3e0>
Arguments '...' exists: FALSE
[16:20:17.332] getGlobalsAndPackages() ...
[16:20:17.333] Searching for globals...
[16:20:17.334] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘y’
[16:20:17.334] Searching for globals ... DONE
[16:20:17.334] Resolving globals: FALSE
[16:20:17.334] The total size of the 2 globals is 112 bytes (112 bytes)
[16:20:17.335] The total size of the 2 globals exported for future expression (‘{; sum(x, y); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[16:20:17.335] - globals: [2] ‘x’, ‘y’
[16:20:17.335] 
[16:20:17.335] getGlobalsAndPackages() ... DONE
[16:20:17.335] run() for ‘Future’ ...
[16:20:17.335] - state: ‘created’
[16:20:17.335] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:17.336] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:17.336] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:17.336]   - Field: ‘label’
[16:20:17.336]   - Field: ‘local’
[16:20:17.336]   - Field: ‘owner’
[16:20:17.336]   - Field: ‘envir’
[16:20:17.336]   - Field: ‘packages’
[16:20:17.336]   - Field: ‘gc’
[16:20:17.336]   - Field: ‘conditions’
[16:20:17.337]   - Field: ‘expr’
[16:20:17.337]   - Field: ‘uuid’
[16:20:17.337]   - Field: ‘seed’
[16:20:17.337]   - Field: ‘version’
[16:20:17.337]   - Field: ‘result’
[16:20:17.337]   - Field: ‘asynchronous’
[16:20:17.337]   - Field: ‘calls’
[16:20:17.337]   - Field: ‘globals’
[16:20:17.337]   - Field: ‘stdout’
[16:20:17.337]   - Field: ‘earlySignal’
[16:20:17.337]   - Field: ‘lazy’
[16:20:17.338]   - Field: ‘state’
[16:20:17.338] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:17.338] - Launch lazy future ...
[16:20:17.338] Packages needed by the future expression (n = 0): <none>
[16:20:17.338] Packages needed by future strategies (n = 0): <none>
[16:20:17.338] {
[16:20:17.338]     {
[16:20:17.338]         {
[16:20:17.338]             ...future.startTime <- base::Sys.time()
[16:20:17.338]             {
[16:20:17.338]                 {
[16:20:17.338]                   {
[16:20:17.338]                     base::local({
[16:20:17.338]                       has_future <- base::requireNamespace("future", 
[16:20:17.338]                         quietly = TRUE)
[16:20:17.338]                       if (has_future) {
[16:20:17.338]                         ns <- base::getNamespace("future")
[16:20:17.338]                         version <- ns[[".package"]][["version"]]
[16:20:17.338]                         if (is.null(version)) 
[16:20:17.338]                           version <- utils::packageVersion("future")
[16:20:17.338]                       }
[16:20:17.338]                       else {
[16:20:17.338]                         version <- NULL
[16:20:17.338]                       }
[16:20:17.338]                       if (!has_future || version < "1.8.0") {
[16:20:17.338]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:17.338]                           "", base::R.version$version.string), 
[16:20:17.338]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:17.338]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:17.338]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:17.338]                             "release", "version")], collapse = " "), 
[16:20:17.338]                           hostname = base::Sys.info()[["nodename"]])
[16:20:17.338]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:17.338]                           info)
[16:20:17.338]                         info <- base::paste(info, collapse = "; ")
[16:20:17.338]                         if (!has_future) {
[16:20:17.338]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:17.338]                             info)
[16:20:17.338]                         }
[16:20:17.338]                         else {
[16:20:17.338]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:17.338]                             info, version)
[16:20:17.338]                         }
[16:20:17.338]                         base::stop(msg)
[16:20:17.338]                       }
[16:20:17.338]                     })
[16:20:17.338]                   }
[16:20:17.338]                   ...future.strategy.old <- future::plan("list")
[16:20:17.338]                   options(future.plan = NULL)
[16:20:17.338]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:17.338]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:17.338]                 }
[16:20:17.338]                 ...future.workdir <- getwd()
[16:20:17.338]             }
[16:20:17.338]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:17.338]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:17.338]         }
[16:20:17.338]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:17.338]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:17.338]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:17.338]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:17.338]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:17.338]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:17.338]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:17.338]             base::names(...future.oldOptions))
[16:20:17.338]     }
[16:20:17.338]     if (FALSE) {
[16:20:17.338]     }
[16:20:17.338]     else {
[16:20:17.338]         if (TRUE) {
[16:20:17.338]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:17.338]                 open = "w")
[16:20:17.338]         }
[16:20:17.338]         else {
[16:20:17.338]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:17.338]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:17.338]         }
[16:20:17.338]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:17.338]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:17.338]             base::sink(type = "output", split = FALSE)
[16:20:17.338]             base::close(...future.stdout)
[16:20:17.338]         }, add = TRUE)
[16:20:17.338]     }
[16:20:17.338]     ...future.frame <- base::sys.nframe()
[16:20:17.338]     ...future.conditions <- base::list()
[16:20:17.338]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:17.338]     if (FALSE) {
[16:20:17.338]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:17.338]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:17.338]     }
[16:20:17.338]     ...future.result <- base::tryCatch({
[16:20:17.338]         base::withCallingHandlers({
[16:20:17.338]             ...future.value <- base::withVisible(base::local({
[16:20:17.338]                 sum(x, y)
[16:20:17.338]             }))
[16:20:17.338]             future::FutureResult(value = ...future.value$value, 
[16:20:17.338]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:17.338]                   ...future.rng), globalenv = if (FALSE) 
[16:20:17.338]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:17.338]                     ...future.globalenv.names))
[16:20:17.338]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:17.338]         }, condition = base::local({
[16:20:17.338]             c <- base::c
[16:20:17.338]             inherits <- base::inherits
[16:20:17.338]             invokeRestart <- base::invokeRestart
[16:20:17.338]             length <- base::length
[16:20:17.338]             list <- base::list
[16:20:17.338]             seq.int <- base::seq.int
[16:20:17.338]             signalCondition <- base::signalCondition
[16:20:17.338]             sys.calls <- base::sys.calls
[16:20:17.338]             `[[` <- base::`[[`
[16:20:17.338]             `+` <- base::`+`
[16:20:17.338]             `<<-` <- base::`<<-`
[16:20:17.338]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:17.338]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:17.338]                   3L)]
[16:20:17.338]             }
[16:20:17.338]             function(cond) {
[16:20:17.338]                 is_error <- inherits(cond, "error")
[16:20:17.338]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:17.338]                   NULL)
[16:20:17.338]                 if (is_error) {
[16:20:17.338]                   sessionInformation <- function() {
[16:20:17.338]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:17.338]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:17.338]                       search = base::search(), system = base::Sys.info())
[16:20:17.338]                   }
[16:20:17.338]                   ...future.conditions[[length(...future.conditions) + 
[16:20:17.338]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:17.338]                     cond$call), session = sessionInformation(), 
[16:20:17.338]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:17.338]                   signalCondition(cond)
[16:20:17.338]                 }
[16:20:17.338]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:17.338]                 "immediateCondition"))) {
[16:20:17.338]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:17.338]                   ...future.conditions[[length(...future.conditions) + 
[16:20:17.338]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:17.338]                   if (TRUE && !signal) {
[16:20:17.338]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:17.338]                     {
[16:20:17.338]                       inherits <- base::inherits
[16:20:17.338]                       invokeRestart <- base::invokeRestart
[16:20:17.338]                       is.null <- base::is.null
[16:20:17.338]                       muffled <- FALSE
[16:20:17.338]                       if (inherits(cond, "message")) {
[16:20:17.338]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:17.338]                         if (muffled) 
[16:20:17.338]                           invokeRestart("muffleMessage")
[16:20:17.338]                       }
[16:20:17.338]                       else if (inherits(cond, "warning")) {
[16:20:17.338]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:17.338]                         if (muffled) 
[16:20:17.338]                           invokeRestart("muffleWarning")
[16:20:17.338]                       }
[16:20:17.338]                       else if (inherits(cond, "condition")) {
[16:20:17.338]                         if (!is.null(pattern)) {
[16:20:17.338]                           computeRestarts <- base::computeRestarts
[16:20:17.338]                           grepl <- base::grepl
[16:20:17.338]                           restarts <- computeRestarts(cond)
[16:20:17.338]                           for (restart in restarts) {
[16:20:17.338]                             name <- restart$name
[16:20:17.338]                             if (is.null(name)) 
[16:20:17.338]                               next
[16:20:17.338]                             if (!grepl(pattern, name)) 
[16:20:17.338]                               next
[16:20:17.338]                             invokeRestart(restart)
[16:20:17.338]                             muffled <- TRUE
[16:20:17.338]                             break
[16:20:17.338]                           }
[16:20:17.338]                         }
[16:20:17.338]                       }
[16:20:17.338]                       invisible(muffled)
[16:20:17.338]                     }
[16:20:17.338]                     muffleCondition(cond, pattern = "^muffle")
[16:20:17.338]                   }
[16:20:17.338]                 }
[16:20:17.338]                 else {
[16:20:17.338]                   if (TRUE) {
[16:20:17.338]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:17.338]                     {
[16:20:17.338]                       inherits <- base::inherits
[16:20:17.338]                       invokeRestart <- base::invokeRestart
[16:20:17.338]                       is.null <- base::is.null
[16:20:17.338]                       muffled <- FALSE
[16:20:17.338]                       if (inherits(cond, "message")) {
[16:20:17.338]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:17.338]                         if (muffled) 
[16:20:17.338]                           invokeRestart("muffleMessage")
[16:20:17.338]                       }
[16:20:17.338]                       else if (inherits(cond, "warning")) {
[16:20:17.338]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:17.338]                         if (muffled) 
[16:20:17.338]                           invokeRestart("muffleWarning")
[16:20:17.338]                       }
[16:20:17.338]                       else if (inherits(cond, "condition")) {
[16:20:17.338]                         if (!is.null(pattern)) {
[16:20:17.338]                           computeRestarts <- base::computeRestarts
[16:20:17.338]                           grepl <- base::grepl
[16:20:17.338]                           restarts <- computeRestarts(cond)
[16:20:17.338]                           for (restart in restarts) {
[16:20:17.338]                             name <- restart$name
[16:20:17.338]                             if (is.null(name)) 
[16:20:17.338]                               next
[16:20:17.338]                             if (!grepl(pattern, name)) 
[16:20:17.338]                               next
[16:20:17.338]                             invokeRestart(restart)
[16:20:17.338]                             muffled <- TRUE
[16:20:17.338]                             break
[16:20:17.338]                           }
[16:20:17.338]                         }
[16:20:17.338]                       }
[16:20:17.338]                       invisible(muffled)
[16:20:17.338]                     }
[16:20:17.338]                     muffleCondition(cond, pattern = "^muffle")
[16:20:17.338]                   }
[16:20:17.338]                 }
[16:20:17.338]             }
[16:20:17.338]         }))
[16:20:17.338]     }, error = function(ex) {
[16:20:17.338]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:17.338]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:17.338]                 ...future.rng), started = ...future.startTime, 
[16:20:17.338]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:17.338]             version = "1.8"), class = "FutureResult")
[16:20:17.338]     }, finally = {
[16:20:17.338]         if (!identical(...future.workdir, getwd())) 
[16:20:17.338]             setwd(...future.workdir)
[16:20:17.338]         {
[16:20:17.338]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:17.338]                 ...future.oldOptions$nwarnings <- NULL
[16:20:17.338]             }
[16:20:17.338]             base::options(...future.oldOptions)
[16:20:17.338]             if (.Platform$OS.type == "windows") {
[16:20:17.338]                 old_names <- names(...future.oldEnvVars)
[16:20:17.338]                 envs <- base::Sys.getenv()
[16:20:17.338]                 names <- names(envs)
[16:20:17.338]                 common <- intersect(names, old_names)
[16:20:17.338]                 added <- setdiff(names, old_names)
[16:20:17.338]                 removed <- setdiff(old_names, names)
[16:20:17.338]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:17.338]                   envs[common]]
[16:20:17.338]                 NAMES <- toupper(changed)
[16:20:17.338]                 args <- list()
[16:20:17.338]                 for (kk in seq_along(NAMES)) {
[16:20:17.338]                   name <- changed[[kk]]
[16:20:17.338]                   NAME <- NAMES[[kk]]
[16:20:17.338]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:17.338]                     next
[16:20:17.338]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:17.338]                 }
[16:20:17.338]                 NAMES <- toupper(added)
[16:20:17.338]                 for (kk in seq_along(NAMES)) {
[16:20:17.338]                   name <- added[[kk]]
[16:20:17.338]                   NAME <- NAMES[[kk]]
[16:20:17.338]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:17.338]                     next
[16:20:17.338]                   args[[name]] <- ""
[16:20:17.338]                 }
[16:20:17.338]                 NAMES <- toupper(removed)
[16:20:17.338]                 for (kk in seq_along(NAMES)) {
[16:20:17.338]                   name <- removed[[kk]]
[16:20:17.338]                   NAME <- NAMES[[kk]]
[16:20:17.338]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:17.338]                     next
[16:20:17.338]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:17.338]                 }
[16:20:17.338]                 if (length(args) > 0) 
[16:20:17.338]                   base::do.call(base::Sys.setenv, args = args)
[16:20:17.338]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:17.338]             }
[16:20:17.338]             else {
[16:20:17.338]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:17.338]             }
[16:20:17.338]             {
[16:20:17.338]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:17.338]                   0L) {
[16:20:17.338]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:17.338]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:17.338]                   base::options(opts)
[16:20:17.338]                 }
[16:20:17.338]                 {
[16:20:17.338]                   {
[16:20:17.338]                     NULL
[16:20:17.338]                     RNGkind("Mersenne-Twister")
[16:20:17.338]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:17.338]                       inherits = FALSE)
[16:20:17.338]                   }
[16:20:17.338]                   options(future.plan = NULL)
[16:20:17.338]                   if (is.na(NA_character_)) 
[16:20:17.338]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:17.338]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:17.338]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:17.338]                     .init = FALSE)
[16:20:17.338]                 }
[16:20:17.338]             }
[16:20:17.338]         }
[16:20:17.338]     })
[16:20:17.338]     if (TRUE) {
[16:20:17.338]         base::sink(type = "output", split = FALSE)
[16:20:17.338]         if (TRUE) {
[16:20:17.338]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:17.338]         }
[16:20:17.338]         else {
[16:20:17.338]             ...future.result["stdout"] <- base::list(NULL)
[16:20:17.338]         }
[16:20:17.338]         base::close(...future.stdout)
[16:20:17.338]         ...future.stdout <- NULL
[16:20:17.338]     }
[16:20:17.338]     ...future.result$conditions <- ...future.conditions
[16:20:17.338]     ...future.result$finished <- base::Sys.time()
[16:20:17.338]     ...future.result
[16:20:17.338] }
[16:20:17.340] assign_globals() ...
[16:20:17.340] List of 2
[16:20:17.340]  $ x: int [1:2] 1 2
[16:20:17.340]  $ y: num 3
[16:20:17.340]  - attr(*, "where")=List of 2
[16:20:17.340]   ..$ x:<environment: R_EmptyEnv> 
[16:20:17.340]   ..$ y:<environment: R_EmptyEnv> 
[16:20:17.340]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:17.340]  - attr(*, "resolved")= logi FALSE
[16:20:17.340]  - attr(*, "total_size")= num 112
[16:20:17.340]  - attr(*, "already-done")= logi TRUE
[16:20:17.343] - copied ‘x’ to environment
[16:20:17.343] - copied ‘y’ to environment
[16:20:17.344] assign_globals() ... done
[16:20:17.344] plan(): Setting new future strategy stack:
[16:20:17.344] List of future strategies:
[16:20:17.344] 1. sequential:
[16:20:17.344]    - args: function (..., envir = parent.frame())
[16:20:17.344]    - tweaked: FALSE
[16:20:17.344]    - call: NULL
[16:20:17.344] plan(): nbrOfWorkers() = 1
[16:20:17.345] plan(): Setting new future strategy stack:
[16:20:17.345] List of future strategies:
[16:20:17.345] 1. sequential:
[16:20:17.345]    - args: function (..., envir = parent.frame())
[16:20:17.345]    - tweaked: FALSE
[16:20:17.345]    - call: plan(strategy, substitute = FALSE)
[16:20:17.346] plan(): nbrOfWorkers() = 1
[16:20:17.346] SequentialFuture started (and completed)
[16:20:17.346] - Launch lazy future ... done
[16:20:17.346] run() for ‘SequentialFuture’ ... done
[1] 6
** Sum function 'D' with plan('sequential') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y, ...)
    }
    y
}
<bytecode: 0x55ed028c9f38>
Arguments '...' exists: FALSE
[16:20:17.347] getGlobalsAndPackages() ...
[16:20:17.347] Searching for globals...
[16:20:17.348] - globals found: [5] ‘{’, ‘sum’, ‘x’, ‘y’, ‘...’
[16:20:17.348] Searching for globals ... DONE
[16:20:17.348] Resolving globals: FALSE
[16:20:17.348] Tweak future expression to call with '...' arguments ...
[16:20:17.349] The total size of the 2 globals is 112 bytes (112 bytes)
[16:20:17.349] The total size of the 2 globals exported for future expression (‘{; sum(x, y, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[16:20:17.349] - globals: [2] ‘x’, ‘y’
[16:20:17.349] 
[16:20:17.349] getGlobalsAndPackages() ... DONE
[16:20:17.350] run() for ‘Future’ ...
[16:20:17.350] - state: ‘created’
[16:20:17.350] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:17.350] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:17.350] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:17.350]   - Field: ‘label’
[16:20:17.351]   - Field: ‘local’
[16:20:17.351]   - Field: ‘owner’
[16:20:17.351]   - Field: ‘envir’
[16:20:17.351]   - Field: ‘packages’
[16:20:17.351]   - Field: ‘gc’
[16:20:17.351]   - Field: ‘conditions’
[16:20:17.351]   - Field: ‘expr’
[16:20:17.351]   - Field: ‘uuid’
[16:20:17.351]   - Field: ‘seed’
[16:20:17.351]   - Field: ‘version’
[16:20:17.351]   - Field: ‘result’
[16:20:17.352]   - Field: ‘asynchronous’
[16:20:17.352]   - Field: ‘calls’
[16:20:17.352]   - Field: ‘globals’
[16:20:17.352]   - Field: ‘stdout’
[16:20:17.352]   - Field: ‘earlySignal’
[16:20:17.352]   - Field: ‘lazy’
[16:20:17.352]   - Field: ‘state’
[16:20:17.352] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:17.352] - Launch lazy future ...
[16:20:17.353] Packages needed by the future expression (n = 0): <none>
[16:20:17.353] Packages needed by future strategies (n = 0): <none>
[16:20:17.353] {
[16:20:17.353]     {
[16:20:17.353]         {
[16:20:17.353]             ...future.startTime <- base::Sys.time()
[16:20:17.353]             {
[16:20:17.353]                 {
[16:20:17.353]                   {
[16:20:17.353]                     base::local({
[16:20:17.353]                       has_future <- base::requireNamespace("future", 
[16:20:17.353]                         quietly = TRUE)
[16:20:17.353]                       if (has_future) {
[16:20:17.353]                         ns <- base::getNamespace("future")
[16:20:17.353]                         version <- ns[[".package"]][["version"]]
[16:20:17.353]                         if (is.null(version)) 
[16:20:17.353]                           version <- utils::packageVersion("future")
[16:20:17.353]                       }
[16:20:17.353]                       else {
[16:20:17.353]                         version <- NULL
[16:20:17.353]                       }
[16:20:17.353]                       if (!has_future || version < "1.8.0") {
[16:20:17.353]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:17.353]                           "", base::R.version$version.string), 
[16:20:17.353]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:17.353]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:17.353]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:17.353]                             "release", "version")], collapse = " "), 
[16:20:17.353]                           hostname = base::Sys.info()[["nodename"]])
[16:20:17.353]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:17.353]                           info)
[16:20:17.353]                         info <- base::paste(info, collapse = "; ")
[16:20:17.353]                         if (!has_future) {
[16:20:17.353]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:17.353]                             info)
[16:20:17.353]                         }
[16:20:17.353]                         else {
[16:20:17.353]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:17.353]                             info, version)
[16:20:17.353]                         }
[16:20:17.353]                         base::stop(msg)
[16:20:17.353]                       }
[16:20:17.353]                     })
[16:20:17.353]                   }
[16:20:17.353]                   ...future.strategy.old <- future::plan("list")
[16:20:17.353]                   options(future.plan = NULL)
[16:20:17.353]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:17.353]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:17.353]                 }
[16:20:17.353]                 ...future.workdir <- getwd()
[16:20:17.353]             }
[16:20:17.353]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:17.353]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:17.353]         }
[16:20:17.353]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:17.353]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:17.353]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:17.353]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:17.353]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:17.353]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:17.353]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:17.353]             base::names(...future.oldOptions))
[16:20:17.353]     }
[16:20:17.353]     if (FALSE) {
[16:20:17.353]     }
[16:20:17.353]     else {
[16:20:17.353]         if (TRUE) {
[16:20:17.353]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:17.353]                 open = "w")
[16:20:17.353]         }
[16:20:17.353]         else {
[16:20:17.353]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:17.353]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:17.353]         }
[16:20:17.353]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:17.353]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:17.353]             base::sink(type = "output", split = FALSE)
[16:20:17.353]             base::close(...future.stdout)
[16:20:17.353]         }, add = TRUE)
[16:20:17.353]     }
[16:20:17.353]     ...future.frame <- base::sys.nframe()
[16:20:17.353]     ...future.conditions <- base::list()
[16:20:17.353]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:17.353]     if (FALSE) {
[16:20:17.353]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:17.353]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:17.353]     }
[16:20:17.353]     ...future.result <- base::tryCatch({
[16:20:17.353]         base::withCallingHandlers({
[16:20:17.353]             ...future.value <- base::withVisible(base::local({
[16:20:17.353]                 sum(x, y, ...)
[16:20:17.353]             }))
[16:20:17.353]             future::FutureResult(value = ...future.value$value, 
[16:20:17.353]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:17.353]                   ...future.rng), globalenv = if (FALSE) 
[16:20:17.353]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:17.353]                     ...future.globalenv.names))
[16:20:17.353]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:17.353]         }, condition = base::local({
[16:20:17.353]             c <- base::c
[16:20:17.353]             inherits <- base::inherits
[16:20:17.353]             invokeRestart <- base::invokeRestart
[16:20:17.353]             length <- base::length
[16:20:17.353]             list <- base::list
[16:20:17.353]             seq.int <- base::seq.int
[16:20:17.353]             signalCondition <- base::signalCondition
[16:20:17.353]             sys.calls <- base::sys.calls
[16:20:17.353]             `[[` <- base::`[[`
[16:20:17.353]             `+` <- base::`+`
[16:20:17.353]             `<<-` <- base::`<<-`
[16:20:17.353]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:17.353]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:17.353]                   3L)]
[16:20:17.353]             }
[16:20:17.353]             function(cond) {
[16:20:17.353]                 is_error <- inherits(cond, "error")
[16:20:17.353]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:17.353]                   NULL)
[16:20:17.353]                 if (is_error) {
[16:20:17.353]                   sessionInformation <- function() {
[16:20:17.353]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:17.353]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:17.353]                       search = base::search(), system = base::Sys.info())
[16:20:17.353]                   }
[16:20:17.353]                   ...future.conditions[[length(...future.conditions) + 
[16:20:17.353]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:17.353]                     cond$call), session = sessionInformation(), 
[16:20:17.353]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:17.353]                   signalCondition(cond)
[16:20:17.353]                 }
[16:20:17.353]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:17.353]                 "immediateCondition"))) {
[16:20:17.353]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:17.353]                   ...future.conditions[[length(...future.conditions) + 
[16:20:17.353]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:17.353]                   if (TRUE && !signal) {
[16:20:17.353]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:17.353]                     {
[16:20:17.353]                       inherits <- base::inherits
[16:20:17.353]                       invokeRestart <- base::invokeRestart
[16:20:17.353]                       is.null <- base::is.null
[16:20:17.353]                       muffled <- FALSE
[16:20:17.353]                       if (inherits(cond, "message")) {
[16:20:17.353]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:17.353]                         if (muffled) 
[16:20:17.353]                           invokeRestart("muffleMessage")
[16:20:17.353]                       }
[16:20:17.353]                       else if (inherits(cond, "warning")) {
[16:20:17.353]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:17.353]                         if (muffled) 
[16:20:17.353]                           invokeRestart("muffleWarning")
[16:20:17.353]                       }
[16:20:17.353]                       else if (inherits(cond, "condition")) {
[16:20:17.353]                         if (!is.null(pattern)) {
[16:20:17.353]                           computeRestarts <- base::computeRestarts
[16:20:17.353]                           grepl <- base::grepl
[16:20:17.353]                           restarts <- computeRestarts(cond)
[16:20:17.353]                           for (restart in restarts) {
[16:20:17.353]                             name <- restart$name
[16:20:17.353]                             if (is.null(name)) 
[16:20:17.353]                               next
[16:20:17.353]                             if (!grepl(pattern, name)) 
[16:20:17.353]                               next
[16:20:17.353]                             invokeRestart(restart)
[16:20:17.353]                             muffled <- TRUE
[16:20:17.353]                             break
[16:20:17.353]                           }
[16:20:17.353]                         }
[16:20:17.353]                       }
[16:20:17.353]                       invisible(muffled)
[16:20:17.353]                     }
[16:20:17.353]                     muffleCondition(cond, pattern = "^muffle")
[16:20:17.353]                   }
[16:20:17.353]                 }
[16:20:17.353]                 else {
[16:20:17.353]                   if (TRUE) {
[16:20:17.353]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:17.353]                     {
[16:20:17.353]                       inherits <- base::inherits
[16:20:17.353]                       invokeRestart <- base::invokeRestart
[16:20:17.353]                       is.null <- base::is.null
[16:20:17.353]                       muffled <- FALSE
[16:20:17.353]                       if (inherits(cond, "message")) {
[16:20:17.353]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:17.353]                         if (muffled) 
[16:20:17.353]                           invokeRestart("muffleMessage")
[16:20:17.353]                       }
[16:20:17.353]                       else if (inherits(cond, "warning")) {
[16:20:17.353]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:17.353]                         if (muffled) 
[16:20:17.353]                           invokeRestart("muffleWarning")
[16:20:17.353]                       }
[16:20:17.353]                       else if (inherits(cond, "condition")) {
[16:20:17.353]                         if (!is.null(pattern)) {
[16:20:17.353]                           computeRestarts <- base::computeRestarts
[16:20:17.353]                           grepl <- base::grepl
[16:20:17.353]                           restarts <- computeRestarts(cond)
[16:20:17.353]                           for (restart in restarts) {
[16:20:17.353]                             name <- restart$name
[16:20:17.353]                             if (is.null(name)) 
[16:20:17.353]                               next
[16:20:17.353]                             if (!grepl(pattern, name)) 
[16:20:17.353]                               next
[16:20:17.353]                             invokeRestart(restart)
[16:20:17.353]                             muffled <- TRUE
[16:20:17.353]                             break
[16:20:17.353]                           }
[16:20:17.353]                         }
[16:20:17.353]                       }
[16:20:17.353]                       invisible(muffled)
[16:20:17.353]                     }
[16:20:17.353]                     muffleCondition(cond, pattern = "^muffle")
[16:20:17.353]                   }
[16:20:17.353]                 }
[16:20:17.353]             }
[16:20:17.353]         }))
[16:20:17.353]     }, error = function(ex) {
[16:20:17.353]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:17.353]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:17.353]                 ...future.rng), started = ...future.startTime, 
[16:20:17.353]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:17.353]             version = "1.8"), class = "FutureResult")
[16:20:17.353]     }, finally = {
[16:20:17.353]         if (!identical(...future.workdir, getwd())) 
[16:20:17.353]             setwd(...future.workdir)
[16:20:17.353]         {
[16:20:17.353]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:17.353]                 ...future.oldOptions$nwarnings <- NULL
[16:20:17.353]             }
[16:20:17.353]             base::options(...future.oldOptions)
[16:20:17.353]             if (.Platform$OS.type == "windows") {
[16:20:17.353]                 old_names <- names(...future.oldEnvVars)
[16:20:17.353]                 envs <- base::Sys.getenv()
[16:20:17.353]                 names <- names(envs)
[16:20:17.353]                 common <- intersect(names, old_names)
[16:20:17.353]                 added <- setdiff(names, old_names)
[16:20:17.353]                 removed <- setdiff(old_names, names)
[16:20:17.353]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:17.353]                   envs[common]]
[16:20:17.353]                 NAMES <- toupper(changed)
[16:20:17.353]                 args <- list()
[16:20:17.353]                 for (kk in seq_along(NAMES)) {
[16:20:17.353]                   name <- changed[[kk]]
[16:20:17.353]                   NAME <- NAMES[[kk]]
[16:20:17.353]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:17.353]                     next
[16:20:17.353]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:17.353]                 }
[16:20:17.353]                 NAMES <- toupper(added)
[16:20:17.353]                 for (kk in seq_along(NAMES)) {
[16:20:17.353]                   name <- added[[kk]]
[16:20:17.353]                   NAME <- NAMES[[kk]]
[16:20:17.353]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:17.353]                     next
[16:20:17.353]                   args[[name]] <- ""
[16:20:17.353]                 }
[16:20:17.353]                 NAMES <- toupper(removed)
[16:20:17.353]                 for (kk in seq_along(NAMES)) {
[16:20:17.353]                   name <- removed[[kk]]
[16:20:17.353]                   NAME <- NAMES[[kk]]
[16:20:17.353]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:17.353]                     next
[16:20:17.353]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:17.353]                 }
[16:20:17.353]                 if (length(args) > 0) 
[16:20:17.353]                   base::do.call(base::Sys.setenv, args = args)
[16:20:17.353]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:17.353]             }
[16:20:17.353]             else {
[16:20:17.353]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:17.353]             }
[16:20:17.353]             {
[16:20:17.353]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:17.353]                   0L) {
[16:20:17.353]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:17.353]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:17.353]                   base::options(opts)
[16:20:17.353]                 }
[16:20:17.353]                 {
[16:20:17.353]                   {
[16:20:17.353]                     NULL
[16:20:17.353]                     RNGkind("Mersenne-Twister")
[16:20:17.353]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:17.353]                       inherits = FALSE)
[16:20:17.353]                   }
[16:20:17.353]                   options(future.plan = NULL)
[16:20:17.353]                   if (is.na(NA_character_)) 
[16:20:17.353]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:17.353]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:17.353]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:17.353]                     .init = FALSE)
[16:20:17.353]                 }
[16:20:17.353]             }
[16:20:17.353]         }
[16:20:17.353]     })
[16:20:17.353]     if (TRUE) {
[16:20:17.353]         base::sink(type = "output", split = FALSE)
[16:20:17.353]         if (TRUE) {
[16:20:17.353]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:17.353]         }
[16:20:17.353]         else {
[16:20:17.353]             ...future.result["stdout"] <- base::list(NULL)
[16:20:17.353]         }
[16:20:17.353]         base::close(...future.stdout)
[16:20:17.353]         ...future.stdout <- NULL
[16:20:17.353]     }
[16:20:17.353]     ...future.result$conditions <- ...future.conditions
[16:20:17.353]     ...future.result$finished <- base::Sys.time()
[16:20:17.353]     ...future.result
[16:20:17.353] }
[16:20:17.355] assign_globals() ...
[16:20:17.355] List of 2
[16:20:17.355]  $ x: int [1:2] 1 2
[16:20:17.355]  $ y: num 3
[16:20:17.355]  - attr(*, "where")=List of 2
[16:20:17.355]   ..$ x:<environment: R_EmptyEnv> 
[16:20:17.355]   ..$ y:<environment: R_EmptyEnv> 
[16:20:17.355]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:17.355]  - attr(*, "resolved")= logi FALSE
[16:20:17.355]  - attr(*, "total_size")= num 112
[16:20:17.355]  - attr(*, "already-done")= logi TRUE
[16:20:17.359] - copied ‘x’ to environment
[16:20:17.359] - copied ‘y’ to environment
[16:20:17.359] assign_globals() ... done
[16:20:17.360] plan(): Setting new future strategy stack:
[16:20:17.360] List of future strategies:
[16:20:17.360] 1. sequential:
[16:20:17.360]    - args: function (..., envir = parent.frame())
[16:20:17.360]    - tweaked: FALSE
[16:20:17.360]    - call: NULL
[16:20:17.360] plan(): nbrOfWorkers() = 1
[16:20:17.361] plan(): Setting new future strategy stack:
[16:20:17.361] List of future strategies:
[16:20:17.361] 1. sequential:
[16:20:17.361]    - args: function (..., envir = parent.frame())
[16:20:17.361]    - tweaked: FALSE
[16:20:17.361]    - call: plan(strategy, substitute = FALSE)
[16:20:17.362] plan(): nbrOfWorkers() = 1
[16:20:17.362] SequentialFuture started (and completed)
[16:20:17.362] signalConditions() ...
[16:20:17.362]  - include = ‘immediateCondition’
[16:20:17.362]  - exclude = 
[16:20:17.362]  - resignal = FALSE
[16:20:17.362]  - Number of conditions: 1
[16:20:17.362] signalConditions() ... done
[16:20:17.362] - Launch lazy future ... done
[16:20:17.363] run() for ‘SequentialFuture’ ... done
[16:20:17.363] signalConditions() ...
[16:20:17.363]  - include = ‘immediateCondition’
[16:20:17.363]  - exclude = 
[16:20:17.363]  - resignal = FALSE
[16:20:17.363]  - Number of conditions: 1
[16:20:17.363] signalConditions() ... done
[16:20:17.363] Future state: ‘finished’
[16:20:17.363] signalConditions() ...
[16:20:17.363]  - include = ‘condition’
[16:20:17.364]  - exclude = ‘immediateCondition’
[16:20:17.364]  - resignal = TRUE
[16:20:17.364]  - Number of conditions: 1
[16:20:17.364]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:20:17.364] signalConditions() ... done
Error in eval(quote({ : '...' used in an incorrect context
[1] "Error in eval(quote({ : '...' used in an incorrect context\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    sum(x, y, ...)}), new.env()): '...' used in an incorrect context>
** Sum function 'E' with plan('sequential') ...
function (...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    globals <- globals::globalsByName("...", envir = environment())
    f <- future({
        fcn <- function() sum(...)
        fcn()
    }, envir = parent.frame(), globals = globals)
    y <- value(f)
    y
}
<bytecode: 0x55ed01add168>
Arguments '...' exists: TRUE
[16:20:17.365] getGlobalsAndPackages() ...
[16:20:17.365] - globals passed as-is: [1] ‘...’
[16:20:17.365] Resolving globals: FALSE
[16:20:17.365] Tweak future expression to call with '...' arguments ...
[16:20:17.365] {
[16:20:17.365]     do.call(function(...) {
[16:20:17.365]         fcn <- function() sum(...)
[16:20:17.365]         fcn()
[16:20:17.365]     }, args = future.call.arguments)
[16:20:17.365] }
[16:20:17.365] Tweak future expression to call with '...' arguments ... DONE
[16:20:17.366] The total size of the 1 globals is 112 bytes (112 bytes)
[16:20:17.366] The total size of the 1 globals exported for future expression (‘{; fcn <- function() sum(...); fcn(); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘future.call.arguments’ (112 bytes of class ‘list’)
[16:20:17.366] - globals: [1] ‘future.call.arguments’
[16:20:17.366] 
[16:20:17.366] getGlobalsAndPackages() ... DONE
[16:20:17.367] run() for ‘Future’ ...
[16:20:17.367] - state: ‘created’
[16:20:17.367] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:17.367] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:17.367] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:17.367]   - Field: ‘label’
[16:20:17.367]   - Field: ‘local’
[16:20:17.368]   - Field: ‘owner’
[16:20:17.368]   - Field: ‘envir’
[16:20:17.368]   - Field: ‘packages’
[16:20:17.368]   - Field: ‘gc’
[16:20:17.368]   - Field: ‘conditions’
[16:20:17.368]   - Field: ‘expr’
[16:20:17.368]   - Field: ‘uuid’
[16:20:17.368]   - Field: ‘seed’
[16:20:17.368]   - Field: ‘version’
[16:20:17.368]   - Field: ‘result’
[16:20:17.369]   - Field: ‘asynchronous’
[16:20:17.369]   - Field: ‘calls’
[16:20:17.369]   - Field: ‘globals’
[16:20:17.369]   - Field: ‘stdout’
[16:20:17.369]   - Field: ‘earlySignal’
[16:20:17.369]   - Field: ‘lazy’
[16:20:17.369]   - Field: ‘state’
[16:20:17.369] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:17.369] - Launch lazy future ...
[16:20:17.369] Packages needed by the future expression (n = 0): <none>
[16:20:17.370] Packages needed by future strategies (n = 0): <none>
[16:20:17.370] {
[16:20:17.370]     {
[16:20:17.370]         {
[16:20:17.370]             ...future.startTime <- base::Sys.time()
[16:20:17.370]             {
[16:20:17.370]                 {
[16:20:17.370]                   {
[16:20:17.370]                     base::local({
[16:20:17.370]                       has_future <- base::requireNamespace("future", 
[16:20:17.370]                         quietly = TRUE)
[16:20:17.370]                       if (has_future) {
[16:20:17.370]                         ns <- base::getNamespace("future")
[16:20:17.370]                         version <- ns[[".package"]][["version"]]
[16:20:17.370]                         if (is.null(version)) 
[16:20:17.370]                           version <- utils::packageVersion("future")
[16:20:17.370]                       }
[16:20:17.370]                       else {
[16:20:17.370]                         version <- NULL
[16:20:17.370]                       }
[16:20:17.370]                       if (!has_future || version < "1.8.0") {
[16:20:17.370]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:17.370]                           "", base::R.version$version.string), 
[16:20:17.370]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:17.370]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:17.370]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:17.370]                             "release", "version")], collapse = " "), 
[16:20:17.370]                           hostname = base::Sys.info()[["nodename"]])
[16:20:17.370]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:17.370]                           info)
[16:20:17.370]                         info <- base::paste(info, collapse = "; ")
[16:20:17.370]                         if (!has_future) {
[16:20:17.370]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:17.370]                             info)
[16:20:17.370]                         }
[16:20:17.370]                         else {
[16:20:17.370]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:17.370]                             info, version)
[16:20:17.370]                         }
[16:20:17.370]                         base::stop(msg)
[16:20:17.370]                       }
[16:20:17.370]                     })
[16:20:17.370]                   }
[16:20:17.370]                   ...future.strategy.old <- future::plan("list")
[16:20:17.370]                   options(future.plan = NULL)
[16:20:17.370]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:17.370]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:17.370]                 }
[16:20:17.370]                 ...future.workdir <- getwd()
[16:20:17.370]             }
[16:20:17.370]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:17.370]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:17.370]         }
[16:20:17.370]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:17.370]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:17.370]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:17.370]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:17.370]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:17.370]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:17.370]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:17.370]             base::names(...future.oldOptions))
[16:20:17.370]     }
[16:20:17.370]     if (FALSE) {
[16:20:17.370]     }
[16:20:17.370]     else {
[16:20:17.370]         if (TRUE) {
[16:20:17.370]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:17.370]                 open = "w")
[16:20:17.370]         }
[16:20:17.370]         else {
[16:20:17.370]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:17.370]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:17.370]         }
[16:20:17.370]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:17.370]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:17.370]             base::sink(type = "output", split = FALSE)
[16:20:17.370]             base::close(...future.stdout)
[16:20:17.370]         }, add = TRUE)
[16:20:17.370]     }
[16:20:17.370]     ...future.frame <- base::sys.nframe()
[16:20:17.370]     ...future.conditions <- base::list()
[16:20:17.370]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:17.370]     if (FALSE) {
[16:20:17.370]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:17.370]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:17.370]     }
[16:20:17.370]     ...future.result <- base::tryCatch({
[16:20:17.370]         base::withCallingHandlers({
[16:20:17.370]             ...future.value <- base::withVisible(base::local({
[16:20:17.370]                 do.call(function(...) {
[16:20:17.370]                   fcn <- function() sum(...)
[16:20:17.370]                   fcn()
[16:20:17.370]                 }, args = future.call.arguments)
[16:20:17.370]             }))
[16:20:17.370]             future::FutureResult(value = ...future.value$value, 
[16:20:17.370]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:17.370]                   ...future.rng), globalenv = if (FALSE) 
[16:20:17.370]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:17.370]                     ...future.globalenv.names))
[16:20:17.370]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:17.370]         }, condition = base::local({
[16:20:17.370]             c <- base::c
[16:20:17.370]             inherits <- base::inherits
[16:20:17.370]             invokeRestart <- base::invokeRestart
[16:20:17.370]             length <- base::length
[16:20:17.370]             list <- base::list
[16:20:17.370]             seq.int <- base::seq.int
[16:20:17.370]             signalCondition <- base::signalCondition
[16:20:17.370]             sys.calls <- base::sys.calls
[16:20:17.370]             `[[` <- base::`[[`
[16:20:17.370]             `+` <- base::`+`
[16:20:17.370]             `<<-` <- base::`<<-`
[16:20:17.370]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:17.370]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:17.370]                   3L)]
[16:20:17.370]             }
[16:20:17.370]             function(cond) {
[16:20:17.370]                 is_error <- inherits(cond, "error")
[16:20:17.370]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:17.370]                   NULL)
[16:20:17.370]                 if (is_error) {
[16:20:17.370]                   sessionInformation <- function() {
[16:20:17.370]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:17.370]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:17.370]                       search = base::search(), system = base::Sys.info())
[16:20:17.370]                   }
[16:20:17.370]                   ...future.conditions[[length(...future.conditions) + 
[16:20:17.370]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:17.370]                     cond$call), session = sessionInformation(), 
[16:20:17.370]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:17.370]                   signalCondition(cond)
[16:20:17.370]                 }
[16:20:17.370]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:17.370]                 "immediateCondition"))) {
[16:20:17.370]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:17.370]                   ...future.conditions[[length(...future.conditions) + 
[16:20:17.370]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:17.370]                   if (TRUE && !signal) {
[16:20:17.370]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:17.370]                     {
[16:20:17.370]                       inherits <- base::inherits
[16:20:17.370]                       invokeRestart <- base::invokeRestart
[16:20:17.370]                       is.null <- base::is.null
[16:20:17.370]                       muffled <- FALSE
[16:20:17.370]                       if (inherits(cond, "message")) {
[16:20:17.370]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:17.370]                         if (muffled) 
[16:20:17.370]                           invokeRestart("muffleMessage")
[16:20:17.370]                       }
[16:20:17.370]                       else if (inherits(cond, "warning")) {
[16:20:17.370]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:17.370]                         if (muffled) 
[16:20:17.370]                           invokeRestart("muffleWarning")
[16:20:17.370]                       }
[16:20:17.370]                       else if (inherits(cond, "condition")) {
[16:20:17.370]                         if (!is.null(pattern)) {
[16:20:17.370]                           computeRestarts <- base::computeRestarts
[16:20:17.370]                           grepl <- base::grepl
[16:20:17.370]                           restarts <- computeRestarts(cond)
[16:20:17.370]                           for (restart in restarts) {
[16:20:17.370]                             name <- restart$name
[16:20:17.370]                             if (is.null(name)) 
[16:20:17.370]                               next
[16:20:17.370]                             if (!grepl(pattern, name)) 
[16:20:17.370]                               next
[16:20:17.370]                             invokeRestart(restart)
[16:20:17.370]                             muffled <- TRUE
[16:20:17.370]                             break
[16:20:17.370]                           }
[16:20:17.370]                         }
[16:20:17.370]                       }
[16:20:17.370]                       invisible(muffled)
[16:20:17.370]                     }
[16:20:17.370]                     muffleCondition(cond, pattern = "^muffle")
[16:20:17.370]                   }
[16:20:17.370]                 }
[16:20:17.370]                 else {
[16:20:17.370]                   if (TRUE) {
[16:20:17.370]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:17.370]                     {
[16:20:17.370]                       inherits <- base::inherits
[16:20:17.370]                       invokeRestart <- base::invokeRestart
[16:20:17.370]                       is.null <- base::is.null
[16:20:17.370]                       muffled <- FALSE
[16:20:17.370]                       if (inherits(cond, "message")) {
[16:20:17.370]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:17.370]                         if (muffled) 
[16:20:17.370]                           invokeRestart("muffleMessage")
[16:20:17.370]                       }
[16:20:17.370]                       else if (inherits(cond, "warning")) {
[16:20:17.370]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:17.370]                         if (muffled) 
[16:20:17.370]                           invokeRestart("muffleWarning")
[16:20:17.370]                       }
[16:20:17.370]                       else if (inherits(cond, "condition")) {
[16:20:17.370]                         if (!is.null(pattern)) {
[16:20:17.370]                           computeRestarts <- base::computeRestarts
[16:20:17.370]                           grepl <- base::grepl
[16:20:17.370]                           restarts <- computeRestarts(cond)
[16:20:17.370]                           for (restart in restarts) {
[16:20:17.370]                             name <- restart$name
[16:20:17.370]                             if (is.null(name)) 
[16:20:17.370]                               next
[16:20:17.370]                             if (!grepl(pattern, name)) 
[16:20:17.370]                               next
[16:20:17.370]                             invokeRestart(restart)
[16:20:17.370]                             muffled <- TRUE
[16:20:17.370]                             break
[16:20:17.370]                           }
[16:20:17.370]                         }
[16:20:17.370]                       }
[16:20:17.370]                       invisible(muffled)
[16:20:17.370]                     }
[16:20:17.370]                     muffleCondition(cond, pattern = "^muffle")
[16:20:17.370]                   }
[16:20:17.370]                 }
[16:20:17.370]             }
[16:20:17.370]         }))
[16:20:17.370]     }, error = function(ex) {
[16:20:17.370]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:17.370]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:17.370]                 ...future.rng), started = ...future.startTime, 
[16:20:17.370]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:17.370]             version = "1.8"), class = "FutureResult")
[16:20:17.370]     }, finally = {
[16:20:17.370]         if (!identical(...future.workdir, getwd())) 
[16:20:17.370]             setwd(...future.workdir)
[16:20:17.370]         {
[16:20:17.370]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:17.370]                 ...future.oldOptions$nwarnings <- NULL
[16:20:17.370]             }
[16:20:17.370]             base::options(...future.oldOptions)
[16:20:17.370]             if (.Platform$OS.type == "windows") {
[16:20:17.370]                 old_names <- names(...future.oldEnvVars)
[16:20:17.370]                 envs <- base::Sys.getenv()
[16:20:17.370]                 names <- names(envs)
[16:20:17.370]                 common <- intersect(names, old_names)
[16:20:17.370]                 added <- setdiff(names, old_names)
[16:20:17.370]                 removed <- setdiff(old_names, names)
[16:20:17.370]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:17.370]                   envs[common]]
[16:20:17.370]                 NAMES <- toupper(changed)
[16:20:17.370]                 args <- list()
[16:20:17.370]                 for (kk in seq_along(NAMES)) {
[16:20:17.370]                   name <- changed[[kk]]
[16:20:17.370]                   NAME <- NAMES[[kk]]
[16:20:17.370]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:17.370]                     next
[16:20:17.370]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:17.370]                 }
[16:20:17.370]                 NAMES <- toupper(added)
[16:20:17.370]                 for (kk in seq_along(NAMES)) {
[16:20:17.370]                   name <- added[[kk]]
[16:20:17.370]                   NAME <- NAMES[[kk]]
[16:20:17.370]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:17.370]                     next
[16:20:17.370]                   args[[name]] <- ""
[16:20:17.370]                 }
[16:20:17.370]                 NAMES <- toupper(removed)
[16:20:17.370]                 for (kk in seq_along(NAMES)) {
[16:20:17.370]                   name <- removed[[kk]]
[16:20:17.370]                   NAME <- NAMES[[kk]]
[16:20:17.370]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:17.370]                     next
[16:20:17.370]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:17.370]                 }
[16:20:17.370]                 if (length(args) > 0) 
[16:20:17.370]                   base::do.call(base::Sys.setenv, args = args)
[16:20:17.370]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:17.370]             }
[16:20:17.370]             else {
[16:20:17.370]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:17.370]             }
[16:20:17.370]             {
[16:20:17.370]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:17.370]                   0L) {
[16:20:17.370]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:17.370]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:17.370]                   base::options(opts)
[16:20:17.370]                 }
[16:20:17.370]                 {
[16:20:17.370]                   {
[16:20:17.370]                     NULL
[16:20:17.370]                     RNGkind("Mersenne-Twister")
[16:20:17.370]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:17.370]                       inherits = FALSE)
[16:20:17.370]                   }
[16:20:17.370]                   options(future.plan = NULL)
[16:20:17.370]                   if (is.na(NA_character_)) 
[16:20:17.370]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:17.370]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:17.370]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:17.370]                     .init = FALSE)
[16:20:17.370]                 }
[16:20:17.370]             }
[16:20:17.370]         }
[16:20:17.370]     })
[16:20:17.370]     if (TRUE) {
[16:20:17.370]         base::sink(type = "output", split = FALSE)
[16:20:17.370]         if (TRUE) {
[16:20:17.370]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:17.370]         }
[16:20:17.370]         else {
[16:20:17.370]             ...future.result["stdout"] <- base::list(NULL)
[16:20:17.370]         }
[16:20:17.370]         base::close(...future.stdout)
[16:20:17.370]         ...future.stdout <- NULL
[16:20:17.370]     }
[16:20:17.370]     ...future.result$conditions <- ...future.conditions
[16:20:17.370]     ...future.result$finished <- base::Sys.time()
[16:20:17.370]     ...future.result
[16:20:17.370] }
[16:20:17.372] assign_globals() ...
[16:20:17.372] List of 1
[16:20:17.372]  $ future.call.arguments:List of 2
[16:20:17.372]   ..$ : int [1:2] 1 2
[16:20:17.372]   ..$ : num 3
[16:20:17.372]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:20:17.372]  - attr(*, "where")=List of 1
[16:20:17.372]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[16:20:17.372]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:17.372]  - attr(*, "resolved")= logi FALSE
[16:20:17.372]  - attr(*, "total_size")= num 112
[16:20:17.372]  - attr(*, "already-done")= logi TRUE
[16:20:17.375] - copied ‘future.call.arguments’ to environment
[16:20:17.375] assign_globals() ... done
[16:20:17.375] plan(): Setting new future strategy stack:
[16:20:17.375] List of future strategies:
[16:20:17.375] 1. sequential:
[16:20:17.375]    - args: function (..., envir = parent.frame())
[16:20:17.375]    - tweaked: FALSE
[16:20:17.375]    - call: NULL
[16:20:17.376] plan(): nbrOfWorkers() = 1
[16:20:17.377] plan(): Setting new future strategy stack:
[16:20:17.377] List of future strategies:
[16:20:17.377] 1. sequential:
[16:20:17.377]    - args: function (..., envir = parent.frame())
[16:20:17.377]    - tweaked: FALSE
[16:20:17.377]    - call: plan(strategy, substitute = FALSE)
[16:20:17.377] plan(): nbrOfWorkers() = 1
[16:20:17.377] SequentialFuture started (and completed)
[16:20:17.377] - Launch lazy future ... done
[16:20:17.377] run() for ‘SequentialFuture’ ... done
[1] 6
** Sum function 'F' with plan('sequential') ...
function (x, y) 
{
    message("Using '...' in a formula")
    fcn <- function(x, y) {
        z = ~list(...)
        sum(x, y)
    }
    f <- future(fcn(x, y))
    y <- value(f)
    y
}
<bytecode: 0x55ed0036e828>
Using '...' in a formula
[16:20:17.378] getGlobalsAndPackages() ...
[16:20:17.378] Searching for globals...
[16:20:17.381] - globals found: [9] ‘fcn’, ‘x’, ‘y’, ‘{’, ‘=’, ‘~’, ‘list’, ‘...’, ‘sum’
[16:20:17.381] Searching for globals ... DONE
[16:20:17.381] Resolving globals: FALSE
[16:20:17.381] Tweak future expression to call with '...' arguments ...
[16:20:17.382] The total size of the 3 globals is 4.18 KiB (4280 bytes)
[16:20:17.382] The total size of the 3 globals exported for future expression (‘fcn(x, y)’) is 4.18 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘fcn’ (4.07 KiB of class ‘function’), ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[16:20:17.382] - globals: [3] ‘fcn’, ‘x’, ‘y’
[16:20:17.382] 
[16:20:17.382] getGlobalsAndPackages() ... DONE
[16:20:17.383] run() for ‘Future’ ...
[16:20:17.383] - state: ‘created’
[16:20:17.383] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:17.383] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:17.383] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:17.383]   - Field: ‘label’
[16:20:17.383]   - Field: ‘local’
[16:20:17.385]   - Field: ‘owner’
[16:20:17.385]   - Field: ‘envir’
[16:20:17.385]   - Field: ‘packages’
[16:20:17.385]   - Field: ‘gc’
[16:20:17.386]   - Field: ‘conditions’
[16:20:17.386]   - Field: ‘expr’
[16:20:17.386]   - Field: ‘uuid’
[16:20:17.386]   - Field: ‘seed’
[16:20:17.386]   - Field: ‘version’
[16:20:17.386]   - Field: ‘result’
[16:20:17.386]   - Field: ‘asynchronous’
[16:20:17.386]   - Field: ‘calls’
[16:20:17.386]   - Field: ‘globals’
[16:20:17.386]   - Field: ‘stdout’
[16:20:17.387]   - Field: ‘earlySignal’
[16:20:17.387]   - Field: ‘lazy’
[16:20:17.387]   - Field: ‘state’
[16:20:17.387] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:17.387] - Launch lazy future ...
[16:20:17.387] Packages needed by the future expression (n = 0): <none>
[16:20:17.387] Packages needed by future strategies (n = 0): <none>
[16:20:17.388] {
[16:20:17.388]     {
[16:20:17.388]         {
[16:20:17.388]             ...future.startTime <- base::Sys.time()
[16:20:17.388]             {
[16:20:17.388]                 {
[16:20:17.388]                   {
[16:20:17.388]                     base::local({
[16:20:17.388]                       has_future <- base::requireNamespace("future", 
[16:20:17.388]                         quietly = TRUE)
[16:20:17.388]                       if (has_future) {
[16:20:17.388]                         ns <- base::getNamespace("future")
[16:20:17.388]                         version <- ns[[".package"]][["version"]]
[16:20:17.388]                         if (is.null(version)) 
[16:20:17.388]                           version <- utils::packageVersion("future")
[16:20:17.388]                       }
[16:20:17.388]                       else {
[16:20:17.388]                         version <- NULL
[16:20:17.388]                       }
[16:20:17.388]                       if (!has_future || version < "1.8.0") {
[16:20:17.388]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:17.388]                           "", base::R.version$version.string), 
[16:20:17.388]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:17.388]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:17.388]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:17.388]                             "release", "version")], collapse = " "), 
[16:20:17.388]                           hostname = base::Sys.info()[["nodename"]])
[16:20:17.388]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:17.388]                           info)
[16:20:17.388]                         info <- base::paste(info, collapse = "; ")
[16:20:17.388]                         if (!has_future) {
[16:20:17.388]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:17.388]                             info)
[16:20:17.388]                         }
[16:20:17.388]                         else {
[16:20:17.388]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:17.388]                             info, version)
[16:20:17.388]                         }
[16:20:17.388]                         base::stop(msg)
[16:20:17.388]                       }
[16:20:17.388]                     })
[16:20:17.388]                   }
[16:20:17.388]                   ...future.strategy.old <- future::plan("list")
[16:20:17.388]                   options(future.plan = NULL)
[16:20:17.388]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:17.388]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:17.388]                 }
[16:20:17.388]                 ...future.workdir <- getwd()
[16:20:17.388]             }
[16:20:17.388]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:17.388]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:17.388]         }
[16:20:17.388]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:17.388]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:17.388]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:17.388]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:17.388]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:17.388]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:17.388]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:17.388]             base::names(...future.oldOptions))
[16:20:17.388]     }
[16:20:17.388]     if (FALSE) {
[16:20:17.388]     }
[16:20:17.388]     else {
[16:20:17.388]         if (TRUE) {
[16:20:17.388]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:17.388]                 open = "w")
[16:20:17.388]         }
[16:20:17.388]         else {
[16:20:17.388]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:17.388]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:17.388]         }
[16:20:17.388]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:17.388]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:17.388]             base::sink(type = "output", split = FALSE)
[16:20:17.388]             base::close(...future.stdout)
[16:20:17.388]         }, add = TRUE)
[16:20:17.388]     }
[16:20:17.388]     ...future.frame <- base::sys.nframe()
[16:20:17.388]     ...future.conditions <- base::list()
[16:20:17.388]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:17.388]     if (FALSE) {
[16:20:17.388]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:17.388]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:17.388]     }
[16:20:17.388]     ...future.result <- base::tryCatch({
[16:20:17.388]         base::withCallingHandlers({
[16:20:17.388]             ...future.value <- base::withVisible(base::local(fcn(x, 
[16:20:17.388]                 y)))
[16:20:17.388]             future::FutureResult(value = ...future.value$value, 
[16:20:17.388]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:17.388]                   ...future.rng), globalenv = if (FALSE) 
[16:20:17.388]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:17.388]                     ...future.globalenv.names))
[16:20:17.388]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:17.388]         }, condition = base::local({
[16:20:17.388]             c <- base::c
[16:20:17.388]             inherits <- base::inherits
[16:20:17.388]             invokeRestart <- base::invokeRestart
[16:20:17.388]             length <- base::length
[16:20:17.388]             list <- base::list
[16:20:17.388]             seq.int <- base::seq.int
[16:20:17.388]             signalCondition <- base::signalCondition
[16:20:17.388]             sys.calls <- base::sys.calls
[16:20:17.388]             `[[` <- base::`[[`
[16:20:17.388]             `+` <- base::`+`
[16:20:17.388]             `<<-` <- base::`<<-`
[16:20:17.388]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:17.388]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:17.388]                   3L)]
[16:20:17.388]             }
[16:20:17.388]             function(cond) {
[16:20:17.388]                 is_error <- inherits(cond, "error")
[16:20:17.388]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:17.388]                   NULL)
[16:20:17.388]                 if (is_error) {
[16:20:17.388]                   sessionInformation <- function() {
[16:20:17.388]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:17.388]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:17.388]                       search = base::search(), system = base::Sys.info())
[16:20:17.388]                   }
[16:20:17.388]                   ...future.conditions[[length(...future.conditions) + 
[16:20:17.388]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:17.388]                     cond$call), session = sessionInformation(), 
[16:20:17.388]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:17.388]                   signalCondition(cond)
[16:20:17.388]                 }
[16:20:17.388]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:17.388]                 "immediateCondition"))) {
[16:20:17.388]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:17.388]                   ...future.conditions[[length(...future.conditions) + 
[16:20:17.388]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:17.388]                   if (TRUE && !signal) {
[16:20:17.388]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:17.388]                     {
[16:20:17.388]                       inherits <- base::inherits
[16:20:17.388]                       invokeRestart <- base::invokeRestart
[16:20:17.388]                       is.null <- base::is.null
[16:20:17.388]                       muffled <- FALSE
[16:20:17.388]                       if (inherits(cond, "message")) {
[16:20:17.388]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:17.388]                         if (muffled) 
[16:20:17.388]                           invokeRestart("muffleMessage")
[16:20:17.388]                       }
[16:20:17.388]                       else if (inherits(cond, "warning")) {
[16:20:17.388]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:17.388]                         if (muffled) 
[16:20:17.388]                           invokeRestart("muffleWarning")
[16:20:17.388]                       }
[16:20:17.388]                       else if (inherits(cond, "condition")) {
[16:20:17.388]                         if (!is.null(pattern)) {
[16:20:17.388]                           computeRestarts <- base::computeRestarts
[16:20:17.388]                           grepl <- base::grepl
[16:20:17.388]                           restarts <- computeRestarts(cond)
[16:20:17.388]                           for (restart in restarts) {
[16:20:17.388]                             name <- restart$name
[16:20:17.388]                             if (is.null(name)) 
[16:20:17.388]                               next
[16:20:17.388]                             if (!grepl(pattern, name)) 
[16:20:17.388]                               next
[16:20:17.388]                             invokeRestart(restart)
[16:20:17.388]                             muffled <- TRUE
[16:20:17.388]                             break
[16:20:17.388]                           }
[16:20:17.388]                         }
[16:20:17.388]                       }
[16:20:17.388]                       invisible(muffled)
[16:20:17.388]                     }
[16:20:17.388]                     muffleCondition(cond, pattern = "^muffle")
[16:20:17.388]                   }
[16:20:17.388]                 }
[16:20:17.388]                 else {
[16:20:17.388]                   if (TRUE) {
[16:20:17.388]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:17.388]                     {
[16:20:17.388]                       inherits <- base::inherits
[16:20:17.388]                       invokeRestart <- base::invokeRestart
[16:20:17.388]                       is.null <- base::is.null
[16:20:17.388]                       muffled <- FALSE
[16:20:17.388]                       if (inherits(cond, "message")) {
[16:20:17.388]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:17.388]                         if (muffled) 
[16:20:17.388]                           invokeRestart("muffleMessage")
[16:20:17.388]                       }
[16:20:17.388]                       else if (inherits(cond, "warning")) {
[16:20:17.388]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:17.388]                         if (muffled) 
[16:20:17.388]                           invokeRestart("muffleWarning")
[16:20:17.388]                       }
[16:20:17.388]                       else if (inherits(cond, "condition")) {
[16:20:17.388]                         if (!is.null(pattern)) {
[16:20:17.388]                           computeRestarts <- base::computeRestarts
[16:20:17.388]                           grepl <- base::grepl
[16:20:17.388]                           restarts <- computeRestarts(cond)
[16:20:17.388]                           for (restart in restarts) {
[16:20:17.388]                             name <- restart$name
[16:20:17.388]                             if (is.null(name)) 
[16:20:17.388]                               next
[16:20:17.388]                             if (!grepl(pattern, name)) 
[16:20:17.388]                               next
[16:20:17.388]                             invokeRestart(restart)
[16:20:17.388]                             muffled <- TRUE
[16:20:17.388]                             break
[16:20:17.388]                           }
[16:20:17.388]                         }
[16:20:17.388]                       }
[16:20:17.388]                       invisible(muffled)
[16:20:17.388]                     }
[16:20:17.388]                     muffleCondition(cond, pattern = "^muffle")
[16:20:17.388]                   }
[16:20:17.388]                 }
[16:20:17.388]             }
[16:20:17.388]         }))
[16:20:17.388]     }, error = function(ex) {
[16:20:17.388]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:17.388]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:17.388]                 ...future.rng), started = ...future.startTime, 
[16:20:17.388]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:17.388]             version = "1.8"), class = "FutureResult")
[16:20:17.388]     }, finally = {
[16:20:17.388]         if (!identical(...future.workdir, getwd())) 
[16:20:17.388]             setwd(...future.workdir)
[16:20:17.388]         {
[16:20:17.388]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:17.388]                 ...future.oldOptions$nwarnings <- NULL
[16:20:17.388]             }
[16:20:17.388]             base::options(...future.oldOptions)
[16:20:17.388]             if (.Platform$OS.type == "windows") {
[16:20:17.388]                 old_names <- names(...future.oldEnvVars)
[16:20:17.388]                 envs <- base::Sys.getenv()
[16:20:17.388]                 names <- names(envs)
[16:20:17.388]                 common <- intersect(names, old_names)
[16:20:17.388]                 added <- setdiff(names, old_names)
[16:20:17.388]                 removed <- setdiff(old_names, names)
[16:20:17.388]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:17.388]                   envs[common]]
[16:20:17.388]                 NAMES <- toupper(changed)
[16:20:17.388]                 args <- list()
[16:20:17.388]                 for (kk in seq_along(NAMES)) {
[16:20:17.388]                   name <- changed[[kk]]
[16:20:17.388]                   NAME <- NAMES[[kk]]
[16:20:17.388]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:17.388]                     next
[16:20:17.388]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:17.388]                 }
[16:20:17.388]                 NAMES <- toupper(added)
[16:20:17.388]                 for (kk in seq_along(NAMES)) {
[16:20:17.388]                   name <- added[[kk]]
[16:20:17.388]                   NAME <- NAMES[[kk]]
[16:20:17.388]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:17.388]                     next
[16:20:17.388]                   args[[name]] <- ""
[16:20:17.388]                 }
[16:20:17.388]                 NAMES <- toupper(removed)
[16:20:17.388]                 for (kk in seq_along(NAMES)) {
[16:20:17.388]                   name <- removed[[kk]]
[16:20:17.388]                   NAME <- NAMES[[kk]]
[16:20:17.388]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:17.388]                     next
[16:20:17.388]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:17.388]                 }
[16:20:17.388]                 if (length(args) > 0) 
[16:20:17.388]                   base::do.call(base::Sys.setenv, args = args)
[16:20:17.388]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:17.388]             }
[16:20:17.388]             else {
[16:20:17.388]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:17.388]             }
[16:20:17.388]             {
[16:20:17.388]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:17.388]                   0L) {
[16:20:17.388]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:17.388]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:17.388]                   base::options(opts)
[16:20:17.388]                 }
[16:20:17.388]                 {
[16:20:17.388]                   {
[16:20:17.388]                     NULL
[16:20:17.388]                     RNGkind("Mersenne-Twister")
[16:20:17.388]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:17.388]                       inherits = FALSE)
[16:20:17.388]                   }
[16:20:17.388]                   options(future.plan = NULL)
[16:20:17.388]                   if (is.na(NA_character_)) 
[16:20:17.388]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:17.388]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:17.388]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:17.388]                     .init = FALSE)
[16:20:17.388]                 }
[16:20:17.388]             }
[16:20:17.388]         }
[16:20:17.388]     })
[16:20:17.388]     if (TRUE) {
[16:20:17.388]         base::sink(type = "output", split = FALSE)
[16:20:17.388]         if (TRUE) {
[16:20:17.388]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:17.388]         }
[16:20:17.388]         else {
[16:20:17.388]             ...future.result["stdout"] <- base::list(NULL)
[16:20:17.388]         }
[16:20:17.388]         base::close(...future.stdout)
[16:20:17.388]         ...future.stdout <- NULL
[16:20:17.388]     }
[16:20:17.388]     ...future.result$conditions <- ...future.conditions
[16:20:17.388]     ...future.result$finished <- base::Sys.time()
[16:20:17.388]     ...future.result
[16:20:17.388] }
[16:20:17.389] assign_globals() ...
[16:20:17.389] List of 3
[16:20:17.389]  $ fcn:function (x, y)  
[16:20:17.389]  $ x  : int [1:2] 1 2
[16:20:17.389]  $ y  : num 3
[16:20:17.389]  - attr(*, "where")=List of 3
[16:20:17.389]   ..$ fcn:<environment: R_EmptyEnv> 
[16:20:17.389]   ..$ x  :<environment: R_EmptyEnv> 
[16:20:17.389]   ..$ y  :<environment: R_EmptyEnv> 
[16:20:17.389]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:17.389]  - attr(*, "resolved")= logi FALSE
[16:20:17.389]  - attr(*, "total_size")= num 4280
[16:20:17.389]  - attr(*, "already-done")= logi TRUE
[16:20:17.393] - reassign environment for ‘fcn’
[16:20:17.393] - copied ‘fcn’ to environment
[16:20:17.393] - copied ‘x’ to environment
[16:20:17.393] - copied ‘y’ to environment
[16:20:17.393] assign_globals() ... done
[16:20:17.393] plan(): Setting new future strategy stack:
[16:20:17.393] List of future strategies:
[16:20:17.393] 1. sequential:
[16:20:17.393]    - args: function (..., envir = parent.frame())
[16:20:17.393]    - tweaked: FALSE
[16:20:17.393]    - call: NULL
[16:20:17.394] plan(): nbrOfWorkers() = 1
[16:20:17.394] plan(): Setting new future strategy stack:
[16:20:17.395] List of future strategies:
[16:20:17.395] 1. sequential:
[16:20:17.395]    - args: function (..., envir = parent.frame())
[16:20:17.395]    - tweaked: FALSE
[16:20:17.395]    - call: plan(strategy, substitute = FALSE)
[16:20:17.395] plan(): nbrOfWorkers() = 1
[16:20:17.395] SequentialFuture started (and completed)
[16:20:17.395] - Launch lazy future ... done
[16:20:17.395] run() for ‘SequentialFuture’ ... done
[1] 6
Testing with 1 cores ... DONE
Testing with 2 cores ...
*** Global argument '...' ...
- plan('multicore') ...
[16:20:17.400] plan(): Setting new future strategy stack:
[16:20:17.401] List of future strategies:
[16:20:17.401] 1. multicore:
[16:20:17.401]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:20:17.401]    - tweaked: FALSE
[16:20:17.401]    - call: plan(strategy, substitute = FALSE)
[16:20:17.404] plan(): nbrOfWorkers() = 2
** Sum function 'A' with plan('multicore') ...
function (x, ...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, ...)
    }
    y
}
<bytecode: 0x55ed022c4198>
Arguments '...' exists: TRUE
[16:20:17.405] getGlobalsAndPackages() ...
[16:20:17.405] Searching for globals...
[16:20:17.406] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[16:20:17.406] Searching for globals ... DONE
[16:20:17.406] Resolving globals: FALSE
[16:20:17.407] Tweak future expression to call with '...' arguments ...
[16:20:17.407] {
[16:20:17.407]     do.call(function(...) {
[16:20:17.407]         sum(x, ...)
[16:20:17.407]     }, args = future.call.arguments)
[16:20:17.407] }
[16:20:17.407] Tweak future expression to call with '...' arguments ... DONE
[16:20:17.407] The total size of the 2 globals is 112 bytes (112 bytes)
[16:20:17.408] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[16:20:17.408] - globals: [2] ‘x’, ‘future.call.arguments’
[16:20:17.408] 
[16:20:17.408] getGlobalsAndPackages() ... DONE
[16:20:17.408] run() for ‘Future’ ...
[16:20:17.408] - state: ‘created’
[16:20:17.409] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:20:17.412] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:17.412] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:20:17.412]   - Field: ‘label’
[16:20:17.412]   - Field: ‘local’
[16:20:17.412]   - Field: ‘owner’
[16:20:17.413]   - Field: ‘envir’
[16:20:17.413]   - Field: ‘workers’
[16:20:17.413]   - Field: ‘packages’
[16:20:17.413]   - Field: ‘gc’
[16:20:17.413]   - Field: ‘job’
[16:20:17.413]   - Field: ‘conditions’
[16:20:17.413]   - Field: ‘expr’
[16:20:17.413]   - Field: ‘uuid’
[16:20:17.413]   - Field: ‘seed’
[16:20:17.413]   - Field: ‘version’
[16:20:17.415]   - Field: ‘result’
[16:20:17.415]   - Field: ‘asynchronous’
[16:20:17.415]   - Field: ‘calls’
[16:20:17.415]   - Field: ‘globals’
[16:20:17.415]   - Field: ‘stdout’
[16:20:17.415]   - Field: ‘earlySignal’
[16:20:17.415]   - Field: ‘lazy’
[16:20:17.415]   - Field: ‘state’
[16:20:17.415] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:20:17.416] - Launch lazy future ...
[16:20:17.417] Packages needed by the future expression (n = 0): <none>
[16:20:17.417] Packages needed by future strategies (n = 0): <none>
[16:20:17.417] {
[16:20:17.417]     {
[16:20:17.417]         {
[16:20:17.417]             ...future.startTime <- base::Sys.time()
[16:20:17.417]             {
[16:20:17.417]                 {
[16:20:17.417]                   {
[16:20:17.417]                     {
[16:20:17.417]                       base::local({
[16:20:17.417]                         has_future <- base::requireNamespace("future", 
[16:20:17.417]                           quietly = TRUE)
[16:20:17.417]                         if (has_future) {
[16:20:17.417]                           ns <- base::getNamespace("future")
[16:20:17.417]                           version <- ns[[".package"]][["version"]]
[16:20:17.417]                           if (is.null(version)) 
[16:20:17.417]                             version <- utils::packageVersion("future")
[16:20:17.417]                         }
[16:20:17.417]                         else {
[16:20:17.417]                           version <- NULL
[16:20:17.417]                         }
[16:20:17.417]                         if (!has_future || version < "1.8.0") {
[16:20:17.417]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:17.417]                             "", base::R.version$version.string), 
[16:20:17.417]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:17.417]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:17.417]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:17.417]                               "release", "version")], collapse = " "), 
[16:20:17.417]                             hostname = base::Sys.info()[["nodename"]])
[16:20:17.417]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:17.417]                             info)
[16:20:17.417]                           info <- base::paste(info, collapse = "; ")
[16:20:17.417]                           if (!has_future) {
[16:20:17.417]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:17.417]                               info)
[16:20:17.417]                           }
[16:20:17.417]                           else {
[16:20:17.417]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:17.417]                               info, version)
[16:20:17.417]                           }
[16:20:17.417]                           base::stop(msg)
[16:20:17.417]                         }
[16:20:17.417]                       })
[16:20:17.417]                     }
[16:20:17.417]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:17.417]                     base::options(mc.cores = 1L)
[16:20:17.417]                   }
[16:20:17.417]                   ...future.strategy.old <- future::plan("list")
[16:20:17.417]                   options(future.plan = NULL)
[16:20:17.417]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:17.417]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:17.417]                 }
[16:20:17.417]                 ...future.workdir <- getwd()
[16:20:17.417]             }
[16:20:17.417]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:17.417]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:17.417]         }
[16:20:17.417]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:17.417]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:17.417]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:17.417]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:17.417]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:17.417]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:17.417]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:17.417]             base::names(...future.oldOptions))
[16:20:17.417]     }
[16:20:17.417]     if (FALSE) {
[16:20:17.417]     }
[16:20:17.417]     else {
[16:20:17.417]         if (TRUE) {
[16:20:17.417]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:17.417]                 open = "w")
[16:20:17.417]         }
[16:20:17.417]         else {
[16:20:17.417]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:17.417]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:17.417]         }
[16:20:17.417]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:17.417]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:17.417]             base::sink(type = "output", split = FALSE)
[16:20:17.417]             base::close(...future.stdout)
[16:20:17.417]         }, add = TRUE)
[16:20:17.417]     }
[16:20:17.417]     ...future.frame <- base::sys.nframe()
[16:20:17.417]     ...future.conditions <- base::list()
[16:20:17.417]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:17.417]     if (FALSE) {
[16:20:17.417]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:17.417]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:17.417]     }
[16:20:17.417]     ...future.result <- base::tryCatch({
[16:20:17.417]         base::withCallingHandlers({
[16:20:17.417]             ...future.value <- base::withVisible(base::local({
[16:20:17.417]                 withCallingHandlers({
[16:20:17.417]                   {
[16:20:17.417]                     do.call(function(...) {
[16:20:17.417]                       sum(x, ...)
[16:20:17.417]                     }, args = future.call.arguments)
[16:20:17.417]                   }
[16:20:17.417]                 }, immediateCondition = function(cond) {
[16:20:17.417]                   save_rds <- function (object, pathname, ...) 
[16:20:17.417]                   {
[16:20:17.417]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:20:17.417]                     if (file_test("-f", pathname_tmp)) {
[16:20:17.417]                       fi_tmp <- file.info(pathname_tmp)
[16:20:17.417]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:20:17.417]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:17.417]                         fi_tmp[["mtime"]])
[16:20:17.417]                     }
[16:20:17.417]                     tryCatch({
[16:20:17.417]                       saveRDS(object, file = pathname_tmp, ...)
[16:20:17.417]                     }, error = function(ex) {
[16:20:17.417]                       msg <- conditionMessage(ex)
[16:20:17.417]                       fi_tmp <- file.info(pathname_tmp)
[16:20:17.417]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:20:17.417]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:17.417]                         fi_tmp[["mtime"]], msg)
[16:20:17.417]                       ex$message <- msg
[16:20:17.417]                       stop(ex)
[16:20:17.417]                     })
[16:20:17.417]                     stopifnot(file_test("-f", pathname_tmp))
[16:20:17.417]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:20:17.417]                     if (!res || file_test("-f", pathname_tmp)) {
[16:20:17.417]                       fi_tmp <- file.info(pathname_tmp)
[16:20:17.417]                       fi <- file.info(pathname)
[16:20:17.417]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:20:17.417]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:17.417]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:20:17.417]                         fi[["size"]], fi[["mtime"]])
[16:20:17.417]                       stop(msg)
[16:20:17.417]                     }
[16:20:17.417]                     invisible(pathname)
[16:20:17.417]                   }
[16:20:17.417]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:20:17.417]                     rootPath = tempdir()) 
[16:20:17.417]                   {
[16:20:17.417]                     obj <- list(time = Sys.time(), condition = cond)
[16:20:17.417]                     file <- tempfile(pattern = class(cond)[1], 
[16:20:17.417]                       tmpdir = path, fileext = ".rds")
[16:20:17.417]                     save_rds(obj, file)
[16:20:17.417]                   }
[16:20:17.417]                   saveImmediateCondition(cond, path = "/tmp/RtmpGMDtVt/.future/immediateConditions")
[16:20:17.417]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:17.417]                   {
[16:20:17.417]                     inherits <- base::inherits
[16:20:17.417]                     invokeRestart <- base::invokeRestart
[16:20:17.417]                     is.null <- base::is.null
[16:20:17.417]                     muffled <- FALSE
[16:20:17.417]                     if (inherits(cond, "message")) {
[16:20:17.417]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:17.417]                       if (muffled) 
[16:20:17.417]                         invokeRestart("muffleMessage")
[16:20:17.417]                     }
[16:20:17.417]                     else if (inherits(cond, "warning")) {
[16:20:17.417]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:17.417]                       if (muffled) 
[16:20:17.417]                         invokeRestart("muffleWarning")
[16:20:17.417]                     }
[16:20:17.417]                     else if (inherits(cond, "condition")) {
[16:20:17.417]                       if (!is.null(pattern)) {
[16:20:17.417]                         computeRestarts <- base::computeRestarts
[16:20:17.417]                         grepl <- base::grepl
[16:20:17.417]                         restarts <- computeRestarts(cond)
[16:20:17.417]                         for (restart in restarts) {
[16:20:17.417]                           name <- restart$name
[16:20:17.417]                           if (is.null(name)) 
[16:20:17.417]                             next
[16:20:17.417]                           if (!grepl(pattern, name)) 
[16:20:17.417]                             next
[16:20:17.417]                           invokeRestart(restart)
[16:20:17.417]                           muffled <- TRUE
[16:20:17.417]                           break
[16:20:17.417]                         }
[16:20:17.417]                       }
[16:20:17.417]                     }
[16:20:17.417]                     invisible(muffled)
[16:20:17.417]                   }
[16:20:17.417]                   muffleCondition(cond)
[16:20:17.417]                 })
[16:20:17.417]             }))
[16:20:17.417]             future::FutureResult(value = ...future.value$value, 
[16:20:17.417]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:17.417]                   ...future.rng), globalenv = if (FALSE) 
[16:20:17.417]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:17.417]                     ...future.globalenv.names))
[16:20:17.417]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:17.417]         }, condition = base::local({
[16:20:17.417]             c <- base::c
[16:20:17.417]             inherits <- base::inherits
[16:20:17.417]             invokeRestart <- base::invokeRestart
[16:20:17.417]             length <- base::length
[16:20:17.417]             list <- base::list
[16:20:17.417]             seq.int <- base::seq.int
[16:20:17.417]             signalCondition <- base::signalCondition
[16:20:17.417]             sys.calls <- base::sys.calls
[16:20:17.417]             `[[` <- base::`[[`
[16:20:17.417]             `+` <- base::`+`
[16:20:17.417]             `<<-` <- base::`<<-`
[16:20:17.417]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:17.417]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:17.417]                   3L)]
[16:20:17.417]             }
[16:20:17.417]             function(cond) {
[16:20:17.417]                 is_error <- inherits(cond, "error")
[16:20:17.417]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:17.417]                   NULL)
[16:20:17.417]                 if (is_error) {
[16:20:17.417]                   sessionInformation <- function() {
[16:20:17.417]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:17.417]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:17.417]                       search = base::search(), system = base::Sys.info())
[16:20:17.417]                   }
[16:20:17.417]                   ...future.conditions[[length(...future.conditions) + 
[16:20:17.417]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:17.417]                     cond$call), session = sessionInformation(), 
[16:20:17.417]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:17.417]                   signalCondition(cond)
[16:20:17.417]                 }
[16:20:17.417]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:17.417]                 "immediateCondition"))) {
[16:20:17.417]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:17.417]                   ...future.conditions[[length(...future.conditions) + 
[16:20:17.417]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:17.417]                   if (TRUE && !signal) {
[16:20:17.417]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:17.417]                     {
[16:20:17.417]                       inherits <- base::inherits
[16:20:17.417]                       invokeRestart <- base::invokeRestart
[16:20:17.417]                       is.null <- base::is.null
[16:20:17.417]                       muffled <- FALSE
[16:20:17.417]                       if (inherits(cond, "message")) {
[16:20:17.417]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:17.417]                         if (muffled) 
[16:20:17.417]                           invokeRestart("muffleMessage")
[16:20:17.417]                       }
[16:20:17.417]                       else if (inherits(cond, "warning")) {
[16:20:17.417]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:17.417]                         if (muffled) 
[16:20:17.417]                           invokeRestart("muffleWarning")
[16:20:17.417]                       }
[16:20:17.417]                       else if (inherits(cond, "condition")) {
[16:20:17.417]                         if (!is.null(pattern)) {
[16:20:17.417]                           computeRestarts <- base::computeRestarts
[16:20:17.417]                           grepl <- base::grepl
[16:20:17.417]                           restarts <- computeRestarts(cond)
[16:20:17.417]                           for (restart in restarts) {
[16:20:17.417]                             name <- restart$name
[16:20:17.417]                             if (is.null(name)) 
[16:20:17.417]                               next
[16:20:17.417]                             if (!grepl(pattern, name)) 
[16:20:17.417]                               next
[16:20:17.417]                             invokeRestart(restart)
[16:20:17.417]                             muffled <- TRUE
[16:20:17.417]                             break
[16:20:17.417]                           }
[16:20:17.417]                         }
[16:20:17.417]                       }
[16:20:17.417]                       invisible(muffled)
[16:20:17.417]                     }
[16:20:17.417]                     muffleCondition(cond, pattern = "^muffle")
[16:20:17.417]                   }
[16:20:17.417]                 }
[16:20:17.417]                 else {
[16:20:17.417]                   if (TRUE) {
[16:20:17.417]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:17.417]                     {
[16:20:17.417]                       inherits <- base::inherits
[16:20:17.417]                       invokeRestart <- base::invokeRestart
[16:20:17.417]                       is.null <- base::is.null
[16:20:17.417]                       muffled <- FALSE
[16:20:17.417]                       if (inherits(cond, "message")) {
[16:20:17.417]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:17.417]                         if (muffled) 
[16:20:17.417]                           invokeRestart("muffleMessage")
[16:20:17.417]                       }
[16:20:17.417]                       else if (inherits(cond, "warning")) {
[16:20:17.417]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:17.417]                         if (muffled) 
[16:20:17.417]                           invokeRestart("muffleWarning")
[16:20:17.417]                       }
[16:20:17.417]                       else if (inherits(cond, "condition")) {
[16:20:17.417]                         if (!is.null(pattern)) {
[16:20:17.417]                           computeRestarts <- base::computeRestarts
[16:20:17.417]                           grepl <- base::grepl
[16:20:17.417]                           restarts <- computeRestarts(cond)
[16:20:17.417]                           for (restart in restarts) {
[16:20:17.417]                             name <- restart$name
[16:20:17.417]                             if (is.null(name)) 
[16:20:17.417]                               next
[16:20:17.417]                             if (!grepl(pattern, name)) 
[16:20:17.417]                               next
[16:20:17.417]                             invokeRestart(restart)
[16:20:17.417]                             muffled <- TRUE
[16:20:17.417]                             break
[16:20:17.417]                           }
[16:20:17.417]                         }
[16:20:17.417]                       }
[16:20:17.417]                       invisible(muffled)
[16:20:17.417]                     }
[16:20:17.417]                     muffleCondition(cond, pattern = "^muffle")
[16:20:17.417]                   }
[16:20:17.417]                 }
[16:20:17.417]             }
[16:20:17.417]         }))
[16:20:17.417]     }, error = function(ex) {
[16:20:17.417]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:17.417]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:17.417]                 ...future.rng), started = ...future.startTime, 
[16:20:17.417]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:17.417]             version = "1.8"), class = "FutureResult")
[16:20:17.417]     }, finally = {
[16:20:17.417]         if (!identical(...future.workdir, getwd())) 
[16:20:17.417]             setwd(...future.workdir)
[16:20:17.417]         {
[16:20:17.417]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:17.417]                 ...future.oldOptions$nwarnings <- NULL
[16:20:17.417]             }
[16:20:17.417]             base::options(...future.oldOptions)
[16:20:17.417]             if (.Platform$OS.type == "windows") {
[16:20:17.417]                 old_names <- names(...future.oldEnvVars)
[16:20:17.417]                 envs <- base::Sys.getenv()
[16:20:17.417]                 names <- names(envs)
[16:20:17.417]                 common <- intersect(names, old_names)
[16:20:17.417]                 added <- setdiff(names, old_names)
[16:20:17.417]                 removed <- setdiff(old_names, names)
[16:20:17.417]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:17.417]                   envs[common]]
[16:20:17.417]                 NAMES <- toupper(changed)
[16:20:17.417]                 args <- list()
[16:20:17.417]                 for (kk in seq_along(NAMES)) {
[16:20:17.417]                   name <- changed[[kk]]
[16:20:17.417]                   NAME <- NAMES[[kk]]
[16:20:17.417]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:17.417]                     next
[16:20:17.417]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:17.417]                 }
[16:20:17.417]                 NAMES <- toupper(added)
[16:20:17.417]                 for (kk in seq_along(NAMES)) {
[16:20:17.417]                   name <- added[[kk]]
[16:20:17.417]                   NAME <- NAMES[[kk]]
[16:20:17.417]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:17.417]                     next
[16:20:17.417]                   args[[name]] <- ""
[16:20:17.417]                 }
[16:20:17.417]                 NAMES <- toupper(removed)
[16:20:17.417]                 for (kk in seq_along(NAMES)) {
[16:20:17.417]                   name <- removed[[kk]]
[16:20:17.417]                   NAME <- NAMES[[kk]]
[16:20:17.417]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:17.417]                     next
[16:20:17.417]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:17.417]                 }
[16:20:17.417]                 if (length(args) > 0) 
[16:20:17.417]                   base::do.call(base::Sys.setenv, args = args)
[16:20:17.417]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:17.417]             }
[16:20:17.417]             else {
[16:20:17.417]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:17.417]             }
[16:20:17.417]             {
[16:20:17.417]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:17.417]                   0L) {
[16:20:17.417]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:17.417]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:17.417]                   base::options(opts)
[16:20:17.417]                 }
[16:20:17.417]                 {
[16:20:17.417]                   {
[16:20:17.417]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:17.417]                     NULL
[16:20:17.417]                   }
[16:20:17.417]                   options(future.plan = NULL)
[16:20:17.417]                   if (is.na(NA_character_)) 
[16:20:17.417]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:17.417]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:17.417]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:17.417]                     .init = FALSE)
[16:20:17.417]                 }
[16:20:17.417]             }
[16:20:17.417]         }
[16:20:17.417]     })
[16:20:17.417]     if (TRUE) {
[16:20:17.417]         base::sink(type = "output", split = FALSE)
[16:20:17.417]         if (TRUE) {
[16:20:17.417]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:17.417]         }
[16:20:17.417]         else {
[16:20:17.417]             ...future.result["stdout"] <- base::list(NULL)
[16:20:17.417]         }
[16:20:17.417]         base::close(...future.stdout)
[16:20:17.417]         ...future.stdout <- NULL
[16:20:17.417]     }
[16:20:17.417]     ...future.result$conditions <- ...future.conditions
[16:20:17.417]     ...future.result$finished <- base::Sys.time()
[16:20:17.417]     ...future.result
[16:20:17.417] }
[16:20:17.419] assign_globals() ...
[16:20:17.419] List of 2
[16:20:17.419]  $ x                    : int [1:2] 1 2
[16:20:17.419]  $ future.call.arguments:List of 1
[16:20:17.419]   ..$ : num 3
[16:20:17.419]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:20:17.419]  - attr(*, "where")=List of 2
[16:20:17.419]   ..$ x                    :<environment: R_EmptyEnv> 
[16:20:17.419]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[16:20:17.419]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:17.419]  - attr(*, "resolved")= logi FALSE
[16:20:17.419]  - attr(*, "total_size")= num 112
[16:20:17.419]  - attr(*, "already-done")= logi TRUE
[16:20:17.423] - copied ‘x’ to environment
[16:20:17.423] - copied ‘future.call.arguments’ to environment
[16:20:17.423] assign_globals() ... done
[16:20:17.423] requestCore(): workers = 2
[16:20:17.426] MulticoreFuture started
[16:20:17.426] - Launch lazy future ... done
[16:20:17.427] plan(): Setting new future strategy stack:
[16:20:17.427] run() for ‘MulticoreFuture’ ... done
[16:20:17.427] List of future strategies:
[16:20:17.427] 1. sequential:
[16:20:17.427]    - args: function (..., envir = parent.frame())
[16:20:17.427]    - tweaked: FALSE
[16:20:17.427]    - call: NULL
[16:20:17.428] plan(): nbrOfWorkers() = 1
[16:20:17.428] result() for MulticoreFuture ...
[16:20:17.430] plan(): Setting new future strategy stack:
[16:20:17.430] List of future strategies:
[16:20:17.430] 1. multicore:
[16:20:17.430]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:20:17.430]    - tweaked: FALSE
[16:20:17.430]    - call: plan(strategy, substitute = FALSE)
[16:20:17.435] plan(): nbrOfWorkers() = 2
[16:20:17.440] result() for MulticoreFuture ...
[16:20:17.440] result() for MulticoreFuture ... done
[16:20:17.440] result() for MulticoreFuture ... done
[16:20:17.440] result() for MulticoreFuture ...
[16:20:17.440] result() for MulticoreFuture ... done
[1] 6
** Sum function 'B' with plan('multicore') ...
function (x, ...) 
{
    sumt <- function(x) {
        message("Arguments '...' exists: ", exists("...", inherits = TRUE))
        y %<-% {
            sum(x, ...)
        }
        y
    }
    sumt(x)
}
<bytecode: 0x55ed0257bb98>
Arguments '...' exists: TRUE
[16:20:17.441] getGlobalsAndPackages() ...
[16:20:17.441] Searching for globals...
[16:20:17.443] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[16:20:17.443] Searching for globals ... DONE
[16:20:17.443] Resolving globals: FALSE
[16:20:17.443] Tweak future expression to call with '...' arguments ...
[16:20:17.443] {
[16:20:17.443]     do.call(function(...) {
[16:20:17.443]         sum(x, ...)
[16:20:17.443]     }, args = future.call.arguments)
[16:20:17.443] }
[16:20:17.444] Tweak future expression to call with '...' arguments ... DONE
[16:20:17.444] The total size of the 2 globals is 112 bytes (112 bytes)
[16:20:17.445] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[16:20:17.445] - globals: [2] ‘x’, ‘future.call.arguments’
[16:20:17.445] 
[16:20:17.445] getGlobalsAndPackages() ... DONE
[16:20:17.446] run() for ‘Future’ ...
[16:20:17.446] - state: ‘created’
[16:20:17.446] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:20:17.450] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:17.450] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:20:17.450]   - Field: ‘label’
[16:20:17.450]   - Field: ‘local’
[16:20:17.450]   - Field: ‘owner’
[16:20:17.450]   - Field: ‘envir’
[16:20:17.451]   - Field: ‘workers’
[16:20:17.451]   - Field: ‘packages’
[16:20:17.451]   - Field: ‘gc’
[16:20:17.451]   - Field: ‘job’
[16:20:17.451]   - Field: ‘conditions’
[16:20:17.451]   - Field: ‘expr’
[16:20:17.451]   - Field: ‘uuid’
[16:20:17.451]   - Field: ‘seed’
[16:20:17.451]   - Field: ‘version’
[16:20:17.452]   - Field: ‘result’
[16:20:17.452]   - Field: ‘asynchronous’
[16:20:17.452]   - Field: ‘calls’
[16:20:17.452]   - Field: ‘globals’
[16:20:17.452]   - Field: ‘stdout’
[16:20:17.452]   - Field: ‘earlySignal’
[16:20:17.452]   - Field: ‘lazy’
[16:20:17.452]   - Field: ‘state’
[16:20:17.452] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:20:17.453] - Launch lazy future ...
[16:20:17.453] Packages needed by the future expression (n = 0): <none>
[16:20:17.453] Packages needed by future strategies (n = 0): <none>
[16:20:17.454] {
[16:20:17.454]     {
[16:20:17.454]         {
[16:20:17.454]             ...future.startTime <- base::Sys.time()
[16:20:17.454]             {
[16:20:17.454]                 {
[16:20:17.454]                   {
[16:20:17.454]                     {
[16:20:17.454]                       base::local({
[16:20:17.454]                         has_future <- base::requireNamespace("future", 
[16:20:17.454]                           quietly = TRUE)
[16:20:17.454]                         if (has_future) {
[16:20:17.454]                           ns <- base::getNamespace("future")
[16:20:17.454]                           version <- ns[[".package"]][["version"]]
[16:20:17.454]                           if (is.null(version)) 
[16:20:17.454]                             version <- utils::packageVersion("future")
[16:20:17.454]                         }
[16:20:17.454]                         else {
[16:20:17.454]                           version <- NULL
[16:20:17.454]                         }
[16:20:17.454]                         if (!has_future || version < "1.8.0") {
[16:20:17.454]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:17.454]                             "", base::R.version$version.string), 
[16:20:17.454]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:17.454]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:17.454]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:17.454]                               "release", "version")], collapse = " "), 
[16:20:17.454]                             hostname = base::Sys.info()[["nodename"]])
[16:20:17.454]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:17.454]                             info)
[16:20:17.454]                           info <- base::paste(info, collapse = "; ")
[16:20:17.454]                           if (!has_future) {
[16:20:17.454]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:17.454]                               info)
[16:20:17.454]                           }
[16:20:17.454]                           else {
[16:20:17.454]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:17.454]                               info, version)
[16:20:17.454]                           }
[16:20:17.454]                           base::stop(msg)
[16:20:17.454]                         }
[16:20:17.454]                       })
[16:20:17.454]                     }
[16:20:17.454]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:17.454]                     base::options(mc.cores = 1L)
[16:20:17.454]                   }
[16:20:17.454]                   ...future.strategy.old <- future::plan("list")
[16:20:17.454]                   options(future.plan = NULL)
[16:20:17.454]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:17.454]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:17.454]                 }
[16:20:17.454]                 ...future.workdir <- getwd()
[16:20:17.454]             }
[16:20:17.454]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:17.454]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:17.454]         }
[16:20:17.454]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:17.454]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:17.454]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:17.454]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:17.454]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:17.454]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:17.454]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:17.454]             base::names(...future.oldOptions))
[16:20:17.454]     }
[16:20:17.454]     if (FALSE) {
[16:20:17.454]     }
[16:20:17.454]     else {
[16:20:17.454]         if (TRUE) {
[16:20:17.454]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:17.454]                 open = "w")
[16:20:17.454]         }
[16:20:17.454]         else {
[16:20:17.454]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:17.454]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:17.454]         }
[16:20:17.454]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:17.454]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:17.454]             base::sink(type = "output", split = FALSE)
[16:20:17.454]             base::close(...future.stdout)
[16:20:17.454]         }, add = TRUE)
[16:20:17.454]     }
[16:20:17.454]     ...future.frame <- base::sys.nframe()
[16:20:17.454]     ...future.conditions <- base::list()
[16:20:17.454]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:17.454]     if (FALSE) {
[16:20:17.454]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:17.454]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:17.454]     }
[16:20:17.454]     ...future.result <- base::tryCatch({
[16:20:17.454]         base::withCallingHandlers({
[16:20:17.454]             ...future.value <- base::withVisible(base::local({
[16:20:17.454]                 withCallingHandlers({
[16:20:17.454]                   {
[16:20:17.454]                     do.call(function(...) {
[16:20:17.454]                       sum(x, ...)
[16:20:17.454]                     }, args = future.call.arguments)
[16:20:17.454]                   }
[16:20:17.454]                 }, immediateCondition = function(cond) {
[16:20:17.454]                   save_rds <- function (object, pathname, ...) 
[16:20:17.454]                   {
[16:20:17.454]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:20:17.454]                     if (file_test("-f", pathname_tmp)) {
[16:20:17.454]                       fi_tmp <- file.info(pathname_tmp)
[16:20:17.454]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:20:17.454]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:17.454]                         fi_tmp[["mtime"]])
[16:20:17.454]                     }
[16:20:17.454]                     tryCatch({
[16:20:17.454]                       saveRDS(object, file = pathname_tmp, ...)
[16:20:17.454]                     }, error = function(ex) {
[16:20:17.454]                       msg <- conditionMessage(ex)
[16:20:17.454]                       fi_tmp <- file.info(pathname_tmp)
[16:20:17.454]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:20:17.454]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:17.454]                         fi_tmp[["mtime"]], msg)
[16:20:17.454]                       ex$message <- msg
[16:20:17.454]                       stop(ex)
[16:20:17.454]                     })
[16:20:17.454]                     stopifnot(file_test("-f", pathname_tmp))
[16:20:17.454]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:20:17.454]                     if (!res || file_test("-f", pathname_tmp)) {
[16:20:17.454]                       fi_tmp <- file.info(pathname_tmp)
[16:20:17.454]                       fi <- file.info(pathname)
[16:20:17.454]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:20:17.454]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:17.454]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:20:17.454]                         fi[["size"]], fi[["mtime"]])
[16:20:17.454]                       stop(msg)
[16:20:17.454]                     }
[16:20:17.454]                     invisible(pathname)
[16:20:17.454]                   }
[16:20:17.454]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:20:17.454]                     rootPath = tempdir()) 
[16:20:17.454]                   {
[16:20:17.454]                     obj <- list(time = Sys.time(), condition = cond)
[16:20:17.454]                     file <- tempfile(pattern = class(cond)[1], 
[16:20:17.454]                       tmpdir = path, fileext = ".rds")
[16:20:17.454]                     save_rds(obj, file)
[16:20:17.454]                   }
[16:20:17.454]                   saveImmediateCondition(cond, path = "/tmp/RtmpGMDtVt/.future/immediateConditions")
[16:20:17.454]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:17.454]                   {
[16:20:17.454]                     inherits <- base::inherits
[16:20:17.454]                     invokeRestart <- base::invokeRestart
[16:20:17.454]                     is.null <- base::is.null
[16:20:17.454]                     muffled <- FALSE
[16:20:17.454]                     if (inherits(cond, "message")) {
[16:20:17.454]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:17.454]                       if (muffled) 
[16:20:17.454]                         invokeRestart("muffleMessage")
[16:20:17.454]                     }
[16:20:17.454]                     else if (inherits(cond, "warning")) {
[16:20:17.454]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:17.454]                       if (muffled) 
[16:20:17.454]                         invokeRestart("muffleWarning")
[16:20:17.454]                     }
[16:20:17.454]                     else if (inherits(cond, "condition")) {
[16:20:17.454]                       if (!is.null(pattern)) {
[16:20:17.454]                         computeRestarts <- base::computeRestarts
[16:20:17.454]                         grepl <- base::grepl
[16:20:17.454]                         restarts <- computeRestarts(cond)
[16:20:17.454]                         for (restart in restarts) {
[16:20:17.454]                           name <- restart$name
[16:20:17.454]                           if (is.null(name)) 
[16:20:17.454]                             next
[16:20:17.454]                           if (!grepl(pattern, name)) 
[16:20:17.454]                             next
[16:20:17.454]                           invokeRestart(restart)
[16:20:17.454]                           muffled <- TRUE
[16:20:17.454]                           break
[16:20:17.454]                         }
[16:20:17.454]                       }
[16:20:17.454]                     }
[16:20:17.454]                     invisible(muffled)
[16:20:17.454]                   }
[16:20:17.454]                   muffleCondition(cond)
[16:20:17.454]                 })
[16:20:17.454]             }))
[16:20:17.454]             future::FutureResult(value = ...future.value$value, 
[16:20:17.454]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:17.454]                   ...future.rng), globalenv = if (FALSE) 
[16:20:17.454]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:17.454]                     ...future.globalenv.names))
[16:20:17.454]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:17.454]         }, condition = base::local({
[16:20:17.454]             c <- base::c
[16:20:17.454]             inherits <- base::inherits
[16:20:17.454]             invokeRestart <- base::invokeRestart
[16:20:17.454]             length <- base::length
[16:20:17.454]             list <- base::list
[16:20:17.454]             seq.int <- base::seq.int
[16:20:17.454]             signalCondition <- base::signalCondition
[16:20:17.454]             sys.calls <- base::sys.calls
[16:20:17.454]             `[[` <- base::`[[`
[16:20:17.454]             `+` <- base::`+`
[16:20:17.454]             `<<-` <- base::`<<-`
[16:20:17.454]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:17.454]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:17.454]                   3L)]
[16:20:17.454]             }
[16:20:17.454]             function(cond) {
[16:20:17.454]                 is_error <- inherits(cond, "error")
[16:20:17.454]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:17.454]                   NULL)
[16:20:17.454]                 if (is_error) {
[16:20:17.454]                   sessionInformation <- function() {
[16:20:17.454]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:17.454]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:17.454]                       search = base::search(), system = base::Sys.info())
[16:20:17.454]                   }
[16:20:17.454]                   ...future.conditions[[length(...future.conditions) + 
[16:20:17.454]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:17.454]                     cond$call), session = sessionInformation(), 
[16:20:17.454]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:17.454]                   signalCondition(cond)
[16:20:17.454]                 }
[16:20:17.454]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:17.454]                 "immediateCondition"))) {
[16:20:17.454]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:17.454]                   ...future.conditions[[length(...future.conditions) + 
[16:20:17.454]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:17.454]                   if (TRUE && !signal) {
[16:20:17.454]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:17.454]                     {
[16:20:17.454]                       inherits <- base::inherits
[16:20:17.454]                       invokeRestart <- base::invokeRestart
[16:20:17.454]                       is.null <- base::is.null
[16:20:17.454]                       muffled <- FALSE
[16:20:17.454]                       if (inherits(cond, "message")) {
[16:20:17.454]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:17.454]                         if (muffled) 
[16:20:17.454]                           invokeRestart("muffleMessage")
[16:20:17.454]                       }
[16:20:17.454]                       else if (inherits(cond, "warning")) {
[16:20:17.454]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:17.454]                         if (muffled) 
[16:20:17.454]                           invokeRestart("muffleWarning")
[16:20:17.454]                       }
[16:20:17.454]                       else if (inherits(cond, "condition")) {
[16:20:17.454]                         if (!is.null(pattern)) {
[16:20:17.454]                           computeRestarts <- base::computeRestarts
[16:20:17.454]                           grepl <- base::grepl
[16:20:17.454]                           restarts <- computeRestarts(cond)
[16:20:17.454]                           for (restart in restarts) {
[16:20:17.454]                             name <- restart$name
[16:20:17.454]                             if (is.null(name)) 
[16:20:17.454]                               next
[16:20:17.454]                             if (!grepl(pattern, name)) 
[16:20:17.454]                               next
[16:20:17.454]                             invokeRestart(restart)
[16:20:17.454]                             muffled <- TRUE
[16:20:17.454]                             break
[16:20:17.454]                           }
[16:20:17.454]                         }
[16:20:17.454]                       }
[16:20:17.454]                       invisible(muffled)
[16:20:17.454]                     }
[16:20:17.454]                     muffleCondition(cond, pattern = "^muffle")
[16:20:17.454]                   }
[16:20:17.454]                 }
[16:20:17.454]                 else {
[16:20:17.454]                   if (TRUE) {
[16:20:17.454]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:17.454]                     {
[16:20:17.454]                       inherits <- base::inherits
[16:20:17.454]                       invokeRestart <- base::invokeRestart
[16:20:17.454]                       is.null <- base::is.null
[16:20:17.454]                       muffled <- FALSE
[16:20:17.454]                       if (inherits(cond, "message")) {
[16:20:17.454]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:17.454]                         if (muffled) 
[16:20:17.454]                           invokeRestart("muffleMessage")
[16:20:17.454]                       }
[16:20:17.454]                       else if (inherits(cond, "warning")) {
[16:20:17.454]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:17.454]                         if (muffled) 
[16:20:17.454]                           invokeRestart("muffleWarning")
[16:20:17.454]                       }
[16:20:17.454]                       else if (inherits(cond, "condition")) {
[16:20:17.454]                         if (!is.null(pattern)) {
[16:20:17.454]                           computeRestarts <- base::computeRestarts
[16:20:17.454]                           grepl <- base::grepl
[16:20:17.454]                           restarts <- computeRestarts(cond)
[16:20:17.454]                           for (restart in restarts) {
[16:20:17.454]                             name <- restart$name
[16:20:17.454]                             if (is.null(name)) 
[16:20:17.454]                               next
[16:20:17.454]                             if (!grepl(pattern, name)) 
[16:20:17.454]                               next
[16:20:17.454]                             invokeRestart(restart)
[16:20:17.454]                             muffled <- TRUE
[16:20:17.454]                             break
[16:20:17.454]                           }
[16:20:17.454]                         }
[16:20:17.454]                       }
[16:20:17.454]                       invisible(muffled)
[16:20:17.454]                     }
[16:20:17.454]                     muffleCondition(cond, pattern = "^muffle")
[16:20:17.454]                   }
[16:20:17.454]                 }
[16:20:17.454]             }
[16:20:17.454]         }))
[16:20:17.454]     }, error = function(ex) {
[16:20:17.454]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:17.454]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:17.454]                 ...future.rng), started = ...future.startTime, 
[16:20:17.454]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:17.454]             version = "1.8"), class = "FutureResult")
[16:20:17.454]     }, finally = {
[16:20:17.454]         if (!identical(...future.workdir, getwd())) 
[16:20:17.454]             setwd(...future.workdir)
[16:20:17.454]         {
[16:20:17.454]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:17.454]                 ...future.oldOptions$nwarnings <- NULL
[16:20:17.454]             }
[16:20:17.454]             base::options(...future.oldOptions)
[16:20:17.454]             if (.Platform$OS.type == "windows") {
[16:20:17.454]                 old_names <- names(...future.oldEnvVars)
[16:20:17.454]                 envs <- base::Sys.getenv()
[16:20:17.454]                 names <- names(envs)
[16:20:17.454]                 common <- intersect(names, old_names)
[16:20:17.454]                 added <- setdiff(names, old_names)
[16:20:17.454]                 removed <- setdiff(old_names, names)
[16:20:17.454]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:17.454]                   envs[common]]
[16:20:17.454]                 NAMES <- toupper(changed)
[16:20:17.454]                 args <- list()
[16:20:17.454]                 for (kk in seq_along(NAMES)) {
[16:20:17.454]                   name <- changed[[kk]]
[16:20:17.454]                   NAME <- NAMES[[kk]]
[16:20:17.454]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:17.454]                     next
[16:20:17.454]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:17.454]                 }
[16:20:17.454]                 NAMES <- toupper(added)
[16:20:17.454]                 for (kk in seq_along(NAMES)) {
[16:20:17.454]                   name <- added[[kk]]
[16:20:17.454]                   NAME <- NAMES[[kk]]
[16:20:17.454]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:17.454]                     next
[16:20:17.454]                   args[[name]] <- ""
[16:20:17.454]                 }
[16:20:17.454]                 NAMES <- toupper(removed)
[16:20:17.454]                 for (kk in seq_along(NAMES)) {
[16:20:17.454]                   name <- removed[[kk]]
[16:20:17.454]                   NAME <- NAMES[[kk]]
[16:20:17.454]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:17.454]                     next
[16:20:17.454]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:17.454]                 }
[16:20:17.454]                 if (length(args) > 0) 
[16:20:17.454]                   base::do.call(base::Sys.setenv, args = args)
[16:20:17.454]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:17.454]             }
[16:20:17.454]             else {
[16:20:17.454]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:17.454]             }
[16:20:17.454]             {
[16:20:17.454]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:17.454]                   0L) {
[16:20:17.454]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:17.454]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:17.454]                   base::options(opts)
[16:20:17.454]                 }
[16:20:17.454]                 {
[16:20:17.454]                   {
[16:20:17.454]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:17.454]                     NULL
[16:20:17.454]                   }
[16:20:17.454]                   options(future.plan = NULL)
[16:20:17.454]                   if (is.na(NA_character_)) 
[16:20:17.454]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:17.454]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:17.454]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:17.454]                     .init = FALSE)
[16:20:17.454]                 }
[16:20:17.454]             }
[16:20:17.454]         }
[16:20:17.454]     })
[16:20:17.454]     if (TRUE) {
[16:20:17.454]         base::sink(type = "output", split = FALSE)
[16:20:17.454]         if (TRUE) {
[16:20:17.454]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:17.454]         }
[16:20:17.454]         else {
[16:20:17.454]             ...future.result["stdout"] <- base::list(NULL)
[16:20:17.454]         }
[16:20:17.454]         base::close(...future.stdout)
[16:20:17.454]         ...future.stdout <- NULL
[16:20:17.454]     }
[16:20:17.454]     ...future.result$conditions <- ...future.conditions
[16:20:17.454]     ...future.result$finished <- base::Sys.time()
[16:20:17.454]     ...future.result
[16:20:17.454] }
[16:20:17.456] assign_globals() ...
[16:20:17.456] List of 2
[16:20:17.456]  $ x                    : int [1:2] 1 2
[16:20:17.456]  $ future.call.arguments:List of 1
[16:20:17.456]   ..$ : num 3
[16:20:17.456]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:20:17.456]  - attr(*, "where")=List of 2
[16:20:17.456]   ..$ x                    :<environment: R_EmptyEnv> 
[16:20:17.456]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[16:20:17.456]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:17.456]  - attr(*, "resolved")= logi FALSE
[16:20:17.456]  - attr(*, "total_size")= num 112
[16:20:17.456]  - attr(*, "already-done")= logi TRUE
[16:20:17.462] - copied ‘x’ to environment
[16:20:17.462] - copied ‘future.call.arguments’ to environment
[16:20:17.463] assign_globals() ... done
[16:20:17.463] requestCore(): workers = 2
[16:20:17.465] MulticoreFuture started
[16:20:17.465] - Launch lazy future ... done
[16:20:17.465] run() for ‘MulticoreFuture’ ... done
[16:20:17.466] result() for MulticoreFuture ...
[16:20:17.466] plan(): Setting new future strategy stack:
[16:20:17.466] List of future strategies:
[16:20:17.466] 1. sequential:
[16:20:17.466]    - args: function (..., envir = parent.frame())
[16:20:17.466]    - tweaked: FALSE
[16:20:17.466]    - call: NULL
[16:20:17.467] plan(): nbrOfWorkers() = 1
[16:20:17.469] plan(): Setting new future strategy stack:
[16:20:17.469] List of future strategies:
[16:20:17.469] 1. multicore:
[16:20:17.469]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:20:17.469]    - tweaked: FALSE
[16:20:17.469]    - call: plan(strategy, substitute = FALSE)
[16:20:17.474] plan(): nbrOfWorkers() = 2
[16:20:17.475] result() for MulticoreFuture ...
[16:20:17.476] result() for MulticoreFuture ... done
[16:20:17.476] result() for MulticoreFuture ... done
[16:20:17.476] result() for MulticoreFuture ...
[16:20:17.476] result() for MulticoreFuture ... done
[1] 6
** Sum function 'C' with plan('multicore') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y)
    }
    y
}
<bytecode: 0x55ed026dd3e0>
Arguments '...' exists: FALSE
[16:20:17.477] getGlobalsAndPackages() ...
[16:20:17.478] Searching for globals...
[16:20:17.480] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘y’
[16:20:17.480] Searching for globals ... DONE
[16:20:17.480] Resolving globals: FALSE
[16:20:17.481] The total size of the 2 globals is 112 bytes (112 bytes)
[16:20:17.481] The total size of the 2 globals exported for future expression (‘{; sum(x, y); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[16:20:17.481] - globals: [2] ‘x’, ‘y’
[16:20:17.481] 
[16:20:17.481] getGlobalsAndPackages() ... DONE
[16:20:17.482] run() for ‘Future’ ...
[16:20:17.482] - state: ‘created’
[16:20:17.482] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:20:17.486] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:17.486] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:20:17.486]   - Field: ‘label’
[16:20:17.487]   - Field: ‘local’
[16:20:17.487]   - Field: ‘owner’
[16:20:17.487]   - Field: ‘envir’
[16:20:17.487]   - Field: ‘workers’
[16:20:17.487]   - Field: ‘packages’
[16:20:17.487]   - Field: ‘gc’
[16:20:17.487]   - Field: ‘job’
[16:20:17.487]   - Field: ‘conditions’
[16:20:17.487]   - Field: ‘expr’
[16:20:17.488]   - Field: ‘uuid’
[16:20:17.488]   - Field: ‘seed’
[16:20:17.488]   - Field: ‘version’
[16:20:17.488]   - Field: ‘result’
[16:20:17.488]   - Field: ‘asynchronous’
[16:20:17.488]   - Field: ‘calls’
[16:20:17.488]   - Field: ‘globals’
[16:20:17.488]   - Field: ‘stdout’
[16:20:17.489]   - Field: ‘earlySignal’
[16:20:17.489]   - Field: ‘lazy’
[16:20:17.489]   - Field: ‘state’
[16:20:17.489] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:20:17.489] - Launch lazy future ...
[16:20:17.489] Packages needed by the future expression (n = 0): <none>
[16:20:17.489] Packages needed by future strategies (n = 0): <none>
[16:20:17.490] {
[16:20:17.490]     {
[16:20:17.490]         {
[16:20:17.490]             ...future.startTime <- base::Sys.time()
[16:20:17.490]             {
[16:20:17.490]                 {
[16:20:17.490]                   {
[16:20:17.490]                     {
[16:20:17.490]                       base::local({
[16:20:17.490]                         has_future <- base::requireNamespace("future", 
[16:20:17.490]                           quietly = TRUE)
[16:20:17.490]                         if (has_future) {
[16:20:17.490]                           ns <- base::getNamespace("future")
[16:20:17.490]                           version <- ns[[".package"]][["version"]]
[16:20:17.490]                           if (is.null(version)) 
[16:20:17.490]                             version <- utils::packageVersion("future")
[16:20:17.490]                         }
[16:20:17.490]                         else {
[16:20:17.490]                           version <- NULL
[16:20:17.490]                         }
[16:20:17.490]                         if (!has_future || version < "1.8.0") {
[16:20:17.490]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:17.490]                             "", base::R.version$version.string), 
[16:20:17.490]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:17.490]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:17.490]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:17.490]                               "release", "version")], collapse = " "), 
[16:20:17.490]                             hostname = base::Sys.info()[["nodename"]])
[16:20:17.490]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:17.490]                             info)
[16:20:17.490]                           info <- base::paste(info, collapse = "; ")
[16:20:17.490]                           if (!has_future) {
[16:20:17.490]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:17.490]                               info)
[16:20:17.490]                           }
[16:20:17.490]                           else {
[16:20:17.490]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:17.490]                               info, version)
[16:20:17.490]                           }
[16:20:17.490]                           base::stop(msg)
[16:20:17.490]                         }
[16:20:17.490]                       })
[16:20:17.490]                     }
[16:20:17.490]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:17.490]                     base::options(mc.cores = 1L)
[16:20:17.490]                   }
[16:20:17.490]                   ...future.strategy.old <- future::plan("list")
[16:20:17.490]                   options(future.plan = NULL)
[16:20:17.490]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:17.490]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:17.490]                 }
[16:20:17.490]                 ...future.workdir <- getwd()
[16:20:17.490]             }
[16:20:17.490]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:17.490]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:17.490]         }
[16:20:17.490]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:17.490]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:17.490]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:17.490]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:17.490]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:17.490]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:17.490]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:17.490]             base::names(...future.oldOptions))
[16:20:17.490]     }
[16:20:17.490]     if (FALSE) {
[16:20:17.490]     }
[16:20:17.490]     else {
[16:20:17.490]         if (TRUE) {
[16:20:17.490]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:17.490]                 open = "w")
[16:20:17.490]         }
[16:20:17.490]         else {
[16:20:17.490]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:17.490]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:17.490]         }
[16:20:17.490]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:17.490]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:17.490]             base::sink(type = "output", split = FALSE)
[16:20:17.490]             base::close(...future.stdout)
[16:20:17.490]         }, add = TRUE)
[16:20:17.490]     }
[16:20:17.490]     ...future.frame <- base::sys.nframe()
[16:20:17.490]     ...future.conditions <- base::list()
[16:20:17.490]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:17.490]     if (FALSE) {
[16:20:17.490]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:17.490]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:17.490]     }
[16:20:17.490]     ...future.result <- base::tryCatch({
[16:20:17.490]         base::withCallingHandlers({
[16:20:17.490]             ...future.value <- base::withVisible(base::local({
[16:20:17.490]                 withCallingHandlers({
[16:20:17.490]                   {
[16:20:17.490]                     sum(x, y)
[16:20:17.490]                   }
[16:20:17.490]                 }, immediateCondition = function(cond) {
[16:20:17.490]                   save_rds <- function (object, pathname, ...) 
[16:20:17.490]                   {
[16:20:17.490]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:20:17.490]                     if (file_test("-f", pathname_tmp)) {
[16:20:17.490]                       fi_tmp <- file.info(pathname_tmp)
[16:20:17.490]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:20:17.490]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:17.490]                         fi_tmp[["mtime"]])
[16:20:17.490]                     }
[16:20:17.490]                     tryCatch({
[16:20:17.490]                       saveRDS(object, file = pathname_tmp, ...)
[16:20:17.490]                     }, error = function(ex) {
[16:20:17.490]                       msg <- conditionMessage(ex)
[16:20:17.490]                       fi_tmp <- file.info(pathname_tmp)
[16:20:17.490]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:20:17.490]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:17.490]                         fi_tmp[["mtime"]], msg)
[16:20:17.490]                       ex$message <- msg
[16:20:17.490]                       stop(ex)
[16:20:17.490]                     })
[16:20:17.490]                     stopifnot(file_test("-f", pathname_tmp))
[16:20:17.490]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:20:17.490]                     if (!res || file_test("-f", pathname_tmp)) {
[16:20:17.490]                       fi_tmp <- file.info(pathname_tmp)
[16:20:17.490]                       fi <- file.info(pathname)
[16:20:17.490]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:20:17.490]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:17.490]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:20:17.490]                         fi[["size"]], fi[["mtime"]])
[16:20:17.490]                       stop(msg)
[16:20:17.490]                     }
[16:20:17.490]                     invisible(pathname)
[16:20:17.490]                   }
[16:20:17.490]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:20:17.490]                     rootPath = tempdir()) 
[16:20:17.490]                   {
[16:20:17.490]                     obj <- list(time = Sys.time(), condition = cond)
[16:20:17.490]                     file <- tempfile(pattern = class(cond)[1], 
[16:20:17.490]                       tmpdir = path, fileext = ".rds")
[16:20:17.490]                     save_rds(obj, file)
[16:20:17.490]                   }
[16:20:17.490]                   saveImmediateCondition(cond, path = "/tmp/RtmpGMDtVt/.future/immediateConditions")
[16:20:17.490]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:17.490]                   {
[16:20:17.490]                     inherits <- base::inherits
[16:20:17.490]                     invokeRestart <- base::invokeRestart
[16:20:17.490]                     is.null <- base::is.null
[16:20:17.490]                     muffled <- FALSE
[16:20:17.490]                     if (inherits(cond, "message")) {
[16:20:17.490]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:17.490]                       if (muffled) 
[16:20:17.490]                         invokeRestart("muffleMessage")
[16:20:17.490]                     }
[16:20:17.490]                     else if (inherits(cond, "warning")) {
[16:20:17.490]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:17.490]                       if (muffled) 
[16:20:17.490]                         invokeRestart("muffleWarning")
[16:20:17.490]                     }
[16:20:17.490]                     else if (inherits(cond, "condition")) {
[16:20:17.490]                       if (!is.null(pattern)) {
[16:20:17.490]                         computeRestarts <- base::computeRestarts
[16:20:17.490]                         grepl <- base::grepl
[16:20:17.490]                         restarts <- computeRestarts(cond)
[16:20:17.490]                         for (restart in restarts) {
[16:20:17.490]                           name <- restart$name
[16:20:17.490]                           if (is.null(name)) 
[16:20:17.490]                             next
[16:20:17.490]                           if (!grepl(pattern, name)) 
[16:20:17.490]                             next
[16:20:17.490]                           invokeRestart(restart)
[16:20:17.490]                           muffled <- TRUE
[16:20:17.490]                           break
[16:20:17.490]                         }
[16:20:17.490]                       }
[16:20:17.490]                     }
[16:20:17.490]                     invisible(muffled)
[16:20:17.490]                   }
[16:20:17.490]                   muffleCondition(cond)
[16:20:17.490]                 })
[16:20:17.490]             }))
[16:20:17.490]             future::FutureResult(value = ...future.value$value, 
[16:20:17.490]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:17.490]                   ...future.rng), globalenv = if (FALSE) 
[16:20:17.490]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:17.490]                     ...future.globalenv.names))
[16:20:17.490]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:17.490]         }, condition = base::local({
[16:20:17.490]             c <- base::c
[16:20:17.490]             inherits <- base::inherits
[16:20:17.490]             invokeRestart <- base::invokeRestart
[16:20:17.490]             length <- base::length
[16:20:17.490]             list <- base::list
[16:20:17.490]             seq.int <- base::seq.int
[16:20:17.490]             signalCondition <- base::signalCondition
[16:20:17.490]             sys.calls <- base::sys.calls
[16:20:17.490]             `[[` <- base::`[[`
[16:20:17.490]             `+` <- base::`+`
[16:20:17.490]             `<<-` <- base::`<<-`
[16:20:17.490]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:17.490]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:17.490]                   3L)]
[16:20:17.490]             }
[16:20:17.490]             function(cond) {
[16:20:17.490]                 is_error <- inherits(cond, "error")
[16:20:17.490]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:17.490]                   NULL)
[16:20:17.490]                 if (is_error) {
[16:20:17.490]                   sessionInformation <- function() {
[16:20:17.490]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:17.490]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:17.490]                       search = base::search(), system = base::Sys.info())
[16:20:17.490]                   }
[16:20:17.490]                   ...future.conditions[[length(...future.conditions) + 
[16:20:17.490]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:17.490]                     cond$call), session = sessionInformation(), 
[16:20:17.490]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:17.490]                   signalCondition(cond)
[16:20:17.490]                 }
[16:20:17.490]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:17.490]                 "immediateCondition"))) {
[16:20:17.490]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:17.490]                   ...future.conditions[[length(...future.conditions) + 
[16:20:17.490]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:17.490]                   if (TRUE && !signal) {
[16:20:17.490]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:17.490]                     {
[16:20:17.490]                       inherits <- base::inherits
[16:20:17.490]                       invokeRestart <- base::invokeRestart
[16:20:17.490]                       is.null <- base::is.null
[16:20:17.490]                       muffled <- FALSE
[16:20:17.490]                       if (inherits(cond, "message")) {
[16:20:17.490]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:17.490]                         if (muffled) 
[16:20:17.490]                           invokeRestart("muffleMessage")
[16:20:17.490]                       }
[16:20:17.490]                       else if (inherits(cond, "warning")) {
[16:20:17.490]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:17.490]                         if (muffled) 
[16:20:17.490]                           invokeRestart("muffleWarning")
[16:20:17.490]                       }
[16:20:17.490]                       else if (inherits(cond, "condition")) {
[16:20:17.490]                         if (!is.null(pattern)) {
[16:20:17.490]                           computeRestarts <- base::computeRestarts
[16:20:17.490]                           grepl <- base::grepl
[16:20:17.490]                           restarts <- computeRestarts(cond)
[16:20:17.490]                           for (restart in restarts) {
[16:20:17.490]                             name <- restart$name
[16:20:17.490]                             if (is.null(name)) 
[16:20:17.490]                               next
[16:20:17.490]                             if (!grepl(pattern, name)) 
[16:20:17.490]                               next
[16:20:17.490]                             invokeRestart(restart)
[16:20:17.490]                             muffled <- TRUE
[16:20:17.490]                             break
[16:20:17.490]                           }
[16:20:17.490]                         }
[16:20:17.490]                       }
[16:20:17.490]                       invisible(muffled)
[16:20:17.490]                     }
[16:20:17.490]                     muffleCondition(cond, pattern = "^muffle")
[16:20:17.490]                   }
[16:20:17.490]                 }
[16:20:17.490]                 else {
[16:20:17.490]                   if (TRUE) {
[16:20:17.490]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:17.490]                     {
[16:20:17.490]                       inherits <- base::inherits
[16:20:17.490]                       invokeRestart <- base::invokeRestart
[16:20:17.490]                       is.null <- base::is.null
[16:20:17.490]                       muffled <- FALSE
[16:20:17.490]                       if (inherits(cond, "message")) {
[16:20:17.490]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:17.490]                         if (muffled) 
[16:20:17.490]                           invokeRestart("muffleMessage")
[16:20:17.490]                       }
[16:20:17.490]                       else if (inherits(cond, "warning")) {
[16:20:17.490]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:17.490]                         if (muffled) 
[16:20:17.490]                           invokeRestart("muffleWarning")
[16:20:17.490]                       }
[16:20:17.490]                       else if (inherits(cond, "condition")) {
[16:20:17.490]                         if (!is.null(pattern)) {
[16:20:17.490]                           computeRestarts <- base::computeRestarts
[16:20:17.490]                           grepl <- base::grepl
[16:20:17.490]                           restarts <- computeRestarts(cond)
[16:20:17.490]                           for (restart in restarts) {
[16:20:17.490]                             name <- restart$name
[16:20:17.490]                             if (is.null(name)) 
[16:20:17.490]                               next
[16:20:17.490]                             if (!grepl(pattern, name)) 
[16:20:17.490]                               next
[16:20:17.490]                             invokeRestart(restart)
[16:20:17.490]                             muffled <- TRUE
[16:20:17.490]                             break
[16:20:17.490]                           }
[16:20:17.490]                         }
[16:20:17.490]                       }
[16:20:17.490]                       invisible(muffled)
[16:20:17.490]                     }
[16:20:17.490]                     muffleCondition(cond, pattern = "^muffle")
[16:20:17.490]                   }
[16:20:17.490]                 }
[16:20:17.490]             }
[16:20:17.490]         }))
[16:20:17.490]     }, error = function(ex) {
[16:20:17.490]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:17.490]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:17.490]                 ...future.rng), started = ...future.startTime, 
[16:20:17.490]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:17.490]             version = "1.8"), class = "FutureResult")
[16:20:17.490]     }, finally = {
[16:20:17.490]         if (!identical(...future.workdir, getwd())) 
[16:20:17.490]             setwd(...future.workdir)
[16:20:17.490]         {
[16:20:17.490]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:17.490]                 ...future.oldOptions$nwarnings <- NULL
[16:20:17.490]             }
[16:20:17.490]             base::options(...future.oldOptions)
[16:20:17.490]             if (.Platform$OS.type == "windows") {
[16:20:17.490]                 old_names <- names(...future.oldEnvVars)
[16:20:17.490]                 envs <- base::Sys.getenv()
[16:20:17.490]                 names <- names(envs)
[16:20:17.490]                 common <- intersect(names, old_names)
[16:20:17.490]                 added <- setdiff(names, old_names)
[16:20:17.490]                 removed <- setdiff(old_names, names)
[16:20:17.490]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:17.490]                   envs[common]]
[16:20:17.490]                 NAMES <- toupper(changed)
[16:20:17.490]                 args <- list()
[16:20:17.490]                 for (kk in seq_along(NAMES)) {
[16:20:17.490]                   name <- changed[[kk]]
[16:20:17.490]                   NAME <- NAMES[[kk]]
[16:20:17.490]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:17.490]                     next
[16:20:17.490]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:17.490]                 }
[16:20:17.490]                 NAMES <- toupper(added)
[16:20:17.490]                 for (kk in seq_along(NAMES)) {
[16:20:17.490]                   name <- added[[kk]]
[16:20:17.490]                   NAME <- NAMES[[kk]]
[16:20:17.490]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:17.490]                     next
[16:20:17.490]                   args[[name]] <- ""
[16:20:17.490]                 }
[16:20:17.490]                 NAMES <- toupper(removed)
[16:20:17.490]                 for (kk in seq_along(NAMES)) {
[16:20:17.490]                   name <- removed[[kk]]
[16:20:17.490]                   NAME <- NAMES[[kk]]
[16:20:17.490]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:17.490]                     next
[16:20:17.490]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:17.490]                 }
[16:20:17.490]                 if (length(args) > 0) 
[16:20:17.490]                   base::do.call(base::Sys.setenv, args = args)
[16:20:17.490]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:17.490]             }
[16:20:17.490]             else {
[16:20:17.490]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:17.490]             }
[16:20:17.490]             {
[16:20:17.490]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:17.490]                   0L) {
[16:20:17.490]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:17.490]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:17.490]                   base::options(opts)
[16:20:17.490]                 }
[16:20:17.490]                 {
[16:20:17.490]                   {
[16:20:17.490]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:17.490]                     NULL
[16:20:17.490]                   }
[16:20:17.490]                   options(future.plan = NULL)
[16:20:17.490]                   if (is.na(NA_character_)) 
[16:20:17.490]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:17.490]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:17.490]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:17.490]                     .init = FALSE)
[16:20:17.490]                 }
[16:20:17.490]             }
[16:20:17.490]         }
[16:20:17.490]     })
[16:20:17.490]     if (TRUE) {
[16:20:17.490]         base::sink(type = "output", split = FALSE)
[16:20:17.490]         if (TRUE) {
[16:20:17.490]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:17.490]         }
[16:20:17.490]         else {
[16:20:17.490]             ...future.result["stdout"] <- base::list(NULL)
[16:20:17.490]         }
[16:20:17.490]         base::close(...future.stdout)
[16:20:17.490]         ...future.stdout <- NULL
[16:20:17.490]     }
[16:20:17.490]     ...future.result$conditions <- ...future.conditions
[16:20:17.490]     ...future.result$finished <- base::Sys.time()
[16:20:17.490]     ...future.result
[16:20:17.490] }
[16:20:17.493] assign_globals() ...
[16:20:17.493] List of 2
[16:20:17.493]  $ x: int [1:2] 1 2
[16:20:17.493]  $ y: num 3
[16:20:17.493]  - attr(*, "where")=List of 2
[16:20:17.493]   ..$ x:<environment: R_EmptyEnv> 
[16:20:17.493]   ..$ y:<environment: R_EmptyEnv> 
[16:20:17.493]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:17.493]  - attr(*, "resolved")= logi FALSE
[16:20:17.493]  - attr(*, "total_size")= num 112
[16:20:17.493]  - attr(*, "already-done")= logi TRUE
[16:20:17.496] - copied ‘x’ to environment
[16:20:17.497] - copied ‘y’ to environment
[16:20:17.497] assign_globals() ... done
[16:20:17.497] requestCore(): workers = 2
[16:20:17.499] MulticoreFuture started
[16:20:17.499] - Launch lazy future ... done
[16:20:17.499] run() for ‘MulticoreFuture’ ... done
[16:20:17.499] result() for MulticoreFuture ...
[16:20:17.500] plan(): Setting new future strategy stack:
[16:20:17.500] List of future strategies:
[16:20:17.500] 1. sequential:
[16:20:17.500]    - args: function (..., envir = parent.frame())
[16:20:17.500]    - tweaked: FALSE
[16:20:17.500]    - call: NULL
[16:20:17.501] plan(): nbrOfWorkers() = 1
[16:20:17.503] plan(): Setting new future strategy stack:
[16:20:17.503] List of future strategies:
[16:20:17.503] 1. multicore:
[16:20:17.503]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:20:17.503]    - tweaked: FALSE
[16:20:17.503]    - call: plan(strategy, substitute = FALSE)
[16:20:17.508] plan(): nbrOfWorkers() = 2
[16:20:17.509] result() for MulticoreFuture ...
[16:20:17.509] result() for MulticoreFuture ... done
[16:20:17.509] result() for MulticoreFuture ... done
[16:20:17.509] result() for MulticoreFuture ...
[16:20:17.509] result() for MulticoreFuture ... done
[1] 6
** Sum function 'D' with plan('multicore') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y, ...)
    }
    y
}
<bytecode: 0x55ed028c9f38>
Arguments '...' exists: FALSE
[16:20:17.511] getGlobalsAndPackages() ...
[16:20:17.511] Searching for globals...
[16:20:17.513] - globals found: [5] ‘{’, ‘sum’, ‘x’, ‘y’, ‘...’
[16:20:17.513] Searching for globals ... DONE
[16:20:17.513] Resolving globals: FALSE
[16:20:17.513] Tweak future expression to call with '...' arguments ...
[16:20:17.514] The total size of the 2 globals is 112 bytes (112 bytes)
[16:20:17.514] The total size of the 2 globals exported for future expression (‘{; sum(x, y, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[16:20:17.515] - globals: [2] ‘x’, ‘y’
[16:20:17.515] 
[16:20:17.515] getGlobalsAndPackages() ... DONE
[16:20:17.515] run() for ‘Future’ ...
[16:20:17.515] - state: ‘created’
[16:20:17.515] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:20:17.519] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:17.520] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:20:17.520]   - Field: ‘label’
[16:20:17.520]   - Field: ‘local’
[16:20:17.520]   - Field: ‘owner’
[16:20:17.520]   - Field: ‘envir’
[16:20:17.520]   - Field: ‘workers’
[16:20:17.520]   - Field: ‘packages’
[16:20:17.521]   - Field: ‘gc’
[16:20:17.521]   - Field: ‘job’
[16:20:17.521]   - Field: ‘conditions’
[16:20:17.521]   - Field: ‘expr’
[16:20:17.521]   - Field: ‘uuid’
[16:20:17.521]   - Field: ‘seed’
[16:20:17.521]   - Field: ‘version’
[16:20:17.521]   - Field: ‘result’
[16:20:17.521]   - Field: ‘asynchronous’
[16:20:17.522]   - Field: ‘calls’
[16:20:17.522]   - Field: ‘globals’
[16:20:17.522]   - Field: ‘stdout’
[16:20:17.522]   - Field: ‘earlySignal’
[16:20:17.522]   - Field: ‘lazy’
[16:20:17.522]   - Field: ‘state’
[16:20:17.522] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:20:17.522] - Launch lazy future ...
[16:20:17.523] Packages needed by the future expression (n = 0): <none>
[16:20:17.523] Packages needed by future strategies (n = 0): <none>
[16:20:17.523] {
[16:20:17.523]     {
[16:20:17.523]         {
[16:20:17.523]             ...future.startTime <- base::Sys.time()
[16:20:17.523]             {
[16:20:17.523]                 {
[16:20:17.523]                   {
[16:20:17.523]                     {
[16:20:17.523]                       base::local({
[16:20:17.523]                         has_future <- base::requireNamespace("future", 
[16:20:17.523]                           quietly = TRUE)
[16:20:17.523]                         if (has_future) {
[16:20:17.523]                           ns <- base::getNamespace("future")
[16:20:17.523]                           version <- ns[[".package"]][["version"]]
[16:20:17.523]                           if (is.null(version)) 
[16:20:17.523]                             version <- utils::packageVersion("future")
[16:20:17.523]                         }
[16:20:17.523]                         else {
[16:20:17.523]                           version <- NULL
[16:20:17.523]                         }
[16:20:17.523]                         if (!has_future || version < "1.8.0") {
[16:20:17.523]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:17.523]                             "", base::R.version$version.string), 
[16:20:17.523]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:17.523]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:17.523]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:17.523]                               "release", "version")], collapse = " "), 
[16:20:17.523]                             hostname = base::Sys.info()[["nodename"]])
[16:20:17.523]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:17.523]                             info)
[16:20:17.523]                           info <- base::paste(info, collapse = "; ")
[16:20:17.523]                           if (!has_future) {
[16:20:17.523]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:17.523]                               info)
[16:20:17.523]                           }
[16:20:17.523]                           else {
[16:20:17.523]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:17.523]                               info, version)
[16:20:17.523]                           }
[16:20:17.523]                           base::stop(msg)
[16:20:17.523]                         }
[16:20:17.523]                       })
[16:20:17.523]                     }
[16:20:17.523]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:17.523]                     base::options(mc.cores = 1L)
[16:20:17.523]                   }
[16:20:17.523]                   ...future.strategy.old <- future::plan("list")
[16:20:17.523]                   options(future.plan = NULL)
[16:20:17.523]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:17.523]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:17.523]                 }
[16:20:17.523]                 ...future.workdir <- getwd()
[16:20:17.523]             }
[16:20:17.523]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:17.523]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:17.523]         }
[16:20:17.523]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:17.523]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:17.523]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:17.523]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:17.523]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:17.523]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:17.523]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:17.523]             base::names(...future.oldOptions))
[16:20:17.523]     }
[16:20:17.523]     if (FALSE) {
[16:20:17.523]     }
[16:20:17.523]     else {
[16:20:17.523]         if (TRUE) {
[16:20:17.523]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:17.523]                 open = "w")
[16:20:17.523]         }
[16:20:17.523]         else {
[16:20:17.523]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:17.523]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:17.523]         }
[16:20:17.523]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:17.523]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:17.523]             base::sink(type = "output", split = FALSE)
[16:20:17.523]             base::close(...future.stdout)
[16:20:17.523]         }, add = TRUE)
[16:20:17.523]     }
[16:20:17.523]     ...future.frame <- base::sys.nframe()
[16:20:17.523]     ...future.conditions <- base::list()
[16:20:17.523]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:17.523]     if (FALSE) {
[16:20:17.523]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:17.523]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:17.523]     }
[16:20:17.523]     ...future.result <- base::tryCatch({
[16:20:17.523]         base::withCallingHandlers({
[16:20:17.523]             ...future.value <- base::withVisible(base::local({
[16:20:17.523]                 withCallingHandlers({
[16:20:17.523]                   {
[16:20:17.523]                     sum(x, y, ...)
[16:20:17.523]                   }
[16:20:17.523]                 }, immediateCondition = function(cond) {
[16:20:17.523]                   save_rds <- function (object, pathname, ...) 
[16:20:17.523]                   {
[16:20:17.523]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:20:17.523]                     if (file_test("-f", pathname_tmp)) {
[16:20:17.523]                       fi_tmp <- file.info(pathname_tmp)
[16:20:17.523]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:20:17.523]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:17.523]                         fi_tmp[["mtime"]])
[16:20:17.523]                     }
[16:20:17.523]                     tryCatch({
[16:20:17.523]                       saveRDS(object, file = pathname_tmp, ...)
[16:20:17.523]                     }, error = function(ex) {
[16:20:17.523]                       msg <- conditionMessage(ex)
[16:20:17.523]                       fi_tmp <- file.info(pathname_tmp)
[16:20:17.523]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:20:17.523]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:17.523]                         fi_tmp[["mtime"]], msg)
[16:20:17.523]                       ex$message <- msg
[16:20:17.523]                       stop(ex)
[16:20:17.523]                     })
[16:20:17.523]                     stopifnot(file_test("-f", pathname_tmp))
[16:20:17.523]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:20:17.523]                     if (!res || file_test("-f", pathname_tmp)) {
[16:20:17.523]                       fi_tmp <- file.info(pathname_tmp)
[16:20:17.523]                       fi <- file.info(pathname)
[16:20:17.523]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:20:17.523]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:17.523]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:20:17.523]                         fi[["size"]], fi[["mtime"]])
[16:20:17.523]                       stop(msg)
[16:20:17.523]                     }
[16:20:17.523]                     invisible(pathname)
[16:20:17.523]                   }
[16:20:17.523]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:20:17.523]                     rootPath = tempdir()) 
[16:20:17.523]                   {
[16:20:17.523]                     obj <- list(time = Sys.time(), condition = cond)
[16:20:17.523]                     file <- tempfile(pattern = class(cond)[1], 
[16:20:17.523]                       tmpdir = path, fileext = ".rds")
[16:20:17.523]                     save_rds(obj, file)
[16:20:17.523]                   }
[16:20:17.523]                   saveImmediateCondition(cond, path = "/tmp/RtmpGMDtVt/.future/immediateConditions")
[16:20:17.523]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:17.523]                   {
[16:20:17.523]                     inherits <- base::inherits
[16:20:17.523]                     invokeRestart <- base::invokeRestart
[16:20:17.523]                     is.null <- base::is.null
[16:20:17.523]                     muffled <- FALSE
[16:20:17.523]                     if (inherits(cond, "message")) {
[16:20:17.523]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:17.523]                       if (muffled) 
[16:20:17.523]                         invokeRestart("muffleMessage")
[16:20:17.523]                     }
[16:20:17.523]                     else if (inherits(cond, "warning")) {
[16:20:17.523]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:17.523]                       if (muffled) 
[16:20:17.523]                         invokeRestart("muffleWarning")
[16:20:17.523]                     }
[16:20:17.523]                     else if (inherits(cond, "condition")) {
[16:20:17.523]                       if (!is.null(pattern)) {
[16:20:17.523]                         computeRestarts <- base::computeRestarts
[16:20:17.523]                         grepl <- base::grepl
[16:20:17.523]                         restarts <- computeRestarts(cond)
[16:20:17.523]                         for (restart in restarts) {
[16:20:17.523]                           name <- restart$name
[16:20:17.523]                           if (is.null(name)) 
[16:20:17.523]                             next
[16:20:17.523]                           if (!grepl(pattern, name)) 
[16:20:17.523]                             next
[16:20:17.523]                           invokeRestart(restart)
[16:20:17.523]                           muffled <- TRUE
[16:20:17.523]                           break
[16:20:17.523]                         }
[16:20:17.523]                       }
[16:20:17.523]                     }
[16:20:17.523]                     invisible(muffled)
[16:20:17.523]                   }
[16:20:17.523]                   muffleCondition(cond)
[16:20:17.523]                 })
[16:20:17.523]             }))
[16:20:17.523]             future::FutureResult(value = ...future.value$value, 
[16:20:17.523]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:17.523]                   ...future.rng), globalenv = if (FALSE) 
[16:20:17.523]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:17.523]                     ...future.globalenv.names))
[16:20:17.523]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:17.523]         }, condition = base::local({
[16:20:17.523]             c <- base::c
[16:20:17.523]             inherits <- base::inherits
[16:20:17.523]             invokeRestart <- base::invokeRestart
[16:20:17.523]             length <- base::length
[16:20:17.523]             list <- base::list
[16:20:17.523]             seq.int <- base::seq.int
[16:20:17.523]             signalCondition <- base::signalCondition
[16:20:17.523]             sys.calls <- base::sys.calls
[16:20:17.523]             `[[` <- base::`[[`
[16:20:17.523]             `+` <- base::`+`
[16:20:17.523]             `<<-` <- base::`<<-`
[16:20:17.523]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:17.523]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:17.523]                   3L)]
[16:20:17.523]             }
[16:20:17.523]             function(cond) {
[16:20:17.523]                 is_error <- inherits(cond, "error")
[16:20:17.523]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:17.523]                   NULL)
[16:20:17.523]                 if (is_error) {
[16:20:17.523]                   sessionInformation <- function() {
[16:20:17.523]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:17.523]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:17.523]                       search = base::search(), system = base::Sys.info())
[16:20:17.523]                   }
[16:20:17.523]                   ...future.conditions[[length(...future.conditions) + 
[16:20:17.523]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:17.523]                     cond$call), session = sessionInformation(), 
[16:20:17.523]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:17.523]                   signalCondition(cond)
[16:20:17.523]                 }
[16:20:17.523]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:17.523]                 "immediateCondition"))) {
[16:20:17.523]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:17.523]                   ...future.conditions[[length(...future.conditions) + 
[16:20:17.523]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:17.523]                   if (TRUE && !signal) {
[16:20:17.523]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:17.523]                     {
[16:20:17.523]                       inherits <- base::inherits
[16:20:17.523]                       invokeRestart <- base::invokeRestart
[16:20:17.523]                       is.null <- base::is.null
[16:20:17.523]                       muffled <- FALSE
[16:20:17.523]                       if (inherits(cond, "message")) {
[16:20:17.523]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:17.523]                         if (muffled) 
[16:20:17.523]                           invokeRestart("muffleMessage")
[16:20:17.523]                       }
[16:20:17.523]                       else if (inherits(cond, "warning")) {
[16:20:17.523]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:17.523]                         if (muffled) 
[16:20:17.523]                           invokeRestart("muffleWarning")
[16:20:17.523]                       }
[16:20:17.523]                       else if (inherits(cond, "condition")) {
[16:20:17.523]                         if (!is.null(pattern)) {
[16:20:17.523]                           computeRestarts <- base::computeRestarts
[16:20:17.523]                           grepl <- base::grepl
[16:20:17.523]                           restarts <- computeRestarts(cond)
[16:20:17.523]                           for (restart in restarts) {
[16:20:17.523]                             name <- restart$name
[16:20:17.523]                             if (is.null(name)) 
[16:20:17.523]                               next
[16:20:17.523]                             if (!grepl(pattern, name)) 
[16:20:17.523]                               next
[16:20:17.523]                             invokeRestart(restart)
[16:20:17.523]                             muffled <- TRUE
[16:20:17.523]                             break
[16:20:17.523]                           }
[16:20:17.523]                         }
[16:20:17.523]                       }
[16:20:17.523]                       invisible(muffled)
[16:20:17.523]                     }
[16:20:17.523]                     muffleCondition(cond, pattern = "^muffle")
[16:20:17.523]                   }
[16:20:17.523]                 }
[16:20:17.523]                 else {
[16:20:17.523]                   if (TRUE) {
[16:20:17.523]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:17.523]                     {
[16:20:17.523]                       inherits <- base::inherits
[16:20:17.523]                       invokeRestart <- base::invokeRestart
[16:20:17.523]                       is.null <- base::is.null
[16:20:17.523]                       muffled <- FALSE
[16:20:17.523]                       if (inherits(cond, "message")) {
[16:20:17.523]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:17.523]                         if (muffled) 
[16:20:17.523]                           invokeRestart("muffleMessage")
[16:20:17.523]                       }
[16:20:17.523]                       else if (inherits(cond, "warning")) {
[16:20:17.523]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:17.523]                         if (muffled) 
[16:20:17.523]                           invokeRestart("muffleWarning")
[16:20:17.523]                       }
[16:20:17.523]                       else if (inherits(cond, "condition")) {
[16:20:17.523]                         if (!is.null(pattern)) {
[16:20:17.523]                           computeRestarts <- base::computeRestarts
[16:20:17.523]                           grepl <- base::grepl
[16:20:17.523]                           restarts <- computeRestarts(cond)
[16:20:17.523]                           for (restart in restarts) {
[16:20:17.523]                             name <- restart$name
[16:20:17.523]                             if (is.null(name)) 
[16:20:17.523]                               next
[16:20:17.523]                             if (!grepl(pattern, name)) 
[16:20:17.523]                               next
[16:20:17.523]                             invokeRestart(restart)
[16:20:17.523]                             muffled <- TRUE
[16:20:17.523]                             break
[16:20:17.523]                           }
[16:20:17.523]                         }
[16:20:17.523]                       }
[16:20:17.523]                       invisible(muffled)
[16:20:17.523]                     }
[16:20:17.523]                     muffleCondition(cond, pattern = "^muffle")
[16:20:17.523]                   }
[16:20:17.523]                 }
[16:20:17.523]             }
[16:20:17.523]         }))
[16:20:17.523]     }, error = function(ex) {
[16:20:17.523]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:17.523]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:17.523]                 ...future.rng), started = ...future.startTime, 
[16:20:17.523]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:17.523]             version = "1.8"), class = "FutureResult")
[16:20:17.523]     }, finally = {
[16:20:17.523]         if (!identical(...future.workdir, getwd())) 
[16:20:17.523]             setwd(...future.workdir)
[16:20:17.523]         {
[16:20:17.523]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:17.523]                 ...future.oldOptions$nwarnings <- NULL
[16:20:17.523]             }
[16:20:17.523]             base::options(...future.oldOptions)
[16:20:17.523]             if (.Platform$OS.type == "windows") {
[16:20:17.523]                 old_names <- names(...future.oldEnvVars)
[16:20:17.523]                 envs <- base::Sys.getenv()
[16:20:17.523]                 names <- names(envs)
[16:20:17.523]                 common <- intersect(names, old_names)
[16:20:17.523]                 added <- setdiff(names, old_names)
[16:20:17.523]                 removed <- setdiff(old_names, names)
[16:20:17.523]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:17.523]                   envs[common]]
[16:20:17.523]                 NAMES <- toupper(changed)
[16:20:17.523]                 args <- list()
[16:20:17.523]                 for (kk in seq_along(NAMES)) {
[16:20:17.523]                   name <- changed[[kk]]
[16:20:17.523]                   NAME <- NAMES[[kk]]
[16:20:17.523]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:17.523]                     next
[16:20:17.523]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:17.523]                 }
[16:20:17.523]                 NAMES <- toupper(added)
[16:20:17.523]                 for (kk in seq_along(NAMES)) {
[16:20:17.523]                   name <- added[[kk]]
[16:20:17.523]                   NAME <- NAMES[[kk]]
[16:20:17.523]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:17.523]                     next
[16:20:17.523]                   args[[name]] <- ""
[16:20:17.523]                 }
[16:20:17.523]                 NAMES <- toupper(removed)
[16:20:17.523]                 for (kk in seq_along(NAMES)) {
[16:20:17.523]                   name <- removed[[kk]]
[16:20:17.523]                   NAME <- NAMES[[kk]]
[16:20:17.523]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:17.523]                     next
[16:20:17.523]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:17.523]                 }
[16:20:17.523]                 if (length(args) > 0) 
[16:20:17.523]                   base::do.call(base::Sys.setenv, args = args)
[16:20:17.523]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:17.523]             }
[16:20:17.523]             else {
[16:20:17.523]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:17.523]             }
[16:20:17.523]             {
[16:20:17.523]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:17.523]                   0L) {
[16:20:17.523]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:17.523]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:17.523]                   base::options(opts)
[16:20:17.523]                 }
[16:20:17.523]                 {
[16:20:17.523]                   {
[16:20:17.523]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:17.523]                     NULL
[16:20:17.523]                   }
[16:20:17.523]                   options(future.plan = NULL)
[16:20:17.523]                   if (is.na(NA_character_)) 
[16:20:17.523]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:17.523]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:17.523]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:17.523]                     .init = FALSE)
[16:20:17.523]                 }
[16:20:17.523]             }
[16:20:17.523]         }
[16:20:17.523]     })
[16:20:17.523]     if (TRUE) {
[16:20:17.523]         base::sink(type = "output", split = FALSE)
[16:20:17.523]         if (TRUE) {
[16:20:17.523]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:17.523]         }
[16:20:17.523]         else {
[16:20:17.523]             ...future.result["stdout"] <- base::list(NULL)
[16:20:17.523]         }
[16:20:17.523]         base::close(...future.stdout)
[16:20:17.523]         ...future.stdout <- NULL
[16:20:17.523]     }
[16:20:17.523]     ...future.result$conditions <- ...future.conditions
[16:20:17.523]     ...future.result$finished <- base::Sys.time()
[16:20:17.523]     ...future.result
[16:20:17.523] }
[16:20:17.528] assign_globals() ...
[16:20:17.528] List of 2
[16:20:17.528]  $ x: int [1:2] 1 2
[16:20:17.528]  $ y: num 3
[16:20:17.528]  - attr(*, "where")=List of 2
[16:20:17.528]   ..$ x:<environment: R_EmptyEnv> 
[16:20:17.528]   ..$ y:<environment: R_EmptyEnv> 
[16:20:17.528]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:17.528]  - attr(*, "resolved")= logi FALSE
[16:20:17.528]  - attr(*, "total_size")= num 112
[16:20:17.528]  - attr(*, "already-done")= logi TRUE
[16:20:17.532] - copied ‘x’ to environment
[16:20:17.532] - copied ‘y’ to environment
[16:20:17.532] assign_globals() ... done
[16:20:17.532] requestCore(): workers = 2
[16:20:17.534] MulticoreFuture started
[16:20:17.535] - Launch lazy future ... done
[16:20:17.535] run() for ‘MulticoreFuture’ ... done
[16:20:17.535] result() for MulticoreFuture ...
[16:20:17.536] plan(): Setting new future strategy stack:
[16:20:17.536] List of future strategies:
[16:20:17.536] 1. sequential:
[16:20:17.536]    - args: function (..., envir = parent.frame())
[16:20:17.536]    - tweaked: FALSE
[16:20:17.536]    - call: NULL
[16:20:17.537] plan(): nbrOfWorkers() = 1
[16:20:17.539] plan(): Setting new future strategy stack:
[16:20:17.539] List of future strategies:
[16:20:17.539] 1. multicore:
[16:20:17.539]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:20:17.539]    - tweaked: FALSE
[16:20:17.539]    - call: plan(strategy, substitute = FALSE)
[16:20:17.544] plan(): nbrOfWorkers() = 2
[16:20:17.550] result() for MulticoreFuture ...
[16:20:17.550] result() for MulticoreFuture ... done
[16:20:17.550] signalConditions() ...
[16:20:17.550]  - include = ‘immediateCondition’
[16:20:17.551]  - exclude = 
[16:20:17.551]  - resignal = FALSE
[16:20:17.551]  - Number of conditions: 1
[16:20:17.551] signalConditions() ... done
[16:20:17.551] result() for MulticoreFuture ... done
[16:20:17.551] result() for MulticoreFuture ...
[16:20:17.552] result() for MulticoreFuture ... done
[16:20:17.552] signalConditions() ...
[16:20:17.552]  - include = ‘immediateCondition’
[16:20:17.552]  - exclude = 
[16:20:17.552]  - resignal = FALSE
[16:20:17.552]  - Number of conditions: 1
[16:20:17.552] signalConditions() ... done
[16:20:17.553] Future state: ‘finished’
[16:20:17.553] result() for MulticoreFuture ...
[16:20:17.553] result() for MulticoreFuture ... done
[16:20:17.553] signalConditions() ...
[16:20:17.553]  - include = ‘condition’
[16:20:17.553]  - exclude = ‘immediateCondition’
[16:20:17.553]  - resignal = TRUE
[16:20:17.553]  - Number of conditions: 1
[16:20:17.554]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:20:17.554] signalConditions() ... done
Error in withCallingHandlers({ : '...' used in an incorrect context
[1] "Error in withCallingHandlers({ : '...' used in an incorrect context\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        sum(x, y, ...)    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpGMDtVt/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): '...' used in an incorrect context>
** Sum function 'E' with plan('multicore') ...
function (...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    globals <- globals::globalsByName("...", envir = environment())
    f <- future({
        fcn <- function() sum(...)
        fcn()
    }, envir = parent.frame(), globals = globals)
    y <- value(f)
    y
}
<bytecode: 0x55ed01add168>
Arguments '...' exists: TRUE
[16:20:17.555] getGlobalsAndPackages() ...
[16:20:17.555] - globals passed as-is: [1] ‘...’
[16:20:17.556] Resolving globals: FALSE
[16:20:17.556] Tweak future expression to call with '...' arguments ...
[16:20:17.556] {
[16:20:17.556]     do.call(function(...) {
[16:20:17.556]         fcn <- function() sum(...)
[16:20:17.556]         fcn()
[16:20:17.556]     }, args = future.call.arguments)
[16:20:17.556] }
[16:20:17.556] Tweak future expression to call with '...' arguments ... DONE
[16:20:17.557] The total size of the 1 globals is 112 bytes (112 bytes)
[16:20:17.557] The total size of the 1 globals exported for future expression (‘{; fcn <- function() sum(...); fcn(); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘future.call.arguments’ (112 bytes of class ‘list’)
[16:20:17.557] - globals: [1] ‘future.call.arguments’
[16:20:17.558] 
[16:20:17.558] getGlobalsAndPackages() ... DONE
[16:20:17.558] run() for ‘Future’ ...
[16:20:17.558] - state: ‘created’
[16:20:17.558] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:20:17.562] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:17.562] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:20:17.563]   - Field: ‘label’
[16:20:17.563]   - Field: ‘local’
[16:20:17.563]   - Field: ‘owner’
[16:20:17.563]   - Field: ‘envir’
[16:20:17.563]   - Field: ‘workers’
[16:20:17.563]   - Field: ‘packages’
[16:20:17.563]   - Field: ‘gc’
[16:20:17.563]   - Field: ‘job’
[16:20:17.563]   - Field: ‘conditions’
[16:20:17.564]   - Field: ‘expr’
[16:20:17.564]   - Field: ‘uuid’
[16:20:17.564]   - Field: ‘seed’
[16:20:17.564]   - Field: ‘version’
[16:20:17.564]   - Field: ‘result’
[16:20:17.564]   - Field: ‘asynchronous’
[16:20:17.564]   - Field: ‘calls’
[16:20:17.564]   - Field: ‘globals’
[16:20:17.564]   - Field: ‘stdout’
[16:20:17.565]   - Field: ‘earlySignal’
[16:20:17.565]   - Field: ‘lazy’
[16:20:17.565]   - Field: ‘state’
[16:20:17.565] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:20:17.565] - Launch lazy future ...
[16:20:17.565] Packages needed by the future expression (n = 0): <none>
[16:20:17.565] Packages needed by future strategies (n = 0): <none>
[16:20:17.566] {
[16:20:17.566]     {
[16:20:17.566]         {
[16:20:17.566]             ...future.startTime <- base::Sys.time()
[16:20:17.566]             {
[16:20:17.566]                 {
[16:20:17.566]                   {
[16:20:17.566]                     {
[16:20:17.566]                       base::local({
[16:20:17.566]                         has_future <- base::requireNamespace("future", 
[16:20:17.566]                           quietly = TRUE)
[16:20:17.566]                         if (has_future) {
[16:20:17.566]                           ns <- base::getNamespace("future")
[16:20:17.566]                           version <- ns[[".package"]][["version"]]
[16:20:17.566]                           if (is.null(version)) 
[16:20:17.566]                             version <- utils::packageVersion("future")
[16:20:17.566]                         }
[16:20:17.566]                         else {
[16:20:17.566]                           version <- NULL
[16:20:17.566]                         }
[16:20:17.566]                         if (!has_future || version < "1.8.0") {
[16:20:17.566]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:17.566]                             "", base::R.version$version.string), 
[16:20:17.566]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:17.566]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:17.566]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:17.566]                               "release", "version")], collapse = " "), 
[16:20:17.566]                             hostname = base::Sys.info()[["nodename"]])
[16:20:17.566]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:17.566]                             info)
[16:20:17.566]                           info <- base::paste(info, collapse = "; ")
[16:20:17.566]                           if (!has_future) {
[16:20:17.566]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:17.566]                               info)
[16:20:17.566]                           }
[16:20:17.566]                           else {
[16:20:17.566]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:17.566]                               info, version)
[16:20:17.566]                           }
[16:20:17.566]                           base::stop(msg)
[16:20:17.566]                         }
[16:20:17.566]                       })
[16:20:17.566]                     }
[16:20:17.566]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:17.566]                     base::options(mc.cores = 1L)
[16:20:17.566]                   }
[16:20:17.566]                   ...future.strategy.old <- future::plan("list")
[16:20:17.566]                   options(future.plan = NULL)
[16:20:17.566]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:17.566]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:17.566]                 }
[16:20:17.566]                 ...future.workdir <- getwd()
[16:20:17.566]             }
[16:20:17.566]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:17.566]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:17.566]         }
[16:20:17.566]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:17.566]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:17.566]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:17.566]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:17.566]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:17.566]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:17.566]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:17.566]             base::names(...future.oldOptions))
[16:20:17.566]     }
[16:20:17.566]     if (FALSE) {
[16:20:17.566]     }
[16:20:17.566]     else {
[16:20:17.566]         if (TRUE) {
[16:20:17.566]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:17.566]                 open = "w")
[16:20:17.566]         }
[16:20:17.566]         else {
[16:20:17.566]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:17.566]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:17.566]         }
[16:20:17.566]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:17.566]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:17.566]             base::sink(type = "output", split = FALSE)
[16:20:17.566]             base::close(...future.stdout)
[16:20:17.566]         }, add = TRUE)
[16:20:17.566]     }
[16:20:17.566]     ...future.frame <- base::sys.nframe()
[16:20:17.566]     ...future.conditions <- base::list()
[16:20:17.566]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:17.566]     if (FALSE) {
[16:20:17.566]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:17.566]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:17.566]     }
[16:20:17.566]     ...future.result <- base::tryCatch({
[16:20:17.566]         base::withCallingHandlers({
[16:20:17.566]             ...future.value <- base::withVisible(base::local({
[16:20:17.566]                 withCallingHandlers({
[16:20:17.566]                   {
[16:20:17.566]                     do.call(function(...) {
[16:20:17.566]                       fcn <- function() sum(...)
[16:20:17.566]                       fcn()
[16:20:17.566]                     }, args = future.call.arguments)
[16:20:17.566]                   }
[16:20:17.566]                 }, immediateCondition = function(cond) {
[16:20:17.566]                   save_rds <- function (object, pathname, ...) 
[16:20:17.566]                   {
[16:20:17.566]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:20:17.566]                     if (file_test("-f", pathname_tmp)) {
[16:20:17.566]                       fi_tmp <- file.info(pathname_tmp)
[16:20:17.566]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:20:17.566]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:17.566]                         fi_tmp[["mtime"]])
[16:20:17.566]                     }
[16:20:17.566]                     tryCatch({
[16:20:17.566]                       saveRDS(object, file = pathname_tmp, ...)
[16:20:17.566]                     }, error = function(ex) {
[16:20:17.566]                       msg <- conditionMessage(ex)
[16:20:17.566]                       fi_tmp <- file.info(pathname_tmp)
[16:20:17.566]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:20:17.566]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:17.566]                         fi_tmp[["mtime"]], msg)
[16:20:17.566]                       ex$message <- msg
[16:20:17.566]                       stop(ex)
[16:20:17.566]                     })
[16:20:17.566]                     stopifnot(file_test("-f", pathname_tmp))
[16:20:17.566]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:20:17.566]                     if (!res || file_test("-f", pathname_tmp)) {
[16:20:17.566]                       fi_tmp <- file.info(pathname_tmp)
[16:20:17.566]                       fi <- file.info(pathname)
[16:20:17.566]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:20:17.566]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:17.566]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:20:17.566]                         fi[["size"]], fi[["mtime"]])
[16:20:17.566]                       stop(msg)
[16:20:17.566]                     }
[16:20:17.566]                     invisible(pathname)
[16:20:17.566]                   }
[16:20:17.566]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:20:17.566]                     rootPath = tempdir()) 
[16:20:17.566]                   {
[16:20:17.566]                     obj <- list(time = Sys.time(), condition = cond)
[16:20:17.566]                     file <- tempfile(pattern = class(cond)[1], 
[16:20:17.566]                       tmpdir = path, fileext = ".rds")
[16:20:17.566]                     save_rds(obj, file)
[16:20:17.566]                   }
[16:20:17.566]                   saveImmediateCondition(cond, path = "/tmp/RtmpGMDtVt/.future/immediateConditions")
[16:20:17.566]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:17.566]                   {
[16:20:17.566]                     inherits <- base::inherits
[16:20:17.566]                     invokeRestart <- base::invokeRestart
[16:20:17.566]                     is.null <- base::is.null
[16:20:17.566]                     muffled <- FALSE
[16:20:17.566]                     if (inherits(cond, "message")) {
[16:20:17.566]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:17.566]                       if (muffled) 
[16:20:17.566]                         invokeRestart("muffleMessage")
[16:20:17.566]                     }
[16:20:17.566]                     else if (inherits(cond, "warning")) {
[16:20:17.566]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:17.566]                       if (muffled) 
[16:20:17.566]                         invokeRestart("muffleWarning")
[16:20:17.566]                     }
[16:20:17.566]                     else if (inherits(cond, "condition")) {
[16:20:17.566]                       if (!is.null(pattern)) {
[16:20:17.566]                         computeRestarts <- base::computeRestarts
[16:20:17.566]                         grepl <- base::grepl
[16:20:17.566]                         restarts <- computeRestarts(cond)
[16:20:17.566]                         for (restart in restarts) {
[16:20:17.566]                           name <- restart$name
[16:20:17.566]                           if (is.null(name)) 
[16:20:17.566]                             next
[16:20:17.566]                           if (!grepl(pattern, name)) 
[16:20:17.566]                             next
[16:20:17.566]                           invokeRestart(restart)
[16:20:17.566]                           muffled <- TRUE
[16:20:17.566]                           break
[16:20:17.566]                         }
[16:20:17.566]                       }
[16:20:17.566]                     }
[16:20:17.566]                     invisible(muffled)
[16:20:17.566]                   }
[16:20:17.566]                   muffleCondition(cond)
[16:20:17.566]                 })
[16:20:17.566]             }))
[16:20:17.566]             future::FutureResult(value = ...future.value$value, 
[16:20:17.566]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:17.566]                   ...future.rng), globalenv = if (FALSE) 
[16:20:17.566]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:17.566]                     ...future.globalenv.names))
[16:20:17.566]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:17.566]         }, condition = base::local({
[16:20:17.566]             c <- base::c
[16:20:17.566]             inherits <- base::inherits
[16:20:17.566]             invokeRestart <- base::invokeRestart
[16:20:17.566]             length <- base::length
[16:20:17.566]             list <- base::list
[16:20:17.566]             seq.int <- base::seq.int
[16:20:17.566]             signalCondition <- base::signalCondition
[16:20:17.566]             sys.calls <- base::sys.calls
[16:20:17.566]             `[[` <- base::`[[`
[16:20:17.566]             `+` <- base::`+`
[16:20:17.566]             `<<-` <- base::`<<-`
[16:20:17.566]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:17.566]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:17.566]                   3L)]
[16:20:17.566]             }
[16:20:17.566]             function(cond) {
[16:20:17.566]                 is_error <- inherits(cond, "error")
[16:20:17.566]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:17.566]                   NULL)
[16:20:17.566]                 if (is_error) {
[16:20:17.566]                   sessionInformation <- function() {
[16:20:17.566]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:17.566]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:17.566]                       search = base::search(), system = base::Sys.info())
[16:20:17.566]                   }
[16:20:17.566]                   ...future.conditions[[length(...future.conditions) + 
[16:20:17.566]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:17.566]                     cond$call), session = sessionInformation(), 
[16:20:17.566]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:17.566]                   signalCondition(cond)
[16:20:17.566]                 }
[16:20:17.566]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:17.566]                 "immediateCondition"))) {
[16:20:17.566]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:17.566]                   ...future.conditions[[length(...future.conditions) + 
[16:20:17.566]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:17.566]                   if (TRUE && !signal) {
[16:20:17.566]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:17.566]                     {
[16:20:17.566]                       inherits <- base::inherits
[16:20:17.566]                       invokeRestart <- base::invokeRestart
[16:20:17.566]                       is.null <- base::is.null
[16:20:17.566]                       muffled <- FALSE
[16:20:17.566]                       if (inherits(cond, "message")) {
[16:20:17.566]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:17.566]                         if (muffled) 
[16:20:17.566]                           invokeRestart("muffleMessage")
[16:20:17.566]                       }
[16:20:17.566]                       else if (inherits(cond, "warning")) {
[16:20:17.566]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:17.566]                         if (muffled) 
[16:20:17.566]                           invokeRestart("muffleWarning")
[16:20:17.566]                       }
[16:20:17.566]                       else if (inherits(cond, "condition")) {
[16:20:17.566]                         if (!is.null(pattern)) {
[16:20:17.566]                           computeRestarts <- base::computeRestarts
[16:20:17.566]                           grepl <- base::grepl
[16:20:17.566]                           restarts <- computeRestarts(cond)
[16:20:17.566]                           for (restart in restarts) {
[16:20:17.566]                             name <- restart$name
[16:20:17.566]                             if (is.null(name)) 
[16:20:17.566]                               next
[16:20:17.566]                             if (!grepl(pattern, name)) 
[16:20:17.566]                               next
[16:20:17.566]                             invokeRestart(restart)
[16:20:17.566]                             muffled <- TRUE
[16:20:17.566]                             break
[16:20:17.566]                           }
[16:20:17.566]                         }
[16:20:17.566]                       }
[16:20:17.566]                       invisible(muffled)
[16:20:17.566]                     }
[16:20:17.566]                     muffleCondition(cond, pattern = "^muffle")
[16:20:17.566]                   }
[16:20:17.566]                 }
[16:20:17.566]                 else {
[16:20:17.566]                   if (TRUE) {
[16:20:17.566]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:17.566]                     {
[16:20:17.566]                       inherits <- base::inherits
[16:20:17.566]                       invokeRestart <- base::invokeRestart
[16:20:17.566]                       is.null <- base::is.null
[16:20:17.566]                       muffled <- FALSE
[16:20:17.566]                       if (inherits(cond, "message")) {
[16:20:17.566]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:17.566]                         if (muffled) 
[16:20:17.566]                           invokeRestart("muffleMessage")
[16:20:17.566]                       }
[16:20:17.566]                       else if (inherits(cond, "warning")) {
[16:20:17.566]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:17.566]                         if (muffled) 
[16:20:17.566]                           invokeRestart("muffleWarning")
[16:20:17.566]                       }
[16:20:17.566]                       else if (inherits(cond, "condition")) {
[16:20:17.566]                         if (!is.null(pattern)) {
[16:20:17.566]                           computeRestarts <- base::computeRestarts
[16:20:17.566]                           grepl <- base::grepl
[16:20:17.566]                           restarts <- computeRestarts(cond)
[16:20:17.566]                           for (restart in restarts) {
[16:20:17.566]                             name <- restart$name
[16:20:17.566]                             if (is.null(name)) 
[16:20:17.566]                               next
[16:20:17.566]                             if (!grepl(pattern, name)) 
[16:20:17.566]                               next
[16:20:17.566]                             invokeRestart(restart)
[16:20:17.566]                             muffled <- TRUE
[16:20:17.566]                             break
[16:20:17.566]                           }
[16:20:17.566]                         }
[16:20:17.566]                       }
[16:20:17.566]                       invisible(muffled)
[16:20:17.566]                     }
[16:20:17.566]                     muffleCondition(cond, pattern = "^muffle")
[16:20:17.566]                   }
[16:20:17.566]                 }
[16:20:17.566]             }
[16:20:17.566]         }))
[16:20:17.566]     }, error = function(ex) {
[16:20:17.566]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:17.566]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:17.566]                 ...future.rng), started = ...future.startTime, 
[16:20:17.566]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:17.566]             version = "1.8"), class = "FutureResult")
[16:20:17.566]     }, finally = {
[16:20:17.566]         if (!identical(...future.workdir, getwd())) 
[16:20:17.566]             setwd(...future.workdir)
[16:20:17.566]         {
[16:20:17.566]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:17.566]                 ...future.oldOptions$nwarnings <- NULL
[16:20:17.566]             }
[16:20:17.566]             base::options(...future.oldOptions)
[16:20:17.566]             if (.Platform$OS.type == "windows") {
[16:20:17.566]                 old_names <- names(...future.oldEnvVars)
[16:20:17.566]                 envs <- base::Sys.getenv()
[16:20:17.566]                 names <- names(envs)
[16:20:17.566]                 common <- intersect(names, old_names)
[16:20:17.566]                 added <- setdiff(names, old_names)
[16:20:17.566]                 removed <- setdiff(old_names, names)
[16:20:17.566]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:17.566]                   envs[common]]
[16:20:17.566]                 NAMES <- toupper(changed)
[16:20:17.566]                 args <- list()
[16:20:17.566]                 for (kk in seq_along(NAMES)) {
[16:20:17.566]                   name <- changed[[kk]]
[16:20:17.566]                   NAME <- NAMES[[kk]]
[16:20:17.566]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:17.566]                     next
[16:20:17.566]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:17.566]                 }
[16:20:17.566]                 NAMES <- toupper(added)
[16:20:17.566]                 for (kk in seq_along(NAMES)) {
[16:20:17.566]                   name <- added[[kk]]
[16:20:17.566]                   NAME <- NAMES[[kk]]
[16:20:17.566]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:17.566]                     next
[16:20:17.566]                   args[[name]] <- ""
[16:20:17.566]                 }
[16:20:17.566]                 NAMES <- toupper(removed)
[16:20:17.566]                 for (kk in seq_along(NAMES)) {
[16:20:17.566]                   name <- removed[[kk]]
[16:20:17.566]                   NAME <- NAMES[[kk]]
[16:20:17.566]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:17.566]                     next
[16:20:17.566]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:17.566]                 }
[16:20:17.566]                 if (length(args) > 0) 
[16:20:17.566]                   base::do.call(base::Sys.setenv, args = args)
[16:20:17.566]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:17.566]             }
[16:20:17.566]             else {
[16:20:17.566]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:17.566]             }
[16:20:17.566]             {
[16:20:17.566]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:17.566]                   0L) {
[16:20:17.566]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:17.566]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:17.566]                   base::options(opts)
[16:20:17.566]                 }
[16:20:17.566]                 {
[16:20:17.566]                   {
[16:20:17.566]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:17.566]                     NULL
[16:20:17.566]                   }
[16:20:17.566]                   options(future.plan = NULL)
[16:20:17.566]                   if (is.na(NA_character_)) 
[16:20:17.566]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:17.566]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:17.566]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:17.566]                     .init = FALSE)
[16:20:17.566]                 }
[16:20:17.566]             }
[16:20:17.566]         }
[16:20:17.566]     })
[16:20:17.566]     if (TRUE) {
[16:20:17.566]         base::sink(type = "output", split = FALSE)
[16:20:17.566]         if (TRUE) {
[16:20:17.566]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:17.566]         }
[16:20:17.566]         else {
[16:20:17.566]             ...future.result["stdout"] <- base::list(NULL)
[16:20:17.566]         }
[16:20:17.566]         base::close(...future.stdout)
[16:20:17.566]         ...future.stdout <- NULL
[16:20:17.566]     }
[16:20:17.566]     ...future.result$conditions <- ...future.conditions
[16:20:17.566]     ...future.result$finished <- base::Sys.time()
[16:20:17.566]     ...future.result
[16:20:17.566] }
[16:20:17.568] assign_globals() ...
[16:20:17.569] List of 1
[16:20:17.569]  $ future.call.arguments:List of 2
[16:20:17.569]   ..$ : int [1:2] 1 2
[16:20:17.569]   ..$ : num 3
[16:20:17.569]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[16:20:17.569]  - attr(*, "where")=List of 1
[16:20:17.569]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[16:20:17.569]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:17.569]  - attr(*, "resolved")= logi FALSE
[16:20:17.569]  - attr(*, "total_size")= num 112
[16:20:17.569]  - attr(*, "already-done")= logi TRUE
[16:20:17.573] - copied ‘future.call.arguments’ to environment
[16:20:17.573] assign_globals() ... done
[16:20:17.573] requestCore(): workers = 2
[16:20:17.575] MulticoreFuture started
[16:20:17.575] - Launch lazy future ... done
[16:20:17.575] run() for ‘MulticoreFuture’ ... done
[16:20:17.575] result() for MulticoreFuture ...
[16:20:17.576] plan(): Setting new future strategy stack:
[16:20:17.576] List of future strategies:
[16:20:17.576] 1. sequential:
[16:20:17.576]    - args: function (..., envir = parent.frame())
[16:20:17.576]    - tweaked: FALSE
[16:20:17.576]    - call: NULL
[16:20:17.577] plan(): nbrOfWorkers() = 1
[16:20:17.579] plan(): Setting new future strategy stack:
[16:20:17.579] List of future strategies:
[16:20:17.579] 1. multicore:
[16:20:17.579]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:20:17.579]    - tweaked: FALSE
[16:20:17.579]    - call: plan(strategy, substitute = FALSE)
[16:20:17.584] plan(): nbrOfWorkers() = 2
[16:20:17.590] result() for MulticoreFuture ...
[16:20:17.590] result() for MulticoreFuture ... done
[16:20:17.591] result() for MulticoreFuture ... done
[16:20:17.591] result() for MulticoreFuture ...
[16:20:17.591] result() for MulticoreFuture ... done
[1] 6
** Sum function 'F' with plan('multicore') ...
function (x, y) 
{
    message("Using '...' in a formula")
    fcn <- function(x, y) {
        z = ~list(...)
        sum(x, y)
    }
    f <- future(fcn(x, y))
    y <- value(f)
    y
}
<bytecode: 0x55ed0036e828>
Using '...' in a formula
[16:20:17.592] getGlobalsAndPackages() ...
[16:20:17.592] Searching for globals...
[16:20:17.600] - globals found: [9] ‘fcn’, ‘x’, ‘y’, ‘{’, ‘=’, ‘~’, ‘list’, ‘...’, ‘sum’
[16:20:17.600] Searching for globals ... DONE
[16:20:17.600] Resolving globals: FALSE
[16:20:17.600] Tweak future expression to call with '...' arguments ...
[16:20:17.601] The total size of the 3 globals is 4.18 KiB (4280 bytes)
[16:20:17.601] The total size of the 3 globals exported for future expression (‘fcn(x, y)’) is 4.18 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘fcn’ (4.07 KiB of class ‘function’), ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[16:20:17.602] - globals: [3] ‘fcn’, ‘x’, ‘y’
[16:20:17.602] 
[16:20:17.602] getGlobalsAndPackages() ... DONE
[16:20:17.602] run() for ‘Future’ ...
[16:20:17.602] - state: ‘created’
[16:20:17.602] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:20:17.607] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:17.607] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:20:17.607]   - Field: ‘label’
[16:20:17.607]   - Field: ‘local’
[16:20:17.607]   - Field: ‘owner’
[16:20:17.607]   - Field: ‘envir’
[16:20:17.607]   - Field: ‘workers’
[16:20:17.607]   - Field: ‘packages’
[16:20:17.608]   - Field: ‘gc’
[16:20:17.608]   - Field: ‘job’
[16:20:17.608]   - Field: ‘conditions’
[16:20:17.608]   - Field: ‘expr’
[16:20:17.608]   - Field: ‘uuid’
[16:20:17.608]   - Field: ‘seed’
[16:20:17.608]   - Field: ‘version’
[16:20:17.608]   - Field: ‘result’
[16:20:17.608]   - Field: ‘asynchronous’
[16:20:17.609]   - Field: ‘calls’
[16:20:17.609]   - Field: ‘globals’
[16:20:17.609]   - Field: ‘stdout’
[16:20:17.609]   - Field: ‘earlySignal’
[16:20:17.609]   - Field: ‘lazy’
[16:20:17.609]   - Field: ‘state’
[16:20:17.609] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:20:17.609] - Launch lazy future ...
[16:20:17.610] Packages needed by the future expression (n = 0): <none>
[16:20:17.610] Packages needed by future strategies (n = 0): <none>
[16:20:17.610] {
[16:20:17.610]     {
[16:20:17.610]         {
[16:20:17.610]             ...future.startTime <- base::Sys.time()
[16:20:17.610]             {
[16:20:17.610]                 {
[16:20:17.610]                   {
[16:20:17.610]                     {
[16:20:17.610]                       base::local({
[16:20:17.610]                         has_future <- base::requireNamespace("future", 
[16:20:17.610]                           quietly = TRUE)
[16:20:17.610]                         if (has_future) {
[16:20:17.610]                           ns <- base::getNamespace("future")
[16:20:17.610]                           version <- ns[[".package"]][["version"]]
[16:20:17.610]                           if (is.null(version)) 
[16:20:17.610]                             version <- utils::packageVersion("future")
[16:20:17.610]                         }
[16:20:17.610]                         else {
[16:20:17.610]                           version <- NULL
[16:20:17.610]                         }
[16:20:17.610]                         if (!has_future || version < "1.8.0") {
[16:20:17.610]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:17.610]                             "", base::R.version$version.string), 
[16:20:17.610]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:17.610]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:17.610]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:17.610]                               "release", "version")], collapse = " "), 
[16:20:17.610]                             hostname = base::Sys.info()[["nodename"]])
[16:20:17.610]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:17.610]                             info)
[16:20:17.610]                           info <- base::paste(info, collapse = "; ")
[16:20:17.610]                           if (!has_future) {
[16:20:17.610]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:17.610]                               info)
[16:20:17.610]                           }
[16:20:17.610]                           else {
[16:20:17.610]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:17.610]                               info, version)
[16:20:17.610]                           }
[16:20:17.610]                           base::stop(msg)
[16:20:17.610]                         }
[16:20:17.610]                       })
[16:20:17.610]                     }
[16:20:17.610]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:17.610]                     base::options(mc.cores = 1L)
[16:20:17.610]                   }
[16:20:17.610]                   ...future.strategy.old <- future::plan("list")
[16:20:17.610]                   options(future.plan = NULL)
[16:20:17.610]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:17.610]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:17.610]                 }
[16:20:17.610]                 ...future.workdir <- getwd()
[16:20:17.610]             }
[16:20:17.610]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:17.610]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:17.610]         }
[16:20:17.610]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:17.610]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:17.610]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:17.610]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:17.610]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:17.610]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:17.610]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:17.610]             base::names(...future.oldOptions))
[16:20:17.610]     }
[16:20:17.610]     if (FALSE) {
[16:20:17.610]     }
[16:20:17.610]     else {
[16:20:17.610]         if (TRUE) {
[16:20:17.610]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:17.610]                 open = "w")
[16:20:17.610]         }
[16:20:17.610]         else {
[16:20:17.610]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:17.610]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:17.610]         }
[16:20:17.610]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:17.610]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:17.610]             base::sink(type = "output", split = FALSE)
[16:20:17.610]             base::close(...future.stdout)
[16:20:17.610]         }, add = TRUE)
[16:20:17.610]     }
[16:20:17.610]     ...future.frame <- base::sys.nframe()
[16:20:17.610]     ...future.conditions <- base::list()
[16:20:17.610]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:17.610]     if (FALSE) {
[16:20:17.610]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:17.610]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:17.610]     }
[16:20:17.610]     ...future.result <- base::tryCatch({
[16:20:17.610]         base::withCallingHandlers({
[16:20:17.610]             ...future.value <- base::withVisible(base::local({
[16:20:17.610]                 withCallingHandlers({
[16:20:17.610]                   fcn(x, y)
[16:20:17.610]                 }, immediateCondition = function(cond) {
[16:20:17.610]                   save_rds <- function (object, pathname, ...) 
[16:20:17.610]                   {
[16:20:17.610]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:20:17.610]                     if (file_test("-f", pathname_tmp)) {
[16:20:17.610]                       fi_tmp <- file.info(pathname_tmp)
[16:20:17.610]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:20:17.610]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:17.610]                         fi_tmp[["mtime"]])
[16:20:17.610]                     }
[16:20:17.610]                     tryCatch({
[16:20:17.610]                       saveRDS(object, file = pathname_tmp, ...)
[16:20:17.610]                     }, error = function(ex) {
[16:20:17.610]                       msg <- conditionMessage(ex)
[16:20:17.610]                       fi_tmp <- file.info(pathname_tmp)
[16:20:17.610]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:20:17.610]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:17.610]                         fi_tmp[["mtime"]], msg)
[16:20:17.610]                       ex$message <- msg
[16:20:17.610]                       stop(ex)
[16:20:17.610]                     })
[16:20:17.610]                     stopifnot(file_test("-f", pathname_tmp))
[16:20:17.610]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:20:17.610]                     if (!res || file_test("-f", pathname_tmp)) {
[16:20:17.610]                       fi_tmp <- file.info(pathname_tmp)
[16:20:17.610]                       fi <- file.info(pathname)
[16:20:17.610]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:20:17.610]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:17.610]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:20:17.610]                         fi[["size"]], fi[["mtime"]])
[16:20:17.610]                       stop(msg)
[16:20:17.610]                     }
[16:20:17.610]                     invisible(pathname)
[16:20:17.610]                   }
[16:20:17.610]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:20:17.610]                     rootPath = tempdir()) 
[16:20:17.610]                   {
[16:20:17.610]                     obj <- list(time = Sys.time(), condition = cond)
[16:20:17.610]                     file <- tempfile(pattern = class(cond)[1], 
[16:20:17.610]                       tmpdir = path, fileext = ".rds")
[16:20:17.610]                     save_rds(obj, file)
[16:20:17.610]                   }
[16:20:17.610]                   saveImmediateCondition(cond, path = "/tmp/RtmpGMDtVt/.future/immediateConditions")
[16:20:17.610]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:17.610]                   {
[16:20:17.610]                     inherits <- base::inherits
[16:20:17.610]                     invokeRestart <- base::invokeRestart
[16:20:17.610]                     is.null <- base::is.null
[16:20:17.610]                     muffled <- FALSE
[16:20:17.610]                     if (inherits(cond, "message")) {
[16:20:17.610]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:17.610]                       if (muffled) 
[16:20:17.610]                         invokeRestart("muffleMessage")
[16:20:17.610]                     }
[16:20:17.610]                     else if (inherits(cond, "warning")) {
[16:20:17.610]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:17.610]                       if (muffled) 
[16:20:17.610]                         invokeRestart("muffleWarning")
[16:20:17.610]                     }
[16:20:17.610]                     else if (inherits(cond, "condition")) {
[16:20:17.610]                       if (!is.null(pattern)) {
[16:20:17.610]                         computeRestarts <- base::computeRestarts
[16:20:17.610]                         grepl <- base::grepl
[16:20:17.610]                         restarts <- computeRestarts(cond)
[16:20:17.610]                         for (restart in restarts) {
[16:20:17.610]                           name <- restart$name
[16:20:17.610]                           if (is.null(name)) 
[16:20:17.610]                             next
[16:20:17.610]                           if (!grepl(pattern, name)) 
[16:20:17.610]                             next
[16:20:17.610]                           invokeRestart(restart)
[16:20:17.610]                           muffled <- TRUE
[16:20:17.610]                           break
[16:20:17.610]                         }
[16:20:17.610]                       }
[16:20:17.610]                     }
[16:20:17.610]                     invisible(muffled)
[16:20:17.610]                   }
[16:20:17.610]                   muffleCondition(cond)
[16:20:17.610]                 })
[16:20:17.610]             }))
[16:20:17.610]             future::FutureResult(value = ...future.value$value, 
[16:20:17.610]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:17.610]                   ...future.rng), globalenv = if (FALSE) 
[16:20:17.610]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:17.610]                     ...future.globalenv.names))
[16:20:17.610]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:17.610]         }, condition = base::local({
[16:20:17.610]             c <- base::c
[16:20:17.610]             inherits <- base::inherits
[16:20:17.610]             invokeRestart <- base::invokeRestart
[16:20:17.610]             length <- base::length
[16:20:17.610]             list <- base::list
[16:20:17.610]             seq.int <- base::seq.int
[16:20:17.610]             signalCondition <- base::signalCondition
[16:20:17.610]             sys.calls <- base::sys.calls
[16:20:17.610]             `[[` <- base::`[[`
[16:20:17.610]             `+` <- base::`+`
[16:20:17.610]             `<<-` <- base::`<<-`
[16:20:17.610]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:17.610]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:17.610]                   3L)]
[16:20:17.610]             }
[16:20:17.610]             function(cond) {
[16:20:17.610]                 is_error <- inherits(cond, "error")
[16:20:17.610]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:17.610]                   NULL)
[16:20:17.610]                 if (is_error) {
[16:20:17.610]                   sessionInformation <- function() {
[16:20:17.610]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:17.610]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:17.610]                       search = base::search(), system = base::Sys.info())
[16:20:17.610]                   }
[16:20:17.610]                   ...future.conditions[[length(...future.conditions) + 
[16:20:17.610]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:17.610]                     cond$call), session = sessionInformation(), 
[16:20:17.610]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:17.610]                   signalCondition(cond)
[16:20:17.610]                 }
[16:20:17.610]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:17.610]                 "immediateCondition"))) {
[16:20:17.610]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:17.610]                   ...future.conditions[[length(...future.conditions) + 
[16:20:17.610]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:17.610]                   if (TRUE && !signal) {
[16:20:17.610]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:17.610]                     {
[16:20:17.610]                       inherits <- base::inherits
[16:20:17.610]                       invokeRestart <- base::invokeRestart
[16:20:17.610]                       is.null <- base::is.null
[16:20:17.610]                       muffled <- FALSE
[16:20:17.610]                       if (inherits(cond, "message")) {
[16:20:17.610]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:17.610]                         if (muffled) 
[16:20:17.610]                           invokeRestart("muffleMessage")
[16:20:17.610]                       }
[16:20:17.610]                       else if (inherits(cond, "warning")) {
[16:20:17.610]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:17.610]                         if (muffled) 
[16:20:17.610]                           invokeRestart("muffleWarning")
[16:20:17.610]                       }
[16:20:17.610]                       else if (inherits(cond, "condition")) {
[16:20:17.610]                         if (!is.null(pattern)) {
[16:20:17.610]                           computeRestarts <- base::computeRestarts
[16:20:17.610]                           grepl <- base::grepl
[16:20:17.610]                           restarts <- computeRestarts(cond)
[16:20:17.610]                           for (restart in restarts) {
[16:20:17.610]                             name <- restart$name
[16:20:17.610]                             if (is.null(name)) 
[16:20:17.610]                               next
[16:20:17.610]                             if (!grepl(pattern, name)) 
[16:20:17.610]                               next
[16:20:17.610]                             invokeRestart(restart)
[16:20:17.610]                             muffled <- TRUE
[16:20:17.610]                             break
[16:20:17.610]                           }
[16:20:17.610]                         }
[16:20:17.610]                       }
[16:20:17.610]                       invisible(muffled)
[16:20:17.610]                     }
[16:20:17.610]                     muffleCondition(cond, pattern = "^muffle")
[16:20:17.610]                   }
[16:20:17.610]                 }
[16:20:17.610]                 else {
[16:20:17.610]                   if (TRUE) {
[16:20:17.610]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:17.610]                     {
[16:20:17.610]                       inherits <- base::inherits
[16:20:17.610]                       invokeRestart <- base::invokeRestart
[16:20:17.610]                       is.null <- base::is.null
[16:20:17.610]                       muffled <- FALSE
[16:20:17.610]                       if (inherits(cond, "message")) {
[16:20:17.610]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:17.610]                         if (muffled) 
[16:20:17.610]                           invokeRestart("muffleMessage")
[16:20:17.610]                       }
[16:20:17.610]                       else if (inherits(cond, "warning")) {
[16:20:17.610]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:17.610]                         if (muffled) 
[16:20:17.610]                           invokeRestart("muffleWarning")
[16:20:17.610]                       }
[16:20:17.610]                       else if (inherits(cond, "condition")) {
[16:20:17.610]                         if (!is.null(pattern)) {
[16:20:17.610]                           computeRestarts <- base::computeRestarts
[16:20:17.610]                           grepl <- base::grepl
[16:20:17.610]                           restarts <- computeRestarts(cond)
[16:20:17.610]                           for (restart in restarts) {
[16:20:17.610]                             name <- restart$name
[16:20:17.610]                             if (is.null(name)) 
[16:20:17.610]                               next
[16:20:17.610]                             if (!grepl(pattern, name)) 
[16:20:17.610]                               next
[16:20:17.610]                             invokeRestart(restart)
[16:20:17.610]                             muffled <- TRUE
[16:20:17.610]                             break
[16:20:17.610]                           }
[16:20:17.610]                         }
[16:20:17.610]                       }
[16:20:17.610]                       invisible(muffled)
[16:20:17.610]                     }
[16:20:17.610]                     muffleCondition(cond, pattern = "^muffle")
[16:20:17.610]                   }
[16:20:17.610]                 }
[16:20:17.610]             }
[16:20:17.610]         }))
[16:20:17.610]     }, error = function(ex) {
[16:20:17.610]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:17.610]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:17.610]                 ...future.rng), started = ...future.startTime, 
[16:20:17.610]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:17.610]             version = "1.8"), class = "FutureResult")
[16:20:17.610]     }, finally = {
[16:20:17.610]         if (!identical(...future.workdir, getwd())) 
[16:20:17.610]             setwd(...future.workdir)
[16:20:17.610]         {
[16:20:17.610]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:17.610]                 ...future.oldOptions$nwarnings <- NULL
[16:20:17.610]             }
[16:20:17.610]             base::options(...future.oldOptions)
[16:20:17.610]             if (.Platform$OS.type == "windows") {
[16:20:17.610]                 old_names <- names(...future.oldEnvVars)
[16:20:17.610]                 envs <- base::Sys.getenv()
[16:20:17.610]                 names <- names(envs)
[16:20:17.610]                 common <- intersect(names, old_names)
[16:20:17.610]                 added <- setdiff(names, old_names)
[16:20:17.610]                 removed <- setdiff(old_names, names)
[16:20:17.610]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:17.610]                   envs[common]]
[16:20:17.610]                 NAMES <- toupper(changed)
[16:20:17.610]                 args <- list()
[16:20:17.610]                 for (kk in seq_along(NAMES)) {
[16:20:17.610]                   name <- changed[[kk]]
[16:20:17.610]                   NAME <- NAMES[[kk]]
[16:20:17.610]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:17.610]                     next
[16:20:17.610]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:17.610]                 }
[16:20:17.610]                 NAMES <- toupper(added)
[16:20:17.610]                 for (kk in seq_along(NAMES)) {
[16:20:17.610]                   name <- added[[kk]]
[16:20:17.610]                   NAME <- NAMES[[kk]]
[16:20:17.610]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:17.610]                     next
[16:20:17.610]                   args[[name]] <- ""
[16:20:17.610]                 }
[16:20:17.610]                 NAMES <- toupper(removed)
[16:20:17.610]                 for (kk in seq_along(NAMES)) {
[16:20:17.610]                   name <- removed[[kk]]
[16:20:17.610]                   NAME <- NAMES[[kk]]
[16:20:17.610]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:17.610]                     next
[16:20:17.610]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:17.610]                 }
[16:20:17.610]                 if (length(args) > 0) 
[16:20:17.610]                   base::do.call(base::Sys.setenv, args = args)
[16:20:17.610]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:17.610]             }
[16:20:17.610]             else {
[16:20:17.610]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:17.610]             }
[16:20:17.610]             {
[16:20:17.610]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:17.610]                   0L) {
[16:20:17.610]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:17.610]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:17.610]                   base::options(opts)
[16:20:17.610]                 }
[16:20:17.610]                 {
[16:20:17.610]                   {
[16:20:17.610]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:17.610]                     NULL
[16:20:17.610]                   }
[16:20:17.610]                   options(future.plan = NULL)
[16:20:17.610]                   if (is.na(NA_character_)) 
[16:20:17.610]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:17.610]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:17.610]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:17.610]                     .init = FALSE)
[16:20:17.610]                 }
[16:20:17.610]             }
[16:20:17.610]         }
[16:20:17.610]     })
[16:20:17.610]     if (TRUE) {
[16:20:17.610]         base::sink(type = "output", split = FALSE)
[16:20:17.610]         if (TRUE) {
[16:20:17.610]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:17.610]         }
[16:20:17.610]         else {
[16:20:17.610]             ...future.result["stdout"] <- base::list(NULL)
[16:20:17.610]         }
[16:20:17.610]         base::close(...future.stdout)
[16:20:17.610]         ...future.stdout <- NULL
[16:20:17.610]     }
[16:20:17.610]     ...future.result$conditions <- ...future.conditions
[16:20:17.610]     ...future.result$finished <- base::Sys.time()
[16:20:17.610]     ...future.result
[16:20:17.610] }
[16:20:17.613] assign_globals() ...
[16:20:17.613] List of 3
[16:20:17.613]  $ fcn:function (x, y)  
[16:20:17.613]  $ x  : int [1:2] 1 2
[16:20:17.613]  $ y  : num 3
[16:20:17.613]  - attr(*, "where")=List of 3
[16:20:17.613]   ..$ fcn:<environment: R_EmptyEnv> 
[16:20:17.613]   ..$ x  :<environment: R_EmptyEnv> 
[16:20:17.613]   ..$ y  :<environment: R_EmptyEnv> 
[16:20:17.613]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:17.613]  - attr(*, "resolved")= logi FALSE
[16:20:17.613]  - attr(*, "total_size")= num 4280
[16:20:17.613]  - attr(*, "already-done")= logi TRUE
[16:20:17.617] - reassign environment for ‘fcn’
[16:20:17.617] - copied ‘fcn’ to environment
[16:20:17.617] - copied ‘x’ to environment
[16:20:17.617] - copied ‘y’ to environment
[16:20:17.617] assign_globals() ... done
[16:20:17.617] requestCore(): workers = 2
[16:20:17.619] MulticoreFuture started
[16:20:17.620] - Launch lazy future ... done
[16:20:17.620] run() for ‘MulticoreFuture’ ... done
[16:20:17.620] result() for MulticoreFuture ...
[16:20:17.620] plan(): Setting new future strategy stack:
[16:20:17.621] List of future strategies:
[16:20:17.621] 1. sequential:
[16:20:17.621]    - args: function (..., envir = parent.frame())
[16:20:17.621]    - tweaked: FALSE
[16:20:17.621]    - call: NULL
[16:20:17.621] plan(): nbrOfWorkers() = 1
[16:20:17.623] plan(): Setting new future strategy stack:
[16:20:17.623] List of future strategies:
[16:20:17.623] 1. multicore:
[16:20:17.623]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:20:17.623]    - tweaked: FALSE
[16:20:17.623]    - call: plan(strategy, substitute = FALSE)
[16:20:17.629] plan(): nbrOfWorkers() = 2
[16:20:17.630] result() for MulticoreFuture ...
[16:20:17.630] result() for MulticoreFuture ... done
[16:20:17.630] result() for MulticoreFuture ... done
[16:20:17.630] result() for MulticoreFuture ...
[16:20:17.630] result() for MulticoreFuture ... done
[1] 6
- plan('multisession') ...
[16:20:17.631] plan(): Setting new future strategy stack:
[16:20:17.631] List of future strategies:
[16:20:17.631] 1. multisession:
[16:20:17.631]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:20:17.631]    - tweaked: FALSE
[16:20:17.631]    - call: plan(strategy, substitute = FALSE)
[16:20:17.632] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:20:17.632] multisession:
[16:20:17.632] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:20:17.632] - tweaked: FALSE
[16:20:17.632] - call: plan(strategy, substitute = FALSE)
[16:20:17.638] getGlobalsAndPackages() ...
[16:20:17.639] Not searching for globals
[16:20:17.639] - globals: [0] <none>
[16:20:17.639] getGlobalsAndPackages() ... DONE
[16:20:17.640] [local output] makeClusterPSOCK() ...
[16:20:17.686] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:20:17.687] [local output] Base port: 11455
[16:20:17.687] [local output] Getting setup options for 2 cluster nodes ...
[16:20:17.687] [local output]  - Node 1 of 2 ...
[16:20:17.688] [local output] localMachine=TRUE => revtunnel=FALSE

[16:20:17.689] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpGMDtVt/worker.rank=1.parallelly.parent=79565.136cd55ae4059.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpGMDtVt/worker.rank=1.parallelly.parent=79565.136cd55ae4059.pid")'’
[16:20:17.875] - Possible to infer worker's PID: TRUE
[16:20:17.876] [local output] Rscript port: 11455

[16:20:17.876] [local output]  - Node 2 of 2 ...
[16:20:17.876] [local output] localMachine=TRUE => revtunnel=FALSE

[16:20:17.877] [local output] Rscript port: 11455

[16:20:17.877] [local output] Getting setup options for 2 cluster nodes ... done
[16:20:17.877] [local output]  - Parallel setup requested for some PSOCK nodes
[16:20:17.878] [local output] Setting up PSOCK nodes in parallel
[16:20:17.878] List of 36
[16:20:17.878]  $ worker          : chr "localhost"
[16:20:17.878]   ..- attr(*, "localhost")= logi TRUE
[16:20:17.878]  $ master          : chr "localhost"
[16:20:17.878]  $ port            : int 11455
[16:20:17.878]  $ connectTimeout  : num 120
[16:20:17.878]  $ timeout         : num 2592000
[16:20:17.878]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:20:17.878]  $ homogeneous     : logi TRUE
[16:20:17.878]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:20:17.878]  $ rscript_envs    : NULL
[16:20:17.878]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:20:17.878]  $ rscript_startup : NULL
[16:20:17.878]  $ rscript_sh      : chr "sh"
[16:20:17.878]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:20:17.878]  $ methods         : logi TRUE
[16:20:17.878]  $ socketOptions   : chr "no-delay"
[16:20:17.878]  $ useXDR          : logi FALSE
[16:20:17.878]  $ outfile         : chr "/dev/null"
[16:20:17.878]  $ renice          : int NA
[16:20:17.878]  $ rshcmd          : NULL
[16:20:17.878]  $ user            : chr(0) 
[16:20:17.878]  $ revtunnel       : logi FALSE
[16:20:17.878]  $ rshlogfile      : NULL
[16:20:17.878]  $ rshopts         : chr(0) 
[16:20:17.878]  $ rank            : int 1
[16:20:17.878]  $ manual          : logi FALSE
[16:20:17.878]  $ dryrun          : logi FALSE
[16:20:17.878]  $ quiet           : logi FALSE
[16:20:17.878]  $ setup_strategy  : chr "parallel"
[16:20:17.878]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:20:17.878]  $ pidfile         : chr "/tmp/RtmpGMDtVt/worker.rank=1.parallelly.parent=79565.136cd55ae4059.pid"
[16:20:17.878]  $ rshcmd_label    : NULL
[16:20:17.878]  $ rsh_call        : NULL
[16:20:17.878]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:20:17.878]  $ localMachine    : logi TRUE
[16:20:17.878]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:20:17.878]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:20:17.878]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:20:17.878]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:20:17.878]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:20:17.878]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:20:17.878]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:20:17.878]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:20:17.878]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:20:17.878]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:20:17.878]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:20:17.878]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:20:17.878]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:20:17.878]  $ arguments       :List of 28
[16:20:17.878]   ..$ worker          : chr "localhost"
[16:20:17.878]   ..$ master          : NULL
[16:20:17.878]   ..$ port            : int 11455
[16:20:17.878]   ..$ connectTimeout  : num 120
[16:20:17.878]   ..$ timeout         : num 2592000
[16:20:17.878]   ..$ rscript         : NULL
[16:20:17.878]   ..$ homogeneous     : NULL
[16:20:17.878]   ..$ rscript_args    : NULL
[16:20:17.878]   ..$ rscript_envs    : NULL
[16:20:17.878]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:20:17.878]   ..$ rscript_startup : NULL
[16:20:17.878]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:20:17.878]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:20:17.878]   ..$ methods         : logi TRUE
[16:20:17.878]   ..$ socketOptions   : chr "no-delay"
[16:20:17.878]   ..$ useXDR          : logi FALSE
[16:20:17.878]   ..$ outfile         : chr "/dev/null"
[16:20:17.878]   ..$ renice          : int NA
[16:20:17.878]   ..$ rshcmd          : NULL
[16:20:17.878]   ..$ user            : NULL
[16:20:17.878]   ..$ revtunnel       : logi NA
[16:20:17.878]   ..$ rshlogfile      : NULL
[16:20:17.878]   ..$ rshopts         : NULL
[16:20:17.878]   ..$ rank            : int 1
[16:20:17.878]   ..$ manual          : logi FALSE
[16:20:17.878]   ..$ dryrun          : logi FALSE
[16:20:17.878]   ..$ quiet           : logi FALSE
[16:20:17.878]   ..$ setup_strategy  : chr "parallel"
[16:20:17.878]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:20:17.895] [local output] System call to launch all workers:
[16:20:17.895] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpGMDtVt/worker.rank=1.parallelly.parent=79565.136cd55ae4059.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11455 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:20:17.895] [local output] Starting PSOCK main server
[16:20:17.900] [local output] Workers launched
[16:20:17.901] [local output] Waiting for workers to connect back
[16:20:17.901]  - [local output] 0 workers out of 2 ready
[16:20:18.166]  - [local output] 0 workers out of 2 ready
[16:20:18.166]  - [local output] 1 workers out of 2 ready
[16:20:18.168]  - [local output] 1 workers out of 2 ready
[16:20:18.168]  - [local output] 2 workers out of 2 ready
[16:20:18.168] [local output] Launching of workers completed
[16:20:18.169] [local output] Collecting session information from workers
[16:20:18.170] [local output]  - Worker #1 of 2
[16:20:18.170] [local output]  - Worker #2 of 2
[16:20:18.170] [local output] makeClusterPSOCK() ... done
[16:20:18.182] Packages needed by the future expression (n = 0): <none>
[16:20:18.182] Packages needed by future strategies (n = 0): <none>
[16:20:18.182] {
[16:20:18.182]     {
[16:20:18.182]         {
[16:20:18.182]             ...future.startTime <- base::Sys.time()
[16:20:18.182]             {
[16:20:18.182]                 {
[16:20:18.182]                   {
[16:20:18.182]                     {
[16:20:18.182]                       base::local({
[16:20:18.182]                         has_future <- base::requireNamespace("future", 
[16:20:18.182]                           quietly = TRUE)
[16:20:18.182]                         if (has_future) {
[16:20:18.182]                           ns <- base::getNamespace("future")
[16:20:18.182]                           version <- ns[[".package"]][["version"]]
[16:20:18.182]                           if (is.null(version)) 
[16:20:18.182]                             version <- utils::packageVersion("future")
[16:20:18.182]                         }
[16:20:18.182]                         else {
[16:20:18.182]                           version <- NULL
[16:20:18.182]                         }
[16:20:18.182]                         if (!has_future || version < "1.8.0") {
[16:20:18.182]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:18.182]                             "", base::R.version$version.string), 
[16:20:18.182]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:18.182]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:18.182]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:18.182]                               "release", "version")], collapse = " "), 
[16:20:18.182]                             hostname = base::Sys.info()[["nodename"]])
[16:20:18.182]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:18.182]                             info)
[16:20:18.182]                           info <- base::paste(info, collapse = "; ")
[16:20:18.182]                           if (!has_future) {
[16:20:18.182]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:18.182]                               info)
[16:20:18.182]                           }
[16:20:18.182]                           else {
[16:20:18.182]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:18.182]                               info, version)
[16:20:18.182]                           }
[16:20:18.182]                           base::stop(msg)
[16:20:18.182]                         }
[16:20:18.182]                       })
[16:20:18.182]                     }
[16:20:18.182]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:18.182]                     base::options(mc.cores = 1L)
[16:20:18.182]                   }
[16:20:18.182]                   ...future.strategy.old <- future::plan("list")
[16:20:18.182]                   options(future.plan = NULL)
[16:20:18.182]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:18.182]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:18.182]                 }
[16:20:18.182]                 ...future.workdir <- getwd()
[16:20:18.182]             }
[16:20:18.182]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:18.182]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:18.182]         }
[16:20:18.182]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:18.182]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:18.182]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:18.182]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:18.182]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:18.182]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:18.182]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:18.182]             base::names(...future.oldOptions))
[16:20:18.182]     }
[16:20:18.182]     if (FALSE) {
[16:20:18.182]     }
[16:20:18.182]     else {
[16:20:18.182]         if (TRUE) {
[16:20:18.182]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:18.182]                 open = "w")
[16:20:18.182]         }
[16:20:18.182]         else {
[16:20:18.182]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:18.182]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:18.182]         }
[16:20:18.182]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:18.182]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:18.182]             base::sink(type = "output", split = FALSE)
[16:20:18.182]             base::close(...future.stdout)
[16:20:18.182]         }, add = TRUE)
[16:20:18.182]     }
[16:20:18.182]     ...future.frame <- base::sys.nframe()
[16:20:18.182]     ...future.conditions <- base::list()
[16:20:18.182]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:18.182]     if (FALSE) {
[16:20:18.182]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:18.182]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:18.182]     }
[16:20:18.182]     ...future.result <- base::tryCatch({
[16:20:18.182]         base::withCallingHandlers({
[16:20:18.182]             ...future.value <- base::withVisible(base::local({
[16:20:18.182]                 ...future.makeSendCondition <- base::local({
[16:20:18.182]                   sendCondition <- NULL
[16:20:18.182]                   function(frame = 1L) {
[16:20:18.182]                     if (is.function(sendCondition)) 
[16:20:18.182]                       return(sendCondition)
[16:20:18.182]                     ns <- getNamespace("parallel")
[16:20:18.182]                     if (exists("sendData", mode = "function", 
[16:20:18.182]                       envir = ns)) {
[16:20:18.182]                       parallel_sendData <- get("sendData", mode = "function", 
[16:20:18.182]                         envir = ns)
[16:20:18.182]                       envir <- sys.frame(frame)
[16:20:18.182]                       master <- NULL
[16:20:18.182]                       while (!identical(envir, .GlobalEnv) && 
[16:20:18.182]                         !identical(envir, emptyenv())) {
[16:20:18.182]                         if (exists("master", mode = "list", envir = envir, 
[16:20:18.182]                           inherits = FALSE)) {
[16:20:18.182]                           master <- get("master", mode = "list", 
[16:20:18.182]                             envir = envir, inherits = FALSE)
[16:20:18.182]                           if (inherits(master, c("SOCKnode", 
[16:20:18.182]                             "SOCK0node"))) {
[16:20:18.182]                             sendCondition <<- function(cond) {
[16:20:18.182]                               data <- list(type = "VALUE", value = cond, 
[16:20:18.182]                                 success = TRUE)
[16:20:18.182]                               parallel_sendData(master, data)
[16:20:18.182]                             }
[16:20:18.182]                             return(sendCondition)
[16:20:18.182]                           }
[16:20:18.182]                         }
[16:20:18.182]                         frame <- frame + 1L
[16:20:18.182]                         envir <- sys.frame(frame)
[16:20:18.182]                       }
[16:20:18.182]                     }
[16:20:18.182]                     sendCondition <<- function(cond) NULL
[16:20:18.182]                   }
[16:20:18.182]                 })
[16:20:18.182]                 withCallingHandlers({
[16:20:18.182]                   NA
[16:20:18.182]                 }, immediateCondition = function(cond) {
[16:20:18.182]                   sendCondition <- ...future.makeSendCondition()
[16:20:18.182]                   sendCondition(cond)
[16:20:18.182]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:18.182]                   {
[16:20:18.182]                     inherits <- base::inherits
[16:20:18.182]                     invokeRestart <- base::invokeRestart
[16:20:18.182]                     is.null <- base::is.null
[16:20:18.182]                     muffled <- FALSE
[16:20:18.182]                     if (inherits(cond, "message")) {
[16:20:18.182]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:18.182]                       if (muffled) 
[16:20:18.182]                         invokeRestart("muffleMessage")
[16:20:18.182]                     }
[16:20:18.182]                     else if (inherits(cond, "warning")) {
[16:20:18.182]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:18.182]                       if (muffled) 
[16:20:18.182]                         invokeRestart("muffleWarning")
[16:20:18.182]                     }
[16:20:18.182]                     else if (inherits(cond, "condition")) {
[16:20:18.182]                       if (!is.null(pattern)) {
[16:20:18.182]                         computeRestarts <- base::computeRestarts
[16:20:18.182]                         grepl <- base::grepl
[16:20:18.182]                         restarts <- computeRestarts(cond)
[16:20:18.182]                         for (restart in restarts) {
[16:20:18.182]                           name <- restart$name
[16:20:18.182]                           if (is.null(name)) 
[16:20:18.182]                             next
[16:20:18.182]                           if (!grepl(pattern, name)) 
[16:20:18.182]                             next
[16:20:18.182]                           invokeRestart(restart)
[16:20:18.182]                           muffled <- TRUE
[16:20:18.182]                           break
[16:20:18.182]                         }
[16:20:18.182]                       }
[16:20:18.182]                     }
[16:20:18.182]                     invisible(muffled)
[16:20:18.182]                   }
[16:20:18.182]                   muffleCondition(cond)
[16:20:18.182]                 })
[16:20:18.182]             }))
[16:20:18.182]             future::FutureResult(value = ...future.value$value, 
[16:20:18.182]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:18.182]                   ...future.rng), globalenv = if (FALSE) 
[16:20:18.182]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:18.182]                     ...future.globalenv.names))
[16:20:18.182]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:18.182]         }, condition = base::local({
[16:20:18.182]             c <- base::c
[16:20:18.182]             inherits <- base::inherits
[16:20:18.182]             invokeRestart <- base::invokeRestart
[16:20:18.182]             length <- base::length
[16:20:18.182]             list <- base::list
[16:20:18.182]             seq.int <- base::seq.int
[16:20:18.182]             signalCondition <- base::signalCondition
[16:20:18.182]             sys.calls <- base::sys.calls
[16:20:18.182]             `[[` <- base::`[[`
[16:20:18.182]             `+` <- base::`+`
[16:20:18.182]             `<<-` <- base::`<<-`
[16:20:18.182]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:18.182]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:18.182]                   3L)]
[16:20:18.182]             }
[16:20:18.182]             function(cond) {
[16:20:18.182]                 is_error <- inherits(cond, "error")
[16:20:18.182]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:18.182]                   NULL)
[16:20:18.182]                 if (is_error) {
[16:20:18.182]                   sessionInformation <- function() {
[16:20:18.182]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:18.182]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:18.182]                       search = base::search(), system = base::Sys.info())
[16:20:18.182]                   }
[16:20:18.182]                   ...future.conditions[[length(...future.conditions) + 
[16:20:18.182]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:18.182]                     cond$call), session = sessionInformation(), 
[16:20:18.182]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:18.182]                   signalCondition(cond)
[16:20:18.182]                 }
[16:20:18.182]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:18.182]                 "immediateCondition"))) {
[16:20:18.182]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:18.182]                   ...future.conditions[[length(...future.conditions) + 
[16:20:18.182]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:18.182]                   if (TRUE && !signal) {
[16:20:18.182]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:18.182]                     {
[16:20:18.182]                       inherits <- base::inherits
[16:20:18.182]                       invokeRestart <- base::invokeRestart
[16:20:18.182]                       is.null <- base::is.null
[16:20:18.182]                       muffled <- FALSE
[16:20:18.182]                       if (inherits(cond, "message")) {
[16:20:18.182]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:18.182]                         if (muffled) 
[16:20:18.182]                           invokeRestart("muffleMessage")
[16:20:18.182]                       }
[16:20:18.182]                       else if (inherits(cond, "warning")) {
[16:20:18.182]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:18.182]                         if (muffled) 
[16:20:18.182]                           invokeRestart("muffleWarning")
[16:20:18.182]                       }
[16:20:18.182]                       else if (inherits(cond, "condition")) {
[16:20:18.182]                         if (!is.null(pattern)) {
[16:20:18.182]                           computeRestarts <- base::computeRestarts
[16:20:18.182]                           grepl <- base::grepl
[16:20:18.182]                           restarts <- computeRestarts(cond)
[16:20:18.182]                           for (restart in restarts) {
[16:20:18.182]                             name <- restart$name
[16:20:18.182]                             if (is.null(name)) 
[16:20:18.182]                               next
[16:20:18.182]                             if (!grepl(pattern, name)) 
[16:20:18.182]                               next
[16:20:18.182]                             invokeRestart(restart)
[16:20:18.182]                             muffled <- TRUE
[16:20:18.182]                             break
[16:20:18.182]                           }
[16:20:18.182]                         }
[16:20:18.182]                       }
[16:20:18.182]                       invisible(muffled)
[16:20:18.182]                     }
[16:20:18.182]                     muffleCondition(cond, pattern = "^muffle")
[16:20:18.182]                   }
[16:20:18.182]                 }
[16:20:18.182]                 else {
[16:20:18.182]                   if (TRUE) {
[16:20:18.182]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:18.182]                     {
[16:20:18.182]                       inherits <- base::inherits
[16:20:18.182]                       invokeRestart <- base::invokeRestart
[16:20:18.182]                       is.null <- base::is.null
[16:20:18.182]                       muffled <- FALSE
[16:20:18.182]                       if (inherits(cond, "message")) {
[16:20:18.182]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:18.182]                         if (muffled) 
[16:20:18.182]                           invokeRestart("muffleMessage")
[16:20:18.182]                       }
[16:20:18.182]                       else if (inherits(cond, "warning")) {
[16:20:18.182]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:18.182]                         if (muffled) 
[16:20:18.182]                           invokeRestart("muffleWarning")
[16:20:18.182]                       }
[16:20:18.182]                       else if (inherits(cond, "condition")) {
[16:20:18.182]                         if (!is.null(pattern)) {
[16:20:18.182]                           computeRestarts <- base::computeRestarts
[16:20:18.182]                           grepl <- base::grepl
[16:20:18.182]                           restarts <- computeRestarts(cond)
[16:20:18.182]                           for (restart in restarts) {
[16:20:18.182]                             name <- restart$name
[16:20:18.182]                             if (is.null(name)) 
[16:20:18.182]                               next
[16:20:18.182]                             if (!grepl(pattern, name)) 
[16:20:18.182]                               next
[16:20:18.182]                             invokeRestart(restart)
[16:20:18.182]                             muffled <- TRUE
[16:20:18.182]                             break
[16:20:18.182]                           }
[16:20:18.182]                         }
[16:20:18.182]                       }
[16:20:18.182]                       invisible(muffled)
[16:20:18.182]                     }
[16:20:18.182]                     muffleCondition(cond, pattern = "^muffle")
[16:20:18.182]                   }
[16:20:18.182]                 }
[16:20:18.182]             }
[16:20:18.182]         }))
[16:20:18.182]     }, error = function(ex) {
[16:20:18.182]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:18.182]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:18.182]                 ...future.rng), started = ...future.startTime, 
[16:20:18.182]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:18.182]             version = "1.8"), class = "FutureResult")
[16:20:18.182]     }, finally = {
[16:20:18.182]         if (!identical(...future.workdir, getwd())) 
[16:20:18.182]             setwd(...future.workdir)
[16:20:18.182]         {
[16:20:18.182]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:18.182]                 ...future.oldOptions$nwarnings <- NULL
[16:20:18.182]             }
[16:20:18.182]             base::options(...future.oldOptions)
[16:20:18.182]             if (.Platform$OS.type == "windows") {
[16:20:18.182]                 old_names <- names(...future.oldEnvVars)
[16:20:18.182]                 envs <- base::Sys.getenv()
[16:20:18.182]                 names <- names(envs)
[16:20:18.182]                 common <- intersect(names, old_names)
[16:20:18.182]                 added <- setdiff(names, old_names)
[16:20:18.182]                 removed <- setdiff(old_names, names)
[16:20:18.182]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:18.182]                   envs[common]]
[16:20:18.182]                 NAMES <- toupper(changed)
[16:20:18.182]                 args <- list()
[16:20:18.182]                 for (kk in seq_along(NAMES)) {
[16:20:18.182]                   name <- changed[[kk]]
[16:20:18.182]                   NAME <- NAMES[[kk]]
[16:20:18.182]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:18.182]                     next
[16:20:18.182]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:18.182]                 }
[16:20:18.182]                 NAMES <- toupper(added)
[16:20:18.182]                 for (kk in seq_along(NAMES)) {
[16:20:18.182]                   name <- added[[kk]]
[16:20:18.182]                   NAME <- NAMES[[kk]]
[16:20:18.182]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:18.182]                     next
[16:20:18.182]                   args[[name]] <- ""
[16:20:18.182]                 }
[16:20:18.182]                 NAMES <- toupper(removed)
[16:20:18.182]                 for (kk in seq_along(NAMES)) {
[16:20:18.182]                   name <- removed[[kk]]
[16:20:18.182]                   NAME <- NAMES[[kk]]
[16:20:18.182]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:18.182]                     next
[16:20:18.182]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:18.182]                 }
[16:20:18.182]                 if (length(args) > 0) 
[16:20:18.182]                   base::do.call(base::Sys.setenv, args = args)
[16:20:18.182]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:18.182]             }
[16:20:18.182]             else {
[16:20:18.182]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:18.182]             }
[16:20:18.182]             {
[16:20:18.182]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:18.182]                   0L) {
[16:20:18.182]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:18.182]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:18.182]                   base::options(opts)
[16:20:18.182]                 }
[16:20:18.182]                 {
[16:20:18.182]                   {
[16:20:18.182]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:18.182]                     NULL
[16:20:18.182]                   }
[16:20:18.182]                   options(future.plan = NULL)
[16:20:18.182]                   if (is.na(NA_character_)) 
[16:20:18.182]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:18.182]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:18.182]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:18.182]                     .init = FALSE)
[16:20:18.182]                 }
[16:20:18.182]             }
[16:20:18.182]         }
[16:20:18.182]     })
[16:20:18.182]     if (TRUE) {
[16:20:18.182]         base::sink(type = "output", split = FALSE)
[16:20:18.182]         if (TRUE) {
[16:20:18.182]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:18.182]         }
[16:20:18.182]         else {
[16:20:18.182]             ...future.result["stdout"] <- base::list(NULL)
[16:20:18.182]         }
[16:20:18.182]         base::close(...future.stdout)
[16:20:18.182]         ...future.stdout <- NULL
[16:20:18.182]     }
[16:20:18.182]     ...future.result$conditions <- ...future.conditions
[16:20:18.182]     ...future.result$finished <- base::Sys.time()
[16:20:18.182]     ...future.result
[16:20:18.182] }
[16:20:18.235] MultisessionFuture started
[16:20:18.236] result() for ClusterFuture ...
[16:20:18.236] receiveMessageFromWorker() for ClusterFuture ...
[16:20:18.237] - Validating connection of MultisessionFuture
[16:20:18.269] - received message: FutureResult
[16:20:18.269] - Received FutureResult
[16:20:18.269] - Erased future from FutureRegistry
[16:20:18.270] result() for ClusterFuture ...
[16:20:18.270] - result already collected: FutureResult
[16:20:18.270] result() for ClusterFuture ... done
[16:20:18.270] receiveMessageFromWorker() for ClusterFuture ... done
[16:20:18.270] result() for ClusterFuture ... done
[16:20:18.270] result() for ClusterFuture ...
[16:20:18.270] - result already collected: FutureResult
[16:20:18.270] result() for ClusterFuture ... done
[16:20:18.271] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:20:18.275] plan(): nbrOfWorkers() = 2
** Sum function 'A' with plan('multisession') ...
function (x, ...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, ...)
    }
    y
}
<bytecode: 0x55ed022c4198>
Arguments '...' exists: TRUE
[16:20:18.276] getGlobalsAndPackages() ...
[16:20:18.276] Searching for globals...
[16:20:18.278] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[16:20:18.278] Searching for globals ... DONE
[16:20:18.278] Resolving globals: FALSE
[16:20:18.278] Tweak future expression to call with '...' arguments ...
[16:20:18.278] {
[16:20:18.278]     do.call(function(...) {
[16:20:18.278]         sum(x, ...)
[16:20:18.278]     }, args = future.call.arguments)
[16:20:18.278] }
[16:20:18.279] Tweak future expression to call with '...' arguments ... DONE
[16:20:18.279] The total size of the 2 globals is 112 bytes (112 bytes)
[16:20:18.280] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[16:20:18.280] - globals: [2] ‘x’, ‘future.call.arguments’
[16:20:18.280] 
[16:20:18.280] getGlobalsAndPackages() ... DONE
[16:20:18.281] run() for ‘Future’ ...
[16:20:18.281] - state: ‘created’
[16:20:18.281] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:20:18.295] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:18.295] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:20:18.296]   - Field: ‘node’
[16:20:18.296]   - Field: ‘label’
[16:20:18.296]   - Field: ‘local’
[16:20:18.296]   - Field: ‘owner’
[16:20:18.296]   - Field: ‘envir’
[16:20:18.296]   - Field: ‘workers’
[16:20:18.296]   - Field: ‘packages’
[16:20:18.296]   - Field: ‘gc’
[16:20:18.296]   - Field: ‘conditions’
[16:20:18.297]   - Field: ‘persistent’
[16:20:18.297]   - Field: ‘expr’
[16:20:18.297]   - Field: ‘uuid’
[16:20:18.297]   - Field: ‘seed’
[16:20:18.297]   - Field: ‘version’
[16:20:18.297]   - Field: ‘result’
[16:20:18.297]   - Field: ‘asynchronous’
[16:20:18.297]   - Field: ‘calls’
[16:20:18.297]   - Field: ‘globals’
[16:20:18.298]   - Field: ‘stdout’
[16:20:18.298]   - Field: ‘earlySignal’
[16:20:18.298]   - Field: ‘lazy’
[16:20:18.298]   - Field: ‘state’
[16:20:18.298] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:20:18.298] - Launch lazy future ...
[16:20:18.299] Packages needed by the future expression (n = 0): <none>
[16:20:18.299] Packages needed by future strategies (n = 0): <none>
[16:20:18.299] {
[16:20:18.299]     {
[16:20:18.299]         {
[16:20:18.299]             ...future.startTime <- base::Sys.time()
[16:20:18.299]             {
[16:20:18.299]                 {
[16:20:18.299]                   {
[16:20:18.299]                     {
[16:20:18.299]                       base::local({
[16:20:18.299]                         has_future <- base::requireNamespace("future", 
[16:20:18.299]                           quietly = TRUE)
[16:20:18.299]                         if (has_future) {
[16:20:18.299]                           ns <- base::getNamespace("future")
[16:20:18.299]                           version <- ns[[".package"]][["version"]]
[16:20:18.299]                           if (is.null(version)) 
[16:20:18.299]                             version <- utils::packageVersion("future")
[16:20:18.299]                         }
[16:20:18.299]                         else {
[16:20:18.299]                           version <- NULL
[16:20:18.299]                         }
[16:20:18.299]                         if (!has_future || version < "1.8.0") {
[16:20:18.299]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:18.299]                             "", base::R.version$version.string), 
[16:20:18.299]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:18.299]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:18.299]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:18.299]                               "release", "version")], collapse = " "), 
[16:20:18.299]                             hostname = base::Sys.info()[["nodename"]])
[16:20:18.299]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:18.299]                             info)
[16:20:18.299]                           info <- base::paste(info, collapse = "; ")
[16:20:18.299]                           if (!has_future) {
[16:20:18.299]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:18.299]                               info)
[16:20:18.299]                           }
[16:20:18.299]                           else {
[16:20:18.299]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:18.299]                               info, version)
[16:20:18.299]                           }
[16:20:18.299]                           base::stop(msg)
[16:20:18.299]                         }
[16:20:18.299]                       })
[16:20:18.299]                     }
[16:20:18.299]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:18.299]                     base::options(mc.cores = 1L)
[16:20:18.299]                   }
[16:20:18.299]                   ...future.strategy.old <- future::plan("list")
[16:20:18.299]                   options(future.plan = NULL)
[16:20:18.299]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:18.299]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:18.299]                 }
[16:20:18.299]                 ...future.workdir <- getwd()
[16:20:18.299]             }
[16:20:18.299]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:18.299]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:18.299]         }
[16:20:18.299]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:18.299]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:18.299]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:18.299]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:18.299]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:18.299]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:18.299]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:18.299]             base::names(...future.oldOptions))
[16:20:18.299]     }
[16:20:18.299]     if (FALSE) {
[16:20:18.299]     }
[16:20:18.299]     else {
[16:20:18.299]         if (TRUE) {
[16:20:18.299]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:18.299]                 open = "w")
[16:20:18.299]         }
[16:20:18.299]         else {
[16:20:18.299]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:18.299]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:18.299]         }
[16:20:18.299]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:18.299]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:18.299]             base::sink(type = "output", split = FALSE)
[16:20:18.299]             base::close(...future.stdout)
[16:20:18.299]         }, add = TRUE)
[16:20:18.299]     }
[16:20:18.299]     ...future.frame <- base::sys.nframe()
[16:20:18.299]     ...future.conditions <- base::list()
[16:20:18.299]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:18.299]     if (FALSE) {
[16:20:18.299]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:18.299]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:18.299]     }
[16:20:18.299]     ...future.result <- base::tryCatch({
[16:20:18.299]         base::withCallingHandlers({
[16:20:18.299]             ...future.value <- base::withVisible(base::local({
[16:20:18.299]                 ...future.makeSendCondition <- base::local({
[16:20:18.299]                   sendCondition <- NULL
[16:20:18.299]                   function(frame = 1L) {
[16:20:18.299]                     if (is.function(sendCondition)) 
[16:20:18.299]                       return(sendCondition)
[16:20:18.299]                     ns <- getNamespace("parallel")
[16:20:18.299]                     if (exists("sendData", mode = "function", 
[16:20:18.299]                       envir = ns)) {
[16:20:18.299]                       parallel_sendData <- get("sendData", mode = "function", 
[16:20:18.299]                         envir = ns)
[16:20:18.299]                       envir <- sys.frame(frame)
[16:20:18.299]                       master <- NULL
[16:20:18.299]                       while (!identical(envir, .GlobalEnv) && 
[16:20:18.299]                         !identical(envir, emptyenv())) {
[16:20:18.299]                         if (exists("master", mode = "list", envir = envir, 
[16:20:18.299]                           inherits = FALSE)) {
[16:20:18.299]                           master <- get("master", mode = "list", 
[16:20:18.299]                             envir = envir, inherits = FALSE)
[16:20:18.299]                           if (inherits(master, c("SOCKnode", 
[16:20:18.299]                             "SOCK0node"))) {
[16:20:18.299]                             sendCondition <<- function(cond) {
[16:20:18.299]                               data <- list(type = "VALUE", value = cond, 
[16:20:18.299]                                 success = TRUE)
[16:20:18.299]                               parallel_sendData(master, data)
[16:20:18.299]                             }
[16:20:18.299]                             return(sendCondition)
[16:20:18.299]                           }
[16:20:18.299]                         }
[16:20:18.299]                         frame <- frame + 1L
[16:20:18.299]                         envir <- sys.frame(frame)
[16:20:18.299]                       }
[16:20:18.299]                     }
[16:20:18.299]                     sendCondition <<- function(cond) NULL
[16:20:18.299]                   }
[16:20:18.299]                 })
[16:20:18.299]                 withCallingHandlers({
[16:20:18.299]                   {
[16:20:18.299]                     do.call(function(...) {
[16:20:18.299]                       sum(x, ...)
[16:20:18.299]                     }, args = future.call.arguments)
[16:20:18.299]                   }
[16:20:18.299]                 }, immediateCondition = function(cond) {
[16:20:18.299]                   sendCondition <- ...future.makeSendCondition()
[16:20:18.299]                   sendCondition(cond)
[16:20:18.299]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:18.299]                   {
[16:20:18.299]                     inherits <- base::inherits
[16:20:18.299]                     invokeRestart <- base::invokeRestart
[16:20:18.299]                     is.null <- base::is.null
[16:20:18.299]                     muffled <- FALSE
[16:20:18.299]                     if (inherits(cond, "message")) {
[16:20:18.299]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:18.299]                       if (muffled) 
[16:20:18.299]                         invokeRestart("muffleMessage")
[16:20:18.299]                     }
[16:20:18.299]                     else if (inherits(cond, "warning")) {
[16:20:18.299]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:18.299]                       if (muffled) 
[16:20:18.299]                         invokeRestart("muffleWarning")
[16:20:18.299]                     }
[16:20:18.299]                     else if (inherits(cond, "condition")) {
[16:20:18.299]                       if (!is.null(pattern)) {
[16:20:18.299]                         computeRestarts <- base::computeRestarts
[16:20:18.299]                         grepl <- base::grepl
[16:20:18.299]                         restarts <- computeRestarts(cond)
[16:20:18.299]                         for (restart in restarts) {
[16:20:18.299]                           name <- restart$name
[16:20:18.299]                           if (is.null(name)) 
[16:20:18.299]                             next
[16:20:18.299]                           if (!grepl(pattern, name)) 
[16:20:18.299]                             next
[16:20:18.299]                           invokeRestart(restart)
[16:20:18.299]                           muffled <- TRUE
[16:20:18.299]                           break
[16:20:18.299]                         }
[16:20:18.299]                       }
[16:20:18.299]                     }
[16:20:18.299]                     invisible(muffled)
[16:20:18.299]                   }
[16:20:18.299]                   muffleCondition(cond)
[16:20:18.299]                 })
[16:20:18.299]             }))
[16:20:18.299]             future::FutureResult(value = ...future.value$value, 
[16:20:18.299]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:18.299]                   ...future.rng), globalenv = if (FALSE) 
[16:20:18.299]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:18.299]                     ...future.globalenv.names))
[16:20:18.299]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:18.299]         }, condition = base::local({
[16:20:18.299]             c <- base::c
[16:20:18.299]             inherits <- base::inherits
[16:20:18.299]             invokeRestart <- base::invokeRestart
[16:20:18.299]             length <- base::length
[16:20:18.299]             list <- base::list
[16:20:18.299]             seq.int <- base::seq.int
[16:20:18.299]             signalCondition <- base::signalCondition
[16:20:18.299]             sys.calls <- base::sys.calls
[16:20:18.299]             `[[` <- base::`[[`
[16:20:18.299]             `+` <- base::`+`
[16:20:18.299]             `<<-` <- base::`<<-`
[16:20:18.299]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:18.299]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:18.299]                   3L)]
[16:20:18.299]             }
[16:20:18.299]             function(cond) {
[16:20:18.299]                 is_error <- inherits(cond, "error")
[16:20:18.299]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:18.299]                   NULL)
[16:20:18.299]                 if (is_error) {
[16:20:18.299]                   sessionInformation <- function() {
[16:20:18.299]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:18.299]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:18.299]                       search = base::search(), system = base::Sys.info())
[16:20:18.299]                   }
[16:20:18.299]                   ...future.conditions[[length(...future.conditions) + 
[16:20:18.299]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:18.299]                     cond$call), session = sessionInformation(), 
[16:20:18.299]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:18.299]                   signalCondition(cond)
[16:20:18.299]                 }
[16:20:18.299]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:18.299]                 "immediateCondition"))) {
[16:20:18.299]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:18.299]                   ...future.conditions[[length(...future.conditions) + 
[16:20:18.299]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:18.299]                   if (TRUE && !signal) {
[16:20:18.299]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:18.299]                     {
[16:20:18.299]                       inherits <- base::inherits
[16:20:18.299]                       invokeRestart <- base::invokeRestart
[16:20:18.299]                       is.null <- base::is.null
[16:20:18.299]                       muffled <- FALSE
[16:20:18.299]                       if (inherits(cond, "message")) {
[16:20:18.299]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:18.299]                         if (muffled) 
[16:20:18.299]                           invokeRestart("muffleMessage")
[16:20:18.299]                       }
[16:20:18.299]                       else if (inherits(cond, "warning")) {
[16:20:18.299]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:18.299]                         if (muffled) 
[16:20:18.299]                           invokeRestart("muffleWarning")
[16:20:18.299]                       }
[16:20:18.299]                       else if (inherits(cond, "condition")) {
[16:20:18.299]                         if (!is.null(pattern)) {
[16:20:18.299]                           computeRestarts <- base::computeRestarts
[16:20:18.299]                           grepl <- base::grepl
[16:20:18.299]                           restarts <- computeRestarts(cond)
[16:20:18.299]                           for (restart in restarts) {
[16:20:18.299]                             name <- restart$name
[16:20:18.299]                             if (is.null(name)) 
[16:20:18.299]                               next
[16:20:18.299]                             if (!grepl(pattern, name)) 
[16:20:18.299]                               next
[16:20:18.299]                             invokeRestart(restart)
[16:20:18.299]                             muffled <- TRUE
[16:20:18.299]                             break
[16:20:18.299]                           }
[16:20:18.299]                         }
[16:20:18.299]                       }
[16:20:18.299]                       invisible(muffled)
[16:20:18.299]                     }
[16:20:18.299]                     muffleCondition(cond, pattern = "^muffle")
[16:20:18.299]                   }
[16:20:18.299]                 }
[16:20:18.299]                 else {
[16:20:18.299]                   if (TRUE) {
[16:20:18.299]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:18.299]                     {
[16:20:18.299]                       inherits <- base::inherits
[16:20:18.299]                       invokeRestart <- base::invokeRestart
[16:20:18.299]                       is.null <- base::is.null
[16:20:18.299]                       muffled <- FALSE
[16:20:18.299]                       if (inherits(cond, "message")) {
[16:20:18.299]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:18.299]                         if (muffled) 
[16:20:18.299]                           invokeRestart("muffleMessage")
[16:20:18.299]                       }
[16:20:18.299]                       else if (inherits(cond, "warning")) {
[16:20:18.299]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:18.299]                         if (muffled) 
[16:20:18.299]                           invokeRestart("muffleWarning")
[16:20:18.299]                       }
[16:20:18.299]                       else if (inherits(cond, "condition")) {
[16:20:18.299]                         if (!is.null(pattern)) {
[16:20:18.299]                           computeRestarts <- base::computeRestarts
[16:20:18.299]                           grepl <- base::grepl
[16:20:18.299]                           restarts <- computeRestarts(cond)
[16:20:18.299]                           for (restart in restarts) {
[16:20:18.299]                             name <- restart$name
[16:20:18.299]                             if (is.null(name)) 
[16:20:18.299]                               next
[16:20:18.299]                             if (!grepl(pattern, name)) 
[16:20:18.299]                               next
[16:20:18.299]                             invokeRestart(restart)
[16:20:18.299]                             muffled <- TRUE
[16:20:18.299]                             break
[16:20:18.299]                           }
[16:20:18.299]                         }
[16:20:18.299]                       }
[16:20:18.299]                       invisible(muffled)
[16:20:18.299]                     }
[16:20:18.299]                     muffleCondition(cond, pattern = "^muffle")
[16:20:18.299]                   }
[16:20:18.299]                 }
[16:20:18.299]             }
[16:20:18.299]         }))
[16:20:18.299]     }, error = function(ex) {
[16:20:18.299]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:18.299]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:18.299]                 ...future.rng), started = ...future.startTime, 
[16:20:18.299]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:18.299]             version = "1.8"), class = "FutureResult")
[16:20:18.299]     }, finally = {
[16:20:18.299]         if (!identical(...future.workdir, getwd())) 
[16:20:18.299]             setwd(...future.workdir)
[16:20:18.299]         {
[16:20:18.299]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:18.299]                 ...future.oldOptions$nwarnings <- NULL
[16:20:18.299]             }
[16:20:18.299]             base::options(...future.oldOptions)
[16:20:18.299]             if (.Platform$OS.type == "windows") {
[16:20:18.299]                 old_names <- names(...future.oldEnvVars)
[16:20:18.299]                 envs <- base::Sys.getenv()
[16:20:18.299]                 names <- names(envs)
[16:20:18.299]                 common <- intersect(names, old_names)
[16:20:18.299]                 added <- setdiff(names, old_names)
[16:20:18.299]                 removed <- setdiff(old_names, names)
[16:20:18.299]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:18.299]                   envs[common]]
[16:20:18.299]                 NAMES <- toupper(changed)
[16:20:18.299]                 args <- list()
[16:20:18.299]                 for (kk in seq_along(NAMES)) {
[16:20:18.299]                   name <- changed[[kk]]
[16:20:18.299]                   NAME <- NAMES[[kk]]
[16:20:18.299]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:18.299]                     next
[16:20:18.299]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:18.299]                 }
[16:20:18.299]                 NAMES <- toupper(added)
[16:20:18.299]                 for (kk in seq_along(NAMES)) {
[16:20:18.299]                   name <- added[[kk]]
[16:20:18.299]                   NAME <- NAMES[[kk]]
[16:20:18.299]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:18.299]                     next
[16:20:18.299]                   args[[name]] <- ""
[16:20:18.299]                 }
[16:20:18.299]                 NAMES <- toupper(removed)
[16:20:18.299]                 for (kk in seq_along(NAMES)) {
[16:20:18.299]                   name <- removed[[kk]]
[16:20:18.299]                   NAME <- NAMES[[kk]]
[16:20:18.299]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:18.299]                     next
[16:20:18.299]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:18.299]                 }
[16:20:18.299]                 if (length(args) > 0) 
[16:20:18.299]                   base::do.call(base::Sys.setenv, args = args)
[16:20:18.299]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:18.299]             }
[16:20:18.299]             else {
[16:20:18.299]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:18.299]             }
[16:20:18.299]             {
[16:20:18.299]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:18.299]                   0L) {
[16:20:18.299]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:18.299]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:18.299]                   base::options(opts)
[16:20:18.299]                 }
[16:20:18.299]                 {
[16:20:18.299]                   {
[16:20:18.299]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:18.299]                     NULL
[16:20:18.299]                   }
[16:20:18.299]                   options(future.plan = NULL)
[16:20:18.299]                   if (is.na(NA_character_)) 
[16:20:18.299]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:18.299]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:18.299]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:18.299]                     .init = FALSE)
[16:20:18.299]                 }
[16:20:18.299]             }
[16:20:18.299]         }
[16:20:18.299]     })
[16:20:18.299]     if (TRUE) {
[16:20:18.299]         base::sink(type = "output", split = FALSE)
[16:20:18.299]         if (TRUE) {
[16:20:18.299]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:18.299]         }
[16:20:18.299]         else {
[16:20:18.299]             ...future.result["stdout"] <- base::list(NULL)
[16:20:18.299]         }
[16:20:18.299]         base::close(...future.stdout)
[16:20:18.299]         ...future.stdout <- NULL
[16:20:18.299]     }
[16:20:18.299]     ...future.result$conditions <- ...future.conditions
[16:20:18.299]     ...future.result$finished <- base::Sys.time()
[16:20:18.299]     ...future.result
[16:20:18.299] }
[16:20:18.302] Exporting 2 global objects (112 bytes) to cluster node #1 ...
[16:20:18.302] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[16:20:18.303] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[16:20:18.303] Exporting ‘future.call.arguments’ (56 bytes) to cluster node #1 ...
[16:20:18.303] Exporting ‘future.call.arguments’ (56 bytes) to cluster node #1 ... DONE
[16:20:18.303] Exporting 2 global objects (112 bytes) to cluster node #1 ... DONE
[16:20:18.304] MultisessionFuture started
[16:20:18.304] - Launch lazy future ... done
[16:20:18.304] run() for ‘MultisessionFuture’ ... done
[16:20:18.304] result() for ClusterFuture ...
[16:20:18.305] receiveMessageFromWorker() for ClusterFuture ...
[16:20:18.305] - Validating connection of MultisessionFuture
[16:20:18.309] - received message: FutureResult
[16:20:18.309] - Received FutureResult
[16:20:18.309] - Erased future from FutureRegistry
[16:20:18.309] result() for ClusterFuture ...
[16:20:18.310] - result already collected: FutureResult
[16:20:18.310] result() for ClusterFuture ... done
[16:20:18.310] receiveMessageFromWorker() for ClusterFuture ... done
[16:20:18.310] result() for ClusterFuture ... done
[16:20:18.310] result() for ClusterFuture ...
[16:20:18.310] - result already collected: FutureResult
[16:20:18.310] result() for ClusterFuture ... done
[1] 6
** Sum function 'B' with plan('multisession') ...
function (x, ...) 
{
    sumt <- function(x) {
        message("Arguments '...' exists: ", exists("...", inherits = TRUE))
        y %<-% {
            sum(x, ...)
        }
        y
    }
    sumt(x)
}
<bytecode: 0x55ed0257bb98>
Arguments '...' exists: TRUE
[16:20:18.311] getGlobalsAndPackages() ...
[16:20:18.311] Searching for globals...
[16:20:18.313] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[16:20:18.313] Searching for globals ... DONE
[16:20:18.313] Resolving globals: FALSE
[16:20:18.313] Tweak future expression to call with '...' arguments ...
[16:20:18.313] {
[16:20:18.313]     do.call(function(...) {
[16:20:18.313]         sum(x, ...)
[16:20:18.313]     }, args = future.call.arguments)
[16:20:18.313] }
[16:20:18.314] Tweak future expression to call with '...' arguments ... DONE
[16:20:18.314] The total size of the 2 globals is 112 bytes (112 bytes)
[16:20:18.315] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[16:20:18.315] - globals: [2] ‘x’, ‘future.call.arguments’
[16:20:18.315] 
[16:20:18.315] getGlobalsAndPackages() ... DONE
[16:20:18.315] run() for ‘Future’ ...
[16:20:18.315] - state: ‘created’
[16:20:18.316] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:20:18.330] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:18.330] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:20:18.330]   - Field: ‘node’
[16:20:18.330]   - Field: ‘label’
[16:20:18.331]   - Field: ‘local’
[16:20:18.331]   - Field: ‘owner’
[16:20:18.331]   - Field: ‘envir’
[16:20:18.331]   - Field: ‘workers’
[16:20:18.331]   - Field: ‘packages’
[16:20:18.331]   - Field: ‘gc’
[16:20:18.331]   - Field: ‘conditions’
[16:20:18.331]   - Field: ‘persistent’
[16:20:18.331]   - Field: ‘expr’
[16:20:18.331]   - Field: ‘uuid’
[16:20:18.332]   - Field: ‘seed’
[16:20:18.332]   - Field: ‘version’
[16:20:18.332]   - Field: ‘result’
[16:20:18.332]   - Field: ‘asynchronous’
[16:20:18.332]   - Field: ‘calls’
[16:20:18.332]   - Field: ‘globals’
[16:20:18.332]   - Field: ‘stdout’
[16:20:18.332]   - Field: ‘earlySignal’
[16:20:18.333]   - Field: ‘lazy’
[16:20:18.333]   - Field: ‘state’
[16:20:18.333] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:20:18.333] - Launch lazy future ...
[16:20:18.333] Packages needed by the future expression (n = 0): <none>
[16:20:18.333] Packages needed by future strategies (n = 0): <none>
[16:20:18.334] {
[16:20:18.334]     {
[16:20:18.334]         {
[16:20:18.334]             ...future.startTime <- base::Sys.time()
[16:20:18.334]             {
[16:20:18.334]                 {
[16:20:18.334]                   {
[16:20:18.334]                     {
[16:20:18.334]                       base::local({
[16:20:18.334]                         has_future <- base::requireNamespace("future", 
[16:20:18.334]                           quietly = TRUE)
[16:20:18.334]                         if (has_future) {
[16:20:18.334]                           ns <- base::getNamespace("future")
[16:20:18.334]                           version <- ns[[".package"]][["version"]]
[16:20:18.334]                           if (is.null(version)) 
[16:20:18.334]                             version <- utils::packageVersion("future")
[16:20:18.334]                         }
[16:20:18.334]                         else {
[16:20:18.334]                           version <- NULL
[16:20:18.334]                         }
[16:20:18.334]                         if (!has_future || version < "1.8.0") {
[16:20:18.334]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:18.334]                             "", base::R.version$version.string), 
[16:20:18.334]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:18.334]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:18.334]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:18.334]                               "release", "version")], collapse = " "), 
[16:20:18.334]                             hostname = base::Sys.info()[["nodename"]])
[16:20:18.334]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:18.334]                             info)
[16:20:18.334]                           info <- base::paste(info, collapse = "; ")
[16:20:18.334]                           if (!has_future) {
[16:20:18.334]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:18.334]                               info)
[16:20:18.334]                           }
[16:20:18.334]                           else {
[16:20:18.334]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:18.334]                               info, version)
[16:20:18.334]                           }
[16:20:18.334]                           base::stop(msg)
[16:20:18.334]                         }
[16:20:18.334]                       })
[16:20:18.334]                     }
[16:20:18.334]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:18.334]                     base::options(mc.cores = 1L)
[16:20:18.334]                   }
[16:20:18.334]                   ...future.strategy.old <- future::plan("list")
[16:20:18.334]                   options(future.plan = NULL)
[16:20:18.334]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:18.334]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:18.334]                 }
[16:20:18.334]                 ...future.workdir <- getwd()
[16:20:18.334]             }
[16:20:18.334]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:18.334]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:18.334]         }
[16:20:18.334]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:18.334]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:18.334]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:18.334]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:18.334]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:18.334]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:18.334]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:18.334]             base::names(...future.oldOptions))
[16:20:18.334]     }
[16:20:18.334]     if (FALSE) {
[16:20:18.334]     }
[16:20:18.334]     else {
[16:20:18.334]         if (TRUE) {
[16:20:18.334]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:18.334]                 open = "w")
[16:20:18.334]         }
[16:20:18.334]         else {
[16:20:18.334]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:18.334]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:18.334]         }
[16:20:18.334]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:18.334]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:18.334]             base::sink(type = "output", split = FALSE)
[16:20:18.334]             base::close(...future.stdout)
[16:20:18.334]         }, add = TRUE)
[16:20:18.334]     }
[16:20:18.334]     ...future.frame <- base::sys.nframe()
[16:20:18.334]     ...future.conditions <- base::list()
[16:20:18.334]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:18.334]     if (FALSE) {
[16:20:18.334]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:18.334]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:18.334]     }
[16:20:18.334]     ...future.result <- base::tryCatch({
[16:20:18.334]         base::withCallingHandlers({
[16:20:18.334]             ...future.value <- base::withVisible(base::local({
[16:20:18.334]                 ...future.makeSendCondition <- base::local({
[16:20:18.334]                   sendCondition <- NULL
[16:20:18.334]                   function(frame = 1L) {
[16:20:18.334]                     if (is.function(sendCondition)) 
[16:20:18.334]                       return(sendCondition)
[16:20:18.334]                     ns <- getNamespace("parallel")
[16:20:18.334]                     if (exists("sendData", mode = "function", 
[16:20:18.334]                       envir = ns)) {
[16:20:18.334]                       parallel_sendData <- get("sendData", mode = "function", 
[16:20:18.334]                         envir = ns)
[16:20:18.334]                       envir <- sys.frame(frame)
[16:20:18.334]                       master <- NULL
[16:20:18.334]                       while (!identical(envir, .GlobalEnv) && 
[16:20:18.334]                         !identical(envir, emptyenv())) {
[16:20:18.334]                         if (exists("master", mode = "list", envir = envir, 
[16:20:18.334]                           inherits = FALSE)) {
[16:20:18.334]                           master <- get("master", mode = "list", 
[16:20:18.334]                             envir = envir, inherits = FALSE)
[16:20:18.334]                           if (inherits(master, c("SOCKnode", 
[16:20:18.334]                             "SOCK0node"))) {
[16:20:18.334]                             sendCondition <<- function(cond) {
[16:20:18.334]                               data <- list(type = "VALUE", value = cond, 
[16:20:18.334]                                 success = TRUE)
[16:20:18.334]                               parallel_sendData(master, data)
[16:20:18.334]                             }
[16:20:18.334]                             return(sendCondition)
[16:20:18.334]                           }
[16:20:18.334]                         }
[16:20:18.334]                         frame <- frame + 1L
[16:20:18.334]                         envir <- sys.frame(frame)
[16:20:18.334]                       }
[16:20:18.334]                     }
[16:20:18.334]                     sendCondition <<- function(cond) NULL
[16:20:18.334]                   }
[16:20:18.334]                 })
[16:20:18.334]                 withCallingHandlers({
[16:20:18.334]                   {
[16:20:18.334]                     do.call(function(...) {
[16:20:18.334]                       sum(x, ...)
[16:20:18.334]                     }, args = future.call.arguments)
[16:20:18.334]                   }
[16:20:18.334]                 }, immediateCondition = function(cond) {
[16:20:18.334]                   sendCondition <- ...future.makeSendCondition()
[16:20:18.334]                   sendCondition(cond)
[16:20:18.334]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:18.334]                   {
[16:20:18.334]                     inherits <- base::inherits
[16:20:18.334]                     invokeRestart <- base::invokeRestart
[16:20:18.334]                     is.null <- base::is.null
[16:20:18.334]                     muffled <- FALSE
[16:20:18.334]                     if (inherits(cond, "message")) {
[16:20:18.334]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:18.334]                       if (muffled) 
[16:20:18.334]                         invokeRestart("muffleMessage")
[16:20:18.334]                     }
[16:20:18.334]                     else if (inherits(cond, "warning")) {
[16:20:18.334]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:18.334]                       if (muffled) 
[16:20:18.334]                         invokeRestart("muffleWarning")
[16:20:18.334]                     }
[16:20:18.334]                     else if (inherits(cond, "condition")) {
[16:20:18.334]                       if (!is.null(pattern)) {
[16:20:18.334]                         computeRestarts <- base::computeRestarts
[16:20:18.334]                         grepl <- base::grepl
[16:20:18.334]                         restarts <- computeRestarts(cond)
[16:20:18.334]                         for (restart in restarts) {
[16:20:18.334]                           name <- restart$name
[16:20:18.334]                           if (is.null(name)) 
[16:20:18.334]                             next
[16:20:18.334]                           if (!grepl(pattern, name)) 
[16:20:18.334]                             next
[16:20:18.334]                           invokeRestart(restart)
[16:20:18.334]                           muffled <- TRUE
[16:20:18.334]                           break
[16:20:18.334]                         }
[16:20:18.334]                       }
[16:20:18.334]                     }
[16:20:18.334]                     invisible(muffled)
[16:20:18.334]                   }
[16:20:18.334]                   muffleCondition(cond)
[16:20:18.334]                 })
[16:20:18.334]             }))
[16:20:18.334]             future::FutureResult(value = ...future.value$value, 
[16:20:18.334]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:18.334]                   ...future.rng), globalenv = if (FALSE) 
[16:20:18.334]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:18.334]                     ...future.globalenv.names))
[16:20:18.334]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:18.334]         }, condition = base::local({
[16:20:18.334]             c <- base::c
[16:20:18.334]             inherits <- base::inherits
[16:20:18.334]             invokeRestart <- base::invokeRestart
[16:20:18.334]             length <- base::length
[16:20:18.334]             list <- base::list
[16:20:18.334]             seq.int <- base::seq.int
[16:20:18.334]             signalCondition <- base::signalCondition
[16:20:18.334]             sys.calls <- base::sys.calls
[16:20:18.334]             `[[` <- base::`[[`
[16:20:18.334]             `+` <- base::`+`
[16:20:18.334]             `<<-` <- base::`<<-`
[16:20:18.334]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:18.334]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:18.334]                   3L)]
[16:20:18.334]             }
[16:20:18.334]             function(cond) {
[16:20:18.334]                 is_error <- inherits(cond, "error")
[16:20:18.334]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:18.334]                   NULL)
[16:20:18.334]                 if (is_error) {
[16:20:18.334]                   sessionInformation <- function() {
[16:20:18.334]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:18.334]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:18.334]                       search = base::search(), system = base::Sys.info())
[16:20:18.334]                   }
[16:20:18.334]                   ...future.conditions[[length(...future.conditions) + 
[16:20:18.334]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:18.334]                     cond$call), session = sessionInformation(), 
[16:20:18.334]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:18.334]                   signalCondition(cond)
[16:20:18.334]                 }
[16:20:18.334]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:18.334]                 "immediateCondition"))) {
[16:20:18.334]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:18.334]                   ...future.conditions[[length(...future.conditions) + 
[16:20:18.334]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:18.334]                   if (TRUE && !signal) {
[16:20:18.334]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:18.334]                     {
[16:20:18.334]                       inherits <- base::inherits
[16:20:18.334]                       invokeRestart <- base::invokeRestart
[16:20:18.334]                       is.null <- base::is.null
[16:20:18.334]                       muffled <- FALSE
[16:20:18.334]                       if (inherits(cond, "message")) {
[16:20:18.334]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:18.334]                         if (muffled) 
[16:20:18.334]                           invokeRestart("muffleMessage")
[16:20:18.334]                       }
[16:20:18.334]                       else if (inherits(cond, "warning")) {
[16:20:18.334]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:18.334]                         if (muffled) 
[16:20:18.334]                           invokeRestart("muffleWarning")
[16:20:18.334]                       }
[16:20:18.334]                       else if (inherits(cond, "condition")) {
[16:20:18.334]                         if (!is.null(pattern)) {
[16:20:18.334]                           computeRestarts <- base::computeRestarts
[16:20:18.334]                           grepl <- base::grepl
[16:20:18.334]                           restarts <- computeRestarts(cond)
[16:20:18.334]                           for (restart in restarts) {
[16:20:18.334]                             name <- restart$name
[16:20:18.334]                             if (is.null(name)) 
[16:20:18.334]                               next
[16:20:18.334]                             if (!grepl(pattern, name)) 
[16:20:18.334]                               next
[16:20:18.334]                             invokeRestart(restart)
[16:20:18.334]                             muffled <- TRUE
[16:20:18.334]                             break
[16:20:18.334]                           }
[16:20:18.334]                         }
[16:20:18.334]                       }
[16:20:18.334]                       invisible(muffled)
[16:20:18.334]                     }
[16:20:18.334]                     muffleCondition(cond, pattern = "^muffle")
[16:20:18.334]                   }
[16:20:18.334]                 }
[16:20:18.334]                 else {
[16:20:18.334]                   if (TRUE) {
[16:20:18.334]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:18.334]                     {
[16:20:18.334]                       inherits <- base::inherits
[16:20:18.334]                       invokeRestart <- base::invokeRestart
[16:20:18.334]                       is.null <- base::is.null
[16:20:18.334]                       muffled <- FALSE
[16:20:18.334]                       if (inherits(cond, "message")) {
[16:20:18.334]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:18.334]                         if (muffled) 
[16:20:18.334]                           invokeRestart("muffleMessage")
[16:20:18.334]                       }
[16:20:18.334]                       else if (inherits(cond, "warning")) {
[16:20:18.334]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:18.334]                         if (muffled) 
[16:20:18.334]                           invokeRestart("muffleWarning")
[16:20:18.334]                       }
[16:20:18.334]                       else if (inherits(cond, "condition")) {
[16:20:18.334]                         if (!is.null(pattern)) {
[16:20:18.334]                           computeRestarts <- base::computeRestarts
[16:20:18.334]                           grepl <- base::grepl
[16:20:18.334]                           restarts <- computeRestarts(cond)
[16:20:18.334]                           for (restart in restarts) {
[16:20:18.334]                             name <- restart$name
[16:20:18.334]                             if (is.null(name)) 
[16:20:18.334]                               next
[16:20:18.334]                             if (!grepl(pattern, name)) 
[16:20:18.334]                               next
[16:20:18.334]                             invokeRestart(restart)
[16:20:18.334]                             muffled <- TRUE
[16:20:18.334]                             break
[16:20:18.334]                           }
[16:20:18.334]                         }
[16:20:18.334]                       }
[16:20:18.334]                       invisible(muffled)
[16:20:18.334]                     }
[16:20:18.334]                     muffleCondition(cond, pattern = "^muffle")
[16:20:18.334]                   }
[16:20:18.334]                 }
[16:20:18.334]             }
[16:20:18.334]         }))
[16:20:18.334]     }, error = function(ex) {
[16:20:18.334]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:18.334]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:18.334]                 ...future.rng), started = ...future.startTime, 
[16:20:18.334]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:18.334]             version = "1.8"), class = "FutureResult")
[16:20:18.334]     }, finally = {
[16:20:18.334]         if (!identical(...future.workdir, getwd())) 
[16:20:18.334]             setwd(...future.workdir)
[16:20:18.334]         {
[16:20:18.334]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:18.334]                 ...future.oldOptions$nwarnings <- NULL
[16:20:18.334]             }
[16:20:18.334]             base::options(...future.oldOptions)
[16:20:18.334]             if (.Platform$OS.type == "windows") {
[16:20:18.334]                 old_names <- names(...future.oldEnvVars)
[16:20:18.334]                 envs <- base::Sys.getenv()
[16:20:18.334]                 names <- names(envs)
[16:20:18.334]                 common <- intersect(names, old_names)
[16:20:18.334]                 added <- setdiff(names, old_names)
[16:20:18.334]                 removed <- setdiff(old_names, names)
[16:20:18.334]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:18.334]                   envs[common]]
[16:20:18.334]                 NAMES <- toupper(changed)
[16:20:18.334]                 args <- list()
[16:20:18.334]                 for (kk in seq_along(NAMES)) {
[16:20:18.334]                   name <- changed[[kk]]
[16:20:18.334]                   NAME <- NAMES[[kk]]
[16:20:18.334]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:18.334]                     next
[16:20:18.334]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:18.334]                 }
[16:20:18.334]                 NAMES <- toupper(added)
[16:20:18.334]                 for (kk in seq_along(NAMES)) {
[16:20:18.334]                   name <- added[[kk]]
[16:20:18.334]                   NAME <- NAMES[[kk]]
[16:20:18.334]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:18.334]                     next
[16:20:18.334]                   args[[name]] <- ""
[16:20:18.334]                 }
[16:20:18.334]                 NAMES <- toupper(removed)
[16:20:18.334]                 for (kk in seq_along(NAMES)) {
[16:20:18.334]                   name <- removed[[kk]]
[16:20:18.334]                   NAME <- NAMES[[kk]]
[16:20:18.334]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:18.334]                     next
[16:20:18.334]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:18.334]                 }
[16:20:18.334]                 if (length(args) > 0) 
[16:20:18.334]                   base::do.call(base::Sys.setenv, args = args)
[16:20:18.334]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:18.334]             }
[16:20:18.334]             else {
[16:20:18.334]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:18.334]             }
[16:20:18.334]             {
[16:20:18.334]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:18.334]                   0L) {
[16:20:18.334]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:18.334]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:18.334]                   base::options(opts)
[16:20:18.334]                 }
[16:20:18.334]                 {
[16:20:18.334]                   {
[16:20:18.334]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:18.334]                     NULL
[16:20:18.334]                   }
[16:20:18.334]                   options(future.plan = NULL)
[16:20:18.334]                   if (is.na(NA_character_)) 
[16:20:18.334]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:18.334]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:18.334]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:18.334]                     .init = FALSE)
[16:20:18.334]                 }
[16:20:18.334]             }
[16:20:18.334]         }
[16:20:18.334]     })
[16:20:18.334]     if (TRUE) {
[16:20:18.334]         base::sink(type = "output", split = FALSE)
[16:20:18.334]         if (TRUE) {
[16:20:18.334]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:18.334]         }
[16:20:18.334]         else {
[16:20:18.334]             ...future.result["stdout"] <- base::list(NULL)
[16:20:18.334]         }
[16:20:18.334]         base::close(...future.stdout)
[16:20:18.334]         ...future.stdout <- NULL
[16:20:18.334]     }
[16:20:18.334]     ...future.result$conditions <- ...future.conditions
[16:20:18.334]     ...future.result$finished <- base::Sys.time()
[16:20:18.334]     ...future.result
[16:20:18.334] }
[16:20:18.337] Exporting 2 global objects (112 bytes) to cluster node #1 ...
[16:20:18.337] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[16:20:18.337] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[16:20:18.338] Exporting ‘future.call.arguments’ (56 bytes) to cluster node #1 ...
[16:20:18.338] Exporting ‘future.call.arguments’ (56 bytes) to cluster node #1 ... DONE
[16:20:18.338] Exporting 2 global objects (112 bytes) to cluster node #1 ... DONE
[16:20:18.339] MultisessionFuture started
[16:20:18.339] - Launch lazy future ... done
[16:20:18.339] run() for ‘MultisessionFuture’ ... done
[16:20:18.339] result() for ClusterFuture ...
[16:20:18.339] receiveMessageFromWorker() for ClusterFuture ...
[16:20:18.339] - Validating connection of MultisessionFuture
[16:20:18.340] - received message: FutureResult
[16:20:18.340] - Received FutureResult
[16:20:18.340] - Erased future from FutureRegistry
[16:20:18.340] result() for ClusterFuture ...
[16:20:18.341] - result already collected: FutureResult
[16:20:18.341] result() for ClusterFuture ... done
[16:20:18.341] receiveMessageFromWorker() for ClusterFuture ... done
[16:20:18.341] result() for ClusterFuture ... done
[16:20:18.341] result() for ClusterFuture ...
[16:20:18.341] - result already collected: FutureResult
[16:20:18.341] result() for ClusterFuture ... done
[1] 6
** Sum function 'C' with plan('multisession') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y)
    }
    y
}
<bytecode: 0x55ed026dd3e0>
Arguments '...' exists: FALSE
[16:20:18.342] getGlobalsAndPackages() ...
[16:20:18.342] Searching for globals...
[16:20:18.343] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘y’
[16:20:18.343] Searching for globals ... DONE
[16:20:18.344] Resolving globals: FALSE
[16:20:18.344] The total size of the 2 globals is 112 bytes (112 bytes)
[16:20:18.345] The total size of the 2 globals exported for future expression (‘{; sum(x, y); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[16:20:18.345] - globals: [2] ‘x’, ‘y’
[16:20:18.345] 
[16:20:18.345] getGlobalsAndPackages() ... DONE
[16:20:18.345] run() for ‘Future’ ...
[16:20:18.345] - state: ‘created’
[16:20:18.346] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:20:18.360] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:18.360] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:20:18.360]   - Field: ‘node’
[16:20:18.361]   - Field: ‘label’
[16:20:18.361]   - Field: ‘local’
[16:20:18.361]   - Field: ‘owner’
[16:20:18.361]   - Field: ‘envir’
[16:20:18.361]   - Field: ‘workers’
[16:20:18.361]   - Field: ‘packages’
[16:20:18.361]   - Field: ‘gc’
[16:20:18.361]   - Field: ‘conditions’
[16:20:18.361]   - Field: ‘persistent’
[16:20:18.361]   - Field: ‘expr’
[16:20:18.362]   - Field: ‘uuid’
[16:20:18.362]   - Field: ‘seed’
[16:20:18.362]   - Field: ‘version’
[16:20:18.362]   - Field: ‘result’
[16:20:18.362]   - Field: ‘asynchronous’
[16:20:18.362]   - Field: ‘calls’
[16:20:18.362]   - Field: ‘globals’
[16:20:18.362]   - Field: ‘stdout’
[16:20:18.363]   - Field: ‘earlySignal’
[16:20:18.363]   - Field: ‘lazy’
[16:20:18.363]   - Field: ‘state’
[16:20:18.363] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:20:18.363] - Launch lazy future ...
[16:20:18.363] Packages needed by the future expression (n = 0): <none>
[16:20:18.363] Packages needed by future strategies (n = 0): <none>
[16:20:18.364] {
[16:20:18.364]     {
[16:20:18.364]         {
[16:20:18.364]             ...future.startTime <- base::Sys.time()
[16:20:18.364]             {
[16:20:18.364]                 {
[16:20:18.364]                   {
[16:20:18.364]                     {
[16:20:18.364]                       base::local({
[16:20:18.364]                         has_future <- base::requireNamespace("future", 
[16:20:18.364]                           quietly = TRUE)
[16:20:18.364]                         if (has_future) {
[16:20:18.364]                           ns <- base::getNamespace("future")
[16:20:18.364]                           version <- ns[[".package"]][["version"]]
[16:20:18.364]                           if (is.null(version)) 
[16:20:18.364]                             version <- utils::packageVersion("future")
[16:20:18.364]                         }
[16:20:18.364]                         else {
[16:20:18.364]                           version <- NULL
[16:20:18.364]                         }
[16:20:18.364]                         if (!has_future || version < "1.8.0") {
[16:20:18.364]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:18.364]                             "", base::R.version$version.string), 
[16:20:18.364]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:18.364]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:18.364]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:18.364]                               "release", "version")], collapse = " "), 
[16:20:18.364]                             hostname = base::Sys.info()[["nodename"]])
[16:20:18.364]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:18.364]                             info)
[16:20:18.364]                           info <- base::paste(info, collapse = "; ")
[16:20:18.364]                           if (!has_future) {
[16:20:18.364]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:18.364]                               info)
[16:20:18.364]                           }
[16:20:18.364]                           else {
[16:20:18.364]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:18.364]                               info, version)
[16:20:18.364]                           }
[16:20:18.364]                           base::stop(msg)
[16:20:18.364]                         }
[16:20:18.364]                       })
[16:20:18.364]                     }
[16:20:18.364]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:18.364]                     base::options(mc.cores = 1L)
[16:20:18.364]                   }
[16:20:18.364]                   ...future.strategy.old <- future::plan("list")
[16:20:18.364]                   options(future.plan = NULL)
[16:20:18.364]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:18.364]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:18.364]                 }
[16:20:18.364]                 ...future.workdir <- getwd()
[16:20:18.364]             }
[16:20:18.364]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:18.364]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:18.364]         }
[16:20:18.364]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:18.364]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:18.364]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:18.364]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:18.364]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:18.364]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:18.364]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:18.364]             base::names(...future.oldOptions))
[16:20:18.364]     }
[16:20:18.364]     if (FALSE) {
[16:20:18.364]     }
[16:20:18.364]     else {
[16:20:18.364]         if (TRUE) {
[16:20:18.364]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:18.364]                 open = "w")
[16:20:18.364]         }
[16:20:18.364]         else {
[16:20:18.364]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:18.364]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:18.364]         }
[16:20:18.364]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:18.364]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:18.364]             base::sink(type = "output", split = FALSE)
[16:20:18.364]             base::close(...future.stdout)
[16:20:18.364]         }, add = TRUE)
[16:20:18.364]     }
[16:20:18.364]     ...future.frame <- base::sys.nframe()
[16:20:18.364]     ...future.conditions <- base::list()
[16:20:18.364]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:18.364]     if (FALSE) {
[16:20:18.364]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:18.364]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:18.364]     }
[16:20:18.364]     ...future.result <- base::tryCatch({
[16:20:18.364]         base::withCallingHandlers({
[16:20:18.364]             ...future.value <- base::withVisible(base::local({
[16:20:18.364]                 ...future.makeSendCondition <- base::local({
[16:20:18.364]                   sendCondition <- NULL
[16:20:18.364]                   function(frame = 1L) {
[16:20:18.364]                     if (is.function(sendCondition)) 
[16:20:18.364]                       return(sendCondition)
[16:20:18.364]                     ns <- getNamespace("parallel")
[16:20:18.364]                     if (exists("sendData", mode = "function", 
[16:20:18.364]                       envir = ns)) {
[16:20:18.364]                       parallel_sendData <- get("sendData", mode = "function", 
[16:20:18.364]                         envir = ns)
[16:20:18.364]                       envir <- sys.frame(frame)
[16:20:18.364]                       master <- NULL
[16:20:18.364]                       while (!identical(envir, .GlobalEnv) && 
[16:20:18.364]                         !identical(envir, emptyenv())) {
[16:20:18.364]                         if (exists("master", mode = "list", envir = envir, 
[16:20:18.364]                           inherits = FALSE)) {
[16:20:18.364]                           master <- get("master", mode = "list", 
[16:20:18.364]                             envir = envir, inherits = FALSE)
[16:20:18.364]                           if (inherits(master, c("SOCKnode", 
[16:20:18.364]                             "SOCK0node"))) {
[16:20:18.364]                             sendCondition <<- function(cond) {
[16:20:18.364]                               data <- list(type = "VALUE", value = cond, 
[16:20:18.364]                                 success = TRUE)
[16:20:18.364]                               parallel_sendData(master, data)
[16:20:18.364]                             }
[16:20:18.364]                             return(sendCondition)
[16:20:18.364]                           }
[16:20:18.364]                         }
[16:20:18.364]                         frame <- frame + 1L
[16:20:18.364]                         envir <- sys.frame(frame)
[16:20:18.364]                       }
[16:20:18.364]                     }
[16:20:18.364]                     sendCondition <<- function(cond) NULL
[16:20:18.364]                   }
[16:20:18.364]                 })
[16:20:18.364]                 withCallingHandlers({
[16:20:18.364]                   {
[16:20:18.364]                     sum(x, y)
[16:20:18.364]                   }
[16:20:18.364]                 }, immediateCondition = function(cond) {
[16:20:18.364]                   sendCondition <- ...future.makeSendCondition()
[16:20:18.364]                   sendCondition(cond)
[16:20:18.364]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:18.364]                   {
[16:20:18.364]                     inherits <- base::inherits
[16:20:18.364]                     invokeRestart <- base::invokeRestart
[16:20:18.364]                     is.null <- base::is.null
[16:20:18.364]                     muffled <- FALSE
[16:20:18.364]                     if (inherits(cond, "message")) {
[16:20:18.364]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:18.364]                       if (muffled) 
[16:20:18.364]                         invokeRestart("muffleMessage")
[16:20:18.364]                     }
[16:20:18.364]                     else if (inherits(cond, "warning")) {
[16:20:18.364]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:18.364]                       if (muffled) 
[16:20:18.364]                         invokeRestart("muffleWarning")
[16:20:18.364]                     }
[16:20:18.364]                     else if (inherits(cond, "condition")) {
[16:20:18.364]                       if (!is.null(pattern)) {
[16:20:18.364]                         computeRestarts <- base::computeRestarts
[16:20:18.364]                         grepl <- base::grepl
[16:20:18.364]                         restarts <- computeRestarts(cond)
[16:20:18.364]                         for (restart in restarts) {
[16:20:18.364]                           name <- restart$name
[16:20:18.364]                           if (is.null(name)) 
[16:20:18.364]                             next
[16:20:18.364]                           if (!grepl(pattern, name)) 
[16:20:18.364]                             next
[16:20:18.364]                           invokeRestart(restart)
[16:20:18.364]                           muffled <- TRUE
[16:20:18.364]                           break
[16:20:18.364]                         }
[16:20:18.364]                       }
[16:20:18.364]                     }
[16:20:18.364]                     invisible(muffled)
[16:20:18.364]                   }
[16:20:18.364]                   muffleCondition(cond)
[16:20:18.364]                 })
[16:20:18.364]             }))
[16:20:18.364]             future::FutureResult(value = ...future.value$value, 
[16:20:18.364]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:18.364]                   ...future.rng), globalenv = if (FALSE) 
[16:20:18.364]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:18.364]                     ...future.globalenv.names))
[16:20:18.364]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:18.364]         }, condition = base::local({
[16:20:18.364]             c <- base::c
[16:20:18.364]             inherits <- base::inherits
[16:20:18.364]             invokeRestart <- base::invokeRestart
[16:20:18.364]             length <- base::length
[16:20:18.364]             list <- base::list
[16:20:18.364]             seq.int <- base::seq.int
[16:20:18.364]             signalCondition <- base::signalCondition
[16:20:18.364]             sys.calls <- base::sys.calls
[16:20:18.364]             `[[` <- base::`[[`
[16:20:18.364]             `+` <- base::`+`
[16:20:18.364]             `<<-` <- base::`<<-`
[16:20:18.364]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:18.364]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:18.364]                   3L)]
[16:20:18.364]             }
[16:20:18.364]             function(cond) {
[16:20:18.364]                 is_error <- inherits(cond, "error")
[16:20:18.364]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:18.364]                   NULL)
[16:20:18.364]                 if (is_error) {
[16:20:18.364]                   sessionInformation <- function() {
[16:20:18.364]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:18.364]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:18.364]                       search = base::search(), system = base::Sys.info())
[16:20:18.364]                   }
[16:20:18.364]                   ...future.conditions[[length(...future.conditions) + 
[16:20:18.364]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:18.364]                     cond$call), session = sessionInformation(), 
[16:20:18.364]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:18.364]                   signalCondition(cond)
[16:20:18.364]                 }
[16:20:18.364]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:18.364]                 "immediateCondition"))) {
[16:20:18.364]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:18.364]                   ...future.conditions[[length(...future.conditions) + 
[16:20:18.364]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:18.364]                   if (TRUE && !signal) {
[16:20:18.364]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:18.364]                     {
[16:20:18.364]                       inherits <- base::inherits
[16:20:18.364]                       invokeRestart <- base::invokeRestart
[16:20:18.364]                       is.null <- base::is.null
[16:20:18.364]                       muffled <- FALSE
[16:20:18.364]                       if (inherits(cond, "message")) {
[16:20:18.364]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:18.364]                         if (muffled) 
[16:20:18.364]                           invokeRestart("muffleMessage")
[16:20:18.364]                       }
[16:20:18.364]                       else if (inherits(cond, "warning")) {
[16:20:18.364]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:18.364]                         if (muffled) 
[16:20:18.364]                           invokeRestart("muffleWarning")
[16:20:18.364]                       }
[16:20:18.364]                       else if (inherits(cond, "condition")) {
[16:20:18.364]                         if (!is.null(pattern)) {
[16:20:18.364]                           computeRestarts <- base::computeRestarts
[16:20:18.364]                           grepl <- base::grepl
[16:20:18.364]                           restarts <- computeRestarts(cond)
[16:20:18.364]                           for (restart in restarts) {
[16:20:18.364]                             name <- restart$name
[16:20:18.364]                             if (is.null(name)) 
[16:20:18.364]                               next
[16:20:18.364]                             if (!grepl(pattern, name)) 
[16:20:18.364]                               next
[16:20:18.364]                             invokeRestart(restart)
[16:20:18.364]                             muffled <- TRUE
[16:20:18.364]                             break
[16:20:18.364]                           }
[16:20:18.364]                         }
[16:20:18.364]                       }
[16:20:18.364]                       invisible(muffled)
[16:20:18.364]                     }
[16:20:18.364]                     muffleCondition(cond, pattern = "^muffle")
[16:20:18.364]                   }
[16:20:18.364]                 }
[16:20:18.364]                 else {
[16:20:18.364]                   if (TRUE) {
[16:20:18.364]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:18.364]                     {
[16:20:18.364]                       inherits <- base::inherits
[16:20:18.364]                       invokeRestart <- base::invokeRestart
[16:20:18.364]                       is.null <- base::is.null
[16:20:18.364]                       muffled <- FALSE
[16:20:18.364]                       if (inherits(cond, "message")) {
[16:20:18.364]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:18.364]                         if (muffled) 
[16:20:18.364]                           invokeRestart("muffleMessage")
[16:20:18.364]                       }
[16:20:18.364]                       else if (inherits(cond, "warning")) {
[16:20:18.364]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:18.364]                         if (muffled) 
[16:20:18.364]                           invokeRestart("muffleWarning")
[16:20:18.364]                       }
[16:20:18.364]                       else if (inherits(cond, "condition")) {
[16:20:18.364]                         if (!is.null(pattern)) {
[16:20:18.364]                           computeRestarts <- base::computeRestarts
[16:20:18.364]                           grepl <- base::grepl
[16:20:18.364]                           restarts <- computeRestarts(cond)
[16:20:18.364]                           for (restart in restarts) {
[16:20:18.364]                             name <- restart$name
[16:20:18.364]                             if (is.null(name)) 
[16:20:18.364]                               next
[16:20:18.364]                             if (!grepl(pattern, name)) 
[16:20:18.364]                               next
[16:20:18.364]                             invokeRestart(restart)
[16:20:18.364]                             muffled <- TRUE
[16:20:18.364]                             break
[16:20:18.364]                           }
[16:20:18.364]                         }
[16:20:18.364]                       }
[16:20:18.364]                       invisible(muffled)
[16:20:18.364]                     }
[16:20:18.364]                     muffleCondition(cond, pattern = "^muffle")
[16:20:18.364]                   }
[16:20:18.364]                 }
[16:20:18.364]             }
[16:20:18.364]         }))
[16:20:18.364]     }, error = function(ex) {
[16:20:18.364]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:18.364]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:18.364]                 ...future.rng), started = ...future.startTime, 
[16:20:18.364]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:18.364]             version = "1.8"), class = "FutureResult")
[16:20:18.364]     }, finally = {
[16:20:18.364]         if (!identical(...future.workdir, getwd())) 
[16:20:18.364]             setwd(...future.workdir)
[16:20:18.364]         {
[16:20:18.364]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:18.364]                 ...future.oldOptions$nwarnings <- NULL
[16:20:18.364]             }
[16:20:18.364]             base::options(...future.oldOptions)
[16:20:18.364]             if (.Platform$OS.type == "windows") {
[16:20:18.364]                 old_names <- names(...future.oldEnvVars)
[16:20:18.364]                 envs <- base::Sys.getenv()
[16:20:18.364]                 names <- names(envs)
[16:20:18.364]                 common <- intersect(names, old_names)
[16:20:18.364]                 added <- setdiff(names, old_names)
[16:20:18.364]                 removed <- setdiff(old_names, names)
[16:20:18.364]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:18.364]                   envs[common]]
[16:20:18.364]                 NAMES <- toupper(changed)
[16:20:18.364]                 args <- list()
[16:20:18.364]                 for (kk in seq_along(NAMES)) {
[16:20:18.364]                   name <- changed[[kk]]
[16:20:18.364]                   NAME <- NAMES[[kk]]
[16:20:18.364]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:18.364]                     next
[16:20:18.364]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:18.364]                 }
[16:20:18.364]                 NAMES <- toupper(added)
[16:20:18.364]                 for (kk in seq_along(NAMES)) {
[16:20:18.364]                   name <- added[[kk]]
[16:20:18.364]                   NAME <- NAMES[[kk]]
[16:20:18.364]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:18.364]                     next
[16:20:18.364]                   args[[name]] <- ""
[16:20:18.364]                 }
[16:20:18.364]                 NAMES <- toupper(removed)
[16:20:18.364]                 for (kk in seq_along(NAMES)) {
[16:20:18.364]                   name <- removed[[kk]]
[16:20:18.364]                   NAME <- NAMES[[kk]]
[16:20:18.364]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:18.364]                     next
[16:20:18.364]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:18.364]                 }
[16:20:18.364]                 if (length(args) > 0) 
[16:20:18.364]                   base::do.call(base::Sys.setenv, args = args)
[16:20:18.364]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:18.364]             }
[16:20:18.364]             else {
[16:20:18.364]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:18.364]             }
[16:20:18.364]             {
[16:20:18.364]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:18.364]                   0L) {
[16:20:18.364]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:18.364]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:18.364]                   base::options(opts)
[16:20:18.364]                 }
[16:20:18.364]                 {
[16:20:18.364]                   {
[16:20:18.364]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:18.364]                     NULL
[16:20:18.364]                   }
[16:20:18.364]                   options(future.plan = NULL)
[16:20:18.364]                   if (is.na(NA_character_)) 
[16:20:18.364]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:18.364]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:18.364]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:18.364]                     .init = FALSE)
[16:20:18.364]                 }
[16:20:18.364]             }
[16:20:18.364]         }
[16:20:18.364]     })
[16:20:18.364]     if (TRUE) {
[16:20:18.364]         base::sink(type = "output", split = FALSE)
[16:20:18.364]         if (TRUE) {
[16:20:18.364]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:18.364]         }
[16:20:18.364]         else {
[16:20:18.364]             ...future.result["stdout"] <- base::list(NULL)
[16:20:18.364]         }
[16:20:18.364]         base::close(...future.stdout)
[16:20:18.364]         ...future.stdout <- NULL
[16:20:18.364]     }
[16:20:18.364]     ...future.result$conditions <- ...future.conditions
[16:20:18.364]     ...future.result$finished <- base::Sys.time()
[16:20:18.364]     ...future.result
[16:20:18.364] }
[16:20:18.367] Exporting 2 global objects (112 bytes) to cluster node #1 ...
[16:20:18.367] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[16:20:18.369] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[16:20:18.370] Exporting ‘y’ (56 bytes) to cluster node #1 ...
[16:20:18.370] Exporting ‘y’ (56 bytes) to cluster node #1 ... DONE
[16:20:18.370] Exporting 2 global objects (112 bytes) to cluster node #1 ... DONE
[16:20:18.370] MultisessionFuture started
[16:20:18.370] - Launch lazy future ... done
[16:20:18.371] run() for ‘MultisessionFuture’ ... done
[16:20:18.371] result() for ClusterFuture ...
[16:20:18.371] receiveMessageFromWorker() for ClusterFuture ...
[16:20:18.371] - Validating connection of MultisessionFuture
[16:20:18.372] - received message: FutureResult
[16:20:18.372] - Received FutureResult
[16:20:18.372] - Erased future from FutureRegistry
[16:20:18.372] result() for ClusterFuture ...
[16:20:18.372] - result already collected: FutureResult
[16:20:18.372] result() for ClusterFuture ... done
[16:20:18.372] receiveMessageFromWorker() for ClusterFuture ... done
[16:20:18.373] result() for ClusterFuture ... done
[16:20:18.373] result() for ClusterFuture ...
[16:20:18.373] - result already collected: FutureResult
[16:20:18.373] result() for ClusterFuture ... done
[1] 6
** Sum function 'D' with plan('multisession') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y, ...)
    }
    y
}
<bytecode: 0x55ed028c9f38>
Arguments '...' exists: FALSE
[16:20:18.373] getGlobalsAndPackages() ...
[16:20:18.373] Searching for globals...
[16:20:18.375] - globals found: [5] ‘{’, ‘sum’, ‘x’, ‘y’, ‘...’
[16:20:18.375] Searching for globals ... DONE
[16:20:18.375] Resolving globals: FALSE
[16:20:18.375] Tweak future expression to call with '...' arguments ...
[16:20:18.375] The total size of the 2 globals is 112 bytes (112 bytes)
[16:20:18.376] The total size of the 2 globals exported for future expression (‘{; sum(x, y, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[16:20:18.376] - globals: [2] ‘x’, ‘y’
[16:20:18.376] 
[16:20:18.376] getGlobalsAndPackages() ... DONE
[16:20:18.376] run() for ‘Future’ ...
[16:20:18.377] - state: ‘created’
[16:20:18.377] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:20:18.390] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:18.391] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:20:18.391]   - Field: ‘node’
[16:20:18.391]   - Field: ‘label’
[16:20:18.391]   - Field: ‘local’
[16:20:18.391]   - Field: ‘owner’
[16:20:18.391]   - Field: ‘envir’
[16:20:18.391]   - Field: ‘workers’
[16:20:18.391]   - Field: ‘packages’
[16:20:18.391]   - Field: ‘gc’
[16:20:18.391]   - Field: ‘conditions’
[16:20:18.391]   - Field: ‘persistent’
[16:20:18.392]   - Field: ‘expr’
[16:20:18.392]   - Field: ‘uuid’
[16:20:18.392]   - Field: ‘seed’
[16:20:18.392]   - Field: ‘version’
[16:20:18.392]   - Field: ‘result’
[16:20:18.392]   - Field: ‘asynchronous’
[16:20:18.392]   - Field: ‘calls’
[16:20:18.392]   - Field: ‘globals’
[16:20:18.392]   - Field: ‘stdout’
[16:20:18.392]   - Field: ‘earlySignal’
[16:20:18.393]   - Field: ‘lazy’
[16:20:18.393]   - Field: ‘state’
[16:20:18.393] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:20:18.393] - Launch lazy future ...
[16:20:18.393] Packages needed by the future expression (n = 0): <none>
[16:20:18.393] Packages needed by future strategies (n = 0): <none>
[16:20:18.394] {
[16:20:18.394]     {
[16:20:18.394]         {
[16:20:18.394]             ...future.startTime <- base::Sys.time()
[16:20:18.394]             {
[16:20:18.394]                 {
[16:20:18.394]                   {
[16:20:18.394]                     {
[16:20:18.394]                       base::local({
[16:20:18.394]                         has_future <- base::requireNamespace("future", 
[16:20:18.394]                           quietly = TRUE)
[16:20:18.394]                         if (has_future) {
[16:20:18.394]                           ns <- base::getNamespace("future")
[16:20:18.394]                           version <- ns[[".package"]][["version"]]
[16:20:18.394]                           if (is.null(version)) 
[16:20:18.394]                             version <- utils::packageVersion("future")
[16:20:18.394]                         }
[16:20:18.394]                         else {
[16:20:18.394]                           version <- NULL
[16:20:18.394]                         }
[16:20:18.394]                         if (!has_future || version < "1.8.0") {
[16:20:18.394]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:18.394]                             "", base::R.version$version.string), 
[16:20:18.394]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:18.394]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:18.394]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:18.394]                               "release", "version")], collapse = " "), 
[16:20:18.394]                             hostname = base::Sys.info()[["nodename"]])
[16:20:18.394]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:18.394]                             info)
[16:20:18.394]                           info <- base::paste(info, collapse = "; ")
[16:20:18.394]                           if (!has_future) {
[16:20:18.394]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:18.394]                               info)
[16:20:18.394]                           }
[16:20:18.394]                           else {
[16:20:18.394]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:18.394]                               info, version)
[16:20:18.394]                           }
[16:20:18.394]                           base::stop(msg)
[16:20:18.394]                         }
[16:20:18.394]                       })
[16:20:18.394]                     }
[16:20:18.394]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:18.394]                     base::options(mc.cores = 1L)
[16:20:18.394]                   }
[16:20:18.394]                   ...future.strategy.old <- future::plan("list")
[16:20:18.394]                   options(future.plan = NULL)
[16:20:18.394]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:18.394]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:18.394]                 }
[16:20:18.394]                 ...future.workdir <- getwd()
[16:20:18.394]             }
[16:20:18.394]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:18.394]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:18.394]         }
[16:20:18.394]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:18.394]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:18.394]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:18.394]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:18.394]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:18.394]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:18.394]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:18.394]             base::names(...future.oldOptions))
[16:20:18.394]     }
[16:20:18.394]     if (FALSE) {
[16:20:18.394]     }
[16:20:18.394]     else {
[16:20:18.394]         if (TRUE) {
[16:20:18.394]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:18.394]                 open = "w")
[16:20:18.394]         }
[16:20:18.394]         else {
[16:20:18.394]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:18.394]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:18.394]         }
[16:20:18.394]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:18.394]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:18.394]             base::sink(type = "output", split = FALSE)
[16:20:18.394]             base::close(...future.stdout)
[16:20:18.394]         }, add = TRUE)
[16:20:18.394]     }
[16:20:18.394]     ...future.frame <- base::sys.nframe()
[16:20:18.394]     ...future.conditions <- base::list()
[16:20:18.394]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:18.394]     if (FALSE) {
[16:20:18.394]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:18.394]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:18.394]     }
[16:20:18.394]     ...future.result <- base::tryCatch({
[16:20:18.394]         base::withCallingHandlers({
[16:20:18.394]             ...future.value <- base::withVisible(base::local({
[16:20:18.394]                 ...future.makeSendCondition <- base::local({
[16:20:18.394]                   sendCondition <- NULL
[16:20:18.394]                   function(frame = 1L) {
[16:20:18.394]                     if (is.function(sendCondition)) 
[16:20:18.394]                       return(sendCondition)
[16:20:18.394]                     ns <- getNamespace("parallel")
[16:20:18.394]                     if (exists("sendData", mode = "function", 
[16:20:18.394]                       envir = ns)) {
[16:20:18.394]                       parallel_sendData <- get("sendData", mode = "function", 
[16:20:18.394]                         envir = ns)
[16:20:18.394]                       envir <- sys.frame(frame)
[16:20:18.394]                       master <- NULL
[16:20:18.394]                       while (!identical(envir, .GlobalEnv) && 
[16:20:18.394]                         !identical(envir, emptyenv())) {
[16:20:18.394]                         if (exists("master", mode = "list", envir = envir, 
[16:20:18.394]                           inherits = FALSE)) {
[16:20:18.394]                           master <- get("master", mode = "list", 
[16:20:18.394]                             envir = envir, inherits = FALSE)
[16:20:18.394]                           if (inherits(master, c("SOCKnode", 
[16:20:18.394]                             "SOCK0node"))) {
[16:20:18.394]                             sendCondition <<- function(cond) {
[16:20:18.394]                               data <- list(type = "VALUE", value = cond, 
[16:20:18.394]                                 success = TRUE)
[16:20:18.394]                               parallel_sendData(master, data)
[16:20:18.394]                             }
[16:20:18.394]                             return(sendCondition)
[16:20:18.394]                           }
[16:20:18.394]                         }
[16:20:18.394]                         frame <- frame + 1L
[16:20:18.394]                         envir <- sys.frame(frame)
[16:20:18.394]                       }
[16:20:18.394]                     }
[16:20:18.394]                     sendCondition <<- function(cond) NULL
[16:20:18.394]                   }
[16:20:18.394]                 })
[16:20:18.394]                 withCallingHandlers({
[16:20:18.394]                   {
[16:20:18.394]                     sum(x, y, ...)
[16:20:18.394]                   }
[16:20:18.394]                 }, immediateCondition = function(cond) {
[16:20:18.394]                   sendCondition <- ...future.makeSendCondition()
[16:20:18.394]                   sendCondition(cond)
[16:20:18.394]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:18.394]                   {
[16:20:18.394]                     inherits <- base::inherits
[16:20:18.394]                     invokeRestart <- base::invokeRestart
[16:20:18.394]                     is.null <- base::is.null
[16:20:18.394]                     muffled <- FALSE
[16:20:18.394]                     if (inherits(cond, "message")) {
[16:20:18.394]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:18.394]                       if (muffled) 
[16:20:18.394]                         invokeRestart("muffleMessage")
[16:20:18.394]                     }
[16:20:18.394]                     else if (inherits(cond, "warning")) {
[16:20:18.394]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:18.394]                       if (muffled) 
[16:20:18.394]                         invokeRestart("muffleWarning")
[16:20:18.394]                     }
[16:20:18.394]                     else if (inherits(cond, "condition")) {
[16:20:18.394]                       if (!is.null(pattern)) {
[16:20:18.394]                         computeRestarts <- base::computeRestarts
[16:20:18.394]                         grepl <- base::grepl
[16:20:18.394]                         restarts <- computeRestarts(cond)
[16:20:18.394]                         for (restart in restarts) {
[16:20:18.394]                           name <- restart$name
[16:20:18.394]                           if (is.null(name)) 
[16:20:18.394]                             next
[16:20:18.394]                           if (!grepl(pattern, name)) 
[16:20:18.394]                             next
[16:20:18.394]                           invokeRestart(restart)
[16:20:18.394]                           muffled <- TRUE
[16:20:18.394]                           break
[16:20:18.394]                         }
[16:20:18.394]                       }
[16:20:18.394]                     }
[16:20:18.394]                     invisible(muffled)
[16:20:18.394]                   }
[16:20:18.394]                   muffleCondition(cond)
[16:20:18.394]                 })
[16:20:18.394]             }))
[16:20:18.394]             future::FutureResult(value = ...future.value$value, 
[16:20:18.394]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:18.394]                   ...future.rng), globalenv = if (FALSE) 
[16:20:18.394]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:18.394]                     ...future.globalenv.names))
[16:20:18.394]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:18.394]         }, condition = base::local({
[16:20:18.394]             c <- base::c
[16:20:18.394]             inherits <- base::inherits
[16:20:18.394]             invokeRestart <- base::invokeRestart
[16:20:18.394]             length <- base::length
[16:20:18.394]             list <- base::list
[16:20:18.394]             seq.int <- base::seq.int
[16:20:18.394]             signalCondition <- base::signalCondition
[16:20:18.394]             sys.calls <- base::sys.calls
[16:20:18.394]             `[[` <- base::`[[`
[16:20:18.394]             `+` <- base::`+`
[16:20:18.394]             `<<-` <- base::`<<-`
[16:20:18.394]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:18.394]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:18.394]                   3L)]
[16:20:18.394]             }
[16:20:18.394]             function(cond) {
[16:20:18.394]                 is_error <- inherits(cond, "error")
[16:20:18.394]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:18.394]                   NULL)
[16:20:18.394]                 if (is_error) {
[16:20:18.394]                   sessionInformation <- function() {
[16:20:18.394]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:18.394]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:18.394]                       search = base::search(), system = base::Sys.info())
[16:20:18.394]                   }
[16:20:18.394]                   ...future.conditions[[length(...future.conditions) + 
[16:20:18.394]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:18.394]                     cond$call), session = sessionInformation(), 
[16:20:18.394]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:18.394]                   signalCondition(cond)
[16:20:18.394]                 }
[16:20:18.394]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:18.394]                 "immediateCondition"))) {
[16:20:18.394]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:18.394]                   ...future.conditions[[length(...future.conditions) + 
[16:20:18.394]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:18.394]                   if (TRUE && !signal) {
[16:20:18.394]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:18.394]                     {
[16:20:18.394]                       inherits <- base::inherits
[16:20:18.394]                       invokeRestart <- base::invokeRestart
[16:20:18.394]                       is.null <- base::is.null
[16:20:18.394]                       muffled <- FALSE
[16:20:18.394]                       if (inherits(cond, "message")) {
[16:20:18.394]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:18.394]                         if (muffled) 
[16:20:18.394]                           invokeRestart("muffleMessage")
[16:20:18.394]                       }
[16:20:18.394]                       else if (inherits(cond, "warning")) {
[16:20:18.394]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:18.394]                         if (muffled) 
[16:20:18.394]                           invokeRestart("muffleWarning")
[16:20:18.394]                       }
[16:20:18.394]                       else if (inherits(cond, "condition")) {
[16:20:18.394]                         if (!is.null(pattern)) {
[16:20:18.394]                           computeRestarts <- base::computeRestarts
[16:20:18.394]                           grepl <- base::grepl
[16:20:18.394]                           restarts <- computeRestarts(cond)
[16:20:18.394]                           for (restart in restarts) {
[16:20:18.394]                             name <- restart$name
[16:20:18.394]                             if (is.null(name)) 
[16:20:18.394]                               next
[16:20:18.394]                             if (!grepl(pattern, name)) 
[16:20:18.394]                               next
[16:20:18.394]                             invokeRestart(restart)
[16:20:18.394]                             muffled <- TRUE
[16:20:18.394]                             break
[16:20:18.394]                           }
[16:20:18.394]                         }
[16:20:18.394]                       }
[16:20:18.394]                       invisible(muffled)
[16:20:18.394]                     }
[16:20:18.394]                     muffleCondition(cond, pattern = "^muffle")
[16:20:18.394]                   }
[16:20:18.394]                 }
[16:20:18.394]                 else {
[16:20:18.394]                   if (TRUE) {
[16:20:18.394]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:18.394]                     {
[16:20:18.394]                       inherits <- base::inherits
[16:20:18.394]                       invokeRestart <- base::invokeRestart
[16:20:18.394]                       is.null <- base::is.null
[16:20:18.394]                       muffled <- FALSE
[16:20:18.394]                       if (inherits(cond, "message")) {
[16:20:18.394]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:18.394]                         if (muffled) 
[16:20:18.394]                           invokeRestart("muffleMessage")
[16:20:18.394]                       }
[16:20:18.394]                       else if (inherits(cond, "warning")) {
[16:20:18.394]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:18.394]                         if (muffled) 
[16:20:18.394]                           invokeRestart("muffleWarning")
[16:20:18.394]                       }
[16:20:18.394]                       else if (inherits(cond, "condition")) {
[16:20:18.394]                         if (!is.null(pattern)) {
[16:20:18.394]                           computeRestarts <- base::computeRestarts
[16:20:18.394]                           grepl <- base::grepl
[16:20:18.394]                           restarts <- computeRestarts(cond)
[16:20:18.394]                           for (restart in restarts) {
[16:20:18.394]                             name <- restart$name
[16:20:18.394]                             if (is.null(name)) 
[16:20:18.394]                               next
[16:20:18.394]                             if (!grepl(pattern, name)) 
[16:20:18.394]                               next
[16:20:18.394]                             invokeRestart(restart)
[16:20:18.394]                             muffled <- TRUE
[16:20:18.394]                             break
[16:20:18.394]                           }
[16:20:18.394]                         }
[16:20:18.394]                       }
[16:20:18.394]                       invisible(muffled)
[16:20:18.394]                     }
[16:20:18.394]                     muffleCondition(cond, pattern = "^muffle")
[16:20:18.394]                   }
[16:20:18.394]                 }
[16:20:18.394]             }
[16:20:18.394]         }))
[16:20:18.394]     }, error = function(ex) {
[16:20:18.394]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:18.394]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:18.394]                 ...future.rng), started = ...future.startTime, 
[16:20:18.394]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:18.394]             version = "1.8"), class = "FutureResult")
[16:20:18.394]     }, finally = {
[16:20:18.394]         if (!identical(...future.workdir, getwd())) 
[16:20:18.394]             setwd(...future.workdir)
[16:20:18.394]         {
[16:20:18.394]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:18.394]                 ...future.oldOptions$nwarnings <- NULL
[16:20:18.394]             }
[16:20:18.394]             base::options(...future.oldOptions)
[16:20:18.394]             if (.Platform$OS.type == "windows") {
[16:20:18.394]                 old_names <- names(...future.oldEnvVars)
[16:20:18.394]                 envs <- base::Sys.getenv()
[16:20:18.394]                 names <- names(envs)
[16:20:18.394]                 common <- intersect(names, old_names)
[16:20:18.394]                 added <- setdiff(names, old_names)
[16:20:18.394]                 removed <- setdiff(old_names, names)
[16:20:18.394]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:18.394]                   envs[common]]
[16:20:18.394]                 NAMES <- toupper(changed)
[16:20:18.394]                 args <- list()
[16:20:18.394]                 for (kk in seq_along(NAMES)) {
[16:20:18.394]                   name <- changed[[kk]]
[16:20:18.394]                   NAME <- NAMES[[kk]]
[16:20:18.394]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:18.394]                     next
[16:20:18.394]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:18.394]                 }
[16:20:18.394]                 NAMES <- toupper(added)
[16:20:18.394]                 for (kk in seq_along(NAMES)) {
[16:20:18.394]                   name <- added[[kk]]
[16:20:18.394]                   NAME <- NAMES[[kk]]
[16:20:18.394]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:18.394]                     next
[16:20:18.394]                   args[[name]] <- ""
[16:20:18.394]                 }
[16:20:18.394]                 NAMES <- toupper(removed)
[16:20:18.394]                 for (kk in seq_along(NAMES)) {
[16:20:18.394]                   name <- removed[[kk]]
[16:20:18.394]                   NAME <- NAMES[[kk]]
[16:20:18.394]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:18.394]                     next
[16:20:18.394]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:18.394]                 }
[16:20:18.394]                 if (length(args) > 0) 
[16:20:18.394]                   base::do.call(base::Sys.setenv, args = args)
[16:20:18.394]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:18.394]             }
[16:20:18.394]             else {
[16:20:18.394]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:18.394]             }
[16:20:18.394]             {
[16:20:18.394]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:18.394]                   0L) {
[16:20:18.394]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:18.394]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:18.394]                   base::options(opts)
[16:20:18.394]                 }
[16:20:18.394]                 {
[16:20:18.394]                   {
[16:20:18.394]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:18.394]                     NULL
[16:20:18.394]                   }
[16:20:18.394]                   options(future.plan = NULL)
[16:20:18.394]                   if (is.na(NA_character_)) 
[16:20:18.394]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:18.394]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:18.394]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:18.394]                     .init = FALSE)
[16:20:18.394]                 }
[16:20:18.394]             }
[16:20:18.394]         }
[16:20:18.394]     })
[16:20:18.394]     if (TRUE) {
[16:20:18.394]         base::sink(type = "output", split = FALSE)
[16:20:18.394]         if (TRUE) {
[16:20:18.394]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:18.394]         }
[16:20:18.394]         else {
[16:20:18.394]             ...future.result["stdout"] <- base::list(NULL)
[16:20:18.394]         }
[16:20:18.394]         base::close(...future.stdout)
[16:20:18.394]         ...future.stdout <- NULL
[16:20:18.394]     }
[16:20:18.394]     ...future.result$conditions <- ...future.conditions
[16:20:18.394]     ...future.result$finished <- base::Sys.time()
[16:20:18.394]     ...future.result
[16:20:18.394] }
[16:20:18.396] Exporting 2 global objects (112 bytes) to cluster node #1 ...
[16:20:18.396] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[16:20:18.397] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[16:20:18.397] Exporting ‘y’ (56 bytes) to cluster node #1 ...
[16:20:18.397] Exporting ‘y’ (56 bytes) to cluster node #1 ... DONE
[16:20:18.397] Exporting 2 global objects (112 bytes) to cluster node #1 ... DONE
[16:20:18.398] MultisessionFuture started
[16:20:18.398] - Launch lazy future ... done
[16:20:18.398] run() for ‘MultisessionFuture’ ... done
[16:20:18.398] result() for ClusterFuture ...
[16:20:18.398] receiveMessageFromWorker() for ClusterFuture ...
[16:20:18.398] - Validating connection of MultisessionFuture
[16:20:18.400] - received message: FutureResult
[16:20:18.400] - Received FutureResult
[16:20:18.400] - Erased future from FutureRegistry
[16:20:18.400] result() for ClusterFuture ...
[16:20:18.400] - result already collected: FutureResult
[16:20:18.400] result() for ClusterFuture ... done
[16:20:18.401] signalConditions() ...
[16:20:18.401]  - include = ‘immediateCondition’
[16:20:18.401]  - exclude = 
[16:20:18.401]  - resignal = FALSE
[16:20:18.401]  - Number of conditions: 1
[16:20:18.401] signalConditions() ... done
[16:20:18.401] receiveMessageFromWorker() for ClusterFuture ... done
[16:20:18.401] result() for ClusterFuture ... done
[16:20:18.401] result() for ClusterFuture ...
[16:20:18.401] - result already collected: FutureResult
[16:20:18.401] result() for ClusterFuture ... done
[16:20:18.401] signalConditions() ...
[16:20:18.402]  - include = ‘immediateCondition’
[16:20:18.402]  - exclude = 
[16:20:18.402]  - resignal = FALSE
[16:20:18.402]  - Number of conditions: 1
[16:20:18.402] signalConditions() ... done
[16:20:18.402] Future state: ‘finished’
[16:20:18.402] result() for ClusterFuture ...
[16:20:18.402] - result already collected: FutureResult
[16:20:18.402] result() for ClusterFuture ... done
[16:20:18.402] signalConditions() ...
[16:20:18.402]  - include = ‘condition’
[16:20:18.403]  - exclude = ‘immediateCondition’
[16:20:18.403]  - resignal = TRUE
[16:20:18.403]  - Number of conditions: 1
[16:20:18.403]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:20:18.403] signalConditions() ... done
Error in withCallingHandlers({ : '...' used in an incorrect context
[1] "Error in withCallingHandlers({ : '...' used in an incorrect context\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        sum(x, y, ...)    }}, immediateCondition = function(cond) {    sendCondition <- ...future.makeSendCondition()    sendCondition(cond)    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): '...' used in an incorrect context>
** Sum function 'E' with plan('multisession') ...
function (...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    globals <- globals::globalsByName("...", envir = environment())
    f <- future({
        fcn <- function() sum(...)
        fcn()
    }, envir = parent.frame(), globals = globals)
    y <- value(f)
    y
}
<bytecode: 0x55ed01add168>
Arguments '...' exists: TRUE
[16:20:18.404] getGlobalsAndPackages() ...
[16:20:18.404] - globals passed as-is: [1] ‘...’
[16:20:18.404] Resolving globals: FALSE
[16:20:18.404] Tweak future expression to call with '...' arguments ...
[16:20:18.404] {
[16:20:18.404]     do.call(function(...) {
[16:20:18.404]         fcn <- function() sum(...)
[16:20:18.404]         fcn()
[16:20:18.404]     }, args = future.call.arguments)
[16:20:18.404] }
[16:20:18.404] Tweak future expression to call with '...' arguments ... DONE
[16:20:18.405] The total size of the 1 globals is 112 bytes (112 bytes)
[16:20:18.405] The total size of the 1 globals exported for future expression (‘{; fcn <- function() sum(...); fcn(); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘future.call.arguments’ (112 bytes of class ‘list’)
[16:20:18.405] - globals: [1] ‘future.call.arguments’
[16:20:18.405] 
[16:20:18.406] getGlobalsAndPackages() ... DONE
[16:20:18.406] run() for ‘Future’ ...
[16:20:18.406] - state: ‘created’
[16:20:18.406] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:20:18.420] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:18.421] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:20:18.421]   - Field: ‘node’
[16:20:18.421]   - Field: ‘label’
[16:20:18.421]   - Field: ‘local’
[16:20:18.421]   - Field: ‘owner’
[16:20:18.421]   - Field: ‘envir’
[16:20:18.421]   - Field: ‘workers’
[16:20:18.421]   - Field: ‘packages’
[16:20:18.421]   - Field: ‘gc’
[16:20:18.421]   - Field: ‘conditions’
[16:20:18.422]   - Field: ‘persistent’
[16:20:18.422]   - Field: ‘expr’
[16:20:18.422]   - Field: ‘uuid’
[16:20:18.422]   - Field: ‘seed’
[16:20:18.422]   - Field: ‘version’
[16:20:18.422]   - Field: ‘result’
[16:20:18.422]   - Field: ‘asynchronous’
[16:20:18.422]   - Field: ‘calls’
[16:20:18.422]   - Field: ‘globals’
[16:20:18.422]   - Field: ‘stdout’
[16:20:18.422]   - Field: ‘earlySignal’
[16:20:18.423]   - Field: ‘lazy’
[16:20:18.423]   - Field: ‘state’
[16:20:18.423] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:20:18.423] - Launch lazy future ...
[16:20:18.423] Packages needed by the future expression (n = 0): <none>
[16:20:18.423] Packages needed by future strategies (n = 0): <none>
[16:20:18.424] {
[16:20:18.424]     {
[16:20:18.424]         {
[16:20:18.424]             ...future.startTime <- base::Sys.time()
[16:20:18.424]             {
[16:20:18.424]                 {
[16:20:18.424]                   {
[16:20:18.424]                     {
[16:20:18.424]                       base::local({
[16:20:18.424]                         has_future <- base::requireNamespace("future", 
[16:20:18.424]                           quietly = TRUE)
[16:20:18.424]                         if (has_future) {
[16:20:18.424]                           ns <- base::getNamespace("future")
[16:20:18.424]                           version <- ns[[".package"]][["version"]]
[16:20:18.424]                           if (is.null(version)) 
[16:20:18.424]                             version <- utils::packageVersion("future")
[16:20:18.424]                         }
[16:20:18.424]                         else {
[16:20:18.424]                           version <- NULL
[16:20:18.424]                         }
[16:20:18.424]                         if (!has_future || version < "1.8.0") {
[16:20:18.424]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:18.424]                             "", base::R.version$version.string), 
[16:20:18.424]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:18.424]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:18.424]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:18.424]                               "release", "version")], collapse = " "), 
[16:20:18.424]                             hostname = base::Sys.info()[["nodename"]])
[16:20:18.424]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:18.424]                             info)
[16:20:18.424]                           info <- base::paste(info, collapse = "; ")
[16:20:18.424]                           if (!has_future) {
[16:20:18.424]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:18.424]                               info)
[16:20:18.424]                           }
[16:20:18.424]                           else {
[16:20:18.424]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:18.424]                               info, version)
[16:20:18.424]                           }
[16:20:18.424]                           base::stop(msg)
[16:20:18.424]                         }
[16:20:18.424]                       })
[16:20:18.424]                     }
[16:20:18.424]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:18.424]                     base::options(mc.cores = 1L)
[16:20:18.424]                   }
[16:20:18.424]                   ...future.strategy.old <- future::plan("list")
[16:20:18.424]                   options(future.plan = NULL)
[16:20:18.424]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:18.424]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:18.424]                 }
[16:20:18.424]                 ...future.workdir <- getwd()
[16:20:18.424]             }
[16:20:18.424]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:18.424]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:18.424]         }
[16:20:18.424]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:18.424]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:18.424]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:18.424]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:18.424]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:18.424]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:18.424]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:18.424]             base::names(...future.oldOptions))
[16:20:18.424]     }
[16:20:18.424]     if (FALSE) {
[16:20:18.424]     }
[16:20:18.424]     else {
[16:20:18.424]         if (TRUE) {
[16:20:18.424]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:18.424]                 open = "w")
[16:20:18.424]         }
[16:20:18.424]         else {
[16:20:18.424]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:18.424]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:18.424]         }
[16:20:18.424]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:18.424]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:18.424]             base::sink(type = "output", split = FALSE)
[16:20:18.424]             base::close(...future.stdout)
[16:20:18.424]         }, add = TRUE)
[16:20:18.424]     }
[16:20:18.424]     ...future.frame <- base::sys.nframe()
[16:20:18.424]     ...future.conditions <- base::list()
[16:20:18.424]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:18.424]     if (FALSE) {
[16:20:18.424]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:18.424]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:18.424]     }
[16:20:18.424]     ...future.result <- base::tryCatch({
[16:20:18.424]         base::withCallingHandlers({
[16:20:18.424]             ...future.value <- base::withVisible(base::local({
[16:20:18.424]                 ...future.makeSendCondition <- base::local({
[16:20:18.424]                   sendCondition <- NULL
[16:20:18.424]                   function(frame = 1L) {
[16:20:18.424]                     if (is.function(sendCondition)) 
[16:20:18.424]                       return(sendCondition)
[16:20:18.424]                     ns <- getNamespace("parallel")
[16:20:18.424]                     if (exists("sendData", mode = "function", 
[16:20:18.424]                       envir = ns)) {
[16:20:18.424]                       parallel_sendData <- get("sendData", mode = "function", 
[16:20:18.424]                         envir = ns)
[16:20:18.424]                       envir <- sys.frame(frame)
[16:20:18.424]                       master <- NULL
[16:20:18.424]                       while (!identical(envir, .GlobalEnv) && 
[16:20:18.424]                         !identical(envir, emptyenv())) {
[16:20:18.424]                         if (exists("master", mode = "list", envir = envir, 
[16:20:18.424]                           inherits = FALSE)) {
[16:20:18.424]                           master <- get("master", mode = "list", 
[16:20:18.424]                             envir = envir, inherits = FALSE)
[16:20:18.424]                           if (inherits(master, c("SOCKnode", 
[16:20:18.424]                             "SOCK0node"))) {
[16:20:18.424]                             sendCondition <<- function(cond) {
[16:20:18.424]                               data <- list(type = "VALUE", value = cond, 
[16:20:18.424]                                 success = TRUE)
[16:20:18.424]                               parallel_sendData(master, data)
[16:20:18.424]                             }
[16:20:18.424]                             return(sendCondition)
[16:20:18.424]                           }
[16:20:18.424]                         }
[16:20:18.424]                         frame <- frame + 1L
[16:20:18.424]                         envir <- sys.frame(frame)
[16:20:18.424]                       }
[16:20:18.424]                     }
[16:20:18.424]                     sendCondition <<- function(cond) NULL
[16:20:18.424]                   }
[16:20:18.424]                 })
[16:20:18.424]                 withCallingHandlers({
[16:20:18.424]                   {
[16:20:18.424]                     do.call(function(...) {
[16:20:18.424]                       fcn <- function() sum(...)
[16:20:18.424]                       fcn()
[16:20:18.424]                     }, args = future.call.arguments)
[16:20:18.424]                   }
[16:20:18.424]                 }, immediateCondition = function(cond) {
[16:20:18.424]                   sendCondition <- ...future.makeSendCondition()
[16:20:18.424]                   sendCondition(cond)
[16:20:18.424]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:18.424]                   {
[16:20:18.424]                     inherits <- base::inherits
[16:20:18.424]                     invokeRestart <- base::invokeRestart
[16:20:18.424]                     is.null <- base::is.null
[16:20:18.424]                     muffled <- FALSE
[16:20:18.424]                     if (inherits(cond, "message")) {
[16:20:18.424]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:18.424]                       if (muffled) 
[16:20:18.424]                         invokeRestart("muffleMessage")
[16:20:18.424]                     }
[16:20:18.424]                     else if (inherits(cond, "warning")) {
[16:20:18.424]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:18.424]                       if (muffled) 
[16:20:18.424]                         invokeRestart("muffleWarning")
[16:20:18.424]                     }
[16:20:18.424]                     else if (inherits(cond, "condition")) {
[16:20:18.424]                       if (!is.null(pattern)) {
[16:20:18.424]                         computeRestarts <- base::computeRestarts
[16:20:18.424]                         grepl <- base::grepl
[16:20:18.424]                         restarts <- computeRestarts(cond)
[16:20:18.424]                         for (restart in restarts) {
[16:20:18.424]                           name <- restart$name
[16:20:18.424]                           if (is.null(name)) 
[16:20:18.424]                             next
[16:20:18.424]                           if (!grepl(pattern, name)) 
[16:20:18.424]                             next
[16:20:18.424]                           invokeRestart(restart)
[16:20:18.424]                           muffled <- TRUE
[16:20:18.424]                           break
[16:20:18.424]                         }
[16:20:18.424]                       }
[16:20:18.424]                     }
[16:20:18.424]                     invisible(muffled)
[16:20:18.424]                   }
[16:20:18.424]                   muffleCondition(cond)
[16:20:18.424]                 })
[16:20:18.424]             }))
[16:20:18.424]             future::FutureResult(value = ...future.value$value, 
[16:20:18.424]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:18.424]                   ...future.rng), globalenv = if (FALSE) 
[16:20:18.424]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:18.424]                     ...future.globalenv.names))
[16:20:18.424]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:18.424]         }, condition = base::local({
[16:20:18.424]             c <- base::c
[16:20:18.424]             inherits <- base::inherits
[16:20:18.424]             invokeRestart <- base::invokeRestart
[16:20:18.424]             length <- base::length
[16:20:18.424]             list <- base::list
[16:20:18.424]             seq.int <- base::seq.int
[16:20:18.424]             signalCondition <- base::signalCondition
[16:20:18.424]             sys.calls <- base::sys.calls
[16:20:18.424]             `[[` <- base::`[[`
[16:20:18.424]             `+` <- base::`+`
[16:20:18.424]             `<<-` <- base::`<<-`
[16:20:18.424]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:18.424]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:18.424]                   3L)]
[16:20:18.424]             }
[16:20:18.424]             function(cond) {
[16:20:18.424]                 is_error <- inherits(cond, "error")
[16:20:18.424]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:18.424]                   NULL)
[16:20:18.424]                 if (is_error) {
[16:20:18.424]                   sessionInformation <- function() {
[16:20:18.424]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:18.424]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:18.424]                       search = base::search(), system = base::Sys.info())
[16:20:18.424]                   }
[16:20:18.424]                   ...future.conditions[[length(...future.conditions) + 
[16:20:18.424]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:18.424]                     cond$call), session = sessionInformation(), 
[16:20:18.424]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:18.424]                   signalCondition(cond)
[16:20:18.424]                 }
[16:20:18.424]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:18.424]                 "immediateCondition"))) {
[16:20:18.424]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:18.424]                   ...future.conditions[[length(...future.conditions) + 
[16:20:18.424]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:18.424]                   if (TRUE && !signal) {
[16:20:18.424]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:18.424]                     {
[16:20:18.424]                       inherits <- base::inherits
[16:20:18.424]                       invokeRestart <- base::invokeRestart
[16:20:18.424]                       is.null <- base::is.null
[16:20:18.424]                       muffled <- FALSE
[16:20:18.424]                       if (inherits(cond, "message")) {
[16:20:18.424]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:18.424]                         if (muffled) 
[16:20:18.424]                           invokeRestart("muffleMessage")
[16:20:18.424]                       }
[16:20:18.424]                       else if (inherits(cond, "warning")) {
[16:20:18.424]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:18.424]                         if (muffled) 
[16:20:18.424]                           invokeRestart("muffleWarning")
[16:20:18.424]                       }
[16:20:18.424]                       else if (inherits(cond, "condition")) {
[16:20:18.424]                         if (!is.null(pattern)) {
[16:20:18.424]                           computeRestarts <- base::computeRestarts
[16:20:18.424]                           grepl <- base::grepl
[16:20:18.424]                           restarts <- computeRestarts(cond)
[16:20:18.424]                           for (restart in restarts) {
[16:20:18.424]                             name <- restart$name
[16:20:18.424]                             if (is.null(name)) 
[16:20:18.424]                               next
[16:20:18.424]                             if (!grepl(pattern, name)) 
[16:20:18.424]                               next
[16:20:18.424]                             invokeRestart(restart)
[16:20:18.424]                             muffled <- TRUE
[16:20:18.424]                             break
[16:20:18.424]                           }
[16:20:18.424]                         }
[16:20:18.424]                       }
[16:20:18.424]                       invisible(muffled)
[16:20:18.424]                     }
[16:20:18.424]                     muffleCondition(cond, pattern = "^muffle")
[16:20:18.424]                   }
[16:20:18.424]                 }
[16:20:18.424]                 else {
[16:20:18.424]                   if (TRUE) {
[16:20:18.424]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:18.424]                     {
[16:20:18.424]                       inherits <- base::inherits
[16:20:18.424]                       invokeRestart <- base::invokeRestart
[16:20:18.424]                       is.null <- base::is.null
[16:20:18.424]                       muffled <- FALSE
[16:20:18.424]                       if (inherits(cond, "message")) {
[16:20:18.424]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:18.424]                         if (muffled) 
[16:20:18.424]                           invokeRestart("muffleMessage")
[16:20:18.424]                       }
[16:20:18.424]                       else if (inherits(cond, "warning")) {
[16:20:18.424]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:18.424]                         if (muffled) 
[16:20:18.424]                           invokeRestart("muffleWarning")
[16:20:18.424]                       }
[16:20:18.424]                       else if (inherits(cond, "condition")) {
[16:20:18.424]                         if (!is.null(pattern)) {
[16:20:18.424]                           computeRestarts <- base::computeRestarts
[16:20:18.424]                           grepl <- base::grepl
[16:20:18.424]                           restarts <- computeRestarts(cond)
[16:20:18.424]                           for (restart in restarts) {
[16:20:18.424]                             name <- restart$name
[16:20:18.424]                             if (is.null(name)) 
[16:20:18.424]                               next
[16:20:18.424]                             if (!grepl(pattern, name)) 
[16:20:18.424]                               next
[16:20:18.424]                             invokeRestart(restart)
[16:20:18.424]                             muffled <- TRUE
[16:20:18.424]                             break
[16:20:18.424]                           }
[16:20:18.424]                         }
[16:20:18.424]                       }
[16:20:18.424]                       invisible(muffled)
[16:20:18.424]                     }
[16:20:18.424]                     muffleCondition(cond, pattern = "^muffle")
[16:20:18.424]                   }
[16:20:18.424]                 }
[16:20:18.424]             }
[16:20:18.424]         }))
[16:20:18.424]     }, error = function(ex) {
[16:20:18.424]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:18.424]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:18.424]                 ...future.rng), started = ...future.startTime, 
[16:20:18.424]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:18.424]             version = "1.8"), class = "FutureResult")
[16:20:18.424]     }, finally = {
[16:20:18.424]         if (!identical(...future.workdir, getwd())) 
[16:20:18.424]             setwd(...future.workdir)
[16:20:18.424]         {
[16:20:18.424]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:18.424]                 ...future.oldOptions$nwarnings <- NULL
[16:20:18.424]             }
[16:20:18.424]             base::options(...future.oldOptions)
[16:20:18.424]             if (.Platform$OS.type == "windows") {
[16:20:18.424]                 old_names <- names(...future.oldEnvVars)
[16:20:18.424]                 envs <- base::Sys.getenv()
[16:20:18.424]                 names <- names(envs)
[16:20:18.424]                 common <- intersect(names, old_names)
[16:20:18.424]                 added <- setdiff(names, old_names)
[16:20:18.424]                 removed <- setdiff(old_names, names)
[16:20:18.424]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:18.424]                   envs[common]]
[16:20:18.424]                 NAMES <- toupper(changed)
[16:20:18.424]                 args <- list()
[16:20:18.424]                 for (kk in seq_along(NAMES)) {
[16:20:18.424]                   name <- changed[[kk]]
[16:20:18.424]                   NAME <- NAMES[[kk]]
[16:20:18.424]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:18.424]                     next
[16:20:18.424]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:18.424]                 }
[16:20:18.424]                 NAMES <- toupper(added)
[16:20:18.424]                 for (kk in seq_along(NAMES)) {
[16:20:18.424]                   name <- added[[kk]]
[16:20:18.424]                   NAME <- NAMES[[kk]]
[16:20:18.424]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:18.424]                     next
[16:20:18.424]                   args[[name]] <- ""
[16:20:18.424]                 }
[16:20:18.424]                 NAMES <- toupper(removed)
[16:20:18.424]                 for (kk in seq_along(NAMES)) {
[16:20:18.424]                   name <- removed[[kk]]
[16:20:18.424]                   NAME <- NAMES[[kk]]
[16:20:18.424]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:18.424]                     next
[16:20:18.424]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:18.424]                 }
[16:20:18.424]                 if (length(args) > 0) 
[16:20:18.424]                   base::do.call(base::Sys.setenv, args = args)
[16:20:18.424]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:18.424]             }
[16:20:18.424]             else {
[16:20:18.424]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:18.424]             }
[16:20:18.424]             {
[16:20:18.424]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:18.424]                   0L) {
[16:20:18.424]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:18.424]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:18.424]                   base::options(opts)
[16:20:18.424]                 }
[16:20:18.424]                 {
[16:20:18.424]                   {
[16:20:18.424]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:18.424]                     NULL
[16:20:18.424]                   }
[16:20:18.424]                   options(future.plan = NULL)
[16:20:18.424]                   if (is.na(NA_character_)) 
[16:20:18.424]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:18.424]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:18.424]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:18.424]                     .init = FALSE)
[16:20:18.424]                 }
[16:20:18.424]             }
[16:20:18.424]         }
[16:20:18.424]     })
[16:20:18.424]     if (TRUE) {
[16:20:18.424]         base::sink(type = "output", split = FALSE)
[16:20:18.424]         if (TRUE) {
[16:20:18.424]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:18.424]         }
[16:20:18.424]         else {
[16:20:18.424]             ...future.result["stdout"] <- base::list(NULL)
[16:20:18.424]         }
[16:20:18.424]         base::close(...future.stdout)
[16:20:18.424]         ...future.stdout <- NULL
[16:20:18.424]     }
[16:20:18.424]     ...future.result$conditions <- ...future.conditions
[16:20:18.424]     ...future.result$finished <- base::Sys.time()
[16:20:18.424]     ...future.result
[16:20:18.424] }
[16:20:18.426] Exporting 1 global objects (112 bytes) to cluster node #1 ...
[16:20:18.426] Exporting ‘future.call.arguments’ (112 bytes) to cluster node #1 ...
[16:20:18.427] Exporting ‘future.call.arguments’ (112 bytes) to cluster node #1 ... DONE
[16:20:18.427] Exporting 1 global objects (112 bytes) to cluster node #1 ... DONE
[16:20:18.427] MultisessionFuture started
[16:20:18.427] - Launch lazy future ... done
[16:20:18.428] run() for ‘MultisessionFuture’ ... done
[16:20:18.428] result() for ClusterFuture ...
[16:20:18.428] receiveMessageFromWorker() for ClusterFuture ...
[16:20:18.428] - Validating connection of MultisessionFuture
[16:20:18.429] - received message: FutureResult
[16:20:18.429] - Received FutureResult
[16:20:18.429] - Erased future from FutureRegistry
[16:20:18.429] result() for ClusterFuture ...
[16:20:18.429] - result already collected: FutureResult
[16:20:18.429] result() for ClusterFuture ... done
[16:20:18.430] receiveMessageFromWorker() for ClusterFuture ... done
[16:20:18.430] result() for ClusterFuture ... done
[16:20:18.430] result() for ClusterFuture ...
[16:20:18.430] - result already collected: FutureResult
[16:20:18.430] result() for ClusterFuture ... done
[1] 6
** Sum function 'F' with plan('multisession') ...
function (x, y) 
{
    message("Using '...' in a formula")
    fcn <- function(x, y) {
        z = ~list(...)
        sum(x, y)
    }
    f <- future(fcn(x, y))
    y <- value(f)
    y
}
<bytecode: 0x55ed0036e828>
Using '...' in a formula
[16:20:18.430] getGlobalsAndPackages() ...
[16:20:18.430] Searching for globals...
[16:20:18.433] - globals found: [9] ‘fcn’, ‘x’, ‘y’, ‘{’, ‘=’, ‘~’, ‘list’, ‘...’, ‘sum’
[16:20:18.433] Searching for globals ... DONE
[16:20:18.433] Resolving globals: FALSE
[16:20:18.433] Tweak future expression to call with '...' arguments ...
[16:20:18.434] The total size of the 3 globals is 4.18 KiB (4280 bytes)
[16:20:18.434] The total size of the 3 globals exported for future expression (‘fcn(x, y)’) is 4.18 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘fcn’ (4.07 KiB of class ‘function’), ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[16:20:18.434] - globals: [3] ‘fcn’, ‘x’, ‘y’
[16:20:18.434] 
[16:20:18.435] getGlobalsAndPackages() ... DONE
[16:20:18.435] run() for ‘Future’ ...
[16:20:18.435] - state: ‘created’
[16:20:18.435] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:20:18.449] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:18.449] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:20:18.449]   - Field: ‘node’
[16:20:18.449]   - Field: ‘label’
[16:20:18.449]   - Field: ‘local’
[16:20:18.449]   - Field: ‘owner’
[16:20:18.449]   - Field: ‘envir’
[16:20:18.449]   - Field: ‘workers’
[16:20:18.449]   - Field: ‘packages’
[16:20:18.449]   - Field: ‘gc’
[16:20:18.450]   - Field: ‘conditions’
[16:20:18.450]   - Field: ‘persistent’
[16:20:18.450]   - Field: ‘expr’
[16:20:18.450]   - Field: ‘uuid’
[16:20:18.450]   - Field: ‘seed’
[16:20:18.450]   - Field: ‘version’
[16:20:18.450]   - Field: ‘result’
[16:20:18.450]   - Field: ‘asynchronous’
[16:20:18.450]   - Field: ‘calls’
[16:20:18.450]   - Field: ‘globals’
[16:20:18.450]   - Field: ‘stdout’
[16:20:18.451]   - Field: ‘earlySignal’
[16:20:18.451]   - Field: ‘lazy’
[16:20:18.451]   - Field: ‘state’
[16:20:18.451] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:20:18.451] - Launch lazy future ...
[16:20:18.451] Packages needed by the future expression (n = 0): <none>
[16:20:18.451] Packages needed by future strategies (n = 0): <none>
[16:20:18.452] {
[16:20:18.452]     {
[16:20:18.452]         {
[16:20:18.452]             ...future.startTime <- base::Sys.time()
[16:20:18.452]             {
[16:20:18.452]                 {
[16:20:18.452]                   {
[16:20:18.452]                     {
[16:20:18.452]                       base::local({
[16:20:18.452]                         has_future <- base::requireNamespace("future", 
[16:20:18.452]                           quietly = TRUE)
[16:20:18.452]                         if (has_future) {
[16:20:18.452]                           ns <- base::getNamespace("future")
[16:20:18.452]                           version <- ns[[".package"]][["version"]]
[16:20:18.452]                           if (is.null(version)) 
[16:20:18.452]                             version <- utils::packageVersion("future")
[16:20:18.452]                         }
[16:20:18.452]                         else {
[16:20:18.452]                           version <- NULL
[16:20:18.452]                         }
[16:20:18.452]                         if (!has_future || version < "1.8.0") {
[16:20:18.452]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:18.452]                             "", base::R.version$version.string), 
[16:20:18.452]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:18.452]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:18.452]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:18.452]                               "release", "version")], collapse = " "), 
[16:20:18.452]                             hostname = base::Sys.info()[["nodename"]])
[16:20:18.452]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:18.452]                             info)
[16:20:18.452]                           info <- base::paste(info, collapse = "; ")
[16:20:18.452]                           if (!has_future) {
[16:20:18.452]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:18.452]                               info)
[16:20:18.452]                           }
[16:20:18.452]                           else {
[16:20:18.452]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:18.452]                               info, version)
[16:20:18.452]                           }
[16:20:18.452]                           base::stop(msg)
[16:20:18.452]                         }
[16:20:18.452]                       })
[16:20:18.452]                     }
[16:20:18.452]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:18.452]                     base::options(mc.cores = 1L)
[16:20:18.452]                   }
[16:20:18.452]                   ...future.strategy.old <- future::plan("list")
[16:20:18.452]                   options(future.plan = NULL)
[16:20:18.452]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:18.452]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:18.452]                 }
[16:20:18.452]                 ...future.workdir <- getwd()
[16:20:18.452]             }
[16:20:18.452]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:18.452]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:18.452]         }
[16:20:18.452]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:18.452]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:18.452]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:18.452]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:18.452]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:18.452]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:18.452]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:18.452]             base::names(...future.oldOptions))
[16:20:18.452]     }
[16:20:18.452]     if (FALSE) {
[16:20:18.452]     }
[16:20:18.452]     else {
[16:20:18.452]         if (TRUE) {
[16:20:18.452]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:18.452]                 open = "w")
[16:20:18.452]         }
[16:20:18.452]         else {
[16:20:18.452]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:18.452]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:18.452]         }
[16:20:18.452]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:18.452]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:18.452]             base::sink(type = "output", split = FALSE)
[16:20:18.452]             base::close(...future.stdout)
[16:20:18.452]         }, add = TRUE)
[16:20:18.452]     }
[16:20:18.452]     ...future.frame <- base::sys.nframe()
[16:20:18.452]     ...future.conditions <- base::list()
[16:20:18.452]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:18.452]     if (FALSE) {
[16:20:18.452]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:18.452]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:18.452]     }
[16:20:18.452]     ...future.result <- base::tryCatch({
[16:20:18.452]         base::withCallingHandlers({
[16:20:18.452]             ...future.value <- base::withVisible(base::local({
[16:20:18.452]                 ...future.makeSendCondition <- base::local({
[16:20:18.452]                   sendCondition <- NULL
[16:20:18.452]                   function(frame = 1L) {
[16:20:18.452]                     if (is.function(sendCondition)) 
[16:20:18.452]                       return(sendCondition)
[16:20:18.452]                     ns <- getNamespace("parallel")
[16:20:18.452]                     if (exists("sendData", mode = "function", 
[16:20:18.452]                       envir = ns)) {
[16:20:18.452]                       parallel_sendData <- get("sendData", mode = "function", 
[16:20:18.452]                         envir = ns)
[16:20:18.452]                       envir <- sys.frame(frame)
[16:20:18.452]                       master <- NULL
[16:20:18.452]                       while (!identical(envir, .GlobalEnv) && 
[16:20:18.452]                         !identical(envir, emptyenv())) {
[16:20:18.452]                         if (exists("master", mode = "list", envir = envir, 
[16:20:18.452]                           inherits = FALSE)) {
[16:20:18.452]                           master <- get("master", mode = "list", 
[16:20:18.452]                             envir = envir, inherits = FALSE)
[16:20:18.452]                           if (inherits(master, c("SOCKnode", 
[16:20:18.452]                             "SOCK0node"))) {
[16:20:18.452]                             sendCondition <<- function(cond) {
[16:20:18.452]                               data <- list(type = "VALUE", value = cond, 
[16:20:18.452]                                 success = TRUE)
[16:20:18.452]                               parallel_sendData(master, data)
[16:20:18.452]                             }
[16:20:18.452]                             return(sendCondition)
[16:20:18.452]                           }
[16:20:18.452]                         }
[16:20:18.452]                         frame <- frame + 1L
[16:20:18.452]                         envir <- sys.frame(frame)
[16:20:18.452]                       }
[16:20:18.452]                     }
[16:20:18.452]                     sendCondition <<- function(cond) NULL
[16:20:18.452]                   }
[16:20:18.452]                 })
[16:20:18.452]                 withCallingHandlers({
[16:20:18.452]                   fcn(x, y)
[16:20:18.452]                 }, immediateCondition = function(cond) {
[16:20:18.452]                   sendCondition <- ...future.makeSendCondition()
[16:20:18.452]                   sendCondition(cond)
[16:20:18.452]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:18.452]                   {
[16:20:18.452]                     inherits <- base::inherits
[16:20:18.452]                     invokeRestart <- base::invokeRestart
[16:20:18.452]                     is.null <- base::is.null
[16:20:18.452]                     muffled <- FALSE
[16:20:18.452]                     if (inherits(cond, "message")) {
[16:20:18.452]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:18.452]                       if (muffled) 
[16:20:18.452]                         invokeRestart("muffleMessage")
[16:20:18.452]                     }
[16:20:18.452]                     else if (inherits(cond, "warning")) {
[16:20:18.452]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:18.452]                       if (muffled) 
[16:20:18.452]                         invokeRestart("muffleWarning")
[16:20:18.452]                     }
[16:20:18.452]                     else if (inherits(cond, "condition")) {
[16:20:18.452]                       if (!is.null(pattern)) {
[16:20:18.452]                         computeRestarts <- base::computeRestarts
[16:20:18.452]                         grepl <- base::grepl
[16:20:18.452]                         restarts <- computeRestarts(cond)
[16:20:18.452]                         for (restart in restarts) {
[16:20:18.452]                           name <- restart$name
[16:20:18.452]                           if (is.null(name)) 
[16:20:18.452]                             next
[16:20:18.452]                           if (!grepl(pattern, name)) 
[16:20:18.452]                             next
[16:20:18.452]                           invokeRestart(restart)
[16:20:18.452]                           muffled <- TRUE
[16:20:18.452]                           break
[16:20:18.452]                         }
[16:20:18.452]                       }
[16:20:18.452]                     }
[16:20:18.452]                     invisible(muffled)
[16:20:18.452]                   }
[16:20:18.452]                   muffleCondition(cond)
[16:20:18.452]                 })
[16:20:18.452]             }))
[16:20:18.452]             future::FutureResult(value = ...future.value$value, 
[16:20:18.452]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:18.452]                   ...future.rng), globalenv = if (FALSE) 
[16:20:18.452]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:18.452]                     ...future.globalenv.names))
[16:20:18.452]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:18.452]         }, condition = base::local({
[16:20:18.452]             c <- base::c
[16:20:18.452]             inherits <- base::inherits
[16:20:18.452]             invokeRestart <- base::invokeRestart
[16:20:18.452]             length <- base::length
[16:20:18.452]             list <- base::list
[16:20:18.452]             seq.int <- base::seq.int
[16:20:18.452]             signalCondition <- base::signalCondition
[16:20:18.452]             sys.calls <- base::sys.calls
[16:20:18.452]             `[[` <- base::`[[`
[16:20:18.452]             `+` <- base::`+`
[16:20:18.452]             `<<-` <- base::`<<-`
[16:20:18.452]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:18.452]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:18.452]                   3L)]
[16:20:18.452]             }
[16:20:18.452]             function(cond) {
[16:20:18.452]                 is_error <- inherits(cond, "error")
[16:20:18.452]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:18.452]                   NULL)
[16:20:18.452]                 if (is_error) {
[16:20:18.452]                   sessionInformation <- function() {
[16:20:18.452]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:18.452]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:18.452]                       search = base::search(), system = base::Sys.info())
[16:20:18.452]                   }
[16:20:18.452]                   ...future.conditions[[length(...future.conditions) + 
[16:20:18.452]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:18.452]                     cond$call), session = sessionInformation(), 
[16:20:18.452]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:18.452]                   signalCondition(cond)
[16:20:18.452]                 }
[16:20:18.452]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:18.452]                 "immediateCondition"))) {
[16:20:18.452]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:18.452]                   ...future.conditions[[length(...future.conditions) + 
[16:20:18.452]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:18.452]                   if (TRUE && !signal) {
[16:20:18.452]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:18.452]                     {
[16:20:18.452]                       inherits <- base::inherits
[16:20:18.452]                       invokeRestart <- base::invokeRestart
[16:20:18.452]                       is.null <- base::is.null
[16:20:18.452]                       muffled <- FALSE
[16:20:18.452]                       if (inherits(cond, "message")) {
[16:20:18.452]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:18.452]                         if (muffled) 
[16:20:18.452]                           invokeRestart("muffleMessage")
[16:20:18.452]                       }
[16:20:18.452]                       else if (inherits(cond, "warning")) {
[16:20:18.452]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:18.452]                         if (muffled) 
[16:20:18.452]                           invokeRestart("muffleWarning")
[16:20:18.452]                       }
[16:20:18.452]                       else if (inherits(cond, "condition")) {
[16:20:18.452]                         if (!is.null(pattern)) {
[16:20:18.452]                           computeRestarts <- base::computeRestarts
[16:20:18.452]                           grepl <- base::grepl
[16:20:18.452]                           restarts <- computeRestarts(cond)
[16:20:18.452]                           for (restart in restarts) {
[16:20:18.452]                             name <- restart$name
[16:20:18.452]                             if (is.null(name)) 
[16:20:18.452]                               next
[16:20:18.452]                             if (!grepl(pattern, name)) 
[16:20:18.452]                               next
[16:20:18.452]                             invokeRestart(restart)
[16:20:18.452]                             muffled <- TRUE
[16:20:18.452]                             break
[16:20:18.452]                           }
[16:20:18.452]                         }
[16:20:18.452]                       }
[16:20:18.452]                       invisible(muffled)
[16:20:18.452]                     }
[16:20:18.452]                     muffleCondition(cond, pattern = "^muffle")
[16:20:18.452]                   }
[16:20:18.452]                 }
[16:20:18.452]                 else {
[16:20:18.452]                   if (TRUE) {
[16:20:18.452]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:18.452]                     {
[16:20:18.452]                       inherits <- base::inherits
[16:20:18.452]                       invokeRestart <- base::invokeRestart
[16:20:18.452]                       is.null <- base::is.null
[16:20:18.452]                       muffled <- FALSE
[16:20:18.452]                       if (inherits(cond, "message")) {
[16:20:18.452]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:18.452]                         if (muffled) 
[16:20:18.452]                           invokeRestart("muffleMessage")
[16:20:18.452]                       }
[16:20:18.452]                       else if (inherits(cond, "warning")) {
[16:20:18.452]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:18.452]                         if (muffled) 
[16:20:18.452]                           invokeRestart("muffleWarning")
[16:20:18.452]                       }
[16:20:18.452]                       else if (inherits(cond, "condition")) {
[16:20:18.452]                         if (!is.null(pattern)) {
[16:20:18.452]                           computeRestarts <- base::computeRestarts
[16:20:18.452]                           grepl <- base::grepl
[16:20:18.452]                           restarts <- computeRestarts(cond)
[16:20:18.452]                           for (restart in restarts) {
[16:20:18.452]                             name <- restart$name
[16:20:18.452]                             if (is.null(name)) 
[16:20:18.452]                               next
[16:20:18.452]                             if (!grepl(pattern, name)) 
[16:20:18.452]                               next
[16:20:18.452]                             invokeRestart(restart)
[16:20:18.452]                             muffled <- TRUE
[16:20:18.452]                             break
[16:20:18.452]                           }
[16:20:18.452]                         }
[16:20:18.452]                       }
[16:20:18.452]                       invisible(muffled)
[16:20:18.452]                     }
[16:20:18.452]                     muffleCondition(cond, pattern = "^muffle")
[16:20:18.452]                   }
[16:20:18.452]                 }
[16:20:18.452]             }
[16:20:18.452]         }))
[16:20:18.452]     }, error = function(ex) {
[16:20:18.452]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:18.452]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:18.452]                 ...future.rng), started = ...future.startTime, 
[16:20:18.452]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:18.452]             version = "1.8"), class = "FutureResult")
[16:20:18.452]     }, finally = {
[16:20:18.452]         if (!identical(...future.workdir, getwd())) 
[16:20:18.452]             setwd(...future.workdir)
[16:20:18.452]         {
[16:20:18.452]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:18.452]                 ...future.oldOptions$nwarnings <- NULL
[16:20:18.452]             }
[16:20:18.452]             base::options(...future.oldOptions)
[16:20:18.452]             if (.Platform$OS.type == "windows") {
[16:20:18.452]                 old_names <- names(...future.oldEnvVars)
[16:20:18.452]                 envs <- base::Sys.getenv()
[16:20:18.452]                 names <- names(envs)
[16:20:18.452]                 common <- intersect(names, old_names)
[16:20:18.452]                 added <- setdiff(names, old_names)
[16:20:18.452]                 removed <- setdiff(old_names, names)
[16:20:18.452]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:18.452]                   envs[common]]
[16:20:18.452]                 NAMES <- toupper(changed)
[16:20:18.452]                 args <- list()
[16:20:18.452]                 for (kk in seq_along(NAMES)) {
[16:20:18.452]                   name <- changed[[kk]]
[16:20:18.452]                   NAME <- NAMES[[kk]]
[16:20:18.452]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:18.452]                     next
[16:20:18.452]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:18.452]                 }
[16:20:18.452]                 NAMES <- toupper(added)
[16:20:18.452]                 for (kk in seq_along(NAMES)) {
[16:20:18.452]                   name <- added[[kk]]
[16:20:18.452]                   NAME <- NAMES[[kk]]
[16:20:18.452]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:18.452]                     next
[16:20:18.452]                   args[[name]] <- ""
[16:20:18.452]                 }
[16:20:18.452]                 NAMES <- toupper(removed)
[16:20:18.452]                 for (kk in seq_along(NAMES)) {
[16:20:18.452]                   name <- removed[[kk]]
[16:20:18.452]                   NAME <- NAMES[[kk]]
[16:20:18.452]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:18.452]                     next
[16:20:18.452]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:18.452]                 }
[16:20:18.452]                 if (length(args) > 0) 
[16:20:18.452]                   base::do.call(base::Sys.setenv, args = args)
[16:20:18.452]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:18.452]             }
[16:20:18.452]             else {
[16:20:18.452]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:18.452]             }
[16:20:18.452]             {
[16:20:18.452]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:18.452]                   0L) {
[16:20:18.452]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:18.452]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:18.452]                   base::options(opts)
[16:20:18.452]                 }
[16:20:18.452]                 {
[16:20:18.452]                   {
[16:20:18.452]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:18.452]                     NULL
[16:20:18.452]                   }
[16:20:18.452]                   options(future.plan = NULL)
[16:20:18.452]                   if (is.na(NA_character_)) 
[16:20:18.452]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:18.452]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:18.452]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:18.452]                     .init = FALSE)
[16:20:18.452]                 }
[16:20:18.452]             }
[16:20:18.452]         }
[16:20:18.452]     })
[16:20:18.452]     if (TRUE) {
[16:20:18.452]         base::sink(type = "output", split = FALSE)
[16:20:18.452]         if (TRUE) {
[16:20:18.452]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:18.452]         }
[16:20:18.452]         else {
[16:20:18.452]             ...future.result["stdout"] <- base::list(NULL)
[16:20:18.452]         }
[16:20:18.452]         base::close(...future.stdout)
[16:20:18.452]         ...future.stdout <- NULL
[16:20:18.452]     }
[16:20:18.452]     ...future.result$conditions <- ...future.conditions
[16:20:18.452]     ...future.result$finished <- base::Sys.time()
[16:20:18.452]     ...future.result
[16:20:18.452] }
[16:20:18.454] Exporting 3 global objects (4.18 KiB) to cluster node #1 ...
[16:20:18.454] Exporting ‘fcn’ (4.07 KiB) to cluster node #1 ...
[16:20:18.455] Exporting ‘fcn’ (4.07 KiB) to cluster node #1 ... DONE
[16:20:18.455] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[16:20:18.455] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[16:20:18.455] Exporting ‘y’ (56 bytes) to cluster node #1 ...
[16:20:18.455] Exporting ‘y’ (56 bytes) to cluster node #1 ... DONE
[16:20:18.456] Exporting 3 global objects (4.18 KiB) to cluster node #1 ... DONE
[16:20:18.456] MultisessionFuture started
[16:20:18.456] - Launch lazy future ... done
[16:20:18.456] run() for ‘MultisessionFuture’ ... done
[16:20:18.456] result() for ClusterFuture ...
[16:20:18.457] receiveMessageFromWorker() for ClusterFuture ...
[16:20:18.457] - Validating connection of MultisessionFuture
[16:20:18.458] - received message: FutureResult
[16:20:18.458] - Received FutureResult
[16:20:18.458] - Erased future from FutureRegistry
[16:20:18.458] result() for ClusterFuture ...
[16:20:18.458] - result already collected: FutureResult
[16:20:18.458] result() for ClusterFuture ... done
[16:20:18.458] receiveMessageFromWorker() for ClusterFuture ... done
[16:20:18.458] result() for ClusterFuture ... done
[16:20:18.458] result() for ClusterFuture ...
[16:20:18.458] - result already collected: FutureResult
[16:20:18.458] result() for ClusterFuture ... done
[1] 6
Testing with 2 cores ... DONE
> 
> message("*** Global argument '...' ... DONE")
*** Global argument '...' ... DONE
> 
> source("incl/end.R")
[16:20:18.459] plan(): Setting new future strategy stack:
[16:20:18.459] List of future strategies:
[16:20:18.459] 1. FutureStrategy:
[16:20:18.459]    - args: function (..., envir = parent.frame())
[16:20:18.459]    - tweaked: FALSE
[16:20:18.459]    - call: future::plan(oplan)
[16:20:18.460] plan(): nbrOfWorkers() = 1
> 
