
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:20:11.997] plan(): Setting new future strategy stack:
[16:20:11.997] List of future strategies:
[16:20:11.997] 1. sequential:
[16:20:11.997]    - args: function (..., envir = parent.frame())
[16:20:11.997]    - tweaked: FALSE
[16:20:11.997]    - call: future::plan("sequential")
[16:20:12.012] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** constant() ...")
*** constant() ...
> 
> ## No global variables
> f <- try(constant(42L), silent = FALSE)
[16:20:12.025] getGlobalsAndPackages() ...
[16:20:12.025] 
[16:20:12.026] - globals: [0] <none>
[16:20:12.026] getGlobalsAndPackages() ... DONE
> print(f)
ConstantFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_EmptyEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘integer’
Early signaling: FALSE
Owner process: 26b5cdac-6e89-839a-65f4-7674a7c240ad
Class: ‘ConstantFuture’, ‘Future’, ‘environment’
> stopifnot(inherits(f, "ConstantFuture"))
> 
> print(resolved(f))
[16:20:12.028] resolved() for ‘ConstantFuture’ ...
[16:20:12.028] - state: ‘finished’
[16:20:12.028] - run: TRUE
[16:20:12.028] - result: ‘FutureResult’
[16:20:12.028] resolved() for ‘ConstantFuture’ ... done
[1] TRUE
> y <- value(f)
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> 
> plan(constant)
[16:20:12.029] plan(): Setting new future strategy stack:
[16:20:12.029] List of future strategies:
[16:20:12.029] 1. constant:
[16:20:12.029]    - args: function (...)
[16:20:12.029]    - tweaked: FALSE
[16:20:12.029]    - call: plan(constant)
[16:20:12.040] plan(): nbrOfWorkers() = 1
> ## No global variables
> f <- try(future(42L), silent = FALSE)
[16:20:12.040] getGlobalsAndPackages() ...
[16:20:12.040] Searching for globals...
[16:20:12.043] 
[16:20:12.043] Searching for globals ... DONE
[16:20:12.043] - globals: [0] <none>
[16:20:12.043] getGlobalsAndPackages() ... DONE
[16:20:12.043] run() for ‘Future’ ...
[16:20:12.043] - state: ‘created’
[16:20:12.044] - Future backend: ‘FutureStrategy’, ‘constant’, ‘uniprocess’, ‘future’, ‘function’
[16:20:12.044] getGlobalsAndPackages() ...
[16:20:12.044] 
[16:20:12.044] - globals: [0] <none>
[16:20:12.044] getGlobalsAndPackages() ... DONE
[16:20:12.044] - Future class: ‘ConstantFuture’, ‘Future’, ‘environment’
[16:20:12.045] - Copy elements of temporary ‘ConstantFuture’ to final ‘Future’ object ...
[16:20:12.045]   - Field: ‘label’
[16:20:12.045]   - Field: ‘local’
[16:20:12.045]   - Field: ‘owner’
[16:20:12.045]   - Field: ‘envir’
[16:20:12.045]   - Field: ‘packages’
[16:20:12.045]   - Field: ‘gc’
[16:20:12.045]   - Field: ‘conditions’
[16:20:12.045]   - Field: ‘expr’
[16:20:12.045]   - Field: ‘uuid’
[16:20:12.045]   - Field: ‘seed’
[16:20:12.046]   - Field: ‘version’
[16:20:12.046]   - Field: ‘result’
[16:20:12.046]   - Field: ‘asynchronous’
[16:20:12.046]   - Field: ‘calls’
[16:20:12.046]   - Field: ‘globals’
[16:20:12.046]   - Field: ‘stdout’
[16:20:12.046]   - Field: ‘earlySignal’
[16:20:12.046]   - Field: ‘lazy’
[16:20:12.046]   - Field: ‘state’
[16:20:12.046] - Copy elements of temporary ‘ConstantFuture’ to final ‘Future’ object ... done
[16:20:12.046] - Launch lazy future ...
[16:20:12.047] - Launch lazy future ... done
[16:20:12.047] run() for ‘ConstantFuture’ ... done
> print(f)
ConstantFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘integer’
Early signaling: FALSE
Owner process: 26b5cdac-6e89-839a-65f4-7674a7c240ad
Class: ‘ConstantFuture’, ‘Future’, ‘environment’
> stopifnot(inherits(f, "ConstantFuture"))
> 
> print(resolved(f))
[16:20:12.047] resolved() for ‘ConstantFuture’ ...
[16:20:12.047] - state: ‘finished’
[16:20:12.047] - run: TRUE
[16:20:12.048] - result: ‘FutureResult’
[16:20:12.048] resolved() for ‘ConstantFuture’ ... done
[1] TRUE
> y <- value(f)
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> message("*** constant() ... DONE")
*** constant() ... DONE
> 
> source("incl/end.R")
[16:20:12.048] plan(): Setting new future strategy stack:
[16:20:12.049] List of future strategies:
[16:20:12.049] 1. FutureStrategy:
[16:20:12.049]    - args: function (..., envir = parent.frame())
[16:20:12.049]    - tweaked: FALSE
[16:20:12.049]    - call: future::plan(oplan)
[16:20:12.049] plan(): nbrOfWorkers() = 1
> 
