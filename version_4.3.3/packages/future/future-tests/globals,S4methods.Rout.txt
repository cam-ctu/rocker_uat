
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:20:57.695] plan(): Setting new future strategy stack:
[16:20:57.696] List of future strategies:
[16:20:57.696] 1. sequential:
[16:20:57.696]    - args: function (..., envir = parent.frame())
[16:20:57.696]    - tweaked: FALSE
[16:20:57.696]    - call: future::plan("sequential")
[16:20:57.709] plan(): nbrOfWorkers() = 1
> library(methods)
> 
> message("*** Globals - S4 methods ...")
*** Globals - S4 methods ...
> 
> setGeneric("my_fcn", function(x) standardGeneric("my_fcn"))
[1] "my_fcn"
> setMethod("my_fcn", signature(x = "numeric"), function(x) { -x })
> org_my_fcn <- my_fcn
> 
> truth <- my_fcn(3)
> 
> for (strategy in supportedStrategies()) {
+   message("Type of future: ", strategy)
+   plan(strategy)
+ 
+   ## Assert that S4 generic function 'my_fcn()' is exported
+   f <- future({ my_fcn }, lazy = TRUE)
+   rm(list = "my_fcn")
+   v <- value(f)
+   print(v)
+   stopifnot(
+     is.function(v),
+     inherits(v, class(org_my_fcn)[1])
+   )
+   my_fcn <- org_my_fcn
+   
+   ## FIXME:
+   ## Just like S3 methods, S4 methods are not picked up
+   ## https://github.com/HenrikBengtsson/future/issues/615
+   f <- future({ my_fcn(3) }, lazy = TRUE)
+   rm(list = "my_fcn")
+   v <- tryCatch(value(f), error = identity)
+   print(v)
+   if (isTRUE(as.logical(Sys.getenv("R_CHECK_IDEAL")))) {
+     if (getOption("future.globals.keepWhere", TRUE)) {
+       stopifnot(identical(v, truth))
+     } else {
+       stopifnot(inherits(v, "error"))
+     }
+   } else if (isTRUE(getOption("future.globals.keepWhere", FALSE))) {
+     stopifnot(identical(v, truth))
+   } else {
+     if (strategy %in% c("sequential", "multicore")) {
+       stopifnot(inherits(v, "error"))
+     } else {
+       stopifnot(identical(v, truth))
+     }
+   }
+   my_fcn <- org_my_fcn
+ }
Type of future: sequential
[16:20:57.741] plan(): Setting new future strategy stack:
[16:20:57.741] List of future strategies:
[16:20:57.741] 1. sequential:
[16:20:57.741]    - args: function (..., envir = parent.frame())
[16:20:57.741]    - tweaked: FALSE
[16:20:57.741]    - call: plan(strategy)
[16:20:57.753] plan(): nbrOfWorkers() = 1
[16:20:57.754] getGlobalsAndPackages() ...
[16:20:57.754] Searching for globals...
[16:20:57.760] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[16:20:57.760] Searching for globals ... DONE
[16:20:57.760] Resolving globals: FALSE
[16:20:57.761] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[16:20:57.762] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[16:20:57.762] - globals: [1] ‘my_fcn’
[16:20:57.762] 
[16:20:57.762] getGlobalsAndPackages() ... DONE
[16:20:57.763] run() for ‘Future’ ...
[16:20:57.763] - state: ‘created’
[16:20:57.763] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:57.764] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:57.764] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:57.764]   - Field: ‘label’
[16:20:57.764]   - Field: ‘local’
[16:20:57.764]   - Field: ‘owner’
[16:20:57.764]   - Field: ‘envir’
[16:20:57.764]   - Field: ‘packages’
[16:20:57.765]   - Field: ‘gc’
[16:20:57.765]   - Field: ‘conditions’
[16:20:57.765]   - Field: ‘expr’
[16:20:57.765]   - Field: ‘uuid’
[16:20:57.765]   - Field: ‘seed’
[16:20:57.765]   - Field: ‘version’
[16:20:57.765]   - Field: ‘result’
[16:20:57.765]   - Field: ‘asynchronous’
[16:20:57.765]   - Field: ‘calls’
[16:20:57.765]   - Field: ‘globals’
[16:20:57.765]   - Field: ‘stdout’
[16:20:57.765]   - Field: ‘earlySignal’
[16:20:57.766]   - Field: ‘lazy’
[16:20:57.766]   - Field: ‘state’
[16:20:57.766] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:57.766] - Launch lazy future ...
[16:20:57.767] Packages needed by the future expression (n = 0): <none>
[16:20:57.767] Packages needed by future strategies (n = 0): <none>
[16:20:57.767] {
[16:20:57.767]     {
[16:20:57.767]         {
[16:20:57.767]             ...future.startTime <- base::Sys.time()
[16:20:57.767]             {
[16:20:57.767]                 {
[16:20:57.767]                   {
[16:20:57.767]                     base::local({
[16:20:57.767]                       has_future <- base::requireNamespace("future", 
[16:20:57.767]                         quietly = TRUE)
[16:20:57.767]                       if (has_future) {
[16:20:57.767]                         ns <- base::getNamespace("future")
[16:20:57.767]                         version <- ns[[".package"]][["version"]]
[16:20:57.767]                         if (is.null(version)) 
[16:20:57.767]                           version <- utils::packageVersion("future")
[16:20:57.767]                       }
[16:20:57.767]                       else {
[16:20:57.767]                         version <- NULL
[16:20:57.767]                       }
[16:20:57.767]                       if (!has_future || version < "1.8.0") {
[16:20:57.767]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:57.767]                           "", base::R.version$version.string), 
[16:20:57.767]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:57.767]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:57.767]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:57.767]                             "release", "version")], collapse = " "), 
[16:20:57.767]                           hostname = base::Sys.info()[["nodename"]])
[16:20:57.767]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:57.767]                           info)
[16:20:57.767]                         info <- base::paste(info, collapse = "; ")
[16:20:57.767]                         if (!has_future) {
[16:20:57.767]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:57.767]                             info)
[16:20:57.767]                         }
[16:20:57.767]                         else {
[16:20:57.767]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:57.767]                             info, version)
[16:20:57.767]                         }
[16:20:57.767]                         base::stop(msg)
[16:20:57.767]                       }
[16:20:57.767]                     })
[16:20:57.767]                   }
[16:20:57.767]                   ...future.strategy.old <- future::plan("list")
[16:20:57.767]                   options(future.plan = NULL)
[16:20:57.767]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:57.767]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:57.767]                 }
[16:20:57.767]                 ...future.workdir <- getwd()
[16:20:57.767]             }
[16:20:57.767]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:57.767]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:57.767]         }
[16:20:57.767]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:57.767]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:57.767]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:57.767]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:57.767]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:57.767]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:57.767]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:57.767]             base::names(...future.oldOptions))
[16:20:57.767]     }
[16:20:57.767]     if (FALSE) {
[16:20:57.767]     }
[16:20:57.767]     else {
[16:20:57.767]         if (TRUE) {
[16:20:57.767]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:57.767]                 open = "w")
[16:20:57.767]         }
[16:20:57.767]         else {
[16:20:57.767]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:57.767]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:57.767]         }
[16:20:57.767]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:57.767]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:57.767]             base::sink(type = "output", split = FALSE)
[16:20:57.767]             base::close(...future.stdout)
[16:20:57.767]         }, add = TRUE)
[16:20:57.767]     }
[16:20:57.767]     ...future.frame <- base::sys.nframe()
[16:20:57.767]     ...future.conditions <- base::list()
[16:20:57.767]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:57.767]     if (FALSE) {
[16:20:57.767]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:57.767]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:57.767]     }
[16:20:57.767]     ...future.result <- base::tryCatch({
[16:20:57.767]         base::withCallingHandlers({
[16:20:57.767]             ...future.value <- base::withVisible(base::local({
[16:20:57.767]                 my_fcn
[16:20:57.767]             }))
[16:20:57.767]             future::FutureResult(value = ...future.value$value, 
[16:20:57.767]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:57.767]                   ...future.rng), globalenv = if (FALSE) 
[16:20:57.767]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:57.767]                     ...future.globalenv.names))
[16:20:57.767]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:57.767]         }, condition = base::local({
[16:20:57.767]             c <- base::c
[16:20:57.767]             inherits <- base::inherits
[16:20:57.767]             invokeRestart <- base::invokeRestart
[16:20:57.767]             length <- base::length
[16:20:57.767]             list <- base::list
[16:20:57.767]             seq.int <- base::seq.int
[16:20:57.767]             signalCondition <- base::signalCondition
[16:20:57.767]             sys.calls <- base::sys.calls
[16:20:57.767]             `[[` <- base::`[[`
[16:20:57.767]             `+` <- base::`+`
[16:20:57.767]             `<<-` <- base::`<<-`
[16:20:57.767]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:57.767]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:57.767]                   3L)]
[16:20:57.767]             }
[16:20:57.767]             function(cond) {
[16:20:57.767]                 is_error <- inherits(cond, "error")
[16:20:57.767]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:57.767]                   NULL)
[16:20:57.767]                 if (is_error) {
[16:20:57.767]                   sessionInformation <- function() {
[16:20:57.767]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:57.767]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:57.767]                       search = base::search(), system = base::Sys.info())
[16:20:57.767]                   }
[16:20:57.767]                   ...future.conditions[[length(...future.conditions) + 
[16:20:57.767]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:57.767]                     cond$call), session = sessionInformation(), 
[16:20:57.767]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:57.767]                   signalCondition(cond)
[16:20:57.767]                 }
[16:20:57.767]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:57.767]                 "immediateCondition"))) {
[16:20:57.767]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:57.767]                   ...future.conditions[[length(...future.conditions) + 
[16:20:57.767]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:57.767]                   if (TRUE && !signal) {
[16:20:57.767]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:57.767]                     {
[16:20:57.767]                       inherits <- base::inherits
[16:20:57.767]                       invokeRestart <- base::invokeRestart
[16:20:57.767]                       is.null <- base::is.null
[16:20:57.767]                       muffled <- FALSE
[16:20:57.767]                       if (inherits(cond, "message")) {
[16:20:57.767]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:57.767]                         if (muffled) 
[16:20:57.767]                           invokeRestart("muffleMessage")
[16:20:57.767]                       }
[16:20:57.767]                       else if (inherits(cond, "warning")) {
[16:20:57.767]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:57.767]                         if (muffled) 
[16:20:57.767]                           invokeRestart("muffleWarning")
[16:20:57.767]                       }
[16:20:57.767]                       else if (inherits(cond, "condition")) {
[16:20:57.767]                         if (!is.null(pattern)) {
[16:20:57.767]                           computeRestarts <- base::computeRestarts
[16:20:57.767]                           grepl <- base::grepl
[16:20:57.767]                           restarts <- computeRestarts(cond)
[16:20:57.767]                           for (restart in restarts) {
[16:20:57.767]                             name <- restart$name
[16:20:57.767]                             if (is.null(name)) 
[16:20:57.767]                               next
[16:20:57.767]                             if (!grepl(pattern, name)) 
[16:20:57.767]                               next
[16:20:57.767]                             invokeRestart(restart)
[16:20:57.767]                             muffled <- TRUE
[16:20:57.767]                             break
[16:20:57.767]                           }
[16:20:57.767]                         }
[16:20:57.767]                       }
[16:20:57.767]                       invisible(muffled)
[16:20:57.767]                     }
[16:20:57.767]                     muffleCondition(cond, pattern = "^muffle")
[16:20:57.767]                   }
[16:20:57.767]                 }
[16:20:57.767]                 else {
[16:20:57.767]                   if (TRUE) {
[16:20:57.767]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:57.767]                     {
[16:20:57.767]                       inherits <- base::inherits
[16:20:57.767]                       invokeRestart <- base::invokeRestart
[16:20:57.767]                       is.null <- base::is.null
[16:20:57.767]                       muffled <- FALSE
[16:20:57.767]                       if (inherits(cond, "message")) {
[16:20:57.767]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:57.767]                         if (muffled) 
[16:20:57.767]                           invokeRestart("muffleMessage")
[16:20:57.767]                       }
[16:20:57.767]                       else if (inherits(cond, "warning")) {
[16:20:57.767]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:57.767]                         if (muffled) 
[16:20:57.767]                           invokeRestart("muffleWarning")
[16:20:57.767]                       }
[16:20:57.767]                       else if (inherits(cond, "condition")) {
[16:20:57.767]                         if (!is.null(pattern)) {
[16:20:57.767]                           computeRestarts <- base::computeRestarts
[16:20:57.767]                           grepl <- base::grepl
[16:20:57.767]                           restarts <- computeRestarts(cond)
[16:20:57.767]                           for (restart in restarts) {
[16:20:57.767]                             name <- restart$name
[16:20:57.767]                             if (is.null(name)) 
[16:20:57.767]                               next
[16:20:57.767]                             if (!grepl(pattern, name)) 
[16:20:57.767]                               next
[16:20:57.767]                             invokeRestart(restart)
[16:20:57.767]                             muffled <- TRUE
[16:20:57.767]                             break
[16:20:57.767]                           }
[16:20:57.767]                         }
[16:20:57.767]                       }
[16:20:57.767]                       invisible(muffled)
[16:20:57.767]                     }
[16:20:57.767]                     muffleCondition(cond, pattern = "^muffle")
[16:20:57.767]                   }
[16:20:57.767]                 }
[16:20:57.767]             }
[16:20:57.767]         }))
[16:20:57.767]     }, error = function(ex) {
[16:20:57.767]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:57.767]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:57.767]                 ...future.rng), started = ...future.startTime, 
[16:20:57.767]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:57.767]             version = "1.8"), class = "FutureResult")
[16:20:57.767]     }, finally = {
[16:20:57.767]         if (!identical(...future.workdir, getwd())) 
[16:20:57.767]             setwd(...future.workdir)
[16:20:57.767]         {
[16:20:57.767]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:57.767]                 ...future.oldOptions$nwarnings <- NULL
[16:20:57.767]             }
[16:20:57.767]             base::options(...future.oldOptions)
[16:20:57.767]             if (.Platform$OS.type == "windows") {
[16:20:57.767]                 old_names <- names(...future.oldEnvVars)
[16:20:57.767]                 envs <- base::Sys.getenv()
[16:20:57.767]                 names <- names(envs)
[16:20:57.767]                 common <- intersect(names, old_names)
[16:20:57.767]                 added <- setdiff(names, old_names)
[16:20:57.767]                 removed <- setdiff(old_names, names)
[16:20:57.767]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:57.767]                   envs[common]]
[16:20:57.767]                 NAMES <- toupper(changed)
[16:20:57.767]                 args <- list()
[16:20:57.767]                 for (kk in seq_along(NAMES)) {
[16:20:57.767]                   name <- changed[[kk]]
[16:20:57.767]                   NAME <- NAMES[[kk]]
[16:20:57.767]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:57.767]                     next
[16:20:57.767]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:57.767]                 }
[16:20:57.767]                 NAMES <- toupper(added)
[16:20:57.767]                 for (kk in seq_along(NAMES)) {
[16:20:57.767]                   name <- added[[kk]]
[16:20:57.767]                   NAME <- NAMES[[kk]]
[16:20:57.767]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:57.767]                     next
[16:20:57.767]                   args[[name]] <- ""
[16:20:57.767]                 }
[16:20:57.767]                 NAMES <- toupper(removed)
[16:20:57.767]                 for (kk in seq_along(NAMES)) {
[16:20:57.767]                   name <- removed[[kk]]
[16:20:57.767]                   NAME <- NAMES[[kk]]
[16:20:57.767]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:57.767]                     next
[16:20:57.767]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:57.767]                 }
[16:20:57.767]                 if (length(args) > 0) 
[16:20:57.767]                   base::do.call(base::Sys.setenv, args = args)
[16:20:57.767]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:57.767]             }
[16:20:57.767]             else {
[16:20:57.767]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:57.767]             }
[16:20:57.767]             {
[16:20:57.767]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:57.767]                   0L) {
[16:20:57.767]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:57.767]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:57.767]                   base::options(opts)
[16:20:57.767]                 }
[16:20:57.767]                 {
[16:20:57.767]                   {
[16:20:57.767]                     NULL
[16:20:57.767]                     RNGkind("Mersenne-Twister")
[16:20:57.767]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:57.767]                       inherits = FALSE)
[16:20:57.767]                   }
[16:20:57.767]                   options(future.plan = NULL)
[16:20:57.767]                   if (is.na(NA_character_)) 
[16:20:57.767]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:57.767]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:57.767]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:57.767]                     .init = FALSE)
[16:20:57.767]                 }
[16:20:57.767]             }
[16:20:57.767]         }
[16:20:57.767]     })
[16:20:57.767]     if (TRUE) {
[16:20:57.767]         base::sink(type = "output", split = FALSE)
[16:20:57.767]         if (TRUE) {
[16:20:57.767]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:57.767]         }
[16:20:57.767]         else {
[16:20:57.767]             ...future.result["stdout"] <- base::list(NULL)
[16:20:57.767]         }
[16:20:57.767]         base::close(...future.stdout)
[16:20:57.767]         ...future.stdout <- NULL
[16:20:57.767]     }
[16:20:57.767]     ...future.result$conditions <- ...future.conditions
[16:20:57.767]     ...future.result$finished <- base::Sys.time()
[16:20:57.767]     ...future.result
[16:20:57.767] }
[16:20:57.769] assign_globals() ...
[16:20:57.769] List of 1
[16:20:57.769]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[16:20:57.769]   .. ..@ .Data     :function (x)  
[16:20:57.769]   .. ..@ generic   : chr "my_fcn"
[16:20:57.769]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[16:20:57.769]   .. ..@ package   : chr ".GlobalEnv"
[16:20:57.769]   .. ..@ group     : list()
[16:20:57.769]   .. ..@ valueClass: chr(0) 
[16:20:57.769]   .. ..@ signature : chr "x"
[16:20:57.769]   .. ..@ default   : NULL
[16:20:57.769]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[16:20:57.769]  - attr(*, "where")=List of 1
[16:20:57.769]   ..$ my_fcn:<environment: R_EmptyEnv> 
[16:20:57.769]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:57.769]  - attr(*, "resolved")= logi FALSE
[16:20:57.769]  - attr(*, "total_size")= num 3936
[16:20:57.769]  - attr(*, "already-done")= logi TRUE
[16:20:57.778] - reassign environment for ‘my_fcn’
[16:20:57.778] - copied ‘my_fcn’ to environment
[16:20:57.778] assign_globals() ... done
[16:20:57.779] plan(): Setting new future strategy stack:
[16:20:57.779] List of future strategies:
[16:20:57.779] 1. sequential:
[16:20:57.779]    - args: function (..., envir = parent.frame())
[16:20:57.779]    - tweaked: FALSE
[16:20:57.779]    - call: NULL
[16:20:57.779] plan(): nbrOfWorkers() = 1
[16:20:57.780] plan(): Setting new future strategy stack:
[16:20:57.780] List of future strategies:
[16:20:57.780] 1. sequential:
[16:20:57.780]    - args: function (..., envir = parent.frame())
[16:20:57.780]    - tweaked: FALSE
[16:20:57.780]    - call: plan(strategy)
[16:20:57.781] plan(): nbrOfWorkers() = 1
[16:20:57.781] SequentialFuture started (and completed)
[16:20:57.781] - Launch lazy future ... done
[16:20:57.781] run() for ‘SequentialFuture’ ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x557d48cf9890>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[16:20:57.782] getGlobalsAndPackages() ...
[16:20:57.782] Searching for globals...
[16:20:57.786] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[16:20:57.786] Searching for globals ... DONE
[16:20:57.786] Resolving globals: FALSE
[16:20:57.786] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[16:20:57.787] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[16:20:57.787] - globals: [1] ‘my_fcn’
[16:20:57.787] 
[16:20:57.787] getGlobalsAndPackages() ... DONE
[16:20:57.787] run() for ‘Future’ ...
[16:20:57.787] - state: ‘created’
[16:20:57.787] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:57.788] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:57.788] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:57.788]   - Field: ‘label’
[16:20:57.788]   - Field: ‘local’
[16:20:57.788]   - Field: ‘owner’
[16:20:57.788]   - Field: ‘envir’
[16:20:57.788]   - Field: ‘packages’
[16:20:57.788]   - Field: ‘gc’
[16:20:57.788]   - Field: ‘conditions’
[16:20:57.789]   - Field: ‘expr’
[16:20:57.789]   - Field: ‘uuid’
[16:20:57.789]   - Field: ‘seed’
[16:20:57.789]   - Field: ‘version’
[16:20:57.789]   - Field: ‘result’
[16:20:57.789]   - Field: ‘asynchronous’
[16:20:57.789]   - Field: ‘calls’
[16:20:57.789]   - Field: ‘globals’
[16:20:57.789]   - Field: ‘stdout’
[16:20:57.789]   - Field: ‘earlySignal’
[16:20:57.789]   - Field: ‘lazy’
[16:20:57.789]   - Field: ‘state’
[16:20:57.790] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:57.790] - Launch lazy future ...
[16:20:57.790] Packages needed by the future expression (n = 0): <none>
[16:20:57.790] Packages needed by future strategies (n = 0): <none>
[16:20:57.790] {
[16:20:57.790]     {
[16:20:57.790]         {
[16:20:57.790]             ...future.startTime <- base::Sys.time()
[16:20:57.790]             {
[16:20:57.790]                 {
[16:20:57.790]                   {
[16:20:57.790]                     base::local({
[16:20:57.790]                       has_future <- base::requireNamespace("future", 
[16:20:57.790]                         quietly = TRUE)
[16:20:57.790]                       if (has_future) {
[16:20:57.790]                         ns <- base::getNamespace("future")
[16:20:57.790]                         version <- ns[[".package"]][["version"]]
[16:20:57.790]                         if (is.null(version)) 
[16:20:57.790]                           version <- utils::packageVersion("future")
[16:20:57.790]                       }
[16:20:57.790]                       else {
[16:20:57.790]                         version <- NULL
[16:20:57.790]                       }
[16:20:57.790]                       if (!has_future || version < "1.8.0") {
[16:20:57.790]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:57.790]                           "", base::R.version$version.string), 
[16:20:57.790]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:57.790]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:57.790]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:57.790]                             "release", "version")], collapse = " "), 
[16:20:57.790]                           hostname = base::Sys.info()[["nodename"]])
[16:20:57.790]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:57.790]                           info)
[16:20:57.790]                         info <- base::paste(info, collapse = "; ")
[16:20:57.790]                         if (!has_future) {
[16:20:57.790]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:57.790]                             info)
[16:20:57.790]                         }
[16:20:57.790]                         else {
[16:20:57.790]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:57.790]                             info, version)
[16:20:57.790]                         }
[16:20:57.790]                         base::stop(msg)
[16:20:57.790]                       }
[16:20:57.790]                     })
[16:20:57.790]                   }
[16:20:57.790]                   ...future.strategy.old <- future::plan("list")
[16:20:57.790]                   options(future.plan = NULL)
[16:20:57.790]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:57.790]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:57.790]                 }
[16:20:57.790]                 ...future.workdir <- getwd()
[16:20:57.790]             }
[16:20:57.790]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:57.790]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:57.790]         }
[16:20:57.790]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:57.790]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:57.790]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:57.790]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:57.790]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:57.790]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:57.790]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:57.790]             base::names(...future.oldOptions))
[16:20:57.790]     }
[16:20:57.790]     if (FALSE) {
[16:20:57.790]     }
[16:20:57.790]     else {
[16:20:57.790]         if (TRUE) {
[16:20:57.790]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:57.790]                 open = "w")
[16:20:57.790]         }
[16:20:57.790]         else {
[16:20:57.790]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:57.790]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:57.790]         }
[16:20:57.790]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:57.790]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:57.790]             base::sink(type = "output", split = FALSE)
[16:20:57.790]             base::close(...future.stdout)
[16:20:57.790]         }, add = TRUE)
[16:20:57.790]     }
[16:20:57.790]     ...future.frame <- base::sys.nframe()
[16:20:57.790]     ...future.conditions <- base::list()
[16:20:57.790]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:57.790]     if (FALSE) {
[16:20:57.790]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:57.790]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:57.790]     }
[16:20:57.790]     ...future.result <- base::tryCatch({
[16:20:57.790]         base::withCallingHandlers({
[16:20:57.790]             ...future.value <- base::withVisible(base::local({
[16:20:57.790]                 my_fcn(3)
[16:20:57.790]             }))
[16:20:57.790]             future::FutureResult(value = ...future.value$value, 
[16:20:57.790]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:57.790]                   ...future.rng), globalenv = if (FALSE) 
[16:20:57.790]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:57.790]                     ...future.globalenv.names))
[16:20:57.790]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:57.790]         }, condition = base::local({
[16:20:57.790]             c <- base::c
[16:20:57.790]             inherits <- base::inherits
[16:20:57.790]             invokeRestart <- base::invokeRestart
[16:20:57.790]             length <- base::length
[16:20:57.790]             list <- base::list
[16:20:57.790]             seq.int <- base::seq.int
[16:20:57.790]             signalCondition <- base::signalCondition
[16:20:57.790]             sys.calls <- base::sys.calls
[16:20:57.790]             `[[` <- base::`[[`
[16:20:57.790]             `+` <- base::`+`
[16:20:57.790]             `<<-` <- base::`<<-`
[16:20:57.790]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:57.790]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:57.790]                   3L)]
[16:20:57.790]             }
[16:20:57.790]             function(cond) {
[16:20:57.790]                 is_error <- inherits(cond, "error")
[16:20:57.790]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:57.790]                   NULL)
[16:20:57.790]                 if (is_error) {
[16:20:57.790]                   sessionInformation <- function() {
[16:20:57.790]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:57.790]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:57.790]                       search = base::search(), system = base::Sys.info())
[16:20:57.790]                   }
[16:20:57.790]                   ...future.conditions[[length(...future.conditions) + 
[16:20:57.790]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:57.790]                     cond$call), session = sessionInformation(), 
[16:20:57.790]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:57.790]                   signalCondition(cond)
[16:20:57.790]                 }
[16:20:57.790]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:57.790]                 "immediateCondition"))) {
[16:20:57.790]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:57.790]                   ...future.conditions[[length(...future.conditions) + 
[16:20:57.790]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:57.790]                   if (TRUE && !signal) {
[16:20:57.790]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:57.790]                     {
[16:20:57.790]                       inherits <- base::inherits
[16:20:57.790]                       invokeRestart <- base::invokeRestart
[16:20:57.790]                       is.null <- base::is.null
[16:20:57.790]                       muffled <- FALSE
[16:20:57.790]                       if (inherits(cond, "message")) {
[16:20:57.790]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:57.790]                         if (muffled) 
[16:20:57.790]                           invokeRestart("muffleMessage")
[16:20:57.790]                       }
[16:20:57.790]                       else if (inherits(cond, "warning")) {
[16:20:57.790]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:57.790]                         if (muffled) 
[16:20:57.790]                           invokeRestart("muffleWarning")
[16:20:57.790]                       }
[16:20:57.790]                       else if (inherits(cond, "condition")) {
[16:20:57.790]                         if (!is.null(pattern)) {
[16:20:57.790]                           computeRestarts <- base::computeRestarts
[16:20:57.790]                           grepl <- base::grepl
[16:20:57.790]                           restarts <- computeRestarts(cond)
[16:20:57.790]                           for (restart in restarts) {
[16:20:57.790]                             name <- restart$name
[16:20:57.790]                             if (is.null(name)) 
[16:20:57.790]                               next
[16:20:57.790]                             if (!grepl(pattern, name)) 
[16:20:57.790]                               next
[16:20:57.790]                             invokeRestart(restart)
[16:20:57.790]                             muffled <- TRUE
[16:20:57.790]                             break
[16:20:57.790]                           }
[16:20:57.790]                         }
[16:20:57.790]                       }
[16:20:57.790]                       invisible(muffled)
[16:20:57.790]                     }
[16:20:57.790]                     muffleCondition(cond, pattern = "^muffle")
[16:20:57.790]                   }
[16:20:57.790]                 }
[16:20:57.790]                 else {
[16:20:57.790]                   if (TRUE) {
[16:20:57.790]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:57.790]                     {
[16:20:57.790]                       inherits <- base::inherits
[16:20:57.790]                       invokeRestart <- base::invokeRestart
[16:20:57.790]                       is.null <- base::is.null
[16:20:57.790]                       muffled <- FALSE
[16:20:57.790]                       if (inherits(cond, "message")) {
[16:20:57.790]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:57.790]                         if (muffled) 
[16:20:57.790]                           invokeRestart("muffleMessage")
[16:20:57.790]                       }
[16:20:57.790]                       else if (inherits(cond, "warning")) {
[16:20:57.790]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:57.790]                         if (muffled) 
[16:20:57.790]                           invokeRestart("muffleWarning")
[16:20:57.790]                       }
[16:20:57.790]                       else if (inherits(cond, "condition")) {
[16:20:57.790]                         if (!is.null(pattern)) {
[16:20:57.790]                           computeRestarts <- base::computeRestarts
[16:20:57.790]                           grepl <- base::grepl
[16:20:57.790]                           restarts <- computeRestarts(cond)
[16:20:57.790]                           for (restart in restarts) {
[16:20:57.790]                             name <- restart$name
[16:20:57.790]                             if (is.null(name)) 
[16:20:57.790]                               next
[16:20:57.790]                             if (!grepl(pattern, name)) 
[16:20:57.790]                               next
[16:20:57.790]                             invokeRestart(restart)
[16:20:57.790]                             muffled <- TRUE
[16:20:57.790]                             break
[16:20:57.790]                           }
[16:20:57.790]                         }
[16:20:57.790]                       }
[16:20:57.790]                       invisible(muffled)
[16:20:57.790]                     }
[16:20:57.790]                     muffleCondition(cond, pattern = "^muffle")
[16:20:57.790]                   }
[16:20:57.790]                 }
[16:20:57.790]             }
[16:20:57.790]         }))
[16:20:57.790]     }, error = function(ex) {
[16:20:57.790]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:57.790]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:57.790]                 ...future.rng), started = ...future.startTime, 
[16:20:57.790]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:57.790]             version = "1.8"), class = "FutureResult")
[16:20:57.790]     }, finally = {
[16:20:57.790]         if (!identical(...future.workdir, getwd())) 
[16:20:57.790]             setwd(...future.workdir)
[16:20:57.790]         {
[16:20:57.790]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:57.790]                 ...future.oldOptions$nwarnings <- NULL
[16:20:57.790]             }
[16:20:57.790]             base::options(...future.oldOptions)
[16:20:57.790]             if (.Platform$OS.type == "windows") {
[16:20:57.790]                 old_names <- names(...future.oldEnvVars)
[16:20:57.790]                 envs <- base::Sys.getenv()
[16:20:57.790]                 names <- names(envs)
[16:20:57.790]                 common <- intersect(names, old_names)
[16:20:57.790]                 added <- setdiff(names, old_names)
[16:20:57.790]                 removed <- setdiff(old_names, names)
[16:20:57.790]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:57.790]                   envs[common]]
[16:20:57.790]                 NAMES <- toupper(changed)
[16:20:57.790]                 args <- list()
[16:20:57.790]                 for (kk in seq_along(NAMES)) {
[16:20:57.790]                   name <- changed[[kk]]
[16:20:57.790]                   NAME <- NAMES[[kk]]
[16:20:57.790]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:57.790]                     next
[16:20:57.790]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:57.790]                 }
[16:20:57.790]                 NAMES <- toupper(added)
[16:20:57.790]                 for (kk in seq_along(NAMES)) {
[16:20:57.790]                   name <- added[[kk]]
[16:20:57.790]                   NAME <- NAMES[[kk]]
[16:20:57.790]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:57.790]                     next
[16:20:57.790]                   args[[name]] <- ""
[16:20:57.790]                 }
[16:20:57.790]                 NAMES <- toupper(removed)
[16:20:57.790]                 for (kk in seq_along(NAMES)) {
[16:20:57.790]                   name <- removed[[kk]]
[16:20:57.790]                   NAME <- NAMES[[kk]]
[16:20:57.790]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:57.790]                     next
[16:20:57.790]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:57.790]                 }
[16:20:57.790]                 if (length(args) > 0) 
[16:20:57.790]                   base::do.call(base::Sys.setenv, args = args)
[16:20:57.790]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:57.790]             }
[16:20:57.790]             else {
[16:20:57.790]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:57.790]             }
[16:20:57.790]             {
[16:20:57.790]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:57.790]                   0L) {
[16:20:57.790]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:57.790]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:57.790]                   base::options(opts)
[16:20:57.790]                 }
[16:20:57.790]                 {
[16:20:57.790]                   {
[16:20:57.790]                     NULL
[16:20:57.790]                     RNGkind("Mersenne-Twister")
[16:20:57.790]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:57.790]                       inherits = FALSE)
[16:20:57.790]                   }
[16:20:57.790]                   options(future.plan = NULL)
[16:20:57.790]                   if (is.na(NA_character_)) 
[16:20:57.790]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:57.790]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:57.790]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:57.790]                     .init = FALSE)
[16:20:57.790]                 }
[16:20:57.790]             }
[16:20:57.790]         }
[16:20:57.790]     })
[16:20:57.790]     if (TRUE) {
[16:20:57.790]         base::sink(type = "output", split = FALSE)
[16:20:57.790]         if (TRUE) {
[16:20:57.790]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:57.790]         }
[16:20:57.790]         else {
[16:20:57.790]             ...future.result["stdout"] <- base::list(NULL)
[16:20:57.790]         }
[16:20:57.790]         base::close(...future.stdout)
[16:20:57.790]         ...future.stdout <- NULL
[16:20:57.790]     }
[16:20:57.790]     ...future.result$conditions <- ...future.conditions
[16:20:57.790]     ...future.result$finished <- base::Sys.time()
[16:20:57.790]     ...future.result
[16:20:57.790] }
[16:20:57.792] assign_globals() ...
[16:20:57.792] List of 1
[16:20:57.792]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[16:20:57.792]   .. ..@ .Data     :function (x)  
[16:20:57.792]   .. ..@ generic   : chr "my_fcn"
[16:20:57.792]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[16:20:57.792]   .. ..@ package   : chr ".GlobalEnv"
[16:20:57.792]   .. ..@ group     : list()
[16:20:57.792]   .. ..@ valueClass: chr(0) 
[16:20:57.792]   .. ..@ signature : chr "x"
[16:20:57.792]   .. ..@ default   : NULL
[16:20:57.792]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[16:20:57.792]  - attr(*, "where")=List of 1
[16:20:57.792]   ..$ my_fcn:<environment: R_EmptyEnv> 
[16:20:57.792]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:57.792]  - attr(*, "resolved")= logi FALSE
[16:20:57.792]  - attr(*, "total_size")= num 3936
[16:20:57.792]  - attr(*, "already-done")= logi TRUE
[16:20:57.796] - reassign environment for ‘my_fcn’
[16:20:57.796] - copied ‘my_fcn’ to environment
[16:20:57.797] assign_globals() ... done
[16:20:57.797] plan(): Setting new future strategy stack:
[16:20:57.797] List of future strategies:
[16:20:57.797] 1. sequential:
[16:20:57.797]    - args: function (..., envir = parent.frame())
[16:20:57.797]    - tweaked: FALSE
[16:20:57.797]    - call: NULL
[16:20:57.797] plan(): nbrOfWorkers() = 1
[16:20:57.799] plan(): Setting new future strategy stack:
[16:20:57.799] List of future strategies:
[16:20:57.799] 1. sequential:
[16:20:57.799]    - args: function (..., envir = parent.frame())
[16:20:57.799]    - tweaked: FALSE
[16:20:57.799]    - call: plan(strategy)
[16:20:57.799] plan(): nbrOfWorkers() = 1
[16:20:57.799] SequentialFuture started (and completed)
[16:20:57.799] signalConditions() ...
[16:20:57.800]  - include = ‘immediateCondition’
[16:20:57.800]  - exclude = 
[16:20:57.800]  - resignal = FALSE
[16:20:57.800]  - Number of conditions: 1
[16:20:57.800] signalConditions() ... done
[16:20:57.800] - Launch lazy future ... done
[16:20:57.800] run() for ‘SequentialFuture’ ... done
[16:20:57.800] signalConditions() ...
[16:20:57.800]  - include = ‘immediateCondition’
[16:20:57.800]  - exclude = 
[16:20:57.800]  - resignal = FALSE
[16:20:57.802]  - Number of conditions: 1
[16:20:57.802] signalConditions() ... done
[16:20:57.802] Future state: ‘finished’
[16:20:57.802] signalConditions() ...
[16:20:57.802]  - include = ‘condition’
[16:20:57.802]  - exclude = ‘immediateCondition’
[16:20:57.802]  - resignal = TRUE
[16:20:57.802]  - Number of conditions: 1
[16:20:57.802]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:20:57.802] signalConditions() ... done
<simpleError in (function (classes, fdef, mtable) {    methods <- .findInheritedMethods(classes, fdef, mtable)    if (length(methods) == 1L)         return(methods[[1L]])    else if (length(methods) == 0L) {        cnames <- paste0("\"", vapply(classes, as.character,             ""), "\"", collapse = ", ")        stop(gettextf("unable to find an inherited method for function %s for signature %s",             sQuote(fdef@generic), sQuote(cnames)), domain = NA)    }    else stop("Internal error in finding inherited methods; didn't return a unique method",         domain = NA)})(list("numeric"), new("standardGeneric", .Data = function (x) standardGeneric("my_fcn"), generic = structure("my_fcn", package = ".GlobalEnv"),     package = ".GlobalEnv", group = list(), valueClass = character(0),     signature = "x", default = NULL, skeleton = (function (x)     stop(gettextf("invalid call in method dispatch to '%s' (no default method)",         "my_fcn"), domain = NA))(x)), <environment>): unable to find an inherited method for function ‘my_fcn’ for signature ‘"numeric"’>
Type of future: multicore
[16:20:57.803] plan(): Setting new future strategy stack:
[16:20:57.803] List of future strategies:
[16:20:57.803] 1. multicore:
[16:20:57.803]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:20:57.803]    - tweaked: FALSE
[16:20:57.803]    - call: plan(strategy)
[16:20:57.807] plan(): nbrOfWorkers() = 2
[16:20:57.807] getGlobalsAndPackages() ...
[16:20:57.807] Searching for globals...
[16:20:57.810] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[16:20:57.810] Searching for globals ... DONE
[16:20:57.810] Resolving globals: FALSE
[16:20:57.810] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[16:20:57.811] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[16:20:57.811] - globals: [1] ‘my_fcn’
[16:20:57.811] 
[16:20:57.811] getGlobalsAndPackages() ... DONE
[16:20:57.811] run() for ‘Future’ ...
[16:20:57.811] - state: ‘created’
[16:20:57.811] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:20:57.815] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:57.815] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:20:57.815]   - Field: ‘label’
[16:20:57.815]   - Field: ‘local’
[16:20:57.815]   - Field: ‘owner’
[16:20:57.815]   - Field: ‘envir’
[16:20:57.816]   - Field: ‘workers’
[16:20:57.816]   - Field: ‘packages’
[16:20:57.816]   - Field: ‘gc’
[16:20:57.816]   - Field: ‘job’
[16:20:57.816]   - Field: ‘conditions’
[16:20:57.816]   - Field: ‘expr’
[16:20:57.816]   - Field: ‘uuid’
[16:20:57.816]   - Field: ‘seed’
[16:20:57.816]   - Field: ‘version’
[16:20:57.816]   - Field: ‘result’
[16:20:57.816]   - Field: ‘asynchronous’
[16:20:57.817]   - Field: ‘calls’
[16:20:57.817]   - Field: ‘globals’
[16:20:57.817]   - Field: ‘stdout’
[16:20:57.817]   - Field: ‘earlySignal’
[16:20:57.817]   - Field: ‘lazy’
[16:20:57.817]   - Field: ‘state’
[16:20:57.817] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:20:57.817] - Launch lazy future ...
[16:20:57.818] Packages needed by the future expression (n = 0): <none>
[16:20:57.818] Packages needed by future strategies (n = 0): <none>
[16:20:57.819] {
[16:20:57.819]     {
[16:20:57.819]         {
[16:20:57.819]             ...future.startTime <- base::Sys.time()
[16:20:57.819]             {
[16:20:57.819]                 {
[16:20:57.819]                   {
[16:20:57.819]                     {
[16:20:57.819]                       base::local({
[16:20:57.819]                         has_future <- base::requireNamespace("future", 
[16:20:57.819]                           quietly = TRUE)
[16:20:57.819]                         if (has_future) {
[16:20:57.819]                           ns <- base::getNamespace("future")
[16:20:57.819]                           version <- ns[[".package"]][["version"]]
[16:20:57.819]                           if (is.null(version)) 
[16:20:57.819]                             version <- utils::packageVersion("future")
[16:20:57.819]                         }
[16:20:57.819]                         else {
[16:20:57.819]                           version <- NULL
[16:20:57.819]                         }
[16:20:57.819]                         if (!has_future || version < "1.8.0") {
[16:20:57.819]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:57.819]                             "", base::R.version$version.string), 
[16:20:57.819]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:57.819]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:57.819]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:57.819]                               "release", "version")], collapse = " "), 
[16:20:57.819]                             hostname = base::Sys.info()[["nodename"]])
[16:20:57.819]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:57.819]                             info)
[16:20:57.819]                           info <- base::paste(info, collapse = "; ")
[16:20:57.819]                           if (!has_future) {
[16:20:57.819]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:57.819]                               info)
[16:20:57.819]                           }
[16:20:57.819]                           else {
[16:20:57.819]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:57.819]                               info, version)
[16:20:57.819]                           }
[16:20:57.819]                           base::stop(msg)
[16:20:57.819]                         }
[16:20:57.819]                       })
[16:20:57.819]                     }
[16:20:57.819]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:57.819]                     base::options(mc.cores = 1L)
[16:20:57.819]                   }
[16:20:57.819]                   ...future.strategy.old <- future::plan("list")
[16:20:57.819]                   options(future.plan = NULL)
[16:20:57.819]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:57.819]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:57.819]                 }
[16:20:57.819]                 ...future.workdir <- getwd()
[16:20:57.819]             }
[16:20:57.819]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:57.819]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:57.819]         }
[16:20:57.819]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:57.819]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:57.819]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:57.819]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:57.819]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:57.819]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:57.819]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:57.819]             base::names(...future.oldOptions))
[16:20:57.819]     }
[16:20:57.819]     if (FALSE) {
[16:20:57.819]     }
[16:20:57.819]     else {
[16:20:57.819]         if (TRUE) {
[16:20:57.819]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:57.819]                 open = "w")
[16:20:57.819]         }
[16:20:57.819]         else {
[16:20:57.819]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:57.819]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:57.819]         }
[16:20:57.819]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:57.819]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:57.819]             base::sink(type = "output", split = FALSE)
[16:20:57.819]             base::close(...future.stdout)
[16:20:57.819]         }, add = TRUE)
[16:20:57.819]     }
[16:20:57.819]     ...future.frame <- base::sys.nframe()
[16:20:57.819]     ...future.conditions <- base::list()
[16:20:57.819]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:57.819]     if (FALSE) {
[16:20:57.819]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:57.819]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:57.819]     }
[16:20:57.819]     ...future.result <- base::tryCatch({
[16:20:57.819]         base::withCallingHandlers({
[16:20:57.819]             ...future.value <- base::withVisible(base::local({
[16:20:57.819]                 withCallingHandlers({
[16:20:57.819]                   {
[16:20:57.819]                     my_fcn
[16:20:57.819]                   }
[16:20:57.819]                 }, immediateCondition = function(cond) {
[16:20:57.819]                   save_rds <- function (object, pathname, ...) 
[16:20:57.819]                   {
[16:20:57.819]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:20:57.819]                     if (file_test("-f", pathname_tmp)) {
[16:20:57.819]                       fi_tmp <- file.info(pathname_tmp)
[16:20:57.819]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:20:57.819]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:57.819]                         fi_tmp[["mtime"]])
[16:20:57.819]                     }
[16:20:57.819]                     tryCatch({
[16:20:57.819]                       saveRDS(object, file = pathname_tmp, ...)
[16:20:57.819]                     }, error = function(ex) {
[16:20:57.819]                       msg <- conditionMessage(ex)
[16:20:57.819]                       fi_tmp <- file.info(pathname_tmp)
[16:20:57.819]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:20:57.819]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:57.819]                         fi_tmp[["mtime"]], msg)
[16:20:57.819]                       ex$message <- msg
[16:20:57.819]                       stop(ex)
[16:20:57.819]                     })
[16:20:57.819]                     stopifnot(file_test("-f", pathname_tmp))
[16:20:57.819]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:20:57.819]                     if (!res || file_test("-f", pathname_tmp)) {
[16:20:57.819]                       fi_tmp <- file.info(pathname_tmp)
[16:20:57.819]                       fi <- file.info(pathname)
[16:20:57.819]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:20:57.819]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:57.819]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:20:57.819]                         fi[["size"]], fi[["mtime"]])
[16:20:57.819]                       stop(msg)
[16:20:57.819]                     }
[16:20:57.819]                     invisible(pathname)
[16:20:57.819]                   }
[16:20:57.819]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:20:57.819]                     rootPath = tempdir()) 
[16:20:57.819]                   {
[16:20:57.819]                     obj <- list(time = Sys.time(), condition = cond)
[16:20:57.819]                     file <- tempfile(pattern = class(cond)[1], 
[16:20:57.819]                       tmpdir = path, fileext = ".rds")
[16:20:57.819]                     save_rds(obj, file)
[16:20:57.819]                   }
[16:20:57.819]                   saveImmediateCondition(cond, path = "/tmp/RtmpnHcYVk/.future/immediateConditions")
[16:20:57.819]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:57.819]                   {
[16:20:57.819]                     inherits <- base::inherits
[16:20:57.819]                     invokeRestart <- base::invokeRestart
[16:20:57.819]                     is.null <- base::is.null
[16:20:57.819]                     muffled <- FALSE
[16:20:57.819]                     if (inherits(cond, "message")) {
[16:20:57.819]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:57.819]                       if (muffled) 
[16:20:57.819]                         invokeRestart("muffleMessage")
[16:20:57.819]                     }
[16:20:57.819]                     else if (inherits(cond, "warning")) {
[16:20:57.819]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:57.819]                       if (muffled) 
[16:20:57.819]                         invokeRestart("muffleWarning")
[16:20:57.819]                     }
[16:20:57.819]                     else if (inherits(cond, "condition")) {
[16:20:57.819]                       if (!is.null(pattern)) {
[16:20:57.819]                         computeRestarts <- base::computeRestarts
[16:20:57.819]                         grepl <- base::grepl
[16:20:57.819]                         restarts <- computeRestarts(cond)
[16:20:57.819]                         for (restart in restarts) {
[16:20:57.819]                           name <- restart$name
[16:20:57.819]                           if (is.null(name)) 
[16:20:57.819]                             next
[16:20:57.819]                           if (!grepl(pattern, name)) 
[16:20:57.819]                             next
[16:20:57.819]                           invokeRestart(restart)
[16:20:57.819]                           muffled <- TRUE
[16:20:57.819]                           break
[16:20:57.819]                         }
[16:20:57.819]                       }
[16:20:57.819]                     }
[16:20:57.819]                     invisible(muffled)
[16:20:57.819]                   }
[16:20:57.819]                   muffleCondition(cond)
[16:20:57.819]                 })
[16:20:57.819]             }))
[16:20:57.819]             future::FutureResult(value = ...future.value$value, 
[16:20:57.819]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:57.819]                   ...future.rng), globalenv = if (FALSE) 
[16:20:57.819]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:57.819]                     ...future.globalenv.names))
[16:20:57.819]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:57.819]         }, condition = base::local({
[16:20:57.819]             c <- base::c
[16:20:57.819]             inherits <- base::inherits
[16:20:57.819]             invokeRestart <- base::invokeRestart
[16:20:57.819]             length <- base::length
[16:20:57.819]             list <- base::list
[16:20:57.819]             seq.int <- base::seq.int
[16:20:57.819]             signalCondition <- base::signalCondition
[16:20:57.819]             sys.calls <- base::sys.calls
[16:20:57.819]             `[[` <- base::`[[`
[16:20:57.819]             `+` <- base::`+`
[16:20:57.819]             `<<-` <- base::`<<-`
[16:20:57.819]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:57.819]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:57.819]                   3L)]
[16:20:57.819]             }
[16:20:57.819]             function(cond) {
[16:20:57.819]                 is_error <- inherits(cond, "error")
[16:20:57.819]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:57.819]                   NULL)
[16:20:57.819]                 if (is_error) {
[16:20:57.819]                   sessionInformation <- function() {
[16:20:57.819]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:57.819]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:57.819]                       search = base::search(), system = base::Sys.info())
[16:20:57.819]                   }
[16:20:57.819]                   ...future.conditions[[length(...future.conditions) + 
[16:20:57.819]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:57.819]                     cond$call), session = sessionInformation(), 
[16:20:57.819]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:57.819]                   signalCondition(cond)
[16:20:57.819]                 }
[16:20:57.819]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:57.819]                 "immediateCondition"))) {
[16:20:57.819]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:57.819]                   ...future.conditions[[length(...future.conditions) + 
[16:20:57.819]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:57.819]                   if (TRUE && !signal) {
[16:20:57.819]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:57.819]                     {
[16:20:57.819]                       inherits <- base::inherits
[16:20:57.819]                       invokeRestart <- base::invokeRestart
[16:20:57.819]                       is.null <- base::is.null
[16:20:57.819]                       muffled <- FALSE
[16:20:57.819]                       if (inherits(cond, "message")) {
[16:20:57.819]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:57.819]                         if (muffled) 
[16:20:57.819]                           invokeRestart("muffleMessage")
[16:20:57.819]                       }
[16:20:57.819]                       else if (inherits(cond, "warning")) {
[16:20:57.819]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:57.819]                         if (muffled) 
[16:20:57.819]                           invokeRestart("muffleWarning")
[16:20:57.819]                       }
[16:20:57.819]                       else if (inherits(cond, "condition")) {
[16:20:57.819]                         if (!is.null(pattern)) {
[16:20:57.819]                           computeRestarts <- base::computeRestarts
[16:20:57.819]                           grepl <- base::grepl
[16:20:57.819]                           restarts <- computeRestarts(cond)
[16:20:57.819]                           for (restart in restarts) {
[16:20:57.819]                             name <- restart$name
[16:20:57.819]                             if (is.null(name)) 
[16:20:57.819]                               next
[16:20:57.819]                             if (!grepl(pattern, name)) 
[16:20:57.819]                               next
[16:20:57.819]                             invokeRestart(restart)
[16:20:57.819]                             muffled <- TRUE
[16:20:57.819]                             break
[16:20:57.819]                           }
[16:20:57.819]                         }
[16:20:57.819]                       }
[16:20:57.819]                       invisible(muffled)
[16:20:57.819]                     }
[16:20:57.819]                     muffleCondition(cond, pattern = "^muffle")
[16:20:57.819]                   }
[16:20:57.819]                 }
[16:20:57.819]                 else {
[16:20:57.819]                   if (TRUE) {
[16:20:57.819]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:57.819]                     {
[16:20:57.819]                       inherits <- base::inherits
[16:20:57.819]                       invokeRestart <- base::invokeRestart
[16:20:57.819]                       is.null <- base::is.null
[16:20:57.819]                       muffled <- FALSE
[16:20:57.819]                       if (inherits(cond, "message")) {
[16:20:57.819]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:57.819]                         if (muffled) 
[16:20:57.819]                           invokeRestart("muffleMessage")
[16:20:57.819]                       }
[16:20:57.819]                       else if (inherits(cond, "warning")) {
[16:20:57.819]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:57.819]                         if (muffled) 
[16:20:57.819]                           invokeRestart("muffleWarning")
[16:20:57.819]                       }
[16:20:57.819]                       else if (inherits(cond, "condition")) {
[16:20:57.819]                         if (!is.null(pattern)) {
[16:20:57.819]                           computeRestarts <- base::computeRestarts
[16:20:57.819]                           grepl <- base::grepl
[16:20:57.819]                           restarts <- computeRestarts(cond)
[16:20:57.819]                           for (restart in restarts) {
[16:20:57.819]                             name <- restart$name
[16:20:57.819]                             if (is.null(name)) 
[16:20:57.819]                               next
[16:20:57.819]                             if (!grepl(pattern, name)) 
[16:20:57.819]                               next
[16:20:57.819]                             invokeRestart(restart)
[16:20:57.819]                             muffled <- TRUE
[16:20:57.819]                             break
[16:20:57.819]                           }
[16:20:57.819]                         }
[16:20:57.819]                       }
[16:20:57.819]                       invisible(muffled)
[16:20:57.819]                     }
[16:20:57.819]                     muffleCondition(cond, pattern = "^muffle")
[16:20:57.819]                   }
[16:20:57.819]                 }
[16:20:57.819]             }
[16:20:57.819]         }))
[16:20:57.819]     }, error = function(ex) {
[16:20:57.819]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:57.819]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:57.819]                 ...future.rng), started = ...future.startTime, 
[16:20:57.819]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:57.819]             version = "1.8"), class = "FutureResult")
[16:20:57.819]     }, finally = {
[16:20:57.819]         if (!identical(...future.workdir, getwd())) 
[16:20:57.819]             setwd(...future.workdir)
[16:20:57.819]         {
[16:20:57.819]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:57.819]                 ...future.oldOptions$nwarnings <- NULL
[16:20:57.819]             }
[16:20:57.819]             base::options(...future.oldOptions)
[16:20:57.819]             if (.Platform$OS.type == "windows") {
[16:20:57.819]                 old_names <- names(...future.oldEnvVars)
[16:20:57.819]                 envs <- base::Sys.getenv()
[16:20:57.819]                 names <- names(envs)
[16:20:57.819]                 common <- intersect(names, old_names)
[16:20:57.819]                 added <- setdiff(names, old_names)
[16:20:57.819]                 removed <- setdiff(old_names, names)
[16:20:57.819]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:57.819]                   envs[common]]
[16:20:57.819]                 NAMES <- toupper(changed)
[16:20:57.819]                 args <- list()
[16:20:57.819]                 for (kk in seq_along(NAMES)) {
[16:20:57.819]                   name <- changed[[kk]]
[16:20:57.819]                   NAME <- NAMES[[kk]]
[16:20:57.819]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:57.819]                     next
[16:20:57.819]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:57.819]                 }
[16:20:57.819]                 NAMES <- toupper(added)
[16:20:57.819]                 for (kk in seq_along(NAMES)) {
[16:20:57.819]                   name <- added[[kk]]
[16:20:57.819]                   NAME <- NAMES[[kk]]
[16:20:57.819]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:57.819]                     next
[16:20:57.819]                   args[[name]] <- ""
[16:20:57.819]                 }
[16:20:57.819]                 NAMES <- toupper(removed)
[16:20:57.819]                 for (kk in seq_along(NAMES)) {
[16:20:57.819]                   name <- removed[[kk]]
[16:20:57.819]                   NAME <- NAMES[[kk]]
[16:20:57.819]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:57.819]                     next
[16:20:57.819]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:57.819]                 }
[16:20:57.819]                 if (length(args) > 0) 
[16:20:57.819]                   base::do.call(base::Sys.setenv, args = args)
[16:20:57.819]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:57.819]             }
[16:20:57.819]             else {
[16:20:57.819]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:57.819]             }
[16:20:57.819]             {
[16:20:57.819]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:57.819]                   0L) {
[16:20:57.819]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:57.819]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:57.819]                   base::options(opts)
[16:20:57.819]                 }
[16:20:57.819]                 {
[16:20:57.819]                   {
[16:20:57.819]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:57.819]                     NULL
[16:20:57.819]                   }
[16:20:57.819]                   options(future.plan = NULL)
[16:20:57.819]                   if (is.na(NA_character_)) 
[16:20:57.819]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:57.819]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:57.819]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:57.819]                     .init = FALSE)
[16:20:57.819]                 }
[16:20:57.819]             }
[16:20:57.819]         }
[16:20:57.819]     })
[16:20:57.819]     if (TRUE) {
[16:20:57.819]         base::sink(type = "output", split = FALSE)
[16:20:57.819]         if (TRUE) {
[16:20:57.819]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:57.819]         }
[16:20:57.819]         else {
[16:20:57.819]             ...future.result["stdout"] <- base::list(NULL)
[16:20:57.819]         }
[16:20:57.819]         base::close(...future.stdout)
[16:20:57.819]         ...future.stdout <- NULL
[16:20:57.819]     }
[16:20:57.819]     ...future.result$conditions <- ...future.conditions
[16:20:57.819]     ...future.result$finished <- base::Sys.time()
[16:20:57.819]     ...future.result
[16:20:57.819] }
[16:20:57.821] assign_globals() ...
[16:20:57.821] List of 1
[16:20:57.821]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[16:20:57.821]   .. ..@ .Data     :function (x)  
[16:20:57.821]   .. ..@ generic   : chr "my_fcn"
[16:20:57.821]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[16:20:57.821]   .. ..@ package   : chr ".GlobalEnv"
[16:20:57.821]   .. ..@ group     : list()
[16:20:57.821]   .. ..@ valueClass: chr(0) 
[16:20:57.821]   .. ..@ signature : chr "x"
[16:20:57.821]   .. ..@ default   : NULL
[16:20:57.821]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[16:20:57.821]  - attr(*, "where")=List of 1
[16:20:57.821]   ..$ my_fcn:<environment: R_EmptyEnv> 
[16:20:57.821]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:57.821]  - attr(*, "resolved")= logi FALSE
[16:20:57.821]  - attr(*, "total_size")= num 3936
[16:20:57.821]  - attr(*, "already-done")= logi TRUE
[16:20:57.825] - reassign environment for ‘my_fcn’
[16:20:57.825] - copied ‘my_fcn’ to environment
[16:20:57.826] assign_globals() ... done
[16:20:57.826] requestCore(): workers = 2
[16:20:57.828] MulticoreFuture started
[16:20:57.829] - Launch lazy future ... done
[16:20:57.829] run() for ‘MulticoreFuture’ ... done
[16:20:57.829] plan(): Setting new future strategy stack:
[16:20:57.829] List of future strategies:
[16:20:57.829] 1. sequential:
[16:20:57.829]    - args: function (..., envir = parent.frame())
[16:20:57.829]    - tweaked: FALSE
[16:20:57.829]    - call: NULL
[16:20:57.830] result() for MulticoreFuture ...
[16:20:57.830] plan(): nbrOfWorkers() = 1
[16:20:57.832] plan(): Setting new future strategy stack:
[16:20:57.832] List of future strategies:
[16:20:57.832] 1. multicore:
[16:20:57.832]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:20:57.832]    - tweaked: FALSE
[16:20:57.832]    - call: plan(strategy)
[16:20:57.837] plan(): nbrOfWorkers() = 2
[16:20:57.845] result() for MulticoreFuture ...
[16:20:57.845] result() for MulticoreFuture ... done
[16:20:57.845] result() for MulticoreFuture ... done
[16:20:57.846] result() for MulticoreFuture ...
[16:20:57.846] result() for MulticoreFuture ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x557d48e0ffd0>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[16:20:57.846] getGlobalsAndPackages() ...
[16:20:57.846] Searching for globals...
[16:20:57.850] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[16:20:57.850] Searching for globals ... DONE
[16:20:57.850] Resolving globals: FALSE
[16:20:57.851] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[16:20:57.851] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[16:20:57.851] - globals: [1] ‘my_fcn’
[16:20:57.851] 
[16:20:57.851] getGlobalsAndPackages() ... DONE
[16:20:57.852] run() for ‘Future’ ...
[16:20:57.852] - state: ‘created’
[16:20:57.852] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:20:57.856] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:57.856] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:20:57.856]   - Field: ‘label’
[16:20:57.856]   - Field: ‘local’
[16:20:57.856]   - Field: ‘owner’
[16:20:57.856]   - Field: ‘envir’
[16:20:57.856]   - Field: ‘workers’
[16:20:57.857]   - Field: ‘packages’
[16:20:57.857]   - Field: ‘gc’
[16:20:57.857]   - Field: ‘job’
[16:20:57.857]   - Field: ‘conditions’
[16:20:57.857]   - Field: ‘expr’
[16:20:57.857]   - Field: ‘uuid’
[16:20:57.857]   - Field: ‘seed’
[16:20:57.857]   - Field: ‘version’
[16:20:57.858]   - Field: ‘result’
[16:20:57.858]   - Field: ‘asynchronous’
[16:20:57.858]   - Field: ‘calls’
[16:20:57.858]   - Field: ‘globals’
[16:20:57.858]   - Field: ‘stdout’
[16:20:57.858]   - Field: ‘earlySignal’
[16:20:57.858]   - Field: ‘lazy’
[16:20:57.858]   - Field: ‘state’
[16:20:57.858] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:20:57.859] - Launch lazy future ...
[16:20:57.859] Packages needed by the future expression (n = 0): <none>
[16:20:57.859] Packages needed by future strategies (n = 0): <none>
[16:20:57.859] {
[16:20:57.859]     {
[16:20:57.859]         {
[16:20:57.859]             ...future.startTime <- base::Sys.time()
[16:20:57.859]             {
[16:20:57.859]                 {
[16:20:57.859]                   {
[16:20:57.859]                     {
[16:20:57.859]                       base::local({
[16:20:57.859]                         has_future <- base::requireNamespace("future", 
[16:20:57.859]                           quietly = TRUE)
[16:20:57.859]                         if (has_future) {
[16:20:57.859]                           ns <- base::getNamespace("future")
[16:20:57.859]                           version <- ns[[".package"]][["version"]]
[16:20:57.859]                           if (is.null(version)) 
[16:20:57.859]                             version <- utils::packageVersion("future")
[16:20:57.859]                         }
[16:20:57.859]                         else {
[16:20:57.859]                           version <- NULL
[16:20:57.859]                         }
[16:20:57.859]                         if (!has_future || version < "1.8.0") {
[16:20:57.859]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:57.859]                             "", base::R.version$version.string), 
[16:20:57.859]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:57.859]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:57.859]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:57.859]                               "release", "version")], collapse = " "), 
[16:20:57.859]                             hostname = base::Sys.info()[["nodename"]])
[16:20:57.859]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:57.859]                             info)
[16:20:57.859]                           info <- base::paste(info, collapse = "; ")
[16:20:57.859]                           if (!has_future) {
[16:20:57.859]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:57.859]                               info)
[16:20:57.859]                           }
[16:20:57.859]                           else {
[16:20:57.859]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:57.859]                               info, version)
[16:20:57.859]                           }
[16:20:57.859]                           base::stop(msg)
[16:20:57.859]                         }
[16:20:57.859]                       })
[16:20:57.859]                     }
[16:20:57.859]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:57.859]                     base::options(mc.cores = 1L)
[16:20:57.859]                   }
[16:20:57.859]                   ...future.strategy.old <- future::plan("list")
[16:20:57.859]                   options(future.plan = NULL)
[16:20:57.859]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:57.859]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:57.859]                 }
[16:20:57.859]                 ...future.workdir <- getwd()
[16:20:57.859]             }
[16:20:57.859]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:57.859]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:57.859]         }
[16:20:57.859]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:57.859]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:57.859]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:57.859]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:57.859]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:57.859]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:57.859]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:57.859]             base::names(...future.oldOptions))
[16:20:57.859]     }
[16:20:57.859]     if (FALSE) {
[16:20:57.859]     }
[16:20:57.859]     else {
[16:20:57.859]         if (TRUE) {
[16:20:57.859]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:57.859]                 open = "w")
[16:20:57.859]         }
[16:20:57.859]         else {
[16:20:57.859]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:57.859]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:57.859]         }
[16:20:57.859]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:57.859]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:57.859]             base::sink(type = "output", split = FALSE)
[16:20:57.859]             base::close(...future.stdout)
[16:20:57.859]         }, add = TRUE)
[16:20:57.859]     }
[16:20:57.859]     ...future.frame <- base::sys.nframe()
[16:20:57.859]     ...future.conditions <- base::list()
[16:20:57.859]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:57.859]     if (FALSE) {
[16:20:57.859]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:57.859]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:57.859]     }
[16:20:57.859]     ...future.result <- base::tryCatch({
[16:20:57.859]         base::withCallingHandlers({
[16:20:57.859]             ...future.value <- base::withVisible(base::local({
[16:20:57.859]                 withCallingHandlers({
[16:20:57.859]                   {
[16:20:57.859]                     my_fcn(3)
[16:20:57.859]                   }
[16:20:57.859]                 }, immediateCondition = function(cond) {
[16:20:57.859]                   save_rds <- function (object, pathname, ...) 
[16:20:57.859]                   {
[16:20:57.859]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:20:57.859]                     if (file_test("-f", pathname_tmp)) {
[16:20:57.859]                       fi_tmp <- file.info(pathname_tmp)
[16:20:57.859]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:20:57.859]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:57.859]                         fi_tmp[["mtime"]])
[16:20:57.859]                     }
[16:20:57.859]                     tryCatch({
[16:20:57.859]                       saveRDS(object, file = pathname_tmp, ...)
[16:20:57.859]                     }, error = function(ex) {
[16:20:57.859]                       msg <- conditionMessage(ex)
[16:20:57.859]                       fi_tmp <- file.info(pathname_tmp)
[16:20:57.859]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:20:57.859]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:57.859]                         fi_tmp[["mtime"]], msg)
[16:20:57.859]                       ex$message <- msg
[16:20:57.859]                       stop(ex)
[16:20:57.859]                     })
[16:20:57.859]                     stopifnot(file_test("-f", pathname_tmp))
[16:20:57.859]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:20:57.859]                     if (!res || file_test("-f", pathname_tmp)) {
[16:20:57.859]                       fi_tmp <- file.info(pathname_tmp)
[16:20:57.859]                       fi <- file.info(pathname)
[16:20:57.859]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:20:57.859]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:57.859]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:20:57.859]                         fi[["size"]], fi[["mtime"]])
[16:20:57.859]                       stop(msg)
[16:20:57.859]                     }
[16:20:57.859]                     invisible(pathname)
[16:20:57.859]                   }
[16:20:57.859]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:20:57.859]                     rootPath = tempdir()) 
[16:20:57.859]                   {
[16:20:57.859]                     obj <- list(time = Sys.time(), condition = cond)
[16:20:57.859]                     file <- tempfile(pattern = class(cond)[1], 
[16:20:57.859]                       tmpdir = path, fileext = ".rds")
[16:20:57.859]                     save_rds(obj, file)
[16:20:57.859]                   }
[16:20:57.859]                   saveImmediateCondition(cond, path = "/tmp/RtmpnHcYVk/.future/immediateConditions")
[16:20:57.859]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:57.859]                   {
[16:20:57.859]                     inherits <- base::inherits
[16:20:57.859]                     invokeRestart <- base::invokeRestart
[16:20:57.859]                     is.null <- base::is.null
[16:20:57.859]                     muffled <- FALSE
[16:20:57.859]                     if (inherits(cond, "message")) {
[16:20:57.859]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:57.859]                       if (muffled) 
[16:20:57.859]                         invokeRestart("muffleMessage")
[16:20:57.859]                     }
[16:20:57.859]                     else if (inherits(cond, "warning")) {
[16:20:57.859]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:57.859]                       if (muffled) 
[16:20:57.859]                         invokeRestart("muffleWarning")
[16:20:57.859]                     }
[16:20:57.859]                     else if (inherits(cond, "condition")) {
[16:20:57.859]                       if (!is.null(pattern)) {
[16:20:57.859]                         computeRestarts <- base::computeRestarts
[16:20:57.859]                         grepl <- base::grepl
[16:20:57.859]                         restarts <- computeRestarts(cond)
[16:20:57.859]                         for (restart in restarts) {
[16:20:57.859]                           name <- restart$name
[16:20:57.859]                           if (is.null(name)) 
[16:20:57.859]                             next
[16:20:57.859]                           if (!grepl(pattern, name)) 
[16:20:57.859]                             next
[16:20:57.859]                           invokeRestart(restart)
[16:20:57.859]                           muffled <- TRUE
[16:20:57.859]                           break
[16:20:57.859]                         }
[16:20:57.859]                       }
[16:20:57.859]                     }
[16:20:57.859]                     invisible(muffled)
[16:20:57.859]                   }
[16:20:57.859]                   muffleCondition(cond)
[16:20:57.859]                 })
[16:20:57.859]             }))
[16:20:57.859]             future::FutureResult(value = ...future.value$value, 
[16:20:57.859]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:57.859]                   ...future.rng), globalenv = if (FALSE) 
[16:20:57.859]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:57.859]                     ...future.globalenv.names))
[16:20:57.859]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:57.859]         }, condition = base::local({
[16:20:57.859]             c <- base::c
[16:20:57.859]             inherits <- base::inherits
[16:20:57.859]             invokeRestart <- base::invokeRestart
[16:20:57.859]             length <- base::length
[16:20:57.859]             list <- base::list
[16:20:57.859]             seq.int <- base::seq.int
[16:20:57.859]             signalCondition <- base::signalCondition
[16:20:57.859]             sys.calls <- base::sys.calls
[16:20:57.859]             `[[` <- base::`[[`
[16:20:57.859]             `+` <- base::`+`
[16:20:57.859]             `<<-` <- base::`<<-`
[16:20:57.859]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:57.859]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:57.859]                   3L)]
[16:20:57.859]             }
[16:20:57.859]             function(cond) {
[16:20:57.859]                 is_error <- inherits(cond, "error")
[16:20:57.859]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:57.859]                   NULL)
[16:20:57.859]                 if (is_error) {
[16:20:57.859]                   sessionInformation <- function() {
[16:20:57.859]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:57.859]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:57.859]                       search = base::search(), system = base::Sys.info())
[16:20:57.859]                   }
[16:20:57.859]                   ...future.conditions[[length(...future.conditions) + 
[16:20:57.859]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:57.859]                     cond$call), session = sessionInformation(), 
[16:20:57.859]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:57.859]                   signalCondition(cond)
[16:20:57.859]                 }
[16:20:57.859]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:57.859]                 "immediateCondition"))) {
[16:20:57.859]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:57.859]                   ...future.conditions[[length(...future.conditions) + 
[16:20:57.859]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:57.859]                   if (TRUE && !signal) {
[16:20:57.859]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:57.859]                     {
[16:20:57.859]                       inherits <- base::inherits
[16:20:57.859]                       invokeRestart <- base::invokeRestart
[16:20:57.859]                       is.null <- base::is.null
[16:20:57.859]                       muffled <- FALSE
[16:20:57.859]                       if (inherits(cond, "message")) {
[16:20:57.859]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:57.859]                         if (muffled) 
[16:20:57.859]                           invokeRestart("muffleMessage")
[16:20:57.859]                       }
[16:20:57.859]                       else if (inherits(cond, "warning")) {
[16:20:57.859]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:57.859]                         if (muffled) 
[16:20:57.859]                           invokeRestart("muffleWarning")
[16:20:57.859]                       }
[16:20:57.859]                       else if (inherits(cond, "condition")) {
[16:20:57.859]                         if (!is.null(pattern)) {
[16:20:57.859]                           computeRestarts <- base::computeRestarts
[16:20:57.859]                           grepl <- base::grepl
[16:20:57.859]                           restarts <- computeRestarts(cond)
[16:20:57.859]                           for (restart in restarts) {
[16:20:57.859]                             name <- restart$name
[16:20:57.859]                             if (is.null(name)) 
[16:20:57.859]                               next
[16:20:57.859]                             if (!grepl(pattern, name)) 
[16:20:57.859]                               next
[16:20:57.859]                             invokeRestart(restart)
[16:20:57.859]                             muffled <- TRUE
[16:20:57.859]                             break
[16:20:57.859]                           }
[16:20:57.859]                         }
[16:20:57.859]                       }
[16:20:57.859]                       invisible(muffled)
[16:20:57.859]                     }
[16:20:57.859]                     muffleCondition(cond, pattern = "^muffle")
[16:20:57.859]                   }
[16:20:57.859]                 }
[16:20:57.859]                 else {
[16:20:57.859]                   if (TRUE) {
[16:20:57.859]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:57.859]                     {
[16:20:57.859]                       inherits <- base::inherits
[16:20:57.859]                       invokeRestart <- base::invokeRestart
[16:20:57.859]                       is.null <- base::is.null
[16:20:57.859]                       muffled <- FALSE
[16:20:57.859]                       if (inherits(cond, "message")) {
[16:20:57.859]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:57.859]                         if (muffled) 
[16:20:57.859]                           invokeRestart("muffleMessage")
[16:20:57.859]                       }
[16:20:57.859]                       else if (inherits(cond, "warning")) {
[16:20:57.859]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:57.859]                         if (muffled) 
[16:20:57.859]                           invokeRestart("muffleWarning")
[16:20:57.859]                       }
[16:20:57.859]                       else if (inherits(cond, "condition")) {
[16:20:57.859]                         if (!is.null(pattern)) {
[16:20:57.859]                           computeRestarts <- base::computeRestarts
[16:20:57.859]                           grepl <- base::grepl
[16:20:57.859]                           restarts <- computeRestarts(cond)
[16:20:57.859]                           for (restart in restarts) {
[16:20:57.859]                             name <- restart$name
[16:20:57.859]                             if (is.null(name)) 
[16:20:57.859]                               next
[16:20:57.859]                             if (!grepl(pattern, name)) 
[16:20:57.859]                               next
[16:20:57.859]                             invokeRestart(restart)
[16:20:57.859]                             muffled <- TRUE
[16:20:57.859]                             break
[16:20:57.859]                           }
[16:20:57.859]                         }
[16:20:57.859]                       }
[16:20:57.859]                       invisible(muffled)
[16:20:57.859]                     }
[16:20:57.859]                     muffleCondition(cond, pattern = "^muffle")
[16:20:57.859]                   }
[16:20:57.859]                 }
[16:20:57.859]             }
[16:20:57.859]         }))
[16:20:57.859]     }, error = function(ex) {
[16:20:57.859]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:57.859]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:57.859]                 ...future.rng), started = ...future.startTime, 
[16:20:57.859]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:57.859]             version = "1.8"), class = "FutureResult")
[16:20:57.859]     }, finally = {
[16:20:57.859]         if (!identical(...future.workdir, getwd())) 
[16:20:57.859]             setwd(...future.workdir)
[16:20:57.859]         {
[16:20:57.859]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:57.859]                 ...future.oldOptions$nwarnings <- NULL
[16:20:57.859]             }
[16:20:57.859]             base::options(...future.oldOptions)
[16:20:57.859]             if (.Platform$OS.type == "windows") {
[16:20:57.859]                 old_names <- names(...future.oldEnvVars)
[16:20:57.859]                 envs <- base::Sys.getenv()
[16:20:57.859]                 names <- names(envs)
[16:20:57.859]                 common <- intersect(names, old_names)
[16:20:57.859]                 added <- setdiff(names, old_names)
[16:20:57.859]                 removed <- setdiff(old_names, names)
[16:20:57.859]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:57.859]                   envs[common]]
[16:20:57.859]                 NAMES <- toupper(changed)
[16:20:57.859]                 args <- list()
[16:20:57.859]                 for (kk in seq_along(NAMES)) {
[16:20:57.859]                   name <- changed[[kk]]
[16:20:57.859]                   NAME <- NAMES[[kk]]
[16:20:57.859]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:57.859]                     next
[16:20:57.859]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:57.859]                 }
[16:20:57.859]                 NAMES <- toupper(added)
[16:20:57.859]                 for (kk in seq_along(NAMES)) {
[16:20:57.859]                   name <- added[[kk]]
[16:20:57.859]                   NAME <- NAMES[[kk]]
[16:20:57.859]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:57.859]                     next
[16:20:57.859]                   args[[name]] <- ""
[16:20:57.859]                 }
[16:20:57.859]                 NAMES <- toupper(removed)
[16:20:57.859]                 for (kk in seq_along(NAMES)) {
[16:20:57.859]                   name <- removed[[kk]]
[16:20:57.859]                   NAME <- NAMES[[kk]]
[16:20:57.859]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:57.859]                     next
[16:20:57.859]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:57.859]                 }
[16:20:57.859]                 if (length(args) > 0) 
[16:20:57.859]                   base::do.call(base::Sys.setenv, args = args)
[16:20:57.859]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:57.859]             }
[16:20:57.859]             else {
[16:20:57.859]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:57.859]             }
[16:20:57.859]             {
[16:20:57.859]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:57.859]                   0L) {
[16:20:57.859]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:57.859]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:57.859]                   base::options(opts)
[16:20:57.859]                 }
[16:20:57.859]                 {
[16:20:57.859]                   {
[16:20:57.859]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:57.859]                     NULL
[16:20:57.859]                   }
[16:20:57.859]                   options(future.plan = NULL)
[16:20:57.859]                   if (is.na(NA_character_)) 
[16:20:57.859]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:57.859]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:57.859]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:57.859]                     .init = FALSE)
[16:20:57.859]                 }
[16:20:57.859]             }
[16:20:57.859]         }
[16:20:57.859]     })
[16:20:57.859]     if (TRUE) {
[16:20:57.859]         base::sink(type = "output", split = FALSE)
[16:20:57.859]         if (TRUE) {
[16:20:57.859]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:57.859]         }
[16:20:57.859]         else {
[16:20:57.859]             ...future.result["stdout"] <- base::list(NULL)
[16:20:57.859]         }
[16:20:57.859]         base::close(...future.stdout)
[16:20:57.859]         ...future.stdout <- NULL
[16:20:57.859]     }
[16:20:57.859]     ...future.result$conditions <- ...future.conditions
[16:20:57.859]     ...future.result$finished <- base::Sys.time()
[16:20:57.859]     ...future.result
[16:20:57.859] }
[16:20:57.862] assign_globals() ...
[16:20:57.862] List of 1
[16:20:57.862]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[16:20:57.862]   .. ..@ .Data     :function (x)  
[16:20:57.862]   .. ..@ generic   : chr "my_fcn"
[16:20:57.862]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[16:20:57.862]   .. ..@ package   : chr ".GlobalEnv"
[16:20:57.862]   .. ..@ group     : list()
[16:20:57.862]   .. ..@ valueClass: chr(0) 
[16:20:57.862]   .. ..@ signature : chr "x"
[16:20:57.862]   .. ..@ default   : NULL
[16:20:57.862]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[16:20:57.862]  - attr(*, "where")=List of 1
[16:20:57.862]   ..$ my_fcn:<environment: R_EmptyEnv> 
[16:20:57.862]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:57.862]  - attr(*, "resolved")= logi FALSE
[16:20:57.862]  - attr(*, "total_size")= num 3936
[16:20:57.862]  - attr(*, "already-done")= logi TRUE
[16:20:57.867] - reassign environment for ‘my_fcn’
[16:20:57.867] - copied ‘my_fcn’ to environment
[16:20:57.868] assign_globals() ... done
[16:20:57.868] requestCore(): workers = 2
[16:20:57.869] MulticoreFuture started
[16:20:57.870] - Launch lazy future ... done
[16:20:57.870] run() for ‘MulticoreFuture’ ... done
[16:20:57.870] result() for MulticoreFuture ...
[16:20:57.870] plan(): Setting new future strategy stack:
[16:20:57.871] List of future strategies:
[16:20:57.871] 1. sequential:
[16:20:57.871]    - args: function (..., envir = parent.frame())
[16:20:57.871]    - tweaked: FALSE
[16:20:57.871]    - call: NULL
[16:20:57.871] plan(): nbrOfWorkers() = 1
[16:20:57.874] plan(): Setting new future strategy stack:
[16:20:57.874] List of future strategies:
[16:20:57.874] 1. multicore:
[16:20:57.874]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:20:57.874]    - tweaked: FALSE
[16:20:57.874]    - call: plan(strategy)
[16:20:57.879] plan(): nbrOfWorkers() = 2
[16:20:57.897] result() for MulticoreFuture ...
[16:20:57.897] result() for MulticoreFuture ... done
[16:20:57.898] signalConditions() ...
[16:20:57.898]  - include = ‘immediateCondition’
[16:20:57.898]  - exclude = 
[16:20:57.898]  - resignal = FALSE
[16:20:57.898]  - Number of conditions: 1
[16:20:57.899] signalConditions() ... done
[16:20:57.899] result() for MulticoreFuture ... done
[16:20:57.899] result() for MulticoreFuture ...
[16:20:57.899] result() for MulticoreFuture ... done
[16:20:57.900] signalConditions() ...
[16:20:57.900]  - include = ‘immediateCondition’
[16:20:57.900]  - exclude = 
[16:20:57.900]  - resignal = FALSE
[16:20:57.900]  - Number of conditions: 1
[16:20:57.901] signalConditions() ... done
[16:20:57.901] Future state: ‘finished’
[16:20:57.901] result() for MulticoreFuture ...
[16:20:57.901] result() for MulticoreFuture ... done
[16:20:57.901] signalConditions() ...
[16:20:57.901]  - include = ‘condition’
[16:20:57.901]  - exclude = ‘immediateCondition’
[16:20:57.901]  - resignal = TRUE
[16:20:57.902]  - Number of conditions: 1
[16:20:57.902]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:20:57.902] signalConditions() ... done
<simpleError in (function (classes, fdef, mtable) {    methods <- .findInheritedMethods(classes, fdef, mtable)    if (length(methods) == 1L)         return(methods[[1L]])    else if (length(methods) == 0L) {        cnames <- paste0("\"", vapply(classes, as.character,             ""), "\"", collapse = ", ")        stop(gettextf("unable to find an inherited method for function %s for signature %s",             sQuote(fdef@generic), sQuote(cnames)), domain = NA)    }    else stop("Internal error in finding inherited methods; didn't return a unique method",         domain = NA)})(list("numeric"), new("standardGeneric", .Data = function (x) standardGeneric("my_fcn"), generic = structure("my_fcn", package = ".GlobalEnv"),     package = ".GlobalEnv", group = list(), valueClass = character(0),     signature = "x", default = NULL, skeleton = (function (x)     stop(gettextf("invalid call in method dispatch to '%s' (no default method)",         "my_fcn"), domain = NA))(x)), <environment>): unable to find an inherited method for function ‘my_fcn’ for signature ‘"numeric"’>
Type of future: multisession
[16:20:57.903] plan(): Setting new future strategy stack:
[16:20:57.903] List of future strategies:
[16:20:57.903] 1. multisession:
[16:20:57.903]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:20:57.903]    - tweaked: FALSE
[16:20:57.903]    - call: plan(strategy)
[16:20:57.903] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:20:57.904] multisession:
[16:20:57.904] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:20:57.904] - tweaked: FALSE
[16:20:57.904] - call: plan(strategy)
[16:20:57.910] getGlobalsAndPackages() ...
[16:20:57.910] Not searching for globals
[16:20:57.911] - globals: [0] <none>
[16:20:57.911] getGlobalsAndPackages() ... DONE
[16:20:57.911] [local output] makeClusterPSOCK() ...
[16:20:57.953] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:20:57.954] [local output] Base port: 11891
[16:20:57.954] [local output] Getting setup options for 2 cluster nodes ...
[16:20:57.954] [local output]  - Node 1 of 2 ...
[16:20:57.955] [local output] localMachine=TRUE => revtunnel=FALSE

[16:20:57.955] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpnHcYVk/worker.rank=1.parallelly.parent=83414.145d624a207d6.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpnHcYVk/worker.rank=1.parallelly.parent=83414.145d624a207d6.pid")'’
[16:20:58.142] - Possible to infer worker's PID: TRUE
[16:20:58.142] [local output] Rscript port: 11891

[16:20:58.143] [local output]  - Node 2 of 2 ...
[16:20:58.143] [local output] localMachine=TRUE => revtunnel=FALSE

[16:20:58.144] [local output] Rscript port: 11891

[16:20:58.144] [local output] Getting setup options for 2 cluster nodes ... done
[16:20:58.144] [local output]  - Parallel setup requested for some PSOCK nodes
[16:20:58.145] [local output] Setting up PSOCK nodes in parallel
[16:20:58.145] List of 36
[16:20:58.145]  $ worker          : chr "localhost"
[16:20:58.145]   ..- attr(*, "localhost")= logi TRUE
[16:20:58.145]  $ master          : chr "localhost"
[16:20:58.145]  $ port            : int 11891
[16:20:58.145]  $ connectTimeout  : num 120
[16:20:58.145]  $ timeout         : num 2592000
[16:20:58.145]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:20:58.145]  $ homogeneous     : logi TRUE
[16:20:58.145]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:20:58.145]  $ rscript_envs    : NULL
[16:20:58.145]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:20:58.145]  $ rscript_startup : NULL
[16:20:58.145]  $ rscript_sh      : chr "sh"
[16:20:58.145]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:20:58.145]  $ methods         : logi TRUE
[16:20:58.145]  $ socketOptions   : chr "no-delay"
[16:20:58.145]  $ useXDR          : logi FALSE
[16:20:58.145]  $ outfile         : chr "/dev/null"
[16:20:58.145]  $ renice          : int NA
[16:20:58.145]  $ rshcmd          : NULL
[16:20:58.145]  $ user            : chr(0) 
[16:20:58.145]  $ revtunnel       : logi FALSE
[16:20:58.145]  $ rshlogfile      : NULL
[16:20:58.145]  $ rshopts         : chr(0) 
[16:20:58.145]  $ rank            : int 1
[16:20:58.145]  $ manual          : logi FALSE
[16:20:58.145]  $ dryrun          : logi FALSE
[16:20:58.145]  $ quiet           : logi FALSE
[16:20:58.145]  $ setup_strategy  : chr "parallel"
[16:20:58.145]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:20:58.145]  $ pidfile         : chr "/tmp/RtmpnHcYVk/worker.rank=1.parallelly.parent=83414.145d624a207d6.pid"
[16:20:58.145]  $ rshcmd_label    : NULL
[16:20:58.145]  $ rsh_call        : NULL
[16:20:58.145]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:20:58.145]  $ localMachine    : logi TRUE
[16:20:58.145]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:20:58.145]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:20:58.145]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:20:58.145]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:20:58.145]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:20:58.145]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:20:58.145]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:20:58.145]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:20:58.145]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:20:58.145]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:20:58.145]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:20:58.145]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:20:58.145]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:20:58.145]  $ arguments       :List of 28
[16:20:58.145]   ..$ worker          : chr "localhost"
[16:20:58.145]   ..$ master          : NULL
[16:20:58.145]   ..$ port            : int 11891
[16:20:58.145]   ..$ connectTimeout  : num 120
[16:20:58.145]   ..$ timeout         : num 2592000
[16:20:58.145]   ..$ rscript         : NULL
[16:20:58.145]   ..$ homogeneous     : NULL
[16:20:58.145]   ..$ rscript_args    : NULL
[16:20:58.145]   ..$ rscript_envs    : NULL
[16:20:58.145]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:20:58.145]   ..$ rscript_startup : NULL
[16:20:58.145]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:20:58.145]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:20:58.145]   ..$ methods         : logi TRUE
[16:20:58.145]   ..$ socketOptions   : chr "no-delay"
[16:20:58.145]   ..$ useXDR          : logi FALSE
[16:20:58.145]   ..$ outfile         : chr "/dev/null"
[16:20:58.145]   ..$ renice          : int NA
[16:20:58.145]   ..$ rshcmd          : NULL
[16:20:58.145]   ..$ user            : NULL
[16:20:58.145]   ..$ revtunnel       : logi NA
[16:20:58.145]   ..$ rshlogfile      : NULL
[16:20:58.145]   ..$ rshopts         : NULL
[16:20:58.145]   ..$ rank            : int 1
[16:20:58.145]   ..$ manual          : logi FALSE
[16:20:58.145]   ..$ dryrun          : logi FALSE
[16:20:58.145]   ..$ quiet           : logi FALSE
[16:20:58.145]   ..$ setup_strategy  : chr "parallel"
[16:20:58.145]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:20:58.162] [local output] System call to launch all workers:
[16:20:58.162] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpnHcYVk/worker.rank=1.parallelly.parent=83414.145d624a207d6.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11891 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:20:58.162] [local output] Starting PSOCK main server
[16:20:58.168] [local output] Workers launched
[16:20:58.168] [local output] Waiting for workers to connect back
[16:20:58.169]  - [local output] 0 workers out of 2 ready
[16:20:58.413]  - [local output] 0 workers out of 2 ready
[16:20:58.414]  - [local output] 1 workers out of 2 ready
[16:20:58.416]  - [local output] 1 workers out of 2 ready
[16:20:58.417]  - [local output] 2 workers out of 2 ready
[16:20:58.417] [local output] Launching of workers completed
[16:20:58.417] [local output] Collecting session information from workers
[16:20:58.418] [local output]  - Worker #1 of 2
[16:20:58.419] [local output]  - Worker #2 of 2
[16:20:58.419] [local output] makeClusterPSOCK() ... done
[16:20:58.431] Packages needed by the future expression (n = 0): <none>
[16:20:58.431] Packages needed by future strategies (n = 0): <none>
[16:20:58.431] {
[16:20:58.431]     {
[16:20:58.431]         {
[16:20:58.431]             ...future.startTime <- base::Sys.time()
[16:20:58.431]             {
[16:20:58.431]                 {
[16:20:58.431]                   {
[16:20:58.431]                     {
[16:20:58.431]                       base::local({
[16:20:58.431]                         has_future <- base::requireNamespace("future", 
[16:20:58.431]                           quietly = TRUE)
[16:20:58.431]                         if (has_future) {
[16:20:58.431]                           ns <- base::getNamespace("future")
[16:20:58.431]                           version <- ns[[".package"]][["version"]]
[16:20:58.431]                           if (is.null(version)) 
[16:20:58.431]                             version <- utils::packageVersion("future")
[16:20:58.431]                         }
[16:20:58.431]                         else {
[16:20:58.431]                           version <- NULL
[16:20:58.431]                         }
[16:20:58.431]                         if (!has_future || version < "1.8.0") {
[16:20:58.431]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:58.431]                             "", base::R.version$version.string), 
[16:20:58.431]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:58.431]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:58.431]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:58.431]                               "release", "version")], collapse = " "), 
[16:20:58.431]                             hostname = base::Sys.info()[["nodename"]])
[16:20:58.431]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:58.431]                             info)
[16:20:58.431]                           info <- base::paste(info, collapse = "; ")
[16:20:58.431]                           if (!has_future) {
[16:20:58.431]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:58.431]                               info)
[16:20:58.431]                           }
[16:20:58.431]                           else {
[16:20:58.431]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:58.431]                               info, version)
[16:20:58.431]                           }
[16:20:58.431]                           base::stop(msg)
[16:20:58.431]                         }
[16:20:58.431]                       })
[16:20:58.431]                     }
[16:20:58.431]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:58.431]                     base::options(mc.cores = 1L)
[16:20:58.431]                   }
[16:20:58.431]                   ...future.strategy.old <- future::plan("list")
[16:20:58.431]                   options(future.plan = NULL)
[16:20:58.431]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:58.431]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:58.431]                 }
[16:20:58.431]                 ...future.workdir <- getwd()
[16:20:58.431]             }
[16:20:58.431]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:58.431]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:58.431]         }
[16:20:58.431]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:58.431]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:58.431]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:58.431]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:58.431]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:58.431]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:58.431]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:58.431]             base::names(...future.oldOptions))
[16:20:58.431]     }
[16:20:58.431]     if (FALSE) {
[16:20:58.431]     }
[16:20:58.431]     else {
[16:20:58.431]         if (TRUE) {
[16:20:58.431]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:58.431]                 open = "w")
[16:20:58.431]         }
[16:20:58.431]         else {
[16:20:58.431]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:58.431]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:58.431]         }
[16:20:58.431]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:58.431]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:58.431]             base::sink(type = "output", split = FALSE)
[16:20:58.431]             base::close(...future.stdout)
[16:20:58.431]         }, add = TRUE)
[16:20:58.431]     }
[16:20:58.431]     ...future.frame <- base::sys.nframe()
[16:20:58.431]     ...future.conditions <- base::list()
[16:20:58.431]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:58.431]     if (FALSE) {
[16:20:58.431]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:58.431]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:58.431]     }
[16:20:58.431]     ...future.result <- base::tryCatch({
[16:20:58.431]         base::withCallingHandlers({
[16:20:58.431]             ...future.value <- base::withVisible(base::local({
[16:20:58.431]                 ...future.makeSendCondition <- base::local({
[16:20:58.431]                   sendCondition <- NULL
[16:20:58.431]                   function(frame = 1L) {
[16:20:58.431]                     if (is.function(sendCondition)) 
[16:20:58.431]                       return(sendCondition)
[16:20:58.431]                     ns <- getNamespace("parallel")
[16:20:58.431]                     if (exists("sendData", mode = "function", 
[16:20:58.431]                       envir = ns)) {
[16:20:58.431]                       parallel_sendData <- get("sendData", mode = "function", 
[16:20:58.431]                         envir = ns)
[16:20:58.431]                       envir <- sys.frame(frame)
[16:20:58.431]                       master <- NULL
[16:20:58.431]                       while (!identical(envir, .GlobalEnv) && 
[16:20:58.431]                         !identical(envir, emptyenv())) {
[16:20:58.431]                         if (exists("master", mode = "list", envir = envir, 
[16:20:58.431]                           inherits = FALSE)) {
[16:20:58.431]                           master <- get("master", mode = "list", 
[16:20:58.431]                             envir = envir, inherits = FALSE)
[16:20:58.431]                           if (inherits(master, c("SOCKnode", 
[16:20:58.431]                             "SOCK0node"))) {
[16:20:58.431]                             sendCondition <<- function(cond) {
[16:20:58.431]                               data <- list(type = "VALUE", value = cond, 
[16:20:58.431]                                 success = TRUE)
[16:20:58.431]                               parallel_sendData(master, data)
[16:20:58.431]                             }
[16:20:58.431]                             return(sendCondition)
[16:20:58.431]                           }
[16:20:58.431]                         }
[16:20:58.431]                         frame <- frame + 1L
[16:20:58.431]                         envir <- sys.frame(frame)
[16:20:58.431]                       }
[16:20:58.431]                     }
[16:20:58.431]                     sendCondition <<- function(cond) NULL
[16:20:58.431]                   }
[16:20:58.431]                 })
[16:20:58.431]                 withCallingHandlers({
[16:20:58.431]                   NA
[16:20:58.431]                 }, immediateCondition = function(cond) {
[16:20:58.431]                   sendCondition <- ...future.makeSendCondition()
[16:20:58.431]                   sendCondition(cond)
[16:20:58.431]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:58.431]                   {
[16:20:58.431]                     inherits <- base::inherits
[16:20:58.431]                     invokeRestart <- base::invokeRestart
[16:20:58.431]                     is.null <- base::is.null
[16:20:58.431]                     muffled <- FALSE
[16:20:58.431]                     if (inherits(cond, "message")) {
[16:20:58.431]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:58.431]                       if (muffled) 
[16:20:58.431]                         invokeRestart("muffleMessage")
[16:20:58.431]                     }
[16:20:58.431]                     else if (inherits(cond, "warning")) {
[16:20:58.431]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:58.431]                       if (muffled) 
[16:20:58.431]                         invokeRestart("muffleWarning")
[16:20:58.431]                     }
[16:20:58.431]                     else if (inherits(cond, "condition")) {
[16:20:58.431]                       if (!is.null(pattern)) {
[16:20:58.431]                         computeRestarts <- base::computeRestarts
[16:20:58.431]                         grepl <- base::grepl
[16:20:58.431]                         restarts <- computeRestarts(cond)
[16:20:58.431]                         for (restart in restarts) {
[16:20:58.431]                           name <- restart$name
[16:20:58.431]                           if (is.null(name)) 
[16:20:58.431]                             next
[16:20:58.431]                           if (!grepl(pattern, name)) 
[16:20:58.431]                             next
[16:20:58.431]                           invokeRestart(restart)
[16:20:58.431]                           muffled <- TRUE
[16:20:58.431]                           break
[16:20:58.431]                         }
[16:20:58.431]                       }
[16:20:58.431]                     }
[16:20:58.431]                     invisible(muffled)
[16:20:58.431]                   }
[16:20:58.431]                   muffleCondition(cond)
[16:20:58.431]                 })
[16:20:58.431]             }))
[16:20:58.431]             future::FutureResult(value = ...future.value$value, 
[16:20:58.431]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:58.431]                   ...future.rng), globalenv = if (FALSE) 
[16:20:58.431]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:58.431]                     ...future.globalenv.names))
[16:20:58.431]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:58.431]         }, condition = base::local({
[16:20:58.431]             c <- base::c
[16:20:58.431]             inherits <- base::inherits
[16:20:58.431]             invokeRestart <- base::invokeRestart
[16:20:58.431]             length <- base::length
[16:20:58.431]             list <- base::list
[16:20:58.431]             seq.int <- base::seq.int
[16:20:58.431]             signalCondition <- base::signalCondition
[16:20:58.431]             sys.calls <- base::sys.calls
[16:20:58.431]             `[[` <- base::`[[`
[16:20:58.431]             `+` <- base::`+`
[16:20:58.431]             `<<-` <- base::`<<-`
[16:20:58.431]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:58.431]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:58.431]                   3L)]
[16:20:58.431]             }
[16:20:58.431]             function(cond) {
[16:20:58.431]                 is_error <- inherits(cond, "error")
[16:20:58.431]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:58.431]                   NULL)
[16:20:58.431]                 if (is_error) {
[16:20:58.431]                   sessionInformation <- function() {
[16:20:58.431]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:58.431]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:58.431]                       search = base::search(), system = base::Sys.info())
[16:20:58.431]                   }
[16:20:58.431]                   ...future.conditions[[length(...future.conditions) + 
[16:20:58.431]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:58.431]                     cond$call), session = sessionInformation(), 
[16:20:58.431]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:58.431]                   signalCondition(cond)
[16:20:58.431]                 }
[16:20:58.431]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:58.431]                 "immediateCondition"))) {
[16:20:58.431]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:58.431]                   ...future.conditions[[length(...future.conditions) + 
[16:20:58.431]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:58.431]                   if (TRUE && !signal) {
[16:20:58.431]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:58.431]                     {
[16:20:58.431]                       inherits <- base::inherits
[16:20:58.431]                       invokeRestart <- base::invokeRestart
[16:20:58.431]                       is.null <- base::is.null
[16:20:58.431]                       muffled <- FALSE
[16:20:58.431]                       if (inherits(cond, "message")) {
[16:20:58.431]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:58.431]                         if (muffled) 
[16:20:58.431]                           invokeRestart("muffleMessage")
[16:20:58.431]                       }
[16:20:58.431]                       else if (inherits(cond, "warning")) {
[16:20:58.431]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:58.431]                         if (muffled) 
[16:20:58.431]                           invokeRestart("muffleWarning")
[16:20:58.431]                       }
[16:20:58.431]                       else if (inherits(cond, "condition")) {
[16:20:58.431]                         if (!is.null(pattern)) {
[16:20:58.431]                           computeRestarts <- base::computeRestarts
[16:20:58.431]                           grepl <- base::grepl
[16:20:58.431]                           restarts <- computeRestarts(cond)
[16:20:58.431]                           for (restart in restarts) {
[16:20:58.431]                             name <- restart$name
[16:20:58.431]                             if (is.null(name)) 
[16:20:58.431]                               next
[16:20:58.431]                             if (!grepl(pattern, name)) 
[16:20:58.431]                               next
[16:20:58.431]                             invokeRestart(restart)
[16:20:58.431]                             muffled <- TRUE
[16:20:58.431]                             break
[16:20:58.431]                           }
[16:20:58.431]                         }
[16:20:58.431]                       }
[16:20:58.431]                       invisible(muffled)
[16:20:58.431]                     }
[16:20:58.431]                     muffleCondition(cond, pattern = "^muffle")
[16:20:58.431]                   }
[16:20:58.431]                 }
[16:20:58.431]                 else {
[16:20:58.431]                   if (TRUE) {
[16:20:58.431]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:58.431]                     {
[16:20:58.431]                       inherits <- base::inherits
[16:20:58.431]                       invokeRestart <- base::invokeRestart
[16:20:58.431]                       is.null <- base::is.null
[16:20:58.431]                       muffled <- FALSE
[16:20:58.431]                       if (inherits(cond, "message")) {
[16:20:58.431]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:58.431]                         if (muffled) 
[16:20:58.431]                           invokeRestart("muffleMessage")
[16:20:58.431]                       }
[16:20:58.431]                       else if (inherits(cond, "warning")) {
[16:20:58.431]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:58.431]                         if (muffled) 
[16:20:58.431]                           invokeRestart("muffleWarning")
[16:20:58.431]                       }
[16:20:58.431]                       else if (inherits(cond, "condition")) {
[16:20:58.431]                         if (!is.null(pattern)) {
[16:20:58.431]                           computeRestarts <- base::computeRestarts
[16:20:58.431]                           grepl <- base::grepl
[16:20:58.431]                           restarts <- computeRestarts(cond)
[16:20:58.431]                           for (restart in restarts) {
[16:20:58.431]                             name <- restart$name
[16:20:58.431]                             if (is.null(name)) 
[16:20:58.431]                               next
[16:20:58.431]                             if (!grepl(pattern, name)) 
[16:20:58.431]                               next
[16:20:58.431]                             invokeRestart(restart)
[16:20:58.431]                             muffled <- TRUE
[16:20:58.431]                             break
[16:20:58.431]                           }
[16:20:58.431]                         }
[16:20:58.431]                       }
[16:20:58.431]                       invisible(muffled)
[16:20:58.431]                     }
[16:20:58.431]                     muffleCondition(cond, pattern = "^muffle")
[16:20:58.431]                   }
[16:20:58.431]                 }
[16:20:58.431]             }
[16:20:58.431]         }))
[16:20:58.431]     }, error = function(ex) {
[16:20:58.431]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:58.431]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:58.431]                 ...future.rng), started = ...future.startTime, 
[16:20:58.431]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:58.431]             version = "1.8"), class = "FutureResult")
[16:20:58.431]     }, finally = {
[16:20:58.431]         if (!identical(...future.workdir, getwd())) 
[16:20:58.431]             setwd(...future.workdir)
[16:20:58.431]         {
[16:20:58.431]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:58.431]                 ...future.oldOptions$nwarnings <- NULL
[16:20:58.431]             }
[16:20:58.431]             base::options(...future.oldOptions)
[16:20:58.431]             if (.Platform$OS.type == "windows") {
[16:20:58.431]                 old_names <- names(...future.oldEnvVars)
[16:20:58.431]                 envs <- base::Sys.getenv()
[16:20:58.431]                 names <- names(envs)
[16:20:58.431]                 common <- intersect(names, old_names)
[16:20:58.431]                 added <- setdiff(names, old_names)
[16:20:58.431]                 removed <- setdiff(old_names, names)
[16:20:58.431]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:58.431]                   envs[common]]
[16:20:58.431]                 NAMES <- toupper(changed)
[16:20:58.431]                 args <- list()
[16:20:58.431]                 for (kk in seq_along(NAMES)) {
[16:20:58.431]                   name <- changed[[kk]]
[16:20:58.431]                   NAME <- NAMES[[kk]]
[16:20:58.431]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:58.431]                     next
[16:20:58.431]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:58.431]                 }
[16:20:58.431]                 NAMES <- toupper(added)
[16:20:58.431]                 for (kk in seq_along(NAMES)) {
[16:20:58.431]                   name <- added[[kk]]
[16:20:58.431]                   NAME <- NAMES[[kk]]
[16:20:58.431]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:58.431]                     next
[16:20:58.431]                   args[[name]] <- ""
[16:20:58.431]                 }
[16:20:58.431]                 NAMES <- toupper(removed)
[16:20:58.431]                 for (kk in seq_along(NAMES)) {
[16:20:58.431]                   name <- removed[[kk]]
[16:20:58.431]                   NAME <- NAMES[[kk]]
[16:20:58.431]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:58.431]                     next
[16:20:58.431]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:58.431]                 }
[16:20:58.431]                 if (length(args) > 0) 
[16:20:58.431]                   base::do.call(base::Sys.setenv, args = args)
[16:20:58.431]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:58.431]             }
[16:20:58.431]             else {
[16:20:58.431]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:58.431]             }
[16:20:58.431]             {
[16:20:58.431]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:58.431]                   0L) {
[16:20:58.431]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:58.431]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:58.431]                   base::options(opts)
[16:20:58.431]                 }
[16:20:58.431]                 {
[16:20:58.431]                   {
[16:20:58.431]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:58.431]                     NULL
[16:20:58.431]                   }
[16:20:58.431]                   options(future.plan = NULL)
[16:20:58.431]                   if (is.na(NA_character_)) 
[16:20:58.431]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:58.431]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:58.431]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:58.431]                     .init = FALSE)
[16:20:58.431]                 }
[16:20:58.431]             }
[16:20:58.431]         }
[16:20:58.431]     })
[16:20:58.431]     if (TRUE) {
[16:20:58.431]         base::sink(type = "output", split = FALSE)
[16:20:58.431]         if (TRUE) {
[16:20:58.431]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:58.431]         }
[16:20:58.431]         else {
[16:20:58.431]             ...future.result["stdout"] <- base::list(NULL)
[16:20:58.431]         }
[16:20:58.431]         base::close(...future.stdout)
[16:20:58.431]         ...future.stdout <- NULL
[16:20:58.431]     }
[16:20:58.431]     ...future.result$conditions <- ...future.conditions
[16:20:58.431]     ...future.result$finished <- base::Sys.time()
[16:20:58.431]     ...future.result
[16:20:58.431] }
[16:20:58.485] MultisessionFuture started
[16:20:58.485] result() for ClusterFuture ...
[16:20:58.486] receiveMessageFromWorker() for ClusterFuture ...
[16:20:58.486] - Validating connection of MultisessionFuture
[16:20:58.519] - received message: FutureResult
[16:20:58.519] - Received FutureResult
[16:20:58.520] - Erased future from FutureRegistry
[16:20:58.520] result() for ClusterFuture ...
[16:20:58.520] - result already collected: FutureResult
[16:20:58.520] result() for ClusterFuture ... done
[16:20:58.520] receiveMessageFromWorker() for ClusterFuture ... done
[16:20:58.520] result() for ClusterFuture ... done
[16:20:58.520] result() for ClusterFuture ...
[16:20:58.520] - result already collected: FutureResult
[16:20:58.521] result() for ClusterFuture ... done
[16:20:58.521] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:20:58.525] plan(): nbrOfWorkers() = 2
[16:20:58.525] getGlobalsAndPackages() ...
[16:20:58.525] Searching for globals...
[16:20:58.528] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[16:20:58.528] Searching for globals ... DONE
[16:20:58.528] Resolving globals: FALSE
[16:20:58.529] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[16:20:58.529] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[16:20:58.529] - globals: [1] ‘my_fcn’
[16:20:58.529] 
[16:20:58.530] getGlobalsAndPackages() ... DONE
[16:20:58.530] run() for ‘Future’ ...
[16:20:58.530] - state: ‘created’
[16:20:58.530] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:20:58.545] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:58.545] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:20:58.545]   - Field: ‘node’
[16:20:58.545]   - Field: ‘label’
[16:20:58.545]   - Field: ‘local’
[16:20:58.545]   - Field: ‘owner’
[16:20:58.545]   - Field: ‘envir’
[16:20:58.545]   - Field: ‘workers’
[16:20:58.546]   - Field: ‘packages’
[16:20:58.546]   - Field: ‘gc’
[16:20:58.546]   - Field: ‘conditions’
[16:20:58.546]   - Field: ‘persistent’
[16:20:58.546]   - Field: ‘expr’
[16:20:58.546]   - Field: ‘uuid’
[16:20:58.546]   - Field: ‘seed’
[16:20:58.546]   - Field: ‘version’
[16:20:58.547]   - Field: ‘result’
[16:20:58.547]   - Field: ‘asynchronous’
[16:20:58.547]   - Field: ‘calls’
[16:20:58.547]   - Field: ‘globals’
[16:20:58.547]   - Field: ‘stdout’
[16:20:58.547]   - Field: ‘earlySignal’
[16:20:58.547]   - Field: ‘lazy’
[16:20:58.547]   - Field: ‘state’
[16:20:58.547] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:20:58.548] - Launch lazy future ...
[16:20:58.548] Packages needed by the future expression (n = 0): <none>
[16:20:58.548] Packages needed by future strategies (n = 0): <none>
[16:20:58.549] {
[16:20:58.549]     {
[16:20:58.549]         {
[16:20:58.549]             ...future.startTime <- base::Sys.time()
[16:20:58.549]             {
[16:20:58.549]                 {
[16:20:58.549]                   {
[16:20:58.549]                     {
[16:20:58.549]                       base::local({
[16:20:58.549]                         has_future <- base::requireNamespace("future", 
[16:20:58.549]                           quietly = TRUE)
[16:20:58.549]                         if (has_future) {
[16:20:58.549]                           ns <- base::getNamespace("future")
[16:20:58.549]                           version <- ns[[".package"]][["version"]]
[16:20:58.549]                           if (is.null(version)) 
[16:20:58.549]                             version <- utils::packageVersion("future")
[16:20:58.549]                         }
[16:20:58.549]                         else {
[16:20:58.549]                           version <- NULL
[16:20:58.549]                         }
[16:20:58.549]                         if (!has_future || version < "1.8.0") {
[16:20:58.549]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:58.549]                             "", base::R.version$version.string), 
[16:20:58.549]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:58.549]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:58.549]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:58.549]                               "release", "version")], collapse = " "), 
[16:20:58.549]                             hostname = base::Sys.info()[["nodename"]])
[16:20:58.549]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:58.549]                             info)
[16:20:58.549]                           info <- base::paste(info, collapse = "; ")
[16:20:58.549]                           if (!has_future) {
[16:20:58.549]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:58.549]                               info)
[16:20:58.549]                           }
[16:20:58.549]                           else {
[16:20:58.549]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:58.549]                               info, version)
[16:20:58.549]                           }
[16:20:58.549]                           base::stop(msg)
[16:20:58.549]                         }
[16:20:58.549]                       })
[16:20:58.549]                     }
[16:20:58.549]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:58.549]                     base::options(mc.cores = 1L)
[16:20:58.549]                   }
[16:20:58.549]                   ...future.strategy.old <- future::plan("list")
[16:20:58.549]                   options(future.plan = NULL)
[16:20:58.549]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:58.549]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:58.549]                 }
[16:20:58.549]                 ...future.workdir <- getwd()
[16:20:58.549]             }
[16:20:58.549]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:58.549]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:58.549]         }
[16:20:58.549]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:58.549]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:58.549]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:58.549]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:58.549]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:58.549]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:58.549]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:58.549]             base::names(...future.oldOptions))
[16:20:58.549]     }
[16:20:58.549]     if (FALSE) {
[16:20:58.549]     }
[16:20:58.549]     else {
[16:20:58.549]         if (TRUE) {
[16:20:58.549]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:58.549]                 open = "w")
[16:20:58.549]         }
[16:20:58.549]         else {
[16:20:58.549]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:58.549]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:58.549]         }
[16:20:58.549]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:58.549]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:58.549]             base::sink(type = "output", split = FALSE)
[16:20:58.549]             base::close(...future.stdout)
[16:20:58.549]         }, add = TRUE)
[16:20:58.549]     }
[16:20:58.549]     ...future.frame <- base::sys.nframe()
[16:20:58.549]     ...future.conditions <- base::list()
[16:20:58.549]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:58.549]     if (FALSE) {
[16:20:58.549]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:58.549]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:58.549]     }
[16:20:58.549]     ...future.result <- base::tryCatch({
[16:20:58.549]         base::withCallingHandlers({
[16:20:58.549]             ...future.value <- base::withVisible(base::local({
[16:20:58.549]                 ...future.makeSendCondition <- base::local({
[16:20:58.549]                   sendCondition <- NULL
[16:20:58.549]                   function(frame = 1L) {
[16:20:58.549]                     if (is.function(sendCondition)) 
[16:20:58.549]                       return(sendCondition)
[16:20:58.549]                     ns <- getNamespace("parallel")
[16:20:58.549]                     if (exists("sendData", mode = "function", 
[16:20:58.549]                       envir = ns)) {
[16:20:58.549]                       parallel_sendData <- get("sendData", mode = "function", 
[16:20:58.549]                         envir = ns)
[16:20:58.549]                       envir <- sys.frame(frame)
[16:20:58.549]                       master <- NULL
[16:20:58.549]                       while (!identical(envir, .GlobalEnv) && 
[16:20:58.549]                         !identical(envir, emptyenv())) {
[16:20:58.549]                         if (exists("master", mode = "list", envir = envir, 
[16:20:58.549]                           inherits = FALSE)) {
[16:20:58.549]                           master <- get("master", mode = "list", 
[16:20:58.549]                             envir = envir, inherits = FALSE)
[16:20:58.549]                           if (inherits(master, c("SOCKnode", 
[16:20:58.549]                             "SOCK0node"))) {
[16:20:58.549]                             sendCondition <<- function(cond) {
[16:20:58.549]                               data <- list(type = "VALUE", value = cond, 
[16:20:58.549]                                 success = TRUE)
[16:20:58.549]                               parallel_sendData(master, data)
[16:20:58.549]                             }
[16:20:58.549]                             return(sendCondition)
[16:20:58.549]                           }
[16:20:58.549]                         }
[16:20:58.549]                         frame <- frame + 1L
[16:20:58.549]                         envir <- sys.frame(frame)
[16:20:58.549]                       }
[16:20:58.549]                     }
[16:20:58.549]                     sendCondition <<- function(cond) NULL
[16:20:58.549]                   }
[16:20:58.549]                 })
[16:20:58.549]                 withCallingHandlers({
[16:20:58.549]                   {
[16:20:58.549]                     my_fcn
[16:20:58.549]                   }
[16:20:58.549]                 }, immediateCondition = function(cond) {
[16:20:58.549]                   sendCondition <- ...future.makeSendCondition()
[16:20:58.549]                   sendCondition(cond)
[16:20:58.549]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:58.549]                   {
[16:20:58.549]                     inherits <- base::inherits
[16:20:58.549]                     invokeRestart <- base::invokeRestart
[16:20:58.549]                     is.null <- base::is.null
[16:20:58.549]                     muffled <- FALSE
[16:20:58.549]                     if (inherits(cond, "message")) {
[16:20:58.549]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:58.549]                       if (muffled) 
[16:20:58.549]                         invokeRestart("muffleMessage")
[16:20:58.549]                     }
[16:20:58.549]                     else if (inherits(cond, "warning")) {
[16:20:58.549]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:58.549]                       if (muffled) 
[16:20:58.549]                         invokeRestart("muffleWarning")
[16:20:58.549]                     }
[16:20:58.549]                     else if (inherits(cond, "condition")) {
[16:20:58.549]                       if (!is.null(pattern)) {
[16:20:58.549]                         computeRestarts <- base::computeRestarts
[16:20:58.549]                         grepl <- base::grepl
[16:20:58.549]                         restarts <- computeRestarts(cond)
[16:20:58.549]                         for (restart in restarts) {
[16:20:58.549]                           name <- restart$name
[16:20:58.549]                           if (is.null(name)) 
[16:20:58.549]                             next
[16:20:58.549]                           if (!grepl(pattern, name)) 
[16:20:58.549]                             next
[16:20:58.549]                           invokeRestart(restart)
[16:20:58.549]                           muffled <- TRUE
[16:20:58.549]                           break
[16:20:58.549]                         }
[16:20:58.549]                       }
[16:20:58.549]                     }
[16:20:58.549]                     invisible(muffled)
[16:20:58.549]                   }
[16:20:58.549]                   muffleCondition(cond)
[16:20:58.549]                 })
[16:20:58.549]             }))
[16:20:58.549]             future::FutureResult(value = ...future.value$value, 
[16:20:58.549]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:58.549]                   ...future.rng), globalenv = if (FALSE) 
[16:20:58.549]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:58.549]                     ...future.globalenv.names))
[16:20:58.549]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:58.549]         }, condition = base::local({
[16:20:58.549]             c <- base::c
[16:20:58.549]             inherits <- base::inherits
[16:20:58.549]             invokeRestart <- base::invokeRestart
[16:20:58.549]             length <- base::length
[16:20:58.549]             list <- base::list
[16:20:58.549]             seq.int <- base::seq.int
[16:20:58.549]             signalCondition <- base::signalCondition
[16:20:58.549]             sys.calls <- base::sys.calls
[16:20:58.549]             `[[` <- base::`[[`
[16:20:58.549]             `+` <- base::`+`
[16:20:58.549]             `<<-` <- base::`<<-`
[16:20:58.549]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:58.549]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:58.549]                   3L)]
[16:20:58.549]             }
[16:20:58.549]             function(cond) {
[16:20:58.549]                 is_error <- inherits(cond, "error")
[16:20:58.549]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:58.549]                   NULL)
[16:20:58.549]                 if (is_error) {
[16:20:58.549]                   sessionInformation <- function() {
[16:20:58.549]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:58.549]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:58.549]                       search = base::search(), system = base::Sys.info())
[16:20:58.549]                   }
[16:20:58.549]                   ...future.conditions[[length(...future.conditions) + 
[16:20:58.549]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:58.549]                     cond$call), session = sessionInformation(), 
[16:20:58.549]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:58.549]                   signalCondition(cond)
[16:20:58.549]                 }
[16:20:58.549]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:58.549]                 "immediateCondition"))) {
[16:20:58.549]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:58.549]                   ...future.conditions[[length(...future.conditions) + 
[16:20:58.549]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:58.549]                   if (TRUE && !signal) {
[16:20:58.549]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:58.549]                     {
[16:20:58.549]                       inherits <- base::inherits
[16:20:58.549]                       invokeRestart <- base::invokeRestart
[16:20:58.549]                       is.null <- base::is.null
[16:20:58.549]                       muffled <- FALSE
[16:20:58.549]                       if (inherits(cond, "message")) {
[16:20:58.549]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:58.549]                         if (muffled) 
[16:20:58.549]                           invokeRestart("muffleMessage")
[16:20:58.549]                       }
[16:20:58.549]                       else if (inherits(cond, "warning")) {
[16:20:58.549]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:58.549]                         if (muffled) 
[16:20:58.549]                           invokeRestart("muffleWarning")
[16:20:58.549]                       }
[16:20:58.549]                       else if (inherits(cond, "condition")) {
[16:20:58.549]                         if (!is.null(pattern)) {
[16:20:58.549]                           computeRestarts <- base::computeRestarts
[16:20:58.549]                           grepl <- base::grepl
[16:20:58.549]                           restarts <- computeRestarts(cond)
[16:20:58.549]                           for (restart in restarts) {
[16:20:58.549]                             name <- restart$name
[16:20:58.549]                             if (is.null(name)) 
[16:20:58.549]                               next
[16:20:58.549]                             if (!grepl(pattern, name)) 
[16:20:58.549]                               next
[16:20:58.549]                             invokeRestart(restart)
[16:20:58.549]                             muffled <- TRUE
[16:20:58.549]                             break
[16:20:58.549]                           }
[16:20:58.549]                         }
[16:20:58.549]                       }
[16:20:58.549]                       invisible(muffled)
[16:20:58.549]                     }
[16:20:58.549]                     muffleCondition(cond, pattern = "^muffle")
[16:20:58.549]                   }
[16:20:58.549]                 }
[16:20:58.549]                 else {
[16:20:58.549]                   if (TRUE) {
[16:20:58.549]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:58.549]                     {
[16:20:58.549]                       inherits <- base::inherits
[16:20:58.549]                       invokeRestart <- base::invokeRestart
[16:20:58.549]                       is.null <- base::is.null
[16:20:58.549]                       muffled <- FALSE
[16:20:58.549]                       if (inherits(cond, "message")) {
[16:20:58.549]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:58.549]                         if (muffled) 
[16:20:58.549]                           invokeRestart("muffleMessage")
[16:20:58.549]                       }
[16:20:58.549]                       else if (inherits(cond, "warning")) {
[16:20:58.549]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:58.549]                         if (muffled) 
[16:20:58.549]                           invokeRestart("muffleWarning")
[16:20:58.549]                       }
[16:20:58.549]                       else if (inherits(cond, "condition")) {
[16:20:58.549]                         if (!is.null(pattern)) {
[16:20:58.549]                           computeRestarts <- base::computeRestarts
[16:20:58.549]                           grepl <- base::grepl
[16:20:58.549]                           restarts <- computeRestarts(cond)
[16:20:58.549]                           for (restart in restarts) {
[16:20:58.549]                             name <- restart$name
[16:20:58.549]                             if (is.null(name)) 
[16:20:58.549]                               next
[16:20:58.549]                             if (!grepl(pattern, name)) 
[16:20:58.549]                               next
[16:20:58.549]                             invokeRestart(restart)
[16:20:58.549]                             muffled <- TRUE
[16:20:58.549]                             break
[16:20:58.549]                           }
[16:20:58.549]                         }
[16:20:58.549]                       }
[16:20:58.549]                       invisible(muffled)
[16:20:58.549]                     }
[16:20:58.549]                     muffleCondition(cond, pattern = "^muffle")
[16:20:58.549]                   }
[16:20:58.549]                 }
[16:20:58.549]             }
[16:20:58.549]         }))
[16:20:58.549]     }, error = function(ex) {
[16:20:58.549]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:58.549]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:58.549]                 ...future.rng), started = ...future.startTime, 
[16:20:58.549]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:58.549]             version = "1.8"), class = "FutureResult")
[16:20:58.549]     }, finally = {
[16:20:58.549]         if (!identical(...future.workdir, getwd())) 
[16:20:58.549]             setwd(...future.workdir)
[16:20:58.549]         {
[16:20:58.549]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:58.549]                 ...future.oldOptions$nwarnings <- NULL
[16:20:58.549]             }
[16:20:58.549]             base::options(...future.oldOptions)
[16:20:58.549]             if (.Platform$OS.type == "windows") {
[16:20:58.549]                 old_names <- names(...future.oldEnvVars)
[16:20:58.549]                 envs <- base::Sys.getenv()
[16:20:58.549]                 names <- names(envs)
[16:20:58.549]                 common <- intersect(names, old_names)
[16:20:58.549]                 added <- setdiff(names, old_names)
[16:20:58.549]                 removed <- setdiff(old_names, names)
[16:20:58.549]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:58.549]                   envs[common]]
[16:20:58.549]                 NAMES <- toupper(changed)
[16:20:58.549]                 args <- list()
[16:20:58.549]                 for (kk in seq_along(NAMES)) {
[16:20:58.549]                   name <- changed[[kk]]
[16:20:58.549]                   NAME <- NAMES[[kk]]
[16:20:58.549]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:58.549]                     next
[16:20:58.549]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:58.549]                 }
[16:20:58.549]                 NAMES <- toupper(added)
[16:20:58.549]                 for (kk in seq_along(NAMES)) {
[16:20:58.549]                   name <- added[[kk]]
[16:20:58.549]                   NAME <- NAMES[[kk]]
[16:20:58.549]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:58.549]                     next
[16:20:58.549]                   args[[name]] <- ""
[16:20:58.549]                 }
[16:20:58.549]                 NAMES <- toupper(removed)
[16:20:58.549]                 for (kk in seq_along(NAMES)) {
[16:20:58.549]                   name <- removed[[kk]]
[16:20:58.549]                   NAME <- NAMES[[kk]]
[16:20:58.549]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:58.549]                     next
[16:20:58.549]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:58.549]                 }
[16:20:58.549]                 if (length(args) > 0) 
[16:20:58.549]                   base::do.call(base::Sys.setenv, args = args)
[16:20:58.549]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:58.549]             }
[16:20:58.549]             else {
[16:20:58.549]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:58.549]             }
[16:20:58.549]             {
[16:20:58.549]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:58.549]                   0L) {
[16:20:58.549]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:58.549]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:58.549]                   base::options(opts)
[16:20:58.549]                 }
[16:20:58.549]                 {
[16:20:58.549]                   {
[16:20:58.549]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:58.549]                     NULL
[16:20:58.549]                   }
[16:20:58.549]                   options(future.plan = NULL)
[16:20:58.549]                   if (is.na(NA_character_)) 
[16:20:58.549]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:58.549]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:58.549]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:58.549]                     .init = FALSE)
[16:20:58.549]                 }
[16:20:58.549]             }
[16:20:58.549]         }
[16:20:58.549]     })
[16:20:58.549]     if (TRUE) {
[16:20:58.549]         base::sink(type = "output", split = FALSE)
[16:20:58.549]         if (TRUE) {
[16:20:58.549]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:58.549]         }
[16:20:58.549]         else {
[16:20:58.549]             ...future.result["stdout"] <- base::list(NULL)
[16:20:58.549]         }
[16:20:58.549]         base::close(...future.stdout)
[16:20:58.549]         ...future.stdout <- NULL
[16:20:58.549]     }
[16:20:58.549]     ...future.result$conditions <- ...future.conditions
[16:20:58.549]     ...future.result$finished <- base::Sys.time()
[16:20:58.549]     ...future.result
[16:20:58.549] }
[16:20:58.551] Exporting 1 global objects (3.84 KiB) to cluster node #1 ...
[16:20:58.552] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ...
[16:20:58.552] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ... DONE
[16:20:58.552] Exporting 1 global objects (3.84 KiB) to cluster node #1 ... DONE
[16:20:58.553] MultisessionFuture started
[16:20:58.553] - Launch lazy future ... done
[16:20:58.553] run() for ‘MultisessionFuture’ ... done
[16:20:58.553] result() for ClusterFuture ...
[16:20:58.554] receiveMessageFromWorker() for ClusterFuture ...
[16:20:58.554] - Validating connection of MultisessionFuture
[16:20:58.558] - received message: FutureResult
[16:20:58.558] - Received FutureResult
[16:20:58.558] - Erased future from FutureRegistry
[16:20:58.558] result() for ClusterFuture ...
[16:20:58.559] - result already collected: FutureResult
[16:20:58.559] result() for ClusterFuture ... done
[16:20:58.559] receiveMessageFromWorker() for ClusterFuture ... done
[16:20:58.559] result() for ClusterFuture ... done
[16:20:58.559] result() for ClusterFuture ...
[16:20:58.559] - result already collected: FutureResult
[16:20:58.559] result() for ClusterFuture ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x557d4a37d9c0>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[16:20:58.560] getGlobalsAndPackages() ...
[16:20:58.560] Searching for globals...
[16:20:58.563] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[16:20:58.563] Searching for globals ... DONE
[16:20:58.563] Resolving globals: FALSE
[16:20:58.564] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[16:20:58.564] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[16:20:58.564] - globals: [1] ‘my_fcn’
[16:20:58.564] 
[16:20:58.564] getGlobalsAndPackages() ... DONE
[16:20:58.565] run() for ‘Future’ ...
[16:20:58.565] - state: ‘created’
[16:20:58.565] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:20:58.580] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:58.580] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:20:58.580]   - Field: ‘node’
[16:20:58.580]   - Field: ‘label’
[16:20:58.580]   - Field: ‘local’
[16:20:58.580]   - Field: ‘owner’
[16:20:58.580]   - Field: ‘envir’
[16:20:58.580]   - Field: ‘workers’
[16:20:58.581]   - Field: ‘packages’
[16:20:58.581]   - Field: ‘gc’
[16:20:58.581]   - Field: ‘conditions’
[16:20:58.581]   - Field: ‘persistent’
[16:20:58.581]   - Field: ‘expr’
[16:20:58.581]   - Field: ‘uuid’
[16:20:58.581]   - Field: ‘seed’
[16:20:58.581]   - Field: ‘version’
[16:20:58.582]   - Field: ‘result’
[16:20:58.582]   - Field: ‘asynchronous’
[16:20:58.582]   - Field: ‘calls’
[16:20:58.582]   - Field: ‘globals’
[16:20:58.582]   - Field: ‘stdout’
[16:20:58.582]   - Field: ‘earlySignal’
[16:20:58.582]   - Field: ‘lazy’
[16:20:58.582]   - Field: ‘state’
[16:20:58.582] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:20:58.583] - Launch lazy future ...
[16:20:58.583] Packages needed by the future expression (n = 0): <none>
[16:20:58.583] Packages needed by future strategies (n = 0): <none>
[16:20:58.584] {
[16:20:58.584]     {
[16:20:58.584]         {
[16:20:58.584]             ...future.startTime <- base::Sys.time()
[16:20:58.584]             {
[16:20:58.584]                 {
[16:20:58.584]                   {
[16:20:58.584]                     {
[16:20:58.584]                       base::local({
[16:20:58.584]                         has_future <- base::requireNamespace("future", 
[16:20:58.584]                           quietly = TRUE)
[16:20:58.584]                         if (has_future) {
[16:20:58.584]                           ns <- base::getNamespace("future")
[16:20:58.584]                           version <- ns[[".package"]][["version"]]
[16:20:58.584]                           if (is.null(version)) 
[16:20:58.584]                             version <- utils::packageVersion("future")
[16:20:58.584]                         }
[16:20:58.584]                         else {
[16:20:58.584]                           version <- NULL
[16:20:58.584]                         }
[16:20:58.584]                         if (!has_future || version < "1.8.0") {
[16:20:58.584]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:58.584]                             "", base::R.version$version.string), 
[16:20:58.584]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:58.584]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:58.584]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:58.584]                               "release", "version")], collapse = " "), 
[16:20:58.584]                             hostname = base::Sys.info()[["nodename"]])
[16:20:58.584]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:58.584]                             info)
[16:20:58.584]                           info <- base::paste(info, collapse = "; ")
[16:20:58.584]                           if (!has_future) {
[16:20:58.584]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:58.584]                               info)
[16:20:58.584]                           }
[16:20:58.584]                           else {
[16:20:58.584]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:58.584]                               info, version)
[16:20:58.584]                           }
[16:20:58.584]                           base::stop(msg)
[16:20:58.584]                         }
[16:20:58.584]                       })
[16:20:58.584]                     }
[16:20:58.584]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:58.584]                     base::options(mc.cores = 1L)
[16:20:58.584]                   }
[16:20:58.584]                   ...future.strategy.old <- future::plan("list")
[16:20:58.584]                   options(future.plan = NULL)
[16:20:58.584]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:58.584]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:58.584]                 }
[16:20:58.584]                 ...future.workdir <- getwd()
[16:20:58.584]             }
[16:20:58.584]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:58.584]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:58.584]         }
[16:20:58.584]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:58.584]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:58.584]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:58.584]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:58.584]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:58.584]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:58.584]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:58.584]             base::names(...future.oldOptions))
[16:20:58.584]     }
[16:20:58.584]     if (FALSE) {
[16:20:58.584]     }
[16:20:58.584]     else {
[16:20:58.584]         if (TRUE) {
[16:20:58.584]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:58.584]                 open = "w")
[16:20:58.584]         }
[16:20:58.584]         else {
[16:20:58.584]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:58.584]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:58.584]         }
[16:20:58.584]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:58.584]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:58.584]             base::sink(type = "output", split = FALSE)
[16:20:58.584]             base::close(...future.stdout)
[16:20:58.584]         }, add = TRUE)
[16:20:58.584]     }
[16:20:58.584]     ...future.frame <- base::sys.nframe()
[16:20:58.584]     ...future.conditions <- base::list()
[16:20:58.584]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:58.584]     if (FALSE) {
[16:20:58.584]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:58.584]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:58.584]     }
[16:20:58.584]     ...future.result <- base::tryCatch({
[16:20:58.584]         base::withCallingHandlers({
[16:20:58.584]             ...future.value <- base::withVisible(base::local({
[16:20:58.584]                 ...future.makeSendCondition <- base::local({
[16:20:58.584]                   sendCondition <- NULL
[16:20:58.584]                   function(frame = 1L) {
[16:20:58.584]                     if (is.function(sendCondition)) 
[16:20:58.584]                       return(sendCondition)
[16:20:58.584]                     ns <- getNamespace("parallel")
[16:20:58.584]                     if (exists("sendData", mode = "function", 
[16:20:58.584]                       envir = ns)) {
[16:20:58.584]                       parallel_sendData <- get("sendData", mode = "function", 
[16:20:58.584]                         envir = ns)
[16:20:58.584]                       envir <- sys.frame(frame)
[16:20:58.584]                       master <- NULL
[16:20:58.584]                       while (!identical(envir, .GlobalEnv) && 
[16:20:58.584]                         !identical(envir, emptyenv())) {
[16:20:58.584]                         if (exists("master", mode = "list", envir = envir, 
[16:20:58.584]                           inherits = FALSE)) {
[16:20:58.584]                           master <- get("master", mode = "list", 
[16:20:58.584]                             envir = envir, inherits = FALSE)
[16:20:58.584]                           if (inherits(master, c("SOCKnode", 
[16:20:58.584]                             "SOCK0node"))) {
[16:20:58.584]                             sendCondition <<- function(cond) {
[16:20:58.584]                               data <- list(type = "VALUE", value = cond, 
[16:20:58.584]                                 success = TRUE)
[16:20:58.584]                               parallel_sendData(master, data)
[16:20:58.584]                             }
[16:20:58.584]                             return(sendCondition)
[16:20:58.584]                           }
[16:20:58.584]                         }
[16:20:58.584]                         frame <- frame + 1L
[16:20:58.584]                         envir <- sys.frame(frame)
[16:20:58.584]                       }
[16:20:58.584]                     }
[16:20:58.584]                     sendCondition <<- function(cond) NULL
[16:20:58.584]                   }
[16:20:58.584]                 })
[16:20:58.584]                 withCallingHandlers({
[16:20:58.584]                   {
[16:20:58.584]                     my_fcn(3)
[16:20:58.584]                   }
[16:20:58.584]                 }, immediateCondition = function(cond) {
[16:20:58.584]                   sendCondition <- ...future.makeSendCondition()
[16:20:58.584]                   sendCondition(cond)
[16:20:58.584]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:58.584]                   {
[16:20:58.584]                     inherits <- base::inherits
[16:20:58.584]                     invokeRestart <- base::invokeRestart
[16:20:58.584]                     is.null <- base::is.null
[16:20:58.584]                     muffled <- FALSE
[16:20:58.584]                     if (inherits(cond, "message")) {
[16:20:58.584]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:58.584]                       if (muffled) 
[16:20:58.584]                         invokeRestart("muffleMessage")
[16:20:58.584]                     }
[16:20:58.584]                     else if (inherits(cond, "warning")) {
[16:20:58.584]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:58.584]                       if (muffled) 
[16:20:58.584]                         invokeRestart("muffleWarning")
[16:20:58.584]                     }
[16:20:58.584]                     else if (inherits(cond, "condition")) {
[16:20:58.584]                       if (!is.null(pattern)) {
[16:20:58.584]                         computeRestarts <- base::computeRestarts
[16:20:58.584]                         grepl <- base::grepl
[16:20:58.584]                         restarts <- computeRestarts(cond)
[16:20:58.584]                         for (restart in restarts) {
[16:20:58.584]                           name <- restart$name
[16:20:58.584]                           if (is.null(name)) 
[16:20:58.584]                             next
[16:20:58.584]                           if (!grepl(pattern, name)) 
[16:20:58.584]                             next
[16:20:58.584]                           invokeRestart(restart)
[16:20:58.584]                           muffled <- TRUE
[16:20:58.584]                           break
[16:20:58.584]                         }
[16:20:58.584]                       }
[16:20:58.584]                     }
[16:20:58.584]                     invisible(muffled)
[16:20:58.584]                   }
[16:20:58.584]                   muffleCondition(cond)
[16:20:58.584]                 })
[16:20:58.584]             }))
[16:20:58.584]             future::FutureResult(value = ...future.value$value, 
[16:20:58.584]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:58.584]                   ...future.rng), globalenv = if (FALSE) 
[16:20:58.584]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:58.584]                     ...future.globalenv.names))
[16:20:58.584]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:58.584]         }, condition = base::local({
[16:20:58.584]             c <- base::c
[16:20:58.584]             inherits <- base::inherits
[16:20:58.584]             invokeRestart <- base::invokeRestart
[16:20:58.584]             length <- base::length
[16:20:58.584]             list <- base::list
[16:20:58.584]             seq.int <- base::seq.int
[16:20:58.584]             signalCondition <- base::signalCondition
[16:20:58.584]             sys.calls <- base::sys.calls
[16:20:58.584]             `[[` <- base::`[[`
[16:20:58.584]             `+` <- base::`+`
[16:20:58.584]             `<<-` <- base::`<<-`
[16:20:58.584]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:58.584]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:58.584]                   3L)]
[16:20:58.584]             }
[16:20:58.584]             function(cond) {
[16:20:58.584]                 is_error <- inherits(cond, "error")
[16:20:58.584]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:58.584]                   NULL)
[16:20:58.584]                 if (is_error) {
[16:20:58.584]                   sessionInformation <- function() {
[16:20:58.584]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:58.584]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:58.584]                       search = base::search(), system = base::Sys.info())
[16:20:58.584]                   }
[16:20:58.584]                   ...future.conditions[[length(...future.conditions) + 
[16:20:58.584]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:58.584]                     cond$call), session = sessionInformation(), 
[16:20:58.584]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:58.584]                   signalCondition(cond)
[16:20:58.584]                 }
[16:20:58.584]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:58.584]                 "immediateCondition"))) {
[16:20:58.584]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:58.584]                   ...future.conditions[[length(...future.conditions) + 
[16:20:58.584]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:58.584]                   if (TRUE && !signal) {
[16:20:58.584]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:58.584]                     {
[16:20:58.584]                       inherits <- base::inherits
[16:20:58.584]                       invokeRestart <- base::invokeRestart
[16:20:58.584]                       is.null <- base::is.null
[16:20:58.584]                       muffled <- FALSE
[16:20:58.584]                       if (inherits(cond, "message")) {
[16:20:58.584]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:58.584]                         if (muffled) 
[16:20:58.584]                           invokeRestart("muffleMessage")
[16:20:58.584]                       }
[16:20:58.584]                       else if (inherits(cond, "warning")) {
[16:20:58.584]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:58.584]                         if (muffled) 
[16:20:58.584]                           invokeRestart("muffleWarning")
[16:20:58.584]                       }
[16:20:58.584]                       else if (inherits(cond, "condition")) {
[16:20:58.584]                         if (!is.null(pattern)) {
[16:20:58.584]                           computeRestarts <- base::computeRestarts
[16:20:58.584]                           grepl <- base::grepl
[16:20:58.584]                           restarts <- computeRestarts(cond)
[16:20:58.584]                           for (restart in restarts) {
[16:20:58.584]                             name <- restart$name
[16:20:58.584]                             if (is.null(name)) 
[16:20:58.584]                               next
[16:20:58.584]                             if (!grepl(pattern, name)) 
[16:20:58.584]                               next
[16:20:58.584]                             invokeRestart(restart)
[16:20:58.584]                             muffled <- TRUE
[16:20:58.584]                             break
[16:20:58.584]                           }
[16:20:58.584]                         }
[16:20:58.584]                       }
[16:20:58.584]                       invisible(muffled)
[16:20:58.584]                     }
[16:20:58.584]                     muffleCondition(cond, pattern = "^muffle")
[16:20:58.584]                   }
[16:20:58.584]                 }
[16:20:58.584]                 else {
[16:20:58.584]                   if (TRUE) {
[16:20:58.584]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:58.584]                     {
[16:20:58.584]                       inherits <- base::inherits
[16:20:58.584]                       invokeRestart <- base::invokeRestart
[16:20:58.584]                       is.null <- base::is.null
[16:20:58.584]                       muffled <- FALSE
[16:20:58.584]                       if (inherits(cond, "message")) {
[16:20:58.584]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:58.584]                         if (muffled) 
[16:20:58.584]                           invokeRestart("muffleMessage")
[16:20:58.584]                       }
[16:20:58.584]                       else if (inherits(cond, "warning")) {
[16:20:58.584]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:58.584]                         if (muffled) 
[16:20:58.584]                           invokeRestart("muffleWarning")
[16:20:58.584]                       }
[16:20:58.584]                       else if (inherits(cond, "condition")) {
[16:20:58.584]                         if (!is.null(pattern)) {
[16:20:58.584]                           computeRestarts <- base::computeRestarts
[16:20:58.584]                           grepl <- base::grepl
[16:20:58.584]                           restarts <- computeRestarts(cond)
[16:20:58.584]                           for (restart in restarts) {
[16:20:58.584]                             name <- restart$name
[16:20:58.584]                             if (is.null(name)) 
[16:20:58.584]                               next
[16:20:58.584]                             if (!grepl(pattern, name)) 
[16:20:58.584]                               next
[16:20:58.584]                             invokeRestart(restart)
[16:20:58.584]                             muffled <- TRUE
[16:20:58.584]                             break
[16:20:58.584]                           }
[16:20:58.584]                         }
[16:20:58.584]                       }
[16:20:58.584]                       invisible(muffled)
[16:20:58.584]                     }
[16:20:58.584]                     muffleCondition(cond, pattern = "^muffle")
[16:20:58.584]                   }
[16:20:58.584]                 }
[16:20:58.584]             }
[16:20:58.584]         }))
[16:20:58.584]     }, error = function(ex) {
[16:20:58.584]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:58.584]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:58.584]                 ...future.rng), started = ...future.startTime, 
[16:20:58.584]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:58.584]             version = "1.8"), class = "FutureResult")
[16:20:58.584]     }, finally = {
[16:20:58.584]         if (!identical(...future.workdir, getwd())) 
[16:20:58.584]             setwd(...future.workdir)
[16:20:58.584]         {
[16:20:58.584]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:58.584]                 ...future.oldOptions$nwarnings <- NULL
[16:20:58.584]             }
[16:20:58.584]             base::options(...future.oldOptions)
[16:20:58.584]             if (.Platform$OS.type == "windows") {
[16:20:58.584]                 old_names <- names(...future.oldEnvVars)
[16:20:58.584]                 envs <- base::Sys.getenv()
[16:20:58.584]                 names <- names(envs)
[16:20:58.584]                 common <- intersect(names, old_names)
[16:20:58.584]                 added <- setdiff(names, old_names)
[16:20:58.584]                 removed <- setdiff(old_names, names)
[16:20:58.584]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:58.584]                   envs[common]]
[16:20:58.584]                 NAMES <- toupper(changed)
[16:20:58.584]                 args <- list()
[16:20:58.584]                 for (kk in seq_along(NAMES)) {
[16:20:58.584]                   name <- changed[[kk]]
[16:20:58.584]                   NAME <- NAMES[[kk]]
[16:20:58.584]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:58.584]                     next
[16:20:58.584]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:58.584]                 }
[16:20:58.584]                 NAMES <- toupper(added)
[16:20:58.584]                 for (kk in seq_along(NAMES)) {
[16:20:58.584]                   name <- added[[kk]]
[16:20:58.584]                   NAME <- NAMES[[kk]]
[16:20:58.584]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:58.584]                     next
[16:20:58.584]                   args[[name]] <- ""
[16:20:58.584]                 }
[16:20:58.584]                 NAMES <- toupper(removed)
[16:20:58.584]                 for (kk in seq_along(NAMES)) {
[16:20:58.584]                   name <- removed[[kk]]
[16:20:58.584]                   NAME <- NAMES[[kk]]
[16:20:58.584]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:58.584]                     next
[16:20:58.584]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:58.584]                 }
[16:20:58.584]                 if (length(args) > 0) 
[16:20:58.584]                   base::do.call(base::Sys.setenv, args = args)
[16:20:58.584]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:58.584]             }
[16:20:58.584]             else {
[16:20:58.584]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:58.584]             }
[16:20:58.584]             {
[16:20:58.584]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:58.584]                   0L) {
[16:20:58.584]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:58.584]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:58.584]                   base::options(opts)
[16:20:58.584]                 }
[16:20:58.584]                 {
[16:20:58.584]                   {
[16:20:58.584]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:58.584]                     NULL
[16:20:58.584]                   }
[16:20:58.584]                   options(future.plan = NULL)
[16:20:58.584]                   if (is.na(NA_character_)) 
[16:20:58.584]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:58.584]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:58.584]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:58.584]                     .init = FALSE)
[16:20:58.584]                 }
[16:20:58.584]             }
[16:20:58.584]         }
[16:20:58.584]     })
[16:20:58.584]     if (TRUE) {
[16:20:58.584]         base::sink(type = "output", split = FALSE)
[16:20:58.584]         if (TRUE) {
[16:20:58.584]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:58.584]         }
[16:20:58.584]         else {
[16:20:58.584]             ...future.result["stdout"] <- base::list(NULL)
[16:20:58.584]         }
[16:20:58.584]         base::close(...future.stdout)
[16:20:58.584]         ...future.stdout <- NULL
[16:20:58.584]     }
[16:20:58.584]     ...future.result$conditions <- ...future.conditions
[16:20:58.584]     ...future.result$finished <- base::Sys.time()
[16:20:58.584]     ...future.result
[16:20:58.584] }
[16:20:58.586] Exporting 1 global objects (3.84 KiB) to cluster node #1 ...
[16:20:58.587] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ...
[16:20:58.587] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ... DONE
[16:20:58.587] Exporting 1 global objects (3.84 KiB) to cluster node #1 ... DONE
[16:20:58.588] MultisessionFuture started
[16:20:58.588] - Launch lazy future ... done
[16:20:58.588] run() for ‘MultisessionFuture’ ... done
[16:20:58.588] result() for ClusterFuture ...
[16:20:58.589] receiveMessageFromWorker() for ClusterFuture ...
[16:20:58.589] - Validating connection of MultisessionFuture
[16:20:58.591] - received message: FutureResult
[16:20:58.591] - Received FutureResult
[16:20:58.591] - Erased future from FutureRegistry
[16:20:58.591] result() for ClusterFuture ...
[16:20:58.591] - result already collected: FutureResult
[16:20:58.591] result() for ClusterFuture ... done
[16:20:58.591] receiveMessageFromWorker() for ClusterFuture ... done
[16:20:58.592] result() for ClusterFuture ... done
[16:20:58.592] result() for ClusterFuture ...
[16:20:58.592] - result already collected: FutureResult
[16:20:58.592] result() for ClusterFuture ... done
[1] -3
> 
> message("*** Globals - S4 methods ... DONE")
*** Globals - S4 methods ... DONE
> 
> source("incl/end.R")
[16:20:58.593] plan(): Setting new future strategy stack:
[16:20:58.593] List of future strategies:
[16:20:58.593] 1. FutureStrategy:
[16:20:58.593]    - args: function (..., envir = parent.frame())
[16:20:58.593]    - tweaked: FALSE
[16:20:58.593]    - call: future::plan(oplan)
[16:20:58.594] plan(): nbrOfWorkers() = 1
> 
