
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[10:33:06.452] plan(): Setting new future strategy stack:
[10:33:06.453] List of future strategies:
[10:33:06.453] 1. sequential:
[10:33:06.453]    - args: function (..., envir = parent.frame())
[10:33:06.453]    - tweaked: FALSE
[10:33:06.453]    - call: future::plan("sequential")
[10:33:06.467] plan(): nbrOfWorkers() = 1
> library(methods)
> 
> message("*** Globals - S4 methods ...")
*** Globals - S4 methods ...
> 
> setGeneric("my_fcn", function(x) standardGeneric("my_fcn"))
[1] "my_fcn"
> setMethod("my_fcn", signature(x = "numeric"), function(x) { -x })
> org_my_fcn <- my_fcn
> 
> truth <- my_fcn(3)
> 
> for (strategy in supportedStrategies()) {
+   message("Type of future: ", strategy)
+   plan(strategy)
+ 
+   ## Assert that S4 generic function 'my_fcn()' is exported
+   f <- future({ my_fcn }, lazy = TRUE)
+   rm(list = "my_fcn")
+   v <- value(f)
+   print(v)
+   stopifnot(
+     is.function(v),
+     inherits(v, class(org_my_fcn)[1])
+   )
+   my_fcn <- org_my_fcn
+   
+   ## FIXME:
+   ## Just like S3 methods, S4 methods are not picked up
+   ## https://github.com/HenrikBengtsson/future/issues/615
+   f <- future({ my_fcn(3) }, lazy = TRUE)
+   rm(list = "my_fcn")
+   v <- tryCatch(value(f), error = identity)
+   print(v)
+   if (isTRUE(as.logical(Sys.getenv("R_CHECK_IDEAL")))) {
+     if (getOption("future.globals.keepWhere", TRUE)) {
+       stopifnot(identical(v, truth))
+     } else {
+       stopifnot(inherits(v, "error"))
+     }
+   } else if (isTRUE(getOption("future.globals.keepWhere", FALSE))) {
+     stopifnot(identical(v, truth))
+   } else {
+     if (strategy %in% c("sequential", "multicore")) {
+       stopifnot(inherits(v, "error"))
+     } else {
+       stopifnot(identical(v, truth))
+     }
+   }
+   my_fcn <- org_my_fcn
+ }
Type of future: sequential
[10:33:06.500] plan(): Setting new future strategy stack:
[10:33:06.500] List of future strategies:
[10:33:06.500] 1. sequential:
[10:33:06.500]    - args: function (..., envir = parent.frame())
[10:33:06.500]    - tweaked: FALSE
[10:33:06.500]    - call: plan(strategy)
[10:33:06.513] plan(): nbrOfWorkers() = 1
[10:33:06.514] getGlobalsAndPackages() ...
[10:33:06.514] Searching for globals...
[10:33:06.520] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[10:33:06.520] Searching for globals ... DONE
[10:33:06.520] Resolving globals: FALSE
[10:33:06.521] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[10:33:06.522] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[10:33:06.522] - globals: [1] ‘my_fcn’
[10:33:06.522] 
[10:33:06.522] getGlobalsAndPackages() ... DONE
[10:33:06.523] run() for ‘Future’ ...
[10:33:06.523] - state: ‘created’
[10:33:06.524] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:33:06.524] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:33:06.524] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:33:06.524]   - Field: ‘label’
[10:33:06.524]   - Field: ‘local’
[10:33:06.524]   - Field: ‘owner’
[10:33:06.524]   - Field: ‘envir’
[10:33:06.524]   - Field: ‘packages’
[10:33:06.525]   - Field: ‘gc’
[10:33:06.525]   - Field: ‘conditions’
[10:33:06.525]   - Field: ‘expr’
[10:33:06.525]   - Field: ‘uuid’
[10:33:06.525]   - Field: ‘seed’
[10:33:06.525]   - Field: ‘version’
[10:33:06.525]   - Field: ‘result’
[10:33:06.525]   - Field: ‘asynchronous’
[10:33:06.525]   - Field: ‘calls’
[10:33:06.525]   - Field: ‘globals’
[10:33:06.525]   - Field: ‘stdout’
[10:33:06.526]   - Field: ‘earlySignal’
[10:33:06.526]   - Field: ‘lazy’
[10:33:06.526]   - Field: ‘state’
[10:33:06.526] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:33:06.526] - Launch lazy future ...
[10:33:06.527] Packages needed by the future expression (n = 0): <none>
[10:33:06.527] Packages needed by future strategies (n = 0): <none>
[10:33:06.528] {
[10:33:06.528]     {
[10:33:06.528]         {
[10:33:06.528]             ...future.startTime <- base::Sys.time()
[10:33:06.528]             {
[10:33:06.528]                 {
[10:33:06.528]                   {
[10:33:06.528]                     base::local({
[10:33:06.528]                       has_future <- base::requireNamespace("future", 
[10:33:06.528]                         quietly = TRUE)
[10:33:06.528]                       if (has_future) {
[10:33:06.528]                         ns <- base::getNamespace("future")
[10:33:06.528]                         version <- ns[[".package"]][["version"]]
[10:33:06.528]                         if (is.null(version)) 
[10:33:06.528]                           version <- utils::packageVersion("future")
[10:33:06.528]                       }
[10:33:06.528]                       else {
[10:33:06.528]                         version <- NULL
[10:33:06.528]                       }
[10:33:06.528]                       if (!has_future || version < "1.8.0") {
[10:33:06.528]                         info <- base::c(r_version = base::gsub("R version ", 
[10:33:06.528]                           "", base::R.version$version.string), 
[10:33:06.528]                           platform = base::sprintf("%s (%s-bit)", 
[10:33:06.528]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:06.528]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:06.528]                             "release", "version")], collapse = " "), 
[10:33:06.528]                           hostname = base::Sys.info()[["nodename"]])
[10:33:06.528]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:33:06.528]                           info)
[10:33:06.528]                         info <- base::paste(info, collapse = "; ")
[10:33:06.528]                         if (!has_future) {
[10:33:06.528]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:06.528]                             info)
[10:33:06.528]                         }
[10:33:06.528]                         else {
[10:33:06.528]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:06.528]                             info, version)
[10:33:06.528]                         }
[10:33:06.528]                         base::stop(msg)
[10:33:06.528]                       }
[10:33:06.528]                     })
[10:33:06.528]                   }
[10:33:06.528]                   ...future.strategy.old <- future::plan("list")
[10:33:06.528]                   options(future.plan = NULL)
[10:33:06.528]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:06.528]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:06.528]                 }
[10:33:06.528]                 ...future.workdir <- getwd()
[10:33:06.528]             }
[10:33:06.528]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:06.528]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:06.528]         }
[10:33:06.528]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:06.528]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:06.528]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:06.528]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:06.528]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:06.528]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:06.528]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:06.528]             base::names(...future.oldOptions))
[10:33:06.528]     }
[10:33:06.528]     if (FALSE) {
[10:33:06.528]     }
[10:33:06.528]     else {
[10:33:06.528]         if (TRUE) {
[10:33:06.528]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:06.528]                 open = "w")
[10:33:06.528]         }
[10:33:06.528]         else {
[10:33:06.528]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:06.528]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:06.528]         }
[10:33:06.528]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:06.528]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:06.528]             base::sink(type = "output", split = FALSE)
[10:33:06.528]             base::close(...future.stdout)
[10:33:06.528]         }, add = TRUE)
[10:33:06.528]     }
[10:33:06.528]     ...future.frame <- base::sys.nframe()
[10:33:06.528]     ...future.conditions <- base::list()
[10:33:06.528]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:06.528]     if (FALSE) {
[10:33:06.528]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:06.528]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:06.528]     }
[10:33:06.528]     ...future.result <- base::tryCatch({
[10:33:06.528]         base::withCallingHandlers({
[10:33:06.528]             ...future.value <- base::withVisible(base::local({
[10:33:06.528]                 my_fcn
[10:33:06.528]             }))
[10:33:06.528]             future::FutureResult(value = ...future.value$value, 
[10:33:06.528]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:06.528]                   ...future.rng), globalenv = if (FALSE) 
[10:33:06.528]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:06.528]                     ...future.globalenv.names))
[10:33:06.528]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:06.528]         }, condition = base::local({
[10:33:06.528]             c <- base::c
[10:33:06.528]             inherits <- base::inherits
[10:33:06.528]             invokeRestart <- base::invokeRestart
[10:33:06.528]             length <- base::length
[10:33:06.528]             list <- base::list
[10:33:06.528]             seq.int <- base::seq.int
[10:33:06.528]             signalCondition <- base::signalCondition
[10:33:06.528]             sys.calls <- base::sys.calls
[10:33:06.528]             `[[` <- base::`[[`
[10:33:06.528]             `+` <- base::`+`
[10:33:06.528]             `<<-` <- base::`<<-`
[10:33:06.528]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:06.528]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:06.528]                   3L)]
[10:33:06.528]             }
[10:33:06.528]             function(cond) {
[10:33:06.528]                 is_error <- inherits(cond, "error")
[10:33:06.528]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:06.528]                   NULL)
[10:33:06.528]                 if (is_error) {
[10:33:06.528]                   sessionInformation <- function() {
[10:33:06.528]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:06.528]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:06.528]                       search = base::search(), system = base::Sys.info())
[10:33:06.528]                   }
[10:33:06.528]                   ...future.conditions[[length(...future.conditions) + 
[10:33:06.528]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:06.528]                     cond$call), session = sessionInformation(), 
[10:33:06.528]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:06.528]                   signalCondition(cond)
[10:33:06.528]                 }
[10:33:06.528]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:06.528]                 "immediateCondition"))) {
[10:33:06.528]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:06.528]                   ...future.conditions[[length(...future.conditions) + 
[10:33:06.528]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:06.528]                   if (TRUE && !signal) {
[10:33:06.528]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:06.528]                     {
[10:33:06.528]                       inherits <- base::inherits
[10:33:06.528]                       invokeRestart <- base::invokeRestart
[10:33:06.528]                       is.null <- base::is.null
[10:33:06.528]                       muffled <- FALSE
[10:33:06.528]                       if (inherits(cond, "message")) {
[10:33:06.528]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:06.528]                         if (muffled) 
[10:33:06.528]                           invokeRestart("muffleMessage")
[10:33:06.528]                       }
[10:33:06.528]                       else if (inherits(cond, "warning")) {
[10:33:06.528]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:06.528]                         if (muffled) 
[10:33:06.528]                           invokeRestart("muffleWarning")
[10:33:06.528]                       }
[10:33:06.528]                       else if (inherits(cond, "condition")) {
[10:33:06.528]                         if (!is.null(pattern)) {
[10:33:06.528]                           computeRestarts <- base::computeRestarts
[10:33:06.528]                           grepl <- base::grepl
[10:33:06.528]                           restarts <- computeRestarts(cond)
[10:33:06.528]                           for (restart in restarts) {
[10:33:06.528]                             name <- restart$name
[10:33:06.528]                             if (is.null(name)) 
[10:33:06.528]                               next
[10:33:06.528]                             if (!grepl(pattern, name)) 
[10:33:06.528]                               next
[10:33:06.528]                             invokeRestart(restart)
[10:33:06.528]                             muffled <- TRUE
[10:33:06.528]                             break
[10:33:06.528]                           }
[10:33:06.528]                         }
[10:33:06.528]                       }
[10:33:06.528]                       invisible(muffled)
[10:33:06.528]                     }
[10:33:06.528]                     muffleCondition(cond, pattern = "^muffle")
[10:33:06.528]                   }
[10:33:06.528]                 }
[10:33:06.528]                 else {
[10:33:06.528]                   if (TRUE) {
[10:33:06.528]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:06.528]                     {
[10:33:06.528]                       inherits <- base::inherits
[10:33:06.528]                       invokeRestart <- base::invokeRestart
[10:33:06.528]                       is.null <- base::is.null
[10:33:06.528]                       muffled <- FALSE
[10:33:06.528]                       if (inherits(cond, "message")) {
[10:33:06.528]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:06.528]                         if (muffled) 
[10:33:06.528]                           invokeRestart("muffleMessage")
[10:33:06.528]                       }
[10:33:06.528]                       else if (inherits(cond, "warning")) {
[10:33:06.528]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:06.528]                         if (muffled) 
[10:33:06.528]                           invokeRestart("muffleWarning")
[10:33:06.528]                       }
[10:33:06.528]                       else if (inherits(cond, "condition")) {
[10:33:06.528]                         if (!is.null(pattern)) {
[10:33:06.528]                           computeRestarts <- base::computeRestarts
[10:33:06.528]                           grepl <- base::grepl
[10:33:06.528]                           restarts <- computeRestarts(cond)
[10:33:06.528]                           for (restart in restarts) {
[10:33:06.528]                             name <- restart$name
[10:33:06.528]                             if (is.null(name)) 
[10:33:06.528]                               next
[10:33:06.528]                             if (!grepl(pattern, name)) 
[10:33:06.528]                               next
[10:33:06.528]                             invokeRestart(restart)
[10:33:06.528]                             muffled <- TRUE
[10:33:06.528]                             break
[10:33:06.528]                           }
[10:33:06.528]                         }
[10:33:06.528]                       }
[10:33:06.528]                       invisible(muffled)
[10:33:06.528]                     }
[10:33:06.528]                     muffleCondition(cond, pattern = "^muffle")
[10:33:06.528]                   }
[10:33:06.528]                 }
[10:33:06.528]             }
[10:33:06.528]         }))
[10:33:06.528]     }, error = function(ex) {
[10:33:06.528]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:06.528]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:06.528]                 ...future.rng), started = ...future.startTime, 
[10:33:06.528]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:06.528]             version = "1.8"), class = "FutureResult")
[10:33:06.528]     }, finally = {
[10:33:06.528]         if (!identical(...future.workdir, getwd())) 
[10:33:06.528]             setwd(...future.workdir)
[10:33:06.528]         {
[10:33:06.528]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:06.528]                 ...future.oldOptions$nwarnings <- NULL
[10:33:06.528]             }
[10:33:06.528]             base::options(...future.oldOptions)
[10:33:06.528]             if (.Platform$OS.type == "windows") {
[10:33:06.528]                 old_names <- names(...future.oldEnvVars)
[10:33:06.528]                 envs <- base::Sys.getenv()
[10:33:06.528]                 names <- names(envs)
[10:33:06.528]                 common <- intersect(names, old_names)
[10:33:06.528]                 added <- setdiff(names, old_names)
[10:33:06.528]                 removed <- setdiff(old_names, names)
[10:33:06.528]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:06.528]                   envs[common]]
[10:33:06.528]                 NAMES <- toupper(changed)
[10:33:06.528]                 args <- list()
[10:33:06.528]                 for (kk in seq_along(NAMES)) {
[10:33:06.528]                   name <- changed[[kk]]
[10:33:06.528]                   NAME <- NAMES[[kk]]
[10:33:06.528]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:06.528]                     next
[10:33:06.528]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:06.528]                 }
[10:33:06.528]                 NAMES <- toupper(added)
[10:33:06.528]                 for (kk in seq_along(NAMES)) {
[10:33:06.528]                   name <- added[[kk]]
[10:33:06.528]                   NAME <- NAMES[[kk]]
[10:33:06.528]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:06.528]                     next
[10:33:06.528]                   args[[name]] <- ""
[10:33:06.528]                 }
[10:33:06.528]                 NAMES <- toupper(removed)
[10:33:06.528]                 for (kk in seq_along(NAMES)) {
[10:33:06.528]                   name <- removed[[kk]]
[10:33:06.528]                   NAME <- NAMES[[kk]]
[10:33:06.528]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:06.528]                     next
[10:33:06.528]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:06.528]                 }
[10:33:06.528]                 if (length(args) > 0) 
[10:33:06.528]                   base::do.call(base::Sys.setenv, args = args)
[10:33:06.528]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:06.528]             }
[10:33:06.528]             else {
[10:33:06.528]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:06.528]             }
[10:33:06.528]             {
[10:33:06.528]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:06.528]                   0L) {
[10:33:06.528]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:06.528]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:06.528]                   base::options(opts)
[10:33:06.528]                 }
[10:33:06.528]                 {
[10:33:06.528]                   {
[10:33:06.528]                     NULL
[10:33:06.528]                     RNGkind("Mersenne-Twister")
[10:33:06.528]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:33:06.528]                       inherits = FALSE)
[10:33:06.528]                   }
[10:33:06.528]                   options(future.plan = NULL)
[10:33:06.528]                   if (is.na(NA_character_)) 
[10:33:06.528]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:06.528]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:06.528]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:06.528]                     .init = FALSE)
[10:33:06.528]                 }
[10:33:06.528]             }
[10:33:06.528]         }
[10:33:06.528]     })
[10:33:06.528]     if (TRUE) {
[10:33:06.528]         base::sink(type = "output", split = FALSE)
[10:33:06.528]         if (TRUE) {
[10:33:06.528]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:06.528]         }
[10:33:06.528]         else {
[10:33:06.528]             ...future.result["stdout"] <- base::list(NULL)
[10:33:06.528]         }
[10:33:06.528]         base::close(...future.stdout)
[10:33:06.528]         ...future.stdout <- NULL
[10:33:06.528]     }
[10:33:06.528]     ...future.result$conditions <- ...future.conditions
[10:33:06.528]     ...future.result$finished <- base::Sys.time()
[10:33:06.528]     ...future.result
[10:33:06.528] }
[10:33:06.529] assign_globals() ...
[10:33:06.530] List of 1
[10:33:06.530]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[10:33:06.530]   .. ..@ .Data     :function (x)  
[10:33:06.530]   .. ..@ generic   : chr "my_fcn"
[10:33:06.530]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[10:33:06.530]   .. ..@ package   : chr ".GlobalEnv"
[10:33:06.530]   .. ..@ group     : list()
[10:33:06.530]   .. ..@ valueClass: chr(0) 
[10:33:06.530]   .. ..@ signature : chr "x"
[10:33:06.530]   .. ..@ default   : NULL
[10:33:06.530]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[10:33:06.530]  - attr(*, "where")=List of 1
[10:33:06.530]   ..$ my_fcn:<environment: R_EmptyEnv> 
[10:33:06.530]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:33:06.530]  - attr(*, "resolved")= logi FALSE
[10:33:06.530]  - attr(*, "total_size")= num 3936
[10:33:06.530]  - attr(*, "already-done")= logi TRUE
[10:33:06.539] - reassign environment for ‘my_fcn’
[10:33:06.539] - copied ‘my_fcn’ to environment
[10:33:06.539] assign_globals() ... done
[10:33:06.539] plan(): Setting new future strategy stack:
[10:33:06.539] List of future strategies:
[10:33:06.539] 1. sequential:
[10:33:06.539]    - args: function (..., envir = parent.frame())
[10:33:06.539]    - tweaked: FALSE
[10:33:06.539]    - call: NULL
[10:33:06.540] plan(): nbrOfWorkers() = 1
[10:33:06.541] plan(): Setting new future strategy stack:
[10:33:06.541] List of future strategies:
[10:33:06.541] 1. sequential:
[10:33:06.541]    - args: function (..., envir = parent.frame())
[10:33:06.541]    - tweaked: FALSE
[10:33:06.541]    - call: plan(strategy)
[10:33:06.541] plan(): nbrOfWorkers() = 1
[10:33:06.542] SequentialFuture started (and completed)
[10:33:06.542] - Launch lazy future ... done
[10:33:06.542] run() for ‘SequentialFuture’ ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x560b4197a890>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[10:33:06.543] getGlobalsAndPackages() ...
[10:33:06.543] Searching for globals...
[10:33:06.547] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[10:33:06.547] Searching for globals ... DONE
[10:33:06.547] Resolving globals: FALSE
[10:33:06.547] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[10:33:06.548] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[10:33:06.548] - globals: [1] ‘my_fcn’
[10:33:06.548] 
[10:33:06.548] getGlobalsAndPackages() ... DONE
[10:33:06.548] run() for ‘Future’ ...
[10:33:06.548] - state: ‘created’
[10:33:06.548] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:33:06.549] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:33:06.549] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:33:06.549]   - Field: ‘label’
[10:33:06.549]   - Field: ‘local’
[10:33:06.549]   - Field: ‘owner’
[10:33:06.549]   - Field: ‘envir’
[10:33:06.549]   - Field: ‘packages’
[10:33:06.549]   - Field: ‘gc’
[10:33:06.549]   - Field: ‘conditions’
[10:33:06.550]   - Field: ‘expr’
[10:33:06.550]   - Field: ‘uuid’
[10:33:06.550]   - Field: ‘seed’
[10:33:06.550]   - Field: ‘version’
[10:33:06.550]   - Field: ‘result’
[10:33:06.550]   - Field: ‘asynchronous’
[10:33:06.550]   - Field: ‘calls’
[10:33:06.550]   - Field: ‘globals’
[10:33:06.550]   - Field: ‘stdout’
[10:33:06.550]   - Field: ‘earlySignal’
[10:33:06.550]   - Field: ‘lazy’
[10:33:06.550]   - Field: ‘state’
[10:33:06.551] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:33:06.551] - Launch lazy future ...
[10:33:06.551] Packages needed by the future expression (n = 0): <none>
[10:33:06.551] Packages needed by future strategies (n = 0): <none>
[10:33:06.551] {
[10:33:06.551]     {
[10:33:06.551]         {
[10:33:06.551]             ...future.startTime <- base::Sys.time()
[10:33:06.551]             {
[10:33:06.551]                 {
[10:33:06.551]                   {
[10:33:06.551]                     base::local({
[10:33:06.551]                       has_future <- base::requireNamespace("future", 
[10:33:06.551]                         quietly = TRUE)
[10:33:06.551]                       if (has_future) {
[10:33:06.551]                         ns <- base::getNamespace("future")
[10:33:06.551]                         version <- ns[[".package"]][["version"]]
[10:33:06.551]                         if (is.null(version)) 
[10:33:06.551]                           version <- utils::packageVersion("future")
[10:33:06.551]                       }
[10:33:06.551]                       else {
[10:33:06.551]                         version <- NULL
[10:33:06.551]                       }
[10:33:06.551]                       if (!has_future || version < "1.8.0") {
[10:33:06.551]                         info <- base::c(r_version = base::gsub("R version ", 
[10:33:06.551]                           "", base::R.version$version.string), 
[10:33:06.551]                           platform = base::sprintf("%s (%s-bit)", 
[10:33:06.551]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:06.551]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:06.551]                             "release", "version")], collapse = " "), 
[10:33:06.551]                           hostname = base::Sys.info()[["nodename"]])
[10:33:06.551]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:33:06.551]                           info)
[10:33:06.551]                         info <- base::paste(info, collapse = "; ")
[10:33:06.551]                         if (!has_future) {
[10:33:06.551]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:06.551]                             info)
[10:33:06.551]                         }
[10:33:06.551]                         else {
[10:33:06.551]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:06.551]                             info, version)
[10:33:06.551]                         }
[10:33:06.551]                         base::stop(msg)
[10:33:06.551]                       }
[10:33:06.551]                     })
[10:33:06.551]                   }
[10:33:06.551]                   ...future.strategy.old <- future::plan("list")
[10:33:06.551]                   options(future.plan = NULL)
[10:33:06.551]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:06.551]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:06.551]                 }
[10:33:06.551]                 ...future.workdir <- getwd()
[10:33:06.551]             }
[10:33:06.551]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:06.551]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:06.551]         }
[10:33:06.551]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:06.551]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:06.551]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:06.551]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:06.551]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:06.551]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:06.551]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:06.551]             base::names(...future.oldOptions))
[10:33:06.551]     }
[10:33:06.551]     if (FALSE) {
[10:33:06.551]     }
[10:33:06.551]     else {
[10:33:06.551]         if (TRUE) {
[10:33:06.551]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:06.551]                 open = "w")
[10:33:06.551]         }
[10:33:06.551]         else {
[10:33:06.551]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:06.551]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:06.551]         }
[10:33:06.551]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:06.551]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:06.551]             base::sink(type = "output", split = FALSE)
[10:33:06.551]             base::close(...future.stdout)
[10:33:06.551]         }, add = TRUE)
[10:33:06.551]     }
[10:33:06.551]     ...future.frame <- base::sys.nframe()
[10:33:06.551]     ...future.conditions <- base::list()
[10:33:06.551]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:06.551]     if (FALSE) {
[10:33:06.551]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:06.551]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:06.551]     }
[10:33:06.551]     ...future.result <- base::tryCatch({
[10:33:06.551]         base::withCallingHandlers({
[10:33:06.551]             ...future.value <- base::withVisible(base::local({
[10:33:06.551]                 my_fcn(3)
[10:33:06.551]             }))
[10:33:06.551]             future::FutureResult(value = ...future.value$value, 
[10:33:06.551]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:06.551]                   ...future.rng), globalenv = if (FALSE) 
[10:33:06.551]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:06.551]                     ...future.globalenv.names))
[10:33:06.551]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:06.551]         }, condition = base::local({
[10:33:06.551]             c <- base::c
[10:33:06.551]             inherits <- base::inherits
[10:33:06.551]             invokeRestart <- base::invokeRestart
[10:33:06.551]             length <- base::length
[10:33:06.551]             list <- base::list
[10:33:06.551]             seq.int <- base::seq.int
[10:33:06.551]             signalCondition <- base::signalCondition
[10:33:06.551]             sys.calls <- base::sys.calls
[10:33:06.551]             `[[` <- base::`[[`
[10:33:06.551]             `+` <- base::`+`
[10:33:06.551]             `<<-` <- base::`<<-`
[10:33:06.551]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:06.551]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:06.551]                   3L)]
[10:33:06.551]             }
[10:33:06.551]             function(cond) {
[10:33:06.551]                 is_error <- inherits(cond, "error")
[10:33:06.551]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:06.551]                   NULL)
[10:33:06.551]                 if (is_error) {
[10:33:06.551]                   sessionInformation <- function() {
[10:33:06.551]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:06.551]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:06.551]                       search = base::search(), system = base::Sys.info())
[10:33:06.551]                   }
[10:33:06.551]                   ...future.conditions[[length(...future.conditions) + 
[10:33:06.551]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:06.551]                     cond$call), session = sessionInformation(), 
[10:33:06.551]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:06.551]                   signalCondition(cond)
[10:33:06.551]                 }
[10:33:06.551]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:06.551]                 "immediateCondition"))) {
[10:33:06.551]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:06.551]                   ...future.conditions[[length(...future.conditions) + 
[10:33:06.551]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:06.551]                   if (TRUE && !signal) {
[10:33:06.551]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:06.551]                     {
[10:33:06.551]                       inherits <- base::inherits
[10:33:06.551]                       invokeRestart <- base::invokeRestart
[10:33:06.551]                       is.null <- base::is.null
[10:33:06.551]                       muffled <- FALSE
[10:33:06.551]                       if (inherits(cond, "message")) {
[10:33:06.551]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:06.551]                         if (muffled) 
[10:33:06.551]                           invokeRestart("muffleMessage")
[10:33:06.551]                       }
[10:33:06.551]                       else if (inherits(cond, "warning")) {
[10:33:06.551]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:06.551]                         if (muffled) 
[10:33:06.551]                           invokeRestart("muffleWarning")
[10:33:06.551]                       }
[10:33:06.551]                       else if (inherits(cond, "condition")) {
[10:33:06.551]                         if (!is.null(pattern)) {
[10:33:06.551]                           computeRestarts <- base::computeRestarts
[10:33:06.551]                           grepl <- base::grepl
[10:33:06.551]                           restarts <- computeRestarts(cond)
[10:33:06.551]                           for (restart in restarts) {
[10:33:06.551]                             name <- restart$name
[10:33:06.551]                             if (is.null(name)) 
[10:33:06.551]                               next
[10:33:06.551]                             if (!grepl(pattern, name)) 
[10:33:06.551]                               next
[10:33:06.551]                             invokeRestart(restart)
[10:33:06.551]                             muffled <- TRUE
[10:33:06.551]                             break
[10:33:06.551]                           }
[10:33:06.551]                         }
[10:33:06.551]                       }
[10:33:06.551]                       invisible(muffled)
[10:33:06.551]                     }
[10:33:06.551]                     muffleCondition(cond, pattern = "^muffle")
[10:33:06.551]                   }
[10:33:06.551]                 }
[10:33:06.551]                 else {
[10:33:06.551]                   if (TRUE) {
[10:33:06.551]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:06.551]                     {
[10:33:06.551]                       inherits <- base::inherits
[10:33:06.551]                       invokeRestart <- base::invokeRestart
[10:33:06.551]                       is.null <- base::is.null
[10:33:06.551]                       muffled <- FALSE
[10:33:06.551]                       if (inherits(cond, "message")) {
[10:33:06.551]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:06.551]                         if (muffled) 
[10:33:06.551]                           invokeRestart("muffleMessage")
[10:33:06.551]                       }
[10:33:06.551]                       else if (inherits(cond, "warning")) {
[10:33:06.551]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:06.551]                         if (muffled) 
[10:33:06.551]                           invokeRestart("muffleWarning")
[10:33:06.551]                       }
[10:33:06.551]                       else if (inherits(cond, "condition")) {
[10:33:06.551]                         if (!is.null(pattern)) {
[10:33:06.551]                           computeRestarts <- base::computeRestarts
[10:33:06.551]                           grepl <- base::grepl
[10:33:06.551]                           restarts <- computeRestarts(cond)
[10:33:06.551]                           for (restart in restarts) {
[10:33:06.551]                             name <- restart$name
[10:33:06.551]                             if (is.null(name)) 
[10:33:06.551]                               next
[10:33:06.551]                             if (!grepl(pattern, name)) 
[10:33:06.551]                               next
[10:33:06.551]                             invokeRestart(restart)
[10:33:06.551]                             muffled <- TRUE
[10:33:06.551]                             break
[10:33:06.551]                           }
[10:33:06.551]                         }
[10:33:06.551]                       }
[10:33:06.551]                       invisible(muffled)
[10:33:06.551]                     }
[10:33:06.551]                     muffleCondition(cond, pattern = "^muffle")
[10:33:06.551]                   }
[10:33:06.551]                 }
[10:33:06.551]             }
[10:33:06.551]         }))
[10:33:06.551]     }, error = function(ex) {
[10:33:06.551]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:06.551]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:06.551]                 ...future.rng), started = ...future.startTime, 
[10:33:06.551]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:06.551]             version = "1.8"), class = "FutureResult")
[10:33:06.551]     }, finally = {
[10:33:06.551]         if (!identical(...future.workdir, getwd())) 
[10:33:06.551]             setwd(...future.workdir)
[10:33:06.551]         {
[10:33:06.551]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:06.551]                 ...future.oldOptions$nwarnings <- NULL
[10:33:06.551]             }
[10:33:06.551]             base::options(...future.oldOptions)
[10:33:06.551]             if (.Platform$OS.type == "windows") {
[10:33:06.551]                 old_names <- names(...future.oldEnvVars)
[10:33:06.551]                 envs <- base::Sys.getenv()
[10:33:06.551]                 names <- names(envs)
[10:33:06.551]                 common <- intersect(names, old_names)
[10:33:06.551]                 added <- setdiff(names, old_names)
[10:33:06.551]                 removed <- setdiff(old_names, names)
[10:33:06.551]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:06.551]                   envs[common]]
[10:33:06.551]                 NAMES <- toupper(changed)
[10:33:06.551]                 args <- list()
[10:33:06.551]                 for (kk in seq_along(NAMES)) {
[10:33:06.551]                   name <- changed[[kk]]
[10:33:06.551]                   NAME <- NAMES[[kk]]
[10:33:06.551]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:06.551]                     next
[10:33:06.551]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:06.551]                 }
[10:33:06.551]                 NAMES <- toupper(added)
[10:33:06.551]                 for (kk in seq_along(NAMES)) {
[10:33:06.551]                   name <- added[[kk]]
[10:33:06.551]                   NAME <- NAMES[[kk]]
[10:33:06.551]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:06.551]                     next
[10:33:06.551]                   args[[name]] <- ""
[10:33:06.551]                 }
[10:33:06.551]                 NAMES <- toupper(removed)
[10:33:06.551]                 for (kk in seq_along(NAMES)) {
[10:33:06.551]                   name <- removed[[kk]]
[10:33:06.551]                   NAME <- NAMES[[kk]]
[10:33:06.551]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:06.551]                     next
[10:33:06.551]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:06.551]                 }
[10:33:06.551]                 if (length(args) > 0) 
[10:33:06.551]                   base::do.call(base::Sys.setenv, args = args)
[10:33:06.551]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:06.551]             }
[10:33:06.551]             else {
[10:33:06.551]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:06.551]             }
[10:33:06.551]             {
[10:33:06.551]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:06.551]                   0L) {
[10:33:06.551]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:06.551]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:06.551]                   base::options(opts)
[10:33:06.551]                 }
[10:33:06.551]                 {
[10:33:06.551]                   {
[10:33:06.551]                     NULL
[10:33:06.551]                     RNGkind("Mersenne-Twister")
[10:33:06.551]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:33:06.551]                       inherits = FALSE)
[10:33:06.551]                   }
[10:33:06.551]                   options(future.plan = NULL)
[10:33:06.551]                   if (is.na(NA_character_)) 
[10:33:06.551]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:06.551]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:06.551]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:06.551]                     .init = FALSE)
[10:33:06.551]                 }
[10:33:06.551]             }
[10:33:06.551]         }
[10:33:06.551]     })
[10:33:06.551]     if (TRUE) {
[10:33:06.551]         base::sink(type = "output", split = FALSE)
[10:33:06.551]         if (TRUE) {
[10:33:06.551]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:06.551]         }
[10:33:06.551]         else {
[10:33:06.551]             ...future.result["stdout"] <- base::list(NULL)
[10:33:06.551]         }
[10:33:06.551]         base::close(...future.stdout)
[10:33:06.551]         ...future.stdout <- NULL
[10:33:06.551]     }
[10:33:06.551]     ...future.result$conditions <- ...future.conditions
[10:33:06.551]     ...future.result$finished <- base::Sys.time()
[10:33:06.551]     ...future.result
[10:33:06.551] }
[10:33:06.553] assign_globals() ...
[10:33:06.553] List of 1
[10:33:06.553]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[10:33:06.553]   .. ..@ .Data     :function (x)  
[10:33:06.553]   .. ..@ generic   : chr "my_fcn"
[10:33:06.553]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[10:33:06.553]   .. ..@ package   : chr ".GlobalEnv"
[10:33:06.553]   .. ..@ group     : list()
[10:33:06.553]   .. ..@ valueClass: chr(0) 
[10:33:06.553]   .. ..@ signature : chr "x"
[10:33:06.553]   .. ..@ default   : NULL
[10:33:06.553]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[10:33:06.553]  - attr(*, "where")=List of 1
[10:33:06.553]   ..$ my_fcn:<environment: R_EmptyEnv> 
[10:33:06.553]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:33:06.553]  - attr(*, "resolved")= logi FALSE
[10:33:06.553]  - attr(*, "total_size")= num 3936
[10:33:06.553]  - attr(*, "already-done")= logi TRUE
[10:33:06.557] - reassign environment for ‘my_fcn’
[10:33:06.558] - copied ‘my_fcn’ to environment
[10:33:06.558] assign_globals() ... done
[10:33:06.558] plan(): Setting new future strategy stack:
[10:33:06.558] List of future strategies:
[10:33:06.558] 1. sequential:
[10:33:06.558]    - args: function (..., envir = parent.frame())
[10:33:06.558]    - tweaked: FALSE
[10:33:06.558]    - call: NULL
[10:33:06.558] plan(): nbrOfWorkers() = 1
[10:33:06.560] plan(): Setting new future strategy stack:
[10:33:06.560] List of future strategies:
[10:33:06.560] 1. sequential:
[10:33:06.560]    - args: function (..., envir = parent.frame())
[10:33:06.560]    - tweaked: FALSE
[10:33:06.560]    - call: plan(strategy)
[10:33:06.560] plan(): nbrOfWorkers() = 1
[10:33:06.561] SequentialFuture started (and completed)
[10:33:06.561] signalConditions() ...
[10:33:06.561]  - include = ‘immediateCondition’
[10:33:06.561]  - exclude = 
[10:33:06.561]  - resignal = FALSE
[10:33:06.561]  - Number of conditions: 1
[10:33:06.561] signalConditions() ... done
[10:33:06.561] - Launch lazy future ... done
[10:33:06.561] run() for ‘SequentialFuture’ ... done
[10:33:06.561] signalConditions() ...
[10:33:06.561]  - include = ‘immediateCondition’
[10:33:06.562]  - exclude = 
[10:33:06.562]  - resignal = FALSE
[10:33:06.563]  - Number of conditions: 1
[10:33:06.563] signalConditions() ... done
[10:33:06.563] Future state: ‘finished’
[10:33:06.563] signalConditions() ...
[10:33:06.563]  - include = ‘condition’
[10:33:06.564]  - exclude = ‘immediateCondition’
[10:33:06.564]  - resignal = TRUE
[10:33:06.564]  - Number of conditions: 1
[10:33:06.564]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[10:33:06.564] signalConditions() ... done
<simpleError in (function (classes, fdef, mtable) {    methods <- .findInheritedMethods(classes, fdef, mtable)    if (length(methods) == 1L)         return(methods[[1L]])    else if (length(methods) == 0L) {        cnames <- paste0("\"", vapply(classes, as.character,             ""), "\"", collapse = ", ")        stop(gettextf("unable to find an inherited method for function %s for signature %s",             sQuote(fdef@generic), sQuote(cnames)), domain = NA)    }    else stop("Internal error in finding inherited methods; didn't return a unique method",         domain = NA)})(list("numeric"), new("standardGeneric", .Data = function (x) standardGeneric("my_fcn"), generic = structure("my_fcn", package = ".GlobalEnv"),     package = ".GlobalEnv", group = list(), valueClass = character(0),     signature = "x", default = NULL, skeleton = (function (x)     stop(gettextf("invalid call in method dispatch to '%s' (no default method)",         "my_fcn"), domain = NA))(x)), <environment>): unable to find an inherited method for function ‘my_fcn’ for signature ‘"numeric"’>
Type of future: multicore
[10:33:06.565] plan(): Setting new future strategy stack:
[10:33:06.565] List of future strategies:
[10:33:06.565] 1. multicore:
[10:33:06.565]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:33:06.565]    - tweaked: FALSE
[10:33:06.565]    - call: plan(strategy)
[10:33:06.569] plan(): nbrOfWorkers() = 2
[10:33:06.569] getGlobalsAndPackages() ...
[10:33:06.569] Searching for globals...
[10:33:06.571] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[10:33:06.571] Searching for globals ... DONE
[10:33:06.571] Resolving globals: FALSE
[10:33:06.572] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[10:33:06.572] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[10:33:06.572] - globals: [1] ‘my_fcn’
[10:33:06.572] 
[10:33:06.573] getGlobalsAndPackages() ... DONE
[10:33:06.573] run() for ‘Future’ ...
[10:33:06.573] - state: ‘created’
[10:33:06.573] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:33:06.577] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:33:06.577] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:33:06.577]   - Field: ‘label’
[10:33:06.577]   - Field: ‘local’
[10:33:06.577]   - Field: ‘owner’
[10:33:06.577]   - Field: ‘envir’
[10:33:06.577]   - Field: ‘workers’
[10:33:06.577]   - Field: ‘packages’
[10:33:06.577]   - Field: ‘gc’
[10:33:06.578]   - Field: ‘job’
[10:33:06.578]   - Field: ‘conditions’
[10:33:06.578]   - Field: ‘expr’
[10:33:06.578]   - Field: ‘uuid’
[10:33:06.578]   - Field: ‘seed’
[10:33:06.578]   - Field: ‘version’
[10:33:06.578]   - Field: ‘result’
[10:33:06.578]   - Field: ‘asynchronous’
[10:33:06.578]   - Field: ‘calls’
[10:33:06.578]   - Field: ‘globals’
[10:33:06.578]   - Field: ‘stdout’
[10:33:06.579]   - Field: ‘earlySignal’
[10:33:06.579]   - Field: ‘lazy’
[10:33:06.579]   - Field: ‘state’
[10:33:06.579] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:33:06.579] - Launch lazy future ...
[10:33:06.580] Packages needed by the future expression (n = 0): <none>
[10:33:06.580] Packages needed by future strategies (n = 0): <none>
[10:33:06.580] {
[10:33:06.580]     {
[10:33:06.580]         {
[10:33:06.580]             ...future.startTime <- base::Sys.time()
[10:33:06.580]             {
[10:33:06.580]                 {
[10:33:06.580]                   {
[10:33:06.580]                     {
[10:33:06.580]                       base::local({
[10:33:06.580]                         has_future <- base::requireNamespace("future", 
[10:33:06.580]                           quietly = TRUE)
[10:33:06.580]                         if (has_future) {
[10:33:06.580]                           ns <- base::getNamespace("future")
[10:33:06.580]                           version <- ns[[".package"]][["version"]]
[10:33:06.580]                           if (is.null(version)) 
[10:33:06.580]                             version <- utils::packageVersion("future")
[10:33:06.580]                         }
[10:33:06.580]                         else {
[10:33:06.580]                           version <- NULL
[10:33:06.580]                         }
[10:33:06.580]                         if (!has_future || version < "1.8.0") {
[10:33:06.580]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:06.580]                             "", base::R.version$version.string), 
[10:33:06.580]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:06.580]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:06.580]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:06.580]                               "release", "version")], collapse = " "), 
[10:33:06.580]                             hostname = base::Sys.info()[["nodename"]])
[10:33:06.580]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:06.580]                             info)
[10:33:06.580]                           info <- base::paste(info, collapse = "; ")
[10:33:06.580]                           if (!has_future) {
[10:33:06.580]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:06.580]                               info)
[10:33:06.580]                           }
[10:33:06.580]                           else {
[10:33:06.580]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:06.580]                               info, version)
[10:33:06.580]                           }
[10:33:06.580]                           base::stop(msg)
[10:33:06.580]                         }
[10:33:06.580]                       })
[10:33:06.580]                     }
[10:33:06.580]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:06.580]                     base::options(mc.cores = 1L)
[10:33:06.580]                   }
[10:33:06.580]                   ...future.strategy.old <- future::plan("list")
[10:33:06.580]                   options(future.plan = NULL)
[10:33:06.580]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:06.580]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:06.580]                 }
[10:33:06.580]                 ...future.workdir <- getwd()
[10:33:06.580]             }
[10:33:06.580]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:06.580]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:06.580]         }
[10:33:06.580]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:06.580]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:06.580]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:06.580]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:06.580]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:06.580]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:06.580]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:06.580]             base::names(...future.oldOptions))
[10:33:06.580]     }
[10:33:06.580]     if (FALSE) {
[10:33:06.580]     }
[10:33:06.580]     else {
[10:33:06.580]         if (TRUE) {
[10:33:06.580]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:06.580]                 open = "w")
[10:33:06.580]         }
[10:33:06.580]         else {
[10:33:06.580]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:06.580]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:06.580]         }
[10:33:06.580]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:06.580]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:06.580]             base::sink(type = "output", split = FALSE)
[10:33:06.580]             base::close(...future.stdout)
[10:33:06.580]         }, add = TRUE)
[10:33:06.580]     }
[10:33:06.580]     ...future.frame <- base::sys.nframe()
[10:33:06.580]     ...future.conditions <- base::list()
[10:33:06.580]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:06.580]     if (FALSE) {
[10:33:06.580]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:06.580]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:06.580]     }
[10:33:06.580]     ...future.result <- base::tryCatch({
[10:33:06.580]         base::withCallingHandlers({
[10:33:06.580]             ...future.value <- base::withVisible(base::local({
[10:33:06.580]                 withCallingHandlers({
[10:33:06.580]                   {
[10:33:06.580]                     my_fcn
[10:33:06.580]                   }
[10:33:06.580]                 }, immediateCondition = function(cond) {
[10:33:06.580]                   save_rds <- function (object, pathname, ...) 
[10:33:06.580]                   {
[10:33:06.580]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:33:06.580]                     if (file_test("-f", pathname_tmp)) {
[10:33:06.580]                       fi_tmp <- file.info(pathname_tmp)
[10:33:06.580]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:33:06.580]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:33:06.580]                         fi_tmp[["mtime"]])
[10:33:06.580]                     }
[10:33:06.580]                     tryCatch({
[10:33:06.580]                       saveRDS(object, file = pathname_tmp, ...)
[10:33:06.580]                     }, error = function(ex) {
[10:33:06.580]                       msg <- conditionMessage(ex)
[10:33:06.580]                       fi_tmp <- file.info(pathname_tmp)
[10:33:06.580]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:33:06.580]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:33:06.580]                         fi_tmp[["mtime"]], msg)
[10:33:06.580]                       ex$message <- msg
[10:33:06.580]                       stop(ex)
[10:33:06.580]                     })
[10:33:06.580]                     stopifnot(file_test("-f", pathname_tmp))
[10:33:06.580]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:33:06.580]                     if (!res || file_test("-f", pathname_tmp)) {
[10:33:06.580]                       fi_tmp <- file.info(pathname_tmp)
[10:33:06.580]                       fi <- file.info(pathname)
[10:33:06.580]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:33:06.580]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:33:06.580]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:33:06.580]                         fi[["size"]], fi[["mtime"]])
[10:33:06.580]                       stop(msg)
[10:33:06.580]                     }
[10:33:06.580]                     invisible(pathname)
[10:33:06.580]                   }
[10:33:06.580]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:33:06.580]                     rootPath = tempdir()) 
[10:33:06.580]                   {
[10:33:06.580]                     obj <- list(time = Sys.time(), condition = cond)
[10:33:06.580]                     file <- tempfile(pattern = class(cond)[1], 
[10:33:06.580]                       tmpdir = path, fileext = ".rds")
[10:33:06.580]                     save_rds(obj, file)
[10:33:06.580]                   }
[10:33:06.580]                   saveImmediateCondition(cond, path = "/tmp/Rtmp5ctVvD/.future/immediateConditions")
[10:33:06.580]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:06.580]                   {
[10:33:06.580]                     inherits <- base::inherits
[10:33:06.580]                     invokeRestart <- base::invokeRestart
[10:33:06.580]                     is.null <- base::is.null
[10:33:06.580]                     muffled <- FALSE
[10:33:06.580]                     if (inherits(cond, "message")) {
[10:33:06.580]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:06.580]                       if (muffled) 
[10:33:06.580]                         invokeRestart("muffleMessage")
[10:33:06.580]                     }
[10:33:06.580]                     else if (inherits(cond, "warning")) {
[10:33:06.580]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:06.580]                       if (muffled) 
[10:33:06.580]                         invokeRestart("muffleWarning")
[10:33:06.580]                     }
[10:33:06.580]                     else if (inherits(cond, "condition")) {
[10:33:06.580]                       if (!is.null(pattern)) {
[10:33:06.580]                         computeRestarts <- base::computeRestarts
[10:33:06.580]                         grepl <- base::grepl
[10:33:06.580]                         restarts <- computeRestarts(cond)
[10:33:06.580]                         for (restart in restarts) {
[10:33:06.580]                           name <- restart$name
[10:33:06.580]                           if (is.null(name)) 
[10:33:06.580]                             next
[10:33:06.580]                           if (!grepl(pattern, name)) 
[10:33:06.580]                             next
[10:33:06.580]                           invokeRestart(restart)
[10:33:06.580]                           muffled <- TRUE
[10:33:06.580]                           break
[10:33:06.580]                         }
[10:33:06.580]                       }
[10:33:06.580]                     }
[10:33:06.580]                     invisible(muffled)
[10:33:06.580]                   }
[10:33:06.580]                   muffleCondition(cond)
[10:33:06.580]                 })
[10:33:06.580]             }))
[10:33:06.580]             future::FutureResult(value = ...future.value$value, 
[10:33:06.580]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:06.580]                   ...future.rng), globalenv = if (FALSE) 
[10:33:06.580]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:06.580]                     ...future.globalenv.names))
[10:33:06.580]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:06.580]         }, condition = base::local({
[10:33:06.580]             c <- base::c
[10:33:06.580]             inherits <- base::inherits
[10:33:06.580]             invokeRestart <- base::invokeRestart
[10:33:06.580]             length <- base::length
[10:33:06.580]             list <- base::list
[10:33:06.580]             seq.int <- base::seq.int
[10:33:06.580]             signalCondition <- base::signalCondition
[10:33:06.580]             sys.calls <- base::sys.calls
[10:33:06.580]             `[[` <- base::`[[`
[10:33:06.580]             `+` <- base::`+`
[10:33:06.580]             `<<-` <- base::`<<-`
[10:33:06.580]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:06.580]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:06.580]                   3L)]
[10:33:06.580]             }
[10:33:06.580]             function(cond) {
[10:33:06.580]                 is_error <- inherits(cond, "error")
[10:33:06.580]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:06.580]                   NULL)
[10:33:06.580]                 if (is_error) {
[10:33:06.580]                   sessionInformation <- function() {
[10:33:06.580]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:06.580]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:06.580]                       search = base::search(), system = base::Sys.info())
[10:33:06.580]                   }
[10:33:06.580]                   ...future.conditions[[length(...future.conditions) + 
[10:33:06.580]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:06.580]                     cond$call), session = sessionInformation(), 
[10:33:06.580]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:06.580]                   signalCondition(cond)
[10:33:06.580]                 }
[10:33:06.580]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:06.580]                 "immediateCondition"))) {
[10:33:06.580]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:06.580]                   ...future.conditions[[length(...future.conditions) + 
[10:33:06.580]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:06.580]                   if (TRUE && !signal) {
[10:33:06.580]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:06.580]                     {
[10:33:06.580]                       inherits <- base::inherits
[10:33:06.580]                       invokeRestart <- base::invokeRestart
[10:33:06.580]                       is.null <- base::is.null
[10:33:06.580]                       muffled <- FALSE
[10:33:06.580]                       if (inherits(cond, "message")) {
[10:33:06.580]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:06.580]                         if (muffled) 
[10:33:06.580]                           invokeRestart("muffleMessage")
[10:33:06.580]                       }
[10:33:06.580]                       else if (inherits(cond, "warning")) {
[10:33:06.580]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:06.580]                         if (muffled) 
[10:33:06.580]                           invokeRestart("muffleWarning")
[10:33:06.580]                       }
[10:33:06.580]                       else if (inherits(cond, "condition")) {
[10:33:06.580]                         if (!is.null(pattern)) {
[10:33:06.580]                           computeRestarts <- base::computeRestarts
[10:33:06.580]                           grepl <- base::grepl
[10:33:06.580]                           restarts <- computeRestarts(cond)
[10:33:06.580]                           for (restart in restarts) {
[10:33:06.580]                             name <- restart$name
[10:33:06.580]                             if (is.null(name)) 
[10:33:06.580]                               next
[10:33:06.580]                             if (!grepl(pattern, name)) 
[10:33:06.580]                               next
[10:33:06.580]                             invokeRestart(restart)
[10:33:06.580]                             muffled <- TRUE
[10:33:06.580]                             break
[10:33:06.580]                           }
[10:33:06.580]                         }
[10:33:06.580]                       }
[10:33:06.580]                       invisible(muffled)
[10:33:06.580]                     }
[10:33:06.580]                     muffleCondition(cond, pattern = "^muffle")
[10:33:06.580]                   }
[10:33:06.580]                 }
[10:33:06.580]                 else {
[10:33:06.580]                   if (TRUE) {
[10:33:06.580]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:06.580]                     {
[10:33:06.580]                       inherits <- base::inherits
[10:33:06.580]                       invokeRestart <- base::invokeRestart
[10:33:06.580]                       is.null <- base::is.null
[10:33:06.580]                       muffled <- FALSE
[10:33:06.580]                       if (inherits(cond, "message")) {
[10:33:06.580]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:06.580]                         if (muffled) 
[10:33:06.580]                           invokeRestart("muffleMessage")
[10:33:06.580]                       }
[10:33:06.580]                       else if (inherits(cond, "warning")) {
[10:33:06.580]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:06.580]                         if (muffled) 
[10:33:06.580]                           invokeRestart("muffleWarning")
[10:33:06.580]                       }
[10:33:06.580]                       else if (inherits(cond, "condition")) {
[10:33:06.580]                         if (!is.null(pattern)) {
[10:33:06.580]                           computeRestarts <- base::computeRestarts
[10:33:06.580]                           grepl <- base::grepl
[10:33:06.580]                           restarts <- computeRestarts(cond)
[10:33:06.580]                           for (restart in restarts) {
[10:33:06.580]                             name <- restart$name
[10:33:06.580]                             if (is.null(name)) 
[10:33:06.580]                               next
[10:33:06.580]                             if (!grepl(pattern, name)) 
[10:33:06.580]                               next
[10:33:06.580]                             invokeRestart(restart)
[10:33:06.580]                             muffled <- TRUE
[10:33:06.580]                             break
[10:33:06.580]                           }
[10:33:06.580]                         }
[10:33:06.580]                       }
[10:33:06.580]                       invisible(muffled)
[10:33:06.580]                     }
[10:33:06.580]                     muffleCondition(cond, pattern = "^muffle")
[10:33:06.580]                   }
[10:33:06.580]                 }
[10:33:06.580]             }
[10:33:06.580]         }))
[10:33:06.580]     }, error = function(ex) {
[10:33:06.580]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:06.580]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:06.580]                 ...future.rng), started = ...future.startTime, 
[10:33:06.580]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:06.580]             version = "1.8"), class = "FutureResult")
[10:33:06.580]     }, finally = {
[10:33:06.580]         if (!identical(...future.workdir, getwd())) 
[10:33:06.580]             setwd(...future.workdir)
[10:33:06.580]         {
[10:33:06.580]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:06.580]                 ...future.oldOptions$nwarnings <- NULL
[10:33:06.580]             }
[10:33:06.580]             base::options(...future.oldOptions)
[10:33:06.580]             if (.Platform$OS.type == "windows") {
[10:33:06.580]                 old_names <- names(...future.oldEnvVars)
[10:33:06.580]                 envs <- base::Sys.getenv()
[10:33:06.580]                 names <- names(envs)
[10:33:06.580]                 common <- intersect(names, old_names)
[10:33:06.580]                 added <- setdiff(names, old_names)
[10:33:06.580]                 removed <- setdiff(old_names, names)
[10:33:06.580]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:06.580]                   envs[common]]
[10:33:06.580]                 NAMES <- toupper(changed)
[10:33:06.580]                 args <- list()
[10:33:06.580]                 for (kk in seq_along(NAMES)) {
[10:33:06.580]                   name <- changed[[kk]]
[10:33:06.580]                   NAME <- NAMES[[kk]]
[10:33:06.580]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:06.580]                     next
[10:33:06.580]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:06.580]                 }
[10:33:06.580]                 NAMES <- toupper(added)
[10:33:06.580]                 for (kk in seq_along(NAMES)) {
[10:33:06.580]                   name <- added[[kk]]
[10:33:06.580]                   NAME <- NAMES[[kk]]
[10:33:06.580]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:06.580]                     next
[10:33:06.580]                   args[[name]] <- ""
[10:33:06.580]                 }
[10:33:06.580]                 NAMES <- toupper(removed)
[10:33:06.580]                 for (kk in seq_along(NAMES)) {
[10:33:06.580]                   name <- removed[[kk]]
[10:33:06.580]                   NAME <- NAMES[[kk]]
[10:33:06.580]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:06.580]                     next
[10:33:06.580]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:06.580]                 }
[10:33:06.580]                 if (length(args) > 0) 
[10:33:06.580]                   base::do.call(base::Sys.setenv, args = args)
[10:33:06.580]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:06.580]             }
[10:33:06.580]             else {
[10:33:06.580]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:06.580]             }
[10:33:06.580]             {
[10:33:06.580]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:06.580]                   0L) {
[10:33:06.580]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:06.580]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:06.580]                   base::options(opts)
[10:33:06.580]                 }
[10:33:06.580]                 {
[10:33:06.580]                   {
[10:33:06.580]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:06.580]                     NULL
[10:33:06.580]                   }
[10:33:06.580]                   options(future.plan = NULL)
[10:33:06.580]                   if (is.na(NA_character_)) 
[10:33:06.580]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:06.580]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:06.580]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:06.580]                     .init = FALSE)
[10:33:06.580]                 }
[10:33:06.580]             }
[10:33:06.580]         }
[10:33:06.580]     })
[10:33:06.580]     if (TRUE) {
[10:33:06.580]         base::sink(type = "output", split = FALSE)
[10:33:06.580]         if (TRUE) {
[10:33:06.580]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:06.580]         }
[10:33:06.580]         else {
[10:33:06.580]             ...future.result["stdout"] <- base::list(NULL)
[10:33:06.580]         }
[10:33:06.580]         base::close(...future.stdout)
[10:33:06.580]         ...future.stdout <- NULL
[10:33:06.580]     }
[10:33:06.580]     ...future.result$conditions <- ...future.conditions
[10:33:06.580]     ...future.result$finished <- base::Sys.time()
[10:33:06.580]     ...future.result
[10:33:06.580] }
[10:33:06.583] assign_globals() ...
[10:33:06.583] List of 1
[10:33:06.583]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[10:33:06.583]   .. ..@ .Data     :function (x)  
[10:33:06.583]   .. ..@ generic   : chr "my_fcn"
[10:33:06.583]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[10:33:06.583]   .. ..@ package   : chr ".GlobalEnv"
[10:33:06.583]   .. ..@ group     : list()
[10:33:06.583]   .. ..@ valueClass: chr(0) 
[10:33:06.583]   .. ..@ signature : chr "x"
[10:33:06.583]   .. ..@ default   : NULL
[10:33:06.583]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[10:33:06.583]  - attr(*, "where")=List of 1
[10:33:06.583]   ..$ my_fcn:<environment: R_EmptyEnv> 
[10:33:06.583]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:33:06.583]  - attr(*, "resolved")= logi FALSE
[10:33:06.583]  - attr(*, "total_size")= num 3936
[10:33:06.583]  - attr(*, "already-done")= logi TRUE
[10:33:06.587] - reassign environment for ‘my_fcn’
[10:33:06.588] - copied ‘my_fcn’ to environment
[10:33:06.588] assign_globals() ... done
[10:33:06.588] requestCore(): workers = 2
[10:33:06.591] MulticoreFuture started
[10:33:06.591] - Launch lazy future ... done
[10:33:06.591] run() for ‘MulticoreFuture’ ... done
[10:33:06.591] plan(): Setting new future strategy stack:
[10:33:06.592] List of future strategies:
[10:33:06.592] 1. sequential:
[10:33:06.592]    - args: function (..., envir = parent.frame())
[10:33:06.592]    - tweaked: FALSE
[10:33:06.592]    - call: NULL
[10:33:06.592] result() for MulticoreFuture ...
[10:33:06.593] plan(): nbrOfWorkers() = 1
[10:33:06.595] plan(): Setting new future strategy stack:
[10:33:06.595] List of future strategies:
[10:33:06.595] 1. multicore:
[10:33:06.595]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:33:06.595]    - tweaked: FALSE
[10:33:06.595]    - call: plan(strategy)
[10:33:06.600] plan(): nbrOfWorkers() = 2
[10:33:06.608] result() for MulticoreFuture ...
[10:33:06.608] result() for MulticoreFuture ... done
[10:33:06.608] result() for MulticoreFuture ... done
[10:33:06.608] result() for MulticoreFuture ...
[10:33:06.608] result() for MulticoreFuture ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x560b41a90ef0>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[10:33:06.609] getGlobalsAndPackages() ...
[10:33:06.609] Searching for globals...
[10:33:06.612] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[10:33:06.612] Searching for globals ... DONE
[10:33:06.613] Resolving globals: FALSE
[10:33:06.613] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[10:33:06.614] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[10:33:06.614] - globals: [1] ‘my_fcn’
[10:33:06.614] 
[10:33:06.614] getGlobalsAndPackages() ... DONE
[10:33:06.614] run() for ‘Future’ ...
[10:33:06.614] - state: ‘created’
[10:33:06.615] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:33:06.619] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:33:06.619] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:33:06.619]   - Field: ‘label’
[10:33:06.619]   - Field: ‘local’
[10:33:06.619]   - Field: ‘owner’
[10:33:06.619]   - Field: ‘envir’
[10:33:06.619]   - Field: ‘workers’
[10:33:06.619]   - Field: ‘packages’
[10:33:06.619]   - Field: ‘gc’
[10:33:06.620]   - Field: ‘job’
[10:33:06.620]   - Field: ‘conditions’
[10:33:06.620]   - Field: ‘expr’
[10:33:06.620]   - Field: ‘uuid’
[10:33:06.620]   - Field: ‘seed’
[10:33:06.620]   - Field: ‘version’
[10:33:06.620]   - Field: ‘result’
[10:33:06.620]   - Field: ‘asynchronous’
[10:33:06.620]   - Field: ‘calls’
[10:33:06.621]   - Field: ‘globals’
[10:33:06.621]   - Field: ‘stdout’
[10:33:06.621]   - Field: ‘earlySignal’
[10:33:06.621]   - Field: ‘lazy’
[10:33:06.621]   - Field: ‘state’
[10:33:06.621] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:33:06.621] - Launch lazy future ...
[10:33:06.622] Packages needed by the future expression (n = 0): <none>
[10:33:06.622] Packages needed by future strategies (n = 0): <none>
[10:33:06.622] {
[10:33:06.622]     {
[10:33:06.622]         {
[10:33:06.622]             ...future.startTime <- base::Sys.time()
[10:33:06.622]             {
[10:33:06.622]                 {
[10:33:06.622]                   {
[10:33:06.622]                     {
[10:33:06.622]                       base::local({
[10:33:06.622]                         has_future <- base::requireNamespace("future", 
[10:33:06.622]                           quietly = TRUE)
[10:33:06.622]                         if (has_future) {
[10:33:06.622]                           ns <- base::getNamespace("future")
[10:33:06.622]                           version <- ns[[".package"]][["version"]]
[10:33:06.622]                           if (is.null(version)) 
[10:33:06.622]                             version <- utils::packageVersion("future")
[10:33:06.622]                         }
[10:33:06.622]                         else {
[10:33:06.622]                           version <- NULL
[10:33:06.622]                         }
[10:33:06.622]                         if (!has_future || version < "1.8.0") {
[10:33:06.622]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:06.622]                             "", base::R.version$version.string), 
[10:33:06.622]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:06.622]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:06.622]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:06.622]                               "release", "version")], collapse = " "), 
[10:33:06.622]                             hostname = base::Sys.info()[["nodename"]])
[10:33:06.622]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:06.622]                             info)
[10:33:06.622]                           info <- base::paste(info, collapse = "; ")
[10:33:06.622]                           if (!has_future) {
[10:33:06.622]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:06.622]                               info)
[10:33:06.622]                           }
[10:33:06.622]                           else {
[10:33:06.622]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:06.622]                               info, version)
[10:33:06.622]                           }
[10:33:06.622]                           base::stop(msg)
[10:33:06.622]                         }
[10:33:06.622]                       })
[10:33:06.622]                     }
[10:33:06.622]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:06.622]                     base::options(mc.cores = 1L)
[10:33:06.622]                   }
[10:33:06.622]                   ...future.strategy.old <- future::plan("list")
[10:33:06.622]                   options(future.plan = NULL)
[10:33:06.622]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:06.622]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:06.622]                 }
[10:33:06.622]                 ...future.workdir <- getwd()
[10:33:06.622]             }
[10:33:06.622]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:06.622]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:06.622]         }
[10:33:06.622]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:06.622]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:06.622]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:06.622]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:06.622]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:06.622]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:06.622]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:06.622]             base::names(...future.oldOptions))
[10:33:06.622]     }
[10:33:06.622]     if (FALSE) {
[10:33:06.622]     }
[10:33:06.622]     else {
[10:33:06.622]         if (TRUE) {
[10:33:06.622]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:06.622]                 open = "w")
[10:33:06.622]         }
[10:33:06.622]         else {
[10:33:06.622]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:06.622]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:06.622]         }
[10:33:06.622]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:06.622]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:06.622]             base::sink(type = "output", split = FALSE)
[10:33:06.622]             base::close(...future.stdout)
[10:33:06.622]         }, add = TRUE)
[10:33:06.622]     }
[10:33:06.622]     ...future.frame <- base::sys.nframe()
[10:33:06.622]     ...future.conditions <- base::list()
[10:33:06.622]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:06.622]     if (FALSE) {
[10:33:06.622]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:06.622]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:06.622]     }
[10:33:06.622]     ...future.result <- base::tryCatch({
[10:33:06.622]         base::withCallingHandlers({
[10:33:06.622]             ...future.value <- base::withVisible(base::local({
[10:33:06.622]                 withCallingHandlers({
[10:33:06.622]                   {
[10:33:06.622]                     my_fcn(3)
[10:33:06.622]                   }
[10:33:06.622]                 }, immediateCondition = function(cond) {
[10:33:06.622]                   save_rds <- function (object, pathname, ...) 
[10:33:06.622]                   {
[10:33:06.622]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:33:06.622]                     if (file_test("-f", pathname_tmp)) {
[10:33:06.622]                       fi_tmp <- file.info(pathname_tmp)
[10:33:06.622]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:33:06.622]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:33:06.622]                         fi_tmp[["mtime"]])
[10:33:06.622]                     }
[10:33:06.622]                     tryCatch({
[10:33:06.622]                       saveRDS(object, file = pathname_tmp, ...)
[10:33:06.622]                     }, error = function(ex) {
[10:33:06.622]                       msg <- conditionMessage(ex)
[10:33:06.622]                       fi_tmp <- file.info(pathname_tmp)
[10:33:06.622]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:33:06.622]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:33:06.622]                         fi_tmp[["mtime"]], msg)
[10:33:06.622]                       ex$message <- msg
[10:33:06.622]                       stop(ex)
[10:33:06.622]                     })
[10:33:06.622]                     stopifnot(file_test("-f", pathname_tmp))
[10:33:06.622]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:33:06.622]                     if (!res || file_test("-f", pathname_tmp)) {
[10:33:06.622]                       fi_tmp <- file.info(pathname_tmp)
[10:33:06.622]                       fi <- file.info(pathname)
[10:33:06.622]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:33:06.622]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:33:06.622]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:33:06.622]                         fi[["size"]], fi[["mtime"]])
[10:33:06.622]                       stop(msg)
[10:33:06.622]                     }
[10:33:06.622]                     invisible(pathname)
[10:33:06.622]                   }
[10:33:06.622]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:33:06.622]                     rootPath = tempdir()) 
[10:33:06.622]                   {
[10:33:06.622]                     obj <- list(time = Sys.time(), condition = cond)
[10:33:06.622]                     file <- tempfile(pattern = class(cond)[1], 
[10:33:06.622]                       tmpdir = path, fileext = ".rds")
[10:33:06.622]                     save_rds(obj, file)
[10:33:06.622]                   }
[10:33:06.622]                   saveImmediateCondition(cond, path = "/tmp/Rtmp5ctVvD/.future/immediateConditions")
[10:33:06.622]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:06.622]                   {
[10:33:06.622]                     inherits <- base::inherits
[10:33:06.622]                     invokeRestart <- base::invokeRestart
[10:33:06.622]                     is.null <- base::is.null
[10:33:06.622]                     muffled <- FALSE
[10:33:06.622]                     if (inherits(cond, "message")) {
[10:33:06.622]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:06.622]                       if (muffled) 
[10:33:06.622]                         invokeRestart("muffleMessage")
[10:33:06.622]                     }
[10:33:06.622]                     else if (inherits(cond, "warning")) {
[10:33:06.622]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:06.622]                       if (muffled) 
[10:33:06.622]                         invokeRestart("muffleWarning")
[10:33:06.622]                     }
[10:33:06.622]                     else if (inherits(cond, "condition")) {
[10:33:06.622]                       if (!is.null(pattern)) {
[10:33:06.622]                         computeRestarts <- base::computeRestarts
[10:33:06.622]                         grepl <- base::grepl
[10:33:06.622]                         restarts <- computeRestarts(cond)
[10:33:06.622]                         for (restart in restarts) {
[10:33:06.622]                           name <- restart$name
[10:33:06.622]                           if (is.null(name)) 
[10:33:06.622]                             next
[10:33:06.622]                           if (!grepl(pattern, name)) 
[10:33:06.622]                             next
[10:33:06.622]                           invokeRestart(restart)
[10:33:06.622]                           muffled <- TRUE
[10:33:06.622]                           break
[10:33:06.622]                         }
[10:33:06.622]                       }
[10:33:06.622]                     }
[10:33:06.622]                     invisible(muffled)
[10:33:06.622]                   }
[10:33:06.622]                   muffleCondition(cond)
[10:33:06.622]                 })
[10:33:06.622]             }))
[10:33:06.622]             future::FutureResult(value = ...future.value$value, 
[10:33:06.622]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:06.622]                   ...future.rng), globalenv = if (FALSE) 
[10:33:06.622]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:06.622]                     ...future.globalenv.names))
[10:33:06.622]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:06.622]         }, condition = base::local({
[10:33:06.622]             c <- base::c
[10:33:06.622]             inherits <- base::inherits
[10:33:06.622]             invokeRestart <- base::invokeRestart
[10:33:06.622]             length <- base::length
[10:33:06.622]             list <- base::list
[10:33:06.622]             seq.int <- base::seq.int
[10:33:06.622]             signalCondition <- base::signalCondition
[10:33:06.622]             sys.calls <- base::sys.calls
[10:33:06.622]             `[[` <- base::`[[`
[10:33:06.622]             `+` <- base::`+`
[10:33:06.622]             `<<-` <- base::`<<-`
[10:33:06.622]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:06.622]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:06.622]                   3L)]
[10:33:06.622]             }
[10:33:06.622]             function(cond) {
[10:33:06.622]                 is_error <- inherits(cond, "error")
[10:33:06.622]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:06.622]                   NULL)
[10:33:06.622]                 if (is_error) {
[10:33:06.622]                   sessionInformation <- function() {
[10:33:06.622]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:06.622]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:06.622]                       search = base::search(), system = base::Sys.info())
[10:33:06.622]                   }
[10:33:06.622]                   ...future.conditions[[length(...future.conditions) + 
[10:33:06.622]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:06.622]                     cond$call), session = sessionInformation(), 
[10:33:06.622]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:06.622]                   signalCondition(cond)
[10:33:06.622]                 }
[10:33:06.622]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:06.622]                 "immediateCondition"))) {
[10:33:06.622]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:06.622]                   ...future.conditions[[length(...future.conditions) + 
[10:33:06.622]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:06.622]                   if (TRUE && !signal) {
[10:33:06.622]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:06.622]                     {
[10:33:06.622]                       inherits <- base::inherits
[10:33:06.622]                       invokeRestart <- base::invokeRestart
[10:33:06.622]                       is.null <- base::is.null
[10:33:06.622]                       muffled <- FALSE
[10:33:06.622]                       if (inherits(cond, "message")) {
[10:33:06.622]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:06.622]                         if (muffled) 
[10:33:06.622]                           invokeRestart("muffleMessage")
[10:33:06.622]                       }
[10:33:06.622]                       else if (inherits(cond, "warning")) {
[10:33:06.622]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:06.622]                         if (muffled) 
[10:33:06.622]                           invokeRestart("muffleWarning")
[10:33:06.622]                       }
[10:33:06.622]                       else if (inherits(cond, "condition")) {
[10:33:06.622]                         if (!is.null(pattern)) {
[10:33:06.622]                           computeRestarts <- base::computeRestarts
[10:33:06.622]                           grepl <- base::grepl
[10:33:06.622]                           restarts <- computeRestarts(cond)
[10:33:06.622]                           for (restart in restarts) {
[10:33:06.622]                             name <- restart$name
[10:33:06.622]                             if (is.null(name)) 
[10:33:06.622]                               next
[10:33:06.622]                             if (!grepl(pattern, name)) 
[10:33:06.622]                               next
[10:33:06.622]                             invokeRestart(restart)
[10:33:06.622]                             muffled <- TRUE
[10:33:06.622]                             break
[10:33:06.622]                           }
[10:33:06.622]                         }
[10:33:06.622]                       }
[10:33:06.622]                       invisible(muffled)
[10:33:06.622]                     }
[10:33:06.622]                     muffleCondition(cond, pattern = "^muffle")
[10:33:06.622]                   }
[10:33:06.622]                 }
[10:33:06.622]                 else {
[10:33:06.622]                   if (TRUE) {
[10:33:06.622]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:06.622]                     {
[10:33:06.622]                       inherits <- base::inherits
[10:33:06.622]                       invokeRestart <- base::invokeRestart
[10:33:06.622]                       is.null <- base::is.null
[10:33:06.622]                       muffled <- FALSE
[10:33:06.622]                       if (inherits(cond, "message")) {
[10:33:06.622]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:06.622]                         if (muffled) 
[10:33:06.622]                           invokeRestart("muffleMessage")
[10:33:06.622]                       }
[10:33:06.622]                       else if (inherits(cond, "warning")) {
[10:33:06.622]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:06.622]                         if (muffled) 
[10:33:06.622]                           invokeRestart("muffleWarning")
[10:33:06.622]                       }
[10:33:06.622]                       else if (inherits(cond, "condition")) {
[10:33:06.622]                         if (!is.null(pattern)) {
[10:33:06.622]                           computeRestarts <- base::computeRestarts
[10:33:06.622]                           grepl <- base::grepl
[10:33:06.622]                           restarts <- computeRestarts(cond)
[10:33:06.622]                           for (restart in restarts) {
[10:33:06.622]                             name <- restart$name
[10:33:06.622]                             if (is.null(name)) 
[10:33:06.622]                               next
[10:33:06.622]                             if (!grepl(pattern, name)) 
[10:33:06.622]                               next
[10:33:06.622]                             invokeRestart(restart)
[10:33:06.622]                             muffled <- TRUE
[10:33:06.622]                             break
[10:33:06.622]                           }
[10:33:06.622]                         }
[10:33:06.622]                       }
[10:33:06.622]                       invisible(muffled)
[10:33:06.622]                     }
[10:33:06.622]                     muffleCondition(cond, pattern = "^muffle")
[10:33:06.622]                   }
[10:33:06.622]                 }
[10:33:06.622]             }
[10:33:06.622]         }))
[10:33:06.622]     }, error = function(ex) {
[10:33:06.622]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:06.622]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:06.622]                 ...future.rng), started = ...future.startTime, 
[10:33:06.622]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:06.622]             version = "1.8"), class = "FutureResult")
[10:33:06.622]     }, finally = {
[10:33:06.622]         if (!identical(...future.workdir, getwd())) 
[10:33:06.622]             setwd(...future.workdir)
[10:33:06.622]         {
[10:33:06.622]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:06.622]                 ...future.oldOptions$nwarnings <- NULL
[10:33:06.622]             }
[10:33:06.622]             base::options(...future.oldOptions)
[10:33:06.622]             if (.Platform$OS.type == "windows") {
[10:33:06.622]                 old_names <- names(...future.oldEnvVars)
[10:33:06.622]                 envs <- base::Sys.getenv()
[10:33:06.622]                 names <- names(envs)
[10:33:06.622]                 common <- intersect(names, old_names)
[10:33:06.622]                 added <- setdiff(names, old_names)
[10:33:06.622]                 removed <- setdiff(old_names, names)
[10:33:06.622]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:06.622]                   envs[common]]
[10:33:06.622]                 NAMES <- toupper(changed)
[10:33:06.622]                 args <- list()
[10:33:06.622]                 for (kk in seq_along(NAMES)) {
[10:33:06.622]                   name <- changed[[kk]]
[10:33:06.622]                   NAME <- NAMES[[kk]]
[10:33:06.622]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:06.622]                     next
[10:33:06.622]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:06.622]                 }
[10:33:06.622]                 NAMES <- toupper(added)
[10:33:06.622]                 for (kk in seq_along(NAMES)) {
[10:33:06.622]                   name <- added[[kk]]
[10:33:06.622]                   NAME <- NAMES[[kk]]
[10:33:06.622]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:06.622]                     next
[10:33:06.622]                   args[[name]] <- ""
[10:33:06.622]                 }
[10:33:06.622]                 NAMES <- toupper(removed)
[10:33:06.622]                 for (kk in seq_along(NAMES)) {
[10:33:06.622]                   name <- removed[[kk]]
[10:33:06.622]                   NAME <- NAMES[[kk]]
[10:33:06.622]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:06.622]                     next
[10:33:06.622]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:06.622]                 }
[10:33:06.622]                 if (length(args) > 0) 
[10:33:06.622]                   base::do.call(base::Sys.setenv, args = args)
[10:33:06.622]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:06.622]             }
[10:33:06.622]             else {
[10:33:06.622]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:06.622]             }
[10:33:06.622]             {
[10:33:06.622]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:06.622]                   0L) {
[10:33:06.622]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:06.622]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:06.622]                   base::options(opts)
[10:33:06.622]                 }
[10:33:06.622]                 {
[10:33:06.622]                   {
[10:33:06.622]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:06.622]                     NULL
[10:33:06.622]                   }
[10:33:06.622]                   options(future.plan = NULL)
[10:33:06.622]                   if (is.na(NA_character_)) 
[10:33:06.622]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:06.622]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:06.622]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:06.622]                     .init = FALSE)
[10:33:06.622]                 }
[10:33:06.622]             }
[10:33:06.622]         }
[10:33:06.622]     })
[10:33:06.622]     if (TRUE) {
[10:33:06.622]         base::sink(type = "output", split = FALSE)
[10:33:06.622]         if (TRUE) {
[10:33:06.622]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:06.622]         }
[10:33:06.622]         else {
[10:33:06.622]             ...future.result["stdout"] <- base::list(NULL)
[10:33:06.622]         }
[10:33:06.622]         base::close(...future.stdout)
[10:33:06.622]         ...future.stdout <- NULL
[10:33:06.622]     }
[10:33:06.622]     ...future.result$conditions <- ...future.conditions
[10:33:06.622]     ...future.result$finished <- base::Sys.time()
[10:33:06.622]     ...future.result
[10:33:06.622] }
[10:33:06.625] assign_globals() ...
[10:33:06.625] List of 1
[10:33:06.625]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[10:33:06.625]   .. ..@ .Data     :function (x)  
[10:33:06.625]   .. ..@ generic   : chr "my_fcn"
[10:33:06.625]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[10:33:06.625]   .. ..@ package   : chr ".GlobalEnv"
[10:33:06.625]   .. ..@ group     : list()
[10:33:06.625]   .. ..@ valueClass: chr(0) 
[10:33:06.625]   .. ..@ signature : chr "x"
[10:33:06.625]   .. ..@ default   : NULL
[10:33:06.625]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[10:33:06.625]  - attr(*, "where")=List of 1
[10:33:06.625]   ..$ my_fcn:<environment: R_EmptyEnv> 
[10:33:06.625]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:33:06.625]  - attr(*, "resolved")= logi FALSE
[10:33:06.625]  - attr(*, "total_size")= num 3936
[10:33:06.625]  - attr(*, "already-done")= logi TRUE
[10:33:06.630] - reassign environment for ‘my_fcn’
[10:33:06.630] - copied ‘my_fcn’ to environment
[10:33:06.630] assign_globals() ... done
[10:33:06.631] requestCore(): workers = 2
[10:33:06.632] MulticoreFuture started
[10:33:06.633] - Launch lazy future ... done
[10:33:06.633] run() for ‘MulticoreFuture’ ... done
[10:33:06.633] result() for MulticoreFuture ...
[10:33:06.634] plan(): Setting new future strategy stack:
[10:33:06.634] List of future strategies:
[10:33:06.634] 1. sequential:
[10:33:06.634]    - args: function (..., envir = parent.frame())
[10:33:06.634]    - tweaked: FALSE
[10:33:06.634]    - call: NULL
[10:33:06.635] plan(): nbrOfWorkers() = 1
[10:33:06.637] plan(): Setting new future strategy stack:
[10:33:06.638] List of future strategies:
[10:33:06.638] 1. multicore:
[10:33:06.638]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:33:06.638]    - tweaked: FALSE
[10:33:06.638]    - call: plan(strategy)
[10:33:06.643] plan(): nbrOfWorkers() = 2
[10:33:06.661] result() for MulticoreFuture ...
[10:33:06.661] result() for MulticoreFuture ... done
[10:33:06.662] signalConditions() ...
[10:33:06.662]  - include = ‘immediateCondition’
[10:33:06.662]  - exclude = 
[10:33:06.662]  - resignal = FALSE
[10:33:06.662]  - Number of conditions: 1
[10:33:06.662] signalConditions() ... done
[10:33:06.663] result() for MulticoreFuture ... done
[10:33:06.663] result() for MulticoreFuture ...
[10:33:06.663] result() for MulticoreFuture ... done
[10:33:06.663] signalConditions() ...
[10:33:06.663]  - include = ‘immediateCondition’
[10:33:06.663]  - exclude = 
[10:33:06.663]  - resignal = FALSE
[10:33:06.664]  - Number of conditions: 1
[10:33:06.664] signalConditions() ... done
[10:33:06.664] Future state: ‘finished’
[10:33:06.664] result() for MulticoreFuture ...
[10:33:06.664] result() for MulticoreFuture ... done
[10:33:06.664] signalConditions() ...
[10:33:06.664]  - include = ‘condition’
[10:33:06.664]  - exclude = ‘immediateCondition’
[10:33:06.665]  - resignal = TRUE
[10:33:06.665]  - Number of conditions: 1
[10:33:06.665]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[10:33:06.665] signalConditions() ... done
<simpleError in (function (classes, fdef, mtable) {    methods <- .findInheritedMethods(classes, fdef, mtable)    if (length(methods) == 1L)         return(methods[[1L]])    else if (length(methods) == 0L) {        cnames <- paste0("\"", vapply(classes, as.character,             ""), "\"", collapse = ", ")        stop(gettextf("unable to find an inherited method for function %s for signature %s",             sQuote(fdef@generic), sQuote(cnames)), domain = NA)    }    else stop("Internal error in finding inherited methods; didn't return a unique method",         domain = NA)})(list("numeric"), new("standardGeneric", .Data = function (x) standardGeneric("my_fcn"), generic = structure("my_fcn", package = ".GlobalEnv"),     package = ".GlobalEnv", group = list(), valueClass = character(0),     signature = "x", default = NULL, skeleton = (function (x)     stop(gettextf("invalid call in method dispatch to '%s' (no default method)",         "my_fcn"), domain = NA))(x)), <environment>): unable to find an inherited method for function ‘my_fcn’ for signature ‘"numeric"’>
Type of future: multisession
[10:33:06.666] plan(): Setting new future strategy stack:
[10:33:06.666] List of future strategies:
[10:33:06.666] 1. multisession:
[10:33:06.666]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:33:06.666]    - tweaked: FALSE
[10:33:06.666]    - call: plan(strategy)
[10:33:06.667] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:33:06.667] multisession:
[10:33:06.667] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:33:06.667] - tweaked: FALSE
[10:33:06.667] - call: plan(strategy)
[10:33:06.674] getGlobalsAndPackages() ...
[10:33:06.674] Not searching for globals
[10:33:06.674] - globals: [0] <none>
[10:33:06.674] getGlobalsAndPackages() ... DONE
[10:33:06.675] [local output] makeClusterPSOCK() ...
[10:33:06.718] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[10:33:06.719] [local output] Base port: 11131
[10:33:06.719] [local output] Getting setup options for 2 cluster nodes ...
[10:33:06.719] [local output]  - Node 1 of 2 ...
[10:33:06.719] [local output] localMachine=TRUE => revtunnel=FALSE

[10:33:06.720] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp5ctVvD/worker.rank=1.parallelly.parent=83677.146ddbf3f91.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmp5ctVvD/worker.rank=1.parallelly.parent=83677.146ddbf3f91.pid")'’
[10:33:06.908] - Possible to infer worker's PID: TRUE
[10:33:06.909] [local output] Rscript port: 11131

[10:33:06.909] [local output]  - Node 2 of 2 ...
[10:33:06.909] [local output] localMachine=TRUE => revtunnel=FALSE

[10:33:06.910] [local output] Rscript port: 11131

[10:33:06.910] [local output] Getting setup options for 2 cluster nodes ... done
[10:33:06.910] [local output]  - Parallel setup requested for some PSOCK nodes
[10:33:06.911] [local output] Setting up PSOCK nodes in parallel
[10:33:06.911] List of 36
[10:33:06.911]  $ worker          : chr "localhost"
[10:33:06.911]   ..- attr(*, "localhost")= logi TRUE
[10:33:06.911]  $ master          : chr "localhost"
[10:33:06.911]  $ port            : int 11131
[10:33:06.911]  $ connectTimeout  : num 120
[10:33:06.911]  $ timeout         : num 2592000
[10:33:06.911]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:33:06.911]  $ homogeneous     : logi TRUE
[10:33:06.911]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:33:06.911]  $ rscript_envs    : NULL
[10:33:06.911]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:33:06.911]  $ rscript_startup : NULL
[10:33:06.911]  $ rscript_sh      : chr "sh"
[10:33:06.911]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:33:06.911]  $ methods         : logi TRUE
[10:33:06.911]  $ socketOptions   : chr "no-delay"
[10:33:06.911]  $ useXDR          : logi FALSE
[10:33:06.911]  $ outfile         : chr "/dev/null"
[10:33:06.911]  $ renice          : int NA
[10:33:06.911]  $ rshcmd          : NULL
[10:33:06.911]  $ user            : chr(0) 
[10:33:06.911]  $ revtunnel       : logi FALSE
[10:33:06.911]  $ rshlogfile      : NULL
[10:33:06.911]  $ rshopts         : chr(0) 
[10:33:06.911]  $ rank            : int 1
[10:33:06.911]  $ manual          : logi FALSE
[10:33:06.911]  $ dryrun          : logi FALSE
[10:33:06.911]  $ quiet           : logi FALSE
[10:33:06.911]  $ setup_strategy  : chr "parallel"
[10:33:06.911]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:33:06.911]  $ pidfile         : chr "/tmp/Rtmp5ctVvD/worker.rank=1.parallelly.parent=83677.146ddbf3f91.pid"
[10:33:06.911]  $ rshcmd_label    : NULL
[10:33:06.911]  $ rsh_call        : NULL
[10:33:06.911]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:33:06.911]  $ localMachine    : logi TRUE
[10:33:06.911]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:33:06.911]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:33:06.911]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:33:06.911]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:33:06.911]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:33:06.911]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:33:06.911]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:33:06.911]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:33:06.911]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:33:06.911]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:33:06.911]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:33:06.911]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:33:06.911]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:33:06.911]  $ arguments       :List of 28
[10:33:06.911]   ..$ worker          : chr "localhost"
[10:33:06.911]   ..$ master          : NULL
[10:33:06.911]   ..$ port            : int 11131
[10:33:06.911]   ..$ connectTimeout  : num 120
[10:33:06.911]   ..$ timeout         : num 2592000
[10:33:06.911]   ..$ rscript         : NULL
[10:33:06.911]   ..$ homogeneous     : NULL
[10:33:06.911]   ..$ rscript_args    : NULL
[10:33:06.911]   ..$ rscript_envs    : NULL
[10:33:06.911]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:33:06.911]   ..$ rscript_startup : NULL
[10:33:06.911]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:33:06.911]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:33:06.911]   ..$ methods         : logi TRUE
[10:33:06.911]   ..$ socketOptions   : chr "no-delay"
[10:33:06.911]   ..$ useXDR          : logi FALSE
[10:33:06.911]   ..$ outfile         : chr "/dev/null"
[10:33:06.911]   ..$ renice          : int NA
[10:33:06.911]   ..$ rshcmd          : NULL
[10:33:06.911]   ..$ user            : NULL
[10:33:06.911]   ..$ revtunnel       : logi NA
[10:33:06.911]   ..$ rshlogfile      : NULL
[10:33:06.911]   ..$ rshopts         : NULL
[10:33:06.911]   ..$ rank            : int 1
[10:33:06.911]   ..$ manual          : logi FALSE
[10:33:06.911]   ..$ dryrun          : logi FALSE
[10:33:06.911]   ..$ quiet           : logi FALSE
[10:33:06.911]   ..$ setup_strategy  : chr "parallel"
[10:33:06.911]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:33:06.928] [local output] System call to launch all workers:
[10:33:06.928] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp5ctVvD/worker.rank=1.parallelly.parent=83677.146ddbf3f91.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11131 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:33:06.928] [local output] Starting PSOCK main server
[10:33:06.934] [local output] Workers launched
[10:33:06.934] [local output] Waiting for workers to connect back
[10:33:06.934]  - [local output] 0 workers out of 2 ready
[10:33:07.182]  - [local output] 0 workers out of 2 ready
[10:33:07.183]  - [local output] 1 workers out of 2 ready
[10:33:07.183]  - [local output] 2 workers out of 2 ready
[10:33:07.183] [local output] Launching of workers completed
[10:33:07.183] [local output] Collecting session information from workers
[10:33:07.184] [local output]  - Worker #1 of 2
[10:33:07.185] [local output]  - Worker #2 of 2
[10:33:07.185] [local output] makeClusterPSOCK() ... done
[10:33:07.197] Packages needed by the future expression (n = 0): <none>
[10:33:07.197] Packages needed by future strategies (n = 0): <none>
[10:33:07.197] {
[10:33:07.197]     {
[10:33:07.197]         {
[10:33:07.197]             ...future.startTime <- base::Sys.time()
[10:33:07.197]             {
[10:33:07.197]                 {
[10:33:07.197]                   {
[10:33:07.197]                     {
[10:33:07.197]                       base::local({
[10:33:07.197]                         has_future <- base::requireNamespace("future", 
[10:33:07.197]                           quietly = TRUE)
[10:33:07.197]                         if (has_future) {
[10:33:07.197]                           ns <- base::getNamespace("future")
[10:33:07.197]                           version <- ns[[".package"]][["version"]]
[10:33:07.197]                           if (is.null(version)) 
[10:33:07.197]                             version <- utils::packageVersion("future")
[10:33:07.197]                         }
[10:33:07.197]                         else {
[10:33:07.197]                           version <- NULL
[10:33:07.197]                         }
[10:33:07.197]                         if (!has_future || version < "1.8.0") {
[10:33:07.197]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:07.197]                             "", base::R.version$version.string), 
[10:33:07.197]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:07.197]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:07.197]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:07.197]                               "release", "version")], collapse = " "), 
[10:33:07.197]                             hostname = base::Sys.info()[["nodename"]])
[10:33:07.197]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:07.197]                             info)
[10:33:07.197]                           info <- base::paste(info, collapse = "; ")
[10:33:07.197]                           if (!has_future) {
[10:33:07.197]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:07.197]                               info)
[10:33:07.197]                           }
[10:33:07.197]                           else {
[10:33:07.197]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:07.197]                               info, version)
[10:33:07.197]                           }
[10:33:07.197]                           base::stop(msg)
[10:33:07.197]                         }
[10:33:07.197]                       })
[10:33:07.197]                     }
[10:33:07.197]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:07.197]                     base::options(mc.cores = 1L)
[10:33:07.197]                   }
[10:33:07.197]                   ...future.strategy.old <- future::plan("list")
[10:33:07.197]                   options(future.plan = NULL)
[10:33:07.197]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:07.197]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:07.197]                 }
[10:33:07.197]                 ...future.workdir <- getwd()
[10:33:07.197]             }
[10:33:07.197]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:07.197]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:07.197]         }
[10:33:07.197]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:07.197]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:07.197]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:07.197]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:07.197]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:07.197]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:07.197]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:07.197]             base::names(...future.oldOptions))
[10:33:07.197]     }
[10:33:07.197]     if (FALSE) {
[10:33:07.197]     }
[10:33:07.197]     else {
[10:33:07.197]         if (TRUE) {
[10:33:07.197]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:07.197]                 open = "w")
[10:33:07.197]         }
[10:33:07.197]         else {
[10:33:07.197]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:07.197]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:07.197]         }
[10:33:07.197]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:07.197]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:07.197]             base::sink(type = "output", split = FALSE)
[10:33:07.197]             base::close(...future.stdout)
[10:33:07.197]         }, add = TRUE)
[10:33:07.197]     }
[10:33:07.197]     ...future.frame <- base::sys.nframe()
[10:33:07.197]     ...future.conditions <- base::list()
[10:33:07.197]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:07.197]     if (FALSE) {
[10:33:07.197]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:07.197]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:07.197]     }
[10:33:07.197]     ...future.result <- base::tryCatch({
[10:33:07.197]         base::withCallingHandlers({
[10:33:07.197]             ...future.value <- base::withVisible(base::local({
[10:33:07.197]                 ...future.makeSendCondition <- base::local({
[10:33:07.197]                   sendCondition <- NULL
[10:33:07.197]                   function(frame = 1L) {
[10:33:07.197]                     if (is.function(sendCondition)) 
[10:33:07.197]                       return(sendCondition)
[10:33:07.197]                     ns <- getNamespace("parallel")
[10:33:07.197]                     if (exists("sendData", mode = "function", 
[10:33:07.197]                       envir = ns)) {
[10:33:07.197]                       parallel_sendData <- get("sendData", mode = "function", 
[10:33:07.197]                         envir = ns)
[10:33:07.197]                       envir <- sys.frame(frame)
[10:33:07.197]                       master <- NULL
[10:33:07.197]                       while (!identical(envir, .GlobalEnv) && 
[10:33:07.197]                         !identical(envir, emptyenv())) {
[10:33:07.197]                         if (exists("master", mode = "list", envir = envir, 
[10:33:07.197]                           inherits = FALSE)) {
[10:33:07.197]                           master <- get("master", mode = "list", 
[10:33:07.197]                             envir = envir, inherits = FALSE)
[10:33:07.197]                           if (inherits(master, c("SOCKnode", 
[10:33:07.197]                             "SOCK0node"))) {
[10:33:07.197]                             sendCondition <<- function(cond) {
[10:33:07.197]                               data <- list(type = "VALUE", value = cond, 
[10:33:07.197]                                 success = TRUE)
[10:33:07.197]                               parallel_sendData(master, data)
[10:33:07.197]                             }
[10:33:07.197]                             return(sendCondition)
[10:33:07.197]                           }
[10:33:07.197]                         }
[10:33:07.197]                         frame <- frame + 1L
[10:33:07.197]                         envir <- sys.frame(frame)
[10:33:07.197]                       }
[10:33:07.197]                     }
[10:33:07.197]                     sendCondition <<- function(cond) NULL
[10:33:07.197]                   }
[10:33:07.197]                 })
[10:33:07.197]                 withCallingHandlers({
[10:33:07.197]                   NA
[10:33:07.197]                 }, immediateCondition = function(cond) {
[10:33:07.197]                   sendCondition <- ...future.makeSendCondition()
[10:33:07.197]                   sendCondition(cond)
[10:33:07.197]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:07.197]                   {
[10:33:07.197]                     inherits <- base::inherits
[10:33:07.197]                     invokeRestart <- base::invokeRestart
[10:33:07.197]                     is.null <- base::is.null
[10:33:07.197]                     muffled <- FALSE
[10:33:07.197]                     if (inherits(cond, "message")) {
[10:33:07.197]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:07.197]                       if (muffled) 
[10:33:07.197]                         invokeRestart("muffleMessage")
[10:33:07.197]                     }
[10:33:07.197]                     else if (inherits(cond, "warning")) {
[10:33:07.197]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:07.197]                       if (muffled) 
[10:33:07.197]                         invokeRestart("muffleWarning")
[10:33:07.197]                     }
[10:33:07.197]                     else if (inherits(cond, "condition")) {
[10:33:07.197]                       if (!is.null(pattern)) {
[10:33:07.197]                         computeRestarts <- base::computeRestarts
[10:33:07.197]                         grepl <- base::grepl
[10:33:07.197]                         restarts <- computeRestarts(cond)
[10:33:07.197]                         for (restart in restarts) {
[10:33:07.197]                           name <- restart$name
[10:33:07.197]                           if (is.null(name)) 
[10:33:07.197]                             next
[10:33:07.197]                           if (!grepl(pattern, name)) 
[10:33:07.197]                             next
[10:33:07.197]                           invokeRestart(restart)
[10:33:07.197]                           muffled <- TRUE
[10:33:07.197]                           break
[10:33:07.197]                         }
[10:33:07.197]                       }
[10:33:07.197]                     }
[10:33:07.197]                     invisible(muffled)
[10:33:07.197]                   }
[10:33:07.197]                   muffleCondition(cond)
[10:33:07.197]                 })
[10:33:07.197]             }))
[10:33:07.197]             future::FutureResult(value = ...future.value$value, 
[10:33:07.197]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:07.197]                   ...future.rng), globalenv = if (FALSE) 
[10:33:07.197]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:07.197]                     ...future.globalenv.names))
[10:33:07.197]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:07.197]         }, condition = base::local({
[10:33:07.197]             c <- base::c
[10:33:07.197]             inherits <- base::inherits
[10:33:07.197]             invokeRestart <- base::invokeRestart
[10:33:07.197]             length <- base::length
[10:33:07.197]             list <- base::list
[10:33:07.197]             seq.int <- base::seq.int
[10:33:07.197]             signalCondition <- base::signalCondition
[10:33:07.197]             sys.calls <- base::sys.calls
[10:33:07.197]             `[[` <- base::`[[`
[10:33:07.197]             `+` <- base::`+`
[10:33:07.197]             `<<-` <- base::`<<-`
[10:33:07.197]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:07.197]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:07.197]                   3L)]
[10:33:07.197]             }
[10:33:07.197]             function(cond) {
[10:33:07.197]                 is_error <- inherits(cond, "error")
[10:33:07.197]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:07.197]                   NULL)
[10:33:07.197]                 if (is_error) {
[10:33:07.197]                   sessionInformation <- function() {
[10:33:07.197]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:07.197]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:07.197]                       search = base::search(), system = base::Sys.info())
[10:33:07.197]                   }
[10:33:07.197]                   ...future.conditions[[length(...future.conditions) + 
[10:33:07.197]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:07.197]                     cond$call), session = sessionInformation(), 
[10:33:07.197]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:07.197]                   signalCondition(cond)
[10:33:07.197]                 }
[10:33:07.197]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:07.197]                 "immediateCondition"))) {
[10:33:07.197]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:07.197]                   ...future.conditions[[length(...future.conditions) + 
[10:33:07.197]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:07.197]                   if (TRUE && !signal) {
[10:33:07.197]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:07.197]                     {
[10:33:07.197]                       inherits <- base::inherits
[10:33:07.197]                       invokeRestart <- base::invokeRestart
[10:33:07.197]                       is.null <- base::is.null
[10:33:07.197]                       muffled <- FALSE
[10:33:07.197]                       if (inherits(cond, "message")) {
[10:33:07.197]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:07.197]                         if (muffled) 
[10:33:07.197]                           invokeRestart("muffleMessage")
[10:33:07.197]                       }
[10:33:07.197]                       else if (inherits(cond, "warning")) {
[10:33:07.197]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:07.197]                         if (muffled) 
[10:33:07.197]                           invokeRestart("muffleWarning")
[10:33:07.197]                       }
[10:33:07.197]                       else if (inherits(cond, "condition")) {
[10:33:07.197]                         if (!is.null(pattern)) {
[10:33:07.197]                           computeRestarts <- base::computeRestarts
[10:33:07.197]                           grepl <- base::grepl
[10:33:07.197]                           restarts <- computeRestarts(cond)
[10:33:07.197]                           for (restart in restarts) {
[10:33:07.197]                             name <- restart$name
[10:33:07.197]                             if (is.null(name)) 
[10:33:07.197]                               next
[10:33:07.197]                             if (!grepl(pattern, name)) 
[10:33:07.197]                               next
[10:33:07.197]                             invokeRestart(restart)
[10:33:07.197]                             muffled <- TRUE
[10:33:07.197]                             break
[10:33:07.197]                           }
[10:33:07.197]                         }
[10:33:07.197]                       }
[10:33:07.197]                       invisible(muffled)
[10:33:07.197]                     }
[10:33:07.197]                     muffleCondition(cond, pattern = "^muffle")
[10:33:07.197]                   }
[10:33:07.197]                 }
[10:33:07.197]                 else {
[10:33:07.197]                   if (TRUE) {
[10:33:07.197]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:07.197]                     {
[10:33:07.197]                       inherits <- base::inherits
[10:33:07.197]                       invokeRestart <- base::invokeRestart
[10:33:07.197]                       is.null <- base::is.null
[10:33:07.197]                       muffled <- FALSE
[10:33:07.197]                       if (inherits(cond, "message")) {
[10:33:07.197]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:07.197]                         if (muffled) 
[10:33:07.197]                           invokeRestart("muffleMessage")
[10:33:07.197]                       }
[10:33:07.197]                       else if (inherits(cond, "warning")) {
[10:33:07.197]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:07.197]                         if (muffled) 
[10:33:07.197]                           invokeRestart("muffleWarning")
[10:33:07.197]                       }
[10:33:07.197]                       else if (inherits(cond, "condition")) {
[10:33:07.197]                         if (!is.null(pattern)) {
[10:33:07.197]                           computeRestarts <- base::computeRestarts
[10:33:07.197]                           grepl <- base::grepl
[10:33:07.197]                           restarts <- computeRestarts(cond)
[10:33:07.197]                           for (restart in restarts) {
[10:33:07.197]                             name <- restart$name
[10:33:07.197]                             if (is.null(name)) 
[10:33:07.197]                               next
[10:33:07.197]                             if (!grepl(pattern, name)) 
[10:33:07.197]                               next
[10:33:07.197]                             invokeRestart(restart)
[10:33:07.197]                             muffled <- TRUE
[10:33:07.197]                             break
[10:33:07.197]                           }
[10:33:07.197]                         }
[10:33:07.197]                       }
[10:33:07.197]                       invisible(muffled)
[10:33:07.197]                     }
[10:33:07.197]                     muffleCondition(cond, pattern = "^muffle")
[10:33:07.197]                   }
[10:33:07.197]                 }
[10:33:07.197]             }
[10:33:07.197]         }))
[10:33:07.197]     }, error = function(ex) {
[10:33:07.197]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:07.197]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:07.197]                 ...future.rng), started = ...future.startTime, 
[10:33:07.197]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:07.197]             version = "1.8"), class = "FutureResult")
[10:33:07.197]     }, finally = {
[10:33:07.197]         if (!identical(...future.workdir, getwd())) 
[10:33:07.197]             setwd(...future.workdir)
[10:33:07.197]         {
[10:33:07.197]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:07.197]                 ...future.oldOptions$nwarnings <- NULL
[10:33:07.197]             }
[10:33:07.197]             base::options(...future.oldOptions)
[10:33:07.197]             if (.Platform$OS.type == "windows") {
[10:33:07.197]                 old_names <- names(...future.oldEnvVars)
[10:33:07.197]                 envs <- base::Sys.getenv()
[10:33:07.197]                 names <- names(envs)
[10:33:07.197]                 common <- intersect(names, old_names)
[10:33:07.197]                 added <- setdiff(names, old_names)
[10:33:07.197]                 removed <- setdiff(old_names, names)
[10:33:07.197]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:07.197]                   envs[common]]
[10:33:07.197]                 NAMES <- toupper(changed)
[10:33:07.197]                 args <- list()
[10:33:07.197]                 for (kk in seq_along(NAMES)) {
[10:33:07.197]                   name <- changed[[kk]]
[10:33:07.197]                   NAME <- NAMES[[kk]]
[10:33:07.197]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:07.197]                     next
[10:33:07.197]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:07.197]                 }
[10:33:07.197]                 NAMES <- toupper(added)
[10:33:07.197]                 for (kk in seq_along(NAMES)) {
[10:33:07.197]                   name <- added[[kk]]
[10:33:07.197]                   NAME <- NAMES[[kk]]
[10:33:07.197]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:07.197]                     next
[10:33:07.197]                   args[[name]] <- ""
[10:33:07.197]                 }
[10:33:07.197]                 NAMES <- toupper(removed)
[10:33:07.197]                 for (kk in seq_along(NAMES)) {
[10:33:07.197]                   name <- removed[[kk]]
[10:33:07.197]                   NAME <- NAMES[[kk]]
[10:33:07.197]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:07.197]                     next
[10:33:07.197]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:07.197]                 }
[10:33:07.197]                 if (length(args) > 0) 
[10:33:07.197]                   base::do.call(base::Sys.setenv, args = args)
[10:33:07.197]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:07.197]             }
[10:33:07.197]             else {
[10:33:07.197]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:07.197]             }
[10:33:07.197]             {
[10:33:07.197]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:07.197]                   0L) {
[10:33:07.197]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:07.197]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:07.197]                   base::options(opts)
[10:33:07.197]                 }
[10:33:07.197]                 {
[10:33:07.197]                   {
[10:33:07.197]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:07.197]                     NULL
[10:33:07.197]                   }
[10:33:07.197]                   options(future.plan = NULL)
[10:33:07.197]                   if (is.na(NA_character_)) 
[10:33:07.197]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:07.197]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:07.197]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:07.197]                     .init = FALSE)
[10:33:07.197]                 }
[10:33:07.197]             }
[10:33:07.197]         }
[10:33:07.197]     })
[10:33:07.197]     if (TRUE) {
[10:33:07.197]         base::sink(type = "output", split = FALSE)
[10:33:07.197]         if (TRUE) {
[10:33:07.197]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:07.197]         }
[10:33:07.197]         else {
[10:33:07.197]             ...future.result["stdout"] <- base::list(NULL)
[10:33:07.197]         }
[10:33:07.197]         base::close(...future.stdout)
[10:33:07.197]         ...future.stdout <- NULL
[10:33:07.197]     }
[10:33:07.197]     ...future.result$conditions <- ...future.conditions
[10:33:07.197]     ...future.result$finished <- base::Sys.time()
[10:33:07.197]     ...future.result
[10:33:07.197] }
[10:33:07.252] MultisessionFuture started
[10:33:07.253] result() for ClusterFuture ...
[10:33:07.253] receiveMessageFromWorker() for ClusterFuture ...
[10:33:07.253] - Validating connection of MultisessionFuture
[10:33:07.286] - received message: FutureResult
[10:33:07.287] - Received FutureResult
[10:33:07.287] - Erased future from FutureRegistry
[10:33:07.287] result() for ClusterFuture ...
[10:33:07.287] - result already collected: FutureResult
[10:33:07.287] result() for ClusterFuture ... done
[10:33:07.287] receiveMessageFromWorker() for ClusterFuture ... done
[10:33:07.288] result() for ClusterFuture ... done
[10:33:07.288] result() for ClusterFuture ...
[10:33:07.288] - result already collected: FutureResult
[10:33:07.288] result() for ClusterFuture ... done
[10:33:07.288] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:33:07.292] plan(): nbrOfWorkers() = 2
[10:33:07.292] getGlobalsAndPackages() ...
[10:33:07.292] Searching for globals...
[10:33:07.295] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[10:33:07.295] Searching for globals ... DONE
[10:33:07.295] Resolving globals: FALSE
[10:33:07.296] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[10:33:07.296] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[10:33:07.297] - globals: [1] ‘my_fcn’
[10:33:07.297] 
[10:33:07.297] getGlobalsAndPackages() ... DONE
[10:33:07.297] run() for ‘Future’ ...
[10:33:07.297] - state: ‘created’
[10:33:07.297] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:33:07.312] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:33:07.312] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:33:07.312]   - Field: ‘node’
[10:33:07.312]   - Field: ‘label’
[10:33:07.312]   - Field: ‘local’
[10:33:07.313]   - Field: ‘owner’
[10:33:07.313]   - Field: ‘envir’
[10:33:07.313]   - Field: ‘workers’
[10:33:07.313]   - Field: ‘packages’
[10:33:07.313]   - Field: ‘gc’
[10:33:07.313]   - Field: ‘conditions’
[10:33:07.313]   - Field: ‘persistent’
[10:33:07.313]   - Field: ‘expr’
[10:33:07.313]   - Field: ‘uuid’
[10:33:07.314]   - Field: ‘seed’
[10:33:07.314]   - Field: ‘version’
[10:33:07.314]   - Field: ‘result’
[10:33:07.314]   - Field: ‘asynchronous’
[10:33:07.314]   - Field: ‘calls’
[10:33:07.314]   - Field: ‘globals’
[10:33:07.314]   - Field: ‘stdout’
[10:33:07.314]   - Field: ‘earlySignal’
[10:33:07.314]   - Field: ‘lazy’
[10:33:07.315]   - Field: ‘state’
[10:33:07.315] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:33:07.315] - Launch lazy future ...
[10:33:07.315] Packages needed by the future expression (n = 0): <none>
[10:33:07.315] Packages needed by future strategies (n = 0): <none>
[10:33:07.316] {
[10:33:07.316]     {
[10:33:07.316]         {
[10:33:07.316]             ...future.startTime <- base::Sys.time()
[10:33:07.316]             {
[10:33:07.316]                 {
[10:33:07.316]                   {
[10:33:07.316]                     {
[10:33:07.316]                       base::local({
[10:33:07.316]                         has_future <- base::requireNamespace("future", 
[10:33:07.316]                           quietly = TRUE)
[10:33:07.316]                         if (has_future) {
[10:33:07.316]                           ns <- base::getNamespace("future")
[10:33:07.316]                           version <- ns[[".package"]][["version"]]
[10:33:07.316]                           if (is.null(version)) 
[10:33:07.316]                             version <- utils::packageVersion("future")
[10:33:07.316]                         }
[10:33:07.316]                         else {
[10:33:07.316]                           version <- NULL
[10:33:07.316]                         }
[10:33:07.316]                         if (!has_future || version < "1.8.0") {
[10:33:07.316]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:07.316]                             "", base::R.version$version.string), 
[10:33:07.316]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:07.316]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:07.316]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:07.316]                               "release", "version")], collapse = " "), 
[10:33:07.316]                             hostname = base::Sys.info()[["nodename"]])
[10:33:07.316]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:07.316]                             info)
[10:33:07.316]                           info <- base::paste(info, collapse = "; ")
[10:33:07.316]                           if (!has_future) {
[10:33:07.316]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:07.316]                               info)
[10:33:07.316]                           }
[10:33:07.316]                           else {
[10:33:07.316]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:07.316]                               info, version)
[10:33:07.316]                           }
[10:33:07.316]                           base::stop(msg)
[10:33:07.316]                         }
[10:33:07.316]                       })
[10:33:07.316]                     }
[10:33:07.316]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:07.316]                     base::options(mc.cores = 1L)
[10:33:07.316]                   }
[10:33:07.316]                   ...future.strategy.old <- future::plan("list")
[10:33:07.316]                   options(future.plan = NULL)
[10:33:07.316]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:07.316]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:07.316]                 }
[10:33:07.316]                 ...future.workdir <- getwd()
[10:33:07.316]             }
[10:33:07.316]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:07.316]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:07.316]         }
[10:33:07.316]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:07.316]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:07.316]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:07.316]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:07.316]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:07.316]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:07.316]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:07.316]             base::names(...future.oldOptions))
[10:33:07.316]     }
[10:33:07.316]     if (FALSE) {
[10:33:07.316]     }
[10:33:07.316]     else {
[10:33:07.316]         if (TRUE) {
[10:33:07.316]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:07.316]                 open = "w")
[10:33:07.316]         }
[10:33:07.316]         else {
[10:33:07.316]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:07.316]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:07.316]         }
[10:33:07.316]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:07.316]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:07.316]             base::sink(type = "output", split = FALSE)
[10:33:07.316]             base::close(...future.stdout)
[10:33:07.316]         }, add = TRUE)
[10:33:07.316]     }
[10:33:07.316]     ...future.frame <- base::sys.nframe()
[10:33:07.316]     ...future.conditions <- base::list()
[10:33:07.316]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:07.316]     if (FALSE) {
[10:33:07.316]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:07.316]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:07.316]     }
[10:33:07.316]     ...future.result <- base::tryCatch({
[10:33:07.316]         base::withCallingHandlers({
[10:33:07.316]             ...future.value <- base::withVisible(base::local({
[10:33:07.316]                 ...future.makeSendCondition <- base::local({
[10:33:07.316]                   sendCondition <- NULL
[10:33:07.316]                   function(frame = 1L) {
[10:33:07.316]                     if (is.function(sendCondition)) 
[10:33:07.316]                       return(sendCondition)
[10:33:07.316]                     ns <- getNamespace("parallel")
[10:33:07.316]                     if (exists("sendData", mode = "function", 
[10:33:07.316]                       envir = ns)) {
[10:33:07.316]                       parallel_sendData <- get("sendData", mode = "function", 
[10:33:07.316]                         envir = ns)
[10:33:07.316]                       envir <- sys.frame(frame)
[10:33:07.316]                       master <- NULL
[10:33:07.316]                       while (!identical(envir, .GlobalEnv) && 
[10:33:07.316]                         !identical(envir, emptyenv())) {
[10:33:07.316]                         if (exists("master", mode = "list", envir = envir, 
[10:33:07.316]                           inherits = FALSE)) {
[10:33:07.316]                           master <- get("master", mode = "list", 
[10:33:07.316]                             envir = envir, inherits = FALSE)
[10:33:07.316]                           if (inherits(master, c("SOCKnode", 
[10:33:07.316]                             "SOCK0node"))) {
[10:33:07.316]                             sendCondition <<- function(cond) {
[10:33:07.316]                               data <- list(type = "VALUE", value = cond, 
[10:33:07.316]                                 success = TRUE)
[10:33:07.316]                               parallel_sendData(master, data)
[10:33:07.316]                             }
[10:33:07.316]                             return(sendCondition)
[10:33:07.316]                           }
[10:33:07.316]                         }
[10:33:07.316]                         frame <- frame + 1L
[10:33:07.316]                         envir <- sys.frame(frame)
[10:33:07.316]                       }
[10:33:07.316]                     }
[10:33:07.316]                     sendCondition <<- function(cond) NULL
[10:33:07.316]                   }
[10:33:07.316]                 })
[10:33:07.316]                 withCallingHandlers({
[10:33:07.316]                   {
[10:33:07.316]                     my_fcn
[10:33:07.316]                   }
[10:33:07.316]                 }, immediateCondition = function(cond) {
[10:33:07.316]                   sendCondition <- ...future.makeSendCondition()
[10:33:07.316]                   sendCondition(cond)
[10:33:07.316]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:07.316]                   {
[10:33:07.316]                     inherits <- base::inherits
[10:33:07.316]                     invokeRestart <- base::invokeRestart
[10:33:07.316]                     is.null <- base::is.null
[10:33:07.316]                     muffled <- FALSE
[10:33:07.316]                     if (inherits(cond, "message")) {
[10:33:07.316]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:07.316]                       if (muffled) 
[10:33:07.316]                         invokeRestart("muffleMessage")
[10:33:07.316]                     }
[10:33:07.316]                     else if (inherits(cond, "warning")) {
[10:33:07.316]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:07.316]                       if (muffled) 
[10:33:07.316]                         invokeRestart("muffleWarning")
[10:33:07.316]                     }
[10:33:07.316]                     else if (inherits(cond, "condition")) {
[10:33:07.316]                       if (!is.null(pattern)) {
[10:33:07.316]                         computeRestarts <- base::computeRestarts
[10:33:07.316]                         grepl <- base::grepl
[10:33:07.316]                         restarts <- computeRestarts(cond)
[10:33:07.316]                         for (restart in restarts) {
[10:33:07.316]                           name <- restart$name
[10:33:07.316]                           if (is.null(name)) 
[10:33:07.316]                             next
[10:33:07.316]                           if (!grepl(pattern, name)) 
[10:33:07.316]                             next
[10:33:07.316]                           invokeRestart(restart)
[10:33:07.316]                           muffled <- TRUE
[10:33:07.316]                           break
[10:33:07.316]                         }
[10:33:07.316]                       }
[10:33:07.316]                     }
[10:33:07.316]                     invisible(muffled)
[10:33:07.316]                   }
[10:33:07.316]                   muffleCondition(cond)
[10:33:07.316]                 })
[10:33:07.316]             }))
[10:33:07.316]             future::FutureResult(value = ...future.value$value, 
[10:33:07.316]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:07.316]                   ...future.rng), globalenv = if (FALSE) 
[10:33:07.316]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:07.316]                     ...future.globalenv.names))
[10:33:07.316]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:07.316]         }, condition = base::local({
[10:33:07.316]             c <- base::c
[10:33:07.316]             inherits <- base::inherits
[10:33:07.316]             invokeRestart <- base::invokeRestart
[10:33:07.316]             length <- base::length
[10:33:07.316]             list <- base::list
[10:33:07.316]             seq.int <- base::seq.int
[10:33:07.316]             signalCondition <- base::signalCondition
[10:33:07.316]             sys.calls <- base::sys.calls
[10:33:07.316]             `[[` <- base::`[[`
[10:33:07.316]             `+` <- base::`+`
[10:33:07.316]             `<<-` <- base::`<<-`
[10:33:07.316]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:07.316]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:07.316]                   3L)]
[10:33:07.316]             }
[10:33:07.316]             function(cond) {
[10:33:07.316]                 is_error <- inherits(cond, "error")
[10:33:07.316]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:07.316]                   NULL)
[10:33:07.316]                 if (is_error) {
[10:33:07.316]                   sessionInformation <- function() {
[10:33:07.316]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:07.316]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:07.316]                       search = base::search(), system = base::Sys.info())
[10:33:07.316]                   }
[10:33:07.316]                   ...future.conditions[[length(...future.conditions) + 
[10:33:07.316]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:07.316]                     cond$call), session = sessionInformation(), 
[10:33:07.316]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:07.316]                   signalCondition(cond)
[10:33:07.316]                 }
[10:33:07.316]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:07.316]                 "immediateCondition"))) {
[10:33:07.316]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:07.316]                   ...future.conditions[[length(...future.conditions) + 
[10:33:07.316]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:07.316]                   if (TRUE && !signal) {
[10:33:07.316]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:07.316]                     {
[10:33:07.316]                       inherits <- base::inherits
[10:33:07.316]                       invokeRestart <- base::invokeRestart
[10:33:07.316]                       is.null <- base::is.null
[10:33:07.316]                       muffled <- FALSE
[10:33:07.316]                       if (inherits(cond, "message")) {
[10:33:07.316]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:07.316]                         if (muffled) 
[10:33:07.316]                           invokeRestart("muffleMessage")
[10:33:07.316]                       }
[10:33:07.316]                       else if (inherits(cond, "warning")) {
[10:33:07.316]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:07.316]                         if (muffled) 
[10:33:07.316]                           invokeRestart("muffleWarning")
[10:33:07.316]                       }
[10:33:07.316]                       else if (inherits(cond, "condition")) {
[10:33:07.316]                         if (!is.null(pattern)) {
[10:33:07.316]                           computeRestarts <- base::computeRestarts
[10:33:07.316]                           grepl <- base::grepl
[10:33:07.316]                           restarts <- computeRestarts(cond)
[10:33:07.316]                           for (restart in restarts) {
[10:33:07.316]                             name <- restart$name
[10:33:07.316]                             if (is.null(name)) 
[10:33:07.316]                               next
[10:33:07.316]                             if (!grepl(pattern, name)) 
[10:33:07.316]                               next
[10:33:07.316]                             invokeRestart(restart)
[10:33:07.316]                             muffled <- TRUE
[10:33:07.316]                             break
[10:33:07.316]                           }
[10:33:07.316]                         }
[10:33:07.316]                       }
[10:33:07.316]                       invisible(muffled)
[10:33:07.316]                     }
[10:33:07.316]                     muffleCondition(cond, pattern = "^muffle")
[10:33:07.316]                   }
[10:33:07.316]                 }
[10:33:07.316]                 else {
[10:33:07.316]                   if (TRUE) {
[10:33:07.316]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:07.316]                     {
[10:33:07.316]                       inherits <- base::inherits
[10:33:07.316]                       invokeRestart <- base::invokeRestart
[10:33:07.316]                       is.null <- base::is.null
[10:33:07.316]                       muffled <- FALSE
[10:33:07.316]                       if (inherits(cond, "message")) {
[10:33:07.316]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:07.316]                         if (muffled) 
[10:33:07.316]                           invokeRestart("muffleMessage")
[10:33:07.316]                       }
[10:33:07.316]                       else if (inherits(cond, "warning")) {
[10:33:07.316]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:07.316]                         if (muffled) 
[10:33:07.316]                           invokeRestart("muffleWarning")
[10:33:07.316]                       }
[10:33:07.316]                       else if (inherits(cond, "condition")) {
[10:33:07.316]                         if (!is.null(pattern)) {
[10:33:07.316]                           computeRestarts <- base::computeRestarts
[10:33:07.316]                           grepl <- base::grepl
[10:33:07.316]                           restarts <- computeRestarts(cond)
[10:33:07.316]                           for (restart in restarts) {
[10:33:07.316]                             name <- restart$name
[10:33:07.316]                             if (is.null(name)) 
[10:33:07.316]                               next
[10:33:07.316]                             if (!grepl(pattern, name)) 
[10:33:07.316]                               next
[10:33:07.316]                             invokeRestart(restart)
[10:33:07.316]                             muffled <- TRUE
[10:33:07.316]                             break
[10:33:07.316]                           }
[10:33:07.316]                         }
[10:33:07.316]                       }
[10:33:07.316]                       invisible(muffled)
[10:33:07.316]                     }
[10:33:07.316]                     muffleCondition(cond, pattern = "^muffle")
[10:33:07.316]                   }
[10:33:07.316]                 }
[10:33:07.316]             }
[10:33:07.316]         }))
[10:33:07.316]     }, error = function(ex) {
[10:33:07.316]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:07.316]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:07.316]                 ...future.rng), started = ...future.startTime, 
[10:33:07.316]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:07.316]             version = "1.8"), class = "FutureResult")
[10:33:07.316]     }, finally = {
[10:33:07.316]         if (!identical(...future.workdir, getwd())) 
[10:33:07.316]             setwd(...future.workdir)
[10:33:07.316]         {
[10:33:07.316]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:07.316]                 ...future.oldOptions$nwarnings <- NULL
[10:33:07.316]             }
[10:33:07.316]             base::options(...future.oldOptions)
[10:33:07.316]             if (.Platform$OS.type == "windows") {
[10:33:07.316]                 old_names <- names(...future.oldEnvVars)
[10:33:07.316]                 envs <- base::Sys.getenv()
[10:33:07.316]                 names <- names(envs)
[10:33:07.316]                 common <- intersect(names, old_names)
[10:33:07.316]                 added <- setdiff(names, old_names)
[10:33:07.316]                 removed <- setdiff(old_names, names)
[10:33:07.316]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:07.316]                   envs[common]]
[10:33:07.316]                 NAMES <- toupper(changed)
[10:33:07.316]                 args <- list()
[10:33:07.316]                 for (kk in seq_along(NAMES)) {
[10:33:07.316]                   name <- changed[[kk]]
[10:33:07.316]                   NAME <- NAMES[[kk]]
[10:33:07.316]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:07.316]                     next
[10:33:07.316]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:07.316]                 }
[10:33:07.316]                 NAMES <- toupper(added)
[10:33:07.316]                 for (kk in seq_along(NAMES)) {
[10:33:07.316]                   name <- added[[kk]]
[10:33:07.316]                   NAME <- NAMES[[kk]]
[10:33:07.316]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:07.316]                     next
[10:33:07.316]                   args[[name]] <- ""
[10:33:07.316]                 }
[10:33:07.316]                 NAMES <- toupper(removed)
[10:33:07.316]                 for (kk in seq_along(NAMES)) {
[10:33:07.316]                   name <- removed[[kk]]
[10:33:07.316]                   NAME <- NAMES[[kk]]
[10:33:07.316]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:07.316]                     next
[10:33:07.316]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:07.316]                 }
[10:33:07.316]                 if (length(args) > 0) 
[10:33:07.316]                   base::do.call(base::Sys.setenv, args = args)
[10:33:07.316]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:07.316]             }
[10:33:07.316]             else {
[10:33:07.316]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:07.316]             }
[10:33:07.316]             {
[10:33:07.316]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:07.316]                   0L) {
[10:33:07.316]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:07.316]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:07.316]                   base::options(opts)
[10:33:07.316]                 }
[10:33:07.316]                 {
[10:33:07.316]                   {
[10:33:07.316]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:07.316]                     NULL
[10:33:07.316]                   }
[10:33:07.316]                   options(future.plan = NULL)
[10:33:07.316]                   if (is.na(NA_character_)) 
[10:33:07.316]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:07.316]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:07.316]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:07.316]                     .init = FALSE)
[10:33:07.316]                 }
[10:33:07.316]             }
[10:33:07.316]         }
[10:33:07.316]     })
[10:33:07.316]     if (TRUE) {
[10:33:07.316]         base::sink(type = "output", split = FALSE)
[10:33:07.316]         if (TRUE) {
[10:33:07.316]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:07.316]         }
[10:33:07.316]         else {
[10:33:07.316]             ...future.result["stdout"] <- base::list(NULL)
[10:33:07.316]         }
[10:33:07.316]         base::close(...future.stdout)
[10:33:07.316]         ...future.stdout <- NULL
[10:33:07.316]     }
[10:33:07.316]     ...future.result$conditions <- ...future.conditions
[10:33:07.316]     ...future.result$finished <- base::Sys.time()
[10:33:07.316]     ...future.result
[10:33:07.316] }
[10:33:07.319] Exporting 1 global objects (3.84 KiB) to cluster node #1 ...
[10:33:07.319] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ...
[10:33:07.320] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ... DONE
[10:33:07.320] Exporting 1 global objects (3.84 KiB) to cluster node #1 ... DONE
[10:33:07.320] MultisessionFuture started
[10:33:07.320] - Launch lazy future ... done
[10:33:07.320] run() for ‘MultisessionFuture’ ... done
[10:33:07.321] result() for ClusterFuture ...
[10:33:07.321] receiveMessageFromWorker() for ClusterFuture ...
[10:33:07.321] - Validating connection of MultisessionFuture
[10:33:07.326] - received message: FutureResult
[10:33:07.326] - Received FutureResult
[10:33:07.326] - Erased future from FutureRegistry
[10:33:07.326] result() for ClusterFuture ...
[10:33:07.326] - result already collected: FutureResult
[10:33:07.326] result() for ClusterFuture ... done
[10:33:07.326] receiveMessageFromWorker() for ClusterFuture ... done
[10:33:07.326] result() for ClusterFuture ... done
[10:33:07.327] result() for ClusterFuture ...
[10:33:07.327] - result already collected: FutureResult
[10:33:07.327] result() for ClusterFuture ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x560b42feee08>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[10:33:07.327] getGlobalsAndPackages() ...
[10:33:07.327] Searching for globals...
[10:33:07.330] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[10:33:07.331] Searching for globals ... DONE
[10:33:07.331] Resolving globals: FALSE
[10:33:07.331] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[10:33:07.332] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[10:33:07.332] - globals: [1] ‘my_fcn’
[10:33:07.332] 
[10:33:07.332] getGlobalsAndPackages() ... DONE
[10:33:07.332] run() for ‘Future’ ...
[10:33:07.333] - state: ‘created’
[10:33:07.333] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:33:07.348] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:33:07.348] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:33:07.348]   - Field: ‘node’
[10:33:07.348]   - Field: ‘label’
[10:33:07.348]   - Field: ‘local’
[10:33:07.348]   - Field: ‘owner’
[10:33:07.348]   - Field: ‘envir’
[10:33:07.348]   - Field: ‘workers’
[10:33:07.348]   - Field: ‘packages’
[10:33:07.349]   - Field: ‘gc’
[10:33:07.349]   - Field: ‘conditions’
[10:33:07.349]   - Field: ‘persistent’
[10:33:07.349]   - Field: ‘expr’
[10:33:07.349]   - Field: ‘uuid’
[10:33:07.349]   - Field: ‘seed’
[10:33:07.349]   - Field: ‘version’
[10:33:07.349]   - Field: ‘result’
[10:33:07.350]   - Field: ‘asynchronous’
[10:33:07.350]   - Field: ‘calls’
[10:33:07.350]   - Field: ‘globals’
[10:33:07.350]   - Field: ‘stdout’
[10:33:07.350]   - Field: ‘earlySignal’
[10:33:07.350]   - Field: ‘lazy’
[10:33:07.350]   - Field: ‘state’
[10:33:07.350] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:33:07.350] - Launch lazy future ...
[10:33:07.351] Packages needed by the future expression (n = 0): <none>
[10:33:07.351] Packages needed by future strategies (n = 0): <none>
[10:33:07.351] {
[10:33:07.351]     {
[10:33:07.351]         {
[10:33:07.351]             ...future.startTime <- base::Sys.time()
[10:33:07.351]             {
[10:33:07.351]                 {
[10:33:07.351]                   {
[10:33:07.351]                     {
[10:33:07.351]                       base::local({
[10:33:07.351]                         has_future <- base::requireNamespace("future", 
[10:33:07.351]                           quietly = TRUE)
[10:33:07.351]                         if (has_future) {
[10:33:07.351]                           ns <- base::getNamespace("future")
[10:33:07.351]                           version <- ns[[".package"]][["version"]]
[10:33:07.351]                           if (is.null(version)) 
[10:33:07.351]                             version <- utils::packageVersion("future")
[10:33:07.351]                         }
[10:33:07.351]                         else {
[10:33:07.351]                           version <- NULL
[10:33:07.351]                         }
[10:33:07.351]                         if (!has_future || version < "1.8.0") {
[10:33:07.351]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:07.351]                             "", base::R.version$version.string), 
[10:33:07.351]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:07.351]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:07.351]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:07.351]                               "release", "version")], collapse = " "), 
[10:33:07.351]                             hostname = base::Sys.info()[["nodename"]])
[10:33:07.351]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:07.351]                             info)
[10:33:07.351]                           info <- base::paste(info, collapse = "; ")
[10:33:07.351]                           if (!has_future) {
[10:33:07.351]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:07.351]                               info)
[10:33:07.351]                           }
[10:33:07.351]                           else {
[10:33:07.351]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:07.351]                               info, version)
[10:33:07.351]                           }
[10:33:07.351]                           base::stop(msg)
[10:33:07.351]                         }
[10:33:07.351]                       })
[10:33:07.351]                     }
[10:33:07.351]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:07.351]                     base::options(mc.cores = 1L)
[10:33:07.351]                   }
[10:33:07.351]                   ...future.strategy.old <- future::plan("list")
[10:33:07.351]                   options(future.plan = NULL)
[10:33:07.351]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:07.351]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:07.351]                 }
[10:33:07.351]                 ...future.workdir <- getwd()
[10:33:07.351]             }
[10:33:07.351]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:07.351]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:07.351]         }
[10:33:07.351]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:07.351]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:07.351]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:07.351]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:07.351]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:07.351]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:07.351]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:07.351]             base::names(...future.oldOptions))
[10:33:07.351]     }
[10:33:07.351]     if (FALSE) {
[10:33:07.351]     }
[10:33:07.351]     else {
[10:33:07.351]         if (TRUE) {
[10:33:07.351]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:07.351]                 open = "w")
[10:33:07.351]         }
[10:33:07.351]         else {
[10:33:07.351]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:07.351]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:07.351]         }
[10:33:07.351]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:07.351]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:07.351]             base::sink(type = "output", split = FALSE)
[10:33:07.351]             base::close(...future.stdout)
[10:33:07.351]         }, add = TRUE)
[10:33:07.351]     }
[10:33:07.351]     ...future.frame <- base::sys.nframe()
[10:33:07.351]     ...future.conditions <- base::list()
[10:33:07.351]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:07.351]     if (FALSE) {
[10:33:07.351]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:07.351]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:07.351]     }
[10:33:07.351]     ...future.result <- base::tryCatch({
[10:33:07.351]         base::withCallingHandlers({
[10:33:07.351]             ...future.value <- base::withVisible(base::local({
[10:33:07.351]                 ...future.makeSendCondition <- base::local({
[10:33:07.351]                   sendCondition <- NULL
[10:33:07.351]                   function(frame = 1L) {
[10:33:07.351]                     if (is.function(sendCondition)) 
[10:33:07.351]                       return(sendCondition)
[10:33:07.351]                     ns <- getNamespace("parallel")
[10:33:07.351]                     if (exists("sendData", mode = "function", 
[10:33:07.351]                       envir = ns)) {
[10:33:07.351]                       parallel_sendData <- get("sendData", mode = "function", 
[10:33:07.351]                         envir = ns)
[10:33:07.351]                       envir <- sys.frame(frame)
[10:33:07.351]                       master <- NULL
[10:33:07.351]                       while (!identical(envir, .GlobalEnv) && 
[10:33:07.351]                         !identical(envir, emptyenv())) {
[10:33:07.351]                         if (exists("master", mode = "list", envir = envir, 
[10:33:07.351]                           inherits = FALSE)) {
[10:33:07.351]                           master <- get("master", mode = "list", 
[10:33:07.351]                             envir = envir, inherits = FALSE)
[10:33:07.351]                           if (inherits(master, c("SOCKnode", 
[10:33:07.351]                             "SOCK0node"))) {
[10:33:07.351]                             sendCondition <<- function(cond) {
[10:33:07.351]                               data <- list(type = "VALUE", value = cond, 
[10:33:07.351]                                 success = TRUE)
[10:33:07.351]                               parallel_sendData(master, data)
[10:33:07.351]                             }
[10:33:07.351]                             return(sendCondition)
[10:33:07.351]                           }
[10:33:07.351]                         }
[10:33:07.351]                         frame <- frame + 1L
[10:33:07.351]                         envir <- sys.frame(frame)
[10:33:07.351]                       }
[10:33:07.351]                     }
[10:33:07.351]                     sendCondition <<- function(cond) NULL
[10:33:07.351]                   }
[10:33:07.351]                 })
[10:33:07.351]                 withCallingHandlers({
[10:33:07.351]                   {
[10:33:07.351]                     my_fcn(3)
[10:33:07.351]                   }
[10:33:07.351]                 }, immediateCondition = function(cond) {
[10:33:07.351]                   sendCondition <- ...future.makeSendCondition()
[10:33:07.351]                   sendCondition(cond)
[10:33:07.351]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:07.351]                   {
[10:33:07.351]                     inherits <- base::inherits
[10:33:07.351]                     invokeRestart <- base::invokeRestart
[10:33:07.351]                     is.null <- base::is.null
[10:33:07.351]                     muffled <- FALSE
[10:33:07.351]                     if (inherits(cond, "message")) {
[10:33:07.351]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:07.351]                       if (muffled) 
[10:33:07.351]                         invokeRestart("muffleMessage")
[10:33:07.351]                     }
[10:33:07.351]                     else if (inherits(cond, "warning")) {
[10:33:07.351]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:07.351]                       if (muffled) 
[10:33:07.351]                         invokeRestart("muffleWarning")
[10:33:07.351]                     }
[10:33:07.351]                     else if (inherits(cond, "condition")) {
[10:33:07.351]                       if (!is.null(pattern)) {
[10:33:07.351]                         computeRestarts <- base::computeRestarts
[10:33:07.351]                         grepl <- base::grepl
[10:33:07.351]                         restarts <- computeRestarts(cond)
[10:33:07.351]                         for (restart in restarts) {
[10:33:07.351]                           name <- restart$name
[10:33:07.351]                           if (is.null(name)) 
[10:33:07.351]                             next
[10:33:07.351]                           if (!grepl(pattern, name)) 
[10:33:07.351]                             next
[10:33:07.351]                           invokeRestart(restart)
[10:33:07.351]                           muffled <- TRUE
[10:33:07.351]                           break
[10:33:07.351]                         }
[10:33:07.351]                       }
[10:33:07.351]                     }
[10:33:07.351]                     invisible(muffled)
[10:33:07.351]                   }
[10:33:07.351]                   muffleCondition(cond)
[10:33:07.351]                 })
[10:33:07.351]             }))
[10:33:07.351]             future::FutureResult(value = ...future.value$value, 
[10:33:07.351]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:07.351]                   ...future.rng), globalenv = if (FALSE) 
[10:33:07.351]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:07.351]                     ...future.globalenv.names))
[10:33:07.351]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:07.351]         }, condition = base::local({
[10:33:07.351]             c <- base::c
[10:33:07.351]             inherits <- base::inherits
[10:33:07.351]             invokeRestart <- base::invokeRestart
[10:33:07.351]             length <- base::length
[10:33:07.351]             list <- base::list
[10:33:07.351]             seq.int <- base::seq.int
[10:33:07.351]             signalCondition <- base::signalCondition
[10:33:07.351]             sys.calls <- base::sys.calls
[10:33:07.351]             `[[` <- base::`[[`
[10:33:07.351]             `+` <- base::`+`
[10:33:07.351]             `<<-` <- base::`<<-`
[10:33:07.351]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:07.351]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:07.351]                   3L)]
[10:33:07.351]             }
[10:33:07.351]             function(cond) {
[10:33:07.351]                 is_error <- inherits(cond, "error")
[10:33:07.351]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:07.351]                   NULL)
[10:33:07.351]                 if (is_error) {
[10:33:07.351]                   sessionInformation <- function() {
[10:33:07.351]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:07.351]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:07.351]                       search = base::search(), system = base::Sys.info())
[10:33:07.351]                   }
[10:33:07.351]                   ...future.conditions[[length(...future.conditions) + 
[10:33:07.351]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:07.351]                     cond$call), session = sessionInformation(), 
[10:33:07.351]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:07.351]                   signalCondition(cond)
[10:33:07.351]                 }
[10:33:07.351]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:07.351]                 "immediateCondition"))) {
[10:33:07.351]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:07.351]                   ...future.conditions[[length(...future.conditions) + 
[10:33:07.351]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:07.351]                   if (TRUE && !signal) {
[10:33:07.351]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:07.351]                     {
[10:33:07.351]                       inherits <- base::inherits
[10:33:07.351]                       invokeRestart <- base::invokeRestart
[10:33:07.351]                       is.null <- base::is.null
[10:33:07.351]                       muffled <- FALSE
[10:33:07.351]                       if (inherits(cond, "message")) {
[10:33:07.351]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:07.351]                         if (muffled) 
[10:33:07.351]                           invokeRestart("muffleMessage")
[10:33:07.351]                       }
[10:33:07.351]                       else if (inherits(cond, "warning")) {
[10:33:07.351]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:07.351]                         if (muffled) 
[10:33:07.351]                           invokeRestart("muffleWarning")
[10:33:07.351]                       }
[10:33:07.351]                       else if (inherits(cond, "condition")) {
[10:33:07.351]                         if (!is.null(pattern)) {
[10:33:07.351]                           computeRestarts <- base::computeRestarts
[10:33:07.351]                           grepl <- base::grepl
[10:33:07.351]                           restarts <- computeRestarts(cond)
[10:33:07.351]                           for (restart in restarts) {
[10:33:07.351]                             name <- restart$name
[10:33:07.351]                             if (is.null(name)) 
[10:33:07.351]                               next
[10:33:07.351]                             if (!grepl(pattern, name)) 
[10:33:07.351]                               next
[10:33:07.351]                             invokeRestart(restart)
[10:33:07.351]                             muffled <- TRUE
[10:33:07.351]                             break
[10:33:07.351]                           }
[10:33:07.351]                         }
[10:33:07.351]                       }
[10:33:07.351]                       invisible(muffled)
[10:33:07.351]                     }
[10:33:07.351]                     muffleCondition(cond, pattern = "^muffle")
[10:33:07.351]                   }
[10:33:07.351]                 }
[10:33:07.351]                 else {
[10:33:07.351]                   if (TRUE) {
[10:33:07.351]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:07.351]                     {
[10:33:07.351]                       inherits <- base::inherits
[10:33:07.351]                       invokeRestart <- base::invokeRestart
[10:33:07.351]                       is.null <- base::is.null
[10:33:07.351]                       muffled <- FALSE
[10:33:07.351]                       if (inherits(cond, "message")) {
[10:33:07.351]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:07.351]                         if (muffled) 
[10:33:07.351]                           invokeRestart("muffleMessage")
[10:33:07.351]                       }
[10:33:07.351]                       else if (inherits(cond, "warning")) {
[10:33:07.351]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:07.351]                         if (muffled) 
[10:33:07.351]                           invokeRestart("muffleWarning")
[10:33:07.351]                       }
[10:33:07.351]                       else if (inherits(cond, "condition")) {
[10:33:07.351]                         if (!is.null(pattern)) {
[10:33:07.351]                           computeRestarts <- base::computeRestarts
[10:33:07.351]                           grepl <- base::grepl
[10:33:07.351]                           restarts <- computeRestarts(cond)
[10:33:07.351]                           for (restart in restarts) {
[10:33:07.351]                             name <- restart$name
[10:33:07.351]                             if (is.null(name)) 
[10:33:07.351]                               next
[10:33:07.351]                             if (!grepl(pattern, name)) 
[10:33:07.351]                               next
[10:33:07.351]                             invokeRestart(restart)
[10:33:07.351]                             muffled <- TRUE
[10:33:07.351]                             break
[10:33:07.351]                           }
[10:33:07.351]                         }
[10:33:07.351]                       }
[10:33:07.351]                       invisible(muffled)
[10:33:07.351]                     }
[10:33:07.351]                     muffleCondition(cond, pattern = "^muffle")
[10:33:07.351]                   }
[10:33:07.351]                 }
[10:33:07.351]             }
[10:33:07.351]         }))
[10:33:07.351]     }, error = function(ex) {
[10:33:07.351]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:07.351]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:07.351]                 ...future.rng), started = ...future.startTime, 
[10:33:07.351]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:07.351]             version = "1.8"), class = "FutureResult")
[10:33:07.351]     }, finally = {
[10:33:07.351]         if (!identical(...future.workdir, getwd())) 
[10:33:07.351]             setwd(...future.workdir)
[10:33:07.351]         {
[10:33:07.351]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:07.351]                 ...future.oldOptions$nwarnings <- NULL
[10:33:07.351]             }
[10:33:07.351]             base::options(...future.oldOptions)
[10:33:07.351]             if (.Platform$OS.type == "windows") {
[10:33:07.351]                 old_names <- names(...future.oldEnvVars)
[10:33:07.351]                 envs <- base::Sys.getenv()
[10:33:07.351]                 names <- names(envs)
[10:33:07.351]                 common <- intersect(names, old_names)
[10:33:07.351]                 added <- setdiff(names, old_names)
[10:33:07.351]                 removed <- setdiff(old_names, names)
[10:33:07.351]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:07.351]                   envs[common]]
[10:33:07.351]                 NAMES <- toupper(changed)
[10:33:07.351]                 args <- list()
[10:33:07.351]                 for (kk in seq_along(NAMES)) {
[10:33:07.351]                   name <- changed[[kk]]
[10:33:07.351]                   NAME <- NAMES[[kk]]
[10:33:07.351]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:07.351]                     next
[10:33:07.351]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:07.351]                 }
[10:33:07.351]                 NAMES <- toupper(added)
[10:33:07.351]                 for (kk in seq_along(NAMES)) {
[10:33:07.351]                   name <- added[[kk]]
[10:33:07.351]                   NAME <- NAMES[[kk]]
[10:33:07.351]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:07.351]                     next
[10:33:07.351]                   args[[name]] <- ""
[10:33:07.351]                 }
[10:33:07.351]                 NAMES <- toupper(removed)
[10:33:07.351]                 for (kk in seq_along(NAMES)) {
[10:33:07.351]                   name <- removed[[kk]]
[10:33:07.351]                   NAME <- NAMES[[kk]]
[10:33:07.351]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:07.351]                     next
[10:33:07.351]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:07.351]                 }
[10:33:07.351]                 if (length(args) > 0) 
[10:33:07.351]                   base::do.call(base::Sys.setenv, args = args)
[10:33:07.351]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:07.351]             }
[10:33:07.351]             else {
[10:33:07.351]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:07.351]             }
[10:33:07.351]             {
[10:33:07.351]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:07.351]                   0L) {
[10:33:07.351]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:07.351]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:07.351]                   base::options(opts)
[10:33:07.351]                 }
[10:33:07.351]                 {
[10:33:07.351]                   {
[10:33:07.351]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:07.351]                     NULL
[10:33:07.351]                   }
[10:33:07.351]                   options(future.plan = NULL)
[10:33:07.351]                   if (is.na(NA_character_)) 
[10:33:07.351]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:07.351]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:07.351]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:07.351]                     .init = FALSE)
[10:33:07.351]                 }
[10:33:07.351]             }
[10:33:07.351]         }
[10:33:07.351]     })
[10:33:07.351]     if (TRUE) {
[10:33:07.351]         base::sink(type = "output", split = FALSE)
[10:33:07.351]         if (TRUE) {
[10:33:07.351]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:07.351]         }
[10:33:07.351]         else {
[10:33:07.351]             ...future.result["stdout"] <- base::list(NULL)
[10:33:07.351]         }
[10:33:07.351]         base::close(...future.stdout)
[10:33:07.351]         ...future.stdout <- NULL
[10:33:07.351]     }
[10:33:07.351]     ...future.result$conditions <- ...future.conditions
[10:33:07.351]     ...future.result$finished <- base::Sys.time()
[10:33:07.351]     ...future.result
[10:33:07.351] }
[10:33:07.354] Exporting 1 global objects (3.84 KiB) to cluster node #1 ...
[10:33:07.355] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ...
[10:33:07.355] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ... DONE
[10:33:07.355] Exporting 1 global objects (3.84 KiB) to cluster node #1 ... DONE
[10:33:07.356] MultisessionFuture started
[10:33:07.356] - Launch lazy future ... done
[10:33:07.356] run() for ‘MultisessionFuture’ ... done
[10:33:07.357] result() for ClusterFuture ...
[10:33:07.357] receiveMessageFromWorker() for ClusterFuture ...
[10:33:07.357] - Validating connection of MultisessionFuture
[10:33:07.359] - received message: FutureResult
[10:33:07.359] - Received FutureResult
[10:33:07.360] - Erased future from FutureRegistry
[10:33:07.360] result() for ClusterFuture ...
[10:33:07.360] - result already collected: FutureResult
[10:33:07.360] result() for ClusterFuture ... done
[10:33:07.360] receiveMessageFromWorker() for ClusterFuture ... done
[10:33:07.360] result() for ClusterFuture ... done
[10:33:07.360] result() for ClusterFuture ...
[10:33:07.360] - result already collected: FutureResult
[10:33:07.360] result() for ClusterFuture ... done
[1] -3
> 
> message("*** Globals - S4 methods ... DONE")
*** Globals - S4 methods ... DONE
> 
> source("incl/end.R")
[10:33:07.361] plan(): Setting new future strategy stack:
[10:33:07.361] List of future strategies:
[10:33:07.361] 1. FutureStrategy:
[10:33:07.361]    - args: function (..., envir = parent.frame())
[10:33:07.361]    - tweaked: FALSE
[10:33:07.361]    - call: future::plan(oplan)
[10:33:07.362] plan(): nbrOfWorkers() = 1
> 
