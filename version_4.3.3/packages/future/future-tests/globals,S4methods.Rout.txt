
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:36:50.293] plan(): Setting new future strategy stack:
[13:36:50.293] List of future strategies:
[13:36:50.293] 1. sequential:
[13:36:50.293]    - args: function (..., envir = parent.frame())
[13:36:50.293]    - tweaked: FALSE
[13:36:50.293]    - call: future::plan("sequential")
[13:36:50.307] plan(): nbrOfWorkers() = 1
> library(methods)
> 
> message("*** Globals - S4 methods ...")
*** Globals - S4 methods ...
> 
> setGeneric("my_fcn", function(x) standardGeneric("my_fcn"))
[1] "my_fcn"
> setMethod("my_fcn", signature(x = "numeric"), function(x) { -x })
> org_my_fcn <- my_fcn
> 
> truth <- my_fcn(3)
> 
> for (strategy in supportedStrategies()) {
+   message("Type of future: ", strategy)
+   plan(strategy)
+ 
+   ## Assert that S4 generic function 'my_fcn()' is exported
+   f <- future({ my_fcn }, lazy = TRUE)
+   rm(list = "my_fcn")
+   v <- value(f)
+   print(v)
+   stopifnot(
+     is.function(v),
+     inherits(v, class(org_my_fcn)[1])
+   )
+   my_fcn <- org_my_fcn
+   
+   ## FIXME:
+   ## Just like S3 methods, S4 methods are not picked up
+   ## https://github.com/HenrikBengtsson/future/issues/615
+   f <- future({ my_fcn(3) }, lazy = TRUE)
+   rm(list = "my_fcn")
+   v <- tryCatch(value(f), error = identity)
+   print(v)
+   if (isTRUE(as.logical(Sys.getenv("R_CHECK_IDEAL")))) {
+     if (getOption("future.globals.keepWhere", TRUE)) {
+       stopifnot(identical(v, truth))
+     } else {
+       stopifnot(inherits(v, "error"))
+     }
+   } else if (isTRUE(getOption("future.globals.keepWhere", FALSE))) {
+     stopifnot(identical(v, truth))
+   } else {
+     if (strategy %in% c("sequential", "multicore")) {
+       stopifnot(inherits(v, "error"))
+     } else {
+       stopifnot(identical(v, truth))
+     }
+   }
+   my_fcn <- org_my_fcn
+ }
Type of future: sequential
[13:36:50.339] plan(): Setting new future strategy stack:
[13:36:50.339] List of future strategies:
[13:36:50.339] 1. sequential:
[13:36:50.339]    - args: function (..., envir = parent.frame())
[13:36:50.339]    - tweaked: FALSE
[13:36:50.339]    - call: plan(strategy)
[13:36:50.351] plan(): nbrOfWorkers() = 1
[13:36:50.352] getGlobalsAndPackages() ...
[13:36:50.352] Searching for globals...
[13:36:50.358] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[13:36:50.358] Searching for globals ... DONE
[13:36:50.359] Resolving globals: FALSE
[13:36:50.360] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[13:36:50.360] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[13:36:50.360] - globals: [1] ‘my_fcn’
[13:36:50.360] 
[13:36:50.360] getGlobalsAndPackages() ... DONE
[13:36:50.361] run() for ‘Future’ ...
[13:36:50.362] - state: ‘created’
[13:36:50.362] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:50.362] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:50.362] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:50.362]   - Field: ‘label’
[13:36:50.362]   - Field: ‘local’
[13:36:50.363]   - Field: ‘owner’
[13:36:50.363]   - Field: ‘envir’
[13:36:50.363]   - Field: ‘packages’
[13:36:50.363]   - Field: ‘gc’
[13:36:50.363]   - Field: ‘conditions’
[13:36:50.363]   - Field: ‘expr’
[13:36:50.363]   - Field: ‘uuid’
[13:36:50.363]   - Field: ‘seed’
[13:36:50.363]   - Field: ‘version’
[13:36:50.363]   - Field: ‘result’
[13:36:50.363]   - Field: ‘asynchronous’
[13:36:50.364]   - Field: ‘calls’
[13:36:50.364]   - Field: ‘globals’
[13:36:50.364]   - Field: ‘stdout’
[13:36:50.364]   - Field: ‘earlySignal’
[13:36:50.364]   - Field: ‘lazy’
[13:36:50.364]   - Field: ‘state’
[13:36:50.364] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:50.364] - Launch lazy future ...
[13:36:50.365] Packages needed by the future expression (n = 0): <none>
[13:36:50.365] Packages needed by future strategies (n = 0): <none>
[13:36:50.366] {
[13:36:50.366]     {
[13:36:50.366]         {
[13:36:50.366]             ...future.startTime <- base::Sys.time()
[13:36:50.366]             {
[13:36:50.366]                 {
[13:36:50.366]                   {
[13:36:50.366]                     base::local({
[13:36:50.366]                       has_future <- base::requireNamespace("future", 
[13:36:50.366]                         quietly = TRUE)
[13:36:50.366]                       if (has_future) {
[13:36:50.366]                         ns <- base::getNamespace("future")
[13:36:50.366]                         version <- ns[[".package"]][["version"]]
[13:36:50.366]                         if (is.null(version)) 
[13:36:50.366]                           version <- utils::packageVersion("future")
[13:36:50.366]                       }
[13:36:50.366]                       else {
[13:36:50.366]                         version <- NULL
[13:36:50.366]                       }
[13:36:50.366]                       if (!has_future || version < "1.8.0") {
[13:36:50.366]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:50.366]                           "", base::R.version$version.string), 
[13:36:50.366]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:50.366]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:50.366]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:50.366]                             "release", "version")], collapse = " "), 
[13:36:50.366]                           hostname = base::Sys.info()[["nodename"]])
[13:36:50.366]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:50.366]                           info)
[13:36:50.366]                         info <- base::paste(info, collapse = "; ")
[13:36:50.366]                         if (!has_future) {
[13:36:50.366]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:50.366]                             info)
[13:36:50.366]                         }
[13:36:50.366]                         else {
[13:36:50.366]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:50.366]                             info, version)
[13:36:50.366]                         }
[13:36:50.366]                         base::stop(msg)
[13:36:50.366]                       }
[13:36:50.366]                     })
[13:36:50.366]                   }
[13:36:50.366]                   ...future.strategy.old <- future::plan("list")
[13:36:50.366]                   options(future.plan = NULL)
[13:36:50.366]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:50.366]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:50.366]                 }
[13:36:50.366]                 ...future.workdir <- getwd()
[13:36:50.366]             }
[13:36:50.366]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:50.366]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:50.366]         }
[13:36:50.366]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:50.366]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:50.366]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:50.366]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:50.366]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:50.366]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:50.366]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:50.366]             base::names(...future.oldOptions))
[13:36:50.366]     }
[13:36:50.366]     if (FALSE) {
[13:36:50.366]     }
[13:36:50.366]     else {
[13:36:50.366]         if (TRUE) {
[13:36:50.366]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:50.366]                 open = "w")
[13:36:50.366]         }
[13:36:50.366]         else {
[13:36:50.366]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:50.366]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:50.366]         }
[13:36:50.366]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:50.366]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:50.366]             base::sink(type = "output", split = FALSE)
[13:36:50.366]             base::close(...future.stdout)
[13:36:50.366]         }, add = TRUE)
[13:36:50.366]     }
[13:36:50.366]     ...future.frame <- base::sys.nframe()
[13:36:50.366]     ...future.conditions <- base::list()
[13:36:50.366]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:50.366]     if (FALSE) {
[13:36:50.366]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:50.366]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:50.366]     }
[13:36:50.366]     ...future.result <- base::tryCatch({
[13:36:50.366]         base::withCallingHandlers({
[13:36:50.366]             ...future.value <- base::withVisible(base::local({
[13:36:50.366]                 my_fcn
[13:36:50.366]             }))
[13:36:50.366]             future::FutureResult(value = ...future.value$value, 
[13:36:50.366]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:50.366]                   ...future.rng), globalenv = if (FALSE) 
[13:36:50.366]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:50.366]                     ...future.globalenv.names))
[13:36:50.366]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:50.366]         }, condition = base::local({
[13:36:50.366]             c <- base::c
[13:36:50.366]             inherits <- base::inherits
[13:36:50.366]             invokeRestart <- base::invokeRestart
[13:36:50.366]             length <- base::length
[13:36:50.366]             list <- base::list
[13:36:50.366]             seq.int <- base::seq.int
[13:36:50.366]             signalCondition <- base::signalCondition
[13:36:50.366]             sys.calls <- base::sys.calls
[13:36:50.366]             `[[` <- base::`[[`
[13:36:50.366]             `+` <- base::`+`
[13:36:50.366]             `<<-` <- base::`<<-`
[13:36:50.366]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:50.366]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:50.366]                   3L)]
[13:36:50.366]             }
[13:36:50.366]             function(cond) {
[13:36:50.366]                 is_error <- inherits(cond, "error")
[13:36:50.366]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:50.366]                   NULL)
[13:36:50.366]                 if (is_error) {
[13:36:50.366]                   sessionInformation <- function() {
[13:36:50.366]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:50.366]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:50.366]                       search = base::search(), system = base::Sys.info())
[13:36:50.366]                   }
[13:36:50.366]                   ...future.conditions[[length(...future.conditions) + 
[13:36:50.366]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:50.366]                     cond$call), session = sessionInformation(), 
[13:36:50.366]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:50.366]                   signalCondition(cond)
[13:36:50.366]                 }
[13:36:50.366]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:50.366]                 "immediateCondition"))) {
[13:36:50.366]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:50.366]                   ...future.conditions[[length(...future.conditions) + 
[13:36:50.366]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:50.366]                   if (TRUE && !signal) {
[13:36:50.366]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:50.366]                     {
[13:36:50.366]                       inherits <- base::inherits
[13:36:50.366]                       invokeRestart <- base::invokeRestart
[13:36:50.366]                       is.null <- base::is.null
[13:36:50.366]                       muffled <- FALSE
[13:36:50.366]                       if (inherits(cond, "message")) {
[13:36:50.366]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:50.366]                         if (muffled) 
[13:36:50.366]                           invokeRestart("muffleMessage")
[13:36:50.366]                       }
[13:36:50.366]                       else if (inherits(cond, "warning")) {
[13:36:50.366]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:50.366]                         if (muffled) 
[13:36:50.366]                           invokeRestart("muffleWarning")
[13:36:50.366]                       }
[13:36:50.366]                       else if (inherits(cond, "condition")) {
[13:36:50.366]                         if (!is.null(pattern)) {
[13:36:50.366]                           computeRestarts <- base::computeRestarts
[13:36:50.366]                           grepl <- base::grepl
[13:36:50.366]                           restarts <- computeRestarts(cond)
[13:36:50.366]                           for (restart in restarts) {
[13:36:50.366]                             name <- restart$name
[13:36:50.366]                             if (is.null(name)) 
[13:36:50.366]                               next
[13:36:50.366]                             if (!grepl(pattern, name)) 
[13:36:50.366]                               next
[13:36:50.366]                             invokeRestart(restart)
[13:36:50.366]                             muffled <- TRUE
[13:36:50.366]                             break
[13:36:50.366]                           }
[13:36:50.366]                         }
[13:36:50.366]                       }
[13:36:50.366]                       invisible(muffled)
[13:36:50.366]                     }
[13:36:50.366]                     muffleCondition(cond, pattern = "^muffle")
[13:36:50.366]                   }
[13:36:50.366]                 }
[13:36:50.366]                 else {
[13:36:50.366]                   if (TRUE) {
[13:36:50.366]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:50.366]                     {
[13:36:50.366]                       inherits <- base::inherits
[13:36:50.366]                       invokeRestart <- base::invokeRestart
[13:36:50.366]                       is.null <- base::is.null
[13:36:50.366]                       muffled <- FALSE
[13:36:50.366]                       if (inherits(cond, "message")) {
[13:36:50.366]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:50.366]                         if (muffled) 
[13:36:50.366]                           invokeRestart("muffleMessage")
[13:36:50.366]                       }
[13:36:50.366]                       else if (inherits(cond, "warning")) {
[13:36:50.366]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:50.366]                         if (muffled) 
[13:36:50.366]                           invokeRestart("muffleWarning")
[13:36:50.366]                       }
[13:36:50.366]                       else if (inherits(cond, "condition")) {
[13:36:50.366]                         if (!is.null(pattern)) {
[13:36:50.366]                           computeRestarts <- base::computeRestarts
[13:36:50.366]                           grepl <- base::grepl
[13:36:50.366]                           restarts <- computeRestarts(cond)
[13:36:50.366]                           for (restart in restarts) {
[13:36:50.366]                             name <- restart$name
[13:36:50.366]                             if (is.null(name)) 
[13:36:50.366]                               next
[13:36:50.366]                             if (!grepl(pattern, name)) 
[13:36:50.366]                               next
[13:36:50.366]                             invokeRestart(restart)
[13:36:50.366]                             muffled <- TRUE
[13:36:50.366]                             break
[13:36:50.366]                           }
[13:36:50.366]                         }
[13:36:50.366]                       }
[13:36:50.366]                       invisible(muffled)
[13:36:50.366]                     }
[13:36:50.366]                     muffleCondition(cond, pattern = "^muffle")
[13:36:50.366]                   }
[13:36:50.366]                 }
[13:36:50.366]             }
[13:36:50.366]         }))
[13:36:50.366]     }, error = function(ex) {
[13:36:50.366]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:50.366]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:50.366]                 ...future.rng), started = ...future.startTime, 
[13:36:50.366]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:50.366]             version = "1.8"), class = "FutureResult")
[13:36:50.366]     }, finally = {
[13:36:50.366]         if (!identical(...future.workdir, getwd())) 
[13:36:50.366]             setwd(...future.workdir)
[13:36:50.366]         {
[13:36:50.366]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:50.366]                 ...future.oldOptions$nwarnings <- NULL
[13:36:50.366]             }
[13:36:50.366]             base::options(...future.oldOptions)
[13:36:50.366]             if (.Platform$OS.type == "windows") {
[13:36:50.366]                 old_names <- names(...future.oldEnvVars)
[13:36:50.366]                 envs <- base::Sys.getenv()
[13:36:50.366]                 names <- names(envs)
[13:36:50.366]                 common <- intersect(names, old_names)
[13:36:50.366]                 added <- setdiff(names, old_names)
[13:36:50.366]                 removed <- setdiff(old_names, names)
[13:36:50.366]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:50.366]                   envs[common]]
[13:36:50.366]                 NAMES <- toupper(changed)
[13:36:50.366]                 args <- list()
[13:36:50.366]                 for (kk in seq_along(NAMES)) {
[13:36:50.366]                   name <- changed[[kk]]
[13:36:50.366]                   NAME <- NAMES[[kk]]
[13:36:50.366]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:50.366]                     next
[13:36:50.366]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:50.366]                 }
[13:36:50.366]                 NAMES <- toupper(added)
[13:36:50.366]                 for (kk in seq_along(NAMES)) {
[13:36:50.366]                   name <- added[[kk]]
[13:36:50.366]                   NAME <- NAMES[[kk]]
[13:36:50.366]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:50.366]                     next
[13:36:50.366]                   args[[name]] <- ""
[13:36:50.366]                 }
[13:36:50.366]                 NAMES <- toupper(removed)
[13:36:50.366]                 for (kk in seq_along(NAMES)) {
[13:36:50.366]                   name <- removed[[kk]]
[13:36:50.366]                   NAME <- NAMES[[kk]]
[13:36:50.366]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:50.366]                     next
[13:36:50.366]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:50.366]                 }
[13:36:50.366]                 if (length(args) > 0) 
[13:36:50.366]                   base::do.call(base::Sys.setenv, args = args)
[13:36:50.366]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:50.366]             }
[13:36:50.366]             else {
[13:36:50.366]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:50.366]             }
[13:36:50.366]             {
[13:36:50.366]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:50.366]                   0L) {
[13:36:50.366]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:50.366]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:50.366]                   base::options(opts)
[13:36:50.366]                 }
[13:36:50.366]                 {
[13:36:50.366]                   {
[13:36:50.366]                     NULL
[13:36:50.366]                     RNGkind("Mersenne-Twister")
[13:36:50.366]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:50.366]                       inherits = FALSE)
[13:36:50.366]                   }
[13:36:50.366]                   options(future.plan = NULL)
[13:36:50.366]                   if (is.na(NA_character_)) 
[13:36:50.366]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:50.366]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:50.366]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:50.366]                     .init = FALSE)
[13:36:50.366]                 }
[13:36:50.366]             }
[13:36:50.366]         }
[13:36:50.366]     })
[13:36:50.366]     if (TRUE) {
[13:36:50.366]         base::sink(type = "output", split = FALSE)
[13:36:50.366]         if (TRUE) {
[13:36:50.366]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:50.366]         }
[13:36:50.366]         else {
[13:36:50.366]             ...future.result["stdout"] <- base::list(NULL)
[13:36:50.366]         }
[13:36:50.366]         base::close(...future.stdout)
[13:36:50.366]         ...future.stdout <- NULL
[13:36:50.366]     }
[13:36:50.366]     ...future.result$conditions <- ...future.conditions
[13:36:50.366]     ...future.result$finished <- base::Sys.time()
[13:36:50.366]     ...future.result
[13:36:50.366] }
[13:36:50.368] assign_globals() ...
[13:36:50.368] List of 1
[13:36:50.368]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[13:36:50.368]   .. ..@ .Data     :function (x)  
[13:36:50.368]   .. ..@ generic   : chr "my_fcn"
[13:36:50.368]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[13:36:50.368]   .. ..@ package   : chr ".GlobalEnv"
[13:36:50.368]   .. ..@ group     : list()
[13:36:50.368]   .. ..@ valueClass: chr(0) 
[13:36:50.368]   .. ..@ signature : chr "x"
[13:36:50.368]   .. ..@ default   : NULL
[13:36:50.368]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[13:36:50.368]  - attr(*, "where")=List of 1
[13:36:50.368]   ..$ my_fcn:<environment: R_EmptyEnv> 
[13:36:50.368]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:50.368]  - attr(*, "resolved")= logi FALSE
[13:36:50.368]  - attr(*, "total_size")= num 3936
[13:36:50.368]  - attr(*, "already-done")= logi TRUE
[13:36:50.376] - reassign environment for ‘my_fcn’
[13:36:50.376] - copied ‘my_fcn’ to environment
[13:36:50.377] assign_globals() ... done
[13:36:50.377] plan(): Setting new future strategy stack:
[13:36:50.377] List of future strategies:
[13:36:50.377] 1. sequential:
[13:36:50.377]    - args: function (..., envir = parent.frame())
[13:36:50.377]    - tweaked: FALSE
[13:36:50.377]    - call: NULL
[13:36:50.377] plan(): nbrOfWorkers() = 1
[13:36:50.378] plan(): Setting new future strategy stack:
[13:36:50.379] List of future strategies:
[13:36:50.379] 1. sequential:
[13:36:50.379]    - args: function (..., envir = parent.frame())
[13:36:50.379]    - tweaked: FALSE
[13:36:50.379]    - call: plan(strategy)
[13:36:50.379] plan(): nbrOfWorkers() = 1
[13:36:50.379] SequentialFuture started (and completed)
[13:36:50.379] - Launch lazy future ... done
[13:36:50.380] run() for ‘SequentialFuture’ ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x55dd7e6ee890>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[13:36:50.380] getGlobalsAndPackages() ...
[13:36:50.380] Searching for globals...
[13:36:50.384] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[13:36:50.384] Searching for globals ... DONE
[13:36:50.384] Resolving globals: FALSE
[13:36:50.384] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[13:36:50.385] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[13:36:50.385] - globals: [1] ‘my_fcn’
[13:36:50.385] 
[13:36:50.385] getGlobalsAndPackages() ... DONE
[13:36:50.385] run() for ‘Future’ ...
[13:36:50.385] - state: ‘created’
[13:36:50.385] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:50.386] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:50.386] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:50.386]   - Field: ‘label’
[13:36:50.386]   - Field: ‘local’
[13:36:50.386]   - Field: ‘owner’
[13:36:50.386]   - Field: ‘envir’
[13:36:50.386]   - Field: ‘packages’
[13:36:50.386]   - Field: ‘gc’
[13:36:50.387]   - Field: ‘conditions’
[13:36:50.387]   - Field: ‘expr’
[13:36:50.387]   - Field: ‘uuid’
[13:36:50.387]   - Field: ‘seed’
[13:36:50.387]   - Field: ‘version’
[13:36:50.387]   - Field: ‘result’
[13:36:50.387]   - Field: ‘asynchronous’
[13:36:50.387]   - Field: ‘calls’
[13:36:50.387]   - Field: ‘globals’
[13:36:50.387]   - Field: ‘stdout’
[13:36:50.387]   - Field: ‘earlySignal’
[13:36:50.387]   - Field: ‘lazy’
[13:36:50.388]   - Field: ‘state’
[13:36:50.388] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:50.388] - Launch lazy future ...
[13:36:50.388] Packages needed by the future expression (n = 0): <none>
[13:36:50.388] Packages needed by future strategies (n = 0): <none>
[13:36:50.388] {
[13:36:50.388]     {
[13:36:50.388]         {
[13:36:50.388]             ...future.startTime <- base::Sys.time()
[13:36:50.388]             {
[13:36:50.388]                 {
[13:36:50.388]                   {
[13:36:50.388]                     base::local({
[13:36:50.388]                       has_future <- base::requireNamespace("future", 
[13:36:50.388]                         quietly = TRUE)
[13:36:50.388]                       if (has_future) {
[13:36:50.388]                         ns <- base::getNamespace("future")
[13:36:50.388]                         version <- ns[[".package"]][["version"]]
[13:36:50.388]                         if (is.null(version)) 
[13:36:50.388]                           version <- utils::packageVersion("future")
[13:36:50.388]                       }
[13:36:50.388]                       else {
[13:36:50.388]                         version <- NULL
[13:36:50.388]                       }
[13:36:50.388]                       if (!has_future || version < "1.8.0") {
[13:36:50.388]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:50.388]                           "", base::R.version$version.string), 
[13:36:50.388]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:50.388]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:50.388]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:50.388]                             "release", "version")], collapse = " "), 
[13:36:50.388]                           hostname = base::Sys.info()[["nodename"]])
[13:36:50.388]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:50.388]                           info)
[13:36:50.388]                         info <- base::paste(info, collapse = "; ")
[13:36:50.388]                         if (!has_future) {
[13:36:50.388]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:50.388]                             info)
[13:36:50.388]                         }
[13:36:50.388]                         else {
[13:36:50.388]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:50.388]                             info, version)
[13:36:50.388]                         }
[13:36:50.388]                         base::stop(msg)
[13:36:50.388]                       }
[13:36:50.388]                     })
[13:36:50.388]                   }
[13:36:50.388]                   ...future.strategy.old <- future::plan("list")
[13:36:50.388]                   options(future.plan = NULL)
[13:36:50.388]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:50.388]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:50.388]                 }
[13:36:50.388]                 ...future.workdir <- getwd()
[13:36:50.388]             }
[13:36:50.388]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:50.388]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:50.388]         }
[13:36:50.388]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:50.388]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:50.388]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:50.388]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:50.388]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:50.388]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:50.388]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:50.388]             base::names(...future.oldOptions))
[13:36:50.388]     }
[13:36:50.388]     if (FALSE) {
[13:36:50.388]     }
[13:36:50.388]     else {
[13:36:50.388]         if (TRUE) {
[13:36:50.388]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:50.388]                 open = "w")
[13:36:50.388]         }
[13:36:50.388]         else {
[13:36:50.388]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:50.388]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:50.388]         }
[13:36:50.388]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:50.388]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:50.388]             base::sink(type = "output", split = FALSE)
[13:36:50.388]             base::close(...future.stdout)
[13:36:50.388]         }, add = TRUE)
[13:36:50.388]     }
[13:36:50.388]     ...future.frame <- base::sys.nframe()
[13:36:50.388]     ...future.conditions <- base::list()
[13:36:50.388]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:50.388]     if (FALSE) {
[13:36:50.388]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:50.388]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:50.388]     }
[13:36:50.388]     ...future.result <- base::tryCatch({
[13:36:50.388]         base::withCallingHandlers({
[13:36:50.388]             ...future.value <- base::withVisible(base::local({
[13:36:50.388]                 my_fcn(3)
[13:36:50.388]             }))
[13:36:50.388]             future::FutureResult(value = ...future.value$value, 
[13:36:50.388]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:50.388]                   ...future.rng), globalenv = if (FALSE) 
[13:36:50.388]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:50.388]                     ...future.globalenv.names))
[13:36:50.388]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:50.388]         }, condition = base::local({
[13:36:50.388]             c <- base::c
[13:36:50.388]             inherits <- base::inherits
[13:36:50.388]             invokeRestart <- base::invokeRestart
[13:36:50.388]             length <- base::length
[13:36:50.388]             list <- base::list
[13:36:50.388]             seq.int <- base::seq.int
[13:36:50.388]             signalCondition <- base::signalCondition
[13:36:50.388]             sys.calls <- base::sys.calls
[13:36:50.388]             `[[` <- base::`[[`
[13:36:50.388]             `+` <- base::`+`
[13:36:50.388]             `<<-` <- base::`<<-`
[13:36:50.388]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:50.388]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:50.388]                   3L)]
[13:36:50.388]             }
[13:36:50.388]             function(cond) {
[13:36:50.388]                 is_error <- inherits(cond, "error")
[13:36:50.388]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:50.388]                   NULL)
[13:36:50.388]                 if (is_error) {
[13:36:50.388]                   sessionInformation <- function() {
[13:36:50.388]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:50.388]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:50.388]                       search = base::search(), system = base::Sys.info())
[13:36:50.388]                   }
[13:36:50.388]                   ...future.conditions[[length(...future.conditions) + 
[13:36:50.388]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:50.388]                     cond$call), session = sessionInformation(), 
[13:36:50.388]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:50.388]                   signalCondition(cond)
[13:36:50.388]                 }
[13:36:50.388]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:50.388]                 "immediateCondition"))) {
[13:36:50.388]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:50.388]                   ...future.conditions[[length(...future.conditions) + 
[13:36:50.388]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:50.388]                   if (TRUE && !signal) {
[13:36:50.388]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:50.388]                     {
[13:36:50.388]                       inherits <- base::inherits
[13:36:50.388]                       invokeRestart <- base::invokeRestart
[13:36:50.388]                       is.null <- base::is.null
[13:36:50.388]                       muffled <- FALSE
[13:36:50.388]                       if (inherits(cond, "message")) {
[13:36:50.388]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:50.388]                         if (muffled) 
[13:36:50.388]                           invokeRestart("muffleMessage")
[13:36:50.388]                       }
[13:36:50.388]                       else if (inherits(cond, "warning")) {
[13:36:50.388]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:50.388]                         if (muffled) 
[13:36:50.388]                           invokeRestart("muffleWarning")
[13:36:50.388]                       }
[13:36:50.388]                       else if (inherits(cond, "condition")) {
[13:36:50.388]                         if (!is.null(pattern)) {
[13:36:50.388]                           computeRestarts <- base::computeRestarts
[13:36:50.388]                           grepl <- base::grepl
[13:36:50.388]                           restarts <- computeRestarts(cond)
[13:36:50.388]                           for (restart in restarts) {
[13:36:50.388]                             name <- restart$name
[13:36:50.388]                             if (is.null(name)) 
[13:36:50.388]                               next
[13:36:50.388]                             if (!grepl(pattern, name)) 
[13:36:50.388]                               next
[13:36:50.388]                             invokeRestart(restart)
[13:36:50.388]                             muffled <- TRUE
[13:36:50.388]                             break
[13:36:50.388]                           }
[13:36:50.388]                         }
[13:36:50.388]                       }
[13:36:50.388]                       invisible(muffled)
[13:36:50.388]                     }
[13:36:50.388]                     muffleCondition(cond, pattern = "^muffle")
[13:36:50.388]                   }
[13:36:50.388]                 }
[13:36:50.388]                 else {
[13:36:50.388]                   if (TRUE) {
[13:36:50.388]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:50.388]                     {
[13:36:50.388]                       inherits <- base::inherits
[13:36:50.388]                       invokeRestart <- base::invokeRestart
[13:36:50.388]                       is.null <- base::is.null
[13:36:50.388]                       muffled <- FALSE
[13:36:50.388]                       if (inherits(cond, "message")) {
[13:36:50.388]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:50.388]                         if (muffled) 
[13:36:50.388]                           invokeRestart("muffleMessage")
[13:36:50.388]                       }
[13:36:50.388]                       else if (inherits(cond, "warning")) {
[13:36:50.388]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:50.388]                         if (muffled) 
[13:36:50.388]                           invokeRestart("muffleWarning")
[13:36:50.388]                       }
[13:36:50.388]                       else if (inherits(cond, "condition")) {
[13:36:50.388]                         if (!is.null(pattern)) {
[13:36:50.388]                           computeRestarts <- base::computeRestarts
[13:36:50.388]                           grepl <- base::grepl
[13:36:50.388]                           restarts <- computeRestarts(cond)
[13:36:50.388]                           for (restart in restarts) {
[13:36:50.388]                             name <- restart$name
[13:36:50.388]                             if (is.null(name)) 
[13:36:50.388]                               next
[13:36:50.388]                             if (!grepl(pattern, name)) 
[13:36:50.388]                               next
[13:36:50.388]                             invokeRestart(restart)
[13:36:50.388]                             muffled <- TRUE
[13:36:50.388]                             break
[13:36:50.388]                           }
[13:36:50.388]                         }
[13:36:50.388]                       }
[13:36:50.388]                       invisible(muffled)
[13:36:50.388]                     }
[13:36:50.388]                     muffleCondition(cond, pattern = "^muffle")
[13:36:50.388]                   }
[13:36:50.388]                 }
[13:36:50.388]             }
[13:36:50.388]         }))
[13:36:50.388]     }, error = function(ex) {
[13:36:50.388]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:50.388]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:50.388]                 ...future.rng), started = ...future.startTime, 
[13:36:50.388]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:50.388]             version = "1.8"), class = "FutureResult")
[13:36:50.388]     }, finally = {
[13:36:50.388]         if (!identical(...future.workdir, getwd())) 
[13:36:50.388]             setwd(...future.workdir)
[13:36:50.388]         {
[13:36:50.388]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:50.388]                 ...future.oldOptions$nwarnings <- NULL
[13:36:50.388]             }
[13:36:50.388]             base::options(...future.oldOptions)
[13:36:50.388]             if (.Platform$OS.type == "windows") {
[13:36:50.388]                 old_names <- names(...future.oldEnvVars)
[13:36:50.388]                 envs <- base::Sys.getenv()
[13:36:50.388]                 names <- names(envs)
[13:36:50.388]                 common <- intersect(names, old_names)
[13:36:50.388]                 added <- setdiff(names, old_names)
[13:36:50.388]                 removed <- setdiff(old_names, names)
[13:36:50.388]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:50.388]                   envs[common]]
[13:36:50.388]                 NAMES <- toupper(changed)
[13:36:50.388]                 args <- list()
[13:36:50.388]                 for (kk in seq_along(NAMES)) {
[13:36:50.388]                   name <- changed[[kk]]
[13:36:50.388]                   NAME <- NAMES[[kk]]
[13:36:50.388]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:50.388]                     next
[13:36:50.388]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:50.388]                 }
[13:36:50.388]                 NAMES <- toupper(added)
[13:36:50.388]                 for (kk in seq_along(NAMES)) {
[13:36:50.388]                   name <- added[[kk]]
[13:36:50.388]                   NAME <- NAMES[[kk]]
[13:36:50.388]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:50.388]                     next
[13:36:50.388]                   args[[name]] <- ""
[13:36:50.388]                 }
[13:36:50.388]                 NAMES <- toupper(removed)
[13:36:50.388]                 for (kk in seq_along(NAMES)) {
[13:36:50.388]                   name <- removed[[kk]]
[13:36:50.388]                   NAME <- NAMES[[kk]]
[13:36:50.388]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:50.388]                     next
[13:36:50.388]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:50.388]                 }
[13:36:50.388]                 if (length(args) > 0) 
[13:36:50.388]                   base::do.call(base::Sys.setenv, args = args)
[13:36:50.388]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:50.388]             }
[13:36:50.388]             else {
[13:36:50.388]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:50.388]             }
[13:36:50.388]             {
[13:36:50.388]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:50.388]                   0L) {
[13:36:50.388]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:50.388]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:50.388]                   base::options(opts)
[13:36:50.388]                 }
[13:36:50.388]                 {
[13:36:50.388]                   {
[13:36:50.388]                     NULL
[13:36:50.388]                     RNGkind("Mersenne-Twister")
[13:36:50.388]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:50.388]                       inherits = FALSE)
[13:36:50.388]                   }
[13:36:50.388]                   options(future.plan = NULL)
[13:36:50.388]                   if (is.na(NA_character_)) 
[13:36:50.388]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:50.388]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:50.388]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:50.388]                     .init = FALSE)
[13:36:50.388]                 }
[13:36:50.388]             }
[13:36:50.388]         }
[13:36:50.388]     })
[13:36:50.388]     if (TRUE) {
[13:36:50.388]         base::sink(type = "output", split = FALSE)
[13:36:50.388]         if (TRUE) {
[13:36:50.388]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:50.388]         }
[13:36:50.388]         else {
[13:36:50.388]             ...future.result["stdout"] <- base::list(NULL)
[13:36:50.388]         }
[13:36:50.388]         base::close(...future.stdout)
[13:36:50.388]         ...future.stdout <- NULL
[13:36:50.388]     }
[13:36:50.388]     ...future.result$conditions <- ...future.conditions
[13:36:50.388]     ...future.result$finished <- base::Sys.time()
[13:36:50.388]     ...future.result
[13:36:50.388] }
[13:36:50.390] assign_globals() ...
[13:36:50.390] List of 1
[13:36:50.390]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[13:36:50.390]   .. ..@ .Data     :function (x)  
[13:36:50.390]   .. ..@ generic   : chr "my_fcn"
[13:36:50.390]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[13:36:50.390]   .. ..@ package   : chr ".GlobalEnv"
[13:36:50.390]   .. ..@ group     : list()
[13:36:50.390]   .. ..@ valueClass: chr(0) 
[13:36:50.390]   .. ..@ signature : chr "x"
[13:36:50.390]   .. ..@ default   : NULL
[13:36:50.390]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[13:36:50.390]  - attr(*, "where")=List of 1
[13:36:50.390]   ..$ my_fcn:<environment: R_EmptyEnv> 
[13:36:50.390]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:50.390]  - attr(*, "resolved")= logi FALSE
[13:36:50.390]  - attr(*, "total_size")= num 3936
[13:36:50.390]  - attr(*, "already-done")= logi TRUE
[13:36:50.394] - reassign environment for ‘my_fcn’
[13:36:50.394] - copied ‘my_fcn’ to environment
[13:36:50.395] assign_globals() ... done
[13:36:50.395] plan(): Setting new future strategy stack:
[13:36:50.395] List of future strategies:
[13:36:50.395] 1. sequential:
[13:36:50.395]    - args: function (..., envir = parent.frame())
[13:36:50.395]    - tweaked: FALSE
[13:36:50.395]    - call: NULL
[13:36:50.395] plan(): nbrOfWorkers() = 1
[13:36:50.397] plan(): Setting new future strategy stack:
[13:36:50.397] List of future strategies:
[13:36:50.397] 1. sequential:
[13:36:50.397]    - args: function (..., envir = parent.frame())
[13:36:50.397]    - tweaked: FALSE
[13:36:50.397]    - call: plan(strategy)
[13:36:50.397] plan(): nbrOfWorkers() = 1
[13:36:50.397] SequentialFuture started (and completed)
[13:36:50.397] signalConditions() ...
[13:36:50.398]  - include = ‘immediateCondition’
[13:36:50.398]  - exclude = 
[13:36:50.398]  - resignal = FALSE
[13:36:50.398]  - Number of conditions: 1
[13:36:50.398] signalConditions() ... done
[13:36:50.398] - Launch lazy future ... done
[13:36:50.398] run() for ‘SequentialFuture’ ... done
[13:36:50.398] signalConditions() ...
[13:36:50.398]  - include = ‘immediateCondition’
[13:36:50.398]  - exclude = 
[13:36:50.398]  - resignal = FALSE
[13:36:50.400]  - Number of conditions: 1
[13:36:50.400] signalConditions() ... done
[13:36:50.400] Future state: ‘finished’
[13:36:50.400] signalConditions() ...
[13:36:50.400]  - include = ‘condition’
[13:36:50.400]  - exclude = ‘immediateCondition’
[13:36:50.400]  - resignal = TRUE
[13:36:50.400]  - Number of conditions: 1
[13:36:50.400]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[13:36:50.400] signalConditions() ... done
<simpleError in (function (classes, fdef, mtable) {    methods <- .findInheritedMethods(classes, fdef, mtable)    if (length(methods) == 1L)         return(methods[[1L]])    else if (length(methods) == 0L) {        cnames <- paste0("\"", vapply(classes, as.character,             ""), "\"", collapse = ", ")        stop(gettextf("unable to find an inherited method for function %s for signature %s",             sQuote(fdef@generic), sQuote(cnames)), domain = NA)    }    else stop("Internal error in finding inherited methods; didn't return a unique method",         domain = NA)})(list("numeric"), new("standardGeneric", .Data = function (x) standardGeneric("my_fcn"), generic = structure("my_fcn", package = ".GlobalEnv"),     package = ".GlobalEnv", group = list(), valueClass = character(0),     signature = "x", default = NULL, skeleton = (function (x)     stop(gettextf("invalid call in method dispatch to '%s' (no default method)",         "my_fcn"), domain = NA))(x)), <environment>): unable to find an inherited method for function ‘my_fcn’ for signature ‘"numeric"’>
Type of future: multicore
[13:36:50.401] plan(): Setting new future strategy stack:
[13:36:50.401] List of future strategies:
[13:36:50.401] 1. multicore:
[13:36:50.401]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:50.401]    - tweaked: FALSE
[13:36:50.401]    - call: plan(strategy)
[13:36:50.405] plan(): nbrOfWorkers() = 2
[13:36:50.405] getGlobalsAndPackages() ...
[13:36:50.405] Searching for globals...
[13:36:50.407] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[13:36:50.407] Searching for globals ... DONE
[13:36:50.407] Resolving globals: FALSE
[13:36:50.408] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[13:36:50.408] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[13:36:50.408] - globals: [1] ‘my_fcn’
[13:36:50.408] 
[13:36:50.408] getGlobalsAndPackages() ... DONE
[13:36:50.409] run() for ‘Future’ ...
[13:36:50.409] - state: ‘created’
[13:36:50.409] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:36:50.412] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:50.413] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:36:50.413]   - Field: ‘label’
[13:36:50.413]   - Field: ‘local’
[13:36:50.413]   - Field: ‘owner’
[13:36:50.413]   - Field: ‘envir’
[13:36:50.413]   - Field: ‘workers’
[13:36:50.413]   - Field: ‘packages’
[13:36:50.413]   - Field: ‘gc’
[13:36:50.413]   - Field: ‘job’
[13:36:50.413]   - Field: ‘conditions’
[13:36:50.414]   - Field: ‘expr’
[13:36:50.414]   - Field: ‘uuid’
[13:36:50.414]   - Field: ‘seed’
[13:36:50.414]   - Field: ‘version’
[13:36:50.414]   - Field: ‘result’
[13:36:50.414]   - Field: ‘asynchronous’
[13:36:50.414]   - Field: ‘calls’
[13:36:50.414]   - Field: ‘globals’
[13:36:50.414]   - Field: ‘stdout’
[13:36:50.414]   - Field: ‘earlySignal’
[13:36:50.414]   - Field: ‘lazy’
[13:36:50.415]   - Field: ‘state’
[13:36:50.415] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:36:50.415] - Launch lazy future ...
[13:36:50.416] Packages needed by the future expression (n = 0): <none>
[13:36:50.416] Packages needed by future strategies (n = 0): <none>
[13:36:50.416] {
[13:36:50.416]     {
[13:36:50.416]         {
[13:36:50.416]             ...future.startTime <- base::Sys.time()
[13:36:50.416]             {
[13:36:50.416]                 {
[13:36:50.416]                   {
[13:36:50.416]                     {
[13:36:50.416]                       base::local({
[13:36:50.416]                         has_future <- base::requireNamespace("future", 
[13:36:50.416]                           quietly = TRUE)
[13:36:50.416]                         if (has_future) {
[13:36:50.416]                           ns <- base::getNamespace("future")
[13:36:50.416]                           version <- ns[[".package"]][["version"]]
[13:36:50.416]                           if (is.null(version)) 
[13:36:50.416]                             version <- utils::packageVersion("future")
[13:36:50.416]                         }
[13:36:50.416]                         else {
[13:36:50.416]                           version <- NULL
[13:36:50.416]                         }
[13:36:50.416]                         if (!has_future || version < "1.8.0") {
[13:36:50.416]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:50.416]                             "", base::R.version$version.string), 
[13:36:50.416]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:50.416]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:50.416]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:50.416]                               "release", "version")], collapse = " "), 
[13:36:50.416]                             hostname = base::Sys.info()[["nodename"]])
[13:36:50.416]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:50.416]                             info)
[13:36:50.416]                           info <- base::paste(info, collapse = "; ")
[13:36:50.416]                           if (!has_future) {
[13:36:50.416]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:50.416]                               info)
[13:36:50.416]                           }
[13:36:50.416]                           else {
[13:36:50.416]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:50.416]                               info, version)
[13:36:50.416]                           }
[13:36:50.416]                           base::stop(msg)
[13:36:50.416]                         }
[13:36:50.416]                       })
[13:36:50.416]                     }
[13:36:50.416]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:50.416]                     base::options(mc.cores = 1L)
[13:36:50.416]                   }
[13:36:50.416]                   ...future.strategy.old <- future::plan("list")
[13:36:50.416]                   options(future.plan = NULL)
[13:36:50.416]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:50.416]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:50.416]                 }
[13:36:50.416]                 ...future.workdir <- getwd()
[13:36:50.416]             }
[13:36:50.416]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:50.416]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:50.416]         }
[13:36:50.416]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:50.416]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:50.416]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:50.416]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:50.416]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:50.416]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:50.416]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:50.416]             base::names(...future.oldOptions))
[13:36:50.416]     }
[13:36:50.416]     if (FALSE) {
[13:36:50.416]     }
[13:36:50.416]     else {
[13:36:50.416]         if (TRUE) {
[13:36:50.416]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:50.416]                 open = "w")
[13:36:50.416]         }
[13:36:50.416]         else {
[13:36:50.416]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:50.416]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:50.416]         }
[13:36:50.416]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:50.416]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:50.416]             base::sink(type = "output", split = FALSE)
[13:36:50.416]             base::close(...future.stdout)
[13:36:50.416]         }, add = TRUE)
[13:36:50.416]     }
[13:36:50.416]     ...future.frame <- base::sys.nframe()
[13:36:50.416]     ...future.conditions <- base::list()
[13:36:50.416]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:50.416]     if (FALSE) {
[13:36:50.416]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:50.416]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:50.416]     }
[13:36:50.416]     ...future.result <- base::tryCatch({
[13:36:50.416]         base::withCallingHandlers({
[13:36:50.416]             ...future.value <- base::withVisible(base::local({
[13:36:50.416]                 withCallingHandlers({
[13:36:50.416]                   {
[13:36:50.416]                     my_fcn
[13:36:50.416]                   }
[13:36:50.416]                 }, immediateCondition = function(cond) {
[13:36:50.416]                   save_rds <- function (object, pathname, ...) 
[13:36:50.416]                   {
[13:36:50.416]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:50.416]                     if (file_test("-f", pathname_tmp)) {
[13:36:50.416]                       fi_tmp <- file.info(pathname_tmp)
[13:36:50.416]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:50.416]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:50.416]                         fi_tmp[["mtime"]])
[13:36:50.416]                     }
[13:36:50.416]                     tryCatch({
[13:36:50.416]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:50.416]                     }, error = function(ex) {
[13:36:50.416]                       msg <- conditionMessage(ex)
[13:36:50.416]                       fi_tmp <- file.info(pathname_tmp)
[13:36:50.416]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:50.416]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:50.416]                         fi_tmp[["mtime"]], msg)
[13:36:50.416]                       ex$message <- msg
[13:36:50.416]                       stop(ex)
[13:36:50.416]                     })
[13:36:50.416]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:50.416]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:50.416]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:50.416]                       fi_tmp <- file.info(pathname_tmp)
[13:36:50.416]                       fi <- file.info(pathname)
[13:36:50.416]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:50.416]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:50.416]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:50.416]                         fi[["size"]], fi[["mtime"]])
[13:36:50.416]                       stop(msg)
[13:36:50.416]                     }
[13:36:50.416]                     invisible(pathname)
[13:36:50.416]                   }
[13:36:50.416]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:50.416]                     rootPath = tempdir()) 
[13:36:50.416]                   {
[13:36:50.416]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:50.416]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:50.416]                       tmpdir = path, fileext = ".rds")
[13:36:50.416]                     save_rds(obj, file)
[13:36:50.416]                   }
[13:36:50.416]                   saveImmediateCondition(cond, path = "/tmp/RtmpTXuDkn/.future/immediateConditions")
[13:36:50.416]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:50.416]                   {
[13:36:50.416]                     inherits <- base::inherits
[13:36:50.416]                     invokeRestart <- base::invokeRestart
[13:36:50.416]                     is.null <- base::is.null
[13:36:50.416]                     muffled <- FALSE
[13:36:50.416]                     if (inherits(cond, "message")) {
[13:36:50.416]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:50.416]                       if (muffled) 
[13:36:50.416]                         invokeRestart("muffleMessage")
[13:36:50.416]                     }
[13:36:50.416]                     else if (inherits(cond, "warning")) {
[13:36:50.416]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:50.416]                       if (muffled) 
[13:36:50.416]                         invokeRestart("muffleWarning")
[13:36:50.416]                     }
[13:36:50.416]                     else if (inherits(cond, "condition")) {
[13:36:50.416]                       if (!is.null(pattern)) {
[13:36:50.416]                         computeRestarts <- base::computeRestarts
[13:36:50.416]                         grepl <- base::grepl
[13:36:50.416]                         restarts <- computeRestarts(cond)
[13:36:50.416]                         for (restart in restarts) {
[13:36:50.416]                           name <- restart$name
[13:36:50.416]                           if (is.null(name)) 
[13:36:50.416]                             next
[13:36:50.416]                           if (!grepl(pattern, name)) 
[13:36:50.416]                             next
[13:36:50.416]                           invokeRestart(restart)
[13:36:50.416]                           muffled <- TRUE
[13:36:50.416]                           break
[13:36:50.416]                         }
[13:36:50.416]                       }
[13:36:50.416]                     }
[13:36:50.416]                     invisible(muffled)
[13:36:50.416]                   }
[13:36:50.416]                   muffleCondition(cond)
[13:36:50.416]                 })
[13:36:50.416]             }))
[13:36:50.416]             future::FutureResult(value = ...future.value$value, 
[13:36:50.416]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:50.416]                   ...future.rng), globalenv = if (FALSE) 
[13:36:50.416]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:50.416]                     ...future.globalenv.names))
[13:36:50.416]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:50.416]         }, condition = base::local({
[13:36:50.416]             c <- base::c
[13:36:50.416]             inherits <- base::inherits
[13:36:50.416]             invokeRestart <- base::invokeRestart
[13:36:50.416]             length <- base::length
[13:36:50.416]             list <- base::list
[13:36:50.416]             seq.int <- base::seq.int
[13:36:50.416]             signalCondition <- base::signalCondition
[13:36:50.416]             sys.calls <- base::sys.calls
[13:36:50.416]             `[[` <- base::`[[`
[13:36:50.416]             `+` <- base::`+`
[13:36:50.416]             `<<-` <- base::`<<-`
[13:36:50.416]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:50.416]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:50.416]                   3L)]
[13:36:50.416]             }
[13:36:50.416]             function(cond) {
[13:36:50.416]                 is_error <- inherits(cond, "error")
[13:36:50.416]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:50.416]                   NULL)
[13:36:50.416]                 if (is_error) {
[13:36:50.416]                   sessionInformation <- function() {
[13:36:50.416]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:50.416]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:50.416]                       search = base::search(), system = base::Sys.info())
[13:36:50.416]                   }
[13:36:50.416]                   ...future.conditions[[length(...future.conditions) + 
[13:36:50.416]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:50.416]                     cond$call), session = sessionInformation(), 
[13:36:50.416]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:50.416]                   signalCondition(cond)
[13:36:50.416]                 }
[13:36:50.416]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:50.416]                 "immediateCondition"))) {
[13:36:50.416]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:50.416]                   ...future.conditions[[length(...future.conditions) + 
[13:36:50.416]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:50.416]                   if (TRUE && !signal) {
[13:36:50.416]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:50.416]                     {
[13:36:50.416]                       inherits <- base::inherits
[13:36:50.416]                       invokeRestart <- base::invokeRestart
[13:36:50.416]                       is.null <- base::is.null
[13:36:50.416]                       muffled <- FALSE
[13:36:50.416]                       if (inherits(cond, "message")) {
[13:36:50.416]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:50.416]                         if (muffled) 
[13:36:50.416]                           invokeRestart("muffleMessage")
[13:36:50.416]                       }
[13:36:50.416]                       else if (inherits(cond, "warning")) {
[13:36:50.416]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:50.416]                         if (muffled) 
[13:36:50.416]                           invokeRestart("muffleWarning")
[13:36:50.416]                       }
[13:36:50.416]                       else if (inherits(cond, "condition")) {
[13:36:50.416]                         if (!is.null(pattern)) {
[13:36:50.416]                           computeRestarts <- base::computeRestarts
[13:36:50.416]                           grepl <- base::grepl
[13:36:50.416]                           restarts <- computeRestarts(cond)
[13:36:50.416]                           for (restart in restarts) {
[13:36:50.416]                             name <- restart$name
[13:36:50.416]                             if (is.null(name)) 
[13:36:50.416]                               next
[13:36:50.416]                             if (!grepl(pattern, name)) 
[13:36:50.416]                               next
[13:36:50.416]                             invokeRestart(restart)
[13:36:50.416]                             muffled <- TRUE
[13:36:50.416]                             break
[13:36:50.416]                           }
[13:36:50.416]                         }
[13:36:50.416]                       }
[13:36:50.416]                       invisible(muffled)
[13:36:50.416]                     }
[13:36:50.416]                     muffleCondition(cond, pattern = "^muffle")
[13:36:50.416]                   }
[13:36:50.416]                 }
[13:36:50.416]                 else {
[13:36:50.416]                   if (TRUE) {
[13:36:50.416]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:50.416]                     {
[13:36:50.416]                       inherits <- base::inherits
[13:36:50.416]                       invokeRestart <- base::invokeRestart
[13:36:50.416]                       is.null <- base::is.null
[13:36:50.416]                       muffled <- FALSE
[13:36:50.416]                       if (inherits(cond, "message")) {
[13:36:50.416]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:50.416]                         if (muffled) 
[13:36:50.416]                           invokeRestart("muffleMessage")
[13:36:50.416]                       }
[13:36:50.416]                       else if (inherits(cond, "warning")) {
[13:36:50.416]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:50.416]                         if (muffled) 
[13:36:50.416]                           invokeRestart("muffleWarning")
[13:36:50.416]                       }
[13:36:50.416]                       else if (inherits(cond, "condition")) {
[13:36:50.416]                         if (!is.null(pattern)) {
[13:36:50.416]                           computeRestarts <- base::computeRestarts
[13:36:50.416]                           grepl <- base::grepl
[13:36:50.416]                           restarts <- computeRestarts(cond)
[13:36:50.416]                           for (restart in restarts) {
[13:36:50.416]                             name <- restart$name
[13:36:50.416]                             if (is.null(name)) 
[13:36:50.416]                               next
[13:36:50.416]                             if (!grepl(pattern, name)) 
[13:36:50.416]                               next
[13:36:50.416]                             invokeRestart(restart)
[13:36:50.416]                             muffled <- TRUE
[13:36:50.416]                             break
[13:36:50.416]                           }
[13:36:50.416]                         }
[13:36:50.416]                       }
[13:36:50.416]                       invisible(muffled)
[13:36:50.416]                     }
[13:36:50.416]                     muffleCondition(cond, pattern = "^muffle")
[13:36:50.416]                   }
[13:36:50.416]                 }
[13:36:50.416]             }
[13:36:50.416]         }))
[13:36:50.416]     }, error = function(ex) {
[13:36:50.416]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:50.416]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:50.416]                 ...future.rng), started = ...future.startTime, 
[13:36:50.416]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:50.416]             version = "1.8"), class = "FutureResult")
[13:36:50.416]     }, finally = {
[13:36:50.416]         if (!identical(...future.workdir, getwd())) 
[13:36:50.416]             setwd(...future.workdir)
[13:36:50.416]         {
[13:36:50.416]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:50.416]                 ...future.oldOptions$nwarnings <- NULL
[13:36:50.416]             }
[13:36:50.416]             base::options(...future.oldOptions)
[13:36:50.416]             if (.Platform$OS.type == "windows") {
[13:36:50.416]                 old_names <- names(...future.oldEnvVars)
[13:36:50.416]                 envs <- base::Sys.getenv()
[13:36:50.416]                 names <- names(envs)
[13:36:50.416]                 common <- intersect(names, old_names)
[13:36:50.416]                 added <- setdiff(names, old_names)
[13:36:50.416]                 removed <- setdiff(old_names, names)
[13:36:50.416]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:50.416]                   envs[common]]
[13:36:50.416]                 NAMES <- toupper(changed)
[13:36:50.416]                 args <- list()
[13:36:50.416]                 for (kk in seq_along(NAMES)) {
[13:36:50.416]                   name <- changed[[kk]]
[13:36:50.416]                   NAME <- NAMES[[kk]]
[13:36:50.416]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:50.416]                     next
[13:36:50.416]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:50.416]                 }
[13:36:50.416]                 NAMES <- toupper(added)
[13:36:50.416]                 for (kk in seq_along(NAMES)) {
[13:36:50.416]                   name <- added[[kk]]
[13:36:50.416]                   NAME <- NAMES[[kk]]
[13:36:50.416]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:50.416]                     next
[13:36:50.416]                   args[[name]] <- ""
[13:36:50.416]                 }
[13:36:50.416]                 NAMES <- toupper(removed)
[13:36:50.416]                 for (kk in seq_along(NAMES)) {
[13:36:50.416]                   name <- removed[[kk]]
[13:36:50.416]                   NAME <- NAMES[[kk]]
[13:36:50.416]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:50.416]                     next
[13:36:50.416]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:50.416]                 }
[13:36:50.416]                 if (length(args) > 0) 
[13:36:50.416]                   base::do.call(base::Sys.setenv, args = args)
[13:36:50.416]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:50.416]             }
[13:36:50.416]             else {
[13:36:50.416]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:50.416]             }
[13:36:50.416]             {
[13:36:50.416]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:50.416]                   0L) {
[13:36:50.416]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:50.416]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:50.416]                   base::options(opts)
[13:36:50.416]                 }
[13:36:50.416]                 {
[13:36:50.416]                   {
[13:36:50.416]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:50.416]                     NULL
[13:36:50.416]                   }
[13:36:50.416]                   options(future.plan = NULL)
[13:36:50.416]                   if (is.na(NA_character_)) 
[13:36:50.416]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:50.416]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:50.416]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:50.416]                     .init = FALSE)
[13:36:50.416]                 }
[13:36:50.416]             }
[13:36:50.416]         }
[13:36:50.416]     })
[13:36:50.416]     if (TRUE) {
[13:36:50.416]         base::sink(type = "output", split = FALSE)
[13:36:50.416]         if (TRUE) {
[13:36:50.416]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:50.416]         }
[13:36:50.416]         else {
[13:36:50.416]             ...future.result["stdout"] <- base::list(NULL)
[13:36:50.416]         }
[13:36:50.416]         base::close(...future.stdout)
[13:36:50.416]         ...future.stdout <- NULL
[13:36:50.416]     }
[13:36:50.416]     ...future.result$conditions <- ...future.conditions
[13:36:50.416]     ...future.result$finished <- base::Sys.time()
[13:36:50.416]     ...future.result
[13:36:50.416] }
[13:36:50.418] assign_globals() ...
[13:36:50.418] List of 1
[13:36:50.418]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[13:36:50.418]   .. ..@ .Data     :function (x)  
[13:36:50.418]   .. ..@ generic   : chr "my_fcn"
[13:36:50.418]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[13:36:50.418]   .. ..@ package   : chr ".GlobalEnv"
[13:36:50.418]   .. ..@ group     : list()
[13:36:50.418]   .. ..@ valueClass: chr(0) 
[13:36:50.418]   .. ..@ signature : chr "x"
[13:36:50.418]   .. ..@ default   : NULL
[13:36:50.418]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[13:36:50.418]  - attr(*, "where")=List of 1
[13:36:50.418]   ..$ my_fcn:<environment: R_EmptyEnv> 
[13:36:50.418]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:50.418]  - attr(*, "resolved")= logi FALSE
[13:36:50.418]  - attr(*, "total_size")= num 3936
[13:36:50.418]  - attr(*, "already-done")= logi TRUE
[13:36:50.423] - reassign environment for ‘my_fcn’
[13:36:50.423] - copied ‘my_fcn’ to environment
[13:36:50.423] assign_globals() ... done
[13:36:50.423] requestCore(): workers = 2
[13:36:50.426] MulticoreFuture started
[13:36:50.427] - Launch lazy future ... done
[13:36:50.427] run() for ‘MulticoreFuture’ ... done
[13:36:50.427] plan(): Setting new future strategy stack:
[13:36:50.427] List of future strategies:
[13:36:50.427] 1. sequential:
[13:36:50.427]    - args: function (..., envir = parent.frame())
[13:36:50.427]    - tweaked: FALSE
[13:36:50.427]    - call: NULL
[13:36:50.428] result() for MulticoreFuture ...
[13:36:50.428] plan(): nbrOfWorkers() = 1
[13:36:50.430] plan(): Setting new future strategy stack:
[13:36:50.430] List of future strategies:
[13:36:50.430] 1. multicore:
[13:36:50.430]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:50.430]    - tweaked: FALSE
[13:36:50.430]    - call: plan(strategy)
[13:36:50.435] plan(): nbrOfWorkers() = 2
[13:36:50.443] result() for MulticoreFuture ...
[13:36:50.443] result() for MulticoreFuture ... done
[13:36:50.443] result() for MulticoreFuture ... done
[13:36:50.443] result() for MulticoreFuture ...
[13:36:50.443] result() for MulticoreFuture ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x55dd7e804fd0>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[13:36:50.444] getGlobalsAndPackages() ...
[13:36:50.444] Searching for globals...
[13:36:50.447] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[13:36:50.447] Searching for globals ... DONE
[13:36:50.447] Resolving globals: FALSE
[13:36:50.448] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[13:36:50.448] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[13:36:50.449] - globals: [1] ‘my_fcn’
[13:36:50.449] 
[13:36:50.449] getGlobalsAndPackages() ... DONE
[13:36:50.449] run() for ‘Future’ ...
[13:36:50.449] - state: ‘created’
[13:36:50.449] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:36:50.453] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:50.453] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:36:50.453]   - Field: ‘label’
[13:36:50.454]   - Field: ‘local’
[13:36:50.454]   - Field: ‘owner’
[13:36:50.454]   - Field: ‘envir’
[13:36:50.454]   - Field: ‘workers’
[13:36:50.454]   - Field: ‘packages’
[13:36:50.454]   - Field: ‘gc’
[13:36:50.454]   - Field: ‘job’
[13:36:50.454]   - Field: ‘conditions’
[13:36:50.454]   - Field: ‘expr’
[13:36:50.455]   - Field: ‘uuid’
[13:36:50.455]   - Field: ‘seed’
[13:36:50.455]   - Field: ‘version’
[13:36:50.455]   - Field: ‘result’
[13:36:50.455]   - Field: ‘asynchronous’
[13:36:50.455]   - Field: ‘calls’
[13:36:50.455]   - Field: ‘globals’
[13:36:50.455]   - Field: ‘stdout’
[13:36:50.455]   - Field: ‘earlySignal’
[13:36:50.456]   - Field: ‘lazy’
[13:36:50.456]   - Field: ‘state’
[13:36:50.456] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:36:50.456] - Launch lazy future ...
[13:36:50.456] Packages needed by the future expression (n = 0): <none>
[13:36:50.456] Packages needed by future strategies (n = 0): <none>
[13:36:50.457] {
[13:36:50.457]     {
[13:36:50.457]         {
[13:36:50.457]             ...future.startTime <- base::Sys.time()
[13:36:50.457]             {
[13:36:50.457]                 {
[13:36:50.457]                   {
[13:36:50.457]                     {
[13:36:50.457]                       base::local({
[13:36:50.457]                         has_future <- base::requireNamespace("future", 
[13:36:50.457]                           quietly = TRUE)
[13:36:50.457]                         if (has_future) {
[13:36:50.457]                           ns <- base::getNamespace("future")
[13:36:50.457]                           version <- ns[[".package"]][["version"]]
[13:36:50.457]                           if (is.null(version)) 
[13:36:50.457]                             version <- utils::packageVersion("future")
[13:36:50.457]                         }
[13:36:50.457]                         else {
[13:36:50.457]                           version <- NULL
[13:36:50.457]                         }
[13:36:50.457]                         if (!has_future || version < "1.8.0") {
[13:36:50.457]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:50.457]                             "", base::R.version$version.string), 
[13:36:50.457]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:50.457]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:50.457]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:50.457]                               "release", "version")], collapse = " "), 
[13:36:50.457]                             hostname = base::Sys.info()[["nodename"]])
[13:36:50.457]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:50.457]                             info)
[13:36:50.457]                           info <- base::paste(info, collapse = "; ")
[13:36:50.457]                           if (!has_future) {
[13:36:50.457]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:50.457]                               info)
[13:36:50.457]                           }
[13:36:50.457]                           else {
[13:36:50.457]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:50.457]                               info, version)
[13:36:50.457]                           }
[13:36:50.457]                           base::stop(msg)
[13:36:50.457]                         }
[13:36:50.457]                       })
[13:36:50.457]                     }
[13:36:50.457]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:50.457]                     base::options(mc.cores = 1L)
[13:36:50.457]                   }
[13:36:50.457]                   ...future.strategy.old <- future::plan("list")
[13:36:50.457]                   options(future.plan = NULL)
[13:36:50.457]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:50.457]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:50.457]                 }
[13:36:50.457]                 ...future.workdir <- getwd()
[13:36:50.457]             }
[13:36:50.457]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:50.457]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:50.457]         }
[13:36:50.457]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:50.457]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:50.457]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:50.457]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:50.457]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:50.457]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:50.457]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:50.457]             base::names(...future.oldOptions))
[13:36:50.457]     }
[13:36:50.457]     if (FALSE) {
[13:36:50.457]     }
[13:36:50.457]     else {
[13:36:50.457]         if (TRUE) {
[13:36:50.457]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:50.457]                 open = "w")
[13:36:50.457]         }
[13:36:50.457]         else {
[13:36:50.457]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:50.457]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:50.457]         }
[13:36:50.457]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:50.457]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:50.457]             base::sink(type = "output", split = FALSE)
[13:36:50.457]             base::close(...future.stdout)
[13:36:50.457]         }, add = TRUE)
[13:36:50.457]     }
[13:36:50.457]     ...future.frame <- base::sys.nframe()
[13:36:50.457]     ...future.conditions <- base::list()
[13:36:50.457]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:50.457]     if (FALSE) {
[13:36:50.457]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:50.457]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:50.457]     }
[13:36:50.457]     ...future.result <- base::tryCatch({
[13:36:50.457]         base::withCallingHandlers({
[13:36:50.457]             ...future.value <- base::withVisible(base::local({
[13:36:50.457]                 withCallingHandlers({
[13:36:50.457]                   {
[13:36:50.457]                     my_fcn(3)
[13:36:50.457]                   }
[13:36:50.457]                 }, immediateCondition = function(cond) {
[13:36:50.457]                   save_rds <- function (object, pathname, ...) 
[13:36:50.457]                   {
[13:36:50.457]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:50.457]                     if (file_test("-f", pathname_tmp)) {
[13:36:50.457]                       fi_tmp <- file.info(pathname_tmp)
[13:36:50.457]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:50.457]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:50.457]                         fi_tmp[["mtime"]])
[13:36:50.457]                     }
[13:36:50.457]                     tryCatch({
[13:36:50.457]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:50.457]                     }, error = function(ex) {
[13:36:50.457]                       msg <- conditionMessage(ex)
[13:36:50.457]                       fi_tmp <- file.info(pathname_tmp)
[13:36:50.457]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:50.457]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:50.457]                         fi_tmp[["mtime"]], msg)
[13:36:50.457]                       ex$message <- msg
[13:36:50.457]                       stop(ex)
[13:36:50.457]                     })
[13:36:50.457]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:50.457]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:50.457]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:50.457]                       fi_tmp <- file.info(pathname_tmp)
[13:36:50.457]                       fi <- file.info(pathname)
[13:36:50.457]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:50.457]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:50.457]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:50.457]                         fi[["size"]], fi[["mtime"]])
[13:36:50.457]                       stop(msg)
[13:36:50.457]                     }
[13:36:50.457]                     invisible(pathname)
[13:36:50.457]                   }
[13:36:50.457]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:50.457]                     rootPath = tempdir()) 
[13:36:50.457]                   {
[13:36:50.457]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:50.457]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:50.457]                       tmpdir = path, fileext = ".rds")
[13:36:50.457]                     save_rds(obj, file)
[13:36:50.457]                   }
[13:36:50.457]                   saveImmediateCondition(cond, path = "/tmp/RtmpTXuDkn/.future/immediateConditions")
[13:36:50.457]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:50.457]                   {
[13:36:50.457]                     inherits <- base::inherits
[13:36:50.457]                     invokeRestart <- base::invokeRestart
[13:36:50.457]                     is.null <- base::is.null
[13:36:50.457]                     muffled <- FALSE
[13:36:50.457]                     if (inherits(cond, "message")) {
[13:36:50.457]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:50.457]                       if (muffled) 
[13:36:50.457]                         invokeRestart("muffleMessage")
[13:36:50.457]                     }
[13:36:50.457]                     else if (inherits(cond, "warning")) {
[13:36:50.457]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:50.457]                       if (muffled) 
[13:36:50.457]                         invokeRestart("muffleWarning")
[13:36:50.457]                     }
[13:36:50.457]                     else if (inherits(cond, "condition")) {
[13:36:50.457]                       if (!is.null(pattern)) {
[13:36:50.457]                         computeRestarts <- base::computeRestarts
[13:36:50.457]                         grepl <- base::grepl
[13:36:50.457]                         restarts <- computeRestarts(cond)
[13:36:50.457]                         for (restart in restarts) {
[13:36:50.457]                           name <- restart$name
[13:36:50.457]                           if (is.null(name)) 
[13:36:50.457]                             next
[13:36:50.457]                           if (!grepl(pattern, name)) 
[13:36:50.457]                             next
[13:36:50.457]                           invokeRestart(restart)
[13:36:50.457]                           muffled <- TRUE
[13:36:50.457]                           break
[13:36:50.457]                         }
[13:36:50.457]                       }
[13:36:50.457]                     }
[13:36:50.457]                     invisible(muffled)
[13:36:50.457]                   }
[13:36:50.457]                   muffleCondition(cond)
[13:36:50.457]                 })
[13:36:50.457]             }))
[13:36:50.457]             future::FutureResult(value = ...future.value$value, 
[13:36:50.457]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:50.457]                   ...future.rng), globalenv = if (FALSE) 
[13:36:50.457]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:50.457]                     ...future.globalenv.names))
[13:36:50.457]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:50.457]         }, condition = base::local({
[13:36:50.457]             c <- base::c
[13:36:50.457]             inherits <- base::inherits
[13:36:50.457]             invokeRestart <- base::invokeRestart
[13:36:50.457]             length <- base::length
[13:36:50.457]             list <- base::list
[13:36:50.457]             seq.int <- base::seq.int
[13:36:50.457]             signalCondition <- base::signalCondition
[13:36:50.457]             sys.calls <- base::sys.calls
[13:36:50.457]             `[[` <- base::`[[`
[13:36:50.457]             `+` <- base::`+`
[13:36:50.457]             `<<-` <- base::`<<-`
[13:36:50.457]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:50.457]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:50.457]                   3L)]
[13:36:50.457]             }
[13:36:50.457]             function(cond) {
[13:36:50.457]                 is_error <- inherits(cond, "error")
[13:36:50.457]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:50.457]                   NULL)
[13:36:50.457]                 if (is_error) {
[13:36:50.457]                   sessionInformation <- function() {
[13:36:50.457]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:50.457]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:50.457]                       search = base::search(), system = base::Sys.info())
[13:36:50.457]                   }
[13:36:50.457]                   ...future.conditions[[length(...future.conditions) + 
[13:36:50.457]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:50.457]                     cond$call), session = sessionInformation(), 
[13:36:50.457]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:50.457]                   signalCondition(cond)
[13:36:50.457]                 }
[13:36:50.457]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:50.457]                 "immediateCondition"))) {
[13:36:50.457]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:50.457]                   ...future.conditions[[length(...future.conditions) + 
[13:36:50.457]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:50.457]                   if (TRUE && !signal) {
[13:36:50.457]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:50.457]                     {
[13:36:50.457]                       inherits <- base::inherits
[13:36:50.457]                       invokeRestart <- base::invokeRestart
[13:36:50.457]                       is.null <- base::is.null
[13:36:50.457]                       muffled <- FALSE
[13:36:50.457]                       if (inherits(cond, "message")) {
[13:36:50.457]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:50.457]                         if (muffled) 
[13:36:50.457]                           invokeRestart("muffleMessage")
[13:36:50.457]                       }
[13:36:50.457]                       else if (inherits(cond, "warning")) {
[13:36:50.457]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:50.457]                         if (muffled) 
[13:36:50.457]                           invokeRestart("muffleWarning")
[13:36:50.457]                       }
[13:36:50.457]                       else if (inherits(cond, "condition")) {
[13:36:50.457]                         if (!is.null(pattern)) {
[13:36:50.457]                           computeRestarts <- base::computeRestarts
[13:36:50.457]                           grepl <- base::grepl
[13:36:50.457]                           restarts <- computeRestarts(cond)
[13:36:50.457]                           for (restart in restarts) {
[13:36:50.457]                             name <- restart$name
[13:36:50.457]                             if (is.null(name)) 
[13:36:50.457]                               next
[13:36:50.457]                             if (!grepl(pattern, name)) 
[13:36:50.457]                               next
[13:36:50.457]                             invokeRestart(restart)
[13:36:50.457]                             muffled <- TRUE
[13:36:50.457]                             break
[13:36:50.457]                           }
[13:36:50.457]                         }
[13:36:50.457]                       }
[13:36:50.457]                       invisible(muffled)
[13:36:50.457]                     }
[13:36:50.457]                     muffleCondition(cond, pattern = "^muffle")
[13:36:50.457]                   }
[13:36:50.457]                 }
[13:36:50.457]                 else {
[13:36:50.457]                   if (TRUE) {
[13:36:50.457]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:50.457]                     {
[13:36:50.457]                       inherits <- base::inherits
[13:36:50.457]                       invokeRestart <- base::invokeRestart
[13:36:50.457]                       is.null <- base::is.null
[13:36:50.457]                       muffled <- FALSE
[13:36:50.457]                       if (inherits(cond, "message")) {
[13:36:50.457]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:50.457]                         if (muffled) 
[13:36:50.457]                           invokeRestart("muffleMessage")
[13:36:50.457]                       }
[13:36:50.457]                       else if (inherits(cond, "warning")) {
[13:36:50.457]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:50.457]                         if (muffled) 
[13:36:50.457]                           invokeRestart("muffleWarning")
[13:36:50.457]                       }
[13:36:50.457]                       else if (inherits(cond, "condition")) {
[13:36:50.457]                         if (!is.null(pattern)) {
[13:36:50.457]                           computeRestarts <- base::computeRestarts
[13:36:50.457]                           grepl <- base::grepl
[13:36:50.457]                           restarts <- computeRestarts(cond)
[13:36:50.457]                           for (restart in restarts) {
[13:36:50.457]                             name <- restart$name
[13:36:50.457]                             if (is.null(name)) 
[13:36:50.457]                               next
[13:36:50.457]                             if (!grepl(pattern, name)) 
[13:36:50.457]                               next
[13:36:50.457]                             invokeRestart(restart)
[13:36:50.457]                             muffled <- TRUE
[13:36:50.457]                             break
[13:36:50.457]                           }
[13:36:50.457]                         }
[13:36:50.457]                       }
[13:36:50.457]                       invisible(muffled)
[13:36:50.457]                     }
[13:36:50.457]                     muffleCondition(cond, pattern = "^muffle")
[13:36:50.457]                   }
[13:36:50.457]                 }
[13:36:50.457]             }
[13:36:50.457]         }))
[13:36:50.457]     }, error = function(ex) {
[13:36:50.457]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:50.457]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:50.457]                 ...future.rng), started = ...future.startTime, 
[13:36:50.457]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:50.457]             version = "1.8"), class = "FutureResult")
[13:36:50.457]     }, finally = {
[13:36:50.457]         if (!identical(...future.workdir, getwd())) 
[13:36:50.457]             setwd(...future.workdir)
[13:36:50.457]         {
[13:36:50.457]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:50.457]                 ...future.oldOptions$nwarnings <- NULL
[13:36:50.457]             }
[13:36:50.457]             base::options(...future.oldOptions)
[13:36:50.457]             if (.Platform$OS.type == "windows") {
[13:36:50.457]                 old_names <- names(...future.oldEnvVars)
[13:36:50.457]                 envs <- base::Sys.getenv()
[13:36:50.457]                 names <- names(envs)
[13:36:50.457]                 common <- intersect(names, old_names)
[13:36:50.457]                 added <- setdiff(names, old_names)
[13:36:50.457]                 removed <- setdiff(old_names, names)
[13:36:50.457]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:50.457]                   envs[common]]
[13:36:50.457]                 NAMES <- toupper(changed)
[13:36:50.457]                 args <- list()
[13:36:50.457]                 for (kk in seq_along(NAMES)) {
[13:36:50.457]                   name <- changed[[kk]]
[13:36:50.457]                   NAME <- NAMES[[kk]]
[13:36:50.457]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:50.457]                     next
[13:36:50.457]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:50.457]                 }
[13:36:50.457]                 NAMES <- toupper(added)
[13:36:50.457]                 for (kk in seq_along(NAMES)) {
[13:36:50.457]                   name <- added[[kk]]
[13:36:50.457]                   NAME <- NAMES[[kk]]
[13:36:50.457]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:50.457]                     next
[13:36:50.457]                   args[[name]] <- ""
[13:36:50.457]                 }
[13:36:50.457]                 NAMES <- toupper(removed)
[13:36:50.457]                 for (kk in seq_along(NAMES)) {
[13:36:50.457]                   name <- removed[[kk]]
[13:36:50.457]                   NAME <- NAMES[[kk]]
[13:36:50.457]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:50.457]                     next
[13:36:50.457]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:50.457]                 }
[13:36:50.457]                 if (length(args) > 0) 
[13:36:50.457]                   base::do.call(base::Sys.setenv, args = args)
[13:36:50.457]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:50.457]             }
[13:36:50.457]             else {
[13:36:50.457]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:50.457]             }
[13:36:50.457]             {
[13:36:50.457]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:50.457]                   0L) {
[13:36:50.457]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:50.457]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:50.457]                   base::options(opts)
[13:36:50.457]                 }
[13:36:50.457]                 {
[13:36:50.457]                   {
[13:36:50.457]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:50.457]                     NULL
[13:36:50.457]                   }
[13:36:50.457]                   options(future.plan = NULL)
[13:36:50.457]                   if (is.na(NA_character_)) 
[13:36:50.457]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:50.457]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:50.457]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:50.457]                     .init = FALSE)
[13:36:50.457]                 }
[13:36:50.457]             }
[13:36:50.457]         }
[13:36:50.457]     })
[13:36:50.457]     if (TRUE) {
[13:36:50.457]         base::sink(type = "output", split = FALSE)
[13:36:50.457]         if (TRUE) {
[13:36:50.457]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:50.457]         }
[13:36:50.457]         else {
[13:36:50.457]             ...future.result["stdout"] <- base::list(NULL)
[13:36:50.457]         }
[13:36:50.457]         base::close(...future.stdout)
[13:36:50.457]         ...future.stdout <- NULL
[13:36:50.457]     }
[13:36:50.457]     ...future.result$conditions <- ...future.conditions
[13:36:50.457]     ...future.result$finished <- base::Sys.time()
[13:36:50.457]     ...future.result
[13:36:50.457] }
[13:36:50.459] assign_globals() ...
[13:36:50.459] List of 1
[13:36:50.459]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[13:36:50.459]   .. ..@ .Data     :function (x)  
[13:36:50.459]   .. ..@ generic   : chr "my_fcn"
[13:36:50.459]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[13:36:50.459]   .. ..@ package   : chr ".GlobalEnv"
[13:36:50.459]   .. ..@ group     : list()
[13:36:50.459]   .. ..@ valueClass: chr(0) 
[13:36:50.459]   .. ..@ signature : chr "x"
[13:36:50.459]   .. ..@ default   : NULL
[13:36:50.459]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[13:36:50.459]  - attr(*, "where")=List of 1
[13:36:50.459]   ..$ my_fcn:<environment: R_EmptyEnv> 
[13:36:50.459]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:50.459]  - attr(*, "resolved")= logi FALSE
[13:36:50.459]  - attr(*, "total_size")= num 3936
[13:36:50.459]  - attr(*, "already-done")= logi TRUE
[13:36:50.464] - reassign environment for ‘my_fcn’
[13:36:50.464] - copied ‘my_fcn’ to environment
[13:36:50.464] assign_globals() ... done
[13:36:50.465] requestCore(): workers = 2
[13:36:50.466] MulticoreFuture started
[13:36:50.467] - Launch lazy future ... done
[13:36:50.467] run() for ‘MulticoreFuture’ ... done
[13:36:50.467] result() for MulticoreFuture ...
[13:36:50.468] plan(): Setting new future strategy stack:
[13:36:50.468] List of future strategies:
[13:36:50.468] 1. sequential:
[13:36:50.468]    - args: function (..., envir = parent.frame())
[13:36:50.468]    - tweaked: FALSE
[13:36:50.468]    - call: NULL
[13:36:50.469] plan(): nbrOfWorkers() = 1
[13:36:50.471] plan(): Setting new future strategy stack:
[13:36:50.471] List of future strategies:
[13:36:50.471] 1. multicore:
[13:36:50.471]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:50.471]    - tweaked: FALSE
[13:36:50.471]    - call: plan(strategy)
[13:36:50.477] plan(): nbrOfWorkers() = 2
[13:36:50.495] result() for MulticoreFuture ...
[13:36:50.495] result() for MulticoreFuture ... done
[13:36:50.495] signalConditions() ...
[13:36:50.496]  - include = ‘immediateCondition’
[13:36:50.496]  - exclude = 
[13:36:50.496]  - resignal = FALSE
[13:36:50.496]  - Number of conditions: 1
[13:36:50.496] signalConditions() ... done
[13:36:50.496] result() for MulticoreFuture ... done
[13:36:50.497] result() for MulticoreFuture ...
[13:36:50.497] result() for MulticoreFuture ... done
[13:36:50.497] signalConditions() ...
[13:36:50.497]  - include = ‘immediateCondition’
[13:36:50.497]  - exclude = 
[13:36:50.497]  - resignal = FALSE
[13:36:50.497]  - Number of conditions: 1
[13:36:50.498] signalConditions() ... done
[13:36:50.498] Future state: ‘finished’
[13:36:50.498] result() for MulticoreFuture ...
[13:36:50.498] result() for MulticoreFuture ... done
[13:36:50.498] signalConditions() ...
[13:36:50.498]  - include = ‘condition’
[13:36:50.498]  - exclude = ‘immediateCondition’
[13:36:50.498]  - resignal = TRUE
[13:36:50.499]  - Number of conditions: 1
[13:36:50.499]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[13:36:50.499] signalConditions() ... done
<simpleError in (function (classes, fdef, mtable) {    methods <- .findInheritedMethods(classes, fdef, mtable)    if (length(methods) == 1L)         return(methods[[1L]])    else if (length(methods) == 0L) {        cnames <- paste0("\"", vapply(classes, as.character,             ""), "\"", collapse = ", ")        stop(gettextf("unable to find an inherited method for function %s for signature %s",             sQuote(fdef@generic), sQuote(cnames)), domain = NA)    }    else stop("Internal error in finding inherited methods; didn't return a unique method",         domain = NA)})(list("numeric"), new("standardGeneric", .Data = function (x) standardGeneric("my_fcn"), generic = structure("my_fcn", package = ".GlobalEnv"),     package = ".GlobalEnv", group = list(), valueClass = character(0),     signature = "x", default = NULL, skeleton = (function (x)     stop(gettextf("invalid call in method dispatch to '%s' (no default method)",         "my_fcn"), domain = NA))(x)), <environment>): unable to find an inherited method for function ‘my_fcn’ for signature ‘"numeric"’>
Type of future: multisession
[13:36:50.500] plan(): Setting new future strategy stack:
[13:36:50.500] List of future strategies:
[13:36:50.500] 1. multisession:
[13:36:50.500]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:36:50.500]    - tweaked: FALSE
[13:36:50.500]    - call: plan(strategy)
[13:36:50.500] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:36:50.501] multisession:
[13:36:50.501] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:36:50.501] - tweaked: FALSE
[13:36:50.501] - call: plan(strategy)
[13:36:50.507] getGlobalsAndPackages() ...
[13:36:50.507] Not searching for globals
[13:36:50.508] - globals: [0] <none>
[13:36:50.508] getGlobalsAndPackages() ... DONE
[13:36:50.508] [local output] makeClusterPSOCK() ...
[13:36:50.551] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:36:50.552] [local output] Base port: 11050
[13:36:50.552] [local output] Getting setup options for 2 cluster nodes ...
[13:36:50.552] [local output]  - Node 1 of 2 ...
[13:36:50.553] [local output] localMachine=TRUE => revtunnel=FALSE

[13:36:50.554] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpTXuDkn/worker.rank=1.parallelly.parent=84515.14a23520bd62c.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpTXuDkn/worker.rank=1.parallelly.parent=84515.14a23520bd62c.pid")'’
[13:36:50.741] - Possible to infer worker's PID: TRUE
[13:36:50.741] [local output] Rscript port: 11050

[13:36:50.741] [local output]  - Node 2 of 2 ...
[13:36:50.742] [local output] localMachine=TRUE => revtunnel=FALSE

[13:36:50.742] [local output] Rscript port: 11050

[13:36:50.743] [local output] Getting setup options for 2 cluster nodes ... done
[13:36:50.743] [local output]  - Parallel setup requested for some PSOCK nodes
[13:36:50.743] [local output] Setting up PSOCK nodes in parallel
[13:36:50.744] List of 36
[13:36:50.744]  $ worker          : chr "localhost"
[13:36:50.744]   ..- attr(*, "localhost")= logi TRUE
[13:36:50.744]  $ master          : chr "localhost"
[13:36:50.744]  $ port            : int 11050
[13:36:50.744]  $ connectTimeout  : num 120
[13:36:50.744]  $ timeout         : num 2592000
[13:36:50.744]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:36:50.744]  $ homogeneous     : logi TRUE
[13:36:50.744]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:36:50.744]  $ rscript_envs    : NULL
[13:36:50.744]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:36:50.744]  $ rscript_startup : NULL
[13:36:50.744]  $ rscript_sh      : chr "sh"
[13:36:50.744]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:36:50.744]  $ methods         : logi TRUE
[13:36:50.744]  $ socketOptions   : chr "no-delay"
[13:36:50.744]  $ useXDR          : logi FALSE
[13:36:50.744]  $ outfile         : chr "/dev/null"
[13:36:50.744]  $ renice          : int NA
[13:36:50.744]  $ rshcmd          : NULL
[13:36:50.744]  $ user            : chr(0) 
[13:36:50.744]  $ revtunnel       : logi FALSE
[13:36:50.744]  $ rshlogfile      : NULL
[13:36:50.744]  $ rshopts         : chr(0) 
[13:36:50.744]  $ rank            : int 1
[13:36:50.744]  $ manual          : logi FALSE
[13:36:50.744]  $ dryrun          : logi FALSE
[13:36:50.744]  $ quiet           : logi FALSE
[13:36:50.744]  $ setup_strategy  : chr "parallel"
[13:36:50.744]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:36:50.744]  $ pidfile         : chr "/tmp/RtmpTXuDkn/worker.rank=1.parallelly.parent=84515.14a23520bd62c.pid"
[13:36:50.744]  $ rshcmd_label    : NULL
[13:36:50.744]  $ rsh_call        : NULL
[13:36:50.744]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:36:50.744]  $ localMachine    : logi TRUE
[13:36:50.744]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:36:50.744]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:36:50.744]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:36:50.744]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:36:50.744]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:36:50.744]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:36:50.744]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:36:50.744]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:36:50.744]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:36:50.744]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:36:50.744]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:36:50.744]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:36:50.744]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:36:50.744]  $ arguments       :List of 28
[13:36:50.744]   ..$ worker          : chr "localhost"
[13:36:50.744]   ..$ master          : NULL
[13:36:50.744]   ..$ port            : int 11050
[13:36:50.744]   ..$ connectTimeout  : num 120
[13:36:50.744]   ..$ timeout         : num 2592000
[13:36:50.744]   ..$ rscript         : NULL
[13:36:50.744]   ..$ homogeneous     : NULL
[13:36:50.744]   ..$ rscript_args    : NULL
[13:36:50.744]   ..$ rscript_envs    : NULL
[13:36:50.744]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:36:50.744]   ..$ rscript_startup : NULL
[13:36:50.744]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:36:50.744]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:36:50.744]   ..$ methods         : logi TRUE
[13:36:50.744]   ..$ socketOptions   : chr "no-delay"
[13:36:50.744]   ..$ useXDR          : logi FALSE
[13:36:50.744]   ..$ outfile         : chr "/dev/null"
[13:36:50.744]   ..$ renice          : int NA
[13:36:50.744]   ..$ rshcmd          : NULL
[13:36:50.744]   ..$ user            : NULL
[13:36:50.744]   ..$ revtunnel       : logi NA
[13:36:50.744]   ..$ rshlogfile      : NULL
[13:36:50.744]   ..$ rshopts         : NULL
[13:36:50.744]   ..$ rank            : int 1
[13:36:50.744]   ..$ manual          : logi FALSE
[13:36:50.744]   ..$ dryrun          : logi FALSE
[13:36:50.744]   ..$ quiet           : logi FALSE
[13:36:50.744]   ..$ setup_strategy  : chr "parallel"
[13:36:50.744]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:36:50.761] [local output] System call to launch all workers:
[13:36:50.761] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpTXuDkn/worker.rank=1.parallelly.parent=84515.14a23520bd62c.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11050 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:36:50.761] [local output] Starting PSOCK main server
[13:36:50.767] [local output] Workers launched
[13:36:50.767] [local output] Waiting for workers to connect back
[13:36:50.767]  - [local output] 0 workers out of 2 ready
[13:36:51.032]  - [local output] 0 workers out of 2 ready
[13:36:51.033]  - [local output] 1 workers out of 2 ready
[13:36:51.033]  - [local output] 2 workers out of 2 ready
[13:36:51.033] [local output] Launching of workers completed
[13:36:51.033] [local output] Collecting session information from workers
[13:36:51.034] [local output]  - Worker #1 of 2
[13:36:51.035] [local output]  - Worker #2 of 2
[13:36:51.035] [local output] makeClusterPSOCK() ... done
[13:36:51.047] Packages needed by the future expression (n = 0): <none>
[13:36:51.047] Packages needed by future strategies (n = 0): <none>
[13:36:51.047] {
[13:36:51.047]     {
[13:36:51.047]         {
[13:36:51.047]             ...future.startTime <- base::Sys.time()
[13:36:51.047]             {
[13:36:51.047]                 {
[13:36:51.047]                   {
[13:36:51.047]                     {
[13:36:51.047]                       base::local({
[13:36:51.047]                         has_future <- base::requireNamespace("future", 
[13:36:51.047]                           quietly = TRUE)
[13:36:51.047]                         if (has_future) {
[13:36:51.047]                           ns <- base::getNamespace("future")
[13:36:51.047]                           version <- ns[[".package"]][["version"]]
[13:36:51.047]                           if (is.null(version)) 
[13:36:51.047]                             version <- utils::packageVersion("future")
[13:36:51.047]                         }
[13:36:51.047]                         else {
[13:36:51.047]                           version <- NULL
[13:36:51.047]                         }
[13:36:51.047]                         if (!has_future || version < "1.8.0") {
[13:36:51.047]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:51.047]                             "", base::R.version$version.string), 
[13:36:51.047]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:51.047]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:51.047]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:51.047]                               "release", "version")], collapse = " "), 
[13:36:51.047]                             hostname = base::Sys.info()[["nodename"]])
[13:36:51.047]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:51.047]                             info)
[13:36:51.047]                           info <- base::paste(info, collapse = "; ")
[13:36:51.047]                           if (!has_future) {
[13:36:51.047]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:51.047]                               info)
[13:36:51.047]                           }
[13:36:51.047]                           else {
[13:36:51.047]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:51.047]                               info, version)
[13:36:51.047]                           }
[13:36:51.047]                           base::stop(msg)
[13:36:51.047]                         }
[13:36:51.047]                       })
[13:36:51.047]                     }
[13:36:51.047]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:51.047]                     base::options(mc.cores = 1L)
[13:36:51.047]                   }
[13:36:51.047]                   ...future.strategy.old <- future::plan("list")
[13:36:51.047]                   options(future.plan = NULL)
[13:36:51.047]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.047]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:51.047]                 }
[13:36:51.047]                 ...future.workdir <- getwd()
[13:36:51.047]             }
[13:36:51.047]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:51.047]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:51.047]         }
[13:36:51.047]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:51.047]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:51.047]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:51.047]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:51.047]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:51.047]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:51.047]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:51.047]             base::names(...future.oldOptions))
[13:36:51.047]     }
[13:36:51.047]     if (FALSE) {
[13:36:51.047]     }
[13:36:51.047]     else {
[13:36:51.047]         if (TRUE) {
[13:36:51.047]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:51.047]                 open = "w")
[13:36:51.047]         }
[13:36:51.047]         else {
[13:36:51.047]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:51.047]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:51.047]         }
[13:36:51.047]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:51.047]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:51.047]             base::sink(type = "output", split = FALSE)
[13:36:51.047]             base::close(...future.stdout)
[13:36:51.047]         }, add = TRUE)
[13:36:51.047]     }
[13:36:51.047]     ...future.frame <- base::sys.nframe()
[13:36:51.047]     ...future.conditions <- base::list()
[13:36:51.047]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:51.047]     if (FALSE) {
[13:36:51.047]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:51.047]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:51.047]     }
[13:36:51.047]     ...future.result <- base::tryCatch({
[13:36:51.047]         base::withCallingHandlers({
[13:36:51.047]             ...future.value <- base::withVisible(base::local({
[13:36:51.047]                 ...future.makeSendCondition <- base::local({
[13:36:51.047]                   sendCondition <- NULL
[13:36:51.047]                   function(frame = 1L) {
[13:36:51.047]                     if (is.function(sendCondition)) 
[13:36:51.047]                       return(sendCondition)
[13:36:51.047]                     ns <- getNamespace("parallel")
[13:36:51.047]                     if (exists("sendData", mode = "function", 
[13:36:51.047]                       envir = ns)) {
[13:36:51.047]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:51.047]                         envir = ns)
[13:36:51.047]                       envir <- sys.frame(frame)
[13:36:51.047]                       master <- NULL
[13:36:51.047]                       while (!identical(envir, .GlobalEnv) && 
[13:36:51.047]                         !identical(envir, emptyenv())) {
[13:36:51.047]                         if (exists("master", mode = "list", envir = envir, 
[13:36:51.047]                           inherits = FALSE)) {
[13:36:51.047]                           master <- get("master", mode = "list", 
[13:36:51.047]                             envir = envir, inherits = FALSE)
[13:36:51.047]                           if (inherits(master, c("SOCKnode", 
[13:36:51.047]                             "SOCK0node"))) {
[13:36:51.047]                             sendCondition <<- function(cond) {
[13:36:51.047]                               data <- list(type = "VALUE", value = cond, 
[13:36:51.047]                                 success = TRUE)
[13:36:51.047]                               parallel_sendData(master, data)
[13:36:51.047]                             }
[13:36:51.047]                             return(sendCondition)
[13:36:51.047]                           }
[13:36:51.047]                         }
[13:36:51.047]                         frame <- frame + 1L
[13:36:51.047]                         envir <- sys.frame(frame)
[13:36:51.047]                       }
[13:36:51.047]                     }
[13:36:51.047]                     sendCondition <<- function(cond) NULL
[13:36:51.047]                   }
[13:36:51.047]                 })
[13:36:51.047]                 withCallingHandlers({
[13:36:51.047]                   NA
[13:36:51.047]                 }, immediateCondition = function(cond) {
[13:36:51.047]                   sendCondition <- ...future.makeSendCondition()
[13:36:51.047]                   sendCondition(cond)
[13:36:51.047]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.047]                   {
[13:36:51.047]                     inherits <- base::inherits
[13:36:51.047]                     invokeRestart <- base::invokeRestart
[13:36:51.047]                     is.null <- base::is.null
[13:36:51.047]                     muffled <- FALSE
[13:36:51.047]                     if (inherits(cond, "message")) {
[13:36:51.047]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:51.047]                       if (muffled) 
[13:36:51.047]                         invokeRestart("muffleMessage")
[13:36:51.047]                     }
[13:36:51.047]                     else if (inherits(cond, "warning")) {
[13:36:51.047]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:51.047]                       if (muffled) 
[13:36:51.047]                         invokeRestart("muffleWarning")
[13:36:51.047]                     }
[13:36:51.047]                     else if (inherits(cond, "condition")) {
[13:36:51.047]                       if (!is.null(pattern)) {
[13:36:51.047]                         computeRestarts <- base::computeRestarts
[13:36:51.047]                         grepl <- base::grepl
[13:36:51.047]                         restarts <- computeRestarts(cond)
[13:36:51.047]                         for (restart in restarts) {
[13:36:51.047]                           name <- restart$name
[13:36:51.047]                           if (is.null(name)) 
[13:36:51.047]                             next
[13:36:51.047]                           if (!grepl(pattern, name)) 
[13:36:51.047]                             next
[13:36:51.047]                           invokeRestart(restart)
[13:36:51.047]                           muffled <- TRUE
[13:36:51.047]                           break
[13:36:51.047]                         }
[13:36:51.047]                       }
[13:36:51.047]                     }
[13:36:51.047]                     invisible(muffled)
[13:36:51.047]                   }
[13:36:51.047]                   muffleCondition(cond)
[13:36:51.047]                 })
[13:36:51.047]             }))
[13:36:51.047]             future::FutureResult(value = ...future.value$value, 
[13:36:51.047]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.047]                   ...future.rng), globalenv = if (FALSE) 
[13:36:51.047]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:51.047]                     ...future.globalenv.names))
[13:36:51.047]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:51.047]         }, condition = base::local({
[13:36:51.047]             c <- base::c
[13:36:51.047]             inherits <- base::inherits
[13:36:51.047]             invokeRestart <- base::invokeRestart
[13:36:51.047]             length <- base::length
[13:36:51.047]             list <- base::list
[13:36:51.047]             seq.int <- base::seq.int
[13:36:51.047]             signalCondition <- base::signalCondition
[13:36:51.047]             sys.calls <- base::sys.calls
[13:36:51.047]             `[[` <- base::`[[`
[13:36:51.047]             `+` <- base::`+`
[13:36:51.047]             `<<-` <- base::`<<-`
[13:36:51.047]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:51.047]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:51.047]                   3L)]
[13:36:51.047]             }
[13:36:51.047]             function(cond) {
[13:36:51.047]                 is_error <- inherits(cond, "error")
[13:36:51.047]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:51.047]                   NULL)
[13:36:51.047]                 if (is_error) {
[13:36:51.047]                   sessionInformation <- function() {
[13:36:51.047]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:51.047]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:51.047]                       search = base::search(), system = base::Sys.info())
[13:36:51.047]                   }
[13:36:51.047]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.047]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:51.047]                     cond$call), session = sessionInformation(), 
[13:36:51.047]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:51.047]                   signalCondition(cond)
[13:36:51.047]                 }
[13:36:51.047]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:51.047]                 "immediateCondition"))) {
[13:36:51.047]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:51.047]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.047]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:51.047]                   if (TRUE && !signal) {
[13:36:51.047]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.047]                     {
[13:36:51.047]                       inherits <- base::inherits
[13:36:51.047]                       invokeRestart <- base::invokeRestart
[13:36:51.047]                       is.null <- base::is.null
[13:36:51.047]                       muffled <- FALSE
[13:36:51.047]                       if (inherits(cond, "message")) {
[13:36:51.047]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.047]                         if (muffled) 
[13:36:51.047]                           invokeRestart("muffleMessage")
[13:36:51.047]                       }
[13:36:51.047]                       else if (inherits(cond, "warning")) {
[13:36:51.047]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.047]                         if (muffled) 
[13:36:51.047]                           invokeRestart("muffleWarning")
[13:36:51.047]                       }
[13:36:51.047]                       else if (inherits(cond, "condition")) {
[13:36:51.047]                         if (!is.null(pattern)) {
[13:36:51.047]                           computeRestarts <- base::computeRestarts
[13:36:51.047]                           grepl <- base::grepl
[13:36:51.047]                           restarts <- computeRestarts(cond)
[13:36:51.047]                           for (restart in restarts) {
[13:36:51.047]                             name <- restart$name
[13:36:51.047]                             if (is.null(name)) 
[13:36:51.047]                               next
[13:36:51.047]                             if (!grepl(pattern, name)) 
[13:36:51.047]                               next
[13:36:51.047]                             invokeRestart(restart)
[13:36:51.047]                             muffled <- TRUE
[13:36:51.047]                             break
[13:36:51.047]                           }
[13:36:51.047]                         }
[13:36:51.047]                       }
[13:36:51.047]                       invisible(muffled)
[13:36:51.047]                     }
[13:36:51.047]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.047]                   }
[13:36:51.047]                 }
[13:36:51.047]                 else {
[13:36:51.047]                   if (TRUE) {
[13:36:51.047]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.047]                     {
[13:36:51.047]                       inherits <- base::inherits
[13:36:51.047]                       invokeRestart <- base::invokeRestart
[13:36:51.047]                       is.null <- base::is.null
[13:36:51.047]                       muffled <- FALSE
[13:36:51.047]                       if (inherits(cond, "message")) {
[13:36:51.047]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.047]                         if (muffled) 
[13:36:51.047]                           invokeRestart("muffleMessage")
[13:36:51.047]                       }
[13:36:51.047]                       else if (inherits(cond, "warning")) {
[13:36:51.047]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.047]                         if (muffled) 
[13:36:51.047]                           invokeRestart("muffleWarning")
[13:36:51.047]                       }
[13:36:51.047]                       else if (inherits(cond, "condition")) {
[13:36:51.047]                         if (!is.null(pattern)) {
[13:36:51.047]                           computeRestarts <- base::computeRestarts
[13:36:51.047]                           grepl <- base::grepl
[13:36:51.047]                           restarts <- computeRestarts(cond)
[13:36:51.047]                           for (restart in restarts) {
[13:36:51.047]                             name <- restart$name
[13:36:51.047]                             if (is.null(name)) 
[13:36:51.047]                               next
[13:36:51.047]                             if (!grepl(pattern, name)) 
[13:36:51.047]                               next
[13:36:51.047]                             invokeRestart(restart)
[13:36:51.047]                             muffled <- TRUE
[13:36:51.047]                             break
[13:36:51.047]                           }
[13:36:51.047]                         }
[13:36:51.047]                       }
[13:36:51.047]                       invisible(muffled)
[13:36:51.047]                     }
[13:36:51.047]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.047]                   }
[13:36:51.047]                 }
[13:36:51.047]             }
[13:36:51.047]         }))
[13:36:51.047]     }, error = function(ex) {
[13:36:51.047]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:51.047]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.047]                 ...future.rng), started = ...future.startTime, 
[13:36:51.047]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:51.047]             version = "1.8"), class = "FutureResult")
[13:36:51.047]     }, finally = {
[13:36:51.047]         if (!identical(...future.workdir, getwd())) 
[13:36:51.047]             setwd(...future.workdir)
[13:36:51.047]         {
[13:36:51.047]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:51.047]                 ...future.oldOptions$nwarnings <- NULL
[13:36:51.047]             }
[13:36:51.047]             base::options(...future.oldOptions)
[13:36:51.047]             if (.Platform$OS.type == "windows") {
[13:36:51.047]                 old_names <- names(...future.oldEnvVars)
[13:36:51.047]                 envs <- base::Sys.getenv()
[13:36:51.047]                 names <- names(envs)
[13:36:51.047]                 common <- intersect(names, old_names)
[13:36:51.047]                 added <- setdiff(names, old_names)
[13:36:51.047]                 removed <- setdiff(old_names, names)
[13:36:51.047]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:51.047]                   envs[common]]
[13:36:51.047]                 NAMES <- toupper(changed)
[13:36:51.047]                 args <- list()
[13:36:51.047]                 for (kk in seq_along(NAMES)) {
[13:36:51.047]                   name <- changed[[kk]]
[13:36:51.047]                   NAME <- NAMES[[kk]]
[13:36:51.047]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.047]                     next
[13:36:51.047]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.047]                 }
[13:36:51.047]                 NAMES <- toupper(added)
[13:36:51.047]                 for (kk in seq_along(NAMES)) {
[13:36:51.047]                   name <- added[[kk]]
[13:36:51.047]                   NAME <- NAMES[[kk]]
[13:36:51.047]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.047]                     next
[13:36:51.047]                   args[[name]] <- ""
[13:36:51.047]                 }
[13:36:51.047]                 NAMES <- toupper(removed)
[13:36:51.047]                 for (kk in seq_along(NAMES)) {
[13:36:51.047]                   name <- removed[[kk]]
[13:36:51.047]                   NAME <- NAMES[[kk]]
[13:36:51.047]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.047]                     next
[13:36:51.047]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.047]                 }
[13:36:51.047]                 if (length(args) > 0) 
[13:36:51.047]                   base::do.call(base::Sys.setenv, args = args)
[13:36:51.047]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:51.047]             }
[13:36:51.047]             else {
[13:36:51.047]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:51.047]             }
[13:36:51.047]             {
[13:36:51.047]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:51.047]                   0L) {
[13:36:51.047]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:51.047]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:51.047]                   base::options(opts)
[13:36:51.047]                 }
[13:36:51.047]                 {
[13:36:51.047]                   {
[13:36:51.047]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:51.047]                     NULL
[13:36:51.047]                   }
[13:36:51.047]                   options(future.plan = NULL)
[13:36:51.047]                   if (is.na(NA_character_)) 
[13:36:51.047]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.047]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:51.047]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:51.047]                     .init = FALSE)
[13:36:51.047]                 }
[13:36:51.047]             }
[13:36:51.047]         }
[13:36:51.047]     })
[13:36:51.047]     if (TRUE) {
[13:36:51.047]         base::sink(type = "output", split = FALSE)
[13:36:51.047]         if (TRUE) {
[13:36:51.047]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:51.047]         }
[13:36:51.047]         else {
[13:36:51.047]             ...future.result["stdout"] <- base::list(NULL)
[13:36:51.047]         }
[13:36:51.047]         base::close(...future.stdout)
[13:36:51.047]         ...future.stdout <- NULL
[13:36:51.047]     }
[13:36:51.047]     ...future.result$conditions <- ...future.conditions
[13:36:51.047]     ...future.result$finished <- base::Sys.time()
[13:36:51.047]     ...future.result
[13:36:51.047] }
[13:36:51.101] MultisessionFuture started
[13:36:51.101] result() for ClusterFuture ...
[13:36:51.102] receiveMessageFromWorker() for ClusterFuture ...
[13:36:51.102] - Validating connection of MultisessionFuture
[13:36:51.134] - received message: FutureResult
[13:36:51.135] - Received FutureResult
[13:36:51.135] - Erased future from FutureRegistry
[13:36:51.135] result() for ClusterFuture ...
[13:36:51.135] - result already collected: FutureResult
[13:36:51.135] result() for ClusterFuture ... done
[13:36:51.135] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:51.135] result() for ClusterFuture ... done
[13:36:51.136] result() for ClusterFuture ...
[13:36:51.136] - result already collected: FutureResult
[13:36:51.136] result() for ClusterFuture ... done
[13:36:51.136] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:36:51.140] plan(): nbrOfWorkers() = 2
[13:36:51.140] getGlobalsAndPackages() ...
[13:36:51.140] Searching for globals...
[13:36:51.143] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[13:36:51.143] Searching for globals ... DONE
[13:36:51.144] Resolving globals: FALSE
[13:36:51.144] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[13:36:51.145] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[13:36:51.145] - globals: [1] ‘my_fcn’
[13:36:51.145] 
[13:36:51.145] getGlobalsAndPackages() ... DONE
[13:36:51.145] run() for ‘Future’ ...
[13:36:51.145] - state: ‘created’
[13:36:51.146] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:51.160] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:51.160] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:51.160]   - Field: ‘node’
[13:36:51.160]   - Field: ‘label’
[13:36:51.161]   - Field: ‘local’
[13:36:51.161]   - Field: ‘owner’
[13:36:51.161]   - Field: ‘envir’
[13:36:51.161]   - Field: ‘workers’
[13:36:51.161]   - Field: ‘packages’
[13:36:51.161]   - Field: ‘gc’
[13:36:51.161]   - Field: ‘conditions’
[13:36:51.161]   - Field: ‘persistent’
[13:36:51.161]   - Field: ‘expr’
[13:36:51.161]   - Field: ‘uuid’
[13:36:51.162]   - Field: ‘seed’
[13:36:51.162]   - Field: ‘version’
[13:36:51.162]   - Field: ‘result’
[13:36:51.162]   - Field: ‘asynchronous’
[13:36:51.162]   - Field: ‘calls’
[13:36:51.162]   - Field: ‘globals’
[13:36:51.162]   - Field: ‘stdout’
[13:36:51.162]   - Field: ‘earlySignal’
[13:36:51.163]   - Field: ‘lazy’
[13:36:51.163]   - Field: ‘state’
[13:36:51.163] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:51.163] - Launch lazy future ...
[13:36:51.163] Packages needed by the future expression (n = 0): <none>
[13:36:51.163] Packages needed by future strategies (n = 0): <none>
[13:36:51.164] {
[13:36:51.164]     {
[13:36:51.164]         {
[13:36:51.164]             ...future.startTime <- base::Sys.time()
[13:36:51.164]             {
[13:36:51.164]                 {
[13:36:51.164]                   {
[13:36:51.164]                     {
[13:36:51.164]                       base::local({
[13:36:51.164]                         has_future <- base::requireNamespace("future", 
[13:36:51.164]                           quietly = TRUE)
[13:36:51.164]                         if (has_future) {
[13:36:51.164]                           ns <- base::getNamespace("future")
[13:36:51.164]                           version <- ns[[".package"]][["version"]]
[13:36:51.164]                           if (is.null(version)) 
[13:36:51.164]                             version <- utils::packageVersion("future")
[13:36:51.164]                         }
[13:36:51.164]                         else {
[13:36:51.164]                           version <- NULL
[13:36:51.164]                         }
[13:36:51.164]                         if (!has_future || version < "1.8.0") {
[13:36:51.164]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:51.164]                             "", base::R.version$version.string), 
[13:36:51.164]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:51.164]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:51.164]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:51.164]                               "release", "version")], collapse = " "), 
[13:36:51.164]                             hostname = base::Sys.info()[["nodename"]])
[13:36:51.164]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:51.164]                             info)
[13:36:51.164]                           info <- base::paste(info, collapse = "; ")
[13:36:51.164]                           if (!has_future) {
[13:36:51.164]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:51.164]                               info)
[13:36:51.164]                           }
[13:36:51.164]                           else {
[13:36:51.164]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:51.164]                               info, version)
[13:36:51.164]                           }
[13:36:51.164]                           base::stop(msg)
[13:36:51.164]                         }
[13:36:51.164]                       })
[13:36:51.164]                     }
[13:36:51.164]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:51.164]                     base::options(mc.cores = 1L)
[13:36:51.164]                   }
[13:36:51.164]                   ...future.strategy.old <- future::plan("list")
[13:36:51.164]                   options(future.plan = NULL)
[13:36:51.164]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.164]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:51.164]                 }
[13:36:51.164]                 ...future.workdir <- getwd()
[13:36:51.164]             }
[13:36:51.164]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:51.164]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:51.164]         }
[13:36:51.164]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:51.164]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:51.164]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:51.164]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:51.164]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:51.164]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:51.164]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:51.164]             base::names(...future.oldOptions))
[13:36:51.164]     }
[13:36:51.164]     if (FALSE) {
[13:36:51.164]     }
[13:36:51.164]     else {
[13:36:51.164]         if (TRUE) {
[13:36:51.164]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:51.164]                 open = "w")
[13:36:51.164]         }
[13:36:51.164]         else {
[13:36:51.164]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:51.164]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:51.164]         }
[13:36:51.164]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:51.164]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:51.164]             base::sink(type = "output", split = FALSE)
[13:36:51.164]             base::close(...future.stdout)
[13:36:51.164]         }, add = TRUE)
[13:36:51.164]     }
[13:36:51.164]     ...future.frame <- base::sys.nframe()
[13:36:51.164]     ...future.conditions <- base::list()
[13:36:51.164]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:51.164]     if (FALSE) {
[13:36:51.164]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:51.164]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:51.164]     }
[13:36:51.164]     ...future.result <- base::tryCatch({
[13:36:51.164]         base::withCallingHandlers({
[13:36:51.164]             ...future.value <- base::withVisible(base::local({
[13:36:51.164]                 ...future.makeSendCondition <- base::local({
[13:36:51.164]                   sendCondition <- NULL
[13:36:51.164]                   function(frame = 1L) {
[13:36:51.164]                     if (is.function(sendCondition)) 
[13:36:51.164]                       return(sendCondition)
[13:36:51.164]                     ns <- getNamespace("parallel")
[13:36:51.164]                     if (exists("sendData", mode = "function", 
[13:36:51.164]                       envir = ns)) {
[13:36:51.164]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:51.164]                         envir = ns)
[13:36:51.164]                       envir <- sys.frame(frame)
[13:36:51.164]                       master <- NULL
[13:36:51.164]                       while (!identical(envir, .GlobalEnv) && 
[13:36:51.164]                         !identical(envir, emptyenv())) {
[13:36:51.164]                         if (exists("master", mode = "list", envir = envir, 
[13:36:51.164]                           inherits = FALSE)) {
[13:36:51.164]                           master <- get("master", mode = "list", 
[13:36:51.164]                             envir = envir, inherits = FALSE)
[13:36:51.164]                           if (inherits(master, c("SOCKnode", 
[13:36:51.164]                             "SOCK0node"))) {
[13:36:51.164]                             sendCondition <<- function(cond) {
[13:36:51.164]                               data <- list(type = "VALUE", value = cond, 
[13:36:51.164]                                 success = TRUE)
[13:36:51.164]                               parallel_sendData(master, data)
[13:36:51.164]                             }
[13:36:51.164]                             return(sendCondition)
[13:36:51.164]                           }
[13:36:51.164]                         }
[13:36:51.164]                         frame <- frame + 1L
[13:36:51.164]                         envir <- sys.frame(frame)
[13:36:51.164]                       }
[13:36:51.164]                     }
[13:36:51.164]                     sendCondition <<- function(cond) NULL
[13:36:51.164]                   }
[13:36:51.164]                 })
[13:36:51.164]                 withCallingHandlers({
[13:36:51.164]                   {
[13:36:51.164]                     my_fcn
[13:36:51.164]                   }
[13:36:51.164]                 }, immediateCondition = function(cond) {
[13:36:51.164]                   sendCondition <- ...future.makeSendCondition()
[13:36:51.164]                   sendCondition(cond)
[13:36:51.164]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.164]                   {
[13:36:51.164]                     inherits <- base::inherits
[13:36:51.164]                     invokeRestart <- base::invokeRestart
[13:36:51.164]                     is.null <- base::is.null
[13:36:51.164]                     muffled <- FALSE
[13:36:51.164]                     if (inherits(cond, "message")) {
[13:36:51.164]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:51.164]                       if (muffled) 
[13:36:51.164]                         invokeRestart("muffleMessage")
[13:36:51.164]                     }
[13:36:51.164]                     else if (inherits(cond, "warning")) {
[13:36:51.164]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:51.164]                       if (muffled) 
[13:36:51.164]                         invokeRestart("muffleWarning")
[13:36:51.164]                     }
[13:36:51.164]                     else if (inherits(cond, "condition")) {
[13:36:51.164]                       if (!is.null(pattern)) {
[13:36:51.164]                         computeRestarts <- base::computeRestarts
[13:36:51.164]                         grepl <- base::grepl
[13:36:51.164]                         restarts <- computeRestarts(cond)
[13:36:51.164]                         for (restart in restarts) {
[13:36:51.164]                           name <- restart$name
[13:36:51.164]                           if (is.null(name)) 
[13:36:51.164]                             next
[13:36:51.164]                           if (!grepl(pattern, name)) 
[13:36:51.164]                             next
[13:36:51.164]                           invokeRestart(restart)
[13:36:51.164]                           muffled <- TRUE
[13:36:51.164]                           break
[13:36:51.164]                         }
[13:36:51.164]                       }
[13:36:51.164]                     }
[13:36:51.164]                     invisible(muffled)
[13:36:51.164]                   }
[13:36:51.164]                   muffleCondition(cond)
[13:36:51.164]                 })
[13:36:51.164]             }))
[13:36:51.164]             future::FutureResult(value = ...future.value$value, 
[13:36:51.164]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.164]                   ...future.rng), globalenv = if (FALSE) 
[13:36:51.164]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:51.164]                     ...future.globalenv.names))
[13:36:51.164]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:51.164]         }, condition = base::local({
[13:36:51.164]             c <- base::c
[13:36:51.164]             inherits <- base::inherits
[13:36:51.164]             invokeRestart <- base::invokeRestart
[13:36:51.164]             length <- base::length
[13:36:51.164]             list <- base::list
[13:36:51.164]             seq.int <- base::seq.int
[13:36:51.164]             signalCondition <- base::signalCondition
[13:36:51.164]             sys.calls <- base::sys.calls
[13:36:51.164]             `[[` <- base::`[[`
[13:36:51.164]             `+` <- base::`+`
[13:36:51.164]             `<<-` <- base::`<<-`
[13:36:51.164]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:51.164]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:51.164]                   3L)]
[13:36:51.164]             }
[13:36:51.164]             function(cond) {
[13:36:51.164]                 is_error <- inherits(cond, "error")
[13:36:51.164]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:51.164]                   NULL)
[13:36:51.164]                 if (is_error) {
[13:36:51.164]                   sessionInformation <- function() {
[13:36:51.164]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:51.164]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:51.164]                       search = base::search(), system = base::Sys.info())
[13:36:51.164]                   }
[13:36:51.164]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.164]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:51.164]                     cond$call), session = sessionInformation(), 
[13:36:51.164]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:51.164]                   signalCondition(cond)
[13:36:51.164]                 }
[13:36:51.164]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:51.164]                 "immediateCondition"))) {
[13:36:51.164]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:51.164]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.164]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:51.164]                   if (TRUE && !signal) {
[13:36:51.164]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.164]                     {
[13:36:51.164]                       inherits <- base::inherits
[13:36:51.164]                       invokeRestart <- base::invokeRestart
[13:36:51.164]                       is.null <- base::is.null
[13:36:51.164]                       muffled <- FALSE
[13:36:51.164]                       if (inherits(cond, "message")) {
[13:36:51.164]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.164]                         if (muffled) 
[13:36:51.164]                           invokeRestart("muffleMessage")
[13:36:51.164]                       }
[13:36:51.164]                       else if (inherits(cond, "warning")) {
[13:36:51.164]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.164]                         if (muffled) 
[13:36:51.164]                           invokeRestart("muffleWarning")
[13:36:51.164]                       }
[13:36:51.164]                       else if (inherits(cond, "condition")) {
[13:36:51.164]                         if (!is.null(pattern)) {
[13:36:51.164]                           computeRestarts <- base::computeRestarts
[13:36:51.164]                           grepl <- base::grepl
[13:36:51.164]                           restarts <- computeRestarts(cond)
[13:36:51.164]                           for (restart in restarts) {
[13:36:51.164]                             name <- restart$name
[13:36:51.164]                             if (is.null(name)) 
[13:36:51.164]                               next
[13:36:51.164]                             if (!grepl(pattern, name)) 
[13:36:51.164]                               next
[13:36:51.164]                             invokeRestart(restart)
[13:36:51.164]                             muffled <- TRUE
[13:36:51.164]                             break
[13:36:51.164]                           }
[13:36:51.164]                         }
[13:36:51.164]                       }
[13:36:51.164]                       invisible(muffled)
[13:36:51.164]                     }
[13:36:51.164]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.164]                   }
[13:36:51.164]                 }
[13:36:51.164]                 else {
[13:36:51.164]                   if (TRUE) {
[13:36:51.164]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.164]                     {
[13:36:51.164]                       inherits <- base::inherits
[13:36:51.164]                       invokeRestart <- base::invokeRestart
[13:36:51.164]                       is.null <- base::is.null
[13:36:51.164]                       muffled <- FALSE
[13:36:51.164]                       if (inherits(cond, "message")) {
[13:36:51.164]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.164]                         if (muffled) 
[13:36:51.164]                           invokeRestart("muffleMessage")
[13:36:51.164]                       }
[13:36:51.164]                       else if (inherits(cond, "warning")) {
[13:36:51.164]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.164]                         if (muffled) 
[13:36:51.164]                           invokeRestart("muffleWarning")
[13:36:51.164]                       }
[13:36:51.164]                       else if (inherits(cond, "condition")) {
[13:36:51.164]                         if (!is.null(pattern)) {
[13:36:51.164]                           computeRestarts <- base::computeRestarts
[13:36:51.164]                           grepl <- base::grepl
[13:36:51.164]                           restarts <- computeRestarts(cond)
[13:36:51.164]                           for (restart in restarts) {
[13:36:51.164]                             name <- restart$name
[13:36:51.164]                             if (is.null(name)) 
[13:36:51.164]                               next
[13:36:51.164]                             if (!grepl(pattern, name)) 
[13:36:51.164]                               next
[13:36:51.164]                             invokeRestart(restart)
[13:36:51.164]                             muffled <- TRUE
[13:36:51.164]                             break
[13:36:51.164]                           }
[13:36:51.164]                         }
[13:36:51.164]                       }
[13:36:51.164]                       invisible(muffled)
[13:36:51.164]                     }
[13:36:51.164]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.164]                   }
[13:36:51.164]                 }
[13:36:51.164]             }
[13:36:51.164]         }))
[13:36:51.164]     }, error = function(ex) {
[13:36:51.164]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:51.164]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.164]                 ...future.rng), started = ...future.startTime, 
[13:36:51.164]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:51.164]             version = "1.8"), class = "FutureResult")
[13:36:51.164]     }, finally = {
[13:36:51.164]         if (!identical(...future.workdir, getwd())) 
[13:36:51.164]             setwd(...future.workdir)
[13:36:51.164]         {
[13:36:51.164]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:51.164]                 ...future.oldOptions$nwarnings <- NULL
[13:36:51.164]             }
[13:36:51.164]             base::options(...future.oldOptions)
[13:36:51.164]             if (.Platform$OS.type == "windows") {
[13:36:51.164]                 old_names <- names(...future.oldEnvVars)
[13:36:51.164]                 envs <- base::Sys.getenv()
[13:36:51.164]                 names <- names(envs)
[13:36:51.164]                 common <- intersect(names, old_names)
[13:36:51.164]                 added <- setdiff(names, old_names)
[13:36:51.164]                 removed <- setdiff(old_names, names)
[13:36:51.164]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:51.164]                   envs[common]]
[13:36:51.164]                 NAMES <- toupper(changed)
[13:36:51.164]                 args <- list()
[13:36:51.164]                 for (kk in seq_along(NAMES)) {
[13:36:51.164]                   name <- changed[[kk]]
[13:36:51.164]                   NAME <- NAMES[[kk]]
[13:36:51.164]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.164]                     next
[13:36:51.164]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.164]                 }
[13:36:51.164]                 NAMES <- toupper(added)
[13:36:51.164]                 for (kk in seq_along(NAMES)) {
[13:36:51.164]                   name <- added[[kk]]
[13:36:51.164]                   NAME <- NAMES[[kk]]
[13:36:51.164]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.164]                     next
[13:36:51.164]                   args[[name]] <- ""
[13:36:51.164]                 }
[13:36:51.164]                 NAMES <- toupper(removed)
[13:36:51.164]                 for (kk in seq_along(NAMES)) {
[13:36:51.164]                   name <- removed[[kk]]
[13:36:51.164]                   NAME <- NAMES[[kk]]
[13:36:51.164]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.164]                     next
[13:36:51.164]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.164]                 }
[13:36:51.164]                 if (length(args) > 0) 
[13:36:51.164]                   base::do.call(base::Sys.setenv, args = args)
[13:36:51.164]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:51.164]             }
[13:36:51.164]             else {
[13:36:51.164]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:51.164]             }
[13:36:51.164]             {
[13:36:51.164]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:51.164]                   0L) {
[13:36:51.164]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:51.164]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:51.164]                   base::options(opts)
[13:36:51.164]                 }
[13:36:51.164]                 {
[13:36:51.164]                   {
[13:36:51.164]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:51.164]                     NULL
[13:36:51.164]                   }
[13:36:51.164]                   options(future.plan = NULL)
[13:36:51.164]                   if (is.na(NA_character_)) 
[13:36:51.164]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.164]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:51.164]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:51.164]                     .init = FALSE)
[13:36:51.164]                 }
[13:36:51.164]             }
[13:36:51.164]         }
[13:36:51.164]     })
[13:36:51.164]     if (TRUE) {
[13:36:51.164]         base::sink(type = "output", split = FALSE)
[13:36:51.164]         if (TRUE) {
[13:36:51.164]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:51.164]         }
[13:36:51.164]         else {
[13:36:51.164]             ...future.result["stdout"] <- base::list(NULL)
[13:36:51.164]         }
[13:36:51.164]         base::close(...future.stdout)
[13:36:51.164]         ...future.stdout <- NULL
[13:36:51.164]     }
[13:36:51.164]     ...future.result$conditions <- ...future.conditions
[13:36:51.164]     ...future.result$finished <- base::Sys.time()
[13:36:51.164]     ...future.result
[13:36:51.164] }
[13:36:51.167] Exporting 1 global objects (3.84 KiB) to cluster node #1 ...
[13:36:51.167] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ...
[13:36:51.167] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ... DONE
[13:36:51.168] Exporting 1 global objects (3.84 KiB) to cluster node #1 ... DONE
[13:36:51.168] MultisessionFuture started
[13:36:51.168] - Launch lazy future ... done
[13:36:51.168] run() for ‘MultisessionFuture’ ... done
[13:36:51.169] result() for ClusterFuture ...
[13:36:51.169] receiveMessageFromWorker() for ClusterFuture ...
[13:36:51.169] - Validating connection of MultisessionFuture
[13:36:51.173] - received message: FutureResult
[13:36:51.173] - Received FutureResult
[13:36:51.174] - Erased future from FutureRegistry
[13:36:51.174] result() for ClusterFuture ...
[13:36:51.174] - result already collected: FutureResult
[13:36:51.174] result() for ClusterFuture ... done
[13:36:51.174] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:51.174] result() for ClusterFuture ... done
[13:36:51.174] result() for ClusterFuture ...
[13:36:51.175] - result already collected: FutureResult
[13:36:51.175] result() for ClusterFuture ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x55dd7fd62ff8>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[13:36:51.175] getGlobalsAndPackages() ...
[13:36:51.175] Searching for globals...
[13:36:51.178] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[13:36:51.178] Searching for globals ... DONE
[13:36:51.178] Resolving globals: FALSE
[13:36:51.179] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[13:36:51.179] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[13:36:51.179] - globals: [1] ‘my_fcn’
[13:36:51.180] 
[13:36:51.180] getGlobalsAndPackages() ... DONE
[13:36:51.180] run() for ‘Future’ ...
[13:36:51.180] - state: ‘created’
[13:36:51.180] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:51.195] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:51.195] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:51.195]   - Field: ‘node’
[13:36:51.195]   - Field: ‘label’
[13:36:51.195]   - Field: ‘local’
[13:36:51.195]   - Field: ‘owner’
[13:36:51.195]   - Field: ‘envir’
[13:36:51.195]   - Field: ‘workers’
[13:36:51.196]   - Field: ‘packages’
[13:36:51.196]   - Field: ‘gc’
[13:36:51.196]   - Field: ‘conditions’
[13:36:51.196]   - Field: ‘persistent’
[13:36:51.196]   - Field: ‘expr’
[13:36:51.196]   - Field: ‘uuid’
[13:36:51.196]   - Field: ‘seed’
[13:36:51.196]   - Field: ‘version’
[13:36:51.196]   - Field: ‘result’
[13:36:51.197]   - Field: ‘asynchronous’
[13:36:51.197]   - Field: ‘calls’
[13:36:51.197]   - Field: ‘globals’
[13:36:51.197]   - Field: ‘stdout’
[13:36:51.197]   - Field: ‘earlySignal’
[13:36:51.197]   - Field: ‘lazy’
[13:36:51.197]   - Field: ‘state’
[13:36:51.197] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:51.197] - Launch lazy future ...
[13:36:51.198] Packages needed by the future expression (n = 0): <none>
[13:36:51.198] Packages needed by future strategies (n = 0): <none>
[13:36:51.198] {
[13:36:51.198]     {
[13:36:51.198]         {
[13:36:51.198]             ...future.startTime <- base::Sys.time()
[13:36:51.198]             {
[13:36:51.198]                 {
[13:36:51.198]                   {
[13:36:51.198]                     {
[13:36:51.198]                       base::local({
[13:36:51.198]                         has_future <- base::requireNamespace("future", 
[13:36:51.198]                           quietly = TRUE)
[13:36:51.198]                         if (has_future) {
[13:36:51.198]                           ns <- base::getNamespace("future")
[13:36:51.198]                           version <- ns[[".package"]][["version"]]
[13:36:51.198]                           if (is.null(version)) 
[13:36:51.198]                             version <- utils::packageVersion("future")
[13:36:51.198]                         }
[13:36:51.198]                         else {
[13:36:51.198]                           version <- NULL
[13:36:51.198]                         }
[13:36:51.198]                         if (!has_future || version < "1.8.0") {
[13:36:51.198]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:51.198]                             "", base::R.version$version.string), 
[13:36:51.198]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:51.198]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:51.198]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:51.198]                               "release", "version")], collapse = " "), 
[13:36:51.198]                             hostname = base::Sys.info()[["nodename"]])
[13:36:51.198]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:51.198]                             info)
[13:36:51.198]                           info <- base::paste(info, collapse = "; ")
[13:36:51.198]                           if (!has_future) {
[13:36:51.198]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:51.198]                               info)
[13:36:51.198]                           }
[13:36:51.198]                           else {
[13:36:51.198]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:51.198]                               info, version)
[13:36:51.198]                           }
[13:36:51.198]                           base::stop(msg)
[13:36:51.198]                         }
[13:36:51.198]                       })
[13:36:51.198]                     }
[13:36:51.198]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:51.198]                     base::options(mc.cores = 1L)
[13:36:51.198]                   }
[13:36:51.198]                   ...future.strategy.old <- future::plan("list")
[13:36:51.198]                   options(future.plan = NULL)
[13:36:51.198]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.198]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:51.198]                 }
[13:36:51.198]                 ...future.workdir <- getwd()
[13:36:51.198]             }
[13:36:51.198]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:51.198]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:51.198]         }
[13:36:51.198]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:51.198]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:51.198]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:51.198]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:51.198]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:51.198]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:51.198]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:51.198]             base::names(...future.oldOptions))
[13:36:51.198]     }
[13:36:51.198]     if (FALSE) {
[13:36:51.198]     }
[13:36:51.198]     else {
[13:36:51.198]         if (TRUE) {
[13:36:51.198]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:51.198]                 open = "w")
[13:36:51.198]         }
[13:36:51.198]         else {
[13:36:51.198]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:51.198]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:51.198]         }
[13:36:51.198]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:51.198]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:51.198]             base::sink(type = "output", split = FALSE)
[13:36:51.198]             base::close(...future.stdout)
[13:36:51.198]         }, add = TRUE)
[13:36:51.198]     }
[13:36:51.198]     ...future.frame <- base::sys.nframe()
[13:36:51.198]     ...future.conditions <- base::list()
[13:36:51.198]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:51.198]     if (FALSE) {
[13:36:51.198]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:51.198]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:51.198]     }
[13:36:51.198]     ...future.result <- base::tryCatch({
[13:36:51.198]         base::withCallingHandlers({
[13:36:51.198]             ...future.value <- base::withVisible(base::local({
[13:36:51.198]                 ...future.makeSendCondition <- base::local({
[13:36:51.198]                   sendCondition <- NULL
[13:36:51.198]                   function(frame = 1L) {
[13:36:51.198]                     if (is.function(sendCondition)) 
[13:36:51.198]                       return(sendCondition)
[13:36:51.198]                     ns <- getNamespace("parallel")
[13:36:51.198]                     if (exists("sendData", mode = "function", 
[13:36:51.198]                       envir = ns)) {
[13:36:51.198]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:51.198]                         envir = ns)
[13:36:51.198]                       envir <- sys.frame(frame)
[13:36:51.198]                       master <- NULL
[13:36:51.198]                       while (!identical(envir, .GlobalEnv) && 
[13:36:51.198]                         !identical(envir, emptyenv())) {
[13:36:51.198]                         if (exists("master", mode = "list", envir = envir, 
[13:36:51.198]                           inherits = FALSE)) {
[13:36:51.198]                           master <- get("master", mode = "list", 
[13:36:51.198]                             envir = envir, inherits = FALSE)
[13:36:51.198]                           if (inherits(master, c("SOCKnode", 
[13:36:51.198]                             "SOCK0node"))) {
[13:36:51.198]                             sendCondition <<- function(cond) {
[13:36:51.198]                               data <- list(type = "VALUE", value = cond, 
[13:36:51.198]                                 success = TRUE)
[13:36:51.198]                               parallel_sendData(master, data)
[13:36:51.198]                             }
[13:36:51.198]                             return(sendCondition)
[13:36:51.198]                           }
[13:36:51.198]                         }
[13:36:51.198]                         frame <- frame + 1L
[13:36:51.198]                         envir <- sys.frame(frame)
[13:36:51.198]                       }
[13:36:51.198]                     }
[13:36:51.198]                     sendCondition <<- function(cond) NULL
[13:36:51.198]                   }
[13:36:51.198]                 })
[13:36:51.198]                 withCallingHandlers({
[13:36:51.198]                   {
[13:36:51.198]                     my_fcn(3)
[13:36:51.198]                   }
[13:36:51.198]                 }, immediateCondition = function(cond) {
[13:36:51.198]                   sendCondition <- ...future.makeSendCondition()
[13:36:51.198]                   sendCondition(cond)
[13:36:51.198]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.198]                   {
[13:36:51.198]                     inherits <- base::inherits
[13:36:51.198]                     invokeRestart <- base::invokeRestart
[13:36:51.198]                     is.null <- base::is.null
[13:36:51.198]                     muffled <- FALSE
[13:36:51.198]                     if (inherits(cond, "message")) {
[13:36:51.198]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:51.198]                       if (muffled) 
[13:36:51.198]                         invokeRestart("muffleMessage")
[13:36:51.198]                     }
[13:36:51.198]                     else if (inherits(cond, "warning")) {
[13:36:51.198]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:51.198]                       if (muffled) 
[13:36:51.198]                         invokeRestart("muffleWarning")
[13:36:51.198]                     }
[13:36:51.198]                     else if (inherits(cond, "condition")) {
[13:36:51.198]                       if (!is.null(pattern)) {
[13:36:51.198]                         computeRestarts <- base::computeRestarts
[13:36:51.198]                         grepl <- base::grepl
[13:36:51.198]                         restarts <- computeRestarts(cond)
[13:36:51.198]                         for (restart in restarts) {
[13:36:51.198]                           name <- restart$name
[13:36:51.198]                           if (is.null(name)) 
[13:36:51.198]                             next
[13:36:51.198]                           if (!grepl(pattern, name)) 
[13:36:51.198]                             next
[13:36:51.198]                           invokeRestart(restart)
[13:36:51.198]                           muffled <- TRUE
[13:36:51.198]                           break
[13:36:51.198]                         }
[13:36:51.198]                       }
[13:36:51.198]                     }
[13:36:51.198]                     invisible(muffled)
[13:36:51.198]                   }
[13:36:51.198]                   muffleCondition(cond)
[13:36:51.198]                 })
[13:36:51.198]             }))
[13:36:51.198]             future::FutureResult(value = ...future.value$value, 
[13:36:51.198]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.198]                   ...future.rng), globalenv = if (FALSE) 
[13:36:51.198]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:51.198]                     ...future.globalenv.names))
[13:36:51.198]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:51.198]         }, condition = base::local({
[13:36:51.198]             c <- base::c
[13:36:51.198]             inherits <- base::inherits
[13:36:51.198]             invokeRestart <- base::invokeRestart
[13:36:51.198]             length <- base::length
[13:36:51.198]             list <- base::list
[13:36:51.198]             seq.int <- base::seq.int
[13:36:51.198]             signalCondition <- base::signalCondition
[13:36:51.198]             sys.calls <- base::sys.calls
[13:36:51.198]             `[[` <- base::`[[`
[13:36:51.198]             `+` <- base::`+`
[13:36:51.198]             `<<-` <- base::`<<-`
[13:36:51.198]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:51.198]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:51.198]                   3L)]
[13:36:51.198]             }
[13:36:51.198]             function(cond) {
[13:36:51.198]                 is_error <- inherits(cond, "error")
[13:36:51.198]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:51.198]                   NULL)
[13:36:51.198]                 if (is_error) {
[13:36:51.198]                   sessionInformation <- function() {
[13:36:51.198]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:51.198]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:51.198]                       search = base::search(), system = base::Sys.info())
[13:36:51.198]                   }
[13:36:51.198]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.198]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:51.198]                     cond$call), session = sessionInformation(), 
[13:36:51.198]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:51.198]                   signalCondition(cond)
[13:36:51.198]                 }
[13:36:51.198]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:51.198]                 "immediateCondition"))) {
[13:36:51.198]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:51.198]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.198]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:51.198]                   if (TRUE && !signal) {
[13:36:51.198]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.198]                     {
[13:36:51.198]                       inherits <- base::inherits
[13:36:51.198]                       invokeRestart <- base::invokeRestart
[13:36:51.198]                       is.null <- base::is.null
[13:36:51.198]                       muffled <- FALSE
[13:36:51.198]                       if (inherits(cond, "message")) {
[13:36:51.198]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.198]                         if (muffled) 
[13:36:51.198]                           invokeRestart("muffleMessage")
[13:36:51.198]                       }
[13:36:51.198]                       else if (inherits(cond, "warning")) {
[13:36:51.198]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.198]                         if (muffled) 
[13:36:51.198]                           invokeRestart("muffleWarning")
[13:36:51.198]                       }
[13:36:51.198]                       else if (inherits(cond, "condition")) {
[13:36:51.198]                         if (!is.null(pattern)) {
[13:36:51.198]                           computeRestarts <- base::computeRestarts
[13:36:51.198]                           grepl <- base::grepl
[13:36:51.198]                           restarts <- computeRestarts(cond)
[13:36:51.198]                           for (restart in restarts) {
[13:36:51.198]                             name <- restart$name
[13:36:51.198]                             if (is.null(name)) 
[13:36:51.198]                               next
[13:36:51.198]                             if (!grepl(pattern, name)) 
[13:36:51.198]                               next
[13:36:51.198]                             invokeRestart(restart)
[13:36:51.198]                             muffled <- TRUE
[13:36:51.198]                             break
[13:36:51.198]                           }
[13:36:51.198]                         }
[13:36:51.198]                       }
[13:36:51.198]                       invisible(muffled)
[13:36:51.198]                     }
[13:36:51.198]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.198]                   }
[13:36:51.198]                 }
[13:36:51.198]                 else {
[13:36:51.198]                   if (TRUE) {
[13:36:51.198]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.198]                     {
[13:36:51.198]                       inherits <- base::inherits
[13:36:51.198]                       invokeRestart <- base::invokeRestart
[13:36:51.198]                       is.null <- base::is.null
[13:36:51.198]                       muffled <- FALSE
[13:36:51.198]                       if (inherits(cond, "message")) {
[13:36:51.198]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.198]                         if (muffled) 
[13:36:51.198]                           invokeRestart("muffleMessage")
[13:36:51.198]                       }
[13:36:51.198]                       else if (inherits(cond, "warning")) {
[13:36:51.198]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.198]                         if (muffled) 
[13:36:51.198]                           invokeRestart("muffleWarning")
[13:36:51.198]                       }
[13:36:51.198]                       else if (inherits(cond, "condition")) {
[13:36:51.198]                         if (!is.null(pattern)) {
[13:36:51.198]                           computeRestarts <- base::computeRestarts
[13:36:51.198]                           grepl <- base::grepl
[13:36:51.198]                           restarts <- computeRestarts(cond)
[13:36:51.198]                           for (restart in restarts) {
[13:36:51.198]                             name <- restart$name
[13:36:51.198]                             if (is.null(name)) 
[13:36:51.198]                               next
[13:36:51.198]                             if (!grepl(pattern, name)) 
[13:36:51.198]                               next
[13:36:51.198]                             invokeRestart(restart)
[13:36:51.198]                             muffled <- TRUE
[13:36:51.198]                             break
[13:36:51.198]                           }
[13:36:51.198]                         }
[13:36:51.198]                       }
[13:36:51.198]                       invisible(muffled)
[13:36:51.198]                     }
[13:36:51.198]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.198]                   }
[13:36:51.198]                 }
[13:36:51.198]             }
[13:36:51.198]         }))
[13:36:51.198]     }, error = function(ex) {
[13:36:51.198]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:51.198]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.198]                 ...future.rng), started = ...future.startTime, 
[13:36:51.198]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:51.198]             version = "1.8"), class = "FutureResult")
[13:36:51.198]     }, finally = {
[13:36:51.198]         if (!identical(...future.workdir, getwd())) 
[13:36:51.198]             setwd(...future.workdir)
[13:36:51.198]         {
[13:36:51.198]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:51.198]                 ...future.oldOptions$nwarnings <- NULL
[13:36:51.198]             }
[13:36:51.198]             base::options(...future.oldOptions)
[13:36:51.198]             if (.Platform$OS.type == "windows") {
[13:36:51.198]                 old_names <- names(...future.oldEnvVars)
[13:36:51.198]                 envs <- base::Sys.getenv()
[13:36:51.198]                 names <- names(envs)
[13:36:51.198]                 common <- intersect(names, old_names)
[13:36:51.198]                 added <- setdiff(names, old_names)
[13:36:51.198]                 removed <- setdiff(old_names, names)
[13:36:51.198]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:51.198]                   envs[common]]
[13:36:51.198]                 NAMES <- toupper(changed)
[13:36:51.198]                 args <- list()
[13:36:51.198]                 for (kk in seq_along(NAMES)) {
[13:36:51.198]                   name <- changed[[kk]]
[13:36:51.198]                   NAME <- NAMES[[kk]]
[13:36:51.198]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.198]                     next
[13:36:51.198]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.198]                 }
[13:36:51.198]                 NAMES <- toupper(added)
[13:36:51.198]                 for (kk in seq_along(NAMES)) {
[13:36:51.198]                   name <- added[[kk]]
[13:36:51.198]                   NAME <- NAMES[[kk]]
[13:36:51.198]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.198]                     next
[13:36:51.198]                   args[[name]] <- ""
[13:36:51.198]                 }
[13:36:51.198]                 NAMES <- toupper(removed)
[13:36:51.198]                 for (kk in seq_along(NAMES)) {
[13:36:51.198]                   name <- removed[[kk]]
[13:36:51.198]                   NAME <- NAMES[[kk]]
[13:36:51.198]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.198]                     next
[13:36:51.198]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.198]                 }
[13:36:51.198]                 if (length(args) > 0) 
[13:36:51.198]                   base::do.call(base::Sys.setenv, args = args)
[13:36:51.198]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:51.198]             }
[13:36:51.198]             else {
[13:36:51.198]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:51.198]             }
[13:36:51.198]             {
[13:36:51.198]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:51.198]                   0L) {
[13:36:51.198]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:51.198]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:51.198]                   base::options(opts)
[13:36:51.198]                 }
[13:36:51.198]                 {
[13:36:51.198]                   {
[13:36:51.198]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:51.198]                     NULL
[13:36:51.198]                   }
[13:36:51.198]                   options(future.plan = NULL)
[13:36:51.198]                   if (is.na(NA_character_)) 
[13:36:51.198]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.198]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:51.198]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:51.198]                     .init = FALSE)
[13:36:51.198]                 }
[13:36:51.198]             }
[13:36:51.198]         }
[13:36:51.198]     })
[13:36:51.198]     if (TRUE) {
[13:36:51.198]         base::sink(type = "output", split = FALSE)
[13:36:51.198]         if (TRUE) {
[13:36:51.198]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:51.198]         }
[13:36:51.198]         else {
[13:36:51.198]             ...future.result["stdout"] <- base::list(NULL)
[13:36:51.198]         }
[13:36:51.198]         base::close(...future.stdout)
[13:36:51.198]         ...future.stdout <- NULL
[13:36:51.198]     }
[13:36:51.198]     ...future.result$conditions <- ...future.conditions
[13:36:51.198]     ...future.result$finished <- base::Sys.time()
[13:36:51.198]     ...future.result
[13:36:51.198] }
[13:36:51.201] Exporting 1 global objects (3.84 KiB) to cluster node #1 ...
[13:36:51.201] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ...
[13:36:51.202] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ... DONE
[13:36:51.202] Exporting 1 global objects (3.84 KiB) to cluster node #1 ... DONE
[13:36:51.203] MultisessionFuture started
[13:36:51.203] - Launch lazy future ... done
[13:36:51.203] run() for ‘MultisessionFuture’ ... done
[13:36:51.203] result() for ClusterFuture ...
[13:36:51.203] receiveMessageFromWorker() for ClusterFuture ...
[13:36:51.204] - Validating connection of MultisessionFuture
[13:36:51.206] - received message: FutureResult
[13:36:51.206] - Received FutureResult
[13:36:51.206] - Erased future from FutureRegistry
[13:36:51.206] result() for ClusterFuture ...
[13:36:51.206] - result already collected: FutureResult
[13:36:51.206] result() for ClusterFuture ... done
[13:36:51.206] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:51.207] result() for ClusterFuture ... done
[13:36:51.207] result() for ClusterFuture ...
[13:36:51.207] - result already collected: FutureResult
[13:36:51.207] result() for ClusterFuture ... done
[1] -3
> 
> message("*** Globals - S4 methods ... DONE")
*** Globals - S4 methods ... DONE
> 
> source("incl/end.R")
[13:36:51.208] plan(): Setting new future strategy stack:
[13:36:51.208] List of future strategies:
[13:36:51.208] 1. FutureStrategy:
[13:36:51.208]    - args: function (..., envir = parent.frame())
[13:36:51.208]    - tweaked: FALSE
[13:36:51.208]    - call: future::plan(oplan)
[13:36:51.209] plan(): nbrOfWorkers() = 1
> 
