
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:19:55.722] plan(): Setting new future strategy stack:
[16:19:55.722] List of future strategies:
[16:19:55.722] 1. sequential:
[16:19:55.722]    - args: function (..., envir = parent.frame())
[16:19:55.722]    - tweaked: FALSE
[16:19:55.722]    - call: future::plan("sequential")
[16:19:55.736] plan(): nbrOfWorkers() = 1
> 
> message("*** backtrace( ) ...")
*** backtrace( ) ...
> 
> message("*** backtrace( ) - explicit future ...")
*** backtrace( ) - explicit future ...
> 
> f <- future({ 42L; stop("Woops") })
[16:19:55.747] getGlobalsAndPackages() ...
[16:19:55.747] Searching for globals...
[16:19:55.753] - globals found: [2] ‘{’, ‘stop’
[16:19:55.753] Searching for globals ... DONE
[16:19:55.753] Resolving globals: FALSE
[16:19:55.754] 
[16:19:55.754] 
[16:19:55.754] getGlobalsAndPackages() ... DONE
[16:19:55.755] run() for ‘Future’ ...
[16:19:55.755] - state: ‘created’
[16:19:55.755] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:19:55.755] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:19:55.755] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:19:55.756]   - Field: ‘label’
[16:19:55.756]   - Field: ‘local’
[16:19:55.756]   - Field: ‘owner’
[16:19:55.756]   - Field: ‘envir’
[16:19:55.756]   - Field: ‘packages’
[16:19:55.756]   - Field: ‘gc’
[16:19:55.756]   - Field: ‘conditions’
[16:19:55.756]   - Field: ‘expr’
[16:19:55.756]   - Field: ‘uuid’
[16:19:55.756]   - Field: ‘seed’
[16:19:55.756]   - Field: ‘version’
[16:19:55.757]   - Field: ‘result’
[16:19:55.757]   - Field: ‘asynchronous’
[16:19:55.757]   - Field: ‘calls’
[16:19:55.757]   - Field: ‘globals’
[16:19:55.757]   - Field: ‘stdout’
[16:19:55.757]   - Field: ‘earlySignal’
[16:19:55.757]   - Field: ‘lazy’
[16:19:55.757]   - Field: ‘state’
[16:19:55.757] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:19:55.757] - Launch lazy future ...
[16:19:55.758] Packages needed by the future expression (n = 0): <none>
[16:19:55.758] Packages needed by future strategies (n = 0): <none>
[16:19:55.759] {
[16:19:55.759]     {
[16:19:55.759]         {
[16:19:55.759]             ...future.startTime <- base::Sys.time()
[16:19:55.759]             {
[16:19:55.759]                 {
[16:19:55.759]                   {
[16:19:55.759]                     base::local({
[16:19:55.759]                       has_future <- base::requireNamespace("future", 
[16:19:55.759]                         quietly = TRUE)
[16:19:55.759]                       if (has_future) {
[16:19:55.759]                         ns <- base::getNamespace("future")
[16:19:55.759]                         version <- ns[[".package"]][["version"]]
[16:19:55.759]                         if (is.null(version)) 
[16:19:55.759]                           version <- utils::packageVersion("future")
[16:19:55.759]                       }
[16:19:55.759]                       else {
[16:19:55.759]                         version <- NULL
[16:19:55.759]                       }
[16:19:55.759]                       if (!has_future || version < "1.8.0") {
[16:19:55.759]                         info <- base::c(r_version = base::gsub("R version ", 
[16:19:55.759]                           "", base::R.version$version.string), 
[16:19:55.759]                           platform = base::sprintf("%s (%s-bit)", 
[16:19:55.759]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:19:55.759]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:19:55.759]                             "release", "version")], collapse = " "), 
[16:19:55.759]                           hostname = base::Sys.info()[["nodename"]])
[16:19:55.759]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:19:55.759]                           info)
[16:19:55.759]                         info <- base::paste(info, collapse = "; ")
[16:19:55.759]                         if (!has_future) {
[16:19:55.759]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:19:55.759]                             info)
[16:19:55.759]                         }
[16:19:55.759]                         else {
[16:19:55.759]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:19:55.759]                             info, version)
[16:19:55.759]                         }
[16:19:55.759]                         base::stop(msg)
[16:19:55.759]                       }
[16:19:55.759]                     })
[16:19:55.759]                   }
[16:19:55.759]                   ...future.strategy.old <- future::plan("list")
[16:19:55.759]                   options(future.plan = NULL)
[16:19:55.759]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:19:55.759]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:19:55.759]                 }
[16:19:55.759]                 ...future.workdir <- getwd()
[16:19:55.759]             }
[16:19:55.759]             ...future.oldOptions <- base::as.list(base::.Options)
[16:19:55.759]             ...future.oldEnvVars <- base::Sys.getenv()
[16:19:55.759]         }
[16:19:55.759]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:19:55.759]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:19:55.759]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:19:55.759]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:19:55.759]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:19:55.759]             future.stdout.windows.reencode = NULL, width = 80L)
[16:19:55.759]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:19:55.759]             base::names(...future.oldOptions))
[16:19:55.759]     }
[16:19:55.759]     if (FALSE) {
[16:19:55.759]     }
[16:19:55.759]     else {
[16:19:55.759]         if (TRUE) {
[16:19:55.759]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:19:55.759]                 open = "w")
[16:19:55.759]         }
[16:19:55.759]         else {
[16:19:55.759]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:19:55.759]                 windows = "NUL", "/dev/null"), open = "w")
[16:19:55.759]         }
[16:19:55.759]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:19:55.759]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:19:55.759]             base::sink(type = "output", split = FALSE)
[16:19:55.759]             base::close(...future.stdout)
[16:19:55.759]         }, add = TRUE)
[16:19:55.759]     }
[16:19:55.759]     ...future.frame <- base::sys.nframe()
[16:19:55.759]     ...future.conditions <- base::list()
[16:19:55.759]     ...future.rng <- base::globalenv()$.Random.seed
[16:19:55.759]     if (FALSE) {
[16:19:55.759]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:19:55.759]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:19:55.759]     }
[16:19:55.759]     ...future.result <- base::tryCatch({
[16:19:55.759]         base::withCallingHandlers({
[16:19:55.759]             ...future.value <- base::withVisible(base::local({
[16:19:55.759]                 42L
[16:19:55.759]                 stop("Woops")
[16:19:55.759]             }))
[16:19:55.759]             future::FutureResult(value = ...future.value$value, 
[16:19:55.759]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:19:55.759]                   ...future.rng), globalenv = if (FALSE) 
[16:19:55.759]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:19:55.759]                     ...future.globalenv.names))
[16:19:55.759]                 else NULL, started = ...future.startTime, version = "1.8")
[16:19:55.759]         }, condition = base::local({
[16:19:55.759]             c <- base::c
[16:19:55.759]             inherits <- base::inherits
[16:19:55.759]             invokeRestart <- base::invokeRestart
[16:19:55.759]             length <- base::length
[16:19:55.759]             list <- base::list
[16:19:55.759]             seq.int <- base::seq.int
[16:19:55.759]             signalCondition <- base::signalCondition
[16:19:55.759]             sys.calls <- base::sys.calls
[16:19:55.759]             `[[` <- base::`[[`
[16:19:55.759]             `+` <- base::`+`
[16:19:55.759]             `<<-` <- base::`<<-`
[16:19:55.759]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:19:55.759]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:19:55.759]                   3L)]
[16:19:55.759]             }
[16:19:55.759]             function(cond) {
[16:19:55.759]                 is_error <- inherits(cond, "error")
[16:19:55.759]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:19:55.759]                   NULL)
[16:19:55.759]                 if (is_error) {
[16:19:55.759]                   sessionInformation <- function() {
[16:19:55.759]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:19:55.759]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:19:55.759]                       search = base::search(), system = base::Sys.info())
[16:19:55.759]                   }
[16:19:55.759]                   ...future.conditions[[length(...future.conditions) + 
[16:19:55.759]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:19:55.759]                     cond$call), session = sessionInformation(), 
[16:19:55.759]                     timestamp = base::Sys.time(), signaled = 0L)
[16:19:55.759]                   signalCondition(cond)
[16:19:55.759]                 }
[16:19:55.759]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:19:55.759]                 "immediateCondition"))) {
[16:19:55.759]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:19:55.759]                   ...future.conditions[[length(...future.conditions) + 
[16:19:55.759]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:19:55.759]                   if (TRUE && !signal) {
[16:19:55.759]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:19:55.759]                     {
[16:19:55.759]                       inherits <- base::inherits
[16:19:55.759]                       invokeRestart <- base::invokeRestart
[16:19:55.759]                       is.null <- base::is.null
[16:19:55.759]                       muffled <- FALSE
[16:19:55.759]                       if (inherits(cond, "message")) {
[16:19:55.759]                         muffled <- grepl(pattern, "muffleMessage")
[16:19:55.759]                         if (muffled) 
[16:19:55.759]                           invokeRestart("muffleMessage")
[16:19:55.759]                       }
[16:19:55.759]                       else if (inherits(cond, "warning")) {
[16:19:55.759]                         muffled <- grepl(pattern, "muffleWarning")
[16:19:55.759]                         if (muffled) 
[16:19:55.759]                           invokeRestart("muffleWarning")
[16:19:55.759]                       }
[16:19:55.759]                       else if (inherits(cond, "condition")) {
[16:19:55.759]                         if (!is.null(pattern)) {
[16:19:55.759]                           computeRestarts <- base::computeRestarts
[16:19:55.759]                           grepl <- base::grepl
[16:19:55.759]                           restarts <- computeRestarts(cond)
[16:19:55.759]                           for (restart in restarts) {
[16:19:55.759]                             name <- restart$name
[16:19:55.759]                             if (is.null(name)) 
[16:19:55.759]                               next
[16:19:55.759]                             if (!grepl(pattern, name)) 
[16:19:55.759]                               next
[16:19:55.759]                             invokeRestart(restart)
[16:19:55.759]                             muffled <- TRUE
[16:19:55.759]                             break
[16:19:55.759]                           }
[16:19:55.759]                         }
[16:19:55.759]                       }
[16:19:55.759]                       invisible(muffled)
[16:19:55.759]                     }
[16:19:55.759]                     muffleCondition(cond, pattern = "^muffle")
[16:19:55.759]                   }
[16:19:55.759]                 }
[16:19:55.759]                 else {
[16:19:55.759]                   if (TRUE) {
[16:19:55.759]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:19:55.759]                     {
[16:19:55.759]                       inherits <- base::inherits
[16:19:55.759]                       invokeRestart <- base::invokeRestart
[16:19:55.759]                       is.null <- base::is.null
[16:19:55.759]                       muffled <- FALSE
[16:19:55.759]                       if (inherits(cond, "message")) {
[16:19:55.759]                         muffled <- grepl(pattern, "muffleMessage")
[16:19:55.759]                         if (muffled) 
[16:19:55.759]                           invokeRestart("muffleMessage")
[16:19:55.759]                       }
[16:19:55.759]                       else if (inherits(cond, "warning")) {
[16:19:55.759]                         muffled <- grepl(pattern, "muffleWarning")
[16:19:55.759]                         if (muffled) 
[16:19:55.759]                           invokeRestart("muffleWarning")
[16:19:55.759]                       }
[16:19:55.759]                       else if (inherits(cond, "condition")) {
[16:19:55.759]                         if (!is.null(pattern)) {
[16:19:55.759]                           computeRestarts <- base::computeRestarts
[16:19:55.759]                           grepl <- base::grepl
[16:19:55.759]                           restarts <- computeRestarts(cond)
[16:19:55.759]                           for (restart in restarts) {
[16:19:55.759]                             name <- restart$name
[16:19:55.759]                             if (is.null(name)) 
[16:19:55.759]                               next
[16:19:55.759]                             if (!grepl(pattern, name)) 
[16:19:55.759]                               next
[16:19:55.759]                             invokeRestart(restart)
[16:19:55.759]                             muffled <- TRUE
[16:19:55.759]                             break
[16:19:55.759]                           }
[16:19:55.759]                         }
[16:19:55.759]                       }
[16:19:55.759]                       invisible(muffled)
[16:19:55.759]                     }
[16:19:55.759]                     muffleCondition(cond, pattern = "^muffle")
[16:19:55.759]                   }
[16:19:55.759]                 }
[16:19:55.759]             }
[16:19:55.759]         }))
[16:19:55.759]     }, error = function(ex) {
[16:19:55.759]         base::structure(base::list(value = NULL, visible = NULL, 
[16:19:55.759]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:19:55.759]                 ...future.rng), started = ...future.startTime, 
[16:19:55.759]             finished = Sys.time(), session_uuid = NA_character_, 
[16:19:55.759]             version = "1.8"), class = "FutureResult")
[16:19:55.759]     }, finally = {
[16:19:55.759]         if (!identical(...future.workdir, getwd())) 
[16:19:55.759]             setwd(...future.workdir)
[16:19:55.759]         {
[16:19:55.759]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:19:55.759]                 ...future.oldOptions$nwarnings <- NULL
[16:19:55.759]             }
[16:19:55.759]             base::options(...future.oldOptions)
[16:19:55.759]             if (.Platform$OS.type == "windows") {
[16:19:55.759]                 old_names <- names(...future.oldEnvVars)
[16:19:55.759]                 envs <- base::Sys.getenv()
[16:19:55.759]                 names <- names(envs)
[16:19:55.759]                 common <- intersect(names, old_names)
[16:19:55.759]                 added <- setdiff(names, old_names)
[16:19:55.759]                 removed <- setdiff(old_names, names)
[16:19:55.759]                 changed <- common[...future.oldEnvVars[common] != 
[16:19:55.759]                   envs[common]]
[16:19:55.759]                 NAMES <- toupper(changed)
[16:19:55.759]                 args <- list()
[16:19:55.759]                 for (kk in seq_along(NAMES)) {
[16:19:55.759]                   name <- changed[[kk]]
[16:19:55.759]                   NAME <- NAMES[[kk]]
[16:19:55.759]                   if (name != NAME && is.element(NAME, old_names)) 
[16:19:55.759]                     next
[16:19:55.759]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:19:55.759]                 }
[16:19:55.759]                 NAMES <- toupper(added)
[16:19:55.759]                 for (kk in seq_along(NAMES)) {
[16:19:55.759]                   name <- added[[kk]]
[16:19:55.759]                   NAME <- NAMES[[kk]]
[16:19:55.759]                   if (name != NAME && is.element(NAME, old_names)) 
[16:19:55.759]                     next
[16:19:55.759]                   args[[name]] <- ""
[16:19:55.759]                 }
[16:19:55.759]                 NAMES <- toupper(removed)
[16:19:55.759]                 for (kk in seq_along(NAMES)) {
[16:19:55.759]                   name <- removed[[kk]]
[16:19:55.759]                   NAME <- NAMES[[kk]]
[16:19:55.759]                   if (name != NAME && is.element(NAME, old_names)) 
[16:19:55.759]                     next
[16:19:55.759]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:19:55.759]                 }
[16:19:55.759]                 if (length(args) > 0) 
[16:19:55.759]                   base::do.call(base::Sys.setenv, args = args)
[16:19:55.759]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:19:55.759]             }
[16:19:55.759]             else {
[16:19:55.759]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:19:55.759]             }
[16:19:55.759]             {
[16:19:55.759]                 if (base::length(...future.futureOptionsAdded) > 
[16:19:55.759]                   0L) {
[16:19:55.759]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:19:55.759]                   base::names(opts) <- ...future.futureOptionsAdded
[16:19:55.759]                   base::options(opts)
[16:19:55.759]                 }
[16:19:55.759]                 {
[16:19:55.759]                   {
[16:19:55.759]                     NULL
[16:19:55.759]                     RNGkind("Mersenne-Twister")
[16:19:55.759]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:19:55.759]                       inherits = FALSE)
[16:19:55.759]                   }
[16:19:55.759]                   options(future.plan = NULL)
[16:19:55.759]                   if (is.na(NA_character_)) 
[16:19:55.759]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:19:55.759]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:19:55.759]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:19:55.759]                     .init = FALSE)
[16:19:55.759]                 }
[16:19:55.759]             }
[16:19:55.759]         }
[16:19:55.759]     })
[16:19:55.759]     if (TRUE) {
[16:19:55.759]         base::sink(type = "output", split = FALSE)
[16:19:55.759]         if (TRUE) {
[16:19:55.759]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:19:55.759]         }
[16:19:55.759]         else {
[16:19:55.759]             ...future.result["stdout"] <- base::list(NULL)
[16:19:55.759]         }
[16:19:55.759]         base::close(...future.stdout)
[16:19:55.759]         ...future.stdout <- NULL
[16:19:55.759]     }
[16:19:55.759]     ...future.result$conditions <- ...future.conditions
[16:19:55.759]     ...future.result$finished <- base::Sys.time()
[16:19:55.759]     ...future.result
[16:19:55.759] }
[16:19:55.761] plan(): Setting new future strategy stack:
[16:19:55.761] List of future strategies:
[16:19:55.761] 1. sequential:
[16:19:55.761]    - args: function (..., envir = parent.frame())
[16:19:55.761]    - tweaked: FALSE
[16:19:55.761]    - call: NULL
[16:19:55.761] plan(): nbrOfWorkers() = 1
[16:19:55.762] plan(): Setting new future strategy stack:
[16:19:55.763] List of future strategies:
[16:19:55.763] 1. sequential:
[16:19:55.763]    - args: function (..., envir = parent.frame())
[16:19:55.763]    - tweaked: FALSE
[16:19:55.763]    - call: future::plan("sequential")
[16:19:55.763] plan(): nbrOfWorkers() = 1
[16:19:55.763] SequentialFuture started (and completed)
[16:19:55.763] signalConditions() ...
[16:19:55.764]  - include = ‘immediateCondition’
[16:19:55.764]  - exclude = 
[16:19:55.764]  - resignal = FALSE
[16:19:55.764]  - Number of conditions: 1
[16:19:55.764] signalConditions() ... done
[16:19:55.764] - Launch lazy future ... done
[16:19:55.764] run() for ‘SequentialFuture’ ... done
> v <- value(f, signal = FALSE)
[16:19:55.765] signalConditions() ...
[16:19:55.765]  - include = ‘immediateCondition’
[16:19:55.765]  - exclude = 
[16:19:55.765]  - resignal = FALSE
[16:19:55.765]  - Number of conditions: 1
[16:19:55.765] signalConditions() ... done
> print(v)
<simpleError in eval(quote({    42L    stop("Woops")}), new.env()): Woops>
> calls <- backtrace(f)
[16:19:55.766] resolved() for ‘SequentialFuture’ ...
[16:19:55.766] - state: ‘finished’
[16:19:55.766] - run: TRUE
[16:19:55.767] - result: ‘FutureResult’
[16:19:55.767] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
future({
    42L
    stop("Woops")
})

[[2]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[3]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[4]]
stop("Woops")

[[5]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> 
> message("*** backtrace( ) - explicit future ... DONE")
*** backtrace( ) - explicit future ... DONE
> 
> 
> message("*** backtrace( ) - implicit future ...")
*** backtrace( ) - implicit future ...
> 
> v %<-% { 42L; stop("Woops") }
[16:19:55.767] getGlobalsAndPackages() ...
[16:19:55.768] Searching for globals...
[16:19:55.768] - globals found: [2] ‘{’, ‘stop’
[16:19:55.768] Searching for globals ... DONE
[16:19:55.769] Resolving globals: FALSE
[16:19:55.769] 
[16:19:55.769] 
[16:19:55.769] getGlobalsAndPackages() ... DONE
[16:19:55.769] run() for ‘Future’ ...
[16:19:55.769] - state: ‘created’
[16:19:55.769] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:19:55.770] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:19:55.770] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:19:55.770]   - Field: ‘label’
[16:19:55.770]   - Field: ‘local’
[16:19:55.770]   - Field: ‘owner’
[16:19:55.770]   - Field: ‘envir’
[16:19:55.770]   - Field: ‘packages’
[16:19:55.770]   - Field: ‘gc’
[16:19:55.770]   - Field: ‘conditions’
[16:19:55.771]   - Field: ‘expr’
[16:19:55.771]   - Field: ‘uuid’
[16:19:55.771]   - Field: ‘seed’
[16:19:55.771]   - Field: ‘version’
[16:19:55.771]   - Field: ‘result’
[16:19:55.771]   - Field: ‘asynchronous’
[16:19:55.771]   - Field: ‘calls’
[16:19:55.771]   - Field: ‘globals’
[16:19:55.771]   - Field: ‘stdout’
[16:19:55.771]   - Field: ‘earlySignal’
[16:19:55.771]   - Field: ‘lazy’
[16:19:55.772]   - Field: ‘state’
[16:19:55.772] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:19:55.772] - Launch lazy future ...
[16:19:55.772] Packages needed by the future expression (n = 0): <none>
[16:19:55.772] Packages needed by future strategies (n = 0): <none>
[16:19:55.772] {
[16:19:55.772]     {
[16:19:55.772]         {
[16:19:55.772]             ...future.startTime <- base::Sys.time()
[16:19:55.772]             {
[16:19:55.772]                 {
[16:19:55.772]                   {
[16:19:55.772]                     base::local({
[16:19:55.772]                       has_future <- base::requireNamespace("future", 
[16:19:55.772]                         quietly = TRUE)
[16:19:55.772]                       if (has_future) {
[16:19:55.772]                         ns <- base::getNamespace("future")
[16:19:55.772]                         version <- ns[[".package"]][["version"]]
[16:19:55.772]                         if (is.null(version)) 
[16:19:55.772]                           version <- utils::packageVersion("future")
[16:19:55.772]                       }
[16:19:55.772]                       else {
[16:19:55.772]                         version <- NULL
[16:19:55.772]                       }
[16:19:55.772]                       if (!has_future || version < "1.8.0") {
[16:19:55.772]                         info <- base::c(r_version = base::gsub("R version ", 
[16:19:55.772]                           "", base::R.version$version.string), 
[16:19:55.772]                           platform = base::sprintf("%s (%s-bit)", 
[16:19:55.772]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:19:55.772]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:19:55.772]                             "release", "version")], collapse = " "), 
[16:19:55.772]                           hostname = base::Sys.info()[["nodename"]])
[16:19:55.772]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:19:55.772]                           info)
[16:19:55.772]                         info <- base::paste(info, collapse = "; ")
[16:19:55.772]                         if (!has_future) {
[16:19:55.772]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:19:55.772]                             info)
[16:19:55.772]                         }
[16:19:55.772]                         else {
[16:19:55.772]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:19:55.772]                             info, version)
[16:19:55.772]                         }
[16:19:55.772]                         base::stop(msg)
[16:19:55.772]                       }
[16:19:55.772]                     })
[16:19:55.772]                   }
[16:19:55.772]                   ...future.strategy.old <- future::plan("list")
[16:19:55.772]                   options(future.plan = NULL)
[16:19:55.772]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:19:55.772]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:19:55.772]                 }
[16:19:55.772]                 ...future.workdir <- getwd()
[16:19:55.772]             }
[16:19:55.772]             ...future.oldOptions <- base::as.list(base::.Options)
[16:19:55.772]             ...future.oldEnvVars <- base::Sys.getenv()
[16:19:55.772]         }
[16:19:55.772]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:19:55.772]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:19:55.772]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:19:55.772]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:19:55.772]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:19:55.772]             future.stdout.windows.reencode = NULL, width = 80L)
[16:19:55.772]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:19:55.772]             base::names(...future.oldOptions))
[16:19:55.772]     }
[16:19:55.772]     if (FALSE) {
[16:19:55.772]     }
[16:19:55.772]     else {
[16:19:55.772]         if (TRUE) {
[16:19:55.772]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:19:55.772]                 open = "w")
[16:19:55.772]         }
[16:19:55.772]         else {
[16:19:55.772]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:19:55.772]                 windows = "NUL", "/dev/null"), open = "w")
[16:19:55.772]         }
[16:19:55.772]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:19:55.772]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:19:55.772]             base::sink(type = "output", split = FALSE)
[16:19:55.772]             base::close(...future.stdout)
[16:19:55.772]         }, add = TRUE)
[16:19:55.772]     }
[16:19:55.772]     ...future.frame <- base::sys.nframe()
[16:19:55.772]     ...future.conditions <- base::list()
[16:19:55.772]     ...future.rng <- base::globalenv()$.Random.seed
[16:19:55.772]     if (FALSE) {
[16:19:55.772]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:19:55.772]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:19:55.772]     }
[16:19:55.772]     ...future.result <- base::tryCatch({
[16:19:55.772]         base::withCallingHandlers({
[16:19:55.772]             ...future.value <- base::withVisible(base::local({
[16:19:55.772]                 42L
[16:19:55.772]                 stop("Woops")
[16:19:55.772]             }))
[16:19:55.772]             future::FutureResult(value = ...future.value$value, 
[16:19:55.772]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:19:55.772]                   ...future.rng), globalenv = if (FALSE) 
[16:19:55.772]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:19:55.772]                     ...future.globalenv.names))
[16:19:55.772]                 else NULL, started = ...future.startTime, version = "1.8")
[16:19:55.772]         }, condition = base::local({
[16:19:55.772]             c <- base::c
[16:19:55.772]             inherits <- base::inherits
[16:19:55.772]             invokeRestart <- base::invokeRestart
[16:19:55.772]             length <- base::length
[16:19:55.772]             list <- base::list
[16:19:55.772]             seq.int <- base::seq.int
[16:19:55.772]             signalCondition <- base::signalCondition
[16:19:55.772]             sys.calls <- base::sys.calls
[16:19:55.772]             `[[` <- base::`[[`
[16:19:55.772]             `+` <- base::`+`
[16:19:55.772]             `<<-` <- base::`<<-`
[16:19:55.772]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:19:55.772]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:19:55.772]                   3L)]
[16:19:55.772]             }
[16:19:55.772]             function(cond) {
[16:19:55.772]                 is_error <- inherits(cond, "error")
[16:19:55.772]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:19:55.772]                   NULL)
[16:19:55.772]                 if (is_error) {
[16:19:55.772]                   sessionInformation <- function() {
[16:19:55.772]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:19:55.772]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:19:55.772]                       search = base::search(), system = base::Sys.info())
[16:19:55.772]                   }
[16:19:55.772]                   ...future.conditions[[length(...future.conditions) + 
[16:19:55.772]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:19:55.772]                     cond$call), session = sessionInformation(), 
[16:19:55.772]                     timestamp = base::Sys.time(), signaled = 0L)
[16:19:55.772]                   signalCondition(cond)
[16:19:55.772]                 }
[16:19:55.772]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:19:55.772]                 "immediateCondition"))) {
[16:19:55.772]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:19:55.772]                   ...future.conditions[[length(...future.conditions) + 
[16:19:55.772]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:19:55.772]                   if (TRUE && !signal) {
[16:19:55.772]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:19:55.772]                     {
[16:19:55.772]                       inherits <- base::inherits
[16:19:55.772]                       invokeRestart <- base::invokeRestart
[16:19:55.772]                       is.null <- base::is.null
[16:19:55.772]                       muffled <- FALSE
[16:19:55.772]                       if (inherits(cond, "message")) {
[16:19:55.772]                         muffled <- grepl(pattern, "muffleMessage")
[16:19:55.772]                         if (muffled) 
[16:19:55.772]                           invokeRestart("muffleMessage")
[16:19:55.772]                       }
[16:19:55.772]                       else if (inherits(cond, "warning")) {
[16:19:55.772]                         muffled <- grepl(pattern, "muffleWarning")
[16:19:55.772]                         if (muffled) 
[16:19:55.772]                           invokeRestart("muffleWarning")
[16:19:55.772]                       }
[16:19:55.772]                       else if (inherits(cond, "condition")) {
[16:19:55.772]                         if (!is.null(pattern)) {
[16:19:55.772]                           computeRestarts <- base::computeRestarts
[16:19:55.772]                           grepl <- base::grepl
[16:19:55.772]                           restarts <- computeRestarts(cond)
[16:19:55.772]                           for (restart in restarts) {
[16:19:55.772]                             name <- restart$name
[16:19:55.772]                             if (is.null(name)) 
[16:19:55.772]                               next
[16:19:55.772]                             if (!grepl(pattern, name)) 
[16:19:55.772]                               next
[16:19:55.772]                             invokeRestart(restart)
[16:19:55.772]                             muffled <- TRUE
[16:19:55.772]                             break
[16:19:55.772]                           }
[16:19:55.772]                         }
[16:19:55.772]                       }
[16:19:55.772]                       invisible(muffled)
[16:19:55.772]                     }
[16:19:55.772]                     muffleCondition(cond, pattern = "^muffle")
[16:19:55.772]                   }
[16:19:55.772]                 }
[16:19:55.772]                 else {
[16:19:55.772]                   if (TRUE) {
[16:19:55.772]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:19:55.772]                     {
[16:19:55.772]                       inherits <- base::inherits
[16:19:55.772]                       invokeRestart <- base::invokeRestart
[16:19:55.772]                       is.null <- base::is.null
[16:19:55.772]                       muffled <- FALSE
[16:19:55.772]                       if (inherits(cond, "message")) {
[16:19:55.772]                         muffled <- grepl(pattern, "muffleMessage")
[16:19:55.772]                         if (muffled) 
[16:19:55.772]                           invokeRestart("muffleMessage")
[16:19:55.772]                       }
[16:19:55.772]                       else if (inherits(cond, "warning")) {
[16:19:55.772]                         muffled <- grepl(pattern, "muffleWarning")
[16:19:55.772]                         if (muffled) 
[16:19:55.772]                           invokeRestart("muffleWarning")
[16:19:55.772]                       }
[16:19:55.772]                       else if (inherits(cond, "condition")) {
[16:19:55.772]                         if (!is.null(pattern)) {
[16:19:55.772]                           computeRestarts <- base::computeRestarts
[16:19:55.772]                           grepl <- base::grepl
[16:19:55.772]                           restarts <- computeRestarts(cond)
[16:19:55.772]                           for (restart in restarts) {
[16:19:55.772]                             name <- restart$name
[16:19:55.772]                             if (is.null(name)) 
[16:19:55.772]                               next
[16:19:55.772]                             if (!grepl(pattern, name)) 
[16:19:55.772]                               next
[16:19:55.772]                             invokeRestart(restart)
[16:19:55.772]                             muffled <- TRUE
[16:19:55.772]                             break
[16:19:55.772]                           }
[16:19:55.772]                         }
[16:19:55.772]                       }
[16:19:55.772]                       invisible(muffled)
[16:19:55.772]                     }
[16:19:55.772]                     muffleCondition(cond, pattern = "^muffle")
[16:19:55.772]                   }
[16:19:55.772]                 }
[16:19:55.772]             }
[16:19:55.772]         }))
[16:19:55.772]     }, error = function(ex) {
[16:19:55.772]         base::structure(base::list(value = NULL, visible = NULL, 
[16:19:55.772]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:19:55.772]                 ...future.rng), started = ...future.startTime, 
[16:19:55.772]             finished = Sys.time(), session_uuid = NA_character_, 
[16:19:55.772]             version = "1.8"), class = "FutureResult")
[16:19:55.772]     }, finally = {
[16:19:55.772]         if (!identical(...future.workdir, getwd())) 
[16:19:55.772]             setwd(...future.workdir)
[16:19:55.772]         {
[16:19:55.772]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:19:55.772]                 ...future.oldOptions$nwarnings <- NULL
[16:19:55.772]             }
[16:19:55.772]             base::options(...future.oldOptions)
[16:19:55.772]             if (.Platform$OS.type == "windows") {
[16:19:55.772]                 old_names <- names(...future.oldEnvVars)
[16:19:55.772]                 envs <- base::Sys.getenv()
[16:19:55.772]                 names <- names(envs)
[16:19:55.772]                 common <- intersect(names, old_names)
[16:19:55.772]                 added <- setdiff(names, old_names)
[16:19:55.772]                 removed <- setdiff(old_names, names)
[16:19:55.772]                 changed <- common[...future.oldEnvVars[common] != 
[16:19:55.772]                   envs[common]]
[16:19:55.772]                 NAMES <- toupper(changed)
[16:19:55.772]                 args <- list()
[16:19:55.772]                 for (kk in seq_along(NAMES)) {
[16:19:55.772]                   name <- changed[[kk]]
[16:19:55.772]                   NAME <- NAMES[[kk]]
[16:19:55.772]                   if (name != NAME && is.element(NAME, old_names)) 
[16:19:55.772]                     next
[16:19:55.772]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:19:55.772]                 }
[16:19:55.772]                 NAMES <- toupper(added)
[16:19:55.772]                 for (kk in seq_along(NAMES)) {
[16:19:55.772]                   name <- added[[kk]]
[16:19:55.772]                   NAME <- NAMES[[kk]]
[16:19:55.772]                   if (name != NAME && is.element(NAME, old_names)) 
[16:19:55.772]                     next
[16:19:55.772]                   args[[name]] <- ""
[16:19:55.772]                 }
[16:19:55.772]                 NAMES <- toupper(removed)
[16:19:55.772]                 for (kk in seq_along(NAMES)) {
[16:19:55.772]                   name <- removed[[kk]]
[16:19:55.772]                   NAME <- NAMES[[kk]]
[16:19:55.772]                   if (name != NAME && is.element(NAME, old_names)) 
[16:19:55.772]                     next
[16:19:55.772]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:19:55.772]                 }
[16:19:55.772]                 if (length(args) > 0) 
[16:19:55.772]                   base::do.call(base::Sys.setenv, args = args)
[16:19:55.772]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:19:55.772]             }
[16:19:55.772]             else {
[16:19:55.772]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:19:55.772]             }
[16:19:55.772]             {
[16:19:55.772]                 if (base::length(...future.futureOptionsAdded) > 
[16:19:55.772]                   0L) {
[16:19:55.772]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:19:55.772]                   base::names(opts) <- ...future.futureOptionsAdded
[16:19:55.772]                   base::options(opts)
[16:19:55.772]                 }
[16:19:55.772]                 {
[16:19:55.772]                   {
[16:19:55.772]                     NULL
[16:19:55.772]                     RNGkind("Mersenne-Twister")
[16:19:55.772]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:19:55.772]                       inherits = FALSE)
[16:19:55.772]                   }
[16:19:55.772]                   options(future.plan = NULL)
[16:19:55.772]                   if (is.na(NA_character_)) 
[16:19:55.772]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:19:55.772]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:19:55.772]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:19:55.772]                     .init = FALSE)
[16:19:55.772]                 }
[16:19:55.772]             }
[16:19:55.772]         }
[16:19:55.772]     })
[16:19:55.772]     if (TRUE) {
[16:19:55.772]         base::sink(type = "output", split = FALSE)
[16:19:55.772]         if (TRUE) {
[16:19:55.772]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:19:55.772]         }
[16:19:55.772]         else {
[16:19:55.772]             ...future.result["stdout"] <- base::list(NULL)
[16:19:55.772]         }
[16:19:55.772]         base::close(...future.stdout)
[16:19:55.772]         ...future.stdout <- NULL
[16:19:55.772]     }
[16:19:55.772]     ...future.result$conditions <- ...future.conditions
[16:19:55.772]     ...future.result$finished <- base::Sys.time()
[16:19:55.772]     ...future.result
[16:19:55.772] }
[16:19:55.774] plan(): Setting new future strategy stack:
[16:19:55.774] List of future strategies:
[16:19:55.774] 1. sequential:
[16:19:55.774]    - args: function (..., envir = parent.frame())
[16:19:55.774]    - tweaked: FALSE
[16:19:55.774]    - call: NULL
[16:19:55.775] plan(): nbrOfWorkers() = 1
[16:19:55.775] plan(): Setting new future strategy stack:
[16:19:55.775] List of future strategies:
[16:19:55.775] 1. sequential:
[16:19:55.775]    - args: function (..., envir = parent.frame())
[16:19:55.775]    - tweaked: FALSE
[16:19:55.775]    - call: future::plan("sequential")
[16:19:55.776] plan(): nbrOfWorkers() = 1
[16:19:55.776] SequentialFuture started (and completed)
[16:19:55.776] signalConditions() ...
[16:19:55.776]  - include = ‘immediateCondition’
[16:19:55.776]  - exclude = 
[16:19:55.776]  - resignal = FALSE
[16:19:55.776]  - Number of conditions: 1
[16:19:55.777] signalConditions() ... done
[16:19:55.777] - Launch lazy future ... done
[16:19:55.777] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(v)
[16:19:55.777] resolved() for ‘SequentialFuture’ ...
[16:19:55.777] - state: ‘finished’
[16:19:55.777] - run: TRUE
[16:19:55.777] - result: ‘FutureResult’
[16:19:55.777] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
v %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> 
> message("*** backtrace( ) - implicit future ... DONE")
*** backtrace( ) - implicit future ... DONE
> 
> 
> message("*** backtrace( ) - subsetting ...")
*** backtrace( ) - subsetting ...
> 
> env <- new.env()
> env[["a"]] %<-% { 42L; stop("Woops") }
[16:19:55.778] getGlobalsAndPackages() ...
[16:19:55.778] Searching for globals...
[16:19:55.779] - globals found: [2] ‘{’, ‘stop’
[16:19:55.779] Searching for globals ... DONE
[16:19:55.780] Resolving globals: FALSE
[16:19:55.780] 
[16:19:55.780] 
[16:19:55.780] getGlobalsAndPackages() ... DONE
[16:19:55.780] run() for ‘Future’ ...
[16:19:55.780] - state: ‘created’
[16:19:55.783] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:19:55.783] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:19:55.783] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:19:55.783]   - Field: ‘label’
[16:19:55.783]   - Field: ‘local’
[16:19:55.783]   - Field: ‘owner’
[16:19:55.783]   - Field: ‘envir’
[16:19:55.784]   - Field: ‘packages’
[16:19:55.784]   - Field: ‘gc’
[16:19:55.784]   - Field: ‘conditions’
[16:19:55.784]   - Field: ‘expr’
[16:19:55.784]   - Field: ‘uuid’
[16:19:55.784]   - Field: ‘seed’
[16:19:55.784]   - Field: ‘version’
[16:19:55.784]   - Field: ‘result’
[16:19:55.784]   - Field: ‘asynchronous’
[16:19:55.784]   - Field: ‘calls’
[16:19:55.785]   - Field: ‘globals’
[16:19:55.785]   - Field: ‘stdout’
[16:19:55.785]   - Field: ‘earlySignal’
[16:19:55.785]   - Field: ‘lazy’
[16:19:55.785]   - Field: ‘state’
[16:19:55.785] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:19:55.785] - Launch lazy future ...
[16:19:55.785] Packages needed by the future expression (n = 0): <none>
[16:19:55.785] Packages needed by future strategies (n = 0): <none>
[16:19:55.786] {
[16:19:55.786]     {
[16:19:55.786]         {
[16:19:55.786]             ...future.startTime <- base::Sys.time()
[16:19:55.786]             {
[16:19:55.786]                 {
[16:19:55.786]                   {
[16:19:55.786]                     base::local({
[16:19:55.786]                       has_future <- base::requireNamespace("future", 
[16:19:55.786]                         quietly = TRUE)
[16:19:55.786]                       if (has_future) {
[16:19:55.786]                         ns <- base::getNamespace("future")
[16:19:55.786]                         version <- ns[[".package"]][["version"]]
[16:19:55.786]                         if (is.null(version)) 
[16:19:55.786]                           version <- utils::packageVersion("future")
[16:19:55.786]                       }
[16:19:55.786]                       else {
[16:19:55.786]                         version <- NULL
[16:19:55.786]                       }
[16:19:55.786]                       if (!has_future || version < "1.8.0") {
[16:19:55.786]                         info <- base::c(r_version = base::gsub("R version ", 
[16:19:55.786]                           "", base::R.version$version.string), 
[16:19:55.786]                           platform = base::sprintf("%s (%s-bit)", 
[16:19:55.786]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:19:55.786]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:19:55.786]                             "release", "version")], collapse = " "), 
[16:19:55.786]                           hostname = base::Sys.info()[["nodename"]])
[16:19:55.786]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:19:55.786]                           info)
[16:19:55.786]                         info <- base::paste(info, collapse = "; ")
[16:19:55.786]                         if (!has_future) {
[16:19:55.786]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:19:55.786]                             info)
[16:19:55.786]                         }
[16:19:55.786]                         else {
[16:19:55.786]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:19:55.786]                             info, version)
[16:19:55.786]                         }
[16:19:55.786]                         base::stop(msg)
[16:19:55.786]                       }
[16:19:55.786]                     })
[16:19:55.786]                   }
[16:19:55.786]                   ...future.strategy.old <- future::plan("list")
[16:19:55.786]                   options(future.plan = NULL)
[16:19:55.786]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:19:55.786]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:19:55.786]                 }
[16:19:55.786]                 ...future.workdir <- getwd()
[16:19:55.786]             }
[16:19:55.786]             ...future.oldOptions <- base::as.list(base::.Options)
[16:19:55.786]             ...future.oldEnvVars <- base::Sys.getenv()
[16:19:55.786]         }
[16:19:55.786]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:19:55.786]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:19:55.786]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:19:55.786]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:19:55.786]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:19:55.786]             future.stdout.windows.reencode = NULL, width = 80L)
[16:19:55.786]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:19:55.786]             base::names(...future.oldOptions))
[16:19:55.786]     }
[16:19:55.786]     if (FALSE) {
[16:19:55.786]     }
[16:19:55.786]     else {
[16:19:55.786]         if (TRUE) {
[16:19:55.786]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:19:55.786]                 open = "w")
[16:19:55.786]         }
[16:19:55.786]         else {
[16:19:55.786]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:19:55.786]                 windows = "NUL", "/dev/null"), open = "w")
[16:19:55.786]         }
[16:19:55.786]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:19:55.786]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:19:55.786]             base::sink(type = "output", split = FALSE)
[16:19:55.786]             base::close(...future.stdout)
[16:19:55.786]         }, add = TRUE)
[16:19:55.786]     }
[16:19:55.786]     ...future.frame <- base::sys.nframe()
[16:19:55.786]     ...future.conditions <- base::list()
[16:19:55.786]     ...future.rng <- base::globalenv()$.Random.seed
[16:19:55.786]     if (FALSE) {
[16:19:55.786]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:19:55.786]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:19:55.786]     }
[16:19:55.786]     ...future.result <- base::tryCatch({
[16:19:55.786]         base::withCallingHandlers({
[16:19:55.786]             ...future.value <- base::withVisible(base::local({
[16:19:55.786]                 42L
[16:19:55.786]                 stop("Woops")
[16:19:55.786]             }))
[16:19:55.786]             future::FutureResult(value = ...future.value$value, 
[16:19:55.786]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:19:55.786]                   ...future.rng), globalenv = if (FALSE) 
[16:19:55.786]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:19:55.786]                     ...future.globalenv.names))
[16:19:55.786]                 else NULL, started = ...future.startTime, version = "1.8")
[16:19:55.786]         }, condition = base::local({
[16:19:55.786]             c <- base::c
[16:19:55.786]             inherits <- base::inherits
[16:19:55.786]             invokeRestart <- base::invokeRestart
[16:19:55.786]             length <- base::length
[16:19:55.786]             list <- base::list
[16:19:55.786]             seq.int <- base::seq.int
[16:19:55.786]             signalCondition <- base::signalCondition
[16:19:55.786]             sys.calls <- base::sys.calls
[16:19:55.786]             `[[` <- base::`[[`
[16:19:55.786]             `+` <- base::`+`
[16:19:55.786]             `<<-` <- base::`<<-`
[16:19:55.786]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:19:55.786]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:19:55.786]                   3L)]
[16:19:55.786]             }
[16:19:55.786]             function(cond) {
[16:19:55.786]                 is_error <- inherits(cond, "error")
[16:19:55.786]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:19:55.786]                   NULL)
[16:19:55.786]                 if (is_error) {
[16:19:55.786]                   sessionInformation <- function() {
[16:19:55.786]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:19:55.786]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:19:55.786]                       search = base::search(), system = base::Sys.info())
[16:19:55.786]                   }
[16:19:55.786]                   ...future.conditions[[length(...future.conditions) + 
[16:19:55.786]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:19:55.786]                     cond$call), session = sessionInformation(), 
[16:19:55.786]                     timestamp = base::Sys.time(), signaled = 0L)
[16:19:55.786]                   signalCondition(cond)
[16:19:55.786]                 }
[16:19:55.786]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:19:55.786]                 "immediateCondition"))) {
[16:19:55.786]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:19:55.786]                   ...future.conditions[[length(...future.conditions) + 
[16:19:55.786]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:19:55.786]                   if (TRUE && !signal) {
[16:19:55.786]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:19:55.786]                     {
[16:19:55.786]                       inherits <- base::inherits
[16:19:55.786]                       invokeRestart <- base::invokeRestart
[16:19:55.786]                       is.null <- base::is.null
[16:19:55.786]                       muffled <- FALSE
[16:19:55.786]                       if (inherits(cond, "message")) {
[16:19:55.786]                         muffled <- grepl(pattern, "muffleMessage")
[16:19:55.786]                         if (muffled) 
[16:19:55.786]                           invokeRestart("muffleMessage")
[16:19:55.786]                       }
[16:19:55.786]                       else if (inherits(cond, "warning")) {
[16:19:55.786]                         muffled <- grepl(pattern, "muffleWarning")
[16:19:55.786]                         if (muffled) 
[16:19:55.786]                           invokeRestart("muffleWarning")
[16:19:55.786]                       }
[16:19:55.786]                       else if (inherits(cond, "condition")) {
[16:19:55.786]                         if (!is.null(pattern)) {
[16:19:55.786]                           computeRestarts <- base::computeRestarts
[16:19:55.786]                           grepl <- base::grepl
[16:19:55.786]                           restarts <- computeRestarts(cond)
[16:19:55.786]                           for (restart in restarts) {
[16:19:55.786]                             name <- restart$name
[16:19:55.786]                             if (is.null(name)) 
[16:19:55.786]                               next
[16:19:55.786]                             if (!grepl(pattern, name)) 
[16:19:55.786]                               next
[16:19:55.786]                             invokeRestart(restart)
[16:19:55.786]                             muffled <- TRUE
[16:19:55.786]                             break
[16:19:55.786]                           }
[16:19:55.786]                         }
[16:19:55.786]                       }
[16:19:55.786]                       invisible(muffled)
[16:19:55.786]                     }
[16:19:55.786]                     muffleCondition(cond, pattern = "^muffle")
[16:19:55.786]                   }
[16:19:55.786]                 }
[16:19:55.786]                 else {
[16:19:55.786]                   if (TRUE) {
[16:19:55.786]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:19:55.786]                     {
[16:19:55.786]                       inherits <- base::inherits
[16:19:55.786]                       invokeRestart <- base::invokeRestart
[16:19:55.786]                       is.null <- base::is.null
[16:19:55.786]                       muffled <- FALSE
[16:19:55.786]                       if (inherits(cond, "message")) {
[16:19:55.786]                         muffled <- grepl(pattern, "muffleMessage")
[16:19:55.786]                         if (muffled) 
[16:19:55.786]                           invokeRestart("muffleMessage")
[16:19:55.786]                       }
[16:19:55.786]                       else if (inherits(cond, "warning")) {
[16:19:55.786]                         muffled <- grepl(pattern, "muffleWarning")
[16:19:55.786]                         if (muffled) 
[16:19:55.786]                           invokeRestart("muffleWarning")
[16:19:55.786]                       }
[16:19:55.786]                       else if (inherits(cond, "condition")) {
[16:19:55.786]                         if (!is.null(pattern)) {
[16:19:55.786]                           computeRestarts <- base::computeRestarts
[16:19:55.786]                           grepl <- base::grepl
[16:19:55.786]                           restarts <- computeRestarts(cond)
[16:19:55.786]                           for (restart in restarts) {
[16:19:55.786]                             name <- restart$name
[16:19:55.786]                             if (is.null(name)) 
[16:19:55.786]                               next
[16:19:55.786]                             if (!grepl(pattern, name)) 
[16:19:55.786]                               next
[16:19:55.786]                             invokeRestart(restart)
[16:19:55.786]                             muffled <- TRUE
[16:19:55.786]                             break
[16:19:55.786]                           }
[16:19:55.786]                         }
[16:19:55.786]                       }
[16:19:55.786]                       invisible(muffled)
[16:19:55.786]                     }
[16:19:55.786]                     muffleCondition(cond, pattern = "^muffle")
[16:19:55.786]                   }
[16:19:55.786]                 }
[16:19:55.786]             }
[16:19:55.786]         }))
[16:19:55.786]     }, error = function(ex) {
[16:19:55.786]         base::structure(base::list(value = NULL, visible = NULL, 
[16:19:55.786]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:19:55.786]                 ...future.rng), started = ...future.startTime, 
[16:19:55.786]             finished = Sys.time(), session_uuid = NA_character_, 
[16:19:55.786]             version = "1.8"), class = "FutureResult")
[16:19:55.786]     }, finally = {
[16:19:55.786]         if (!identical(...future.workdir, getwd())) 
[16:19:55.786]             setwd(...future.workdir)
[16:19:55.786]         {
[16:19:55.786]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:19:55.786]                 ...future.oldOptions$nwarnings <- NULL
[16:19:55.786]             }
[16:19:55.786]             base::options(...future.oldOptions)
[16:19:55.786]             if (.Platform$OS.type == "windows") {
[16:19:55.786]                 old_names <- names(...future.oldEnvVars)
[16:19:55.786]                 envs <- base::Sys.getenv()
[16:19:55.786]                 names <- names(envs)
[16:19:55.786]                 common <- intersect(names, old_names)
[16:19:55.786]                 added <- setdiff(names, old_names)
[16:19:55.786]                 removed <- setdiff(old_names, names)
[16:19:55.786]                 changed <- common[...future.oldEnvVars[common] != 
[16:19:55.786]                   envs[common]]
[16:19:55.786]                 NAMES <- toupper(changed)
[16:19:55.786]                 args <- list()
[16:19:55.786]                 for (kk in seq_along(NAMES)) {
[16:19:55.786]                   name <- changed[[kk]]
[16:19:55.786]                   NAME <- NAMES[[kk]]
[16:19:55.786]                   if (name != NAME && is.element(NAME, old_names)) 
[16:19:55.786]                     next
[16:19:55.786]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:19:55.786]                 }
[16:19:55.786]                 NAMES <- toupper(added)
[16:19:55.786]                 for (kk in seq_along(NAMES)) {
[16:19:55.786]                   name <- added[[kk]]
[16:19:55.786]                   NAME <- NAMES[[kk]]
[16:19:55.786]                   if (name != NAME && is.element(NAME, old_names)) 
[16:19:55.786]                     next
[16:19:55.786]                   args[[name]] <- ""
[16:19:55.786]                 }
[16:19:55.786]                 NAMES <- toupper(removed)
[16:19:55.786]                 for (kk in seq_along(NAMES)) {
[16:19:55.786]                   name <- removed[[kk]]
[16:19:55.786]                   NAME <- NAMES[[kk]]
[16:19:55.786]                   if (name != NAME && is.element(NAME, old_names)) 
[16:19:55.786]                     next
[16:19:55.786]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:19:55.786]                 }
[16:19:55.786]                 if (length(args) > 0) 
[16:19:55.786]                   base::do.call(base::Sys.setenv, args = args)
[16:19:55.786]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:19:55.786]             }
[16:19:55.786]             else {
[16:19:55.786]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:19:55.786]             }
[16:19:55.786]             {
[16:19:55.786]                 if (base::length(...future.futureOptionsAdded) > 
[16:19:55.786]                   0L) {
[16:19:55.786]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:19:55.786]                   base::names(opts) <- ...future.futureOptionsAdded
[16:19:55.786]                   base::options(opts)
[16:19:55.786]                 }
[16:19:55.786]                 {
[16:19:55.786]                   {
[16:19:55.786]                     NULL
[16:19:55.786]                     RNGkind("Mersenne-Twister")
[16:19:55.786]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:19:55.786]                       inherits = FALSE)
[16:19:55.786]                   }
[16:19:55.786]                   options(future.plan = NULL)
[16:19:55.786]                   if (is.na(NA_character_)) 
[16:19:55.786]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:19:55.786]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:19:55.786]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:19:55.786]                     .init = FALSE)
[16:19:55.786]                 }
[16:19:55.786]             }
[16:19:55.786]         }
[16:19:55.786]     })
[16:19:55.786]     if (TRUE) {
[16:19:55.786]         base::sink(type = "output", split = FALSE)
[16:19:55.786]         if (TRUE) {
[16:19:55.786]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:19:55.786]         }
[16:19:55.786]         else {
[16:19:55.786]             ...future.result["stdout"] <- base::list(NULL)
[16:19:55.786]         }
[16:19:55.786]         base::close(...future.stdout)
[16:19:55.786]         ...future.stdout <- NULL
[16:19:55.786]     }
[16:19:55.786]     ...future.result$conditions <- ...future.conditions
[16:19:55.786]     ...future.result$finished <- base::Sys.time()
[16:19:55.786]     ...future.result
[16:19:55.786] }
[16:19:55.787] plan(): Setting new future strategy stack:
[16:19:55.788] List of future strategies:
[16:19:55.788] 1. sequential:
[16:19:55.788]    - args: function (..., envir = parent.frame())
[16:19:55.788]    - tweaked: FALSE
[16:19:55.788]    - call: NULL
[16:19:55.788] plan(): nbrOfWorkers() = 1
[16:19:55.789] plan(): Setting new future strategy stack:
[16:19:55.789] List of future strategies:
[16:19:55.789] 1. sequential:
[16:19:55.789]    - args: function (..., envir = parent.frame())
[16:19:55.789]    - tweaked: FALSE
[16:19:55.789]    - call: future::plan("sequential")
[16:19:55.789] plan(): nbrOfWorkers() = 1
[16:19:55.789] SequentialFuture started (and completed)
[16:19:55.789] signalConditions() ...
[16:19:55.789]  - include = ‘immediateCondition’
[16:19:55.790]  - exclude = 
[16:19:55.790]  - resignal = FALSE
[16:19:55.790]  - Number of conditions: 1
[16:19:55.790] signalConditions() ... done
[16:19:55.790] - Launch lazy future ... done
[16:19:55.790] run() for ‘SequentialFuture’ ... done
> env[["b"]] %<-% { 42L; stop("Woops") }
[16:19:55.790] getGlobalsAndPackages() ...
[16:19:55.790] Searching for globals...
[16:19:55.791] - globals found: [2] ‘{’, ‘stop’
[16:19:55.791] Searching for globals ... DONE
[16:19:55.791] Resolving globals: FALSE
[16:19:55.792] 
[16:19:55.792] 
[16:19:55.792] getGlobalsAndPackages() ... DONE
[16:19:55.792] run() for ‘Future’ ...
[16:19:55.792] - state: ‘created’
[16:19:55.792] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:19:55.793] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:19:55.793] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:19:55.793]   - Field: ‘label’
[16:19:55.793]   - Field: ‘local’
[16:19:55.793]   - Field: ‘owner’
[16:19:55.793]   - Field: ‘envir’
[16:19:55.793]   - Field: ‘packages’
[16:19:55.793]   - Field: ‘gc’
[16:19:55.793]   - Field: ‘conditions’
[16:19:55.793]   - Field: ‘expr’
[16:19:55.793]   - Field: ‘uuid’
[16:19:55.794]   - Field: ‘seed’
[16:19:55.794]   - Field: ‘version’
[16:19:55.794]   - Field: ‘result’
[16:19:55.794]   - Field: ‘asynchronous’
[16:19:55.794]   - Field: ‘calls’
[16:19:55.794]   - Field: ‘globals’
[16:19:55.794]   - Field: ‘stdout’
[16:19:55.794]   - Field: ‘earlySignal’
[16:19:55.794]   - Field: ‘lazy’
[16:19:55.794]   - Field: ‘state’
[16:19:55.794] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:19:55.795] - Launch lazy future ...
[16:19:55.795] Packages needed by the future expression (n = 0): <none>
[16:19:55.795] Packages needed by future strategies (n = 0): <none>
[16:19:55.795] {
[16:19:55.795]     {
[16:19:55.795]         {
[16:19:55.795]             ...future.startTime <- base::Sys.time()
[16:19:55.795]             {
[16:19:55.795]                 {
[16:19:55.795]                   {
[16:19:55.795]                     base::local({
[16:19:55.795]                       has_future <- base::requireNamespace("future", 
[16:19:55.795]                         quietly = TRUE)
[16:19:55.795]                       if (has_future) {
[16:19:55.795]                         ns <- base::getNamespace("future")
[16:19:55.795]                         version <- ns[[".package"]][["version"]]
[16:19:55.795]                         if (is.null(version)) 
[16:19:55.795]                           version <- utils::packageVersion("future")
[16:19:55.795]                       }
[16:19:55.795]                       else {
[16:19:55.795]                         version <- NULL
[16:19:55.795]                       }
[16:19:55.795]                       if (!has_future || version < "1.8.0") {
[16:19:55.795]                         info <- base::c(r_version = base::gsub("R version ", 
[16:19:55.795]                           "", base::R.version$version.string), 
[16:19:55.795]                           platform = base::sprintf("%s (%s-bit)", 
[16:19:55.795]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:19:55.795]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:19:55.795]                             "release", "version")], collapse = " "), 
[16:19:55.795]                           hostname = base::Sys.info()[["nodename"]])
[16:19:55.795]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:19:55.795]                           info)
[16:19:55.795]                         info <- base::paste(info, collapse = "; ")
[16:19:55.795]                         if (!has_future) {
[16:19:55.795]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:19:55.795]                             info)
[16:19:55.795]                         }
[16:19:55.795]                         else {
[16:19:55.795]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:19:55.795]                             info, version)
[16:19:55.795]                         }
[16:19:55.795]                         base::stop(msg)
[16:19:55.795]                       }
[16:19:55.795]                     })
[16:19:55.795]                   }
[16:19:55.795]                   ...future.strategy.old <- future::plan("list")
[16:19:55.795]                   options(future.plan = NULL)
[16:19:55.795]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:19:55.795]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:19:55.795]                 }
[16:19:55.795]                 ...future.workdir <- getwd()
[16:19:55.795]             }
[16:19:55.795]             ...future.oldOptions <- base::as.list(base::.Options)
[16:19:55.795]             ...future.oldEnvVars <- base::Sys.getenv()
[16:19:55.795]         }
[16:19:55.795]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:19:55.795]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:19:55.795]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:19:55.795]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:19:55.795]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:19:55.795]             future.stdout.windows.reencode = NULL, width = 80L)
[16:19:55.795]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:19:55.795]             base::names(...future.oldOptions))
[16:19:55.795]     }
[16:19:55.795]     if (FALSE) {
[16:19:55.795]     }
[16:19:55.795]     else {
[16:19:55.795]         if (TRUE) {
[16:19:55.795]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:19:55.795]                 open = "w")
[16:19:55.795]         }
[16:19:55.795]         else {
[16:19:55.795]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:19:55.795]                 windows = "NUL", "/dev/null"), open = "w")
[16:19:55.795]         }
[16:19:55.795]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:19:55.795]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:19:55.795]             base::sink(type = "output", split = FALSE)
[16:19:55.795]             base::close(...future.stdout)
[16:19:55.795]         }, add = TRUE)
[16:19:55.795]     }
[16:19:55.795]     ...future.frame <- base::sys.nframe()
[16:19:55.795]     ...future.conditions <- base::list()
[16:19:55.795]     ...future.rng <- base::globalenv()$.Random.seed
[16:19:55.795]     if (FALSE) {
[16:19:55.795]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:19:55.795]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:19:55.795]     }
[16:19:55.795]     ...future.result <- base::tryCatch({
[16:19:55.795]         base::withCallingHandlers({
[16:19:55.795]             ...future.value <- base::withVisible(base::local({
[16:19:55.795]                 42L
[16:19:55.795]                 stop("Woops")
[16:19:55.795]             }))
[16:19:55.795]             future::FutureResult(value = ...future.value$value, 
[16:19:55.795]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:19:55.795]                   ...future.rng), globalenv = if (FALSE) 
[16:19:55.795]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:19:55.795]                     ...future.globalenv.names))
[16:19:55.795]                 else NULL, started = ...future.startTime, version = "1.8")
[16:19:55.795]         }, condition = base::local({
[16:19:55.795]             c <- base::c
[16:19:55.795]             inherits <- base::inherits
[16:19:55.795]             invokeRestart <- base::invokeRestart
[16:19:55.795]             length <- base::length
[16:19:55.795]             list <- base::list
[16:19:55.795]             seq.int <- base::seq.int
[16:19:55.795]             signalCondition <- base::signalCondition
[16:19:55.795]             sys.calls <- base::sys.calls
[16:19:55.795]             `[[` <- base::`[[`
[16:19:55.795]             `+` <- base::`+`
[16:19:55.795]             `<<-` <- base::`<<-`
[16:19:55.795]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:19:55.795]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:19:55.795]                   3L)]
[16:19:55.795]             }
[16:19:55.795]             function(cond) {
[16:19:55.795]                 is_error <- inherits(cond, "error")
[16:19:55.795]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:19:55.795]                   NULL)
[16:19:55.795]                 if (is_error) {
[16:19:55.795]                   sessionInformation <- function() {
[16:19:55.795]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:19:55.795]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:19:55.795]                       search = base::search(), system = base::Sys.info())
[16:19:55.795]                   }
[16:19:55.795]                   ...future.conditions[[length(...future.conditions) + 
[16:19:55.795]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:19:55.795]                     cond$call), session = sessionInformation(), 
[16:19:55.795]                     timestamp = base::Sys.time(), signaled = 0L)
[16:19:55.795]                   signalCondition(cond)
[16:19:55.795]                 }
[16:19:55.795]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:19:55.795]                 "immediateCondition"))) {
[16:19:55.795]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:19:55.795]                   ...future.conditions[[length(...future.conditions) + 
[16:19:55.795]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:19:55.795]                   if (TRUE && !signal) {
[16:19:55.795]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:19:55.795]                     {
[16:19:55.795]                       inherits <- base::inherits
[16:19:55.795]                       invokeRestart <- base::invokeRestart
[16:19:55.795]                       is.null <- base::is.null
[16:19:55.795]                       muffled <- FALSE
[16:19:55.795]                       if (inherits(cond, "message")) {
[16:19:55.795]                         muffled <- grepl(pattern, "muffleMessage")
[16:19:55.795]                         if (muffled) 
[16:19:55.795]                           invokeRestart("muffleMessage")
[16:19:55.795]                       }
[16:19:55.795]                       else if (inherits(cond, "warning")) {
[16:19:55.795]                         muffled <- grepl(pattern, "muffleWarning")
[16:19:55.795]                         if (muffled) 
[16:19:55.795]                           invokeRestart("muffleWarning")
[16:19:55.795]                       }
[16:19:55.795]                       else if (inherits(cond, "condition")) {
[16:19:55.795]                         if (!is.null(pattern)) {
[16:19:55.795]                           computeRestarts <- base::computeRestarts
[16:19:55.795]                           grepl <- base::grepl
[16:19:55.795]                           restarts <- computeRestarts(cond)
[16:19:55.795]                           for (restart in restarts) {
[16:19:55.795]                             name <- restart$name
[16:19:55.795]                             if (is.null(name)) 
[16:19:55.795]                               next
[16:19:55.795]                             if (!grepl(pattern, name)) 
[16:19:55.795]                               next
[16:19:55.795]                             invokeRestart(restart)
[16:19:55.795]                             muffled <- TRUE
[16:19:55.795]                             break
[16:19:55.795]                           }
[16:19:55.795]                         }
[16:19:55.795]                       }
[16:19:55.795]                       invisible(muffled)
[16:19:55.795]                     }
[16:19:55.795]                     muffleCondition(cond, pattern = "^muffle")
[16:19:55.795]                   }
[16:19:55.795]                 }
[16:19:55.795]                 else {
[16:19:55.795]                   if (TRUE) {
[16:19:55.795]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:19:55.795]                     {
[16:19:55.795]                       inherits <- base::inherits
[16:19:55.795]                       invokeRestart <- base::invokeRestart
[16:19:55.795]                       is.null <- base::is.null
[16:19:55.795]                       muffled <- FALSE
[16:19:55.795]                       if (inherits(cond, "message")) {
[16:19:55.795]                         muffled <- grepl(pattern, "muffleMessage")
[16:19:55.795]                         if (muffled) 
[16:19:55.795]                           invokeRestart("muffleMessage")
[16:19:55.795]                       }
[16:19:55.795]                       else if (inherits(cond, "warning")) {
[16:19:55.795]                         muffled <- grepl(pattern, "muffleWarning")
[16:19:55.795]                         if (muffled) 
[16:19:55.795]                           invokeRestart("muffleWarning")
[16:19:55.795]                       }
[16:19:55.795]                       else if (inherits(cond, "condition")) {
[16:19:55.795]                         if (!is.null(pattern)) {
[16:19:55.795]                           computeRestarts <- base::computeRestarts
[16:19:55.795]                           grepl <- base::grepl
[16:19:55.795]                           restarts <- computeRestarts(cond)
[16:19:55.795]                           for (restart in restarts) {
[16:19:55.795]                             name <- restart$name
[16:19:55.795]                             if (is.null(name)) 
[16:19:55.795]                               next
[16:19:55.795]                             if (!grepl(pattern, name)) 
[16:19:55.795]                               next
[16:19:55.795]                             invokeRestart(restart)
[16:19:55.795]                             muffled <- TRUE
[16:19:55.795]                             break
[16:19:55.795]                           }
[16:19:55.795]                         }
[16:19:55.795]                       }
[16:19:55.795]                       invisible(muffled)
[16:19:55.795]                     }
[16:19:55.795]                     muffleCondition(cond, pattern = "^muffle")
[16:19:55.795]                   }
[16:19:55.795]                 }
[16:19:55.795]             }
[16:19:55.795]         }))
[16:19:55.795]     }, error = function(ex) {
[16:19:55.795]         base::structure(base::list(value = NULL, visible = NULL, 
[16:19:55.795]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:19:55.795]                 ...future.rng), started = ...future.startTime, 
[16:19:55.795]             finished = Sys.time(), session_uuid = NA_character_, 
[16:19:55.795]             version = "1.8"), class = "FutureResult")
[16:19:55.795]     }, finally = {
[16:19:55.795]         if (!identical(...future.workdir, getwd())) 
[16:19:55.795]             setwd(...future.workdir)
[16:19:55.795]         {
[16:19:55.795]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:19:55.795]                 ...future.oldOptions$nwarnings <- NULL
[16:19:55.795]             }
[16:19:55.795]             base::options(...future.oldOptions)
[16:19:55.795]             if (.Platform$OS.type == "windows") {
[16:19:55.795]                 old_names <- names(...future.oldEnvVars)
[16:19:55.795]                 envs <- base::Sys.getenv()
[16:19:55.795]                 names <- names(envs)
[16:19:55.795]                 common <- intersect(names, old_names)
[16:19:55.795]                 added <- setdiff(names, old_names)
[16:19:55.795]                 removed <- setdiff(old_names, names)
[16:19:55.795]                 changed <- common[...future.oldEnvVars[common] != 
[16:19:55.795]                   envs[common]]
[16:19:55.795]                 NAMES <- toupper(changed)
[16:19:55.795]                 args <- list()
[16:19:55.795]                 for (kk in seq_along(NAMES)) {
[16:19:55.795]                   name <- changed[[kk]]
[16:19:55.795]                   NAME <- NAMES[[kk]]
[16:19:55.795]                   if (name != NAME && is.element(NAME, old_names)) 
[16:19:55.795]                     next
[16:19:55.795]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:19:55.795]                 }
[16:19:55.795]                 NAMES <- toupper(added)
[16:19:55.795]                 for (kk in seq_along(NAMES)) {
[16:19:55.795]                   name <- added[[kk]]
[16:19:55.795]                   NAME <- NAMES[[kk]]
[16:19:55.795]                   if (name != NAME && is.element(NAME, old_names)) 
[16:19:55.795]                     next
[16:19:55.795]                   args[[name]] <- ""
[16:19:55.795]                 }
[16:19:55.795]                 NAMES <- toupper(removed)
[16:19:55.795]                 for (kk in seq_along(NAMES)) {
[16:19:55.795]                   name <- removed[[kk]]
[16:19:55.795]                   NAME <- NAMES[[kk]]
[16:19:55.795]                   if (name != NAME && is.element(NAME, old_names)) 
[16:19:55.795]                     next
[16:19:55.795]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:19:55.795]                 }
[16:19:55.795]                 if (length(args) > 0) 
[16:19:55.795]                   base::do.call(base::Sys.setenv, args = args)
[16:19:55.795]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:19:55.795]             }
[16:19:55.795]             else {
[16:19:55.795]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:19:55.795]             }
[16:19:55.795]             {
[16:19:55.795]                 if (base::length(...future.futureOptionsAdded) > 
[16:19:55.795]                   0L) {
[16:19:55.795]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:19:55.795]                   base::names(opts) <- ...future.futureOptionsAdded
[16:19:55.795]                   base::options(opts)
[16:19:55.795]                 }
[16:19:55.795]                 {
[16:19:55.795]                   {
[16:19:55.795]                     NULL
[16:19:55.795]                     RNGkind("Mersenne-Twister")
[16:19:55.795]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:19:55.795]                       inherits = FALSE)
[16:19:55.795]                   }
[16:19:55.795]                   options(future.plan = NULL)
[16:19:55.795]                   if (is.na(NA_character_)) 
[16:19:55.795]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:19:55.795]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:19:55.795]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:19:55.795]                     .init = FALSE)
[16:19:55.795]                 }
[16:19:55.795]             }
[16:19:55.795]         }
[16:19:55.795]     })
[16:19:55.795]     if (TRUE) {
[16:19:55.795]         base::sink(type = "output", split = FALSE)
[16:19:55.795]         if (TRUE) {
[16:19:55.795]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:19:55.795]         }
[16:19:55.795]         else {
[16:19:55.795]             ...future.result["stdout"] <- base::list(NULL)
[16:19:55.795]         }
[16:19:55.795]         base::close(...future.stdout)
[16:19:55.795]         ...future.stdout <- NULL
[16:19:55.795]     }
[16:19:55.795]     ...future.result$conditions <- ...future.conditions
[16:19:55.795]     ...future.result$finished <- base::Sys.time()
[16:19:55.795]     ...future.result
[16:19:55.795] }
[16:19:55.797] plan(): Setting new future strategy stack:
[16:19:55.797] List of future strategies:
[16:19:55.797] 1. sequential:
[16:19:55.797]    - args: function (..., envir = parent.frame())
[16:19:55.797]    - tweaked: FALSE
[16:19:55.797]    - call: NULL
[16:19:55.797] plan(): nbrOfWorkers() = 1
[16:19:55.798] plan(): Setting new future strategy stack:
[16:19:55.798] List of future strategies:
[16:19:55.798] 1. sequential:
[16:19:55.798]    - args: function (..., envir = parent.frame())
[16:19:55.798]    - tweaked: FALSE
[16:19:55.798]    - call: future::plan("sequential")
[16:19:55.799] plan(): nbrOfWorkers() = 1
[16:19:55.799] SequentialFuture started (and completed)
[16:19:55.799] signalConditions() ...
[16:19:55.799]  - include = ‘immediateCondition’
[16:19:55.799]  - exclude = 
[16:19:55.799]  - resignal = FALSE
[16:19:55.799]  - Number of conditions: 1
[16:19:55.799] signalConditions() ... done
[16:19:55.799] - Launch lazy future ... done
[16:19:55.799] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(env[["b"]])
[16:19:55.800] resolved() for ‘SequentialFuture’ ...
[16:19:55.800] - state: ‘finished’
[16:19:55.800] - run: TRUE
[16:19:55.800] - result: ‘FutureResult’
[16:19:55.800] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
env[["b"]] %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> lenv <- listenv::listenv()
> lenv[[1]] %<-% { 42L; stop("Woops") }
[16:19:55.801] getGlobalsAndPackages() ...
[16:19:55.801] Searching for globals...
[16:19:55.802] - globals found: [2] ‘{’, ‘stop’
[16:19:55.802] Searching for globals ... DONE
[16:19:55.802] Resolving globals: FALSE
[16:19:55.803] 
[16:19:55.803] 
[16:19:55.803] getGlobalsAndPackages() ... DONE
[16:19:55.803] run() for ‘Future’ ...
[16:19:55.803] - state: ‘created’
[16:19:55.803] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:19:55.803] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:19:55.804] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:19:55.804]   - Field: ‘label’
[16:19:55.804]   - Field: ‘local’
[16:19:55.804]   - Field: ‘owner’
[16:19:55.804]   - Field: ‘envir’
[16:19:55.804]   - Field: ‘packages’
[16:19:55.804]   - Field: ‘gc’
[16:19:55.804]   - Field: ‘conditions’
[16:19:55.804]   - Field: ‘expr’
[16:19:55.804]   - Field: ‘uuid’
[16:19:55.805]   - Field: ‘seed’
[16:19:55.805]   - Field: ‘version’
[16:19:55.805]   - Field: ‘result’
[16:19:55.805]   - Field: ‘asynchronous’
[16:19:55.805]   - Field: ‘calls’
[16:19:55.805]   - Field: ‘globals’
[16:19:55.805]   - Field: ‘stdout’
[16:19:55.805]   - Field: ‘earlySignal’
[16:19:55.805]   - Field: ‘lazy’
[16:19:55.805]   - Field: ‘state’
[16:19:55.805] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:19:55.806] - Launch lazy future ...
[16:19:55.806] Packages needed by the future expression (n = 0): <none>
[16:19:55.806] Packages needed by future strategies (n = 0): <none>
[16:19:55.806] {
[16:19:55.806]     {
[16:19:55.806]         {
[16:19:55.806]             ...future.startTime <- base::Sys.time()
[16:19:55.806]             {
[16:19:55.806]                 {
[16:19:55.806]                   {
[16:19:55.806]                     base::local({
[16:19:55.806]                       has_future <- base::requireNamespace("future", 
[16:19:55.806]                         quietly = TRUE)
[16:19:55.806]                       if (has_future) {
[16:19:55.806]                         ns <- base::getNamespace("future")
[16:19:55.806]                         version <- ns[[".package"]][["version"]]
[16:19:55.806]                         if (is.null(version)) 
[16:19:55.806]                           version <- utils::packageVersion("future")
[16:19:55.806]                       }
[16:19:55.806]                       else {
[16:19:55.806]                         version <- NULL
[16:19:55.806]                       }
[16:19:55.806]                       if (!has_future || version < "1.8.0") {
[16:19:55.806]                         info <- base::c(r_version = base::gsub("R version ", 
[16:19:55.806]                           "", base::R.version$version.string), 
[16:19:55.806]                           platform = base::sprintf("%s (%s-bit)", 
[16:19:55.806]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:19:55.806]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:19:55.806]                             "release", "version")], collapse = " "), 
[16:19:55.806]                           hostname = base::Sys.info()[["nodename"]])
[16:19:55.806]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:19:55.806]                           info)
[16:19:55.806]                         info <- base::paste(info, collapse = "; ")
[16:19:55.806]                         if (!has_future) {
[16:19:55.806]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:19:55.806]                             info)
[16:19:55.806]                         }
[16:19:55.806]                         else {
[16:19:55.806]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:19:55.806]                             info, version)
[16:19:55.806]                         }
[16:19:55.806]                         base::stop(msg)
[16:19:55.806]                       }
[16:19:55.806]                     })
[16:19:55.806]                   }
[16:19:55.806]                   ...future.strategy.old <- future::plan("list")
[16:19:55.806]                   options(future.plan = NULL)
[16:19:55.806]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:19:55.806]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:19:55.806]                 }
[16:19:55.806]                 ...future.workdir <- getwd()
[16:19:55.806]             }
[16:19:55.806]             ...future.oldOptions <- base::as.list(base::.Options)
[16:19:55.806]             ...future.oldEnvVars <- base::Sys.getenv()
[16:19:55.806]         }
[16:19:55.806]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:19:55.806]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:19:55.806]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:19:55.806]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:19:55.806]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:19:55.806]             future.stdout.windows.reencode = NULL, width = 80L)
[16:19:55.806]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:19:55.806]             base::names(...future.oldOptions))
[16:19:55.806]     }
[16:19:55.806]     if (FALSE) {
[16:19:55.806]     }
[16:19:55.806]     else {
[16:19:55.806]         if (TRUE) {
[16:19:55.806]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:19:55.806]                 open = "w")
[16:19:55.806]         }
[16:19:55.806]         else {
[16:19:55.806]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:19:55.806]                 windows = "NUL", "/dev/null"), open = "w")
[16:19:55.806]         }
[16:19:55.806]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:19:55.806]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:19:55.806]             base::sink(type = "output", split = FALSE)
[16:19:55.806]             base::close(...future.stdout)
[16:19:55.806]         }, add = TRUE)
[16:19:55.806]     }
[16:19:55.806]     ...future.frame <- base::sys.nframe()
[16:19:55.806]     ...future.conditions <- base::list()
[16:19:55.806]     ...future.rng <- base::globalenv()$.Random.seed
[16:19:55.806]     if (FALSE) {
[16:19:55.806]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:19:55.806]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:19:55.806]     }
[16:19:55.806]     ...future.result <- base::tryCatch({
[16:19:55.806]         base::withCallingHandlers({
[16:19:55.806]             ...future.value <- base::withVisible(base::local({
[16:19:55.806]                 42L
[16:19:55.806]                 stop("Woops")
[16:19:55.806]             }))
[16:19:55.806]             future::FutureResult(value = ...future.value$value, 
[16:19:55.806]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:19:55.806]                   ...future.rng), globalenv = if (FALSE) 
[16:19:55.806]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:19:55.806]                     ...future.globalenv.names))
[16:19:55.806]                 else NULL, started = ...future.startTime, version = "1.8")
[16:19:55.806]         }, condition = base::local({
[16:19:55.806]             c <- base::c
[16:19:55.806]             inherits <- base::inherits
[16:19:55.806]             invokeRestart <- base::invokeRestart
[16:19:55.806]             length <- base::length
[16:19:55.806]             list <- base::list
[16:19:55.806]             seq.int <- base::seq.int
[16:19:55.806]             signalCondition <- base::signalCondition
[16:19:55.806]             sys.calls <- base::sys.calls
[16:19:55.806]             `[[` <- base::`[[`
[16:19:55.806]             `+` <- base::`+`
[16:19:55.806]             `<<-` <- base::`<<-`
[16:19:55.806]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:19:55.806]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:19:55.806]                   3L)]
[16:19:55.806]             }
[16:19:55.806]             function(cond) {
[16:19:55.806]                 is_error <- inherits(cond, "error")
[16:19:55.806]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:19:55.806]                   NULL)
[16:19:55.806]                 if (is_error) {
[16:19:55.806]                   sessionInformation <- function() {
[16:19:55.806]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:19:55.806]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:19:55.806]                       search = base::search(), system = base::Sys.info())
[16:19:55.806]                   }
[16:19:55.806]                   ...future.conditions[[length(...future.conditions) + 
[16:19:55.806]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:19:55.806]                     cond$call), session = sessionInformation(), 
[16:19:55.806]                     timestamp = base::Sys.time(), signaled = 0L)
[16:19:55.806]                   signalCondition(cond)
[16:19:55.806]                 }
[16:19:55.806]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:19:55.806]                 "immediateCondition"))) {
[16:19:55.806]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:19:55.806]                   ...future.conditions[[length(...future.conditions) + 
[16:19:55.806]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:19:55.806]                   if (TRUE && !signal) {
[16:19:55.806]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:19:55.806]                     {
[16:19:55.806]                       inherits <- base::inherits
[16:19:55.806]                       invokeRestart <- base::invokeRestart
[16:19:55.806]                       is.null <- base::is.null
[16:19:55.806]                       muffled <- FALSE
[16:19:55.806]                       if (inherits(cond, "message")) {
[16:19:55.806]                         muffled <- grepl(pattern, "muffleMessage")
[16:19:55.806]                         if (muffled) 
[16:19:55.806]                           invokeRestart("muffleMessage")
[16:19:55.806]                       }
[16:19:55.806]                       else if (inherits(cond, "warning")) {
[16:19:55.806]                         muffled <- grepl(pattern, "muffleWarning")
[16:19:55.806]                         if (muffled) 
[16:19:55.806]                           invokeRestart("muffleWarning")
[16:19:55.806]                       }
[16:19:55.806]                       else if (inherits(cond, "condition")) {
[16:19:55.806]                         if (!is.null(pattern)) {
[16:19:55.806]                           computeRestarts <- base::computeRestarts
[16:19:55.806]                           grepl <- base::grepl
[16:19:55.806]                           restarts <- computeRestarts(cond)
[16:19:55.806]                           for (restart in restarts) {
[16:19:55.806]                             name <- restart$name
[16:19:55.806]                             if (is.null(name)) 
[16:19:55.806]                               next
[16:19:55.806]                             if (!grepl(pattern, name)) 
[16:19:55.806]                               next
[16:19:55.806]                             invokeRestart(restart)
[16:19:55.806]                             muffled <- TRUE
[16:19:55.806]                             break
[16:19:55.806]                           }
[16:19:55.806]                         }
[16:19:55.806]                       }
[16:19:55.806]                       invisible(muffled)
[16:19:55.806]                     }
[16:19:55.806]                     muffleCondition(cond, pattern = "^muffle")
[16:19:55.806]                   }
[16:19:55.806]                 }
[16:19:55.806]                 else {
[16:19:55.806]                   if (TRUE) {
[16:19:55.806]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:19:55.806]                     {
[16:19:55.806]                       inherits <- base::inherits
[16:19:55.806]                       invokeRestart <- base::invokeRestart
[16:19:55.806]                       is.null <- base::is.null
[16:19:55.806]                       muffled <- FALSE
[16:19:55.806]                       if (inherits(cond, "message")) {
[16:19:55.806]                         muffled <- grepl(pattern, "muffleMessage")
[16:19:55.806]                         if (muffled) 
[16:19:55.806]                           invokeRestart("muffleMessage")
[16:19:55.806]                       }
[16:19:55.806]                       else if (inherits(cond, "warning")) {
[16:19:55.806]                         muffled <- grepl(pattern, "muffleWarning")
[16:19:55.806]                         if (muffled) 
[16:19:55.806]                           invokeRestart("muffleWarning")
[16:19:55.806]                       }
[16:19:55.806]                       else if (inherits(cond, "condition")) {
[16:19:55.806]                         if (!is.null(pattern)) {
[16:19:55.806]                           computeRestarts <- base::computeRestarts
[16:19:55.806]                           grepl <- base::grepl
[16:19:55.806]                           restarts <- computeRestarts(cond)
[16:19:55.806]                           for (restart in restarts) {
[16:19:55.806]                             name <- restart$name
[16:19:55.806]                             if (is.null(name)) 
[16:19:55.806]                               next
[16:19:55.806]                             if (!grepl(pattern, name)) 
[16:19:55.806]                               next
[16:19:55.806]                             invokeRestart(restart)
[16:19:55.806]                             muffled <- TRUE
[16:19:55.806]                             break
[16:19:55.806]                           }
[16:19:55.806]                         }
[16:19:55.806]                       }
[16:19:55.806]                       invisible(muffled)
[16:19:55.806]                     }
[16:19:55.806]                     muffleCondition(cond, pattern = "^muffle")
[16:19:55.806]                   }
[16:19:55.806]                 }
[16:19:55.806]             }
[16:19:55.806]         }))
[16:19:55.806]     }, error = function(ex) {
[16:19:55.806]         base::structure(base::list(value = NULL, visible = NULL, 
[16:19:55.806]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:19:55.806]                 ...future.rng), started = ...future.startTime, 
[16:19:55.806]             finished = Sys.time(), session_uuid = NA_character_, 
[16:19:55.806]             version = "1.8"), class = "FutureResult")
[16:19:55.806]     }, finally = {
[16:19:55.806]         if (!identical(...future.workdir, getwd())) 
[16:19:55.806]             setwd(...future.workdir)
[16:19:55.806]         {
[16:19:55.806]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:19:55.806]                 ...future.oldOptions$nwarnings <- NULL
[16:19:55.806]             }
[16:19:55.806]             base::options(...future.oldOptions)
[16:19:55.806]             if (.Platform$OS.type == "windows") {
[16:19:55.806]                 old_names <- names(...future.oldEnvVars)
[16:19:55.806]                 envs <- base::Sys.getenv()
[16:19:55.806]                 names <- names(envs)
[16:19:55.806]                 common <- intersect(names, old_names)
[16:19:55.806]                 added <- setdiff(names, old_names)
[16:19:55.806]                 removed <- setdiff(old_names, names)
[16:19:55.806]                 changed <- common[...future.oldEnvVars[common] != 
[16:19:55.806]                   envs[common]]
[16:19:55.806]                 NAMES <- toupper(changed)
[16:19:55.806]                 args <- list()
[16:19:55.806]                 for (kk in seq_along(NAMES)) {
[16:19:55.806]                   name <- changed[[kk]]
[16:19:55.806]                   NAME <- NAMES[[kk]]
[16:19:55.806]                   if (name != NAME && is.element(NAME, old_names)) 
[16:19:55.806]                     next
[16:19:55.806]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:19:55.806]                 }
[16:19:55.806]                 NAMES <- toupper(added)
[16:19:55.806]                 for (kk in seq_along(NAMES)) {
[16:19:55.806]                   name <- added[[kk]]
[16:19:55.806]                   NAME <- NAMES[[kk]]
[16:19:55.806]                   if (name != NAME && is.element(NAME, old_names)) 
[16:19:55.806]                     next
[16:19:55.806]                   args[[name]] <- ""
[16:19:55.806]                 }
[16:19:55.806]                 NAMES <- toupper(removed)
[16:19:55.806]                 for (kk in seq_along(NAMES)) {
[16:19:55.806]                   name <- removed[[kk]]
[16:19:55.806]                   NAME <- NAMES[[kk]]
[16:19:55.806]                   if (name != NAME && is.element(NAME, old_names)) 
[16:19:55.806]                     next
[16:19:55.806]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:19:55.806]                 }
[16:19:55.806]                 if (length(args) > 0) 
[16:19:55.806]                   base::do.call(base::Sys.setenv, args = args)
[16:19:55.806]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:19:55.806]             }
[16:19:55.806]             else {
[16:19:55.806]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:19:55.806]             }
[16:19:55.806]             {
[16:19:55.806]                 if (base::length(...future.futureOptionsAdded) > 
[16:19:55.806]                   0L) {
[16:19:55.806]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:19:55.806]                   base::names(opts) <- ...future.futureOptionsAdded
[16:19:55.806]                   base::options(opts)
[16:19:55.806]                 }
[16:19:55.806]                 {
[16:19:55.806]                   {
[16:19:55.806]                     NULL
[16:19:55.806]                     RNGkind("Mersenne-Twister")
[16:19:55.806]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:19:55.806]                       inherits = FALSE)
[16:19:55.806]                   }
[16:19:55.806]                   options(future.plan = NULL)
[16:19:55.806]                   if (is.na(NA_character_)) 
[16:19:55.806]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:19:55.806]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:19:55.806]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:19:55.806]                     .init = FALSE)
[16:19:55.806]                 }
[16:19:55.806]             }
[16:19:55.806]         }
[16:19:55.806]     })
[16:19:55.806]     if (TRUE) {
[16:19:55.806]         base::sink(type = "output", split = FALSE)
[16:19:55.806]         if (TRUE) {
[16:19:55.806]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:19:55.806]         }
[16:19:55.806]         else {
[16:19:55.806]             ...future.result["stdout"] <- base::list(NULL)
[16:19:55.806]         }
[16:19:55.806]         base::close(...future.stdout)
[16:19:55.806]         ...future.stdout <- NULL
[16:19:55.806]     }
[16:19:55.806]     ...future.result$conditions <- ...future.conditions
[16:19:55.806]     ...future.result$finished <- base::Sys.time()
[16:19:55.806]     ...future.result
[16:19:55.806] }
[16:19:55.808] plan(): Setting new future strategy stack:
[16:19:55.808] List of future strategies:
[16:19:55.808] 1. sequential:
[16:19:55.808]    - args: function (..., envir = parent.frame())
[16:19:55.808]    - tweaked: FALSE
[16:19:55.808]    - call: NULL
[16:19:55.808] plan(): nbrOfWorkers() = 1
[16:19:55.809] plan(): Setting new future strategy stack:
[16:19:55.809] List of future strategies:
[16:19:55.809] 1. sequential:
[16:19:55.809]    - args: function (..., envir = parent.frame())
[16:19:55.809]    - tweaked: FALSE
[16:19:55.809]    - call: future::plan("sequential")
[16:19:55.810] plan(): nbrOfWorkers() = 1
[16:19:55.810] SequentialFuture started (and completed)
[16:19:55.810] signalConditions() ...
[16:19:55.810]  - include = ‘immediateCondition’
[16:19:55.810]  - exclude = 
[16:19:55.810]  - resignal = FALSE
[16:19:55.810]  - Number of conditions: 1
[16:19:55.810] signalConditions() ... done
[16:19:55.810] - Launch lazy future ... done
[16:19:55.810] run() for ‘SequentialFuture’ ... done
> lenv[[2]] %<-% { 42L; stop("Woops") }
[16:19:55.811] getGlobalsAndPackages() ...
[16:19:55.811] Searching for globals...
[16:19:55.812] - globals found: [2] ‘{’, ‘stop’
[16:19:55.812] Searching for globals ... DONE
[16:19:55.812] Resolving globals: FALSE
[16:19:55.812] 
[16:19:55.812] 
[16:19:55.812] getGlobalsAndPackages() ... DONE
[16:19:55.813] run() for ‘Future’ ...
[16:19:55.813] - state: ‘created’
[16:19:55.813] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:19:55.813] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:19:55.813] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:19:55.813]   - Field: ‘label’
[16:19:55.815]   - Field: ‘local’
[16:19:55.815]   - Field: ‘owner’
[16:19:55.815]   - Field: ‘envir’
[16:19:55.815]   - Field: ‘packages’
[16:19:55.815]   - Field: ‘gc’
[16:19:55.815]   - Field: ‘conditions’
[16:19:55.815]   - Field: ‘expr’
[16:19:55.815]   - Field: ‘uuid’
[16:19:55.815]   - Field: ‘seed’
[16:19:55.815]   - Field: ‘version’
[16:19:55.815]   - Field: ‘result’
[16:19:55.816]   - Field: ‘asynchronous’
[16:19:55.816]   - Field: ‘calls’
[16:19:55.816]   - Field: ‘globals’
[16:19:55.816]   - Field: ‘stdout’
[16:19:55.816]   - Field: ‘earlySignal’
[16:19:55.816]   - Field: ‘lazy’
[16:19:55.816]   - Field: ‘state’
[16:19:55.816] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:19:55.816] - Launch lazy future ...
[16:19:55.816] Packages needed by the future expression (n = 0): <none>
[16:19:55.817] Packages needed by future strategies (n = 0): <none>
[16:19:55.817] {
[16:19:55.817]     {
[16:19:55.817]         {
[16:19:55.817]             ...future.startTime <- base::Sys.time()
[16:19:55.817]             {
[16:19:55.817]                 {
[16:19:55.817]                   {
[16:19:55.817]                     base::local({
[16:19:55.817]                       has_future <- base::requireNamespace("future", 
[16:19:55.817]                         quietly = TRUE)
[16:19:55.817]                       if (has_future) {
[16:19:55.817]                         ns <- base::getNamespace("future")
[16:19:55.817]                         version <- ns[[".package"]][["version"]]
[16:19:55.817]                         if (is.null(version)) 
[16:19:55.817]                           version <- utils::packageVersion("future")
[16:19:55.817]                       }
[16:19:55.817]                       else {
[16:19:55.817]                         version <- NULL
[16:19:55.817]                       }
[16:19:55.817]                       if (!has_future || version < "1.8.0") {
[16:19:55.817]                         info <- base::c(r_version = base::gsub("R version ", 
[16:19:55.817]                           "", base::R.version$version.string), 
[16:19:55.817]                           platform = base::sprintf("%s (%s-bit)", 
[16:19:55.817]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:19:55.817]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:19:55.817]                             "release", "version")], collapse = " "), 
[16:19:55.817]                           hostname = base::Sys.info()[["nodename"]])
[16:19:55.817]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:19:55.817]                           info)
[16:19:55.817]                         info <- base::paste(info, collapse = "; ")
[16:19:55.817]                         if (!has_future) {
[16:19:55.817]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:19:55.817]                             info)
[16:19:55.817]                         }
[16:19:55.817]                         else {
[16:19:55.817]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:19:55.817]                             info, version)
[16:19:55.817]                         }
[16:19:55.817]                         base::stop(msg)
[16:19:55.817]                       }
[16:19:55.817]                     })
[16:19:55.817]                   }
[16:19:55.817]                   ...future.strategy.old <- future::plan("list")
[16:19:55.817]                   options(future.plan = NULL)
[16:19:55.817]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:19:55.817]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:19:55.817]                 }
[16:19:55.817]                 ...future.workdir <- getwd()
[16:19:55.817]             }
[16:19:55.817]             ...future.oldOptions <- base::as.list(base::.Options)
[16:19:55.817]             ...future.oldEnvVars <- base::Sys.getenv()
[16:19:55.817]         }
[16:19:55.817]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:19:55.817]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:19:55.817]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:19:55.817]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:19:55.817]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:19:55.817]             future.stdout.windows.reencode = NULL, width = 80L)
[16:19:55.817]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:19:55.817]             base::names(...future.oldOptions))
[16:19:55.817]     }
[16:19:55.817]     if (FALSE) {
[16:19:55.817]     }
[16:19:55.817]     else {
[16:19:55.817]         if (TRUE) {
[16:19:55.817]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:19:55.817]                 open = "w")
[16:19:55.817]         }
[16:19:55.817]         else {
[16:19:55.817]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:19:55.817]                 windows = "NUL", "/dev/null"), open = "w")
[16:19:55.817]         }
[16:19:55.817]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:19:55.817]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:19:55.817]             base::sink(type = "output", split = FALSE)
[16:19:55.817]             base::close(...future.stdout)
[16:19:55.817]         }, add = TRUE)
[16:19:55.817]     }
[16:19:55.817]     ...future.frame <- base::sys.nframe()
[16:19:55.817]     ...future.conditions <- base::list()
[16:19:55.817]     ...future.rng <- base::globalenv()$.Random.seed
[16:19:55.817]     if (FALSE) {
[16:19:55.817]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:19:55.817]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:19:55.817]     }
[16:19:55.817]     ...future.result <- base::tryCatch({
[16:19:55.817]         base::withCallingHandlers({
[16:19:55.817]             ...future.value <- base::withVisible(base::local({
[16:19:55.817]                 42L
[16:19:55.817]                 stop("Woops")
[16:19:55.817]             }))
[16:19:55.817]             future::FutureResult(value = ...future.value$value, 
[16:19:55.817]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:19:55.817]                   ...future.rng), globalenv = if (FALSE) 
[16:19:55.817]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:19:55.817]                     ...future.globalenv.names))
[16:19:55.817]                 else NULL, started = ...future.startTime, version = "1.8")
[16:19:55.817]         }, condition = base::local({
[16:19:55.817]             c <- base::c
[16:19:55.817]             inherits <- base::inherits
[16:19:55.817]             invokeRestart <- base::invokeRestart
[16:19:55.817]             length <- base::length
[16:19:55.817]             list <- base::list
[16:19:55.817]             seq.int <- base::seq.int
[16:19:55.817]             signalCondition <- base::signalCondition
[16:19:55.817]             sys.calls <- base::sys.calls
[16:19:55.817]             `[[` <- base::`[[`
[16:19:55.817]             `+` <- base::`+`
[16:19:55.817]             `<<-` <- base::`<<-`
[16:19:55.817]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:19:55.817]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:19:55.817]                   3L)]
[16:19:55.817]             }
[16:19:55.817]             function(cond) {
[16:19:55.817]                 is_error <- inherits(cond, "error")
[16:19:55.817]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:19:55.817]                   NULL)
[16:19:55.817]                 if (is_error) {
[16:19:55.817]                   sessionInformation <- function() {
[16:19:55.817]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:19:55.817]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:19:55.817]                       search = base::search(), system = base::Sys.info())
[16:19:55.817]                   }
[16:19:55.817]                   ...future.conditions[[length(...future.conditions) + 
[16:19:55.817]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:19:55.817]                     cond$call), session = sessionInformation(), 
[16:19:55.817]                     timestamp = base::Sys.time(), signaled = 0L)
[16:19:55.817]                   signalCondition(cond)
[16:19:55.817]                 }
[16:19:55.817]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:19:55.817]                 "immediateCondition"))) {
[16:19:55.817]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:19:55.817]                   ...future.conditions[[length(...future.conditions) + 
[16:19:55.817]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:19:55.817]                   if (TRUE && !signal) {
[16:19:55.817]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:19:55.817]                     {
[16:19:55.817]                       inherits <- base::inherits
[16:19:55.817]                       invokeRestart <- base::invokeRestart
[16:19:55.817]                       is.null <- base::is.null
[16:19:55.817]                       muffled <- FALSE
[16:19:55.817]                       if (inherits(cond, "message")) {
[16:19:55.817]                         muffled <- grepl(pattern, "muffleMessage")
[16:19:55.817]                         if (muffled) 
[16:19:55.817]                           invokeRestart("muffleMessage")
[16:19:55.817]                       }
[16:19:55.817]                       else if (inherits(cond, "warning")) {
[16:19:55.817]                         muffled <- grepl(pattern, "muffleWarning")
[16:19:55.817]                         if (muffled) 
[16:19:55.817]                           invokeRestart("muffleWarning")
[16:19:55.817]                       }
[16:19:55.817]                       else if (inherits(cond, "condition")) {
[16:19:55.817]                         if (!is.null(pattern)) {
[16:19:55.817]                           computeRestarts <- base::computeRestarts
[16:19:55.817]                           grepl <- base::grepl
[16:19:55.817]                           restarts <- computeRestarts(cond)
[16:19:55.817]                           for (restart in restarts) {
[16:19:55.817]                             name <- restart$name
[16:19:55.817]                             if (is.null(name)) 
[16:19:55.817]                               next
[16:19:55.817]                             if (!grepl(pattern, name)) 
[16:19:55.817]                               next
[16:19:55.817]                             invokeRestart(restart)
[16:19:55.817]                             muffled <- TRUE
[16:19:55.817]                             break
[16:19:55.817]                           }
[16:19:55.817]                         }
[16:19:55.817]                       }
[16:19:55.817]                       invisible(muffled)
[16:19:55.817]                     }
[16:19:55.817]                     muffleCondition(cond, pattern = "^muffle")
[16:19:55.817]                   }
[16:19:55.817]                 }
[16:19:55.817]                 else {
[16:19:55.817]                   if (TRUE) {
[16:19:55.817]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:19:55.817]                     {
[16:19:55.817]                       inherits <- base::inherits
[16:19:55.817]                       invokeRestart <- base::invokeRestart
[16:19:55.817]                       is.null <- base::is.null
[16:19:55.817]                       muffled <- FALSE
[16:19:55.817]                       if (inherits(cond, "message")) {
[16:19:55.817]                         muffled <- grepl(pattern, "muffleMessage")
[16:19:55.817]                         if (muffled) 
[16:19:55.817]                           invokeRestart("muffleMessage")
[16:19:55.817]                       }
[16:19:55.817]                       else if (inherits(cond, "warning")) {
[16:19:55.817]                         muffled <- grepl(pattern, "muffleWarning")
[16:19:55.817]                         if (muffled) 
[16:19:55.817]                           invokeRestart("muffleWarning")
[16:19:55.817]                       }
[16:19:55.817]                       else if (inherits(cond, "condition")) {
[16:19:55.817]                         if (!is.null(pattern)) {
[16:19:55.817]                           computeRestarts <- base::computeRestarts
[16:19:55.817]                           grepl <- base::grepl
[16:19:55.817]                           restarts <- computeRestarts(cond)
[16:19:55.817]                           for (restart in restarts) {
[16:19:55.817]                             name <- restart$name
[16:19:55.817]                             if (is.null(name)) 
[16:19:55.817]                               next
[16:19:55.817]                             if (!grepl(pattern, name)) 
[16:19:55.817]                               next
[16:19:55.817]                             invokeRestart(restart)
[16:19:55.817]                             muffled <- TRUE
[16:19:55.817]                             break
[16:19:55.817]                           }
[16:19:55.817]                         }
[16:19:55.817]                       }
[16:19:55.817]                       invisible(muffled)
[16:19:55.817]                     }
[16:19:55.817]                     muffleCondition(cond, pattern = "^muffle")
[16:19:55.817]                   }
[16:19:55.817]                 }
[16:19:55.817]             }
[16:19:55.817]         }))
[16:19:55.817]     }, error = function(ex) {
[16:19:55.817]         base::structure(base::list(value = NULL, visible = NULL, 
[16:19:55.817]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:19:55.817]                 ...future.rng), started = ...future.startTime, 
[16:19:55.817]             finished = Sys.time(), session_uuid = NA_character_, 
[16:19:55.817]             version = "1.8"), class = "FutureResult")
[16:19:55.817]     }, finally = {
[16:19:55.817]         if (!identical(...future.workdir, getwd())) 
[16:19:55.817]             setwd(...future.workdir)
[16:19:55.817]         {
[16:19:55.817]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:19:55.817]                 ...future.oldOptions$nwarnings <- NULL
[16:19:55.817]             }
[16:19:55.817]             base::options(...future.oldOptions)
[16:19:55.817]             if (.Platform$OS.type == "windows") {
[16:19:55.817]                 old_names <- names(...future.oldEnvVars)
[16:19:55.817]                 envs <- base::Sys.getenv()
[16:19:55.817]                 names <- names(envs)
[16:19:55.817]                 common <- intersect(names, old_names)
[16:19:55.817]                 added <- setdiff(names, old_names)
[16:19:55.817]                 removed <- setdiff(old_names, names)
[16:19:55.817]                 changed <- common[...future.oldEnvVars[common] != 
[16:19:55.817]                   envs[common]]
[16:19:55.817]                 NAMES <- toupper(changed)
[16:19:55.817]                 args <- list()
[16:19:55.817]                 for (kk in seq_along(NAMES)) {
[16:19:55.817]                   name <- changed[[kk]]
[16:19:55.817]                   NAME <- NAMES[[kk]]
[16:19:55.817]                   if (name != NAME && is.element(NAME, old_names)) 
[16:19:55.817]                     next
[16:19:55.817]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:19:55.817]                 }
[16:19:55.817]                 NAMES <- toupper(added)
[16:19:55.817]                 for (kk in seq_along(NAMES)) {
[16:19:55.817]                   name <- added[[kk]]
[16:19:55.817]                   NAME <- NAMES[[kk]]
[16:19:55.817]                   if (name != NAME && is.element(NAME, old_names)) 
[16:19:55.817]                     next
[16:19:55.817]                   args[[name]] <- ""
[16:19:55.817]                 }
[16:19:55.817]                 NAMES <- toupper(removed)
[16:19:55.817]                 for (kk in seq_along(NAMES)) {
[16:19:55.817]                   name <- removed[[kk]]
[16:19:55.817]                   NAME <- NAMES[[kk]]
[16:19:55.817]                   if (name != NAME && is.element(NAME, old_names)) 
[16:19:55.817]                     next
[16:19:55.817]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:19:55.817]                 }
[16:19:55.817]                 if (length(args) > 0) 
[16:19:55.817]                   base::do.call(base::Sys.setenv, args = args)
[16:19:55.817]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:19:55.817]             }
[16:19:55.817]             else {
[16:19:55.817]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:19:55.817]             }
[16:19:55.817]             {
[16:19:55.817]                 if (base::length(...future.futureOptionsAdded) > 
[16:19:55.817]                   0L) {
[16:19:55.817]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:19:55.817]                   base::names(opts) <- ...future.futureOptionsAdded
[16:19:55.817]                   base::options(opts)
[16:19:55.817]                 }
[16:19:55.817]                 {
[16:19:55.817]                   {
[16:19:55.817]                     NULL
[16:19:55.817]                     RNGkind("Mersenne-Twister")
[16:19:55.817]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:19:55.817]                       inherits = FALSE)
[16:19:55.817]                   }
[16:19:55.817]                   options(future.plan = NULL)
[16:19:55.817]                   if (is.na(NA_character_)) 
[16:19:55.817]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:19:55.817]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:19:55.817]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:19:55.817]                     .init = FALSE)
[16:19:55.817]                 }
[16:19:55.817]             }
[16:19:55.817]         }
[16:19:55.817]     })
[16:19:55.817]     if (TRUE) {
[16:19:55.817]         base::sink(type = "output", split = FALSE)
[16:19:55.817]         if (TRUE) {
[16:19:55.817]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:19:55.817]         }
[16:19:55.817]         else {
[16:19:55.817]             ...future.result["stdout"] <- base::list(NULL)
[16:19:55.817]         }
[16:19:55.817]         base::close(...future.stdout)
[16:19:55.817]         ...future.stdout <- NULL
[16:19:55.817]     }
[16:19:55.817]     ...future.result$conditions <- ...future.conditions
[16:19:55.817]     ...future.result$finished <- base::Sys.time()
[16:19:55.817]     ...future.result
[16:19:55.817] }
[16:19:55.819] plan(): Setting new future strategy stack:
[16:19:55.819] List of future strategies:
[16:19:55.819] 1. sequential:
[16:19:55.819]    - args: function (..., envir = parent.frame())
[16:19:55.819]    - tweaked: FALSE
[16:19:55.819]    - call: NULL
[16:19:55.819] plan(): nbrOfWorkers() = 1
[16:19:55.820] plan(): Setting new future strategy stack:
[16:19:55.820] List of future strategies:
[16:19:55.820] 1. sequential:
[16:19:55.820]    - args: function (..., envir = parent.frame())
[16:19:55.820]    - tweaked: FALSE
[16:19:55.820]    - call: future::plan("sequential")
[16:19:55.820] plan(): nbrOfWorkers() = 1
[16:19:55.820] SequentialFuture started (and completed)
[16:19:55.821] signalConditions() ...
[16:19:55.821]  - include = ‘immediateCondition’
[16:19:55.821]  - exclude = 
[16:19:55.821]  - resignal = FALSE
[16:19:55.821]  - Number of conditions: 1
[16:19:55.821] signalConditions() ... done
[16:19:55.821] - Launch lazy future ... done
[16:19:55.821] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(lenv[[2]])
[16:19:55.821] resolved() for ‘SequentialFuture’ ...
[16:19:55.822] - state: ‘finished’
[16:19:55.822] - run: TRUE
[16:19:55.822] - result: ‘FutureResult’
[16:19:55.822] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
lenv[[2]] %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> ll <- list()
> ll[[1]] <- future({ 42L; stop("Woops") })
[16:19:55.822] getGlobalsAndPackages() ...
[16:19:55.823] Searching for globals...
[16:19:55.823] - globals found: [2] ‘{’, ‘stop’
[16:19:55.823] Searching for globals ... DONE
[16:19:55.824] Resolving globals: FALSE
[16:19:55.824] 
[16:19:55.824] 
[16:19:55.824] getGlobalsAndPackages() ... DONE
[16:19:55.824] run() for ‘Future’ ...
[16:19:55.824] - state: ‘created’
[16:19:55.824] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:19:55.825] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:19:55.825] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:19:55.825]   - Field: ‘label’
[16:19:55.825]   - Field: ‘local’
[16:19:55.825]   - Field: ‘owner’
[16:19:55.825]   - Field: ‘envir’
[16:19:55.825]   - Field: ‘packages’
[16:19:55.825]   - Field: ‘gc’
[16:19:55.825]   - Field: ‘conditions’
[16:19:55.825]   - Field: ‘expr’
[16:19:55.826]   - Field: ‘uuid’
[16:19:55.826]   - Field: ‘seed’
[16:19:55.826]   - Field: ‘version’
[16:19:55.826]   - Field: ‘result’
[16:19:55.826]   - Field: ‘asynchronous’
[16:19:55.826]   - Field: ‘calls’
[16:19:55.826]   - Field: ‘globals’
[16:19:55.826]   - Field: ‘stdout’
[16:19:55.826]   - Field: ‘earlySignal’
[16:19:55.826]   - Field: ‘lazy’
[16:19:55.826]   - Field: ‘state’
[16:19:55.827] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:19:55.827] - Launch lazy future ...
[16:19:55.827] Packages needed by the future expression (n = 0): <none>
[16:19:55.827] Packages needed by future strategies (n = 0): <none>
[16:19:55.827] {
[16:19:55.827]     {
[16:19:55.827]         {
[16:19:55.827]             ...future.startTime <- base::Sys.time()
[16:19:55.827]             {
[16:19:55.827]                 {
[16:19:55.827]                   {
[16:19:55.827]                     base::local({
[16:19:55.827]                       has_future <- base::requireNamespace("future", 
[16:19:55.827]                         quietly = TRUE)
[16:19:55.827]                       if (has_future) {
[16:19:55.827]                         ns <- base::getNamespace("future")
[16:19:55.827]                         version <- ns[[".package"]][["version"]]
[16:19:55.827]                         if (is.null(version)) 
[16:19:55.827]                           version <- utils::packageVersion("future")
[16:19:55.827]                       }
[16:19:55.827]                       else {
[16:19:55.827]                         version <- NULL
[16:19:55.827]                       }
[16:19:55.827]                       if (!has_future || version < "1.8.0") {
[16:19:55.827]                         info <- base::c(r_version = base::gsub("R version ", 
[16:19:55.827]                           "", base::R.version$version.string), 
[16:19:55.827]                           platform = base::sprintf("%s (%s-bit)", 
[16:19:55.827]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:19:55.827]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:19:55.827]                             "release", "version")], collapse = " "), 
[16:19:55.827]                           hostname = base::Sys.info()[["nodename"]])
[16:19:55.827]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:19:55.827]                           info)
[16:19:55.827]                         info <- base::paste(info, collapse = "; ")
[16:19:55.827]                         if (!has_future) {
[16:19:55.827]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:19:55.827]                             info)
[16:19:55.827]                         }
[16:19:55.827]                         else {
[16:19:55.827]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:19:55.827]                             info, version)
[16:19:55.827]                         }
[16:19:55.827]                         base::stop(msg)
[16:19:55.827]                       }
[16:19:55.827]                     })
[16:19:55.827]                   }
[16:19:55.827]                   ...future.strategy.old <- future::plan("list")
[16:19:55.827]                   options(future.plan = NULL)
[16:19:55.827]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:19:55.827]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:19:55.827]                 }
[16:19:55.827]                 ...future.workdir <- getwd()
[16:19:55.827]             }
[16:19:55.827]             ...future.oldOptions <- base::as.list(base::.Options)
[16:19:55.827]             ...future.oldEnvVars <- base::Sys.getenv()
[16:19:55.827]         }
[16:19:55.827]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:19:55.827]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:19:55.827]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:19:55.827]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:19:55.827]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:19:55.827]             future.stdout.windows.reencode = NULL, width = 80L)
[16:19:55.827]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:19:55.827]             base::names(...future.oldOptions))
[16:19:55.827]     }
[16:19:55.827]     if (FALSE) {
[16:19:55.827]     }
[16:19:55.827]     else {
[16:19:55.827]         if (TRUE) {
[16:19:55.827]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:19:55.827]                 open = "w")
[16:19:55.827]         }
[16:19:55.827]         else {
[16:19:55.827]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:19:55.827]                 windows = "NUL", "/dev/null"), open = "w")
[16:19:55.827]         }
[16:19:55.827]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:19:55.827]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:19:55.827]             base::sink(type = "output", split = FALSE)
[16:19:55.827]             base::close(...future.stdout)
[16:19:55.827]         }, add = TRUE)
[16:19:55.827]     }
[16:19:55.827]     ...future.frame <- base::sys.nframe()
[16:19:55.827]     ...future.conditions <- base::list()
[16:19:55.827]     ...future.rng <- base::globalenv()$.Random.seed
[16:19:55.827]     if (FALSE) {
[16:19:55.827]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:19:55.827]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:19:55.827]     }
[16:19:55.827]     ...future.result <- base::tryCatch({
[16:19:55.827]         base::withCallingHandlers({
[16:19:55.827]             ...future.value <- base::withVisible(base::local({
[16:19:55.827]                 42L
[16:19:55.827]                 stop("Woops")
[16:19:55.827]             }))
[16:19:55.827]             future::FutureResult(value = ...future.value$value, 
[16:19:55.827]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:19:55.827]                   ...future.rng), globalenv = if (FALSE) 
[16:19:55.827]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:19:55.827]                     ...future.globalenv.names))
[16:19:55.827]                 else NULL, started = ...future.startTime, version = "1.8")
[16:19:55.827]         }, condition = base::local({
[16:19:55.827]             c <- base::c
[16:19:55.827]             inherits <- base::inherits
[16:19:55.827]             invokeRestart <- base::invokeRestart
[16:19:55.827]             length <- base::length
[16:19:55.827]             list <- base::list
[16:19:55.827]             seq.int <- base::seq.int
[16:19:55.827]             signalCondition <- base::signalCondition
[16:19:55.827]             sys.calls <- base::sys.calls
[16:19:55.827]             `[[` <- base::`[[`
[16:19:55.827]             `+` <- base::`+`
[16:19:55.827]             `<<-` <- base::`<<-`
[16:19:55.827]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:19:55.827]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:19:55.827]                   3L)]
[16:19:55.827]             }
[16:19:55.827]             function(cond) {
[16:19:55.827]                 is_error <- inherits(cond, "error")
[16:19:55.827]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:19:55.827]                   NULL)
[16:19:55.827]                 if (is_error) {
[16:19:55.827]                   sessionInformation <- function() {
[16:19:55.827]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:19:55.827]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:19:55.827]                       search = base::search(), system = base::Sys.info())
[16:19:55.827]                   }
[16:19:55.827]                   ...future.conditions[[length(...future.conditions) + 
[16:19:55.827]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:19:55.827]                     cond$call), session = sessionInformation(), 
[16:19:55.827]                     timestamp = base::Sys.time(), signaled = 0L)
[16:19:55.827]                   signalCondition(cond)
[16:19:55.827]                 }
[16:19:55.827]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:19:55.827]                 "immediateCondition"))) {
[16:19:55.827]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:19:55.827]                   ...future.conditions[[length(...future.conditions) + 
[16:19:55.827]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:19:55.827]                   if (TRUE && !signal) {
[16:19:55.827]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:19:55.827]                     {
[16:19:55.827]                       inherits <- base::inherits
[16:19:55.827]                       invokeRestart <- base::invokeRestart
[16:19:55.827]                       is.null <- base::is.null
[16:19:55.827]                       muffled <- FALSE
[16:19:55.827]                       if (inherits(cond, "message")) {
[16:19:55.827]                         muffled <- grepl(pattern, "muffleMessage")
[16:19:55.827]                         if (muffled) 
[16:19:55.827]                           invokeRestart("muffleMessage")
[16:19:55.827]                       }
[16:19:55.827]                       else if (inherits(cond, "warning")) {
[16:19:55.827]                         muffled <- grepl(pattern, "muffleWarning")
[16:19:55.827]                         if (muffled) 
[16:19:55.827]                           invokeRestart("muffleWarning")
[16:19:55.827]                       }
[16:19:55.827]                       else if (inherits(cond, "condition")) {
[16:19:55.827]                         if (!is.null(pattern)) {
[16:19:55.827]                           computeRestarts <- base::computeRestarts
[16:19:55.827]                           grepl <- base::grepl
[16:19:55.827]                           restarts <- computeRestarts(cond)
[16:19:55.827]                           for (restart in restarts) {
[16:19:55.827]                             name <- restart$name
[16:19:55.827]                             if (is.null(name)) 
[16:19:55.827]                               next
[16:19:55.827]                             if (!grepl(pattern, name)) 
[16:19:55.827]                               next
[16:19:55.827]                             invokeRestart(restart)
[16:19:55.827]                             muffled <- TRUE
[16:19:55.827]                             break
[16:19:55.827]                           }
[16:19:55.827]                         }
[16:19:55.827]                       }
[16:19:55.827]                       invisible(muffled)
[16:19:55.827]                     }
[16:19:55.827]                     muffleCondition(cond, pattern = "^muffle")
[16:19:55.827]                   }
[16:19:55.827]                 }
[16:19:55.827]                 else {
[16:19:55.827]                   if (TRUE) {
[16:19:55.827]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:19:55.827]                     {
[16:19:55.827]                       inherits <- base::inherits
[16:19:55.827]                       invokeRestart <- base::invokeRestart
[16:19:55.827]                       is.null <- base::is.null
[16:19:55.827]                       muffled <- FALSE
[16:19:55.827]                       if (inherits(cond, "message")) {
[16:19:55.827]                         muffled <- grepl(pattern, "muffleMessage")
[16:19:55.827]                         if (muffled) 
[16:19:55.827]                           invokeRestart("muffleMessage")
[16:19:55.827]                       }
[16:19:55.827]                       else if (inherits(cond, "warning")) {
[16:19:55.827]                         muffled <- grepl(pattern, "muffleWarning")
[16:19:55.827]                         if (muffled) 
[16:19:55.827]                           invokeRestart("muffleWarning")
[16:19:55.827]                       }
[16:19:55.827]                       else if (inherits(cond, "condition")) {
[16:19:55.827]                         if (!is.null(pattern)) {
[16:19:55.827]                           computeRestarts <- base::computeRestarts
[16:19:55.827]                           grepl <- base::grepl
[16:19:55.827]                           restarts <- computeRestarts(cond)
[16:19:55.827]                           for (restart in restarts) {
[16:19:55.827]                             name <- restart$name
[16:19:55.827]                             if (is.null(name)) 
[16:19:55.827]                               next
[16:19:55.827]                             if (!grepl(pattern, name)) 
[16:19:55.827]                               next
[16:19:55.827]                             invokeRestart(restart)
[16:19:55.827]                             muffled <- TRUE
[16:19:55.827]                             break
[16:19:55.827]                           }
[16:19:55.827]                         }
[16:19:55.827]                       }
[16:19:55.827]                       invisible(muffled)
[16:19:55.827]                     }
[16:19:55.827]                     muffleCondition(cond, pattern = "^muffle")
[16:19:55.827]                   }
[16:19:55.827]                 }
[16:19:55.827]             }
[16:19:55.827]         }))
[16:19:55.827]     }, error = function(ex) {
[16:19:55.827]         base::structure(base::list(value = NULL, visible = NULL, 
[16:19:55.827]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:19:55.827]                 ...future.rng), started = ...future.startTime, 
[16:19:55.827]             finished = Sys.time(), session_uuid = NA_character_, 
[16:19:55.827]             version = "1.8"), class = "FutureResult")
[16:19:55.827]     }, finally = {
[16:19:55.827]         if (!identical(...future.workdir, getwd())) 
[16:19:55.827]             setwd(...future.workdir)
[16:19:55.827]         {
[16:19:55.827]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:19:55.827]                 ...future.oldOptions$nwarnings <- NULL
[16:19:55.827]             }
[16:19:55.827]             base::options(...future.oldOptions)
[16:19:55.827]             if (.Platform$OS.type == "windows") {
[16:19:55.827]                 old_names <- names(...future.oldEnvVars)
[16:19:55.827]                 envs <- base::Sys.getenv()
[16:19:55.827]                 names <- names(envs)
[16:19:55.827]                 common <- intersect(names, old_names)
[16:19:55.827]                 added <- setdiff(names, old_names)
[16:19:55.827]                 removed <- setdiff(old_names, names)
[16:19:55.827]                 changed <- common[...future.oldEnvVars[common] != 
[16:19:55.827]                   envs[common]]
[16:19:55.827]                 NAMES <- toupper(changed)
[16:19:55.827]                 args <- list()
[16:19:55.827]                 for (kk in seq_along(NAMES)) {
[16:19:55.827]                   name <- changed[[kk]]
[16:19:55.827]                   NAME <- NAMES[[kk]]
[16:19:55.827]                   if (name != NAME && is.element(NAME, old_names)) 
[16:19:55.827]                     next
[16:19:55.827]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:19:55.827]                 }
[16:19:55.827]                 NAMES <- toupper(added)
[16:19:55.827]                 for (kk in seq_along(NAMES)) {
[16:19:55.827]                   name <- added[[kk]]
[16:19:55.827]                   NAME <- NAMES[[kk]]
[16:19:55.827]                   if (name != NAME && is.element(NAME, old_names)) 
[16:19:55.827]                     next
[16:19:55.827]                   args[[name]] <- ""
[16:19:55.827]                 }
[16:19:55.827]                 NAMES <- toupper(removed)
[16:19:55.827]                 for (kk in seq_along(NAMES)) {
[16:19:55.827]                   name <- removed[[kk]]
[16:19:55.827]                   NAME <- NAMES[[kk]]
[16:19:55.827]                   if (name != NAME && is.element(NAME, old_names)) 
[16:19:55.827]                     next
[16:19:55.827]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:19:55.827]                 }
[16:19:55.827]                 if (length(args) > 0) 
[16:19:55.827]                   base::do.call(base::Sys.setenv, args = args)
[16:19:55.827]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:19:55.827]             }
[16:19:55.827]             else {
[16:19:55.827]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:19:55.827]             }
[16:19:55.827]             {
[16:19:55.827]                 if (base::length(...future.futureOptionsAdded) > 
[16:19:55.827]                   0L) {
[16:19:55.827]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:19:55.827]                   base::names(opts) <- ...future.futureOptionsAdded
[16:19:55.827]                   base::options(opts)
[16:19:55.827]                 }
[16:19:55.827]                 {
[16:19:55.827]                   {
[16:19:55.827]                     NULL
[16:19:55.827]                     RNGkind("Mersenne-Twister")
[16:19:55.827]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:19:55.827]                       inherits = FALSE)
[16:19:55.827]                   }
[16:19:55.827]                   options(future.plan = NULL)
[16:19:55.827]                   if (is.na(NA_character_)) 
[16:19:55.827]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:19:55.827]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:19:55.827]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:19:55.827]                     .init = FALSE)
[16:19:55.827]                 }
[16:19:55.827]             }
[16:19:55.827]         }
[16:19:55.827]     })
[16:19:55.827]     if (TRUE) {
[16:19:55.827]         base::sink(type = "output", split = FALSE)
[16:19:55.827]         if (TRUE) {
[16:19:55.827]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:19:55.827]         }
[16:19:55.827]         else {
[16:19:55.827]             ...future.result["stdout"] <- base::list(NULL)
[16:19:55.827]         }
[16:19:55.827]         base::close(...future.stdout)
[16:19:55.827]         ...future.stdout <- NULL
[16:19:55.827]     }
[16:19:55.827]     ...future.result$conditions <- ...future.conditions
[16:19:55.827]     ...future.result$finished <- base::Sys.time()
[16:19:55.827]     ...future.result
[16:19:55.827] }
[16:19:55.829] plan(): Setting new future strategy stack:
[16:19:55.829] List of future strategies:
[16:19:55.829] 1. sequential:
[16:19:55.829]    - args: function (..., envir = parent.frame())
[16:19:55.829]    - tweaked: FALSE
[16:19:55.829]    - call: NULL
[16:19:55.829] plan(): nbrOfWorkers() = 1
[16:19:55.830] plan(): Setting new future strategy stack:
[16:19:55.830] List of future strategies:
[16:19:55.830] 1. sequential:
[16:19:55.830]    - args: function (..., envir = parent.frame())
[16:19:55.830]    - tweaked: FALSE
[16:19:55.830]    - call: future::plan("sequential")
[16:19:55.831] plan(): nbrOfWorkers() = 1
[16:19:55.831] SequentialFuture started (and completed)
[16:19:55.831] signalConditions() ...
[16:19:55.831]  - include = ‘immediateCondition’
[16:19:55.831]  - exclude = 
[16:19:55.831]  - resignal = FALSE
[16:19:55.831]  - Number of conditions: 1
[16:19:55.831] signalConditions() ... done
[16:19:55.831] - Launch lazy future ... done
[16:19:55.831] run() for ‘SequentialFuture’ ... done
> ll[[2]] <- future({ 42L; stop("Woops") })
[16:19:55.832] getGlobalsAndPackages() ...
[16:19:55.832] Searching for globals...
[16:19:55.832] - globals found: [2] ‘{’, ‘stop’
[16:19:55.833] Searching for globals ... DONE
[16:19:55.833] Resolving globals: FALSE
[16:19:55.833] 
[16:19:55.833] 
[16:19:55.833] getGlobalsAndPackages() ... DONE
[16:19:55.833] run() for ‘Future’ ...
[16:19:55.833] - state: ‘created’
[16:19:55.834] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:19:55.834] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:19:55.834] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:19:55.834]   - Field: ‘label’
[16:19:55.834]   - Field: ‘local’
[16:19:55.834]   - Field: ‘owner’
[16:19:55.834]   - Field: ‘envir’
[16:19:55.834]   - Field: ‘packages’
[16:19:55.834]   - Field: ‘gc’
[16:19:55.835]   - Field: ‘conditions’
[16:19:55.835]   - Field: ‘expr’
[16:19:55.835]   - Field: ‘uuid’
[16:19:55.835]   - Field: ‘seed’
[16:19:55.835]   - Field: ‘version’
[16:19:55.835]   - Field: ‘result’
[16:19:55.835]   - Field: ‘asynchronous’
[16:19:55.835]   - Field: ‘calls’
[16:19:55.835]   - Field: ‘globals’
[16:19:55.835]   - Field: ‘stdout’
[16:19:55.835]   - Field: ‘earlySignal’
[16:19:55.835]   - Field: ‘lazy’
[16:19:55.836]   - Field: ‘state’
[16:19:55.836] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:19:55.836] - Launch lazy future ...
[16:19:55.836] Packages needed by the future expression (n = 0): <none>
[16:19:55.836] Packages needed by future strategies (n = 0): <none>
[16:19:55.836] {
[16:19:55.836]     {
[16:19:55.836]         {
[16:19:55.836]             ...future.startTime <- base::Sys.time()
[16:19:55.836]             {
[16:19:55.836]                 {
[16:19:55.836]                   {
[16:19:55.836]                     base::local({
[16:19:55.836]                       has_future <- base::requireNamespace("future", 
[16:19:55.836]                         quietly = TRUE)
[16:19:55.836]                       if (has_future) {
[16:19:55.836]                         ns <- base::getNamespace("future")
[16:19:55.836]                         version <- ns[[".package"]][["version"]]
[16:19:55.836]                         if (is.null(version)) 
[16:19:55.836]                           version <- utils::packageVersion("future")
[16:19:55.836]                       }
[16:19:55.836]                       else {
[16:19:55.836]                         version <- NULL
[16:19:55.836]                       }
[16:19:55.836]                       if (!has_future || version < "1.8.0") {
[16:19:55.836]                         info <- base::c(r_version = base::gsub("R version ", 
[16:19:55.836]                           "", base::R.version$version.string), 
[16:19:55.836]                           platform = base::sprintf("%s (%s-bit)", 
[16:19:55.836]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:19:55.836]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:19:55.836]                             "release", "version")], collapse = " "), 
[16:19:55.836]                           hostname = base::Sys.info()[["nodename"]])
[16:19:55.836]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:19:55.836]                           info)
[16:19:55.836]                         info <- base::paste(info, collapse = "; ")
[16:19:55.836]                         if (!has_future) {
[16:19:55.836]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:19:55.836]                             info)
[16:19:55.836]                         }
[16:19:55.836]                         else {
[16:19:55.836]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:19:55.836]                             info, version)
[16:19:55.836]                         }
[16:19:55.836]                         base::stop(msg)
[16:19:55.836]                       }
[16:19:55.836]                     })
[16:19:55.836]                   }
[16:19:55.836]                   ...future.strategy.old <- future::plan("list")
[16:19:55.836]                   options(future.plan = NULL)
[16:19:55.836]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:19:55.836]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:19:55.836]                 }
[16:19:55.836]                 ...future.workdir <- getwd()
[16:19:55.836]             }
[16:19:55.836]             ...future.oldOptions <- base::as.list(base::.Options)
[16:19:55.836]             ...future.oldEnvVars <- base::Sys.getenv()
[16:19:55.836]         }
[16:19:55.836]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:19:55.836]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:19:55.836]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:19:55.836]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:19:55.836]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:19:55.836]             future.stdout.windows.reencode = NULL, width = 80L)
[16:19:55.836]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:19:55.836]             base::names(...future.oldOptions))
[16:19:55.836]     }
[16:19:55.836]     if (FALSE) {
[16:19:55.836]     }
[16:19:55.836]     else {
[16:19:55.836]         if (TRUE) {
[16:19:55.836]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:19:55.836]                 open = "w")
[16:19:55.836]         }
[16:19:55.836]         else {
[16:19:55.836]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:19:55.836]                 windows = "NUL", "/dev/null"), open = "w")
[16:19:55.836]         }
[16:19:55.836]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:19:55.836]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:19:55.836]             base::sink(type = "output", split = FALSE)
[16:19:55.836]             base::close(...future.stdout)
[16:19:55.836]         }, add = TRUE)
[16:19:55.836]     }
[16:19:55.836]     ...future.frame <- base::sys.nframe()
[16:19:55.836]     ...future.conditions <- base::list()
[16:19:55.836]     ...future.rng <- base::globalenv()$.Random.seed
[16:19:55.836]     if (FALSE) {
[16:19:55.836]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:19:55.836]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:19:55.836]     }
[16:19:55.836]     ...future.result <- base::tryCatch({
[16:19:55.836]         base::withCallingHandlers({
[16:19:55.836]             ...future.value <- base::withVisible(base::local({
[16:19:55.836]                 42L
[16:19:55.836]                 stop("Woops")
[16:19:55.836]             }))
[16:19:55.836]             future::FutureResult(value = ...future.value$value, 
[16:19:55.836]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:19:55.836]                   ...future.rng), globalenv = if (FALSE) 
[16:19:55.836]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:19:55.836]                     ...future.globalenv.names))
[16:19:55.836]                 else NULL, started = ...future.startTime, version = "1.8")
[16:19:55.836]         }, condition = base::local({
[16:19:55.836]             c <- base::c
[16:19:55.836]             inherits <- base::inherits
[16:19:55.836]             invokeRestart <- base::invokeRestart
[16:19:55.836]             length <- base::length
[16:19:55.836]             list <- base::list
[16:19:55.836]             seq.int <- base::seq.int
[16:19:55.836]             signalCondition <- base::signalCondition
[16:19:55.836]             sys.calls <- base::sys.calls
[16:19:55.836]             `[[` <- base::`[[`
[16:19:55.836]             `+` <- base::`+`
[16:19:55.836]             `<<-` <- base::`<<-`
[16:19:55.836]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:19:55.836]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:19:55.836]                   3L)]
[16:19:55.836]             }
[16:19:55.836]             function(cond) {
[16:19:55.836]                 is_error <- inherits(cond, "error")
[16:19:55.836]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:19:55.836]                   NULL)
[16:19:55.836]                 if (is_error) {
[16:19:55.836]                   sessionInformation <- function() {
[16:19:55.836]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:19:55.836]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:19:55.836]                       search = base::search(), system = base::Sys.info())
[16:19:55.836]                   }
[16:19:55.836]                   ...future.conditions[[length(...future.conditions) + 
[16:19:55.836]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:19:55.836]                     cond$call), session = sessionInformation(), 
[16:19:55.836]                     timestamp = base::Sys.time(), signaled = 0L)
[16:19:55.836]                   signalCondition(cond)
[16:19:55.836]                 }
[16:19:55.836]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:19:55.836]                 "immediateCondition"))) {
[16:19:55.836]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:19:55.836]                   ...future.conditions[[length(...future.conditions) + 
[16:19:55.836]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:19:55.836]                   if (TRUE && !signal) {
[16:19:55.836]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:19:55.836]                     {
[16:19:55.836]                       inherits <- base::inherits
[16:19:55.836]                       invokeRestart <- base::invokeRestart
[16:19:55.836]                       is.null <- base::is.null
[16:19:55.836]                       muffled <- FALSE
[16:19:55.836]                       if (inherits(cond, "message")) {
[16:19:55.836]                         muffled <- grepl(pattern, "muffleMessage")
[16:19:55.836]                         if (muffled) 
[16:19:55.836]                           invokeRestart("muffleMessage")
[16:19:55.836]                       }
[16:19:55.836]                       else if (inherits(cond, "warning")) {
[16:19:55.836]                         muffled <- grepl(pattern, "muffleWarning")
[16:19:55.836]                         if (muffled) 
[16:19:55.836]                           invokeRestart("muffleWarning")
[16:19:55.836]                       }
[16:19:55.836]                       else if (inherits(cond, "condition")) {
[16:19:55.836]                         if (!is.null(pattern)) {
[16:19:55.836]                           computeRestarts <- base::computeRestarts
[16:19:55.836]                           grepl <- base::grepl
[16:19:55.836]                           restarts <- computeRestarts(cond)
[16:19:55.836]                           for (restart in restarts) {
[16:19:55.836]                             name <- restart$name
[16:19:55.836]                             if (is.null(name)) 
[16:19:55.836]                               next
[16:19:55.836]                             if (!grepl(pattern, name)) 
[16:19:55.836]                               next
[16:19:55.836]                             invokeRestart(restart)
[16:19:55.836]                             muffled <- TRUE
[16:19:55.836]                             break
[16:19:55.836]                           }
[16:19:55.836]                         }
[16:19:55.836]                       }
[16:19:55.836]                       invisible(muffled)
[16:19:55.836]                     }
[16:19:55.836]                     muffleCondition(cond, pattern = "^muffle")
[16:19:55.836]                   }
[16:19:55.836]                 }
[16:19:55.836]                 else {
[16:19:55.836]                   if (TRUE) {
[16:19:55.836]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:19:55.836]                     {
[16:19:55.836]                       inherits <- base::inherits
[16:19:55.836]                       invokeRestart <- base::invokeRestart
[16:19:55.836]                       is.null <- base::is.null
[16:19:55.836]                       muffled <- FALSE
[16:19:55.836]                       if (inherits(cond, "message")) {
[16:19:55.836]                         muffled <- grepl(pattern, "muffleMessage")
[16:19:55.836]                         if (muffled) 
[16:19:55.836]                           invokeRestart("muffleMessage")
[16:19:55.836]                       }
[16:19:55.836]                       else if (inherits(cond, "warning")) {
[16:19:55.836]                         muffled <- grepl(pattern, "muffleWarning")
[16:19:55.836]                         if (muffled) 
[16:19:55.836]                           invokeRestart("muffleWarning")
[16:19:55.836]                       }
[16:19:55.836]                       else if (inherits(cond, "condition")) {
[16:19:55.836]                         if (!is.null(pattern)) {
[16:19:55.836]                           computeRestarts <- base::computeRestarts
[16:19:55.836]                           grepl <- base::grepl
[16:19:55.836]                           restarts <- computeRestarts(cond)
[16:19:55.836]                           for (restart in restarts) {
[16:19:55.836]                             name <- restart$name
[16:19:55.836]                             if (is.null(name)) 
[16:19:55.836]                               next
[16:19:55.836]                             if (!grepl(pattern, name)) 
[16:19:55.836]                               next
[16:19:55.836]                             invokeRestart(restart)
[16:19:55.836]                             muffled <- TRUE
[16:19:55.836]                             break
[16:19:55.836]                           }
[16:19:55.836]                         }
[16:19:55.836]                       }
[16:19:55.836]                       invisible(muffled)
[16:19:55.836]                     }
[16:19:55.836]                     muffleCondition(cond, pattern = "^muffle")
[16:19:55.836]                   }
[16:19:55.836]                 }
[16:19:55.836]             }
[16:19:55.836]         }))
[16:19:55.836]     }, error = function(ex) {
[16:19:55.836]         base::structure(base::list(value = NULL, visible = NULL, 
[16:19:55.836]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:19:55.836]                 ...future.rng), started = ...future.startTime, 
[16:19:55.836]             finished = Sys.time(), session_uuid = NA_character_, 
[16:19:55.836]             version = "1.8"), class = "FutureResult")
[16:19:55.836]     }, finally = {
[16:19:55.836]         if (!identical(...future.workdir, getwd())) 
[16:19:55.836]             setwd(...future.workdir)
[16:19:55.836]         {
[16:19:55.836]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:19:55.836]                 ...future.oldOptions$nwarnings <- NULL
[16:19:55.836]             }
[16:19:55.836]             base::options(...future.oldOptions)
[16:19:55.836]             if (.Platform$OS.type == "windows") {
[16:19:55.836]                 old_names <- names(...future.oldEnvVars)
[16:19:55.836]                 envs <- base::Sys.getenv()
[16:19:55.836]                 names <- names(envs)
[16:19:55.836]                 common <- intersect(names, old_names)
[16:19:55.836]                 added <- setdiff(names, old_names)
[16:19:55.836]                 removed <- setdiff(old_names, names)
[16:19:55.836]                 changed <- common[...future.oldEnvVars[common] != 
[16:19:55.836]                   envs[common]]
[16:19:55.836]                 NAMES <- toupper(changed)
[16:19:55.836]                 args <- list()
[16:19:55.836]                 for (kk in seq_along(NAMES)) {
[16:19:55.836]                   name <- changed[[kk]]
[16:19:55.836]                   NAME <- NAMES[[kk]]
[16:19:55.836]                   if (name != NAME && is.element(NAME, old_names)) 
[16:19:55.836]                     next
[16:19:55.836]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:19:55.836]                 }
[16:19:55.836]                 NAMES <- toupper(added)
[16:19:55.836]                 for (kk in seq_along(NAMES)) {
[16:19:55.836]                   name <- added[[kk]]
[16:19:55.836]                   NAME <- NAMES[[kk]]
[16:19:55.836]                   if (name != NAME && is.element(NAME, old_names)) 
[16:19:55.836]                     next
[16:19:55.836]                   args[[name]] <- ""
[16:19:55.836]                 }
[16:19:55.836]                 NAMES <- toupper(removed)
[16:19:55.836]                 for (kk in seq_along(NAMES)) {
[16:19:55.836]                   name <- removed[[kk]]
[16:19:55.836]                   NAME <- NAMES[[kk]]
[16:19:55.836]                   if (name != NAME && is.element(NAME, old_names)) 
[16:19:55.836]                     next
[16:19:55.836]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:19:55.836]                 }
[16:19:55.836]                 if (length(args) > 0) 
[16:19:55.836]                   base::do.call(base::Sys.setenv, args = args)
[16:19:55.836]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:19:55.836]             }
[16:19:55.836]             else {
[16:19:55.836]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:19:55.836]             }
[16:19:55.836]             {
[16:19:55.836]                 if (base::length(...future.futureOptionsAdded) > 
[16:19:55.836]                   0L) {
[16:19:55.836]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:19:55.836]                   base::names(opts) <- ...future.futureOptionsAdded
[16:19:55.836]                   base::options(opts)
[16:19:55.836]                 }
[16:19:55.836]                 {
[16:19:55.836]                   {
[16:19:55.836]                     NULL
[16:19:55.836]                     RNGkind("Mersenne-Twister")
[16:19:55.836]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:19:55.836]                       inherits = FALSE)
[16:19:55.836]                   }
[16:19:55.836]                   options(future.plan = NULL)
[16:19:55.836]                   if (is.na(NA_character_)) 
[16:19:55.836]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:19:55.836]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:19:55.836]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:19:55.836]                     .init = FALSE)
[16:19:55.836]                 }
[16:19:55.836]             }
[16:19:55.836]         }
[16:19:55.836]     })
[16:19:55.836]     if (TRUE) {
[16:19:55.836]         base::sink(type = "output", split = FALSE)
[16:19:55.836]         if (TRUE) {
[16:19:55.836]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:19:55.836]         }
[16:19:55.836]         else {
[16:19:55.836]             ...future.result["stdout"] <- base::list(NULL)
[16:19:55.836]         }
[16:19:55.836]         base::close(...future.stdout)
[16:19:55.836]         ...future.stdout <- NULL
[16:19:55.836]     }
[16:19:55.836]     ...future.result$conditions <- ...future.conditions
[16:19:55.836]     ...future.result$finished <- base::Sys.time()
[16:19:55.836]     ...future.result
[16:19:55.836] }
[16:19:55.838] plan(): Setting new future strategy stack:
[16:19:55.838] List of future strategies:
[16:19:55.838] 1. sequential:
[16:19:55.838]    - args: function (..., envir = parent.frame())
[16:19:55.838]    - tweaked: FALSE
[16:19:55.838]    - call: NULL
[16:19:55.838] plan(): nbrOfWorkers() = 1
[16:19:55.839] plan(): Setting new future strategy stack:
[16:19:55.839] List of future strategies:
[16:19:55.839] 1. sequential:
[16:19:55.839]    - args: function (..., envir = parent.frame())
[16:19:55.839]    - tweaked: FALSE
[16:19:55.839]    - call: future::plan("sequential")
[16:19:55.840] plan(): nbrOfWorkers() = 1
[16:19:55.840] SequentialFuture started (and completed)
[16:19:55.840] signalConditions() ...
[16:19:55.840]  - include = ‘immediateCondition’
[16:19:55.840]  - exclude = 
[16:19:55.840]  - resignal = FALSE
[16:19:55.840]  - Number of conditions: 1
[16:19:55.840] signalConditions() ... done
[16:19:55.840] - Launch lazy future ... done
[16:19:55.841] run() for ‘SequentialFuture’ ... done
> vs <- value(ll, signal = FALSE)
[16:19:55.841] resolve() on list ...
[16:19:55.841]  recursive: 0
[16:19:55.841]  length: 2
[16:19:55.841] 
[16:19:55.842] resolved() for ‘SequentialFuture’ ...
[16:19:55.842] - state: ‘finished’
[16:19:55.842] - run: TRUE
[16:19:55.842] - result: ‘FutureResult’
[16:19:55.842] resolved() for ‘SequentialFuture’ ... done
[16:19:55.842] Future #1
[16:19:55.842] signalConditions() ...
[16:19:55.842]  - include = ‘immediateCondition’
[16:19:55.842]  - exclude = 
[16:19:55.842]  - resignal = FALSE
[16:19:55.842]  - Number of conditions: 1
[16:19:55.843] signalConditions() ... done
[16:19:55.843] signalConditionsASAP(SequentialFuture, pos=1) ...
[16:19:55.843] - nx: 2
[16:19:55.843] - relay: TRUE
[16:19:55.843] - stdout: TRUE
[16:19:55.843] - signal: FALSE
[16:19:55.843] - resignal: FALSE
[16:19:55.843] - force: TRUE
[16:19:55.843] - relayed: [n=2] FALSE, FALSE
[16:19:55.843] - queued futures: [n=2] FALSE, FALSE
[16:19:55.843]  - until=1
[16:19:55.843]  - relaying element #1
[16:19:55.844] signalConditions() ...
[16:19:55.844]  - include = ‘immediateCondition’
[16:19:55.844]  - exclude = 
[16:19:55.844]  - resignal = FALSE
[16:19:55.844]  - Number of conditions: 1
[16:19:55.844] signalConditions() ... done
[16:19:55.844] - relayed: [n=2] TRUE, FALSE
[16:19:55.844] - queued futures: [n=2] TRUE, FALSE
[16:19:55.845] signalConditionsASAP(SequentialFuture, pos=1) ... done
[16:19:55.846]  length: 1 (resolved future 1)
[16:19:55.846] resolved() for ‘SequentialFuture’ ...
[16:19:55.846] - state: ‘finished’
[16:19:55.846] - run: TRUE
[16:19:55.846] - result: ‘FutureResult’
[16:19:55.846] resolved() for ‘SequentialFuture’ ... done
[16:19:55.846] Future #2
[16:19:55.846] signalConditions() ...
[16:19:55.846]  - include = ‘immediateCondition’
[16:19:55.846]  - exclude = 
[16:19:55.847]  - resignal = FALSE
[16:19:55.847]  - Number of conditions: 1
[16:19:55.847] signalConditions() ... done
[16:19:55.847] signalConditionsASAP(SequentialFuture, pos=2) ...
[16:19:55.847] - nx: 2
[16:19:55.847] - relay: TRUE
[16:19:55.847] - stdout: TRUE
[16:19:55.847] - signal: FALSE
[16:19:55.847] - resignal: FALSE
[16:19:55.847] - force: TRUE
[16:19:55.847] - relayed: [n=2] TRUE, FALSE
[16:19:55.847] - queued futures: [n=2] TRUE, FALSE
[16:19:55.848]  - until=2
[16:19:55.848]  - relaying element #2
[16:19:55.848] signalConditions() ...
[16:19:55.848]  - include = ‘immediateCondition’
[16:19:55.848]  - exclude = 
[16:19:55.848]  - resignal = FALSE
[16:19:55.848]  - Number of conditions: 1
[16:19:55.848] signalConditions() ... done
[16:19:55.848] - relayed: [n=2] TRUE, TRUE
[16:19:55.848] - queued futures: [n=2] TRUE, TRUE
[16:19:55.848] signalConditionsASAP(SequentialFuture, pos=2) ... done
[16:19:55.849]  length: 0 (resolved future 2)
[16:19:55.849] Relaying remaining futures
[16:19:55.849] signalConditionsASAP(NULL, pos=0) ...
[16:19:55.849] - nx: 2
[16:19:55.849] - relay: TRUE
[16:19:55.849] - stdout: TRUE
[16:19:55.849] - signal: FALSE
[16:19:55.849] - resignal: FALSE
[16:19:55.849] - force: TRUE
[16:19:55.849] - relayed: [n=2] TRUE, TRUE
[16:19:55.849] - queued futures: [n=2] TRUE, TRUE
 - flush all
[16:19:55.849] - relayed: [n=2] TRUE, TRUE
[16:19:55.850] - queued futures: [n=2] TRUE, TRUE
[16:19:55.850] signalConditionsASAP(NULL, pos=0) ... done
[16:19:55.850] resolve() on list ... DONE
[16:19:55.850] signalConditions() ...
[16:19:55.850]  - include = ‘immediateCondition’
[16:19:55.850]  - exclude = 
[16:19:55.850]  - resignal = FALSE
[16:19:55.850]  - Number of conditions: 1
[16:19:55.850] signalConditions() ... done
[16:19:55.850] signalConditions() ...
[16:19:55.850]  - include = ‘immediateCondition’
[16:19:55.851]  - exclude = 
[16:19:55.851]  - resignal = FALSE
[16:19:55.851]  - Number of conditions: 1
[16:19:55.851] signalConditions() ... done
> calls <- backtrace(ll[[2]])
[16:19:55.851] resolved() for ‘SequentialFuture’ ...
[16:19:55.851] - state: ‘finished’
[16:19:55.851] - run: TRUE
[16:19:55.851] - result: ‘FutureResult’
[16:19:55.851] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
future({
    42L
    stop("Woops")
})

[[2]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[3]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[4]]
stop("Woops")

[[5]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> message("*** backtrace( ) - subsetting ... DONE")
*** backtrace( ) - subsetting ... DONE
> 
> 
> message("*** backtrace( ) - exceptions ...")
*** backtrace( ) - exceptions ...
> 
> message("- No condition ...")
- No condition ...
> f <- future(42L)
[16:19:55.852] getGlobalsAndPackages() ...
[16:19:55.852] Searching for globals...
[16:19:55.852] 
[16:19:55.853] Searching for globals ... DONE
[16:19:55.853] - globals: [0] <none>
[16:19:55.853] getGlobalsAndPackages() ... DONE
[16:19:55.853] run() for ‘Future’ ...
[16:19:55.853] - state: ‘created’
[16:19:55.853] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:19:55.853] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:19:55.853] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:19:55.854]   - Field: ‘label’
[16:19:55.854]   - Field: ‘local’
[16:19:55.854]   - Field: ‘owner’
[16:19:55.854]   - Field: ‘envir’
[16:19:55.854]   - Field: ‘packages’
[16:19:55.854]   - Field: ‘gc’
[16:19:55.854]   - Field: ‘conditions’
[16:19:55.854]   - Field: ‘expr’
[16:19:55.854]   - Field: ‘uuid’
[16:19:55.854]   - Field: ‘seed’
[16:19:55.854]   - Field: ‘version’
[16:19:55.854]   - Field: ‘result’
[16:19:55.855]   - Field: ‘asynchronous’
[16:19:55.855]   - Field: ‘calls’
[16:19:55.855]   - Field: ‘globals’
[16:19:55.855]   - Field: ‘stdout’
[16:19:55.855]   - Field: ‘earlySignal’
[16:19:55.855]   - Field: ‘lazy’
[16:19:55.855]   - Field: ‘state’
[16:19:55.855] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:19:55.855] - Launch lazy future ...
[16:19:55.855] Packages needed by the future expression (n = 0): <none>
[16:19:55.855] Packages needed by future strategies (n = 0): <none>
[16:19:55.856] {
[16:19:55.856]     {
[16:19:55.856]         {
[16:19:55.856]             ...future.startTime <- base::Sys.time()
[16:19:55.856]             {
[16:19:55.856]                 {
[16:19:55.856]                   {
[16:19:55.856]                     base::local({
[16:19:55.856]                       has_future <- base::requireNamespace("future", 
[16:19:55.856]                         quietly = TRUE)
[16:19:55.856]                       if (has_future) {
[16:19:55.856]                         ns <- base::getNamespace("future")
[16:19:55.856]                         version <- ns[[".package"]][["version"]]
[16:19:55.856]                         if (is.null(version)) 
[16:19:55.856]                           version <- utils::packageVersion("future")
[16:19:55.856]                       }
[16:19:55.856]                       else {
[16:19:55.856]                         version <- NULL
[16:19:55.856]                       }
[16:19:55.856]                       if (!has_future || version < "1.8.0") {
[16:19:55.856]                         info <- base::c(r_version = base::gsub("R version ", 
[16:19:55.856]                           "", base::R.version$version.string), 
[16:19:55.856]                           platform = base::sprintf("%s (%s-bit)", 
[16:19:55.856]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:19:55.856]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:19:55.856]                             "release", "version")], collapse = " "), 
[16:19:55.856]                           hostname = base::Sys.info()[["nodename"]])
[16:19:55.856]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:19:55.856]                           info)
[16:19:55.856]                         info <- base::paste(info, collapse = "; ")
[16:19:55.856]                         if (!has_future) {
[16:19:55.856]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:19:55.856]                             info)
[16:19:55.856]                         }
[16:19:55.856]                         else {
[16:19:55.856]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:19:55.856]                             info, version)
[16:19:55.856]                         }
[16:19:55.856]                         base::stop(msg)
[16:19:55.856]                       }
[16:19:55.856]                     })
[16:19:55.856]                   }
[16:19:55.856]                   ...future.strategy.old <- future::plan("list")
[16:19:55.856]                   options(future.plan = NULL)
[16:19:55.856]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:19:55.856]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:19:55.856]                 }
[16:19:55.856]                 ...future.workdir <- getwd()
[16:19:55.856]             }
[16:19:55.856]             ...future.oldOptions <- base::as.list(base::.Options)
[16:19:55.856]             ...future.oldEnvVars <- base::Sys.getenv()
[16:19:55.856]         }
[16:19:55.856]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:19:55.856]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:19:55.856]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:19:55.856]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:19:55.856]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:19:55.856]             future.stdout.windows.reencode = NULL, width = 80L)
[16:19:55.856]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:19:55.856]             base::names(...future.oldOptions))
[16:19:55.856]     }
[16:19:55.856]     if (FALSE) {
[16:19:55.856]     }
[16:19:55.856]     else {
[16:19:55.856]         if (TRUE) {
[16:19:55.856]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:19:55.856]                 open = "w")
[16:19:55.856]         }
[16:19:55.856]         else {
[16:19:55.856]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:19:55.856]                 windows = "NUL", "/dev/null"), open = "w")
[16:19:55.856]         }
[16:19:55.856]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:19:55.856]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:19:55.856]             base::sink(type = "output", split = FALSE)
[16:19:55.856]             base::close(...future.stdout)
[16:19:55.856]         }, add = TRUE)
[16:19:55.856]     }
[16:19:55.856]     ...future.frame <- base::sys.nframe()
[16:19:55.856]     ...future.conditions <- base::list()
[16:19:55.856]     ...future.rng <- base::globalenv()$.Random.seed
[16:19:55.856]     if (FALSE) {
[16:19:55.856]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:19:55.856]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:19:55.856]     }
[16:19:55.856]     ...future.result <- base::tryCatch({
[16:19:55.856]         base::withCallingHandlers({
[16:19:55.856]             ...future.value <- base::withVisible(base::local(42L))
[16:19:55.856]             future::FutureResult(value = ...future.value$value, 
[16:19:55.856]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:19:55.856]                   ...future.rng), globalenv = if (FALSE) 
[16:19:55.856]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:19:55.856]                     ...future.globalenv.names))
[16:19:55.856]                 else NULL, started = ...future.startTime, version = "1.8")
[16:19:55.856]         }, condition = base::local({
[16:19:55.856]             c <- base::c
[16:19:55.856]             inherits <- base::inherits
[16:19:55.856]             invokeRestart <- base::invokeRestart
[16:19:55.856]             length <- base::length
[16:19:55.856]             list <- base::list
[16:19:55.856]             seq.int <- base::seq.int
[16:19:55.856]             signalCondition <- base::signalCondition
[16:19:55.856]             sys.calls <- base::sys.calls
[16:19:55.856]             `[[` <- base::`[[`
[16:19:55.856]             `+` <- base::`+`
[16:19:55.856]             `<<-` <- base::`<<-`
[16:19:55.856]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:19:55.856]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:19:55.856]                   3L)]
[16:19:55.856]             }
[16:19:55.856]             function(cond) {
[16:19:55.856]                 is_error <- inherits(cond, "error")
[16:19:55.856]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:19:55.856]                   NULL)
[16:19:55.856]                 if (is_error) {
[16:19:55.856]                   sessionInformation <- function() {
[16:19:55.856]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:19:55.856]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:19:55.856]                       search = base::search(), system = base::Sys.info())
[16:19:55.856]                   }
[16:19:55.856]                   ...future.conditions[[length(...future.conditions) + 
[16:19:55.856]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:19:55.856]                     cond$call), session = sessionInformation(), 
[16:19:55.856]                     timestamp = base::Sys.time(), signaled = 0L)
[16:19:55.856]                   signalCondition(cond)
[16:19:55.856]                 }
[16:19:55.856]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:19:55.856]                 "immediateCondition"))) {
[16:19:55.856]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:19:55.856]                   ...future.conditions[[length(...future.conditions) + 
[16:19:55.856]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:19:55.856]                   if (TRUE && !signal) {
[16:19:55.856]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:19:55.856]                     {
[16:19:55.856]                       inherits <- base::inherits
[16:19:55.856]                       invokeRestart <- base::invokeRestart
[16:19:55.856]                       is.null <- base::is.null
[16:19:55.856]                       muffled <- FALSE
[16:19:55.856]                       if (inherits(cond, "message")) {
[16:19:55.856]                         muffled <- grepl(pattern, "muffleMessage")
[16:19:55.856]                         if (muffled) 
[16:19:55.856]                           invokeRestart("muffleMessage")
[16:19:55.856]                       }
[16:19:55.856]                       else if (inherits(cond, "warning")) {
[16:19:55.856]                         muffled <- grepl(pattern, "muffleWarning")
[16:19:55.856]                         if (muffled) 
[16:19:55.856]                           invokeRestart("muffleWarning")
[16:19:55.856]                       }
[16:19:55.856]                       else if (inherits(cond, "condition")) {
[16:19:55.856]                         if (!is.null(pattern)) {
[16:19:55.856]                           computeRestarts <- base::computeRestarts
[16:19:55.856]                           grepl <- base::grepl
[16:19:55.856]                           restarts <- computeRestarts(cond)
[16:19:55.856]                           for (restart in restarts) {
[16:19:55.856]                             name <- restart$name
[16:19:55.856]                             if (is.null(name)) 
[16:19:55.856]                               next
[16:19:55.856]                             if (!grepl(pattern, name)) 
[16:19:55.856]                               next
[16:19:55.856]                             invokeRestart(restart)
[16:19:55.856]                             muffled <- TRUE
[16:19:55.856]                             break
[16:19:55.856]                           }
[16:19:55.856]                         }
[16:19:55.856]                       }
[16:19:55.856]                       invisible(muffled)
[16:19:55.856]                     }
[16:19:55.856]                     muffleCondition(cond, pattern = "^muffle")
[16:19:55.856]                   }
[16:19:55.856]                 }
[16:19:55.856]                 else {
[16:19:55.856]                   if (TRUE) {
[16:19:55.856]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:19:55.856]                     {
[16:19:55.856]                       inherits <- base::inherits
[16:19:55.856]                       invokeRestart <- base::invokeRestart
[16:19:55.856]                       is.null <- base::is.null
[16:19:55.856]                       muffled <- FALSE
[16:19:55.856]                       if (inherits(cond, "message")) {
[16:19:55.856]                         muffled <- grepl(pattern, "muffleMessage")
[16:19:55.856]                         if (muffled) 
[16:19:55.856]                           invokeRestart("muffleMessage")
[16:19:55.856]                       }
[16:19:55.856]                       else if (inherits(cond, "warning")) {
[16:19:55.856]                         muffled <- grepl(pattern, "muffleWarning")
[16:19:55.856]                         if (muffled) 
[16:19:55.856]                           invokeRestart("muffleWarning")
[16:19:55.856]                       }
[16:19:55.856]                       else if (inherits(cond, "condition")) {
[16:19:55.856]                         if (!is.null(pattern)) {
[16:19:55.856]                           computeRestarts <- base::computeRestarts
[16:19:55.856]                           grepl <- base::grepl
[16:19:55.856]                           restarts <- computeRestarts(cond)
[16:19:55.856]                           for (restart in restarts) {
[16:19:55.856]                             name <- restart$name
[16:19:55.856]                             if (is.null(name)) 
[16:19:55.856]                               next
[16:19:55.856]                             if (!grepl(pattern, name)) 
[16:19:55.856]                               next
[16:19:55.856]                             invokeRestart(restart)
[16:19:55.856]                             muffled <- TRUE
[16:19:55.856]                             break
[16:19:55.856]                           }
[16:19:55.856]                         }
[16:19:55.856]                       }
[16:19:55.856]                       invisible(muffled)
[16:19:55.856]                     }
[16:19:55.856]                     muffleCondition(cond, pattern = "^muffle")
[16:19:55.856]                   }
[16:19:55.856]                 }
[16:19:55.856]             }
[16:19:55.856]         }))
[16:19:55.856]     }, error = function(ex) {
[16:19:55.856]         base::structure(base::list(value = NULL, visible = NULL, 
[16:19:55.856]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:19:55.856]                 ...future.rng), started = ...future.startTime, 
[16:19:55.856]             finished = Sys.time(), session_uuid = NA_character_, 
[16:19:55.856]             version = "1.8"), class = "FutureResult")
[16:19:55.856]     }, finally = {
[16:19:55.856]         if (!identical(...future.workdir, getwd())) 
[16:19:55.856]             setwd(...future.workdir)
[16:19:55.856]         {
[16:19:55.856]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:19:55.856]                 ...future.oldOptions$nwarnings <- NULL
[16:19:55.856]             }
[16:19:55.856]             base::options(...future.oldOptions)
[16:19:55.856]             if (.Platform$OS.type == "windows") {
[16:19:55.856]                 old_names <- names(...future.oldEnvVars)
[16:19:55.856]                 envs <- base::Sys.getenv()
[16:19:55.856]                 names <- names(envs)
[16:19:55.856]                 common <- intersect(names, old_names)
[16:19:55.856]                 added <- setdiff(names, old_names)
[16:19:55.856]                 removed <- setdiff(old_names, names)
[16:19:55.856]                 changed <- common[...future.oldEnvVars[common] != 
[16:19:55.856]                   envs[common]]
[16:19:55.856]                 NAMES <- toupper(changed)
[16:19:55.856]                 args <- list()
[16:19:55.856]                 for (kk in seq_along(NAMES)) {
[16:19:55.856]                   name <- changed[[kk]]
[16:19:55.856]                   NAME <- NAMES[[kk]]
[16:19:55.856]                   if (name != NAME && is.element(NAME, old_names)) 
[16:19:55.856]                     next
[16:19:55.856]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:19:55.856]                 }
[16:19:55.856]                 NAMES <- toupper(added)
[16:19:55.856]                 for (kk in seq_along(NAMES)) {
[16:19:55.856]                   name <- added[[kk]]
[16:19:55.856]                   NAME <- NAMES[[kk]]
[16:19:55.856]                   if (name != NAME && is.element(NAME, old_names)) 
[16:19:55.856]                     next
[16:19:55.856]                   args[[name]] <- ""
[16:19:55.856]                 }
[16:19:55.856]                 NAMES <- toupper(removed)
[16:19:55.856]                 for (kk in seq_along(NAMES)) {
[16:19:55.856]                   name <- removed[[kk]]
[16:19:55.856]                   NAME <- NAMES[[kk]]
[16:19:55.856]                   if (name != NAME && is.element(NAME, old_names)) 
[16:19:55.856]                     next
[16:19:55.856]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:19:55.856]                 }
[16:19:55.856]                 if (length(args) > 0) 
[16:19:55.856]                   base::do.call(base::Sys.setenv, args = args)
[16:19:55.856]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:19:55.856]             }
[16:19:55.856]             else {
[16:19:55.856]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:19:55.856]             }
[16:19:55.856]             {
[16:19:55.856]                 if (base::length(...future.futureOptionsAdded) > 
[16:19:55.856]                   0L) {
[16:19:55.856]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:19:55.856]                   base::names(opts) <- ...future.futureOptionsAdded
[16:19:55.856]                   base::options(opts)
[16:19:55.856]                 }
[16:19:55.856]                 {
[16:19:55.856]                   {
[16:19:55.856]                     NULL
[16:19:55.856]                     RNGkind("Mersenne-Twister")
[16:19:55.856]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:19:55.856]                       inherits = FALSE)
[16:19:55.856]                   }
[16:19:55.856]                   options(future.plan = NULL)
[16:19:55.856]                   if (is.na(NA_character_)) 
[16:19:55.856]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:19:55.856]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:19:55.856]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:19:55.856]                     .init = FALSE)
[16:19:55.856]                 }
[16:19:55.856]             }
[16:19:55.856]         }
[16:19:55.856]     })
[16:19:55.856]     if (TRUE) {
[16:19:55.856]         base::sink(type = "output", split = FALSE)
[16:19:55.856]         if (TRUE) {
[16:19:55.856]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:19:55.856]         }
[16:19:55.856]         else {
[16:19:55.856]             ...future.result["stdout"] <- base::list(NULL)
[16:19:55.856]         }
[16:19:55.856]         base::close(...future.stdout)
[16:19:55.856]         ...future.stdout <- NULL
[16:19:55.856]     }
[16:19:55.856]     ...future.result$conditions <- ...future.conditions
[16:19:55.856]     ...future.result$finished <- base::Sys.time()
[16:19:55.856]     ...future.result
[16:19:55.856] }
[16:19:55.858] plan(): Setting new future strategy stack:
[16:19:55.858] List of future strategies:
[16:19:55.858] 1. sequential:
[16:19:55.858]    - args: function (..., envir = parent.frame())
[16:19:55.858]    - tweaked: FALSE
[16:19:55.858]    - call: NULL
[16:19:55.858] plan(): nbrOfWorkers() = 1
[16:19:55.859] plan(): Setting new future strategy stack:
[16:19:55.859] List of future strategies:
[16:19:55.859] 1. sequential:
[16:19:55.859]    - args: function (..., envir = parent.frame())
[16:19:55.859]    - tweaked: FALSE
[16:19:55.859]    - call: future::plan("sequential")
[16:19:55.859] plan(): nbrOfWorkers() = 1
[16:19:55.860] SequentialFuture started (and completed)
[16:19:55.860] - Launch lazy future ... done
[16:19:55.860] run() for ‘SequentialFuture’ ... done
> res <- tryCatch(backtrace(f), error = identity)
[16:19:55.860] resolved() for ‘SequentialFuture’ ...
[16:19:55.860] - state: ‘finished’
[16:19:55.860] - run: TRUE
[16:19:55.860] - result: ‘FutureResult’
[16:19:55.860] resolved() for ‘SequentialFuture’ ... done
> print(res)
<simpleError: No error was caught for this future: ‘f’>
> stopifnot(inherits(res, "error"))
> 
> message("- No call stack ...")
- No call stack ...
> f <- future({ 42L; stop("Woops") })
[16:19:55.861] getGlobalsAndPackages() ...
[16:19:55.861] Searching for globals...
[16:19:55.862] - globals found: [2] ‘{’, ‘stop’
[16:19:55.862] Searching for globals ... DONE
[16:19:55.862] Resolving globals: FALSE
[16:19:55.862] 
[16:19:55.862] 
[16:19:55.862] getGlobalsAndPackages() ... DONE
[16:19:55.863] run() for ‘Future’ ...
[16:19:55.863] - state: ‘created’
[16:19:55.863] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:19:55.863] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:19:55.863] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:19:55.863]   - Field: ‘label’
[16:19:55.863]   - Field: ‘local’
[16:19:55.863]   - Field: ‘owner’
[16:19:55.863]   - Field: ‘envir’
[16:19:55.864]   - Field: ‘packages’
[16:19:55.864]   - Field: ‘gc’
[16:19:55.864]   - Field: ‘conditions’
[16:19:55.864]   - Field: ‘expr’
[16:19:55.864]   - Field: ‘uuid’
[16:19:55.864]   - Field: ‘seed’
[16:19:55.864]   - Field: ‘version’
[16:19:55.864]   - Field: ‘result’
[16:19:55.864]   - Field: ‘asynchronous’
[16:19:55.864]   - Field: ‘calls’
[16:19:55.864]   - Field: ‘globals’
[16:19:55.865]   - Field: ‘stdout’
[16:19:55.865]   - Field: ‘earlySignal’
[16:19:55.865]   - Field: ‘lazy’
[16:19:55.865]   - Field: ‘state’
[16:19:55.865] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:19:55.865] - Launch lazy future ...
[16:19:55.865] Packages needed by the future expression (n = 0): <none>
[16:19:55.865] Packages needed by future strategies (n = 0): <none>
[16:19:55.866] {
[16:19:55.866]     {
[16:19:55.866]         {
[16:19:55.866]             ...future.startTime <- base::Sys.time()
[16:19:55.866]             {
[16:19:55.866]                 {
[16:19:55.866]                   {
[16:19:55.866]                     base::local({
[16:19:55.866]                       has_future <- base::requireNamespace("future", 
[16:19:55.866]                         quietly = TRUE)
[16:19:55.866]                       if (has_future) {
[16:19:55.866]                         ns <- base::getNamespace("future")
[16:19:55.866]                         version <- ns[[".package"]][["version"]]
[16:19:55.866]                         if (is.null(version)) 
[16:19:55.866]                           version <- utils::packageVersion("future")
[16:19:55.866]                       }
[16:19:55.866]                       else {
[16:19:55.866]                         version <- NULL
[16:19:55.866]                       }
[16:19:55.866]                       if (!has_future || version < "1.8.0") {
[16:19:55.866]                         info <- base::c(r_version = base::gsub("R version ", 
[16:19:55.866]                           "", base::R.version$version.string), 
[16:19:55.866]                           platform = base::sprintf("%s (%s-bit)", 
[16:19:55.866]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:19:55.866]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:19:55.866]                             "release", "version")], collapse = " "), 
[16:19:55.866]                           hostname = base::Sys.info()[["nodename"]])
[16:19:55.866]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:19:55.866]                           info)
[16:19:55.866]                         info <- base::paste(info, collapse = "; ")
[16:19:55.866]                         if (!has_future) {
[16:19:55.866]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:19:55.866]                             info)
[16:19:55.866]                         }
[16:19:55.866]                         else {
[16:19:55.866]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:19:55.866]                             info, version)
[16:19:55.866]                         }
[16:19:55.866]                         base::stop(msg)
[16:19:55.866]                       }
[16:19:55.866]                     })
[16:19:55.866]                   }
[16:19:55.866]                   ...future.strategy.old <- future::plan("list")
[16:19:55.866]                   options(future.plan = NULL)
[16:19:55.866]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:19:55.866]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:19:55.866]                 }
[16:19:55.866]                 ...future.workdir <- getwd()
[16:19:55.866]             }
[16:19:55.866]             ...future.oldOptions <- base::as.list(base::.Options)
[16:19:55.866]             ...future.oldEnvVars <- base::Sys.getenv()
[16:19:55.866]         }
[16:19:55.866]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:19:55.866]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:19:55.866]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:19:55.866]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:19:55.866]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:19:55.866]             future.stdout.windows.reencode = NULL, width = 80L)
[16:19:55.866]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:19:55.866]             base::names(...future.oldOptions))
[16:19:55.866]     }
[16:19:55.866]     if (FALSE) {
[16:19:55.866]     }
[16:19:55.866]     else {
[16:19:55.866]         if (TRUE) {
[16:19:55.866]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:19:55.866]                 open = "w")
[16:19:55.866]         }
[16:19:55.866]         else {
[16:19:55.866]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:19:55.866]                 windows = "NUL", "/dev/null"), open = "w")
[16:19:55.866]         }
[16:19:55.866]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:19:55.866]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:19:55.866]             base::sink(type = "output", split = FALSE)
[16:19:55.866]             base::close(...future.stdout)
[16:19:55.866]         }, add = TRUE)
[16:19:55.866]     }
[16:19:55.866]     ...future.frame <- base::sys.nframe()
[16:19:55.866]     ...future.conditions <- base::list()
[16:19:55.866]     ...future.rng <- base::globalenv()$.Random.seed
[16:19:55.866]     if (FALSE) {
[16:19:55.866]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:19:55.866]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:19:55.866]     }
[16:19:55.866]     ...future.result <- base::tryCatch({
[16:19:55.866]         base::withCallingHandlers({
[16:19:55.866]             ...future.value <- base::withVisible(base::local({
[16:19:55.866]                 42L
[16:19:55.866]                 stop("Woops")
[16:19:55.866]             }))
[16:19:55.866]             future::FutureResult(value = ...future.value$value, 
[16:19:55.866]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:19:55.866]                   ...future.rng), globalenv = if (FALSE) 
[16:19:55.866]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:19:55.866]                     ...future.globalenv.names))
[16:19:55.866]                 else NULL, started = ...future.startTime, version = "1.8")
[16:19:55.866]         }, condition = base::local({
[16:19:55.866]             c <- base::c
[16:19:55.866]             inherits <- base::inherits
[16:19:55.866]             invokeRestart <- base::invokeRestart
[16:19:55.866]             length <- base::length
[16:19:55.866]             list <- base::list
[16:19:55.866]             seq.int <- base::seq.int
[16:19:55.866]             signalCondition <- base::signalCondition
[16:19:55.866]             sys.calls <- base::sys.calls
[16:19:55.866]             `[[` <- base::`[[`
[16:19:55.866]             `+` <- base::`+`
[16:19:55.866]             `<<-` <- base::`<<-`
[16:19:55.866]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:19:55.866]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:19:55.866]                   3L)]
[16:19:55.866]             }
[16:19:55.866]             function(cond) {
[16:19:55.866]                 is_error <- inherits(cond, "error")
[16:19:55.866]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:19:55.866]                   NULL)
[16:19:55.866]                 if (is_error) {
[16:19:55.866]                   sessionInformation <- function() {
[16:19:55.866]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:19:55.866]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:19:55.866]                       search = base::search(), system = base::Sys.info())
[16:19:55.866]                   }
[16:19:55.866]                   ...future.conditions[[length(...future.conditions) + 
[16:19:55.866]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:19:55.866]                     cond$call), session = sessionInformation(), 
[16:19:55.866]                     timestamp = base::Sys.time(), signaled = 0L)
[16:19:55.866]                   signalCondition(cond)
[16:19:55.866]                 }
[16:19:55.866]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:19:55.866]                 "immediateCondition"))) {
[16:19:55.866]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:19:55.866]                   ...future.conditions[[length(...future.conditions) + 
[16:19:55.866]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:19:55.866]                   if (TRUE && !signal) {
[16:19:55.866]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:19:55.866]                     {
[16:19:55.866]                       inherits <- base::inherits
[16:19:55.866]                       invokeRestart <- base::invokeRestart
[16:19:55.866]                       is.null <- base::is.null
[16:19:55.866]                       muffled <- FALSE
[16:19:55.866]                       if (inherits(cond, "message")) {
[16:19:55.866]                         muffled <- grepl(pattern, "muffleMessage")
[16:19:55.866]                         if (muffled) 
[16:19:55.866]                           invokeRestart("muffleMessage")
[16:19:55.866]                       }
[16:19:55.866]                       else if (inherits(cond, "warning")) {
[16:19:55.866]                         muffled <- grepl(pattern, "muffleWarning")
[16:19:55.866]                         if (muffled) 
[16:19:55.866]                           invokeRestart("muffleWarning")
[16:19:55.866]                       }
[16:19:55.866]                       else if (inherits(cond, "condition")) {
[16:19:55.866]                         if (!is.null(pattern)) {
[16:19:55.866]                           computeRestarts <- base::computeRestarts
[16:19:55.866]                           grepl <- base::grepl
[16:19:55.866]                           restarts <- computeRestarts(cond)
[16:19:55.866]                           for (restart in restarts) {
[16:19:55.866]                             name <- restart$name
[16:19:55.866]                             if (is.null(name)) 
[16:19:55.866]                               next
[16:19:55.866]                             if (!grepl(pattern, name)) 
[16:19:55.866]                               next
[16:19:55.866]                             invokeRestart(restart)
[16:19:55.866]                             muffled <- TRUE
[16:19:55.866]                             break
[16:19:55.866]                           }
[16:19:55.866]                         }
[16:19:55.866]                       }
[16:19:55.866]                       invisible(muffled)
[16:19:55.866]                     }
[16:19:55.866]                     muffleCondition(cond, pattern = "^muffle")
[16:19:55.866]                   }
[16:19:55.866]                 }
[16:19:55.866]                 else {
[16:19:55.866]                   if (TRUE) {
[16:19:55.866]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:19:55.866]                     {
[16:19:55.866]                       inherits <- base::inherits
[16:19:55.866]                       invokeRestart <- base::invokeRestart
[16:19:55.866]                       is.null <- base::is.null
[16:19:55.866]                       muffled <- FALSE
[16:19:55.866]                       if (inherits(cond, "message")) {
[16:19:55.866]                         muffled <- grepl(pattern, "muffleMessage")
[16:19:55.866]                         if (muffled) 
[16:19:55.866]                           invokeRestart("muffleMessage")
[16:19:55.866]                       }
[16:19:55.866]                       else if (inherits(cond, "warning")) {
[16:19:55.866]                         muffled <- grepl(pattern, "muffleWarning")
[16:19:55.866]                         if (muffled) 
[16:19:55.866]                           invokeRestart("muffleWarning")
[16:19:55.866]                       }
[16:19:55.866]                       else if (inherits(cond, "condition")) {
[16:19:55.866]                         if (!is.null(pattern)) {
[16:19:55.866]                           computeRestarts <- base::computeRestarts
[16:19:55.866]                           grepl <- base::grepl
[16:19:55.866]                           restarts <- computeRestarts(cond)
[16:19:55.866]                           for (restart in restarts) {
[16:19:55.866]                             name <- restart$name
[16:19:55.866]                             if (is.null(name)) 
[16:19:55.866]                               next
[16:19:55.866]                             if (!grepl(pattern, name)) 
[16:19:55.866]                               next
[16:19:55.866]                             invokeRestart(restart)
[16:19:55.866]                             muffled <- TRUE
[16:19:55.866]                             break
[16:19:55.866]                           }
[16:19:55.866]                         }
[16:19:55.866]                       }
[16:19:55.866]                       invisible(muffled)
[16:19:55.866]                     }
[16:19:55.866]                     muffleCondition(cond, pattern = "^muffle")
[16:19:55.866]                   }
[16:19:55.866]                 }
[16:19:55.866]             }
[16:19:55.866]         }))
[16:19:55.866]     }, error = function(ex) {
[16:19:55.866]         base::structure(base::list(value = NULL, visible = NULL, 
[16:19:55.866]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:19:55.866]                 ...future.rng), started = ...future.startTime, 
[16:19:55.866]             finished = Sys.time(), session_uuid = NA_character_, 
[16:19:55.866]             version = "1.8"), class = "FutureResult")
[16:19:55.866]     }, finally = {
[16:19:55.866]         if (!identical(...future.workdir, getwd())) 
[16:19:55.866]             setwd(...future.workdir)
[16:19:55.866]         {
[16:19:55.866]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:19:55.866]                 ...future.oldOptions$nwarnings <- NULL
[16:19:55.866]             }
[16:19:55.866]             base::options(...future.oldOptions)
[16:19:55.866]             if (.Platform$OS.type == "windows") {
[16:19:55.866]                 old_names <- names(...future.oldEnvVars)
[16:19:55.866]                 envs <- base::Sys.getenv()
[16:19:55.866]                 names <- names(envs)
[16:19:55.866]                 common <- intersect(names, old_names)
[16:19:55.866]                 added <- setdiff(names, old_names)
[16:19:55.866]                 removed <- setdiff(old_names, names)
[16:19:55.866]                 changed <- common[...future.oldEnvVars[common] != 
[16:19:55.866]                   envs[common]]
[16:19:55.866]                 NAMES <- toupper(changed)
[16:19:55.866]                 args <- list()
[16:19:55.866]                 for (kk in seq_along(NAMES)) {
[16:19:55.866]                   name <- changed[[kk]]
[16:19:55.866]                   NAME <- NAMES[[kk]]
[16:19:55.866]                   if (name != NAME && is.element(NAME, old_names)) 
[16:19:55.866]                     next
[16:19:55.866]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:19:55.866]                 }
[16:19:55.866]                 NAMES <- toupper(added)
[16:19:55.866]                 for (kk in seq_along(NAMES)) {
[16:19:55.866]                   name <- added[[kk]]
[16:19:55.866]                   NAME <- NAMES[[kk]]
[16:19:55.866]                   if (name != NAME && is.element(NAME, old_names)) 
[16:19:55.866]                     next
[16:19:55.866]                   args[[name]] <- ""
[16:19:55.866]                 }
[16:19:55.866]                 NAMES <- toupper(removed)
[16:19:55.866]                 for (kk in seq_along(NAMES)) {
[16:19:55.866]                   name <- removed[[kk]]
[16:19:55.866]                   NAME <- NAMES[[kk]]
[16:19:55.866]                   if (name != NAME && is.element(NAME, old_names)) 
[16:19:55.866]                     next
[16:19:55.866]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:19:55.866]                 }
[16:19:55.866]                 if (length(args) > 0) 
[16:19:55.866]                   base::do.call(base::Sys.setenv, args = args)
[16:19:55.866]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:19:55.866]             }
[16:19:55.866]             else {
[16:19:55.866]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:19:55.866]             }
[16:19:55.866]             {
[16:19:55.866]                 if (base::length(...future.futureOptionsAdded) > 
[16:19:55.866]                   0L) {
[16:19:55.866]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:19:55.866]                   base::names(opts) <- ...future.futureOptionsAdded
[16:19:55.866]                   base::options(opts)
[16:19:55.866]                 }
[16:19:55.866]                 {
[16:19:55.866]                   {
[16:19:55.866]                     NULL
[16:19:55.866]                     RNGkind("Mersenne-Twister")
[16:19:55.866]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:19:55.866]                       inherits = FALSE)
[16:19:55.866]                   }
[16:19:55.866]                   options(future.plan = NULL)
[16:19:55.866]                   if (is.na(NA_character_)) 
[16:19:55.866]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:19:55.866]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:19:55.866]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:19:55.866]                     .init = FALSE)
[16:19:55.866]                 }
[16:19:55.866]             }
[16:19:55.866]         }
[16:19:55.866]     })
[16:19:55.866]     if (TRUE) {
[16:19:55.866]         base::sink(type = "output", split = FALSE)
[16:19:55.866]         if (TRUE) {
[16:19:55.866]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:19:55.866]         }
[16:19:55.866]         else {
[16:19:55.866]             ...future.result["stdout"] <- base::list(NULL)
[16:19:55.866]         }
[16:19:55.866]         base::close(...future.stdout)
[16:19:55.866]         ...future.stdout <- NULL
[16:19:55.866]     }
[16:19:55.866]     ...future.result$conditions <- ...future.conditions
[16:19:55.866]     ...future.result$finished <- base::Sys.time()
[16:19:55.866]     ...future.result
[16:19:55.866] }
[16:19:55.867] plan(): Setting new future strategy stack:
[16:19:55.867] List of future strategies:
[16:19:55.867] 1. sequential:
[16:19:55.867]    - args: function (..., envir = parent.frame())
[16:19:55.867]    - tweaked: FALSE
[16:19:55.867]    - call: NULL
[16:19:55.868] plan(): nbrOfWorkers() = 1
[16:19:55.869] plan(): Setting new future strategy stack:
[16:19:55.869] List of future strategies:
[16:19:55.869] 1. sequential:
[16:19:55.869]    - args: function (..., envir = parent.frame())
[16:19:55.869]    - tweaked: FALSE
[16:19:55.869]    - call: future::plan("sequential")
[16:19:55.869] plan(): nbrOfWorkers() = 1
[16:19:55.869] SequentialFuture started (and completed)
[16:19:55.869] signalConditions() ...
[16:19:55.869]  - include = ‘immediateCondition’
[16:19:55.869]  - exclude = 
[16:19:55.870]  - resignal = FALSE
[16:19:55.870]  - Number of conditions: 1
[16:19:55.870] signalConditions() ... done
[16:19:55.870] - Launch lazy future ... done
[16:19:55.870] run() for ‘SequentialFuture’ ... done
> v <- value(f, signal = FALSE)
[16:19:55.870] signalConditions() ...
[16:19:55.870]  - include = ‘immediateCondition’
[16:19:55.870]  - exclude = 
[16:19:55.870]  - resignal = FALSE
[16:19:55.870]  - Number of conditions: 1
[16:19:55.870] signalConditions() ... done
> 
> if (availableCores() >= 2L) {
+   message("- Non-resolved future ...")
+   plan(multisession, workers = 2L)
+   f <- future({ Sys.sleep(3); 42L; stop("Woops") })
+   res <- tryCatch(backtrace(f), error = identity)
+   print(res)
+   stopifnot(inherits(res, "error"))
+   
+   ## If we don't resolve the future, the cluster of workers will not
+   ## be able to shut down naturally. They will eventually time out,
+   ## but that will happen long after 'R CMD check' terminates. Because
+   ## of this, 'R CMD check --as-cran' will report on "detritus in the
+   ## temp directory" when running on MS Windows.  This happens because
+   ## MS Windows doesn't shut down child processes as Linux and macOS
+   ## does when the main R session terminates.
+   resolve(f)
+ }
- Non-resolved future ...
[16:19:55.877] plan(): Setting new future strategy stack:
[16:19:55.877] List of future strategies:
[16:19:55.877] 1. multisession:
[16:19:55.877]    - args: function (..., workers = 2L, envir = parent.frame())
[16:19:55.877]    - tweaked: TRUE
[16:19:55.877]    - call: plan(multisession, workers = 2L)
[16:19:55.888] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:19:55.888] multisession:
[16:19:55.888] - args: function (..., workers = 2L, envir = parent.frame())
[16:19:55.888] - tweaked: TRUE
[16:19:55.888] - call: plan(multisession, workers = 2L)
[16:19:55.889] getGlobalsAndPackages() ...
[16:19:55.889] Not searching for globals
[16:19:55.889] - globals: [0] <none>
[16:19:55.889] getGlobalsAndPackages() ... DONE
[16:19:55.890] [local output] makeClusterPSOCK() ...
[16:19:55.922] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:19:55.924] [local output] Base port: 11097
[16:19:55.924] [local output] Getting setup options for 2 cluster nodes ...
[16:19:55.924] [local output]  - Node 1 of 2 ...
[16:19:55.924] [local output] localMachine=TRUE => revtunnel=FALSE

[16:19:55.925] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpdf4eIt/worker.rank=1.parallelly.parent=78210.1318260d13177.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmpdf4eIt/worker.rank=1.parallelly.parent=78210.1318260d13177.pid")'’
[16:19:56.112] - Possible to infer worker's PID: TRUE
[16:19:56.112] [local output] Rscript port: 11097

[16:19:56.113] [local output]  - Node 2 of 2 ...
[16:19:56.113] [local output] localMachine=TRUE => revtunnel=FALSE

[16:19:56.114] [local output] Rscript port: 11097

[16:19:56.114] [local output] Getting setup options for 2 cluster nodes ... done
[16:19:56.114] [local output]  - Parallel setup requested for some PSOCK nodes
[16:19:56.114] [local output] Setting up PSOCK nodes in parallel
[16:19:56.115] List of 36
[16:19:56.115]  $ worker          : chr "localhost"
[16:19:56.115]   ..- attr(*, "localhost")= logi TRUE
[16:19:56.115]  $ master          : chr "localhost"
[16:19:56.115]  $ port            : int 11097
[16:19:56.115]  $ connectTimeout  : num 120
[16:19:56.115]  $ timeout         : num 2592000
[16:19:56.115]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:19:56.115]  $ homogeneous     : logi TRUE
[16:19:56.115]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:19:56.115]  $ rscript_envs    : NULL
[16:19:56.115]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:19:56.115]  $ rscript_startup : NULL
[16:19:56.115]  $ rscript_sh      : chr "sh"
[16:19:56.115]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:19:56.115]  $ methods         : logi TRUE
[16:19:56.115]  $ socketOptions   : chr "no-delay"
[16:19:56.115]  $ useXDR          : logi FALSE
[16:19:56.115]  $ outfile         : chr "/dev/null"
[16:19:56.115]  $ renice          : int NA
[16:19:56.115]  $ rshcmd          : NULL
[16:19:56.115]  $ user            : chr(0) 
[16:19:56.115]  $ revtunnel       : logi FALSE
[16:19:56.115]  $ rshlogfile      : NULL
[16:19:56.115]  $ rshopts         : chr(0) 
[16:19:56.115]  $ rank            : int 1
[16:19:56.115]  $ manual          : logi FALSE
[16:19:56.115]  $ dryrun          : logi FALSE
[16:19:56.115]  $ quiet           : logi FALSE
[16:19:56.115]  $ setup_strategy  : chr "parallel"
[16:19:56.115]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:19:56.115]  $ pidfile         : chr "/tmp/Rtmpdf4eIt/worker.rank=1.parallelly.parent=78210.1318260d13177.pid"
[16:19:56.115]  $ rshcmd_label    : NULL
[16:19:56.115]  $ rsh_call        : NULL
[16:19:56.115]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:19:56.115]  $ localMachine    : logi TRUE
[16:19:56.115]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:19:56.115]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:19:56.115]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:19:56.115]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:19:56.115]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:19:56.115]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:19:56.115]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:19:56.115]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:19:56.115]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:19:56.115]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:19:56.115]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:19:56.115]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:19:56.115]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:19:56.115]  $ arguments       :List of 28
[16:19:56.115]   ..$ worker          : chr "localhost"
[16:19:56.115]   ..$ master          : NULL
[16:19:56.115]   ..$ port            : int 11097
[16:19:56.115]   ..$ connectTimeout  : num 120
[16:19:56.115]   ..$ timeout         : num 2592000
[16:19:56.115]   ..$ rscript         : NULL
[16:19:56.115]   ..$ homogeneous     : NULL
[16:19:56.115]   ..$ rscript_args    : NULL
[16:19:56.115]   ..$ rscript_envs    : NULL
[16:19:56.115]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:19:56.115]   ..$ rscript_startup : NULL
[16:19:56.115]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:19:56.115]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:19:56.115]   ..$ methods         : logi TRUE
[16:19:56.115]   ..$ socketOptions   : chr "no-delay"
[16:19:56.115]   ..$ useXDR          : logi FALSE
[16:19:56.115]   ..$ outfile         : chr "/dev/null"
[16:19:56.115]   ..$ renice          : int NA
[16:19:56.115]   ..$ rshcmd          : NULL
[16:19:56.115]   ..$ user            : NULL
[16:19:56.115]   ..$ revtunnel       : logi NA
[16:19:56.115]   ..$ rshlogfile      : NULL
[16:19:56.115]   ..$ rshopts         : NULL
[16:19:56.115]   ..$ rank            : int 1
[16:19:56.115]   ..$ manual          : logi FALSE
[16:19:56.115]   ..$ dryrun          : logi FALSE
[16:19:56.115]   ..$ quiet           : logi FALSE
[16:19:56.115]   ..$ setup_strategy  : chr "parallel"
[16:19:56.115]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:19:56.133] [local output] System call to launch all workers:
[16:19:56.133] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpdf4eIt/worker.rank=1.parallelly.parent=78210.1318260d13177.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11097 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:19:56.133] [local output] Starting PSOCK main server
[16:19:56.139] [local output] Workers launched
[16:19:56.139] [local output] Waiting for workers to connect back
[16:19:56.139]  - [local output] 0 workers out of 2 ready
[16:19:56.405]  - [local output] 0 workers out of 2 ready
[16:19:56.406]  - [local output] 1 workers out of 2 ready
[16:19:56.406]  - [local output] 2 workers out of 2 ready
[16:19:56.406] [local output] Launching of workers completed
[16:19:56.407] [local output] Collecting session information from workers
[16:19:56.408] [local output]  - Worker #1 of 2
[16:19:56.408] [local output]  - Worker #2 of 2
[16:19:56.408] [local output] makeClusterPSOCK() ... done
[16:19:56.421] Packages needed by the future expression (n = 0): <none>
[16:19:56.421] Packages needed by future strategies (n = 0): <none>
[16:19:56.421] {
[16:19:56.421]     {
[16:19:56.421]         {
[16:19:56.421]             ...future.startTime <- base::Sys.time()
[16:19:56.421]             {
[16:19:56.421]                 {
[16:19:56.421]                   {
[16:19:56.421]                     {
[16:19:56.421]                       base::local({
[16:19:56.421]                         has_future <- base::requireNamespace("future", 
[16:19:56.421]                           quietly = TRUE)
[16:19:56.421]                         if (has_future) {
[16:19:56.421]                           ns <- base::getNamespace("future")
[16:19:56.421]                           version <- ns[[".package"]][["version"]]
[16:19:56.421]                           if (is.null(version)) 
[16:19:56.421]                             version <- utils::packageVersion("future")
[16:19:56.421]                         }
[16:19:56.421]                         else {
[16:19:56.421]                           version <- NULL
[16:19:56.421]                         }
[16:19:56.421]                         if (!has_future || version < "1.8.0") {
[16:19:56.421]                           info <- base::c(r_version = base::gsub("R version ", 
[16:19:56.421]                             "", base::R.version$version.string), 
[16:19:56.421]                             platform = base::sprintf("%s (%s-bit)", 
[16:19:56.421]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:19:56.421]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:19:56.421]                               "release", "version")], collapse = " "), 
[16:19:56.421]                             hostname = base::Sys.info()[["nodename"]])
[16:19:56.421]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:19:56.421]                             info)
[16:19:56.421]                           info <- base::paste(info, collapse = "; ")
[16:19:56.421]                           if (!has_future) {
[16:19:56.421]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:19:56.421]                               info)
[16:19:56.421]                           }
[16:19:56.421]                           else {
[16:19:56.421]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:19:56.421]                               info, version)
[16:19:56.421]                           }
[16:19:56.421]                           base::stop(msg)
[16:19:56.421]                         }
[16:19:56.421]                       })
[16:19:56.421]                     }
[16:19:56.421]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:19:56.421]                     base::options(mc.cores = 1L)
[16:19:56.421]                   }
[16:19:56.421]                   ...future.strategy.old <- future::plan("list")
[16:19:56.421]                   options(future.plan = NULL)
[16:19:56.421]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:19:56.421]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:19:56.421]                 }
[16:19:56.421]                 ...future.workdir <- getwd()
[16:19:56.421]             }
[16:19:56.421]             ...future.oldOptions <- base::as.list(base::.Options)
[16:19:56.421]             ...future.oldEnvVars <- base::Sys.getenv()
[16:19:56.421]         }
[16:19:56.421]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:19:56.421]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:19:56.421]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:19:56.421]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:19:56.421]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:19:56.421]             future.stdout.windows.reencode = NULL, width = 80L)
[16:19:56.421]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:19:56.421]             base::names(...future.oldOptions))
[16:19:56.421]     }
[16:19:56.421]     if (FALSE) {
[16:19:56.421]     }
[16:19:56.421]     else {
[16:19:56.421]         if (TRUE) {
[16:19:56.421]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:19:56.421]                 open = "w")
[16:19:56.421]         }
[16:19:56.421]         else {
[16:19:56.421]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:19:56.421]                 windows = "NUL", "/dev/null"), open = "w")
[16:19:56.421]         }
[16:19:56.421]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:19:56.421]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:19:56.421]             base::sink(type = "output", split = FALSE)
[16:19:56.421]             base::close(...future.stdout)
[16:19:56.421]         }, add = TRUE)
[16:19:56.421]     }
[16:19:56.421]     ...future.frame <- base::sys.nframe()
[16:19:56.421]     ...future.conditions <- base::list()
[16:19:56.421]     ...future.rng <- base::globalenv()$.Random.seed
[16:19:56.421]     if (FALSE) {
[16:19:56.421]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:19:56.421]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:19:56.421]     }
[16:19:56.421]     ...future.result <- base::tryCatch({
[16:19:56.421]         base::withCallingHandlers({
[16:19:56.421]             ...future.value <- base::withVisible(base::local({
[16:19:56.421]                 ...future.makeSendCondition <- base::local({
[16:19:56.421]                   sendCondition <- NULL
[16:19:56.421]                   function(frame = 1L) {
[16:19:56.421]                     if (is.function(sendCondition)) 
[16:19:56.421]                       return(sendCondition)
[16:19:56.421]                     ns <- getNamespace("parallel")
[16:19:56.421]                     if (exists("sendData", mode = "function", 
[16:19:56.421]                       envir = ns)) {
[16:19:56.421]                       parallel_sendData <- get("sendData", mode = "function", 
[16:19:56.421]                         envir = ns)
[16:19:56.421]                       envir <- sys.frame(frame)
[16:19:56.421]                       master <- NULL
[16:19:56.421]                       while (!identical(envir, .GlobalEnv) && 
[16:19:56.421]                         !identical(envir, emptyenv())) {
[16:19:56.421]                         if (exists("master", mode = "list", envir = envir, 
[16:19:56.421]                           inherits = FALSE)) {
[16:19:56.421]                           master <- get("master", mode = "list", 
[16:19:56.421]                             envir = envir, inherits = FALSE)
[16:19:56.421]                           if (inherits(master, c("SOCKnode", 
[16:19:56.421]                             "SOCK0node"))) {
[16:19:56.421]                             sendCondition <<- function(cond) {
[16:19:56.421]                               data <- list(type = "VALUE", value = cond, 
[16:19:56.421]                                 success = TRUE)
[16:19:56.421]                               parallel_sendData(master, data)
[16:19:56.421]                             }
[16:19:56.421]                             return(sendCondition)
[16:19:56.421]                           }
[16:19:56.421]                         }
[16:19:56.421]                         frame <- frame + 1L
[16:19:56.421]                         envir <- sys.frame(frame)
[16:19:56.421]                       }
[16:19:56.421]                     }
[16:19:56.421]                     sendCondition <<- function(cond) NULL
[16:19:56.421]                   }
[16:19:56.421]                 })
[16:19:56.421]                 withCallingHandlers({
[16:19:56.421]                   NA
[16:19:56.421]                 }, immediateCondition = function(cond) {
[16:19:56.421]                   sendCondition <- ...future.makeSendCondition()
[16:19:56.421]                   sendCondition(cond)
[16:19:56.421]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:19:56.421]                   {
[16:19:56.421]                     inherits <- base::inherits
[16:19:56.421]                     invokeRestart <- base::invokeRestart
[16:19:56.421]                     is.null <- base::is.null
[16:19:56.421]                     muffled <- FALSE
[16:19:56.421]                     if (inherits(cond, "message")) {
[16:19:56.421]                       muffled <- grepl(pattern, "muffleMessage")
[16:19:56.421]                       if (muffled) 
[16:19:56.421]                         invokeRestart("muffleMessage")
[16:19:56.421]                     }
[16:19:56.421]                     else if (inherits(cond, "warning")) {
[16:19:56.421]                       muffled <- grepl(pattern, "muffleWarning")
[16:19:56.421]                       if (muffled) 
[16:19:56.421]                         invokeRestart("muffleWarning")
[16:19:56.421]                     }
[16:19:56.421]                     else if (inherits(cond, "condition")) {
[16:19:56.421]                       if (!is.null(pattern)) {
[16:19:56.421]                         computeRestarts <- base::computeRestarts
[16:19:56.421]                         grepl <- base::grepl
[16:19:56.421]                         restarts <- computeRestarts(cond)
[16:19:56.421]                         for (restart in restarts) {
[16:19:56.421]                           name <- restart$name
[16:19:56.421]                           if (is.null(name)) 
[16:19:56.421]                             next
[16:19:56.421]                           if (!grepl(pattern, name)) 
[16:19:56.421]                             next
[16:19:56.421]                           invokeRestart(restart)
[16:19:56.421]                           muffled <- TRUE
[16:19:56.421]                           break
[16:19:56.421]                         }
[16:19:56.421]                       }
[16:19:56.421]                     }
[16:19:56.421]                     invisible(muffled)
[16:19:56.421]                   }
[16:19:56.421]                   muffleCondition(cond)
[16:19:56.421]                 })
[16:19:56.421]             }))
[16:19:56.421]             future::FutureResult(value = ...future.value$value, 
[16:19:56.421]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:19:56.421]                   ...future.rng), globalenv = if (FALSE) 
[16:19:56.421]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:19:56.421]                     ...future.globalenv.names))
[16:19:56.421]                 else NULL, started = ...future.startTime, version = "1.8")
[16:19:56.421]         }, condition = base::local({
[16:19:56.421]             c <- base::c
[16:19:56.421]             inherits <- base::inherits
[16:19:56.421]             invokeRestart <- base::invokeRestart
[16:19:56.421]             length <- base::length
[16:19:56.421]             list <- base::list
[16:19:56.421]             seq.int <- base::seq.int
[16:19:56.421]             signalCondition <- base::signalCondition
[16:19:56.421]             sys.calls <- base::sys.calls
[16:19:56.421]             `[[` <- base::`[[`
[16:19:56.421]             `+` <- base::`+`
[16:19:56.421]             `<<-` <- base::`<<-`
[16:19:56.421]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:19:56.421]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:19:56.421]                   3L)]
[16:19:56.421]             }
[16:19:56.421]             function(cond) {
[16:19:56.421]                 is_error <- inherits(cond, "error")
[16:19:56.421]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:19:56.421]                   NULL)
[16:19:56.421]                 if (is_error) {
[16:19:56.421]                   sessionInformation <- function() {
[16:19:56.421]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:19:56.421]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:19:56.421]                       search = base::search(), system = base::Sys.info())
[16:19:56.421]                   }
[16:19:56.421]                   ...future.conditions[[length(...future.conditions) + 
[16:19:56.421]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:19:56.421]                     cond$call), session = sessionInformation(), 
[16:19:56.421]                     timestamp = base::Sys.time(), signaled = 0L)
[16:19:56.421]                   signalCondition(cond)
[16:19:56.421]                 }
[16:19:56.421]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:19:56.421]                 "immediateCondition"))) {
[16:19:56.421]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:19:56.421]                   ...future.conditions[[length(...future.conditions) + 
[16:19:56.421]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:19:56.421]                   if (TRUE && !signal) {
[16:19:56.421]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:19:56.421]                     {
[16:19:56.421]                       inherits <- base::inherits
[16:19:56.421]                       invokeRestart <- base::invokeRestart
[16:19:56.421]                       is.null <- base::is.null
[16:19:56.421]                       muffled <- FALSE
[16:19:56.421]                       if (inherits(cond, "message")) {
[16:19:56.421]                         muffled <- grepl(pattern, "muffleMessage")
[16:19:56.421]                         if (muffled) 
[16:19:56.421]                           invokeRestart("muffleMessage")
[16:19:56.421]                       }
[16:19:56.421]                       else if (inherits(cond, "warning")) {
[16:19:56.421]                         muffled <- grepl(pattern, "muffleWarning")
[16:19:56.421]                         if (muffled) 
[16:19:56.421]                           invokeRestart("muffleWarning")
[16:19:56.421]                       }
[16:19:56.421]                       else if (inherits(cond, "condition")) {
[16:19:56.421]                         if (!is.null(pattern)) {
[16:19:56.421]                           computeRestarts <- base::computeRestarts
[16:19:56.421]                           grepl <- base::grepl
[16:19:56.421]                           restarts <- computeRestarts(cond)
[16:19:56.421]                           for (restart in restarts) {
[16:19:56.421]                             name <- restart$name
[16:19:56.421]                             if (is.null(name)) 
[16:19:56.421]                               next
[16:19:56.421]                             if (!grepl(pattern, name)) 
[16:19:56.421]                               next
[16:19:56.421]                             invokeRestart(restart)
[16:19:56.421]                             muffled <- TRUE
[16:19:56.421]                             break
[16:19:56.421]                           }
[16:19:56.421]                         }
[16:19:56.421]                       }
[16:19:56.421]                       invisible(muffled)
[16:19:56.421]                     }
[16:19:56.421]                     muffleCondition(cond, pattern = "^muffle")
[16:19:56.421]                   }
[16:19:56.421]                 }
[16:19:56.421]                 else {
[16:19:56.421]                   if (TRUE) {
[16:19:56.421]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:19:56.421]                     {
[16:19:56.421]                       inherits <- base::inherits
[16:19:56.421]                       invokeRestart <- base::invokeRestart
[16:19:56.421]                       is.null <- base::is.null
[16:19:56.421]                       muffled <- FALSE
[16:19:56.421]                       if (inherits(cond, "message")) {
[16:19:56.421]                         muffled <- grepl(pattern, "muffleMessage")
[16:19:56.421]                         if (muffled) 
[16:19:56.421]                           invokeRestart("muffleMessage")
[16:19:56.421]                       }
[16:19:56.421]                       else if (inherits(cond, "warning")) {
[16:19:56.421]                         muffled <- grepl(pattern, "muffleWarning")
[16:19:56.421]                         if (muffled) 
[16:19:56.421]                           invokeRestart("muffleWarning")
[16:19:56.421]                       }
[16:19:56.421]                       else if (inherits(cond, "condition")) {
[16:19:56.421]                         if (!is.null(pattern)) {
[16:19:56.421]                           computeRestarts <- base::computeRestarts
[16:19:56.421]                           grepl <- base::grepl
[16:19:56.421]                           restarts <- computeRestarts(cond)
[16:19:56.421]                           for (restart in restarts) {
[16:19:56.421]                             name <- restart$name
[16:19:56.421]                             if (is.null(name)) 
[16:19:56.421]                               next
[16:19:56.421]                             if (!grepl(pattern, name)) 
[16:19:56.421]                               next
[16:19:56.421]                             invokeRestart(restart)
[16:19:56.421]                             muffled <- TRUE
[16:19:56.421]                             break
[16:19:56.421]                           }
[16:19:56.421]                         }
[16:19:56.421]                       }
[16:19:56.421]                       invisible(muffled)
[16:19:56.421]                     }
[16:19:56.421]                     muffleCondition(cond, pattern = "^muffle")
[16:19:56.421]                   }
[16:19:56.421]                 }
[16:19:56.421]             }
[16:19:56.421]         }))
[16:19:56.421]     }, error = function(ex) {
[16:19:56.421]         base::structure(base::list(value = NULL, visible = NULL, 
[16:19:56.421]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:19:56.421]                 ...future.rng), started = ...future.startTime, 
[16:19:56.421]             finished = Sys.time(), session_uuid = NA_character_, 
[16:19:56.421]             version = "1.8"), class = "FutureResult")
[16:19:56.421]     }, finally = {
[16:19:56.421]         if (!identical(...future.workdir, getwd())) 
[16:19:56.421]             setwd(...future.workdir)
[16:19:56.421]         {
[16:19:56.421]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:19:56.421]                 ...future.oldOptions$nwarnings <- NULL
[16:19:56.421]             }
[16:19:56.421]             base::options(...future.oldOptions)
[16:19:56.421]             if (.Platform$OS.type == "windows") {
[16:19:56.421]                 old_names <- names(...future.oldEnvVars)
[16:19:56.421]                 envs <- base::Sys.getenv()
[16:19:56.421]                 names <- names(envs)
[16:19:56.421]                 common <- intersect(names, old_names)
[16:19:56.421]                 added <- setdiff(names, old_names)
[16:19:56.421]                 removed <- setdiff(old_names, names)
[16:19:56.421]                 changed <- common[...future.oldEnvVars[common] != 
[16:19:56.421]                   envs[common]]
[16:19:56.421]                 NAMES <- toupper(changed)
[16:19:56.421]                 args <- list()
[16:19:56.421]                 for (kk in seq_along(NAMES)) {
[16:19:56.421]                   name <- changed[[kk]]
[16:19:56.421]                   NAME <- NAMES[[kk]]
[16:19:56.421]                   if (name != NAME && is.element(NAME, old_names)) 
[16:19:56.421]                     next
[16:19:56.421]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:19:56.421]                 }
[16:19:56.421]                 NAMES <- toupper(added)
[16:19:56.421]                 for (kk in seq_along(NAMES)) {
[16:19:56.421]                   name <- added[[kk]]
[16:19:56.421]                   NAME <- NAMES[[kk]]
[16:19:56.421]                   if (name != NAME && is.element(NAME, old_names)) 
[16:19:56.421]                     next
[16:19:56.421]                   args[[name]] <- ""
[16:19:56.421]                 }
[16:19:56.421]                 NAMES <- toupper(removed)
[16:19:56.421]                 for (kk in seq_along(NAMES)) {
[16:19:56.421]                   name <- removed[[kk]]
[16:19:56.421]                   NAME <- NAMES[[kk]]
[16:19:56.421]                   if (name != NAME && is.element(NAME, old_names)) 
[16:19:56.421]                     next
[16:19:56.421]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:19:56.421]                 }
[16:19:56.421]                 if (length(args) > 0) 
[16:19:56.421]                   base::do.call(base::Sys.setenv, args = args)
[16:19:56.421]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:19:56.421]             }
[16:19:56.421]             else {
[16:19:56.421]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:19:56.421]             }
[16:19:56.421]             {
[16:19:56.421]                 if (base::length(...future.futureOptionsAdded) > 
[16:19:56.421]                   0L) {
[16:19:56.421]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:19:56.421]                   base::names(opts) <- ...future.futureOptionsAdded
[16:19:56.421]                   base::options(opts)
[16:19:56.421]                 }
[16:19:56.421]                 {
[16:19:56.421]                   {
[16:19:56.421]                     base::options(mc.cores = ...future.mc.cores.old)
[16:19:56.421]                     NULL
[16:19:56.421]                   }
[16:19:56.421]                   options(future.plan = NULL)
[16:19:56.421]                   if (is.na(NA_character_)) 
[16:19:56.421]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:19:56.421]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:19:56.421]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:19:56.421]                     .init = FALSE)
[16:19:56.421]                 }
[16:19:56.421]             }
[16:19:56.421]         }
[16:19:56.421]     })
[16:19:56.421]     if (TRUE) {
[16:19:56.421]         base::sink(type = "output", split = FALSE)
[16:19:56.421]         if (TRUE) {
[16:19:56.421]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:19:56.421]         }
[16:19:56.421]         else {
[16:19:56.421]             ...future.result["stdout"] <- base::list(NULL)
[16:19:56.421]         }
[16:19:56.421]         base::close(...future.stdout)
[16:19:56.421]         ...future.stdout <- NULL
[16:19:56.421]     }
[16:19:56.421]     ...future.result$conditions <- ...future.conditions
[16:19:56.421]     ...future.result$finished <- base::Sys.time()
[16:19:56.421]     ...future.result
[16:19:56.421] }
[16:19:56.474] MultisessionFuture started
[16:19:56.474] result() for ClusterFuture ...
[16:19:56.475] receiveMessageFromWorker() for ClusterFuture ...
[16:19:56.475] - Validating connection of MultisessionFuture
[16:19:56.507] - received message: FutureResult
[16:19:56.507] - Received FutureResult
[16:19:56.510] - Erased future from FutureRegistry
[16:19:56.510] result() for ClusterFuture ...
[16:19:56.510] - result already collected: FutureResult
[16:19:56.511] result() for ClusterFuture ... done
[16:19:56.511] receiveMessageFromWorker() for ClusterFuture ... done
[16:19:56.511] result() for ClusterFuture ... done
[16:19:56.511] result() for ClusterFuture ...
[16:19:56.511] - result already collected: FutureResult
[16:19:56.511] result() for ClusterFuture ... done
[16:19:56.511] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:19:56.512] plan(): nbrOfWorkers() = 2
[16:19:56.512] getGlobalsAndPackages() ...
[16:19:56.512] Searching for globals...
[16:19:56.514] - globals found: [3] ‘{’, ‘Sys.sleep’, ‘stop’
[16:19:56.514] Searching for globals ... DONE
[16:19:56.514] Resolving globals: FALSE
[16:19:56.514] 
[16:19:56.514] 
[16:19:56.514] getGlobalsAndPackages() ... DONE
[16:19:56.515] run() for ‘Future’ ...
[16:19:56.515] - state: ‘created’
[16:19:56.515] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:19:56.526] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:19:56.526] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:19:56.526]   - Field: ‘node’
[16:19:56.526]   - Field: ‘label’
[16:19:56.527]   - Field: ‘local’
[16:19:56.527]   - Field: ‘owner’
[16:19:56.527]   - Field: ‘envir’
[16:19:56.527]   - Field: ‘workers’
[16:19:56.527]   - Field: ‘packages’
[16:19:56.527]   - Field: ‘gc’
[16:19:56.527]   - Field: ‘conditions’
[16:19:56.527]   - Field: ‘persistent’
[16:19:56.527]   - Field: ‘expr’
[16:19:56.528]   - Field: ‘uuid’
[16:19:56.528]   - Field: ‘seed’
[16:19:56.528]   - Field: ‘version’
[16:19:56.528]   - Field: ‘result’
[16:19:56.528]   - Field: ‘asynchronous’
[16:19:56.528]   - Field: ‘calls’
[16:19:56.528]   - Field: ‘globals’
[16:19:56.528]   - Field: ‘stdout’
[16:19:56.528]   - Field: ‘earlySignal’
[16:19:56.529]   - Field: ‘lazy’
[16:19:56.529]   - Field: ‘state’
[16:19:56.529] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:19:56.529] - Launch lazy future ...
[16:19:56.529] Packages needed by the future expression (n = 0): <none>
[16:19:56.529] Packages needed by future strategies (n = 0): <none>
[16:19:56.530] {
[16:19:56.530]     {
[16:19:56.530]         {
[16:19:56.530]             ...future.startTime <- base::Sys.time()
[16:19:56.530]             {
[16:19:56.530]                 {
[16:19:56.530]                   {
[16:19:56.530]                     {
[16:19:56.530]                       base::local({
[16:19:56.530]                         has_future <- base::requireNamespace("future", 
[16:19:56.530]                           quietly = TRUE)
[16:19:56.530]                         if (has_future) {
[16:19:56.530]                           ns <- base::getNamespace("future")
[16:19:56.530]                           version <- ns[[".package"]][["version"]]
[16:19:56.530]                           if (is.null(version)) 
[16:19:56.530]                             version <- utils::packageVersion("future")
[16:19:56.530]                         }
[16:19:56.530]                         else {
[16:19:56.530]                           version <- NULL
[16:19:56.530]                         }
[16:19:56.530]                         if (!has_future || version < "1.8.0") {
[16:19:56.530]                           info <- base::c(r_version = base::gsub("R version ", 
[16:19:56.530]                             "", base::R.version$version.string), 
[16:19:56.530]                             platform = base::sprintf("%s (%s-bit)", 
[16:19:56.530]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:19:56.530]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:19:56.530]                               "release", "version")], collapse = " "), 
[16:19:56.530]                             hostname = base::Sys.info()[["nodename"]])
[16:19:56.530]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:19:56.530]                             info)
[16:19:56.530]                           info <- base::paste(info, collapse = "; ")
[16:19:56.530]                           if (!has_future) {
[16:19:56.530]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:19:56.530]                               info)
[16:19:56.530]                           }
[16:19:56.530]                           else {
[16:19:56.530]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:19:56.530]                               info, version)
[16:19:56.530]                           }
[16:19:56.530]                           base::stop(msg)
[16:19:56.530]                         }
[16:19:56.530]                       })
[16:19:56.530]                     }
[16:19:56.530]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:19:56.530]                     base::options(mc.cores = 1L)
[16:19:56.530]                   }
[16:19:56.530]                   ...future.strategy.old <- future::plan("list")
[16:19:56.530]                   options(future.plan = NULL)
[16:19:56.530]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:19:56.530]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:19:56.530]                 }
[16:19:56.530]                 ...future.workdir <- getwd()
[16:19:56.530]             }
[16:19:56.530]             ...future.oldOptions <- base::as.list(base::.Options)
[16:19:56.530]             ...future.oldEnvVars <- base::Sys.getenv()
[16:19:56.530]         }
[16:19:56.530]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:19:56.530]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:19:56.530]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:19:56.530]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:19:56.530]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:19:56.530]             future.stdout.windows.reencode = NULL, width = 80L)
[16:19:56.530]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:19:56.530]             base::names(...future.oldOptions))
[16:19:56.530]     }
[16:19:56.530]     if (FALSE) {
[16:19:56.530]     }
[16:19:56.530]     else {
[16:19:56.530]         if (TRUE) {
[16:19:56.530]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:19:56.530]                 open = "w")
[16:19:56.530]         }
[16:19:56.530]         else {
[16:19:56.530]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:19:56.530]                 windows = "NUL", "/dev/null"), open = "w")
[16:19:56.530]         }
[16:19:56.530]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:19:56.530]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:19:56.530]             base::sink(type = "output", split = FALSE)
[16:19:56.530]             base::close(...future.stdout)
[16:19:56.530]         }, add = TRUE)
[16:19:56.530]     }
[16:19:56.530]     ...future.frame <- base::sys.nframe()
[16:19:56.530]     ...future.conditions <- base::list()
[16:19:56.530]     ...future.rng <- base::globalenv()$.Random.seed
[16:19:56.530]     if (FALSE) {
[16:19:56.530]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:19:56.530]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:19:56.530]     }
[16:19:56.530]     ...future.result <- base::tryCatch({
[16:19:56.530]         base::withCallingHandlers({
[16:19:56.530]             ...future.value <- base::withVisible(base::local({
[16:19:56.530]                 ...future.makeSendCondition <- base::local({
[16:19:56.530]                   sendCondition <- NULL
[16:19:56.530]                   function(frame = 1L) {
[16:19:56.530]                     if (is.function(sendCondition)) 
[16:19:56.530]                       return(sendCondition)
[16:19:56.530]                     ns <- getNamespace("parallel")
[16:19:56.530]                     if (exists("sendData", mode = "function", 
[16:19:56.530]                       envir = ns)) {
[16:19:56.530]                       parallel_sendData <- get("sendData", mode = "function", 
[16:19:56.530]                         envir = ns)
[16:19:56.530]                       envir <- sys.frame(frame)
[16:19:56.530]                       master <- NULL
[16:19:56.530]                       while (!identical(envir, .GlobalEnv) && 
[16:19:56.530]                         !identical(envir, emptyenv())) {
[16:19:56.530]                         if (exists("master", mode = "list", envir = envir, 
[16:19:56.530]                           inherits = FALSE)) {
[16:19:56.530]                           master <- get("master", mode = "list", 
[16:19:56.530]                             envir = envir, inherits = FALSE)
[16:19:56.530]                           if (inherits(master, c("SOCKnode", 
[16:19:56.530]                             "SOCK0node"))) {
[16:19:56.530]                             sendCondition <<- function(cond) {
[16:19:56.530]                               data <- list(type = "VALUE", value = cond, 
[16:19:56.530]                                 success = TRUE)
[16:19:56.530]                               parallel_sendData(master, data)
[16:19:56.530]                             }
[16:19:56.530]                             return(sendCondition)
[16:19:56.530]                           }
[16:19:56.530]                         }
[16:19:56.530]                         frame <- frame + 1L
[16:19:56.530]                         envir <- sys.frame(frame)
[16:19:56.530]                       }
[16:19:56.530]                     }
[16:19:56.530]                     sendCondition <<- function(cond) NULL
[16:19:56.530]                   }
[16:19:56.530]                 })
[16:19:56.530]                 withCallingHandlers({
[16:19:56.530]                   {
[16:19:56.530]                     Sys.sleep(3)
[16:19:56.530]                     42L
[16:19:56.530]                     stop("Woops")
[16:19:56.530]                   }
[16:19:56.530]                 }, immediateCondition = function(cond) {
[16:19:56.530]                   sendCondition <- ...future.makeSendCondition()
[16:19:56.530]                   sendCondition(cond)
[16:19:56.530]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:19:56.530]                   {
[16:19:56.530]                     inherits <- base::inherits
[16:19:56.530]                     invokeRestart <- base::invokeRestart
[16:19:56.530]                     is.null <- base::is.null
[16:19:56.530]                     muffled <- FALSE
[16:19:56.530]                     if (inherits(cond, "message")) {
[16:19:56.530]                       muffled <- grepl(pattern, "muffleMessage")
[16:19:56.530]                       if (muffled) 
[16:19:56.530]                         invokeRestart("muffleMessage")
[16:19:56.530]                     }
[16:19:56.530]                     else if (inherits(cond, "warning")) {
[16:19:56.530]                       muffled <- grepl(pattern, "muffleWarning")
[16:19:56.530]                       if (muffled) 
[16:19:56.530]                         invokeRestart("muffleWarning")
[16:19:56.530]                     }
[16:19:56.530]                     else if (inherits(cond, "condition")) {
[16:19:56.530]                       if (!is.null(pattern)) {
[16:19:56.530]                         computeRestarts <- base::computeRestarts
[16:19:56.530]                         grepl <- base::grepl
[16:19:56.530]                         restarts <- computeRestarts(cond)
[16:19:56.530]                         for (restart in restarts) {
[16:19:56.530]                           name <- restart$name
[16:19:56.530]                           if (is.null(name)) 
[16:19:56.530]                             next
[16:19:56.530]                           if (!grepl(pattern, name)) 
[16:19:56.530]                             next
[16:19:56.530]                           invokeRestart(restart)
[16:19:56.530]                           muffled <- TRUE
[16:19:56.530]                           break
[16:19:56.530]                         }
[16:19:56.530]                       }
[16:19:56.530]                     }
[16:19:56.530]                     invisible(muffled)
[16:19:56.530]                   }
[16:19:56.530]                   muffleCondition(cond)
[16:19:56.530]                 })
[16:19:56.530]             }))
[16:19:56.530]             future::FutureResult(value = ...future.value$value, 
[16:19:56.530]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:19:56.530]                   ...future.rng), globalenv = if (FALSE) 
[16:19:56.530]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:19:56.530]                     ...future.globalenv.names))
[16:19:56.530]                 else NULL, started = ...future.startTime, version = "1.8")
[16:19:56.530]         }, condition = base::local({
[16:19:56.530]             c <- base::c
[16:19:56.530]             inherits <- base::inherits
[16:19:56.530]             invokeRestart <- base::invokeRestart
[16:19:56.530]             length <- base::length
[16:19:56.530]             list <- base::list
[16:19:56.530]             seq.int <- base::seq.int
[16:19:56.530]             signalCondition <- base::signalCondition
[16:19:56.530]             sys.calls <- base::sys.calls
[16:19:56.530]             `[[` <- base::`[[`
[16:19:56.530]             `+` <- base::`+`
[16:19:56.530]             `<<-` <- base::`<<-`
[16:19:56.530]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:19:56.530]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:19:56.530]                   3L)]
[16:19:56.530]             }
[16:19:56.530]             function(cond) {
[16:19:56.530]                 is_error <- inherits(cond, "error")
[16:19:56.530]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:19:56.530]                   NULL)
[16:19:56.530]                 if (is_error) {
[16:19:56.530]                   sessionInformation <- function() {
[16:19:56.530]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:19:56.530]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:19:56.530]                       search = base::search(), system = base::Sys.info())
[16:19:56.530]                   }
[16:19:56.530]                   ...future.conditions[[length(...future.conditions) + 
[16:19:56.530]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:19:56.530]                     cond$call), session = sessionInformation(), 
[16:19:56.530]                     timestamp = base::Sys.time(), signaled = 0L)
[16:19:56.530]                   signalCondition(cond)
[16:19:56.530]                 }
[16:19:56.530]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:19:56.530]                 "immediateCondition"))) {
[16:19:56.530]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:19:56.530]                   ...future.conditions[[length(...future.conditions) + 
[16:19:56.530]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:19:56.530]                   if (TRUE && !signal) {
[16:19:56.530]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:19:56.530]                     {
[16:19:56.530]                       inherits <- base::inherits
[16:19:56.530]                       invokeRestart <- base::invokeRestart
[16:19:56.530]                       is.null <- base::is.null
[16:19:56.530]                       muffled <- FALSE
[16:19:56.530]                       if (inherits(cond, "message")) {
[16:19:56.530]                         muffled <- grepl(pattern, "muffleMessage")
[16:19:56.530]                         if (muffled) 
[16:19:56.530]                           invokeRestart("muffleMessage")
[16:19:56.530]                       }
[16:19:56.530]                       else if (inherits(cond, "warning")) {
[16:19:56.530]                         muffled <- grepl(pattern, "muffleWarning")
[16:19:56.530]                         if (muffled) 
[16:19:56.530]                           invokeRestart("muffleWarning")
[16:19:56.530]                       }
[16:19:56.530]                       else if (inherits(cond, "condition")) {
[16:19:56.530]                         if (!is.null(pattern)) {
[16:19:56.530]                           computeRestarts <- base::computeRestarts
[16:19:56.530]                           grepl <- base::grepl
[16:19:56.530]                           restarts <- computeRestarts(cond)
[16:19:56.530]                           for (restart in restarts) {
[16:19:56.530]                             name <- restart$name
[16:19:56.530]                             if (is.null(name)) 
[16:19:56.530]                               next
[16:19:56.530]                             if (!grepl(pattern, name)) 
[16:19:56.530]                               next
[16:19:56.530]                             invokeRestart(restart)
[16:19:56.530]                             muffled <- TRUE
[16:19:56.530]                             break
[16:19:56.530]                           }
[16:19:56.530]                         }
[16:19:56.530]                       }
[16:19:56.530]                       invisible(muffled)
[16:19:56.530]                     }
[16:19:56.530]                     muffleCondition(cond, pattern = "^muffle")
[16:19:56.530]                   }
[16:19:56.530]                 }
[16:19:56.530]                 else {
[16:19:56.530]                   if (TRUE) {
[16:19:56.530]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:19:56.530]                     {
[16:19:56.530]                       inherits <- base::inherits
[16:19:56.530]                       invokeRestart <- base::invokeRestart
[16:19:56.530]                       is.null <- base::is.null
[16:19:56.530]                       muffled <- FALSE
[16:19:56.530]                       if (inherits(cond, "message")) {
[16:19:56.530]                         muffled <- grepl(pattern, "muffleMessage")
[16:19:56.530]                         if (muffled) 
[16:19:56.530]                           invokeRestart("muffleMessage")
[16:19:56.530]                       }
[16:19:56.530]                       else if (inherits(cond, "warning")) {
[16:19:56.530]                         muffled <- grepl(pattern, "muffleWarning")
[16:19:56.530]                         if (muffled) 
[16:19:56.530]                           invokeRestart("muffleWarning")
[16:19:56.530]                       }
[16:19:56.530]                       else if (inherits(cond, "condition")) {
[16:19:56.530]                         if (!is.null(pattern)) {
[16:19:56.530]                           computeRestarts <- base::computeRestarts
[16:19:56.530]                           grepl <- base::grepl
[16:19:56.530]                           restarts <- computeRestarts(cond)
[16:19:56.530]                           for (restart in restarts) {
[16:19:56.530]                             name <- restart$name
[16:19:56.530]                             if (is.null(name)) 
[16:19:56.530]                               next
[16:19:56.530]                             if (!grepl(pattern, name)) 
[16:19:56.530]                               next
[16:19:56.530]                             invokeRestart(restart)
[16:19:56.530]                             muffled <- TRUE
[16:19:56.530]                             break
[16:19:56.530]                           }
[16:19:56.530]                         }
[16:19:56.530]                       }
[16:19:56.530]                       invisible(muffled)
[16:19:56.530]                     }
[16:19:56.530]                     muffleCondition(cond, pattern = "^muffle")
[16:19:56.530]                   }
[16:19:56.530]                 }
[16:19:56.530]             }
[16:19:56.530]         }))
[16:19:56.530]     }, error = function(ex) {
[16:19:56.530]         base::structure(base::list(value = NULL, visible = NULL, 
[16:19:56.530]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:19:56.530]                 ...future.rng), started = ...future.startTime, 
[16:19:56.530]             finished = Sys.time(), session_uuid = NA_character_, 
[16:19:56.530]             version = "1.8"), class = "FutureResult")
[16:19:56.530]     }, finally = {
[16:19:56.530]         if (!identical(...future.workdir, getwd())) 
[16:19:56.530]             setwd(...future.workdir)
[16:19:56.530]         {
[16:19:56.530]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:19:56.530]                 ...future.oldOptions$nwarnings <- NULL
[16:19:56.530]             }
[16:19:56.530]             base::options(...future.oldOptions)
[16:19:56.530]             if (.Platform$OS.type == "windows") {
[16:19:56.530]                 old_names <- names(...future.oldEnvVars)
[16:19:56.530]                 envs <- base::Sys.getenv()
[16:19:56.530]                 names <- names(envs)
[16:19:56.530]                 common <- intersect(names, old_names)
[16:19:56.530]                 added <- setdiff(names, old_names)
[16:19:56.530]                 removed <- setdiff(old_names, names)
[16:19:56.530]                 changed <- common[...future.oldEnvVars[common] != 
[16:19:56.530]                   envs[common]]
[16:19:56.530]                 NAMES <- toupper(changed)
[16:19:56.530]                 args <- list()
[16:19:56.530]                 for (kk in seq_along(NAMES)) {
[16:19:56.530]                   name <- changed[[kk]]
[16:19:56.530]                   NAME <- NAMES[[kk]]
[16:19:56.530]                   if (name != NAME && is.element(NAME, old_names)) 
[16:19:56.530]                     next
[16:19:56.530]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:19:56.530]                 }
[16:19:56.530]                 NAMES <- toupper(added)
[16:19:56.530]                 for (kk in seq_along(NAMES)) {
[16:19:56.530]                   name <- added[[kk]]
[16:19:56.530]                   NAME <- NAMES[[kk]]
[16:19:56.530]                   if (name != NAME && is.element(NAME, old_names)) 
[16:19:56.530]                     next
[16:19:56.530]                   args[[name]] <- ""
[16:19:56.530]                 }
[16:19:56.530]                 NAMES <- toupper(removed)
[16:19:56.530]                 for (kk in seq_along(NAMES)) {
[16:19:56.530]                   name <- removed[[kk]]
[16:19:56.530]                   NAME <- NAMES[[kk]]
[16:19:56.530]                   if (name != NAME && is.element(NAME, old_names)) 
[16:19:56.530]                     next
[16:19:56.530]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:19:56.530]                 }
[16:19:56.530]                 if (length(args) > 0) 
[16:19:56.530]                   base::do.call(base::Sys.setenv, args = args)
[16:19:56.530]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:19:56.530]             }
[16:19:56.530]             else {
[16:19:56.530]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:19:56.530]             }
[16:19:56.530]             {
[16:19:56.530]                 if (base::length(...future.futureOptionsAdded) > 
[16:19:56.530]                   0L) {
[16:19:56.530]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:19:56.530]                   base::names(opts) <- ...future.futureOptionsAdded
[16:19:56.530]                   base::options(opts)
[16:19:56.530]                 }
[16:19:56.530]                 {
[16:19:56.530]                   {
[16:19:56.530]                     base::options(mc.cores = ...future.mc.cores.old)
[16:19:56.530]                     NULL
[16:19:56.530]                   }
[16:19:56.530]                   options(future.plan = NULL)
[16:19:56.530]                   if (is.na(NA_character_)) 
[16:19:56.530]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:19:56.530]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:19:56.530]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:19:56.530]                     .init = FALSE)
[16:19:56.530]                 }
[16:19:56.530]             }
[16:19:56.530]         }
[16:19:56.530]     })
[16:19:56.530]     if (TRUE) {
[16:19:56.530]         base::sink(type = "output", split = FALSE)
[16:19:56.530]         if (TRUE) {
[16:19:56.530]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:19:56.530]         }
[16:19:56.530]         else {
[16:19:56.530]             ...future.result["stdout"] <- base::list(NULL)
[16:19:56.530]         }
[16:19:56.530]         base::close(...future.stdout)
[16:19:56.530]         ...future.stdout <- NULL
[16:19:56.530]     }
[16:19:56.530]     ...future.result$conditions <- ...future.conditions
[16:19:56.530]     ...future.result$finished <- base::Sys.time()
[16:19:56.530]     ...future.result
[16:19:56.530] }
[16:19:56.533] MultisessionFuture started
[16:19:56.533] - Launch lazy future ... done
[16:19:56.533] run() for ‘MultisessionFuture’ ... done
<simpleError: No error has been caught because the future is unresolved: ‘f’>
[16:19:59.547] receiveMessageFromWorker() for ClusterFuture ...
[16:19:59.547] - Validating connection of MultisessionFuture
[16:19:59.547] - received message: FutureResult
[16:19:59.547] - Received FutureResult
[16:19:59.548] - Erased future from FutureRegistry
[16:19:59.548] result() for ClusterFuture ...
[16:19:59.548] - result already collected: FutureResult
[16:19:59.548] result() for ClusterFuture ... done
[16:19:59.548] signalConditions() ...
[16:19:59.548]  - include = ‘immediateCondition’
[16:19:59.548]  - exclude = 
[16:19:59.548]  - resignal = FALSE
[16:19:59.548]  - Number of conditions: 1
[16:19:59.548] signalConditions() ... done
[16:19:59.549] receiveMessageFromWorker() for ClusterFuture ... done
[16:19:59.549] A MultisessionFuture was resolved (result was not collected)
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    Sys.sleep(3)
    42L
    stop("Woops")
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘simpleError’
Early signaling: FALSE
Owner process: e3428bc4-20ac-e6ab-dc02-a0fc7b701951
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
> 
> message("*** backtrace( ) - exceptions ... DONE")
*** backtrace( ) - exceptions ... DONE
> 
> 
> message("*** backtrace( ) ... DONE")
*** backtrace( ) ... DONE
> 
> source("incl/end.R")
[16:19:59.550] plan(): Setting new future strategy stack:
[16:19:59.551] List of future strategies:
[16:19:59.551] 1. FutureStrategy:
[16:19:59.551]    - args: function (..., envir = parent.frame())
[16:19:59.551]    - tweaked: FALSE
[16:19:59.551]    - call: future::plan(oplan)
[16:19:59.551] plan(): nbrOfWorkers() = 1
> 
