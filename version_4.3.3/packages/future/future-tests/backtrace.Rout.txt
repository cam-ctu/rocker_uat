
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[10:32:04.840] plan(): Setting new future strategy stack:
[10:32:04.841] List of future strategies:
[10:32:04.841] 1. sequential:
[10:32:04.841]    - args: function (..., envir = parent.frame())
[10:32:04.841]    - tweaked: FALSE
[10:32:04.841]    - call: future::plan("sequential")
[10:32:04.855] plan(): nbrOfWorkers() = 1
> 
> message("*** backtrace( ) ...")
*** backtrace( ) ...
> 
> message("*** backtrace( ) - explicit future ...")
*** backtrace( ) - explicit future ...
> 
> f <- future({ 42L; stop("Woops") })
[10:32:04.866] getGlobalsAndPackages() ...
[10:32:04.866] Searching for globals...
[10:32:04.873] - globals found: [2] ‘{’, ‘stop’
[10:32:04.873] Searching for globals ... DONE
[10:32:04.873] Resolving globals: FALSE
[10:32:04.873] 
[10:32:04.874] 
[10:32:04.874] getGlobalsAndPackages() ... DONE
[10:32:04.874] run() for ‘Future’ ...
[10:32:04.874] - state: ‘created’
[10:32:04.875] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:04.875] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:04.875] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:04.875]   - Field: ‘label’
[10:32:04.875]   - Field: ‘local’
[10:32:04.875]   - Field: ‘owner’
[10:32:04.876]   - Field: ‘envir’
[10:32:04.876]   - Field: ‘packages’
[10:32:04.876]   - Field: ‘gc’
[10:32:04.876]   - Field: ‘conditions’
[10:32:04.876]   - Field: ‘expr’
[10:32:04.876]   - Field: ‘uuid’
[10:32:04.876]   - Field: ‘seed’
[10:32:04.876]   - Field: ‘version’
[10:32:04.876]   - Field: ‘result’
[10:32:04.876]   - Field: ‘asynchronous’
[10:32:04.876]   - Field: ‘calls’
[10:32:04.877]   - Field: ‘globals’
[10:32:04.877]   - Field: ‘stdout’
[10:32:04.877]   - Field: ‘earlySignal’
[10:32:04.877]   - Field: ‘lazy’
[10:32:04.877]   - Field: ‘state’
[10:32:04.877] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:04.877] - Launch lazy future ...
[10:32:04.878] Packages needed by the future expression (n = 0): <none>
[10:32:04.878] Packages needed by future strategies (n = 0): <none>
[10:32:04.879] {
[10:32:04.879]     {
[10:32:04.879]         {
[10:32:04.879]             ...future.startTime <- base::Sys.time()
[10:32:04.879]             {
[10:32:04.879]                 {
[10:32:04.879]                   {
[10:32:04.879]                     base::local({
[10:32:04.879]                       has_future <- base::requireNamespace("future", 
[10:32:04.879]                         quietly = TRUE)
[10:32:04.879]                       if (has_future) {
[10:32:04.879]                         ns <- base::getNamespace("future")
[10:32:04.879]                         version <- ns[[".package"]][["version"]]
[10:32:04.879]                         if (is.null(version)) 
[10:32:04.879]                           version <- utils::packageVersion("future")
[10:32:04.879]                       }
[10:32:04.879]                       else {
[10:32:04.879]                         version <- NULL
[10:32:04.879]                       }
[10:32:04.879]                       if (!has_future || version < "1.8.0") {
[10:32:04.879]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:04.879]                           "", base::R.version$version.string), 
[10:32:04.879]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:04.879]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:04.879]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:04.879]                             "release", "version")], collapse = " "), 
[10:32:04.879]                           hostname = base::Sys.info()[["nodename"]])
[10:32:04.879]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:04.879]                           info)
[10:32:04.879]                         info <- base::paste(info, collapse = "; ")
[10:32:04.879]                         if (!has_future) {
[10:32:04.879]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:04.879]                             info)
[10:32:04.879]                         }
[10:32:04.879]                         else {
[10:32:04.879]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:04.879]                             info, version)
[10:32:04.879]                         }
[10:32:04.879]                         base::stop(msg)
[10:32:04.879]                       }
[10:32:04.879]                     })
[10:32:04.879]                   }
[10:32:04.879]                   ...future.strategy.old <- future::plan("list")
[10:32:04.879]                   options(future.plan = NULL)
[10:32:04.879]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:04.879]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:04.879]                 }
[10:32:04.879]                 ...future.workdir <- getwd()
[10:32:04.879]             }
[10:32:04.879]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:04.879]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:04.879]         }
[10:32:04.879]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:04.879]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:04.879]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:04.879]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:04.879]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:04.879]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:04.879]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:04.879]             base::names(...future.oldOptions))
[10:32:04.879]     }
[10:32:04.879]     if (FALSE) {
[10:32:04.879]     }
[10:32:04.879]     else {
[10:32:04.879]         if (TRUE) {
[10:32:04.879]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:04.879]                 open = "w")
[10:32:04.879]         }
[10:32:04.879]         else {
[10:32:04.879]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:04.879]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:04.879]         }
[10:32:04.879]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:04.879]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:04.879]             base::sink(type = "output", split = FALSE)
[10:32:04.879]             base::close(...future.stdout)
[10:32:04.879]         }, add = TRUE)
[10:32:04.879]     }
[10:32:04.879]     ...future.frame <- base::sys.nframe()
[10:32:04.879]     ...future.conditions <- base::list()
[10:32:04.879]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:04.879]     if (FALSE) {
[10:32:04.879]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:04.879]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:04.879]     }
[10:32:04.879]     ...future.result <- base::tryCatch({
[10:32:04.879]         base::withCallingHandlers({
[10:32:04.879]             ...future.value <- base::withVisible(base::local({
[10:32:04.879]                 42L
[10:32:04.879]                 stop("Woops")
[10:32:04.879]             }))
[10:32:04.879]             future::FutureResult(value = ...future.value$value, 
[10:32:04.879]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:04.879]                   ...future.rng), globalenv = if (FALSE) 
[10:32:04.879]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:04.879]                     ...future.globalenv.names))
[10:32:04.879]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:04.879]         }, condition = base::local({
[10:32:04.879]             c <- base::c
[10:32:04.879]             inherits <- base::inherits
[10:32:04.879]             invokeRestart <- base::invokeRestart
[10:32:04.879]             length <- base::length
[10:32:04.879]             list <- base::list
[10:32:04.879]             seq.int <- base::seq.int
[10:32:04.879]             signalCondition <- base::signalCondition
[10:32:04.879]             sys.calls <- base::sys.calls
[10:32:04.879]             `[[` <- base::`[[`
[10:32:04.879]             `+` <- base::`+`
[10:32:04.879]             `<<-` <- base::`<<-`
[10:32:04.879]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:04.879]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:04.879]                   3L)]
[10:32:04.879]             }
[10:32:04.879]             function(cond) {
[10:32:04.879]                 is_error <- inherits(cond, "error")
[10:32:04.879]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:04.879]                   NULL)
[10:32:04.879]                 if (is_error) {
[10:32:04.879]                   sessionInformation <- function() {
[10:32:04.879]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:04.879]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:04.879]                       search = base::search(), system = base::Sys.info())
[10:32:04.879]                   }
[10:32:04.879]                   ...future.conditions[[length(...future.conditions) + 
[10:32:04.879]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:04.879]                     cond$call), session = sessionInformation(), 
[10:32:04.879]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:04.879]                   signalCondition(cond)
[10:32:04.879]                 }
[10:32:04.879]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:04.879]                 "immediateCondition"))) {
[10:32:04.879]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:04.879]                   ...future.conditions[[length(...future.conditions) + 
[10:32:04.879]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:04.879]                   if (TRUE && !signal) {
[10:32:04.879]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:04.879]                     {
[10:32:04.879]                       inherits <- base::inherits
[10:32:04.879]                       invokeRestart <- base::invokeRestart
[10:32:04.879]                       is.null <- base::is.null
[10:32:04.879]                       muffled <- FALSE
[10:32:04.879]                       if (inherits(cond, "message")) {
[10:32:04.879]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:04.879]                         if (muffled) 
[10:32:04.879]                           invokeRestart("muffleMessage")
[10:32:04.879]                       }
[10:32:04.879]                       else if (inherits(cond, "warning")) {
[10:32:04.879]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:04.879]                         if (muffled) 
[10:32:04.879]                           invokeRestart("muffleWarning")
[10:32:04.879]                       }
[10:32:04.879]                       else if (inherits(cond, "condition")) {
[10:32:04.879]                         if (!is.null(pattern)) {
[10:32:04.879]                           computeRestarts <- base::computeRestarts
[10:32:04.879]                           grepl <- base::grepl
[10:32:04.879]                           restarts <- computeRestarts(cond)
[10:32:04.879]                           for (restart in restarts) {
[10:32:04.879]                             name <- restart$name
[10:32:04.879]                             if (is.null(name)) 
[10:32:04.879]                               next
[10:32:04.879]                             if (!grepl(pattern, name)) 
[10:32:04.879]                               next
[10:32:04.879]                             invokeRestart(restart)
[10:32:04.879]                             muffled <- TRUE
[10:32:04.879]                             break
[10:32:04.879]                           }
[10:32:04.879]                         }
[10:32:04.879]                       }
[10:32:04.879]                       invisible(muffled)
[10:32:04.879]                     }
[10:32:04.879]                     muffleCondition(cond, pattern = "^muffle")
[10:32:04.879]                   }
[10:32:04.879]                 }
[10:32:04.879]                 else {
[10:32:04.879]                   if (TRUE) {
[10:32:04.879]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:04.879]                     {
[10:32:04.879]                       inherits <- base::inherits
[10:32:04.879]                       invokeRestart <- base::invokeRestart
[10:32:04.879]                       is.null <- base::is.null
[10:32:04.879]                       muffled <- FALSE
[10:32:04.879]                       if (inherits(cond, "message")) {
[10:32:04.879]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:04.879]                         if (muffled) 
[10:32:04.879]                           invokeRestart("muffleMessage")
[10:32:04.879]                       }
[10:32:04.879]                       else if (inherits(cond, "warning")) {
[10:32:04.879]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:04.879]                         if (muffled) 
[10:32:04.879]                           invokeRestart("muffleWarning")
[10:32:04.879]                       }
[10:32:04.879]                       else if (inherits(cond, "condition")) {
[10:32:04.879]                         if (!is.null(pattern)) {
[10:32:04.879]                           computeRestarts <- base::computeRestarts
[10:32:04.879]                           grepl <- base::grepl
[10:32:04.879]                           restarts <- computeRestarts(cond)
[10:32:04.879]                           for (restart in restarts) {
[10:32:04.879]                             name <- restart$name
[10:32:04.879]                             if (is.null(name)) 
[10:32:04.879]                               next
[10:32:04.879]                             if (!grepl(pattern, name)) 
[10:32:04.879]                               next
[10:32:04.879]                             invokeRestart(restart)
[10:32:04.879]                             muffled <- TRUE
[10:32:04.879]                             break
[10:32:04.879]                           }
[10:32:04.879]                         }
[10:32:04.879]                       }
[10:32:04.879]                       invisible(muffled)
[10:32:04.879]                     }
[10:32:04.879]                     muffleCondition(cond, pattern = "^muffle")
[10:32:04.879]                   }
[10:32:04.879]                 }
[10:32:04.879]             }
[10:32:04.879]         }))
[10:32:04.879]     }, error = function(ex) {
[10:32:04.879]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:04.879]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:04.879]                 ...future.rng), started = ...future.startTime, 
[10:32:04.879]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:04.879]             version = "1.8"), class = "FutureResult")
[10:32:04.879]     }, finally = {
[10:32:04.879]         if (!identical(...future.workdir, getwd())) 
[10:32:04.879]             setwd(...future.workdir)
[10:32:04.879]         {
[10:32:04.879]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:04.879]                 ...future.oldOptions$nwarnings <- NULL
[10:32:04.879]             }
[10:32:04.879]             base::options(...future.oldOptions)
[10:32:04.879]             if (.Platform$OS.type == "windows") {
[10:32:04.879]                 old_names <- names(...future.oldEnvVars)
[10:32:04.879]                 envs <- base::Sys.getenv()
[10:32:04.879]                 names <- names(envs)
[10:32:04.879]                 common <- intersect(names, old_names)
[10:32:04.879]                 added <- setdiff(names, old_names)
[10:32:04.879]                 removed <- setdiff(old_names, names)
[10:32:04.879]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:04.879]                   envs[common]]
[10:32:04.879]                 NAMES <- toupper(changed)
[10:32:04.879]                 args <- list()
[10:32:04.879]                 for (kk in seq_along(NAMES)) {
[10:32:04.879]                   name <- changed[[kk]]
[10:32:04.879]                   NAME <- NAMES[[kk]]
[10:32:04.879]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:04.879]                     next
[10:32:04.879]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:04.879]                 }
[10:32:04.879]                 NAMES <- toupper(added)
[10:32:04.879]                 for (kk in seq_along(NAMES)) {
[10:32:04.879]                   name <- added[[kk]]
[10:32:04.879]                   NAME <- NAMES[[kk]]
[10:32:04.879]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:04.879]                     next
[10:32:04.879]                   args[[name]] <- ""
[10:32:04.879]                 }
[10:32:04.879]                 NAMES <- toupper(removed)
[10:32:04.879]                 for (kk in seq_along(NAMES)) {
[10:32:04.879]                   name <- removed[[kk]]
[10:32:04.879]                   NAME <- NAMES[[kk]]
[10:32:04.879]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:04.879]                     next
[10:32:04.879]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:04.879]                 }
[10:32:04.879]                 if (length(args) > 0) 
[10:32:04.879]                   base::do.call(base::Sys.setenv, args = args)
[10:32:04.879]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:04.879]             }
[10:32:04.879]             else {
[10:32:04.879]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:04.879]             }
[10:32:04.879]             {
[10:32:04.879]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:04.879]                   0L) {
[10:32:04.879]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:04.879]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:04.879]                   base::options(opts)
[10:32:04.879]                 }
[10:32:04.879]                 {
[10:32:04.879]                   {
[10:32:04.879]                     NULL
[10:32:04.879]                     RNGkind("Mersenne-Twister")
[10:32:04.879]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:04.879]                       inherits = FALSE)
[10:32:04.879]                   }
[10:32:04.879]                   options(future.plan = NULL)
[10:32:04.879]                   if (is.na(NA_character_)) 
[10:32:04.879]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:04.879]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:04.879]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:04.879]                     .init = FALSE)
[10:32:04.879]                 }
[10:32:04.879]             }
[10:32:04.879]         }
[10:32:04.879]     })
[10:32:04.879]     if (TRUE) {
[10:32:04.879]         base::sink(type = "output", split = FALSE)
[10:32:04.879]         if (TRUE) {
[10:32:04.879]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:04.879]         }
[10:32:04.879]         else {
[10:32:04.879]             ...future.result["stdout"] <- base::list(NULL)
[10:32:04.879]         }
[10:32:04.879]         base::close(...future.stdout)
[10:32:04.879]         ...future.stdout <- NULL
[10:32:04.879]     }
[10:32:04.879]     ...future.result$conditions <- ...future.conditions
[10:32:04.879]     ...future.result$finished <- base::Sys.time()
[10:32:04.879]     ...future.result
[10:32:04.879] }
[10:32:04.881] plan(): Setting new future strategy stack:
[10:32:04.881] List of future strategies:
[10:32:04.881] 1. sequential:
[10:32:04.881]    - args: function (..., envir = parent.frame())
[10:32:04.881]    - tweaked: FALSE
[10:32:04.881]    - call: NULL
[10:32:04.881] plan(): nbrOfWorkers() = 1
[10:32:04.882] plan(): Setting new future strategy stack:
[10:32:04.883] List of future strategies:
[10:32:04.883] 1. sequential:
[10:32:04.883]    - args: function (..., envir = parent.frame())
[10:32:04.883]    - tweaked: FALSE
[10:32:04.883]    - call: future::plan("sequential")
[10:32:04.883] plan(): nbrOfWorkers() = 1
[10:32:04.883] SequentialFuture started (and completed)
[10:32:04.883] signalConditions() ...
[10:32:04.884]  - include = ‘immediateCondition’
[10:32:04.884]  - exclude = 
[10:32:04.884]  - resignal = FALSE
[10:32:04.884]  - Number of conditions: 1
[10:32:04.884] signalConditions() ... done
[10:32:04.884] - Launch lazy future ... done
[10:32:04.884] run() for ‘SequentialFuture’ ... done
> v <- value(f, signal = FALSE)
[10:32:04.885] signalConditions() ...
[10:32:04.885]  - include = ‘immediateCondition’
[10:32:04.885]  - exclude = 
[10:32:04.885]  - resignal = FALSE
[10:32:04.885]  - Number of conditions: 1
[10:32:04.885] signalConditions() ... done
> print(v)
<simpleError in eval(quote({    42L    stop("Woops")}), new.env()): Woops>
> calls <- backtrace(f)
[10:32:04.886] resolved() for ‘SequentialFuture’ ...
[10:32:04.887] - state: ‘finished’
[10:32:04.887] - run: TRUE
[10:32:04.887] - result: ‘FutureResult’
[10:32:04.887] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
future({
    42L
    stop("Woops")
})

[[2]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[3]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[4]]
stop("Woops")

[[5]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> 
> message("*** backtrace( ) - explicit future ... DONE")
*** backtrace( ) - explicit future ... DONE
> 
> 
> message("*** backtrace( ) - implicit future ...")
*** backtrace( ) - implicit future ...
> 
> v %<-% { 42L; stop("Woops") }
[10:32:04.888] getGlobalsAndPackages() ...
[10:32:04.888] Searching for globals...
[10:32:04.889] - globals found: [2] ‘{’, ‘stop’
[10:32:04.889] Searching for globals ... DONE
[10:32:04.889] Resolving globals: FALSE
[10:32:04.889] 
[10:32:04.889] 
[10:32:04.889] getGlobalsAndPackages() ... DONE
[10:32:04.890] run() for ‘Future’ ...
[10:32:04.890] - state: ‘created’
[10:32:04.890] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:04.890] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:04.890] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:04.890]   - Field: ‘label’
[10:32:04.890]   - Field: ‘local’
[10:32:04.891]   - Field: ‘owner’
[10:32:04.891]   - Field: ‘envir’
[10:32:04.891]   - Field: ‘packages’
[10:32:04.891]   - Field: ‘gc’
[10:32:04.891]   - Field: ‘conditions’
[10:32:04.891]   - Field: ‘expr’
[10:32:04.891]   - Field: ‘uuid’
[10:32:04.891]   - Field: ‘seed’
[10:32:04.891]   - Field: ‘version’
[10:32:04.891]   - Field: ‘result’
[10:32:04.891]   - Field: ‘asynchronous’
[10:32:04.892]   - Field: ‘calls’
[10:32:04.892]   - Field: ‘globals’
[10:32:04.892]   - Field: ‘stdout’
[10:32:04.892]   - Field: ‘earlySignal’
[10:32:04.892]   - Field: ‘lazy’
[10:32:04.892]   - Field: ‘state’
[10:32:04.892] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:04.892] - Launch lazy future ...
[10:32:04.892] Packages needed by the future expression (n = 0): <none>
[10:32:04.892] Packages needed by future strategies (n = 0): <none>
[10:32:04.893] {
[10:32:04.893]     {
[10:32:04.893]         {
[10:32:04.893]             ...future.startTime <- base::Sys.time()
[10:32:04.893]             {
[10:32:04.893]                 {
[10:32:04.893]                   {
[10:32:04.893]                     base::local({
[10:32:04.893]                       has_future <- base::requireNamespace("future", 
[10:32:04.893]                         quietly = TRUE)
[10:32:04.893]                       if (has_future) {
[10:32:04.893]                         ns <- base::getNamespace("future")
[10:32:04.893]                         version <- ns[[".package"]][["version"]]
[10:32:04.893]                         if (is.null(version)) 
[10:32:04.893]                           version <- utils::packageVersion("future")
[10:32:04.893]                       }
[10:32:04.893]                       else {
[10:32:04.893]                         version <- NULL
[10:32:04.893]                       }
[10:32:04.893]                       if (!has_future || version < "1.8.0") {
[10:32:04.893]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:04.893]                           "", base::R.version$version.string), 
[10:32:04.893]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:04.893]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:04.893]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:04.893]                             "release", "version")], collapse = " "), 
[10:32:04.893]                           hostname = base::Sys.info()[["nodename"]])
[10:32:04.893]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:04.893]                           info)
[10:32:04.893]                         info <- base::paste(info, collapse = "; ")
[10:32:04.893]                         if (!has_future) {
[10:32:04.893]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:04.893]                             info)
[10:32:04.893]                         }
[10:32:04.893]                         else {
[10:32:04.893]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:04.893]                             info, version)
[10:32:04.893]                         }
[10:32:04.893]                         base::stop(msg)
[10:32:04.893]                       }
[10:32:04.893]                     })
[10:32:04.893]                   }
[10:32:04.893]                   ...future.strategy.old <- future::plan("list")
[10:32:04.893]                   options(future.plan = NULL)
[10:32:04.893]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:04.893]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:04.893]                 }
[10:32:04.893]                 ...future.workdir <- getwd()
[10:32:04.893]             }
[10:32:04.893]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:04.893]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:04.893]         }
[10:32:04.893]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:04.893]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:04.893]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:04.893]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:04.893]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:04.893]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:04.893]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:04.893]             base::names(...future.oldOptions))
[10:32:04.893]     }
[10:32:04.893]     if (FALSE) {
[10:32:04.893]     }
[10:32:04.893]     else {
[10:32:04.893]         if (TRUE) {
[10:32:04.893]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:04.893]                 open = "w")
[10:32:04.893]         }
[10:32:04.893]         else {
[10:32:04.893]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:04.893]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:04.893]         }
[10:32:04.893]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:04.893]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:04.893]             base::sink(type = "output", split = FALSE)
[10:32:04.893]             base::close(...future.stdout)
[10:32:04.893]         }, add = TRUE)
[10:32:04.893]     }
[10:32:04.893]     ...future.frame <- base::sys.nframe()
[10:32:04.893]     ...future.conditions <- base::list()
[10:32:04.893]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:04.893]     if (FALSE) {
[10:32:04.893]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:04.893]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:04.893]     }
[10:32:04.893]     ...future.result <- base::tryCatch({
[10:32:04.893]         base::withCallingHandlers({
[10:32:04.893]             ...future.value <- base::withVisible(base::local({
[10:32:04.893]                 42L
[10:32:04.893]                 stop("Woops")
[10:32:04.893]             }))
[10:32:04.893]             future::FutureResult(value = ...future.value$value, 
[10:32:04.893]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:04.893]                   ...future.rng), globalenv = if (FALSE) 
[10:32:04.893]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:04.893]                     ...future.globalenv.names))
[10:32:04.893]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:04.893]         }, condition = base::local({
[10:32:04.893]             c <- base::c
[10:32:04.893]             inherits <- base::inherits
[10:32:04.893]             invokeRestart <- base::invokeRestart
[10:32:04.893]             length <- base::length
[10:32:04.893]             list <- base::list
[10:32:04.893]             seq.int <- base::seq.int
[10:32:04.893]             signalCondition <- base::signalCondition
[10:32:04.893]             sys.calls <- base::sys.calls
[10:32:04.893]             `[[` <- base::`[[`
[10:32:04.893]             `+` <- base::`+`
[10:32:04.893]             `<<-` <- base::`<<-`
[10:32:04.893]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:04.893]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:04.893]                   3L)]
[10:32:04.893]             }
[10:32:04.893]             function(cond) {
[10:32:04.893]                 is_error <- inherits(cond, "error")
[10:32:04.893]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:04.893]                   NULL)
[10:32:04.893]                 if (is_error) {
[10:32:04.893]                   sessionInformation <- function() {
[10:32:04.893]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:04.893]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:04.893]                       search = base::search(), system = base::Sys.info())
[10:32:04.893]                   }
[10:32:04.893]                   ...future.conditions[[length(...future.conditions) + 
[10:32:04.893]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:04.893]                     cond$call), session = sessionInformation(), 
[10:32:04.893]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:04.893]                   signalCondition(cond)
[10:32:04.893]                 }
[10:32:04.893]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:04.893]                 "immediateCondition"))) {
[10:32:04.893]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:04.893]                   ...future.conditions[[length(...future.conditions) + 
[10:32:04.893]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:04.893]                   if (TRUE && !signal) {
[10:32:04.893]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:04.893]                     {
[10:32:04.893]                       inherits <- base::inherits
[10:32:04.893]                       invokeRestart <- base::invokeRestart
[10:32:04.893]                       is.null <- base::is.null
[10:32:04.893]                       muffled <- FALSE
[10:32:04.893]                       if (inherits(cond, "message")) {
[10:32:04.893]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:04.893]                         if (muffled) 
[10:32:04.893]                           invokeRestart("muffleMessage")
[10:32:04.893]                       }
[10:32:04.893]                       else if (inherits(cond, "warning")) {
[10:32:04.893]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:04.893]                         if (muffled) 
[10:32:04.893]                           invokeRestart("muffleWarning")
[10:32:04.893]                       }
[10:32:04.893]                       else if (inherits(cond, "condition")) {
[10:32:04.893]                         if (!is.null(pattern)) {
[10:32:04.893]                           computeRestarts <- base::computeRestarts
[10:32:04.893]                           grepl <- base::grepl
[10:32:04.893]                           restarts <- computeRestarts(cond)
[10:32:04.893]                           for (restart in restarts) {
[10:32:04.893]                             name <- restart$name
[10:32:04.893]                             if (is.null(name)) 
[10:32:04.893]                               next
[10:32:04.893]                             if (!grepl(pattern, name)) 
[10:32:04.893]                               next
[10:32:04.893]                             invokeRestart(restart)
[10:32:04.893]                             muffled <- TRUE
[10:32:04.893]                             break
[10:32:04.893]                           }
[10:32:04.893]                         }
[10:32:04.893]                       }
[10:32:04.893]                       invisible(muffled)
[10:32:04.893]                     }
[10:32:04.893]                     muffleCondition(cond, pattern = "^muffle")
[10:32:04.893]                   }
[10:32:04.893]                 }
[10:32:04.893]                 else {
[10:32:04.893]                   if (TRUE) {
[10:32:04.893]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:04.893]                     {
[10:32:04.893]                       inherits <- base::inherits
[10:32:04.893]                       invokeRestart <- base::invokeRestart
[10:32:04.893]                       is.null <- base::is.null
[10:32:04.893]                       muffled <- FALSE
[10:32:04.893]                       if (inherits(cond, "message")) {
[10:32:04.893]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:04.893]                         if (muffled) 
[10:32:04.893]                           invokeRestart("muffleMessage")
[10:32:04.893]                       }
[10:32:04.893]                       else if (inherits(cond, "warning")) {
[10:32:04.893]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:04.893]                         if (muffled) 
[10:32:04.893]                           invokeRestart("muffleWarning")
[10:32:04.893]                       }
[10:32:04.893]                       else if (inherits(cond, "condition")) {
[10:32:04.893]                         if (!is.null(pattern)) {
[10:32:04.893]                           computeRestarts <- base::computeRestarts
[10:32:04.893]                           grepl <- base::grepl
[10:32:04.893]                           restarts <- computeRestarts(cond)
[10:32:04.893]                           for (restart in restarts) {
[10:32:04.893]                             name <- restart$name
[10:32:04.893]                             if (is.null(name)) 
[10:32:04.893]                               next
[10:32:04.893]                             if (!grepl(pattern, name)) 
[10:32:04.893]                               next
[10:32:04.893]                             invokeRestart(restart)
[10:32:04.893]                             muffled <- TRUE
[10:32:04.893]                             break
[10:32:04.893]                           }
[10:32:04.893]                         }
[10:32:04.893]                       }
[10:32:04.893]                       invisible(muffled)
[10:32:04.893]                     }
[10:32:04.893]                     muffleCondition(cond, pattern = "^muffle")
[10:32:04.893]                   }
[10:32:04.893]                 }
[10:32:04.893]             }
[10:32:04.893]         }))
[10:32:04.893]     }, error = function(ex) {
[10:32:04.893]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:04.893]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:04.893]                 ...future.rng), started = ...future.startTime, 
[10:32:04.893]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:04.893]             version = "1.8"), class = "FutureResult")
[10:32:04.893]     }, finally = {
[10:32:04.893]         if (!identical(...future.workdir, getwd())) 
[10:32:04.893]             setwd(...future.workdir)
[10:32:04.893]         {
[10:32:04.893]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:04.893]                 ...future.oldOptions$nwarnings <- NULL
[10:32:04.893]             }
[10:32:04.893]             base::options(...future.oldOptions)
[10:32:04.893]             if (.Platform$OS.type == "windows") {
[10:32:04.893]                 old_names <- names(...future.oldEnvVars)
[10:32:04.893]                 envs <- base::Sys.getenv()
[10:32:04.893]                 names <- names(envs)
[10:32:04.893]                 common <- intersect(names, old_names)
[10:32:04.893]                 added <- setdiff(names, old_names)
[10:32:04.893]                 removed <- setdiff(old_names, names)
[10:32:04.893]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:04.893]                   envs[common]]
[10:32:04.893]                 NAMES <- toupper(changed)
[10:32:04.893]                 args <- list()
[10:32:04.893]                 for (kk in seq_along(NAMES)) {
[10:32:04.893]                   name <- changed[[kk]]
[10:32:04.893]                   NAME <- NAMES[[kk]]
[10:32:04.893]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:04.893]                     next
[10:32:04.893]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:04.893]                 }
[10:32:04.893]                 NAMES <- toupper(added)
[10:32:04.893]                 for (kk in seq_along(NAMES)) {
[10:32:04.893]                   name <- added[[kk]]
[10:32:04.893]                   NAME <- NAMES[[kk]]
[10:32:04.893]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:04.893]                     next
[10:32:04.893]                   args[[name]] <- ""
[10:32:04.893]                 }
[10:32:04.893]                 NAMES <- toupper(removed)
[10:32:04.893]                 for (kk in seq_along(NAMES)) {
[10:32:04.893]                   name <- removed[[kk]]
[10:32:04.893]                   NAME <- NAMES[[kk]]
[10:32:04.893]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:04.893]                     next
[10:32:04.893]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:04.893]                 }
[10:32:04.893]                 if (length(args) > 0) 
[10:32:04.893]                   base::do.call(base::Sys.setenv, args = args)
[10:32:04.893]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:04.893]             }
[10:32:04.893]             else {
[10:32:04.893]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:04.893]             }
[10:32:04.893]             {
[10:32:04.893]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:04.893]                   0L) {
[10:32:04.893]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:04.893]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:04.893]                   base::options(opts)
[10:32:04.893]                 }
[10:32:04.893]                 {
[10:32:04.893]                   {
[10:32:04.893]                     NULL
[10:32:04.893]                     RNGkind("Mersenne-Twister")
[10:32:04.893]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:04.893]                       inherits = FALSE)
[10:32:04.893]                   }
[10:32:04.893]                   options(future.plan = NULL)
[10:32:04.893]                   if (is.na(NA_character_)) 
[10:32:04.893]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:04.893]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:04.893]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:04.893]                     .init = FALSE)
[10:32:04.893]                 }
[10:32:04.893]             }
[10:32:04.893]         }
[10:32:04.893]     })
[10:32:04.893]     if (TRUE) {
[10:32:04.893]         base::sink(type = "output", split = FALSE)
[10:32:04.893]         if (TRUE) {
[10:32:04.893]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:04.893]         }
[10:32:04.893]         else {
[10:32:04.893]             ...future.result["stdout"] <- base::list(NULL)
[10:32:04.893]         }
[10:32:04.893]         base::close(...future.stdout)
[10:32:04.893]         ...future.stdout <- NULL
[10:32:04.893]     }
[10:32:04.893]     ...future.result$conditions <- ...future.conditions
[10:32:04.893]     ...future.result$finished <- base::Sys.time()
[10:32:04.893]     ...future.result
[10:32:04.893] }
[10:32:04.895] plan(): Setting new future strategy stack:
[10:32:04.895] List of future strategies:
[10:32:04.895] 1. sequential:
[10:32:04.895]    - args: function (..., envir = parent.frame())
[10:32:04.895]    - tweaked: FALSE
[10:32:04.895]    - call: NULL
[10:32:04.895] plan(): nbrOfWorkers() = 1
[10:32:04.896] plan(): Setting new future strategy stack:
[10:32:04.896] List of future strategies:
[10:32:04.896] 1. sequential:
[10:32:04.896]    - args: function (..., envir = parent.frame())
[10:32:04.896]    - tweaked: FALSE
[10:32:04.896]    - call: future::plan("sequential")
[10:32:04.896] plan(): nbrOfWorkers() = 1
[10:32:04.896] SequentialFuture started (and completed)
[10:32:04.897] signalConditions() ...
[10:32:04.897]  - include = ‘immediateCondition’
[10:32:04.897]  - exclude = 
[10:32:04.897]  - resignal = FALSE
[10:32:04.897]  - Number of conditions: 1
[10:32:04.897] signalConditions() ... done
[10:32:04.897] - Launch lazy future ... done
[10:32:04.897] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(v)
[10:32:04.898] resolved() for ‘SequentialFuture’ ...
[10:32:04.898] - state: ‘finished’
[10:32:04.898] - run: TRUE
[10:32:04.898] - result: ‘FutureResult’
[10:32:04.898] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
v %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> 
> message("*** backtrace( ) - implicit future ... DONE")
*** backtrace( ) - implicit future ... DONE
> 
> 
> message("*** backtrace( ) - subsetting ...")
*** backtrace( ) - subsetting ...
> 
> env <- new.env()
> env[["a"]] %<-% { 42L; stop("Woops") }
[10:32:04.899] getGlobalsAndPackages() ...
[10:32:04.899] Searching for globals...
[10:32:04.900] - globals found: [2] ‘{’, ‘stop’
[10:32:04.900] Searching for globals ... DONE
[10:32:04.900] Resolving globals: FALSE
[10:32:04.900] 
[10:32:04.901] 
[10:32:04.901] getGlobalsAndPackages() ... DONE
[10:32:04.901] run() for ‘Future’ ...
[10:32:04.901] - state: ‘created’
[10:32:04.904] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:04.904] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:04.904] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:04.904]   - Field: ‘label’
[10:32:04.904]   - Field: ‘local’
[10:32:04.905]   - Field: ‘owner’
[10:32:04.905]   - Field: ‘envir’
[10:32:04.905]   - Field: ‘packages’
[10:32:04.905]   - Field: ‘gc’
[10:32:04.905]   - Field: ‘conditions’
[10:32:04.905]   - Field: ‘expr’
[10:32:04.905]   - Field: ‘uuid’
[10:32:04.905]   - Field: ‘seed’
[10:32:04.905]   - Field: ‘version’
[10:32:04.905]   - Field: ‘result’
[10:32:04.906]   - Field: ‘asynchronous’
[10:32:04.906]   - Field: ‘calls’
[10:32:04.906]   - Field: ‘globals’
[10:32:04.906]   - Field: ‘stdout’
[10:32:04.906]   - Field: ‘earlySignal’
[10:32:04.906]   - Field: ‘lazy’
[10:32:04.906]   - Field: ‘state’
[10:32:04.906] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:04.906] - Launch lazy future ...
[10:32:04.906] Packages needed by the future expression (n = 0): <none>
[10:32:04.907] Packages needed by future strategies (n = 0): <none>
[10:32:04.907] {
[10:32:04.907]     {
[10:32:04.907]         {
[10:32:04.907]             ...future.startTime <- base::Sys.time()
[10:32:04.907]             {
[10:32:04.907]                 {
[10:32:04.907]                   {
[10:32:04.907]                     base::local({
[10:32:04.907]                       has_future <- base::requireNamespace("future", 
[10:32:04.907]                         quietly = TRUE)
[10:32:04.907]                       if (has_future) {
[10:32:04.907]                         ns <- base::getNamespace("future")
[10:32:04.907]                         version <- ns[[".package"]][["version"]]
[10:32:04.907]                         if (is.null(version)) 
[10:32:04.907]                           version <- utils::packageVersion("future")
[10:32:04.907]                       }
[10:32:04.907]                       else {
[10:32:04.907]                         version <- NULL
[10:32:04.907]                       }
[10:32:04.907]                       if (!has_future || version < "1.8.0") {
[10:32:04.907]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:04.907]                           "", base::R.version$version.string), 
[10:32:04.907]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:04.907]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:04.907]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:04.907]                             "release", "version")], collapse = " "), 
[10:32:04.907]                           hostname = base::Sys.info()[["nodename"]])
[10:32:04.907]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:04.907]                           info)
[10:32:04.907]                         info <- base::paste(info, collapse = "; ")
[10:32:04.907]                         if (!has_future) {
[10:32:04.907]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:04.907]                             info)
[10:32:04.907]                         }
[10:32:04.907]                         else {
[10:32:04.907]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:04.907]                             info, version)
[10:32:04.907]                         }
[10:32:04.907]                         base::stop(msg)
[10:32:04.907]                       }
[10:32:04.907]                     })
[10:32:04.907]                   }
[10:32:04.907]                   ...future.strategy.old <- future::plan("list")
[10:32:04.907]                   options(future.plan = NULL)
[10:32:04.907]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:04.907]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:04.907]                 }
[10:32:04.907]                 ...future.workdir <- getwd()
[10:32:04.907]             }
[10:32:04.907]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:04.907]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:04.907]         }
[10:32:04.907]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:04.907]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:04.907]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:04.907]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:04.907]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:04.907]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:04.907]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:04.907]             base::names(...future.oldOptions))
[10:32:04.907]     }
[10:32:04.907]     if (FALSE) {
[10:32:04.907]     }
[10:32:04.907]     else {
[10:32:04.907]         if (TRUE) {
[10:32:04.907]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:04.907]                 open = "w")
[10:32:04.907]         }
[10:32:04.907]         else {
[10:32:04.907]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:04.907]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:04.907]         }
[10:32:04.907]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:04.907]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:04.907]             base::sink(type = "output", split = FALSE)
[10:32:04.907]             base::close(...future.stdout)
[10:32:04.907]         }, add = TRUE)
[10:32:04.907]     }
[10:32:04.907]     ...future.frame <- base::sys.nframe()
[10:32:04.907]     ...future.conditions <- base::list()
[10:32:04.907]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:04.907]     if (FALSE) {
[10:32:04.907]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:04.907]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:04.907]     }
[10:32:04.907]     ...future.result <- base::tryCatch({
[10:32:04.907]         base::withCallingHandlers({
[10:32:04.907]             ...future.value <- base::withVisible(base::local({
[10:32:04.907]                 42L
[10:32:04.907]                 stop("Woops")
[10:32:04.907]             }))
[10:32:04.907]             future::FutureResult(value = ...future.value$value, 
[10:32:04.907]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:04.907]                   ...future.rng), globalenv = if (FALSE) 
[10:32:04.907]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:04.907]                     ...future.globalenv.names))
[10:32:04.907]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:04.907]         }, condition = base::local({
[10:32:04.907]             c <- base::c
[10:32:04.907]             inherits <- base::inherits
[10:32:04.907]             invokeRestart <- base::invokeRestart
[10:32:04.907]             length <- base::length
[10:32:04.907]             list <- base::list
[10:32:04.907]             seq.int <- base::seq.int
[10:32:04.907]             signalCondition <- base::signalCondition
[10:32:04.907]             sys.calls <- base::sys.calls
[10:32:04.907]             `[[` <- base::`[[`
[10:32:04.907]             `+` <- base::`+`
[10:32:04.907]             `<<-` <- base::`<<-`
[10:32:04.907]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:04.907]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:04.907]                   3L)]
[10:32:04.907]             }
[10:32:04.907]             function(cond) {
[10:32:04.907]                 is_error <- inherits(cond, "error")
[10:32:04.907]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:04.907]                   NULL)
[10:32:04.907]                 if (is_error) {
[10:32:04.907]                   sessionInformation <- function() {
[10:32:04.907]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:04.907]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:04.907]                       search = base::search(), system = base::Sys.info())
[10:32:04.907]                   }
[10:32:04.907]                   ...future.conditions[[length(...future.conditions) + 
[10:32:04.907]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:04.907]                     cond$call), session = sessionInformation(), 
[10:32:04.907]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:04.907]                   signalCondition(cond)
[10:32:04.907]                 }
[10:32:04.907]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:04.907]                 "immediateCondition"))) {
[10:32:04.907]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:04.907]                   ...future.conditions[[length(...future.conditions) + 
[10:32:04.907]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:04.907]                   if (TRUE && !signal) {
[10:32:04.907]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:04.907]                     {
[10:32:04.907]                       inherits <- base::inherits
[10:32:04.907]                       invokeRestart <- base::invokeRestart
[10:32:04.907]                       is.null <- base::is.null
[10:32:04.907]                       muffled <- FALSE
[10:32:04.907]                       if (inherits(cond, "message")) {
[10:32:04.907]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:04.907]                         if (muffled) 
[10:32:04.907]                           invokeRestart("muffleMessage")
[10:32:04.907]                       }
[10:32:04.907]                       else if (inherits(cond, "warning")) {
[10:32:04.907]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:04.907]                         if (muffled) 
[10:32:04.907]                           invokeRestart("muffleWarning")
[10:32:04.907]                       }
[10:32:04.907]                       else if (inherits(cond, "condition")) {
[10:32:04.907]                         if (!is.null(pattern)) {
[10:32:04.907]                           computeRestarts <- base::computeRestarts
[10:32:04.907]                           grepl <- base::grepl
[10:32:04.907]                           restarts <- computeRestarts(cond)
[10:32:04.907]                           for (restart in restarts) {
[10:32:04.907]                             name <- restart$name
[10:32:04.907]                             if (is.null(name)) 
[10:32:04.907]                               next
[10:32:04.907]                             if (!grepl(pattern, name)) 
[10:32:04.907]                               next
[10:32:04.907]                             invokeRestart(restart)
[10:32:04.907]                             muffled <- TRUE
[10:32:04.907]                             break
[10:32:04.907]                           }
[10:32:04.907]                         }
[10:32:04.907]                       }
[10:32:04.907]                       invisible(muffled)
[10:32:04.907]                     }
[10:32:04.907]                     muffleCondition(cond, pattern = "^muffle")
[10:32:04.907]                   }
[10:32:04.907]                 }
[10:32:04.907]                 else {
[10:32:04.907]                   if (TRUE) {
[10:32:04.907]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:04.907]                     {
[10:32:04.907]                       inherits <- base::inherits
[10:32:04.907]                       invokeRestart <- base::invokeRestart
[10:32:04.907]                       is.null <- base::is.null
[10:32:04.907]                       muffled <- FALSE
[10:32:04.907]                       if (inherits(cond, "message")) {
[10:32:04.907]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:04.907]                         if (muffled) 
[10:32:04.907]                           invokeRestart("muffleMessage")
[10:32:04.907]                       }
[10:32:04.907]                       else if (inherits(cond, "warning")) {
[10:32:04.907]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:04.907]                         if (muffled) 
[10:32:04.907]                           invokeRestart("muffleWarning")
[10:32:04.907]                       }
[10:32:04.907]                       else if (inherits(cond, "condition")) {
[10:32:04.907]                         if (!is.null(pattern)) {
[10:32:04.907]                           computeRestarts <- base::computeRestarts
[10:32:04.907]                           grepl <- base::grepl
[10:32:04.907]                           restarts <- computeRestarts(cond)
[10:32:04.907]                           for (restart in restarts) {
[10:32:04.907]                             name <- restart$name
[10:32:04.907]                             if (is.null(name)) 
[10:32:04.907]                               next
[10:32:04.907]                             if (!grepl(pattern, name)) 
[10:32:04.907]                               next
[10:32:04.907]                             invokeRestart(restart)
[10:32:04.907]                             muffled <- TRUE
[10:32:04.907]                             break
[10:32:04.907]                           }
[10:32:04.907]                         }
[10:32:04.907]                       }
[10:32:04.907]                       invisible(muffled)
[10:32:04.907]                     }
[10:32:04.907]                     muffleCondition(cond, pattern = "^muffle")
[10:32:04.907]                   }
[10:32:04.907]                 }
[10:32:04.907]             }
[10:32:04.907]         }))
[10:32:04.907]     }, error = function(ex) {
[10:32:04.907]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:04.907]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:04.907]                 ...future.rng), started = ...future.startTime, 
[10:32:04.907]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:04.907]             version = "1.8"), class = "FutureResult")
[10:32:04.907]     }, finally = {
[10:32:04.907]         if (!identical(...future.workdir, getwd())) 
[10:32:04.907]             setwd(...future.workdir)
[10:32:04.907]         {
[10:32:04.907]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:04.907]                 ...future.oldOptions$nwarnings <- NULL
[10:32:04.907]             }
[10:32:04.907]             base::options(...future.oldOptions)
[10:32:04.907]             if (.Platform$OS.type == "windows") {
[10:32:04.907]                 old_names <- names(...future.oldEnvVars)
[10:32:04.907]                 envs <- base::Sys.getenv()
[10:32:04.907]                 names <- names(envs)
[10:32:04.907]                 common <- intersect(names, old_names)
[10:32:04.907]                 added <- setdiff(names, old_names)
[10:32:04.907]                 removed <- setdiff(old_names, names)
[10:32:04.907]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:04.907]                   envs[common]]
[10:32:04.907]                 NAMES <- toupper(changed)
[10:32:04.907]                 args <- list()
[10:32:04.907]                 for (kk in seq_along(NAMES)) {
[10:32:04.907]                   name <- changed[[kk]]
[10:32:04.907]                   NAME <- NAMES[[kk]]
[10:32:04.907]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:04.907]                     next
[10:32:04.907]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:04.907]                 }
[10:32:04.907]                 NAMES <- toupper(added)
[10:32:04.907]                 for (kk in seq_along(NAMES)) {
[10:32:04.907]                   name <- added[[kk]]
[10:32:04.907]                   NAME <- NAMES[[kk]]
[10:32:04.907]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:04.907]                     next
[10:32:04.907]                   args[[name]] <- ""
[10:32:04.907]                 }
[10:32:04.907]                 NAMES <- toupper(removed)
[10:32:04.907]                 for (kk in seq_along(NAMES)) {
[10:32:04.907]                   name <- removed[[kk]]
[10:32:04.907]                   NAME <- NAMES[[kk]]
[10:32:04.907]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:04.907]                     next
[10:32:04.907]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:04.907]                 }
[10:32:04.907]                 if (length(args) > 0) 
[10:32:04.907]                   base::do.call(base::Sys.setenv, args = args)
[10:32:04.907]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:04.907]             }
[10:32:04.907]             else {
[10:32:04.907]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:04.907]             }
[10:32:04.907]             {
[10:32:04.907]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:04.907]                   0L) {
[10:32:04.907]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:04.907]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:04.907]                   base::options(opts)
[10:32:04.907]                 }
[10:32:04.907]                 {
[10:32:04.907]                   {
[10:32:04.907]                     NULL
[10:32:04.907]                     RNGkind("Mersenne-Twister")
[10:32:04.907]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:04.907]                       inherits = FALSE)
[10:32:04.907]                   }
[10:32:04.907]                   options(future.plan = NULL)
[10:32:04.907]                   if (is.na(NA_character_)) 
[10:32:04.907]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:04.907]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:04.907]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:04.907]                     .init = FALSE)
[10:32:04.907]                 }
[10:32:04.907]             }
[10:32:04.907]         }
[10:32:04.907]     })
[10:32:04.907]     if (TRUE) {
[10:32:04.907]         base::sink(type = "output", split = FALSE)
[10:32:04.907]         if (TRUE) {
[10:32:04.907]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:04.907]         }
[10:32:04.907]         else {
[10:32:04.907]             ...future.result["stdout"] <- base::list(NULL)
[10:32:04.907]         }
[10:32:04.907]         base::close(...future.stdout)
[10:32:04.907]         ...future.stdout <- NULL
[10:32:04.907]     }
[10:32:04.907]     ...future.result$conditions <- ...future.conditions
[10:32:04.907]     ...future.result$finished <- base::Sys.time()
[10:32:04.907]     ...future.result
[10:32:04.907] }
[10:32:04.909] plan(): Setting new future strategy stack:
[10:32:04.909] List of future strategies:
[10:32:04.909] 1. sequential:
[10:32:04.909]    - args: function (..., envir = parent.frame())
[10:32:04.909]    - tweaked: FALSE
[10:32:04.909]    - call: NULL
[10:32:04.909] plan(): nbrOfWorkers() = 1
[10:32:04.910] plan(): Setting new future strategy stack:
[10:32:04.910] List of future strategies:
[10:32:04.910] 1. sequential:
[10:32:04.910]    - args: function (..., envir = parent.frame())
[10:32:04.910]    - tweaked: FALSE
[10:32:04.910]    - call: future::plan("sequential")
[10:32:04.910] plan(): nbrOfWorkers() = 1
[10:32:04.911] SequentialFuture started (and completed)
[10:32:04.911] signalConditions() ...
[10:32:04.911]  - include = ‘immediateCondition’
[10:32:04.911]  - exclude = 
[10:32:04.911]  - resignal = FALSE
[10:32:04.911]  - Number of conditions: 1
[10:32:04.911] signalConditions() ... done
[10:32:04.911] - Launch lazy future ... done
[10:32:04.911] run() for ‘SequentialFuture’ ... done
> env[["b"]] %<-% { 42L; stop("Woops") }
[10:32:04.912] getGlobalsAndPackages() ...
[10:32:04.912] Searching for globals...
[10:32:04.913] - globals found: [2] ‘{’, ‘stop’
[10:32:04.913] Searching for globals ... DONE
[10:32:04.913] Resolving globals: FALSE
[10:32:04.913] 
[10:32:04.913] 
[10:32:04.913] getGlobalsAndPackages() ... DONE
[10:32:04.914] run() for ‘Future’ ...
[10:32:04.914] - state: ‘created’
[10:32:04.914] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:04.914] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:04.914] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:04.914]   - Field: ‘label’
[10:32:04.914]   - Field: ‘local’
[10:32:04.914]   - Field: ‘owner’
[10:32:04.915]   - Field: ‘envir’
[10:32:04.915]   - Field: ‘packages’
[10:32:04.915]   - Field: ‘gc’
[10:32:04.915]   - Field: ‘conditions’
[10:32:04.915]   - Field: ‘expr’
[10:32:04.915]   - Field: ‘uuid’
[10:32:04.915]   - Field: ‘seed’
[10:32:04.915]   - Field: ‘version’
[10:32:04.915]   - Field: ‘result’
[10:32:04.915]   - Field: ‘asynchronous’
[10:32:04.915]   - Field: ‘calls’
[10:32:04.916]   - Field: ‘globals’
[10:32:04.916]   - Field: ‘stdout’
[10:32:04.916]   - Field: ‘earlySignal’
[10:32:04.916]   - Field: ‘lazy’
[10:32:04.916]   - Field: ‘state’
[10:32:04.916] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:04.916] - Launch lazy future ...
[10:32:04.916] Packages needed by the future expression (n = 0): <none>
[10:32:04.916] Packages needed by future strategies (n = 0): <none>
[10:32:04.917] {
[10:32:04.917]     {
[10:32:04.917]         {
[10:32:04.917]             ...future.startTime <- base::Sys.time()
[10:32:04.917]             {
[10:32:04.917]                 {
[10:32:04.917]                   {
[10:32:04.917]                     base::local({
[10:32:04.917]                       has_future <- base::requireNamespace("future", 
[10:32:04.917]                         quietly = TRUE)
[10:32:04.917]                       if (has_future) {
[10:32:04.917]                         ns <- base::getNamespace("future")
[10:32:04.917]                         version <- ns[[".package"]][["version"]]
[10:32:04.917]                         if (is.null(version)) 
[10:32:04.917]                           version <- utils::packageVersion("future")
[10:32:04.917]                       }
[10:32:04.917]                       else {
[10:32:04.917]                         version <- NULL
[10:32:04.917]                       }
[10:32:04.917]                       if (!has_future || version < "1.8.0") {
[10:32:04.917]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:04.917]                           "", base::R.version$version.string), 
[10:32:04.917]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:04.917]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:04.917]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:04.917]                             "release", "version")], collapse = " "), 
[10:32:04.917]                           hostname = base::Sys.info()[["nodename"]])
[10:32:04.917]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:04.917]                           info)
[10:32:04.917]                         info <- base::paste(info, collapse = "; ")
[10:32:04.917]                         if (!has_future) {
[10:32:04.917]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:04.917]                             info)
[10:32:04.917]                         }
[10:32:04.917]                         else {
[10:32:04.917]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:04.917]                             info, version)
[10:32:04.917]                         }
[10:32:04.917]                         base::stop(msg)
[10:32:04.917]                       }
[10:32:04.917]                     })
[10:32:04.917]                   }
[10:32:04.917]                   ...future.strategy.old <- future::plan("list")
[10:32:04.917]                   options(future.plan = NULL)
[10:32:04.917]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:04.917]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:04.917]                 }
[10:32:04.917]                 ...future.workdir <- getwd()
[10:32:04.917]             }
[10:32:04.917]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:04.917]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:04.917]         }
[10:32:04.917]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:04.917]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:04.917]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:04.917]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:04.917]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:04.917]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:04.917]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:04.917]             base::names(...future.oldOptions))
[10:32:04.917]     }
[10:32:04.917]     if (FALSE) {
[10:32:04.917]     }
[10:32:04.917]     else {
[10:32:04.917]         if (TRUE) {
[10:32:04.917]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:04.917]                 open = "w")
[10:32:04.917]         }
[10:32:04.917]         else {
[10:32:04.917]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:04.917]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:04.917]         }
[10:32:04.917]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:04.917]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:04.917]             base::sink(type = "output", split = FALSE)
[10:32:04.917]             base::close(...future.stdout)
[10:32:04.917]         }, add = TRUE)
[10:32:04.917]     }
[10:32:04.917]     ...future.frame <- base::sys.nframe()
[10:32:04.917]     ...future.conditions <- base::list()
[10:32:04.917]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:04.917]     if (FALSE) {
[10:32:04.917]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:04.917]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:04.917]     }
[10:32:04.917]     ...future.result <- base::tryCatch({
[10:32:04.917]         base::withCallingHandlers({
[10:32:04.917]             ...future.value <- base::withVisible(base::local({
[10:32:04.917]                 42L
[10:32:04.917]                 stop("Woops")
[10:32:04.917]             }))
[10:32:04.917]             future::FutureResult(value = ...future.value$value, 
[10:32:04.917]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:04.917]                   ...future.rng), globalenv = if (FALSE) 
[10:32:04.917]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:04.917]                     ...future.globalenv.names))
[10:32:04.917]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:04.917]         }, condition = base::local({
[10:32:04.917]             c <- base::c
[10:32:04.917]             inherits <- base::inherits
[10:32:04.917]             invokeRestart <- base::invokeRestart
[10:32:04.917]             length <- base::length
[10:32:04.917]             list <- base::list
[10:32:04.917]             seq.int <- base::seq.int
[10:32:04.917]             signalCondition <- base::signalCondition
[10:32:04.917]             sys.calls <- base::sys.calls
[10:32:04.917]             `[[` <- base::`[[`
[10:32:04.917]             `+` <- base::`+`
[10:32:04.917]             `<<-` <- base::`<<-`
[10:32:04.917]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:04.917]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:04.917]                   3L)]
[10:32:04.917]             }
[10:32:04.917]             function(cond) {
[10:32:04.917]                 is_error <- inherits(cond, "error")
[10:32:04.917]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:04.917]                   NULL)
[10:32:04.917]                 if (is_error) {
[10:32:04.917]                   sessionInformation <- function() {
[10:32:04.917]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:04.917]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:04.917]                       search = base::search(), system = base::Sys.info())
[10:32:04.917]                   }
[10:32:04.917]                   ...future.conditions[[length(...future.conditions) + 
[10:32:04.917]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:04.917]                     cond$call), session = sessionInformation(), 
[10:32:04.917]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:04.917]                   signalCondition(cond)
[10:32:04.917]                 }
[10:32:04.917]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:04.917]                 "immediateCondition"))) {
[10:32:04.917]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:04.917]                   ...future.conditions[[length(...future.conditions) + 
[10:32:04.917]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:04.917]                   if (TRUE && !signal) {
[10:32:04.917]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:04.917]                     {
[10:32:04.917]                       inherits <- base::inherits
[10:32:04.917]                       invokeRestart <- base::invokeRestart
[10:32:04.917]                       is.null <- base::is.null
[10:32:04.917]                       muffled <- FALSE
[10:32:04.917]                       if (inherits(cond, "message")) {
[10:32:04.917]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:04.917]                         if (muffled) 
[10:32:04.917]                           invokeRestart("muffleMessage")
[10:32:04.917]                       }
[10:32:04.917]                       else if (inherits(cond, "warning")) {
[10:32:04.917]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:04.917]                         if (muffled) 
[10:32:04.917]                           invokeRestart("muffleWarning")
[10:32:04.917]                       }
[10:32:04.917]                       else if (inherits(cond, "condition")) {
[10:32:04.917]                         if (!is.null(pattern)) {
[10:32:04.917]                           computeRestarts <- base::computeRestarts
[10:32:04.917]                           grepl <- base::grepl
[10:32:04.917]                           restarts <- computeRestarts(cond)
[10:32:04.917]                           for (restart in restarts) {
[10:32:04.917]                             name <- restart$name
[10:32:04.917]                             if (is.null(name)) 
[10:32:04.917]                               next
[10:32:04.917]                             if (!grepl(pattern, name)) 
[10:32:04.917]                               next
[10:32:04.917]                             invokeRestart(restart)
[10:32:04.917]                             muffled <- TRUE
[10:32:04.917]                             break
[10:32:04.917]                           }
[10:32:04.917]                         }
[10:32:04.917]                       }
[10:32:04.917]                       invisible(muffled)
[10:32:04.917]                     }
[10:32:04.917]                     muffleCondition(cond, pattern = "^muffle")
[10:32:04.917]                   }
[10:32:04.917]                 }
[10:32:04.917]                 else {
[10:32:04.917]                   if (TRUE) {
[10:32:04.917]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:04.917]                     {
[10:32:04.917]                       inherits <- base::inherits
[10:32:04.917]                       invokeRestart <- base::invokeRestart
[10:32:04.917]                       is.null <- base::is.null
[10:32:04.917]                       muffled <- FALSE
[10:32:04.917]                       if (inherits(cond, "message")) {
[10:32:04.917]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:04.917]                         if (muffled) 
[10:32:04.917]                           invokeRestart("muffleMessage")
[10:32:04.917]                       }
[10:32:04.917]                       else if (inherits(cond, "warning")) {
[10:32:04.917]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:04.917]                         if (muffled) 
[10:32:04.917]                           invokeRestart("muffleWarning")
[10:32:04.917]                       }
[10:32:04.917]                       else if (inherits(cond, "condition")) {
[10:32:04.917]                         if (!is.null(pattern)) {
[10:32:04.917]                           computeRestarts <- base::computeRestarts
[10:32:04.917]                           grepl <- base::grepl
[10:32:04.917]                           restarts <- computeRestarts(cond)
[10:32:04.917]                           for (restart in restarts) {
[10:32:04.917]                             name <- restart$name
[10:32:04.917]                             if (is.null(name)) 
[10:32:04.917]                               next
[10:32:04.917]                             if (!grepl(pattern, name)) 
[10:32:04.917]                               next
[10:32:04.917]                             invokeRestart(restart)
[10:32:04.917]                             muffled <- TRUE
[10:32:04.917]                             break
[10:32:04.917]                           }
[10:32:04.917]                         }
[10:32:04.917]                       }
[10:32:04.917]                       invisible(muffled)
[10:32:04.917]                     }
[10:32:04.917]                     muffleCondition(cond, pattern = "^muffle")
[10:32:04.917]                   }
[10:32:04.917]                 }
[10:32:04.917]             }
[10:32:04.917]         }))
[10:32:04.917]     }, error = function(ex) {
[10:32:04.917]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:04.917]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:04.917]                 ...future.rng), started = ...future.startTime, 
[10:32:04.917]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:04.917]             version = "1.8"), class = "FutureResult")
[10:32:04.917]     }, finally = {
[10:32:04.917]         if (!identical(...future.workdir, getwd())) 
[10:32:04.917]             setwd(...future.workdir)
[10:32:04.917]         {
[10:32:04.917]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:04.917]                 ...future.oldOptions$nwarnings <- NULL
[10:32:04.917]             }
[10:32:04.917]             base::options(...future.oldOptions)
[10:32:04.917]             if (.Platform$OS.type == "windows") {
[10:32:04.917]                 old_names <- names(...future.oldEnvVars)
[10:32:04.917]                 envs <- base::Sys.getenv()
[10:32:04.917]                 names <- names(envs)
[10:32:04.917]                 common <- intersect(names, old_names)
[10:32:04.917]                 added <- setdiff(names, old_names)
[10:32:04.917]                 removed <- setdiff(old_names, names)
[10:32:04.917]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:04.917]                   envs[common]]
[10:32:04.917]                 NAMES <- toupper(changed)
[10:32:04.917]                 args <- list()
[10:32:04.917]                 for (kk in seq_along(NAMES)) {
[10:32:04.917]                   name <- changed[[kk]]
[10:32:04.917]                   NAME <- NAMES[[kk]]
[10:32:04.917]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:04.917]                     next
[10:32:04.917]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:04.917]                 }
[10:32:04.917]                 NAMES <- toupper(added)
[10:32:04.917]                 for (kk in seq_along(NAMES)) {
[10:32:04.917]                   name <- added[[kk]]
[10:32:04.917]                   NAME <- NAMES[[kk]]
[10:32:04.917]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:04.917]                     next
[10:32:04.917]                   args[[name]] <- ""
[10:32:04.917]                 }
[10:32:04.917]                 NAMES <- toupper(removed)
[10:32:04.917]                 for (kk in seq_along(NAMES)) {
[10:32:04.917]                   name <- removed[[kk]]
[10:32:04.917]                   NAME <- NAMES[[kk]]
[10:32:04.917]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:04.917]                     next
[10:32:04.917]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:04.917]                 }
[10:32:04.917]                 if (length(args) > 0) 
[10:32:04.917]                   base::do.call(base::Sys.setenv, args = args)
[10:32:04.917]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:04.917]             }
[10:32:04.917]             else {
[10:32:04.917]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:04.917]             }
[10:32:04.917]             {
[10:32:04.917]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:04.917]                   0L) {
[10:32:04.917]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:04.917]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:04.917]                   base::options(opts)
[10:32:04.917]                 }
[10:32:04.917]                 {
[10:32:04.917]                   {
[10:32:04.917]                     NULL
[10:32:04.917]                     RNGkind("Mersenne-Twister")
[10:32:04.917]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:04.917]                       inherits = FALSE)
[10:32:04.917]                   }
[10:32:04.917]                   options(future.plan = NULL)
[10:32:04.917]                   if (is.na(NA_character_)) 
[10:32:04.917]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:04.917]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:04.917]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:04.917]                     .init = FALSE)
[10:32:04.917]                 }
[10:32:04.917]             }
[10:32:04.917]         }
[10:32:04.917]     })
[10:32:04.917]     if (TRUE) {
[10:32:04.917]         base::sink(type = "output", split = FALSE)
[10:32:04.917]         if (TRUE) {
[10:32:04.917]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:04.917]         }
[10:32:04.917]         else {
[10:32:04.917]             ...future.result["stdout"] <- base::list(NULL)
[10:32:04.917]         }
[10:32:04.917]         base::close(...future.stdout)
[10:32:04.917]         ...future.stdout <- NULL
[10:32:04.917]     }
[10:32:04.917]     ...future.result$conditions <- ...future.conditions
[10:32:04.917]     ...future.result$finished <- base::Sys.time()
[10:32:04.917]     ...future.result
[10:32:04.917] }
[10:32:04.919] plan(): Setting new future strategy stack:
[10:32:04.919] List of future strategies:
[10:32:04.919] 1. sequential:
[10:32:04.919]    - args: function (..., envir = parent.frame())
[10:32:04.919]    - tweaked: FALSE
[10:32:04.919]    - call: NULL
[10:32:04.919] plan(): nbrOfWorkers() = 1
[10:32:04.920] plan(): Setting new future strategy stack:
[10:32:04.920] List of future strategies:
[10:32:04.920] 1. sequential:
[10:32:04.920]    - args: function (..., envir = parent.frame())
[10:32:04.920]    - tweaked: FALSE
[10:32:04.920]    - call: future::plan("sequential")
[10:32:04.920] plan(): nbrOfWorkers() = 1
[10:32:04.921] SequentialFuture started (and completed)
[10:32:04.921] signalConditions() ...
[10:32:04.921]  - include = ‘immediateCondition’
[10:32:04.921]  - exclude = 
[10:32:04.921]  - resignal = FALSE
[10:32:04.921]  - Number of conditions: 1
[10:32:04.921] signalConditions() ... done
[10:32:04.921] - Launch lazy future ... done
[10:32:04.921] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(env[["b"]])
[10:32:04.922] resolved() for ‘SequentialFuture’ ...
[10:32:04.922] - state: ‘finished’
[10:32:04.922] - run: TRUE
[10:32:04.922] - result: ‘FutureResult’
[10:32:04.922] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
env[["b"]] %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> lenv <- listenv::listenv()
> lenv[[1]] %<-% { 42L; stop("Woops") }
[10:32:04.923] getGlobalsAndPackages() ...
[10:32:04.923] Searching for globals...
[10:32:04.924] - globals found: [2] ‘{’, ‘stop’
[10:32:04.924] Searching for globals ... DONE
[10:32:04.925] Resolving globals: FALSE
[10:32:04.925] 
[10:32:04.925] 
[10:32:04.925] getGlobalsAndPackages() ... DONE
[10:32:04.925] run() for ‘Future’ ...
[10:32:04.925] - state: ‘created’
[10:32:04.925] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:04.926] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:04.926] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:04.926]   - Field: ‘label’
[10:32:04.926]   - Field: ‘local’
[10:32:04.926]   - Field: ‘owner’
[10:32:04.926]   - Field: ‘envir’
[10:32:04.926]   - Field: ‘packages’
[10:32:04.926]   - Field: ‘gc’
[10:32:04.926]   - Field: ‘conditions’
[10:32:04.927]   - Field: ‘expr’
[10:32:04.927]   - Field: ‘uuid’
[10:32:04.927]   - Field: ‘seed’
[10:32:04.927]   - Field: ‘version’
[10:32:04.927]   - Field: ‘result’
[10:32:04.927]   - Field: ‘asynchronous’
[10:32:04.927]   - Field: ‘calls’
[10:32:04.927]   - Field: ‘globals’
[10:32:04.927]   - Field: ‘stdout’
[10:32:04.927]   - Field: ‘earlySignal’
[10:32:04.927]   - Field: ‘lazy’
[10:32:04.928]   - Field: ‘state’
[10:32:04.928] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:04.928] - Launch lazy future ...
[10:32:04.928] Packages needed by the future expression (n = 0): <none>
[10:32:04.928] Packages needed by future strategies (n = 0): <none>
[10:32:04.928] {
[10:32:04.928]     {
[10:32:04.928]         {
[10:32:04.928]             ...future.startTime <- base::Sys.time()
[10:32:04.928]             {
[10:32:04.928]                 {
[10:32:04.928]                   {
[10:32:04.928]                     base::local({
[10:32:04.928]                       has_future <- base::requireNamespace("future", 
[10:32:04.928]                         quietly = TRUE)
[10:32:04.928]                       if (has_future) {
[10:32:04.928]                         ns <- base::getNamespace("future")
[10:32:04.928]                         version <- ns[[".package"]][["version"]]
[10:32:04.928]                         if (is.null(version)) 
[10:32:04.928]                           version <- utils::packageVersion("future")
[10:32:04.928]                       }
[10:32:04.928]                       else {
[10:32:04.928]                         version <- NULL
[10:32:04.928]                       }
[10:32:04.928]                       if (!has_future || version < "1.8.0") {
[10:32:04.928]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:04.928]                           "", base::R.version$version.string), 
[10:32:04.928]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:04.928]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:04.928]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:04.928]                             "release", "version")], collapse = " "), 
[10:32:04.928]                           hostname = base::Sys.info()[["nodename"]])
[10:32:04.928]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:04.928]                           info)
[10:32:04.928]                         info <- base::paste(info, collapse = "; ")
[10:32:04.928]                         if (!has_future) {
[10:32:04.928]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:04.928]                             info)
[10:32:04.928]                         }
[10:32:04.928]                         else {
[10:32:04.928]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:04.928]                             info, version)
[10:32:04.928]                         }
[10:32:04.928]                         base::stop(msg)
[10:32:04.928]                       }
[10:32:04.928]                     })
[10:32:04.928]                   }
[10:32:04.928]                   ...future.strategy.old <- future::plan("list")
[10:32:04.928]                   options(future.plan = NULL)
[10:32:04.928]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:04.928]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:04.928]                 }
[10:32:04.928]                 ...future.workdir <- getwd()
[10:32:04.928]             }
[10:32:04.928]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:04.928]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:04.928]         }
[10:32:04.928]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:04.928]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:04.928]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:04.928]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:04.928]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:04.928]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:04.928]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:04.928]             base::names(...future.oldOptions))
[10:32:04.928]     }
[10:32:04.928]     if (FALSE) {
[10:32:04.928]     }
[10:32:04.928]     else {
[10:32:04.928]         if (TRUE) {
[10:32:04.928]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:04.928]                 open = "w")
[10:32:04.928]         }
[10:32:04.928]         else {
[10:32:04.928]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:04.928]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:04.928]         }
[10:32:04.928]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:04.928]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:04.928]             base::sink(type = "output", split = FALSE)
[10:32:04.928]             base::close(...future.stdout)
[10:32:04.928]         }, add = TRUE)
[10:32:04.928]     }
[10:32:04.928]     ...future.frame <- base::sys.nframe()
[10:32:04.928]     ...future.conditions <- base::list()
[10:32:04.928]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:04.928]     if (FALSE) {
[10:32:04.928]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:04.928]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:04.928]     }
[10:32:04.928]     ...future.result <- base::tryCatch({
[10:32:04.928]         base::withCallingHandlers({
[10:32:04.928]             ...future.value <- base::withVisible(base::local({
[10:32:04.928]                 42L
[10:32:04.928]                 stop("Woops")
[10:32:04.928]             }))
[10:32:04.928]             future::FutureResult(value = ...future.value$value, 
[10:32:04.928]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:04.928]                   ...future.rng), globalenv = if (FALSE) 
[10:32:04.928]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:04.928]                     ...future.globalenv.names))
[10:32:04.928]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:04.928]         }, condition = base::local({
[10:32:04.928]             c <- base::c
[10:32:04.928]             inherits <- base::inherits
[10:32:04.928]             invokeRestart <- base::invokeRestart
[10:32:04.928]             length <- base::length
[10:32:04.928]             list <- base::list
[10:32:04.928]             seq.int <- base::seq.int
[10:32:04.928]             signalCondition <- base::signalCondition
[10:32:04.928]             sys.calls <- base::sys.calls
[10:32:04.928]             `[[` <- base::`[[`
[10:32:04.928]             `+` <- base::`+`
[10:32:04.928]             `<<-` <- base::`<<-`
[10:32:04.928]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:04.928]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:04.928]                   3L)]
[10:32:04.928]             }
[10:32:04.928]             function(cond) {
[10:32:04.928]                 is_error <- inherits(cond, "error")
[10:32:04.928]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:04.928]                   NULL)
[10:32:04.928]                 if (is_error) {
[10:32:04.928]                   sessionInformation <- function() {
[10:32:04.928]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:04.928]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:04.928]                       search = base::search(), system = base::Sys.info())
[10:32:04.928]                   }
[10:32:04.928]                   ...future.conditions[[length(...future.conditions) + 
[10:32:04.928]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:04.928]                     cond$call), session = sessionInformation(), 
[10:32:04.928]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:04.928]                   signalCondition(cond)
[10:32:04.928]                 }
[10:32:04.928]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:04.928]                 "immediateCondition"))) {
[10:32:04.928]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:04.928]                   ...future.conditions[[length(...future.conditions) + 
[10:32:04.928]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:04.928]                   if (TRUE && !signal) {
[10:32:04.928]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:04.928]                     {
[10:32:04.928]                       inherits <- base::inherits
[10:32:04.928]                       invokeRestart <- base::invokeRestart
[10:32:04.928]                       is.null <- base::is.null
[10:32:04.928]                       muffled <- FALSE
[10:32:04.928]                       if (inherits(cond, "message")) {
[10:32:04.928]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:04.928]                         if (muffled) 
[10:32:04.928]                           invokeRestart("muffleMessage")
[10:32:04.928]                       }
[10:32:04.928]                       else if (inherits(cond, "warning")) {
[10:32:04.928]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:04.928]                         if (muffled) 
[10:32:04.928]                           invokeRestart("muffleWarning")
[10:32:04.928]                       }
[10:32:04.928]                       else if (inherits(cond, "condition")) {
[10:32:04.928]                         if (!is.null(pattern)) {
[10:32:04.928]                           computeRestarts <- base::computeRestarts
[10:32:04.928]                           grepl <- base::grepl
[10:32:04.928]                           restarts <- computeRestarts(cond)
[10:32:04.928]                           for (restart in restarts) {
[10:32:04.928]                             name <- restart$name
[10:32:04.928]                             if (is.null(name)) 
[10:32:04.928]                               next
[10:32:04.928]                             if (!grepl(pattern, name)) 
[10:32:04.928]                               next
[10:32:04.928]                             invokeRestart(restart)
[10:32:04.928]                             muffled <- TRUE
[10:32:04.928]                             break
[10:32:04.928]                           }
[10:32:04.928]                         }
[10:32:04.928]                       }
[10:32:04.928]                       invisible(muffled)
[10:32:04.928]                     }
[10:32:04.928]                     muffleCondition(cond, pattern = "^muffle")
[10:32:04.928]                   }
[10:32:04.928]                 }
[10:32:04.928]                 else {
[10:32:04.928]                   if (TRUE) {
[10:32:04.928]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:04.928]                     {
[10:32:04.928]                       inherits <- base::inherits
[10:32:04.928]                       invokeRestart <- base::invokeRestart
[10:32:04.928]                       is.null <- base::is.null
[10:32:04.928]                       muffled <- FALSE
[10:32:04.928]                       if (inherits(cond, "message")) {
[10:32:04.928]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:04.928]                         if (muffled) 
[10:32:04.928]                           invokeRestart("muffleMessage")
[10:32:04.928]                       }
[10:32:04.928]                       else if (inherits(cond, "warning")) {
[10:32:04.928]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:04.928]                         if (muffled) 
[10:32:04.928]                           invokeRestart("muffleWarning")
[10:32:04.928]                       }
[10:32:04.928]                       else if (inherits(cond, "condition")) {
[10:32:04.928]                         if (!is.null(pattern)) {
[10:32:04.928]                           computeRestarts <- base::computeRestarts
[10:32:04.928]                           grepl <- base::grepl
[10:32:04.928]                           restarts <- computeRestarts(cond)
[10:32:04.928]                           for (restart in restarts) {
[10:32:04.928]                             name <- restart$name
[10:32:04.928]                             if (is.null(name)) 
[10:32:04.928]                               next
[10:32:04.928]                             if (!grepl(pattern, name)) 
[10:32:04.928]                               next
[10:32:04.928]                             invokeRestart(restart)
[10:32:04.928]                             muffled <- TRUE
[10:32:04.928]                             break
[10:32:04.928]                           }
[10:32:04.928]                         }
[10:32:04.928]                       }
[10:32:04.928]                       invisible(muffled)
[10:32:04.928]                     }
[10:32:04.928]                     muffleCondition(cond, pattern = "^muffle")
[10:32:04.928]                   }
[10:32:04.928]                 }
[10:32:04.928]             }
[10:32:04.928]         }))
[10:32:04.928]     }, error = function(ex) {
[10:32:04.928]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:04.928]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:04.928]                 ...future.rng), started = ...future.startTime, 
[10:32:04.928]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:04.928]             version = "1.8"), class = "FutureResult")
[10:32:04.928]     }, finally = {
[10:32:04.928]         if (!identical(...future.workdir, getwd())) 
[10:32:04.928]             setwd(...future.workdir)
[10:32:04.928]         {
[10:32:04.928]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:04.928]                 ...future.oldOptions$nwarnings <- NULL
[10:32:04.928]             }
[10:32:04.928]             base::options(...future.oldOptions)
[10:32:04.928]             if (.Platform$OS.type == "windows") {
[10:32:04.928]                 old_names <- names(...future.oldEnvVars)
[10:32:04.928]                 envs <- base::Sys.getenv()
[10:32:04.928]                 names <- names(envs)
[10:32:04.928]                 common <- intersect(names, old_names)
[10:32:04.928]                 added <- setdiff(names, old_names)
[10:32:04.928]                 removed <- setdiff(old_names, names)
[10:32:04.928]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:04.928]                   envs[common]]
[10:32:04.928]                 NAMES <- toupper(changed)
[10:32:04.928]                 args <- list()
[10:32:04.928]                 for (kk in seq_along(NAMES)) {
[10:32:04.928]                   name <- changed[[kk]]
[10:32:04.928]                   NAME <- NAMES[[kk]]
[10:32:04.928]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:04.928]                     next
[10:32:04.928]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:04.928]                 }
[10:32:04.928]                 NAMES <- toupper(added)
[10:32:04.928]                 for (kk in seq_along(NAMES)) {
[10:32:04.928]                   name <- added[[kk]]
[10:32:04.928]                   NAME <- NAMES[[kk]]
[10:32:04.928]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:04.928]                     next
[10:32:04.928]                   args[[name]] <- ""
[10:32:04.928]                 }
[10:32:04.928]                 NAMES <- toupper(removed)
[10:32:04.928]                 for (kk in seq_along(NAMES)) {
[10:32:04.928]                   name <- removed[[kk]]
[10:32:04.928]                   NAME <- NAMES[[kk]]
[10:32:04.928]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:04.928]                     next
[10:32:04.928]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:04.928]                 }
[10:32:04.928]                 if (length(args) > 0) 
[10:32:04.928]                   base::do.call(base::Sys.setenv, args = args)
[10:32:04.928]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:04.928]             }
[10:32:04.928]             else {
[10:32:04.928]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:04.928]             }
[10:32:04.928]             {
[10:32:04.928]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:04.928]                   0L) {
[10:32:04.928]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:04.928]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:04.928]                   base::options(opts)
[10:32:04.928]                 }
[10:32:04.928]                 {
[10:32:04.928]                   {
[10:32:04.928]                     NULL
[10:32:04.928]                     RNGkind("Mersenne-Twister")
[10:32:04.928]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:04.928]                       inherits = FALSE)
[10:32:04.928]                   }
[10:32:04.928]                   options(future.plan = NULL)
[10:32:04.928]                   if (is.na(NA_character_)) 
[10:32:04.928]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:04.928]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:04.928]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:04.928]                     .init = FALSE)
[10:32:04.928]                 }
[10:32:04.928]             }
[10:32:04.928]         }
[10:32:04.928]     })
[10:32:04.928]     if (TRUE) {
[10:32:04.928]         base::sink(type = "output", split = FALSE)
[10:32:04.928]         if (TRUE) {
[10:32:04.928]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:04.928]         }
[10:32:04.928]         else {
[10:32:04.928]             ...future.result["stdout"] <- base::list(NULL)
[10:32:04.928]         }
[10:32:04.928]         base::close(...future.stdout)
[10:32:04.928]         ...future.stdout <- NULL
[10:32:04.928]     }
[10:32:04.928]     ...future.result$conditions <- ...future.conditions
[10:32:04.928]     ...future.result$finished <- base::Sys.time()
[10:32:04.928]     ...future.result
[10:32:04.928] }
[10:32:04.930] plan(): Setting new future strategy stack:
[10:32:04.930] List of future strategies:
[10:32:04.930] 1. sequential:
[10:32:04.930]    - args: function (..., envir = parent.frame())
[10:32:04.930]    - tweaked: FALSE
[10:32:04.930]    - call: NULL
[10:32:04.931] plan(): nbrOfWorkers() = 1
[10:32:04.932] plan(): Setting new future strategy stack:
[10:32:04.932] List of future strategies:
[10:32:04.932] 1. sequential:
[10:32:04.932]    - args: function (..., envir = parent.frame())
[10:32:04.932]    - tweaked: FALSE
[10:32:04.932]    - call: future::plan("sequential")
[10:32:04.932] plan(): nbrOfWorkers() = 1
[10:32:04.932] SequentialFuture started (and completed)
[10:32:04.932] signalConditions() ...
[10:32:04.932]  - include = ‘immediateCondition’
[10:32:04.932]  - exclude = 
[10:32:04.933]  - resignal = FALSE
[10:32:04.933]  - Number of conditions: 1
[10:32:04.933] signalConditions() ... done
[10:32:04.933] - Launch lazy future ... done
[10:32:04.933] run() for ‘SequentialFuture’ ... done
> lenv[[2]] %<-% { 42L; stop("Woops") }
[10:32:04.933] getGlobalsAndPackages() ...
[10:32:04.933] Searching for globals...
[10:32:04.934] - globals found: [2] ‘{’, ‘stop’
[10:32:04.934] Searching for globals ... DONE
[10:32:04.935] Resolving globals: FALSE
[10:32:04.935] 
[10:32:04.935] 
[10:32:04.935] getGlobalsAndPackages() ... DONE
[10:32:04.935] run() for ‘Future’ ...
[10:32:04.935] - state: ‘created’
[10:32:04.935] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:04.936] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:04.936] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:04.936]   - Field: ‘label’
[10:32:04.938]   - Field: ‘local’
[10:32:04.938]   - Field: ‘owner’
[10:32:04.938]   - Field: ‘envir’
[10:32:04.938]   - Field: ‘packages’
[10:32:04.938]   - Field: ‘gc’
[10:32:04.938]   - Field: ‘conditions’
[10:32:04.938]   - Field: ‘expr’
[10:32:04.938]   - Field: ‘uuid’
[10:32:04.939]   - Field: ‘seed’
[10:32:04.939]   - Field: ‘version’
[10:32:04.939]   - Field: ‘result’
[10:32:04.939]   - Field: ‘asynchronous’
[10:32:04.939]   - Field: ‘calls’
[10:32:04.939]   - Field: ‘globals’
[10:32:04.939]   - Field: ‘stdout’
[10:32:04.939]   - Field: ‘earlySignal’
[10:32:04.939]   - Field: ‘lazy’
[10:32:04.939]   - Field: ‘state’
[10:32:04.940] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:04.940] - Launch lazy future ...
[10:32:04.940] Packages needed by the future expression (n = 0): <none>
[10:32:04.940] Packages needed by future strategies (n = 0): <none>
[10:32:04.940] {
[10:32:04.940]     {
[10:32:04.940]         {
[10:32:04.940]             ...future.startTime <- base::Sys.time()
[10:32:04.940]             {
[10:32:04.940]                 {
[10:32:04.940]                   {
[10:32:04.940]                     base::local({
[10:32:04.940]                       has_future <- base::requireNamespace("future", 
[10:32:04.940]                         quietly = TRUE)
[10:32:04.940]                       if (has_future) {
[10:32:04.940]                         ns <- base::getNamespace("future")
[10:32:04.940]                         version <- ns[[".package"]][["version"]]
[10:32:04.940]                         if (is.null(version)) 
[10:32:04.940]                           version <- utils::packageVersion("future")
[10:32:04.940]                       }
[10:32:04.940]                       else {
[10:32:04.940]                         version <- NULL
[10:32:04.940]                       }
[10:32:04.940]                       if (!has_future || version < "1.8.0") {
[10:32:04.940]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:04.940]                           "", base::R.version$version.string), 
[10:32:04.940]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:04.940]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:04.940]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:04.940]                             "release", "version")], collapse = " "), 
[10:32:04.940]                           hostname = base::Sys.info()[["nodename"]])
[10:32:04.940]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:04.940]                           info)
[10:32:04.940]                         info <- base::paste(info, collapse = "; ")
[10:32:04.940]                         if (!has_future) {
[10:32:04.940]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:04.940]                             info)
[10:32:04.940]                         }
[10:32:04.940]                         else {
[10:32:04.940]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:04.940]                             info, version)
[10:32:04.940]                         }
[10:32:04.940]                         base::stop(msg)
[10:32:04.940]                       }
[10:32:04.940]                     })
[10:32:04.940]                   }
[10:32:04.940]                   ...future.strategy.old <- future::plan("list")
[10:32:04.940]                   options(future.plan = NULL)
[10:32:04.940]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:04.940]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:04.940]                 }
[10:32:04.940]                 ...future.workdir <- getwd()
[10:32:04.940]             }
[10:32:04.940]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:04.940]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:04.940]         }
[10:32:04.940]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:04.940]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:04.940]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:04.940]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:04.940]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:04.940]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:04.940]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:04.940]             base::names(...future.oldOptions))
[10:32:04.940]     }
[10:32:04.940]     if (FALSE) {
[10:32:04.940]     }
[10:32:04.940]     else {
[10:32:04.940]         if (TRUE) {
[10:32:04.940]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:04.940]                 open = "w")
[10:32:04.940]         }
[10:32:04.940]         else {
[10:32:04.940]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:04.940]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:04.940]         }
[10:32:04.940]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:04.940]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:04.940]             base::sink(type = "output", split = FALSE)
[10:32:04.940]             base::close(...future.stdout)
[10:32:04.940]         }, add = TRUE)
[10:32:04.940]     }
[10:32:04.940]     ...future.frame <- base::sys.nframe()
[10:32:04.940]     ...future.conditions <- base::list()
[10:32:04.940]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:04.940]     if (FALSE) {
[10:32:04.940]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:04.940]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:04.940]     }
[10:32:04.940]     ...future.result <- base::tryCatch({
[10:32:04.940]         base::withCallingHandlers({
[10:32:04.940]             ...future.value <- base::withVisible(base::local({
[10:32:04.940]                 42L
[10:32:04.940]                 stop("Woops")
[10:32:04.940]             }))
[10:32:04.940]             future::FutureResult(value = ...future.value$value, 
[10:32:04.940]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:04.940]                   ...future.rng), globalenv = if (FALSE) 
[10:32:04.940]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:04.940]                     ...future.globalenv.names))
[10:32:04.940]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:04.940]         }, condition = base::local({
[10:32:04.940]             c <- base::c
[10:32:04.940]             inherits <- base::inherits
[10:32:04.940]             invokeRestart <- base::invokeRestart
[10:32:04.940]             length <- base::length
[10:32:04.940]             list <- base::list
[10:32:04.940]             seq.int <- base::seq.int
[10:32:04.940]             signalCondition <- base::signalCondition
[10:32:04.940]             sys.calls <- base::sys.calls
[10:32:04.940]             `[[` <- base::`[[`
[10:32:04.940]             `+` <- base::`+`
[10:32:04.940]             `<<-` <- base::`<<-`
[10:32:04.940]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:04.940]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:04.940]                   3L)]
[10:32:04.940]             }
[10:32:04.940]             function(cond) {
[10:32:04.940]                 is_error <- inherits(cond, "error")
[10:32:04.940]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:04.940]                   NULL)
[10:32:04.940]                 if (is_error) {
[10:32:04.940]                   sessionInformation <- function() {
[10:32:04.940]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:04.940]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:04.940]                       search = base::search(), system = base::Sys.info())
[10:32:04.940]                   }
[10:32:04.940]                   ...future.conditions[[length(...future.conditions) + 
[10:32:04.940]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:04.940]                     cond$call), session = sessionInformation(), 
[10:32:04.940]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:04.940]                   signalCondition(cond)
[10:32:04.940]                 }
[10:32:04.940]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:04.940]                 "immediateCondition"))) {
[10:32:04.940]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:04.940]                   ...future.conditions[[length(...future.conditions) + 
[10:32:04.940]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:04.940]                   if (TRUE && !signal) {
[10:32:04.940]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:04.940]                     {
[10:32:04.940]                       inherits <- base::inherits
[10:32:04.940]                       invokeRestart <- base::invokeRestart
[10:32:04.940]                       is.null <- base::is.null
[10:32:04.940]                       muffled <- FALSE
[10:32:04.940]                       if (inherits(cond, "message")) {
[10:32:04.940]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:04.940]                         if (muffled) 
[10:32:04.940]                           invokeRestart("muffleMessage")
[10:32:04.940]                       }
[10:32:04.940]                       else if (inherits(cond, "warning")) {
[10:32:04.940]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:04.940]                         if (muffled) 
[10:32:04.940]                           invokeRestart("muffleWarning")
[10:32:04.940]                       }
[10:32:04.940]                       else if (inherits(cond, "condition")) {
[10:32:04.940]                         if (!is.null(pattern)) {
[10:32:04.940]                           computeRestarts <- base::computeRestarts
[10:32:04.940]                           grepl <- base::grepl
[10:32:04.940]                           restarts <- computeRestarts(cond)
[10:32:04.940]                           for (restart in restarts) {
[10:32:04.940]                             name <- restart$name
[10:32:04.940]                             if (is.null(name)) 
[10:32:04.940]                               next
[10:32:04.940]                             if (!grepl(pattern, name)) 
[10:32:04.940]                               next
[10:32:04.940]                             invokeRestart(restart)
[10:32:04.940]                             muffled <- TRUE
[10:32:04.940]                             break
[10:32:04.940]                           }
[10:32:04.940]                         }
[10:32:04.940]                       }
[10:32:04.940]                       invisible(muffled)
[10:32:04.940]                     }
[10:32:04.940]                     muffleCondition(cond, pattern = "^muffle")
[10:32:04.940]                   }
[10:32:04.940]                 }
[10:32:04.940]                 else {
[10:32:04.940]                   if (TRUE) {
[10:32:04.940]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:04.940]                     {
[10:32:04.940]                       inherits <- base::inherits
[10:32:04.940]                       invokeRestart <- base::invokeRestart
[10:32:04.940]                       is.null <- base::is.null
[10:32:04.940]                       muffled <- FALSE
[10:32:04.940]                       if (inherits(cond, "message")) {
[10:32:04.940]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:04.940]                         if (muffled) 
[10:32:04.940]                           invokeRestart("muffleMessage")
[10:32:04.940]                       }
[10:32:04.940]                       else if (inherits(cond, "warning")) {
[10:32:04.940]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:04.940]                         if (muffled) 
[10:32:04.940]                           invokeRestart("muffleWarning")
[10:32:04.940]                       }
[10:32:04.940]                       else if (inherits(cond, "condition")) {
[10:32:04.940]                         if (!is.null(pattern)) {
[10:32:04.940]                           computeRestarts <- base::computeRestarts
[10:32:04.940]                           grepl <- base::grepl
[10:32:04.940]                           restarts <- computeRestarts(cond)
[10:32:04.940]                           for (restart in restarts) {
[10:32:04.940]                             name <- restart$name
[10:32:04.940]                             if (is.null(name)) 
[10:32:04.940]                               next
[10:32:04.940]                             if (!grepl(pattern, name)) 
[10:32:04.940]                               next
[10:32:04.940]                             invokeRestart(restart)
[10:32:04.940]                             muffled <- TRUE
[10:32:04.940]                             break
[10:32:04.940]                           }
[10:32:04.940]                         }
[10:32:04.940]                       }
[10:32:04.940]                       invisible(muffled)
[10:32:04.940]                     }
[10:32:04.940]                     muffleCondition(cond, pattern = "^muffle")
[10:32:04.940]                   }
[10:32:04.940]                 }
[10:32:04.940]             }
[10:32:04.940]         }))
[10:32:04.940]     }, error = function(ex) {
[10:32:04.940]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:04.940]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:04.940]                 ...future.rng), started = ...future.startTime, 
[10:32:04.940]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:04.940]             version = "1.8"), class = "FutureResult")
[10:32:04.940]     }, finally = {
[10:32:04.940]         if (!identical(...future.workdir, getwd())) 
[10:32:04.940]             setwd(...future.workdir)
[10:32:04.940]         {
[10:32:04.940]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:04.940]                 ...future.oldOptions$nwarnings <- NULL
[10:32:04.940]             }
[10:32:04.940]             base::options(...future.oldOptions)
[10:32:04.940]             if (.Platform$OS.type == "windows") {
[10:32:04.940]                 old_names <- names(...future.oldEnvVars)
[10:32:04.940]                 envs <- base::Sys.getenv()
[10:32:04.940]                 names <- names(envs)
[10:32:04.940]                 common <- intersect(names, old_names)
[10:32:04.940]                 added <- setdiff(names, old_names)
[10:32:04.940]                 removed <- setdiff(old_names, names)
[10:32:04.940]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:04.940]                   envs[common]]
[10:32:04.940]                 NAMES <- toupper(changed)
[10:32:04.940]                 args <- list()
[10:32:04.940]                 for (kk in seq_along(NAMES)) {
[10:32:04.940]                   name <- changed[[kk]]
[10:32:04.940]                   NAME <- NAMES[[kk]]
[10:32:04.940]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:04.940]                     next
[10:32:04.940]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:04.940]                 }
[10:32:04.940]                 NAMES <- toupper(added)
[10:32:04.940]                 for (kk in seq_along(NAMES)) {
[10:32:04.940]                   name <- added[[kk]]
[10:32:04.940]                   NAME <- NAMES[[kk]]
[10:32:04.940]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:04.940]                     next
[10:32:04.940]                   args[[name]] <- ""
[10:32:04.940]                 }
[10:32:04.940]                 NAMES <- toupper(removed)
[10:32:04.940]                 for (kk in seq_along(NAMES)) {
[10:32:04.940]                   name <- removed[[kk]]
[10:32:04.940]                   NAME <- NAMES[[kk]]
[10:32:04.940]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:04.940]                     next
[10:32:04.940]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:04.940]                 }
[10:32:04.940]                 if (length(args) > 0) 
[10:32:04.940]                   base::do.call(base::Sys.setenv, args = args)
[10:32:04.940]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:04.940]             }
[10:32:04.940]             else {
[10:32:04.940]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:04.940]             }
[10:32:04.940]             {
[10:32:04.940]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:04.940]                   0L) {
[10:32:04.940]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:04.940]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:04.940]                   base::options(opts)
[10:32:04.940]                 }
[10:32:04.940]                 {
[10:32:04.940]                   {
[10:32:04.940]                     NULL
[10:32:04.940]                     RNGkind("Mersenne-Twister")
[10:32:04.940]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:04.940]                       inherits = FALSE)
[10:32:04.940]                   }
[10:32:04.940]                   options(future.plan = NULL)
[10:32:04.940]                   if (is.na(NA_character_)) 
[10:32:04.940]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:04.940]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:04.940]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:04.940]                     .init = FALSE)
[10:32:04.940]                 }
[10:32:04.940]             }
[10:32:04.940]         }
[10:32:04.940]     })
[10:32:04.940]     if (TRUE) {
[10:32:04.940]         base::sink(type = "output", split = FALSE)
[10:32:04.940]         if (TRUE) {
[10:32:04.940]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:04.940]         }
[10:32:04.940]         else {
[10:32:04.940]             ...future.result["stdout"] <- base::list(NULL)
[10:32:04.940]         }
[10:32:04.940]         base::close(...future.stdout)
[10:32:04.940]         ...future.stdout <- NULL
[10:32:04.940]     }
[10:32:04.940]     ...future.result$conditions <- ...future.conditions
[10:32:04.940]     ...future.result$finished <- base::Sys.time()
[10:32:04.940]     ...future.result
[10:32:04.940] }
[10:32:04.942] plan(): Setting new future strategy stack:
[10:32:04.942] List of future strategies:
[10:32:04.942] 1. sequential:
[10:32:04.942]    - args: function (..., envir = parent.frame())
[10:32:04.942]    - tweaked: FALSE
[10:32:04.942]    - call: NULL
[10:32:04.943] plan(): nbrOfWorkers() = 1
[10:32:04.943] plan(): Setting new future strategy stack:
[10:32:04.944] List of future strategies:
[10:32:04.944] 1. sequential:
[10:32:04.944]    - args: function (..., envir = parent.frame())
[10:32:04.944]    - tweaked: FALSE
[10:32:04.944]    - call: future::plan("sequential")
[10:32:04.944] plan(): nbrOfWorkers() = 1
[10:32:04.944] SequentialFuture started (and completed)
[10:32:04.944] signalConditions() ...
[10:32:04.944]  - include = ‘immediateCondition’
[10:32:04.944]  - exclude = 
[10:32:04.944]  - resignal = FALSE
[10:32:04.945]  - Number of conditions: 1
[10:32:04.945] signalConditions() ... done
[10:32:04.945] - Launch lazy future ... done
[10:32:04.945] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(lenv[[2]])
[10:32:04.945] resolved() for ‘SequentialFuture’ ...
[10:32:04.945] - state: ‘finished’
[10:32:04.945] - run: TRUE
[10:32:04.946] - result: ‘FutureResult’
[10:32:04.946] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
lenv[[2]] %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> ll <- list()
> ll[[1]] <- future({ 42L; stop("Woops") })
[10:32:04.946] getGlobalsAndPackages() ...
[10:32:04.946] Searching for globals...
[10:32:04.947] - globals found: [2] ‘{’, ‘stop’
[10:32:04.947] Searching for globals ... DONE
[10:32:04.947] Resolving globals: FALSE
[10:32:04.948] 
[10:32:04.948] 
[10:32:04.948] getGlobalsAndPackages() ... DONE
[10:32:04.948] run() for ‘Future’ ...
[10:32:04.948] - state: ‘created’
[10:32:04.948] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:04.949] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:04.949] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:04.949]   - Field: ‘label’
[10:32:04.949]   - Field: ‘local’
[10:32:04.949]   - Field: ‘owner’
[10:32:04.949]   - Field: ‘envir’
[10:32:04.949]   - Field: ‘packages’
[10:32:04.949]   - Field: ‘gc’
[10:32:04.949]   - Field: ‘conditions’
[10:32:04.949]   - Field: ‘expr’
[10:32:04.950]   - Field: ‘uuid’
[10:32:04.950]   - Field: ‘seed’
[10:32:04.950]   - Field: ‘version’
[10:32:04.950]   - Field: ‘result’
[10:32:04.950]   - Field: ‘asynchronous’
[10:32:04.950]   - Field: ‘calls’
[10:32:04.950]   - Field: ‘globals’
[10:32:04.950]   - Field: ‘stdout’
[10:32:04.950]   - Field: ‘earlySignal’
[10:32:04.950]   - Field: ‘lazy’
[10:32:04.950]   - Field: ‘state’
[10:32:04.951] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:04.951] - Launch lazy future ...
[10:32:04.951] Packages needed by the future expression (n = 0): <none>
[10:32:04.951] Packages needed by future strategies (n = 0): <none>
[10:32:04.951] {
[10:32:04.951]     {
[10:32:04.951]         {
[10:32:04.951]             ...future.startTime <- base::Sys.time()
[10:32:04.951]             {
[10:32:04.951]                 {
[10:32:04.951]                   {
[10:32:04.951]                     base::local({
[10:32:04.951]                       has_future <- base::requireNamespace("future", 
[10:32:04.951]                         quietly = TRUE)
[10:32:04.951]                       if (has_future) {
[10:32:04.951]                         ns <- base::getNamespace("future")
[10:32:04.951]                         version <- ns[[".package"]][["version"]]
[10:32:04.951]                         if (is.null(version)) 
[10:32:04.951]                           version <- utils::packageVersion("future")
[10:32:04.951]                       }
[10:32:04.951]                       else {
[10:32:04.951]                         version <- NULL
[10:32:04.951]                       }
[10:32:04.951]                       if (!has_future || version < "1.8.0") {
[10:32:04.951]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:04.951]                           "", base::R.version$version.string), 
[10:32:04.951]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:04.951]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:04.951]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:04.951]                             "release", "version")], collapse = " "), 
[10:32:04.951]                           hostname = base::Sys.info()[["nodename"]])
[10:32:04.951]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:04.951]                           info)
[10:32:04.951]                         info <- base::paste(info, collapse = "; ")
[10:32:04.951]                         if (!has_future) {
[10:32:04.951]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:04.951]                             info)
[10:32:04.951]                         }
[10:32:04.951]                         else {
[10:32:04.951]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:04.951]                             info, version)
[10:32:04.951]                         }
[10:32:04.951]                         base::stop(msg)
[10:32:04.951]                       }
[10:32:04.951]                     })
[10:32:04.951]                   }
[10:32:04.951]                   ...future.strategy.old <- future::plan("list")
[10:32:04.951]                   options(future.plan = NULL)
[10:32:04.951]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:04.951]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:04.951]                 }
[10:32:04.951]                 ...future.workdir <- getwd()
[10:32:04.951]             }
[10:32:04.951]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:04.951]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:04.951]         }
[10:32:04.951]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:04.951]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:04.951]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:04.951]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:04.951]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:04.951]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:04.951]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:04.951]             base::names(...future.oldOptions))
[10:32:04.951]     }
[10:32:04.951]     if (FALSE) {
[10:32:04.951]     }
[10:32:04.951]     else {
[10:32:04.951]         if (TRUE) {
[10:32:04.951]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:04.951]                 open = "w")
[10:32:04.951]         }
[10:32:04.951]         else {
[10:32:04.951]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:04.951]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:04.951]         }
[10:32:04.951]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:04.951]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:04.951]             base::sink(type = "output", split = FALSE)
[10:32:04.951]             base::close(...future.stdout)
[10:32:04.951]         }, add = TRUE)
[10:32:04.951]     }
[10:32:04.951]     ...future.frame <- base::sys.nframe()
[10:32:04.951]     ...future.conditions <- base::list()
[10:32:04.951]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:04.951]     if (FALSE) {
[10:32:04.951]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:04.951]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:04.951]     }
[10:32:04.951]     ...future.result <- base::tryCatch({
[10:32:04.951]         base::withCallingHandlers({
[10:32:04.951]             ...future.value <- base::withVisible(base::local({
[10:32:04.951]                 42L
[10:32:04.951]                 stop("Woops")
[10:32:04.951]             }))
[10:32:04.951]             future::FutureResult(value = ...future.value$value, 
[10:32:04.951]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:04.951]                   ...future.rng), globalenv = if (FALSE) 
[10:32:04.951]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:04.951]                     ...future.globalenv.names))
[10:32:04.951]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:04.951]         }, condition = base::local({
[10:32:04.951]             c <- base::c
[10:32:04.951]             inherits <- base::inherits
[10:32:04.951]             invokeRestart <- base::invokeRestart
[10:32:04.951]             length <- base::length
[10:32:04.951]             list <- base::list
[10:32:04.951]             seq.int <- base::seq.int
[10:32:04.951]             signalCondition <- base::signalCondition
[10:32:04.951]             sys.calls <- base::sys.calls
[10:32:04.951]             `[[` <- base::`[[`
[10:32:04.951]             `+` <- base::`+`
[10:32:04.951]             `<<-` <- base::`<<-`
[10:32:04.951]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:04.951]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:04.951]                   3L)]
[10:32:04.951]             }
[10:32:04.951]             function(cond) {
[10:32:04.951]                 is_error <- inherits(cond, "error")
[10:32:04.951]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:04.951]                   NULL)
[10:32:04.951]                 if (is_error) {
[10:32:04.951]                   sessionInformation <- function() {
[10:32:04.951]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:04.951]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:04.951]                       search = base::search(), system = base::Sys.info())
[10:32:04.951]                   }
[10:32:04.951]                   ...future.conditions[[length(...future.conditions) + 
[10:32:04.951]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:04.951]                     cond$call), session = sessionInformation(), 
[10:32:04.951]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:04.951]                   signalCondition(cond)
[10:32:04.951]                 }
[10:32:04.951]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:04.951]                 "immediateCondition"))) {
[10:32:04.951]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:04.951]                   ...future.conditions[[length(...future.conditions) + 
[10:32:04.951]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:04.951]                   if (TRUE && !signal) {
[10:32:04.951]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:04.951]                     {
[10:32:04.951]                       inherits <- base::inherits
[10:32:04.951]                       invokeRestart <- base::invokeRestart
[10:32:04.951]                       is.null <- base::is.null
[10:32:04.951]                       muffled <- FALSE
[10:32:04.951]                       if (inherits(cond, "message")) {
[10:32:04.951]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:04.951]                         if (muffled) 
[10:32:04.951]                           invokeRestart("muffleMessage")
[10:32:04.951]                       }
[10:32:04.951]                       else if (inherits(cond, "warning")) {
[10:32:04.951]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:04.951]                         if (muffled) 
[10:32:04.951]                           invokeRestart("muffleWarning")
[10:32:04.951]                       }
[10:32:04.951]                       else if (inherits(cond, "condition")) {
[10:32:04.951]                         if (!is.null(pattern)) {
[10:32:04.951]                           computeRestarts <- base::computeRestarts
[10:32:04.951]                           grepl <- base::grepl
[10:32:04.951]                           restarts <- computeRestarts(cond)
[10:32:04.951]                           for (restart in restarts) {
[10:32:04.951]                             name <- restart$name
[10:32:04.951]                             if (is.null(name)) 
[10:32:04.951]                               next
[10:32:04.951]                             if (!grepl(pattern, name)) 
[10:32:04.951]                               next
[10:32:04.951]                             invokeRestart(restart)
[10:32:04.951]                             muffled <- TRUE
[10:32:04.951]                             break
[10:32:04.951]                           }
[10:32:04.951]                         }
[10:32:04.951]                       }
[10:32:04.951]                       invisible(muffled)
[10:32:04.951]                     }
[10:32:04.951]                     muffleCondition(cond, pattern = "^muffle")
[10:32:04.951]                   }
[10:32:04.951]                 }
[10:32:04.951]                 else {
[10:32:04.951]                   if (TRUE) {
[10:32:04.951]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:04.951]                     {
[10:32:04.951]                       inherits <- base::inherits
[10:32:04.951]                       invokeRestart <- base::invokeRestart
[10:32:04.951]                       is.null <- base::is.null
[10:32:04.951]                       muffled <- FALSE
[10:32:04.951]                       if (inherits(cond, "message")) {
[10:32:04.951]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:04.951]                         if (muffled) 
[10:32:04.951]                           invokeRestart("muffleMessage")
[10:32:04.951]                       }
[10:32:04.951]                       else if (inherits(cond, "warning")) {
[10:32:04.951]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:04.951]                         if (muffled) 
[10:32:04.951]                           invokeRestart("muffleWarning")
[10:32:04.951]                       }
[10:32:04.951]                       else if (inherits(cond, "condition")) {
[10:32:04.951]                         if (!is.null(pattern)) {
[10:32:04.951]                           computeRestarts <- base::computeRestarts
[10:32:04.951]                           grepl <- base::grepl
[10:32:04.951]                           restarts <- computeRestarts(cond)
[10:32:04.951]                           for (restart in restarts) {
[10:32:04.951]                             name <- restart$name
[10:32:04.951]                             if (is.null(name)) 
[10:32:04.951]                               next
[10:32:04.951]                             if (!grepl(pattern, name)) 
[10:32:04.951]                               next
[10:32:04.951]                             invokeRestart(restart)
[10:32:04.951]                             muffled <- TRUE
[10:32:04.951]                             break
[10:32:04.951]                           }
[10:32:04.951]                         }
[10:32:04.951]                       }
[10:32:04.951]                       invisible(muffled)
[10:32:04.951]                     }
[10:32:04.951]                     muffleCondition(cond, pattern = "^muffle")
[10:32:04.951]                   }
[10:32:04.951]                 }
[10:32:04.951]             }
[10:32:04.951]         }))
[10:32:04.951]     }, error = function(ex) {
[10:32:04.951]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:04.951]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:04.951]                 ...future.rng), started = ...future.startTime, 
[10:32:04.951]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:04.951]             version = "1.8"), class = "FutureResult")
[10:32:04.951]     }, finally = {
[10:32:04.951]         if (!identical(...future.workdir, getwd())) 
[10:32:04.951]             setwd(...future.workdir)
[10:32:04.951]         {
[10:32:04.951]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:04.951]                 ...future.oldOptions$nwarnings <- NULL
[10:32:04.951]             }
[10:32:04.951]             base::options(...future.oldOptions)
[10:32:04.951]             if (.Platform$OS.type == "windows") {
[10:32:04.951]                 old_names <- names(...future.oldEnvVars)
[10:32:04.951]                 envs <- base::Sys.getenv()
[10:32:04.951]                 names <- names(envs)
[10:32:04.951]                 common <- intersect(names, old_names)
[10:32:04.951]                 added <- setdiff(names, old_names)
[10:32:04.951]                 removed <- setdiff(old_names, names)
[10:32:04.951]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:04.951]                   envs[common]]
[10:32:04.951]                 NAMES <- toupper(changed)
[10:32:04.951]                 args <- list()
[10:32:04.951]                 for (kk in seq_along(NAMES)) {
[10:32:04.951]                   name <- changed[[kk]]
[10:32:04.951]                   NAME <- NAMES[[kk]]
[10:32:04.951]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:04.951]                     next
[10:32:04.951]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:04.951]                 }
[10:32:04.951]                 NAMES <- toupper(added)
[10:32:04.951]                 for (kk in seq_along(NAMES)) {
[10:32:04.951]                   name <- added[[kk]]
[10:32:04.951]                   NAME <- NAMES[[kk]]
[10:32:04.951]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:04.951]                     next
[10:32:04.951]                   args[[name]] <- ""
[10:32:04.951]                 }
[10:32:04.951]                 NAMES <- toupper(removed)
[10:32:04.951]                 for (kk in seq_along(NAMES)) {
[10:32:04.951]                   name <- removed[[kk]]
[10:32:04.951]                   NAME <- NAMES[[kk]]
[10:32:04.951]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:04.951]                     next
[10:32:04.951]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:04.951]                 }
[10:32:04.951]                 if (length(args) > 0) 
[10:32:04.951]                   base::do.call(base::Sys.setenv, args = args)
[10:32:04.951]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:04.951]             }
[10:32:04.951]             else {
[10:32:04.951]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:04.951]             }
[10:32:04.951]             {
[10:32:04.951]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:04.951]                   0L) {
[10:32:04.951]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:04.951]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:04.951]                   base::options(opts)
[10:32:04.951]                 }
[10:32:04.951]                 {
[10:32:04.951]                   {
[10:32:04.951]                     NULL
[10:32:04.951]                     RNGkind("Mersenne-Twister")
[10:32:04.951]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:04.951]                       inherits = FALSE)
[10:32:04.951]                   }
[10:32:04.951]                   options(future.plan = NULL)
[10:32:04.951]                   if (is.na(NA_character_)) 
[10:32:04.951]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:04.951]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:04.951]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:04.951]                     .init = FALSE)
[10:32:04.951]                 }
[10:32:04.951]             }
[10:32:04.951]         }
[10:32:04.951]     })
[10:32:04.951]     if (TRUE) {
[10:32:04.951]         base::sink(type = "output", split = FALSE)
[10:32:04.951]         if (TRUE) {
[10:32:04.951]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:04.951]         }
[10:32:04.951]         else {
[10:32:04.951]             ...future.result["stdout"] <- base::list(NULL)
[10:32:04.951]         }
[10:32:04.951]         base::close(...future.stdout)
[10:32:04.951]         ...future.stdout <- NULL
[10:32:04.951]     }
[10:32:04.951]     ...future.result$conditions <- ...future.conditions
[10:32:04.951]     ...future.result$finished <- base::Sys.time()
[10:32:04.951]     ...future.result
[10:32:04.951] }
[10:32:04.953] plan(): Setting new future strategy stack:
[10:32:04.953] List of future strategies:
[10:32:04.953] 1. sequential:
[10:32:04.953]    - args: function (..., envir = parent.frame())
[10:32:04.953]    - tweaked: FALSE
[10:32:04.953]    - call: NULL
[10:32:04.953] plan(): nbrOfWorkers() = 1
[10:32:04.954] plan(): Setting new future strategy stack:
[10:32:04.954] List of future strategies:
[10:32:04.954] 1. sequential:
[10:32:04.954]    - args: function (..., envir = parent.frame())
[10:32:04.954]    - tweaked: FALSE
[10:32:04.954]    - call: future::plan("sequential")
[10:32:04.955] plan(): nbrOfWorkers() = 1
[10:32:04.955] SequentialFuture started (and completed)
[10:32:04.955] signalConditions() ...
[10:32:04.955]  - include = ‘immediateCondition’
[10:32:04.955]  - exclude = 
[10:32:04.955]  - resignal = FALSE
[10:32:04.955]  - Number of conditions: 1
[10:32:04.955] signalConditions() ... done
[10:32:04.956] - Launch lazy future ... done
[10:32:04.956] run() for ‘SequentialFuture’ ... done
> ll[[2]] <- future({ 42L; stop("Woops") })
[10:32:04.956] getGlobalsAndPackages() ...
[10:32:04.956] Searching for globals...
[10:32:04.957] - globals found: [2] ‘{’, ‘stop’
[10:32:04.957] Searching for globals ... DONE
[10:32:04.957] Resolving globals: FALSE
[10:32:04.957] 
[10:32:04.957] 
[10:32:04.957] getGlobalsAndPackages() ... DONE
[10:32:04.958] run() for ‘Future’ ...
[10:32:04.958] - state: ‘created’
[10:32:04.958] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:04.958] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:04.958] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:04.958]   - Field: ‘label’
[10:32:04.958]   - Field: ‘local’
[10:32:04.958]   - Field: ‘owner’
[10:32:04.959]   - Field: ‘envir’
[10:32:04.959]   - Field: ‘packages’
[10:32:04.959]   - Field: ‘gc’
[10:32:04.959]   - Field: ‘conditions’
[10:32:04.959]   - Field: ‘expr’
[10:32:04.959]   - Field: ‘uuid’
[10:32:04.959]   - Field: ‘seed’
[10:32:04.959]   - Field: ‘version’
[10:32:04.959]   - Field: ‘result’
[10:32:04.959]   - Field: ‘asynchronous’
[10:32:04.959]   - Field: ‘calls’
[10:32:04.960]   - Field: ‘globals’
[10:32:04.960]   - Field: ‘stdout’
[10:32:04.960]   - Field: ‘earlySignal’
[10:32:04.960]   - Field: ‘lazy’
[10:32:04.960]   - Field: ‘state’
[10:32:04.960] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:04.960] - Launch lazy future ...
[10:32:04.960] Packages needed by the future expression (n = 0): <none>
[10:32:04.960] Packages needed by future strategies (n = 0): <none>
[10:32:04.961] {
[10:32:04.961]     {
[10:32:04.961]         {
[10:32:04.961]             ...future.startTime <- base::Sys.time()
[10:32:04.961]             {
[10:32:04.961]                 {
[10:32:04.961]                   {
[10:32:04.961]                     base::local({
[10:32:04.961]                       has_future <- base::requireNamespace("future", 
[10:32:04.961]                         quietly = TRUE)
[10:32:04.961]                       if (has_future) {
[10:32:04.961]                         ns <- base::getNamespace("future")
[10:32:04.961]                         version <- ns[[".package"]][["version"]]
[10:32:04.961]                         if (is.null(version)) 
[10:32:04.961]                           version <- utils::packageVersion("future")
[10:32:04.961]                       }
[10:32:04.961]                       else {
[10:32:04.961]                         version <- NULL
[10:32:04.961]                       }
[10:32:04.961]                       if (!has_future || version < "1.8.0") {
[10:32:04.961]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:04.961]                           "", base::R.version$version.string), 
[10:32:04.961]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:04.961]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:04.961]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:04.961]                             "release", "version")], collapse = " "), 
[10:32:04.961]                           hostname = base::Sys.info()[["nodename"]])
[10:32:04.961]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:04.961]                           info)
[10:32:04.961]                         info <- base::paste(info, collapse = "; ")
[10:32:04.961]                         if (!has_future) {
[10:32:04.961]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:04.961]                             info)
[10:32:04.961]                         }
[10:32:04.961]                         else {
[10:32:04.961]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:04.961]                             info, version)
[10:32:04.961]                         }
[10:32:04.961]                         base::stop(msg)
[10:32:04.961]                       }
[10:32:04.961]                     })
[10:32:04.961]                   }
[10:32:04.961]                   ...future.strategy.old <- future::plan("list")
[10:32:04.961]                   options(future.plan = NULL)
[10:32:04.961]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:04.961]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:04.961]                 }
[10:32:04.961]                 ...future.workdir <- getwd()
[10:32:04.961]             }
[10:32:04.961]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:04.961]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:04.961]         }
[10:32:04.961]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:04.961]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:04.961]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:04.961]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:04.961]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:04.961]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:04.961]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:04.961]             base::names(...future.oldOptions))
[10:32:04.961]     }
[10:32:04.961]     if (FALSE) {
[10:32:04.961]     }
[10:32:04.961]     else {
[10:32:04.961]         if (TRUE) {
[10:32:04.961]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:04.961]                 open = "w")
[10:32:04.961]         }
[10:32:04.961]         else {
[10:32:04.961]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:04.961]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:04.961]         }
[10:32:04.961]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:04.961]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:04.961]             base::sink(type = "output", split = FALSE)
[10:32:04.961]             base::close(...future.stdout)
[10:32:04.961]         }, add = TRUE)
[10:32:04.961]     }
[10:32:04.961]     ...future.frame <- base::sys.nframe()
[10:32:04.961]     ...future.conditions <- base::list()
[10:32:04.961]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:04.961]     if (FALSE) {
[10:32:04.961]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:04.961]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:04.961]     }
[10:32:04.961]     ...future.result <- base::tryCatch({
[10:32:04.961]         base::withCallingHandlers({
[10:32:04.961]             ...future.value <- base::withVisible(base::local({
[10:32:04.961]                 42L
[10:32:04.961]                 stop("Woops")
[10:32:04.961]             }))
[10:32:04.961]             future::FutureResult(value = ...future.value$value, 
[10:32:04.961]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:04.961]                   ...future.rng), globalenv = if (FALSE) 
[10:32:04.961]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:04.961]                     ...future.globalenv.names))
[10:32:04.961]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:04.961]         }, condition = base::local({
[10:32:04.961]             c <- base::c
[10:32:04.961]             inherits <- base::inherits
[10:32:04.961]             invokeRestart <- base::invokeRestart
[10:32:04.961]             length <- base::length
[10:32:04.961]             list <- base::list
[10:32:04.961]             seq.int <- base::seq.int
[10:32:04.961]             signalCondition <- base::signalCondition
[10:32:04.961]             sys.calls <- base::sys.calls
[10:32:04.961]             `[[` <- base::`[[`
[10:32:04.961]             `+` <- base::`+`
[10:32:04.961]             `<<-` <- base::`<<-`
[10:32:04.961]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:04.961]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:04.961]                   3L)]
[10:32:04.961]             }
[10:32:04.961]             function(cond) {
[10:32:04.961]                 is_error <- inherits(cond, "error")
[10:32:04.961]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:04.961]                   NULL)
[10:32:04.961]                 if (is_error) {
[10:32:04.961]                   sessionInformation <- function() {
[10:32:04.961]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:04.961]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:04.961]                       search = base::search(), system = base::Sys.info())
[10:32:04.961]                   }
[10:32:04.961]                   ...future.conditions[[length(...future.conditions) + 
[10:32:04.961]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:04.961]                     cond$call), session = sessionInformation(), 
[10:32:04.961]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:04.961]                   signalCondition(cond)
[10:32:04.961]                 }
[10:32:04.961]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:04.961]                 "immediateCondition"))) {
[10:32:04.961]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:04.961]                   ...future.conditions[[length(...future.conditions) + 
[10:32:04.961]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:04.961]                   if (TRUE && !signal) {
[10:32:04.961]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:04.961]                     {
[10:32:04.961]                       inherits <- base::inherits
[10:32:04.961]                       invokeRestart <- base::invokeRestart
[10:32:04.961]                       is.null <- base::is.null
[10:32:04.961]                       muffled <- FALSE
[10:32:04.961]                       if (inherits(cond, "message")) {
[10:32:04.961]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:04.961]                         if (muffled) 
[10:32:04.961]                           invokeRestart("muffleMessage")
[10:32:04.961]                       }
[10:32:04.961]                       else if (inherits(cond, "warning")) {
[10:32:04.961]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:04.961]                         if (muffled) 
[10:32:04.961]                           invokeRestart("muffleWarning")
[10:32:04.961]                       }
[10:32:04.961]                       else if (inherits(cond, "condition")) {
[10:32:04.961]                         if (!is.null(pattern)) {
[10:32:04.961]                           computeRestarts <- base::computeRestarts
[10:32:04.961]                           grepl <- base::grepl
[10:32:04.961]                           restarts <- computeRestarts(cond)
[10:32:04.961]                           for (restart in restarts) {
[10:32:04.961]                             name <- restart$name
[10:32:04.961]                             if (is.null(name)) 
[10:32:04.961]                               next
[10:32:04.961]                             if (!grepl(pattern, name)) 
[10:32:04.961]                               next
[10:32:04.961]                             invokeRestart(restart)
[10:32:04.961]                             muffled <- TRUE
[10:32:04.961]                             break
[10:32:04.961]                           }
[10:32:04.961]                         }
[10:32:04.961]                       }
[10:32:04.961]                       invisible(muffled)
[10:32:04.961]                     }
[10:32:04.961]                     muffleCondition(cond, pattern = "^muffle")
[10:32:04.961]                   }
[10:32:04.961]                 }
[10:32:04.961]                 else {
[10:32:04.961]                   if (TRUE) {
[10:32:04.961]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:04.961]                     {
[10:32:04.961]                       inherits <- base::inherits
[10:32:04.961]                       invokeRestart <- base::invokeRestart
[10:32:04.961]                       is.null <- base::is.null
[10:32:04.961]                       muffled <- FALSE
[10:32:04.961]                       if (inherits(cond, "message")) {
[10:32:04.961]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:04.961]                         if (muffled) 
[10:32:04.961]                           invokeRestart("muffleMessage")
[10:32:04.961]                       }
[10:32:04.961]                       else if (inherits(cond, "warning")) {
[10:32:04.961]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:04.961]                         if (muffled) 
[10:32:04.961]                           invokeRestart("muffleWarning")
[10:32:04.961]                       }
[10:32:04.961]                       else if (inherits(cond, "condition")) {
[10:32:04.961]                         if (!is.null(pattern)) {
[10:32:04.961]                           computeRestarts <- base::computeRestarts
[10:32:04.961]                           grepl <- base::grepl
[10:32:04.961]                           restarts <- computeRestarts(cond)
[10:32:04.961]                           for (restart in restarts) {
[10:32:04.961]                             name <- restart$name
[10:32:04.961]                             if (is.null(name)) 
[10:32:04.961]                               next
[10:32:04.961]                             if (!grepl(pattern, name)) 
[10:32:04.961]                               next
[10:32:04.961]                             invokeRestart(restart)
[10:32:04.961]                             muffled <- TRUE
[10:32:04.961]                             break
[10:32:04.961]                           }
[10:32:04.961]                         }
[10:32:04.961]                       }
[10:32:04.961]                       invisible(muffled)
[10:32:04.961]                     }
[10:32:04.961]                     muffleCondition(cond, pattern = "^muffle")
[10:32:04.961]                   }
[10:32:04.961]                 }
[10:32:04.961]             }
[10:32:04.961]         }))
[10:32:04.961]     }, error = function(ex) {
[10:32:04.961]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:04.961]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:04.961]                 ...future.rng), started = ...future.startTime, 
[10:32:04.961]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:04.961]             version = "1.8"), class = "FutureResult")
[10:32:04.961]     }, finally = {
[10:32:04.961]         if (!identical(...future.workdir, getwd())) 
[10:32:04.961]             setwd(...future.workdir)
[10:32:04.961]         {
[10:32:04.961]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:04.961]                 ...future.oldOptions$nwarnings <- NULL
[10:32:04.961]             }
[10:32:04.961]             base::options(...future.oldOptions)
[10:32:04.961]             if (.Platform$OS.type == "windows") {
[10:32:04.961]                 old_names <- names(...future.oldEnvVars)
[10:32:04.961]                 envs <- base::Sys.getenv()
[10:32:04.961]                 names <- names(envs)
[10:32:04.961]                 common <- intersect(names, old_names)
[10:32:04.961]                 added <- setdiff(names, old_names)
[10:32:04.961]                 removed <- setdiff(old_names, names)
[10:32:04.961]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:04.961]                   envs[common]]
[10:32:04.961]                 NAMES <- toupper(changed)
[10:32:04.961]                 args <- list()
[10:32:04.961]                 for (kk in seq_along(NAMES)) {
[10:32:04.961]                   name <- changed[[kk]]
[10:32:04.961]                   NAME <- NAMES[[kk]]
[10:32:04.961]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:04.961]                     next
[10:32:04.961]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:04.961]                 }
[10:32:04.961]                 NAMES <- toupper(added)
[10:32:04.961]                 for (kk in seq_along(NAMES)) {
[10:32:04.961]                   name <- added[[kk]]
[10:32:04.961]                   NAME <- NAMES[[kk]]
[10:32:04.961]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:04.961]                     next
[10:32:04.961]                   args[[name]] <- ""
[10:32:04.961]                 }
[10:32:04.961]                 NAMES <- toupper(removed)
[10:32:04.961]                 for (kk in seq_along(NAMES)) {
[10:32:04.961]                   name <- removed[[kk]]
[10:32:04.961]                   NAME <- NAMES[[kk]]
[10:32:04.961]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:04.961]                     next
[10:32:04.961]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:04.961]                 }
[10:32:04.961]                 if (length(args) > 0) 
[10:32:04.961]                   base::do.call(base::Sys.setenv, args = args)
[10:32:04.961]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:04.961]             }
[10:32:04.961]             else {
[10:32:04.961]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:04.961]             }
[10:32:04.961]             {
[10:32:04.961]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:04.961]                   0L) {
[10:32:04.961]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:04.961]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:04.961]                   base::options(opts)
[10:32:04.961]                 }
[10:32:04.961]                 {
[10:32:04.961]                   {
[10:32:04.961]                     NULL
[10:32:04.961]                     RNGkind("Mersenne-Twister")
[10:32:04.961]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:04.961]                       inherits = FALSE)
[10:32:04.961]                   }
[10:32:04.961]                   options(future.plan = NULL)
[10:32:04.961]                   if (is.na(NA_character_)) 
[10:32:04.961]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:04.961]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:04.961]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:04.961]                     .init = FALSE)
[10:32:04.961]                 }
[10:32:04.961]             }
[10:32:04.961]         }
[10:32:04.961]     })
[10:32:04.961]     if (TRUE) {
[10:32:04.961]         base::sink(type = "output", split = FALSE)
[10:32:04.961]         if (TRUE) {
[10:32:04.961]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:04.961]         }
[10:32:04.961]         else {
[10:32:04.961]             ...future.result["stdout"] <- base::list(NULL)
[10:32:04.961]         }
[10:32:04.961]         base::close(...future.stdout)
[10:32:04.961]         ...future.stdout <- NULL
[10:32:04.961]     }
[10:32:04.961]     ...future.result$conditions <- ...future.conditions
[10:32:04.961]     ...future.result$finished <- base::Sys.time()
[10:32:04.961]     ...future.result
[10:32:04.961] }
[10:32:04.962] plan(): Setting new future strategy stack:
[10:32:04.963] List of future strategies:
[10:32:04.963] 1. sequential:
[10:32:04.963]    - args: function (..., envir = parent.frame())
[10:32:04.963]    - tweaked: FALSE
[10:32:04.963]    - call: NULL
[10:32:04.963] plan(): nbrOfWorkers() = 1
[10:32:04.964] plan(): Setting new future strategy stack:
[10:32:04.964] List of future strategies:
[10:32:04.964] 1. sequential:
[10:32:04.964]    - args: function (..., envir = parent.frame())
[10:32:04.964]    - tweaked: FALSE
[10:32:04.964]    - call: future::plan("sequential")
[10:32:04.964] plan(): nbrOfWorkers() = 1
[10:32:04.964] SequentialFuture started (and completed)
[10:32:04.964] signalConditions() ...
[10:32:04.964]  - include = ‘immediateCondition’
[10:32:04.965]  - exclude = 
[10:32:04.965]  - resignal = FALSE
[10:32:04.965]  - Number of conditions: 1
[10:32:04.965] signalConditions() ... done
[10:32:04.965] - Launch lazy future ... done
[10:32:04.965] run() for ‘SequentialFuture’ ... done
> vs <- value(ll, signal = FALSE)
[10:32:04.966] resolve() on list ...
[10:32:04.966]  recursive: 0
[10:32:04.966]  length: 2
[10:32:04.966] 
[10:32:04.966] resolved() for ‘SequentialFuture’ ...
[10:32:04.966] - state: ‘finished’
[10:32:04.966] - run: TRUE
[10:32:04.966] - result: ‘FutureResult’
[10:32:04.966] resolved() for ‘SequentialFuture’ ... done
[10:32:04.967] Future #1
[10:32:04.967] signalConditions() ...
[10:32:04.967]  - include = ‘immediateCondition’
[10:32:04.967]  - exclude = 
[10:32:04.967]  - resignal = FALSE
[10:32:04.967]  - Number of conditions: 1
[10:32:04.967] signalConditions() ... done
[10:32:04.967] signalConditionsASAP(SequentialFuture, pos=1) ...
[10:32:04.967] - nx: 2
[10:32:04.967] - relay: TRUE
[10:32:04.967] - stdout: TRUE
[10:32:04.968] - signal: FALSE
[10:32:04.968] - resignal: FALSE
[10:32:04.968] - force: TRUE
[10:32:04.968] - relayed: [n=2] FALSE, FALSE
[10:32:04.968] - queued futures: [n=2] FALSE, FALSE
[10:32:04.968]  - until=1
[10:32:04.968]  - relaying element #1
[10:32:04.968] signalConditions() ...
[10:32:04.968]  - include = ‘immediateCondition’
[10:32:04.968]  - exclude = 
[10:32:04.968]  - resignal = FALSE
[10:32:04.969]  - Number of conditions: 1
[10:32:04.969] signalConditions() ... done
[10:32:04.969] - relayed: [n=2] TRUE, FALSE
[10:32:04.969] - queued futures: [n=2] TRUE, FALSE
[10:32:04.970] signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:32:04.971]  length: 1 (resolved future 1)
[10:32:04.971] resolved() for ‘SequentialFuture’ ...
[10:32:04.971] - state: ‘finished’
[10:32:04.971] - run: TRUE
[10:32:04.971] - result: ‘FutureResult’
[10:32:04.971] resolved() for ‘SequentialFuture’ ... done
[10:32:04.971] Future #2
[10:32:04.971] signalConditions() ...
[10:32:04.972]  - include = ‘immediateCondition’
[10:32:04.972]  - exclude = 
[10:32:04.972]  - resignal = FALSE
[10:32:04.972]  - Number of conditions: 1
[10:32:04.972] signalConditions() ... done
[10:32:04.972] signalConditionsASAP(SequentialFuture, pos=2) ...
[10:32:04.972] - nx: 2
[10:32:04.972] - relay: TRUE
[10:32:04.972] - stdout: TRUE
[10:32:04.972] - signal: FALSE
[10:32:04.972] - resignal: FALSE
[10:32:04.973] - force: TRUE
[10:32:04.973] - relayed: [n=2] TRUE, FALSE
[10:32:04.973] - queued futures: [n=2] TRUE, FALSE
[10:32:04.973]  - until=2
[10:32:04.973]  - relaying element #2
[10:32:04.973] signalConditions() ...
[10:32:04.973]  - include = ‘immediateCondition’
[10:32:04.973]  - exclude = 
[10:32:04.973]  - resignal = FALSE
[10:32:04.973]  - Number of conditions: 1
[10:32:04.973] signalConditions() ... done
[10:32:04.974] - relayed: [n=2] TRUE, TRUE
[10:32:04.974] - queued futures: [n=2] TRUE, TRUE
[10:32:04.974] signalConditionsASAP(SequentialFuture, pos=2) ... done
[10:32:04.974]  length: 0 (resolved future 2)
[10:32:04.974] Relaying remaining futures
[10:32:04.974] signalConditionsASAP(NULL, pos=0) ...
[10:32:04.974] - nx: 2
[10:32:04.974] - relay: TRUE
[10:32:04.974] - stdout: TRUE
[10:32:04.974] - signal: FALSE
[10:32:04.974] - resignal: FALSE
[10:32:04.975] - force: TRUE
[10:32:04.975] - relayed: [n=2] TRUE, TRUE
[10:32:04.975] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:32:04.975] - relayed: [n=2] TRUE, TRUE
[10:32:04.975] - queued futures: [n=2] TRUE, TRUE
[10:32:04.975] signalConditionsASAP(NULL, pos=0) ... done
[10:32:04.975] resolve() on list ... DONE
[10:32:04.975] signalConditions() ...
[10:32:04.975]  - include = ‘immediateCondition’
[10:32:04.975]  - exclude = 
[10:32:04.975]  - resignal = FALSE
[10:32:04.976]  - Number of conditions: 1
[10:32:04.976] signalConditions() ... done
[10:32:04.976] signalConditions() ...
[10:32:04.976]  - include = ‘immediateCondition’
[10:32:04.976]  - exclude = 
[10:32:04.976]  - resignal = FALSE
[10:32:04.976]  - Number of conditions: 1
[10:32:04.976] signalConditions() ... done
> calls <- backtrace(ll[[2]])
[10:32:04.977] resolved() for ‘SequentialFuture’ ...
[10:32:04.977] - state: ‘finished’
[10:32:04.977] - run: TRUE
[10:32:04.977] - result: ‘FutureResult’
[10:32:04.977] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
future({
    42L
    stop("Woops")
})

[[2]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[3]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[4]]
stop("Woops")

[[5]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> message("*** backtrace( ) - subsetting ... DONE")
*** backtrace( ) - subsetting ... DONE
> 
> 
> message("*** backtrace( ) - exceptions ...")
*** backtrace( ) - exceptions ...
> 
> message("- No condition ...")
- No condition ...
> f <- future(42L)
[10:32:04.978] getGlobalsAndPackages() ...
[10:32:04.978] Searching for globals...
[10:32:04.978] 
[10:32:04.978] Searching for globals ... DONE
[10:32:04.978] - globals: [0] <none>
[10:32:04.978] getGlobalsAndPackages() ... DONE
[10:32:04.978] run() for ‘Future’ ...
[10:32:04.979] - state: ‘created’
[10:32:04.979] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:04.979] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:04.979] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:04.979]   - Field: ‘label’
[10:32:04.979]   - Field: ‘local’
[10:32:04.979]   - Field: ‘owner’
[10:32:04.979]   - Field: ‘envir’
[10:32:04.979]   - Field: ‘packages’
[10:32:04.980]   - Field: ‘gc’
[10:32:04.980]   - Field: ‘conditions’
[10:32:04.980]   - Field: ‘expr’
[10:32:04.980]   - Field: ‘uuid’
[10:32:04.980]   - Field: ‘seed’
[10:32:04.980]   - Field: ‘version’
[10:32:04.980]   - Field: ‘result’
[10:32:04.980]   - Field: ‘asynchronous’
[10:32:04.980]   - Field: ‘calls’
[10:32:04.980]   - Field: ‘globals’
[10:32:04.980]   - Field: ‘stdout’
[10:32:04.981]   - Field: ‘earlySignal’
[10:32:04.981]   - Field: ‘lazy’
[10:32:04.981]   - Field: ‘state’
[10:32:04.981] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:04.981] - Launch lazy future ...
[10:32:04.981] Packages needed by the future expression (n = 0): <none>
[10:32:04.981] Packages needed by future strategies (n = 0): <none>
[10:32:04.982] {
[10:32:04.982]     {
[10:32:04.982]         {
[10:32:04.982]             ...future.startTime <- base::Sys.time()
[10:32:04.982]             {
[10:32:04.982]                 {
[10:32:04.982]                   {
[10:32:04.982]                     base::local({
[10:32:04.982]                       has_future <- base::requireNamespace("future", 
[10:32:04.982]                         quietly = TRUE)
[10:32:04.982]                       if (has_future) {
[10:32:04.982]                         ns <- base::getNamespace("future")
[10:32:04.982]                         version <- ns[[".package"]][["version"]]
[10:32:04.982]                         if (is.null(version)) 
[10:32:04.982]                           version <- utils::packageVersion("future")
[10:32:04.982]                       }
[10:32:04.982]                       else {
[10:32:04.982]                         version <- NULL
[10:32:04.982]                       }
[10:32:04.982]                       if (!has_future || version < "1.8.0") {
[10:32:04.982]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:04.982]                           "", base::R.version$version.string), 
[10:32:04.982]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:04.982]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:04.982]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:04.982]                             "release", "version")], collapse = " "), 
[10:32:04.982]                           hostname = base::Sys.info()[["nodename"]])
[10:32:04.982]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:04.982]                           info)
[10:32:04.982]                         info <- base::paste(info, collapse = "; ")
[10:32:04.982]                         if (!has_future) {
[10:32:04.982]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:04.982]                             info)
[10:32:04.982]                         }
[10:32:04.982]                         else {
[10:32:04.982]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:04.982]                             info, version)
[10:32:04.982]                         }
[10:32:04.982]                         base::stop(msg)
[10:32:04.982]                       }
[10:32:04.982]                     })
[10:32:04.982]                   }
[10:32:04.982]                   ...future.strategy.old <- future::plan("list")
[10:32:04.982]                   options(future.plan = NULL)
[10:32:04.982]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:04.982]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:04.982]                 }
[10:32:04.982]                 ...future.workdir <- getwd()
[10:32:04.982]             }
[10:32:04.982]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:04.982]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:04.982]         }
[10:32:04.982]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:04.982]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:04.982]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:04.982]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:04.982]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:04.982]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:04.982]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:04.982]             base::names(...future.oldOptions))
[10:32:04.982]     }
[10:32:04.982]     if (FALSE) {
[10:32:04.982]     }
[10:32:04.982]     else {
[10:32:04.982]         if (TRUE) {
[10:32:04.982]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:04.982]                 open = "w")
[10:32:04.982]         }
[10:32:04.982]         else {
[10:32:04.982]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:04.982]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:04.982]         }
[10:32:04.982]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:04.982]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:04.982]             base::sink(type = "output", split = FALSE)
[10:32:04.982]             base::close(...future.stdout)
[10:32:04.982]         }, add = TRUE)
[10:32:04.982]     }
[10:32:04.982]     ...future.frame <- base::sys.nframe()
[10:32:04.982]     ...future.conditions <- base::list()
[10:32:04.982]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:04.982]     if (FALSE) {
[10:32:04.982]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:04.982]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:04.982]     }
[10:32:04.982]     ...future.result <- base::tryCatch({
[10:32:04.982]         base::withCallingHandlers({
[10:32:04.982]             ...future.value <- base::withVisible(base::local(42L))
[10:32:04.982]             future::FutureResult(value = ...future.value$value, 
[10:32:04.982]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:04.982]                   ...future.rng), globalenv = if (FALSE) 
[10:32:04.982]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:04.982]                     ...future.globalenv.names))
[10:32:04.982]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:04.982]         }, condition = base::local({
[10:32:04.982]             c <- base::c
[10:32:04.982]             inherits <- base::inherits
[10:32:04.982]             invokeRestart <- base::invokeRestart
[10:32:04.982]             length <- base::length
[10:32:04.982]             list <- base::list
[10:32:04.982]             seq.int <- base::seq.int
[10:32:04.982]             signalCondition <- base::signalCondition
[10:32:04.982]             sys.calls <- base::sys.calls
[10:32:04.982]             `[[` <- base::`[[`
[10:32:04.982]             `+` <- base::`+`
[10:32:04.982]             `<<-` <- base::`<<-`
[10:32:04.982]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:04.982]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:04.982]                   3L)]
[10:32:04.982]             }
[10:32:04.982]             function(cond) {
[10:32:04.982]                 is_error <- inherits(cond, "error")
[10:32:04.982]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:04.982]                   NULL)
[10:32:04.982]                 if (is_error) {
[10:32:04.982]                   sessionInformation <- function() {
[10:32:04.982]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:04.982]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:04.982]                       search = base::search(), system = base::Sys.info())
[10:32:04.982]                   }
[10:32:04.982]                   ...future.conditions[[length(...future.conditions) + 
[10:32:04.982]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:04.982]                     cond$call), session = sessionInformation(), 
[10:32:04.982]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:04.982]                   signalCondition(cond)
[10:32:04.982]                 }
[10:32:04.982]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:04.982]                 "immediateCondition"))) {
[10:32:04.982]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:04.982]                   ...future.conditions[[length(...future.conditions) + 
[10:32:04.982]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:04.982]                   if (TRUE && !signal) {
[10:32:04.982]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:04.982]                     {
[10:32:04.982]                       inherits <- base::inherits
[10:32:04.982]                       invokeRestart <- base::invokeRestart
[10:32:04.982]                       is.null <- base::is.null
[10:32:04.982]                       muffled <- FALSE
[10:32:04.982]                       if (inherits(cond, "message")) {
[10:32:04.982]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:04.982]                         if (muffled) 
[10:32:04.982]                           invokeRestart("muffleMessage")
[10:32:04.982]                       }
[10:32:04.982]                       else if (inherits(cond, "warning")) {
[10:32:04.982]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:04.982]                         if (muffled) 
[10:32:04.982]                           invokeRestart("muffleWarning")
[10:32:04.982]                       }
[10:32:04.982]                       else if (inherits(cond, "condition")) {
[10:32:04.982]                         if (!is.null(pattern)) {
[10:32:04.982]                           computeRestarts <- base::computeRestarts
[10:32:04.982]                           grepl <- base::grepl
[10:32:04.982]                           restarts <- computeRestarts(cond)
[10:32:04.982]                           for (restart in restarts) {
[10:32:04.982]                             name <- restart$name
[10:32:04.982]                             if (is.null(name)) 
[10:32:04.982]                               next
[10:32:04.982]                             if (!grepl(pattern, name)) 
[10:32:04.982]                               next
[10:32:04.982]                             invokeRestart(restart)
[10:32:04.982]                             muffled <- TRUE
[10:32:04.982]                             break
[10:32:04.982]                           }
[10:32:04.982]                         }
[10:32:04.982]                       }
[10:32:04.982]                       invisible(muffled)
[10:32:04.982]                     }
[10:32:04.982]                     muffleCondition(cond, pattern = "^muffle")
[10:32:04.982]                   }
[10:32:04.982]                 }
[10:32:04.982]                 else {
[10:32:04.982]                   if (TRUE) {
[10:32:04.982]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:04.982]                     {
[10:32:04.982]                       inherits <- base::inherits
[10:32:04.982]                       invokeRestart <- base::invokeRestart
[10:32:04.982]                       is.null <- base::is.null
[10:32:04.982]                       muffled <- FALSE
[10:32:04.982]                       if (inherits(cond, "message")) {
[10:32:04.982]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:04.982]                         if (muffled) 
[10:32:04.982]                           invokeRestart("muffleMessage")
[10:32:04.982]                       }
[10:32:04.982]                       else if (inherits(cond, "warning")) {
[10:32:04.982]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:04.982]                         if (muffled) 
[10:32:04.982]                           invokeRestart("muffleWarning")
[10:32:04.982]                       }
[10:32:04.982]                       else if (inherits(cond, "condition")) {
[10:32:04.982]                         if (!is.null(pattern)) {
[10:32:04.982]                           computeRestarts <- base::computeRestarts
[10:32:04.982]                           grepl <- base::grepl
[10:32:04.982]                           restarts <- computeRestarts(cond)
[10:32:04.982]                           for (restart in restarts) {
[10:32:04.982]                             name <- restart$name
[10:32:04.982]                             if (is.null(name)) 
[10:32:04.982]                               next
[10:32:04.982]                             if (!grepl(pattern, name)) 
[10:32:04.982]                               next
[10:32:04.982]                             invokeRestart(restart)
[10:32:04.982]                             muffled <- TRUE
[10:32:04.982]                             break
[10:32:04.982]                           }
[10:32:04.982]                         }
[10:32:04.982]                       }
[10:32:04.982]                       invisible(muffled)
[10:32:04.982]                     }
[10:32:04.982]                     muffleCondition(cond, pattern = "^muffle")
[10:32:04.982]                   }
[10:32:04.982]                 }
[10:32:04.982]             }
[10:32:04.982]         }))
[10:32:04.982]     }, error = function(ex) {
[10:32:04.982]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:04.982]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:04.982]                 ...future.rng), started = ...future.startTime, 
[10:32:04.982]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:04.982]             version = "1.8"), class = "FutureResult")
[10:32:04.982]     }, finally = {
[10:32:04.982]         if (!identical(...future.workdir, getwd())) 
[10:32:04.982]             setwd(...future.workdir)
[10:32:04.982]         {
[10:32:04.982]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:04.982]                 ...future.oldOptions$nwarnings <- NULL
[10:32:04.982]             }
[10:32:04.982]             base::options(...future.oldOptions)
[10:32:04.982]             if (.Platform$OS.type == "windows") {
[10:32:04.982]                 old_names <- names(...future.oldEnvVars)
[10:32:04.982]                 envs <- base::Sys.getenv()
[10:32:04.982]                 names <- names(envs)
[10:32:04.982]                 common <- intersect(names, old_names)
[10:32:04.982]                 added <- setdiff(names, old_names)
[10:32:04.982]                 removed <- setdiff(old_names, names)
[10:32:04.982]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:04.982]                   envs[common]]
[10:32:04.982]                 NAMES <- toupper(changed)
[10:32:04.982]                 args <- list()
[10:32:04.982]                 for (kk in seq_along(NAMES)) {
[10:32:04.982]                   name <- changed[[kk]]
[10:32:04.982]                   NAME <- NAMES[[kk]]
[10:32:04.982]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:04.982]                     next
[10:32:04.982]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:04.982]                 }
[10:32:04.982]                 NAMES <- toupper(added)
[10:32:04.982]                 for (kk in seq_along(NAMES)) {
[10:32:04.982]                   name <- added[[kk]]
[10:32:04.982]                   NAME <- NAMES[[kk]]
[10:32:04.982]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:04.982]                     next
[10:32:04.982]                   args[[name]] <- ""
[10:32:04.982]                 }
[10:32:04.982]                 NAMES <- toupper(removed)
[10:32:04.982]                 for (kk in seq_along(NAMES)) {
[10:32:04.982]                   name <- removed[[kk]]
[10:32:04.982]                   NAME <- NAMES[[kk]]
[10:32:04.982]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:04.982]                     next
[10:32:04.982]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:04.982]                 }
[10:32:04.982]                 if (length(args) > 0) 
[10:32:04.982]                   base::do.call(base::Sys.setenv, args = args)
[10:32:04.982]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:04.982]             }
[10:32:04.982]             else {
[10:32:04.982]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:04.982]             }
[10:32:04.982]             {
[10:32:04.982]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:04.982]                   0L) {
[10:32:04.982]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:04.982]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:04.982]                   base::options(opts)
[10:32:04.982]                 }
[10:32:04.982]                 {
[10:32:04.982]                   {
[10:32:04.982]                     NULL
[10:32:04.982]                     RNGkind("Mersenne-Twister")
[10:32:04.982]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:04.982]                       inherits = FALSE)
[10:32:04.982]                   }
[10:32:04.982]                   options(future.plan = NULL)
[10:32:04.982]                   if (is.na(NA_character_)) 
[10:32:04.982]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:04.982]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:04.982]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:04.982]                     .init = FALSE)
[10:32:04.982]                 }
[10:32:04.982]             }
[10:32:04.982]         }
[10:32:04.982]     })
[10:32:04.982]     if (TRUE) {
[10:32:04.982]         base::sink(type = "output", split = FALSE)
[10:32:04.982]         if (TRUE) {
[10:32:04.982]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:04.982]         }
[10:32:04.982]         else {
[10:32:04.982]             ...future.result["stdout"] <- base::list(NULL)
[10:32:04.982]         }
[10:32:04.982]         base::close(...future.stdout)
[10:32:04.982]         ...future.stdout <- NULL
[10:32:04.982]     }
[10:32:04.982]     ...future.result$conditions <- ...future.conditions
[10:32:04.982]     ...future.result$finished <- base::Sys.time()
[10:32:04.982]     ...future.result
[10:32:04.982] }
[10:32:04.983] plan(): Setting new future strategy stack:
[10:32:04.984] List of future strategies:
[10:32:04.984] 1. sequential:
[10:32:04.984]    - args: function (..., envir = parent.frame())
[10:32:04.984]    - tweaked: FALSE
[10:32:04.984]    - call: NULL
[10:32:04.984] plan(): nbrOfWorkers() = 1
[10:32:04.985] plan(): Setting new future strategy stack:
[10:32:04.985] List of future strategies:
[10:32:04.985] 1. sequential:
[10:32:04.985]    - args: function (..., envir = parent.frame())
[10:32:04.985]    - tweaked: FALSE
[10:32:04.985]    - call: future::plan("sequential")
[10:32:04.985] plan(): nbrOfWorkers() = 1
[10:32:04.986] SequentialFuture started (and completed)
[10:32:04.986] - Launch lazy future ... done
[10:32:04.986] run() for ‘SequentialFuture’ ... done
> res <- tryCatch(backtrace(f), error = identity)
[10:32:04.986] resolved() for ‘SequentialFuture’ ...
[10:32:04.986] - state: ‘finished’
[10:32:04.986] - run: TRUE
[10:32:04.986] - result: ‘FutureResult’
[10:32:04.987] resolved() for ‘SequentialFuture’ ... done
> print(res)
<simpleError: No error was caught for this future: ‘f’>
> stopifnot(inherits(res, "error"))
> 
> message("- No call stack ...")
- No call stack ...
> f <- future({ 42L; stop("Woops") })
[10:32:04.987] getGlobalsAndPackages() ...
[10:32:04.987] Searching for globals...
[10:32:04.988] - globals found: [2] ‘{’, ‘stop’
[10:32:04.988] Searching for globals ... DONE
[10:32:04.988] Resolving globals: FALSE
[10:32:04.988] 
[10:32:04.989] 
[10:32:04.989] getGlobalsAndPackages() ... DONE
[10:32:04.989] run() for ‘Future’ ...
[10:32:04.989] - state: ‘created’
[10:32:04.989] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:04.989] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:04.989] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:04.990]   - Field: ‘label’
[10:32:04.990]   - Field: ‘local’
[10:32:04.990]   - Field: ‘owner’
[10:32:04.990]   - Field: ‘envir’
[10:32:04.990]   - Field: ‘packages’
[10:32:04.990]   - Field: ‘gc’
[10:32:04.990]   - Field: ‘conditions’
[10:32:04.990]   - Field: ‘expr’
[10:32:04.990]   - Field: ‘uuid’
[10:32:04.990]   - Field: ‘seed’
[10:32:04.991]   - Field: ‘version’
[10:32:04.991]   - Field: ‘result’
[10:32:04.991]   - Field: ‘asynchronous’
[10:32:04.991]   - Field: ‘calls’
[10:32:04.991]   - Field: ‘globals’
[10:32:04.991]   - Field: ‘stdout’
[10:32:04.991]   - Field: ‘earlySignal’
[10:32:04.991]   - Field: ‘lazy’
[10:32:04.991]   - Field: ‘state’
[10:32:04.991] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:04.991] - Launch lazy future ...
[10:32:04.992] Packages needed by the future expression (n = 0): <none>
[10:32:04.992] Packages needed by future strategies (n = 0): <none>
[10:32:04.992] {
[10:32:04.992]     {
[10:32:04.992]         {
[10:32:04.992]             ...future.startTime <- base::Sys.time()
[10:32:04.992]             {
[10:32:04.992]                 {
[10:32:04.992]                   {
[10:32:04.992]                     base::local({
[10:32:04.992]                       has_future <- base::requireNamespace("future", 
[10:32:04.992]                         quietly = TRUE)
[10:32:04.992]                       if (has_future) {
[10:32:04.992]                         ns <- base::getNamespace("future")
[10:32:04.992]                         version <- ns[[".package"]][["version"]]
[10:32:04.992]                         if (is.null(version)) 
[10:32:04.992]                           version <- utils::packageVersion("future")
[10:32:04.992]                       }
[10:32:04.992]                       else {
[10:32:04.992]                         version <- NULL
[10:32:04.992]                       }
[10:32:04.992]                       if (!has_future || version < "1.8.0") {
[10:32:04.992]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:04.992]                           "", base::R.version$version.string), 
[10:32:04.992]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:04.992]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:04.992]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:04.992]                             "release", "version")], collapse = " "), 
[10:32:04.992]                           hostname = base::Sys.info()[["nodename"]])
[10:32:04.992]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:04.992]                           info)
[10:32:04.992]                         info <- base::paste(info, collapse = "; ")
[10:32:04.992]                         if (!has_future) {
[10:32:04.992]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:04.992]                             info)
[10:32:04.992]                         }
[10:32:04.992]                         else {
[10:32:04.992]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:04.992]                             info, version)
[10:32:04.992]                         }
[10:32:04.992]                         base::stop(msg)
[10:32:04.992]                       }
[10:32:04.992]                     })
[10:32:04.992]                   }
[10:32:04.992]                   ...future.strategy.old <- future::plan("list")
[10:32:04.992]                   options(future.plan = NULL)
[10:32:04.992]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:04.992]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:04.992]                 }
[10:32:04.992]                 ...future.workdir <- getwd()
[10:32:04.992]             }
[10:32:04.992]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:04.992]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:04.992]         }
[10:32:04.992]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:04.992]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:04.992]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:04.992]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:04.992]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:04.992]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:04.992]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:04.992]             base::names(...future.oldOptions))
[10:32:04.992]     }
[10:32:04.992]     if (FALSE) {
[10:32:04.992]     }
[10:32:04.992]     else {
[10:32:04.992]         if (TRUE) {
[10:32:04.992]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:04.992]                 open = "w")
[10:32:04.992]         }
[10:32:04.992]         else {
[10:32:04.992]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:04.992]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:04.992]         }
[10:32:04.992]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:04.992]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:04.992]             base::sink(type = "output", split = FALSE)
[10:32:04.992]             base::close(...future.stdout)
[10:32:04.992]         }, add = TRUE)
[10:32:04.992]     }
[10:32:04.992]     ...future.frame <- base::sys.nframe()
[10:32:04.992]     ...future.conditions <- base::list()
[10:32:04.992]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:04.992]     if (FALSE) {
[10:32:04.992]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:04.992]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:04.992]     }
[10:32:04.992]     ...future.result <- base::tryCatch({
[10:32:04.992]         base::withCallingHandlers({
[10:32:04.992]             ...future.value <- base::withVisible(base::local({
[10:32:04.992]                 42L
[10:32:04.992]                 stop("Woops")
[10:32:04.992]             }))
[10:32:04.992]             future::FutureResult(value = ...future.value$value, 
[10:32:04.992]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:04.992]                   ...future.rng), globalenv = if (FALSE) 
[10:32:04.992]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:04.992]                     ...future.globalenv.names))
[10:32:04.992]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:04.992]         }, condition = base::local({
[10:32:04.992]             c <- base::c
[10:32:04.992]             inherits <- base::inherits
[10:32:04.992]             invokeRestart <- base::invokeRestart
[10:32:04.992]             length <- base::length
[10:32:04.992]             list <- base::list
[10:32:04.992]             seq.int <- base::seq.int
[10:32:04.992]             signalCondition <- base::signalCondition
[10:32:04.992]             sys.calls <- base::sys.calls
[10:32:04.992]             `[[` <- base::`[[`
[10:32:04.992]             `+` <- base::`+`
[10:32:04.992]             `<<-` <- base::`<<-`
[10:32:04.992]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:04.992]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:04.992]                   3L)]
[10:32:04.992]             }
[10:32:04.992]             function(cond) {
[10:32:04.992]                 is_error <- inherits(cond, "error")
[10:32:04.992]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:04.992]                   NULL)
[10:32:04.992]                 if (is_error) {
[10:32:04.992]                   sessionInformation <- function() {
[10:32:04.992]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:04.992]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:04.992]                       search = base::search(), system = base::Sys.info())
[10:32:04.992]                   }
[10:32:04.992]                   ...future.conditions[[length(...future.conditions) + 
[10:32:04.992]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:04.992]                     cond$call), session = sessionInformation(), 
[10:32:04.992]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:04.992]                   signalCondition(cond)
[10:32:04.992]                 }
[10:32:04.992]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:04.992]                 "immediateCondition"))) {
[10:32:04.992]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:04.992]                   ...future.conditions[[length(...future.conditions) + 
[10:32:04.992]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:04.992]                   if (TRUE && !signal) {
[10:32:04.992]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:04.992]                     {
[10:32:04.992]                       inherits <- base::inherits
[10:32:04.992]                       invokeRestart <- base::invokeRestart
[10:32:04.992]                       is.null <- base::is.null
[10:32:04.992]                       muffled <- FALSE
[10:32:04.992]                       if (inherits(cond, "message")) {
[10:32:04.992]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:04.992]                         if (muffled) 
[10:32:04.992]                           invokeRestart("muffleMessage")
[10:32:04.992]                       }
[10:32:04.992]                       else if (inherits(cond, "warning")) {
[10:32:04.992]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:04.992]                         if (muffled) 
[10:32:04.992]                           invokeRestart("muffleWarning")
[10:32:04.992]                       }
[10:32:04.992]                       else if (inherits(cond, "condition")) {
[10:32:04.992]                         if (!is.null(pattern)) {
[10:32:04.992]                           computeRestarts <- base::computeRestarts
[10:32:04.992]                           grepl <- base::grepl
[10:32:04.992]                           restarts <- computeRestarts(cond)
[10:32:04.992]                           for (restart in restarts) {
[10:32:04.992]                             name <- restart$name
[10:32:04.992]                             if (is.null(name)) 
[10:32:04.992]                               next
[10:32:04.992]                             if (!grepl(pattern, name)) 
[10:32:04.992]                               next
[10:32:04.992]                             invokeRestart(restart)
[10:32:04.992]                             muffled <- TRUE
[10:32:04.992]                             break
[10:32:04.992]                           }
[10:32:04.992]                         }
[10:32:04.992]                       }
[10:32:04.992]                       invisible(muffled)
[10:32:04.992]                     }
[10:32:04.992]                     muffleCondition(cond, pattern = "^muffle")
[10:32:04.992]                   }
[10:32:04.992]                 }
[10:32:04.992]                 else {
[10:32:04.992]                   if (TRUE) {
[10:32:04.992]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:04.992]                     {
[10:32:04.992]                       inherits <- base::inherits
[10:32:04.992]                       invokeRestart <- base::invokeRestart
[10:32:04.992]                       is.null <- base::is.null
[10:32:04.992]                       muffled <- FALSE
[10:32:04.992]                       if (inherits(cond, "message")) {
[10:32:04.992]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:04.992]                         if (muffled) 
[10:32:04.992]                           invokeRestart("muffleMessage")
[10:32:04.992]                       }
[10:32:04.992]                       else if (inherits(cond, "warning")) {
[10:32:04.992]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:04.992]                         if (muffled) 
[10:32:04.992]                           invokeRestart("muffleWarning")
[10:32:04.992]                       }
[10:32:04.992]                       else if (inherits(cond, "condition")) {
[10:32:04.992]                         if (!is.null(pattern)) {
[10:32:04.992]                           computeRestarts <- base::computeRestarts
[10:32:04.992]                           grepl <- base::grepl
[10:32:04.992]                           restarts <- computeRestarts(cond)
[10:32:04.992]                           for (restart in restarts) {
[10:32:04.992]                             name <- restart$name
[10:32:04.992]                             if (is.null(name)) 
[10:32:04.992]                               next
[10:32:04.992]                             if (!grepl(pattern, name)) 
[10:32:04.992]                               next
[10:32:04.992]                             invokeRestart(restart)
[10:32:04.992]                             muffled <- TRUE
[10:32:04.992]                             break
[10:32:04.992]                           }
[10:32:04.992]                         }
[10:32:04.992]                       }
[10:32:04.992]                       invisible(muffled)
[10:32:04.992]                     }
[10:32:04.992]                     muffleCondition(cond, pattern = "^muffle")
[10:32:04.992]                   }
[10:32:04.992]                 }
[10:32:04.992]             }
[10:32:04.992]         }))
[10:32:04.992]     }, error = function(ex) {
[10:32:04.992]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:04.992]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:04.992]                 ...future.rng), started = ...future.startTime, 
[10:32:04.992]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:04.992]             version = "1.8"), class = "FutureResult")
[10:32:04.992]     }, finally = {
[10:32:04.992]         if (!identical(...future.workdir, getwd())) 
[10:32:04.992]             setwd(...future.workdir)
[10:32:04.992]         {
[10:32:04.992]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:04.992]                 ...future.oldOptions$nwarnings <- NULL
[10:32:04.992]             }
[10:32:04.992]             base::options(...future.oldOptions)
[10:32:04.992]             if (.Platform$OS.type == "windows") {
[10:32:04.992]                 old_names <- names(...future.oldEnvVars)
[10:32:04.992]                 envs <- base::Sys.getenv()
[10:32:04.992]                 names <- names(envs)
[10:32:04.992]                 common <- intersect(names, old_names)
[10:32:04.992]                 added <- setdiff(names, old_names)
[10:32:04.992]                 removed <- setdiff(old_names, names)
[10:32:04.992]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:04.992]                   envs[common]]
[10:32:04.992]                 NAMES <- toupper(changed)
[10:32:04.992]                 args <- list()
[10:32:04.992]                 for (kk in seq_along(NAMES)) {
[10:32:04.992]                   name <- changed[[kk]]
[10:32:04.992]                   NAME <- NAMES[[kk]]
[10:32:04.992]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:04.992]                     next
[10:32:04.992]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:04.992]                 }
[10:32:04.992]                 NAMES <- toupper(added)
[10:32:04.992]                 for (kk in seq_along(NAMES)) {
[10:32:04.992]                   name <- added[[kk]]
[10:32:04.992]                   NAME <- NAMES[[kk]]
[10:32:04.992]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:04.992]                     next
[10:32:04.992]                   args[[name]] <- ""
[10:32:04.992]                 }
[10:32:04.992]                 NAMES <- toupper(removed)
[10:32:04.992]                 for (kk in seq_along(NAMES)) {
[10:32:04.992]                   name <- removed[[kk]]
[10:32:04.992]                   NAME <- NAMES[[kk]]
[10:32:04.992]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:04.992]                     next
[10:32:04.992]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:04.992]                 }
[10:32:04.992]                 if (length(args) > 0) 
[10:32:04.992]                   base::do.call(base::Sys.setenv, args = args)
[10:32:04.992]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:04.992]             }
[10:32:04.992]             else {
[10:32:04.992]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:04.992]             }
[10:32:04.992]             {
[10:32:04.992]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:04.992]                   0L) {
[10:32:04.992]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:04.992]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:04.992]                   base::options(opts)
[10:32:04.992]                 }
[10:32:04.992]                 {
[10:32:04.992]                   {
[10:32:04.992]                     NULL
[10:32:04.992]                     RNGkind("Mersenne-Twister")
[10:32:04.992]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:04.992]                       inherits = FALSE)
[10:32:04.992]                   }
[10:32:04.992]                   options(future.plan = NULL)
[10:32:04.992]                   if (is.na(NA_character_)) 
[10:32:04.992]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:04.992]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:04.992]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:04.992]                     .init = FALSE)
[10:32:04.992]                 }
[10:32:04.992]             }
[10:32:04.992]         }
[10:32:04.992]     })
[10:32:04.992]     if (TRUE) {
[10:32:04.992]         base::sink(type = "output", split = FALSE)
[10:32:04.992]         if (TRUE) {
[10:32:04.992]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:04.992]         }
[10:32:04.992]         else {
[10:32:04.992]             ...future.result["stdout"] <- base::list(NULL)
[10:32:04.992]         }
[10:32:04.992]         base::close(...future.stdout)
[10:32:04.992]         ...future.stdout <- NULL
[10:32:04.992]     }
[10:32:04.992]     ...future.result$conditions <- ...future.conditions
[10:32:04.992]     ...future.result$finished <- base::Sys.time()
[10:32:04.992]     ...future.result
[10:32:04.992] }
[10:32:04.994] plan(): Setting new future strategy stack:
[10:32:04.994] List of future strategies:
[10:32:04.994] 1. sequential:
[10:32:04.994]    - args: function (..., envir = parent.frame())
[10:32:04.994]    - tweaked: FALSE
[10:32:04.994]    - call: NULL
[10:32:04.994] plan(): nbrOfWorkers() = 1
[10:32:04.995] plan(): Setting new future strategy stack:
[10:32:04.995] List of future strategies:
[10:32:04.995] 1. sequential:
[10:32:04.995]    - args: function (..., envir = parent.frame())
[10:32:04.995]    - tweaked: FALSE
[10:32:04.995]    - call: future::plan("sequential")
[10:32:04.996] plan(): nbrOfWorkers() = 1
[10:32:04.996] SequentialFuture started (and completed)
[10:32:04.996] signalConditions() ...
[10:32:04.996]  - include = ‘immediateCondition’
[10:32:04.996]  - exclude = 
[10:32:04.996]  - resignal = FALSE
[10:32:04.996]  - Number of conditions: 1
[10:32:04.996] signalConditions() ... done
[10:32:04.996] - Launch lazy future ... done
[10:32:04.997] run() for ‘SequentialFuture’ ... done
> v <- value(f, signal = FALSE)
[10:32:04.997] signalConditions() ...
[10:32:04.997]  - include = ‘immediateCondition’
[10:32:04.997]  - exclude = 
[10:32:04.997]  - resignal = FALSE
[10:32:04.997]  - Number of conditions: 1
[10:32:04.997] signalConditions() ... done
> 
> if (availableCores() >= 2L) {
+   message("- Non-resolved future ...")
+   plan(multisession, workers = 2L)
+   f <- future({ Sys.sleep(3); 42L; stop("Woops") })
+   res <- tryCatch(backtrace(f), error = identity)
+   print(res)
+   stopifnot(inherits(res, "error"))
+   
+   ## If we don't resolve the future, the cluster of workers will not
+   ## be able to shut down naturally. They will eventually time out,
+   ## but that will happen long after 'R CMD check' terminates. Because
+   ## of this, 'R CMD check --as-cran' will report on "detritus in the
+   ## temp directory" when running on MS Windows.  This happens because
+   ## MS Windows doesn't shut down child processes as Linux and macOS
+   ## does when the main R session terminates.
+   resolve(f)
+ }
- Non-resolved future ...
[10:32:05.004] plan(): Setting new future strategy stack:
[10:32:05.004] List of future strategies:
[10:32:05.004] 1. multisession:
[10:32:05.004]    - args: function (..., workers = 2L, envir = parent.frame())
[10:32:05.004]    - tweaked: TRUE
[10:32:05.004]    - call: plan(multisession, workers = 2L)
[10:32:05.017] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:32:05.017] multisession:
[10:32:05.017] - args: function (..., workers = 2L, envir = parent.frame())
[10:32:05.017] - tweaked: TRUE
[10:32:05.017] - call: plan(multisession, workers = 2L)
[10:32:05.018] getGlobalsAndPackages() ...
[10:32:05.018] Not searching for globals
[10:32:05.018] - globals: [0] <none>
[10:32:05.018] getGlobalsAndPackages() ... DONE
[10:32:05.019] [local output] makeClusterPSOCK() ...
[10:32:05.054] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[10:32:05.056] [local output] Base port: 11951
[10:32:05.056] [local output] Getting setup options for 2 cluster nodes ...
[10:32:05.056] [local output]  - Node 1 of 2 ...
[10:32:05.056] [local output] localMachine=TRUE => revtunnel=FALSE

[10:32:05.057] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpkiBzdh/worker.rank=1.parallelly.parent=78473.1328949e34044.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpkiBzdh/worker.rank=1.parallelly.parent=78473.1328949e34044.pid")'’
[10:32:05.245] - Possible to infer worker's PID: TRUE
[10:32:05.245] [local output] Rscript port: 11951

[10:32:05.245] [local output]  - Node 2 of 2 ...
[10:32:05.246] [local output] localMachine=TRUE => revtunnel=FALSE

[10:32:05.246] [local output] Rscript port: 11951

[10:32:05.247] [local output] Getting setup options for 2 cluster nodes ... done
[10:32:05.247] [local output]  - Parallel setup requested for some PSOCK nodes
[10:32:05.247] [local output] Setting up PSOCK nodes in parallel
[10:32:05.247] List of 36
[10:32:05.247]  $ worker          : chr "localhost"
[10:32:05.247]   ..- attr(*, "localhost")= logi TRUE
[10:32:05.247]  $ master          : chr "localhost"
[10:32:05.247]  $ port            : int 11951
[10:32:05.247]  $ connectTimeout  : num 120
[10:32:05.247]  $ timeout         : num 2592000
[10:32:05.247]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:32:05.247]  $ homogeneous     : logi TRUE
[10:32:05.247]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:32:05.247]  $ rscript_envs    : NULL
[10:32:05.247]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:32:05.247]  $ rscript_startup : NULL
[10:32:05.247]  $ rscript_sh      : chr "sh"
[10:32:05.247]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:32:05.247]  $ methods         : logi TRUE
[10:32:05.247]  $ socketOptions   : chr "no-delay"
[10:32:05.247]  $ useXDR          : logi FALSE
[10:32:05.247]  $ outfile         : chr "/dev/null"
[10:32:05.247]  $ renice          : int NA
[10:32:05.247]  $ rshcmd          : NULL
[10:32:05.247]  $ user            : chr(0) 
[10:32:05.247]  $ revtunnel       : logi FALSE
[10:32:05.247]  $ rshlogfile      : NULL
[10:32:05.247]  $ rshopts         : chr(0) 
[10:32:05.247]  $ rank            : int 1
[10:32:05.247]  $ manual          : logi FALSE
[10:32:05.247]  $ dryrun          : logi FALSE
[10:32:05.247]  $ quiet           : logi FALSE
[10:32:05.247]  $ setup_strategy  : chr "parallel"
[10:32:05.247]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:32:05.247]  $ pidfile         : chr "/tmp/RtmpkiBzdh/worker.rank=1.parallelly.parent=78473.1328949e34044.pid"
[10:32:05.247]  $ rshcmd_label    : NULL
[10:32:05.247]  $ rsh_call        : NULL
[10:32:05.247]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:32:05.247]  $ localMachine    : logi TRUE
[10:32:05.247]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:32:05.247]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:32:05.247]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:32:05.247]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:32:05.247]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:32:05.247]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:32:05.247]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:32:05.247]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:32:05.247]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:32:05.247]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:32:05.247]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:32:05.247]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:32:05.247]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:32:05.247]  $ arguments       :List of 28
[10:32:05.247]   ..$ worker          : chr "localhost"
[10:32:05.247]   ..$ master          : NULL
[10:32:05.247]   ..$ port            : int 11951
[10:32:05.247]   ..$ connectTimeout  : num 120
[10:32:05.247]   ..$ timeout         : num 2592000
[10:32:05.247]   ..$ rscript         : NULL
[10:32:05.247]   ..$ homogeneous     : NULL
[10:32:05.247]   ..$ rscript_args    : NULL
[10:32:05.247]   ..$ rscript_envs    : NULL
[10:32:05.247]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:32:05.247]   ..$ rscript_startup : NULL
[10:32:05.247]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:32:05.247]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:32:05.247]   ..$ methods         : logi TRUE
[10:32:05.247]   ..$ socketOptions   : chr "no-delay"
[10:32:05.247]   ..$ useXDR          : logi FALSE
[10:32:05.247]   ..$ outfile         : chr "/dev/null"
[10:32:05.247]   ..$ renice          : int NA
[10:32:05.247]   ..$ rshcmd          : NULL
[10:32:05.247]   ..$ user            : NULL
[10:32:05.247]   ..$ revtunnel       : logi NA
[10:32:05.247]   ..$ rshlogfile      : NULL
[10:32:05.247]   ..$ rshopts         : NULL
[10:32:05.247]   ..$ rank            : int 1
[10:32:05.247]   ..$ manual          : logi FALSE
[10:32:05.247]   ..$ dryrun          : logi FALSE
[10:32:05.247]   ..$ quiet           : logi FALSE
[10:32:05.247]   ..$ setup_strategy  : chr "parallel"
[10:32:05.247]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:32:05.266] [local output] System call to launch all workers:
[10:32:05.266] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpkiBzdh/worker.rank=1.parallelly.parent=78473.1328949e34044.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11951 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:32:05.267] [local output] Starting PSOCK main server
[10:32:05.272] [local output] Workers launched
[10:32:05.272] [local output] Waiting for workers to connect back
[10:32:05.273]  - [local output] 0 workers out of 2 ready
[10:32:05.543]  - [local output] 0 workers out of 2 ready
[10:32:05.544]  - [local output] 1 workers out of 2 ready
[10:32:05.544]  - [local output] 2 workers out of 2 ready
[10:32:05.544] [local output] Launching of workers completed
[10:32:05.544] [local output] Collecting session information from workers
[10:32:05.545] [local output]  - Worker #1 of 2
[10:32:05.546] [local output]  - Worker #2 of 2
[10:32:05.546] [local output] makeClusterPSOCK() ... done
[10:32:05.557] Packages needed by the future expression (n = 0): <none>
[10:32:05.557] Packages needed by future strategies (n = 0): <none>
[10:32:05.558] {
[10:32:05.558]     {
[10:32:05.558]         {
[10:32:05.558]             ...future.startTime <- base::Sys.time()
[10:32:05.558]             {
[10:32:05.558]                 {
[10:32:05.558]                   {
[10:32:05.558]                     {
[10:32:05.558]                       base::local({
[10:32:05.558]                         has_future <- base::requireNamespace("future", 
[10:32:05.558]                           quietly = TRUE)
[10:32:05.558]                         if (has_future) {
[10:32:05.558]                           ns <- base::getNamespace("future")
[10:32:05.558]                           version <- ns[[".package"]][["version"]]
[10:32:05.558]                           if (is.null(version)) 
[10:32:05.558]                             version <- utils::packageVersion("future")
[10:32:05.558]                         }
[10:32:05.558]                         else {
[10:32:05.558]                           version <- NULL
[10:32:05.558]                         }
[10:32:05.558]                         if (!has_future || version < "1.8.0") {
[10:32:05.558]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:05.558]                             "", base::R.version$version.string), 
[10:32:05.558]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:05.558]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:05.558]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:05.558]                               "release", "version")], collapse = " "), 
[10:32:05.558]                             hostname = base::Sys.info()[["nodename"]])
[10:32:05.558]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:05.558]                             info)
[10:32:05.558]                           info <- base::paste(info, collapse = "; ")
[10:32:05.558]                           if (!has_future) {
[10:32:05.558]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:05.558]                               info)
[10:32:05.558]                           }
[10:32:05.558]                           else {
[10:32:05.558]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:05.558]                               info, version)
[10:32:05.558]                           }
[10:32:05.558]                           base::stop(msg)
[10:32:05.558]                         }
[10:32:05.558]                       })
[10:32:05.558]                     }
[10:32:05.558]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:05.558]                     base::options(mc.cores = 1L)
[10:32:05.558]                   }
[10:32:05.558]                   ...future.strategy.old <- future::plan("list")
[10:32:05.558]                   options(future.plan = NULL)
[10:32:05.558]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:05.558]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:05.558]                 }
[10:32:05.558]                 ...future.workdir <- getwd()
[10:32:05.558]             }
[10:32:05.558]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:05.558]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:05.558]         }
[10:32:05.558]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:05.558]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:05.558]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:05.558]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:05.558]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:05.558]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:05.558]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:05.558]             base::names(...future.oldOptions))
[10:32:05.558]     }
[10:32:05.558]     if (FALSE) {
[10:32:05.558]     }
[10:32:05.558]     else {
[10:32:05.558]         if (TRUE) {
[10:32:05.558]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:05.558]                 open = "w")
[10:32:05.558]         }
[10:32:05.558]         else {
[10:32:05.558]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:05.558]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:05.558]         }
[10:32:05.558]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:05.558]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:05.558]             base::sink(type = "output", split = FALSE)
[10:32:05.558]             base::close(...future.stdout)
[10:32:05.558]         }, add = TRUE)
[10:32:05.558]     }
[10:32:05.558]     ...future.frame <- base::sys.nframe()
[10:32:05.558]     ...future.conditions <- base::list()
[10:32:05.558]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:05.558]     if (FALSE) {
[10:32:05.558]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:05.558]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:05.558]     }
[10:32:05.558]     ...future.result <- base::tryCatch({
[10:32:05.558]         base::withCallingHandlers({
[10:32:05.558]             ...future.value <- base::withVisible(base::local({
[10:32:05.558]                 ...future.makeSendCondition <- base::local({
[10:32:05.558]                   sendCondition <- NULL
[10:32:05.558]                   function(frame = 1L) {
[10:32:05.558]                     if (is.function(sendCondition)) 
[10:32:05.558]                       return(sendCondition)
[10:32:05.558]                     ns <- getNamespace("parallel")
[10:32:05.558]                     if (exists("sendData", mode = "function", 
[10:32:05.558]                       envir = ns)) {
[10:32:05.558]                       parallel_sendData <- get("sendData", mode = "function", 
[10:32:05.558]                         envir = ns)
[10:32:05.558]                       envir <- sys.frame(frame)
[10:32:05.558]                       master <- NULL
[10:32:05.558]                       while (!identical(envir, .GlobalEnv) && 
[10:32:05.558]                         !identical(envir, emptyenv())) {
[10:32:05.558]                         if (exists("master", mode = "list", envir = envir, 
[10:32:05.558]                           inherits = FALSE)) {
[10:32:05.558]                           master <- get("master", mode = "list", 
[10:32:05.558]                             envir = envir, inherits = FALSE)
[10:32:05.558]                           if (inherits(master, c("SOCKnode", 
[10:32:05.558]                             "SOCK0node"))) {
[10:32:05.558]                             sendCondition <<- function(cond) {
[10:32:05.558]                               data <- list(type = "VALUE", value = cond, 
[10:32:05.558]                                 success = TRUE)
[10:32:05.558]                               parallel_sendData(master, data)
[10:32:05.558]                             }
[10:32:05.558]                             return(sendCondition)
[10:32:05.558]                           }
[10:32:05.558]                         }
[10:32:05.558]                         frame <- frame + 1L
[10:32:05.558]                         envir <- sys.frame(frame)
[10:32:05.558]                       }
[10:32:05.558]                     }
[10:32:05.558]                     sendCondition <<- function(cond) NULL
[10:32:05.558]                   }
[10:32:05.558]                 })
[10:32:05.558]                 withCallingHandlers({
[10:32:05.558]                   NA
[10:32:05.558]                 }, immediateCondition = function(cond) {
[10:32:05.558]                   sendCondition <- ...future.makeSendCondition()
[10:32:05.558]                   sendCondition(cond)
[10:32:05.558]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:05.558]                   {
[10:32:05.558]                     inherits <- base::inherits
[10:32:05.558]                     invokeRestart <- base::invokeRestart
[10:32:05.558]                     is.null <- base::is.null
[10:32:05.558]                     muffled <- FALSE
[10:32:05.558]                     if (inherits(cond, "message")) {
[10:32:05.558]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:05.558]                       if (muffled) 
[10:32:05.558]                         invokeRestart("muffleMessage")
[10:32:05.558]                     }
[10:32:05.558]                     else if (inherits(cond, "warning")) {
[10:32:05.558]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:05.558]                       if (muffled) 
[10:32:05.558]                         invokeRestart("muffleWarning")
[10:32:05.558]                     }
[10:32:05.558]                     else if (inherits(cond, "condition")) {
[10:32:05.558]                       if (!is.null(pattern)) {
[10:32:05.558]                         computeRestarts <- base::computeRestarts
[10:32:05.558]                         grepl <- base::grepl
[10:32:05.558]                         restarts <- computeRestarts(cond)
[10:32:05.558]                         for (restart in restarts) {
[10:32:05.558]                           name <- restart$name
[10:32:05.558]                           if (is.null(name)) 
[10:32:05.558]                             next
[10:32:05.558]                           if (!grepl(pattern, name)) 
[10:32:05.558]                             next
[10:32:05.558]                           invokeRestart(restart)
[10:32:05.558]                           muffled <- TRUE
[10:32:05.558]                           break
[10:32:05.558]                         }
[10:32:05.558]                       }
[10:32:05.558]                     }
[10:32:05.558]                     invisible(muffled)
[10:32:05.558]                   }
[10:32:05.558]                   muffleCondition(cond)
[10:32:05.558]                 })
[10:32:05.558]             }))
[10:32:05.558]             future::FutureResult(value = ...future.value$value, 
[10:32:05.558]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:05.558]                   ...future.rng), globalenv = if (FALSE) 
[10:32:05.558]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:05.558]                     ...future.globalenv.names))
[10:32:05.558]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:05.558]         }, condition = base::local({
[10:32:05.558]             c <- base::c
[10:32:05.558]             inherits <- base::inherits
[10:32:05.558]             invokeRestart <- base::invokeRestart
[10:32:05.558]             length <- base::length
[10:32:05.558]             list <- base::list
[10:32:05.558]             seq.int <- base::seq.int
[10:32:05.558]             signalCondition <- base::signalCondition
[10:32:05.558]             sys.calls <- base::sys.calls
[10:32:05.558]             `[[` <- base::`[[`
[10:32:05.558]             `+` <- base::`+`
[10:32:05.558]             `<<-` <- base::`<<-`
[10:32:05.558]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:05.558]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:05.558]                   3L)]
[10:32:05.558]             }
[10:32:05.558]             function(cond) {
[10:32:05.558]                 is_error <- inherits(cond, "error")
[10:32:05.558]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:05.558]                   NULL)
[10:32:05.558]                 if (is_error) {
[10:32:05.558]                   sessionInformation <- function() {
[10:32:05.558]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:05.558]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:05.558]                       search = base::search(), system = base::Sys.info())
[10:32:05.558]                   }
[10:32:05.558]                   ...future.conditions[[length(...future.conditions) + 
[10:32:05.558]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:05.558]                     cond$call), session = sessionInformation(), 
[10:32:05.558]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:05.558]                   signalCondition(cond)
[10:32:05.558]                 }
[10:32:05.558]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:05.558]                 "immediateCondition"))) {
[10:32:05.558]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:05.558]                   ...future.conditions[[length(...future.conditions) + 
[10:32:05.558]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:05.558]                   if (TRUE && !signal) {
[10:32:05.558]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:05.558]                     {
[10:32:05.558]                       inherits <- base::inherits
[10:32:05.558]                       invokeRestart <- base::invokeRestart
[10:32:05.558]                       is.null <- base::is.null
[10:32:05.558]                       muffled <- FALSE
[10:32:05.558]                       if (inherits(cond, "message")) {
[10:32:05.558]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:05.558]                         if (muffled) 
[10:32:05.558]                           invokeRestart("muffleMessage")
[10:32:05.558]                       }
[10:32:05.558]                       else if (inherits(cond, "warning")) {
[10:32:05.558]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:05.558]                         if (muffled) 
[10:32:05.558]                           invokeRestart("muffleWarning")
[10:32:05.558]                       }
[10:32:05.558]                       else if (inherits(cond, "condition")) {
[10:32:05.558]                         if (!is.null(pattern)) {
[10:32:05.558]                           computeRestarts <- base::computeRestarts
[10:32:05.558]                           grepl <- base::grepl
[10:32:05.558]                           restarts <- computeRestarts(cond)
[10:32:05.558]                           for (restart in restarts) {
[10:32:05.558]                             name <- restart$name
[10:32:05.558]                             if (is.null(name)) 
[10:32:05.558]                               next
[10:32:05.558]                             if (!grepl(pattern, name)) 
[10:32:05.558]                               next
[10:32:05.558]                             invokeRestart(restart)
[10:32:05.558]                             muffled <- TRUE
[10:32:05.558]                             break
[10:32:05.558]                           }
[10:32:05.558]                         }
[10:32:05.558]                       }
[10:32:05.558]                       invisible(muffled)
[10:32:05.558]                     }
[10:32:05.558]                     muffleCondition(cond, pattern = "^muffle")
[10:32:05.558]                   }
[10:32:05.558]                 }
[10:32:05.558]                 else {
[10:32:05.558]                   if (TRUE) {
[10:32:05.558]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:05.558]                     {
[10:32:05.558]                       inherits <- base::inherits
[10:32:05.558]                       invokeRestart <- base::invokeRestart
[10:32:05.558]                       is.null <- base::is.null
[10:32:05.558]                       muffled <- FALSE
[10:32:05.558]                       if (inherits(cond, "message")) {
[10:32:05.558]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:05.558]                         if (muffled) 
[10:32:05.558]                           invokeRestart("muffleMessage")
[10:32:05.558]                       }
[10:32:05.558]                       else if (inherits(cond, "warning")) {
[10:32:05.558]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:05.558]                         if (muffled) 
[10:32:05.558]                           invokeRestart("muffleWarning")
[10:32:05.558]                       }
[10:32:05.558]                       else if (inherits(cond, "condition")) {
[10:32:05.558]                         if (!is.null(pattern)) {
[10:32:05.558]                           computeRestarts <- base::computeRestarts
[10:32:05.558]                           grepl <- base::grepl
[10:32:05.558]                           restarts <- computeRestarts(cond)
[10:32:05.558]                           for (restart in restarts) {
[10:32:05.558]                             name <- restart$name
[10:32:05.558]                             if (is.null(name)) 
[10:32:05.558]                               next
[10:32:05.558]                             if (!grepl(pattern, name)) 
[10:32:05.558]                               next
[10:32:05.558]                             invokeRestart(restart)
[10:32:05.558]                             muffled <- TRUE
[10:32:05.558]                             break
[10:32:05.558]                           }
[10:32:05.558]                         }
[10:32:05.558]                       }
[10:32:05.558]                       invisible(muffled)
[10:32:05.558]                     }
[10:32:05.558]                     muffleCondition(cond, pattern = "^muffle")
[10:32:05.558]                   }
[10:32:05.558]                 }
[10:32:05.558]             }
[10:32:05.558]         }))
[10:32:05.558]     }, error = function(ex) {
[10:32:05.558]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:05.558]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:05.558]                 ...future.rng), started = ...future.startTime, 
[10:32:05.558]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:05.558]             version = "1.8"), class = "FutureResult")
[10:32:05.558]     }, finally = {
[10:32:05.558]         if (!identical(...future.workdir, getwd())) 
[10:32:05.558]             setwd(...future.workdir)
[10:32:05.558]         {
[10:32:05.558]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:05.558]                 ...future.oldOptions$nwarnings <- NULL
[10:32:05.558]             }
[10:32:05.558]             base::options(...future.oldOptions)
[10:32:05.558]             if (.Platform$OS.type == "windows") {
[10:32:05.558]                 old_names <- names(...future.oldEnvVars)
[10:32:05.558]                 envs <- base::Sys.getenv()
[10:32:05.558]                 names <- names(envs)
[10:32:05.558]                 common <- intersect(names, old_names)
[10:32:05.558]                 added <- setdiff(names, old_names)
[10:32:05.558]                 removed <- setdiff(old_names, names)
[10:32:05.558]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:05.558]                   envs[common]]
[10:32:05.558]                 NAMES <- toupper(changed)
[10:32:05.558]                 args <- list()
[10:32:05.558]                 for (kk in seq_along(NAMES)) {
[10:32:05.558]                   name <- changed[[kk]]
[10:32:05.558]                   NAME <- NAMES[[kk]]
[10:32:05.558]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:05.558]                     next
[10:32:05.558]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:05.558]                 }
[10:32:05.558]                 NAMES <- toupper(added)
[10:32:05.558]                 for (kk in seq_along(NAMES)) {
[10:32:05.558]                   name <- added[[kk]]
[10:32:05.558]                   NAME <- NAMES[[kk]]
[10:32:05.558]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:05.558]                     next
[10:32:05.558]                   args[[name]] <- ""
[10:32:05.558]                 }
[10:32:05.558]                 NAMES <- toupper(removed)
[10:32:05.558]                 for (kk in seq_along(NAMES)) {
[10:32:05.558]                   name <- removed[[kk]]
[10:32:05.558]                   NAME <- NAMES[[kk]]
[10:32:05.558]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:05.558]                     next
[10:32:05.558]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:05.558]                 }
[10:32:05.558]                 if (length(args) > 0) 
[10:32:05.558]                   base::do.call(base::Sys.setenv, args = args)
[10:32:05.558]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:05.558]             }
[10:32:05.558]             else {
[10:32:05.558]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:05.558]             }
[10:32:05.558]             {
[10:32:05.558]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:05.558]                   0L) {
[10:32:05.558]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:05.558]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:05.558]                   base::options(opts)
[10:32:05.558]                 }
[10:32:05.558]                 {
[10:32:05.558]                   {
[10:32:05.558]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:05.558]                     NULL
[10:32:05.558]                   }
[10:32:05.558]                   options(future.plan = NULL)
[10:32:05.558]                   if (is.na(NA_character_)) 
[10:32:05.558]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:05.558]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:05.558]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:05.558]                     .init = FALSE)
[10:32:05.558]                 }
[10:32:05.558]             }
[10:32:05.558]         }
[10:32:05.558]     })
[10:32:05.558]     if (TRUE) {
[10:32:05.558]         base::sink(type = "output", split = FALSE)
[10:32:05.558]         if (TRUE) {
[10:32:05.558]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:05.558]         }
[10:32:05.558]         else {
[10:32:05.558]             ...future.result["stdout"] <- base::list(NULL)
[10:32:05.558]         }
[10:32:05.558]         base::close(...future.stdout)
[10:32:05.558]         ...future.stdout <- NULL
[10:32:05.558]     }
[10:32:05.558]     ...future.result$conditions <- ...future.conditions
[10:32:05.558]     ...future.result$finished <- base::Sys.time()
[10:32:05.558]     ...future.result
[10:32:05.558] }
[10:32:05.613] MultisessionFuture started
[10:32:05.613] result() for ClusterFuture ...
[10:32:05.614] receiveMessageFromWorker() for ClusterFuture ...
[10:32:05.614] - Validating connection of MultisessionFuture
[10:32:05.647] - received message: FutureResult
[10:32:05.647] - Received FutureResult
[10:32:05.650] - Erased future from FutureRegistry
[10:32:05.650] result() for ClusterFuture ...
[10:32:05.651] - result already collected: FutureResult
[10:32:05.651] result() for ClusterFuture ... done
[10:32:05.651] receiveMessageFromWorker() for ClusterFuture ... done
[10:32:05.651] result() for ClusterFuture ... done
[10:32:05.651] result() for ClusterFuture ...
[10:32:05.651] - result already collected: FutureResult
[10:32:05.651] result() for ClusterFuture ... done
[10:32:05.651] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:32:05.652] plan(): nbrOfWorkers() = 2
[10:32:05.652] getGlobalsAndPackages() ...
[10:32:05.652] Searching for globals...
[10:32:05.654] - globals found: [3] ‘{’, ‘Sys.sleep’, ‘stop’
[10:32:05.654] Searching for globals ... DONE
[10:32:05.654] Resolving globals: FALSE
[10:32:05.654] 
[10:32:05.654] 
[10:32:05.655] getGlobalsAndPackages() ... DONE
[10:32:05.655] run() for ‘Future’ ...
[10:32:05.655] - state: ‘created’
[10:32:05.655] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:32:05.666] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:05.666] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:32:05.667]   - Field: ‘node’
[10:32:05.667]   - Field: ‘label’
[10:32:05.667]   - Field: ‘local’
[10:32:05.667]   - Field: ‘owner’
[10:32:05.667]   - Field: ‘envir’
[10:32:05.667]   - Field: ‘workers’
[10:32:05.667]   - Field: ‘packages’
[10:32:05.667]   - Field: ‘gc’
[10:32:05.667]   - Field: ‘conditions’
[10:32:05.667]   - Field: ‘persistent’
[10:32:05.668]   - Field: ‘expr’
[10:32:05.668]   - Field: ‘uuid’
[10:32:05.668]   - Field: ‘seed’
[10:32:05.668]   - Field: ‘version’
[10:32:05.668]   - Field: ‘result’
[10:32:05.668]   - Field: ‘asynchronous’
[10:32:05.668]   - Field: ‘calls’
[10:32:05.668]   - Field: ‘globals’
[10:32:05.668]   - Field: ‘stdout’
[10:32:05.669]   - Field: ‘earlySignal’
[10:32:05.669]   - Field: ‘lazy’
[10:32:05.669]   - Field: ‘state’
[10:32:05.669] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:32:05.669] - Launch lazy future ...
[10:32:05.669] Packages needed by the future expression (n = 0): <none>
[10:32:05.670] Packages needed by future strategies (n = 0): <none>
[10:32:05.670] {
[10:32:05.670]     {
[10:32:05.670]         {
[10:32:05.670]             ...future.startTime <- base::Sys.time()
[10:32:05.670]             {
[10:32:05.670]                 {
[10:32:05.670]                   {
[10:32:05.670]                     {
[10:32:05.670]                       base::local({
[10:32:05.670]                         has_future <- base::requireNamespace("future", 
[10:32:05.670]                           quietly = TRUE)
[10:32:05.670]                         if (has_future) {
[10:32:05.670]                           ns <- base::getNamespace("future")
[10:32:05.670]                           version <- ns[[".package"]][["version"]]
[10:32:05.670]                           if (is.null(version)) 
[10:32:05.670]                             version <- utils::packageVersion("future")
[10:32:05.670]                         }
[10:32:05.670]                         else {
[10:32:05.670]                           version <- NULL
[10:32:05.670]                         }
[10:32:05.670]                         if (!has_future || version < "1.8.0") {
[10:32:05.670]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:05.670]                             "", base::R.version$version.string), 
[10:32:05.670]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:05.670]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:05.670]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:05.670]                               "release", "version")], collapse = " "), 
[10:32:05.670]                             hostname = base::Sys.info()[["nodename"]])
[10:32:05.670]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:05.670]                             info)
[10:32:05.670]                           info <- base::paste(info, collapse = "; ")
[10:32:05.670]                           if (!has_future) {
[10:32:05.670]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:05.670]                               info)
[10:32:05.670]                           }
[10:32:05.670]                           else {
[10:32:05.670]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:05.670]                               info, version)
[10:32:05.670]                           }
[10:32:05.670]                           base::stop(msg)
[10:32:05.670]                         }
[10:32:05.670]                       })
[10:32:05.670]                     }
[10:32:05.670]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:05.670]                     base::options(mc.cores = 1L)
[10:32:05.670]                   }
[10:32:05.670]                   ...future.strategy.old <- future::plan("list")
[10:32:05.670]                   options(future.plan = NULL)
[10:32:05.670]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:05.670]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:05.670]                 }
[10:32:05.670]                 ...future.workdir <- getwd()
[10:32:05.670]             }
[10:32:05.670]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:05.670]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:05.670]         }
[10:32:05.670]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:05.670]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:05.670]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:05.670]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:05.670]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:05.670]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:05.670]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:05.670]             base::names(...future.oldOptions))
[10:32:05.670]     }
[10:32:05.670]     if (FALSE) {
[10:32:05.670]     }
[10:32:05.670]     else {
[10:32:05.670]         if (TRUE) {
[10:32:05.670]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:05.670]                 open = "w")
[10:32:05.670]         }
[10:32:05.670]         else {
[10:32:05.670]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:05.670]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:05.670]         }
[10:32:05.670]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:05.670]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:05.670]             base::sink(type = "output", split = FALSE)
[10:32:05.670]             base::close(...future.stdout)
[10:32:05.670]         }, add = TRUE)
[10:32:05.670]     }
[10:32:05.670]     ...future.frame <- base::sys.nframe()
[10:32:05.670]     ...future.conditions <- base::list()
[10:32:05.670]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:05.670]     if (FALSE) {
[10:32:05.670]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:05.670]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:05.670]     }
[10:32:05.670]     ...future.result <- base::tryCatch({
[10:32:05.670]         base::withCallingHandlers({
[10:32:05.670]             ...future.value <- base::withVisible(base::local({
[10:32:05.670]                 ...future.makeSendCondition <- base::local({
[10:32:05.670]                   sendCondition <- NULL
[10:32:05.670]                   function(frame = 1L) {
[10:32:05.670]                     if (is.function(sendCondition)) 
[10:32:05.670]                       return(sendCondition)
[10:32:05.670]                     ns <- getNamespace("parallel")
[10:32:05.670]                     if (exists("sendData", mode = "function", 
[10:32:05.670]                       envir = ns)) {
[10:32:05.670]                       parallel_sendData <- get("sendData", mode = "function", 
[10:32:05.670]                         envir = ns)
[10:32:05.670]                       envir <- sys.frame(frame)
[10:32:05.670]                       master <- NULL
[10:32:05.670]                       while (!identical(envir, .GlobalEnv) && 
[10:32:05.670]                         !identical(envir, emptyenv())) {
[10:32:05.670]                         if (exists("master", mode = "list", envir = envir, 
[10:32:05.670]                           inherits = FALSE)) {
[10:32:05.670]                           master <- get("master", mode = "list", 
[10:32:05.670]                             envir = envir, inherits = FALSE)
[10:32:05.670]                           if (inherits(master, c("SOCKnode", 
[10:32:05.670]                             "SOCK0node"))) {
[10:32:05.670]                             sendCondition <<- function(cond) {
[10:32:05.670]                               data <- list(type = "VALUE", value = cond, 
[10:32:05.670]                                 success = TRUE)
[10:32:05.670]                               parallel_sendData(master, data)
[10:32:05.670]                             }
[10:32:05.670]                             return(sendCondition)
[10:32:05.670]                           }
[10:32:05.670]                         }
[10:32:05.670]                         frame <- frame + 1L
[10:32:05.670]                         envir <- sys.frame(frame)
[10:32:05.670]                       }
[10:32:05.670]                     }
[10:32:05.670]                     sendCondition <<- function(cond) NULL
[10:32:05.670]                   }
[10:32:05.670]                 })
[10:32:05.670]                 withCallingHandlers({
[10:32:05.670]                   {
[10:32:05.670]                     Sys.sleep(3)
[10:32:05.670]                     42L
[10:32:05.670]                     stop("Woops")
[10:32:05.670]                   }
[10:32:05.670]                 }, immediateCondition = function(cond) {
[10:32:05.670]                   sendCondition <- ...future.makeSendCondition()
[10:32:05.670]                   sendCondition(cond)
[10:32:05.670]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:05.670]                   {
[10:32:05.670]                     inherits <- base::inherits
[10:32:05.670]                     invokeRestart <- base::invokeRestart
[10:32:05.670]                     is.null <- base::is.null
[10:32:05.670]                     muffled <- FALSE
[10:32:05.670]                     if (inherits(cond, "message")) {
[10:32:05.670]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:05.670]                       if (muffled) 
[10:32:05.670]                         invokeRestart("muffleMessage")
[10:32:05.670]                     }
[10:32:05.670]                     else if (inherits(cond, "warning")) {
[10:32:05.670]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:05.670]                       if (muffled) 
[10:32:05.670]                         invokeRestart("muffleWarning")
[10:32:05.670]                     }
[10:32:05.670]                     else if (inherits(cond, "condition")) {
[10:32:05.670]                       if (!is.null(pattern)) {
[10:32:05.670]                         computeRestarts <- base::computeRestarts
[10:32:05.670]                         grepl <- base::grepl
[10:32:05.670]                         restarts <- computeRestarts(cond)
[10:32:05.670]                         for (restart in restarts) {
[10:32:05.670]                           name <- restart$name
[10:32:05.670]                           if (is.null(name)) 
[10:32:05.670]                             next
[10:32:05.670]                           if (!grepl(pattern, name)) 
[10:32:05.670]                             next
[10:32:05.670]                           invokeRestart(restart)
[10:32:05.670]                           muffled <- TRUE
[10:32:05.670]                           break
[10:32:05.670]                         }
[10:32:05.670]                       }
[10:32:05.670]                     }
[10:32:05.670]                     invisible(muffled)
[10:32:05.670]                   }
[10:32:05.670]                   muffleCondition(cond)
[10:32:05.670]                 })
[10:32:05.670]             }))
[10:32:05.670]             future::FutureResult(value = ...future.value$value, 
[10:32:05.670]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:05.670]                   ...future.rng), globalenv = if (FALSE) 
[10:32:05.670]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:05.670]                     ...future.globalenv.names))
[10:32:05.670]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:05.670]         }, condition = base::local({
[10:32:05.670]             c <- base::c
[10:32:05.670]             inherits <- base::inherits
[10:32:05.670]             invokeRestart <- base::invokeRestart
[10:32:05.670]             length <- base::length
[10:32:05.670]             list <- base::list
[10:32:05.670]             seq.int <- base::seq.int
[10:32:05.670]             signalCondition <- base::signalCondition
[10:32:05.670]             sys.calls <- base::sys.calls
[10:32:05.670]             `[[` <- base::`[[`
[10:32:05.670]             `+` <- base::`+`
[10:32:05.670]             `<<-` <- base::`<<-`
[10:32:05.670]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:05.670]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:05.670]                   3L)]
[10:32:05.670]             }
[10:32:05.670]             function(cond) {
[10:32:05.670]                 is_error <- inherits(cond, "error")
[10:32:05.670]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:05.670]                   NULL)
[10:32:05.670]                 if (is_error) {
[10:32:05.670]                   sessionInformation <- function() {
[10:32:05.670]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:05.670]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:05.670]                       search = base::search(), system = base::Sys.info())
[10:32:05.670]                   }
[10:32:05.670]                   ...future.conditions[[length(...future.conditions) + 
[10:32:05.670]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:05.670]                     cond$call), session = sessionInformation(), 
[10:32:05.670]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:05.670]                   signalCondition(cond)
[10:32:05.670]                 }
[10:32:05.670]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:05.670]                 "immediateCondition"))) {
[10:32:05.670]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:05.670]                   ...future.conditions[[length(...future.conditions) + 
[10:32:05.670]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:05.670]                   if (TRUE && !signal) {
[10:32:05.670]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:05.670]                     {
[10:32:05.670]                       inherits <- base::inherits
[10:32:05.670]                       invokeRestart <- base::invokeRestart
[10:32:05.670]                       is.null <- base::is.null
[10:32:05.670]                       muffled <- FALSE
[10:32:05.670]                       if (inherits(cond, "message")) {
[10:32:05.670]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:05.670]                         if (muffled) 
[10:32:05.670]                           invokeRestart("muffleMessage")
[10:32:05.670]                       }
[10:32:05.670]                       else if (inherits(cond, "warning")) {
[10:32:05.670]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:05.670]                         if (muffled) 
[10:32:05.670]                           invokeRestart("muffleWarning")
[10:32:05.670]                       }
[10:32:05.670]                       else if (inherits(cond, "condition")) {
[10:32:05.670]                         if (!is.null(pattern)) {
[10:32:05.670]                           computeRestarts <- base::computeRestarts
[10:32:05.670]                           grepl <- base::grepl
[10:32:05.670]                           restarts <- computeRestarts(cond)
[10:32:05.670]                           for (restart in restarts) {
[10:32:05.670]                             name <- restart$name
[10:32:05.670]                             if (is.null(name)) 
[10:32:05.670]                               next
[10:32:05.670]                             if (!grepl(pattern, name)) 
[10:32:05.670]                               next
[10:32:05.670]                             invokeRestart(restart)
[10:32:05.670]                             muffled <- TRUE
[10:32:05.670]                             break
[10:32:05.670]                           }
[10:32:05.670]                         }
[10:32:05.670]                       }
[10:32:05.670]                       invisible(muffled)
[10:32:05.670]                     }
[10:32:05.670]                     muffleCondition(cond, pattern = "^muffle")
[10:32:05.670]                   }
[10:32:05.670]                 }
[10:32:05.670]                 else {
[10:32:05.670]                   if (TRUE) {
[10:32:05.670]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:05.670]                     {
[10:32:05.670]                       inherits <- base::inherits
[10:32:05.670]                       invokeRestart <- base::invokeRestart
[10:32:05.670]                       is.null <- base::is.null
[10:32:05.670]                       muffled <- FALSE
[10:32:05.670]                       if (inherits(cond, "message")) {
[10:32:05.670]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:05.670]                         if (muffled) 
[10:32:05.670]                           invokeRestart("muffleMessage")
[10:32:05.670]                       }
[10:32:05.670]                       else if (inherits(cond, "warning")) {
[10:32:05.670]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:05.670]                         if (muffled) 
[10:32:05.670]                           invokeRestart("muffleWarning")
[10:32:05.670]                       }
[10:32:05.670]                       else if (inherits(cond, "condition")) {
[10:32:05.670]                         if (!is.null(pattern)) {
[10:32:05.670]                           computeRestarts <- base::computeRestarts
[10:32:05.670]                           grepl <- base::grepl
[10:32:05.670]                           restarts <- computeRestarts(cond)
[10:32:05.670]                           for (restart in restarts) {
[10:32:05.670]                             name <- restart$name
[10:32:05.670]                             if (is.null(name)) 
[10:32:05.670]                               next
[10:32:05.670]                             if (!grepl(pattern, name)) 
[10:32:05.670]                               next
[10:32:05.670]                             invokeRestart(restart)
[10:32:05.670]                             muffled <- TRUE
[10:32:05.670]                             break
[10:32:05.670]                           }
[10:32:05.670]                         }
[10:32:05.670]                       }
[10:32:05.670]                       invisible(muffled)
[10:32:05.670]                     }
[10:32:05.670]                     muffleCondition(cond, pattern = "^muffle")
[10:32:05.670]                   }
[10:32:05.670]                 }
[10:32:05.670]             }
[10:32:05.670]         }))
[10:32:05.670]     }, error = function(ex) {
[10:32:05.670]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:05.670]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:05.670]                 ...future.rng), started = ...future.startTime, 
[10:32:05.670]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:05.670]             version = "1.8"), class = "FutureResult")
[10:32:05.670]     }, finally = {
[10:32:05.670]         if (!identical(...future.workdir, getwd())) 
[10:32:05.670]             setwd(...future.workdir)
[10:32:05.670]         {
[10:32:05.670]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:05.670]                 ...future.oldOptions$nwarnings <- NULL
[10:32:05.670]             }
[10:32:05.670]             base::options(...future.oldOptions)
[10:32:05.670]             if (.Platform$OS.type == "windows") {
[10:32:05.670]                 old_names <- names(...future.oldEnvVars)
[10:32:05.670]                 envs <- base::Sys.getenv()
[10:32:05.670]                 names <- names(envs)
[10:32:05.670]                 common <- intersect(names, old_names)
[10:32:05.670]                 added <- setdiff(names, old_names)
[10:32:05.670]                 removed <- setdiff(old_names, names)
[10:32:05.670]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:05.670]                   envs[common]]
[10:32:05.670]                 NAMES <- toupper(changed)
[10:32:05.670]                 args <- list()
[10:32:05.670]                 for (kk in seq_along(NAMES)) {
[10:32:05.670]                   name <- changed[[kk]]
[10:32:05.670]                   NAME <- NAMES[[kk]]
[10:32:05.670]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:05.670]                     next
[10:32:05.670]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:05.670]                 }
[10:32:05.670]                 NAMES <- toupper(added)
[10:32:05.670]                 for (kk in seq_along(NAMES)) {
[10:32:05.670]                   name <- added[[kk]]
[10:32:05.670]                   NAME <- NAMES[[kk]]
[10:32:05.670]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:05.670]                     next
[10:32:05.670]                   args[[name]] <- ""
[10:32:05.670]                 }
[10:32:05.670]                 NAMES <- toupper(removed)
[10:32:05.670]                 for (kk in seq_along(NAMES)) {
[10:32:05.670]                   name <- removed[[kk]]
[10:32:05.670]                   NAME <- NAMES[[kk]]
[10:32:05.670]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:05.670]                     next
[10:32:05.670]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:05.670]                 }
[10:32:05.670]                 if (length(args) > 0) 
[10:32:05.670]                   base::do.call(base::Sys.setenv, args = args)
[10:32:05.670]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:05.670]             }
[10:32:05.670]             else {
[10:32:05.670]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:05.670]             }
[10:32:05.670]             {
[10:32:05.670]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:05.670]                   0L) {
[10:32:05.670]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:05.670]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:05.670]                   base::options(opts)
[10:32:05.670]                 }
[10:32:05.670]                 {
[10:32:05.670]                   {
[10:32:05.670]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:05.670]                     NULL
[10:32:05.670]                   }
[10:32:05.670]                   options(future.plan = NULL)
[10:32:05.670]                   if (is.na(NA_character_)) 
[10:32:05.670]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:05.670]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:05.670]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:05.670]                     .init = FALSE)
[10:32:05.670]                 }
[10:32:05.670]             }
[10:32:05.670]         }
[10:32:05.670]     })
[10:32:05.670]     if (TRUE) {
[10:32:05.670]         base::sink(type = "output", split = FALSE)
[10:32:05.670]         if (TRUE) {
[10:32:05.670]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:05.670]         }
[10:32:05.670]         else {
[10:32:05.670]             ...future.result["stdout"] <- base::list(NULL)
[10:32:05.670]         }
[10:32:05.670]         base::close(...future.stdout)
[10:32:05.670]         ...future.stdout <- NULL
[10:32:05.670]     }
[10:32:05.670]     ...future.result$conditions <- ...future.conditions
[10:32:05.670]     ...future.result$finished <- base::Sys.time()
[10:32:05.670]     ...future.result
[10:32:05.670] }
[10:32:05.673] MultisessionFuture started
[10:32:05.674] - Launch lazy future ... done
[10:32:05.674] run() for ‘MultisessionFuture’ ... done
<simpleError: No error has been caught because the future is unresolved: ‘f’>
[10:32:08.692] receiveMessageFromWorker() for ClusterFuture ...
[10:32:08.693] - Validating connection of MultisessionFuture
[10:32:08.693] - received message: FutureResult
[10:32:08.693] - Received FutureResult
[10:32:08.693] - Erased future from FutureRegistry
[10:32:08.694] result() for ClusterFuture ...
[10:32:08.694] - result already collected: FutureResult
[10:32:08.694] result() for ClusterFuture ... done
[10:32:08.694] signalConditions() ...
[10:32:08.694]  - include = ‘immediateCondition’
[10:32:08.694]  - exclude = 
[10:32:08.694]  - resignal = FALSE
[10:32:08.694]  - Number of conditions: 1
[10:32:08.694] signalConditions() ... done
[10:32:08.694] receiveMessageFromWorker() for ClusterFuture ... done
[10:32:08.694] A MultisessionFuture was resolved (result was not collected)
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    Sys.sleep(3)
    42L
    stop("Woops")
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘simpleError’
Early signaling: FALSE
Owner process: d1f85d50-9c9c-9a01-6f0e-6652356c13f8
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
> 
> message("*** backtrace( ) - exceptions ... DONE")
*** backtrace( ) - exceptions ... DONE
> 
> 
> message("*** backtrace( ) ... DONE")
*** backtrace( ) ... DONE
> 
> source("incl/end.R")
[10:32:08.696] plan(): Setting new future strategy stack:
[10:32:08.696] List of future strategies:
[10:32:08.696] 1. FutureStrategy:
[10:32:08.696]    - args: function (..., envir = parent.frame())
[10:32:08.696]    - tweaked: FALSE
[10:32:08.696]    - call: future::plan(oplan)
[10:32:08.697] plan(): nbrOfWorkers() = 1
> 
