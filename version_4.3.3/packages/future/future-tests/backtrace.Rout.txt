
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:35:48.847] plan(): Setting new future strategy stack:
[13:35:48.848] List of future strategies:
[13:35:48.848] 1. sequential:
[13:35:48.848]    - args: function (..., envir = parent.frame())
[13:35:48.848]    - tweaked: FALSE
[13:35:48.848]    - call: future::plan("sequential")
[13:35:48.861] plan(): nbrOfWorkers() = 1
> 
> message("*** backtrace( ) ...")
*** backtrace( ) ...
> 
> message("*** backtrace( ) - explicit future ...")
*** backtrace( ) - explicit future ...
> 
> f <- future({ 42L; stop("Woops") })
[13:35:48.872] getGlobalsAndPackages() ...
[13:35:48.872] Searching for globals...
[13:35:48.878] - globals found: [2] ‘{’, ‘stop’
[13:35:48.878] Searching for globals ... DONE
[13:35:48.879] Resolving globals: FALSE
[13:35:48.879] 
[13:35:48.879] 
[13:35:48.879] getGlobalsAndPackages() ... DONE
[13:35:48.880] run() for ‘Future’ ...
[13:35:48.880] - state: ‘created’
[13:35:48.880] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:35:48.881] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:35:48.881] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:35:48.881]   - Field: ‘label’
[13:35:48.881]   - Field: ‘local’
[13:35:48.881]   - Field: ‘owner’
[13:35:48.881]   - Field: ‘envir’
[13:35:48.881]   - Field: ‘packages’
[13:35:48.881]   - Field: ‘gc’
[13:35:48.882]   - Field: ‘conditions’
[13:35:48.882]   - Field: ‘expr’
[13:35:48.882]   - Field: ‘uuid’
[13:35:48.882]   - Field: ‘seed’
[13:35:48.882]   - Field: ‘version’
[13:35:48.882]   - Field: ‘result’
[13:35:48.882]   - Field: ‘asynchronous’
[13:35:48.882]   - Field: ‘calls’
[13:35:48.882]   - Field: ‘globals’
[13:35:48.882]   - Field: ‘stdout’
[13:35:48.882]   - Field: ‘earlySignal’
[13:35:48.883]   - Field: ‘lazy’
[13:35:48.883]   - Field: ‘state’
[13:35:48.883] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:35:48.883] - Launch lazy future ...
[13:35:48.884] Packages needed by the future expression (n = 0): <none>
[13:35:48.884] Packages needed by future strategies (n = 0): <none>
[13:35:48.884] {
[13:35:48.884]     {
[13:35:48.884]         {
[13:35:48.884]             ...future.startTime <- base::Sys.time()
[13:35:48.884]             {
[13:35:48.884]                 {
[13:35:48.884]                   {
[13:35:48.884]                     base::local({
[13:35:48.884]                       has_future <- base::requireNamespace("future", 
[13:35:48.884]                         quietly = TRUE)
[13:35:48.884]                       if (has_future) {
[13:35:48.884]                         ns <- base::getNamespace("future")
[13:35:48.884]                         version <- ns[[".package"]][["version"]]
[13:35:48.884]                         if (is.null(version)) 
[13:35:48.884]                           version <- utils::packageVersion("future")
[13:35:48.884]                       }
[13:35:48.884]                       else {
[13:35:48.884]                         version <- NULL
[13:35:48.884]                       }
[13:35:48.884]                       if (!has_future || version < "1.8.0") {
[13:35:48.884]                         info <- base::c(r_version = base::gsub("R version ", 
[13:35:48.884]                           "", base::R.version$version.string), 
[13:35:48.884]                           platform = base::sprintf("%s (%s-bit)", 
[13:35:48.884]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:35:48.884]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:35:48.884]                             "release", "version")], collapse = " "), 
[13:35:48.884]                           hostname = base::Sys.info()[["nodename"]])
[13:35:48.884]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:35:48.884]                           info)
[13:35:48.884]                         info <- base::paste(info, collapse = "; ")
[13:35:48.884]                         if (!has_future) {
[13:35:48.884]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:35:48.884]                             info)
[13:35:48.884]                         }
[13:35:48.884]                         else {
[13:35:48.884]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:35:48.884]                             info, version)
[13:35:48.884]                         }
[13:35:48.884]                         base::stop(msg)
[13:35:48.884]                       }
[13:35:48.884]                     })
[13:35:48.884]                   }
[13:35:48.884]                   ...future.strategy.old <- future::plan("list")
[13:35:48.884]                   options(future.plan = NULL)
[13:35:48.884]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:35:48.884]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:35:48.884]                 }
[13:35:48.884]                 ...future.workdir <- getwd()
[13:35:48.884]             }
[13:35:48.884]             ...future.oldOptions <- base::as.list(base::.Options)
[13:35:48.884]             ...future.oldEnvVars <- base::Sys.getenv()
[13:35:48.884]         }
[13:35:48.884]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:35:48.884]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:35:48.884]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:35:48.884]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:35:48.884]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:35:48.884]             future.stdout.windows.reencode = NULL, width = 80L)
[13:35:48.884]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:35:48.884]             base::names(...future.oldOptions))
[13:35:48.884]     }
[13:35:48.884]     if (FALSE) {
[13:35:48.884]     }
[13:35:48.884]     else {
[13:35:48.884]         if (TRUE) {
[13:35:48.884]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:35:48.884]                 open = "w")
[13:35:48.884]         }
[13:35:48.884]         else {
[13:35:48.884]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:35:48.884]                 windows = "NUL", "/dev/null"), open = "w")
[13:35:48.884]         }
[13:35:48.884]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:35:48.884]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:35:48.884]             base::sink(type = "output", split = FALSE)
[13:35:48.884]             base::close(...future.stdout)
[13:35:48.884]         }, add = TRUE)
[13:35:48.884]     }
[13:35:48.884]     ...future.frame <- base::sys.nframe()
[13:35:48.884]     ...future.conditions <- base::list()
[13:35:48.884]     ...future.rng <- base::globalenv()$.Random.seed
[13:35:48.884]     if (FALSE) {
[13:35:48.884]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:35:48.884]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:35:48.884]     }
[13:35:48.884]     ...future.result <- base::tryCatch({
[13:35:48.884]         base::withCallingHandlers({
[13:35:48.884]             ...future.value <- base::withVisible(base::local({
[13:35:48.884]                 42L
[13:35:48.884]                 stop("Woops")
[13:35:48.884]             }))
[13:35:48.884]             future::FutureResult(value = ...future.value$value, 
[13:35:48.884]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:35:48.884]                   ...future.rng), globalenv = if (FALSE) 
[13:35:48.884]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:35:48.884]                     ...future.globalenv.names))
[13:35:48.884]                 else NULL, started = ...future.startTime, version = "1.8")
[13:35:48.884]         }, condition = base::local({
[13:35:48.884]             c <- base::c
[13:35:48.884]             inherits <- base::inherits
[13:35:48.884]             invokeRestart <- base::invokeRestart
[13:35:48.884]             length <- base::length
[13:35:48.884]             list <- base::list
[13:35:48.884]             seq.int <- base::seq.int
[13:35:48.884]             signalCondition <- base::signalCondition
[13:35:48.884]             sys.calls <- base::sys.calls
[13:35:48.884]             `[[` <- base::`[[`
[13:35:48.884]             `+` <- base::`+`
[13:35:48.884]             `<<-` <- base::`<<-`
[13:35:48.884]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:35:48.884]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:35:48.884]                   3L)]
[13:35:48.884]             }
[13:35:48.884]             function(cond) {
[13:35:48.884]                 is_error <- inherits(cond, "error")
[13:35:48.884]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:35:48.884]                   NULL)
[13:35:48.884]                 if (is_error) {
[13:35:48.884]                   sessionInformation <- function() {
[13:35:48.884]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:35:48.884]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:35:48.884]                       search = base::search(), system = base::Sys.info())
[13:35:48.884]                   }
[13:35:48.884]                   ...future.conditions[[length(...future.conditions) + 
[13:35:48.884]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:35:48.884]                     cond$call), session = sessionInformation(), 
[13:35:48.884]                     timestamp = base::Sys.time(), signaled = 0L)
[13:35:48.884]                   signalCondition(cond)
[13:35:48.884]                 }
[13:35:48.884]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:35:48.884]                 "immediateCondition"))) {
[13:35:48.884]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:35:48.884]                   ...future.conditions[[length(...future.conditions) + 
[13:35:48.884]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:35:48.884]                   if (TRUE && !signal) {
[13:35:48.884]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:35:48.884]                     {
[13:35:48.884]                       inherits <- base::inherits
[13:35:48.884]                       invokeRestart <- base::invokeRestart
[13:35:48.884]                       is.null <- base::is.null
[13:35:48.884]                       muffled <- FALSE
[13:35:48.884]                       if (inherits(cond, "message")) {
[13:35:48.884]                         muffled <- grepl(pattern, "muffleMessage")
[13:35:48.884]                         if (muffled) 
[13:35:48.884]                           invokeRestart("muffleMessage")
[13:35:48.884]                       }
[13:35:48.884]                       else if (inherits(cond, "warning")) {
[13:35:48.884]                         muffled <- grepl(pattern, "muffleWarning")
[13:35:48.884]                         if (muffled) 
[13:35:48.884]                           invokeRestart("muffleWarning")
[13:35:48.884]                       }
[13:35:48.884]                       else if (inherits(cond, "condition")) {
[13:35:48.884]                         if (!is.null(pattern)) {
[13:35:48.884]                           computeRestarts <- base::computeRestarts
[13:35:48.884]                           grepl <- base::grepl
[13:35:48.884]                           restarts <- computeRestarts(cond)
[13:35:48.884]                           for (restart in restarts) {
[13:35:48.884]                             name <- restart$name
[13:35:48.884]                             if (is.null(name)) 
[13:35:48.884]                               next
[13:35:48.884]                             if (!grepl(pattern, name)) 
[13:35:48.884]                               next
[13:35:48.884]                             invokeRestart(restart)
[13:35:48.884]                             muffled <- TRUE
[13:35:48.884]                             break
[13:35:48.884]                           }
[13:35:48.884]                         }
[13:35:48.884]                       }
[13:35:48.884]                       invisible(muffled)
[13:35:48.884]                     }
[13:35:48.884]                     muffleCondition(cond, pattern = "^muffle")
[13:35:48.884]                   }
[13:35:48.884]                 }
[13:35:48.884]                 else {
[13:35:48.884]                   if (TRUE) {
[13:35:48.884]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:35:48.884]                     {
[13:35:48.884]                       inherits <- base::inherits
[13:35:48.884]                       invokeRestart <- base::invokeRestart
[13:35:48.884]                       is.null <- base::is.null
[13:35:48.884]                       muffled <- FALSE
[13:35:48.884]                       if (inherits(cond, "message")) {
[13:35:48.884]                         muffled <- grepl(pattern, "muffleMessage")
[13:35:48.884]                         if (muffled) 
[13:35:48.884]                           invokeRestart("muffleMessage")
[13:35:48.884]                       }
[13:35:48.884]                       else if (inherits(cond, "warning")) {
[13:35:48.884]                         muffled <- grepl(pattern, "muffleWarning")
[13:35:48.884]                         if (muffled) 
[13:35:48.884]                           invokeRestart("muffleWarning")
[13:35:48.884]                       }
[13:35:48.884]                       else if (inherits(cond, "condition")) {
[13:35:48.884]                         if (!is.null(pattern)) {
[13:35:48.884]                           computeRestarts <- base::computeRestarts
[13:35:48.884]                           grepl <- base::grepl
[13:35:48.884]                           restarts <- computeRestarts(cond)
[13:35:48.884]                           for (restart in restarts) {
[13:35:48.884]                             name <- restart$name
[13:35:48.884]                             if (is.null(name)) 
[13:35:48.884]                               next
[13:35:48.884]                             if (!grepl(pattern, name)) 
[13:35:48.884]                               next
[13:35:48.884]                             invokeRestart(restart)
[13:35:48.884]                             muffled <- TRUE
[13:35:48.884]                             break
[13:35:48.884]                           }
[13:35:48.884]                         }
[13:35:48.884]                       }
[13:35:48.884]                       invisible(muffled)
[13:35:48.884]                     }
[13:35:48.884]                     muffleCondition(cond, pattern = "^muffle")
[13:35:48.884]                   }
[13:35:48.884]                 }
[13:35:48.884]             }
[13:35:48.884]         }))
[13:35:48.884]     }, error = function(ex) {
[13:35:48.884]         base::structure(base::list(value = NULL, visible = NULL, 
[13:35:48.884]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:35:48.884]                 ...future.rng), started = ...future.startTime, 
[13:35:48.884]             finished = Sys.time(), session_uuid = NA_character_, 
[13:35:48.884]             version = "1.8"), class = "FutureResult")
[13:35:48.884]     }, finally = {
[13:35:48.884]         if (!identical(...future.workdir, getwd())) 
[13:35:48.884]             setwd(...future.workdir)
[13:35:48.884]         {
[13:35:48.884]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:35:48.884]                 ...future.oldOptions$nwarnings <- NULL
[13:35:48.884]             }
[13:35:48.884]             base::options(...future.oldOptions)
[13:35:48.884]             if (.Platform$OS.type == "windows") {
[13:35:48.884]                 old_names <- names(...future.oldEnvVars)
[13:35:48.884]                 envs <- base::Sys.getenv()
[13:35:48.884]                 names <- names(envs)
[13:35:48.884]                 common <- intersect(names, old_names)
[13:35:48.884]                 added <- setdiff(names, old_names)
[13:35:48.884]                 removed <- setdiff(old_names, names)
[13:35:48.884]                 changed <- common[...future.oldEnvVars[common] != 
[13:35:48.884]                   envs[common]]
[13:35:48.884]                 NAMES <- toupper(changed)
[13:35:48.884]                 args <- list()
[13:35:48.884]                 for (kk in seq_along(NAMES)) {
[13:35:48.884]                   name <- changed[[kk]]
[13:35:48.884]                   NAME <- NAMES[[kk]]
[13:35:48.884]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:48.884]                     next
[13:35:48.884]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:35:48.884]                 }
[13:35:48.884]                 NAMES <- toupper(added)
[13:35:48.884]                 for (kk in seq_along(NAMES)) {
[13:35:48.884]                   name <- added[[kk]]
[13:35:48.884]                   NAME <- NAMES[[kk]]
[13:35:48.884]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:48.884]                     next
[13:35:48.884]                   args[[name]] <- ""
[13:35:48.884]                 }
[13:35:48.884]                 NAMES <- toupper(removed)
[13:35:48.884]                 for (kk in seq_along(NAMES)) {
[13:35:48.884]                   name <- removed[[kk]]
[13:35:48.884]                   NAME <- NAMES[[kk]]
[13:35:48.884]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:48.884]                     next
[13:35:48.884]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:35:48.884]                 }
[13:35:48.884]                 if (length(args) > 0) 
[13:35:48.884]                   base::do.call(base::Sys.setenv, args = args)
[13:35:48.884]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:35:48.884]             }
[13:35:48.884]             else {
[13:35:48.884]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:35:48.884]             }
[13:35:48.884]             {
[13:35:48.884]                 if (base::length(...future.futureOptionsAdded) > 
[13:35:48.884]                   0L) {
[13:35:48.884]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:35:48.884]                   base::names(opts) <- ...future.futureOptionsAdded
[13:35:48.884]                   base::options(opts)
[13:35:48.884]                 }
[13:35:48.884]                 {
[13:35:48.884]                   {
[13:35:48.884]                     NULL
[13:35:48.884]                     RNGkind("Mersenne-Twister")
[13:35:48.884]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:35:48.884]                       inherits = FALSE)
[13:35:48.884]                   }
[13:35:48.884]                   options(future.plan = NULL)
[13:35:48.884]                   if (is.na(NA_character_)) 
[13:35:48.884]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:35:48.884]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:35:48.884]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:35:48.884]                     .init = FALSE)
[13:35:48.884]                 }
[13:35:48.884]             }
[13:35:48.884]         }
[13:35:48.884]     })
[13:35:48.884]     if (TRUE) {
[13:35:48.884]         base::sink(type = "output", split = FALSE)
[13:35:48.884]         if (TRUE) {
[13:35:48.884]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:35:48.884]         }
[13:35:48.884]         else {
[13:35:48.884]             ...future.result["stdout"] <- base::list(NULL)
[13:35:48.884]         }
[13:35:48.884]         base::close(...future.stdout)
[13:35:48.884]         ...future.stdout <- NULL
[13:35:48.884]     }
[13:35:48.884]     ...future.result$conditions <- ...future.conditions
[13:35:48.884]     ...future.result$finished <- base::Sys.time()
[13:35:48.884]     ...future.result
[13:35:48.884] }
[13:35:48.886] plan(): Setting new future strategy stack:
[13:35:48.887] List of future strategies:
[13:35:48.887] 1. sequential:
[13:35:48.887]    - args: function (..., envir = parent.frame())
[13:35:48.887]    - tweaked: FALSE
[13:35:48.887]    - call: NULL
[13:35:48.887] plan(): nbrOfWorkers() = 1
[13:35:48.888] plan(): Setting new future strategy stack:
[13:35:48.888] List of future strategies:
[13:35:48.888] 1. sequential:
[13:35:48.888]    - args: function (..., envir = parent.frame())
[13:35:48.888]    - tweaked: FALSE
[13:35:48.888]    - call: future::plan("sequential")
[13:35:48.888] plan(): nbrOfWorkers() = 1
[13:35:48.888] SequentialFuture started (and completed)
[13:35:48.889] signalConditions() ...
[13:35:48.889]  - include = ‘immediateCondition’
[13:35:48.889]  - exclude = 
[13:35:48.889]  - resignal = FALSE
[13:35:48.889]  - Number of conditions: 1
[13:35:48.889] signalConditions() ... done
[13:35:48.889] - Launch lazy future ... done
[13:35:48.890] run() for ‘SequentialFuture’ ... done
> v <- value(f, signal = FALSE)
[13:35:48.890] signalConditions() ...
[13:35:48.890]  - include = ‘immediateCondition’
[13:35:48.890]  - exclude = 
[13:35:48.890]  - resignal = FALSE
[13:35:48.890]  - Number of conditions: 1
[13:35:48.890] signalConditions() ... done
> print(v)
<simpleError in eval(quote({    42L    stop("Woops")}), new.env()): Woops>
> calls <- backtrace(f)
[13:35:48.892] resolved() for ‘SequentialFuture’ ...
[13:35:48.892] - state: ‘finished’
[13:35:48.892] - run: TRUE
[13:35:48.892] - result: ‘FutureResult’
[13:35:48.892] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
future({
    42L
    stop("Woops")
})

[[2]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[3]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[4]]
stop("Woops")

[[5]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> 
> message("*** backtrace( ) - explicit future ... DONE")
*** backtrace( ) - explicit future ... DONE
> 
> 
> message("*** backtrace( ) - implicit future ...")
*** backtrace( ) - implicit future ...
> 
> v %<-% { 42L; stop("Woops") }
[13:35:48.893] getGlobalsAndPackages() ...
[13:35:48.893] Searching for globals...
[13:35:48.894] - globals found: [2] ‘{’, ‘stop’
[13:35:48.894] Searching for globals ... DONE
[13:35:48.894] Resolving globals: FALSE
[13:35:48.894] 
[13:35:48.894] 
[13:35:48.894] getGlobalsAndPackages() ... DONE
[13:35:48.895] run() for ‘Future’ ...
[13:35:48.895] - state: ‘created’
[13:35:48.895] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:35:48.895] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:35:48.895] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:35:48.895]   - Field: ‘label’
[13:35:48.895]   - Field: ‘local’
[13:35:48.896]   - Field: ‘owner’
[13:35:48.896]   - Field: ‘envir’
[13:35:48.896]   - Field: ‘packages’
[13:35:48.896]   - Field: ‘gc’
[13:35:48.896]   - Field: ‘conditions’
[13:35:48.896]   - Field: ‘expr’
[13:35:48.896]   - Field: ‘uuid’
[13:35:48.896]   - Field: ‘seed’
[13:35:48.896]   - Field: ‘version’
[13:35:48.896]   - Field: ‘result’
[13:35:48.896]   - Field: ‘asynchronous’
[13:35:48.897]   - Field: ‘calls’
[13:35:48.897]   - Field: ‘globals’
[13:35:48.897]   - Field: ‘stdout’
[13:35:48.897]   - Field: ‘earlySignal’
[13:35:48.897]   - Field: ‘lazy’
[13:35:48.897]   - Field: ‘state’
[13:35:48.897] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:35:48.897] - Launch lazy future ...
[13:35:48.897] Packages needed by the future expression (n = 0): <none>
[13:35:48.897] Packages needed by future strategies (n = 0): <none>
[13:35:48.898] {
[13:35:48.898]     {
[13:35:48.898]         {
[13:35:48.898]             ...future.startTime <- base::Sys.time()
[13:35:48.898]             {
[13:35:48.898]                 {
[13:35:48.898]                   {
[13:35:48.898]                     base::local({
[13:35:48.898]                       has_future <- base::requireNamespace("future", 
[13:35:48.898]                         quietly = TRUE)
[13:35:48.898]                       if (has_future) {
[13:35:48.898]                         ns <- base::getNamespace("future")
[13:35:48.898]                         version <- ns[[".package"]][["version"]]
[13:35:48.898]                         if (is.null(version)) 
[13:35:48.898]                           version <- utils::packageVersion("future")
[13:35:48.898]                       }
[13:35:48.898]                       else {
[13:35:48.898]                         version <- NULL
[13:35:48.898]                       }
[13:35:48.898]                       if (!has_future || version < "1.8.0") {
[13:35:48.898]                         info <- base::c(r_version = base::gsub("R version ", 
[13:35:48.898]                           "", base::R.version$version.string), 
[13:35:48.898]                           platform = base::sprintf("%s (%s-bit)", 
[13:35:48.898]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:35:48.898]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:35:48.898]                             "release", "version")], collapse = " "), 
[13:35:48.898]                           hostname = base::Sys.info()[["nodename"]])
[13:35:48.898]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:35:48.898]                           info)
[13:35:48.898]                         info <- base::paste(info, collapse = "; ")
[13:35:48.898]                         if (!has_future) {
[13:35:48.898]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:35:48.898]                             info)
[13:35:48.898]                         }
[13:35:48.898]                         else {
[13:35:48.898]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:35:48.898]                             info, version)
[13:35:48.898]                         }
[13:35:48.898]                         base::stop(msg)
[13:35:48.898]                       }
[13:35:48.898]                     })
[13:35:48.898]                   }
[13:35:48.898]                   ...future.strategy.old <- future::plan("list")
[13:35:48.898]                   options(future.plan = NULL)
[13:35:48.898]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:35:48.898]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:35:48.898]                 }
[13:35:48.898]                 ...future.workdir <- getwd()
[13:35:48.898]             }
[13:35:48.898]             ...future.oldOptions <- base::as.list(base::.Options)
[13:35:48.898]             ...future.oldEnvVars <- base::Sys.getenv()
[13:35:48.898]         }
[13:35:48.898]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:35:48.898]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:35:48.898]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:35:48.898]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:35:48.898]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:35:48.898]             future.stdout.windows.reencode = NULL, width = 80L)
[13:35:48.898]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:35:48.898]             base::names(...future.oldOptions))
[13:35:48.898]     }
[13:35:48.898]     if (FALSE) {
[13:35:48.898]     }
[13:35:48.898]     else {
[13:35:48.898]         if (TRUE) {
[13:35:48.898]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:35:48.898]                 open = "w")
[13:35:48.898]         }
[13:35:48.898]         else {
[13:35:48.898]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:35:48.898]                 windows = "NUL", "/dev/null"), open = "w")
[13:35:48.898]         }
[13:35:48.898]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:35:48.898]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:35:48.898]             base::sink(type = "output", split = FALSE)
[13:35:48.898]             base::close(...future.stdout)
[13:35:48.898]         }, add = TRUE)
[13:35:48.898]     }
[13:35:48.898]     ...future.frame <- base::sys.nframe()
[13:35:48.898]     ...future.conditions <- base::list()
[13:35:48.898]     ...future.rng <- base::globalenv()$.Random.seed
[13:35:48.898]     if (FALSE) {
[13:35:48.898]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:35:48.898]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:35:48.898]     }
[13:35:48.898]     ...future.result <- base::tryCatch({
[13:35:48.898]         base::withCallingHandlers({
[13:35:48.898]             ...future.value <- base::withVisible(base::local({
[13:35:48.898]                 42L
[13:35:48.898]                 stop("Woops")
[13:35:48.898]             }))
[13:35:48.898]             future::FutureResult(value = ...future.value$value, 
[13:35:48.898]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:35:48.898]                   ...future.rng), globalenv = if (FALSE) 
[13:35:48.898]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:35:48.898]                     ...future.globalenv.names))
[13:35:48.898]                 else NULL, started = ...future.startTime, version = "1.8")
[13:35:48.898]         }, condition = base::local({
[13:35:48.898]             c <- base::c
[13:35:48.898]             inherits <- base::inherits
[13:35:48.898]             invokeRestart <- base::invokeRestart
[13:35:48.898]             length <- base::length
[13:35:48.898]             list <- base::list
[13:35:48.898]             seq.int <- base::seq.int
[13:35:48.898]             signalCondition <- base::signalCondition
[13:35:48.898]             sys.calls <- base::sys.calls
[13:35:48.898]             `[[` <- base::`[[`
[13:35:48.898]             `+` <- base::`+`
[13:35:48.898]             `<<-` <- base::`<<-`
[13:35:48.898]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:35:48.898]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:35:48.898]                   3L)]
[13:35:48.898]             }
[13:35:48.898]             function(cond) {
[13:35:48.898]                 is_error <- inherits(cond, "error")
[13:35:48.898]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:35:48.898]                   NULL)
[13:35:48.898]                 if (is_error) {
[13:35:48.898]                   sessionInformation <- function() {
[13:35:48.898]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:35:48.898]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:35:48.898]                       search = base::search(), system = base::Sys.info())
[13:35:48.898]                   }
[13:35:48.898]                   ...future.conditions[[length(...future.conditions) + 
[13:35:48.898]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:35:48.898]                     cond$call), session = sessionInformation(), 
[13:35:48.898]                     timestamp = base::Sys.time(), signaled = 0L)
[13:35:48.898]                   signalCondition(cond)
[13:35:48.898]                 }
[13:35:48.898]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:35:48.898]                 "immediateCondition"))) {
[13:35:48.898]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:35:48.898]                   ...future.conditions[[length(...future.conditions) + 
[13:35:48.898]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:35:48.898]                   if (TRUE && !signal) {
[13:35:48.898]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:35:48.898]                     {
[13:35:48.898]                       inherits <- base::inherits
[13:35:48.898]                       invokeRestart <- base::invokeRestart
[13:35:48.898]                       is.null <- base::is.null
[13:35:48.898]                       muffled <- FALSE
[13:35:48.898]                       if (inherits(cond, "message")) {
[13:35:48.898]                         muffled <- grepl(pattern, "muffleMessage")
[13:35:48.898]                         if (muffled) 
[13:35:48.898]                           invokeRestart("muffleMessage")
[13:35:48.898]                       }
[13:35:48.898]                       else if (inherits(cond, "warning")) {
[13:35:48.898]                         muffled <- grepl(pattern, "muffleWarning")
[13:35:48.898]                         if (muffled) 
[13:35:48.898]                           invokeRestart("muffleWarning")
[13:35:48.898]                       }
[13:35:48.898]                       else if (inherits(cond, "condition")) {
[13:35:48.898]                         if (!is.null(pattern)) {
[13:35:48.898]                           computeRestarts <- base::computeRestarts
[13:35:48.898]                           grepl <- base::grepl
[13:35:48.898]                           restarts <- computeRestarts(cond)
[13:35:48.898]                           for (restart in restarts) {
[13:35:48.898]                             name <- restart$name
[13:35:48.898]                             if (is.null(name)) 
[13:35:48.898]                               next
[13:35:48.898]                             if (!grepl(pattern, name)) 
[13:35:48.898]                               next
[13:35:48.898]                             invokeRestart(restart)
[13:35:48.898]                             muffled <- TRUE
[13:35:48.898]                             break
[13:35:48.898]                           }
[13:35:48.898]                         }
[13:35:48.898]                       }
[13:35:48.898]                       invisible(muffled)
[13:35:48.898]                     }
[13:35:48.898]                     muffleCondition(cond, pattern = "^muffle")
[13:35:48.898]                   }
[13:35:48.898]                 }
[13:35:48.898]                 else {
[13:35:48.898]                   if (TRUE) {
[13:35:48.898]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:35:48.898]                     {
[13:35:48.898]                       inherits <- base::inherits
[13:35:48.898]                       invokeRestart <- base::invokeRestart
[13:35:48.898]                       is.null <- base::is.null
[13:35:48.898]                       muffled <- FALSE
[13:35:48.898]                       if (inherits(cond, "message")) {
[13:35:48.898]                         muffled <- grepl(pattern, "muffleMessage")
[13:35:48.898]                         if (muffled) 
[13:35:48.898]                           invokeRestart("muffleMessage")
[13:35:48.898]                       }
[13:35:48.898]                       else if (inherits(cond, "warning")) {
[13:35:48.898]                         muffled <- grepl(pattern, "muffleWarning")
[13:35:48.898]                         if (muffled) 
[13:35:48.898]                           invokeRestart("muffleWarning")
[13:35:48.898]                       }
[13:35:48.898]                       else if (inherits(cond, "condition")) {
[13:35:48.898]                         if (!is.null(pattern)) {
[13:35:48.898]                           computeRestarts <- base::computeRestarts
[13:35:48.898]                           grepl <- base::grepl
[13:35:48.898]                           restarts <- computeRestarts(cond)
[13:35:48.898]                           for (restart in restarts) {
[13:35:48.898]                             name <- restart$name
[13:35:48.898]                             if (is.null(name)) 
[13:35:48.898]                               next
[13:35:48.898]                             if (!grepl(pattern, name)) 
[13:35:48.898]                               next
[13:35:48.898]                             invokeRestart(restart)
[13:35:48.898]                             muffled <- TRUE
[13:35:48.898]                             break
[13:35:48.898]                           }
[13:35:48.898]                         }
[13:35:48.898]                       }
[13:35:48.898]                       invisible(muffled)
[13:35:48.898]                     }
[13:35:48.898]                     muffleCondition(cond, pattern = "^muffle")
[13:35:48.898]                   }
[13:35:48.898]                 }
[13:35:48.898]             }
[13:35:48.898]         }))
[13:35:48.898]     }, error = function(ex) {
[13:35:48.898]         base::structure(base::list(value = NULL, visible = NULL, 
[13:35:48.898]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:35:48.898]                 ...future.rng), started = ...future.startTime, 
[13:35:48.898]             finished = Sys.time(), session_uuid = NA_character_, 
[13:35:48.898]             version = "1.8"), class = "FutureResult")
[13:35:48.898]     }, finally = {
[13:35:48.898]         if (!identical(...future.workdir, getwd())) 
[13:35:48.898]             setwd(...future.workdir)
[13:35:48.898]         {
[13:35:48.898]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:35:48.898]                 ...future.oldOptions$nwarnings <- NULL
[13:35:48.898]             }
[13:35:48.898]             base::options(...future.oldOptions)
[13:35:48.898]             if (.Platform$OS.type == "windows") {
[13:35:48.898]                 old_names <- names(...future.oldEnvVars)
[13:35:48.898]                 envs <- base::Sys.getenv()
[13:35:48.898]                 names <- names(envs)
[13:35:48.898]                 common <- intersect(names, old_names)
[13:35:48.898]                 added <- setdiff(names, old_names)
[13:35:48.898]                 removed <- setdiff(old_names, names)
[13:35:48.898]                 changed <- common[...future.oldEnvVars[common] != 
[13:35:48.898]                   envs[common]]
[13:35:48.898]                 NAMES <- toupper(changed)
[13:35:48.898]                 args <- list()
[13:35:48.898]                 for (kk in seq_along(NAMES)) {
[13:35:48.898]                   name <- changed[[kk]]
[13:35:48.898]                   NAME <- NAMES[[kk]]
[13:35:48.898]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:48.898]                     next
[13:35:48.898]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:35:48.898]                 }
[13:35:48.898]                 NAMES <- toupper(added)
[13:35:48.898]                 for (kk in seq_along(NAMES)) {
[13:35:48.898]                   name <- added[[kk]]
[13:35:48.898]                   NAME <- NAMES[[kk]]
[13:35:48.898]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:48.898]                     next
[13:35:48.898]                   args[[name]] <- ""
[13:35:48.898]                 }
[13:35:48.898]                 NAMES <- toupper(removed)
[13:35:48.898]                 for (kk in seq_along(NAMES)) {
[13:35:48.898]                   name <- removed[[kk]]
[13:35:48.898]                   NAME <- NAMES[[kk]]
[13:35:48.898]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:48.898]                     next
[13:35:48.898]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:35:48.898]                 }
[13:35:48.898]                 if (length(args) > 0) 
[13:35:48.898]                   base::do.call(base::Sys.setenv, args = args)
[13:35:48.898]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:35:48.898]             }
[13:35:48.898]             else {
[13:35:48.898]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:35:48.898]             }
[13:35:48.898]             {
[13:35:48.898]                 if (base::length(...future.futureOptionsAdded) > 
[13:35:48.898]                   0L) {
[13:35:48.898]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:35:48.898]                   base::names(opts) <- ...future.futureOptionsAdded
[13:35:48.898]                   base::options(opts)
[13:35:48.898]                 }
[13:35:48.898]                 {
[13:35:48.898]                   {
[13:35:48.898]                     NULL
[13:35:48.898]                     RNGkind("Mersenne-Twister")
[13:35:48.898]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:35:48.898]                       inherits = FALSE)
[13:35:48.898]                   }
[13:35:48.898]                   options(future.plan = NULL)
[13:35:48.898]                   if (is.na(NA_character_)) 
[13:35:48.898]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:35:48.898]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:35:48.898]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:35:48.898]                     .init = FALSE)
[13:35:48.898]                 }
[13:35:48.898]             }
[13:35:48.898]         }
[13:35:48.898]     })
[13:35:48.898]     if (TRUE) {
[13:35:48.898]         base::sink(type = "output", split = FALSE)
[13:35:48.898]         if (TRUE) {
[13:35:48.898]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:35:48.898]         }
[13:35:48.898]         else {
[13:35:48.898]             ...future.result["stdout"] <- base::list(NULL)
[13:35:48.898]         }
[13:35:48.898]         base::close(...future.stdout)
[13:35:48.898]         ...future.stdout <- NULL
[13:35:48.898]     }
[13:35:48.898]     ...future.result$conditions <- ...future.conditions
[13:35:48.898]     ...future.result$finished <- base::Sys.time()
[13:35:48.898]     ...future.result
[13:35:48.898] }
[13:35:48.900] plan(): Setting new future strategy stack:
[13:35:48.900] List of future strategies:
[13:35:48.900] 1. sequential:
[13:35:48.900]    - args: function (..., envir = parent.frame())
[13:35:48.900]    - tweaked: FALSE
[13:35:48.900]    - call: NULL
[13:35:48.900] plan(): nbrOfWorkers() = 1
[13:35:48.901] plan(): Setting new future strategy stack:
[13:35:48.901] List of future strategies:
[13:35:48.901] 1. sequential:
[13:35:48.901]    - args: function (..., envir = parent.frame())
[13:35:48.901]    - tweaked: FALSE
[13:35:48.901]    - call: future::plan("sequential")
[13:35:48.901] plan(): nbrOfWorkers() = 1
[13:35:48.901] SequentialFuture started (and completed)
[13:35:48.902] signalConditions() ...
[13:35:48.902]  - include = ‘immediateCondition’
[13:35:48.902]  - exclude = 
[13:35:48.902]  - resignal = FALSE
[13:35:48.902]  - Number of conditions: 1
[13:35:48.902] signalConditions() ... done
[13:35:48.902] - Launch lazy future ... done
[13:35:48.902] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(v)
[13:35:48.902] resolved() for ‘SequentialFuture’ ...
[13:35:48.903] - state: ‘finished’
[13:35:48.903] - run: TRUE
[13:35:48.903] - result: ‘FutureResult’
[13:35:48.903] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
v %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> 
> message("*** backtrace( ) - implicit future ... DONE")
*** backtrace( ) - implicit future ... DONE
> 
> 
> message("*** backtrace( ) - subsetting ...")
*** backtrace( ) - subsetting ...
> 
> env <- new.env()
> env[["a"]] %<-% { 42L; stop("Woops") }
[13:35:48.904] getGlobalsAndPackages() ...
[13:35:48.904] Searching for globals...
[13:35:48.905] - globals found: [2] ‘{’, ‘stop’
[13:35:48.905] Searching for globals ... DONE
[13:35:48.905] Resolving globals: FALSE
[13:35:48.905] 
[13:35:48.905] 
[13:35:48.905] getGlobalsAndPackages() ... DONE
[13:35:48.906] run() for ‘Future’ ...
[13:35:48.906] - state: ‘created’
[13:35:48.908] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:35:48.908] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:35:48.908] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:35:48.909]   - Field: ‘label’
[13:35:48.909]   - Field: ‘local’
[13:35:48.909]   - Field: ‘owner’
[13:35:48.909]   - Field: ‘envir’
[13:35:48.909]   - Field: ‘packages’
[13:35:48.909]   - Field: ‘gc’
[13:35:48.909]   - Field: ‘conditions’
[13:35:48.909]   - Field: ‘expr’
[13:35:48.909]   - Field: ‘uuid’
[13:35:48.909]   - Field: ‘seed’
[13:35:48.910]   - Field: ‘version’
[13:35:48.910]   - Field: ‘result’
[13:35:48.910]   - Field: ‘asynchronous’
[13:35:48.910]   - Field: ‘calls’
[13:35:48.910]   - Field: ‘globals’
[13:35:48.910]   - Field: ‘stdout’
[13:35:48.910]   - Field: ‘earlySignal’
[13:35:48.910]   - Field: ‘lazy’
[13:35:48.910]   - Field: ‘state’
[13:35:48.910] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:35:48.910] - Launch lazy future ...
[13:35:48.911] Packages needed by the future expression (n = 0): <none>
[13:35:48.911] Packages needed by future strategies (n = 0): <none>
[13:35:48.911] {
[13:35:48.911]     {
[13:35:48.911]         {
[13:35:48.911]             ...future.startTime <- base::Sys.time()
[13:35:48.911]             {
[13:35:48.911]                 {
[13:35:48.911]                   {
[13:35:48.911]                     base::local({
[13:35:48.911]                       has_future <- base::requireNamespace("future", 
[13:35:48.911]                         quietly = TRUE)
[13:35:48.911]                       if (has_future) {
[13:35:48.911]                         ns <- base::getNamespace("future")
[13:35:48.911]                         version <- ns[[".package"]][["version"]]
[13:35:48.911]                         if (is.null(version)) 
[13:35:48.911]                           version <- utils::packageVersion("future")
[13:35:48.911]                       }
[13:35:48.911]                       else {
[13:35:48.911]                         version <- NULL
[13:35:48.911]                       }
[13:35:48.911]                       if (!has_future || version < "1.8.0") {
[13:35:48.911]                         info <- base::c(r_version = base::gsub("R version ", 
[13:35:48.911]                           "", base::R.version$version.string), 
[13:35:48.911]                           platform = base::sprintf("%s (%s-bit)", 
[13:35:48.911]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:35:48.911]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:35:48.911]                             "release", "version")], collapse = " "), 
[13:35:48.911]                           hostname = base::Sys.info()[["nodename"]])
[13:35:48.911]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:35:48.911]                           info)
[13:35:48.911]                         info <- base::paste(info, collapse = "; ")
[13:35:48.911]                         if (!has_future) {
[13:35:48.911]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:35:48.911]                             info)
[13:35:48.911]                         }
[13:35:48.911]                         else {
[13:35:48.911]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:35:48.911]                             info, version)
[13:35:48.911]                         }
[13:35:48.911]                         base::stop(msg)
[13:35:48.911]                       }
[13:35:48.911]                     })
[13:35:48.911]                   }
[13:35:48.911]                   ...future.strategy.old <- future::plan("list")
[13:35:48.911]                   options(future.plan = NULL)
[13:35:48.911]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:35:48.911]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:35:48.911]                 }
[13:35:48.911]                 ...future.workdir <- getwd()
[13:35:48.911]             }
[13:35:48.911]             ...future.oldOptions <- base::as.list(base::.Options)
[13:35:48.911]             ...future.oldEnvVars <- base::Sys.getenv()
[13:35:48.911]         }
[13:35:48.911]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:35:48.911]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:35:48.911]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:35:48.911]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:35:48.911]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:35:48.911]             future.stdout.windows.reencode = NULL, width = 80L)
[13:35:48.911]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:35:48.911]             base::names(...future.oldOptions))
[13:35:48.911]     }
[13:35:48.911]     if (FALSE) {
[13:35:48.911]     }
[13:35:48.911]     else {
[13:35:48.911]         if (TRUE) {
[13:35:48.911]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:35:48.911]                 open = "w")
[13:35:48.911]         }
[13:35:48.911]         else {
[13:35:48.911]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:35:48.911]                 windows = "NUL", "/dev/null"), open = "w")
[13:35:48.911]         }
[13:35:48.911]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:35:48.911]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:35:48.911]             base::sink(type = "output", split = FALSE)
[13:35:48.911]             base::close(...future.stdout)
[13:35:48.911]         }, add = TRUE)
[13:35:48.911]     }
[13:35:48.911]     ...future.frame <- base::sys.nframe()
[13:35:48.911]     ...future.conditions <- base::list()
[13:35:48.911]     ...future.rng <- base::globalenv()$.Random.seed
[13:35:48.911]     if (FALSE) {
[13:35:48.911]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:35:48.911]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:35:48.911]     }
[13:35:48.911]     ...future.result <- base::tryCatch({
[13:35:48.911]         base::withCallingHandlers({
[13:35:48.911]             ...future.value <- base::withVisible(base::local({
[13:35:48.911]                 42L
[13:35:48.911]                 stop("Woops")
[13:35:48.911]             }))
[13:35:48.911]             future::FutureResult(value = ...future.value$value, 
[13:35:48.911]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:35:48.911]                   ...future.rng), globalenv = if (FALSE) 
[13:35:48.911]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:35:48.911]                     ...future.globalenv.names))
[13:35:48.911]                 else NULL, started = ...future.startTime, version = "1.8")
[13:35:48.911]         }, condition = base::local({
[13:35:48.911]             c <- base::c
[13:35:48.911]             inherits <- base::inherits
[13:35:48.911]             invokeRestart <- base::invokeRestart
[13:35:48.911]             length <- base::length
[13:35:48.911]             list <- base::list
[13:35:48.911]             seq.int <- base::seq.int
[13:35:48.911]             signalCondition <- base::signalCondition
[13:35:48.911]             sys.calls <- base::sys.calls
[13:35:48.911]             `[[` <- base::`[[`
[13:35:48.911]             `+` <- base::`+`
[13:35:48.911]             `<<-` <- base::`<<-`
[13:35:48.911]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:35:48.911]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:35:48.911]                   3L)]
[13:35:48.911]             }
[13:35:48.911]             function(cond) {
[13:35:48.911]                 is_error <- inherits(cond, "error")
[13:35:48.911]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:35:48.911]                   NULL)
[13:35:48.911]                 if (is_error) {
[13:35:48.911]                   sessionInformation <- function() {
[13:35:48.911]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:35:48.911]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:35:48.911]                       search = base::search(), system = base::Sys.info())
[13:35:48.911]                   }
[13:35:48.911]                   ...future.conditions[[length(...future.conditions) + 
[13:35:48.911]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:35:48.911]                     cond$call), session = sessionInformation(), 
[13:35:48.911]                     timestamp = base::Sys.time(), signaled = 0L)
[13:35:48.911]                   signalCondition(cond)
[13:35:48.911]                 }
[13:35:48.911]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:35:48.911]                 "immediateCondition"))) {
[13:35:48.911]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:35:48.911]                   ...future.conditions[[length(...future.conditions) + 
[13:35:48.911]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:35:48.911]                   if (TRUE && !signal) {
[13:35:48.911]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:35:48.911]                     {
[13:35:48.911]                       inherits <- base::inherits
[13:35:48.911]                       invokeRestart <- base::invokeRestart
[13:35:48.911]                       is.null <- base::is.null
[13:35:48.911]                       muffled <- FALSE
[13:35:48.911]                       if (inherits(cond, "message")) {
[13:35:48.911]                         muffled <- grepl(pattern, "muffleMessage")
[13:35:48.911]                         if (muffled) 
[13:35:48.911]                           invokeRestart("muffleMessage")
[13:35:48.911]                       }
[13:35:48.911]                       else if (inherits(cond, "warning")) {
[13:35:48.911]                         muffled <- grepl(pattern, "muffleWarning")
[13:35:48.911]                         if (muffled) 
[13:35:48.911]                           invokeRestart("muffleWarning")
[13:35:48.911]                       }
[13:35:48.911]                       else if (inherits(cond, "condition")) {
[13:35:48.911]                         if (!is.null(pattern)) {
[13:35:48.911]                           computeRestarts <- base::computeRestarts
[13:35:48.911]                           grepl <- base::grepl
[13:35:48.911]                           restarts <- computeRestarts(cond)
[13:35:48.911]                           for (restart in restarts) {
[13:35:48.911]                             name <- restart$name
[13:35:48.911]                             if (is.null(name)) 
[13:35:48.911]                               next
[13:35:48.911]                             if (!grepl(pattern, name)) 
[13:35:48.911]                               next
[13:35:48.911]                             invokeRestart(restart)
[13:35:48.911]                             muffled <- TRUE
[13:35:48.911]                             break
[13:35:48.911]                           }
[13:35:48.911]                         }
[13:35:48.911]                       }
[13:35:48.911]                       invisible(muffled)
[13:35:48.911]                     }
[13:35:48.911]                     muffleCondition(cond, pattern = "^muffle")
[13:35:48.911]                   }
[13:35:48.911]                 }
[13:35:48.911]                 else {
[13:35:48.911]                   if (TRUE) {
[13:35:48.911]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:35:48.911]                     {
[13:35:48.911]                       inherits <- base::inherits
[13:35:48.911]                       invokeRestart <- base::invokeRestart
[13:35:48.911]                       is.null <- base::is.null
[13:35:48.911]                       muffled <- FALSE
[13:35:48.911]                       if (inherits(cond, "message")) {
[13:35:48.911]                         muffled <- grepl(pattern, "muffleMessage")
[13:35:48.911]                         if (muffled) 
[13:35:48.911]                           invokeRestart("muffleMessage")
[13:35:48.911]                       }
[13:35:48.911]                       else if (inherits(cond, "warning")) {
[13:35:48.911]                         muffled <- grepl(pattern, "muffleWarning")
[13:35:48.911]                         if (muffled) 
[13:35:48.911]                           invokeRestart("muffleWarning")
[13:35:48.911]                       }
[13:35:48.911]                       else if (inherits(cond, "condition")) {
[13:35:48.911]                         if (!is.null(pattern)) {
[13:35:48.911]                           computeRestarts <- base::computeRestarts
[13:35:48.911]                           grepl <- base::grepl
[13:35:48.911]                           restarts <- computeRestarts(cond)
[13:35:48.911]                           for (restart in restarts) {
[13:35:48.911]                             name <- restart$name
[13:35:48.911]                             if (is.null(name)) 
[13:35:48.911]                               next
[13:35:48.911]                             if (!grepl(pattern, name)) 
[13:35:48.911]                               next
[13:35:48.911]                             invokeRestart(restart)
[13:35:48.911]                             muffled <- TRUE
[13:35:48.911]                             break
[13:35:48.911]                           }
[13:35:48.911]                         }
[13:35:48.911]                       }
[13:35:48.911]                       invisible(muffled)
[13:35:48.911]                     }
[13:35:48.911]                     muffleCondition(cond, pattern = "^muffle")
[13:35:48.911]                   }
[13:35:48.911]                 }
[13:35:48.911]             }
[13:35:48.911]         }))
[13:35:48.911]     }, error = function(ex) {
[13:35:48.911]         base::structure(base::list(value = NULL, visible = NULL, 
[13:35:48.911]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:35:48.911]                 ...future.rng), started = ...future.startTime, 
[13:35:48.911]             finished = Sys.time(), session_uuid = NA_character_, 
[13:35:48.911]             version = "1.8"), class = "FutureResult")
[13:35:48.911]     }, finally = {
[13:35:48.911]         if (!identical(...future.workdir, getwd())) 
[13:35:48.911]             setwd(...future.workdir)
[13:35:48.911]         {
[13:35:48.911]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:35:48.911]                 ...future.oldOptions$nwarnings <- NULL
[13:35:48.911]             }
[13:35:48.911]             base::options(...future.oldOptions)
[13:35:48.911]             if (.Platform$OS.type == "windows") {
[13:35:48.911]                 old_names <- names(...future.oldEnvVars)
[13:35:48.911]                 envs <- base::Sys.getenv()
[13:35:48.911]                 names <- names(envs)
[13:35:48.911]                 common <- intersect(names, old_names)
[13:35:48.911]                 added <- setdiff(names, old_names)
[13:35:48.911]                 removed <- setdiff(old_names, names)
[13:35:48.911]                 changed <- common[...future.oldEnvVars[common] != 
[13:35:48.911]                   envs[common]]
[13:35:48.911]                 NAMES <- toupper(changed)
[13:35:48.911]                 args <- list()
[13:35:48.911]                 for (kk in seq_along(NAMES)) {
[13:35:48.911]                   name <- changed[[kk]]
[13:35:48.911]                   NAME <- NAMES[[kk]]
[13:35:48.911]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:48.911]                     next
[13:35:48.911]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:35:48.911]                 }
[13:35:48.911]                 NAMES <- toupper(added)
[13:35:48.911]                 for (kk in seq_along(NAMES)) {
[13:35:48.911]                   name <- added[[kk]]
[13:35:48.911]                   NAME <- NAMES[[kk]]
[13:35:48.911]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:48.911]                     next
[13:35:48.911]                   args[[name]] <- ""
[13:35:48.911]                 }
[13:35:48.911]                 NAMES <- toupper(removed)
[13:35:48.911]                 for (kk in seq_along(NAMES)) {
[13:35:48.911]                   name <- removed[[kk]]
[13:35:48.911]                   NAME <- NAMES[[kk]]
[13:35:48.911]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:48.911]                     next
[13:35:48.911]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:35:48.911]                 }
[13:35:48.911]                 if (length(args) > 0) 
[13:35:48.911]                   base::do.call(base::Sys.setenv, args = args)
[13:35:48.911]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:35:48.911]             }
[13:35:48.911]             else {
[13:35:48.911]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:35:48.911]             }
[13:35:48.911]             {
[13:35:48.911]                 if (base::length(...future.futureOptionsAdded) > 
[13:35:48.911]                   0L) {
[13:35:48.911]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:35:48.911]                   base::names(opts) <- ...future.futureOptionsAdded
[13:35:48.911]                   base::options(opts)
[13:35:48.911]                 }
[13:35:48.911]                 {
[13:35:48.911]                   {
[13:35:48.911]                     NULL
[13:35:48.911]                     RNGkind("Mersenne-Twister")
[13:35:48.911]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:35:48.911]                       inherits = FALSE)
[13:35:48.911]                   }
[13:35:48.911]                   options(future.plan = NULL)
[13:35:48.911]                   if (is.na(NA_character_)) 
[13:35:48.911]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:35:48.911]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:35:48.911]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:35:48.911]                     .init = FALSE)
[13:35:48.911]                 }
[13:35:48.911]             }
[13:35:48.911]         }
[13:35:48.911]     })
[13:35:48.911]     if (TRUE) {
[13:35:48.911]         base::sink(type = "output", split = FALSE)
[13:35:48.911]         if (TRUE) {
[13:35:48.911]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:35:48.911]         }
[13:35:48.911]         else {
[13:35:48.911]             ...future.result["stdout"] <- base::list(NULL)
[13:35:48.911]         }
[13:35:48.911]         base::close(...future.stdout)
[13:35:48.911]         ...future.stdout <- NULL
[13:35:48.911]     }
[13:35:48.911]     ...future.result$conditions <- ...future.conditions
[13:35:48.911]     ...future.result$finished <- base::Sys.time()
[13:35:48.911]     ...future.result
[13:35:48.911] }
[13:35:48.913] plan(): Setting new future strategy stack:
[13:35:48.913] List of future strategies:
[13:35:48.913] 1. sequential:
[13:35:48.913]    - args: function (..., envir = parent.frame())
[13:35:48.913]    - tweaked: FALSE
[13:35:48.913]    - call: NULL
[13:35:48.913] plan(): nbrOfWorkers() = 1
[13:35:48.914] plan(): Setting new future strategy stack:
[13:35:48.914] List of future strategies:
[13:35:48.914] 1. sequential:
[13:35:48.914]    - args: function (..., envir = parent.frame())
[13:35:48.914]    - tweaked: FALSE
[13:35:48.914]    - call: future::plan("sequential")
[13:35:48.914] plan(): nbrOfWorkers() = 1
[13:35:48.915] SequentialFuture started (and completed)
[13:35:48.915] signalConditions() ...
[13:35:48.915]  - include = ‘immediateCondition’
[13:35:48.915]  - exclude = 
[13:35:48.915]  - resignal = FALSE
[13:35:48.915]  - Number of conditions: 1
[13:35:48.915] signalConditions() ... done
[13:35:48.915] - Launch lazy future ... done
[13:35:48.915] run() for ‘SequentialFuture’ ... done
> env[["b"]] %<-% { 42L; stop("Woops") }
[13:35:48.916] getGlobalsAndPackages() ...
[13:35:48.916] Searching for globals...
[13:35:48.917] - globals found: [2] ‘{’, ‘stop’
[13:35:48.917] Searching for globals ... DONE
[13:35:48.917] Resolving globals: FALSE
[13:35:48.917] 
[13:35:48.917] 
[13:35:48.917] getGlobalsAndPackages() ... DONE
[13:35:48.917] run() for ‘Future’ ...
[13:35:48.918] - state: ‘created’
[13:35:48.918] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:35:48.918] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:35:48.918] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:35:48.918]   - Field: ‘label’
[13:35:48.918]   - Field: ‘local’
[13:35:48.918]   - Field: ‘owner’
[13:35:48.918]   - Field: ‘envir’
[13:35:48.919]   - Field: ‘packages’
[13:35:48.919]   - Field: ‘gc’
[13:35:48.919]   - Field: ‘conditions’
[13:35:48.919]   - Field: ‘expr’
[13:35:48.919]   - Field: ‘uuid’
[13:35:48.919]   - Field: ‘seed’
[13:35:48.919]   - Field: ‘version’
[13:35:48.919]   - Field: ‘result’
[13:35:48.919]   - Field: ‘asynchronous’
[13:35:48.919]   - Field: ‘calls’
[13:35:48.919]   - Field: ‘globals’
[13:35:48.919]   - Field: ‘stdout’
[13:35:48.920]   - Field: ‘earlySignal’
[13:35:48.920]   - Field: ‘lazy’
[13:35:48.920]   - Field: ‘state’
[13:35:48.920] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:35:48.920] - Launch lazy future ...
[13:35:48.920] Packages needed by the future expression (n = 0): <none>
[13:35:48.920] Packages needed by future strategies (n = 0): <none>
[13:35:48.921] {
[13:35:48.921]     {
[13:35:48.921]         {
[13:35:48.921]             ...future.startTime <- base::Sys.time()
[13:35:48.921]             {
[13:35:48.921]                 {
[13:35:48.921]                   {
[13:35:48.921]                     base::local({
[13:35:48.921]                       has_future <- base::requireNamespace("future", 
[13:35:48.921]                         quietly = TRUE)
[13:35:48.921]                       if (has_future) {
[13:35:48.921]                         ns <- base::getNamespace("future")
[13:35:48.921]                         version <- ns[[".package"]][["version"]]
[13:35:48.921]                         if (is.null(version)) 
[13:35:48.921]                           version <- utils::packageVersion("future")
[13:35:48.921]                       }
[13:35:48.921]                       else {
[13:35:48.921]                         version <- NULL
[13:35:48.921]                       }
[13:35:48.921]                       if (!has_future || version < "1.8.0") {
[13:35:48.921]                         info <- base::c(r_version = base::gsub("R version ", 
[13:35:48.921]                           "", base::R.version$version.string), 
[13:35:48.921]                           platform = base::sprintf("%s (%s-bit)", 
[13:35:48.921]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:35:48.921]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:35:48.921]                             "release", "version")], collapse = " "), 
[13:35:48.921]                           hostname = base::Sys.info()[["nodename"]])
[13:35:48.921]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:35:48.921]                           info)
[13:35:48.921]                         info <- base::paste(info, collapse = "; ")
[13:35:48.921]                         if (!has_future) {
[13:35:48.921]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:35:48.921]                             info)
[13:35:48.921]                         }
[13:35:48.921]                         else {
[13:35:48.921]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:35:48.921]                             info, version)
[13:35:48.921]                         }
[13:35:48.921]                         base::stop(msg)
[13:35:48.921]                       }
[13:35:48.921]                     })
[13:35:48.921]                   }
[13:35:48.921]                   ...future.strategy.old <- future::plan("list")
[13:35:48.921]                   options(future.plan = NULL)
[13:35:48.921]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:35:48.921]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:35:48.921]                 }
[13:35:48.921]                 ...future.workdir <- getwd()
[13:35:48.921]             }
[13:35:48.921]             ...future.oldOptions <- base::as.list(base::.Options)
[13:35:48.921]             ...future.oldEnvVars <- base::Sys.getenv()
[13:35:48.921]         }
[13:35:48.921]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:35:48.921]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:35:48.921]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:35:48.921]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:35:48.921]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:35:48.921]             future.stdout.windows.reencode = NULL, width = 80L)
[13:35:48.921]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:35:48.921]             base::names(...future.oldOptions))
[13:35:48.921]     }
[13:35:48.921]     if (FALSE) {
[13:35:48.921]     }
[13:35:48.921]     else {
[13:35:48.921]         if (TRUE) {
[13:35:48.921]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:35:48.921]                 open = "w")
[13:35:48.921]         }
[13:35:48.921]         else {
[13:35:48.921]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:35:48.921]                 windows = "NUL", "/dev/null"), open = "w")
[13:35:48.921]         }
[13:35:48.921]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:35:48.921]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:35:48.921]             base::sink(type = "output", split = FALSE)
[13:35:48.921]             base::close(...future.stdout)
[13:35:48.921]         }, add = TRUE)
[13:35:48.921]     }
[13:35:48.921]     ...future.frame <- base::sys.nframe()
[13:35:48.921]     ...future.conditions <- base::list()
[13:35:48.921]     ...future.rng <- base::globalenv()$.Random.seed
[13:35:48.921]     if (FALSE) {
[13:35:48.921]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:35:48.921]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:35:48.921]     }
[13:35:48.921]     ...future.result <- base::tryCatch({
[13:35:48.921]         base::withCallingHandlers({
[13:35:48.921]             ...future.value <- base::withVisible(base::local({
[13:35:48.921]                 42L
[13:35:48.921]                 stop("Woops")
[13:35:48.921]             }))
[13:35:48.921]             future::FutureResult(value = ...future.value$value, 
[13:35:48.921]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:35:48.921]                   ...future.rng), globalenv = if (FALSE) 
[13:35:48.921]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:35:48.921]                     ...future.globalenv.names))
[13:35:48.921]                 else NULL, started = ...future.startTime, version = "1.8")
[13:35:48.921]         }, condition = base::local({
[13:35:48.921]             c <- base::c
[13:35:48.921]             inherits <- base::inherits
[13:35:48.921]             invokeRestart <- base::invokeRestart
[13:35:48.921]             length <- base::length
[13:35:48.921]             list <- base::list
[13:35:48.921]             seq.int <- base::seq.int
[13:35:48.921]             signalCondition <- base::signalCondition
[13:35:48.921]             sys.calls <- base::sys.calls
[13:35:48.921]             `[[` <- base::`[[`
[13:35:48.921]             `+` <- base::`+`
[13:35:48.921]             `<<-` <- base::`<<-`
[13:35:48.921]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:35:48.921]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:35:48.921]                   3L)]
[13:35:48.921]             }
[13:35:48.921]             function(cond) {
[13:35:48.921]                 is_error <- inherits(cond, "error")
[13:35:48.921]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:35:48.921]                   NULL)
[13:35:48.921]                 if (is_error) {
[13:35:48.921]                   sessionInformation <- function() {
[13:35:48.921]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:35:48.921]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:35:48.921]                       search = base::search(), system = base::Sys.info())
[13:35:48.921]                   }
[13:35:48.921]                   ...future.conditions[[length(...future.conditions) + 
[13:35:48.921]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:35:48.921]                     cond$call), session = sessionInformation(), 
[13:35:48.921]                     timestamp = base::Sys.time(), signaled = 0L)
[13:35:48.921]                   signalCondition(cond)
[13:35:48.921]                 }
[13:35:48.921]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:35:48.921]                 "immediateCondition"))) {
[13:35:48.921]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:35:48.921]                   ...future.conditions[[length(...future.conditions) + 
[13:35:48.921]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:35:48.921]                   if (TRUE && !signal) {
[13:35:48.921]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:35:48.921]                     {
[13:35:48.921]                       inherits <- base::inherits
[13:35:48.921]                       invokeRestart <- base::invokeRestart
[13:35:48.921]                       is.null <- base::is.null
[13:35:48.921]                       muffled <- FALSE
[13:35:48.921]                       if (inherits(cond, "message")) {
[13:35:48.921]                         muffled <- grepl(pattern, "muffleMessage")
[13:35:48.921]                         if (muffled) 
[13:35:48.921]                           invokeRestart("muffleMessage")
[13:35:48.921]                       }
[13:35:48.921]                       else if (inherits(cond, "warning")) {
[13:35:48.921]                         muffled <- grepl(pattern, "muffleWarning")
[13:35:48.921]                         if (muffled) 
[13:35:48.921]                           invokeRestart("muffleWarning")
[13:35:48.921]                       }
[13:35:48.921]                       else if (inherits(cond, "condition")) {
[13:35:48.921]                         if (!is.null(pattern)) {
[13:35:48.921]                           computeRestarts <- base::computeRestarts
[13:35:48.921]                           grepl <- base::grepl
[13:35:48.921]                           restarts <- computeRestarts(cond)
[13:35:48.921]                           for (restart in restarts) {
[13:35:48.921]                             name <- restart$name
[13:35:48.921]                             if (is.null(name)) 
[13:35:48.921]                               next
[13:35:48.921]                             if (!grepl(pattern, name)) 
[13:35:48.921]                               next
[13:35:48.921]                             invokeRestart(restart)
[13:35:48.921]                             muffled <- TRUE
[13:35:48.921]                             break
[13:35:48.921]                           }
[13:35:48.921]                         }
[13:35:48.921]                       }
[13:35:48.921]                       invisible(muffled)
[13:35:48.921]                     }
[13:35:48.921]                     muffleCondition(cond, pattern = "^muffle")
[13:35:48.921]                   }
[13:35:48.921]                 }
[13:35:48.921]                 else {
[13:35:48.921]                   if (TRUE) {
[13:35:48.921]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:35:48.921]                     {
[13:35:48.921]                       inherits <- base::inherits
[13:35:48.921]                       invokeRestart <- base::invokeRestart
[13:35:48.921]                       is.null <- base::is.null
[13:35:48.921]                       muffled <- FALSE
[13:35:48.921]                       if (inherits(cond, "message")) {
[13:35:48.921]                         muffled <- grepl(pattern, "muffleMessage")
[13:35:48.921]                         if (muffled) 
[13:35:48.921]                           invokeRestart("muffleMessage")
[13:35:48.921]                       }
[13:35:48.921]                       else if (inherits(cond, "warning")) {
[13:35:48.921]                         muffled <- grepl(pattern, "muffleWarning")
[13:35:48.921]                         if (muffled) 
[13:35:48.921]                           invokeRestart("muffleWarning")
[13:35:48.921]                       }
[13:35:48.921]                       else if (inherits(cond, "condition")) {
[13:35:48.921]                         if (!is.null(pattern)) {
[13:35:48.921]                           computeRestarts <- base::computeRestarts
[13:35:48.921]                           grepl <- base::grepl
[13:35:48.921]                           restarts <- computeRestarts(cond)
[13:35:48.921]                           for (restart in restarts) {
[13:35:48.921]                             name <- restart$name
[13:35:48.921]                             if (is.null(name)) 
[13:35:48.921]                               next
[13:35:48.921]                             if (!grepl(pattern, name)) 
[13:35:48.921]                               next
[13:35:48.921]                             invokeRestart(restart)
[13:35:48.921]                             muffled <- TRUE
[13:35:48.921]                             break
[13:35:48.921]                           }
[13:35:48.921]                         }
[13:35:48.921]                       }
[13:35:48.921]                       invisible(muffled)
[13:35:48.921]                     }
[13:35:48.921]                     muffleCondition(cond, pattern = "^muffle")
[13:35:48.921]                   }
[13:35:48.921]                 }
[13:35:48.921]             }
[13:35:48.921]         }))
[13:35:48.921]     }, error = function(ex) {
[13:35:48.921]         base::structure(base::list(value = NULL, visible = NULL, 
[13:35:48.921]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:35:48.921]                 ...future.rng), started = ...future.startTime, 
[13:35:48.921]             finished = Sys.time(), session_uuid = NA_character_, 
[13:35:48.921]             version = "1.8"), class = "FutureResult")
[13:35:48.921]     }, finally = {
[13:35:48.921]         if (!identical(...future.workdir, getwd())) 
[13:35:48.921]             setwd(...future.workdir)
[13:35:48.921]         {
[13:35:48.921]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:35:48.921]                 ...future.oldOptions$nwarnings <- NULL
[13:35:48.921]             }
[13:35:48.921]             base::options(...future.oldOptions)
[13:35:48.921]             if (.Platform$OS.type == "windows") {
[13:35:48.921]                 old_names <- names(...future.oldEnvVars)
[13:35:48.921]                 envs <- base::Sys.getenv()
[13:35:48.921]                 names <- names(envs)
[13:35:48.921]                 common <- intersect(names, old_names)
[13:35:48.921]                 added <- setdiff(names, old_names)
[13:35:48.921]                 removed <- setdiff(old_names, names)
[13:35:48.921]                 changed <- common[...future.oldEnvVars[common] != 
[13:35:48.921]                   envs[common]]
[13:35:48.921]                 NAMES <- toupper(changed)
[13:35:48.921]                 args <- list()
[13:35:48.921]                 for (kk in seq_along(NAMES)) {
[13:35:48.921]                   name <- changed[[kk]]
[13:35:48.921]                   NAME <- NAMES[[kk]]
[13:35:48.921]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:48.921]                     next
[13:35:48.921]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:35:48.921]                 }
[13:35:48.921]                 NAMES <- toupper(added)
[13:35:48.921]                 for (kk in seq_along(NAMES)) {
[13:35:48.921]                   name <- added[[kk]]
[13:35:48.921]                   NAME <- NAMES[[kk]]
[13:35:48.921]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:48.921]                     next
[13:35:48.921]                   args[[name]] <- ""
[13:35:48.921]                 }
[13:35:48.921]                 NAMES <- toupper(removed)
[13:35:48.921]                 for (kk in seq_along(NAMES)) {
[13:35:48.921]                   name <- removed[[kk]]
[13:35:48.921]                   NAME <- NAMES[[kk]]
[13:35:48.921]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:48.921]                     next
[13:35:48.921]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:35:48.921]                 }
[13:35:48.921]                 if (length(args) > 0) 
[13:35:48.921]                   base::do.call(base::Sys.setenv, args = args)
[13:35:48.921]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:35:48.921]             }
[13:35:48.921]             else {
[13:35:48.921]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:35:48.921]             }
[13:35:48.921]             {
[13:35:48.921]                 if (base::length(...future.futureOptionsAdded) > 
[13:35:48.921]                   0L) {
[13:35:48.921]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:35:48.921]                   base::names(opts) <- ...future.futureOptionsAdded
[13:35:48.921]                   base::options(opts)
[13:35:48.921]                 }
[13:35:48.921]                 {
[13:35:48.921]                   {
[13:35:48.921]                     NULL
[13:35:48.921]                     RNGkind("Mersenne-Twister")
[13:35:48.921]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:35:48.921]                       inherits = FALSE)
[13:35:48.921]                   }
[13:35:48.921]                   options(future.plan = NULL)
[13:35:48.921]                   if (is.na(NA_character_)) 
[13:35:48.921]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:35:48.921]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:35:48.921]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:35:48.921]                     .init = FALSE)
[13:35:48.921]                 }
[13:35:48.921]             }
[13:35:48.921]         }
[13:35:48.921]     })
[13:35:48.921]     if (TRUE) {
[13:35:48.921]         base::sink(type = "output", split = FALSE)
[13:35:48.921]         if (TRUE) {
[13:35:48.921]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:35:48.921]         }
[13:35:48.921]         else {
[13:35:48.921]             ...future.result["stdout"] <- base::list(NULL)
[13:35:48.921]         }
[13:35:48.921]         base::close(...future.stdout)
[13:35:48.921]         ...future.stdout <- NULL
[13:35:48.921]     }
[13:35:48.921]     ...future.result$conditions <- ...future.conditions
[13:35:48.921]     ...future.result$finished <- base::Sys.time()
[13:35:48.921]     ...future.result
[13:35:48.921] }
[13:35:48.922] plan(): Setting new future strategy stack:
[13:35:48.922] List of future strategies:
[13:35:48.922] 1. sequential:
[13:35:48.922]    - args: function (..., envir = parent.frame())
[13:35:48.922]    - tweaked: FALSE
[13:35:48.922]    - call: NULL
[13:35:48.923] plan(): nbrOfWorkers() = 1
[13:35:48.923] plan(): Setting new future strategy stack:
[13:35:48.924] List of future strategies:
[13:35:48.924] 1. sequential:
[13:35:48.924]    - args: function (..., envir = parent.frame())
[13:35:48.924]    - tweaked: FALSE
[13:35:48.924]    - call: future::plan("sequential")
[13:35:48.924] plan(): nbrOfWorkers() = 1
[13:35:48.924] SequentialFuture started (and completed)
[13:35:48.924] signalConditions() ...
[13:35:48.924]  - include = ‘immediateCondition’
[13:35:48.924]  - exclude = 
[13:35:48.924]  - resignal = FALSE
[13:35:48.925]  - Number of conditions: 1
[13:35:48.925] signalConditions() ... done
[13:35:48.925] - Launch lazy future ... done
[13:35:48.925] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(env[["b"]])
[13:35:48.925] resolved() for ‘SequentialFuture’ ...
[13:35:48.925] - state: ‘finished’
[13:35:48.925] - run: TRUE
[13:35:48.925] - result: ‘FutureResult’
[13:35:48.925] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
env[["b"]] %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> lenv <- listenv::listenv()
> lenv[[1]] %<-% { 42L; stop("Woops") }
[13:35:48.927] getGlobalsAndPackages() ...
[13:35:48.927] Searching for globals...
[13:35:48.928] - globals found: [2] ‘{’, ‘stop’
[13:35:48.928] Searching for globals ... DONE
[13:35:48.928] Resolving globals: FALSE
[13:35:48.928] 
[13:35:48.928] 
[13:35:48.928] getGlobalsAndPackages() ... DONE
[13:35:48.928] run() for ‘Future’ ...
[13:35:48.928] - state: ‘created’
[13:35:48.929] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:35:48.929] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:35:48.929] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:35:48.929]   - Field: ‘label’
[13:35:48.929]   - Field: ‘local’
[13:35:48.929]   - Field: ‘owner’
[13:35:48.929]   - Field: ‘envir’
[13:35:48.929]   - Field: ‘packages’
[13:35:48.929]   - Field: ‘gc’
[13:35:48.930]   - Field: ‘conditions’
[13:35:48.930]   - Field: ‘expr’
[13:35:48.930]   - Field: ‘uuid’
[13:35:48.930]   - Field: ‘seed’
[13:35:48.930]   - Field: ‘version’
[13:35:48.930]   - Field: ‘result’
[13:35:48.930]   - Field: ‘asynchronous’
[13:35:48.930]   - Field: ‘calls’
[13:35:48.930]   - Field: ‘globals’
[13:35:48.930]   - Field: ‘stdout’
[13:35:48.930]   - Field: ‘earlySignal’
[13:35:48.931]   - Field: ‘lazy’
[13:35:48.931]   - Field: ‘state’
[13:35:48.931] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:35:48.931] - Launch lazy future ...
[13:35:48.931] Packages needed by the future expression (n = 0): <none>
[13:35:48.931] Packages needed by future strategies (n = 0): <none>
[13:35:48.931] {
[13:35:48.931]     {
[13:35:48.931]         {
[13:35:48.931]             ...future.startTime <- base::Sys.time()
[13:35:48.931]             {
[13:35:48.931]                 {
[13:35:48.931]                   {
[13:35:48.931]                     base::local({
[13:35:48.931]                       has_future <- base::requireNamespace("future", 
[13:35:48.931]                         quietly = TRUE)
[13:35:48.931]                       if (has_future) {
[13:35:48.931]                         ns <- base::getNamespace("future")
[13:35:48.931]                         version <- ns[[".package"]][["version"]]
[13:35:48.931]                         if (is.null(version)) 
[13:35:48.931]                           version <- utils::packageVersion("future")
[13:35:48.931]                       }
[13:35:48.931]                       else {
[13:35:48.931]                         version <- NULL
[13:35:48.931]                       }
[13:35:48.931]                       if (!has_future || version < "1.8.0") {
[13:35:48.931]                         info <- base::c(r_version = base::gsub("R version ", 
[13:35:48.931]                           "", base::R.version$version.string), 
[13:35:48.931]                           platform = base::sprintf("%s (%s-bit)", 
[13:35:48.931]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:35:48.931]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:35:48.931]                             "release", "version")], collapse = " "), 
[13:35:48.931]                           hostname = base::Sys.info()[["nodename"]])
[13:35:48.931]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:35:48.931]                           info)
[13:35:48.931]                         info <- base::paste(info, collapse = "; ")
[13:35:48.931]                         if (!has_future) {
[13:35:48.931]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:35:48.931]                             info)
[13:35:48.931]                         }
[13:35:48.931]                         else {
[13:35:48.931]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:35:48.931]                             info, version)
[13:35:48.931]                         }
[13:35:48.931]                         base::stop(msg)
[13:35:48.931]                       }
[13:35:48.931]                     })
[13:35:48.931]                   }
[13:35:48.931]                   ...future.strategy.old <- future::plan("list")
[13:35:48.931]                   options(future.plan = NULL)
[13:35:48.931]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:35:48.931]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:35:48.931]                 }
[13:35:48.931]                 ...future.workdir <- getwd()
[13:35:48.931]             }
[13:35:48.931]             ...future.oldOptions <- base::as.list(base::.Options)
[13:35:48.931]             ...future.oldEnvVars <- base::Sys.getenv()
[13:35:48.931]         }
[13:35:48.931]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:35:48.931]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:35:48.931]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:35:48.931]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:35:48.931]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:35:48.931]             future.stdout.windows.reencode = NULL, width = 80L)
[13:35:48.931]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:35:48.931]             base::names(...future.oldOptions))
[13:35:48.931]     }
[13:35:48.931]     if (FALSE) {
[13:35:48.931]     }
[13:35:48.931]     else {
[13:35:48.931]         if (TRUE) {
[13:35:48.931]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:35:48.931]                 open = "w")
[13:35:48.931]         }
[13:35:48.931]         else {
[13:35:48.931]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:35:48.931]                 windows = "NUL", "/dev/null"), open = "w")
[13:35:48.931]         }
[13:35:48.931]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:35:48.931]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:35:48.931]             base::sink(type = "output", split = FALSE)
[13:35:48.931]             base::close(...future.stdout)
[13:35:48.931]         }, add = TRUE)
[13:35:48.931]     }
[13:35:48.931]     ...future.frame <- base::sys.nframe()
[13:35:48.931]     ...future.conditions <- base::list()
[13:35:48.931]     ...future.rng <- base::globalenv()$.Random.seed
[13:35:48.931]     if (FALSE) {
[13:35:48.931]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:35:48.931]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:35:48.931]     }
[13:35:48.931]     ...future.result <- base::tryCatch({
[13:35:48.931]         base::withCallingHandlers({
[13:35:48.931]             ...future.value <- base::withVisible(base::local({
[13:35:48.931]                 42L
[13:35:48.931]                 stop("Woops")
[13:35:48.931]             }))
[13:35:48.931]             future::FutureResult(value = ...future.value$value, 
[13:35:48.931]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:35:48.931]                   ...future.rng), globalenv = if (FALSE) 
[13:35:48.931]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:35:48.931]                     ...future.globalenv.names))
[13:35:48.931]                 else NULL, started = ...future.startTime, version = "1.8")
[13:35:48.931]         }, condition = base::local({
[13:35:48.931]             c <- base::c
[13:35:48.931]             inherits <- base::inherits
[13:35:48.931]             invokeRestart <- base::invokeRestart
[13:35:48.931]             length <- base::length
[13:35:48.931]             list <- base::list
[13:35:48.931]             seq.int <- base::seq.int
[13:35:48.931]             signalCondition <- base::signalCondition
[13:35:48.931]             sys.calls <- base::sys.calls
[13:35:48.931]             `[[` <- base::`[[`
[13:35:48.931]             `+` <- base::`+`
[13:35:48.931]             `<<-` <- base::`<<-`
[13:35:48.931]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:35:48.931]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:35:48.931]                   3L)]
[13:35:48.931]             }
[13:35:48.931]             function(cond) {
[13:35:48.931]                 is_error <- inherits(cond, "error")
[13:35:48.931]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:35:48.931]                   NULL)
[13:35:48.931]                 if (is_error) {
[13:35:48.931]                   sessionInformation <- function() {
[13:35:48.931]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:35:48.931]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:35:48.931]                       search = base::search(), system = base::Sys.info())
[13:35:48.931]                   }
[13:35:48.931]                   ...future.conditions[[length(...future.conditions) + 
[13:35:48.931]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:35:48.931]                     cond$call), session = sessionInformation(), 
[13:35:48.931]                     timestamp = base::Sys.time(), signaled = 0L)
[13:35:48.931]                   signalCondition(cond)
[13:35:48.931]                 }
[13:35:48.931]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:35:48.931]                 "immediateCondition"))) {
[13:35:48.931]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:35:48.931]                   ...future.conditions[[length(...future.conditions) + 
[13:35:48.931]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:35:48.931]                   if (TRUE && !signal) {
[13:35:48.931]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:35:48.931]                     {
[13:35:48.931]                       inherits <- base::inherits
[13:35:48.931]                       invokeRestart <- base::invokeRestart
[13:35:48.931]                       is.null <- base::is.null
[13:35:48.931]                       muffled <- FALSE
[13:35:48.931]                       if (inherits(cond, "message")) {
[13:35:48.931]                         muffled <- grepl(pattern, "muffleMessage")
[13:35:48.931]                         if (muffled) 
[13:35:48.931]                           invokeRestart("muffleMessage")
[13:35:48.931]                       }
[13:35:48.931]                       else if (inherits(cond, "warning")) {
[13:35:48.931]                         muffled <- grepl(pattern, "muffleWarning")
[13:35:48.931]                         if (muffled) 
[13:35:48.931]                           invokeRestart("muffleWarning")
[13:35:48.931]                       }
[13:35:48.931]                       else if (inherits(cond, "condition")) {
[13:35:48.931]                         if (!is.null(pattern)) {
[13:35:48.931]                           computeRestarts <- base::computeRestarts
[13:35:48.931]                           grepl <- base::grepl
[13:35:48.931]                           restarts <- computeRestarts(cond)
[13:35:48.931]                           for (restart in restarts) {
[13:35:48.931]                             name <- restart$name
[13:35:48.931]                             if (is.null(name)) 
[13:35:48.931]                               next
[13:35:48.931]                             if (!grepl(pattern, name)) 
[13:35:48.931]                               next
[13:35:48.931]                             invokeRestart(restart)
[13:35:48.931]                             muffled <- TRUE
[13:35:48.931]                             break
[13:35:48.931]                           }
[13:35:48.931]                         }
[13:35:48.931]                       }
[13:35:48.931]                       invisible(muffled)
[13:35:48.931]                     }
[13:35:48.931]                     muffleCondition(cond, pattern = "^muffle")
[13:35:48.931]                   }
[13:35:48.931]                 }
[13:35:48.931]                 else {
[13:35:48.931]                   if (TRUE) {
[13:35:48.931]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:35:48.931]                     {
[13:35:48.931]                       inherits <- base::inherits
[13:35:48.931]                       invokeRestart <- base::invokeRestart
[13:35:48.931]                       is.null <- base::is.null
[13:35:48.931]                       muffled <- FALSE
[13:35:48.931]                       if (inherits(cond, "message")) {
[13:35:48.931]                         muffled <- grepl(pattern, "muffleMessage")
[13:35:48.931]                         if (muffled) 
[13:35:48.931]                           invokeRestart("muffleMessage")
[13:35:48.931]                       }
[13:35:48.931]                       else if (inherits(cond, "warning")) {
[13:35:48.931]                         muffled <- grepl(pattern, "muffleWarning")
[13:35:48.931]                         if (muffled) 
[13:35:48.931]                           invokeRestart("muffleWarning")
[13:35:48.931]                       }
[13:35:48.931]                       else if (inherits(cond, "condition")) {
[13:35:48.931]                         if (!is.null(pattern)) {
[13:35:48.931]                           computeRestarts <- base::computeRestarts
[13:35:48.931]                           grepl <- base::grepl
[13:35:48.931]                           restarts <- computeRestarts(cond)
[13:35:48.931]                           for (restart in restarts) {
[13:35:48.931]                             name <- restart$name
[13:35:48.931]                             if (is.null(name)) 
[13:35:48.931]                               next
[13:35:48.931]                             if (!grepl(pattern, name)) 
[13:35:48.931]                               next
[13:35:48.931]                             invokeRestart(restart)
[13:35:48.931]                             muffled <- TRUE
[13:35:48.931]                             break
[13:35:48.931]                           }
[13:35:48.931]                         }
[13:35:48.931]                       }
[13:35:48.931]                       invisible(muffled)
[13:35:48.931]                     }
[13:35:48.931]                     muffleCondition(cond, pattern = "^muffle")
[13:35:48.931]                   }
[13:35:48.931]                 }
[13:35:48.931]             }
[13:35:48.931]         }))
[13:35:48.931]     }, error = function(ex) {
[13:35:48.931]         base::structure(base::list(value = NULL, visible = NULL, 
[13:35:48.931]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:35:48.931]                 ...future.rng), started = ...future.startTime, 
[13:35:48.931]             finished = Sys.time(), session_uuid = NA_character_, 
[13:35:48.931]             version = "1.8"), class = "FutureResult")
[13:35:48.931]     }, finally = {
[13:35:48.931]         if (!identical(...future.workdir, getwd())) 
[13:35:48.931]             setwd(...future.workdir)
[13:35:48.931]         {
[13:35:48.931]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:35:48.931]                 ...future.oldOptions$nwarnings <- NULL
[13:35:48.931]             }
[13:35:48.931]             base::options(...future.oldOptions)
[13:35:48.931]             if (.Platform$OS.type == "windows") {
[13:35:48.931]                 old_names <- names(...future.oldEnvVars)
[13:35:48.931]                 envs <- base::Sys.getenv()
[13:35:48.931]                 names <- names(envs)
[13:35:48.931]                 common <- intersect(names, old_names)
[13:35:48.931]                 added <- setdiff(names, old_names)
[13:35:48.931]                 removed <- setdiff(old_names, names)
[13:35:48.931]                 changed <- common[...future.oldEnvVars[common] != 
[13:35:48.931]                   envs[common]]
[13:35:48.931]                 NAMES <- toupper(changed)
[13:35:48.931]                 args <- list()
[13:35:48.931]                 for (kk in seq_along(NAMES)) {
[13:35:48.931]                   name <- changed[[kk]]
[13:35:48.931]                   NAME <- NAMES[[kk]]
[13:35:48.931]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:48.931]                     next
[13:35:48.931]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:35:48.931]                 }
[13:35:48.931]                 NAMES <- toupper(added)
[13:35:48.931]                 for (kk in seq_along(NAMES)) {
[13:35:48.931]                   name <- added[[kk]]
[13:35:48.931]                   NAME <- NAMES[[kk]]
[13:35:48.931]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:48.931]                     next
[13:35:48.931]                   args[[name]] <- ""
[13:35:48.931]                 }
[13:35:48.931]                 NAMES <- toupper(removed)
[13:35:48.931]                 for (kk in seq_along(NAMES)) {
[13:35:48.931]                   name <- removed[[kk]]
[13:35:48.931]                   NAME <- NAMES[[kk]]
[13:35:48.931]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:48.931]                     next
[13:35:48.931]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:35:48.931]                 }
[13:35:48.931]                 if (length(args) > 0) 
[13:35:48.931]                   base::do.call(base::Sys.setenv, args = args)
[13:35:48.931]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:35:48.931]             }
[13:35:48.931]             else {
[13:35:48.931]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:35:48.931]             }
[13:35:48.931]             {
[13:35:48.931]                 if (base::length(...future.futureOptionsAdded) > 
[13:35:48.931]                   0L) {
[13:35:48.931]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:35:48.931]                   base::names(opts) <- ...future.futureOptionsAdded
[13:35:48.931]                   base::options(opts)
[13:35:48.931]                 }
[13:35:48.931]                 {
[13:35:48.931]                   {
[13:35:48.931]                     NULL
[13:35:48.931]                     RNGkind("Mersenne-Twister")
[13:35:48.931]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:35:48.931]                       inherits = FALSE)
[13:35:48.931]                   }
[13:35:48.931]                   options(future.plan = NULL)
[13:35:48.931]                   if (is.na(NA_character_)) 
[13:35:48.931]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:35:48.931]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:35:48.931]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:35:48.931]                     .init = FALSE)
[13:35:48.931]                 }
[13:35:48.931]             }
[13:35:48.931]         }
[13:35:48.931]     })
[13:35:48.931]     if (TRUE) {
[13:35:48.931]         base::sink(type = "output", split = FALSE)
[13:35:48.931]         if (TRUE) {
[13:35:48.931]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:35:48.931]         }
[13:35:48.931]         else {
[13:35:48.931]             ...future.result["stdout"] <- base::list(NULL)
[13:35:48.931]         }
[13:35:48.931]         base::close(...future.stdout)
[13:35:48.931]         ...future.stdout <- NULL
[13:35:48.931]     }
[13:35:48.931]     ...future.result$conditions <- ...future.conditions
[13:35:48.931]     ...future.result$finished <- base::Sys.time()
[13:35:48.931]     ...future.result
[13:35:48.931] }
[13:35:48.933] plan(): Setting new future strategy stack:
[13:35:48.933] List of future strategies:
[13:35:48.933] 1. sequential:
[13:35:48.933]    - args: function (..., envir = parent.frame())
[13:35:48.933]    - tweaked: FALSE
[13:35:48.933]    - call: NULL
[13:35:48.934] plan(): nbrOfWorkers() = 1
[13:35:48.934] plan(): Setting new future strategy stack:
[13:35:48.934] List of future strategies:
[13:35:48.934] 1. sequential:
[13:35:48.934]    - args: function (..., envir = parent.frame())
[13:35:48.934]    - tweaked: FALSE
[13:35:48.934]    - call: future::plan("sequential")
[13:35:48.935] plan(): nbrOfWorkers() = 1
[13:35:48.935] SequentialFuture started (and completed)
[13:35:48.935] signalConditions() ...
[13:35:48.935]  - include = ‘immediateCondition’
[13:35:48.935]  - exclude = 
[13:35:48.935]  - resignal = FALSE
[13:35:48.935]  - Number of conditions: 1
[13:35:48.935] signalConditions() ... done
[13:35:48.936] - Launch lazy future ... done
[13:35:48.936] run() for ‘SequentialFuture’ ... done
> lenv[[2]] %<-% { 42L; stop("Woops") }
[13:35:48.936] getGlobalsAndPackages() ...
[13:35:48.936] Searching for globals...
[13:35:48.937] - globals found: [2] ‘{’, ‘stop’
[13:35:48.937] Searching for globals ... DONE
[13:35:48.937] Resolving globals: FALSE
[13:35:48.937] 
[13:35:48.937] 
[13:35:48.938] getGlobalsAndPackages() ... DONE
[13:35:48.938] run() for ‘Future’ ...
[13:35:48.938] - state: ‘created’
[13:35:48.938] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:35:48.938] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:35:48.938] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:35:48.938]   - Field: ‘label’
[13:35:48.940]   - Field: ‘local’
[13:35:48.940]   - Field: ‘owner’
[13:35:48.940]   - Field: ‘envir’
[13:35:48.940]   - Field: ‘packages’
[13:35:48.940]   - Field: ‘gc’
[13:35:48.940]   - Field: ‘conditions’
[13:35:48.940]   - Field: ‘expr’
[13:35:48.940]   - Field: ‘uuid’
[13:35:48.940]   - Field: ‘seed’
[13:35:48.940]   - Field: ‘version’
[13:35:48.941]   - Field: ‘result’
[13:35:48.941]   - Field: ‘asynchronous’
[13:35:48.941]   - Field: ‘calls’
[13:35:48.941]   - Field: ‘globals’
[13:35:48.941]   - Field: ‘stdout’
[13:35:48.941]   - Field: ‘earlySignal’
[13:35:48.941]   - Field: ‘lazy’
[13:35:48.941]   - Field: ‘state’
[13:35:48.941] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:35:48.941] - Launch lazy future ...
[13:35:48.942] Packages needed by the future expression (n = 0): <none>
[13:35:48.942] Packages needed by future strategies (n = 0): <none>
[13:35:48.942] {
[13:35:48.942]     {
[13:35:48.942]         {
[13:35:48.942]             ...future.startTime <- base::Sys.time()
[13:35:48.942]             {
[13:35:48.942]                 {
[13:35:48.942]                   {
[13:35:48.942]                     base::local({
[13:35:48.942]                       has_future <- base::requireNamespace("future", 
[13:35:48.942]                         quietly = TRUE)
[13:35:48.942]                       if (has_future) {
[13:35:48.942]                         ns <- base::getNamespace("future")
[13:35:48.942]                         version <- ns[[".package"]][["version"]]
[13:35:48.942]                         if (is.null(version)) 
[13:35:48.942]                           version <- utils::packageVersion("future")
[13:35:48.942]                       }
[13:35:48.942]                       else {
[13:35:48.942]                         version <- NULL
[13:35:48.942]                       }
[13:35:48.942]                       if (!has_future || version < "1.8.0") {
[13:35:48.942]                         info <- base::c(r_version = base::gsub("R version ", 
[13:35:48.942]                           "", base::R.version$version.string), 
[13:35:48.942]                           platform = base::sprintf("%s (%s-bit)", 
[13:35:48.942]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:35:48.942]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:35:48.942]                             "release", "version")], collapse = " "), 
[13:35:48.942]                           hostname = base::Sys.info()[["nodename"]])
[13:35:48.942]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:35:48.942]                           info)
[13:35:48.942]                         info <- base::paste(info, collapse = "; ")
[13:35:48.942]                         if (!has_future) {
[13:35:48.942]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:35:48.942]                             info)
[13:35:48.942]                         }
[13:35:48.942]                         else {
[13:35:48.942]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:35:48.942]                             info, version)
[13:35:48.942]                         }
[13:35:48.942]                         base::stop(msg)
[13:35:48.942]                       }
[13:35:48.942]                     })
[13:35:48.942]                   }
[13:35:48.942]                   ...future.strategy.old <- future::plan("list")
[13:35:48.942]                   options(future.plan = NULL)
[13:35:48.942]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:35:48.942]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:35:48.942]                 }
[13:35:48.942]                 ...future.workdir <- getwd()
[13:35:48.942]             }
[13:35:48.942]             ...future.oldOptions <- base::as.list(base::.Options)
[13:35:48.942]             ...future.oldEnvVars <- base::Sys.getenv()
[13:35:48.942]         }
[13:35:48.942]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:35:48.942]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:35:48.942]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:35:48.942]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:35:48.942]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:35:48.942]             future.stdout.windows.reencode = NULL, width = 80L)
[13:35:48.942]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:35:48.942]             base::names(...future.oldOptions))
[13:35:48.942]     }
[13:35:48.942]     if (FALSE) {
[13:35:48.942]     }
[13:35:48.942]     else {
[13:35:48.942]         if (TRUE) {
[13:35:48.942]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:35:48.942]                 open = "w")
[13:35:48.942]         }
[13:35:48.942]         else {
[13:35:48.942]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:35:48.942]                 windows = "NUL", "/dev/null"), open = "w")
[13:35:48.942]         }
[13:35:48.942]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:35:48.942]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:35:48.942]             base::sink(type = "output", split = FALSE)
[13:35:48.942]             base::close(...future.stdout)
[13:35:48.942]         }, add = TRUE)
[13:35:48.942]     }
[13:35:48.942]     ...future.frame <- base::sys.nframe()
[13:35:48.942]     ...future.conditions <- base::list()
[13:35:48.942]     ...future.rng <- base::globalenv()$.Random.seed
[13:35:48.942]     if (FALSE) {
[13:35:48.942]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:35:48.942]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:35:48.942]     }
[13:35:48.942]     ...future.result <- base::tryCatch({
[13:35:48.942]         base::withCallingHandlers({
[13:35:48.942]             ...future.value <- base::withVisible(base::local({
[13:35:48.942]                 42L
[13:35:48.942]                 stop("Woops")
[13:35:48.942]             }))
[13:35:48.942]             future::FutureResult(value = ...future.value$value, 
[13:35:48.942]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:35:48.942]                   ...future.rng), globalenv = if (FALSE) 
[13:35:48.942]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:35:48.942]                     ...future.globalenv.names))
[13:35:48.942]                 else NULL, started = ...future.startTime, version = "1.8")
[13:35:48.942]         }, condition = base::local({
[13:35:48.942]             c <- base::c
[13:35:48.942]             inherits <- base::inherits
[13:35:48.942]             invokeRestart <- base::invokeRestart
[13:35:48.942]             length <- base::length
[13:35:48.942]             list <- base::list
[13:35:48.942]             seq.int <- base::seq.int
[13:35:48.942]             signalCondition <- base::signalCondition
[13:35:48.942]             sys.calls <- base::sys.calls
[13:35:48.942]             `[[` <- base::`[[`
[13:35:48.942]             `+` <- base::`+`
[13:35:48.942]             `<<-` <- base::`<<-`
[13:35:48.942]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:35:48.942]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:35:48.942]                   3L)]
[13:35:48.942]             }
[13:35:48.942]             function(cond) {
[13:35:48.942]                 is_error <- inherits(cond, "error")
[13:35:48.942]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:35:48.942]                   NULL)
[13:35:48.942]                 if (is_error) {
[13:35:48.942]                   sessionInformation <- function() {
[13:35:48.942]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:35:48.942]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:35:48.942]                       search = base::search(), system = base::Sys.info())
[13:35:48.942]                   }
[13:35:48.942]                   ...future.conditions[[length(...future.conditions) + 
[13:35:48.942]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:35:48.942]                     cond$call), session = sessionInformation(), 
[13:35:48.942]                     timestamp = base::Sys.time(), signaled = 0L)
[13:35:48.942]                   signalCondition(cond)
[13:35:48.942]                 }
[13:35:48.942]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:35:48.942]                 "immediateCondition"))) {
[13:35:48.942]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:35:48.942]                   ...future.conditions[[length(...future.conditions) + 
[13:35:48.942]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:35:48.942]                   if (TRUE && !signal) {
[13:35:48.942]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:35:48.942]                     {
[13:35:48.942]                       inherits <- base::inherits
[13:35:48.942]                       invokeRestart <- base::invokeRestart
[13:35:48.942]                       is.null <- base::is.null
[13:35:48.942]                       muffled <- FALSE
[13:35:48.942]                       if (inherits(cond, "message")) {
[13:35:48.942]                         muffled <- grepl(pattern, "muffleMessage")
[13:35:48.942]                         if (muffled) 
[13:35:48.942]                           invokeRestart("muffleMessage")
[13:35:48.942]                       }
[13:35:48.942]                       else if (inherits(cond, "warning")) {
[13:35:48.942]                         muffled <- grepl(pattern, "muffleWarning")
[13:35:48.942]                         if (muffled) 
[13:35:48.942]                           invokeRestart("muffleWarning")
[13:35:48.942]                       }
[13:35:48.942]                       else if (inherits(cond, "condition")) {
[13:35:48.942]                         if (!is.null(pattern)) {
[13:35:48.942]                           computeRestarts <- base::computeRestarts
[13:35:48.942]                           grepl <- base::grepl
[13:35:48.942]                           restarts <- computeRestarts(cond)
[13:35:48.942]                           for (restart in restarts) {
[13:35:48.942]                             name <- restart$name
[13:35:48.942]                             if (is.null(name)) 
[13:35:48.942]                               next
[13:35:48.942]                             if (!grepl(pattern, name)) 
[13:35:48.942]                               next
[13:35:48.942]                             invokeRestart(restart)
[13:35:48.942]                             muffled <- TRUE
[13:35:48.942]                             break
[13:35:48.942]                           }
[13:35:48.942]                         }
[13:35:48.942]                       }
[13:35:48.942]                       invisible(muffled)
[13:35:48.942]                     }
[13:35:48.942]                     muffleCondition(cond, pattern = "^muffle")
[13:35:48.942]                   }
[13:35:48.942]                 }
[13:35:48.942]                 else {
[13:35:48.942]                   if (TRUE) {
[13:35:48.942]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:35:48.942]                     {
[13:35:48.942]                       inherits <- base::inherits
[13:35:48.942]                       invokeRestart <- base::invokeRestart
[13:35:48.942]                       is.null <- base::is.null
[13:35:48.942]                       muffled <- FALSE
[13:35:48.942]                       if (inherits(cond, "message")) {
[13:35:48.942]                         muffled <- grepl(pattern, "muffleMessage")
[13:35:48.942]                         if (muffled) 
[13:35:48.942]                           invokeRestart("muffleMessage")
[13:35:48.942]                       }
[13:35:48.942]                       else if (inherits(cond, "warning")) {
[13:35:48.942]                         muffled <- grepl(pattern, "muffleWarning")
[13:35:48.942]                         if (muffled) 
[13:35:48.942]                           invokeRestart("muffleWarning")
[13:35:48.942]                       }
[13:35:48.942]                       else if (inherits(cond, "condition")) {
[13:35:48.942]                         if (!is.null(pattern)) {
[13:35:48.942]                           computeRestarts <- base::computeRestarts
[13:35:48.942]                           grepl <- base::grepl
[13:35:48.942]                           restarts <- computeRestarts(cond)
[13:35:48.942]                           for (restart in restarts) {
[13:35:48.942]                             name <- restart$name
[13:35:48.942]                             if (is.null(name)) 
[13:35:48.942]                               next
[13:35:48.942]                             if (!grepl(pattern, name)) 
[13:35:48.942]                               next
[13:35:48.942]                             invokeRestart(restart)
[13:35:48.942]                             muffled <- TRUE
[13:35:48.942]                             break
[13:35:48.942]                           }
[13:35:48.942]                         }
[13:35:48.942]                       }
[13:35:48.942]                       invisible(muffled)
[13:35:48.942]                     }
[13:35:48.942]                     muffleCondition(cond, pattern = "^muffle")
[13:35:48.942]                   }
[13:35:48.942]                 }
[13:35:48.942]             }
[13:35:48.942]         }))
[13:35:48.942]     }, error = function(ex) {
[13:35:48.942]         base::structure(base::list(value = NULL, visible = NULL, 
[13:35:48.942]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:35:48.942]                 ...future.rng), started = ...future.startTime, 
[13:35:48.942]             finished = Sys.time(), session_uuid = NA_character_, 
[13:35:48.942]             version = "1.8"), class = "FutureResult")
[13:35:48.942]     }, finally = {
[13:35:48.942]         if (!identical(...future.workdir, getwd())) 
[13:35:48.942]             setwd(...future.workdir)
[13:35:48.942]         {
[13:35:48.942]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:35:48.942]                 ...future.oldOptions$nwarnings <- NULL
[13:35:48.942]             }
[13:35:48.942]             base::options(...future.oldOptions)
[13:35:48.942]             if (.Platform$OS.type == "windows") {
[13:35:48.942]                 old_names <- names(...future.oldEnvVars)
[13:35:48.942]                 envs <- base::Sys.getenv()
[13:35:48.942]                 names <- names(envs)
[13:35:48.942]                 common <- intersect(names, old_names)
[13:35:48.942]                 added <- setdiff(names, old_names)
[13:35:48.942]                 removed <- setdiff(old_names, names)
[13:35:48.942]                 changed <- common[...future.oldEnvVars[common] != 
[13:35:48.942]                   envs[common]]
[13:35:48.942]                 NAMES <- toupper(changed)
[13:35:48.942]                 args <- list()
[13:35:48.942]                 for (kk in seq_along(NAMES)) {
[13:35:48.942]                   name <- changed[[kk]]
[13:35:48.942]                   NAME <- NAMES[[kk]]
[13:35:48.942]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:48.942]                     next
[13:35:48.942]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:35:48.942]                 }
[13:35:48.942]                 NAMES <- toupper(added)
[13:35:48.942]                 for (kk in seq_along(NAMES)) {
[13:35:48.942]                   name <- added[[kk]]
[13:35:48.942]                   NAME <- NAMES[[kk]]
[13:35:48.942]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:48.942]                     next
[13:35:48.942]                   args[[name]] <- ""
[13:35:48.942]                 }
[13:35:48.942]                 NAMES <- toupper(removed)
[13:35:48.942]                 for (kk in seq_along(NAMES)) {
[13:35:48.942]                   name <- removed[[kk]]
[13:35:48.942]                   NAME <- NAMES[[kk]]
[13:35:48.942]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:48.942]                     next
[13:35:48.942]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:35:48.942]                 }
[13:35:48.942]                 if (length(args) > 0) 
[13:35:48.942]                   base::do.call(base::Sys.setenv, args = args)
[13:35:48.942]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:35:48.942]             }
[13:35:48.942]             else {
[13:35:48.942]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:35:48.942]             }
[13:35:48.942]             {
[13:35:48.942]                 if (base::length(...future.futureOptionsAdded) > 
[13:35:48.942]                   0L) {
[13:35:48.942]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:35:48.942]                   base::names(opts) <- ...future.futureOptionsAdded
[13:35:48.942]                   base::options(opts)
[13:35:48.942]                 }
[13:35:48.942]                 {
[13:35:48.942]                   {
[13:35:48.942]                     NULL
[13:35:48.942]                     RNGkind("Mersenne-Twister")
[13:35:48.942]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:35:48.942]                       inherits = FALSE)
[13:35:48.942]                   }
[13:35:48.942]                   options(future.plan = NULL)
[13:35:48.942]                   if (is.na(NA_character_)) 
[13:35:48.942]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:35:48.942]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:35:48.942]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:35:48.942]                     .init = FALSE)
[13:35:48.942]                 }
[13:35:48.942]             }
[13:35:48.942]         }
[13:35:48.942]     })
[13:35:48.942]     if (TRUE) {
[13:35:48.942]         base::sink(type = "output", split = FALSE)
[13:35:48.942]         if (TRUE) {
[13:35:48.942]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:35:48.942]         }
[13:35:48.942]         else {
[13:35:48.942]             ...future.result["stdout"] <- base::list(NULL)
[13:35:48.942]         }
[13:35:48.942]         base::close(...future.stdout)
[13:35:48.942]         ...future.stdout <- NULL
[13:35:48.942]     }
[13:35:48.942]     ...future.result$conditions <- ...future.conditions
[13:35:48.942]     ...future.result$finished <- base::Sys.time()
[13:35:48.942]     ...future.result
[13:35:48.942] }
[13:35:48.944] plan(): Setting new future strategy stack:
[13:35:48.944] List of future strategies:
[13:35:48.944] 1. sequential:
[13:35:48.944]    - args: function (..., envir = parent.frame())
[13:35:48.944]    - tweaked: FALSE
[13:35:48.944]    - call: NULL
[13:35:48.944] plan(): nbrOfWorkers() = 1
[13:35:48.945] plan(): Setting new future strategy stack:
[13:35:48.945] List of future strategies:
[13:35:48.945] 1. sequential:
[13:35:48.945]    - args: function (..., envir = parent.frame())
[13:35:48.945]    - tweaked: FALSE
[13:35:48.945]    - call: future::plan("sequential")
[13:35:48.945] plan(): nbrOfWorkers() = 1
[13:35:48.946] SequentialFuture started (and completed)
[13:35:48.946] signalConditions() ...
[13:35:48.946]  - include = ‘immediateCondition’
[13:35:48.946]  - exclude = 
[13:35:48.946]  - resignal = FALSE
[13:35:48.946]  - Number of conditions: 1
[13:35:48.946] signalConditions() ... done
[13:35:48.946] - Launch lazy future ... done
[13:35:48.946] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(lenv[[2]])
[13:35:48.947] resolved() for ‘SequentialFuture’ ...
[13:35:48.947] - state: ‘finished’
[13:35:48.947] - run: TRUE
[13:35:48.947] - result: ‘FutureResult’
[13:35:48.947] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
lenv[[2]] %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> ll <- list()
> ll[[1]] <- future({ 42L; stop("Woops") })
[13:35:48.948] getGlobalsAndPackages() ...
[13:35:48.948] Searching for globals...
[13:35:48.949] - globals found: [2] ‘{’, ‘stop’
[13:35:48.949] Searching for globals ... DONE
[13:35:48.949] Resolving globals: FALSE
[13:35:48.949] 
[13:35:48.949] 
[13:35:48.949] getGlobalsAndPackages() ... DONE
[13:35:48.949] run() for ‘Future’ ...
[13:35:48.950] - state: ‘created’
[13:35:48.950] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:35:48.950] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:35:48.950] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:35:48.950]   - Field: ‘label’
[13:35:48.950]   - Field: ‘local’
[13:35:48.950]   - Field: ‘owner’
[13:35:48.950]   - Field: ‘envir’
[13:35:48.951]   - Field: ‘packages’
[13:35:48.951]   - Field: ‘gc’
[13:35:48.951]   - Field: ‘conditions’
[13:35:48.951]   - Field: ‘expr’
[13:35:48.951]   - Field: ‘uuid’
[13:35:48.951]   - Field: ‘seed’
[13:35:48.951]   - Field: ‘version’
[13:35:48.951]   - Field: ‘result’
[13:35:48.951]   - Field: ‘asynchronous’
[13:35:48.951]   - Field: ‘calls’
[13:35:48.951]   - Field: ‘globals’
[13:35:48.951]   - Field: ‘stdout’
[13:35:48.952]   - Field: ‘earlySignal’
[13:35:48.952]   - Field: ‘lazy’
[13:35:48.952]   - Field: ‘state’
[13:35:48.952] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:35:48.952] - Launch lazy future ...
[13:35:48.952] Packages needed by the future expression (n = 0): <none>
[13:35:48.952] Packages needed by future strategies (n = 0): <none>
[13:35:48.953] {
[13:35:48.953]     {
[13:35:48.953]         {
[13:35:48.953]             ...future.startTime <- base::Sys.time()
[13:35:48.953]             {
[13:35:48.953]                 {
[13:35:48.953]                   {
[13:35:48.953]                     base::local({
[13:35:48.953]                       has_future <- base::requireNamespace("future", 
[13:35:48.953]                         quietly = TRUE)
[13:35:48.953]                       if (has_future) {
[13:35:48.953]                         ns <- base::getNamespace("future")
[13:35:48.953]                         version <- ns[[".package"]][["version"]]
[13:35:48.953]                         if (is.null(version)) 
[13:35:48.953]                           version <- utils::packageVersion("future")
[13:35:48.953]                       }
[13:35:48.953]                       else {
[13:35:48.953]                         version <- NULL
[13:35:48.953]                       }
[13:35:48.953]                       if (!has_future || version < "1.8.0") {
[13:35:48.953]                         info <- base::c(r_version = base::gsub("R version ", 
[13:35:48.953]                           "", base::R.version$version.string), 
[13:35:48.953]                           platform = base::sprintf("%s (%s-bit)", 
[13:35:48.953]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:35:48.953]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:35:48.953]                             "release", "version")], collapse = " "), 
[13:35:48.953]                           hostname = base::Sys.info()[["nodename"]])
[13:35:48.953]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:35:48.953]                           info)
[13:35:48.953]                         info <- base::paste(info, collapse = "; ")
[13:35:48.953]                         if (!has_future) {
[13:35:48.953]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:35:48.953]                             info)
[13:35:48.953]                         }
[13:35:48.953]                         else {
[13:35:48.953]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:35:48.953]                             info, version)
[13:35:48.953]                         }
[13:35:48.953]                         base::stop(msg)
[13:35:48.953]                       }
[13:35:48.953]                     })
[13:35:48.953]                   }
[13:35:48.953]                   ...future.strategy.old <- future::plan("list")
[13:35:48.953]                   options(future.plan = NULL)
[13:35:48.953]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:35:48.953]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:35:48.953]                 }
[13:35:48.953]                 ...future.workdir <- getwd()
[13:35:48.953]             }
[13:35:48.953]             ...future.oldOptions <- base::as.list(base::.Options)
[13:35:48.953]             ...future.oldEnvVars <- base::Sys.getenv()
[13:35:48.953]         }
[13:35:48.953]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:35:48.953]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:35:48.953]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:35:48.953]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:35:48.953]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:35:48.953]             future.stdout.windows.reencode = NULL, width = 80L)
[13:35:48.953]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:35:48.953]             base::names(...future.oldOptions))
[13:35:48.953]     }
[13:35:48.953]     if (FALSE) {
[13:35:48.953]     }
[13:35:48.953]     else {
[13:35:48.953]         if (TRUE) {
[13:35:48.953]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:35:48.953]                 open = "w")
[13:35:48.953]         }
[13:35:48.953]         else {
[13:35:48.953]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:35:48.953]                 windows = "NUL", "/dev/null"), open = "w")
[13:35:48.953]         }
[13:35:48.953]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:35:48.953]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:35:48.953]             base::sink(type = "output", split = FALSE)
[13:35:48.953]             base::close(...future.stdout)
[13:35:48.953]         }, add = TRUE)
[13:35:48.953]     }
[13:35:48.953]     ...future.frame <- base::sys.nframe()
[13:35:48.953]     ...future.conditions <- base::list()
[13:35:48.953]     ...future.rng <- base::globalenv()$.Random.seed
[13:35:48.953]     if (FALSE) {
[13:35:48.953]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:35:48.953]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:35:48.953]     }
[13:35:48.953]     ...future.result <- base::tryCatch({
[13:35:48.953]         base::withCallingHandlers({
[13:35:48.953]             ...future.value <- base::withVisible(base::local({
[13:35:48.953]                 42L
[13:35:48.953]                 stop("Woops")
[13:35:48.953]             }))
[13:35:48.953]             future::FutureResult(value = ...future.value$value, 
[13:35:48.953]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:35:48.953]                   ...future.rng), globalenv = if (FALSE) 
[13:35:48.953]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:35:48.953]                     ...future.globalenv.names))
[13:35:48.953]                 else NULL, started = ...future.startTime, version = "1.8")
[13:35:48.953]         }, condition = base::local({
[13:35:48.953]             c <- base::c
[13:35:48.953]             inherits <- base::inherits
[13:35:48.953]             invokeRestart <- base::invokeRestart
[13:35:48.953]             length <- base::length
[13:35:48.953]             list <- base::list
[13:35:48.953]             seq.int <- base::seq.int
[13:35:48.953]             signalCondition <- base::signalCondition
[13:35:48.953]             sys.calls <- base::sys.calls
[13:35:48.953]             `[[` <- base::`[[`
[13:35:48.953]             `+` <- base::`+`
[13:35:48.953]             `<<-` <- base::`<<-`
[13:35:48.953]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:35:48.953]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:35:48.953]                   3L)]
[13:35:48.953]             }
[13:35:48.953]             function(cond) {
[13:35:48.953]                 is_error <- inherits(cond, "error")
[13:35:48.953]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:35:48.953]                   NULL)
[13:35:48.953]                 if (is_error) {
[13:35:48.953]                   sessionInformation <- function() {
[13:35:48.953]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:35:48.953]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:35:48.953]                       search = base::search(), system = base::Sys.info())
[13:35:48.953]                   }
[13:35:48.953]                   ...future.conditions[[length(...future.conditions) + 
[13:35:48.953]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:35:48.953]                     cond$call), session = sessionInformation(), 
[13:35:48.953]                     timestamp = base::Sys.time(), signaled = 0L)
[13:35:48.953]                   signalCondition(cond)
[13:35:48.953]                 }
[13:35:48.953]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:35:48.953]                 "immediateCondition"))) {
[13:35:48.953]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:35:48.953]                   ...future.conditions[[length(...future.conditions) + 
[13:35:48.953]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:35:48.953]                   if (TRUE && !signal) {
[13:35:48.953]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:35:48.953]                     {
[13:35:48.953]                       inherits <- base::inherits
[13:35:48.953]                       invokeRestart <- base::invokeRestart
[13:35:48.953]                       is.null <- base::is.null
[13:35:48.953]                       muffled <- FALSE
[13:35:48.953]                       if (inherits(cond, "message")) {
[13:35:48.953]                         muffled <- grepl(pattern, "muffleMessage")
[13:35:48.953]                         if (muffled) 
[13:35:48.953]                           invokeRestart("muffleMessage")
[13:35:48.953]                       }
[13:35:48.953]                       else if (inherits(cond, "warning")) {
[13:35:48.953]                         muffled <- grepl(pattern, "muffleWarning")
[13:35:48.953]                         if (muffled) 
[13:35:48.953]                           invokeRestart("muffleWarning")
[13:35:48.953]                       }
[13:35:48.953]                       else if (inherits(cond, "condition")) {
[13:35:48.953]                         if (!is.null(pattern)) {
[13:35:48.953]                           computeRestarts <- base::computeRestarts
[13:35:48.953]                           grepl <- base::grepl
[13:35:48.953]                           restarts <- computeRestarts(cond)
[13:35:48.953]                           for (restart in restarts) {
[13:35:48.953]                             name <- restart$name
[13:35:48.953]                             if (is.null(name)) 
[13:35:48.953]                               next
[13:35:48.953]                             if (!grepl(pattern, name)) 
[13:35:48.953]                               next
[13:35:48.953]                             invokeRestart(restart)
[13:35:48.953]                             muffled <- TRUE
[13:35:48.953]                             break
[13:35:48.953]                           }
[13:35:48.953]                         }
[13:35:48.953]                       }
[13:35:48.953]                       invisible(muffled)
[13:35:48.953]                     }
[13:35:48.953]                     muffleCondition(cond, pattern = "^muffle")
[13:35:48.953]                   }
[13:35:48.953]                 }
[13:35:48.953]                 else {
[13:35:48.953]                   if (TRUE) {
[13:35:48.953]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:35:48.953]                     {
[13:35:48.953]                       inherits <- base::inherits
[13:35:48.953]                       invokeRestart <- base::invokeRestart
[13:35:48.953]                       is.null <- base::is.null
[13:35:48.953]                       muffled <- FALSE
[13:35:48.953]                       if (inherits(cond, "message")) {
[13:35:48.953]                         muffled <- grepl(pattern, "muffleMessage")
[13:35:48.953]                         if (muffled) 
[13:35:48.953]                           invokeRestart("muffleMessage")
[13:35:48.953]                       }
[13:35:48.953]                       else if (inherits(cond, "warning")) {
[13:35:48.953]                         muffled <- grepl(pattern, "muffleWarning")
[13:35:48.953]                         if (muffled) 
[13:35:48.953]                           invokeRestart("muffleWarning")
[13:35:48.953]                       }
[13:35:48.953]                       else if (inherits(cond, "condition")) {
[13:35:48.953]                         if (!is.null(pattern)) {
[13:35:48.953]                           computeRestarts <- base::computeRestarts
[13:35:48.953]                           grepl <- base::grepl
[13:35:48.953]                           restarts <- computeRestarts(cond)
[13:35:48.953]                           for (restart in restarts) {
[13:35:48.953]                             name <- restart$name
[13:35:48.953]                             if (is.null(name)) 
[13:35:48.953]                               next
[13:35:48.953]                             if (!grepl(pattern, name)) 
[13:35:48.953]                               next
[13:35:48.953]                             invokeRestart(restart)
[13:35:48.953]                             muffled <- TRUE
[13:35:48.953]                             break
[13:35:48.953]                           }
[13:35:48.953]                         }
[13:35:48.953]                       }
[13:35:48.953]                       invisible(muffled)
[13:35:48.953]                     }
[13:35:48.953]                     muffleCondition(cond, pattern = "^muffle")
[13:35:48.953]                   }
[13:35:48.953]                 }
[13:35:48.953]             }
[13:35:48.953]         }))
[13:35:48.953]     }, error = function(ex) {
[13:35:48.953]         base::structure(base::list(value = NULL, visible = NULL, 
[13:35:48.953]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:35:48.953]                 ...future.rng), started = ...future.startTime, 
[13:35:48.953]             finished = Sys.time(), session_uuid = NA_character_, 
[13:35:48.953]             version = "1.8"), class = "FutureResult")
[13:35:48.953]     }, finally = {
[13:35:48.953]         if (!identical(...future.workdir, getwd())) 
[13:35:48.953]             setwd(...future.workdir)
[13:35:48.953]         {
[13:35:48.953]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:35:48.953]                 ...future.oldOptions$nwarnings <- NULL
[13:35:48.953]             }
[13:35:48.953]             base::options(...future.oldOptions)
[13:35:48.953]             if (.Platform$OS.type == "windows") {
[13:35:48.953]                 old_names <- names(...future.oldEnvVars)
[13:35:48.953]                 envs <- base::Sys.getenv()
[13:35:48.953]                 names <- names(envs)
[13:35:48.953]                 common <- intersect(names, old_names)
[13:35:48.953]                 added <- setdiff(names, old_names)
[13:35:48.953]                 removed <- setdiff(old_names, names)
[13:35:48.953]                 changed <- common[...future.oldEnvVars[common] != 
[13:35:48.953]                   envs[common]]
[13:35:48.953]                 NAMES <- toupper(changed)
[13:35:48.953]                 args <- list()
[13:35:48.953]                 for (kk in seq_along(NAMES)) {
[13:35:48.953]                   name <- changed[[kk]]
[13:35:48.953]                   NAME <- NAMES[[kk]]
[13:35:48.953]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:48.953]                     next
[13:35:48.953]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:35:48.953]                 }
[13:35:48.953]                 NAMES <- toupper(added)
[13:35:48.953]                 for (kk in seq_along(NAMES)) {
[13:35:48.953]                   name <- added[[kk]]
[13:35:48.953]                   NAME <- NAMES[[kk]]
[13:35:48.953]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:48.953]                     next
[13:35:48.953]                   args[[name]] <- ""
[13:35:48.953]                 }
[13:35:48.953]                 NAMES <- toupper(removed)
[13:35:48.953]                 for (kk in seq_along(NAMES)) {
[13:35:48.953]                   name <- removed[[kk]]
[13:35:48.953]                   NAME <- NAMES[[kk]]
[13:35:48.953]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:48.953]                     next
[13:35:48.953]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:35:48.953]                 }
[13:35:48.953]                 if (length(args) > 0) 
[13:35:48.953]                   base::do.call(base::Sys.setenv, args = args)
[13:35:48.953]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:35:48.953]             }
[13:35:48.953]             else {
[13:35:48.953]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:35:48.953]             }
[13:35:48.953]             {
[13:35:48.953]                 if (base::length(...future.futureOptionsAdded) > 
[13:35:48.953]                   0L) {
[13:35:48.953]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:35:48.953]                   base::names(opts) <- ...future.futureOptionsAdded
[13:35:48.953]                   base::options(opts)
[13:35:48.953]                 }
[13:35:48.953]                 {
[13:35:48.953]                   {
[13:35:48.953]                     NULL
[13:35:48.953]                     RNGkind("Mersenne-Twister")
[13:35:48.953]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:35:48.953]                       inherits = FALSE)
[13:35:48.953]                   }
[13:35:48.953]                   options(future.plan = NULL)
[13:35:48.953]                   if (is.na(NA_character_)) 
[13:35:48.953]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:35:48.953]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:35:48.953]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:35:48.953]                     .init = FALSE)
[13:35:48.953]                 }
[13:35:48.953]             }
[13:35:48.953]         }
[13:35:48.953]     })
[13:35:48.953]     if (TRUE) {
[13:35:48.953]         base::sink(type = "output", split = FALSE)
[13:35:48.953]         if (TRUE) {
[13:35:48.953]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:35:48.953]         }
[13:35:48.953]         else {
[13:35:48.953]             ...future.result["stdout"] <- base::list(NULL)
[13:35:48.953]         }
[13:35:48.953]         base::close(...future.stdout)
[13:35:48.953]         ...future.stdout <- NULL
[13:35:48.953]     }
[13:35:48.953]     ...future.result$conditions <- ...future.conditions
[13:35:48.953]     ...future.result$finished <- base::Sys.time()
[13:35:48.953]     ...future.result
[13:35:48.953] }
[13:35:48.954] plan(): Setting new future strategy stack:
[13:35:48.954] List of future strategies:
[13:35:48.954] 1. sequential:
[13:35:48.954]    - args: function (..., envir = parent.frame())
[13:35:48.954]    - tweaked: FALSE
[13:35:48.954]    - call: NULL
[13:35:48.955] plan(): nbrOfWorkers() = 1
[13:35:48.955] plan(): Setting new future strategy stack:
[13:35:48.956] List of future strategies:
[13:35:48.956] 1. sequential:
[13:35:48.956]    - args: function (..., envir = parent.frame())
[13:35:48.956]    - tweaked: FALSE
[13:35:48.956]    - call: future::plan("sequential")
[13:35:48.956] plan(): nbrOfWorkers() = 1
[13:35:48.956] SequentialFuture started (and completed)
[13:35:48.956] signalConditions() ...
[13:35:48.956]  - include = ‘immediateCondition’
[13:35:48.956]  - exclude = 
[13:35:48.956]  - resignal = FALSE
[13:35:48.956]  - Number of conditions: 1
[13:35:48.957] signalConditions() ... done
[13:35:48.957] - Launch lazy future ... done
[13:35:48.957] run() for ‘SequentialFuture’ ... done
> ll[[2]] <- future({ 42L; stop("Woops") })
[13:35:48.957] getGlobalsAndPackages() ...
[13:35:48.957] Searching for globals...
[13:35:48.958] - globals found: [2] ‘{’, ‘stop’
[13:35:48.958] Searching for globals ... DONE
[13:35:48.958] Resolving globals: FALSE
[13:35:48.958] 
[13:35:48.958] 
[13:35:48.958] getGlobalsAndPackages() ... DONE
[13:35:48.959] run() for ‘Future’ ...
[13:35:48.959] - state: ‘created’
[13:35:48.959] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:35:48.959] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:35:48.959] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:35:48.959]   - Field: ‘label’
[13:35:48.959]   - Field: ‘local’
[13:35:48.960]   - Field: ‘owner’
[13:35:48.960]   - Field: ‘envir’
[13:35:48.960]   - Field: ‘packages’
[13:35:48.960]   - Field: ‘gc’
[13:35:48.960]   - Field: ‘conditions’
[13:35:48.960]   - Field: ‘expr’
[13:35:48.960]   - Field: ‘uuid’
[13:35:48.960]   - Field: ‘seed’
[13:35:48.960]   - Field: ‘version’
[13:35:48.960]   - Field: ‘result’
[13:35:48.960]   - Field: ‘asynchronous’
[13:35:48.960]   - Field: ‘calls’
[13:35:48.961]   - Field: ‘globals’
[13:35:48.961]   - Field: ‘stdout’
[13:35:48.961]   - Field: ‘earlySignal’
[13:35:48.961]   - Field: ‘lazy’
[13:35:48.961]   - Field: ‘state’
[13:35:48.961] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:35:48.961] - Launch lazy future ...
[13:35:48.961] Packages needed by the future expression (n = 0): <none>
[13:35:48.961] Packages needed by future strategies (n = 0): <none>
[13:35:48.962] {
[13:35:48.962]     {
[13:35:48.962]         {
[13:35:48.962]             ...future.startTime <- base::Sys.time()
[13:35:48.962]             {
[13:35:48.962]                 {
[13:35:48.962]                   {
[13:35:48.962]                     base::local({
[13:35:48.962]                       has_future <- base::requireNamespace("future", 
[13:35:48.962]                         quietly = TRUE)
[13:35:48.962]                       if (has_future) {
[13:35:48.962]                         ns <- base::getNamespace("future")
[13:35:48.962]                         version <- ns[[".package"]][["version"]]
[13:35:48.962]                         if (is.null(version)) 
[13:35:48.962]                           version <- utils::packageVersion("future")
[13:35:48.962]                       }
[13:35:48.962]                       else {
[13:35:48.962]                         version <- NULL
[13:35:48.962]                       }
[13:35:48.962]                       if (!has_future || version < "1.8.0") {
[13:35:48.962]                         info <- base::c(r_version = base::gsub("R version ", 
[13:35:48.962]                           "", base::R.version$version.string), 
[13:35:48.962]                           platform = base::sprintf("%s (%s-bit)", 
[13:35:48.962]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:35:48.962]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:35:48.962]                             "release", "version")], collapse = " "), 
[13:35:48.962]                           hostname = base::Sys.info()[["nodename"]])
[13:35:48.962]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:35:48.962]                           info)
[13:35:48.962]                         info <- base::paste(info, collapse = "; ")
[13:35:48.962]                         if (!has_future) {
[13:35:48.962]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:35:48.962]                             info)
[13:35:48.962]                         }
[13:35:48.962]                         else {
[13:35:48.962]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:35:48.962]                             info, version)
[13:35:48.962]                         }
[13:35:48.962]                         base::stop(msg)
[13:35:48.962]                       }
[13:35:48.962]                     })
[13:35:48.962]                   }
[13:35:48.962]                   ...future.strategy.old <- future::plan("list")
[13:35:48.962]                   options(future.plan = NULL)
[13:35:48.962]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:35:48.962]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:35:48.962]                 }
[13:35:48.962]                 ...future.workdir <- getwd()
[13:35:48.962]             }
[13:35:48.962]             ...future.oldOptions <- base::as.list(base::.Options)
[13:35:48.962]             ...future.oldEnvVars <- base::Sys.getenv()
[13:35:48.962]         }
[13:35:48.962]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:35:48.962]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:35:48.962]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:35:48.962]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:35:48.962]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:35:48.962]             future.stdout.windows.reencode = NULL, width = 80L)
[13:35:48.962]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:35:48.962]             base::names(...future.oldOptions))
[13:35:48.962]     }
[13:35:48.962]     if (FALSE) {
[13:35:48.962]     }
[13:35:48.962]     else {
[13:35:48.962]         if (TRUE) {
[13:35:48.962]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:35:48.962]                 open = "w")
[13:35:48.962]         }
[13:35:48.962]         else {
[13:35:48.962]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:35:48.962]                 windows = "NUL", "/dev/null"), open = "w")
[13:35:48.962]         }
[13:35:48.962]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:35:48.962]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:35:48.962]             base::sink(type = "output", split = FALSE)
[13:35:48.962]             base::close(...future.stdout)
[13:35:48.962]         }, add = TRUE)
[13:35:48.962]     }
[13:35:48.962]     ...future.frame <- base::sys.nframe()
[13:35:48.962]     ...future.conditions <- base::list()
[13:35:48.962]     ...future.rng <- base::globalenv()$.Random.seed
[13:35:48.962]     if (FALSE) {
[13:35:48.962]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:35:48.962]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:35:48.962]     }
[13:35:48.962]     ...future.result <- base::tryCatch({
[13:35:48.962]         base::withCallingHandlers({
[13:35:48.962]             ...future.value <- base::withVisible(base::local({
[13:35:48.962]                 42L
[13:35:48.962]                 stop("Woops")
[13:35:48.962]             }))
[13:35:48.962]             future::FutureResult(value = ...future.value$value, 
[13:35:48.962]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:35:48.962]                   ...future.rng), globalenv = if (FALSE) 
[13:35:48.962]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:35:48.962]                     ...future.globalenv.names))
[13:35:48.962]                 else NULL, started = ...future.startTime, version = "1.8")
[13:35:48.962]         }, condition = base::local({
[13:35:48.962]             c <- base::c
[13:35:48.962]             inherits <- base::inherits
[13:35:48.962]             invokeRestart <- base::invokeRestart
[13:35:48.962]             length <- base::length
[13:35:48.962]             list <- base::list
[13:35:48.962]             seq.int <- base::seq.int
[13:35:48.962]             signalCondition <- base::signalCondition
[13:35:48.962]             sys.calls <- base::sys.calls
[13:35:48.962]             `[[` <- base::`[[`
[13:35:48.962]             `+` <- base::`+`
[13:35:48.962]             `<<-` <- base::`<<-`
[13:35:48.962]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:35:48.962]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:35:48.962]                   3L)]
[13:35:48.962]             }
[13:35:48.962]             function(cond) {
[13:35:48.962]                 is_error <- inherits(cond, "error")
[13:35:48.962]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:35:48.962]                   NULL)
[13:35:48.962]                 if (is_error) {
[13:35:48.962]                   sessionInformation <- function() {
[13:35:48.962]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:35:48.962]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:35:48.962]                       search = base::search(), system = base::Sys.info())
[13:35:48.962]                   }
[13:35:48.962]                   ...future.conditions[[length(...future.conditions) + 
[13:35:48.962]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:35:48.962]                     cond$call), session = sessionInformation(), 
[13:35:48.962]                     timestamp = base::Sys.time(), signaled = 0L)
[13:35:48.962]                   signalCondition(cond)
[13:35:48.962]                 }
[13:35:48.962]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:35:48.962]                 "immediateCondition"))) {
[13:35:48.962]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:35:48.962]                   ...future.conditions[[length(...future.conditions) + 
[13:35:48.962]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:35:48.962]                   if (TRUE && !signal) {
[13:35:48.962]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:35:48.962]                     {
[13:35:48.962]                       inherits <- base::inherits
[13:35:48.962]                       invokeRestart <- base::invokeRestart
[13:35:48.962]                       is.null <- base::is.null
[13:35:48.962]                       muffled <- FALSE
[13:35:48.962]                       if (inherits(cond, "message")) {
[13:35:48.962]                         muffled <- grepl(pattern, "muffleMessage")
[13:35:48.962]                         if (muffled) 
[13:35:48.962]                           invokeRestart("muffleMessage")
[13:35:48.962]                       }
[13:35:48.962]                       else if (inherits(cond, "warning")) {
[13:35:48.962]                         muffled <- grepl(pattern, "muffleWarning")
[13:35:48.962]                         if (muffled) 
[13:35:48.962]                           invokeRestart("muffleWarning")
[13:35:48.962]                       }
[13:35:48.962]                       else if (inherits(cond, "condition")) {
[13:35:48.962]                         if (!is.null(pattern)) {
[13:35:48.962]                           computeRestarts <- base::computeRestarts
[13:35:48.962]                           grepl <- base::grepl
[13:35:48.962]                           restarts <- computeRestarts(cond)
[13:35:48.962]                           for (restart in restarts) {
[13:35:48.962]                             name <- restart$name
[13:35:48.962]                             if (is.null(name)) 
[13:35:48.962]                               next
[13:35:48.962]                             if (!grepl(pattern, name)) 
[13:35:48.962]                               next
[13:35:48.962]                             invokeRestart(restart)
[13:35:48.962]                             muffled <- TRUE
[13:35:48.962]                             break
[13:35:48.962]                           }
[13:35:48.962]                         }
[13:35:48.962]                       }
[13:35:48.962]                       invisible(muffled)
[13:35:48.962]                     }
[13:35:48.962]                     muffleCondition(cond, pattern = "^muffle")
[13:35:48.962]                   }
[13:35:48.962]                 }
[13:35:48.962]                 else {
[13:35:48.962]                   if (TRUE) {
[13:35:48.962]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:35:48.962]                     {
[13:35:48.962]                       inherits <- base::inherits
[13:35:48.962]                       invokeRestart <- base::invokeRestart
[13:35:48.962]                       is.null <- base::is.null
[13:35:48.962]                       muffled <- FALSE
[13:35:48.962]                       if (inherits(cond, "message")) {
[13:35:48.962]                         muffled <- grepl(pattern, "muffleMessage")
[13:35:48.962]                         if (muffled) 
[13:35:48.962]                           invokeRestart("muffleMessage")
[13:35:48.962]                       }
[13:35:48.962]                       else if (inherits(cond, "warning")) {
[13:35:48.962]                         muffled <- grepl(pattern, "muffleWarning")
[13:35:48.962]                         if (muffled) 
[13:35:48.962]                           invokeRestart("muffleWarning")
[13:35:48.962]                       }
[13:35:48.962]                       else if (inherits(cond, "condition")) {
[13:35:48.962]                         if (!is.null(pattern)) {
[13:35:48.962]                           computeRestarts <- base::computeRestarts
[13:35:48.962]                           grepl <- base::grepl
[13:35:48.962]                           restarts <- computeRestarts(cond)
[13:35:48.962]                           for (restart in restarts) {
[13:35:48.962]                             name <- restart$name
[13:35:48.962]                             if (is.null(name)) 
[13:35:48.962]                               next
[13:35:48.962]                             if (!grepl(pattern, name)) 
[13:35:48.962]                               next
[13:35:48.962]                             invokeRestart(restart)
[13:35:48.962]                             muffled <- TRUE
[13:35:48.962]                             break
[13:35:48.962]                           }
[13:35:48.962]                         }
[13:35:48.962]                       }
[13:35:48.962]                       invisible(muffled)
[13:35:48.962]                     }
[13:35:48.962]                     muffleCondition(cond, pattern = "^muffle")
[13:35:48.962]                   }
[13:35:48.962]                 }
[13:35:48.962]             }
[13:35:48.962]         }))
[13:35:48.962]     }, error = function(ex) {
[13:35:48.962]         base::structure(base::list(value = NULL, visible = NULL, 
[13:35:48.962]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:35:48.962]                 ...future.rng), started = ...future.startTime, 
[13:35:48.962]             finished = Sys.time(), session_uuid = NA_character_, 
[13:35:48.962]             version = "1.8"), class = "FutureResult")
[13:35:48.962]     }, finally = {
[13:35:48.962]         if (!identical(...future.workdir, getwd())) 
[13:35:48.962]             setwd(...future.workdir)
[13:35:48.962]         {
[13:35:48.962]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:35:48.962]                 ...future.oldOptions$nwarnings <- NULL
[13:35:48.962]             }
[13:35:48.962]             base::options(...future.oldOptions)
[13:35:48.962]             if (.Platform$OS.type == "windows") {
[13:35:48.962]                 old_names <- names(...future.oldEnvVars)
[13:35:48.962]                 envs <- base::Sys.getenv()
[13:35:48.962]                 names <- names(envs)
[13:35:48.962]                 common <- intersect(names, old_names)
[13:35:48.962]                 added <- setdiff(names, old_names)
[13:35:48.962]                 removed <- setdiff(old_names, names)
[13:35:48.962]                 changed <- common[...future.oldEnvVars[common] != 
[13:35:48.962]                   envs[common]]
[13:35:48.962]                 NAMES <- toupper(changed)
[13:35:48.962]                 args <- list()
[13:35:48.962]                 for (kk in seq_along(NAMES)) {
[13:35:48.962]                   name <- changed[[kk]]
[13:35:48.962]                   NAME <- NAMES[[kk]]
[13:35:48.962]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:48.962]                     next
[13:35:48.962]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:35:48.962]                 }
[13:35:48.962]                 NAMES <- toupper(added)
[13:35:48.962]                 for (kk in seq_along(NAMES)) {
[13:35:48.962]                   name <- added[[kk]]
[13:35:48.962]                   NAME <- NAMES[[kk]]
[13:35:48.962]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:48.962]                     next
[13:35:48.962]                   args[[name]] <- ""
[13:35:48.962]                 }
[13:35:48.962]                 NAMES <- toupper(removed)
[13:35:48.962]                 for (kk in seq_along(NAMES)) {
[13:35:48.962]                   name <- removed[[kk]]
[13:35:48.962]                   NAME <- NAMES[[kk]]
[13:35:48.962]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:48.962]                     next
[13:35:48.962]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:35:48.962]                 }
[13:35:48.962]                 if (length(args) > 0) 
[13:35:48.962]                   base::do.call(base::Sys.setenv, args = args)
[13:35:48.962]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:35:48.962]             }
[13:35:48.962]             else {
[13:35:48.962]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:35:48.962]             }
[13:35:48.962]             {
[13:35:48.962]                 if (base::length(...future.futureOptionsAdded) > 
[13:35:48.962]                   0L) {
[13:35:48.962]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:35:48.962]                   base::names(opts) <- ...future.futureOptionsAdded
[13:35:48.962]                   base::options(opts)
[13:35:48.962]                 }
[13:35:48.962]                 {
[13:35:48.962]                   {
[13:35:48.962]                     NULL
[13:35:48.962]                     RNGkind("Mersenne-Twister")
[13:35:48.962]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:35:48.962]                       inherits = FALSE)
[13:35:48.962]                   }
[13:35:48.962]                   options(future.plan = NULL)
[13:35:48.962]                   if (is.na(NA_character_)) 
[13:35:48.962]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:35:48.962]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:35:48.962]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:35:48.962]                     .init = FALSE)
[13:35:48.962]                 }
[13:35:48.962]             }
[13:35:48.962]         }
[13:35:48.962]     })
[13:35:48.962]     if (TRUE) {
[13:35:48.962]         base::sink(type = "output", split = FALSE)
[13:35:48.962]         if (TRUE) {
[13:35:48.962]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:35:48.962]         }
[13:35:48.962]         else {
[13:35:48.962]             ...future.result["stdout"] <- base::list(NULL)
[13:35:48.962]         }
[13:35:48.962]         base::close(...future.stdout)
[13:35:48.962]         ...future.stdout <- NULL
[13:35:48.962]     }
[13:35:48.962]     ...future.result$conditions <- ...future.conditions
[13:35:48.962]     ...future.result$finished <- base::Sys.time()
[13:35:48.962]     ...future.result
[13:35:48.962] }
[13:35:48.963] plan(): Setting new future strategy stack:
[13:35:48.963] List of future strategies:
[13:35:48.963] 1. sequential:
[13:35:48.963]    - args: function (..., envir = parent.frame())
[13:35:48.963]    - tweaked: FALSE
[13:35:48.963]    - call: NULL
[13:35:48.964] plan(): nbrOfWorkers() = 1
[13:35:48.965] plan(): Setting new future strategy stack:
[13:35:48.965] List of future strategies:
[13:35:48.965] 1. sequential:
[13:35:48.965]    - args: function (..., envir = parent.frame())
[13:35:48.965]    - tweaked: FALSE
[13:35:48.965]    - call: future::plan("sequential")
[13:35:48.965] plan(): nbrOfWorkers() = 1
[13:35:48.965] SequentialFuture started (and completed)
[13:35:48.965] signalConditions() ...
[13:35:48.965]  - include = ‘immediateCondition’
[13:35:48.965]  - exclude = 
[13:35:48.966]  - resignal = FALSE
[13:35:48.966]  - Number of conditions: 1
[13:35:48.966] signalConditions() ... done
[13:35:48.966] - Launch lazy future ... done
[13:35:48.966] run() for ‘SequentialFuture’ ... done
> vs <- value(ll, signal = FALSE)
[13:35:48.966] resolve() on list ...
[13:35:48.966]  recursive: 0
[13:35:48.967]  length: 2
[13:35:48.967] 
[13:35:48.967] resolved() for ‘SequentialFuture’ ...
[13:35:48.967] - state: ‘finished’
[13:35:48.967] - run: TRUE
[13:35:48.967] - result: ‘FutureResult’
[13:35:48.967] resolved() for ‘SequentialFuture’ ... done
[13:35:48.967] Future #1
[13:35:48.968] signalConditions() ...
[13:35:48.968]  - include = ‘immediateCondition’
[13:35:48.968]  - exclude = 
[13:35:48.968]  - resignal = FALSE
[13:35:48.968]  - Number of conditions: 1
[13:35:48.968] signalConditions() ... done
[13:35:48.968] signalConditionsASAP(SequentialFuture, pos=1) ...
[13:35:48.968] - nx: 2
[13:35:48.968] - relay: TRUE
[13:35:48.968] - stdout: TRUE
[13:35:48.968] - signal: FALSE
[13:35:48.968] - resignal: FALSE
[13:35:48.969] - force: TRUE
[13:35:48.969] - relayed: [n=2] FALSE, FALSE
[13:35:48.969] - queued futures: [n=2] FALSE, FALSE
[13:35:48.969]  - until=1
[13:35:48.969]  - relaying element #1
[13:35:48.969] signalConditions() ...
[13:35:48.969]  - include = ‘immediateCondition’
[13:35:48.969]  - exclude = 
[13:35:48.969]  - resignal = FALSE
[13:35:48.969]  - Number of conditions: 1
[13:35:48.969] signalConditions() ... done
[13:35:48.970] - relayed: [n=2] TRUE, FALSE
[13:35:48.970] - queued futures: [n=2] TRUE, FALSE
[13:35:48.971] signalConditionsASAP(SequentialFuture, pos=1) ... done
[13:35:48.971]  length: 1 (resolved future 1)
[13:35:48.971] resolved() for ‘SequentialFuture’ ...
[13:35:48.971] - state: ‘finished’
[13:35:48.971] - run: TRUE
[13:35:48.971] - result: ‘FutureResult’
[13:35:48.972] resolved() for ‘SequentialFuture’ ... done
[13:35:48.972] Future #2
[13:35:48.972] signalConditions() ...
[13:35:48.972]  - include = ‘immediateCondition’
[13:35:48.972]  - exclude = 
[13:35:48.972]  - resignal = FALSE
[13:35:48.972]  - Number of conditions: 1
[13:35:48.972] signalConditions() ... done
[13:35:48.972] signalConditionsASAP(SequentialFuture, pos=2) ...
[13:35:48.972] - nx: 2
[13:35:48.972] - relay: TRUE
[13:35:48.973] - stdout: TRUE
[13:35:48.973] - signal: FALSE
[13:35:48.973] - resignal: FALSE
[13:35:48.973] - force: TRUE
[13:35:48.973] - relayed: [n=2] TRUE, FALSE
[13:35:48.973] - queued futures: [n=2] TRUE, FALSE
[13:35:48.973]  - until=2
[13:35:48.973]  - relaying element #2
[13:35:48.973] signalConditions() ...
[13:35:48.973]  - include = ‘immediateCondition’
[13:35:48.973]  - exclude = 
[13:35:48.973]  - resignal = FALSE
[13:35:48.974]  - Number of conditions: 1
[13:35:48.974] signalConditions() ... done
[13:35:48.974] - relayed: [n=2] TRUE, TRUE
[13:35:48.974] - queued futures: [n=2] TRUE, TRUE
[13:35:48.974] signalConditionsASAP(SequentialFuture, pos=2) ... done
[13:35:48.974]  length: 0 (resolved future 2)
[13:35:48.974] Relaying remaining futures
[13:35:48.974] signalConditionsASAP(NULL, pos=0) ...
[13:35:48.974] - nx: 2
[13:35:48.974] - relay: TRUE
[13:35:48.974] - stdout: TRUE
[13:35:48.974] - signal: FALSE
[13:35:48.975] - resignal: FALSE
[13:35:48.975] - force: TRUE
[13:35:48.975] - relayed: [n=2] TRUE, TRUE
[13:35:48.975] - queued futures: [n=2] TRUE, TRUE
 - flush all
[13:35:48.975] - relayed: [n=2] TRUE, TRUE
[13:35:48.975] - queued futures: [n=2] TRUE, TRUE
[13:35:48.975] signalConditionsASAP(NULL, pos=0) ... done
[13:35:48.975] resolve() on list ... DONE
[13:35:48.975] signalConditions() ...
[13:35:48.975]  - include = ‘immediateCondition’
[13:35:48.975]  - exclude = 
[13:35:48.976]  - resignal = FALSE
[13:35:48.976]  - Number of conditions: 1
[13:35:48.976] signalConditions() ... done
[13:35:48.976] signalConditions() ...
[13:35:48.976]  - include = ‘immediateCondition’
[13:35:48.976]  - exclude = 
[13:35:48.976]  - resignal = FALSE
[13:35:48.976]  - Number of conditions: 1
[13:35:48.976] signalConditions() ... done
> calls <- backtrace(ll[[2]])
[13:35:48.977] resolved() for ‘SequentialFuture’ ...
[13:35:48.977] - state: ‘finished’
[13:35:48.977] - run: TRUE
[13:35:48.977] - result: ‘FutureResult’
[13:35:48.977] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
future({
    42L
    stop("Woops")
})

[[2]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[3]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[4]]
stop("Woops")

[[5]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> message("*** backtrace( ) - subsetting ... DONE")
*** backtrace( ) - subsetting ... DONE
> 
> 
> message("*** backtrace( ) - exceptions ...")
*** backtrace( ) - exceptions ...
> 
> message("- No condition ...")
- No condition ...
> f <- future(42L)
[13:35:48.977] getGlobalsAndPackages() ...
[13:35:48.978] Searching for globals...
[13:35:48.978] 
[13:35:48.978] Searching for globals ... DONE
[13:35:48.978] - globals: [0] <none>
[13:35:48.978] getGlobalsAndPackages() ... DONE
[13:35:48.978] run() for ‘Future’ ...
[13:35:48.978] - state: ‘created’
[13:35:48.979] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:35:48.979] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:35:48.979] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:35:48.979]   - Field: ‘label’
[13:35:48.979]   - Field: ‘local’
[13:35:48.979]   - Field: ‘owner’
[13:35:48.979]   - Field: ‘envir’
[13:35:48.979]   - Field: ‘packages’
[13:35:48.979]   - Field: ‘gc’
[13:35:48.979]   - Field: ‘conditions’
[13:35:48.980]   - Field: ‘expr’
[13:35:48.980]   - Field: ‘uuid’
[13:35:48.980]   - Field: ‘seed’
[13:35:48.980]   - Field: ‘version’
[13:35:48.980]   - Field: ‘result’
[13:35:48.980]   - Field: ‘asynchronous’
[13:35:48.980]   - Field: ‘calls’
[13:35:48.980]   - Field: ‘globals’
[13:35:48.980]   - Field: ‘stdout’
[13:35:48.980]   - Field: ‘earlySignal’
[13:35:48.980]   - Field: ‘lazy’
[13:35:48.981]   - Field: ‘state’
[13:35:48.981] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:35:48.981] - Launch lazy future ...
[13:35:48.981] Packages needed by the future expression (n = 0): <none>
[13:35:48.981] Packages needed by future strategies (n = 0): <none>
[13:35:48.981] {
[13:35:48.981]     {
[13:35:48.981]         {
[13:35:48.981]             ...future.startTime <- base::Sys.time()
[13:35:48.981]             {
[13:35:48.981]                 {
[13:35:48.981]                   {
[13:35:48.981]                     base::local({
[13:35:48.981]                       has_future <- base::requireNamespace("future", 
[13:35:48.981]                         quietly = TRUE)
[13:35:48.981]                       if (has_future) {
[13:35:48.981]                         ns <- base::getNamespace("future")
[13:35:48.981]                         version <- ns[[".package"]][["version"]]
[13:35:48.981]                         if (is.null(version)) 
[13:35:48.981]                           version <- utils::packageVersion("future")
[13:35:48.981]                       }
[13:35:48.981]                       else {
[13:35:48.981]                         version <- NULL
[13:35:48.981]                       }
[13:35:48.981]                       if (!has_future || version < "1.8.0") {
[13:35:48.981]                         info <- base::c(r_version = base::gsub("R version ", 
[13:35:48.981]                           "", base::R.version$version.string), 
[13:35:48.981]                           platform = base::sprintf("%s (%s-bit)", 
[13:35:48.981]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:35:48.981]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:35:48.981]                             "release", "version")], collapse = " "), 
[13:35:48.981]                           hostname = base::Sys.info()[["nodename"]])
[13:35:48.981]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:35:48.981]                           info)
[13:35:48.981]                         info <- base::paste(info, collapse = "; ")
[13:35:48.981]                         if (!has_future) {
[13:35:48.981]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:35:48.981]                             info)
[13:35:48.981]                         }
[13:35:48.981]                         else {
[13:35:48.981]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:35:48.981]                             info, version)
[13:35:48.981]                         }
[13:35:48.981]                         base::stop(msg)
[13:35:48.981]                       }
[13:35:48.981]                     })
[13:35:48.981]                   }
[13:35:48.981]                   ...future.strategy.old <- future::plan("list")
[13:35:48.981]                   options(future.plan = NULL)
[13:35:48.981]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:35:48.981]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:35:48.981]                 }
[13:35:48.981]                 ...future.workdir <- getwd()
[13:35:48.981]             }
[13:35:48.981]             ...future.oldOptions <- base::as.list(base::.Options)
[13:35:48.981]             ...future.oldEnvVars <- base::Sys.getenv()
[13:35:48.981]         }
[13:35:48.981]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:35:48.981]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:35:48.981]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:35:48.981]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:35:48.981]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:35:48.981]             future.stdout.windows.reencode = NULL, width = 80L)
[13:35:48.981]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:35:48.981]             base::names(...future.oldOptions))
[13:35:48.981]     }
[13:35:48.981]     if (FALSE) {
[13:35:48.981]     }
[13:35:48.981]     else {
[13:35:48.981]         if (TRUE) {
[13:35:48.981]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:35:48.981]                 open = "w")
[13:35:48.981]         }
[13:35:48.981]         else {
[13:35:48.981]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:35:48.981]                 windows = "NUL", "/dev/null"), open = "w")
[13:35:48.981]         }
[13:35:48.981]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:35:48.981]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:35:48.981]             base::sink(type = "output", split = FALSE)
[13:35:48.981]             base::close(...future.stdout)
[13:35:48.981]         }, add = TRUE)
[13:35:48.981]     }
[13:35:48.981]     ...future.frame <- base::sys.nframe()
[13:35:48.981]     ...future.conditions <- base::list()
[13:35:48.981]     ...future.rng <- base::globalenv()$.Random.seed
[13:35:48.981]     if (FALSE) {
[13:35:48.981]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:35:48.981]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:35:48.981]     }
[13:35:48.981]     ...future.result <- base::tryCatch({
[13:35:48.981]         base::withCallingHandlers({
[13:35:48.981]             ...future.value <- base::withVisible(base::local(42L))
[13:35:48.981]             future::FutureResult(value = ...future.value$value, 
[13:35:48.981]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:35:48.981]                   ...future.rng), globalenv = if (FALSE) 
[13:35:48.981]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:35:48.981]                     ...future.globalenv.names))
[13:35:48.981]                 else NULL, started = ...future.startTime, version = "1.8")
[13:35:48.981]         }, condition = base::local({
[13:35:48.981]             c <- base::c
[13:35:48.981]             inherits <- base::inherits
[13:35:48.981]             invokeRestart <- base::invokeRestart
[13:35:48.981]             length <- base::length
[13:35:48.981]             list <- base::list
[13:35:48.981]             seq.int <- base::seq.int
[13:35:48.981]             signalCondition <- base::signalCondition
[13:35:48.981]             sys.calls <- base::sys.calls
[13:35:48.981]             `[[` <- base::`[[`
[13:35:48.981]             `+` <- base::`+`
[13:35:48.981]             `<<-` <- base::`<<-`
[13:35:48.981]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:35:48.981]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:35:48.981]                   3L)]
[13:35:48.981]             }
[13:35:48.981]             function(cond) {
[13:35:48.981]                 is_error <- inherits(cond, "error")
[13:35:48.981]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:35:48.981]                   NULL)
[13:35:48.981]                 if (is_error) {
[13:35:48.981]                   sessionInformation <- function() {
[13:35:48.981]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:35:48.981]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:35:48.981]                       search = base::search(), system = base::Sys.info())
[13:35:48.981]                   }
[13:35:48.981]                   ...future.conditions[[length(...future.conditions) + 
[13:35:48.981]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:35:48.981]                     cond$call), session = sessionInformation(), 
[13:35:48.981]                     timestamp = base::Sys.time(), signaled = 0L)
[13:35:48.981]                   signalCondition(cond)
[13:35:48.981]                 }
[13:35:48.981]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:35:48.981]                 "immediateCondition"))) {
[13:35:48.981]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:35:48.981]                   ...future.conditions[[length(...future.conditions) + 
[13:35:48.981]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:35:48.981]                   if (TRUE && !signal) {
[13:35:48.981]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:35:48.981]                     {
[13:35:48.981]                       inherits <- base::inherits
[13:35:48.981]                       invokeRestart <- base::invokeRestart
[13:35:48.981]                       is.null <- base::is.null
[13:35:48.981]                       muffled <- FALSE
[13:35:48.981]                       if (inherits(cond, "message")) {
[13:35:48.981]                         muffled <- grepl(pattern, "muffleMessage")
[13:35:48.981]                         if (muffled) 
[13:35:48.981]                           invokeRestart("muffleMessage")
[13:35:48.981]                       }
[13:35:48.981]                       else if (inherits(cond, "warning")) {
[13:35:48.981]                         muffled <- grepl(pattern, "muffleWarning")
[13:35:48.981]                         if (muffled) 
[13:35:48.981]                           invokeRestart("muffleWarning")
[13:35:48.981]                       }
[13:35:48.981]                       else if (inherits(cond, "condition")) {
[13:35:48.981]                         if (!is.null(pattern)) {
[13:35:48.981]                           computeRestarts <- base::computeRestarts
[13:35:48.981]                           grepl <- base::grepl
[13:35:48.981]                           restarts <- computeRestarts(cond)
[13:35:48.981]                           for (restart in restarts) {
[13:35:48.981]                             name <- restart$name
[13:35:48.981]                             if (is.null(name)) 
[13:35:48.981]                               next
[13:35:48.981]                             if (!grepl(pattern, name)) 
[13:35:48.981]                               next
[13:35:48.981]                             invokeRestart(restart)
[13:35:48.981]                             muffled <- TRUE
[13:35:48.981]                             break
[13:35:48.981]                           }
[13:35:48.981]                         }
[13:35:48.981]                       }
[13:35:48.981]                       invisible(muffled)
[13:35:48.981]                     }
[13:35:48.981]                     muffleCondition(cond, pattern = "^muffle")
[13:35:48.981]                   }
[13:35:48.981]                 }
[13:35:48.981]                 else {
[13:35:48.981]                   if (TRUE) {
[13:35:48.981]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:35:48.981]                     {
[13:35:48.981]                       inherits <- base::inherits
[13:35:48.981]                       invokeRestart <- base::invokeRestart
[13:35:48.981]                       is.null <- base::is.null
[13:35:48.981]                       muffled <- FALSE
[13:35:48.981]                       if (inherits(cond, "message")) {
[13:35:48.981]                         muffled <- grepl(pattern, "muffleMessage")
[13:35:48.981]                         if (muffled) 
[13:35:48.981]                           invokeRestart("muffleMessage")
[13:35:48.981]                       }
[13:35:48.981]                       else if (inherits(cond, "warning")) {
[13:35:48.981]                         muffled <- grepl(pattern, "muffleWarning")
[13:35:48.981]                         if (muffled) 
[13:35:48.981]                           invokeRestart("muffleWarning")
[13:35:48.981]                       }
[13:35:48.981]                       else if (inherits(cond, "condition")) {
[13:35:48.981]                         if (!is.null(pattern)) {
[13:35:48.981]                           computeRestarts <- base::computeRestarts
[13:35:48.981]                           grepl <- base::grepl
[13:35:48.981]                           restarts <- computeRestarts(cond)
[13:35:48.981]                           for (restart in restarts) {
[13:35:48.981]                             name <- restart$name
[13:35:48.981]                             if (is.null(name)) 
[13:35:48.981]                               next
[13:35:48.981]                             if (!grepl(pattern, name)) 
[13:35:48.981]                               next
[13:35:48.981]                             invokeRestart(restart)
[13:35:48.981]                             muffled <- TRUE
[13:35:48.981]                             break
[13:35:48.981]                           }
[13:35:48.981]                         }
[13:35:48.981]                       }
[13:35:48.981]                       invisible(muffled)
[13:35:48.981]                     }
[13:35:48.981]                     muffleCondition(cond, pattern = "^muffle")
[13:35:48.981]                   }
[13:35:48.981]                 }
[13:35:48.981]             }
[13:35:48.981]         }))
[13:35:48.981]     }, error = function(ex) {
[13:35:48.981]         base::structure(base::list(value = NULL, visible = NULL, 
[13:35:48.981]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:35:48.981]                 ...future.rng), started = ...future.startTime, 
[13:35:48.981]             finished = Sys.time(), session_uuid = NA_character_, 
[13:35:48.981]             version = "1.8"), class = "FutureResult")
[13:35:48.981]     }, finally = {
[13:35:48.981]         if (!identical(...future.workdir, getwd())) 
[13:35:48.981]             setwd(...future.workdir)
[13:35:48.981]         {
[13:35:48.981]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:35:48.981]                 ...future.oldOptions$nwarnings <- NULL
[13:35:48.981]             }
[13:35:48.981]             base::options(...future.oldOptions)
[13:35:48.981]             if (.Platform$OS.type == "windows") {
[13:35:48.981]                 old_names <- names(...future.oldEnvVars)
[13:35:48.981]                 envs <- base::Sys.getenv()
[13:35:48.981]                 names <- names(envs)
[13:35:48.981]                 common <- intersect(names, old_names)
[13:35:48.981]                 added <- setdiff(names, old_names)
[13:35:48.981]                 removed <- setdiff(old_names, names)
[13:35:48.981]                 changed <- common[...future.oldEnvVars[common] != 
[13:35:48.981]                   envs[common]]
[13:35:48.981]                 NAMES <- toupper(changed)
[13:35:48.981]                 args <- list()
[13:35:48.981]                 for (kk in seq_along(NAMES)) {
[13:35:48.981]                   name <- changed[[kk]]
[13:35:48.981]                   NAME <- NAMES[[kk]]
[13:35:48.981]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:48.981]                     next
[13:35:48.981]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:35:48.981]                 }
[13:35:48.981]                 NAMES <- toupper(added)
[13:35:48.981]                 for (kk in seq_along(NAMES)) {
[13:35:48.981]                   name <- added[[kk]]
[13:35:48.981]                   NAME <- NAMES[[kk]]
[13:35:48.981]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:48.981]                     next
[13:35:48.981]                   args[[name]] <- ""
[13:35:48.981]                 }
[13:35:48.981]                 NAMES <- toupper(removed)
[13:35:48.981]                 for (kk in seq_along(NAMES)) {
[13:35:48.981]                   name <- removed[[kk]]
[13:35:48.981]                   NAME <- NAMES[[kk]]
[13:35:48.981]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:48.981]                     next
[13:35:48.981]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:35:48.981]                 }
[13:35:48.981]                 if (length(args) > 0) 
[13:35:48.981]                   base::do.call(base::Sys.setenv, args = args)
[13:35:48.981]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:35:48.981]             }
[13:35:48.981]             else {
[13:35:48.981]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:35:48.981]             }
[13:35:48.981]             {
[13:35:48.981]                 if (base::length(...future.futureOptionsAdded) > 
[13:35:48.981]                   0L) {
[13:35:48.981]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:35:48.981]                   base::names(opts) <- ...future.futureOptionsAdded
[13:35:48.981]                   base::options(opts)
[13:35:48.981]                 }
[13:35:48.981]                 {
[13:35:48.981]                   {
[13:35:48.981]                     NULL
[13:35:48.981]                     RNGkind("Mersenne-Twister")
[13:35:48.981]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:35:48.981]                       inherits = FALSE)
[13:35:48.981]                   }
[13:35:48.981]                   options(future.plan = NULL)
[13:35:48.981]                   if (is.na(NA_character_)) 
[13:35:48.981]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:35:48.981]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:35:48.981]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:35:48.981]                     .init = FALSE)
[13:35:48.981]                 }
[13:35:48.981]             }
[13:35:48.981]         }
[13:35:48.981]     })
[13:35:48.981]     if (TRUE) {
[13:35:48.981]         base::sink(type = "output", split = FALSE)
[13:35:48.981]         if (TRUE) {
[13:35:48.981]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:35:48.981]         }
[13:35:48.981]         else {
[13:35:48.981]             ...future.result["stdout"] <- base::list(NULL)
[13:35:48.981]         }
[13:35:48.981]         base::close(...future.stdout)
[13:35:48.981]         ...future.stdout <- NULL
[13:35:48.981]     }
[13:35:48.981]     ...future.result$conditions <- ...future.conditions
[13:35:48.981]     ...future.result$finished <- base::Sys.time()
[13:35:48.981]     ...future.result
[13:35:48.981] }
[13:35:48.983] plan(): Setting new future strategy stack:
[13:35:48.983] List of future strategies:
[13:35:48.983] 1. sequential:
[13:35:48.983]    - args: function (..., envir = parent.frame())
[13:35:48.983]    - tweaked: FALSE
[13:35:48.983]    - call: NULL
[13:35:48.983] plan(): nbrOfWorkers() = 1
[13:35:48.984] plan(): Setting new future strategy stack:
[13:35:48.984] List of future strategies:
[13:35:48.984] 1. sequential:
[13:35:48.984]    - args: function (..., envir = parent.frame())
[13:35:48.984]    - tweaked: FALSE
[13:35:48.984]    - call: future::plan("sequential")
[13:35:48.985] plan(): nbrOfWorkers() = 1
[13:35:48.985] SequentialFuture started (and completed)
[13:35:48.985] - Launch lazy future ... done
[13:35:48.985] run() for ‘SequentialFuture’ ... done
> res <- tryCatch(backtrace(f), error = identity)
[13:35:48.985] resolved() for ‘SequentialFuture’ ...
[13:35:48.986] - state: ‘finished’
[13:35:48.986] - run: TRUE
[13:35:48.986] - result: ‘FutureResult’
[13:35:48.986] resolved() for ‘SequentialFuture’ ... done
> print(res)
<simpleError: No error was caught for this future: ‘f’>
> stopifnot(inherits(res, "error"))
> 
> message("- No call stack ...")
- No call stack ...
> f <- future({ 42L; stop("Woops") })
[13:35:48.986] getGlobalsAndPackages() ...
[13:35:48.986] Searching for globals...
[13:35:48.987] - globals found: [2] ‘{’, ‘stop’
[13:35:48.987] Searching for globals ... DONE
[13:35:48.987] Resolving globals: FALSE
[13:35:48.988] 
[13:35:48.988] 
[13:35:48.988] getGlobalsAndPackages() ... DONE
[13:35:48.988] run() for ‘Future’ ...
[13:35:48.988] - state: ‘created’
[13:35:48.988] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:35:48.989] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:35:48.989] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:35:48.989]   - Field: ‘label’
[13:35:48.989]   - Field: ‘local’
[13:35:48.989]   - Field: ‘owner’
[13:35:48.989]   - Field: ‘envir’
[13:35:48.989]   - Field: ‘packages’
[13:35:48.989]   - Field: ‘gc’
[13:35:48.989]   - Field: ‘conditions’
[13:35:48.989]   - Field: ‘expr’
[13:35:48.989]   - Field: ‘uuid’
[13:35:48.989]   - Field: ‘seed’
[13:35:48.990]   - Field: ‘version’
[13:35:48.990]   - Field: ‘result’
[13:35:48.990]   - Field: ‘asynchronous’
[13:35:48.990]   - Field: ‘calls’
[13:35:48.990]   - Field: ‘globals’
[13:35:48.990]   - Field: ‘stdout’
[13:35:48.990]   - Field: ‘earlySignal’
[13:35:48.990]   - Field: ‘lazy’
[13:35:48.990]   - Field: ‘state’
[13:35:48.990] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:35:48.990] - Launch lazy future ...
[13:35:48.991] Packages needed by the future expression (n = 0): <none>
[13:35:48.991] Packages needed by future strategies (n = 0): <none>
[13:35:48.991] {
[13:35:48.991]     {
[13:35:48.991]         {
[13:35:48.991]             ...future.startTime <- base::Sys.time()
[13:35:48.991]             {
[13:35:48.991]                 {
[13:35:48.991]                   {
[13:35:48.991]                     base::local({
[13:35:48.991]                       has_future <- base::requireNamespace("future", 
[13:35:48.991]                         quietly = TRUE)
[13:35:48.991]                       if (has_future) {
[13:35:48.991]                         ns <- base::getNamespace("future")
[13:35:48.991]                         version <- ns[[".package"]][["version"]]
[13:35:48.991]                         if (is.null(version)) 
[13:35:48.991]                           version <- utils::packageVersion("future")
[13:35:48.991]                       }
[13:35:48.991]                       else {
[13:35:48.991]                         version <- NULL
[13:35:48.991]                       }
[13:35:48.991]                       if (!has_future || version < "1.8.0") {
[13:35:48.991]                         info <- base::c(r_version = base::gsub("R version ", 
[13:35:48.991]                           "", base::R.version$version.string), 
[13:35:48.991]                           platform = base::sprintf("%s (%s-bit)", 
[13:35:48.991]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:35:48.991]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:35:48.991]                             "release", "version")], collapse = " "), 
[13:35:48.991]                           hostname = base::Sys.info()[["nodename"]])
[13:35:48.991]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:35:48.991]                           info)
[13:35:48.991]                         info <- base::paste(info, collapse = "; ")
[13:35:48.991]                         if (!has_future) {
[13:35:48.991]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:35:48.991]                             info)
[13:35:48.991]                         }
[13:35:48.991]                         else {
[13:35:48.991]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:35:48.991]                             info, version)
[13:35:48.991]                         }
[13:35:48.991]                         base::stop(msg)
[13:35:48.991]                       }
[13:35:48.991]                     })
[13:35:48.991]                   }
[13:35:48.991]                   ...future.strategy.old <- future::plan("list")
[13:35:48.991]                   options(future.plan = NULL)
[13:35:48.991]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:35:48.991]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:35:48.991]                 }
[13:35:48.991]                 ...future.workdir <- getwd()
[13:35:48.991]             }
[13:35:48.991]             ...future.oldOptions <- base::as.list(base::.Options)
[13:35:48.991]             ...future.oldEnvVars <- base::Sys.getenv()
[13:35:48.991]         }
[13:35:48.991]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:35:48.991]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:35:48.991]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:35:48.991]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:35:48.991]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:35:48.991]             future.stdout.windows.reencode = NULL, width = 80L)
[13:35:48.991]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:35:48.991]             base::names(...future.oldOptions))
[13:35:48.991]     }
[13:35:48.991]     if (FALSE) {
[13:35:48.991]     }
[13:35:48.991]     else {
[13:35:48.991]         if (TRUE) {
[13:35:48.991]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:35:48.991]                 open = "w")
[13:35:48.991]         }
[13:35:48.991]         else {
[13:35:48.991]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:35:48.991]                 windows = "NUL", "/dev/null"), open = "w")
[13:35:48.991]         }
[13:35:48.991]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:35:48.991]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:35:48.991]             base::sink(type = "output", split = FALSE)
[13:35:48.991]             base::close(...future.stdout)
[13:35:48.991]         }, add = TRUE)
[13:35:48.991]     }
[13:35:48.991]     ...future.frame <- base::sys.nframe()
[13:35:48.991]     ...future.conditions <- base::list()
[13:35:48.991]     ...future.rng <- base::globalenv()$.Random.seed
[13:35:48.991]     if (FALSE) {
[13:35:48.991]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:35:48.991]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:35:48.991]     }
[13:35:48.991]     ...future.result <- base::tryCatch({
[13:35:48.991]         base::withCallingHandlers({
[13:35:48.991]             ...future.value <- base::withVisible(base::local({
[13:35:48.991]                 42L
[13:35:48.991]                 stop("Woops")
[13:35:48.991]             }))
[13:35:48.991]             future::FutureResult(value = ...future.value$value, 
[13:35:48.991]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:35:48.991]                   ...future.rng), globalenv = if (FALSE) 
[13:35:48.991]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:35:48.991]                     ...future.globalenv.names))
[13:35:48.991]                 else NULL, started = ...future.startTime, version = "1.8")
[13:35:48.991]         }, condition = base::local({
[13:35:48.991]             c <- base::c
[13:35:48.991]             inherits <- base::inherits
[13:35:48.991]             invokeRestart <- base::invokeRestart
[13:35:48.991]             length <- base::length
[13:35:48.991]             list <- base::list
[13:35:48.991]             seq.int <- base::seq.int
[13:35:48.991]             signalCondition <- base::signalCondition
[13:35:48.991]             sys.calls <- base::sys.calls
[13:35:48.991]             `[[` <- base::`[[`
[13:35:48.991]             `+` <- base::`+`
[13:35:48.991]             `<<-` <- base::`<<-`
[13:35:48.991]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:35:48.991]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:35:48.991]                   3L)]
[13:35:48.991]             }
[13:35:48.991]             function(cond) {
[13:35:48.991]                 is_error <- inherits(cond, "error")
[13:35:48.991]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:35:48.991]                   NULL)
[13:35:48.991]                 if (is_error) {
[13:35:48.991]                   sessionInformation <- function() {
[13:35:48.991]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:35:48.991]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:35:48.991]                       search = base::search(), system = base::Sys.info())
[13:35:48.991]                   }
[13:35:48.991]                   ...future.conditions[[length(...future.conditions) + 
[13:35:48.991]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:35:48.991]                     cond$call), session = sessionInformation(), 
[13:35:48.991]                     timestamp = base::Sys.time(), signaled = 0L)
[13:35:48.991]                   signalCondition(cond)
[13:35:48.991]                 }
[13:35:48.991]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:35:48.991]                 "immediateCondition"))) {
[13:35:48.991]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:35:48.991]                   ...future.conditions[[length(...future.conditions) + 
[13:35:48.991]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:35:48.991]                   if (TRUE && !signal) {
[13:35:48.991]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:35:48.991]                     {
[13:35:48.991]                       inherits <- base::inherits
[13:35:48.991]                       invokeRestart <- base::invokeRestart
[13:35:48.991]                       is.null <- base::is.null
[13:35:48.991]                       muffled <- FALSE
[13:35:48.991]                       if (inherits(cond, "message")) {
[13:35:48.991]                         muffled <- grepl(pattern, "muffleMessage")
[13:35:48.991]                         if (muffled) 
[13:35:48.991]                           invokeRestart("muffleMessage")
[13:35:48.991]                       }
[13:35:48.991]                       else if (inherits(cond, "warning")) {
[13:35:48.991]                         muffled <- grepl(pattern, "muffleWarning")
[13:35:48.991]                         if (muffled) 
[13:35:48.991]                           invokeRestart("muffleWarning")
[13:35:48.991]                       }
[13:35:48.991]                       else if (inherits(cond, "condition")) {
[13:35:48.991]                         if (!is.null(pattern)) {
[13:35:48.991]                           computeRestarts <- base::computeRestarts
[13:35:48.991]                           grepl <- base::grepl
[13:35:48.991]                           restarts <- computeRestarts(cond)
[13:35:48.991]                           for (restart in restarts) {
[13:35:48.991]                             name <- restart$name
[13:35:48.991]                             if (is.null(name)) 
[13:35:48.991]                               next
[13:35:48.991]                             if (!grepl(pattern, name)) 
[13:35:48.991]                               next
[13:35:48.991]                             invokeRestart(restart)
[13:35:48.991]                             muffled <- TRUE
[13:35:48.991]                             break
[13:35:48.991]                           }
[13:35:48.991]                         }
[13:35:48.991]                       }
[13:35:48.991]                       invisible(muffled)
[13:35:48.991]                     }
[13:35:48.991]                     muffleCondition(cond, pattern = "^muffle")
[13:35:48.991]                   }
[13:35:48.991]                 }
[13:35:48.991]                 else {
[13:35:48.991]                   if (TRUE) {
[13:35:48.991]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:35:48.991]                     {
[13:35:48.991]                       inherits <- base::inherits
[13:35:48.991]                       invokeRestart <- base::invokeRestart
[13:35:48.991]                       is.null <- base::is.null
[13:35:48.991]                       muffled <- FALSE
[13:35:48.991]                       if (inherits(cond, "message")) {
[13:35:48.991]                         muffled <- grepl(pattern, "muffleMessage")
[13:35:48.991]                         if (muffled) 
[13:35:48.991]                           invokeRestart("muffleMessage")
[13:35:48.991]                       }
[13:35:48.991]                       else if (inherits(cond, "warning")) {
[13:35:48.991]                         muffled <- grepl(pattern, "muffleWarning")
[13:35:48.991]                         if (muffled) 
[13:35:48.991]                           invokeRestart("muffleWarning")
[13:35:48.991]                       }
[13:35:48.991]                       else if (inherits(cond, "condition")) {
[13:35:48.991]                         if (!is.null(pattern)) {
[13:35:48.991]                           computeRestarts <- base::computeRestarts
[13:35:48.991]                           grepl <- base::grepl
[13:35:48.991]                           restarts <- computeRestarts(cond)
[13:35:48.991]                           for (restart in restarts) {
[13:35:48.991]                             name <- restart$name
[13:35:48.991]                             if (is.null(name)) 
[13:35:48.991]                               next
[13:35:48.991]                             if (!grepl(pattern, name)) 
[13:35:48.991]                               next
[13:35:48.991]                             invokeRestart(restart)
[13:35:48.991]                             muffled <- TRUE
[13:35:48.991]                             break
[13:35:48.991]                           }
[13:35:48.991]                         }
[13:35:48.991]                       }
[13:35:48.991]                       invisible(muffled)
[13:35:48.991]                     }
[13:35:48.991]                     muffleCondition(cond, pattern = "^muffle")
[13:35:48.991]                   }
[13:35:48.991]                 }
[13:35:48.991]             }
[13:35:48.991]         }))
[13:35:48.991]     }, error = function(ex) {
[13:35:48.991]         base::structure(base::list(value = NULL, visible = NULL, 
[13:35:48.991]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:35:48.991]                 ...future.rng), started = ...future.startTime, 
[13:35:48.991]             finished = Sys.time(), session_uuid = NA_character_, 
[13:35:48.991]             version = "1.8"), class = "FutureResult")
[13:35:48.991]     }, finally = {
[13:35:48.991]         if (!identical(...future.workdir, getwd())) 
[13:35:48.991]             setwd(...future.workdir)
[13:35:48.991]         {
[13:35:48.991]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:35:48.991]                 ...future.oldOptions$nwarnings <- NULL
[13:35:48.991]             }
[13:35:48.991]             base::options(...future.oldOptions)
[13:35:48.991]             if (.Platform$OS.type == "windows") {
[13:35:48.991]                 old_names <- names(...future.oldEnvVars)
[13:35:48.991]                 envs <- base::Sys.getenv()
[13:35:48.991]                 names <- names(envs)
[13:35:48.991]                 common <- intersect(names, old_names)
[13:35:48.991]                 added <- setdiff(names, old_names)
[13:35:48.991]                 removed <- setdiff(old_names, names)
[13:35:48.991]                 changed <- common[...future.oldEnvVars[common] != 
[13:35:48.991]                   envs[common]]
[13:35:48.991]                 NAMES <- toupper(changed)
[13:35:48.991]                 args <- list()
[13:35:48.991]                 for (kk in seq_along(NAMES)) {
[13:35:48.991]                   name <- changed[[kk]]
[13:35:48.991]                   NAME <- NAMES[[kk]]
[13:35:48.991]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:48.991]                     next
[13:35:48.991]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:35:48.991]                 }
[13:35:48.991]                 NAMES <- toupper(added)
[13:35:48.991]                 for (kk in seq_along(NAMES)) {
[13:35:48.991]                   name <- added[[kk]]
[13:35:48.991]                   NAME <- NAMES[[kk]]
[13:35:48.991]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:48.991]                     next
[13:35:48.991]                   args[[name]] <- ""
[13:35:48.991]                 }
[13:35:48.991]                 NAMES <- toupper(removed)
[13:35:48.991]                 for (kk in seq_along(NAMES)) {
[13:35:48.991]                   name <- removed[[kk]]
[13:35:48.991]                   NAME <- NAMES[[kk]]
[13:35:48.991]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:48.991]                     next
[13:35:48.991]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:35:48.991]                 }
[13:35:48.991]                 if (length(args) > 0) 
[13:35:48.991]                   base::do.call(base::Sys.setenv, args = args)
[13:35:48.991]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:35:48.991]             }
[13:35:48.991]             else {
[13:35:48.991]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:35:48.991]             }
[13:35:48.991]             {
[13:35:48.991]                 if (base::length(...future.futureOptionsAdded) > 
[13:35:48.991]                   0L) {
[13:35:48.991]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:35:48.991]                   base::names(opts) <- ...future.futureOptionsAdded
[13:35:48.991]                   base::options(opts)
[13:35:48.991]                 }
[13:35:48.991]                 {
[13:35:48.991]                   {
[13:35:48.991]                     NULL
[13:35:48.991]                     RNGkind("Mersenne-Twister")
[13:35:48.991]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:35:48.991]                       inherits = FALSE)
[13:35:48.991]                   }
[13:35:48.991]                   options(future.plan = NULL)
[13:35:48.991]                   if (is.na(NA_character_)) 
[13:35:48.991]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:35:48.991]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:35:48.991]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:35:48.991]                     .init = FALSE)
[13:35:48.991]                 }
[13:35:48.991]             }
[13:35:48.991]         }
[13:35:48.991]     })
[13:35:48.991]     if (TRUE) {
[13:35:48.991]         base::sink(type = "output", split = FALSE)
[13:35:48.991]         if (TRUE) {
[13:35:48.991]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:35:48.991]         }
[13:35:48.991]         else {
[13:35:48.991]             ...future.result["stdout"] <- base::list(NULL)
[13:35:48.991]         }
[13:35:48.991]         base::close(...future.stdout)
[13:35:48.991]         ...future.stdout <- NULL
[13:35:48.991]     }
[13:35:48.991]     ...future.result$conditions <- ...future.conditions
[13:35:48.991]     ...future.result$finished <- base::Sys.time()
[13:35:48.991]     ...future.result
[13:35:48.991] }
[13:35:48.993] plan(): Setting new future strategy stack:
[13:35:48.993] List of future strategies:
[13:35:48.993] 1. sequential:
[13:35:48.993]    - args: function (..., envir = parent.frame())
[13:35:48.993]    - tweaked: FALSE
[13:35:48.993]    - call: NULL
[13:35:48.993] plan(): nbrOfWorkers() = 1
[13:35:48.994] plan(): Setting new future strategy stack:
[13:35:48.994] List of future strategies:
[13:35:48.994] 1. sequential:
[13:35:48.994]    - args: function (..., envir = parent.frame())
[13:35:48.994]    - tweaked: FALSE
[13:35:48.994]    - call: future::plan("sequential")
[13:35:48.994] plan(): nbrOfWorkers() = 1
[13:35:48.995] SequentialFuture started (and completed)
[13:35:48.995] signalConditions() ...
[13:35:48.995]  - include = ‘immediateCondition’
[13:35:48.995]  - exclude = 
[13:35:48.995]  - resignal = FALSE
[13:35:48.995]  - Number of conditions: 1
[13:35:48.995] signalConditions() ... done
[13:35:48.995] - Launch lazy future ... done
[13:35:48.995] run() for ‘SequentialFuture’ ... done
> v <- value(f, signal = FALSE)
[13:35:48.995] signalConditions() ...
[13:35:48.995]  - include = ‘immediateCondition’
[13:35:48.996]  - exclude = 
[13:35:48.996]  - resignal = FALSE
[13:35:48.996]  - Number of conditions: 1
[13:35:48.996] signalConditions() ... done
> 
> if (availableCores() >= 2L) {
+   message("- Non-resolved future ...")
+   plan(multisession, workers = 2L)
+   f <- future({ Sys.sleep(3); 42L; stop("Woops") })
+   res <- tryCatch(backtrace(f), error = identity)
+   print(res)
+   stopifnot(inherits(res, "error"))
+   
+   ## If we don't resolve the future, the cluster of workers will not
+   ## be able to shut down naturally. They will eventually time out,
+   ## but that will happen long after 'R CMD check' terminates. Because
+   ## of this, 'R CMD check --as-cran' will report on "detritus in the
+   ## temp directory" when running on MS Windows.  This happens because
+   ## MS Windows doesn't shut down child processes as Linux and macOS
+   ## does when the main R session terminates.
+   resolve(f)
+ }
- Non-resolved future ...
[13:35:49.002] plan(): Setting new future strategy stack:
[13:35:49.002] List of future strategies:
[13:35:49.002] 1. multisession:
[13:35:49.002]    - args: function (..., workers = 2L, envir = parent.frame())
[13:35:49.002]    - tweaked: TRUE
[13:35:49.002]    - call: plan(multisession, workers = 2L)
[13:35:49.013] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:35:49.014] multisession:
[13:35:49.014] - args: function (..., workers = 2L, envir = parent.frame())
[13:35:49.014] - tweaked: TRUE
[13:35:49.014] - call: plan(multisession, workers = 2L)
[13:35:49.014] getGlobalsAndPackages() ...
[13:35:49.014] Not searching for globals
[13:35:49.015] - globals: [0] <none>
[13:35:49.015] getGlobalsAndPackages() ... DONE
[13:35:49.015] [local output] makeClusterPSOCK() ...
[13:35:49.047] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:35:49.048] [local output] Base port: 11663
[13:35:49.048] [local output] Getting setup options for 2 cluster nodes ...
[13:35:49.048] [local output]  - Node 1 of 2 ...
[13:35:49.049] [local output] localMachine=TRUE => revtunnel=FALSE

[13:35:49.049] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp12VmkR/worker.rank=1.parallelly.parent=79311.135cf575750b.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmp12VmkR/worker.rank=1.parallelly.parent=79311.135cf575750b.pid")'’
[13:35:49.237] - Possible to infer worker's PID: TRUE
[13:35:49.238] [local output] Rscript port: 11663

[13:35:49.238] [local output]  - Node 2 of 2 ...
[13:35:49.239] [local output] localMachine=TRUE => revtunnel=FALSE

[13:35:49.239] [local output] Rscript port: 11663

[13:35:49.240] [local output] Getting setup options for 2 cluster nodes ... done
[13:35:49.240] [local output]  - Parallel setup requested for some PSOCK nodes
[13:35:49.240] [local output] Setting up PSOCK nodes in parallel
[13:35:49.240] List of 36
[13:35:49.240]  $ worker          : chr "localhost"
[13:35:49.240]   ..- attr(*, "localhost")= logi TRUE
[13:35:49.240]  $ master          : chr "localhost"
[13:35:49.240]  $ port            : int 11663
[13:35:49.240]  $ connectTimeout  : num 120
[13:35:49.240]  $ timeout         : num 2592000
[13:35:49.240]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:35:49.240]  $ homogeneous     : logi TRUE
[13:35:49.240]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:35:49.240]  $ rscript_envs    : NULL
[13:35:49.240]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:35:49.240]  $ rscript_startup : NULL
[13:35:49.240]  $ rscript_sh      : chr "sh"
[13:35:49.240]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:35:49.240]  $ methods         : logi TRUE
[13:35:49.240]  $ socketOptions   : chr "no-delay"
[13:35:49.240]  $ useXDR          : logi FALSE
[13:35:49.240]  $ outfile         : chr "/dev/null"
[13:35:49.240]  $ renice          : int NA
[13:35:49.240]  $ rshcmd          : NULL
[13:35:49.240]  $ user            : chr(0) 
[13:35:49.240]  $ revtunnel       : logi FALSE
[13:35:49.240]  $ rshlogfile      : NULL
[13:35:49.240]  $ rshopts         : chr(0) 
[13:35:49.240]  $ rank            : int 1
[13:35:49.240]  $ manual          : logi FALSE
[13:35:49.240]  $ dryrun          : logi FALSE
[13:35:49.240]  $ quiet           : logi FALSE
[13:35:49.240]  $ setup_strategy  : chr "parallel"
[13:35:49.240]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:35:49.240]  $ pidfile         : chr "/tmp/Rtmp12VmkR/worker.rank=1.parallelly.parent=79311.135cf575750b.pid"
[13:35:49.240]  $ rshcmd_label    : NULL
[13:35:49.240]  $ rsh_call        : NULL
[13:35:49.240]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:35:49.240]  $ localMachine    : logi TRUE
[13:35:49.240]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:35:49.240]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:35:49.240]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:35:49.240]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:35:49.240]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:35:49.240]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:35:49.240]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:35:49.240]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:35:49.240]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:35:49.240]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:35:49.240]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:35:49.240]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:35:49.240]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:35:49.240]  $ arguments       :List of 28
[13:35:49.240]   ..$ worker          : chr "localhost"
[13:35:49.240]   ..$ master          : NULL
[13:35:49.240]   ..$ port            : int 11663
[13:35:49.240]   ..$ connectTimeout  : num 120
[13:35:49.240]   ..$ timeout         : num 2592000
[13:35:49.240]   ..$ rscript         : NULL
[13:35:49.240]   ..$ homogeneous     : NULL
[13:35:49.240]   ..$ rscript_args    : NULL
[13:35:49.240]   ..$ rscript_envs    : NULL
[13:35:49.240]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:35:49.240]   ..$ rscript_startup : NULL
[13:35:49.240]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:35:49.240]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:35:49.240]   ..$ methods         : logi TRUE
[13:35:49.240]   ..$ socketOptions   : chr "no-delay"
[13:35:49.240]   ..$ useXDR          : logi FALSE
[13:35:49.240]   ..$ outfile         : chr "/dev/null"
[13:35:49.240]   ..$ renice          : int NA
[13:35:49.240]   ..$ rshcmd          : NULL
[13:35:49.240]   ..$ user            : NULL
[13:35:49.240]   ..$ revtunnel       : logi NA
[13:35:49.240]   ..$ rshlogfile      : NULL
[13:35:49.240]   ..$ rshopts         : NULL
[13:35:49.240]   ..$ rank            : int 1
[13:35:49.240]   ..$ manual          : logi FALSE
[13:35:49.240]   ..$ dryrun          : logi FALSE
[13:35:49.240]   ..$ quiet           : logi FALSE
[13:35:49.240]   ..$ setup_strategy  : chr "parallel"
[13:35:49.240]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:35:49.260] [local output] System call to launch all workers:
[13:35:49.260] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp12VmkR/worker.rank=1.parallelly.parent=79311.135cf575750b.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11663 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:35:49.260] [local output] Starting PSOCK main server
[13:35:49.266] [local output] Workers launched
[13:35:49.266] [local output] Waiting for workers to connect back
[13:35:49.266]  - [local output] 0 workers out of 2 ready
[13:35:49.515]  - [local output] 0 workers out of 2 ready
[13:35:49.516]  - [local output] 1 workers out of 2 ready
[13:35:49.516]  - [local output] 2 workers out of 2 ready
[13:35:49.516] [local output] Launching of workers completed
[13:35:49.517] [local output] Collecting session information from workers
[13:35:49.518] [local output]  - Worker #1 of 2
[13:35:49.518] [local output]  - Worker #2 of 2
[13:35:49.518] [local output] makeClusterPSOCK() ... done
[13:35:49.530] Packages needed by the future expression (n = 0): <none>
[13:35:49.530] Packages needed by future strategies (n = 0): <none>
[13:35:49.530] {
[13:35:49.530]     {
[13:35:49.530]         {
[13:35:49.530]             ...future.startTime <- base::Sys.time()
[13:35:49.530]             {
[13:35:49.530]                 {
[13:35:49.530]                   {
[13:35:49.530]                     {
[13:35:49.530]                       base::local({
[13:35:49.530]                         has_future <- base::requireNamespace("future", 
[13:35:49.530]                           quietly = TRUE)
[13:35:49.530]                         if (has_future) {
[13:35:49.530]                           ns <- base::getNamespace("future")
[13:35:49.530]                           version <- ns[[".package"]][["version"]]
[13:35:49.530]                           if (is.null(version)) 
[13:35:49.530]                             version <- utils::packageVersion("future")
[13:35:49.530]                         }
[13:35:49.530]                         else {
[13:35:49.530]                           version <- NULL
[13:35:49.530]                         }
[13:35:49.530]                         if (!has_future || version < "1.8.0") {
[13:35:49.530]                           info <- base::c(r_version = base::gsub("R version ", 
[13:35:49.530]                             "", base::R.version$version.string), 
[13:35:49.530]                             platform = base::sprintf("%s (%s-bit)", 
[13:35:49.530]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:35:49.530]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:35:49.530]                               "release", "version")], collapse = " "), 
[13:35:49.530]                             hostname = base::Sys.info()[["nodename"]])
[13:35:49.530]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:35:49.530]                             info)
[13:35:49.530]                           info <- base::paste(info, collapse = "; ")
[13:35:49.530]                           if (!has_future) {
[13:35:49.530]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:35:49.530]                               info)
[13:35:49.530]                           }
[13:35:49.530]                           else {
[13:35:49.530]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:35:49.530]                               info, version)
[13:35:49.530]                           }
[13:35:49.530]                           base::stop(msg)
[13:35:49.530]                         }
[13:35:49.530]                       })
[13:35:49.530]                     }
[13:35:49.530]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:35:49.530]                     base::options(mc.cores = 1L)
[13:35:49.530]                   }
[13:35:49.530]                   ...future.strategy.old <- future::plan("list")
[13:35:49.530]                   options(future.plan = NULL)
[13:35:49.530]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:35:49.530]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:35:49.530]                 }
[13:35:49.530]                 ...future.workdir <- getwd()
[13:35:49.530]             }
[13:35:49.530]             ...future.oldOptions <- base::as.list(base::.Options)
[13:35:49.530]             ...future.oldEnvVars <- base::Sys.getenv()
[13:35:49.530]         }
[13:35:49.530]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:35:49.530]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:35:49.530]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:35:49.530]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:35:49.530]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:35:49.530]             future.stdout.windows.reencode = NULL, width = 80L)
[13:35:49.530]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:35:49.530]             base::names(...future.oldOptions))
[13:35:49.530]     }
[13:35:49.530]     if (FALSE) {
[13:35:49.530]     }
[13:35:49.530]     else {
[13:35:49.530]         if (TRUE) {
[13:35:49.530]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:35:49.530]                 open = "w")
[13:35:49.530]         }
[13:35:49.530]         else {
[13:35:49.530]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:35:49.530]                 windows = "NUL", "/dev/null"), open = "w")
[13:35:49.530]         }
[13:35:49.530]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:35:49.530]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:35:49.530]             base::sink(type = "output", split = FALSE)
[13:35:49.530]             base::close(...future.stdout)
[13:35:49.530]         }, add = TRUE)
[13:35:49.530]     }
[13:35:49.530]     ...future.frame <- base::sys.nframe()
[13:35:49.530]     ...future.conditions <- base::list()
[13:35:49.530]     ...future.rng <- base::globalenv()$.Random.seed
[13:35:49.530]     if (FALSE) {
[13:35:49.530]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:35:49.530]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:35:49.530]     }
[13:35:49.530]     ...future.result <- base::tryCatch({
[13:35:49.530]         base::withCallingHandlers({
[13:35:49.530]             ...future.value <- base::withVisible(base::local({
[13:35:49.530]                 ...future.makeSendCondition <- base::local({
[13:35:49.530]                   sendCondition <- NULL
[13:35:49.530]                   function(frame = 1L) {
[13:35:49.530]                     if (is.function(sendCondition)) 
[13:35:49.530]                       return(sendCondition)
[13:35:49.530]                     ns <- getNamespace("parallel")
[13:35:49.530]                     if (exists("sendData", mode = "function", 
[13:35:49.530]                       envir = ns)) {
[13:35:49.530]                       parallel_sendData <- get("sendData", mode = "function", 
[13:35:49.530]                         envir = ns)
[13:35:49.530]                       envir <- sys.frame(frame)
[13:35:49.530]                       master <- NULL
[13:35:49.530]                       while (!identical(envir, .GlobalEnv) && 
[13:35:49.530]                         !identical(envir, emptyenv())) {
[13:35:49.530]                         if (exists("master", mode = "list", envir = envir, 
[13:35:49.530]                           inherits = FALSE)) {
[13:35:49.530]                           master <- get("master", mode = "list", 
[13:35:49.530]                             envir = envir, inherits = FALSE)
[13:35:49.530]                           if (inherits(master, c("SOCKnode", 
[13:35:49.530]                             "SOCK0node"))) {
[13:35:49.530]                             sendCondition <<- function(cond) {
[13:35:49.530]                               data <- list(type = "VALUE", value = cond, 
[13:35:49.530]                                 success = TRUE)
[13:35:49.530]                               parallel_sendData(master, data)
[13:35:49.530]                             }
[13:35:49.530]                             return(sendCondition)
[13:35:49.530]                           }
[13:35:49.530]                         }
[13:35:49.530]                         frame <- frame + 1L
[13:35:49.530]                         envir <- sys.frame(frame)
[13:35:49.530]                       }
[13:35:49.530]                     }
[13:35:49.530]                     sendCondition <<- function(cond) NULL
[13:35:49.530]                   }
[13:35:49.530]                 })
[13:35:49.530]                 withCallingHandlers({
[13:35:49.530]                   NA
[13:35:49.530]                 }, immediateCondition = function(cond) {
[13:35:49.530]                   sendCondition <- ...future.makeSendCondition()
[13:35:49.530]                   sendCondition(cond)
[13:35:49.530]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:35:49.530]                   {
[13:35:49.530]                     inherits <- base::inherits
[13:35:49.530]                     invokeRestart <- base::invokeRestart
[13:35:49.530]                     is.null <- base::is.null
[13:35:49.530]                     muffled <- FALSE
[13:35:49.530]                     if (inherits(cond, "message")) {
[13:35:49.530]                       muffled <- grepl(pattern, "muffleMessage")
[13:35:49.530]                       if (muffled) 
[13:35:49.530]                         invokeRestart("muffleMessage")
[13:35:49.530]                     }
[13:35:49.530]                     else if (inherits(cond, "warning")) {
[13:35:49.530]                       muffled <- grepl(pattern, "muffleWarning")
[13:35:49.530]                       if (muffled) 
[13:35:49.530]                         invokeRestart("muffleWarning")
[13:35:49.530]                     }
[13:35:49.530]                     else if (inherits(cond, "condition")) {
[13:35:49.530]                       if (!is.null(pattern)) {
[13:35:49.530]                         computeRestarts <- base::computeRestarts
[13:35:49.530]                         grepl <- base::grepl
[13:35:49.530]                         restarts <- computeRestarts(cond)
[13:35:49.530]                         for (restart in restarts) {
[13:35:49.530]                           name <- restart$name
[13:35:49.530]                           if (is.null(name)) 
[13:35:49.530]                             next
[13:35:49.530]                           if (!grepl(pattern, name)) 
[13:35:49.530]                             next
[13:35:49.530]                           invokeRestart(restart)
[13:35:49.530]                           muffled <- TRUE
[13:35:49.530]                           break
[13:35:49.530]                         }
[13:35:49.530]                       }
[13:35:49.530]                     }
[13:35:49.530]                     invisible(muffled)
[13:35:49.530]                   }
[13:35:49.530]                   muffleCondition(cond)
[13:35:49.530]                 })
[13:35:49.530]             }))
[13:35:49.530]             future::FutureResult(value = ...future.value$value, 
[13:35:49.530]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:35:49.530]                   ...future.rng), globalenv = if (FALSE) 
[13:35:49.530]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:35:49.530]                     ...future.globalenv.names))
[13:35:49.530]                 else NULL, started = ...future.startTime, version = "1.8")
[13:35:49.530]         }, condition = base::local({
[13:35:49.530]             c <- base::c
[13:35:49.530]             inherits <- base::inherits
[13:35:49.530]             invokeRestart <- base::invokeRestart
[13:35:49.530]             length <- base::length
[13:35:49.530]             list <- base::list
[13:35:49.530]             seq.int <- base::seq.int
[13:35:49.530]             signalCondition <- base::signalCondition
[13:35:49.530]             sys.calls <- base::sys.calls
[13:35:49.530]             `[[` <- base::`[[`
[13:35:49.530]             `+` <- base::`+`
[13:35:49.530]             `<<-` <- base::`<<-`
[13:35:49.530]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:35:49.530]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:35:49.530]                   3L)]
[13:35:49.530]             }
[13:35:49.530]             function(cond) {
[13:35:49.530]                 is_error <- inherits(cond, "error")
[13:35:49.530]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:35:49.530]                   NULL)
[13:35:49.530]                 if (is_error) {
[13:35:49.530]                   sessionInformation <- function() {
[13:35:49.530]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:35:49.530]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:35:49.530]                       search = base::search(), system = base::Sys.info())
[13:35:49.530]                   }
[13:35:49.530]                   ...future.conditions[[length(...future.conditions) + 
[13:35:49.530]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:35:49.530]                     cond$call), session = sessionInformation(), 
[13:35:49.530]                     timestamp = base::Sys.time(), signaled = 0L)
[13:35:49.530]                   signalCondition(cond)
[13:35:49.530]                 }
[13:35:49.530]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:35:49.530]                 "immediateCondition"))) {
[13:35:49.530]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:35:49.530]                   ...future.conditions[[length(...future.conditions) + 
[13:35:49.530]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:35:49.530]                   if (TRUE && !signal) {
[13:35:49.530]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:35:49.530]                     {
[13:35:49.530]                       inherits <- base::inherits
[13:35:49.530]                       invokeRestart <- base::invokeRestart
[13:35:49.530]                       is.null <- base::is.null
[13:35:49.530]                       muffled <- FALSE
[13:35:49.530]                       if (inherits(cond, "message")) {
[13:35:49.530]                         muffled <- grepl(pattern, "muffleMessage")
[13:35:49.530]                         if (muffled) 
[13:35:49.530]                           invokeRestart("muffleMessage")
[13:35:49.530]                       }
[13:35:49.530]                       else if (inherits(cond, "warning")) {
[13:35:49.530]                         muffled <- grepl(pattern, "muffleWarning")
[13:35:49.530]                         if (muffled) 
[13:35:49.530]                           invokeRestart("muffleWarning")
[13:35:49.530]                       }
[13:35:49.530]                       else if (inherits(cond, "condition")) {
[13:35:49.530]                         if (!is.null(pattern)) {
[13:35:49.530]                           computeRestarts <- base::computeRestarts
[13:35:49.530]                           grepl <- base::grepl
[13:35:49.530]                           restarts <- computeRestarts(cond)
[13:35:49.530]                           for (restart in restarts) {
[13:35:49.530]                             name <- restart$name
[13:35:49.530]                             if (is.null(name)) 
[13:35:49.530]                               next
[13:35:49.530]                             if (!grepl(pattern, name)) 
[13:35:49.530]                               next
[13:35:49.530]                             invokeRestart(restart)
[13:35:49.530]                             muffled <- TRUE
[13:35:49.530]                             break
[13:35:49.530]                           }
[13:35:49.530]                         }
[13:35:49.530]                       }
[13:35:49.530]                       invisible(muffled)
[13:35:49.530]                     }
[13:35:49.530]                     muffleCondition(cond, pattern = "^muffle")
[13:35:49.530]                   }
[13:35:49.530]                 }
[13:35:49.530]                 else {
[13:35:49.530]                   if (TRUE) {
[13:35:49.530]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:35:49.530]                     {
[13:35:49.530]                       inherits <- base::inherits
[13:35:49.530]                       invokeRestart <- base::invokeRestart
[13:35:49.530]                       is.null <- base::is.null
[13:35:49.530]                       muffled <- FALSE
[13:35:49.530]                       if (inherits(cond, "message")) {
[13:35:49.530]                         muffled <- grepl(pattern, "muffleMessage")
[13:35:49.530]                         if (muffled) 
[13:35:49.530]                           invokeRestart("muffleMessage")
[13:35:49.530]                       }
[13:35:49.530]                       else if (inherits(cond, "warning")) {
[13:35:49.530]                         muffled <- grepl(pattern, "muffleWarning")
[13:35:49.530]                         if (muffled) 
[13:35:49.530]                           invokeRestart("muffleWarning")
[13:35:49.530]                       }
[13:35:49.530]                       else if (inherits(cond, "condition")) {
[13:35:49.530]                         if (!is.null(pattern)) {
[13:35:49.530]                           computeRestarts <- base::computeRestarts
[13:35:49.530]                           grepl <- base::grepl
[13:35:49.530]                           restarts <- computeRestarts(cond)
[13:35:49.530]                           for (restart in restarts) {
[13:35:49.530]                             name <- restart$name
[13:35:49.530]                             if (is.null(name)) 
[13:35:49.530]                               next
[13:35:49.530]                             if (!grepl(pattern, name)) 
[13:35:49.530]                               next
[13:35:49.530]                             invokeRestart(restart)
[13:35:49.530]                             muffled <- TRUE
[13:35:49.530]                             break
[13:35:49.530]                           }
[13:35:49.530]                         }
[13:35:49.530]                       }
[13:35:49.530]                       invisible(muffled)
[13:35:49.530]                     }
[13:35:49.530]                     muffleCondition(cond, pattern = "^muffle")
[13:35:49.530]                   }
[13:35:49.530]                 }
[13:35:49.530]             }
[13:35:49.530]         }))
[13:35:49.530]     }, error = function(ex) {
[13:35:49.530]         base::structure(base::list(value = NULL, visible = NULL, 
[13:35:49.530]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:35:49.530]                 ...future.rng), started = ...future.startTime, 
[13:35:49.530]             finished = Sys.time(), session_uuid = NA_character_, 
[13:35:49.530]             version = "1.8"), class = "FutureResult")
[13:35:49.530]     }, finally = {
[13:35:49.530]         if (!identical(...future.workdir, getwd())) 
[13:35:49.530]             setwd(...future.workdir)
[13:35:49.530]         {
[13:35:49.530]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:35:49.530]                 ...future.oldOptions$nwarnings <- NULL
[13:35:49.530]             }
[13:35:49.530]             base::options(...future.oldOptions)
[13:35:49.530]             if (.Platform$OS.type == "windows") {
[13:35:49.530]                 old_names <- names(...future.oldEnvVars)
[13:35:49.530]                 envs <- base::Sys.getenv()
[13:35:49.530]                 names <- names(envs)
[13:35:49.530]                 common <- intersect(names, old_names)
[13:35:49.530]                 added <- setdiff(names, old_names)
[13:35:49.530]                 removed <- setdiff(old_names, names)
[13:35:49.530]                 changed <- common[...future.oldEnvVars[common] != 
[13:35:49.530]                   envs[common]]
[13:35:49.530]                 NAMES <- toupper(changed)
[13:35:49.530]                 args <- list()
[13:35:49.530]                 for (kk in seq_along(NAMES)) {
[13:35:49.530]                   name <- changed[[kk]]
[13:35:49.530]                   NAME <- NAMES[[kk]]
[13:35:49.530]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:49.530]                     next
[13:35:49.530]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:35:49.530]                 }
[13:35:49.530]                 NAMES <- toupper(added)
[13:35:49.530]                 for (kk in seq_along(NAMES)) {
[13:35:49.530]                   name <- added[[kk]]
[13:35:49.530]                   NAME <- NAMES[[kk]]
[13:35:49.530]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:49.530]                     next
[13:35:49.530]                   args[[name]] <- ""
[13:35:49.530]                 }
[13:35:49.530]                 NAMES <- toupper(removed)
[13:35:49.530]                 for (kk in seq_along(NAMES)) {
[13:35:49.530]                   name <- removed[[kk]]
[13:35:49.530]                   NAME <- NAMES[[kk]]
[13:35:49.530]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:49.530]                     next
[13:35:49.530]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:35:49.530]                 }
[13:35:49.530]                 if (length(args) > 0) 
[13:35:49.530]                   base::do.call(base::Sys.setenv, args = args)
[13:35:49.530]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:35:49.530]             }
[13:35:49.530]             else {
[13:35:49.530]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:35:49.530]             }
[13:35:49.530]             {
[13:35:49.530]                 if (base::length(...future.futureOptionsAdded) > 
[13:35:49.530]                   0L) {
[13:35:49.530]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:35:49.530]                   base::names(opts) <- ...future.futureOptionsAdded
[13:35:49.530]                   base::options(opts)
[13:35:49.530]                 }
[13:35:49.530]                 {
[13:35:49.530]                   {
[13:35:49.530]                     base::options(mc.cores = ...future.mc.cores.old)
[13:35:49.530]                     NULL
[13:35:49.530]                   }
[13:35:49.530]                   options(future.plan = NULL)
[13:35:49.530]                   if (is.na(NA_character_)) 
[13:35:49.530]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:35:49.530]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:35:49.530]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:35:49.530]                     .init = FALSE)
[13:35:49.530]                 }
[13:35:49.530]             }
[13:35:49.530]         }
[13:35:49.530]     })
[13:35:49.530]     if (TRUE) {
[13:35:49.530]         base::sink(type = "output", split = FALSE)
[13:35:49.530]         if (TRUE) {
[13:35:49.530]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:35:49.530]         }
[13:35:49.530]         else {
[13:35:49.530]             ...future.result["stdout"] <- base::list(NULL)
[13:35:49.530]         }
[13:35:49.530]         base::close(...future.stdout)
[13:35:49.530]         ...future.stdout <- NULL
[13:35:49.530]     }
[13:35:49.530]     ...future.result$conditions <- ...future.conditions
[13:35:49.530]     ...future.result$finished <- base::Sys.time()
[13:35:49.530]     ...future.result
[13:35:49.530] }
[13:35:49.585] MultisessionFuture started
[13:35:49.585] result() for ClusterFuture ...
[13:35:49.586] receiveMessageFromWorker() for ClusterFuture ...
[13:35:49.586] - Validating connection of MultisessionFuture
[13:35:49.619] - received message: FutureResult
[13:35:49.619] - Received FutureResult
[13:35:49.622] - Erased future from FutureRegistry
[13:35:49.622] result() for ClusterFuture ...
[13:35:49.622] - result already collected: FutureResult
[13:35:49.622] result() for ClusterFuture ... done
[13:35:49.622] receiveMessageFromWorker() for ClusterFuture ... done
[13:35:49.622] result() for ClusterFuture ... done
[13:35:49.623] result() for ClusterFuture ...
[13:35:49.623] - result already collected: FutureResult
[13:35:49.623] result() for ClusterFuture ... done
[13:35:49.623] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:35:49.623] plan(): nbrOfWorkers() = 2
[13:35:49.623] getGlobalsAndPackages() ...
[13:35:49.624] Searching for globals...
[13:35:49.625] - globals found: [3] ‘{’, ‘Sys.sleep’, ‘stop’
[13:35:49.625] Searching for globals ... DONE
[13:35:49.626] Resolving globals: FALSE
[13:35:49.626] 
[13:35:49.626] 
[13:35:49.626] getGlobalsAndPackages() ... DONE
[13:35:49.627] run() for ‘Future’ ...
[13:35:49.627] - state: ‘created’
[13:35:49.627] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:35:49.638] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:35:49.638] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:35:49.638]   - Field: ‘node’
[13:35:49.638]   - Field: ‘label’
[13:35:49.638]   - Field: ‘local’
[13:35:49.639]   - Field: ‘owner’
[13:35:49.639]   - Field: ‘envir’
[13:35:49.639]   - Field: ‘workers’
[13:35:49.639]   - Field: ‘packages’
[13:35:49.639]   - Field: ‘gc’
[13:35:49.639]   - Field: ‘conditions’
[13:35:49.639]   - Field: ‘persistent’
[13:35:49.639]   - Field: ‘expr’
[13:35:49.639]   - Field: ‘uuid’
[13:35:49.639]   - Field: ‘seed’
[13:35:49.640]   - Field: ‘version’
[13:35:49.640]   - Field: ‘result’
[13:35:49.640]   - Field: ‘asynchronous’
[13:35:49.640]   - Field: ‘calls’
[13:35:49.640]   - Field: ‘globals’
[13:35:49.640]   - Field: ‘stdout’
[13:35:49.640]   - Field: ‘earlySignal’
[13:35:49.640]   - Field: ‘lazy’
[13:35:49.641]   - Field: ‘state’
[13:35:49.641] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:35:49.641] - Launch lazy future ...
[13:35:49.641] Packages needed by the future expression (n = 0): <none>
[13:35:49.641] Packages needed by future strategies (n = 0): <none>
[13:35:49.642] {
[13:35:49.642]     {
[13:35:49.642]         {
[13:35:49.642]             ...future.startTime <- base::Sys.time()
[13:35:49.642]             {
[13:35:49.642]                 {
[13:35:49.642]                   {
[13:35:49.642]                     {
[13:35:49.642]                       base::local({
[13:35:49.642]                         has_future <- base::requireNamespace("future", 
[13:35:49.642]                           quietly = TRUE)
[13:35:49.642]                         if (has_future) {
[13:35:49.642]                           ns <- base::getNamespace("future")
[13:35:49.642]                           version <- ns[[".package"]][["version"]]
[13:35:49.642]                           if (is.null(version)) 
[13:35:49.642]                             version <- utils::packageVersion("future")
[13:35:49.642]                         }
[13:35:49.642]                         else {
[13:35:49.642]                           version <- NULL
[13:35:49.642]                         }
[13:35:49.642]                         if (!has_future || version < "1.8.0") {
[13:35:49.642]                           info <- base::c(r_version = base::gsub("R version ", 
[13:35:49.642]                             "", base::R.version$version.string), 
[13:35:49.642]                             platform = base::sprintf("%s (%s-bit)", 
[13:35:49.642]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:35:49.642]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:35:49.642]                               "release", "version")], collapse = " "), 
[13:35:49.642]                             hostname = base::Sys.info()[["nodename"]])
[13:35:49.642]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:35:49.642]                             info)
[13:35:49.642]                           info <- base::paste(info, collapse = "; ")
[13:35:49.642]                           if (!has_future) {
[13:35:49.642]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:35:49.642]                               info)
[13:35:49.642]                           }
[13:35:49.642]                           else {
[13:35:49.642]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:35:49.642]                               info, version)
[13:35:49.642]                           }
[13:35:49.642]                           base::stop(msg)
[13:35:49.642]                         }
[13:35:49.642]                       })
[13:35:49.642]                     }
[13:35:49.642]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:35:49.642]                     base::options(mc.cores = 1L)
[13:35:49.642]                   }
[13:35:49.642]                   ...future.strategy.old <- future::plan("list")
[13:35:49.642]                   options(future.plan = NULL)
[13:35:49.642]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:35:49.642]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:35:49.642]                 }
[13:35:49.642]                 ...future.workdir <- getwd()
[13:35:49.642]             }
[13:35:49.642]             ...future.oldOptions <- base::as.list(base::.Options)
[13:35:49.642]             ...future.oldEnvVars <- base::Sys.getenv()
[13:35:49.642]         }
[13:35:49.642]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:35:49.642]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:35:49.642]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:35:49.642]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:35:49.642]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:35:49.642]             future.stdout.windows.reencode = NULL, width = 80L)
[13:35:49.642]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:35:49.642]             base::names(...future.oldOptions))
[13:35:49.642]     }
[13:35:49.642]     if (FALSE) {
[13:35:49.642]     }
[13:35:49.642]     else {
[13:35:49.642]         if (TRUE) {
[13:35:49.642]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:35:49.642]                 open = "w")
[13:35:49.642]         }
[13:35:49.642]         else {
[13:35:49.642]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:35:49.642]                 windows = "NUL", "/dev/null"), open = "w")
[13:35:49.642]         }
[13:35:49.642]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:35:49.642]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:35:49.642]             base::sink(type = "output", split = FALSE)
[13:35:49.642]             base::close(...future.stdout)
[13:35:49.642]         }, add = TRUE)
[13:35:49.642]     }
[13:35:49.642]     ...future.frame <- base::sys.nframe()
[13:35:49.642]     ...future.conditions <- base::list()
[13:35:49.642]     ...future.rng <- base::globalenv()$.Random.seed
[13:35:49.642]     if (FALSE) {
[13:35:49.642]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:35:49.642]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:35:49.642]     }
[13:35:49.642]     ...future.result <- base::tryCatch({
[13:35:49.642]         base::withCallingHandlers({
[13:35:49.642]             ...future.value <- base::withVisible(base::local({
[13:35:49.642]                 ...future.makeSendCondition <- base::local({
[13:35:49.642]                   sendCondition <- NULL
[13:35:49.642]                   function(frame = 1L) {
[13:35:49.642]                     if (is.function(sendCondition)) 
[13:35:49.642]                       return(sendCondition)
[13:35:49.642]                     ns <- getNamespace("parallel")
[13:35:49.642]                     if (exists("sendData", mode = "function", 
[13:35:49.642]                       envir = ns)) {
[13:35:49.642]                       parallel_sendData <- get("sendData", mode = "function", 
[13:35:49.642]                         envir = ns)
[13:35:49.642]                       envir <- sys.frame(frame)
[13:35:49.642]                       master <- NULL
[13:35:49.642]                       while (!identical(envir, .GlobalEnv) && 
[13:35:49.642]                         !identical(envir, emptyenv())) {
[13:35:49.642]                         if (exists("master", mode = "list", envir = envir, 
[13:35:49.642]                           inherits = FALSE)) {
[13:35:49.642]                           master <- get("master", mode = "list", 
[13:35:49.642]                             envir = envir, inherits = FALSE)
[13:35:49.642]                           if (inherits(master, c("SOCKnode", 
[13:35:49.642]                             "SOCK0node"))) {
[13:35:49.642]                             sendCondition <<- function(cond) {
[13:35:49.642]                               data <- list(type = "VALUE", value = cond, 
[13:35:49.642]                                 success = TRUE)
[13:35:49.642]                               parallel_sendData(master, data)
[13:35:49.642]                             }
[13:35:49.642]                             return(sendCondition)
[13:35:49.642]                           }
[13:35:49.642]                         }
[13:35:49.642]                         frame <- frame + 1L
[13:35:49.642]                         envir <- sys.frame(frame)
[13:35:49.642]                       }
[13:35:49.642]                     }
[13:35:49.642]                     sendCondition <<- function(cond) NULL
[13:35:49.642]                   }
[13:35:49.642]                 })
[13:35:49.642]                 withCallingHandlers({
[13:35:49.642]                   {
[13:35:49.642]                     Sys.sleep(3)
[13:35:49.642]                     42L
[13:35:49.642]                     stop("Woops")
[13:35:49.642]                   }
[13:35:49.642]                 }, immediateCondition = function(cond) {
[13:35:49.642]                   sendCondition <- ...future.makeSendCondition()
[13:35:49.642]                   sendCondition(cond)
[13:35:49.642]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:35:49.642]                   {
[13:35:49.642]                     inherits <- base::inherits
[13:35:49.642]                     invokeRestart <- base::invokeRestart
[13:35:49.642]                     is.null <- base::is.null
[13:35:49.642]                     muffled <- FALSE
[13:35:49.642]                     if (inherits(cond, "message")) {
[13:35:49.642]                       muffled <- grepl(pattern, "muffleMessage")
[13:35:49.642]                       if (muffled) 
[13:35:49.642]                         invokeRestart("muffleMessage")
[13:35:49.642]                     }
[13:35:49.642]                     else if (inherits(cond, "warning")) {
[13:35:49.642]                       muffled <- grepl(pattern, "muffleWarning")
[13:35:49.642]                       if (muffled) 
[13:35:49.642]                         invokeRestart("muffleWarning")
[13:35:49.642]                     }
[13:35:49.642]                     else if (inherits(cond, "condition")) {
[13:35:49.642]                       if (!is.null(pattern)) {
[13:35:49.642]                         computeRestarts <- base::computeRestarts
[13:35:49.642]                         grepl <- base::grepl
[13:35:49.642]                         restarts <- computeRestarts(cond)
[13:35:49.642]                         for (restart in restarts) {
[13:35:49.642]                           name <- restart$name
[13:35:49.642]                           if (is.null(name)) 
[13:35:49.642]                             next
[13:35:49.642]                           if (!grepl(pattern, name)) 
[13:35:49.642]                             next
[13:35:49.642]                           invokeRestart(restart)
[13:35:49.642]                           muffled <- TRUE
[13:35:49.642]                           break
[13:35:49.642]                         }
[13:35:49.642]                       }
[13:35:49.642]                     }
[13:35:49.642]                     invisible(muffled)
[13:35:49.642]                   }
[13:35:49.642]                   muffleCondition(cond)
[13:35:49.642]                 })
[13:35:49.642]             }))
[13:35:49.642]             future::FutureResult(value = ...future.value$value, 
[13:35:49.642]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:35:49.642]                   ...future.rng), globalenv = if (FALSE) 
[13:35:49.642]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:35:49.642]                     ...future.globalenv.names))
[13:35:49.642]                 else NULL, started = ...future.startTime, version = "1.8")
[13:35:49.642]         }, condition = base::local({
[13:35:49.642]             c <- base::c
[13:35:49.642]             inherits <- base::inherits
[13:35:49.642]             invokeRestart <- base::invokeRestart
[13:35:49.642]             length <- base::length
[13:35:49.642]             list <- base::list
[13:35:49.642]             seq.int <- base::seq.int
[13:35:49.642]             signalCondition <- base::signalCondition
[13:35:49.642]             sys.calls <- base::sys.calls
[13:35:49.642]             `[[` <- base::`[[`
[13:35:49.642]             `+` <- base::`+`
[13:35:49.642]             `<<-` <- base::`<<-`
[13:35:49.642]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:35:49.642]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:35:49.642]                   3L)]
[13:35:49.642]             }
[13:35:49.642]             function(cond) {
[13:35:49.642]                 is_error <- inherits(cond, "error")
[13:35:49.642]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:35:49.642]                   NULL)
[13:35:49.642]                 if (is_error) {
[13:35:49.642]                   sessionInformation <- function() {
[13:35:49.642]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:35:49.642]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:35:49.642]                       search = base::search(), system = base::Sys.info())
[13:35:49.642]                   }
[13:35:49.642]                   ...future.conditions[[length(...future.conditions) + 
[13:35:49.642]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:35:49.642]                     cond$call), session = sessionInformation(), 
[13:35:49.642]                     timestamp = base::Sys.time(), signaled = 0L)
[13:35:49.642]                   signalCondition(cond)
[13:35:49.642]                 }
[13:35:49.642]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:35:49.642]                 "immediateCondition"))) {
[13:35:49.642]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:35:49.642]                   ...future.conditions[[length(...future.conditions) + 
[13:35:49.642]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:35:49.642]                   if (TRUE && !signal) {
[13:35:49.642]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:35:49.642]                     {
[13:35:49.642]                       inherits <- base::inherits
[13:35:49.642]                       invokeRestart <- base::invokeRestart
[13:35:49.642]                       is.null <- base::is.null
[13:35:49.642]                       muffled <- FALSE
[13:35:49.642]                       if (inherits(cond, "message")) {
[13:35:49.642]                         muffled <- grepl(pattern, "muffleMessage")
[13:35:49.642]                         if (muffled) 
[13:35:49.642]                           invokeRestart("muffleMessage")
[13:35:49.642]                       }
[13:35:49.642]                       else if (inherits(cond, "warning")) {
[13:35:49.642]                         muffled <- grepl(pattern, "muffleWarning")
[13:35:49.642]                         if (muffled) 
[13:35:49.642]                           invokeRestart("muffleWarning")
[13:35:49.642]                       }
[13:35:49.642]                       else if (inherits(cond, "condition")) {
[13:35:49.642]                         if (!is.null(pattern)) {
[13:35:49.642]                           computeRestarts <- base::computeRestarts
[13:35:49.642]                           grepl <- base::grepl
[13:35:49.642]                           restarts <- computeRestarts(cond)
[13:35:49.642]                           for (restart in restarts) {
[13:35:49.642]                             name <- restart$name
[13:35:49.642]                             if (is.null(name)) 
[13:35:49.642]                               next
[13:35:49.642]                             if (!grepl(pattern, name)) 
[13:35:49.642]                               next
[13:35:49.642]                             invokeRestart(restart)
[13:35:49.642]                             muffled <- TRUE
[13:35:49.642]                             break
[13:35:49.642]                           }
[13:35:49.642]                         }
[13:35:49.642]                       }
[13:35:49.642]                       invisible(muffled)
[13:35:49.642]                     }
[13:35:49.642]                     muffleCondition(cond, pattern = "^muffle")
[13:35:49.642]                   }
[13:35:49.642]                 }
[13:35:49.642]                 else {
[13:35:49.642]                   if (TRUE) {
[13:35:49.642]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:35:49.642]                     {
[13:35:49.642]                       inherits <- base::inherits
[13:35:49.642]                       invokeRestart <- base::invokeRestart
[13:35:49.642]                       is.null <- base::is.null
[13:35:49.642]                       muffled <- FALSE
[13:35:49.642]                       if (inherits(cond, "message")) {
[13:35:49.642]                         muffled <- grepl(pattern, "muffleMessage")
[13:35:49.642]                         if (muffled) 
[13:35:49.642]                           invokeRestart("muffleMessage")
[13:35:49.642]                       }
[13:35:49.642]                       else if (inherits(cond, "warning")) {
[13:35:49.642]                         muffled <- grepl(pattern, "muffleWarning")
[13:35:49.642]                         if (muffled) 
[13:35:49.642]                           invokeRestart("muffleWarning")
[13:35:49.642]                       }
[13:35:49.642]                       else if (inherits(cond, "condition")) {
[13:35:49.642]                         if (!is.null(pattern)) {
[13:35:49.642]                           computeRestarts <- base::computeRestarts
[13:35:49.642]                           grepl <- base::grepl
[13:35:49.642]                           restarts <- computeRestarts(cond)
[13:35:49.642]                           for (restart in restarts) {
[13:35:49.642]                             name <- restart$name
[13:35:49.642]                             if (is.null(name)) 
[13:35:49.642]                               next
[13:35:49.642]                             if (!grepl(pattern, name)) 
[13:35:49.642]                               next
[13:35:49.642]                             invokeRestart(restart)
[13:35:49.642]                             muffled <- TRUE
[13:35:49.642]                             break
[13:35:49.642]                           }
[13:35:49.642]                         }
[13:35:49.642]                       }
[13:35:49.642]                       invisible(muffled)
[13:35:49.642]                     }
[13:35:49.642]                     muffleCondition(cond, pattern = "^muffle")
[13:35:49.642]                   }
[13:35:49.642]                 }
[13:35:49.642]             }
[13:35:49.642]         }))
[13:35:49.642]     }, error = function(ex) {
[13:35:49.642]         base::structure(base::list(value = NULL, visible = NULL, 
[13:35:49.642]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:35:49.642]                 ...future.rng), started = ...future.startTime, 
[13:35:49.642]             finished = Sys.time(), session_uuid = NA_character_, 
[13:35:49.642]             version = "1.8"), class = "FutureResult")
[13:35:49.642]     }, finally = {
[13:35:49.642]         if (!identical(...future.workdir, getwd())) 
[13:35:49.642]             setwd(...future.workdir)
[13:35:49.642]         {
[13:35:49.642]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:35:49.642]                 ...future.oldOptions$nwarnings <- NULL
[13:35:49.642]             }
[13:35:49.642]             base::options(...future.oldOptions)
[13:35:49.642]             if (.Platform$OS.type == "windows") {
[13:35:49.642]                 old_names <- names(...future.oldEnvVars)
[13:35:49.642]                 envs <- base::Sys.getenv()
[13:35:49.642]                 names <- names(envs)
[13:35:49.642]                 common <- intersect(names, old_names)
[13:35:49.642]                 added <- setdiff(names, old_names)
[13:35:49.642]                 removed <- setdiff(old_names, names)
[13:35:49.642]                 changed <- common[...future.oldEnvVars[common] != 
[13:35:49.642]                   envs[common]]
[13:35:49.642]                 NAMES <- toupper(changed)
[13:35:49.642]                 args <- list()
[13:35:49.642]                 for (kk in seq_along(NAMES)) {
[13:35:49.642]                   name <- changed[[kk]]
[13:35:49.642]                   NAME <- NAMES[[kk]]
[13:35:49.642]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:49.642]                     next
[13:35:49.642]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:35:49.642]                 }
[13:35:49.642]                 NAMES <- toupper(added)
[13:35:49.642]                 for (kk in seq_along(NAMES)) {
[13:35:49.642]                   name <- added[[kk]]
[13:35:49.642]                   NAME <- NAMES[[kk]]
[13:35:49.642]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:49.642]                     next
[13:35:49.642]                   args[[name]] <- ""
[13:35:49.642]                 }
[13:35:49.642]                 NAMES <- toupper(removed)
[13:35:49.642]                 for (kk in seq_along(NAMES)) {
[13:35:49.642]                   name <- removed[[kk]]
[13:35:49.642]                   NAME <- NAMES[[kk]]
[13:35:49.642]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:49.642]                     next
[13:35:49.642]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:35:49.642]                 }
[13:35:49.642]                 if (length(args) > 0) 
[13:35:49.642]                   base::do.call(base::Sys.setenv, args = args)
[13:35:49.642]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:35:49.642]             }
[13:35:49.642]             else {
[13:35:49.642]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:35:49.642]             }
[13:35:49.642]             {
[13:35:49.642]                 if (base::length(...future.futureOptionsAdded) > 
[13:35:49.642]                   0L) {
[13:35:49.642]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:35:49.642]                   base::names(opts) <- ...future.futureOptionsAdded
[13:35:49.642]                   base::options(opts)
[13:35:49.642]                 }
[13:35:49.642]                 {
[13:35:49.642]                   {
[13:35:49.642]                     base::options(mc.cores = ...future.mc.cores.old)
[13:35:49.642]                     NULL
[13:35:49.642]                   }
[13:35:49.642]                   options(future.plan = NULL)
[13:35:49.642]                   if (is.na(NA_character_)) 
[13:35:49.642]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:35:49.642]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:35:49.642]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:35:49.642]                     .init = FALSE)
[13:35:49.642]                 }
[13:35:49.642]             }
[13:35:49.642]         }
[13:35:49.642]     })
[13:35:49.642]     if (TRUE) {
[13:35:49.642]         base::sink(type = "output", split = FALSE)
[13:35:49.642]         if (TRUE) {
[13:35:49.642]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:35:49.642]         }
[13:35:49.642]         else {
[13:35:49.642]             ...future.result["stdout"] <- base::list(NULL)
[13:35:49.642]         }
[13:35:49.642]         base::close(...future.stdout)
[13:35:49.642]         ...future.stdout <- NULL
[13:35:49.642]     }
[13:35:49.642]     ...future.result$conditions <- ...future.conditions
[13:35:49.642]     ...future.result$finished <- base::Sys.time()
[13:35:49.642]     ...future.result
[13:35:49.642] }
[13:35:49.645] MultisessionFuture started
[13:35:49.645] - Launch lazy future ... done
[13:35:49.645] run() for ‘MultisessionFuture’ ... done
<simpleError: No error has been caught because the future is unresolved: ‘f’>
[13:35:52.661] receiveMessageFromWorker() for ClusterFuture ...
[13:35:52.662] - Validating connection of MultisessionFuture
[13:35:52.663] - received message: FutureResult
[13:35:52.663] - Received FutureResult
[13:35:52.663] - Erased future from FutureRegistry
[13:35:52.663] result() for ClusterFuture ...
[13:35:52.663] - result already collected: FutureResult
[13:35:52.663] result() for ClusterFuture ... done
[13:35:52.663] signalConditions() ...
[13:35:52.664]  - include = ‘immediateCondition’
[13:35:52.664]  - exclude = 
[13:35:52.664]  - resignal = FALSE
[13:35:52.664]  - Number of conditions: 1
[13:35:52.664] signalConditions() ... done
[13:35:52.664] receiveMessageFromWorker() for ClusterFuture ... done
[13:35:52.664] A MultisessionFuture was resolved (result was not collected)
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    Sys.sleep(3)
    42L
    stop("Woops")
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘simpleError’
Early signaling: FALSE
Owner process: e04f72b4-d04e-47a5-bb9d-110d0bdfdcae
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
> 
> message("*** backtrace( ) - exceptions ... DONE")
*** backtrace( ) - exceptions ... DONE
> 
> 
> message("*** backtrace( ) ... DONE")
*** backtrace( ) ... DONE
> 
> source("incl/end.R")
[13:35:52.666] plan(): Setting new future strategy stack:
[13:35:52.666] List of future strategies:
[13:35:52.666] 1. FutureStrategy:
[13:35:52.666]    - args: function (..., envir = parent.frame())
[13:35:52.666]    - tweaked: FALSE
[13:35:52.666]    - call: future::plan(oplan)
[13:35:52.667] plan(): nbrOfWorkers() = 1
> 
