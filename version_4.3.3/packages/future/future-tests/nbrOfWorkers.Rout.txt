
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[10:33:28.131] plan(): Setting new future strategy stack:
[10:33:28.131] List of future strategies:
[10:33:28.131] 1. sequential:
[10:33:28.131]    - args: function (..., envir = parent.frame())
[10:33:28.131]    - tweaked: FALSE
[10:33:28.131]    - call: future::plan("sequential")
[10:33:28.146] plan(): nbrOfWorkers() = 1
> 
> message("*** nbrOfWorkers() ...")
*** nbrOfWorkers() ...
> 
> strategies <- c("sequential")
> for (strategy in strategies) {
+   message("Type of future: ", strategy)
+ 
+   evaluator <- get(strategy, mode = "function")
+   n <- nbrOfWorkers(evaluator)
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == 1L)
+ 
+   plan(strategy)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == 1L)
+ 
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == 1L)
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+   stopifnot(n == 0L)
+ } ## for (strategy ...)
Type of future: sequential
nbrOfWorkers: 1
[10:33:28.163] plan(): Setting new future strategy stack:
[10:33:28.163] List of future strategies:
[10:33:28.163] 1. sequential:
[10:33:28.163]    - args: function (..., envir = parent.frame())
[10:33:28.163]    - tweaked: FALSE
[10:33:28.163]    - call: plan(strategy)
[10:33:28.174] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
nbrOfFreeWorkers: 1
nbrOfFreeWorkers(background = TRUE): 0
> 
> 
> strategies <- c("cluster", "multisession", "multicore")
> strategies <- intersect(strategies, supportedStrategies())
> cores <- availableCores()
> message("Number of available cores: ", cores)
Number of available cores: 2
> workers <- availableWorkers()
> nworkers <- length(workers)
> message(sprintf("Available workers: [n = %d] %s", nworkers, hpaste(sQuote(workers))))
Available workers: [n = 2] ‘localhost’, ‘localhost’
> 
> allButOneCore <- function() max(1L, future::availableCores() - 1L)
> allButOneWorker <- function() {
+   w <- future::availableWorkers()
+   if (length(w) > 1) w[-1] else w
+ }
> 
> for (strategy in strategies) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+ 
+   message("Type of future: ", strategy)
+ 
+   evaluator <- get(strategy, mode = "function")
+   n <- nbrOfWorkers(evaluator)
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == nworkers)
+ 
+   plan(strategy)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == nworkers)
+ 
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == nworkers)
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+ # FIXME  stopifnot(n == 0L)
+ 
+   plan(strategy, workers = 1L)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+ # FIXME  stopifnot(n == 0L)
+ 
+   plan(strategy, workers = allButOneCore)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+ # FIXME  stopifnot(n == 0L)
+ } ## for (strategy ...)
Type of future: multisession
nbrOfWorkers: 2
[10:33:28.206] plan(): Setting new future strategy stack:
[10:33:28.206] List of future strategies:
[10:33:28.206] 1. multisession:
[10:33:28.206]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:33:28.206]    - tweaked: FALSE
[10:33:28.206]    - call: plan(strategy)
[10:33:28.206] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:33:28.206] multisession:
[10:33:28.206] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:33:28.206] - tweaked: FALSE
[10:33:28.206] - call: plan(strategy)
[10:33:28.213] getGlobalsAndPackages() ...
[10:33:28.213] Not searching for globals
[10:33:28.213] - globals: [0] <none>
[10:33:28.213] getGlobalsAndPackages() ... DONE
[10:33:28.214] [local output] makeClusterPSOCK() ...
[10:33:28.245] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[10:33:28.246] [local output] Base port: 11738
[10:33:28.246] [local output] Getting setup options for 2 cluster nodes ...
[10:33:28.247] [local output]  - Node 1 of 2 ...
[10:33:28.247] [local output] localMachine=TRUE => revtunnel=FALSE

[10:33:28.248] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpJCh4Dg/worker.rank=1.parallelly.parent=85675.14eab1a430907.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpJCh4Dg/worker.rank=1.parallelly.parent=85675.14eab1a430907.pid")'’
[10:33:28.437] - Possible to infer worker's PID: TRUE
[10:33:28.438] [local output] Rscript port: 11738

[10:33:28.438] [local output]  - Node 2 of 2 ...
[10:33:28.439] [local output] localMachine=TRUE => revtunnel=FALSE

[10:33:28.439] [local output] Rscript port: 11738

[10:33:28.439] [local output] Getting setup options for 2 cluster nodes ... done
[10:33:28.440] [local output]  - Parallel setup requested for some PSOCK nodes
[10:33:28.440] [local output] Setting up PSOCK nodes in parallel
[10:33:28.440] List of 36
[10:33:28.440]  $ worker          : chr "localhost"
[10:33:28.440]   ..- attr(*, "localhost")= logi TRUE
[10:33:28.440]  $ master          : chr "localhost"
[10:33:28.440]  $ port            : int 11738
[10:33:28.440]  $ connectTimeout  : num 120
[10:33:28.440]  $ timeout         : num 2592000
[10:33:28.440]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:33:28.440]  $ homogeneous     : logi TRUE
[10:33:28.440]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:33:28.440]  $ rscript_envs    : NULL
[10:33:28.440]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:33:28.440]  $ rscript_startup : NULL
[10:33:28.440]  $ rscript_sh      : chr "sh"
[10:33:28.440]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:33:28.440]  $ methods         : logi TRUE
[10:33:28.440]  $ socketOptions   : chr "no-delay"
[10:33:28.440]  $ useXDR          : logi FALSE
[10:33:28.440]  $ outfile         : chr "/dev/null"
[10:33:28.440]  $ renice          : int NA
[10:33:28.440]  $ rshcmd          : NULL
[10:33:28.440]  $ user            : chr(0) 
[10:33:28.440]  $ revtunnel       : logi FALSE
[10:33:28.440]  $ rshlogfile      : NULL
[10:33:28.440]  $ rshopts         : chr(0) 
[10:33:28.440]  $ rank            : int 1
[10:33:28.440]  $ manual          : logi FALSE
[10:33:28.440]  $ dryrun          : logi FALSE
[10:33:28.440]  $ quiet           : logi FALSE
[10:33:28.440]  $ setup_strategy  : chr "parallel"
[10:33:28.440]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:33:28.440]  $ pidfile         : chr "/tmp/RtmpJCh4Dg/worker.rank=1.parallelly.parent=85675.14eab1a430907.pid"
[10:33:28.440]  $ rshcmd_label    : NULL
[10:33:28.440]  $ rsh_call        : NULL
[10:33:28.440]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:33:28.440]  $ localMachine    : logi TRUE
[10:33:28.440]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:33:28.440]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:33:28.440]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:33:28.440]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:33:28.440]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:33:28.440]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:33:28.440]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:33:28.440]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:33:28.440]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:33:28.440]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:33:28.440]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:33:28.440]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:33:28.440]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:33:28.440]  $ arguments       :List of 28
[10:33:28.440]   ..$ worker          : chr "localhost"
[10:33:28.440]   ..$ master          : NULL
[10:33:28.440]   ..$ port            : int 11738
[10:33:28.440]   ..$ connectTimeout  : num 120
[10:33:28.440]   ..$ timeout         : num 2592000
[10:33:28.440]   ..$ rscript         : NULL
[10:33:28.440]   ..$ homogeneous     : NULL
[10:33:28.440]   ..$ rscript_args    : NULL
[10:33:28.440]   ..$ rscript_envs    : NULL
[10:33:28.440]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:33:28.440]   ..$ rscript_startup : NULL
[10:33:28.440]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:33:28.440]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:33:28.440]   ..$ methods         : logi TRUE
[10:33:28.440]   ..$ socketOptions   : chr "no-delay"
[10:33:28.440]   ..$ useXDR          : logi FALSE
[10:33:28.440]   ..$ outfile         : chr "/dev/null"
[10:33:28.440]   ..$ renice          : int NA
[10:33:28.440]   ..$ rshcmd          : NULL
[10:33:28.440]   ..$ user            : NULL
[10:33:28.440]   ..$ revtunnel       : logi NA
[10:33:28.440]   ..$ rshlogfile      : NULL
[10:33:28.440]   ..$ rshopts         : NULL
[10:33:28.440]   ..$ rank            : int 1
[10:33:28.440]   ..$ manual          : logi FALSE
[10:33:28.440]   ..$ dryrun          : logi FALSE
[10:33:28.440]   ..$ quiet           : logi FALSE
[10:33:28.440]   ..$ setup_strategy  : chr "parallel"
[10:33:28.440]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:33:28.459] [local output] System call to launch all workers:
[10:33:28.459] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpJCh4Dg/worker.rank=1.parallelly.parent=85675.14eab1a430907.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11738 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:33:28.459] [local output] Starting PSOCK main server
[10:33:28.465] [local output] Workers launched
[10:33:28.465] [local output] Waiting for workers to connect back
[10:33:28.465]  - [local output] 0 workers out of 2 ready
[10:33:28.706]  - [local output] 0 workers out of 2 ready
[10:33:28.707]  - [local output] 1 workers out of 2 ready
[10:33:28.707]  - [local output] 2 workers out of 2 ready
[10:33:28.707] [local output] Launching of workers completed
[10:33:28.707] [local output] Collecting session information from workers
[10:33:28.708] [local output]  - Worker #1 of 2
[10:33:28.709] [local output]  - Worker #2 of 2
[10:33:28.709] [local output] makeClusterPSOCK() ... done
[10:33:28.722] Packages needed by the future expression (n = 0): <none>
[10:33:28.722] Packages needed by future strategies (n = 0): <none>
[10:33:28.723] {
[10:33:28.723]     {
[10:33:28.723]         {
[10:33:28.723]             ...future.startTime <- base::Sys.time()
[10:33:28.723]             {
[10:33:28.723]                 {
[10:33:28.723]                   {
[10:33:28.723]                     {
[10:33:28.723]                       base::local({
[10:33:28.723]                         has_future <- base::requireNamespace("future", 
[10:33:28.723]                           quietly = TRUE)
[10:33:28.723]                         if (has_future) {
[10:33:28.723]                           ns <- base::getNamespace("future")
[10:33:28.723]                           version <- ns[[".package"]][["version"]]
[10:33:28.723]                           if (is.null(version)) 
[10:33:28.723]                             version <- utils::packageVersion("future")
[10:33:28.723]                         }
[10:33:28.723]                         else {
[10:33:28.723]                           version <- NULL
[10:33:28.723]                         }
[10:33:28.723]                         if (!has_future || version < "1.8.0") {
[10:33:28.723]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:28.723]                             "", base::R.version$version.string), 
[10:33:28.723]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:28.723]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:28.723]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:28.723]                               "release", "version")], collapse = " "), 
[10:33:28.723]                             hostname = base::Sys.info()[["nodename"]])
[10:33:28.723]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:28.723]                             info)
[10:33:28.723]                           info <- base::paste(info, collapse = "; ")
[10:33:28.723]                           if (!has_future) {
[10:33:28.723]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:28.723]                               info)
[10:33:28.723]                           }
[10:33:28.723]                           else {
[10:33:28.723]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:28.723]                               info, version)
[10:33:28.723]                           }
[10:33:28.723]                           base::stop(msg)
[10:33:28.723]                         }
[10:33:28.723]                       })
[10:33:28.723]                     }
[10:33:28.723]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:28.723]                     base::options(mc.cores = 1L)
[10:33:28.723]                   }
[10:33:28.723]                   ...future.strategy.old <- future::plan("list")
[10:33:28.723]                   options(future.plan = NULL)
[10:33:28.723]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:28.723]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:28.723]                 }
[10:33:28.723]                 ...future.workdir <- getwd()
[10:33:28.723]             }
[10:33:28.723]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:28.723]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:28.723]         }
[10:33:28.723]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:28.723]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:28.723]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:28.723]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:28.723]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:28.723]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:28.723]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:28.723]             base::names(...future.oldOptions))
[10:33:28.723]     }
[10:33:28.723]     if (FALSE) {
[10:33:28.723]     }
[10:33:28.723]     else {
[10:33:28.723]         if (TRUE) {
[10:33:28.723]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:28.723]                 open = "w")
[10:33:28.723]         }
[10:33:28.723]         else {
[10:33:28.723]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:28.723]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:28.723]         }
[10:33:28.723]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:28.723]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:28.723]             base::sink(type = "output", split = FALSE)
[10:33:28.723]             base::close(...future.stdout)
[10:33:28.723]         }, add = TRUE)
[10:33:28.723]     }
[10:33:28.723]     ...future.frame <- base::sys.nframe()
[10:33:28.723]     ...future.conditions <- base::list()
[10:33:28.723]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:28.723]     if (FALSE) {
[10:33:28.723]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:28.723]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:28.723]     }
[10:33:28.723]     ...future.result <- base::tryCatch({
[10:33:28.723]         base::withCallingHandlers({
[10:33:28.723]             ...future.value <- base::withVisible(base::local({
[10:33:28.723]                 ...future.makeSendCondition <- base::local({
[10:33:28.723]                   sendCondition <- NULL
[10:33:28.723]                   function(frame = 1L) {
[10:33:28.723]                     if (is.function(sendCondition)) 
[10:33:28.723]                       return(sendCondition)
[10:33:28.723]                     ns <- getNamespace("parallel")
[10:33:28.723]                     if (exists("sendData", mode = "function", 
[10:33:28.723]                       envir = ns)) {
[10:33:28.723]                       parallel_sendData <- get("sendData", mode = "function", 
[10:33:28.723]                         envir = ns)
[10:33:28.723]                       envir <- sys.frame(frame)
[10:33:28.723]                       master <- NULL
[10:33:28.723]                       while (!identical(envir, .GlobalEnv) && 
[10:33:28.723]                         !identical(envir, emptyenv())) {
[10:33:28.723]                         if (exists("master", mode = "list", envir = envir, 
[10:33:28.723]                           inherits = FALSE)) {
[10:33:28.723]                           master <- get("master", mode = "list", 
[10:33:28.723]                             envir = envir, inherits = FALSE)
[10:33:28.723]                           if (inherits(master, c("SOCKnode", 
[10:33:28.723]                             "SOCK0node"))) {
[10:33:28.723]                             sendCondition <<- function(cond) {
[10:33:28.723]                               data <- list(type = "VALUE", value = cond, 
[10:33:28.723]                                 success = TRUE)
[10:33:28.723]                               parallel_sendData(master, data)
[10:33:28.723]                             }
[10:33:28.723]                             return(sendCondition)
[10:33:28.723]                           }
[10:33:28.723]                         }
[10:33:28.723]                         frame <- frame + 1L
[10:33:28.723]                         envir <- sys.frame(frame)
[10:33:28.723]                       }
[10:33:28.723]                     }
[10:33:28.723]                     sendCondition <<- function(cond) NULL
[10:33:28.723]                   }
[10:33:28.723]                 })
[10:33:28.723]                 withCallingHandlers({
[10:33:28.723]                   NA
[10:33:28.723]                 }, immediateCondition = function(cond) {
[10:33:28.723]                   sendCondition <- ...future.makeSendCondition()
[10:33:28.723]                   sendCondition(cond)
[10:33:28.723]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:28.723]                   {
[10:33:28.723]                     inherits <- base::inherits
[10:33:28.723]                     invokeRestart <- base::invokeRestart
[10:33:28.723]                     is.null <- base::is.null
[10:33:28.723]                     muffled <- FALSE
[10:33:28.723]                     if (inherits(cond, "message")) {
[10:33:28.723]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:28.723]                       if (muffled) 
[10:33:28.723]                         invokeRestart("muffleMessage")
[10:33:28.723]                     }
[10:33:28.723]                     else if (inherits(cond, "warning")) {
[10:33:28.723]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:28.723]                       if (muffled) 
[10:33:28.723]                         invokeRestart("muffleWarning")
[10:33:28.723]                     }
[10:33:28.723]                     else if (inherits(cond, "condition")) {
[10:33:28.723]                       if (!is.null(pattern)) {
[10:33:28.723]                         computeRestarts <- base::computeRestarts
[10:33:28.723]                         grepl <- base::grepl
[10:33:28.723]                         restarts <- computeRestarts(cond)
[10:33:28.723]                         for (restart in restarts) {
[10:33:28.723]                           name <- restart$name
[10:33:28.723]                           if (is.null(name)) 
[10:33:28.723]                             next
[10:33:28.723]                           if (!grepl(pattern, name)) 
[10:33:28.723]                             next
[10:33:28.723]                           invokeRestart(restart)
[10:33:28.723]                           muffled <- TRUE
[10:33:28.723]                           break
[10:33:28.723]                         }
[10:33:28.723]                       }
[10:33:28.723]                     }
[10:33:28.723]                     invisible(muffled)
[10:33:28.723]                   }
[10:33:28.723]                   muffleCondition(cond)
[10:33:28.723]                 })
[10:33:28.723]             }))
[10:33:28.723]             future::FutureResult(value = ...future.value$value, 
[10:33:28.723]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:28.723]                   ...future.rng), globalenv = if (FALSE) 
[10:33:28.723]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:28.723]                     ...future.globalenv.names))
[10:33:28.723]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:28.723]         }, condition = base::local({
[10:33:28.723]             c <- base::c
[10:33:28.723]             inherits <- base::inherits
[10:33:28.723]             invokeRestart <- base::invokeRestart
[10:33:28.723]             length <- base::length
[10:33:28.723]             list <- base::list
[10:33:28.723]             seq.int <- base::seq.int
[10:33:28.723]             signalCondition <- base::signalCondition
[10:33:28.723]             sys.calls <- base::sys.calls
[10:33:28.723]             `[[` <- base::`[[`
[10:33:28.723]             `+` <- base::`+`
[10:33:28.723]             `<<-` <- base::`<<-`
[10:33:28.723]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:28.723]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:28.723]                   3L)]
[10:33:28.723]             }
[10:33:28.723]             function(cond) {
[10:33:28.723]                 is_error <- inherits(cond, "error")
[10:33:28.723]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:28.723]                   NULL)
[10:33:28.723]                 if (is_error) {
[10:33:28.723]                   sessionInformation <- function() {
[10:33:28.723]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:28.723]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:28.723]                       search = base::search(), system = base::Sys.info())
[10:33:28.723]                   }
[10:33:28.723]                   ...future.conditions[[length(...future.conditions) + 
[10:33:28.723]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:28.723]                     cond$call), session = sessionInformation(), 
[10:33:28.723]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:28.723]                   signalCondition(cond)
[10:33:28.723]                 }
[10:33:28.723]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:28.723]                 "immediateCondition"))) {
[10:33:28.723]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:28.723]                   ...future.conditions[[length(...future.conditions) + 
[10:33:28.723]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:28.723]                   if (TRUE && !signal) {
[10:33:28.723]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:28.723]                     {
[10:33:28.723]                       inherits <- base::inherits
[10:33:28.723]                       invokeRestart <- base::invokeRestart
[10:33:28.723]                       is.null <- base::is.null
[10:33:28.723]                       muffled <- FALSE
[10:33:28.723]                       if (inherits(cond, "message")) {
[10:33:28.723]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:28.723]                         if (muffled) 
[10:33:28.723]                           invokeRestart("muffleMessage")
[10:33:28.723]                       }
[10:33:28.723]                       else if (inherits(cond, "warning")) {
[10:33:28.723]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:28.723]                         if (muffled) 
[10:33:28.723]                           invokeRestart("muffleWarning")
[10:33:28.723]                       }
[10:33:28.723]                       else if (inherits(cond, "condition")) {
[10:33:28.723]                         if (!is.null(pattern)) {
[10:33:28.723]                           computeRestarts <- base::computeRestarts
[10:33:28.723]                           grepl <- base::grepl
[10:33:28.723]                           restarts <- computeRestarts(cond)
[10:33:28.723]                           for (restart in restarts) {
[10:33:28.723]                             name <- restart$name
[10:33:28.723]                             if (is.null(name)) 
[10:33:28.723]                               next
[10:33:28.723]                             if (!grepl(pattern, name)) 
[10:33:28.723]                               next
[10:33:28.723]                             invokeRestart(restart)
[10:33:28.723]                             muffled <- TRUE
[10:33:28.723]                             break
[10:33:28.723]                           }
[10:33:28.723]                         }
[10:33:28.723]                       }
[10:33:28.723]                       invisible(muffled)
[10:33:28.723]                     }
[10:33:28.723]                     muffleCondition(cond, pattern = "^muffle")
[10:33:28.723]                   }
[10:33:28.723]                 }
[10:33:28.723]                 else {
[10:33:28.723]                   if (TRUE) {
[10:33:28.723]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:28.723]                     {
[10:33:28.723]                       inherits <- base::inherits
[10:33:28.723]                       invokeRestart <- base::invokeRestart
[10:33:28.723]                       is.null <- base::is.null
[10:33:28.723]                       muffled <- FALSE
[10:33:28.723]                       if (inherits(cond, "message")) {
[10:33:28.723]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:28.723]                         if (muffled) 
[10:33:28.723]                           invokeRestart("muffleMessage")
[10:33:28.723]                       }
[10:33:28.723]                       else if (inherits(cond, "warning")) {
[10:33:28.723]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:28.723]                         if (muffled) 
[10:33:28.723]                           invokeRestart("muffleWarning")
[10:33:28.723]                       }
[10:33:28.723]                       else if (inherits(cond, "condition")) {
[10:33:28.723]                         if (!is.null(pattern)) {
[10:33:28.723]                           computeRestarts <- base::computeRestarts
[10:33:28.723]                           grepl <- base::grepl
[10:33:28.723]                           restarts <- computeRestarts(cond)
[10:33:28.723]                           for (restart in restarts) {
[10:33:28.723]                             name <- restart$name
[10:33:28.723]                             if (is.null(name)) 
[10:33:28.723]                               next
[10:33:28.723]                             if (!grepl(pattern, name)) 
[10:33:28.723]                               next
[10:33:28.723]                             invokeRestart(restart)
[10:33:28.723]                             muffled <- TRUE
[10:33:28.723]                             break
[10:33:28.723]                           }
[10:33:28.723]                         }
[10:33:28.723]                       }
[10:33:28.723]                       invisible(muffled)
[10:33:28.723]                     }
[10:33:28.723]                     muffleCondition(cond, pattern = "^muffle")
[10:33:28.723]                   }
[10:33:28.723]                 }
[10:33:28.723]             }
[10:33:28.723]         }))
[10:33:28.723]     }, error = function(ex) {
[10:33:28.723]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:28.723]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:28.723]                 ...future.rng), started = ...future.startTime, 
[10:33:28.723]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:28.723]             version = "1.8"), class = "FutureResult")
[10:33:28.723]     }, finally = {
[10:33:28.723]         if (!identical(...future.workdir, getwd())) 
[10:33:28.723]             setwd(...future.workdir)
[10:33:28.723]         {
[10:33:28.723]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:28.723]                 ...future.oldOptions$nwarnings <- NULL
[10:33:28.723]             }
[10:33:28.723]             base::options(...future.oldOptions)
[10:33:28.723]             if (.Platform$OS.type == "windows") {
[10:33:28.723]                 old_names <- names(...future.oldEnvVars)
[10:33:28.723]                 envs <- base::Sys.getenv()
[10:33:28.723]                 names <- names(envs)
[10:33:28.723]                 common <- intersect(names, old_names)
[10:33:28.723]                 added <- setdiff(names, old_names)
[10:33:28.723]                 removed <- setdiff(old_names, names)
[10:33:28.723]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:28.723]                   envs[common]]
[10:33:28.723]                 NAMES <- toupper(changed)
[10:33:28.723]                 args <- list()
[10:33:28.723]                 for (kk in seq_along(NAMES)) {
[10:33:28.723]                   name <- changed[[kk]]
[10:33:28.723]                   NAME <- NAMES[[kk]]
[10:33:28.723]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:28.723]                     next
[10:33:28.723]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:28.723]                 }
[10:33:28.723]                 NAMES <- toupper(added)
[10:33:28.723]                 for (kk in seq_along(NAMES)) {
[10:33:28.723]                   name <- added[[kk]]
[10:33:28.723]                   NAME <- NAMES[[kk]]
[10:33:28.723]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:28.723]                     next
[10:33:28.723]                   args[[name]] <- ""
[10:33:28.723]                 }
[10:33:28.723]                 NAMES <- toupper(removed)
[10:33:28.723]                 for (kk in seq_along(NAMES)) {
[10:33:28.723]                   name <- removed[[kk]]
[10:33:28.723]                   NAME <- NAMES[[kk]]
[10:33:28.723]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:28.723]                     next
[10:33:28.723]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:28.723]                 }
[10:33:28.723]                 if (length(args) > 0) 
[10:33:28.723]                   base::do.call(base::Sys.setenv, args = args)
[10:33:28.723]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:28.723]             }
[10:33:28.723]             else {
[10:33:28.723]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:28.723]             }
[10:33:28.723]             {
[10:33:28.723]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:28.723]                   0L) {
[10:33:28.723]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:28.723]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:28.723]                   base::options(opts)
[10:33:28.723]                 }
[10:33:28.723]                 {
[10:33:28.723]                   {
[10:33:28.723]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:28.723]                     NULL
[10:33:28.723]                   }
[10:33:28.723]                   options(future.plan = NULL)
[10:33:28.723]                   if (is.na(NA_character_)) 
[10:33:28.723]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:28.723]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:28.723]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:28.723]                     .init = FALSE)
[10:33:28.723]                 }
[10:33:28.723]             }
[10:33:28.723]         }
[10:33:28.723]     })
[10:33:28.723]     if (TRUE) {
[10:33:28.723]         base::sink(type = "output", split = FALSE)
[10:33:28.723]         if (TRUE) {
[10:33:28.723]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:28.723]         }
[10:33:28.723]         else {
[10:33:28.723]             ...future.result["stdout"] <- base::list(NULL)
[10:33:28.723]         }
[10:33:28.723]         base::close(...future.stdout)
[10:33:28.723]         ...future.stdout <- NULL
[10:33:28.723]     }
[10:33:28.723]     ...future.result$conditions <- ...future.conditions
[10:33:28.723]     ...future.result$finished <- base::Sys.time()
[10:33:28.723]     ...future.result
[10:33:28.723] }
[10:33:28.775] MultisessionFuture started
[10:33:28.775] result() for ClusterFuture ...
[10:33:28.776] receiveMessageFromWorker() for ClusterFuture ...
[10:33:28.776] - Validating connection of MultisessionFuture
[10:33:28.808] - received message: FutureResult
[10:33:28.809] - Received FutureResult
[10:33:28.812] - Erased future from FutureRegistry
[10:33:28.812] result() for ClusterFuture ...
[10:33:28.812] - result already collected: FutureResult
[10:33:28.812] result() for ClusterFuture ... done
[10:33:28.812] receiveMessageFromWorker() for ClusterFuture ... done
[10:33:28.812] result() for ClusterFuture ... done
[10:33:28.813] result() for ClusterFuture ...
[10:33:28.813] - result already collected: FutureResult
[10:33:28.813] result() for ClusterFuture ... done
[10:33:28.813] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:33:28.817] plan(): nbrOfWorkers() = 2
nbrOfWorkers: 2
[10:33:28.827] getGlobalsAndPackages() ...
[10:33:28.827] 
[10:33:28.827] - globals: [0] <none>
[10:33:28.827] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers: 2
[10:33:28.845] getGlobalsAndPackages() ...
[10:33:28.845] 
[10:33:28.845] - globals: [0] <none>
[10:33:28.845] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers(background = TRUE): 2
[10:33:28.857] plan(): Setting new future strategy stack:
[10:33:28.857] List of future strategies:
[10:33:28.857] 1. multisession:
[10:33:28.857]    - args: function (..., workers = 1L, envir = parent.frame())
[10:33:28.857]    - tweaked: TRUE
[10:33:28.857]    - call: plan(strategy, workers = 1L)
[10:33:28.857] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:33:28.858] multisession:
[10:33:28.858] - args: function (..., workers = 1L, envir = parent.frame())
[10:33:28.858] - tweaked: TRUE
[10:33:28.858] - call: plan(strategy, workers = 1L)
[10:33:28.858] getGlobalsAndPackages() ...
[10:33:28.859] Not searching for globals
[10:33:28.859] - globals: [0] <none>
[10:33:28.859] getGlobalsAndPackages() ... DONE
[10:33:28.860] Packages needed by the future expression (n = 0): <none>
[10:33:28.860] Packages needed by future strategies (n = 0): <none>
[10:33:28.861] {
[10:33:28.861]     {
[10:33:28.861]         {
[10:33:28.861]             ...future.startTime <- base::Sys.time()
[10:33:28.861]             {
[10:33:28.861]                 {
[10:33:28.861]                   {
[10:33:28.861]                     base::local({
[10:33:28.861]                       has_future <- base::requireNamespace("future", 
[10:33:28.861]                         quietly = TRUE)
[10:33:28.861]                       if (has_future) {
[10:33:28.861]                         ns <- base::getNamespace("future")
[10:33:28.861]                         version <- ns[[".package"]][["version"]]
[10:33:28.861]                         if (is.null(version)) 
[10:33:28.861]                           version <- utils::packageVersion("future")
[10:33:28.861]                       }
[10:33:28.861]                       else {
[10:33:28.861]                         version <- NULL
[10:33:28.861]                       }
[10:33:28.861]                       if (!has_future || version < "1.8.0") {
[10:33:28.861]                         info <- base::c(r_version = base::gsub("R version ", 
[10:33:28.861]                           "", base::R.version$version.string), 
[10:33:28.861]                           platform = base::sprintf("%s (%s-bit)", 
[10:33:28.861]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:28.861]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:28.861]                             "release", "version")], collapse = " "), 
[10:33:28.861]                           hostname = base::Sys.info()[["nodename"]])
[10:33:28.861]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:33:28.861]                           info)
[10:33:28.861]                         info <- base::paste(info, collapse = "; ")
[10:33:28.861]                         if (!has_future) {
[10:33:28.861]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:28.861]                             info)
[10:33:28.861]                         }
[10:33:28.861]                         else {
[10:33:28.861]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:28.861]                             info, version)
[10:33:28.861]                         }
[10:33:28.861]                         base::stop(msg)
[10:33:28.861]                       }
[10:33:28.861]                     })
[10:33:28.861]                   }
[10:33:28.861]                   ...future.strategy.old <- future::plan("list")
[10:33:28.861]                   options(future.plan = NULL)
[10:33:28.861]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:28.861]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:28.861]                 }
[10:33:28.861]                 ...future.workdir <- getwd()
[10:33:28.861]             }
[10:33:28.861]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:28.861]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:28.861]         }
[10:33:28.861]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:28.861]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:28.861]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:28.861]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:28.861]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:28.861]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:28.861]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:28.861]             base::names(...future.oldOptions))
[10:33:28.861]     }
[10:33:28.861]     if (FALSE) {
[10:33:28.861]     }
[10:33:28.861]     else {
[10:33:28.861]         if (TRUE) {
[10:33:28.861]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:28.861]                 open = "w")
[10:33:28.861]         }
[10:33:28.861]         else {
[10:33:28.861]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:28.861]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:28.861]         }
[10:33:28.861]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:28.861]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:28.861]             base::sink(type = "output", split = FALSE)
[10:33:28.861]             base::close(...future.stdout)
[10:33:28.861]         }, add = TRUE)
[10:33:28.861]     }
[10:33:28.861]     ...future.frame <- base::sys.nframe()
[10:33:28.861]     ...future.conditions <- base::list()
[10:33:28.861]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:28.861]     if (FALSE) {
[10:33:28.861]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:28.861]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:28.861]     }
[10:33:28.861]     ...future.result <- base::tryCatch({
[10:33:28.861]         base::withCallingHandlers({
[10:33:28.861]             ...future.value <- base::withVisible(base::local(NA))
[10:33:28.861]             future::FutureResult(value = ...future.value$value, 
[10:33:28.861]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:28.861]                   ...future.rng), globalenv = if (FALSE) 
[10:33:28.861]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:28.861]                     ...future.globalenv.names))
[10:33:28.861]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:28.861]         }, condition = base::local({
[10:33:28.861]             c <- base::c
[10:33:28.861]             inherits <- base::inherits
[10:33:28.861]             invokeRestart <- base::invokeRestart
[10:33:28.861]             length <- base::length
[10:33:28.861]             list <- base::list
[10:33:28.861]             seq.int <- base::seq.int
[10:33:28.861]             signalCondition <- base::signalCondition
[10:33:28.861]             sys.calls <- base::sys.calls
[10:33:28.861]             `[[` <- base::`[[`
[10:33:28.861]             `+` <- base::`+`
[10:33:28.861]             `<<-` <- base::`<<-`
[10:33:28.861]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:28.861]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:28.861]                   3L)]
[10:33:28.861]             }
[10:33:28.861]             function(cond) {
[10:33:28.861]                 is_error <- inherits(cond, "error")
[10:33:28.861]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:28.861]                   NULL)
[10:33:28.861]                 if (is_error) {
[10:33:28.861]                   sessionInformation <- function() {
[10:33:28.861]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:28.861]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:28.861]                       search = base::search(), system = base::Sys.info())
[10:33:28.861]                   }
[10:33:28.861]                   ...future.conditions[[length(...future.conditions) + 
[10:33:28.861]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:28.861]                     cond$call), session = sessionInformation(), 
[10:33:28.861]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:28.861]                   signalCondition(cond)
[10:33:28.861]                 }
[10:33:28.861]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:28.861]                 "immediateCondition"))) {
[10:33:28.861]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:28.861]                   ...future.conditions[[length(...future.conditions) + 
[10:33:28.861]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:28.861]                   if (TRUE && !signal) {
[10:33:28.861]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:28.861]                     {
[10:33:28.861]                       inherits <- base::inherits
[10:33:28.861]                       invokeRestart <- base::invokeRestart
[10:33:28.861]                       is.null <- base::is.null
[10:33:28.861]                       muffled <- FALSE
[10:33:28.861]                       if (inherits(cond, "message")) {
[10:33:28.861]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:28.861]                         if (muffled) 
[10:33:28.861]                           invokeRestart("muffleMessage")
[10:33:28.861]                       }
[10:33:28.861]                       else if (inherits(cond, "warning")) {
[10:33:28.861]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:28.861]                         if (muffled) 
[10:33:28.861]                           invokeRestart("muffleWarning")
[10:33:28.861]                       }
[10:33:28.861]                       else if (inherits(cond, "condition")) {
[10:33:28.861]                         if (!is.null(pattern)) {
[10:33:28.861]                           computeRestarts <- base::computeRestarts
[10:33:28.861]                           grepl <- base::grepl
[10:33:28.861]                           restarts <- computeRestarts(cond)
[10:33:28.861]                           for (restart in restarts) {
[10:33:28.861]                             name <- restart$name
[10:33:28.861]                             if (is.null(name)) 
[10:33:28.861]                               next
[10:33:28.861]                             if (!grepl(pattern, name)) 
[10:33:28.861]                               next
[10:33:28.861]                             invokeRestart(restart)
[10:33:28.861]                             muffled <- TRUE
[10:33:28.861]                             break
[10:33:28.861]                           }
[10:33:28.861]                         }
[10:33:28.861]                       }
[10:33:28.861]                       invisible(muffled)
[10:33:28.861]                     }
[10:33:28.861]                     muffleCondition(cond, pattern = "^muffle")
[10:33:28.861]                   }
[10:33:28.861]                 }
[10:33:28.861]                 else {
[10:33:28.861]                   if (TRUE) {
[10:33:28.861]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:28.861]                     {
[10:33:28.861]                       inherits <- base::inherits
[10:33:28.861]                       invokeRestart <- base::invokeRestart
[10:33:28.861]                       is.null <- base::is.null
[10:33:28.861]                       muffled <- FALSE
[10:33:28.861]                       if (inherits(cond, "message")) {
[10:33:28.861]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:28.861]                         if (muffled) 
[10:33:28.861]                           invokeRestart("muffleMessage")
[10:33:28.861]                       }
[10:33:28.861]                       else if (inherits(cond, "warning")) {
[10:33:28.861]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:28.861]                         if (muffled) 
[10:33:28.861]                           invokeRestart("muffleWarning")
[10:33:28.861]                       }
[10:33:28.861]                       else if (inherits(cond, "condition")) {
[10:33:28.861]                         if (!is.null(pattern)) {
[10:33:28.861]                           computeRestarts <- base::computeRestarts
[10:33:28.861]                           grepl <- base::grepl
[10:33:28.861]                           restarts <- computeRestarts(cond)
[10:33:28.861]                           for (restart in restarts) {
[10:33:28.861]                             name <- restart$name
[10:33:28.861]                             if (is.null(name)) 
[10:33:28.861]                               next
[10:33:28.861]                             if (!grepl(pattern, name)) 
[10:33:28.861]                               next
[10:33:28.861]                             invokeRestart(restart)
[10:33:28.861]                             muffled <- TRUE
[10:33:28.861]                             break
[10:33:28.861]                           }
[10:33:28.861]                         }
[10:33:28.861]                       }
[10:33:28.861]                       invisible(muffled)
[10:33:28.861]                     }
[10:33:28.861]                     muffleCondition(cond, pattern = "^muffle")
[10:33:28.861]                   }
[10:33:28.861]                 }
[10:33:28.861]             }
[10:33:28.861]         }))
[10:33:28.861]     }, error = function(ex) {
[10:33:28.861]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:28.861]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:28.861]                 ...future.rng), started = ...future.startTime, 
[10:33:28.861]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:28.861]             version = "1.8"), class = "FutureResult")
[10:33:28.861]     }, finally = {
[10:33:28.861]         if (!identical(...future.workdir, getwd())) 
[10:33:28.861]             setwd(...future.workdir)
[10:33:28.861]         {
[10:33:28.861]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:28.861]                 ...future.oldOptions$nwarnings <- NULL
[10:33:28.861]             }
[10:33:28.861]             base::options(...future.oldOptions)
[10:33:28.861]             if (.Platform$OS.type == "windows") {
[10:33:28.861]                 old_names <- names(...future.oldEnvVars)
[10:33:28.861]                 envs <- base::Sys.getenv()
[10:33:28.861]                 names <- names(envs)
[10:33:28.861]                 common <- intersect(names, old_names)
[10:33:28.861]                 added <- setdiff(names, old_names)
[10:33:28.861]                 removed <- setdiff(old_names, names)
[10:33:28.861]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:28.861]                   envs[common]]
[10:33:28.861]                 NAMES <- toupper(changed)
[10:33:28.861]                 args <- list()
[10:33:28.861]                 for (kk in seq_along(NAMES)) {
[10:33:28.861]                   name <- changed[[kk]]
[10:33:28.861]                   NAME <- NAMES[[kk]]
[10:33:28.861]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:28.861]                     next
[10:33:28.861]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:28.861]                 }
[10:33:28.861]                 NAMES <- toupper(added)
[10:33:28.861]                 for (kk in seq_along(NAMES)) {
[10:33:28.861]                   name <- added[[kk]]
[10:33:28.861]                   NAME <- NAMES[[kk]]
[10:33:28.861]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:28.861]                     next
[10:33:28.861]                   args[[name]] <- ""
[10:33:28.861]                 }
[10:33:28.861]                 NAMES <- toupper(removed)
[10:33:28.861]                 for (kk in seq_along(NAMES)) {
[10:33:28.861]                   name <- removed[[kk]]
[10:33:28.861]                   NAME <- NAMES[[kk]]
[10:33:28.861]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:28.861]                     next
[10:33:28.861]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:28.861]                 }
[10:33:28.861]                 if (length(args) > 0) 
[10:33:28.861]                   base::do.call(base::Sys.setenv, args = args)
[10:33:28.861]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:28.861]             }
[10:33:28.861]             else {
[10:33:28.861]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:28.861]             }
[10:33:28.861]             {
[10:33:28.861]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:28.861]                   0L) {
[10:33:28.861]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:28.861]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:28.861]                   base::options(opts)
[10:33:28.861]                 }
[10:33:28.861]                 {
[10:33:28.861]                   {
[10:33:28.861]                     NULL
[10:33:28.861]                     RNGkind("Mersenne-Twister")
[10:33:28.861]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:33:28.861]                       inherits = FALSE)
[10:33:28.861]                   }
[10:33:28.861]                   options(future.plan = NULL)
[10:33:28.861]                   if (is.na(NA_character_)) 
[10:33:28.861]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:28.861]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:28.861]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:28.861]                     .init = FALSE)
[10:33:28.861]                 }
[10:33:28.861]             }
[10:33:28.861]         }
[10:33:28.861]     })
[10:33:28.861]     if (TRUE) {
[10:33:28.861]         base::sink(type = "output", split = FALSE)
[10:33:28.861]         if (TRUE) {
[10:33:28.861]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:28.861]         }
[10:33:28.861]         else {
[10:33:28.861]             ...future.result["stdout"] <- base::list(NULL)
[10:33:28.861]         }
[10:33:28.861]         base::close(...future.stdout)
[10:33:28.861]         ...future.stdout <- NULL
[10:33:28.861]     }
[10:33:28.861]     ...future.result$conditions <- ...future.conditions
[10:33:28.861]     ...future.result$finished <- base::Sys.time()
[10:33:28.861]     ...future.result
[10:33:28.861] }
[10:33:28.864] plan(): Setting new future strategy stack:
[10:33:28.865] List of future strategies:
[10:33:28.865] 1. sequential:
[10:33:28.865]    - args: function (..., envir = parent.frame())
[10:33:28.865]    - tweaked: FALSE
[10:33:28.865]    - call: NULL
[10:33:28.865] plan(): nbrOfWorkers() = 1
[10:33:28.867] plan(): Setting new future strategy stack:
[10:33:28.868] List of future strategies:
[10:33:28.868] 1. multisession:
[10:33:28.868]    - args: function (..., workers = 1L, envir = parent.frame())
[10:33:28.868]    - tweaked: TRUE
[10:33:28.868]    - call: plan(strategy, workers = 1L)
[10:33:28.868] plan(): nbrOfWorkers() = 1
[10:33:28.869] SequentialFuture started (and completed)
[10:33:28.869] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:33:28.870] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
[10:33:28.870] getGlobalsAndPackages() ...
[10:33:28.870] Searching for globals...
[10:33:28.875] 
[10:33:28.875] Searching for globals ... DONE
[10:33:28.875] - globals: [0] <none>
[10:33:28.875] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers: 1
[10:33:28.876] getGlobalsAndPackages() ...
[10:33:28.876] Searching for globals...
[10:33:28.876] 
[10:33:28.876] Searching for globals ... DONE
[10:33:28.877] - globals: [0] <none>
[10:33:28.877] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers(background = TRUE): 0
[10:33:28.877] plan(): Setting new future strategy stack:
[10:33:28.877] List of future strategies:
[10:33:28.877] 1. multisession:
[10:33:28.877]    - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L)>", envir = parent.frame())
[10:33:28.877]    - tweaked: TRUE
[10:33:28.877]    - call: plan(strategy, workers = allButOneCore)
[10:33:28.878] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:33:28.878] multisession:
[10:33:28.878] - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L)>", envir = parent.frame())
[10:33:28.878] - tweaked: TRUE
[10:33:28.878] - call: plan(strategy, workers = allButOneCore)
[10:33:28.885] getGlobalsAndPackages() ...
[10:33:28.885] Not searching for globals
[10:33:28.885] - globals: [0] <none>
[10:33:28.885] getGlobalsAndPackages() ... DONE
[10:33:28.885] Packages needed by the future expression (n = 0): <none>
[10:33:28.886] Packages needed by future strategies (n = 0): <none>
[10:33:28.886] {
[10:33:28.886]     {
[10:33:28.886]         {
[10:33:28.886]             ...future.startTime <- base::Sys.time()
[10:33:28.886]             {
[10:33:28.886]                 {
[10:33:28.886]                   {
[10:33:28.886]                     base::local({
[10:33:28.886]                       has_future <- base::requireNamespace("future", 
[10:33:28.886]                         quietly = TRUE)
[10:33:28.886]                       if (has_future) {
[10:33:28.886]                         ns <- base::getNamespace("future")
[10:33:28.886]                         version <- ns[[".package"]][["version"]]
[10:33:28.886]                         if (is.null(version)) 
[10:33:28.886]                           version <- utils::packageVersion("future")
[10:33:28.886]                       }
[10:33:28.886]                       else {
[10:33:28.886]                         version <- NULL
[10:33:28.886]                       }
[10:33:28.886]                       if (!has_future || version < "1.8.0") {
[10:33:28.886]                         info <- base::c(r_version = base::gsub("R version ", 
[10:33:28.886]                           "", base::R.version$version.string), 
[10:33:28.886]                           platform = base::sprintf("%s (%s-bit)", 
[10:33:28.886]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:28.886]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:28.886]                             "release", "version")], collapse = " "), 
[10:33:28.886]                           hostname = base::Sys.info()[["nodename"]])
[10:33:28.886]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:33:28.886]                           info)
[10:33:28.886]                         info <- base::paste(info, collapse = "; ")
[10:33:28.886]                         if (!has_future) {
[10:33:28.886]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:28.886]                             info)
[10:33:28.886]                         }
[10:33:28.886]                         else {
[10:33:28.886]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:28.886]                             info, version)
[10:33:28.886]                         }
[10:33:28.886]                         base::stop(msg)
[10:33:28.886]                       }
[10:33:28.886]                     })
[10:33:28.886]                   }
[10:33:28.886]                   ...future.strategy.old <- future::plan("list")
[10:33:28.886]                   options(future.plan = NULL)
[10:33:28.886]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:28.886]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:28.886]                 }
[10:33:28.886]                 ...future.workdir <- getwd()
[10:33:28.886]             }
[10:33:28.886]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:28.886]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:28.886]         }
[10:33:28.886]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:28.886]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:28.886]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:28.886]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:28.886]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:28.886]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:28.886]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:28.886]             base::names(...future.oldOptions))
[10:33:28.886]     }
[10:33:28.886]     if (FALSE) {
[10:33:28.886]     }
[10:33:28.886]     else {
[10:33:28.886]         if (TRUE) {
[10:33:28.886]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:28.886]                 open = "w")
[10:33:28.886]         }
[10:33:28.886]         else {
[10:33:28.886]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:28.886]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:28.886]         }
[10:33:28.886]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:28.886]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:28.886]             base::sink(type = "output", split = FALSE)
[10:33:28.886]             base::close(...future.stdout)
[10:33:28.886]         }, add = TRUE)
[10:33:28.886]     }
[10:33:28.886]     ...future.frame <- base::sys.nframe()
[10:33:28.886]     ...future.conditions <- base::list()
[10:33:28.886]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:28.886]     if (FALSE) {
[10:33:28.886]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:28.886]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:28.886]     }
[10:33:28.886]     ...future.result <- base::tryCatch({
[10:33:28.886]         base::withCallingHandlers({
[10:33:28.886]             ...future.value <- base::withVisible(base::local(NA))
[10:33:28.886]             future::FutureResult(value = ...future.value$value, 
[10:33:28.886]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:28.886]                   ...future.rng), globalenv = if (FALSE) 
[10:33:28.886]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:28.886]                     ...future.globalenv.names))
[10:33:28.886]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:28.886]         }, condition = base::local({
[10:33:28.886]             c <- base::c
[10:33:28.886]             inherits <- base::inherits
[10:33:28.886]             invokeRestart <- base::invokeRestart
[10:33:28.886]             length <- base::length
[10:33:28.886]             list <- base::list
[10:33:28.886]             seq.int <- base::seq.int
[10:33:28.886]             signalCondition <- base::signalCondition
[10:33:28.886]             sys.calls <- base::sys.calls
[10:33:28.886]             `[[` <- base::`[[`
[10:33:28.886]             `+` <- base::`+`
[10:33:28.886]             `<<-` <- base::`<<-`
[10:33:28.886]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:28.886]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:28.886]                   3L)]
[10:33:28.886]             }
[10:33:28.886]             function(cond) {
[10:33:28.886]                 is_error <- inherits(cond, "error")
[10:33:28.886]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:28.886]                   NULL)
[10:33:28.886]                 if (is_error) {
[10:33:28.886]                   sessionInformation <- function() {
[10:33:28.886]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:28.886]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:28.886]                       search = base::search(), system = base::Sys.info())
[10:33:28.886]                   }
[10:33:28.886]                   ...future.conditions[[length(...future.conditions) + 
[10:33:28.886]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:28.886]                     cond$call), session = sessionInformation(), 
[10:33:28.886]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:28.886]                   signalCondition(cond)
[10:33:28.886]                 }
[10:33:28.886]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:28.886]                 "immediateCondition"))) {
[10:33:28.886]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:28.886]                   ...future.conditions[[length(...future.conditions) + 
[10:33:28.886]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:28.886]                   if (TRUE && !signal) {
[10:33:28.886]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:28.886]                     {
[10:33:28.886]                       inherits <- base::inherits
[10:33:28.886]                       invokeRestart <- base::invokeRestart
[10:33:28.886]                       is.null <- base::is.null
[10:33:28.886]                       muffled <- FALSE
[10:33:28.886]                       if (inherits(cond, "message")) {
[10:33:28.886]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:28.886]                         if (muffled) 
[10:33:28.886]                           invokeRestart("muffleMessage")
[10:33:28.886]                       }
[10:33:28.886]                       else if (inherits(cond, "warning")) {
[10:33:28.886]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:28.886]                         if (muffled) 
[10:33:28.886]                           invokeRestart("muffleWarning")
[10:33:28.886]                       }
[10:33:28.886]                       else if (inherits(cond, "condition")) {
[10:33:28.886]                         if (!is.null(pattern)) {
[10:33:28.886]                           computeRestarts <- base::computeRestarts
[10:33:28.886]                           grepl <- base::grepl
[10:33:28.886]                           restarts <- computeRestarts(cond)
[10:33:28.886]                           for (restart in restarts) {
[10:33:28.886]                             name <- restart$name
[10:33:28.886]                             if (is.null(name)) 
[10:33:28.886]                               next
[10:33:28.886]                             if (!grepl(pattern, name)) 
[10:33:28.886]                               next
[10:33:28.886]                             invokeRestart(restart)
[10:33:28.886]                             muffled <- TRUE
[10:33:28.886]                             break
[10:33:28.886]                           }
[10:33:28.886]                         }
[10:33:28.886]                       }
[10:33:28.886]                       invisible(muffled)
[10:33:28.886]                     }
[10:33:28.886]                     muffleCondition(cond, pattern = "^muffle")
[10:33:28.886]                   }
[10:33:28.886]                 }
[10:33:28.886]                 else {
[10:33:28.886]                   if (TRUE) {
[10:33:28.886]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:28.886]                     {
[10:33:28.886]                       inherits <- base::inherits
[10:33:28.886]                       invokeRestart <- base::invokeRestart
[10:33:28.886]                       is.null <- base::is.null
[10:33:28.886]                       muffled <- FALSE
[10:33:28.886]                       if (inherits(cond, "message")) {
[10:33:28.886]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:28.886]                         if (muffled) 
[10:33:28.886]                           invokeRestart("muffleMessage")
[10:33:28.886]                       }
[10:33:28.886]                       else if (inherits(cond, "warning")) {
[10:33:28.886]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:28.886]                         if (muffled) 
[10:33:28.886]                           invokeRestart("muffleWarning")
[10:33:28.886]                       }
[10:33:28.886]                       else if (inherits(cond, "condition")) {
[10:33:28.886]                         if (!is.null(pattern)) {
[10:33:28.886]                           computeRestarts <- base::computeRestarts
[10:33:28.886]                           grepl <- base::grepl
[10:33:28.886]                           restarts <- computeRestarts(cond)
[10:33:28.886]                           for (restart in restarts) {
[10:33:28.886]                             name <- restart$name
[10:33:28.886]                             if (is.null(name)) 
[10:33:28.886]                               next
[10:33:28.886]                             if (!grepl(pattern, name)) 
[10:33:28.886]                               next
[10:33:28.886]                             invokeRestart(restart)
[10:33:28.886]                             muffled <- TRUE
[10:33:28.886]                             break
[10:33:28.886]                           }
[10:33:28.886]                         }
[10:33:28.886]                       }
[10:33:28.886]                       invisible(muffled)
[10:33:28.886]                     }
[10:33:28.886]                     muffleCondition(cond, pattern = "^muffle")
[10:33:28.886]                   }
[10:33:28.886]                 }
[10:33:28.886]             }
[10:33:28.886]         }))
[10:33:28.886]     }, error = function(ex) {
[10:33:28.886]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:28.886]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:28.886]                 ...future.rng), started = ...future.startTime, 
[10:33:28.886]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:28.886]             version = "1.8"), class = "FutureResult")
[10:33:28.886]     }, finally = {
[10:33:28.886]         if (!identical(...future.workdir, getwd())) 
[10:33:28.886]             setwd(...future.workdir)
[10:33:28.886]         {
[10:33:28.886]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:28.886]                 ...future.oldOptions$nwarnings <- NULL
[10:33:28.886]             }
[10:33:28.886]             base::options(...future.oldOptions)
[10:33:28.886]             if (.Platform$OS.type == "windows") {
[10:33:28.886]                 old_names <- names(...future.oldEnvVars)
[10:33:28.886]                 envs <- base::Sys.getenv()
[10:33:28.886]                 names <- names(envs)
[10:33:28.886]                 common <- intersect(names, old_names)
[10:33:28.886]                 added <- setdiff(names, old_names)
[10:33:28.886]                 removed <- setdiff(old_names, names)
[10:33:28.886]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:28.886]                   envs[common]]
[10:33:28.886]                 NAMES <- toupper(changed)
[10:33:28.886]                 args <- list()
[10:33:28.886]                 for (kk in seq_along(NAMES)) {
[10:33:28.886]                   name <- changed[[kk]]
[10:33:28.886]                   NAME <- NAMES[[kk]]
[10:33:28.886]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:28.886]                     next
[10:33:28.886]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:28.886]                 }
[10:33:28.886]                 NAMES <- toupper(added)
[10:33:28.886]                 for (kk in seq_along(NAMES)) {
[10:33:28.886]                   name <- added[[kk]]
[10:33:28.886]                   NAME <- NAMES[[kk]]
[10:33:28.886]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:28.886]                     next
[10:33:28.886]                   args[[name]] <- ""
[10:33:28.886]                 }
[10:33:28.886]                 NAMES <- toupper(removed)
[10:33:28.886]                 for (kk in seq_along(NAMES)) {
[10:33:28.886]                   name <- removed[[kk]]
[10:33:28.886]                   NAME <- NAMES[[kk]]
[10:33:28.886]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:28.886]                     next
[10:33:28.886]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:28.886]                 }
[10:33:28.886]                 if (length(args) > 0) 
[10:33:28.886]                   base::do.call(base::Sys.setenv, args = args)
[10:33:28.886]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:28.886]             }
[10:33:28.886]             else {
[10:33:28.886]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:28.886]             }
[10:33:28.886]             {
[10:33:28.886]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:28.886]                   0L) {
[10:33:28.886]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:28.886]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:28.886]                   base::options(opts)
[10:33:28.886]                 }
[10:33:28.886]                 {
[10:33:28.886]                   {
[10:33:28.886]                     NULL
[10:33:28.886]                     RNGkind("Mersenne-Twister")
[10:33:28.886]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:33:28.886]                       inherits = FALSE)
[10:33:28.886]                   }
[10:33:28.886]                   options(future.plan = NULL)
[10:33:28.886]                   if (is.na(NA_character_)) 
[10:33:28.886]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:28.886]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:28.886]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:28.886]                     .init = FALSE)
[10:33:28.886]                 }
[10:33:28.886]             }
[10:33:28.886]         }
[10:33:28.886]     })
[10:33:28.886]     if (TRUE) {
[10:33:28.886]         base::sink(type = "output", split = FALSE)
[10:33:28.886]         if (TRUE) {
[10:33:28.886]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:28.886]         }
[10:33:28.886]         else {
[10:33:28.886]             ...future.result["stdout"] <- base::list(NULL)
[10:33:28.886]         }
[10:33:28.886]         base::close(...future.stdout)
[10:33:28.886]         ...future.stdout <- NULL
[10:33:28.886]     }
[10:33:28.886]     ...future.result$conditions <- ...future.conditions
[10:33:28.886]     ...future.result$finished <- base::Sys.time()
[10:33:28.886]     ...future.result
[10:33:28.886] }
[10:33:28.888] plan(): Setting new future strategy stack:
[10:33:28.888] List of future strategies:
[10:33:28.888] 1. sequential:
[10:33:28.888]    - args: function (..., envir = parent.frame())
[10:33:28.888]    - tweaked: FALSE
[10:33:28.888]    - call: NULL
[10:33:28.888] plan(): nbrOfWorkers() = 1
[10:33:28.889] plan(): Setting new future strategy stack:
[10:33:28.889] List of future strategies:
[10:33:28.889] 1. multisession:
[10:33:28.889]    - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L)>", envir = parent.frame())
[10:33:28.889]    - tweaked: TRUE
[10:33:28.889]    - call: plan(strategy, workers = allButOneCore)
[10:33:28.894] plan(): nbrOfWorkers() = 1
[10:33:28.894] SequentialFuture started (and completed)
[10:33:28.894] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:33:28.897] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
[10:33:28.906] getGlobalsAndPackages() ...
[10:33:28.906] Searching for globals...
[10:33:28.906] 
[10:33:28.906] Searching for globals ... DONE
[10:33:28.906] - globals: [0] <none>
[10:33:28.906] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers: 1
[10:33:28.912] getGlobalsAndPackages() ...
[10:33:28.913] Searching for globals...
[10:33:28.913] 
[10:33:28.913] Searching for globals ... DONE
[10:33:28.913] - globals: [0] <none>
[10:33:28.913] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers(background = TRUE): 0
Type of future: multicore
nbrOfWorkers: 2
[10:33:28.917] plan(): Setting new future strategy stack:
[10:33:28.917] List of future strategies:
[10:33:28.917] 1. multicore:
[10:33:28.917]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:33:28.917]    - tweaked: FALSE
[10:33:28.917]    - call: plan(strategy)
[10:33:28.920] plan(): nbrOfWorkers() = 2
nbrOfWorkers: 2
nbrOfFreeWorkers: 2
nbrOfFreeWorkers(background = TRUE): 2
[10:33:28.930] plan(): Setting new future strategy stack:
[10:33:28.930] List of future strategies:
[10:33:28.930] 1. multicore:
[10:33:28.930]    - args: function (..., workers = 1L, envir = parent.frame())
[10:33:28.930]    - tweaked: TRUE
[10:33:28.930]    - call: plan(strategy, workers = 1L)
[10:33:28.931] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
nbrOfFreeWorkers: 1
nbrOfFreeWorkers(background = TRUE): 1
[10:33:28.931] plan(): Setting new future strategy stack:
[10:33:28.932] List of future strategies:
[10:33:28.932] 1. multicore:
[10:33:28.932]    - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L); <bytecode: 0x55a31a0dcd28>>", envir = parent.frame())
[10:33:28.932]    - tweaked: TRUE
[10:33:28.932]    - call: plan(strategy, workers = allButOneCore)
[10:33:28.935] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
nbrOfFreeWorkers: 1
nbrOfFreeWorkers(background = TRUE): 1
> 
> 
> message("Type of future: cluster")
Type of future: cluster
> workers <- rep("localhost", times = 2L)
> plan(cluster, workers = workers)
[10:33:28.944] plan(): Setting new future strategy stack:
[10:33:28.944] List of future strategies:
[10:33:28.944] 1. cluster:
[10:33:28.944]    - args: function (..., workers = c("localhost", "localhost"), envir = parent.frame())
[10:33:28.944]    - tweaked: TRUE
[10:33:28.944]    - call: plan(cluster, workers = workers)
[10:33:28.945] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:33:28.945] cluster:
[10:33:28.945] - args: function (..., workers = c("localhost", "localhost"), envir = parent.frame())
[10:33:28.945] - tweaked: TRUE
[10:33:28.945] - call: plan(cluster, workers = workers)
[10:33:28.945] getGlobalsAndPackages() ...
[10:33:28.945] Not searching for globals
[10:33:28.946] - globals: [0] <none>
[10:33:28.946] getGlobalsAndPackages() ... DONE
[10:33:28.946] [local output] makeClusterPSOCK() ...
[10:33:28.947] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[10:33:28.947] [local output] Base port: 11748
[10:33:28.947] [local output] Getting setup options for 2 cluster nodes ...
[10:33:28.947] [local output]  - Node 1 of 2 ...
[10:33:28.948] [local output] localMachine=TRUE => revtunnel=FALSE

[10:33:28.948] [local output] Rscript port: 11748

[10:33:28.948] [local output]  - Node 2 of 2 ...
[10:33:28.949] [local output] localMachine=TRUE => revtunnel=FALSE

[10:33:28.949] [local output] Rscript port: 11748

[10:33:28.949] [local output] Getting setup options for 2 cluster nodes ... done
[10:33:28.950] [local output]  - Parallel setup requested for some PSOCK nodes
[10:33:28.950] [local output] Setting up PSOCK nodes in parallel
[10:33:28.950] List of 36
[10:33:28.950]  $ worker          : chr "localhost"
[10:33:28.950]   ..- attr(*, "localhost")= logi TRUE
[10:33:28.950]  $ master          : chr "localhost"
[10:33:28.950]  $ port            : int 11748
[10:33:28.950]  $ connectTimeout  : num 120
[10:33:28.950]  $ timeout         : num 2592000
[10:33:28.950]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:33:28.950]  $ homogeneous     : logi TRUE
[10:33:28.950]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:33:28.950]  $ rscript_envs    : NULL
[10:33:28.950]  $ rscript_libs    : NULL
[10:33:28.950]  $ rscript_startup : NULL
[10:33:28.950]  $ rscript_sh      : chr "sh"
[10:33:28.950]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:33:28.950]  $ methods         : logi TRUE
[10:33:28.950]  $ socketOptions   : chr "no-delay"
[10:33:28.950]  $ useXDR          : logi FALSE
[10:33:28.950]  $ outfile         : chr "/dev/null"
[10:33:28.950]  $ renice          : int NA
[10:33:28.950]  $ rshcmd          : NULL
[10:33:28.950]  $ user            : chr(0) 
[10:33:28.950]  $ revtunnel       : logi FALSE
[10:33:28.950]  $ rshlogfile      : NULL
[10:33:28.950]  $ rshopts         : chr(0) 
[10:33:28.950]  $ rank            : int 1
[10:33:28.950]  $ manual          : logi FALSE
[10:33:28.950]  $ dryrun          : logi FALSE
[10:33:28.950]  $ quiet           : logi FALSE
[10:33:28.950]  $ setup_strategy  : chr "parallel"
[10:33:28.950]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:33:28.950]  $ pidfile         : chr "/tmp/RtmpJCh4Dg/worker.rank=1.parallelly.parent=85675.14eab2d318e2.pid"
[10:33:28.950]  $ rshcmd_label    : NULL
[10:33:28.950]  $ rsh_call        : NULL
[10:33:28.950]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:33:28.950]  $ localMachine    : logi TRUE
[10:33:28.950]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:33:28.950]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:33:28.950]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:33:28.950]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:33:28.950]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:33:28.950]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:33:28.950]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:33:28.950]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:33:28.950]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:33:28.950]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:33:28.950]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:33:28.950]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:33:28.950]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:33:28.950]  $ arguments       :List of 28
[10:33:28.950]   ..$ worker          : chr "localhost"
[10:33:28.950]   ..$ master          : NULL
[10:33:28.950]   ..$ port            : int 11748
[10:33:28.950]   ..$ connectTimeout  : num 120
[10:33:28.950]   ..$ timeout         : num 2592000
[10:33:28.950]   ..$ rscript         : NULL
[10:33:28.950]   ..$ homogeneous     : NULL
[10:33:28.950]   ..$ rscript_args    : NULL
[10:33:28.950]   ..$ rscript_envs    : NULL
[10:33:28.950]   ..$ rscript_libs    : NULL
[10:33:28.950]   ..$ rscript_startup : NULL
[10:33:28.950]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:33:28.950]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:33:28.950]   ..$ methods         : logi TRUE
[10:33:28.950]   ..$ socketOptions   : chr "no-delay"
[10:33:28.950]   ..$ useXDR          : logi FALSE
[10:33:28.950]   ..$ outfile         : chr "/dev/null"
[10:33:28.950]   ..$ renice          : int NA
[10:33:28.950]   ..$ rshcmd          : NULL
[10:33:28.950]   ..$ user            : NULL
[10:33:28.950]   ..$ revtunnel       : logi NA
[10:33:28.950]   ..$ rshlogfile      : NULL
[10:33:28.950]   ..$ rshopts         : NULL
[10:33:28.950]   ..$ rank            : int 1
[10:33:28.950]   ..$ manual          : logi FALSE
[10:33:28.950]   ..$ dryrun          : logi FALSE
[10:33:28.950]   ..$ quiet           : logi FALSE
[10:33:28.950]   ..$ setup_strategy  : chr "parallel"
[10:33:28.950]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:33:28.966] [local output] System call to launch all workers:
[10:33:28.967] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpJCh4Dg/worker.rank=1.parallelly.parent=85675.14eab2d318e2.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11748 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:33:28.967] [local output] Starting PSOCK main server
[10:33:28.968] [local output] Workers launched
[10:33:28.968] [local output] Waiting for workers to connect back
[10:33:28.968]  - [local output] 0 workers out of 2 ready
[10:33:29.211]  - [local output] 0 workers out of 2 ready
[10:33:29.211]  - [local output] 1 workers out of 2 ready
[10:33:29.220]  - [local output] 1 workers out of 2 ready
[10:33:29.220]  - [local output] 2 workers out of 2 ready
[10:33:29.221] [local output] Launching of workers completed
[10:33:29.221] [local output] Collecting session information from workers
[10:33:29.222] [local output]  - Worker #1 of 2
[10:33:29.222] [local output]  - Worker #2 of 2
[10:33:29.222] [local output] makeClusterPSOCK() ... done
[10:33:29.235] Packages needed by the future expression (n = 0): <none>
[10:33:29.235] Packages needed by future strategies (n = 0): <none>
[10:33:29.235] {
[10:33:29.235]     {
[10:33:29.235]         {
[10:33:29.235]             ...future.startTime <- base::Sys.time()
[10:33:29.235]             {
[10:33:29.235]                 {
[10:33:29.235]                   {
[10:33:29.235]                     base::local({
[10:33:29.235]                       has_future <- base::requireNamespace("future", 
[10:33:29.235]                         quietly = TRUE)
[10:33:29.235]                       if (has_future) {
[10:33:29.235]                         ns <- base::getNamespace("future")
[10:33:29.235]                         version <- ns[[".package"]][["version"]]
[10:33:29.235]                         if (is.null(version)) 
[10:33:29.235]                           version <- utils::packageVersion("future")
[10:33:29.235]                       }
[10:33:29.235]                       else {
[10:33:29.235]                         version <- NULL
[10:33:29.235]                       }
[10:33:29.235]                       if (!has_future || version < "1.8.0") {
[10:33:29.235]                         info <- base::c(r_version = base::gsub("R version ", 
[10:33:29.235]                           "", base::R.version$version.string), 
[10:33:29.235]                           platform = base::sprintf("%s (%s-bit)", 
[10:33:29.235]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:29.235]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:29.235]                             "release", "version")], collapse = " "), 
[10:33:29.235]                           hostname = base::Sys.info()[["nodename"]])
[10:33:29.235]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:33:29.235]                           info)
[10:33:29.235]                         info <- base::paste(info, collapse = "; ")
[10:33:29.235]                         if (!has_future) {
[10:33:29.235]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:29.235]                             info)
[10:33:29.235]                         }
[10:33:29.235]                         else {
[10:33:29.235]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:29.235]                             info, version)
[10:33:29.235]                         }
[10:33:29.235]                         base::stop(msg)
[10:33:29.235]                       }
[10:33:29.235]                     })
[10:33:29.235]                   }
[10:33:29.235]                   ...future.strategy.old <- future::plan("list")
[10:33:29.235]                   options(future.plan = NULL)
[10:33:29.235]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:29.235]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:29.235]                 }
[10:33:29.235]                 ...future.workdir <- getwd()
[10:33:29.235]             }
[10:33:29.235]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:29.235]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:29.235]         }
[10:33:29.235]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:29.235]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:29.235]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:29.235]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:29.235]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:29.235]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:29.235]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:29.235]             base::names(...future.oldOptions))
[10:33:29.235]     }
[10:33:29.235]     if (FALSE) {
[10:33:29.235]     }
[10:33:29.235]     else {
[10:33:29.235]         if (TRUE) {
[10:33:29.235]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:29.235]                 open = "w")
[10:33:29.235]         }
[10:33:29.235]         else {
[10:33:29.235]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:29.235]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:29.235]         }
[10:33:29.235]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:29.235]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:29.235]             base::sink(type = "output", split = FALSE)
[10:33:29.235]             base::close(...future.stdout)
[10:33:29.235]         }, add = TRUE)
[10:33:29.235]     }
[10:33:29.235]     ...future.frame <- base::sys.nframe()
[10:33:29.235]     ...future.conditions <- base::list()
[10:33:29.235]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:29.235]     if (FALSE) {
[10:33:29.235]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:29.235]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:29.235]     }
[10:33:29.235]     ...future.result <- base::tryCatch({
[10:33:29.235]         base::withCallingHandlers({
[10:33:29.235]             ...future.value <- base::withVisible(base::local({
[10:33:29.235]                 ...future.makeSendCondition <- base::local({
[10:33:29.235]                   sendCondition <- NULL
[10:33:29.235]                   function(frame = 1L) {
[10:33:29.235]                     if (is.function(sendCondition)) 
[10:33:29.235]                       return(sendCondition)
[10:33:29.235]                     ns <- getNamespace("parallel")
[10:33:29.235]                     if (exists("sendData", mode = "function", 
[10:33:29.235]                       envir = ns)) {
[10:33:29.235]                       parallel_sendData <- get("sendData", mode = "function", 
[10:33:29.235]                         envir = ns)
[10:33:29.235]                       envir <- sys.frame(frame)
[10:33:29.235]                       master <- NULL
[10:33:29.235]                       while (!identical(envir, .GlobalEnv) && 
[10:33:29.235]                         !identical(envir, emptyenv())) {
[10:33:29.235]                         if (exists("master", mode = "list", envir = envir, 
[10:33:29.235]                           inherits = FALSE)) {
[10:33:29.235]                           master <- get("master", mode = "list", 
[10:33:29.235]                             envir = envir, inherits = FALSE)
[10:33:29.235]                           if (inherits(master, c("SOCKnode", 
[10:33:29.235]                             "SOCK0node"))) {
[10:33:29.235]                             sendCondition <<- function(cond) {
[10:33:29.235]                               data <- list(type = "VALUE", value = cond, 
[10:33:29.235]                                 success = TRUE)
[10:33:29.235]                               parallel_sendData(master, data)
[10:33:29.235]                             }
[10:33:29.235]                             return(sendCondition)
[10:33:29.235]                           }
[10:33:29.235]                         }
[10:33:29.235]                         frame <- frame + 1L
[10:33:29.235]                         envir <- sys.frame(frame)
[10:33:29.235]                       }
[10:33:29.235]                     }
[10:33:29.235]                     sendCondition <<- function(cond) NULL
[10:33:29.235]                   }
[10:33:29.235]                 })
[10:33:29.235]                 withCallingHandlers({
[10:33:29.235]                   NA
[10:33:29.235]                 }, immediateCondition = function(cond) {
[10:33:29.235]                   sendCondition <- ...future.makeSendCondition()
[10:33:29.235]                   sendCondition(cond)
[10:33:29.235]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:29.235]                   {
[10:33:29.235]                     inherits <- base::inherits
[10:33:29.235]                     invokeRestart <- base::invokeRestart
[10:33:29.235]                     is.null <- base::is.null
[10:33:29.235]                     muffled <- FALSE
[10:33:29.235]                     if (inherits(cond, "message")) {
[10:33:29.235]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:29.235]                       if (muffled) 
[10:33:29.235]                         invokeRestart("muffleMessage")
[10:33:29.235]                     }
[10:33:29.235]                     else if (inherits(cond, "warning")) {
[10:33:29.235]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:29.235]                       if (muffled) 
[10:33:29.235]                         invokeRestart("muffleWarning")
[10:33:29.235]                     }
[10:33:29.235]                     else if (inherits(cond, "condition")) {
[10:33:29.235]                       if (!is.null(pattern)) {
[10:33:29.235]                         computeRestarts <- base::computeRestarts
[10:33:29.235]                         grepl <- base::grepl
[10:33:29.235]                         restarts <- computeRestarts(cond)
[10:33:29.235]                         for (restart in restarts) {
[10:33:29.235]                           name <- restart$name
[10:33:29.235]                           if (is.null(name)) 
[10:33:29.235]                             next
[10:33:29.235]                           if (!grepl(pattern, name)) 
[10:33:29.235]                             next
[10:33:29.235]                           invokeRestart(restart)
[10:33:29.235]                           muffled <- TRUE
[10:33:29.235]                           break
[10:33:29.235]                         }
[10:33:29.235]                       }
[10:33:29.235]                     }
[10:33:29.235]                     invisible(muffled)
[10:33:29.235]                   }
[10:33:29.235]                   muffleCondition(cond)
[10:33:29.235]                 })
[10:33:29.235]             }))
[10:33:29.235]             future::FutureResult(value = ...future.value$value, 
[10:33:29.235]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:29.235]                   ...future.rng), globalenv = if (FALSE) 
[10:33:29.235]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:29.235]                     ...future.globalenv.names))
[10:33:29.235]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:29.235]         }, condition = base::local({
[10:33:29.235]             c <- base::c
[10:33:29.235]             inherits <- base::inherits
[10:33:29.235]             invokeRestart <- base::invokeRestart
[10:33:29.235]             length <- base::length
[10:33:29.235]             list <- base::list
[10:33:29.235]             seq.int <- base::seq.int
[10:33:29.235]             signalCondition <- base::signalCondition
[10:33:29.235]             sys.calls <- base::sys.calls
[10:33:29.235]             `[[` <- base::`[[`
[10:33:29.235]             `+` <- base::`+`
[10:33:29.235]             `<<-` <- base::`<<-`
[10:33:29.235]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:29.235]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:29.235]                   3L)]
[10:33:29.235]             }
[10:33:29.235]             function(cond) {
[10:33:29.235]                 is_error <- inherits(cond, "error")
[10:33:29.235]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:29.235]                   NULL)
[10:33:29.235]                 if (is_error) {
[10:33:29.235]                   sessionInformation <- function() {
[10:33:29.235]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:29.235]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:29.235]                       search = base::search(), system = base::Sys.info())
[10:33:29.235]                   }
[10:33:29.235]                   ...future.conditions[[length(...future.conditions) + 
[10:33:29.235]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:29.235]                     cond$call), session = sessionInformation(), 
[10:33:29.235]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:29.235]                   signalCondition(cond)
[10:33:29.235]                 }
[10:33:29.235]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:29.235]                 "immediateCondition"))) {
[10:33:29.235]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:29.235]                   ...future.conditions[[length(...future.conditions) + 
[10:33:29.235]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:29.235]                   if (TRUE && !signal) {
[10:33:29.235]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:29.235]                     {
[10:33:29.235]                       inherits <- base::inherits
[10:33:29.235]                       invokeRestart <- base::invokeRestart
[10:33:29.235]                       is.null <- base::is.null
[10:33:29.235]                       muffled <- FALSE
[10:33:29.235]                       if (inherits(cond, "message")) {
[10:33:29.235]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:29.235]                         if (muffled) 
[10:33:29.235]                           invokeRestart("muffleMessage")
[10:33:29.235]                       }
[10:33:29.235]                       else if (inherits(cond, "warning")) {
[10:33:29.235]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:29.235]                         if (muffled) 
[10:33:29.235]                           invokeRestart("muffleWarning")
[10:33:29.235]                       }
[10:33:29.235]                       else if (inherits(cond, "condition")) {
[10:33:29.235]                         if (!is.null(pattern)) {
[10:33:29.235]                           computeRestarts <- base::computeRestarts
[10:33:29.235]                           grepl <- base::grepl
[10:33:29.235]                           restarts <- computeRestarts(cond)
[10:33:29.235]                           for (restart in restarts) {
[10:33:29.235]                             name <- restart$name
[10:33:29.235]                             if (is.null(name)) 
[10:33:29.235]                               next
[10:33:29.235]                             if (!grepl(pattern, name)) 
[10:33:29.235]                               next
[10:33:29.235]                             invokeRestart(restart)
[10:33:29.235]                             muffled <- TRUE
[10:33:29.235]                             break
[10:33:29.235]                           }
[10:33:29.235]                         }
[10:33:29.235]                       }
[10:33:29.235]                       invisible(muffled)
[10:33:29.235]                     }
[10:33:29.235]                     muffleCondition(cond, pattern = "^muffle")
[10:33:29.235]                   }
[10:33:29.235]                 }
[10:33:29.235]                 else {
[10:33:29.235]                   if (TRUE) {
[10:33:29.235]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:29.235]                     {
[10:33:29.235]                       inherits <- base::inherits
[10:33:29.235]                       invokeRestart <- base::invokeRestart
[10:33:29.235]                       is.null <- base::is.null
[10:33:29.235]                       muffled <- FALSE
[10:33:29.235]                       if (inherits(cond, "message")) {
[10:33:29.235]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:29.235]                         if (muffled) 
[10:33:29.235]                           invokeRestart("muffleMessage")
[10:33:29.235]                       }
[10:33:29.235]                       else if (inherits(cond, "warning")) {
[10:33:29.235]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:29.235]                         if (muffled) 
[10:33:29.235]                           invokeRestart("muffleWarning")
[10:33:29.235]                       }
[10:33:29.235]                       else if (inherits(cond, "condition")) {
[10:33:29.235]                         if (!is.null(pattern)) {
[10:33:29.235]                           computeRestarts <- base::computeRestarts
[10:33:29.235]                           grepl <- base::grepl
[10:33:29.235]                           restarts <- computeRestarts(cond)
[10:33:29.235]                           for (restart in restarts) {
[10:33:29.235]                             name <- restart$name
[10:33:29.235]                             if (is.null(name)) 
[10:33:29.235]                               next
[10:33:29.235]                             if (!grepl(pattern, name)) 
[10:33:29.235]                               next
[10:33:29.235]                             invokeRestart(restart)
[10:33:29.235]                             muffled <- TRUE
[10:33:29.235]                             break
[10:33:29.235]                           }
[10:33:29.235]                         }
[10:33:29.235]                       }
[10:33:29.235]                       invisible(muffled)
[10:33:29.235]                     }
[10:33:29.235]                     muffleCondition(cond, pattern = "^muffle")
[10:33:29.235]                   }
[10:33:29.235]                 }
[10:33:29.235]             }
[10:33:29.235]         }))
[10:33:29.235]     }, error = function(ex) {
[10:33:29.235]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:29.235]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:29.235]                 ...future.rng), started = ...future.startTime, 
[10:33:29.235]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:29.235]             version = "1.8"), class = "FutureResult")
[10:33:29.235]     }, finally = {
[10:33:29.235]         if (!identical(...future.workdir, getwd())) 
[10:33:29.235]             setwd(...future.workdir)
[10:33:29.235]         {
[10:33:29.235]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:29.235]                 ...future.oldOptions$nwarnings <- NULL
[10:33:29.235]             }
[10:33:29.235]             base::options(...future.oldOptions)
[10:33:29.235]             if (.Platform$OS.type == "windows") {
[10:33:29.235]                 old_names <- names(...future.oldEnvVars)
[10:33:29.235]                 envs <- base::Sys.getenv()
[10:33:29.235]                 names <- names(envs)
[10:33:29.235]                 common <- intersect(names, old_names)
[10:33:29.235]                 added <- setdiff(names, old_names)
[10:33:29.235]                 removed <- setdiff(old_names, names)
[10:33:29.235]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:29.235]                   envs[common]]
[10:33:29.235]                 NAMES <- toupper(changed)
[10:33:29.235]                 args <- list()
[10:33:29.235]                 for (kk in seq_along(NAMES)) {
[10:33:29.235]                   name <- changed[[kk]]
[10:33:29.235]                   NAME <- NAMES[[kk]]
[10:33:29.235]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:29.235]                     next
[10:33:29.235]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:29.235]                 }
[10:33:29.235]                 NAMES <- toupper(added)
[10:33:29.235]                 for (kk in seq_along(NAMES)) {
[10:33:29.235]                   name <- added[[kk]]
[10:33:29.235]                   NAME <- NAMES[[kk]]
[10:33:29.235]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:29.235]                     next
[10:33:29.235]                   args[[name]] <- ""
[10:33:29.235]                 }
[10:33:29.235]                 NAMES <- toupper(removed)
[10:33:29.235]                 for (kk in seq_along(NAMES)) {
[10:33:29.235]                   name <- removed[[kk]]
[10:33:29.235]                   NAME <- NAMES[[kk]]
[10:33:29.235]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:29.235]                     next
[10:33:29.235]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:29.235]                 }
[10:33:29.235]                 if (length(args) > 0) 
[10:33:29.235]                   base::do.call(base::Sys.setenv, args = args)
[10:33:29.235]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:29.235]             }
[10:33:29.235]             else {
[10:33:29.235]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:29.235]             }
[10:33:29.235]             {
[10:33:29.235]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:29.235]                   0L) {
[10:33:29.235]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:29.235]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:29.235]                   base::options(opts)
[10:33:29.235]                 }
[10:33:29.235]                 {
[10:33:29.235]                   NULL
[10:33:29.235]                   options(future.plan = NULL)
[10:33:29.235]                   if (is.na(NA_character_)) 
[10:33:29.235]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:29.235]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:29.235]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:29.235]                     .init = FALSE)
[10:33:29.235]                 }
[10:33:29.235]             }
[10:33:29.235]         }
[10:33:29.235]     })
[10:33:29.235]     if (TRUE) {
[10:33:29.235]         base::sink(type = "output", split = FALSE)
[10:33:29.235]         if (TRUE) {
[10:33:29.235]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:29.235]         }
[10:33:29.235]         else {
[10:33:29.235]             ...future.result["stdout"] <- base::list(NULL)
[10:33:29.235]         }
[10:33:29.235]         base::close(...future.stdout)
[10:33:29.235]         ...future.stdout <- NULL
[10:33:29.235]     }
[10:33:29.235]     ...future.result$conditions <- ...future.conditions
[10:33:29.235]     ...future.result$finished <- base::Sys.time()
[10:33:29.235]     ...future.result
[10:33:29.235] }
[10:33:29.290] ClusterFuture started
[10:33:29.290] result() for ClusterFuture ...
[10:33:29.290] receiveMessageFromWorker() for ClusterFuture ...
[10:33:29.290] - Validating connection of ClusterFuture
[10:33:29.325] - received message: FutureResult
[10:33:29.325] - Received FutureResult
[10:33:29.325] - Erased future from FutureRegistry
[10:33:29.325] result() for ClusterFuture ...
[10:33:29.325] - result already collected: FutureResult
[10:33:29.325] result() for ClusterFuture ... done
[10:33:29.326] receiveMessageFromWorker() for ClusterFuture ... done
[10:33:29.326] result() for ClusterFuture ... done
[10:33:29.326] result() for ClusterFuture ...
[10:33:29.326] - result already collected: FutureResult
[10:33:29.326] result() for ClusterFuture ... done
[10:33:29.326] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:33:29.326] plan(): nbrOfWorkers() = 2
> n <- nbrOfWorkers()
> message(sprintf("nbrOfWorkers: %d", n))
nbrOfWorkers: 2
> stopifnot(n == length(workers))
> plan(cluster, workers = allButOneWorker)
[10:33:29.327] plan(): Setting new future strategy stack:
[10:33:29.327] List of future strategies:
[10:33:29.327] 1. cluster:
[10:33:29.327]    - args: function (..., workers = "<function ()  >", envir = parent.frame())
[10:33:29.327]    - tweaked: TRUE
[10:33:29.327]    - call: plan(cluster, workers = allButOneWorker)
[10:33:29.328] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:33:29.328] cluster:
[10:33:29.328] - args: function (..., workers = "<function ()  >", envir = parent.frame())
[10:33:29.328] - tweaked: TRUE
[10:33:29.328] - call: plan(cluster, workers = allButOneWorker)
[10:33:29.329] getGlobalsAndPackages() ...
[10:33:29.329] Not searching for globals
[10:33:29.329] - globals: [0] <none>
[10:33:29.329] getGlobalsAndPackages() ... DONE
[10:33:29.335] [local output] makeClusterPSOCK() ...
[10:33:29.336] [local output] Workers: [n = 1] ‘localhost’
[10:33:29.336] [local output] Base port: 11428
[10:33:29.337] [local output] Getting setup options for 1 cluster nodes ...
[10:33:29.337] [local output]  - Node 1 of 1 ...
[10:33:29.337] [local output] localMachine=TRUE => revtunnel=FALSE

[10:33:29.338] [local output] Rscript port: 11428

[10:33:29.338] [local output] Getting setup options for 1 cluster nodes ... done
[10:33:29.338] [local output]  - Parallel setup requested for some PSOCK nodes
[10:33:29.339] [local output] Setting up PSOCK nodes in parallel
[10:33:29.339] List of 36
[10:33:29.339]  $ worker          : chr "localhost"
[10:33:29.339]   ..- attr(*, "localhost")= logi TRUE
[10:33:29.339]  $ master          : chr "localhost"
[10:33:29.339]  $ port            : int 11428
[10:33:29.339]  $ connectTimeout  : num 120
[10:33:29.339]  $ timeout         : num 2592000
[10:33:29.339]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:33:29.339]  $ homogeneous     : logi TRUE
[10:33:29.339]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:33:29.339]  $ rscript_envs    : NULL
[10:33:29.339]  $ rscript_libs    : NULL
[10:33:29.339]  $ rscript_startup : NULL
[10:33:29.339]  $ rscript_sh      : chr "sh"
[10:33:29.339]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:33:29.339]  $ methods         : logi TRUE
[10:33:29.339]  $ socketOptions   : chr "no-delay"
[10:33:29.339]  $ useXDR          : logi FALSE
[10:33:29.339]  $ outfile         : chr "/dev/null"
[10:33:29.339]  $ renice          : int NA
[10:33:29.339]  $ rshcmd          : NULL
[10:33:29.339]  $ user            : chr(0) 
[10:33:29.339]  $ revtunnel       : logi FALSE
[10:33:29.339]  $ rshlogfile      : NULL
[10:33:29.339]  $ rshopts         : chr(0) 
[10:33:29.339]  $ rank            : int 1
[10:33:29.339]  $ manual          : logi FALSE
[10:33:29.339]  $ dryrun          : logi FALSE
[10:33:29.339]  $ quiet           : logi FALSE
[10:33:29.339]  $ setup_strategy  : chr "parallel"
[10:33:29.339]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:33:29.339]  $ pidfile         : chr "/tmp/RtmpJCh4Dg/worker.rank=1.parallelly.parent=85675.14eab7cb1e1b.pid"
[10:33:29.339]  $ rshcmd_label    : NULL
[10:33:29.339]  $ rsh_call        : NULL
[10:33:29.339]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:33:29.339]  $ localMachine    : logi TRUE
[10:33:29.339]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:33:29.339]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:33:29.339]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:33:29.339]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:33:29.339]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:33:29.339]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:33:29.339]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:33:29.339]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:33:29.339]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:33:29.339]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:33:29.339]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:33:29.339]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:33:29.339]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:33:29.339]  $ arguments       :List of 28
[10:33:29.339]   ..$ worker          : chr "localhost"
[10:33:29.339]   ..$ master          : NULL
[10:33:29.339]   ..$ port            : int 11428
[10:33:29.339]   ..$ connectTimeout  : num 120
[10:33:29.339]   ..$ timeout         : num 2592000
[10:33:29.339]   ..$ rscript         : NULL
[10:33:29.339]   ..$ homogeneous     : NULL
[10:33:29.339]   ..$ rscript_args    : NULL
[10:33:29.339]   ..$ rscript_envs    : NULL
[10:33:29.339]   ..$ rscript_libs    : NULL
[10:33:29.339]   ..$ rscript_startup : NULL
[10:33:29.339]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:33:29.339]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:33:29.339]   ..$ methods         : logi TRUE
[10:33:29.339]   ..$ socketOptions   : chr "no-delay"
[10:33:29.339]   ..$ useXDR          : logi FALSE
[10:33:29.339]   ..$ outfile         : chr "/dev/null"
[10:33:29.339]   ..$ renice          : int NA
[10:33:29.339]   ..$ rshcmd          : NULL
[10:33:29.339]   ..$ user            : NULL
[10:33:29.339]   ..$ revtunnel       : logi NA
[10:33:29.339]   ..$ rshlogfile      : NULL
[10:33:29.339]   ..$ rshopts         : NULL
[10:33:29.339]   ..$ rank            : int 1
[10:33:29.339]   ..$ manual          : logi FALSE
[10:33:29.339]   ..$ dryrun          : logi FALSE
[10:33:29.339]   ..$ quiet           : logi FALSE
[10:33:29.339]   ..$ setup_strategy  : chr "parallel"
[10:33:29.339]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:33:29.358] [local output] System call to launch all workers:
[10:33:29.358] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpJCh4Dg/worker.rank=1.parallelly.parent=85675.14eab7cb1e1b.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11428 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:33:29.358] [local output] Starting PSOCK main server
[10:33:29.359] [local output] Workers launched
[10:33:29.359] [local output] Waiting for workers to connect back
[10:33:29.360]  - [local output] 0 workers out of 1 ready
[10:33:29.559]  - [local output] 0 workers out of 1 ready
[10:33:29.560]  - [local output] 1 workers out of 1 ready
[10:33:29.560] [local output] Launching of workers completed
[10:33:29.560] [local output] Collecting session information from workers
[10:33:29.561] [local output]  - Worker #1 of 1
[10:33:29.561] [local output] makeClusterPSOCK() ... done
[10:33:29.567] Packages needed by the future expression (n = 0): <none>
[10:33:29.567] Packages needed by future strategies (n = 0): <none>
[10:33:29.567] {
[10:33:29.567]     {
[10:33:29.567]         {
[10:33:29.567]             ...future.startTime <- base::Sys.time()
[10:33:29.567]             {
[10:33:29.567]                 {
[10:33:29.567]                   {
[10:33:29.567]                     base::local({
[10:33:29.567]                       has_future <- base::requireNamespace("future", 
[10:33:29.567]                         quietly = TRUE)
[10:33:29.567]                       if (has_future) {
[10:33:29.567]                         ns <- base::getNamespace("future")
[10:33:29.567]                         version <- ns[[".package"]][["version"]]
[10:33:29.567]                         if (is.null(version)) 
[10:33:29.567]                           version <- utils::packageVersion("future")
[10:33:29.567]                       }
[10:33:29.567]                       else {
[10:33:29.567]                         version <- NULL
[10:33:29.567]                       }
[10:33:29.567]                       if (!has_future || version < "1.8.0") {
[10:33:29.567]                         info <- base::c(r_version = base::gsub("R version ", 
[10:33:29.567]                           "", base::R.version$version.string), 
[10:33:29.567]                           platform = base::sprintf("%s (%s-bit)", 
[10:33:29.567]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:29.567]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:29.567]                             "release", "version")], collapse = " "), 
[10:33:29.567]                           hostname = base::Sys.info()[["nodename"]])
[10:33:29.567]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:33:29.567]                           info)
[10:33:29.567]                         info <- base::paste(info, collapse = "; ")
[10:33:29.567]                         if (!has_future) {
[10:33:29.567]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:29.567]                             info)
[10:33:29.567]                         }
[10:33:29.567]                         else {
[10:33:29.567]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:29.567]                             info, version)
[10:33:29.567]                         }
[10:33:29.567]                         base::stop(msg)
[10:33:29.567]                       }
[10:33:29.567]                     })
[10:33:29.567]                   }
[10:33:29.567]                   ...future.strategy.old <- future::plan("list")
[10:33:29.567]                   options(future.plan = NULL)
[10:33:29.567]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:29.567]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:29.567]                 }
[10:33:29.567]                 ...future.workdir <- getwd()
[10:33:29.567]             }
[10:33:29.567]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:29.567]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:29.567]         }
[10:33:29.567]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:29.567]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:29.567]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:29.567]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:29.567]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:29.567]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:29.567]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:29.567]             base::names(...future.oldOptions))
[10:33:29.567]     }
[10:33:29.567]     if (FALSE) {
[10:33:29.567]     }
[10:33:29.567]     else {
[10:33:29.567]         if (TRUE) {
[10:33:29.567]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:29.567]                 open = "w")
[10:33:29.567]         }
[10:33:29.567]         else {
[10:33:29.567]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:29.567]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:29.567]         }
[10:33:29.567]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:29.567]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:29.567]             base::sink(type = "output", split = FALSE)
[10:33:29.567]             base::close(...future.stdout)
[10:33:29.567]         }, add = TRUE)
[10:33:29.567]     }
[10:33:29.567]     ...future.frame <- base::sys.nframe()
[10:33:29.567]     ...future.conditions <- base::list()
[10:33:29.567]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:29.567]     if (FALSE) {
[10:33:29.567]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:29.567]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:29.567]     }
[10:33:29.567]     ...future.result <- base::tryCatch({
[10:33:29.567]         base::withCallingHandlers({
[10:33:29.567]             ...future.value <- base::withVisible(base::local({
[10:33:29.567]                 ...future.makeSendCondition <- base::local({
[10:33:29.567]                   sendCondition <- NULL
[10:33:29.567]                   function(frame = 1L) {
[10:33:29.567]                     if (is.function(sendCondition)) 
[10:33:29.567]                       return(sendCondition)
[10:33:29.567]                     ns <- getNamespace("parallel")
[10:33:29.567]                     if (exists("sendData", mode = "function", 
[10:33:29.567]                       envir = ns)) {
[10:33:29.567]                       parallel_sendData <- get("sendData", mode = "function", 
[10:33:29.567]                         envir = ns)
[10:33:29.567]                       envir <- sys.frame(frame)
[10:33:29.567]                       master <- NULL
[10:33:29.567]                       while (!identical(envir, .GlobalEnv) && 
[10:33:29.567]                         !identical(envir, emptyenv())) {
[10:33:29.567]                         if (exists("master", mode = "list", envir = envir, 
[10:33:29.567]                           inherits = FALSE)) {
[10:33:29.567]                           master <- get("master", mode = "list", 
[10:33:29.567]                             envir = envir, inherits = FALSE)
[10:33:29.567]                           if (inherits(master, c("SOCKnode", 
[10:33:29.567]                             "SOCK0node"))) {
[10:33:29.567]                             sendCondition <<- function(cond) {
[10:33:29.567]                               data <- list(type = "VALUE", value = cond, 
[10:33:29.567]                                 success = TRUE)
[10:33:29.567]                               parallel_sendData(master, data)
[10:33:29.567]                             }
[10:33:29.567]                             return(sendCondition)
[10:33:29.567]                           }
[10:33:29.567]                         }
[10:33:29.567]                         frame <- frame + 1L
[10:33:29.567]                         envir <- sys.frame(frame)
[10:33:29.567]                       }
[10:33:29.567]                     }
[10:33:29.567]                     sendCondition <<- function(cond) NULL
[10:33:29.567]                   }
[10:33:29.567]                 })
[10:33:29.567]                 withCallingHandlers({
[10:33:29.567]                   NA
[10:33:29.567]                 }, immediateCondition = function(cond) {
[10:33:29.567]                   sendCondition <- ...future.makeSendCondition()
[10:33:29.567]                   sendCondition(cond)
[10:33:29.567]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:29.567]                   {
[10:33:29.567]                     inherits <- base::inherits
[10:33:29.567]                     invokeRestart <- base::invokeRestart
[10:33:29.567]                     is.null <- base::is.null
[10:33:29.567]                     muffled <- FALSE
[10:33:29.567]                     if (inherits(cond, "message")) {
[10:33:29.567]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:29.567]                       if (muffled) 
[10:33:29.567]                         invokeRestart("muffleMessage")
[10:33:29.567]                     }
[10:33:29.567]                     else if (inherits(cond, "warning")) {
[10:33:29.567]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:29.567]                       if (muffled) 
[10:33:29.567]                         invokeRestart("muffleWarning")
[10:33:29.567]                     }
[10:33:29.567]                     else if (inherits(cond, "condition")) {
[10:33:29.567]                       if (!is.null(pattern)) {
[10:33:29.567]                         computeRestarts <- base::computeRestarts
[10:33:29.567]                         grepl <- base::grepl
[10:33:29.567]                         restarts <- computeRestarts(cond)
[10:33:29.567]                         for (restart in restarts) {
[10:33:29.567]                           name <- restart$name
[10:33:29.567]                           if (is.null(name)) 
[10:33:29.567]                             next
[10:33:29.567]                           if (!grepl(pattern, name)) 
[10:33:29.567]                             next
[10:33:29.567]                           invokeRestart(restart)
[10:33:29.567]                           muffled <- TRUE
[10:33:29.567]                           break
[10:33:29.567]                         }
[10:33:29.567]                       }
[10:33:29.567]                     }
[10:33:29.567]                     invisible(muffled)
[10:33:29.567]                   }
[10:33:29.567]                   muffleCondition(cond)
[10:33:29.567]                 })
[10:33:29.567]             }))
[10:33:29.567]             future::FutureResult(value = ...future.value$value, 
[10:33:29.567]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:29.567]                   ...future.rng), globalenv = if (FALSE) 
[10:33:29.567]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:29.567]                     ...future.globalenv.names))
[10:33:29.567]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:29.567]         }, condition = base::local({
[10:33:29.567]             c <- base::c
[10:33:29.567]             inherits <- base::inherits
[10:33:29.567]             invokeRestart <- base::invokeRestart
[10:33:29.567]             length <- base::length
[10:33:29.567]             list <- base::list
[10:33:29.567]             seq.int <- base::seq.int
[10:33:29.567]             signalCondition <- base::signalCondition
[10:33:29.567]             sys.calls <- base::sys.calls
[10:33:29.567]             `[[` <- base::`[[`
[10:33:29.567]             `+` <- base::`+`
[10:33:29.567]             `<<-` <- base::`<<-`
[10:33:29.567]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:29.567]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:29.567]                   3L)]
[10:33:29.567]             }
[10:33:29.567]             function(cond) {
[10:33:29.567]                 is_error <- inherits(cond, "error")
[10:33:29.567]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:29.567]                   NULL)
[10:33:29.567]                 if (is_error) {
[10:33:29.567]                   sessionInformation <- function() {
[10:33:29.567]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:29.567]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:29.567]                       search = base::search(), system = base::Sys.info())
[10:33:29.567]                   }
[10:33:29.567]                   ...future.conditions[[length(...future.conditions) + 
[10:33:29.567]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:29.567]                     cond$call), session = sessionInformation(), 
[10:33:29.567]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:29.567]                   signalCondition(cond)
[10:33:29.567]                 }
[10:33:29.567]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:29.567]                 "immediateCondition"))) {
[10:33:29.567]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:29.567]                   ...future.conditions[[length(...future.conditions) + 
[10:33:29.567]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:29.567]                   if (TRUE && !signal) {
[10:33:29.567]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:29.567]                     {
[10:33:29.567]                       inherits <- base::inherits
[10:33:29.567]                       invokeRestart <- base::invokeRestart
[10:33:29.567]                       is.null <- base::is.null
[10:33:29.567]                       muffled <- FALSE
[10:33:29.567]                       if (inherits(cond, "message")) {
[10:33:29.567]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:29.567]                         if (muffled) 
[10:33:29.567]                           invokeRestart("muffleMessage")
[10:33:29.567]                       }
[10:33:29.567]                       else if (inherits(cond, "warning")) {
[10:33:29.567]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:29.567]                         if (muffled) 
[10:33:29.567]                           invokeRestart("muffleWarning")
[10:33:29.567]                       }
[10:33:29.567]                       else if (inherits(cond, "condition")) {
[10:33:29.567]                         if (!is.null(pattern)) {
[10:33:29.567]                           computeRestarts <- base::computeRestarts
[10:33:29.567]                           grepl <- base::grepl
[10:33:29.567]                           restarts <- computeRestarts(cond)
[10:33:29.567]                           for (restart in restarts) {
[10:33:29.567]                             name <- restart$name
[10:33:29.567]                             if (is.null(name)) 
[10:33:29.567]                               next
[10:33:29.567]                             if (!grepl(pattern, name)) 
[10:33:29.567]                               next
[10:33:29.567]                             invokeRestart(restart)
[10:33:29.567]                             muffled <- TRUE
[10:33:29.567]                             break
[10:33:29.567]                           }
[10:33:29.567]                         }
[10:33:29.567]                       }
[10:33:29.567]                       invisible(muffled)
[10:33:29.567]                     }
[10:33:29.567]                     muffleCondition(cond, pattern = "^muffle")
[10:33:29.567]                   }
[10:33:29.567]                 }
[10:33:29.567]                 else {
[10:33:29.567]                   if (TRUE) {
[10:33:29.567]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:29.567]                     {
[10:33:29.567]                       inherits <- base::inherits
[10:33:29.567]                       invokeRestart <- base::invokeRestart
[10:33:29.567]                       is.null <- base::is.null
[10:33:29.567]                       muffled <- FALSE
[10:33:29.567]                       if (inherits(cond, "message")) {
[10:33:29.567]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:29.567]                         if (muffled) 
[10:33:29.567]                           invokeRestart("muffleMessage")
[10:33:29.567]                       }
[10:33:29.567]                       else if (inherits(cond, "warning")) {
[10:33:29.567]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:29.567]                         if (muffled) 
[10:33:29.567]                           invokeRestart("muffleWarning")
[10:33:29.567]                       }
[10:33:29.567]                       else if (inherits(cond, "condition")) {
[10:33:29.567]                         if (!is.null(pattern)) {
[10:33:29.567]                           computeRestarts <- base::computeRestarts
[10:33:29.567]                           grepl <- base::grepl
[10:33:29.567]                           restarts <- computeRestarts(cond)
[10:33:29.567]                           for (restart in restarts) {
[10:33:29.567]                             name <- restart$name
[10:33:29.567]                             if (is.null(name)) 
[10:33:29.567]                               next
[10:33:29.567]                             if (!grepl(pattern, name)) 
[10:33:29.567]                               next
[10:33:29.567]                             invokeRestart(restart)
[10:33:29.567]                             muffled <- TRUE
[10:33:29.567]                             break
[10:33:29.567]                           }
[10:33:29.567]                         }
[10:33:29.567]                       }
[10:33:29.567]                       invisible(muffled)
[10:33:29.567]                     }
[10:33:29.567]                     muffleCondition(cond, pattern = "^muffle")
[10:33:29.567]                   }
[10:33:29.567]                 }
[10:33:29.567]             }
[10:33:29.567]         }))
[10:33:29.567]     }, error = function(ex) {
[10:33:29.567]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:29.567]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:29.567]                 ...future.rng), started = ...future.startTime, 
[10:33:29.567]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:29.567]             version = "1.8"), class = "FutureResult")
[10:33:29.567]     }, finally = {
[10:33:29.567]         if (!identical(...future.workdir, getwd())) 
[10:33:29.567]             setwd(...future.workdir)
[10:33:29.567]         {
[10:33:29.567]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:29.567]                 ...future.oldOptions$nwarnings <- NULL
[10:33:29.567]             }
[10:33:29.567]             base::options(...future.oldOptions)
[10:33:29.567]             if (.Platform$OS.type == "windows") {
[10:33:29.567]                 old_names <- names(...future.oldEnvVars)
[10:33:29.567]                 envs <- base::Sys.getenv()
[10:33:29.567]                 names <- names(envs)
[10:33:29.567]                 common <- intersect(names, old_names)
[10:33:29.567]                 added <- setdiff(names, old_names)
[10:33:29.567]                 removed <- setdiff(old_names, names)
[10:33:29.567]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:29.567]                   envs[common]]
[10:33:29.567]                 NAMES <- toupper(changed)
[10:33:29.567]                 args <- list()
[10:33:29.567]                 for (kk in seq_along(NAMES)) {
[10:33:29.567]                   name <- changed[[kk]]
[10:33:29.567]                   NAME <- NAMES[[kk]]
[10:33:29.567]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:29.567]                     next
[10:33:29.567]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:29.567]                 }
[10:33:29.567]                 NAMES <- toupper(added)
[10:33:29.567]                 for (kk in seq_along(NAMES)) {
[10:33:29.567]                   name <- added[[kk]]
[10:33:29.567]                   NAME <- NAMES[[kk]]
[10:33:29.567]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:29.567]                     next
[10:33:29.567]                   args[[name]] <- ""
[10:33:29.567]                 }
[10:33:29.567]                 NAMES <- toupper(removed)
[10:33:29.567]                 for (kk in seq_along(NAMES)) {
[10:33:29.567]                   name <- removed[[kk]]
[10:33:29.567]                   NAME <- NAMES[[kk]]
[10:33:29.567]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:29.567]                     next
[10:33:29.567]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:29.567]                 }
[10:33:29.567]                 if (length(args) > 0) 
[10:33:29.567]                   base::do.call(base::Sys.setenv, args = args)
[10:33:29.567]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:29.567]             }
[10:33:29.567]             else {
[10:33:29.567]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:29.567]             }
[10:33:29.567]             {
[10:33:29.567]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:29.567]                   0L) {
[10:33:29.567]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:29.567]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:29.567]                   base::options(opts)
[10:33:29.567]                 }
[10:33:29.567]                 {
[10:33:29.567]                   NULL
[10:33:29.567]                   options(future.plan = NULL)
[10:33:29.567]                   if (is.na(NA_character_)) 
[10:33:29.567]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:29.567]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:29.567]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:29.567]                     .init = FALSE)
[10:33:29.567]                 }
[10:33:29.567]             }
[10:33:29.567]         }
[10:33:29.567]     })
[10:33:29.567]     if (TRUE) {
[10:33:29.567]         base::sink(type = "output", split = FALSE)
[10:33:29.567]         if (TRUE) {
[10:33:29.567]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:29.567]         }
[10:33:29.567]         else {
[10:33:29.567]             ...future.result["stdout"] <- base::list(NULL)
[10:33:29.567]         }
[10:33:29.567]         base::close(...future.stdout)
[10:33:29.567]         ...future.stdout <- NULL
[10:33:29.567]     }
[10:33:29.567]     ...future.result$conditions <- ...future.conditions
[10:33:29.567]     ...future.result$finished <- base::Sys.time()
[10:33:29.567]     ...future.result
[10:33:29.567] }
[10:33:29.623] ClusterFuture started
[10:33:29.623] result() for ClusterFuture ...
[10:33:29.623] receiveMessageFromWorker() for ClusterFuture ...
[10:33:29.623] - Validating connection of ClusterFuture
[10:33:29.659] - received message: FutureResult
[10:33:29.659] - Received FutureResult
[10:33:29.659] - Erased future from FutureRegistry
[10:33:29.659] result() for ClusterFuture ...
[10:33:29.659] - result already collected: FutureResult
[10:33:29.659] result() for ClusterFuture ... done
[10:33:29.659] receiveMessageFromWorker() for ClusterFuture ... done
[10:33:29.660] result() for ClusterFuture ... done
[10:33:29.660] result() for ClusterFuture ...
[10:33:29.660] - result already collected: FutureResult
[10:33:29.660] result() for ClusterFuture ... done
[10:33:29.660] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:33:29.666] plan(): nbrOfWorkers() = 1
> n <- nbrOfWorkers()
> message(sprintf("nbrOfWorkers: %d", n))
nbrOfWorkers: 1
> stopifnot(n == max(1L, nworkers - 1L))
> 
> message("Type of future: constant")
Type of future: constant
> n <- nbrOfWorkers(constant)
> message(sprintf("nbrOfWorkers: %d", n))
nbrOfWorkers: 1
> stopifnot(n == 1)
> 
> message("Type of future: <future>")
Type of future: <future>
> foo <- structure(function(...) NULL, class = c("future"))
> n <- nbrOfWorkers(foo)
> message(sprintf("nbrOfWorkers: %g", n))
nbrOfWorkers: Inf
> stopifnot(n >= 0, is.infinite(n))
> 
> 
> message("Type of future: cluster with workers = <cluster object>")
Type of future: cluster with workers = <cluster object>
> 
> workers <- makeClusterPSOCK(2L)
[10:33:29.671] [local output] makeClusterPSOCK() ...
[10:33:29.675] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[10:33:29.676] [local output] Base port: 11441
[10:33:29.676] [local output] Getting setup options for 2 cluster nodes ...
[10:33:29.676] [local output]  - Node 1 of 2 ...
[10:33:29.677] [local output] localMachine=TRUE => revtunnel=FALSE

[10:33:29.677] [local output] Rscript port: 11441

[10:33:29.677] [local output]  - Node 2 of 2 ...
[10:33:29.678] [local output] localMachine=TRUE => revtunnel=FALSE

[10:33:29.678] [local output] Rscript port: 11441

[10:33:29.678] [local output] Getting setup options for 2 cluster nodes ... done
[10:33:29.679] [local output]  - Parallel setup requested for some PSOCK nodes
[10:33:29.679] [local output] Setting up PSOCK nodes in parallel
[10:33:29.679] List of 36
[10:33:29.679]  $ worker          : chr "localhost"
[10:33:29.679]   ..- attr(*, "localhost")= logi TRUE
[10:33:29.679]  $ master          : chr "localhost"
[10:33:29.679]  $ port            : int 11441
[10:33:29.679]  $ connectTimeout  : num 120
[10:33:29.679]  $ timeout         : num 2592000
[10:33:29.679]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:33:29.679]  $ homogeneous     : logi TRUE
[10:33:29.679]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:33:29.679]  $ rscript_envs    : NULL
[10:33:29.679]  $ rscript_libs    : NULL
[10:33:29.679]  $ rscript_startup : NULL
[10:33:29.679]  $ rscript_sh      : chr "sh"
[10:33:29.679]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:33:29.679]  $ methods         : logi TRUE
[10:33:29.679]  $ socketOptions   : chr "no-delay"
[10:33:29.679]  $ useXDR          : logi FALSE
[10:33:29.679]  $ outfile         : chr "/dev/null"
[10:33:29.679]  $ renice          : int NA
[10:33:29.679]  $ rshcmd          : NULL
[10:33:29.679]  $ user            : chr(0) 
[10:33:29.679]  $ revtunnel       : logi FALSE
[10:33:29.679]  $ rshlogfile      : NULL
[10:33:29.679]  $ rshopts         : chr(0) 
[10:33:29.679]  $ rank            : int 1
[10:33:29.679]  $ manual          : logi FALSE
[10:33:29.679]  $ dryrun          : logi FALSE
[10:33:29.679]  $ quiet           : logi FALSE
[10:33:29.679]  $ setup_strategy  : chr "parallel"
[10:33:29.679]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:33:29.679]  $ pidfile         : chr "/tmp/RtmpJCh4Dg/worker.rank=1.parallelly.parent=85675.14eabf90c2c8.pid"
[10:33:29.679]  $ rshcmd_label    : NULL
[10:33:29.679]  $ rsh_call        : NULL
[10:33:29.679]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:33:29.679]  $ localMachine    : logi TRUE
[10:33:29.679]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:33:29.679]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:33:29.679]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:33:29.679]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:33:29.679]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:33:29.679]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:33:29.679]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:33:29.679]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:33:29.679]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:33:29.679]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:33:29.679]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:33:29.679]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:33:29.679]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:33:29.679]  $ arguments       :List of 28
[10:33:29.679]   ..$ worker          : chr "localhost"
[10:33:29.679]   ..$ master          : NULL
[10:33:29.679]   ..$ port            : int 11441
[10:33:29.679]   ..$ connectTimeout  : num 120
[10:33:29.679]   ..$ timeout         : num 2592000
[10:33:29.679]   ..$ rscript         : NULL
[10:33:29.679]   ..$ homogeneous     : NULL
[10:33:29.679]   ..$ rscript_args    : NULL
[10:33:29.679]   ..$ rscript_envs    : NULL
[10:33:29.679]   ..$ rscript_libs    : NULL
[10:33:29.679]   ..$ rscript_startup : NULL
[10:33:29.679]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:33:29.679]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:33:29.679]   ..$ methods         : logi TRUE
[10:33:29.679]   ..$ socketOptions   : chr "no-delay"
[10:33:29.679]   ..$ useXDR          : logi FALSE
[10:33:29.679]   ..$ outfile         : chr "/dev/null"
[10:33:29.679]   ..$ renice          : int NA
[10:33:29.679]   ..$ rshcmd          : NULL
[10:33:29.679]   ..$ user            : NULL
[10:33:29.679]   ..$ revtunnel       : logi NA
[10:33:29.679]   ..$ rshlogfile      : NULL
[10:33:29.679]   ..$ rshopts         : NULL
[10:33:29.679]   ..$ rank            : int 1
[10:33:29.679]   ..$ manual          : logi FALSE
[10:33:29.679]   ..$ dryrun          : logi FALSE
[10:33:29.679]   ..$ quiet           : logi FALSE
[10:33:29.679]   ..$ setup_strategy  : chr "parallel"
[10:33:29.679]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:33:29.698] [local output] System call to launch all workers:
[10:33:29.698] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpJCh4Dg/worker.rank=1.parallelly.parent=85675.14eabf90c2c8.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11441 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:33:29.698] [local output] Starting PSOCK main server
[10:33:29.700] [local output] Workers launched
[10:33:29.700] [local output] Waiting for workers to connect back
[10:33:29.700]  - [local output] 0 workers out of 2 ready
[10:33:29.948]  - [local output] 0 workers out of 2 ready
[10:33:29.948]  - [local output] 1 workers out of 2 ready
[10:33:29.949]  - [local output] 1 workers out of 2 ready
[10:33:29.949]  - [local output] 2 workers out of 2 ready
[10:33:29.949] [local output] Launching of workers completed
[10:33:29.950] [local output] Collecting session information from workers
[10:33:29.950] [local output]  - Worker #1 of 2
[10:33:29.951] [local output]  - Worker #2 of 2
[10:33:29.951] [local output] makeClusterPSOCK() ... done
> print(workers)
Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.3.3 (2024-02-29), platform x86_64-pc-linux-gnu)
> plan(cluster, workers = workers)
[10:33:29.955] plan(): Setting new future strategy stack:
[10:33:29.955] List of future strategies:
[10:33:29.955] 1. cluster:
[10:33:29.955]    - args: function (..., workers = "<Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.3.3 (2024-02-29), platform x86_64-pc-linux-gnu)>", envir = parent.frame())
[10:33:29.955]    - tweaked: TRUE
[10:33:29.955]    - call: plan(cluster, workers = workers)
[10:33:29.957] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:33:29.957] cluster:
[10:33:29.957] - args: function (..., workers = "<Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.3.3 (2024-02-29), platform x86_64-pc-linux-gnu)>", envir = parent.frame())
[10:33:29.957] - tweaked: TRUE
[10:33:29.957] - call: plan(cluster, workers = workers)
[10:33:29.959] getGlobalsAndPackages() ...
[10:33:29.959] Not searching for globals
[10:33:29.960] - globals: [0] <none>
[10:33:29.960] getGlobalsAndPackages() ... DONE
[10:33:29.972] Packages needed by the future expression (n = 0): <none>
[10:33:29.972] Packages needed by future strategies (n = 0): <none>
[10:33:29.973] {
[10:33:29.973]     {
[10:33:29.973]         {
[10:33:29.973]             ...future.startTime <- base::Sys.time()
[10:33:29.973]             {
[10:33:29.973]                 {
[10:33:29.973]                   {
[10:33:29.973]                     base::local({
[10:33:29.973]                       has_future <- base::requireNamespace("future", 
[10:33:29.973]                         quietly = TRUE)
[10:33:29.973]                       if (has_future) {
[10:33:29.973]                         ns <- base::getNamespace("future")
[10:33:29.973]                         version <- ns[[".package"]][["version"]]
[10:33:29.973]                         if (is.null(version)) 
[10:33:29.973]                           version <- utils::packageVersion("future")
[10:33:29.973]                       }
[10:33:29.973]                       else {
[10:33:29.973]                         version <- NULL
[10:33:29.973]                       }
[10:33:29.973]                       if (!has_future || version < "1.8.0") {
[10:33:29.973]                         info <- base::c(r_version = base::gsub("R version ", 
[10:33:29.973]                           "", base::R.version$version.string), 
[10:33:29.973]                           platform = base::sprintf("%s (%s-bit)", 
[10:33:29.973]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:29.973]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:29.973]                             "release", "version")], collapse = " "), 
[10:33:29.973]                           hostname = base::Sys.info()[["nodename"]])
[10:33:29.973]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:33:29.973]                           info)
[10:33:29.973]                         info <- base::paste(info, collapse = "; ")
[10:33:29.973]                         if (!has_future) {
[10:33:29.973]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:29.973]                             info)
[10:33:29.973]                         }
[10:33:29.973]                         else {
[10:33:29.973]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:29.973]                             info, version)
[10:33:29.973]                         }
[10:33:29.973]                         base::stop(msg)
[10:33:29.973]                       }
[10:33:29.973]                     })
[10:33:29.973]                   }
[10:33:29.973]                   ...future.strategy.old <- future::plan("list")
[10:33:29.973]                   options(future.plan = NULL)
[10:33:29.973]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:29.973]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:29.973]                 }
[10:33:29.973]                 ...future.workdir <- getwd()
[10:33:29.973]             }
[10:33:29.973]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:29.973]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:29.973]         }
[10:33:29.973]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:29.973]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:29.973]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:29.973]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:29.973]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:29.973]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:29.973]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:29.973]             base::names(...future.oldOptions))
[10:33:29.973]     }
[10:33:29.973]     if (FALSE) {
[10:33:29.973]     }
[10:33:29.973]     else {
[10:33:29.973]         if (TRUE) {
[10:33:29.973]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:29.973]                 open = "w")
[10:33:29.973]         }
[10:33:29.973]         else {
[10:33:29.973]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:29.973]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:29.973]         }
[10:33:29.973]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:29.973]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:29.973]             base::sink(type = "output", split = FALSE)
[10:33:29.973]             base::close(...future.stdout)
[10:33:29.973]         }, add = TRUE)
[10:33:29.973]     }
[10:33:29.973]     ...future.frame <- base::sys.nframe()
[10:33:29.973]     ...future.conditions <- base::list()
[10:33:29.973]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:29.973]     if (FALSE) {
[10:33:29.973]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:29.973]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:29.973]     }
[10:33:29.973]     ...future.result <- base::tryCatch({
[10:33:29.973]         base::withCallingHandlers({
[10:33:29.973]             ...future.value <- base::withVisible(base::local({
[10:33:29.973]                 ...future.makeSendCondition <- base::local({
[10:33:29.973]                   sendCondition <- NULL
[10:33:29.973]                   function(frame = 1L) {
[10:33:29.973]                     if (is.function(sendCondition)) 
[10:33:29.973]                       return(sendCondition)
[10:33:29.973]                     ns <- getNamespace("parallel")
[10:33:29.973]                     if (exists("sendData", mode = "function", 
[10:33:29.973]                       envir = ns)) {
[10:33:29.973]                       parallel_sendData <- get("sendData", mode = "function", 
[10:33:29.973]                         envir = ns)
[10:33:29.973]                       envir <- sys.frame(frame)
[10:33:29.973]                       master <- NULL
[10:33:29.973]                       while (!identical(envir, .GlobalEnv) && 
[10:33:29.973]                         !identical(envir, emptyenv())) {
[10:33:29.973]                         if (exists("master", mode = "list", envir = envir, 
[10:33:29.973]                           inherits = FALSE)) {
[10:33:29.973]                           master <- get("master", mode = "list", 
[10:33:29.973]                             envir = envir, inherits = FALSE)
[10:33:29.973]                           if (inherits(master, c("SOCKnode", 
[10:33:29.973]                             "SOCK0node"))) {
[10:33:29.973]                             sendCondition <<- function(cond) {
[10:33:29.973]                               data <- list(type = "VALUE", value = cond, 
[10:33:29.973]                                 success = TRUE)
[10:33:29.973]                               parallel_sendData(master, data)
[10:33:29.973]                             }
[10:33:29.973]                             return(sendCondition)
[10:33:29.973]                           }
[10:33:29.973]                         }
[10:33:29.973]                         frame <- frame + 1L
[10:33:29.973]                         envir <- sys.frame(frame)
[10:33:29.973]                       }
[10:33:29.973]                     }
[10:33:29.973]                     sendCondition <<- function(cond) NULL
[10:33:29.973]                   }
[10:33:29.973]                 })
[10:33:29.973]                 withCallingHandlers({
[10:33:29.973]                   NA
[10:33:29.973]                 }, immediateCondition = function(cond) {
[10:33:29.973]                   sendCondition <- ...future.makeSendCondition()
[10:33:29.973]                   sendCondition(cond)
[10:33:29.973]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:29.973]                   {
[10:33:29.973]                     inherits <- base::inherits
[10:33:29.973]                     invokeRestart <- base::invokeRestart
[10:33:29.973]                     is.null <- base::is.null
[10:33:29.973]                     muffled <- FALSE
[10:33:29.973]                     if (inherits(cond, "message")) {
[10:33:29.973]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:29.973]                       if (muffled) 
[10:33:29.973]                         invokeRestart("muffleMessage")
[10:33:29.973]                     }
[10:33:29.973]                     else if (inherits(cond, "warning")) {
[10:33:29.973]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:29.973]                       if (muffled) 
[10:33:29.973]                         invokeRestart("muffleWarning")
[10:33:29.973]                     }
[10:33:29.973]                     else if (inherits(cond, "condition")) {
[10:33:29.973]                       if (!is.null(pattern)) {
[10:33:29.973]                         computeRestarts <- base::computeRestarts
[10:33:29.973]                         grepl <- base::grepl
[10:33:29.973]                         restarts <- computeRestarts(cond)
[10:33:29.973]                         for (restart in restarts) {
[10:33:29.973]                           name <- restart$name
[10:33:29.973]                           if (is.null(name)) 
[10:33:29.973]                             next
[10:33:29.973]                           if (!grepl(pattern, name)) 
[10:33:29.973]                             next
[10:33:29.973]                           invokeRestart(restart)
[10:33:29.973]                           muffled <- TRUE
[10:33:29.973]                           break
[10:33:29.973]                         }
[10:33:29.973]                       }
[10:33:29.973]                     }
[10:33:29.973]                     invisible(muffled)
[10:33:29.973]                   }
[10:33:29.973]                   muffleCondition(cond)
[10:33:29.973]                 })
[10:33:29.973]             }))
[10:33:29.973]             future::FutureResult(value = ...future.value$value, 
[10:33:29.973]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:29.973]                   ...future.rng), globalenv = if (FALSE) 
[10:33:29.973]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:29.973]                     ...future.globalenv.names))
[10:33:29.973]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:29.973]         }, condition = base::local({
[10:33:29.973]             c <- base::c
[10:33:29.973]             inherits <- base::inherits
[10:33:29.973]             invokeRestart <- base::invokeRestart
[10:33:29.973]             length <- base::length
[10:33:29.973]             list <- base::list
[10:33:29.973]             seq.int <- base::seq.int
[10:33:29.973]             signalCondition <- base::signalCondition
[10:33:29.973]             sys.calls <- base::sys.calls
[10:33:29.973]             `[[` <- base::`[[`
[10:33:29.973]             `+` <- base::`+`
[10:33:29.973]             `<<-` <- base::`<<-`
[10:33:29.973]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:29.973]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:29.973]                   3L)]
[10:33:29.973]             }
[10:33:29.973]             function(cond) {
[10:33:29.973]                 is_error <- inherits(cond, "error")
[10:33:29.973]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:29.973]                   NULL)
[10:33:29.973]                 if (is_error) {
[10:33:29.973]                   sessionInformation <- function() {
[10:33:29.973]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:29.973]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:29.973]                       search = base::search(), system = base::Sys.info())
[10:33:29.973]                   }
[10:33:29.973]                   ...future.conditions[[length(...future.conditions) + 
[10:33:29.973]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:29.973]                     cond$call), session = sessionInformation(), 
[10:33:29.973]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:29.973]                   signalCondition(cond)
[10:33:29.973]                 }
[10:33:29.973]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:29.973]                 "immediateCondition"))) {
[10:33:29.973]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:29.973]                   ...future.conditions[[length(...future.conditions) + 
[10:33:29.973]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:29.973]                   if (TRUE && !signal) {
[10:33:29.973]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:29.973]                     {
[10:33:29.973]                       inherits <- base::inherits
[10:33:29.973]                       invokeRestart <- base::invokeRestart
[10:33:29.973]                       is.null <- base::is.null
[10:33:29.973]                       muffled <- FALSE
[10:33:29.973]                       if (inherits(cond, "message")) {
[10:33:29.973]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:29.973]                         if (muffled) 
[10:33:29.973]                           invokeRestart("muffleMessage")
[10:33:29.973]                       }
[10:33:29.973]                       else if (inherits(cond, "warning")) {
[10:33:29.973]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:29.973]                         if (muffled) 
[10:33:29.973]                           invokeRestart("muffleWarning")
[10:33:29.973]                       }
[10:33:29.973]                       else if (inherits(cond, "condition")) {
[10:33:29.973]                         if (!is.null(pattern)) {
[10:33:29.973]                           computeRestarts <- base::computeRestarts
[10:33:29.973]                           grepl <- base::grepl
[10:33:29.973]                           restarts <- computeRestarts(cond)
[10:33:29.973]                           for (restart in restarts) {
[10:33:29.973]                             name <- restart$name
[10:33:29.973]                             if (is.null(name)) 
[10:33:29.973]                               next
[10:33:29.973]                             if (!grepl(pattern, name)) 
[10:33:29.973]                               next
[10:33:29.973]                             invokeRestart(restart)
[10:33:29.973]                             muffled <- TRUE
[10:33:29.973]                             break
[10:33:29.973]                           }
[10:33:29.973]                         }
[10:33:29.973]                       }
[10:33:29.973]                       invisible(muffled)
[10:33:29.973]                     }
[10:33:29.973]                     muffleCondition(cond, pattern = "^muffle")
[10:33:29.973]                   }
[10:33:29.973]                 }
[10:33:29.973]                 else {
[10:33:29.973]                   if (TRUE) {
[10:33:29.973]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:29.973]                     {
[10:33:29.973]                       inherits <- base::inherits
[10:33:29.973]                       invokeRestart <- base::invokeRestart
[10:33:29.973]                       is.null <- base::is.null
[10:33:29.973]                       muffled <- FALSE
[10:33:29.973]                       if (inherits(cond, "message")) {
[10:33:29.973]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:29.973]                         if (muffled) 
[10:33:29.973]                           invokeRestart("muffleMessage")
[10:33:29.973]                       }
[10:33:29.973]                       else if (inherits(cond, "warning")) {
[10:33:29.973]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:29.973]                         if (muffled) 
[10:33:29.973]                           invokeRestart("muffleWarning")
[10:33:29.973]                       }
[10:33:29.973]                       else if (inherits(cond, "condition")) {
[10:33:29.973]                         if (!is.null(pattern)) {
[10:33:29.973]                           computeRestarts <- base::computeRestarts
[10:33:29.973]                           grepl <- base::grepl
[10:33:29.973]                           restarts <- computeRestarts(cond)
[10:33:29.973]                           for (restart in restarts) {
[10:33:29.973]                             name <- restart$name
[10:33:29.973]                             if (is.null(name)) 
[10:33:29.973]                               next
[10:33:29.973]                             if (!grepl(pattern, name)) 
[10:33:29.973]                               next
[10:33:29.973]                             invokeRestart(restart)
[10:33:29.973]                             muffled <- TRUE
[10:33:29.973]                             break
[10:33:29.973]                           }
[10:33:29.973]                         }
[10:33:29.973]                       }
[10:33:29.973]                       invisible(muffled)
[10:33:29.973]                     }
[10:33:29.973]                     muffleCondition(cond, pattern = "^muffle")
[10:33:29.973]                   }
[10:33:29.973]                 }
[10:33:29.973]             }
[10:33:29.973]         }))
[10:33:29.973]     }, error = function(ex) {
[10:33:29.973]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:29.973]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:29.973]                 ...future.rng), started = ...future.startTime, 
[10:33:29.973]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:29.973]             version = "1.8"), class = "FutureResult")
[10:33:29.973]     }, finally = {
[10:33:29.973]         if (!identical(...future.workdir, getwd())) 
[10:33:29.973]             setwd(...future.workdir)
[10:33:29.973]         {
[10:33:29.973]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:29.973]                 ...future.oldOptions$nwarnings <- NULL
[10:33:29.973]             }
[10:33:29.973]             base::options(...future.oldOptions)
[10:33:29.973]             if (.Platform$OS.type == "windows") {
[10:33:29.973]                 old_names <- names(...future.oldEnvVars)
[10:33:29.973]                 envs <- base::Sys.getenv()
[10:33:29.973]                 names <- names(envs)
[10:33:29.973]                 common <- intersect(names, old_names)
[10:33:29.973]                 added <- setdiff(names, old_names)
[10:33:29.973]                 removed <- setdiff(old_names, names)
[10:33:29.973]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:29.973]                   envs[common]]
[10:33:29.973]                 NAMES <- toupper(changed)
[10:33:29.973]                 args <- list()
[10:33:29.973]                 for (kk in seq_along(NAMES)) {
[10:33:29.973]                   name <- changed[[kk]]
[10:33:29.973]                   NAME <- NAMES[[kk]]
[10:33:29.973]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:29.973]                     next
[10:33:29.973]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:29.973]                 }
[10:33:29.973]                 NAMES <- toupper(added)
[10:33:29.973]                 for (kk in seq_along(NAMES)) {
[10:33:29.973]                   name <- added[[kk]]
[10:33:29.973]                   NAME <- NAMES[[kk]]
[10:33:29.973]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:29.973]                     next
[10:33:29.973]                   args[[name]] <- ""
[10:33:29.973]                 }
[10:33:29.973]                 NAMES <- toupper(removed)
[10:33:29.973]                 for (kk in seq_along(NAMES)) {
[10:33:29.973]                   name <- removed[[kk]]
[10:33:29.973]                   NAME <- NAMES[[kk]]
[10:33:29.973]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:29.973]                     next
[10:33:29.973]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:29.973]                 }
[10:33:29.973]                 if (length(args) > 0) 
[10:33:29.973]                   base::do.call(base::Sys.setenv, args = args)
[10:33:29.973]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:29.973]             }
[10:33:29.973]             else {
[10:33:29.973]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:29.973]             }
[10:33:29.973]             {
[10:33:29.973]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:29.973]                   0L) {
[10:33:29.973]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:29.973]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:29.973]                   base::options(opts)
[10:33:29.973]                 }
[10:33:29.973]                 {
[10:33:29.973]                   NULL
[10:33:29.973]                   options(future.plan = NULL)
[10:33:29.973]                   if (is.na(NA_character_)) 
[10:33:29.973]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:29.973]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:29.973]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:29.973]                     .init = FALSE)
[10:33:29.973]                 }
[10:33:29.973]             }
[10:33:29.973]         }
[10:33:29.973]     })
[10:33:29.973]     if (TRUE) {
[10:33:29.973]         base::sink(type = "output", split = FALSE)
[10:33:29.973]         if (TRUE) {
[10:33:29.973]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:29.973]         }
[10:33:29.973]         else {
[10:33:29.973]             ...future.result["stdout"] <- base::list(NULL)
[10:33:29.973]         }
[10:33:29.973]         base::close(...future.stdout)
[10:33:29.973]         ...future.stdout <- NULL
[10:33:29.973]     }
[10:33:29.973]     ...future.result$conditions <- ...future.conditions
[10:33:29.973]     ...future.result$finished <- base::Sys.time()
[10:33:29.973]     ...future.result
[10:33:29.973] }
[10:33:30.029] ClusterFuture started
[10:33:30.029] result() for ClusterFuture ...
[10:33:30.029] receiveMessageFromWorker() for ClusterFuture ...
[10:33:30.029] - Validating connection of ClusterFuture
[10:33:30.064] - received message: FutureResult
[10:33:30.064] - Received FutureResult
[10:33:30.064] - Erased future from FutureRegistry
[10:33:30.064] result() for ClusterFuture ...
[10:33:30.064] - result already collected: FutureResult
[10:33:30.065] result() for ClusterFuture ... done
[10:33:30.065] receiveMessageFromWorker() for ClusterFuture ... done
[10:33:30.065] result() for ClusterFuture ... done
[10:33:30.065] result() for ClusterFuture ...
[10:33:30.065] - result already collected: FutureResult
[10:33:30.065] result() for ClusterFuture ... done
[10:33:30.065] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:33:30.065] plan(): nbrOfWorkers() = 2
> n <- nbrOfWorkers()
> message(sprintf("nbrOfWorkers: %g", n))
nbrOfWorkers: 2
> stopifnot(n == length(workers))
> parallel::stopCluster(workers)
> 
> message("*** nbrOfWorkers() ... DONE")
*** nbrOfWorkers() ... DONE
> 
> source("incl/end.R")
[10:33:30.067] plan(): Setting new future strategy stack:
[10:33:30.067] List of future strategies:
[10:33:30.067] 1. FutureStrategy:
[10:33:30.067]    - args: function (..., envir = parent.frame())
[10:33:30.067]    - tweaked: FALSE
[10:33:30.067]    - call: future::plan(oplan)
[10:33:30.067] plan(): nbrOfWorkers() = 1
> 
