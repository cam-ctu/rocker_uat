
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:37:11.906] plan(): Setting new future strategy stack:
[13:37:11.907] List of future strategies:
[13:37:11.907] 1. sequential:
[13:37:11.907]    - args: function (..., envir = parent.frame())
[13:37:11.907]    - tweaked: FALSE
[13:37:11.907]    - call: future::plan("sequential")
[13:37:11.920] plan(): nbrOfWorkers() = 1
> 
> message("*** nbrOfWorkers() ...")
*** nbrOfWorkers() ...
> 
> strategies <- c("sequential")
> for (strategy in strategies) {
+   message("Type of future: ", strategy)
+ 
+   evaluator <- get(strategy, mode = "function")
+   n <- nbrOfWorkers(evaluator)
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == 1L)
+ 
+   plan(strategy)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == 1L)
+ 
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == 1L)
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+   stopifnot(n == 0L)
+ } ## for (strategy ...)
Type of future: sequential
nbrOfWorkers: 1
[13:37:11.938] plan(): Setting new future strategy stack:
[13:37:11.938] List of future strategies:
[13:37:11.938] 1. sequential:
[13:37:11.938]    - args: function (..., envir = parent.frame())
[13:37:11.938]    - tweaked: FALSE
[13:37:11.938]    - call: plan(strategy)
[13:37:11.948] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
nbrOfFreeWorkers: 1
nbrOfFreeWorkers(background = TRUE): 0
> 
> 
> strategies <- c("cluster", "multisession", "multicore")
> strategies <- intersect(strategies, supportedStrategies())
> cores <- availableCores()
> message("Number of available cores: ", cores)
Number of available cores: 2
> workers <- availableWorkers()
> nworkers <- length(workers)
> message(sprintf("Available workers: [n = %d] %s", nworkers, hpaste(sQuote(workers))))
Available workers: [n = 2] ‘localhost’, ‘localhost’
> 
> allButOneCore <- function() max(1L, future::availableCores() - 1L)
> allButOneWorker <- function() {
+   w <- future::availableWorkers()
+   if (length(w) > 1) w[-1] else w
+ }
> 
> for (strategy in strategies) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+ 
+   message("Type of future: ", strategy)
+ 
+   evaluator <- get(strategy, mode = "function")
+   n <- nbrOfWorkers(evaluator)
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == nworkers)
+ 
+   plan(strategy)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == nworkers)
+ 
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == nworkers)
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+ # FIXME  stopifnot(n == 0L)
+ 
+   plan(strategy, workers = 1L)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+ # FIXME  stopifnot(n == 0L)
+ 
+   plan(strategy, workers = allButOneCore)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+ # FIXME  stopifnot(n == 0L)
+ } ## for (strategy ...)
Type of future: multisession
nbrOfWorkers: 2
[13:37:11.979] plan(): Setting new future strategy stack:
[13:37:11.979] List of future strategies:
[13:37:11.979] 1. multisession:
[13:37:11.979]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:37:11.979]    - tweaked: FALSE
[13:37:11.979]    - call: plan(strategy)
[13:37:11.980] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:37:11.980] multisession:
[13:37:11.980] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:37:11.980] - tweaked: FALSE
[13:37:11.980] - call: plan(strategy)
[13:37:11.986] getGlobalsAndPackages() ...
[13:37:11.986] Not searching for globals
[13:37:11.986] - globals: [0] <none>
[13:37:11.986] getGlobalsAndPackages() ... DONE
[13:37:11.987] [local output] makeClusterPSOCK() ...
[13:37:12.018] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:37:12.019] [local output] Base port: 11629
[13:37:12.019] [local output] Getting setup options for 2 cluster nodes ...
[13:37:12.019] [local output]  - Node 1 of 2 ...
[13:37:12.020] [local output] localMachine=TRUE => revtunnel=FALSE

[13:37:12.020] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmparxzHK/worker.rank=1.parallelly.parent=86513.151f1433b2b1f.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmparxzHK/worker.rank=1.parallelly.parent=86513.151f1433b2b1f.pid")'’
[13:37:12.210] - Possible to infer worker's PID: TRUE
[13:37:12.210] [local output] Rscript port: 11629

[13:37:12.211] [local output]  - Node 2 of 2 ...
[13:37:12.211] [local output] localMachine=TRUE => revtunnel=FALSE

[13:37:12.212] [local output] Rscript port: 11629

[13:37:12.212] [local output] Getting setup options for 2 cluster nodes ... done
[13:37:12.212] [local output]  - Parallel setup requested for some PSOCK nodes
[13:37:12.213] [local output] Setting up PSOCK nodes in parallel
[13:37:12.213] List of 36
[13:37:12.213]  $ worker          : chr "localhost"
[13:37:12.213]   ..- attr(*, "localhost")= logi TRUE
[13:37:12.213]  $ master          : chr "localhost"
[13:37:12.213]  $ port            : int 11629
[13:37:12.213]  $ connectTimeout  : num 120
[13:37:12.213]  $ timeout         : num 2592000
[13:37:12.213]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:37:12.213]  $ homogeneous     : logi TRUE
[13:37:12.213]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:37:12.213]  $ rscript_envs    : NULL
[13:37:12.213]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:37:12.213]  $ rscript_startup : NULL
[13:37:12.213]  $ rscript_sh      : chr "sh"
[13:37:12.213]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:37:12.213]  $ methods         : logi TRUE
[13:37:12.213]  $ socketOptions   : chr "no-delay"
[13:37:12.213]  $ useXDR          : logi FALSE
[13:37:12.213]  $ outfile         : chr "/dev/null"
[13:37:12.213]  $ renice          : int NA
[13:37:12.213]  $ rshcmd          : NULL
[13:37:12.213]  $ user            : chr(0) 
[13:37:12.213]  $ revtunnel       : logi FALSE
[13:37:12.213]  $ rshlogfile      : NULL
[13:37:12.213]  $ rshopts         : chr(0) 
[13:37:12.213]  $ rank            : int 1
[13:37:12.213]  $ manual          : logi FALSE
[13:37:12.213]  $ dryrun          : logi FALSE
[13:37:12.213]  $ quiet           : logi FALSE
[13:37:12.213]  $ setup_strategy  : chr "parallel"
[13:37:12.213]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:37:12.213]  $ pidfile         : chr "/tmp/RtmparxzHK/worker.rank=1.parallelly.parent=86513.151f1433b2b1f.pid"
[13:37:12.213]  $ rshcmd_label    : NULL
[13:37:12.213]  $ rsh_call        : NULL
[13:37:12.213]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:37:12.213]  $ localMachine    : logi TRUE
[13:37:12.213]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:37:12.213]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:37:12.213]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:37:12.213]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:37:12.213]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:37:12.213]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:37:12.213]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:37:12.213]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:37:12.213]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:37:12.213]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:37:12.213]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:37:12.213]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:37:12.213]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:37:12.213]  $ arguments       :List of 28
[13:37:12.213]   ..$ worker          : chr "localhost"
[13:37:12.213]   ..$ master          : NULL
[13:37:12.213]   ..$ port            : int 11629
[13:37:12.213]   ..$ connectTimeout  : num 120
[13:37:12.213]   ..$ timeout         : num 2592000
[13:37:12.213]   ..$ rscript         : NULL
[13:37:12.213]   ..$ homogeneous     : NULL
[13:37:12.213]   ..$ rscript_args    : NULL
[13:37:12.213]   ..$ rscript_envs    : NULL
[13:37:12.213]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:37:12.213]   ..$ rscript_startup : NULL
[13:37:12.213]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:37:12.213]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:37:12.213]   ..$ methods         : logi TRUE
[13:37:12.213]   ..$ socketOptions   : chr "no-delay"
[13:37:12.213]   ..$ useXDR          : logi FALSE
[13:37:12.213]   ..$ outfile         : chr "/dev/null"
[13:37:12.213]   ..$ renice          : int NA
[13:37:12.213]   ..$ rshcmd          : NULL
[13:37:12.213]   ..$ user            : NULL
[13:37:12.213]   ..$ revtunnel       : logi NA
[13:37:12.213]   ..$ rshlogfile      : NULL
[13:37:12.213]   ..$ rshopts         : NULL
[13:37:12.213]   ..$ rank            : int 1
[13:37:12.213]   ..$ manual          : logi FALSE
[13:37:12.213]   ..$ dryrun          : logi FALSE
[13:37:12.213]   ..$ quiet           : logi FALSE
[13:37:12.213]   ..$ setup_strategy  : chr "parallel"
[13:37:12.213]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:37:12.232] [local output] System call to launch all workers:
[13:37:12.232] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmparxzHK/worker.rank=1.parallelly.parent=86513.151f1433b2b1f.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11629 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:37:12.232] [local output] Starting PSOCK main server
[13:37:12.238] [local output] Workers launched
[13:37:12.238] [local output] Waiting for workers to connect back
[13:37:12.238]  - [local output] 0 workers out of 2 ready
[13:37:12.486]  - [local output] 0 workers out of 2 ready
[13:37:12.487]  - [local output] 1 workers out of 2 ready
[13:37:12.498]  - [local output] 1 workers out of 2 ready
[13:37:12.498]  - [local output] 2 workers out of 2 ready
[13:37:12.499] [local output] Launching of workers completed
[13:37:12.499] [local output] Collecting session information from workers
[13:37:12.500] [local output]  - Worker #1 of 2
[13:37:12.500] [local output]  - Worker #2 of 2
[13:37:12.500] [local output] makeClusterPSOCK() ... done
[13:37:12.513] Packages needed by the future expression (n = 0): <none>
[13:37:12.513] Packages needed by future strategies (n = 0): <none>
[13:37:12.514] {
[13:37:12.514]     {
[13:37:12.514]         {
[13:37:12.514]             ...future.startTime <- base::Sys.time()
[13:37:12.514]             {
[13:37:12.514]                 {
[13:37:12.514]                   {
[13:37:12.514]                     {
[13:37:12.514]                       base::local({
[13:37:12.514]                         has_future <- base::requireNamespace("future", 
[13:37:12.514]                           quietly = TRUE)
[13:37:12.514]                         if (has_future) {
[13:37:12.514]                           ns <- base::getNamespace("future")
[13:37:12.514]                           version <- ns[[".package"]][["version"]]
[13:37:12.514]                           if (is.null(version)) 
[13:37:12.514]                             version <- utils::packageVersion("future")
[13:37:12.514]                         }
[13:37:12.514]                         else {
[13:37:12.514]                           version <- NULL
[13:37:12.514]                         }
[13:37:12.514]                         if (!has_future || version < "1.8.0") {
[13:37:12.514]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:12.514]                             "", base::R.version$version.string), 
[13:37:12.514]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:12.514]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:12.514]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:12.514]                               "release", "version")], collapse = " "), 
[13:37:12.514]                             hostname = base::Sys.info()[["nodename"]])
[13:37:12.514]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:12.514]                             info)
[13:37:12.514]                           info <- base::paste(info, collapse = "; ")
[13:37:12.514]                           if (!has_future) {
[13:37:12.514]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:12.514]                               info)
[13:37:12.514]                           }
[13:37:12.514]                           else {
[13:37:12.514]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:12.514]                               info, version)
[13:37:12.514]                           }
[13:37:12.514]                           base::stop(msg)
[13:37:12.514]                         }
[13:37:12.514]                       })
[13:37:12.514]                     }
[13:37:12.514]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:12.514]                     base::options(mc.cores = 1L)
[13:37:12.514]                   }
[13:37:12.514]                   ...future.strategy.old <- future::plan("list")
[13:37:12.514]                   options(future.plan = NULL)
[13:37:12.514]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:12.514]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:12.514]                 }
[13:37:12.514]                 ...future.workdir <- getwd()
[13:37:12.514]             }
[13:37:12.514]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:12.514]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:12.514]         }
[13:37:12.514]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:12.514]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:12.514]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:12.514]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:12.514]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:12.514]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:12.514]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:12.514]             base::names(...future.oldOptions))
[13:37:12.514]     }
[13:37:12.514]     if (FALSE) {
[13:37:12.514]     }
[13:37:12.514]     else {
[13:37:12.514]         if (TRUE) {
[13:37:12.514]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:12.514]                 open = "w")
[13:37:12.514]         }
[13:37:12.514]         else {
[13:37:12.514]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:12.514]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:12.514]         }
[13:37:12.514]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:12.514]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:12.514]             base::sink(type = "output", split = FALSE)
[13:37:12.514]             base::close(...future.stdout)
[13:37:12.514]         }, add = TRUE)
[13:37:12.514]     }
[13:37:12.514]     ...future.frame <- base::sys.nframe()
[13:37:12.514]     ...future.conditions <- base::list()
[13:37:12.514]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:12.514]     if (FALSE) {
[13:37:12.514]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:12.514]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:12.514]     }
[13:37:12.514]     ...future.result <- base::tryCatch({
[13:37:12.514]         base::withCallingHandlers({
[13:37:12.514]             ...future.value <- base::withVisible(base::local({
[13:37:12.514]                 ...future.makeSendCondition <- base::local({
[13:37:12.514]                   sendCondition <- NULL
[13:37:12.514]                   function(frame = 1L) {
[13:37:12.514]                     if (is.function(sendCondition)) 
[13:37:12.514]                       return(sendCondition)
[13:37:12.514]                     ns <- getNamespace("parallel")
[13:37:12.514]                     if (exists("sendData", mode = "function", 
[13:37:12.514]                       envir = ns)) {
[13:37:12.514]                       parallel_sendData <- get("sendData", mode = "function", 
[13:37:12.514]                         envir = ns)
[13:37:12.514]                       envir <- sys.frame(frame)
[13:37:12.514]                       master <- NULL
[13:37:12.514]                       while (!identical(envir, .GlobalEnv) && 
[13:37:12.514]                         !identical(envir, emptyenv())) {
[13:37:12.514]                         if (exists("master", mode = "list", envir = envir, 
[13:37:12.514]                           inherits = FALSE)) {
[13:37:12.514]                           master <- get("master", mode = "list", 
[13:37:12.514]                             envir = envir, inherits = FALSE)
[13:37:12.514]                           if (inherits(master, c("SOCKnode", 
[13:37:12.514]                             "SOCK0node"))) {
[13:37:12.514]                             sendCondition <<- function(cond) {
[13:37:12.514]                               data <- list(type = "VALUE", value = cond, 
[13:37:12.514]                                 success = TRUE)
[13:37:12.514]                               parallel_sendData(master, data)
[13:37:12.514]                             }
[13:37:12.514]                             return(sendCondition)
[13:37:12.514]                           }
[13:37:12.514]                         }
[13:37:12.514]                         frame <- frame + 1L
[13:37:12.514]                         envir <- sys.frame(frame)
[13:37:12.514]                       }
[13:37:12.514]                     }
[13:37:12.514]                     sendCondition <<- function(cond) NULL
[13:37:12.514]                   }
[13:37:12.514]                 })
[13:37:12.514]                 withCallingHandlers({
[13:37:12.514]                   NA
[13:37:12.514]                 }, immediateCondition = function(cond) {
[13:37:12.514]                   sendCondition <- ...future.makeSendCondition()
[13:37:12.514]                   sendCondition(cond)
[13:37:12.514]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:12.514]                   {
[13:37:12.514]                     inherits <- base::inherits
[13:37:12.514]                     invokeRestart <- base::invokeRestart
[13:37:12.514]                     is.null <- base::is.null
[13:37:12.514]                     muffled <- FALSE
[13:37:12.514]                     if (inherits(cond, "message")) {
[13:37:12.514]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:12.514]                       if (muffled) 
[13:37:12.514]                         invokeRestart("muffleMessage")
[13:37:12.514]                     }
[13:37:12.514]                     else if (inherits(cond, "warning")) {
[13:37:12.514]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:12.514]                       if (muffled) 
[13:37:12.514]                         invokeRestart("muffleWarning")
[13:37:12.514]                     }
[13:37:12.514]                     else if (inherits(cond, "condition")) {
[13:37:12.514]                       if (!is.null(pattern)) {
[13:37:12.514]                         computeRestarts <- base::computeRestarts
[13:37:12.514]                         grepl <- base::grepl
[13:37:12.514]                         restarts <- computeRestarts(cond)
[13:37:12.514]                         for (restart in restarts) {
[13:37:12.514]                           name <- restart$name
[13:37:12.514]                           if (is.null(name)) 
[13:37:12.514]                             next
[13:37:12.514]                           if (!grepl(pattern, name)) 
[13:37:12.514]                             next
[13:37:12.514]                           invokeRestart(restart)
[13:37:12.514]                           muffled <- TRUE
[13:37:12.514]                           break
[13:37:12.514]                         }
[13:37:12.514]                       }
[13:37:12.514]                     }
[13:37:12.514]                     invisible(muffled)
[13:37:12.514]                   }
[13:37:12.514]                   muffleCondition(cond)
[13:37:12.514]                 })
[13:37:12.514]             }))
[13:37:12.514]             future::FutureResult(value = ...future.value$value, 
[13:37:12.514]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:12.514]                   ...future.rng), globalenv = if (FALSE) 
[13:37:12.514]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:12.514]                     ...future.globalenv.names))
[13:37:12.514]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:12.514]         }, condition = base::local({
[13:37:12.514]             c <- base::c
[13:37:12.514]             inherits <- base::inherits
[13:37:12.514]             invokeRestart <- base::invokeRestart
[13:37:12.514]             length <- base::length
[13:37:12.514]             list <- base::list
[13:37:12.514]             seq.int <- base::seq.int
[13:37:12.514]             signalCondition <- base::signalCondition
[13:37:12.514]             sys.calls <- base::sys.calls
[13:37:12.514]             `[[` <- base::`[[`
[13:37:12.514]             `+` <- base::`+`
[13:37:12.514]             `<<-` <- base::`<<-`
[13:37:12.514]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:12.514]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:12.514]                   3L)]
[13:37:12.514]             }
[13:37:12.514]             function(cond) {
[13:37:12.514]                 is_error <- inherits(cond, "error")
[13:37:12.514]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:12.514]                   NULL)
[13:37:12.514]                 if (is_error) {
[13:37:12.514]                   sessionInformation <- function() {
[13:37:12.514]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:12.514]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:12.514]                       search = base::search(), system = base::Sys.info())
[13:37:12.514]                   }
[13:37:12.514]                   ...future.conditions[[length(...future.conditions) + 
[13:37:12.514]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:12.514]                     cond$call), session = sessionInformation(), 
[13:37:12.514]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:12.514]                   signalCondition(cond)
[13:37:12.514]                 }
[13:37:12.514]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:12.514]                 "immediateCondition"))) {
[13:37:12.514]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:12.514]                   ...future.conditions[[length(...future.conditions) + 
[13:37:12.514]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:12.514]                   if (TRUE && !signal) {
[13:37:12.514]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:12.514]                     {
[13:37:12.514]                       inherits <- base::inherits
[13:37:12.514]                       invokeRestart <- base::invokeRestart
[13:37:12.514]                       is.null <- base::is.null
[13:37:12.514]                       muffled <- FALSE
[13:37:12.514]                       if (inherits(cond, "message")) {
[13:37:12.514]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:12.514]                         if (muffled) 
[13:37:12.514]                           invokeRestart("muffleMessage")
[13:37:12.514]                       }
[13:37:12.514]                       else if (inherits(cond, "warning")) {
[13:37:12.514]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:12.514]                         if (muffled) 
[13:37:12.514]                           invokeRestart("muffleWarning")
[13:37:12.514]                       }
[13:37:12.514]                       else if (inherits(cond, "condition")) {
[13:37:12.514]                         if (!is.null(pattern)) {
[13:37:12.514]                           computeRestarts <- base::computeRestarts
[13:37:12.514]                           grepl <- base::grepl
[13:37:12.514]                           restarts <- computeRestarts(cond)
[13:37:12.514]                           for (restart in restarts) {
[13:37:12.514]                             name <- restart$name
[13:37:12.514]                             if (is.null(name)) 
[13:37:12.514]                               next
[13:37:12.514]                             if (!grepl(pattern, name)) 
[13:37:12.514]                               next
[13:37:12.514]                             invokeRestart(restart)
[13:37:12.514]                             muffled <- TRUE
[13:37:12.514]                             break
[13:37:12.514]                           }
[13:37:12.514]                         }
[13:37:12.514]                       }
[13:37:12.514]                       invisible(muffled)
[13:37:12.514]                     }
[13:37:12.514]                     muffleCondition(cond, pattern = "^muffle")
[13:37:12.514]                   }
[13:37:12.514]                 }
[13:37:12.514]                 else {
[13:37:12.514]                   if (TRUE) {
[13:37:12.514]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:12.514]                     {
[13:37:12.514]                       inherits <- base::inherits
[13:37:12.514]                       invokeRestart <- base::invokeRestart
[13:37:12.514]                       is.null <- base::is.null
[13:37:12.514]                       muffled <- FALSE
[13:37:12.514]                       if (inherits(cond, "message")) {
[13:37:12.514]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:12.514]                         if (muffled) 
[13:37:12.514]                           invokeRestart("muffleMessage")
[13:37:12.514]                       }
[13:37:12.514]                       else if (inherits(cond, "warning")) {
[13:37:12.514]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:12.514]                         if (muffled) 
[13:37:12.514]                           invokeRestart("muffleWarning")
[13:37:12.514]                       }
[13:37:12.514]                       else if (inherits(cond, "condition")) {
[13:37:12.514]                         if (!is.null(pattern)) {
[13:37:12.514]                           computeRestarts <- base::computeRestarts
[13:37:12.514]                           grepl <- base::grepl
[13:37:12.514]                           restarts <- computeRestarts(cond)
[13:37:12.514]                           for (restart in restarts) {
[13:37:12.514]                             name <- restart$name
[13:37:12.514]                             if (is.null(name)) 
[13:37:12.514]                               next
[13:37:12.514]                             if (!grepl(pattern, name)) 
[13:37:12.514]                               next
[13:37:12.514]                             invokeRestart(restart)
[13:37:12.514]                             muffled <- TRUE
[13:37:12.514]                             break
[13:37:12.514]                           }
[13:37:12.514]                         }
[13:37:12.514]                       }
[13:37:12.514]                       invisible(muffled)
[13:37:12.514]                     }
[13:37:12.514]                     muffleCondition(cond, pattern = "^muffle")
[13:37:12.514]                   }
[13:37:12.514]                 }
[13:37:12.514]             }
[13:37:12.514]         }))
[13:37:12.514]     }, error = function(ex) {
[13:37:12.514]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:12.514]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:12.514]                 ...future.rng), started = ...future.startTime, 
[13:37:12.514]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:12.514]             version = "1.8"), class = "FutureResult")
[13:37:12.514]     }, finally = {
[13:37:12.514]         if (!identical(...future.workdir, getwd())) 
[13:37:12.514]             setwd(...future.workdir)
[13:37:12.514]         {
[13:37:12.514]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:12.514]                 ...future.oldOptions$nwarnings <- NULL
[13:37:12.514]             }
[13:37:12.514]             base::options(...future.oldOptions)
[13:37:12.514]             if (.Platform$OS.type == "windows") {
[13:37:12.514]                 old_names <- names(...future.oldEnvVars)
[13:37:12.514]                 envs <- base::Sys.getenv()
[13:37:12.514]                 names <- names(envs)
[13:37:12.514]                 common <- intersect(names, old_names)
[13:37:12.514]                 added <- setdiff(names, old_names)
[13:37:12.514]                 removed <- setdiff(old_names, names)
[13:37:12.514]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:12.514]                   envs[common]]
[13:37:12.514]                 NAMES <- toupper(changed)
[13:37:12.514]                 args <- list()
[13:37:12.514]                 for (kk in seq_along(NAMES)) {
[13:37:12.514]                   name <- changed[[kk]]
[13:37:12.514]                   NAME <- NAMES[[kk]]
[13:37:12.514]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:12.514]                     next
[13:37:12.514]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:12.514]                 }
[13:37:12.514]                 NAMES <- toupper(added)
[13:37:12.514]                 for (kk in seq_along(NAMES)) {
[13:37:12.514]                   name <- added[[kk]]
[13:37:12.514]                   NAME <- NAMES[[kk]]
[13:37:12.514]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:12.514]                     next
[13:37:12.514]                   args[[name]] <- ""
[13:37:12.514]                 }
[13:37:12.514]                 NAMES <- toupper(removed)
[13:37:12.514]                 for (kk in seq_along(NAMES)) {
[13:37:12.514]                   name <- removed[[kk]]
[13:37:12.514]                   NAME <- NAMES[[kk]]
[13:37:12.514]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:12.514]                     next
[13:37:12.514]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:12.514]                 }
[13:37:12.514]                 if (length(args) > 0) 
[13:37:12.514]                   base::do.call(base::Sys.setenv, args = args)
[13:37:12.514]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:12.514]             }
[13:37:12.514]             else {
[13:37:12.514]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:12.514]             }
[13:37:12.514]             {
[13:37:12.514]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:12.514]                   0L) {
[13:37:12.514]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:12.514]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:12.514]                   base::options(opts)
[13:37:12.514]                 }
[13:37:12.514]                 {
[13:37:12.514]                   {
[13:37:12.514]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:12.514]                     NULL
[13:37:12.514]                   }
[13:37:12.514]                   options(future.plan = NULL)
[13:37:12.514]                   if (is.na(NA_character_)) 
[13:37:12.514]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:12.514]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:12.514]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:12.514]                     .init = FALSE)
[13:37:12.514]                 }
[13:37:12.514]             }
[13:37:12.514]         }
[13:37:12.514]     })
[13:37:12.514]     if (TRUE) {
[13:37:12.514]         base::sink(type = "output", split = FALSE)
[13:37:12.514]         if (TRUE) {
[13:37:12.514]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:12.514]         }
[13:37:12.514]         else {
[13:37:12.514]             ...future.result["stdout"] <- base::list(NULL)
[13:37:12.514]         }
[13:37:12.514]         base::close(...future.stdout)
[13:37:12.514]         ...future.stdout <- NULL
[13:37:12.514]     }
[13:37:12.514]     ...future.result$conditions <- ...future.conditions
[13:37:12.514]     ...future.result$finished <- base::Sys.time()
[13:37:12.514]     ...future.result
[13:37:12.514] }
[13:37:12.569] MultisessionFuture started
[13:37:12.570] result() for ClusterFuture ...
[13:37:12.570] receiveMessageFromWorker() for ClusterFuture ...
[13:37:12.570] - Validating connection of MultisessionFuture
[13:37:12.603] - received message: FutureResult
[13:37:12.603] - Received FutureResult
[13:37:12.606] - Erased future from FutureRegistry
[13:37:12.607] result() for ClusterFuture ...
[13:37:12.607] - result already collected: FutureResult
[13:37:12.607] result() for ClusterFuture ... done
[13:37:12.607] receiveMessageFromWorker() for ClusterFuture ... done
[13:37:12.607] result() for ClusterFuture ... done
[13:37:12.607] result() for ClusterFuture ...
[13:37:12.608] - result already collected: FutureResult
[13:37:12.608] result() for ClusterFuture ... done
[13:37:12.608] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:37:12.612] plan(): nbrOfWorkers() = 2
nbrOfWorkers: 2
[13:37:12.622] getGlobalsAndPackages() ...
[13:37:12.622] 
[13:37:12.622] - globals: [0] <none>
[13:37:12.622] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers: 2
[13:37:12.640] getGlobalsAndPackages() ...
[13:37:12.640] 
[13:37:12.641] - globals: [0] <none>
[13:37:12.641] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers(background = TRUE): 2
[13:37:12.653] plan(): Setting new future strategy stack:
[13:37:12.653] List of future strategies:
[13:37:12.653] 1. multisession:
[13:37:12.653]    - args: function (..., workers = 1L, envir = parent.frame())
[13:37:12.653]    - tweaked: TRUE
[13:37:12.653]    - call: plan(strategy, workers = 1L)
[13:37:12.654] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:37:12.654] multisession:
[13:37:12.654] - args: function (..., workers = 1L, envir = parent.frame())
[13:37:12.654] - tweaked: TRUE
[13:37:12.654] - call: plan(strategy, workers = 1L)
[13:37:12.654] getGlobalsAndPackages() ...
[13:37:12.655] Not searching for globals
[13:37:12.655] - globals: [0] <none>
[13:37:12.655] getGlobalsAndPackages() ... DONE
[13:37:12.656] Packages needed by the future expression (n = 0): <none>
[13:37:12.656] Packages needed by future strategies (n = 0): <none>
[13:37:12.657] {
[13:37:12.657]     {
[13:37:12.657]         {
[13:37:12.657]             ...future.startTime <- base::Sys.time()
[13:37:12.657]             {
[13:37:12.657]                 {
[13:37:12.657]                   {
[13:37:12.657]                     base::local({
[13:37:12.657]                       has_future <- base::requireNamespace("future", 
[13:37:12.657]                         quietly = TRUE)
[13:37:12.657]                       if (has_future) {
[13:37:12.657]                         ns <- base::getNamespace("future")
[13:37:12.657]                         version <- ns[[".package"]][["version"]]
[13:37:12.657]                         if (is.null(version)) 
[13:37:12.657]                           version <- utils::packageVersion("future")
[13:37:12.657]                       }
[13:37:12.657]                       else {
[13:37:12.657]                         version <- NULL
[13:37:12.657]                       }
[13:37:12.657]                       if (!has_future || version < "1.8.0") {
[13:37:12.657]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:12.657]                           "", base::R.version$version.string), 
[13:37:12.657]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:12.657]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:12.657]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:12.657]                             "release", "version")], collapse = " "), 
[13:37:12.657]                           hostname = base::Sys.info()[["nodename"]])
[13:37:12.657]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:12.657]                           info)
[13:37:12.657]                         info <- base::paste(info, collapse = "; ")
[13:37:12.657]                         if (!has_future) {
[13:37:12.657]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:12.657]                             info)
[13:37:12.657]                         }
[13:37:12.657]                         else {
[13:37:12.657]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:12.657]                             info, version)
[13:37:12.657]                         }
[13:37:12.657]                         base::stop(msg)
[13:37:12.657]                       }
[13:37:12.657]                     })
[13:37:12.657]                   }
[13:37:12.657]                   ...future.strategy.old <- future::plan("list")
[13:37:12.657]                   options(future.plan = NULL)
[13:37:12.657]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:12.657]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:12.657]                 }
[13:37:12.657]                 ...future.workdir <- getwd()
[13:37:12.657]             }
[13:37:12.657]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:12.657]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:12.657]         }
[13:37:12.657]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:12.657]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:12.657]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:12.657]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:12.657]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:12.657]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:12.657]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:12.657]             base::names(...future.oldOptions))
[13:37:12.657]     }
[13:37:12.657]     if (FALSE) {
[13:37:12.657]     }
[13:37:12.657]     else {
[13:37:12.657]         if (TRUE) {
[13:37:12.657]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:12.657]                 open = "w")
[13:37:12.657]         }
[13:37:12.657]         else {
[13:37:12.657]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:12.657]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:12.657]         }
[13:37:12.657]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:12.657]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:12.657]             base::sink(type = "output", split = FALSE)
[13:37:12.657]             base::close(...future.stdout)
[13:37:12.657]         }, add = TRUE)
[13:37:12.657]     }
[13:37:12.657]     ...future.frame <- base::sys.nframe()
[13:37:12.657]     ...future.conditions <- base::list()
[13:37:12.657]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:12.657]     if (FALSE) {
[13:37:12.657]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:12.657]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:12.657]     }
[13:37:12.657]     ...future.result <- base::tryCatch({
[13:37:12.657]         base::withCallingHandlers({
[13:37:12.657]             ...future.value <- base::withVisible(base::local(NA))
[13:37:12.657]             future::FutureResult(value = ...future.value$value, 
[13:37:12.657]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:12.657]                   ...future.rng), globalenv = if (FALSE) 
[13:37:12.657]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:12.657]                     ...future.globalenv.names))
[13:37:12.657]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:12.657]         }, condition = base::local({
[13:37:12.657]             c <- base::c
[13:37:12.657]             inherits <- base::inherits
[13:37:12.657]             invokeRestart <- base::invokeRestart
[13:37:12.657]             length <- base::length
[13:37:12.657]             list <- base::list
[13:37:12.657]             seq.int <- base::seq.int
[13:37:12.657]             signalCondition <- base::signalCondition
[13:37:12.657]             sys.calls <- base::sys.calls
[13:37:12.657]             `[[` <- base::`[[`
[13:37:12.657]             `+` <- base::`+`
[13:37:12.657]             `<<-` <- base::`<<-`
[13:37:12.657]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:12.657]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:12.657]                   3L)]
[13:37:12.657]             }
[13:37:12.657]             function(cond) {
[13:37:12.657]                 is_error <- inherits(cond, "error")
[13:37:12.657]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:12.657]                   NULL)
[13:37:12.657]                 if (is_error) {
[13:37:12.657]                   sessionInformation <- function() {
[13:37:12.657]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:12.657]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:12.657]                       search = base::search(), system = base::Sys.info())
[13:37:12.657]                   }
[13:37:12.657]                   ...future.conditions[[length(...future.conditions) + 
[13:37:12.657]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:12.657]                     cond$call), session = sessionInformation(), 
[13:37:12.657]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:12.657]                   signalCondition(cond)
[13:37:12.657]                 }
[13:37:12.657]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:12.657]                 "immediateCondition"))) {
[13:37:12.657]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:12.657]                   ...future.conditions[[length(...future.conditions) + 
[13:37:12.657]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:12.657]                   if (TRUE && !signal) {
[13:37:12.657]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:12.657]                     {
[13:37:12.657]                       inherits <- base::inherits
[13:37:12.657]                       invokeRestart <- base::invokeRestart
[13:37:12.657]                       is.null <- base::is.null
[13:37:12.657]                       muffled <- FALSE
[13:37:12.657]                       if (inherits(cond, "message")) {
[13:37:12.657]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:12.657]                         if (muffled) 
[13:37:12.657]                           invokeRestart("muffleMessage")
[13:37:12.657]                       }
[13:37:12.657]                       else if (inherits(cond, "warning")) {
[13:37:12.657]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:12.657]                         if (muffled) 
[13:37:12.657]                           invokeRestart("muffleWarning")
[13:37:12.657]                       }
[13:37:12.657]                       else if (inherits(cond, "condition")) {
[13:37:12.657]                         if (!is.null(pattern)) {
[13:37:12.657]                           computeRestarts <- base::computeRestarts
[13:37:12.657]                           grepl <- base::grepl
[13:37:12.657]                           restarts <- computeRestarts(cond)
[13:37:12.657]                           for (restart in restarts) {
[13:37:12.657]                             name <- restart$name
[13:37:12.657]                             if (is.null(name)) 
[13:37:12.657]                               next
[13:37:12.657]                             if (!grepl(pattern, name)) 
[13:37:12.657]                               next
[13:37:12.657]                             invokeRestart(restart)
[13:37:12.657]                             muffled <- TRUE
[13:37:12.657]                             break
[13:37:12.657]                           }
[13:37:12.657]                         }
[13:37:12.657]                       }
[13:37:12.657]                       invisible(muffled)
[13:37:12.657]                     }
[13:37:12.657]                     muffleCondition(cond, pattern = "^muffle")
[13:37:12.657]                   }
[13:37:12.657]                 }
[13:37:12.657]                 else {
[13:37:12.657]                   if (TRUE) {
[13:37:12.657]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:12.657]                     {
[13:37:12.657]                       inherits <- base::inherits
[13:37:12.657]                       invokeRestart <- base::invokeRestart
[13:37:12.657]                       is.null <- base::is.null
[13:37:12.657]                       muffled <- FALSE
[13:37:12.657]                       if (inherits(cond, "message")) {
[13:37:12.657]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:12.657]                         if (muffled) 
[13:37:12.657]                           invokeRestart("muffleMessage")
[13:37:12.657]                       }
[13:37:12.657]                       else if (inherits(cond, "warning")) {
[13:37:12.657]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:12.657]                         if (muffled) 
[13:37:12.657]                           invokeRestart("muffleWarning")
[13:37:12.657]                       }
[13:37:12.657]                       else if (inherits(cond, "condition")) {
[13:37:12.657]                         if (!is.null(pattern)) {
[13:37:12.657]                           computeRestarts <- base::computeRestarts
[13:37:12.657]                           grepl <- base::grepl
[13:37:12.657]                           restarts <- computeRestarts(cond)
[13:37:12.657]                           for (restart in restarts) {
[13:37:12.657]                             name <- restart$name
[13:37:12.657]                             if (is.null(name)) 
[13:37:12.657]                               next
[13:37:12.657]                             if (!grepl(pattern, name)) 
[13:37:12.657]                               next
[13:37:12.657]                             invokeRestart(restart)
[13:37:12.657]                             muffled <- TRUE
[13:37:12.657]                             break
[13:37:12.657]                           }
[13:37:12.657]                         }
[13:37:12.657]                       }
[13:37:12.657]                       invisible(muffled)
[13:37:12.657]                     }
[13:37:12.657]                     muffleCondition(cond, pattern = "^muffle")
[13:37:12.657]                   }
[13:37:12.657]                 }
[13:37:12.657]             }
[13:37:12.657]         }))
[13:37:12.657]     }, error = function(ex) {
[13:37:12.657]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:12.657]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:12.657]                 ...future.rng), started = ...future.startTime, 
[13:37:12.657]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:12.657]             version = "1.8"), class = "FutureResult")
[13:37:12.657]     }, finally = {
[13:37:12.657]         if (!identical(...future.workdir, getwd())) 
[13:37:12.657]             setwd(...future.workdir)
[13:37:12.657]         {
[13:37:12.657]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:12.657]                 ...future.oldOptions$nwarnings <- NULL
[13:37:12.657]             }
[13:37:12.657]             base::options(...future.oldOptions)
[13:37:12.657]             if (.Platform$OS.type == "windows") {
[13:37:12.657]                 old_names <- names(...future.oldEnvVars)
[13:37:12.657]                 envs <- base::Sys.getenv()
[13:37:12.657]                 names <- names(envs)
[13:37:12.657]                 common <- intersect(names, old_names)
[13:37:12.657]                 added <- setdiff(names, old_names)
[13:37:12.657]                 removed <- setdiff(old_names, names)
[13:37:12.657]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:12.657]                   envs[common]]
[13:37:12.657]                 NAMES <- toupper(changed)
[13:37:12.657]                 args <- list()
[13:37:12.657]                 for (kk in seq_along(NAMES)) {
[13:37:12.657]                   name <- changed[[kk]]
[13:37:12.657]                   NAME <- NAMES[[kk]]
[13:37:12.657]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:12.657]                     next
[13:37:12.657]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:12.657]                 }
[13:37:12.657]                 NAMES <- toupper(added)
[13:37:12.657]                 for (kk in seq_along(NAMES)) {
[13:37:12.657]                   name <- added[[kk]]
[13:37:12.657]                   NAME <- NAMES[[kk]]
[13:37:12.657]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:12.657]                     next
[13:37:12.657]                   args[[name]] <- ""
[13:37:12.657]                 }
[13:37:12.657]                 NAMES <- toupper(removed)
[13:37:12.657]                 for (kk in seq_along(NAMES)) {
[13:37:12.657]                   name <- removed[[kk]]
[13:37:12.657]                   NAME <- NAMES[[kk]]
[13:37:12.657]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:12.657]                     next
[13:37:12.657]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:12.657]                 }
[13:37:12.657]                 if (length(args) > 0) 
[13:37:12.657]                   base::do.call(base::Sys.setenv, args = args)
[13:37:12.657]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:12.657]             }
[13:37:12.657]             else {
[13:37:12.657]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:12.657]             }
[13:37:12.657]             {
[13:37:12.657]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:12.657]                   0L) {
[13:37:12.657]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:12.657]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:12.657]                   base::options(opts)
[13:37:12.657]                 }
[13:37:12.657]                 {
[13:37:12.657]                   {
[13:37:12.657]                     NULL
[13:37:12.657]                     RNGkind("Mersenne-Twister")
[13:37:12.657]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:12.657]                       inherits = FALSE)
[13:37:12.657]                   }
[13:37:12.657]                   options(future.plan = NULL)
[13:37:12.657]                   if (is.na(NA_character_)) 
[13:37:12.657]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:12.657]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:12.657]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:12.657]                     .init = FALSE)
[13:37:12.657]                 }
[13:37:12.657]             }
[13:37:12.657]         }
[13:37:12.657]     })
[13:37:12.657]     if (TRUE) {
[13:37:12.657]         base::sink(type = "output", split = FALSE)
[13:37:12.657]         if (TRUE) {
[13:37:12.657]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:12.657]         }
[13:37:12.657]         else {
[13:37:12.657]             ...future.result["stdout"] <- base::list(NULL)
[13:37:12.657]         }
[13:37:12.657]         base::close(...future.stdout)
[13:37:12.657]         ...future.stdout <- NULL
[13:37:12.657]     }
[13:37:12.657]     ...future.result$conditions <- ...future.conditions
[13:37:12.657]     ...future.result$finished <- base::Sys.time()
[13:37:12.657]     ...future.result
[13:37:12.657] }
[13:37:12.659] plan(): Setting new future strategy stack:
[13:37:12.660] List of future strategies:
[13:37:12.660] 1. sequential:
[13:37:12.660]    - args: function (..., envir = parent.frame())
[13:37:12.660]    - tweaked: FALSE
[13:37:12.660]    - call: NULL
[13:37:12.660] plan(): nbrOfWorkers() = 1
[13:37:12.661] plan(): Setting new future strategy stack:
[13:37:12.662] List of future strategies:
[13:37:12.662] 1. multisession:
[13:37:12.662]    - args: function (..., workers = 1L, envir = parent.frame())
[13:37:12.662]    - tweaked: TRUE
[13:37:12.662]    - call: plan(strategy, workers = 1L)
[13:37:12.662] plan(): nbrOfWorkers() = 1
[13:37:12.662] SequentialFuture started (and completed)
[13:37:12.663] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:37:12.663] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
[13:37:12.663] getGlobalsAndPackages() ...
[13:37:12.664] Searching for globals...
[13:37:12.667] 
[13:37:12.667] Searching for globals ... DONE
[13:37:12.667] - globals: [0] <none>
[13:37:12.667] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers: 1
[13:37:12.667] getGlobalsAndPackages() ...
[13:37:12.668] Searching for globals...
[13:37:12.668] 
[13:37:12.668] Searching for globals ... DONE
[13:37:12.668] - globals: [0] <none>
[13:37:12.668] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers(background = TRUE): 0
[13:37:12.669] plan(): Setting new future strategy stack:
[13:37:12.669] List of future strategies:
[13:37:12.669] 1. multisession:
[13:37:12.669]    - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L)>", envir = parent.frame())
[13:37:12.669]    - tweaked: TRUE
[13:37:12.669]    - call: plan(strategy, workers = allButOneCore)
[13:37:12.670] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:37:12.670] multisession:
[13:37:12.670] - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L)>", envir = parent.frame())
[13:37:12.670] - tweaked: TRUE
[13:37:12.670] - call: plan(strategy, workers = allButOneCore)
[13:37:12.678] getGlobalsAndPackages() ...
[13:37:12.678] Not searching for globals
[13:37:12.678] - globals: [0] <none>
[13:37:12.678] getGlobalsAndPackages() ... DONE
[13:37:12.678] Packages needed by the future expression (n = 0): <none>
[13:37:12.678] Packages needed by future strategies (n = 0): <none>
[13:37:12.679] {
[13:37:12.679]     {
[13:37:12.679]         {
[13:37:12.679]             ...future.startTime <- base::Sys.time()
[13:37:12.679]             {
[13:37:12.679]                 {
[13:37:12.679]                   {
[13:37:12.679]                     base::local({
[13:37:12.679]                       has_future <- base::requireNamespace("future", 
[13:37:12.679]                         quietly = TRUE)
[13:37:12.679]                       if (has_future) {
[13:37:12.679]                         ns <- base::getNamespace("future")
[13:37:12.679]                         version <- ns[[".package"]][["version"]]
[13:37:12.679]                         if (is.null(version)) 
[13:37:12.679]                           version <- utils::packageVersion("future")
[13:37:12.679]                       }
[13:37:12.679]                       else {
[13:37:12.679]                         version <- NULL
[13:37:12.679]                       }
[13:37:12.679]                       if (!has_future || version < "1.8.0") {
[13:37:12.679]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:12.679]                           "", base::R.version$version.string), 
[13:37:12.679]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:12.679]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:12.679]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:12.679]                             "release", "version")], collapse = " "), 
[13:37:12.679]                           hostname = base::Sys.info()[["nodename"]])
[13:37:12.679]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:12.679]                           info)
[13:37:12.679]                         info <- base::paste(info, collapse = "; ")
[13:37:12.679]                         if (!has_future) {
[13:37:12.679]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:12.679]                             info)
[13:37:12.679]                         }
[13:37:12.679]                         else {
[13:37:12.679]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:12.679]                             info, version)
[13:37:12.679]                         }
[13:37:12.679]                         base::stop(msg)
[13:37:12.679]                       }
[13:37:12.679]                     })
[13:37:12.679]                   }
[13:37:12.679]                   ...future.strategy.old <- future::plan("list")
[13:37:12.679]                   options(future.plan = NULL)
[13:37:12.679]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:12.679]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:12.679]                 }
[13:37:12.679]                 ...future.workdir <- getwd()
[13:37:12.679]             }
[13:37:12.679]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:12.679]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:12.679]         }
[13:37:12.679]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:12.679]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:12.679]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:12.679]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:12.679]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:12.679]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:12.679]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:12.679]             base::names(...future.oldOptions))
[13:37:12.679]     }
[13:37:12.679]     if (FALSE) {
[13:37:12.679]     }
[13:37:12.679]     else {
[13:37:12.679]         if (TRUE) {
[13:37:12.679]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:12.679]                 open = "w")
[13:37:12.679]         }
[13:37:12.679]         else {
[13:37:12.679]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:12.679]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:12.679]         }
[13:37:12.679]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:12.679]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:12.679]             base::sink(type = "output", split = FALSE)
[13:37:12.679]             base::close(...future.stdout)
[13:37:12.679]         }, add = TRUE)
[13:37:12.679]     }
[13:37:12.679]     ...future.frame <- base::sys.nframe()
[13:37:12.679]     ...future.conditions <- base::list()
[13:37:12.679]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:12.679]     if (FALSE) {
[13:37:12.679]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:12.679]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:12.679]     }
[13:37:12.679]     ...future.result <- base::tryCatch({
[13:37:12.679]         base::withCallingHandlers({
[13:37:12.679]             ...future.value <- base::withVisible(base::local(NA))
[13:37:12.679]             future::FutureResult(value = ...future.value$value, 
[13:37:12.679]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:12.679]                   ...future.rng), globalenv = if (FALSE) 
[13:37:12.679]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:12.679]                     ...future.globalenv.names))
[13:37:12.679]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:12.679]         }, condition = base::local({
[13:37:12.679]             c <- base::c
[13:37:12.679]             inherits <- base::inherits
[13:37:12.679]             invokeRestart <- base::invokeRestart
[13:37:12.679]             length <- base::length
[13:37:12.679]             list <- base::list
[13:37:12.679]             seq.int <- base::seq.int
[13:37:12.679]             signalCondition <- base::signalCondition
[13:37:12.679]             sys.calls <- base::sys.calls
[13:37:12.679]             `[[` <- base::`[[`
[13:37:12.679]             `+` <- base::`+`
[13:37:12.679]             `<<-` <- base::`<<-`
[13:37:12.679]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:12.679]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:12.679]                   3L)]
[13:37:12.679]             }
[13:37:12.679]             function(cond) {
[13:37:12.679]                 is_error <- inherits(cond, "error")
[13:37:12.679]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:12.679]                   NULL)
[13:37:12.679]                 if (is_error) {
[13:37:12.679]                   sessionInformation <- function() {
[13:37:12.679]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:12.679]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:12.679]                       search = base::search(), system = base::Sys.info())
[13:37:12.679]                   }
[13:37:12.679]                   ...future.conditions[[length(...future.conditions) + 
[13:37:12.679]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:12.679]                     cond$call), session = sessionInformation(), 
[13:37:12.679]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:12.679]                   signalCondition(cond)
[13:37:12.679]                 }
[13:37:12.679]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:12.679]                 "immediateCondition"))) {
[13:37:12.679]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:12.679]                   ...future.conditions[[length(...future.conditions) + 
[13:37:12.679]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:12.679]                   if (TRUE && !signal) {
[13:37:12.679]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:12.679]                     {
[13:37:12.679]                       inherits <- base::inherits
[13:37:12.679]                       invokeRestart <- base::invokeRestart
[13:37:12.679]                       is.null <- base::is.null
[13:37:12.679]                       muffled <- FALSE
[13:37:12.679]                       if (inherits(cond, "message")) {
[13:37:12.679]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:12.679]                         if (muffled) 
[13:37:12.679]                           invokeRestart("muffleMessage")
[13:37:12.679]                       }
[13:37:12.679]                       else if (inherits(cond, "warning")) {
[13:37:12.679]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:12.679]                         if (muffled) 
[13:37:12.679]                           invokeRestart("muffleWarning")
[13:37:12.679]                       }
[13:37:12.679]                       else if (inherits(cond, "condition")) {
[13:37:12.679]                         if (!is.null(pattern)) {
[13:37:12.679]                           computeRestarts <- base::computeRestarts
[13:37:12.679]                           grepl <- base::grepl
[13:37:12.679]                           restarts <- computeRestarts(cond)
[13:37:12.679]                           for (restart in restarts) {
[13:37:12.679]                             name <- restart$name
[13:37:12.679]                             if (is.null(name)) 
[13:37:12.679]                               next
[13:37:12.679]                             if (!grepl(pattern, name)) 
[13:37:12.679]                               next
[13:37:12.679]                             invokeRestart(restart)
[13:37:12.679]                             muffled <- TRUE
[13:37:12.679]                             break
[13:37:12.679]                           }
[13:37:12.679]                         }
[13:37:12.679]                       }
[13:37:12.679]                       invisible(muffled)
[13:37:12.679]                     }
[13:37:12.679]                     muffleCondition(cond, pattern = "^muffle")
[13:37:12.679]                   }
[13:37:12.679]                 }
[13:37:12.679]                 else {
[13:37:12.679]                   if (TRUE) {
[13:37:12.679]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:12.679]                     {
[13:37:12.679]                       inherits <- base::inherits
[13:37:12.679]                       invokeRestart <- base::invokeRestart
[13:37:12.679]                       is.null <- base::is.null
[13:37:12.679]                       muffled <- FALSE
[13:37:12.679]                       if (inherits(cond, "message")) {
[13:37:12.679]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:12.679]                         if (muffled) 
[13:37:12.679]                           invokeRestart("muffleMessage")
[13:37:12.679]                       }
[13:37:12.679]                       else if (inherits(cond, "warning")) {
[13:37:12.679]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:12.679]                         if (muffled) 
[13:37:12.679]                           invokeRestart("muffleWarning")
[13:37:12.679]                       }
[13:37:12.679]                       else if (inherits(cond, "condition")) {
[13:37:12.679]                         if (!is.null(pattern)) {
[13:37:12.679]                           computeRestarts <- base::computeRestarts
[13:37:12.679]                           grepl <- base::grepl
[13:37:12.679]                           restarts <- computeRestarts(cond)
[13:37:12.679]                           for (restart in restarts) {
[13:37:12.679]                             name <- restart$name
[13:37:12.679]                             if (is.null(name)) 
[13:37:12.679]                               next
[13:37:12.679]                             if (!grepl(pattern, name)) 
[13:37:12.679]                               next
[13:37:12.679]                             invokeRestart(restart)
[13:37:12.679]                             muffled <- TRUE
[13:37:12.679]                             break
[13:37:12.679]                           }
[13:37:12.679]                         }
[13:37:12.679]                       }
[13:37:12.679]                       invisible(muffled)
[13:37:12.679]                     }
[13:37:12.679]                     muffleCondition(cond, pattern = "^muffle")
[13:37:12.679]                   }
[13:37:12.679]                 }
[13:37:12.679]             }
[13:37:12.679]         }))
[13:37:12.679]     }, error = function(ex) {
[13:37:12.679]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:12.679]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:12.679]                 ...future.rng), started = ...future.startTime, 
[13:37:12.679]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:12.679]             version = "1.8"), class = "FutureResult")
[13:37:12.679]     }, finally = {
[13:37:12.679]         if (!identical(...future.workdir, getwd())) 
[13:37:12.679]             setwd(...future.workdir)
[13:37:12.679]         {
[13:37:12.679]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:12.679]                 ...future.oldOptions$nwarnings <- NULL
[13:37:12.679]             }
[13:37:12.679]             base::options(...future.oldOptions)
[13:37:12.679]             if (.Platform$OS.type == "windows") {
[13:37:12.679]                 old_names <- names(...future.oldEnvVars)
[13:37:12.679]                 envs <- base::Sys.getenv()
[13:37:12.679]                 names <- names(envs)
[13:37:12.679]                 common <- intersect(names, old_names)
[13:37:12.679]                 added <- setdiff(names, old_names)
[13:37:12.679]                 removed <- setdiff(old_names, names)
[13:37:12.679]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:12.679]                   envs[common]]
[13:37:12.679]                 NAMES <- toupper(changed)
[13:37:12.679]                 args <- list()
[13:37:12.679]                 for (kk in seq_along(NAMES)) {
[13:37:12.679]                   name <- changed[[kk]]
[13:37:12.679]                   NAME <- NAMES[[kk]]
[13:37:12.679]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:12.679]                     next
[13:37:12.679]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:12.679]                 }
[13:37:12.679]                 NAMES <- toupper(added)
[13:37:12.679]                 for (kk in seq_along(NAMES)) {
[13:37:12.679]                   name <- added[[kk]]
[13:37:12.679]                   NAME <- NAMES[[kk]]
[13:37:12.679]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:12.679]                     next
[13:37:12.679]                   args[[name]] <- ""
[13:37:12.679]                 }
[13:37:12.679]                 NAMES <- toupper(removed)
[13:37:12.679]                 for (kk in seq_along(NAMES)) {
[13:37:12.679]                   name <- removed[[kk]]
[13:37:12.679]                   NAME <- NAMES[[kk]]
[13:37:12.679]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:12.679]                     next
[13:37:12.679]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:12.679]                 }
[13:37:12.679]                 if (length(args) > 0) 
[13:37:12.679]                   base::do.call(base::Sys.setenv, args = args)
[13:37:12.679]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:12.679]             }
[13:37:12.679]             else {
[13:37:12.679]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:12.679]             }
[13:37:12.679]             {
[13:37:12.679]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:12.679]                   0L) {
[13:37:12.679]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:12.679]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:12.679]                   base::options(opts)
[13:37:12.679]                 }
[13:37:12.679]                 {
[13:37:12.679]                   {
[13:37:12.679]                     NULL
[13:37:12.679]                     RNGkind("Mersenne-Twister")
[13:37:12.679]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:12.679]                       inherits = FALSE)
[13:37:12.679]                   }
[13:37:12.679]                   options(future.plan = NULL)
[13:37:12.679]                   if (is.na(NA_character_)) 
[13:37:12.679]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:12.679]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:12.679]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:12.679]                     .init = FALSE)
[13:37:12.679]                 }
[13:37:12.679]             }
[13:37:12.679]         }
[13:37:12.679]     })
[13:37:12.679]     if (TRUE) {
[13:37:12.679]         base::sink(type = "output", split = FALSE)
[13:37:12.679]         if (TRUE) {
[13:37:12.679]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:12.679]         }
[13:37:12.679]         else {
[13:37:12.679]             ...future.result["stdout"] <- base::list(NULL)
[13:37:12.679]         }
[13:37:12.679]         base::close(...future.stdout)
[13:37:12.679]         ...future.stdout <- NULL
[13:37:12.679]     }
[13:37:12.679]     ...future.result$conditions <- ...future.conditions
[13:37:12.679]     ...future.result$finished <- base::Sys.time()
[13:37:12.679]     ...future.result
[13:37:12.679] }
[13:37:12.681] plan(): Setting new future strategy stack:
[13:37:12.681] List of future strategies:
[13:37:12.681] 1. sequential:
[13:37:12.681]    - args: function (..., envir = parent.frame())
[13:37:12.681]    - tweaked: FALSE
[13:37:12.681]    - call: NULL
[13:37:12.681] plan(): nbrOfWorkers() = 1
[13:37:12.682] plan(): Setting new future strategy stack:
[13:37:12.682] List of future strategies:
[13:37:12.682] 1. multisession:
[13:37:12.682]    - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L)>", envir = parent.frame())
[13:37:12.682]    - tweaked: TRUE
[13:37:12.682]    - call: plan(strategy, workers = allButOneCore)
[13:37:12.687] plan(): nbrOfWorkers() = 1
[13:37:12.687] SequentialFuture started (and completed)
[13:37:12.688] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:37:12.691] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
[13:37:12.700] getGlobalsAndPackages() ...
[13:37:12.700] Searching for globals...
[13:37:12.700] 
[13:37:12.700] Searching for globals ... DONE
[13:37:12.700] - globals: [0] <none>
[13:37:12.700] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers: 1
[13:37:12.707] getGlobalsAndPackages() ...
[13:37:12.707] Searching for globals...
[13:37:12.707] 
[13:37:12.708] Searching for globals ... DONE
[13:37:12.708] - globals: [0] <none>
[13:37:12.708] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers(background = TRUE): 0
Type of future: multicore
nbrOfWorkers: 2
[13:37:12.711] plan(): Setting new future strategy stack:
[13:37:12.711] List of future strategies:
[13:37:12.711] 1. multicore:
[13:37:12.711]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:12.711]    - tweaked: FALSE
[13:37:12.711]    - call: plan(strategy)
[13:37:12.715] plan(): nbrOfWorkers() = 2
nbrOfWorkers: 2
nbrOfFreeWorkers: 2
nbrOfFreeWorkers(background = TRUE): 2
[13:37:12.725] plan(): Setting new future strategy stack:
[13:37:12.725] List of future strategies:
[13:37:12.725] 1. multicore:
[13:37:12.725]    - args: function (..., workers = 1L, envir = parent.frame())
[13:37:12.725]    - tweaked: TRUE
[13:37:12.725]    - call: plan(strategy, workers = 1L)
[13:37:12.726] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
nbrOfFreeWorkers: 1
nbrOfFreeWorkers(background = TRUE): 1
[13:37:12.727] plan(): Setting new future strategy stack:
[13:37:12.727] List of future strategies:
[13:37:12.727] 1. multicore:
[13:37:12.727]    - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L); <bytecode: 0x55a3a8dd5b98>>", envir = parent.frame())
[13:37:12.727]    - tweaked: TRUE
[13:37:12.727]    - call: plan(strategy, workers = allButOneCore)
[13:37:12.730] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
nbrOfFreeWorkers: 1
nbrOfFreeWorkers(background = TRUE): 1
> 
> 
> message("Type of future: cluster")
Type of future: cluster
> workers <- rep("localhost", times = 2L)
> plan(cluster, workers = workers)
[13:37:12.740] plan(): Setting new future strategy stack:
[13:37:12.740] List of future strategies:
[13:37:12.740] 1. cluster:
[13:37:12.740]    - args: function (..., workers = c("localhost", "localhost"), envir = parent.frame())
[13:37:12.740]    - tweaked: TRUE
[13:37:12.740]    - call: plan(cluster, workers = workers)
[13:37:12.740] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:37:12.740] cluster:
[13:37:12.740] - args: function (..., workers = c("localhost", "localhost"), envir = parent.frame())
[13:37:12.740] - tweaked: TRUE
[13:37:12.740] - call: plan(cluster, workers = workers)
[13:37:12.741] getGlobalsAndPackages() ...
[13:37:12.741] Not searching for globals
[13:37:12.741] - globals: [0] <none>
[13:37:12.741] getGlobalsAndPackages() ... DONE
[13:37:12.742] [local output] makeClusterPSOCK() ...
[13:37:12.742] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:37:12.743] [local output] Base port: 11356
[13:37:12.743] [local output] Getting setup options for 2 cluster nodes ...
[13:37:12.743] [local output]  - Node 1 of 2 ...
[13:37:12.743] [local output] localMachine=TRUE => revtunnel=FALSE

[13:37:12.744] [local output] Rscript port: 11356

[13:37:12.744] [local output]  - Node 2 of 2 ...
[13:37:12.744] [local output] localMachine=TRUE => revtunnel=FALSE

[13:37:12.745] [local output] Rscript port: 11356

[13:37:12.745] [local output] Getting setup options for 2 cluster nodes ... done
[13:37:12.745] [local output]  - Parallel setup requested for some PSOCK nodes
[13:37:12.746] [local output] Setting up PSOCK nodes in parallel
[13:37:12.746] List of 36
[13:37:12.746]  $ worker          : chr "localhost"
[13:37:12.746]   ..- attr(*, "localhost")= logi TRUE
[13:37:12.746]  $ master          : chr "localhost"
[13:37:12.746]  $ port            : int 11356
[13:37:12.746]  $ connectTimeout  : num 120
[13:37:12.746]  $ timeout         : num 2592000
[13:37:12.746]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:37:12.746]  $ homogeneous     : logi TRUE
[13:37:12.746]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:37:12.746]  $ rscript_envs    : NULL
[13:37:12.746]  $ rscript_libs    : NULL
[13:37:12.746]  $ rscript_startup : NULL
[13:37:12.746]  $ rscript_sh      : chr "sh"
[13:37:12.746]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:37:12.746]  $ methods         : logi TRUE
[13:37:12.746]  $ socketOptions   : chr "no-delay"
[13:37:12.746]  $ useXDR          : logi FALSE
[13:37:12.746]  $ outfile         : chr "/dev/null"
[13:37:12.746]  $ renice          : int NA
[13:37:12.746]  $ rshcmd          : NULL
[13:37:12.746]  $ user            : chr(0) 
[13:37:12.746]  $ revtunnel       : logi FALSE
[13:37:12.746]  $ rshlogfile      : NULL
[13:37:12.746]  $ rshopts         : chr(0) 
[13:37:12.746]  $ rank            : int 1
[13:37:12.746]  $ manual          : logi FALSE
[13:37:12.746]  $ dryrun          : logi FALSE
[13:37:12.746]  $ quiet           : logi FALSE
[13:37:12.746]  $ setup_strategy  : chr "parallel"
[13:37:12.746]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:37:12.746]  $ pidfile         : chr "/tmp/RtmparxzHK/worker.rank=1.parallelly.parent=86513.151f169fd77b2.pid"
[13:37:12.746]  $ rshcmd_label    : NULL
[13:37:12.746]  $ rsh_call        : NULL
[13:37:12.746]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:37:12.746]  $ localMachine    : logi TRUE
[13:37:12.746]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:37:12.746]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:37:12.746]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:37:12.746]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:37:12.746]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:37:12.746]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:37:12.746]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:37:12.746]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:37:12.746]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:37:12.746]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:37:12.746]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:37:12.746]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:37:12.746]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:37:12.746]  $ arguments       :List of 28
[13:37:12.746]   ..$ worker          : chr "localhost"
[13:37:12.746]   ..$ master          : NULL
[13:37:12.746]   ..$ port            : int 11356
[13:37:12.746]   ..$ connectTimeout  : num 120
[13:37:12.746]   ..$ timeout         : num 2592000
[13:37:12.746]   ..$ rscript         : NULL
[13:37:12.746]   ..$ homogeneous     : NULL
[13:37:12.746]   ..$ rscript_args    : NULL
[13:37:12.746]   ..$ rscript_envs    : NULL
[13:37:12.746]   ..$ rscript_libs    : NULL
[13:37:12.746]   ..$ rscript_startup : NULL
[13:37:12.746]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:37:12.746]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:37:12.746]   ..$ methods         : logi TRUE
[13:37:12.746]   ..$ socketOptions   : chr "no-delay"
[13:37:12.746]   ..$ useXDR          : logi FALSE
[13:37:12.746]   ..$ outfile         : chr "/dev/null"
[13:37:12.746]   ..$ renice          : int NA
[13:37:12.746]   ..$ rshcmd          : NULL
[13:37:12.746]   ..$ user            : NULL
[13:37:12.746]   ..$ revtunnel       : logi NA
[13:37:12.746]   ..$ rshlogfile      : NULL
[13:37:12.746]   ..$ rshopts         : NULL
[13:37:12.746]   ..$ rank            : int 1
[13:37:12.746]   ..$ manual          : logi FALSE
[13:37:12.746]   ..$ dryrun          : logi FALSE
[13:37:12.746]   ..$ quiet           : logi FALSE
[13:37:12.746]   ..$ setup_strategy  : chr "parallel"
[13:37:12.746]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:37:12.763] [local output] System call to launch all workers:
[13:37:12.763] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmparxzHK/worker.rank=1.parallelly.parent=86513.151f169fd77b2.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11356 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:37:12.763] [local output] Starting PSOCK main server
[13:37:12.764] [local output] Workers launched
[13:37:12.764] [local output] Waiting for workers to connect back
[13:37:12.764]  - [local output] 0 workers out of 2 ready
[13:37:13.006]  - [local output] 0 workers out of 2 ready
[13:37:13.007]  - [local output] 1 workers out of 2 ready
[13:37:13.019]  - [local output] 1 workers out of 2 ready
[13:37:13.020]  - [local output] 2 workers out of 2 ready
[13:37:13.020] [local output] Launching of workers completed
[13:37:13.020] [local output] Collecting session information from workers
[13:37:13.021] [local output]  - Worker #1 of 2
[13:37:13.021] [local output]  - Worker #2 of 2
[13:37:13.021] [local output] makeClusterPSOCK() ... done
[13:37:13.034] Packages needed by the future expression (n = 0): <none>
[13:37:13.034] Packages needed by future strategies (n = 0): <none>
[13:37:13.034] {
[13:37:13.034]     {
[13:37:13.034]         {
[13:37:13.034]             ...future.startTime <- base::Sys.time()
[13:37:13.034]             {
[13:37:13.034]                 {
[13:37:13.034]                   {
[13:37:13.034]                     base::local({
[13:37:13.034]                       has_future <- base::requireNamespace("future", 
[13:37:13.034]                         quietly = TRUE)
[13:37:13.034]                       if (has_future) {
[13:37:13.034]                         ns <- base::getNamespace("future")
[13:37:13.034]                         version <- ns[[".package"]][["version"]]
[13:37:13.034]                         if (is.null(version)) 
[13:37:13.034]                           version <- utils::packageVersion("future")
[13:37:13.034]                       }
[13:37:13.034]                       else {
[13:37:13.034]                         version <- NULL
[13:37:13.034]                       }
[13:37:13.034]                       if (!has_future || version < "1.8.0") {
[13:37:13.034]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:13.034]                           "", base::R.version$version.string), 
[13:37:13.034]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:13.034]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:13.034]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:13.034]                             "release", "version")], collapse = " "), 
[13:37:13.034]                           hostname = base::Sys.info()[["nodename"]])
[13:37:13.034]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:13.034]                           info)
[13:37:13.034]                         info <- base::paste(info, collapse = "; ")
[13:37:13.034]                         if (!has_future) {
[13:37:13.034]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:13.034]                             info)
[13:37:13.034]                         }
[13:37:13.034]                         else {
[13:37:13.034]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:13.034]                             info, version)
[13:37:13.034]                         }
[13:37:13.034]                         base::stop(msg)
[13:37:13.034]                       }
[13:37:13.034]                     })
[13:37:13.034]                   }
[13:37:13.034]                   ...future.strategy.old <- future::plan("list")
[13:37:13.034]                   options(future.plan = NULL)
[13:37:13.034]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:13.034]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:13.034]                 }
[13:37:13.034]                 ...future.workdir <- getwd()
[13:37:13.034]             }
[13:37:13.034]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:13.034]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:13.034]         }
[13:37:13.034]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:13.034]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:13.034]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:13.034]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:13.034]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:13.034]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:13.034]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:13.034]             base::names(...future.oldOptions))
[13:37:13.034]     }
[13:37:13.034]     if (FALSE) {
[13:37:13.034]     }
[13:37:13.034]     else {
[13:37:13.034]         if (TRUE) {
[13:37:13.034]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:13.034]                 open = "w")
[13:37:13.034]         }
[13:37:13.034]         else {
[13:37:13.034]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:13.034]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:13.034]         }
[13:37:13.034]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:13.034]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:13.034]             base::sink(type = "output", split = FALSE)
[13:37:13.034]             base::close(...future.stdout)
[13:37:13.034]         }, add = TRUE)
[13:37:13.034]     }
[13:37:13.034]     ...future.frame <- base::sys.nframe()
[13:37:13.034]     ...future.conditions <- base::list()
[13:37:13.034]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:13.034]     if (FALSE) {
[13:37:13.034]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:13.034]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:13.034]     }
[13:37:13.034]     ...future.result <- base::tryCatch({
[13:37:13.034]         base::withCallingHandlers({
[13:37:13.034]             ...future.value <- base::withVisible(base::local({
[13:37:13.034]                 ...future.makeSendCondition <- base::local({
[13:37:13.034]                   sendCondition <- NULL
[13:37:13.034]                   function(frame = 1L) {
[13:37:13.034]                     if (is.function(sendCondition)) 
[13:37:13.034]                       return(sendCondition)
[13:37:13.034]                     ns <- getNamespace("parallel")
[13:37:13.034]                     if (exists("sendData", mode = "function", 
[13:37:13.034]                       envir = ns)) {
[13:37:13.034]                       parallel_sendData <- get("sendData", mode = "function", 
[13:37:13.034]                         envir = ns)
[13:37:13.034]                       envir <- sys.frame(frame)
[13:37:13.034]                       master <- NULL
[13:37:13.034]                       while (!identical(envir, .GlobalEnv) && 
[13:37:13.034]                         !identical(envir, emptyenv())) {
[13:37:13.034]                         if (exists("master", mode = "list", envir = envir, 
[13:37:13.034]                           inherits = FALSE)) {
[13:37:13.034]                           master <- get("master", mode = "list", 
[13:37:13.034]                             envir = envir, inherits = FALSE)
[13:37:13.034]                           if (inherits(master, c("SOCKnode", 
[13:37:13.034]                             "SOCK0node"))) {
[13:37:13.034]                             sendCondition <<- function(cond) {
[13:37:13.034]                               data <- list(type = "VALUE", value = cond, 
[13:37:13.034]                                 success = TRUE)
[13:37:13.034]                               parallel_sendData(master, data)
[13:37:13.034]                             }
[13:37:13.034]                             return(sendCondition)
[13:37:13.034]                           }
[13:37:13.034]                         }
[13:37:13.034]                         frame <- frame + 1L
[13:37:13.034]                         envir <- sys.frame(frame)
[13:37:13.034]                       }
[13:37:13.034]                     }
[13:37:13.034]                     sendCondition <<- function(cond) NULL
[13:37:13.034]                   }
[13:37:13.034]                 })
[13:37:13.034]                 withCallingHandlers({
[13:37:13.034]                   NA
[13:37:13.034]                 }, immediateCondition = function(cond) {
[13:37:13.034]                   sendCondition <- ...future.makeSendCondition()
[13:37:13.034]                   sendCondition(cond)
[13:37:13.034]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:13.034]                   {
[13:37:13.034]                     inherits <- base::inherits
[13:37:13.034]                     invokeRestart <- base::invokeRestart
[13:37:13.034]                     is.null <- base::is.null
[13:37:13.034]                     muffled <- FALSE
[13:37:13.034]                     if (inherits(cond, "message")) {
[13:37:13.034]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:13.034]                       if (muffled) 
[13:37:13.034]                         invokeRestart("muffleMessage")
[13:37:13.034]                     }
[13:37:13.034]                     else if (inherits(cond, "warning")) {
[13:37:13.034]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:13.034]                       if (muffled) 
[13:37:13.034]                         invokeRestart("muffleWarning")
[13:37:13.034]                     }
[13:37:13.034]                     else if (inherits(cond, "condition")) {
[13:37:13.034]                       if (!is.null(pattern)) {
[13:37:13.034]                         computeRestarts <- base::computeRestarts
[13:37:13.034]                         grepl <- base::grepl
[13:37:13.034]                         restarts <- computeRestarts(cond)
[13:37:13.034]                         for (restart in restarts) {
[13:37:13.034]                           name <- restart$name
[13:37:13.034]                           if (is.null(name)) 
[13:37:13.034]                             next
[13:37:13.034]                           if (!grepl(pattern, name)) 
[13:37:13.034]                             next
[13:37:13.034]                           invokeRestart(restart)
[13:37:13.034]                           muffled <- TRUE
[13:37:13.034]                           break
[13:37:13.034]                         }
[13:37:13.034]                       }
[13:37:13.034]                     }
[13:37:13.034]                     invisible(muffled)
[13:37:13.034]                   }
[13:37:13.034]                   muffleCondition(cond)
[13:37:13.034]                 })
[13:37:13.034]             }))
[13:37:13.034]             future::FutureResult(value = ...future.value$value, 
[13:37:13.034]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:13.034]                   ...future.rng), globalenv = if (FALSE) 
[13:37:13.034]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:13.034]                     ...future.globalenv.names))
[13:37:13.034]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:13.034]         }, condition = base::local({
[13:37:13.034]             c <- base::c
[13:37:13.034]             inherits <- base::inherits
[13:37:13.034]             invokeRestart <- base::invokeRestart
[13:37:13.034]             length <- base::length
[13:37:13.034]             list <- base::list
[13:37:13.034]             seq.int <- base::seq.int
[13:37:13.034]             signalCondition <- base::signalCondition
[13:37:13.034]             sys.calls <- base::sys.calls
[13:37:13.034]             `[[` <- base::`[[`
[13:37:13.034]             `+` <- base::`+`
[13:37:13.034]             `<<-` <- base::`<<-`
[13:37:13.034]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:13.034]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:13.034]                   3L)]
[13:37:13.034]             }
[13:37:13.034]             function(cond) {
[13:37:13.034]                 is_error <- inherits(cond, "error")
[13:37:13.034]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:13.034]                   NULL)
[13:37:13.034]                 if (is_error) {
[13:37:13.034]                   sessionInformation <- function() {
[13:37:13.034]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:13.034]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:13.034]                       search = base::search(), system = base::Sys.info())
[13:37:13.034]                   }
[13:37:13.034]                   ...future.conditions[[length(...future.conditions) + 
[13:37:13.034]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:13.034]                     cond$call), session = sessionInformation(), 
[13:37:13.034]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:13.034]                   signalCondition(cond)
[13:37:13.034]                 }
[13:37:13.034]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:13.034]                 "immediateCondition"))) {
[13:37:13.034]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:13.034]                   ...future.conditions[[length(...future.conditions) + 
[13:37:13.034]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:13.034]                   if (TRUE && !signal) {
[13:37:13.034]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:13.034]                     {
[13:37:13.034]                       inherits <- base::inherits
[13:37:13.034]                       invokeRestart <- base::invokeRestart
[13:37:13.034]                       is.null <- base::is.null
[13:37:13.034]                       muffled <- FALSE
[13:37:13.034]                       if (inherits(cond, "message")) {
[13:37:13.034]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:13.034]                         if (muffled) 
[13:37:13.034]                           invokeRestart("muffleMessage")
[13:37:13.034]                       }
[13:37:13.034]                       else if (inherits(cond, "warning")) {
[13:37:13.034]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:13.034]                         if (muffled) 
[13:37:13.034]                           invokeRestart("muffleWarning")
[13:37:13.034]                       }
[13:37:13.034]                       else if (inherits(cond, "condition")) {
[13:37:13.034]                         if (!is.null(pattern)) {
[13:37:13.034]                           computeRestarts <- base::computeRestarts
[13:37:13.034]                           grepl <- base::grepl
[13:37:13.034]                           restarts <- computeRestarts(cond)
[13:37:13.034]                           for (restart in restarts) {
[13:37:13.034]                             name <- restart$name
[13:37:13.034]                             if (is.null(name)) 
[13:37:13.034]                               next
[13:37:13.034]                             if (!grepl(pattern, name)) 
[13:37:13.034]                               next
[13:37:13.034]                             invokeRestart(restart)
[13:37:13.034]                             muffled <- TRUE
[13:37:13.034]                             break
[13:37:13.034]                           }
[13:37:13.034]                         }
[13:37:13.034]                       }
[13:37:13.034]                       invisible(muffled)
[13:37:13.034]                     }
[13:37:13.034]                     muffleCondition(cond, pattern = "^muffle")
[13:37:13.034]                   }
[13:37:13.034]                 }
[13:37:13.034]                 else {
[13:37:13.034]                   if (TRUE) {
[13:37:13.034]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:13.034]                     {
[13:37:13.034]                       inherits <- base::inherits
[13:37:13.034]                       invokeRestart <- base::invokeRestart
[13:37:13.034]                       is.null <- base::is.null
[13:37:13.034]                       muffled <- FALSE
[13:37:13.034]                       if (inherits(cond, "message")) {
[13:37:13.034]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:13.034]                         if (muffled) 
[13:37:13.034]                           invokeRestart("muffleMessage")
[13:37:13.034]                       }
[13:37:13.034]                       else if (inherits(cond, "warning")) {
[13:37:13.034]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:13.034]                         if (muffled) 
[13:37:13.034]                           invokeRestart("muffleWarning")
[13:37:13.034]                       }
[13:37:13.034]                       else if (inherits(cond, "condition")) {
[13:37:13.034]                         if (!is.null(pattern)) {
[13:37:13.034]                           computeRestarts <- base::computeRestarts
[13:37:13.034]                           grepl <- base::grepl
[13:37:13.034]                           restarts <- computeRestarts(cond)
[13:37:13.034]                           for (restart in restarts) {
[13:37:13.034]                             name <- restart$name
[13:37:13.034]                             if (is.null(name)) 
[13:37:13.034]                               next
[13:37:13.034]                             if (!grepl(pattern, name)) 
[13:37:13.034]                               next
[13:37:13.034]                             invokeRestart(restart)
[13:37:13.034]                             muffled <- TRUE
[13:37:13.034]                             break
[13:37:13.034]                           }
[13:37:13.034]                         }
[13:37:13.034]                       }
[13:37:13.034]                       invisible(muffled)
[13:37:13.034]                     }
[13:37:13.034]                     muffleCondition(cond, pattern = "^muffle")
[13:37:13.034]                   }
[13:37:13.034]                 }
[13:37:13.034]             }
[13:37:13.034]         }))
[13:37:13.034]     }, error = function(ex) {
[13:37:13.034]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:13.034]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:13.034]                 ...future.rng), started = ...future.startTime, 
[13:37:13.034]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:13.034]             version = "1.8"), class = "FutureResult")
[13:37:13.034]     }, finally = {
[13:37:13.034]         if (!identical(...future.workdir, getwd())) 
[13:37:13.034]             setwd(...future.workdir)
[13:37:13.034]         {
[13:37:13.034]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:13.034]                 ...future.oldOptions$nwarnings <- NULL
[13:37:13.034]             }
[13:37:13.034]             base::options(...future.oldOptions)
[13:37:13.034]             if (.Platform$OS.type == "windows") {
[13:37:13.034]                 old_names <- names(...future.oldEnvVars)
[13:37:13.034]                 envs <- base::Sys.getenv()
[13:37:13.034]                 names <- names(envs)
[13:37:13.034]                 common <- intersect(names, old_names)
[13:37:13.034]                 added <- setdiff(names, old_names)
[13:37:13.034]                 removed <- setdiff(old_names, names)
[13:37:13.034]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:13.034]                   envs[common]]
[13:37:13.034]                 NAMES <- toupper(changed)
[13:37:13.034]                 args <- list()
[13:37:13.034]                 for (kk in seq_along(NAMES)) {
[13:37:13.034]                   name <- changed[[kk]]
[13:37:13.034]                   NAME <- NAMES[[kk]]
[13:37:13.034]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:13.034]                     next
[13:37:13.034]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:13.034]                 }
[13:37:13.034]                 NAMES <- toupper(added)
[13:37:13.034]                 for (kk in seq_along(NAMES)) {
[13:37:13.034]                   name <- added[[kk]]
[13:37:13.034]                   NAME <- NAMES[[kk]]
[13:37:13.034]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:13.034]                     next
[13:37:13.034]                   args[[name]] <- ""
[13:37:13.034]                 }
[13:37:13.034]                 NAMES <- toupper(removed)
[13:37:13.034]                 for (kk in seq_along(NAMES)) {
[13:37:13.034]                   name <- removed[[kk]]
[13:37:13.034]                   NAME <- NAMES[[kk]]
[13:37:13.034]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:13.034]                     next
[13:37:13.034]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:13.034]                 }
[13:37:13.034]                 if (length(args) > 0) 
[13:37:13.034]                   base::do.call(base::Sys.setenv, args = args)
[13:37:13.034]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:13.034]             }
[13:37:13.034]             else {
[13:37:13.034]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:13.034]             }
[13:37:13.034]             {
[13:37:13.034]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:13.034]                   0L) {
[13:37:13.034]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:13.034]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:13.034]                   base::options(opts)
[13:37:13.034]                 }
[13:37:13.034]                 {
[13:37:13.034]                   NULL
[13:37:13.034]                   options(future.plan = NULL)
[13:37:13.034]                   if (is.na(NA_character_)) 
[13:37:13.034]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:13.034]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:13.034]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:13.034]                     .init = FALSE)
[13:37:13.034]                 }
[13:37:13.034]             }
[13:37:13.034]         }
[13:37:13.034]     })
[13:37:13.034]     if (TRUE) {
[13:37:13.034]         base::sink(type = "output", split = FALSE)
[13:37:13.034]         if (TRUE) {
[13:37:13.034]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:13.034]         }
[13:37:13.034]         else {
[13:37:13.034]             ...future.result["stdout"] <- base::list(NULL)
[13:37:13.034]         }
[13:37:13.034]         base::close(...future.stdout)
[13:37:13.034]         ...future.stdout <- NULL
[13:37:13.034]     }
[13:37:13.034]     ...future.result$conditions <- ...future.conditions
[13:37:13.034]     ...future.result$finished <- base::Sys.time()
[13:37:13.034]     ...future.result
[13:37:13.034] }
[13:37:13.088] ClusterFuture started
[13:37:13.088] result() for ClusterFuture ...
[13:37:13.089] receiveMessageFromWorker() for ClusterFuture ...
[13:37:13.089] - Validating connection of ClusterFuture
[13:37:13.123] - received message: FutureResult
[13:37:13.123] - Received FutureResult
[13:37:13.123] - Erased future from FutureRegistry
[13:37:13.123] result() for ClusterFuture ...
[13:37:13.123] - result already collected: FutureResult
[13:37:13.123] result() for ClusterFuture ... done
[13:37:13.123] receiveMessageFromWorker() for ClusterFuture ... done
[13:37:13.123] result() for ClusterFuture ... done
[13:37:13.124] result() for ClusterFuture ...
[13:37:13.124] - result already collected: FutureResult
[13:37:13.124] result() for ClusterFuture ... done
[13:37:13.124] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:37:13.124] plan(): nbrOfWorkers() = 2
> n <- nbrOfWorkers()
> message(sprintf("nbrOfWorkers: %d", n))
nbrOfWorkers: 2
> stopifnot(n == length(workers))
> plan(cluster, workers = allButOneWorker)
[13:37:13.125] plan(): Setting new future strategy stack:
[13:37:13.125] List of future strategies:
[13:37:13.125] 1. cluster:
[13:37:13.125]    - args: function (..., workers = "<function ()  >", envir = parent.frame())
[13:37:13.125]    - tweaked: TRUE
[13:37:13.125]    - call: plan(cluster, workers = allButOneWorker)
[13:37:13.126] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:37:13.126] cluster:
[13:37:13.126] - args: function (..., workers = "<function ()  >", envir = parent.frame())
[13:37:13.126] - tweaked: TRUE
[13:37:13.126] - call: plan(cluster, workers = allButOneWorker)
[13:37:13.127] getGlobalsAndPackages() ...
[13:37:13.127] Not searching for globals
[13:37:13.127] - globals: [0] <none>
[13:37:13.127] getGlobalsAndPackages() ... DONE
[13:37:13.133] [local output] makeClusterPSOCK() ...
[13:37:13.134] [local output] Workers: [n = 1] ‘localhost’
[13:37:13.134] [local output] Base port: 11494
[13:37:13.135] [local output] Getting setup options for 1 cluster nodes ...
[13:37:13.135] [local output]  - Node 1 of 1 ...
[13:37:13.135] [local output] localMachine=TRUE => revtunnel=FALSE

[13:37:13.136] [local output] Rscript port: 11494

[13:37:13.136] [local output] Getting setup options for 1 cluster nodes ... done
[13:37:13.137] [local output]  - Parallel setup requested for some PSOCK nodes
[13:37:13.137] [local output] Setting up PSOCK nodes in parallel
[13:37:13.137] List of 36
[13:37:13.137]  $ worker          : chr "localhost"
[13:37:13.137]   ..- attr(*, "localhost")= logi TRUE
[13:37:13.137]  $ master          : chr "localhost"
[13:37:13.137]  $ port            : int 11494
[13:37:13.137]  $ connectTimeout  : num 120
[13:37:13.137]  $ timeout         : num 2592000
[13:37:13.137]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:37:13.137]  $ homogeneous     : logi TRUE
[13:37:13.137]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:37:13.137]  $ rscript_envs    : NULL
[13:37:13.137]  $ rscript_libs    : NULL
[13:37:13.137]  $ rscript_startup : NULL
[13:37:13.137]  $ rscript_sh      : chr "sh"
[13:37:13.137]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:37:13.137]  $ methods         : logi TRUE
[13:37:13.137]  $ socketOptions   : chr "no-delay"
[13:37:13.137]  $ useXDR          : logi FALSE
[13:37:13.137]  $ outfile         : chr "/dev/null"
[13:37:13.137]  $ renice          : int NA
[13:37:13.137]  $ rshcmd          : NULL
[13:37:13.137]  $ user            : chr(0) 
[13:37:13.137]  $ revtunnel       : logi FALSE
[13:37:13.137]  $ rshlogfile      : NULL
[13:37:13.137]  $ rshopts         : chr(0) 
[13:37:13.137]  $ rank            : int 1
[13:37:13.137]  $ manual          : logi FALSE
[13:37:13.137]  $ dryrun          : logi FALSE
[13:37:13.137]  $ quiet           : logi FALSE
[13:37:13.137]  $ setup_strategy  : chr "parallel"
[13:37:13.137]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:37:13.137]  $ pidfile         : chr "/tmp/RtmparxzHK/worker.rank=1.parallelly.parent=86513.151f12a64521.pid"
[13:37:13.137]  $ rshcmd_label    : NULL
[13:37:13.137]  $ rsh_call        : NULL
[13:37:13.137]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:37:13.137]  $ localMachine    : logi TRUE
[13:37:13.137]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:37:13.137]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:37:13.137]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:37:13.137]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:37:13.137]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:37:13.137]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:37:13.137]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:37:13.137]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:37:13.137]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:37:13.137]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:37:13.137]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:37:13.137]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:37:13.137]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:37:13.137]  $ arguments       :List of 28
[13:37:13.137]   ..$ worker          : chr "localhost"
[13:37:13.137]   ..$ master          : NULL
[13:37:13.137]   ..$ port            : int 11494
[13:37:13.137]   ..$ connectTimeout  : num 120
[13:37:13.137]   ..$ timeout         : num 2592000
[13:37:13.137]   ..$ rscript         : NULL
[13:37:13.137]   ..$ homogeneous     : NULL
[13:37:13.137]   ..$ rscript_args    : NULL
[13:37:13.137]   ..$ rscript_envs    : NULL
[13:37:13.137]   ..$ rscript_libs    : NULL
[13:37:13.137]   ..$ rscript_startup : NULL
[13:37:13.137]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:37:13.137]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:37:13.137]   ..$ methods         : logi TRUE
[13:37:13.137]   ..$ socketOptions   : chr "no-delay"
[13:37:13.137]   ..$ useXDR          : logi FALSE
[13:37:13.137]   ..$ outfile         : chr "/dev/null"
[13:37:13.137]   ..$ renice          : int NA
[13:37:13.137]   ..$ rshcmd          : NULL
[13:37:13.137]   ..$ user            : NULL
[13:37:13.137]   ..$ revtunnel       : logi NA
[13:37:13.137]   ..$ rshlogfile      : NULL
[13:37:13.137]   ..$ rshopts         : NULL
[13:37:13.137]   ..$ rank            : int 1
[13:37:13.137]   ..$ manual          : logi FALSE
[13:37:13.137]   ..$ dryrun          : logi FALSE
[13:37:13.137]   ..$ quiet           : logi FALSE
[13:37:13.137]   ..$ setup_strategy  : chr "parallel"
[13:37:13.137]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:37:13.156] [local output] System call to launch all workers:
[13:37:13.156] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmparxzHK/worker.rank=1.parallelly.parent=86513.151f12a64521.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11494 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:37:13.156] [local output] Starting PSOCK main server
[13:37:13.158] [local output] Workers launched
[13:37:13.158] [local output] Waiting for workers to connect back
[13:37:13.158]  - [local output] 0 workers out of 1 ready
[13:37:13.354]  - [local output] 0 workers out of 1 ready
[13:37:13.355]  - [local output] 1 workers out of 1 ready
[13:37:13.355] [local output] Launching of workers completed
[13:37:13.355] [local output] Collecting session information from workers
[13:37:13.356] [local output]  - Worker #1 of 1
[13:37:13.356] [local output] makeClusterPSOCK() ... done
[13:37:13.362] Packages needed by the future expression (n = 0): <none>
[13:37:13.362] Packages needed by future strategies (n = 0): <none>
[13:37:13.362] {
[13:37:13.362]     {
[13:37:13.362]         {
[13:37:13.362]             ...future.startTime <- base::Sys.time()
[13:37:13.362]             {
[13:37:13.362]                 {
[13:37:13.362]                   {
[13:37:13.362]                     base::local({
[13:37:13.362]                       has_future <- base::requireNamespace("future", 
[13:37:13.362]                         quietly = TRUE)
[13:37:13.362]                       if (has_future) {
[13:37:13.362]                         ns <- base::getNamespace("future")
[13:37:13.362]                         version <- ns[[".package"]][["version"]]
[13:37:13.362]                         if (is.null(version)) 
[13:37:13.362]                           version <- utils::packageVersion("future")
[13:37:13.362]                       }
[13:37:13.362]                       else {
[13:37:13.362]                         version <- NULL
[13:37:13.362]                       }
[13:37:13.362]                       if (!has_future || version < "1.8.0") {
[13:37:13.362]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:13.362]                           "", base::R.version$version.string), 
[13:37:13.362]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:13.362]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:13.362]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:13.362]                             "release", "version")], collapse = " "), 
[13:37:13.362]                           hostname = base::Sys.info()[["nodename"]])
[13:37:13.362]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:13.362]                           info)
[13:37:13.362]                         info <- base::paste(info, collapse = "; ")
[13:37:13.362]                         if (!has_future) {
[13:37:13.362]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:13.362]                             info)
[13:37:13.362]                         }
[13:37:13.362]                         else {
[13:37:13.362]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:13.362]                             info, version)
[13:37:13.362]                         }
[13:37:13.362]                         base::stop(msg)
[13:37:13.362]                       }
[13:37:13.362]                     })
[13:37:13.362]                   }
[13:37:13.362]                   ...future.strategy.old <- future::plan("list")
[13:37:13.362]                   options(future.plan = NULL)
[13:37:13.362]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:13.362]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:13.362]                 }
[13:37:13.362]                 ...future.workdir <- getwd()
[13:37:13.362]             }
[13:37:13.362]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:13.362]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:13.362]         }
[13:37:13.362]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:13.362]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:13.362]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:13.362]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:13.362]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:13.362]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:13.362]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:13.362]             base::names(...future.oldOptions))
[13:37:13.362]     }
[13:37:13.362]     if (FALSE) {
[13:37:13.362]     }
[13:37:13.362]     else {
[13:37:13.362]         if (TRUE) {
[13:37:13.362]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:13.362]                 open = "w")
[13:37:13.362]         }
[13:37:13.362]         else {
[13:37:13.362]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:13.362]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:13.362]         }
[13:37:13.362]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:13.362]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:13.362]             base::sink(type = "output", split = FALSE)
[13:37:13.362]             base::close(...future.stdout)
[13:37:13.362]         }, add = TRUE)
[13:37:13.362]     }
[13:37:13.362]     ...future.frame <- base::sys.nframe()
[13:37:13.362]     ...future.conditions <- base::list()
[13:37:13.362]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:13.362]     if (FALSE) {
[13:37:13.362]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:13.362]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:13.362]     }
[13:37:13.362]     ...future.result <- base::tryCatch({
[13:37:13.362]         base::withCallingHandlers({
[13:37:13.362]             ...future.value <- base::withVisible(base::local({
[13:37:13.362]                 ...future.makeSendCondition <- base::local({
[13:37:13.362]                   sendCondition <- NULL
[13:37:13.362]                   function(frame = 1L) {
[13:37:13.362]                     if (is.function(sendCondition)) 
[13:37:13.362]                       return(sendCondition)
[13:37:13.362]                     ns <- getNamespace("parallel")
[13:37:13.362]                     if (exists("sendData", mode = "function", 
[13:37:13.362]                       envir = ns)) {
[13:37:13.362]                       parallel_sendData <- get("sendData", mode = "function", 
[13:37:13.362]                         envir = ns)
[13:37:13.362]                       envir <- sys.frame(frame)
[13:37:13.362]                       master <- NULL
[13:37:13.362]                       while (!identical(envir, .GlobalEnv) && 
[13:37:13.362]                         !identical(envir, emptyenv())) {
[13:37:13.362]                         if (exists("master", mode = "list", envir = envir, 
[13:37:13.362]                           inherits = FALSE)) {
[13:37:13.362]                           master <- get("master", mode = "list", 
[13:37:13.362]                             envir = envir, inherits = FALSE)
[13:37:13.362]                           if (inherits(master, c("SOCKnode", 
[13:37:13.362]                             "SOCK0node"))) {
[13:37:13.362]                             sendCondition <<- function(cond) {
[13:37:13.362]                               data <- list(type = "VALUE", value = cond, 
[13:37:13.362]                                 success = TRUE)
[13:37:13.362]                               parallel_sendData(master, data)
[13:37:13.362]                             }
[13:37:13.362]                             return(sendCondition)
[13:37:13.362]                           }
[13:37:13.362]                         }
[13:37:13.362]                         frame <- frame + 1L
[13:37:13.362]                         envir <- sys.frame(frame)
[13:37:13.362]                       }
[13:37:13.362]                     }
[13:37:13.362]                     sendCondition <<- function(cond) NULL
[13:37:13.362]                   }
[13:37:13.362]                 })
[13:37:13.362]                 withCallingHandlers({
[13:37:13.362]                   NA
[13:37:13.362]                 }, immediateCondition = function(cond) {
[13:37:13.362]                   sendCondition <- ...future.makeSendCondition()
[13:37:13.362]                   sendCondition(cond)
[13:37:13.362]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:13.362]                   {
[13:37:13.362]                     inherits <- base::inherits
[13:37:13.362]                     invokeRestart <- base::invokeRestart
[13:37:13.362]                     is.null <- base::is.null
[13:37:13.362]                     muffled <- FALSE
[13:37:13.362]                     if (inherits(cond, "message")) {
[13:37:13.362]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:13.362]                       if (muffled) 
[13:37:13.362]                         invokeRestart("muffleMessage")
[13:37:13.362]                     }
[13:37:13.362]                     else if (inherits(cond, "warning")) {
[13:37:13.362]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:13.362]                       if (muffled) 
[13:37:13.362]                         invokeRestart("muffleWarning")
[13:37:13.362]                     }
[13:37:13.362]                     else if (inherits(cond, "condition")) {
[13:37:13.362]                       if (!is.null(pattern)) {
[13:37:13.362]                         computeRestarts <- base::computeRestarts
[13:37:13.362]                         grepl <- base::grepl
[13:37:13.362]                         restarts <- computeRestarts(cond)
[13:37:13.362]                         for (restart in restarts) {
[13:37:13.362]                           name <- restart$name
[13:37:13.362]                           if (is.null(name)) 
[13:37:13.362]                             next
[13:37:13.362]                           if (!grepl(pattern, name)) 
[13:37:13.362]                             next
[13:37:13.362]                           invokeRestart(restart)
[13:37:13.362]                           muffled <- TRUE
[13:37:13.362]                           break
[13:37:13.362]                         }
[13:37:13.362]                       }
[13:37:13.362]                     }
[13:37:13.362]                     invisible(muffled)
[13:37:13.362]                   }
[13:37:13.362]                   muffleCondition(cond)
[13:37:13.362]                 })
[13:37:13.362]             }))
[13:37:13.362]             future::FutureResult(value = ...future.value$value, 
[13:37:13.362]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:13.362]                   ...future.rng), globalenv = if (FALSE) 
[13:37:13.362]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:13.362]                     ...future.globalenv.names))
[13:37:13.362]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:13.362]         }, condition = base::local({
[13:37:13.362]             c <- base::c
[13:37:13.362]             inherits <- base::inherits
[13:37:13.362]             invokeRestart <- base::invokeRestart
[13:37:13.362]             length <- base::length
[13:37:13.362]             list <- base::list
[13:37:13.362]             seq.int <- base::seq.int
[13:37:13.362]             signalCondition <- base::signalCondition
[13:37:13.362]             sys.calls <- base::sys.calls
[13:37:13.362]             `[[` <- base::`[[`
[13:37:13.362]             `+` <- base::`+`
[13:37:13.362]             `<<-` <- base::`<<-`
[13:37:13.362]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:13.362]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:13.362]                   3L)]
[13:37:13.362]             }
[13:37:13.362]             function(cond) {
[13:37:13.362]                 is_error <- inherits(cond, "error")
[13:37:13.362]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:13.362]                   NULL)
[13:37:13.362]                 if (is_error) {
[13:37:13.362]                   sessionInformation <- function() {
[13:37:13.362]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:13.362]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:13.362]                       search = base::search(), system = base::Sys.info())
[13:37:13.362]                   }
[13:37:13.362]                   ...future.conditions[[length(...future.conditions) + 
[13:37:13.362]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:13.362]                     cond$call), session = sessionInformation(), 
[13:37:13.362]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:13.362]                   signalCondition(cond)
[13:37:13.362]                 }
[13:37:13.362]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:13.362]                 "immediateCondition"))) {
[13:37:13.362]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:13.362]                   ...future.conditions[[length(...future.conditions) + 
[13:37:13.362]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:13.362]                   if (TRUE && !signal) {
[13:37:13.362]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:13.362]                     {
[13:37:13.362]                       inherits <- base::inherits
[13:37:13.362]                       invokeRestart <- base::invokeRestart
[13:37:13.362]                       is.null <- base::is.null
[13:37:13.362]                       muffled <- FALSE
[13:37:13.362]                       if (inherits(cond, "message")) {
[13:37:13.362]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:13.362]                         if (muffled) 
[13:37:13.362]                           invokeRestart("muffleMessage")
[13:37:13.362]                       }
[13:37:13.362]                       else if (inherits(cond, "warning")) {
[13:37:13.362]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:13.362]                         if (muffled) 
[13:37:13.362]                           invokeRestart("muffleWarning")
[13:37:13.362]                       }
[13:37:13.362]                       else if (inherits(cond, "condition")) {
[13:37:13.362]                         if (!is.null(pattern)) {
[13:37:13.362]                           computeRestarts <- base::computeRestarts
[13:37:13.362]                           grepl <- base::grepl
[13:37:13.362]                           restarts <- computeRestarts(cond)
[13:37:13.362]                           for (restart in restarts) {
[13:37:13.362]                             name <- restart$name
[13:37:13.362]                             if (is.null(name)) 
[13:37:13.362]                               next
[13:37:13.362]                             if (!grepl(pattern, name)) 
[13:37:13.362]                               next
[13:37:13.362]                             invokeRestart(restart)
[13:37:13.362]                             muffled <- TRUE
[13:37:13.362]                             break
[13:37:13.362]                           }
[13:37:13.362]                         }
[13:37:13.362]                       }
[13:37:13.362]                       invisible(muffled)
[13:37:13.362]                     }
[13:37:13.362]                     muffleCondition(cond, pattern = "^muffle")
[13:37:13.362]                   }
[13:37:13.362]                 }
[13:37:13.362]                 else {
[13:37:13.362]                   if (TRUE) {
[13:37:13.362]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:13.362]                     {
[13:37:13.362]                       inherits <- base::inherits
[13:37:13.362]                       invokeRestart <- base::invokeRestart
[13:37:13.362]                       is.null <- base::is.null
[13:37:13.362]                       muffled <- FALSE
[13:37:13.362]                       if (inherits(cond, "message")) {
[13:37:13.362]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:13.362]                         if (muffled) 
[13:37:13.362]                           invokeRestart("muffleMessage")
[13:37:13.362]                       }
[13:37:13.362]                       else if (inherits(cond, "warning")) {
[13:37:13.362]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:13.362]                         if (muffled) 
[13:37:13.362]                           invokeRestart("muffleWarning")
[13:37:13.362]                       }
[13:37:13.362]                       else if (inherits(cond, "condition")) {
[13:37:13.362]                         if (!is.null(pattern)) {
[13:37:13.362]                           computeRestarts <- base::computeRestarts
[13:37:13.362]                           grepl <- base::grepl
[13:37:13.362]                           restarts <- computeRestarts(cond)
[13:37:13.362]                           for (restart in restarts) {
[13:37:13.362]                             name <- restart$name
[13:37:13.362]                             if (is.null(name)) 
[13:37:13.362]                               next
[13:37:13.362]                             if (!grepl(pattern, name)) 
[13:37:13.362]                               next
[13:37:13.362]                             invokeRestart(restart)
[13:37:13.362]                             muffled <- TRUE
[13:37:13.362]                             break
[13:37:13.362]                           }
[13:37:13.362]                         }
[13:37:13.362]                       }
[13:37:13.362]                       invisible(muffled)
[13:37:13.362]                     }
[13:37:13.362]                     muffleCondition(cond, pattern = "^muffle")
[13:37:13.362]                   }
[13:37:13.362]                 }
[13:37:13.362]             }
[13:37:13.362]         }))
[13:37:13.362]     }, error = function(ex) {
[13:37:13.362]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:13.362]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:13.362]                 ...future.rng), started = ...future.startTime, 
[13:37:13.362]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:13.362]             version = "1.8"), class = "FutureResult")
[13:37:13.362]     }, finally = {
[13:37:13.362]         if (!identical(...future.workdir, getwd())) 
[13:37:13.362]             setwd(...future.workdir)
[13:37:13.362]         {
[13:37:13.362]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:13.362]                 ...future.oldOptions$nwarnings <- NULL
[13:37:13.362]             }
[13:37:13.362]             base::options(...future.oldOptions)
[13:37:13.362]             if (.Platform$OS.type == "windows") {
[13:37:13.362]                 old_names <- names(...future.oldEnvVars)
[13:37:13.362]                 envs <- base::Sys.getenv()
[13:37:13.362]                 names <- names(envs)
[13:37:13.362]                 common <- intersect(names, old_names)
[13:37:13.362]                 added <- setdiff(names, old_names)
[13:37:13.362]                 removed <- setdiff(old_names, names)
[13:37:13.362]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:13.362]                   envs[common]]
[13:37:13.362]                 NAMES <- toupper(changed)
[13:37:13.362]                 args <- list()
[13:37:13.362]                 for (kk in seq_along(NAMES)) {
[13:37:13.362]                   name <- changed[[kk]]
[13:37:13.362]                   NAME <- NAMES[[kk]]
[13:37:13.362]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:13.362]                     next
[13:37:13.362]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:13.362]                 }
[13:37:13.362]                 NAMES <- toupper(added)
[13:37:13.362]                 for (kk in seq_along(NAMES)) {
[13:37:13.362]                   name <- added[[kk]]
[13:37:13.362]                   NAME <- NAMES[[kk]]
[13:37:13.362]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:13.362]                     next
[13:37:13.362]                   args[[name]] <- ""
[13:37:13.362]                 }
[13:37:13.362]                 NAMES <- toupper(removed)
[13:37:13.362]                 for (kk in seq_along(NAMES)) {
[13:37:13.362]                   name <- removed[[kk]]
[13:37:13.362]                   NAME <- NAMES[[kk]]
[13:37:13.362]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:13.362]                     next
[13:37:13.362]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:13.362]                 }
[13:37:13.362]                 if (length(args) > 0) 
[13:37:13.362]                   base::do.call(base::Sys.setenv, args = args)
[13:37:13.362]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:13.362]             }
[13:37:13.362]             else {
[13:37:13.362]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:13.362]             }
[13:37:13.362]             {
[13:37:13.362]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:13.362]                   0L) {
[13:37:13.362]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:13.362]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:13.362]                   base::options(opts)
[13:37:13.362]                 }
[13:37:13.362]                 {
[13:37:13.362]                   NULL
[13:37:13.362]                   options(future.plan = NULL)
[13:37:13.362]                   if (is.na(NA_character_)) 
[13:37:13.362]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:13.362]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:13.362]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:13.362]                     .init = FALSE)
[13:37:13.362]                 }
[13:37:13.362]             }
[13:37:13.362]         }
[13:37:13.362]     })
[13:37:13.362]     if (TRUE) {
[13:37:13.362]         base::sink(type = "output", split = FALSE)
[13:37:13.362]         if (TRUE) {
[13:37:13.362]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:13.362]         }
[13:37:13.362]         else {
[13:37:13.362]             ...future.result["stdout"] <- base::list(NULL)
[13:37:13.362]         }
[13:37:13.362]         base::close(...future.stdout)
[13:37:13.362]         ...future.stdout <- NULL
[13:37:13.362]     }
[13:37:13.362]     ...future.result$conditions <- ...future.conditions
[13:37:13.362]     ...future.result$finished <- base::Sys.time()
[13:37:13.362]     ...future.result
[13:37:13.362] }
[13:37:13.415] ClusterFuture started
[13:37:13.415] result() for ClusterFuture ...
[13:37:13.416] receiveMessageFromWorker() for ClusterFuture ...
[13:37:13.416] - Validating connection of ClusterFuture
[13:37:13.449] - received message: FutureResult
[13:37:13.449] - Received FutureResult
[13:37:13.449] - Erased future from FutureRegistry
[13:37:13.450] result() for ClusterFuture ...
[13:37:13.450] - result already collected: FutureResult
[13:37:13.450] result() for ClusterFuture ... done
[13:37:13.450] receiveMessageFromWorker() for ClusterFuture ... done
[13:37:13.450] result() for ClusterFuture ... done
[13:37:13.450] result() for ClusterFuture ...
[13:37:13.450] - result already collected: FutureResult
[13:37:13.450] result() for ClusterFuture ... done
[13:37:13.450] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:37:13.457] plan(): nbrOfWorkers() = 1
> n <- nbrOfWorkers()
> message(sprintf("nbrOfWorkers: %d", n))
nbrOfWorkers: 1
> stopifnot(n == max(1L, nworkers - 1L))
> 
> message("Type of future: constant")
Type of future: constant
> n <- nbrOfWorkers(constant)
> message(sprintf("nbrOfWorkers: %d", n))
nbrOfWorkers: 1
> stopifnot(n == 1)
> 
> message("Type of future: <future>")
Type of future: <future>
> foo <- structure(function(...) NULL, class = c("future"))
> n <- nbrOfWorkers(foo)
> message(sprintf("nbrOfWorkers: %g", n))
nbrOfWorkers: Inf
> stopifnot(n >= 0, is.infinite(n))
> 
> 
> message("Type of future: cluster with workers = <cluster object>")
Type of future: cluster with workers = <cluster object>
> 
> workers <- makeClusterPSOCK(2L)
[13:37:13.462] [local output] makeClusterPSOCK() ...
[13:37:13.465] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:37:13.465] [local output] Base port: 11494
[13:37:13.465] [local output] Getting setup options for 2 cluster nodes ...
[13:37:13.465] [local output]  - Node 1 of 2 ...
[13:37:13.466] [local output] localMachine=TRUE => revtunnel=FALSE

[13:37:13.466] [local output] Rscript port: 11494

[13:37:13.467] [local output]  - Node 2 of 2 ...
[13:37:13.467] [local output] localMachine=TRUE => revtunnel=FALSE

[13:37:13.468] [local output] Rscript port: 11494

[13:37:13.468] [local output] Getting setup options for 2 cluster nodes ... done
[13:37:13.468] [local output]  - Parallel setup requested for some PSOCK nodes
[13:37:13.468] [local output] Setting up PSOCK nodes in parallel
[13:37:13.468] List of 36
[13:37:13.468]  $ worker          : chr "localhost"
[13:37:13.468]   ..- attr(*, "localhost")= logi TRUE
[13:37:13.468]  $ master          : chr "localhost"
[13:37:13.468]  $ port            : int 11494
[13:37:13.468]  $ connectTimeout  : num 120
[13:37:13.468]  $ timeout         : num 2592000
[13:37:13.468]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:37:13.468]  $ homogeneous     : logi TRUE
[13:37:13.468]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:37:13.468]  $ rscript_envs    : NULL
[13:37:13.468]  $ rscript_libs    : NULL
[13:37:13.468]  $ rscript_startup : NULL
[13:37:13.468]  $ rscript_sh      : chr "sh"
[13:37:13.468]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:37:13.468]  $ methods         : logi TRUE
[13:37:13.468]  $ socketOptions   : chr "no-delay"
[13:37:13.468]  $ useXDR          : logi FALSE
[13:37:13.468]  $ outfile         : chr "/dev/null"
[13:37:13.468]  $ renice          : int NA
[13:37:13.468]  $ rshcmd          : NULL
[13:37:13.468]  $ user            : chr(0) 
[13:37:13.468]  $ revtunnel       : logi FALSE
[13:37:13.468]  $ rshlogfile      : NULL
[13:37:13.468]  $ rshopts         : chr(0) 
[13:37:13.468]  $ rank            : int 1
[13:37:13.468]  $ manual          : logi FALSE
[13:37:13.468]  $ dryrun          : logi FALSE
[13:37:13.468]  $ quiet           : logi FALSE
[13:37:13.468]  $ setup_strategy  : chr "parallel"
[13:37:13.468]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:37:13.468]  $ pidfile         : chr "/tmp/RtmparxzHK/worker.rank=1.parallelly.parent=86513.151f17e20584.pid"
[13:37:13.468]  $ rshcmd_label    : NULL
[13:37:13.468]  $ rsh_call        : NULL
[13:37:13.468]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:37:13.468]  $ localMachine    : logi TRUE
[13:37:13.468]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:37:13.468]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:37:13.468]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:37:13.468]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:37:13.468]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:37:13.468]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:37:13.468]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:37:13.468]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:37:13.468]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:37:13.468]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:37:13.468]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:37:13.468]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:37:13.468]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:37:13.468]  $ arguments       :List of 28
[13:37:13.468]   ..$ worker          : chr "localhost"
[13:37:13.468]   ..$ master          : NULL
[13:37:13.468]   ..$ port            : int 11494
[13:37:13.468]   ..$ connectTimeout  : num 120
[13:37:13.468]   ..$ timeout         : num 2592000
[13:37:13.468]   ..$ rscript         : NULL
[13:37:13.468]   ..$ homogeneous     : NULL
[13:37:13.468]   ..$ rscript_args    : NULL
[13:37:13.468]   ..$ rscript_envs    : NULL
[13:37:13.468]   ..$ rscript_libs    : NULL
[13:37:13.468]   ..$ rscript_startup : NULL
[13:37:13.468]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:37:13.468]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:37:13.468]   ..$ methods         : logi TRUE
[13:37:13.468]   ..$ socketOptions   : chr "no-delay"
[13:37:13.468]   ..$ useXDR          : logi FALSE
[13:37:13.468]   ..$ outfile         : chr "/dev/null"
[13:37:13.468]   ..$ renice          : int NA
[13:37:13.468]   ..$ rshcmd          : NULL
[13:37:13.468]   ..$ user            : NULL
[13:37:13.468]   ..$ revtunnel       : logi NA
[13:37:13.468]   ..$ rshlogfile      : NULL
[13:37:13.468]   ..$ rshopts         : NULL
[13:37:13.468]   ..$ rank            : int 1
[13:37:13.468]   ..$ manual          : logi FALSE
[13:37:13.468]   ..$ dryrun          : logi FALSE
[13:37:13.468]   ..$ quiet           : logi FALSE
[13:37:13.468]   ..$ setup_strategy  : chr "parallel"
[13:37:13.468]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:37:13.487] [local output] System call to launch all workers:
[13:37:13.487] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmparxzHK/worker.rank=1.parallelly.parent=86513.151f17e20584.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11494 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:37:13.487] [local output] Starting PSOCK main server
[13:37:13.488] [local output] Workers launched
[13:37:13.488] [local output] Waiting for workers to connect back
[13:37:13.489]  - [local output] 0 workers out of 2 ready
[13:37:13.728]  - [local output] 0 workers out of 2 ready
[13:37:13.728]  - [local output] 1 workers out of 2 ready
[13:37:13.738]  - [local output] 1 workers out of 2 ready
[13:37:13.739]  - [local output] 2 workers out of 2 ready
[13:37:13.739] [local output] Launching of workers completed
[13:37:13.739] [local output] Collecting session information from workers
[13:37:13.740] [local output]  - Worker #1 of 2
[13:37:13.740] [local output]  - Worker #2 of 2
[13:37:13.740] [local output] makeClusterPSOCK() ... done
> print(workers)
Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.3.3 (2024-02-29), platform x86_64-pc-linux-gnu)
> plan(cluster, workers = workers)
[13:37:13.745] plan(): Setting new future strategy stack:
[13:37:13.745] List of future strategies:
[13:37:13.745] 1. cluster:
[13:37:13.745]    - args: function (..., workers = "<Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.3.3 (2024-02-29), platform x86_64-pc-linux-gnu)>", envir = parent.frame())
[13:37:13.745]    - tweaked: TRUE
[13:37:13.745]    - call: plan(cluster, workers = workers)
[13:37:13.747] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:37:13.747] cluster:
[13:37:13.747] - args: function (..., workers = "<Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.3.3 (2024-02-29), platform x86_64-pc-linux-gnu)>", envir = parent.frame())
[13:37:13.747] - tweaked: TRUE
[13:37:13.747] - call: plan(cluster, workers = workers)
[13:37:13.749] getGlobalsAndPackages() ...
[13:37:13.749] Not searching for globals
[13:37:13.749] - globals: [0] <none>
[13:37:13.749] getGlobalsAndPackages() ... DONE
[13:37:13.760] Packages needed by the future expression (n = 0): <none>
[13:37:13.760] Packages needed by future strategies (n = 0): <none>
[13:37:13.760] {
[13:37:13.760]     {
[13:37:13.760]         {
[13:37:13.760]             ...future.startTime <- base::Sys.time()
[13:37:13.760]             {
[13:37:13.760]                 {
[13:37:13.760]                   {
[13:37:13.760]                     base::local({
[13:37:13.760]                       has_future <- base::requireNamespace("future", 
[13:37:13.760]                         quietly = TRUE)
[13:37:13.760]                       if (has_future) {
[13:37:13.760]                         ns <- base::getNamespace("future")
[13:37:13.760]                         version <- ns[[".package"]][["version"]]
[13:37:13.760]                         if (is.null(version)) 
[13:37:13.760]                           version <- utils::packageVersion("future")
[13:37:13.760]                       }
[13:37:13.760]                       else {
[13:37:13.760]                         version <- NULL
[13:37:13.760]                       }
[13:37:13.760]                       if (!has_future || version < "1.8.0") {
[13:37:13.760]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:13.760]                           "", base::R.version$version.string), 
[13:37:13.760]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:13.760]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:13.760]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:13.760]                             "release", "version")], collapse = " "), 
[13:37:13.760]                           hostname = base::Sys.info()[["nodename"]])
[13:37:13.760]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:13.760]                           info)
[13:37:13.760]                         info <- base::paste(info, collapse = "; ")
[13:37:13.760]                         if (!has_future) {
[13:37:13.760]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:13.760]                             info)
[13:37:13.760]                         }
[13:37:13.760]                         else {
[13:37:13.760]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:13.760]                             info, version)
[13:37:13.760]                         }
[13:37:13.760]                         base::stop(msg)
[13:37:13.760]                       }
[13:37:13.760]                     })
[13:37:13.760]                   }
[13:37:13.760]                   ...future.strategy.old <- future::plan("list")
[13:37:13.760]                   options(future.plan = NULL)
[13:37:13.760]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:13.760]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:13.760]                 }
[13:37:13.760]                 ...future.workdir <- getwd()
[13:37:13.760]             }
[13:37:13.760]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:13.760]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:13.760]         }
[13:37:13.760]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:13.760]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:13.760]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:13.760]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:13.760]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:13.760]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:13.760]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:13.760]             base::names(...future.oldOptions))
[13:37:13.760]     }
[13:37:13.760]     if (FALSE) {
[13:37:13.760]     }
[13:37:13.760]     else {
[13:37:13.760]         if (TRUE) {
[13:37:13.760]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:13.760]                 open = "w")
[13:37:13.760]         }
[13:37:13.760]         else {
[13:37:13.760]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:13.760]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:13.760]         }
[13:37:13.760]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:13.760]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:13.760]             base::sink(type = "output", split = FALSE)
[13:37:13.760]             base::close(...future.stdout)
[13:37:13.760]         }, add = TRUE)
[13:37:13.760]     }
[13:37:13.760]     ...future.frame <- base::sys.nframe()
[13:37:13.760]     ...future.conditions <- base::list()
[13:37:13.760]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:13.760]     if (FALSE) {
[13:37:13.760]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:13.760]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:13.760]     }
[13:37:13.760]     ...future.result <- base::tryCatch({
[13:37:13.760]         base::withCallingHandlers({
[13:37:13.760]             ...future.value <- base::withVisible(base::local({
[13:37:13.760]                 ...future.makeSendCondition <- base::local({
[13:37:13.760]                   sendCondition <- NULL
[13:37:13.760]                   function(frame = 1L) {
[13:37:13.760]                     if (is.function(sendCondition)) 
[13:37:13.760]                       return(sendCondition)
[13:37:13.760]                     ns <- getNamespace("parallel")
[13:37:13.760]                     if (exists("sendData", mode = "function", 
[13:37:13.760]                       envir = ns)) {
[13:37:13.760]                       parallel_sendData <- get("sendData", mode = "function", 
[13:37:13.760]                         envir = ns)
[13:37:13.760]                       envir <- sys.frame(frame)
[13:37:13.760]                       master <- NULL
[13:37:13.760]                       while (!identical(envir, .GlobalEnv) && 
[13:37:13.760]                         !identical(envir, emptyenv())) {
[13:37:13.760]                         if (exists("master", mode = "list", envir = envir, 
[13:37:13.760]                           inherits = FALSE)) {
[13:37:13.760]                           master <- get("master", mode = "list", 
[13:37:13.760]                             envir = envir, inherits = FALSE)
[13:37:13.760]                           if (inherits(master, c("SOCKnode", 
[13:37:13.760]                             "SOCK0node"))) {
[13:37:13.760]                             sendCondition <<- function(cond) {
[13:37:13.760]                               data <- list(type = "VALUE", value = cond, 
[13:37:13.760]                                 success = TRUE)
[13:37:13.760]                               parallel_sendData(master, data)
[13:37:13.760]                             }
[13:37:13.760]                             return(sendCondition)
[13:37:13.760]                           }
[13:37:13.760]                         }
[13:37:13.760]                         frame <- frame + 1L
[13:37:13.760]                         envir <- sys.frame(frame)
[13:37:13.760]                       }
[13:37:13.760]                     }
[13:37:13.760]                     sendCondition <<- function(cond) NULL
[13:37:13.760]                   }
[13:37:13.760]                 })
[13:37:13.760]                 withCallingHandlers({
[13:37:13.760]                   NA
[13:37:13.760]                 }, immediateCondition = function(cond) {
[13:37:13.760]                   sendCondition <- ...future.makeSendCondition()
[13:37:13.760]                   sendCondition(cond)
[13:37:13.760]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:13.760]                   {
[13:37:13.760]                     inherits <- base::inherits
[13:37:13.760]                     invokeRestart <- base::invokeRestart
[13:37:13.760]                     is.null <- base::is.null
[13:37:13.760]                     muffled <- FALSE
[13:37:13.760]                     if (inherits(cond, "message")) {
[13:37:13.760]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:13.760]                       if (muffled) 
[13:37:13.760]                         invokeRestart("muffleMessage")
[13:37:13.760]                     }
[13:37:13.760]                     else if (inherits(cond, "warning")) {
[13:37:13.760]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:13.760]                       if (muffled) 
[13:37:13.760]                         invokeRestart("muffleWarning")
[13:37:13.760]                     }
[13:37:13.760]                     else if (inherits(cond, "condition")) {
[13:37:13.760]                       if (!is.null(pattern)) {
[13:37:13.760]                         computeRestarts <- base::computeRestarts
[13:37:13.760]                         grepl <- base::grepl
[13:37:13.760]                         restarts <- computeRestarts(cond)
[13:37:13.760]                         for (restart in restarts) {
[13:37:13.760]                           name <- restart$name
[13:37:13.760]                           if (is.null(name)) 
[13:37:13.760]                             next
[13:37:13.760]                           if (!grepl(pattern, name)) 
[13:37:13.760]                             next
[13:37:13.760]                           invokeRestart(restart)
[13:37:13.760]                           muffled <- TRUE
[13:37:13.760]                           break
[13:37:13.760]                         }
[13:37:13.760]                       }
[13:37:13.760]                     }
[13:37:13.760]                     invisible(muffled)
[13:37:13.760]                   }
[13:37:13.760]                   muffleCondition(cond)
[13:37:13.760]                 })
[13:37:13.760]             }))
[13:37:13.760]             future::FutureResult(value = ...future.value$value, 
[13:37:13.760]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:13.760]                   ...future.rng), globalenv = if (FALSE) 
[13:37:13.760]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:13.760]                     ...future.globalenv.names))
[13:37:13.760]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:13.760]         }, condition = base::local({
[13:37:13.760]             c <- base::c
[13:37:13.760]             inherits <- base::inherits
[13:37:13.760]             invokeRestart <- base::invokeRestart
[13:37:13.760]             length <- base::length
[13:37:13.760]             list <- base::list
[13:37:13.760]             seq.int <- base::seq.int
[13:37:13.760]             signalCondition <- base::signalCondition
[13:37:13.760]             sys.calls <- base::sys.calls
[13:37:13.760]             `[[` <- base::`[[`
[13:37:13.760]             `+` <- base::`+`
[13:37:13.760]             `<<-` <- base::`<<-`
[13:37:13.760]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:13.760]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:13.760]                   3L)]
[13:37:13.760]             }
[13:37:13.760]             function(cond) {
[13:37:13.760]                 is_error <- inherits(cond, "error")
[13:37:13.760]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:13.760]                   NULL)
[13:37:13.760]                 if (is_error) {
[13:37:13.760]                   sessionInformation <- function() {
[13:37:13.760]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:13.760]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:13.760]                       search = base::search(), system = base::Sys.info())
[13:37:13.760]                   }
[13:37:13.760]                   ...future.conditions[[length(...future.conditions) + 
[13:37:13.760]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:13.760]                     cond$call), session = sessionInformation(), 
[13:37:13.760]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:13.760]                   signalCondition(cond)
[13:37:13.760]                 }
[13:37:13.760]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:13.760]                 "immediateCondition"))) {
[13:37:13.760]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:13.760]                   ...future.conditions[[length(...future.conditions) + 
[13:37:13.760]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:13.760]                   if (TRUE && !signal) {
[13:37:13.760]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:13.760]                     {
[13:37:13.760]                       inherits <- base::inherits
[13:37:13.760]                       invokeRestart <- base::invokeRestart
[13:37:13.760]                       is.null <- base::is.null
[13:37:13.760]                       muffled <- FALSE
[13:37:13.760]                       if (inherits(cond, "message")) {
[13:37:13.760]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:13.760]                         if (muffled) 
[13:37:13.760]                           invokeRestart("muffleMessage")
[13:37:13.760]                       }
[13:37:13.760]                       else if (inherits(cond, "warning")) {
[13:37:13.760]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:13.760]                         if (muffled) 
[13:37:13.760]                           invokeRestart("muffleWarning")
[13:37:13.760]                       }
[13:37:13.760]                       else if (inherits(cond, "condition")) {
[13:37:13.760]                         if (!is.null(pattern)) {
[13:37:13.760]                           computeRestarts <- base::computeRestarts
[13:37:13.760]                           grepl <- base::grepl
[13:37:13.760]                           restarts <- computeRestarts(cond)
[13:37:13.760]                           for (restart in restarts) {
[13:37:13.760]                             name <- restart$name
[13:37:13.760]                             if (is.null(name)) 
[13:37:13.760]                               next
[13:37:13.760]                             if (!grepl(pattern, name)) 
[13:37:13.760]                               next
[13:37:13.760]                             invokeRestart(restart)
[13:37:13.760]                             muffled <- TRUE
[13:37:13.760]                             break
[13:37:13.760]                           }
[13:37:13.760]                         }
[13:37:13.760]                       }
[13:37:13.760]                       invisible(muffled)
[13:37:13.760]                     }
[13:37:13.760]                     muffleCondition(cond, pattern = "^muffle")
[13:37:13.760]                   }
[13:37:13.760]                 }
[13:37:13.760]                 else {
[13:37:13.760]                   if (TRUE) {
[13:37:13.760]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:13.760]                     {
[13:37:13.760]                       inherits <- base::inherits
[13:37:13.760]                       invokeRestart <- base::invokeRestart
[13:37:13.760]                       is.null <- base::is.null
[13:37:13.760]                       muffled <- FALSE
[13:37:13.760]                       if (inherits(cond, "message")) {
[13:37:13.760]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:13.760]                         if (muffled) 
[13:37:13.760]                           invokeRestart("muffleMessage")
[13:37:13.760]                       }
[13:37:13.760]                       else if (inherits(cond, "warning")) {
[13:37:13.760]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:13.760]                         if (muffled) 
[13:37:13.760]                           invokeRestart("muffleWarning")
[13:37:13.760]                       }
[13:37:13.760]                       else if (inherits(cond, "condition")) {
[13:37:13.760]                         if (!is.null(pattern)) {
[13:37:13.760]                           computeRestarts <- base::computeRestarts
[13:37:13.760]                           grepl <- base::grepl
[13:37:13.760]                           restarts <- computeRestarts(cond)
[13:37:13.760]                           for (restart in restarts) {
[13:37:13.760]                             name <- restart$name
[13:37:13.760]                             if (is.null(name)) 
[13:37:13.760]                               next
[13:37:13.760]                             if (!grepl(pattern, name)) 
[13:37:13.760]                               next
[13:37:13.760]                             invokeRestart(restart)
[13:37:13.760]                             muffled <- TRUE
[13:37:13.760]                             break
[13:37:13.760]                           }
[13:37:13.760]                         }
[13:37:13.760]                       }
[13:37:13.760]                       invisible(muffled)
[13:37:13.760]                     }
[13:37:13.760]                     muffleCondition(cond, pattern = "^muffle")
[13:37:13.760]                   }
[13:37:13.760]                 }
[13:37:13.760]             }
[13:37:13.760]         }))
[13:37:13.760]     }, error = function(ex) {
[13:37:13.760]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:13.760]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:13.760]                 ...future.rng), started = ...future.startTime, 
[13:37:13.760]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:13.760]             version = "1.8"), class = "FutureResult")
[13:37:13.760]     }, finally = {
[13:37:13.760]         if (!identical(...future.workdir, getwd())) 
[13:37:13.760]             setwd(...future.workdir)
[13:37:13.760]         {
[13:37:13.760]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:13.760]                 ...future.oldOptions$nwarnings <- NULL
[13:37:13.760]             }
[13:37:13.760]             base::options(...future.oldOptions)
[13:37:13.760]             if (.Platform$OS.type == "windows") {
[13:37:13.760]                 old_names <- names(...future.oldEnvVars)
[13:37:13.760]                 envs <- base::Sys.getenv()
[13:37:13.760]                 names <- names(envs)
[13:37:13.760]                 common <- intersect(names, old_names)
[13:37:13.760]                 added <- setdiff(names, old_names)
[13:37:13.760]                 removed <- setdiff(old_names, names)
[13:37:13.760]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:13.760]                   envs[common]]
[13:37:13.760]                 NAMES <- toupper(changed)
[13:37:13.760]                 args <- list()
[13:37:13.760]                 for (kk in seq_along(NAMES)) {
[13:37:13.760]                   name <- changed[[kk]]
[13:37:13.760]                   NAME <- NAMES[[kk]]
[13:37:13.760]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:13.760]                     next
[13:37:13.760]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:13.760]                 }
[13:37:13.760]                 NAMES <- toupper(added)
[13:37:13.760]                 for (kk in seq_along(NAMES)) {
[13:37:13.760]                   name <- added[[kk]]
[13:37:13.760]                   NAME <- NAMES[[kk]]
[13:37:13.760]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:13.760]                     next
[13:37:13.760]                   args[[name]] <- ""
[13:37:13.760]                 }
[13:37:13.760]                 NAMES <- toupper(removed)
[13:37:13.760]                 for (kk in seq_along(NAMES)) {
[13:37:13.760]                   name <- removed[[kk]]
[13:37:13.760]                   NAME <- NAMES[[kk]]
[13:37:13.760]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:13.760]                     next
[13:37:13.760]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:13.760]                 }
[13:37:13.760]                 if (length(args) > 0) 
[13:37:13.760]                   base::do.call(base::Sys.setenv, args = args)
[13:37:13.760]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:13.760]             }
[13:37:13.760]             else {
[13:37:13.760]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:13.760]             }
[13:37:13.760]             {
[13:37:13.760]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:13.760]                   0L) {
[13:37:13.760]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:13.760]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:13.760]                   base::options(opts)
[13:37:13.760]                 }
[13:37:13.760]                 {
[13:37:13.760]                   NULL
[13:37:13.760]                   options(future.plan = NULL)
[13:37:13.760]                   if (is.na(NA_character_)) 
[13:37:13.760]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:13.760]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:13.760]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:13.760]                     .init = FALSE)
[13:37:13.760]                 }
[13:37:13.760]             }
[13:37:13.760]         }
[13:37:13.760]     })
[13:37:13.760]     if (TRUE) {
[13:37:13.760]         base::sink(type = "output", split = FALSE)
[13:37:13.760]         if (TRUE) {
[13:37:13.760]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:13.760]         }
[13:37:13.760]         else {
[13:37:13.760]             ...future.result["stdout"] <- base::list(NULL)
[13:37:13.760]         }
[13:37:13.760]         base::close(...future.stdout)
[13:37:13.760]         ...future.stdout <- NULL
[13:37:13.760]     }
[13:37:13.760]     ...future.result$conditions <- ...future.conditions
[13:37:13.760]     ...future.result$finished <- base::Sys.time()
[13:37:13.760]     ...future.result
[13:37:13.760] }
[13:37:13.815] ClusterFuture started
[13:37:13.816] result() for ClusterFuture ...
[13:37:13.816] receiveMessageFromWorker() for ClusterFuture ...
[13:37:13.816] - Validating connection of ClusterFuture
[13:37:13.850] - received message: FutureResult
[13:37:13.850] - Received FutureResult
[13:37:13.850] - Erased future from FutureRegistry
[13:37:13.850] result() for ClusterFuture ...
[13:37:13.850] - result already collected: FutureResult
[13:37:13.850] result() for ClusterFuture ... done
[13:37:13.851] receiveMessageFromWorker() for ClusterFuture ... done
[13:37:13.851] result() for ClusterFuture ... done
[13:37:13.851] result() for ClusterFuture ...
[13:37:13.851] - result already collected: FutureResult
[13:37:13.851] result() for ClusterFuture ... done
[13:37:13.851] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:37:13.851] plan(): nbrOfWorkers() = 2
> n <- nbrOfWorkers()
> message(sprintf("nbrOfWorkers: %g", n))
nbrOfWorkers: 2
> stopifnot(n == length(workers))
> parallel::stopCluster(workers)
> 
> message("*** nbrOfWorkers() ... DONE")
*** nbrOfWorkers() ... DONE
> 
> source("incl/end.R")
[13:37:13.853] plan(): Setting new future strategy stack:
[13:37:13.853] List of future strategies:
[13:37:13.853] 1. FutureStrategy:
[13:37:13.853]    - args: function (..., envir = parent.frame())
[13:37:13.853]    - tweaked: FALSE
[13:37:13.853]    - call: future::plan(oplan)
[13:37:13.853] plan(): nbrOfWorkers() = 1
> 
