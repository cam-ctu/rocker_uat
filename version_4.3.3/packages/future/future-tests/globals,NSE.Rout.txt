
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[10:33:03.452] plan(): Setting new future strategy stack:
[10:33:03.453] List of future strategies:
[10:33:03.453] 1. sequential:
[10:33:03.453]    - args: function (..., envir = parent.frame())
[10:33:03.453]    - tweaked: FALSE
[10:33:03.453]    - call: future::plan("sequential")
[10:33:03.467] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** Globals w/ non-standard evaluation (NSE) ...")
*** Globals w/ non-standard evaluation (NSE) ...
> 
> data <- data.frame(x = 1:5, y = 1:5)
> v0 <- subset(data, x < 3)$y
> 
> for (strategy in supportedStrategies()) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("- Strategy: %s ...", strategy))
+   
+   plan(strategy)
+ 
+   ## Assert option is passed on to future
+   options(future.globals.onMissing = "error")
+   opt1 %<-% getOption("future.globals.onMissing")
+   stopifnot(identical(opt1, "error"))
+ 
+   options(future.globals.onMissing = "ignore")
+   opt2 %<-% getOption("future.globals.onMissing")
+   stopifnot(identical(opt2, "ignore"))
+ 
+   options(future.globals.onMissing = "error")
+   res <- try({ v1 %<-% subset(data, x < 3)$y }, silent = TRUE)
+   stopifnot(inherits(res, "try-error"))
+ 
+   options(future.globals.onMissing = "ignore")
+   v2 %<-% subset(data, x < 3)$y
+   stopifnot(identical(v2, v0))
+ 
+   ## Nested futures (requires option is passed on to future)
+   plan(list(sequential, strategy))
+   options(future.globals.onMissing = "ignore")
+   v3 %<-% {
+     a %<-% subset(data, x < 3)$y
+     a
+   } %lazy% TRUE
+   stopifnot(identical(v3, v0))
+ 
+   message(sprintf("- Strategy: %s ... DONE", strategy))
+ }
- Strategy: sequential ...
[10:33:03.496] plan(): Setting new future strategy stack:
[10:33:03.496] List of future strategies:
[10:33:03.496] 1. sequential:
[10:33:03.496]    - args: function (..., envir = parent.frame())
[10:33:03.496]    - tweaked: FALSE
[10:33:03.496]    - call: plan(strategy)
[10:33:03.509] plan(): nbrOfWorkers() = 1
[10:33:03.511] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:33:03.512] Searching for globals...
[10:33:03.516] - globals found: [1] ‘getOption’
[10:33:03.516] Searching for globals ... DONE
[10:33:03.516] Resolving globals: FALSE
[10:33:03.517] 
[10:33:03.517] 
[10:33:03.517] getGlobalsAndPackages() ... DONE
[10:33:03.518] run() for ‘Future’ ...
[10:33:03.518] - state: ‘created’
[10:33:03.518] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:33:03.519] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:33:03.519] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:33:03.519]   - Field: ‘label’
[10:33:03.519]   - Field: ‘local’
[10:33:03.519]   - Field: ‘owner’
[10:33:03.519]   - Field: ‘envir’
[10:33:03.519]   - Field: ‘packages’
[10:33:03.519]   - Field: ‘gc’
[10:33:03.519]   - Field: ‘conditions’
[10:33:03.520]   - Field: ‘expr’
[10:33:03.520]   - Field: ‘uuid’
[10:33:03.520]   - Field: ‘seed’
[10:33:03.520]   - Field: ‘version’
[10:33:03.520]   - Field: ‘result’
[10:33:03.520]   - Field: ‘asynchronous’
[10:33:03.520]   - Field: ‘calls’
[10:33:03.520]   - Field: ‘globals’
[10:33:03.520]   - Field: ‘stdout’
[10:33:03.520]   - Field: ‘earlySignal’
[10:33:03.520]   - Field: ‘lazy’
[10:33:03.521]   - Field: ‘state’
[10:33:03.521] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:33:03.521] - Launch lazy future ...
[10:33:03.522] Packages needed by the future expression (n = 0): <none>
[10:33:03.522] Packages needed by future strategies (n = 0): <none>
[10:33:03.523] {
[10:33:03.523]     {
[10:33:03.523]         {
[10:33:03.523]             ...future.startTime <- base::Sys.time()
[10:33:03.523]             {
[10:33:03.523]                 {
[10:33:03.523]                   {
[10:33:03.523]                     base::local({
[10:33:03.523]                       has_future <- base::requireNamespace("future", 
[10:33:03.523]                         quietly = TRUE)
[10:33:03.523]                       if (has_future) {
[10:33:03.523]                         ns <- base::getNamespace("future")
[10:33:03.523]                         version <- ns[[".package"]][["version"]]
[10:33:03.523]                         if (is.null(version)) 
[10:33:03.523]                           version <- utils::packageVersion("future")
[10:33:03.523]                       }
[10:33:03.523]                       else {
[10:33:03.523]                         version <- NULL
[10:33:03.523]                       }
[10:33:03.523]                       if (!has_future || version < "1.8.0") {
[10:33:03.523]                         info <- base::c(r_version = base::gsub("R version ", 
[10:33:03.523]                           "", base::R.version$version.string), 
[10:33:03.523]                           platform = base::sprintf("%s (%s-bit)", 
[10:33:03.523]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:03.523]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:03.523]                             "release", "version")], collapse = " "), 
[10:33:03.523]                           hostname = base::Sys.info()[["nodename"]])
[10:33:03.523]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:33:03.523]                           info)
[10:33:03.523]                         info <- base::paste(info, collapse = "; ")
[10:33:03.523]                         if (!has_future) {
[10:33:03.523]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:03.523]                             info)
[10:33:03.523]                         }
[10:33:03.523]                         else {
[10:33:03.523]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:03.523]                             info, version)
[10:33:03.523]                         }
[10:33:03.523]                         base::stop(msg)
[10:33:03.523]                       }
[10:33:03.523]                     })
[10:33:03.523]                   }
[10:33:03.523]                   ...future.strategy.old <- future::plan("list")
[10:33:03.523]                   options(future.plan = NULL)
[10:33:03.523]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:03.523]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:03.523]                 }
[10:33:03.523]                 ...future.workdir <- getwd()
[10:33:03.523]             }
[10:33:03.523]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:03.523]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:03.523]         }
[10:33:03.523]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[10:33:03.523]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:03.523]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[10:33:03.523]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:03.523]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:03.523]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:03.523]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:03.523]             base::names(...future.oldOptions))
[10:33:03.523]     }
[10:33:03.523]     if (FALSE) {
[10:33:03.523]     }
[10:33:03.523]     else {
[10:33:03.523]         if (TRUE) {
[10:33:03.523]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:03.523]                 open = "w")
[10:33:03.523]         }
[10:33:03.523]         else {
[10:33:03.523]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:03.523]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:03.523]         }
[10:33:03.523]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:03.523]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:03.523]             base::sink(type = "output", split = FALSE)
[10:33:03.523]             base::close(...future.stdout)
[10:33:03.523]         }, add = TRUE)
[10:33:03.523]     }
[10:33:03.523]     ...future.frame <- base::sys.nframe()
[10:33:03.523]     ...future.conditions <- base::list()
[10:33:03.523]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:03.523]     if (FALSE) {
[10:33:03.523]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:03.523]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:03.523]     }
[10:33:03.523]     ...future.result <- base::tryCatch({
[10:33:03.523]         base::withCallingHandlers({
[10:33:03.523]             ...future.value <- base::withVisible(base::local(getOption("future.globals.onMissing")))
[10:33:03.523]             future::FutureResult(value = ...future.value$value, 
[10:33:03.523]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:03.523]                   ...future.rng), globalenv = if (FALSE) 
[10:33:03.523]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:03.523]                     ...future.globalenv.names))
[10:33:03.523]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:03.523]         }, condition = base::local({
[10:33:03.523]             c <- base::c
[10:33:03.523]             inherits <- base::inherits
[10:33:03.523]             invokeRestart <- base::invokeRestart
[10:33:03.523]             length <- base::length
[10:33:03.523]             list <- base::list
[10:33:03.523]             seq.int <- base::seq.int
[10:33:03.523]             signalCondition <- base::signalCondition
[10:33:03.523]             sys.calls <- base::sys.calls
[10:33:03.523]             `[[` <- base::`[[`
[10:33:03.523]             `+` <- base::`+`
[10:33:03.523]             `<<-` <- base::`<<-`
[10:33:03.523]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:03.523]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:03.523]                   3L)]
[10:33:03.523]             }
[10:33:03.523]             function(cond) {
[10:33:03.523]                 is_error <- inherits(cond, "error")
[10:33:03.523]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:03.523]                   NULL)
[10:33:03.523]                 if (is_error) {
[10:33:03.523]                   sessionInformation <- function() {
[10:33:03.523]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:03.523]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:03.523]                       search = base::search(), system = base::Sys.info())
[10:33:03.523]                   }
[10:33:03.523]                   ...future.conditions[[length(...future.conditions) + 
[10:33:03.523]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:03.523]                     cond$call), session = sessionInformation(), 
[10:33:03.523]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:03.523]                   signalCondition(cond)
[10:33:03.523]                 }
[10:33:03.523]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:03.523]                 "immediateCondition"))) {
[10:33:03.523]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:03.523]                   ...future.conditions[[length(...future.conditions) + 
[10:33:03.523]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:03.523]                   if (TRUE && !signal) {
[10:33:03.523]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:03.523]                     {
[10:33:03.523]                       inherits <- base::inherits
[10:33:03.523]                       invokeRestart <- base::invokeRestart
[10:33:03.523]                       is.null <- base::is.null
[10:33:03.523]                       muffled <- FALSE
[10:33:03.523]                       if (inherits(cond, "message")) {
[10:33:03.523]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:03.523]                         if (muffled) 
[10:33:03.523]                           invokeRestart("muffleMessage")
[10:33:03.523]                       }
[10:33:03.523]                       else if (inherits(cond, "warning")) {
[10:33:03.523]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:03.523]                         if (muffled) 
[10:33:03.523]                           invokeRestart("muffleWarning")
[10:33:03.523]                       }
[10:33:03.523]                       else if (inherits(cond, "condition")) {
[10:33:03.523]                         if (!is.null(pattern)) {
[10:33:03.523]                           computeRestarts <- base::computeRestarts
[10:33:03.523]                           grepl <- base::grepl
[10:33:03.523]                           restarts <- computeRestarts(cond)
[10:33:03.523]                           for (restart in restarts) {
[10:33:03.523]                             name <- restart$name
[10:33:03.523]                             if (is.null(name)) 
[10:33:03.523]                               next
[10:33:03.523]                             if (!grepl(pattern, name)) 
[10:33:03.523]                               next
[10:33:03.523]                             invokeRestart(restart)
[10:33:03.523]                             muffled <- TRUE
[10:33:03.523]                             break
[10:33:03.523]                           }
[10:33:03.523]                         }
[10:33:03.523]                       }
[10:33:03.523]                       invisible(muffled)
[10:33:03.523]                     }
[10:33:03.523]                     muffleCondition(cond, pattern = "^muffle")
[10:33:03.523]                   }
[10:33:03.523]                 }
[10:33:03.523]                 else {
[10:33:03.523]                   if (TRUE) {
[10:33:03.523]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:03.523]                     {
[10:33:03.523]                       inherits <- base::inherits
[10:33:03.523]                       invokeRestart <- base::invokeRestart
[10:33:03.523]                       is.null <- base::is.null
[10:33:03.523]                       muffled <- FALSE
[10:33:03.523]                       if (inherits(cond, "message")) {
[10:33:03.523]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:03.523]                         if (muffled) 
[10:33:03.523]                           invokeRestart("muffleMessage")
[10:33:03.523]                       }
[10:33:03.523]                       else if (inherits(cond, "warning")) {
[10:33:03.523]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:03.523]                         if (muffled) 
[10:33:03.523]                           invokeRestart("muffleWarning")
[10:33:03.523]                       }
[10:33:03.523]                       else if (inherits(cond, "condition")) {
[10:33:03.523]                         if (!is.null(pattern)) {
[10:33:03.523]                           computeRestarts <- base::computeRestarts
[10:33:03.523]                           grepl <- base::grepl
[10:33:03.523]                           restarts <- computeRestarts(cond)
[10:33:03.523]                           for (restart in restarts) {
[10:33:03.523]                             name <- restart$name
[10:33:03.523]                             if (is.null(name)) 
[10:33:03.523]                               next
[10:33:03.523]                             if (!grepl(pattern, name)) 
[10:33:03.523]                               next
[10:33:03.523]                             invokeRestart(restart)
[10:33:03.523]                             muffled <- TRUE
[10:33:03.523]                             break
[10:33:03.523]                           }
[10:33:03.523]                         }
[10:33:03.523]                       }
[10:33:03.523]                       invisible(muffled)
[10:33:03.523]                     }
[10:33:03.523]                     muffleCondition(cond, pattern = "^muffle")
[10:33:03.523]                   }
[10:33:03.523]                 }
[10:33:03.523]             }
[10:33:03.523]         }))
[10:33:03.523]     }, error = function(ex) {
[10:33:03.523]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:03.523]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:03.523]                 ...future.rng), started = ...future.startTime, 
[10:33:03.523]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:03.523]             version = "1.8"), class = "FutureResult")
[10:33:03.523]     }, finally = {
[10:33:03.523]         if (!identical(...future.workdir, getwd())) 
[10:33:03.523]             setwd(...future.workdir)
[10:33:03.523]         {
[10:33:03.523]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:03.523]                 ...future.oldOptions$nwarnings <- NULL
[10:33:03.523]             }
[10:33:03.523]             base::options(...future.oldOptions)
[10:33:03.523]             if (.Platform$OS.type == "windows") {
[10:33:03.523]                 old_names <- names(...future.oldEnvVars)
[10:33:03.523]                 envs <- base::Sys.getenv()
[10:33:03.523]                 names <- names(envs)
[10:33:03.523]                 common <- intersect(names, old_names)
[10:33:03.523]                 added <- setdiff(names, old_names)
[10:33:03.523]                 removed <- setdiff(old_names, names)
[10:33:03.523]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:03.523]                   envs[common]]
[10:33:03.523]                 NAMES <- toupper(changed)
[10:33:03.523]                 args <- list()
[10:33:03.523]                 for (kk in seq_along(NAMES)) {
[10:33:03.523]                   name <- changed[[kk]]
[10:33:03.523]                   NAME <- NAMES[[kk]]
[10:33:03.523]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:03.523]                     next
[10:33:03.523]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:03.523]                 }
[10:33:03.523]                 NAMES <- toupper(added)
[10:33:03.523]                 for (kk in seq_along(NAMES)) {
[10:33:03.523]                   name <- added[[kk]]
[10:33:03.523]                   NAME <- NAMES[[kk]]
[10:33:03.523]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:03.523]                     next
[10:33:03.523]                   args[[name]] <- ""
[10:33:03.523]                 }
[10:33:03.523]                 NAMES <- toupper(removed)
[10:33:03.523]                 for (kk in seq_along(NAMES)) {
[10:33:03.523]                   name <- removed[[kk]]
[10:33:03.523]                   NAME <- NAMES[[kk]]
[10:33:03.523]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:03.523]                     next
[10:33:03.523]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:03.523]                 }
[10:33:03.523]                 if (length(args) > 0) 
[10:33:03.523]                   base::do.call(base::Sys.setenv, args = args)
[10:33:03.523]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:03.523]             }
[10:33:03.523]             else {
[10:33:03.523]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:03.523]             }
[10:33:03.523]             {
[10:33:03.523]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:03.523]                   0L) {
[10:33:03.523]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:03.523]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:03.523]                   base::options(opts)
[10:33:03.523]                 }
[10:33:03.523]                 {
[10:33:03.523]                   {
[10:33:03.523]                     NULL
[10:33:03.523]                     RNGkind("Mersenne-Twister")
[10:33:03.523]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:33:03.523]                       inherits = FALSE)
[10:33:03.523]                   }
[10:33:03.523]                   options(future.plan = NULL)
[10:33:03.523]                   if (is.na(NA_character_)) 
[10:33:03.523]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:03.523]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:03.523]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:03.523]                     .init = FALSE)
[10:33:03.523]                 }
[10:33:03.523]             }
[10:33:03.523]         }
[10:33:03.523]     })
[10:33:03.523]     if (TRUE) {
[10:33:03.523]         base::sink(type = "output", split = FALSE)
[10:33:03.523]         if (TRUE) {
[10:33:03.523]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:03.523]         }
[10:33:03.523]         else {
[10:33:03.523]             ...future.result["stdout"] <- base::list(NULL)
[10:33:03.523]         }
[10:33:03.523]         base::close(...future.stdout)
[10:33:03.523]         ...future.stdout <- NULL
[10:33:03.523]     }
[10:33:03.523]     ...future.result$conditions <- ...future.conditions
[10:33:03.523]     ...future.result$finished <- base::Sys.time()
[10:33:03.523]     ...future.result
[10:33:03.523] }
[10:33:03.525] plan(): Setting new future strategy stack:
[10:33:03.525] List of future strategies:
[10:33:03.525] 1. sequential:
[10:33:03.525]    - args: function (..., envir = parent.frame())
[10:33:03.525]    - tweaked: FALSE
[10:33:03.525]    - call: NULL
[10:33:03.525] plan(): nbrOfWorkers() = 1
[10:33:03.526] plan(): Setting new future strategy stack:
[10:33:03.527] List of future strategies:
[10:33:03.527] 1. sequential:
[10:33:03.527]    - args: function (..., envir = parent.frame())
[10:33:03.527]    - tweaked: FALSE
[10:33:03.527]    - call: plan(strategy)
[10:33:03.527] plan(): nbrOfWorkers() = 1
[10:33:03.527] SequentialFuture started (and completed)
[10:33:03.528] - Launch lazy future ... done
[10:33:03.528] run() for ‘SequentialFuture’ ... done
[10:33:03.528] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[10:33:03.529] Searching for globals...
[10:33:03.529] - globals found: [1] ‘getOption’
[10:33:03.529] Searching for globals ... DONE
[10:33:03.529] Resolving globals: FALSE
[10:33:03.530] 
[10:33:03.530] 
[10:33:03.530] getGlobalsAndPackages() ... DONE
[10:33:03.530] run() for ‘Future’ ...
[10:33:03.530] - state: ‘created’
[10:33:03.530] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:33:03.531] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:33:03.531] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:33:03.531]   - Field: ‘label’
[10:33:03.531]   - Field: ‘local’
[10:33:03.531]   - Field: ‘owner’
[10:33:03.531]   - Field: ‘envir’
[10:33:03.531]   - Field: ‘packages’
[10:33:03.531]   - Field: ‘gc’
[10:33:03.531]   - Field: ‘conditions’
[10:33:03.531]   - Field: ‘expr’
[10:33:03.532]   - Field: ‘uuid’
[10:33:03.532]   - Field: ‘seed’
[10:33:03.532]   - Field: ‘version’
[10:33:03.532]   - Field: ‘result’
[10:33:03.532]   - Field: ‘asynchronous’
[10:33:03.532]   - Field: ‘calls’
[10:33:03.532]   - Field: ‘globals’
[10:33:03.532]   - Field: ‘stdout’
[10:33:03.532]   - Field: ‘earlySignal’
[10:33:03.532]   - Field: ‘lazy’
[10:33:03.532]   - Field: ‘state’
[10:33:03.533] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:33:03.533] - Launch lazy future ...
[10:33:03.533] Packages needed by the future expression (n = 0): <none>
[10:33:03.533] Packages needed by future strategies (n = 0): <none>
[10:33:03.533] {
[10:33:03.533]     {
[10:33:03.533]         {
[10:33:03.533]             ...future.startTime <- base::Sys.time()
[10:33:03.533]             {
[10:33:03.533]                 {
[10:33:03.533]                   {
[10:33:03.533]                     base::local({
[10:33:03.533]                       has_future <- base::requireNamespace("future", 
[10:33:03.533]                         quietly = TRUE)
[10:33:03.533]                       if (has_future) {
[10:33:03.533]                         ns <- base::getNamespace("future")
[10:33:03.533]                         version <- ns[[".package"]][["version"]]
[10:33:03.533]                         if (is.null(version)) 
[10:33:03.533]                           version <- utils::packageVersion("future")
[10:33:03.533]                       }
[10:33:03.533]                       else {
[10:33:03.533]                         version <- NULL
[10:33:03.533]                       }
[10:33:03.533]                       if (!has_future || version < "1.8.0") {
[10:33:03.533]                         info <- base::c(r_version = base::gsub("R version ", 
[10:33:03.533]                           "", base::R.version$version.string), 
[10:33:03.533]                           platform = base::sprintf("%s (%s-bit)", 
[10:33:03.533]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:03.533]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:03.533]                             "release", "version")], collapse = " "), 
[10:33:03.533]                           hostname = base::Sys.info()[["nodename"]])
[10:33:03.533]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:33:03.533]                           info)
[10:33:03.533]                         info <- base::paste(info, collapse = "; ")
[10:33:03.533]                         if (!has_future) {
[10:33:03.533]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:03.533]                             info)
[10:33:03.533]                         }
[10:33:03.533]                         else {
[10:33:03.533]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:03.533]                             info, version)
[10:33:03.533]                         }
[10:33:03.533]                         base::stop(msg)
[10:33:03.533]                       }
[10:33:03.533]                     })
[10:33:03.533]                   }
[10:33:03.533]                   ...future.strategy.old <- future::plan("list")
[10:33:03.533]                   options(future.plan = NULL)
[10:33:03.533]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:03.533]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:03.533]                 }
[10:33:03.533]                 ...future.workdir <- getwd()
[10:33:03.533]             }
[10:33:03.533]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:03.533]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:03.533]         }
[10:33:03.533]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[10:33:03.533]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:03.533]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[10:33:03.533]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:03.533]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:03.533]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:03.533]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:03.533]             base::names(...future.oldOptions))
[10:33:03.533]     }
[10:33:03.533]     if (FALSE) {
[10:33:03.533]     }
[10:33:03.533]     else {
[10:33:03.533]         if (TRUE) {
[10:33:03.533]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:03.533]                 open = "w")
[10:33:03.533]         }
[10:33:03.533]         else {
[10:33:03.533]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:03.533]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:03.533]         }
[10:33:03.533]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:03.533]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:03.533]             base::sink(type = "output", split = FALSE)
[10:33:03.533]             base::close(...future.stdout)
[10:33:03.533]         }, add = TRUE)
[10:33:03.533]     }
[10:33:03.533]     ...future.frame <- base::sys.nframe()
[10:33:03.533]     ...future.conditions <- base::list()
[10:33:03.533]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:03.533]     if (FALSE) {
[10:33:03.533]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:03.533]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:03.533]     }
[10:33:03.533]     ...future.result <- base::tryCatch({
[10:33:03.533]         base::withCallingHandlers({
[10:33:03.533]             ...future.value <- base::withVisible(base::local(getOption("future.globals.onMissing")))
[10:33:03.533]             future::FutureResult(value = ...future.value$value, 
[10:33:03.533]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:03.533]                   ...future.rng), globalenv = if (FALSE) 
[10:33:03.533]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:03.533]                     ...future.globalenv.names))
[10:33:03.533]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:03.533]         }, condition = base::local({
[10:33:03.533]             c <- base::c
[10:33:03.533]             inherits <- base::inherits
[10:33:03.533]             invokeRestart <- base::invokeRestart
[10:33:03.533]             length <- base::length
[10:33:03.533]             list <- base::list
[10:33:03.533]             seq.int <- base::seq.int
[10:33:03.533]             signalCondition <- base::signalCondition
[10:33:03.533]             sys.calls <- base::sys.calls
[10:33:03.533]             `[[` <- base::`[[`
[10:33:03.533]             `+` <- base::`+`
[10:33:03.533]             `<<-` <- base::`<<-`
[10:33:03.533]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:03.533]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:03.533]                   3L)]
[10:33:03.533]             }
[10:33:03.533]             function(cond) {
[10:33:03.533]                 is_error <- inherits(cond, "error")
[10:33:03.533]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:03.533]                   NULL)
[10:33:03.533]                 if (is_error) {
[10:33:03.533]                   sessionInformation <- function() {
[10:33:03.533]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:03.533]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:03.533]                       search = base::search(), system = base::Sys.info())
[10:33:03.533]                   }
[10:33:03.533]                   ...future.conditions[[length(...future.conditions) + 
[10:33:03.533]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:03.533]                     cond$call), session = sessionInformation(), 
[10:33:03.533]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:03.533]                   signalCondition(cond)
[10:33:03.533]                 }
[10:33:03.533]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:03.533]                 "immediateCondition"))) {
[10:33:03.533]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:03.533]                   ...future.conditions[[length(...future.conditions) + 
[10:33:03.533]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:03.533]                   if (TRUE && !signal) {
[10:33:03.533]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:03.533]                     {
[10:33:03.533]                       inherits <- base::inherits
[10:33:03.533]                       invokeRestart <- base::invokeRestart
[10:33:03.533]                       is.null <- base::is.null
[10:33:03.533]                       muffled <- FALSE
[10:33:03.533]                       if (inherits(cond, "message")) {
[10:33:03.533]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:03.533]                         if (muffled) 
[10:33:03.533]                           invokeRestart("muffleMessage")
[10:33:03.533]                       }
[10:33:03.533]                       else if (inherits(cond, "warning")) {
[10:33:03.533]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:03.533]                         if (muffled) 
[10:33:03.533]                           invokeRestart("muffleWarning")
[10:33:03.533]                       }
[10:33:03.533]                       else if (inherits(cond, "condition")) {
[10:33:03.533]                         if (!is.null(pattern)) {
[10:33:03.533]                           computeRestarts <- base::computeRestarts
[10:33:03.533]                           grepl <- base::grepl
[10:33:03.533]                           restarts <- computeRestarts(cond)
[10:33:03.533]                           for (restart in restarts) {
[10:33:03.533]                             name <- restart$name
[10:33:03.533]                             if (is.null(name)) 
[10:33:03.533]                               next
[10:33:03.533]                             if (!grepl(pattern, name)) 
[10:33:03.533]                               next
[10:33:03.533]                             invokeRestart(restart)
[10:33:03.533]                             muffled <- TRUE
[10:33:03.533]                             break
[10:33:03.533]                           }
[10:33:03.533]                         }
[10:33:03.533]                       }
[10:33:03.533]                       invisible(muffled)
[10:33:03.533]                     }
[10:33:03.533]                     muffleCondition(cond, pattern = "^muffle")
[10:33:03.533]                   }
[10:33:03.533]                 }
[10:33:03.533]                 else {
[10:33:03.533]                   if (TRUE) {
[10:33:03.533]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:03.533]                     {
[10:33:03.533]                       inherits <- base::inherits
[10:33:03.533]                       invokeRestart <- base::invokeRestart
[10:33:03.533]                       is.null <- base::is.null
[10:33:03.533]                       muffled <- FALSE
[10:33:03.533]                       if (inherits(cond, "message")) {
[10:33:03.533]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:03.533]                         if (muffled) 
[10:33:03.533]                           invokeRestart("muffleMessage")
[10:33:03.533]                       }
[10:33:03.533]                       else if (inherits(cond, "warning")) {
[10:33:03.533]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:03.533]                         if (muffled) 
[10:33:03.533]                           invokeRestart("muffleWarning")
[10:33:03.533]                       }
[10:33:03.533]                       else if (inherits(cond, "condition")) {
[10:33:03.533]                         if (!is.null(pattern)) {
[10:33:03.533]                           computeRestarts <- base::computeRestarts
[10:33:03.533]                           grepl <- base::grepl
[10:33:03.533]                           restarts <- computeRestarts(cond)
[10:33:03.533]                           for (restart in restarts) {
[10:33:03.533]                             name <- restart$name
[10:33:03.533]                             if (is.null(name)) 
[10:33:03.533]                               next
[10:33:03.533]                             if (!grepl(pattern, name)) 
[10:33:03.533]                               next
[10:33:03.533]                             invokeRestart(restart)
[10:33:03.533]                             muffled <- TRUE
[10:33:03.533]                             break
[10:33:03.533]                           }
[10:33:03.533]                         }
[10:33:03.533]                       }
[10:33:03.533]                       invisible(muffled)
[10:33:03.533]                     }
[10:33:03.533]                     muffleCondition(cond, pattern = "^muffle")
[10:33:03.533]                   }
[10:33:03.533]                 }
[10:33:03.533]             }
[10:33:03.533]         }))
[10:33:03.533]     }, error = function(ex) {
[10:33:03.533]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:03.533]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:03.533]                 ...future.rng), started = ...future.startTime, 
[10:33:03.533]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:03.533]             version = "1.8"), class = "FutureResult")
[10:33:03.533]     }, finally = {
[10:33:03.533]         if (!identical(...future.workdir, getwd())) 
[10:33:03.533]             setwd(...future.workdir)
[10:33:03.533]         {
[10:33:03.533]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:03.533]                 ...future.oldOptions$nwarnings <- NULL
[10:33:03.533]             }
[10:33:03.533]             base::options(...future.oldOptions)
[10:33:03.533]             if (.Platform$OS.type == "windows") {
[10:33:03.533]                 old_names <- names(...future.oldEnvVars)
[10:33:03.533]                 envs <- base::Sys.getenv()
[10:33:03.533]                 names <- names(envs)
[10:33:03.533]                 common <- intersect(names, old_names)
[10:33:03.533]                 added <- setdiff(names, old_names)
[10:33:03.533]                 removed <- setdiff(old_names, names)
[10:33:03.533]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:03.533]                   envs[common]]
[10:33:03.533]                 NAMES <- toupper(changed)
[10:33:03.533]                 args <- list()
[10:33:03.533]                 for (kk in seq_along(NAMES)) {
[10:33:03.533]                   name <- changed[[kk]]
[10:33:03.533]                   NAME <- NAMES[[kk]]
[10:33:03.533]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:03.533]                     next
[10:33:03.533]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:03.533]                 }
[10:33:03.533]                 NAMES <- toupper(added)
[10:33:03.533]                 for (kk in seq_along(NAMES)) {
[10:33:03.533]                   name <- added[[kk]]
[10:33:03.533]                   NAME <- NAMES[[kk]]
[10:33:03.533]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:03.533]                     next
[10:33:03.533]                   args[[name]] <- ""
[10:33:03.533]                 }
[10:33:03.533]                 NAMES <- toupper(removed)
[10:33:03.533]                 for (kk in seq_along(NAMES)) {
[10:33:03.533]                   name <- removed[[kk]]
[10:33:03.533]                   NAME <- NAMES[[kk]]
[10:33:03.533]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:03.533]                     next
[10:33:03.533]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:03.533]                 }
[10:33:03.533]                 if (length(args) > 0) 
[10:33:03.533]                   base::do.call(base::Sys.setenv, args = args)
[10:33:03.533]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:03.533]             }
[10:33:03.533]             else {
[10:33:03.533]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:03.533]             }
[10:33:03.533]             {
[10:33:03.533]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:03.533]                   0L) {
[10:33:03.533]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:03.533]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:03.533]                   base::options(opts)
[10:33:03.533]                 }
[10:33:03.533]                 {
[10:33:03.533]                   {
[10:33:03.533]                     NULL
[10:33:03.533]                     RNGkind("Mersenne-Twister")
[10:33:03.533]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:33:03.533]                       inherits = FALSE)
[10:33:03.533]                   }
[10:33:03.533]                   options(future.plan = NULL)
[10:33:03.533]                   if (is.na(NA_character_)) 
[10:33:03.533]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:03.533]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:03.533]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:03.533]                     .init = FALSE)
[10:33:03.533]                 }
[10:33:03.533]             }
[10:33:03.533]         }
[10:33:03.533]     })
[10:33:03.533]     if (TRUE) {
[10:33:03.533]         base::sink(type = "output", split = FALSE)
[10:33:03.533]         if (TRUE) {
[10:33:03.533]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:03.533]         }
[10:33:03.533]         else {
[10:33:03.533]             ...future.result["stdout"] <- base::list(NULL)
[10:33:03.533]         }
[10:33:03.533]         base::close(...future.stdout)
[10:33:03.533]         ...future.stdout <- NULL
[10:33:03.533]     }
[10:33:03.533]     ...future.result$conditions <- ...future.conditions
[10:33:03.533]     ...future.result$finished <- base::Sys.time()
[10:33:03.533]     ...future.result
[10:33:03.533] }
[10:33:03.535] plan(): Setting new future strategy stack:
[10:33:03.535] List of future strategies:
[10:33:03.535] 1. sequential:
[10:33:03.535]    - args: function (..., envir = parent.frame())
[10:33:03.535]    - tweaked: FALSE
[10:33:03.535]    - call: NULL
[10:33:03.535] plan(): nbrOfWorkers() = 1
[10:33:03.536] plan(): Setting new future strategy stack:
[10:33:03.536] List of future strategies:
[10:33:03.536] 1. sequential:
[10:33:03.536]    - args: function (..., envir = parent.frame())
[10:33:03.536]    - tweaked: FALSE
[10:33:03.536]    - call: plan(strategy)
[10:33:03.537] plan(): nbrOfWorkers() = 1
[10:33:03.537] SequentialFuture started (and completed)
[10:33:03.537] - Launch lazy future ... done
[10:33:03.537] run() for ‘SequentialFuture’ ... done
[10:33:03.538] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:33:03.538] Searching for globals...
[10:33:03.539] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[10:33:03.539] Searching for globals...
[10:33:03.540] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[10:33:03.540] Searching for globals ... DONE
[10:33:03.543] Resolving globals: FALSE
[10:33:03.544] The total size of the 1 globals is 160 bytes (160 bytes)
[10:33:03.545] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[10:33:03.545] - globals: [1] ‘data’
[10:33:03.545] 
[10:33:03.545] getGlobalsAndPackages() ... DONE
[10:33:03.545] run() for ‘Future’ ...
[10:33:03.545] - state: ‘created’
[10:33:03.545] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:33:03.546] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:33:03.546] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:33:03.546]   - Field: ‘label’
[10:33:03.546]   - Field: ‘local’
[10:33:03.546]   - Field: ‘owner’
[10:33:03.546]   - Field: ‘envir’
[10:33:03.546]   - Field: ‘packages’
[10:33:03.546]   - Field: ‘gc’
[10:33:03.546]   - Field: ‘conditions’
[10:33:03.547]   - Field: ‘expr’
[10:33:03.547]   - Field: ‘uuid’
[10:33:03.547]   - Field: ‘seed’
[10:33:03.547]   - Field: ‘version’
[10:33:03.547]   - Field: ‘result’
[10:33:03.547]   - Field: ‘asynchronous’
[10:33:03.547]   - Field: ‘calls’
[10:33:03.547]   - Field: ‘globals’
[10:33:03.547]   - Field: ‘stdout’
[10:33:03.547]   - Field: ‘earlySignal’
[10:33:03.547]   - Field: ‘lazy’
[10:33:03.548]   - Field: ‘state’
[10:33:03.548] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:33:03.548] - Launch lazy future ...
[10:33:03.548] Packages needed by the future expression (n = 0): <none>
[10:33:03.548] Packages needed by future strategies (n = 0): <none>
[10:33:03.548] {
[10:33:03.548]     {
[10:33:03.548]         {
[10:33:03.548]             ...future.startTime <- base::Sys.time()
[10:33:03.548]             {
[10:33:03.548]                 {
[10:33:03.548]                   {
[10:33:03.548]                     base::local({
[10:33:03.548]                       has_future <- base::requireNamespace("future", 
[10:33:03.548]                         quietly = TRUE)
[10:33:03.548]                       if (has_future) {
[10:33:03.548]                         ns <- base::getNamespace("future")
[10:33:03.548]                         version <- ns[[".package"]][["version"]]
[10:33:03.548]                         if (is.null(version)) 
[10:33:03.548]                           version <- utils::packageVersion("future")
[10:33:03.548]                       }
[10:33:03.548]                       else {
[10:33:03.548]                         version <- NULL
[10:33:03.548]                       }
[10:33:03.548]                       if (!has_future || version < "1.8.0") {
[10:33:03.548]                         info <- base::c(r_version = base::gsub("R version ", 
[10:33:03.548]                           "", base::R.version$version.string), 
[10:33:03.548]                           platform = base::sprintf("%s (%s-bit)", 
[10:33:03.548]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:03.548]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:03.548]                             "release", "version")], collapse = " "), 
[10:33:03.548]                           hostname = base::Sys.info()[["nodename"]])
[10:33:03.548]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:33:03.548]                           info)
[10:33:03.548]                         info <- base::paste(info, collapse = "; ")
[10:33:03.548]                         if (!has_future) {
[10:33:03.548]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:03.548]                             info)
[10:33:03.548]                         }
[10:33:03.548]                         else {
[10:33:03.548]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:03.548]                             info, version)
[10:33:03.548]                         }
[10:33:03.548]                         base::stop(msg)
[10:33:03.548]                       }
[10:33:03.548]                     })
[10:33:03.548]                   }
[10:33:03.548]                   ...future.strategy.old <- future::plan("list")
[10:33:03.548]                   options(future.plan = NULL)
[10:33:03.548]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:03.548]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:03.548]                 }
[10:33:03.548]                 ...future.workdir <- getwd()
[10:33:03.548]             }
[10:33:03.548]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:03.548]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:03.548]         }
[10:33:03.548]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[10:33:03.548]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:03.548]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[10:33:03.548]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:03.548]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:03.548]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:03.548]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:03.548]             base::names(...future.oldOptions))
[10:33:03.548]     }
[10:33:03.548]     if (FALSE) {
[10:33:03.548]     }
[10:33:03.548]     else {
[10:33:03.548]         if (TRUE) {
[10:33:03.548]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:03.548]                 open = "w")
[10:33:03.548]         }
[10:33:03.548]         else {
[10:33:03.548]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:03.548]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:03.548]         }
[10:33:03.548]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:03.548]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:03.548]             base::sink(type = "output", split = FALSE)
[10:33:03.548]             base::close(...future.stdout)
[10:33:03.548]         }, add = TRUE)
[10:33:03.548]     }
[10:33:03.548]     ...future.frame <- base::sys.nframe()
[10:33:03.548]     ...future.conditions <- base::list()
[10:33:03.548]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:03.548]     if (FALSE) {
[10:33:03.548]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:03.548]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:03.548]     }
[10:33:03.548]     ...future.result <- base::tryCatch({
[10:33:03.548]         base::withCallingHandlers({
[10:33:03.548]             ...future.value <- base::withVisible(base::local(subset(data, 
[10:33:03.548]                 x < 3)$y))
[10:33:03.548]             future::FutureResult(value = ...future.value$value, 
[10:33:03.548]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:03.548]                   ...future.rng), globalenv = if (FALSE) 
[10:33:03.548]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:03.548]                     ...future.globalenv.names))
[10:33:03.548]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:03.548]         }, condition = base::local({
[10:33:03.548]             c <- base::c
[10:33:03.548]             inherits <- base::inherits
[10:33:03.548]             invokeRestart <- base::invokeRestart
[10:33:03.548]             length <- base::length
[10:33:03.548]             list <- base::list
[10:33:03.548]             seq.int <- base::seq.int
[10:33:03.548]             signalCondition <- base::signalCondition
[10:33:03.548]             sys.calls <- base::sys.calls
[10:33:03.548]             `[[` <- base::`[[`
[10:33:03.548]             `+` <- base::`+`
[10:33:03.548]             `<<-` <- base::`<<-`
[10:33:03.548]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:03.548]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:03.548]                   3L)]
[10:33:03.548]             }
[10:33:03.548]             function(cond) {
[10:33:03.548]                 is_error <- inherits(cond, "error")
[10:33:03.548]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:03.548]                   NULL)
[10:33:03.548]                 if (is_error) {
[10:33:03.548]                   sessionInformation <- function() {
[10:33:03.548]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:03.548]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:03.548]                       search = base::search(), system = base::Sys.info())
[10:33:03.548]                   }
[10:33:03.548]                   ...future.conditions[[length(...future.conditions) + 
[10:33:03.548]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:03.548]                     cond$call), session = sessionInformation(), 
[10:33:03.548]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:03.548]                   signalCondition(cond)
[10:33:03.548]                 }
[10:33:03.548]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:03.548]                 "immediateCondition"))) {
[10:33:03.548]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:03.548]                   ...future.conditions[[length(...future.conditions) + 
[10:33:03.548]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:03.548]                   if (TRUE && !signal) {
[10:33:03.548]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:03.548]                     {
[10:33:03.548]                       inherits <- base::inherits
[10:33:03.548]                       invokeRestart <- base::invokeRestart
[10:33:03.548]                       is.null <- base::is.null
[10:33:03.548]                       muffled <- FALSE
[10:33:03.548]                       if (inherits(cond, "message")) {
[10:33:03.548]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:03.548]                         if (muffled) 
[10:33:03.548]                           invokeRestart("muffleMessage")
[10:33:03.548]                       }
[10:33:03.548]                       else if (inherits(cond, "warning")) {
[10:33:03.548]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:03.548]                         if (muffled) 
[10:33:03.548]                           invokeRestart("muffleWarning")
[10:33:03.548]                       }
[10:33:03.548]                       else if (inherits(cond, "condition")) {
[10:33:03.548]                         if (!is.null(pattern)) {
[10:33:03.548]                           computeRestarts <- base::computeRestarts
[10:33:03.548]                           grepl <- base::grepl
[10:33:03.548]                           restarts <- computeRestarts(cond)
[10:33:03.548]                           for (restart in restarts) {
[10:33:03.548]                             name <- restart$name
[10:33:03.548]                             if (is.null(name)) 
[10:33:03.548]                               next
[10:33:03.548]                             if (!grepl(pattern, name)) 
[10:33:03.548]                               next
[10:33:03.548]                             invokeRestart(restart)
[10:33:03.548]                             muffled <- TRUE
[10:33:03.548]                             break
[10:33:03.548]                           }
[10:33:03.548]                         }
[10:33:03.548]                       }
[10:33:03.548]                       invisible(muffled)
[10:33:03.548]                     }
[10:33:03.548]                     muffleCondition(cond, pattern = "^muffle")
[10:33:03.548]                   }
[10:33:03.548]                 }
[10:33:03.548]                 else {
[10:33:03.548]                   if (TRUE) {
[10:33:03.548]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:03.548]                     {
[10:33:03.548]                       inherits <- base::inherits
[10:33:03.548]                       invokeRestart <- base::invokeRestart
[10:33:03.548]                       is.null <- base::is.null
[10:33:03.548]                       muffled <- FALSE
[10:33:03.548]                       if (inherits(cond, "message")) {
[10:33:03.548]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:03.548]                         if (muffled) 
[10:33:03.548]                           invokeRestart("muffleMessage")
[10:33:03.548]                       }
[10:33:03.548]                       else if (inherits(cond, "warning")) {
[10:33:03.548]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:03.548]                         if (muffled) 
[10:33:03.548]                           invokeRestart("muffleWarning")
[10:33:03.548]                       }
[10:33:03.548]                       else if (inherits(cond, "condition")) {
[10:33:03.548]                         if (!is.null(pattern)) {
[10:33:03.548]                           computeRestarts <- base::computeRestarts
[10:33:03.548]                           grepl <- base::grepl
[10:33:03.548]                           restarts <- computeRestarts(cond)
[10:33:03.548]                           for (restart in restarts) {
[10:33:03.548]                             name <- restart$name
[10:33:03.548]                             if (is.null(name)) 
[10:33:03.548]                               next
[10:33:03.548]                             if (!grepl(pattern, name)) 
[10:33:03.548]                               next
[10:33:03.548]                             invokeRestart(restart)
[10:33:03.548]                             muffled <- TRUE
[10:33:03.548]                             break
[10:33:03.548]                           }
[10:33:03.548]                         }
[10:33:03.548]                       }
[10:33:03.548]                       invisible(muffled)
[10:33:03.548]                     }
[10:33:03.548]                     muffleCondition(cond, pattern = "^muffle")
[10:33:03.548]                   }
[10:33:03.548]                 }
[10:33:03.548]             }
[10:33:03.548]         }))
[10:33:03.548]     }, error = function(ex) {
[10:33:03.548]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:03.548]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:03.548]                 ...future.rng), started = ...future.startTime, 
[10:33:03.548]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:03.548]             version = "1.8"), class = "FutureResult")
[10:33:03.548]     }, finally = {
[10:33:03.548]         if (!identical(...future.workdir, getwd())) 
[10:33:03.548]             setwd(...future.workdir)
[10:33:03.548]         {
[10:33:03.548]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:03.548]                 ...future.oldOptions$nwarnings <- NULL
[10:33:03.548]             }
[10:33:03.548]             base::options(...future.oldOptions)
[10:33:03.548]             if (.Platform$OS.type == "windows") {
[10:33:03.548]                 old_names <- names(...future.oldEnvVars)
[10:33:03.548]                 envs <- base::Sys.getenv()
[10:33:03.548]                 names <- names(envs)
[10:33:03.548]                 common <- intersect(names, old_names)
[10:33:03.548]                 added <- setdiff(names, old_names)
[10:33:03.548]                 removed <- setdiff(old_names, names)
[10:33:03.548]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:03.548]                   envs[common]]
[10:33:03.548]                 NAMES <- toupper(changed)
[10:33:03.548]                 args <- list()
[10:33:03.548]                 for (kk in seq_along(NAMES)) {
[10:33:03.548]                   name <- changed[[kk]]
[10:33:03.548]                   NAME <- NAMES[[kk]]
[10:33:03.548]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:03.548]                     next
[10:33:03.548]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:03.548]                 }
[10:33:03.548]                 NAMES <- toupper(added)
[10:33:03.548]                 for (kk in seq_along(NAMES)) {
[10:33:03.548]                   name <- added[[kk]]
[10:33:03.548]                   NAME <- NAMES[[kk]]
[10:33:03.548]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:03.548]                     next
[10:33:03.548]                   args[[name]] <- ""
[10:33:03.548]                 }
[10:33:03.548]                 NAMES <- toupper(removed)
[10:33:03.548]                 for (kk in seq_along(NAMES)) {
[10:33:03.548]                   name <- removed[[kk]]
[10:33:03.548]                   NAME <- NAMES[[kk]]
[10:33:03.548]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:03.548]                     next
[10:33:03.548]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:03.548]                 }
[10:33:03.548]                 if (length(args) > 0) 
[10:33:03.548]                   base::do.call(base::Sys.setenv, args = args)
[10:33:03.548]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:03.548]             }
[10:33:03.548]             else {
[10:33:03.548]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:03.548]             }
[10:33:03.548]             {
[10:33:03.548]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:03.548]                   0L) {
[10:33:03.548]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:03.548]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:03.548]                   base::options(opts)
[10:33:03.548]                 }
[10:33:03.548]                 {
[10:33:03.548]                   {
[10:33:03.548]                     NULL
[10:33:03.548]                     RNGkind("Mersenne-Twister")
[10:33:03.548]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:33:03.548]                       inherits = FALSE)
[10:33:03.548]                   }
[10:33:03.548]                   options(future.plan = NULL)
[10:33:03.548]                   if (is.na(NA_character_)) 
[10:33:03.548]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:03.548]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:03.548]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:03.548]                     .init = FALSE)
[10:33:03.548]                 }
[10:33:03.548]             }
[10:33:03.548]         }
[10:33:03.548]     })
[10:33:03.548]     if (TRUE) {
[10:33:03.548]         base::sink(type = "output", split = FALSE)
[10:33:03.548]         if (TRUE) {
[10:33:03.548]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:03.548]         }
[10:33:03.548]         else {
[10:33:03.548]             ...future.result["stdout"] <- base::list(NULL)
[10:33:03.548]         }
[10:33:03.548]         base::close(...future.stdout)
[10:33:03.548]         ...future.stdout <- NULL
[10:33:03.548]     }
[10:33:03.548]     ...future.result$conditions <- ...future.conditions
[10:33:03.548]     ...future.result$finished <- base::Sys.time()
[10:33:03.548]     ...future.result
[10:33:03.548] }
[10:33:03.550] assign_globals() ...
[10:33:03.550] List of 1
[10:33:03.550]  $ data:'data.frame':	5 obs. of  2 variables:
[10:33:03.550]   ..$ x: int [1:5] 1 2 3 4 5
[10:33:03.550]   ..$ y: int [1:5] 1 2 3 4 5
[10:33:03.550]  - attr(*, "where")=List of 1
[10:33:03.550]   ..$ data:<environment: R_EmptyEnv> 
[10:33:03.550]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:33:03.550]  - attr(*, "resolved")= logi FALSE
[10:33:03.550]  - attr(*, "total_size")= num 160
[10:33:03.550]  - attr(*, "already-done")= logi TRUE
[10:33:03.556] - copied ‘data’ to environment
[10:33:03.556] assign_globals() ... done
[10:33:03.556] plan(): Setting new future strategy stack:
[10:33:03.556] List of future strategies:
[10:33:03.556] 1. sequential:
[10:33:03.556]    - args: function (..., envir = parent.frame())
[10:33:03.556]    - tweaked: FALSE
[10:33:03.556]    - call: NULL
[10:33:03.557] plan(): nbrOfWorkers() = 1
[10:33:03.558] plan(): Setting new future strategy stack:
[10:33:03.558] List of future strategies:
[10:33:03.558] 1. sequential:
[10:33:03.558]    - args: function (..., envir = parent.frame())
[10:33:03.558]    - tweaked: FALSE
[10:33:03.558]    - call: plan(strategy)
[10:33:03.558] plan(): nbrOfWorkers() = 1
[10:33:03.558] SequentialFuture started (and completed)
[10:33:03.558] - Launch lazy future ... done
[10:33:03.558] run() for ‘SequentialFuture’ ... done
[10:33:03.559] plan(): Setting new future strategy stack:
[10:33:03.559] List of future strategies:
[10:33:03.559] 1. sequential:
[10:33:03.559]    - args: function (..., envir = parent.frame())
[10:33:03.559]    - tweaked: FALSE
[10:33:03.559]    - call: plan(list(sequential, strategy))
[10:33:03.559] 2. sequential:
[10:33:03.559]    - args: function (..., envir = parent.frame())
[10:33:03.559]    - tweaked: FALSE
[10:33:03.559]    - call: plan(list(sequential, strategy))
[10:33:03.559] plan(): nbrOfWorkers() = 1
[10:33:03.560] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[10:33:03.560] Searching for globals...
[10:33:03.565] - globals found: [8] ‘{’, ‘<-’, ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’, ‘%<-%’
[10:33:03.565] Searching for globals ... DONE
[10:33:03.565] Resolving globals: FALSE
[10:33:03.566] The total size of the 1 globals is 160 bytes (160 bytes)
[10:33:03.566] The total size of the 1 globals exported for future expression (‘{; a %<-% subset(data, x < 3)$y; a; }’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[10:33:03.566] - globals: [1] ‘data’
[10:33:03.566] - packages: [1] ‘future’
[10:33:03.566] getGlobalsAndPackages() ... DONE
[10:33:03.567] run() for ‘Future’ ...
[10:33:03.567] - state: ‘created’
[10:33:03.567] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:33:03.567] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:33:03.567] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:33:03.567]   - Field: ‘label’
[10:33:03.567]   - Field: ‘local’
[10:33:03.567]   - Field: ‘owner’
[10:33:03.568]   - Field: ‘envir’
[10:33:03.568]   - Field: ‘packages’
[10:33:03.568]   - Field: ‘gc’
[10:33:03.568]   - Field: ‘conditions’
[10:33:03.568]   - Field: ‘expr’
[10:33:03.568]   - Field: ‘uuid’
[10:33:03.568]   - Field: ‘seed’
[10:33:03.568]   - Field: ‘version’
[10:33:03.568]   - Field: ‘result’
[10:33:03.568]   - Field: ‘asynchronous’
[10:33:03.568]   - Field: ‘calls’
[10:33:03.569]   - Field: ‘globals’
[10:33:03.569]   - Field: ‘stdout’
[10:33:03.569]   - Field: ‘earlySignal’
[10:33:03.569]   - Field: ‘lazy’
[10:33:03.569]   - Field: ‘state’
[10:33:03.569] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:33:03.569] - Launch lazy future ...
[10:33:03.569] Packages needed by the future expression (n = 1): ‘future’
[10:33:03.569] Packages needed by future strategies (n = 1): ‘future’
[10:33:03.570] {
[10:33:03.570]     {
[10:33:03.570]         {
[10:33:03.570]             ...future.startTime <- base::Sys.time()
[10:33:03.570]             {
[10:33:03.570]                 {
[10:33:03.570]                   {
[10:33:03.570]                     {
[10:33:03.570]                       base::local({
[10:33:03.570]                         has_future <- base::requireNamespace("future", 
[10:33:03.570]                           quietly = TRUE)
[10:33:03.570]                         if (has_future) {
[10:33:03.570]                           ns <- base::getNamespace("future")
[10:33:03.570]                           version <- ns[[".package"]][["version"]]
[10:33:03.570]                           if (is.null(version)) 
[10:33:03.570]                             version <- utils::packageVersion("future")
[10:33:03.570]                         }
[10:33:03.570]                         else {
[10:33:03.570]                           version <- NULL
[10:33:03.570]                         }
[10:33:03.570]                         if (!has_future || version < "1.8.0") {
[10:33:03.570]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:03.570]                             "", base::R.version$version.string), 
[10:33:03.570]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:03.570]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:03.570]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:03.570]                               "release", "version")], collapse = " "), 
[10:33:03.570]                             hostname = base::Sys.info()[["nodename"]])
[10:33:03.570]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:03.570]                             info)
[10:33:03.570]                           info <- base::paste(info, collapse = "; ")
[10:33:03.570]                           if (!has_future) {
[10:33:03.570]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:03.570]                               info)
[10:33:03.570]                           }
[10:33:03.570]                           else {
[10:33:03.570]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:03.570]                               info, version)
[10:33:03.570]                           }
[10:33:03.570]                           base::stop(msg)
[10:33:03.570]                         }
[10:33:03.570]                       })
[10:33:03.570]                     }
[10:33:03.570]                     base::local({
[10:33:03.570]                       for (pkg in "future") {
[10:33:03.570]                         base::loadNamespace(pkg)
[10:33:03.570]                         base::library(pkg, character.only = TRUE)
[10:33:03.570]                       }
[10:33:03.570]                     })
[10:33:03.570]                   }
[10:33:03.570]                   ...future.strategy.old <- future::plan("list")
[10:33:03.570]                   options(future.plan = NULL)
[10:33:03.570]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:03.570]                   future::plan(list(function (..., envir = parent.frame()) 
[10:33:03.570]                   {
[10:33:03.570]                     future <- SequentialFuture(..., envir = envir)
[10:33:03.570]                     if (!future$lazy) 
[10:33:03.570]                       future <- run(future)
[10:33:03.570]                     invisible(future)
[10:33:03.570]                   }), .cleanup = FALSE, .init = FALSE)
[10:33:03.570]                 }
[10:33:03.570]                 ...future.workdir <- getwd()
[10:33:03.570]             }
[10:33:03.570]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:03.570]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:03.570]         }
[10:33:03.570]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[10:33:03.570]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:03.570]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[10:33:03.570]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:03.570]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:03.570]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:03.570]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:03.570]             base::names(...future.oldOptions))
[10:33:03.570]     }
[10:33:03.570]     if (FALSE) {
[10:33:03.570]     }
[10:33:03.570]     else {
[10:33:03.570]         if (TRUE) {
[10:33:03.570]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:03.570]                 open = "w")
[10:33:03.570]         }
[10:33:03.570]         else {
[10:33:03.570]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:03.570]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:03.570]         }
[10:33:03.570]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:03.570]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:03.570]             base::sink(type = "output", split = FALSE)
[10:33:03.570]             base::close(...future.stdout)
[10:33:03.570]         }, add = TRUE)
[10:33:03.570]     }
[10:33:03.570]     ...future.frame <- base::sys.nframe()
[10:33:03.570]     ...future.conditions <- base::list()
[10:33:03.570]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:03.570]     if (FALSE) {
[10:33:03.570]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:03.570]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:03.570]     }
[10:33:03.570]     ...future.result <- base::tryCatch({
[10:33:03.570]         base::withCallingHandlers({
[10:33:03.570]             ...future.value <- base::withVisible(base::local({
[10:33:03.570]                 a %<-% subset(data, x < 3)$y
[10:33:03.570]                 a
[10:33:03.570]             }))
[10:33:03.570]             future::FutureResult(value = ...future.value$value, 
[10:33:03.570]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:03.570]                   ...future.rng), globalenv = if (FALSE) 
[10:33:03.570]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:03.570]                     ...future.globalenv.names))
[10:33:03.570]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:03.570]         }, condition = base::local({
[10:33:03.570]             c <- base::c
[10:33:03.570]             inherits <- base::inherits
[10:33:03.570]             invokeRestart <- base::invokeRestart
[10:33:03.570]             length <- base::length
[10:33:03.570]             list <- base::list
[10:33:03.570]             seq.int <- base::seq.int
[10:33:03.570]             signalCondition <- base::signalCondition
[10:33:03.570]             sys.calls <- base::sys.calls
[10:33:03.570]             `[[` <- base::`[[`
[10:33:03.570]             `+` <- base::`+`
[10:33:03.570]             `<<-` <- base::`<<-`
[10:33:03.570]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:03.570]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:03.570]                   3L)]
[10:33:03.570]             }
[10:33:03.570]             function(cond) {
[10:33:03.570]                 is_error <- inherits(cond, "error")
[10:33:03.570]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:03.570]                   NULL)
[10:33:03.570]                 if (is_error) {
[10:33:03.570]                   sessionInformation <- function() {
[10:33:03.570]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:03.570]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:03.570]                       search = base::search(), system = base::Sys.info())
[10:33:03.570]                   }
[10:33:03.570]                   ...future.conditions[[length(...future.conditions) + 
[10:33:03.570]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:03.570]                     cond$call), session = sessionInformation(), 
[10:33:03.570]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:03.570]                   signalCondition(cond)
[10:33:03.570]                 }
[10:33:03.570]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:03.570]                 "immediateCondition"))) {
[10:33:03.570]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:03.570]                   ...future.conditions[[length(...future.conditions) + 
[10:33:03.570]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:03.570]                   if (TRUE && !signal) {
[10:33:03.570]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:03.570]                     {
[10:33:03.570]                       inherits <- base::inherits
[10:33:03.570]                       invokeRestart <- base::invokeRestart
[10:33:03.570]                       is.null <- base::is.null
[10:33:03.570]                       muffled <- FALSE
[10:33:03.570]                       if (inherits(cond, "message")) {
[10:33:03.570]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:03.570]                         if (muffled) 
[10:33:03.570]                           invokeRestart("muffleMessage")
[10:33:03.570]                       }
[10:33:03.570]                       else if (inherits(cond, "warning")) {
[10:33:03.570]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:03.570]                         if (muffled) 
[10:33:03.570]                           invokeRestart("muffleWarning")
[10:33:03.570]                       }
[10:33:03.570]                       else if (inherits(cond, "condition")) {
[10:33:03.570]                         if (!is.null(pattern)) {
[10:33:03.570]                           computeRestarts <- base::computeRestarts
[10:33:03.570]                           grepl <- base::grepl
[10:33:03.570]                           restarts <- computeRestarts(cond)
[10:33:03.570]                           for (restart in restarts) {
[10:33:03.570]                             name <- restart$name
[10:33:03.570]                             if (is.null(name)) 
[10:33:03.570]                               next
[10:33:03.570]                             if (!grepl(pattern, name)) 
[10:33:03.570]                               next
[10:33:03.570]                             invokeRestart(restart)
[10:33:03.570]                             muffled <- TRUE
[10:33:03.570]                             break
[10:33:03.570]                           }
[10:33:03.570]                         }
[10:33:03.570]                       }
[10:33:03.570]                       invisible(muffled)
[10:33:03.570]                     }
[10:33:03.570]                     muffleCondition(cond, pattern = "^muffle")
[10:33:03.570]                   }
[10:33:03.570]                 }
[10:33:03.570]                 else {
[10:33:03.570]                   if (TRUE) {
[10:33:03.570]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:03.570]                     {
[10:33:03.570]                       inherits <- base::inherits
[10:33:03.570]                       invokeRestart <- base::invokeRestart
[10:33:03.570]                       is.null <- base::is.null
[10:33:03.570]                       muffled <- FALSE
[10:33:03.570]                       if (inherits(cond, "message")) {
[10:33:03.570]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:03.570]                         if (muffled) 
[10:33:03.570]                           invokeRestart("muffleMessage")
[10:33:03.570]                       }
[10:33:03.570]                       else if (inherits(cond, "warning")) {
[10:33:03.570]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:03.570]                         if (muffled) 
[10:33:03.570]                           invokeRestart("muffleWarning")
[10:33:03.570]                       }
[10:33:03.570]                       else if (inherits(cond, "condition")) {
[10:33:03.570]                         if (!is.null(pattern)) {
[10:33:03.570]                           computeRestarts <- base::computeRestarts
[10:33:03.570]                           grepl <- base::grepl
[10:33:03.570]                           restarts <- computeRestarts(cond)
[10:33:03.570]                           for (restart in restarts) {
[10:33:03.570]                             name <- restart$name
[10:33:03.570]                             if (is.null(name)) 
[10:33:03.570]                               next
[10:33:03.570]                             if (!grepl(pattern, name)) 
[10:33:03.570]                               next
[10:33:03.570]                             invokeRestart(restart)
[10:33:03.570]                             muffled <- TRUE
[10:33:03.570]                             break
[10:33:03.570]                           }
[10:33:03.570]                         }
[10:33:03.570]                       }
[10:33:03.570]                       invisible(muffled)
[10:33:03.570]                     }
[10:33:03.570]                     muffleCondition(cond, pattern = "^muffle")
[10:33:03.570]                   }
[10:33:03.570]                 }
[10:33:03.570]             }
[10:33:03.570]         }))
[10:33:03.570]     }, error = function(ex) {
[10:33:03.570]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:03.570]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:03.570]                 ...future.rng), started = ...future.startTime, 
[10:33:03.570]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:03.570]             version = "1.8"), class = "FutureResult")
[10:33:03.570]     }, finally = {
[10:33:03.570]         if (!identical(...future.workdir, getwd())) 
[10:33:03.570]             setwd(...future.workdir)
[10:33:03.570]         {
[10:33:03.570]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:03.570]                 ...future.oldOptions$nwarnings <- NULL
[10:33:03.570]             }
[10:33:03.570]             base::options(...future.oldOptions)
[10:33:03.570]             if (.Platform$OS.type == "windows") {
[10:33:03.570]                 old_names <- names(...future.oldEnvVars)
[10:33:03.570]                 envs <- base::Sys.getenv()
[10:33:03.570]                 names <- names(envs)
[10:33:03.570]                 common <- intersect(names, old_names)
[10:33:03.570]                 added <- setdiff(names, old_names)
[10:33:03.570]                 removed <- setdiff(old_names, names)
[10:33:03.570]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:03.570]                   envs[common]]
[10:33:03.570]                 NAMES <- toupper(changed)
[10:33:03.570]                 args <- list()
[10:33:03.570]                 for (kk in seq_along(NAMES)) {
[10:33:03.570]                   name <- changed[[kk]]
[10:33:03.570]                   NAME <- NAMES[[kk]]
[10:33:03.570]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:03.570]                     next
[10:33:03.570]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:03.570]                 }
[10:33:03.570]                 NAMES <- toupper(added)
[10:33:03.570]                 for (kk in seq_along(NAMES)) {
[10:33:03.570]                   name <- added[[kk]]
[10:33:03.570]                   NAME <- NAMES[[kk]]
[10:33:03.570]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:03.570]                     next
[10:33:03.570]                   args[[name]] <- ""
[10:33:03.570]                 }
[10:33:03.570]                 NAMES <- toupper(removed)
[10:33:03.570]                 for (kk in seq_along(NAMES)) {
[10:33:03.570]                   name <- removed[[kk]]
[10:33:03.570]                   NAME <- NAMES[[kk]]
[10:33:03.570]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:03.570]                     next
[10:33:03.570]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:03.570]                 }
[10:33:03.570]                 if (length(args) > 0) 
[10:33:03.570]                   base::do.call(base::Sys.setenv, args = args)
[10:33:03.570]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:03.570]             }
[10:33:03.570]             else {
[10:33:03.570]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:03.570]             }
[10:33:03.570]             {
[10:33:03.570]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:03.570]                   0L) {
[10:33:03.570]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:03.570]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:03.570]                   base::options(opts)
[10:33:03.570]                 }
[10:33:03.570]                 {
[10:33:03.570]                   {
[10:33:03.570]                     NULL
[10:33:03.570]                     RNGkind("Mersenne-Twister")
[10:33:03.570]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:33:03.570]                       inherits = FALSE)
[10:33:03.570]                   }
[10:33:03.570]                   options(future.plan = NULL)
[10:33:03.570]                   if (is.na(NA_character_)) 
[10:33:03.570]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:03.570]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:03.570]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:03.570]                     .init = FALSE)
[10:33:03.570]                 }
[10:33:03.570]             }
[10:33:03.570]         }
[10:33:03.570]     })
[10:33:03.570]     if (TRUE) {
[10:33:03.570]         base::sink(type = "output", split = FALSE)
[10:33:03.570]         if (TRUE) {
[10:33:03.570]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:03.570]         }
[10:33:03.570]         else {
[10:33:03.570]             ...future.result["stdout"] <- base::list(NULL)
[10:33:03.570]         }
[10:33:03.570]         base::close(...future.stdout)
[10:33:03.570]         ...future.stdout <- NULL
[10:33:03.570]     }
[10:33:03.570]     ...future.result$conditions <- ...future.conditions
[10:33:03.570]     ...future.result$finished <- base::Sys.time()
[10:33:03.570]     ...future.result
[10:33:03.570] }
[10:33:03.572] assign_globals() ...
[10:33:03.572] List of 1
[10:33:03.572]  $ data:'data.frame':	5 obs. of  2 variables:
[10:33:03.572]   ..$ x: int [1:5] 1 2 3 4 5
[10:33:03.572]   ..$ y: int [1:5] 1 2 3 4 5
[10:33:03.572]  - attr(*, "where")=List of 1
[10:33:03.572]   ..$ data:<environment: R_EmptyEnv> 
[10:33:03.572]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:33:03.572]  - attr(*, "resolved")= logi FALSE
[10:33:03.572]  - attr(*, "total_size")= num 160
[10:33:03.572]  - attr(*, "already-done")= logi TRUE
[10:33:03.577] - copied ‘data’ to environment
[10:33:03.577] assign_globals() ... done
[10:33:03.577] plan(): Setting new future strategy stack:
[10:33:03.577] List of future strategies:
[10:33:03.577] 1. sequential:
[10:33:03.577]    - args: function (..., envir = parent.frame())
[10:33:03.577]    - tweaked: FALSE
[10:33:03.577]    - call: plan(list(sequential, strategy))
[10:33:03.578] plan(): nbrOfWorkers() = 1
[10:33:03.607] plan(): Setting new future strategy stack:
[10:33:03.607] List of future strategies:
[10:33:03.607] 1. sequential:
[10:33:03.607]    - args: function (..., envir = parent.frame())
[10:33:03.607]    - tweaked: FALSE
[10:33:03.607]    - call: plan(list(sequential, strategy))
[10:33:03.607] 2. sequential:
[10:33:03.607]    - args: function (..., envir = parent.frame())
[10:33:03.607]    - tweaked: FALSE
[10:33:03.607]    - call: plan(list(sequential, strategy))
[10:33:03.608] plan(): nbrOfWorkers() = 1
[10:33:03.608] SequentialFuture started (and completed)
[10:33:03.608] signalConditions() ...
[10:33:03.608]  - include = ‘immediateCondition’
[10:33:03.608]  - exclude = 
[10:33:03.608]  - resignal = FALSE
[10:33:03.609]  - Number of conditions: 53
[10:33:03.609] signalConditions() ... done
[10:33:03.609] - Launch lazy future ... done
[10:33:03.609] run() for ‘SequentialFuture’ ... done
[10:33:03.609] signalConditions() ...
[10:33:03.609]  - include = ‘immediateCondition’
[10:33:03.609]  - exclude = 
[10:33:03.609]  - resignal = FALSE
[10:33:03.609]  - Number of conditions: 53
[10:33:03.609] signalConditions() ... done
[10:33:03.610] Future state: ‘finished’
[10:33:03.610] signalConditions() ...
[10:33:03.610]  - include = ‘condition’
[10:33:03.610]  - exclude = ‘immediateCondition’
[10:33:03.610]  - resignal = TRUE
[10:33:03.610]  - Number of conditions: 53
[10:33:03.610]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.578] getGlobalsAndPackages() ...
[10:33:03.610]  - Condition #2: ‘deprecatedWarning’, ‘warning’, ‘condition’
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[10:33:03.610]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.592] Searching for globals...
[10:33:03.611]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.593] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[10:33:03.611]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.593] Searching for globals ... DONE
[10:33:03.611]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.593] Resolving globals: FALSE
[10:33:03.611]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.593] The total size of the 1 globals is 160 bytes (160 bytes)
[10:33:03.611]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.595] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[10:33:03.611]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.595] - globals: [1] ‘data’
[10:33:03.611]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.595] 
[10:33:03.611]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.596] getGlobalsAndPackages() ... DONE
[10:33:03.612]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.596] run() for ‘Future’ ...
[10:33:03.612]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.596] - state: ‘created’
[10:33:03.612]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.596] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:33:03.612]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.596] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:33:03.612]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.597] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:33:03.612]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.597]   - Field: ‘label’
[10:33:03.612]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.597]   - Field: ‘local’
[10:33:03.613]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.597]   - Field: ‘owner’
[10:33:03.613]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.597]   - Field: ‘envir’
[10:33:03.613]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.597]   - Field: ‘packages’
[10:33:03.613]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.597]   - Field: ‘gc’
[10:33:03.613]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.597]   - Field: ‘conditions’
[10:33:03.613]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.597]   - Field: ‘expr’
[10:33:03.613]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.598]   - Field: ‘uuid’
[10:33:03.613]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.598]   - Field: ‘seed’
[10:33:03.614]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.598]   - Field: ‘version’
[10:33:03.614]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.598]   - Field: ‘result’
[10:33:03.614]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.598]   - Field: ‘asynchronous’
[10:33:03.614]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.598]   - Field: ‘calls’
[10:33:03.614]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.598]   - Field: ‘globals’
[10:33:03.614]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.598]   - Field: ‘stdout’
[10:33:03.614]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.598]   - Field: ‘earlySignal’
[10:33:03.614]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.598]   - Field: ‘lazy’
[10:33:03.615]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.599]   - Field: ‘state’
[10:33:03.615]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.599] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:33:03.615]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.599] - Launch lazy future ...
[10:33:03.615]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.599] Packages needed by the future expression (n = 0): <none>
[10:33:03.615]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.599] Packages needed by future strategies (n = 0): <none>
[10:33:03.615]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.600] {
[10:33:03.600]     {
[10:33:03.600]         {
[10:33:03.600]             ...future.startTime <- base::Sys.time()
[10:33:03.600]             {
[10:33:03.600]                 {
[10:33:03.600]                   {
[10:33:03.600]                     base::local({
[10:33:03.600]                       has_future <- base::requireNamespace("future", 
[10:33:03.600]                         quietly = TRUE)
[10:33:03.600]                       if (has_future) {
[10:33:03.600]                         ns <- base::getNamespace("future")
[10:33:03.600]                         version <- ns[[".package"]][["version"]]
[10:33:03.600]                         if (is.null(version)) 
[10:33:03.600]                           version <- utils::packageVersion("future")
[10:33:03.600]                       }
[10:33:03.600]                       else {
[10:33:03.600]                         version <- NULL
[10:33:03.600]                       }
[10:33:03.600]                       if (!has_future || version < "1.8.0") {
[10:33:03.600]                         info <- base::c(r_version = base::gsub("R version ", 
[10:33:03.600]                           "", base::R.version$version.string), 
[10:33:03.600]                           platform = base::sprintf("%s (%s-bit)", 
[10:33:03.600]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:03.600]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:03.600]                             "release", "version")], collapse = " "), 
[10:33:03.600]                           hostname = base::Sys.info()[["nodename"]])
[10:33:03.600]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:33:03.600]                           info)
[10:33:03.600]                         info <- base::paste(info, collapse = "; ")
[10:33:03.600]                         if (!has_future) {
[10:33:03.600]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:03.600]                             info)
[10:33:03.600]                         }
[10:33:03.600]                         else {
[10:33:03.600]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:03.600]                             info, version)
[10:33:03.600]                         }
[10:33:03.600]                         base::stop(msg)
[10:33:03.600]                       }
[10:33:03.600]                     })
[10:33:03.600]                   }
[10:33:03.600]                   ...future.strategy.old <- future::plan("list")
[10:33:03.600]                   options(future.plan = NULL)
[10:33:03.600]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:03.600]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:03.600]                 }
[10:33:03.600]                 ...future.workdir <- getwd()
[10:33:03.600]             }
[10:33:03.600]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:03.600]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:03.600]         }
[10:33:03.600]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[10:33:03.600]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:03.600]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[10:33:03.600]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:03.600]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:03.600]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:03.600]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:03.600]             base::names(...future.oldOptions))
[10:33:03.600]     }
[10:33:03.600]     if (FALSE) {
[10:33:03.600]     }
[10:33:03.600]     else {
[10:33:03.600]         if (TRUE) {
[10:33:03.600]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:03.600]                 open = "w")
[10:33:03.600]         }
[10:33:03.600]         else {
[10:33:03.600]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:03.600]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:03.600]         }
[10:33:03.600]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:03.600]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:03.600]             base::sink(type = "output", split = FALSE)
[10:33:03.600]             base::close(...future.stdout)
[10:33:03.600]         }, add = TRUE)
[10:33:03.600]     }
[10:33:03.600]     ...future.frame <- base::sys.nframe()
[10:33:03.600]     ...future.conditions <- base::list()
[10:33:03.600]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:03.600]     if (FALSE) {
[10:33:03.600]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:03.600]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:03.600]     }
[10:33:03.600]     ...future.result <- base::tryCatch({
[10:33:03.600]         base::withCallingHandlers({
[10:33:03.600]             ...future.value <- base::withVisible(base::local(subset(data, 
[10:33:03.600]                 x < 3)$y))
[10:33:03.600]             future::FutureResult(value = ...future.value$value, 
[10:33:03.600]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:03.600]                   ...future.rng), globalenv = if (FALSE) 
[10:33:03.600]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:03.600]                     ...future.globalenv.names))
[10:33:03.600]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:03.600]         }, condition = base::local({
[10:33:03.600]             c <- base::c
[10:33:03.600]             inherits <- base::inherits
[10:33:03.600]             invokeRestart <- base::invokeRestart
[10:33:03.600]             length <- base::length
[10:33:03.600]             list <- base::list
[10:33:03.600]             seq.int <- base::seq.int
[10:33:03.600]             signalCondition <- base::signalCondition
[10:33:03.600]             sys.calls <- base::sys.calls
[10:33:03.600]             `[[` <- base::`[[`
[10:33:03.600]             `+` <- base::`+`
[10:33:03.600]             `<<-` <- base::`<<-`
[10:33:03.600]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:03.600]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:03.600]                   3L)]
[10:33:03.600]             }
[10:33:03.600]             function(cond) {
[10:33:03.600]                 is_error <- inherits(cond, "error")
[10:33:03.600]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:03.600]                   NULL)
[10:33:03.600]                 if (is_error) {
[10:33:03.600]                   sessionInformation <- function() {
[10:33:03.600]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:03.600]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:03.600]                       search = base::search(), system = base::Sys.info())
[10:33:03.600]                   }
[10:33:03.600]                   ...future.conditions[[length(...future.conditions) + 
[10:33:03.600]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:03.600]                     cond$call), session = sessionInformation(), 
[10:33:03.600]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:03.600]                   signalCondition(cond)
[10:33:03.600]                 }
[10:33:03.600]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:03.600]                 "immediateCondition"))) {
[10:33:03.600]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:03.600]                   ...future.conditions[[length(...future.conditions) + 
[10:33:03.600]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:03.600]                   if (TRUE && !signal) {
[10:33:03.600]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:03.600]                     {
[10:33:03.600]                       inherits <- base::inherits
[10:33:03.600]                       invokeRestart <- base::invokeRestart
[10:33:03.600]                       is.null <- base::is.null
[10:33:03.600]                       muffled <- FALSE
[10:33:03.600]                       if (inherits(cond, "message")) {
[10:33:03.600]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:03.600]                         if (muffled) 
[10:33:03.600]                           invokeRestart("muffleMessage")
[10:33:03.600]                       }
[10:33:03.600]                       else if (inherits(cond, "warning")) {
[10:33:03.600]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:03.600]                         if (muffled) 
[10:33:03.600]                           invokeRestart("muffleWarning")
[10:33:03.600]                       }
[10:33:03.600]                       else if (inherits(cond, "condition")) {
[10:33:03.600]                         if (!is.null(pattern)) {
[10:33:03.600]                           computeRestarts <- base::computeRestarts
[10:33:03.600]                           grepl <- base::grepl
[10:33:03.600]                           restarts <- computeRestarts(cond)
[10:33:03.600]                           for (restart in restarts) {
[10:33:03.600]                             name <- restart$name
[10:33:03.600]                             if (is.null(name)) 
[10:33:03.600]                               next
[10:33:03.600]                             if (!grepl(pattern, name)) 
[10:33:03.600]                               next
[10:33:03.600]                             invokeRestart(restart)
[10:33:03.600]                             muffled <- TRUE
[10:33:03.600]                             break
[10:33:03.600]                           }
[10:33:03.600]                         }
[10:33:03.600]                       }
[10:33:03.600]                       invisible(muffled)
[10:33:03.600]                     }
[10:33:03.600]                     muffleCondition(cond, pattern = "^muffle")
[10:33:03.600]                   }
[10:33:03.600]                 }
[10:33:03.600]                 else {
[10:33:03.600]                   if (TRUE) {
[10:33:03.600]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:03.600]                     {
[10:33:03.600]                       inherits <- base::inherits
[10:33:03.600]                       invokeRestart <- base::invokeRestart
[10:33:03.600]                       is.null <- base::is.null
[10:33:03.600]                       muffled <- FALSE
[10:33:03.600]                       if (inherits(cond, "message")) {
[10:33:03.600]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:03.600]                         if (muffled) 
[10:33:03.600]                           invokeRestart("muffleMessage")
[10:33:03.600]                       }
[10:33:03.600]                       else if (inherits(cond, "warning")) {
[10:33:03.600]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:03.600]                         if (muffled) 
[10:33:03.600]                           invokeRestart("muffleWarning")
[10:33:03.600]                       }
[10:33:03.600]                       else if (inherits(cond, "condition")) {
[10:33:03.600]                         if (!is.null(pattern)) {
[10:33:03.600]                           computeRestarts <- base::computeRestarts
[10:33:03.600]                           grepl <- base::grepl
[10:33:03.600]                           restarts <- computeRestarts(cond)
[10:33:03.600]                           for (restart in restarts) {
[10:33:03.600]                             name <- restart$name
[10:33:03.600]                             if (is.null(name)) 
[10:33:03.600]                               next
[10:33:03.600]                             if (!grepl(pattern, name)) 
[10:33:03.600]                               next
[10:33:03.600]                             invokeRestart(restart)
[10:33:03.600]                             muffled <- TRUE
[10:33:03.600]                             break
[10:33:03.600]                           }
[10:33:03.600]                         }
[10:33:03.600]                       }
[10:33:03.600]                       invisible(muffled)
[10:33:03.600]                     }
[10:33:03.600]                     muffleCondition(cond, pattern = "^muffle")
[10:33:03.600]                   }
[10:33:03.600]                 }
[10:33:03.600]             }
[10:33:03.600]         }))
[10:33:03.600]     }, error = function(ex) {
[10:33:03.600]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:03.600]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:03.600]                 ...future.rng), started = ...future.startTime, 
[10:33:03.600]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:03.600]             version = "1.8"), class = "FutureResult")
[10:33:03.600]     }, finally = {
[10:33:03.600]         if (!identical(...future.workdir, getwd())) 
[10:33:03.600]             setwd(...future.workdir)
[10:33:03.600]         {
[10:33:03.600]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:03.600]                 ...future.oldOptions$nwarnings <- NULL
[10:33:03.600]             }
[10:33:03.600]             base::options(...future.oldOptions)
[10:33:03.600]             if (.Platform$OS.type == "windows") {
[10:33:03.600]                 old_names <- names(...future.oldEnvVars)
[10:33:03.600]                 envs <- base::Sys.getenv()
[10:33:03.600]                 names <- names(envs)
[10:33:03.600]                 common <- intersect(names, old_names)
[10:33:03.600]                 added <- setdiff(names, old_names)
[10:33:03.600]                 removed <- setdiff(old_names, names)
[10:33:03.600]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:03.600]                   envs[common]]
[10:33:03.600]                 NAMES <- toupper(changed)
[10:33:03.600]                 args <- list()
[10:33:03.600]                 for (kk in seq_along(NAMES)) {
[10:33:03.600]                   name <- changed[[kk]]
[10:33:03.600]                   NAME <- NAMES[[kk]]
[10:33:03.600]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:03.600]                     next
[10:33:03.600]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:03.600]                 }
[10:33:03.600]                 NAMES <- toupper(added)
[10:33:03.600]                 for (kk in seq_along(NAMES)) {
[10:33:03.600]                   name <- added[[kk]]
[10:33:03.600]                   NAME <- NAMES[[kk]]
[10:33:03.600]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:03.600]                     next
[10:33:03.600]                   args[[name]] <- ""
[10:33:03.600]                 }
[10:33:03.600]                 NAMES <- toupper(removed)
[10:33:03.600]                 for (kk in seq_along(NAMES)) {
[10:33:03.600]                   name <- removed[[kk]]
[10:33:03.600]                   NAME <- NAMES[[kk]]
[10:33:03.600]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:03.600]                     next
[10:33:03.600]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:03.600]                 }
[10:33:03.600]                 if (length(args) > 0) 
[10:33:03.600]                   base::do.call(base::Sys.setenv, args = args)
[10:33:03.600]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:03.600]             }
[10:33:03.600]             else {
[10:33:03.600]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:03.600]             }
[10:33:03.600]             {
[10:33:03.600]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:03.600]                   0L) {
[10:33:03.600]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:03.600]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:03.600]                   base::options(opts)
[10:33:03.600]                 }
[10:33:03.600]                 {
[10:33:03.600]                   {
[10:33:03.600]                     NULL
[10:33:03.600]                     RNGkind("Mersenne-Twister")
[10:33:03.600]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:33:03.600]                       inherits = FALSE)
[10:33:03.600]                   }
[10:33:03.600]                   options(future.plan = NULL)
[10:33:03.600]                   if (is.na(NA_character_)) 
[10:33:03.600]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:03.600]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:03.600]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:03.600]                     .init = FALSE)
[10:33:03.600]                 }
[10:33:03.600]             }
[10:33:03.600]         }
[10:33:03.600]     })
[10:33:03.600]     if (TRUE) {
[10:33:03.600]         base::sink(type = "output", split = FALSE)
[10:33:03.600]         if (TRUE) {
[10:33:03.600]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:03.600]         }
[10:33:03.600]         else {
[10:33:03.600]             ...future.result["stdout"] <- base::list(NULL)
[10:33:03.600]         }
[10:33:03.600]         base::close(...future.stdout)
[10:33:03.600]         ...future.stdout <- NULL
[10:33:03.600]     }
[10:33:03.600]     ...future.result$conditions <- ...future.conditions
[10:33:03.600]     ...future.result$finished <- base::Sys.time()
[10:33:03.600]     ...future.result
[10:33:03.600] }
[10:33:03.615]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.601] assign_globals() ...
[10:33:03.616]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.601] List of 1
[10:33:03.601]  $ data:'data.frame':	5 obs. of  2 variables:
[10:33:03.601]   ..$ x: int [1:5] 1 2 3 4 5
[10:33:03.601]   ..$ y: int [1:5] 1 2 3 4 5
[10:33:03.601]  - attr(*, "where")=List of 1
[10:33:03.601]   ..$ data:<environment: R_EmptyEnv> 
[10:33:03.601]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:33:03.601]  - attr(*, "resolved")= logi FALSE
[10:33:03.601]  - attr(*, "total_size")= num 160
[10:33:03.601]  - attr(*, "already-done")= logi TRUE
[10:33:03.616]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.604] - copied ‘data’ to environment
[10:33:03.616]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.604] assign_globals() ... done
[10:33:03.616]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.605] plan(): Setting new future strategy stack:
[10:33:03.616]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.605] List of future strategies:
[10:33:03.605] 1. sequential:
[10:33:03.605]    - args: function (..., envir = parent.frame())
[10:33:03.605]    - tweaked: FALSE
[10:33:03.605]    - call: NULL
[10:33:03.616]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.605] plan(): nbrOfWorkers() = 1
[10:33:03.616]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.606] plan(): Setting new future strategy stack:
[10:33:03.616]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.606] List of future strategies:
[10:33:03.606] 1. sequential:
[10:33:03.606]    - args: function (..., envir = parent.frame())
[10:33:03.606]    - tweaked: FALSE
[10:33:03.606]    - call: plan(list(sequential, strategy))
[10:33:03.617]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.606] plan(): nbrOfWorkers() = 1
[10:33:03.617]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.607] SequentialFuture started (and completed)
[10:33:03.617]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.607] - Launch lazy future ... done
[10:33:03.617]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.607] run() for ‘SequentialFuture’ ... done
[10:33:03.617] signalConditions() ... done
- Strategy: sequential ... DONE
- Strategy: multicore ...
[10:33:03.618] plan(): Setting new future strategy stack:
[10:33:03.618] List of future strategies:
[10:33:03.618] 1. multicore:
[10:33:03.618]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:33:03.618]    - tweaked: FALSE
[10:33:03.618]    - call: plan(strategy)
[10:33:03.622] plan(): nbrOfWorkers() = 2
[10:33:03.624] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:33:03.624] Searching for globals...
[10:33:03.624] - globals found: [1] ‘getOption’
[10:33:03.625] Searching for globals ... DONE
[10:33:03.625] Resolving globals: FALSE
[10:33:03.625] 
[10:33:03.625] 
[10:33:03.625] getGlobalsAndPackages() ... DONE
[10:33:03.625] run() for ‘Future’ ...
[10:33:03.626] - state: ‘created’
[10:33:03.626] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:33:03.630] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:33:03.630] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:33:03.630]   - Field: ‘label’
[10:33:03.630]   - Field: ‘local’
[10:33:03.630]   - Field: ‘owner’
[10:33:03.630]   - Field: ‘envir’
[10:33:03.630]   - Field: ‘workers’
[10:33:03.630]   - Field: ‘packages’
[10:33:03.630]   - Field: ‘gc’
[10:33:03.630]   - Field: ‘job’
[10:33:03.631]   - Field: ‘conditions’
[10:33:03.631]   - Field: ‘expr’
[10:33:03.631]   - Field: ‘uuid’
[10:33:03.631]   - Field: ‘seed’
[10:33:03.631]   - Field: ‘version’
[10:33:03.631]   - Field: ‘result’
[10:33:03.631]   - Field: ‘asynchronous’
[10:33:03.631]   - Field: ‘calls’
[10:33:03.631]   - Field: ‘globals’
[10:33:03.631]   - Field: ‘stdout’
[10:33:03.631]   - Field: ‘earlySignal’
[10:33:03.632]   - Field: ‘lazy’
[10:33:03.632]   - Field: ‘state’
[10:33:03.632] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:33:03.632] - Launch lazy future ...
[10:33:03.633] Packages needed by the future expression (n = 0): <none>
[10:33:03.633] Packages needed by future strategies (n = 0): <none>
[10:33:03.634] {
[10:33:03.634]     {
[10:33:03.634]         {
[10:33:03.634]             ...future.startTime <- base::Sys.time()
[10:33:03.634]             {
[10:33:03.634]                 {
[10:33:03.634]                   {
[10:33:03.634]                     {
[10:33:03.634]                       base::local({
[10:33:03.634]                         has_future <- base::requireNamespace("future", 
[10:33:03.634]                           quietly = TRUE)
[10:33:03.634]                         if (has_future) {
[10:33:03.634]                           ns <- base::getNamespace("future")
[10:33:03.634]                           version <- ns[[".package"]][["version"]]
[10:33:03.634]                           if (is.null(version)) 
[10:33:03.634]                             version <- utils::packageVersion("future")
[10:33:03.634]                         }
[10:33:03.634]                         else {
[10:33:03.634]                           version <- NULL
[10:33:03.634]                         }
[10:33:03.634]                         if (!has_future || version < "1.8.0") {
[10:33:03.634]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:03.634]                             "", base::R.version$version.string), 
[10:33:03.634]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:03.634]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:03.634]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:03.634]                               "release", "version")], collapse = " "), 
[10:33:03.634]                             hostname = base::Sys.info()[["nodename"]])
[10:33:03.634]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:03.634]                             info)
[10:33:03.634]                           info <- base::paste(info, collapse = "; ")
[10:33:03.634]                           if (!has_future) {
[10:33:03.634]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:03.634]                               info)
[10:33:03.634]                           }
[10:33:03.634]                           else {
[10:33:03.634]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:03.634]                               info, version)
[10:33:03.634]                           }
[10:33:03.634]                           base::stop(msg)
[10:33:03.634]                         }
[10:33:03.634]                       })
[10:33:03.634]                     }
[10:33:03.634]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:03.634]                     base::options(mc.cores = 1L)
[10:33:03.634]                   }
[10:33:03.634]                   ...future.strategy.old <- future::plan("list")
[10:33:03.634]                   options(future.plan = NULL)
[10:33:03.634]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:03.634]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:03.634]                 }
[10:33:03.634]                 ...future.workdir <- getwd()
[10:33:03.634]             }
[10:33:03.634]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:03.634]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:03.634]         }
[10:33:03.634]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[10:33:03.634]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:03.634]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[10:33:03.634]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:03.634]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:03.634]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:03.634]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:03.634]             base::names(...future.oldOptions))
[10:33:03.634]     }
[10:33:03.634]     if (FALSE) {
[10:33:03.634]     }
[10:33:03.634]     else {
[10:33:03.634]         if (TRUE) {
[10:33:03.634]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:03.634]                 open = "w")
[10:33:03.634]         }
[10:33:03.634]         else {
[10:33:03.634]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:03.634]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:03.634]         }
[10:33:03.634]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:03.634]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:03.634]             base::sink(type = "output", split = FALSE)
[10:33:03.634]             base::close(...future.stdout)
[10:33:03.634]         }, add = TRUE)
[10:33:03.634]     }
[10:33:03.634]     ...future.frame <- base::sys.nframe()
[10:33:03.634]     ...future.conditions <- base::list()
[10:33:03.634]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:03.634]     if (FALSE) {
[10:33:03.634]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:03.634]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:03.634]     }
[10:33:03.634]     ...future.result <- base::tryCatch({
[10:33:03.634]         base::withCallingHandlers({
[10:33:03.634]             ...future.value <- base::withVisible(base::local({
[10:33:03.634]                 withCallingHandlers({
[10:33:03.634]                   getOption("future.globals.onMissing")
[10:33:03.634]                 }, immediateCondition = function(cond) {
[10:33:03.634]                   save_rds <- function (object, pathname, ...) 
[10:33:03.634]                   {
[10:33:03.634]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:33:03.634]                     if (file_test("-f", pathname_tmp)) {
[10:33:03.634]                       fi_tmp <- file.info(pathname_tmp)
[10:33:03.634]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:33:03.634]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:33:03.634]                         fi_tmp[["mtime"]])
[10:33:03.634]                     }
[10:33:03.634]                     tryCatch({
[10:33:03.634]                       saveRDS(object, file = pathname_tmp, ...)
[10:33:03.634]                     }, error = function(ex) {
[10:33:03.634]                       msg <- conditionMessage(ex)
[10:33:03.634]                       fi_tmp <- file.info(pathname_tmp)
[10:33:03.634]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:33:03.634]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:33:03.634]                         fi_tmp[["mtime"]], msg)
[10:33:03.634]                       ex$message <- msg
[10:33:03.634]                       stop(ex)
[10:33:03.634]                     })
[10:33:03.634]                     stopifnot(file_test("-f", pathname_tmp))
[10:33:03.634]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:33:03.634]                     if (!res || file_test("-f", pathname_tmp)) {
[10:33:03.634]                       fi_tmp <- file.info(pathname_tmp)
[10:33:03.634]                       fi <- file.info(pathname)
[10:33:03.634]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:33:03.634]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:33:03.634]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:33:03.634]                         fi[["size"]], fi[["mtime"]])
[10:33:03.634]                       stop(msg)
[10:33:03.634]                     }
[10:33:03.634]                     invisible(pathname)
[10:33:03.634]                   }
[10:33:03.634]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:33:03.634]                     rootPath = tempdir()) 
[10:33:03.634]                   {
[10:33:03.634]                     obj <- list(time = Sys.time(), condition = cond)
[10:33:03.634]                     file <- tempfile(pattern = class(cond)[1], 
[10:33:03.634]                       tmpdir = path, fileext = ".rds")
[10:33:03.634]                     save_rds(obj, file)
[10:33:03.634]                   }
[10:33:03.634]                   saveImmediateCondition(cond, path = "/tmp/RtmpX9hGRd/.future/immediateConditions")
[10:33:03.634]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:03.634]                   {
[10:33:03.634]                     inherits <- base::inherits
[10:33:03.634]                     invokeRestart <- base::invokeRestart
[10:33:03.634]                     is.null <- base::is.null
[10:33:03.634]                     muffled <- FALSE
[10:33:03.634]                     if (inherits(cond, "message")) {
[10:33:03.634]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:03.634]                       if (muffled) 
[10:33:03.634]                         invokeRestart("muffleMessage")
[10:33:03.634]                     }
[10:33:03.634]                     else if (inherits(cond, "warning")) {
[10:33:03.634]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:03.634]                       if (muffled) 
[10:33:03.634]                         invokeRestart("muffleWarning")
[10:33:03.634]                     }
[10:33:03.634]                     else if (inherits(cond, "condition")) {
[10:33:03.634]                       if (!is.null(pattern)) {
[10:33:03.634]                         computeRestarts <- base::computeRestarts
[10:33:03.634]                         grepl <- base::grepl
[10:33:03.634]                         restarts <- computeRestarts(cond)
[10:33:03.634]                         for (restart in restarts) {
[10:33:03.634]                           name <- restart$name
[10:33:03.634]                           if (is.null(name)) 
[10:33:03.634]                             next
[10:33:03.634]                           if (!grepl(pattern, name)) 
[10:33:03.634]                             next
[10:33:03.634]                           invokeRestart(restart)
[10:33:03.634]                           muffled <- TRUE
[10:33:03.634]                           break
[10:33:03.634]                         }
[10:33:03.634]                       }
[10:33:03.634]                     }
[10:33:03.634]                     invisible(muffled)
[10:33:03.634]                   }
[10:33:03.634]                   muffleCondition(cond)
[10:33:03.634]                 })
[10:33:03.634]             }))
[10:33:03.634]             future::FutureResult(value = ...future.value$value, 
[10:33:03.634]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:03.634]                   ...future.rng), globalenv = if (FALSE) 
[10:33:03.634]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:03.634]                     ...future.globalenv.names))
[10:33:03.634]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:03.634]         }, condition = base::local({
[10:33:03.634]             c <- base::c
[10:33:03.634]             inherits <- base::inherits
[10:33:03.634]             invokeRestart <- base::invokeRestart
[10:33:03.634]             length <- base::length
[10:33:03.634]             list <- base::list
[10:33:03.634]             seq.int <- base::seq.int
[10:33:03.634]             signalCondition <- base::signalCondition
[10:33:03.634]             sys.calls <- base::sys.calls
[10:33:03.634]             `[[` <- base::`[[`
[10:33:03.634]             `+` <- base::`+`
[10:33:03.634]             `<<-` <- base::`<<-`
[10:33:03.634]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:03.634]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:03.634]                   3L)]
[10:33:03.634]             }
[10:33:03.634]             function(cond) {
[10:33:03.634]                 is_error <- inherits(cond, "error")
[10:33:03.634]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:03.634]                   NULL)
[10:33:03.634]                 if (is_error) {
[10:33:03.634]                   sessionInformation <- function() {
[10:33:03.634]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:03.634]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:03.634]                       search = base::search(), system = base::Sys.info())
[10:33:03.634]                   }
[10:33:03.634]                   ...future.conditions[[length(...future.conditions) + 
[10:33:03.634]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:03.634]                     cond$call), session = sessionInformation(), 
[10:33:03.634]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:03.634]                   signalCondition(cond)
[10:33:03.634]                 }
[10:33:03.634]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:03.634]                 "immediateCondition"))) {
[10:33:03.634]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:03.634]                   ...future.conditions[[length(...future.conditions) + 
[10:33:03.634]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:03.634]                   if (TRUE && !signal) {
[10:33:03.634]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:03.634]                     {
[10:33:03.634]                       inherits <- base::inherits
[10:33:03.634]                       invokeRestart <- base::invokeRestart
[10:33:03.634]                       is.null <- base::is.null
[10:33:03.634]                       muffled <- FALSE
[10:33:03.634]                       if (inherits(cond, "message")) {
[10:33:03.634]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:03.634]                         if (muffled) 
[10:33:03.634]                           invokeRestart("muffleMessage")
[10:33:03.634]                       }
[10:33:03.634]                       else if (inherits(cond, "warning")) {
[10:33:03.634]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:03.634]                         if (muffled) 
[10:33:03.634]                           invokeRestart("muffleWarning")
[10:33:03.634]                       }
[10:33:03.634]                       else if (inherits(cond, "condition")) {
[10:33:03.634]                         if (!is.null(pattern)) {
[10:33:03.634]                           computeRestarts <- base::computeRestarts
[10:33:03.634]                           grepl <- base::grepl
[10:33:03.634]                           restarts <- computeRestarts(cond)
[10:33:03.634]                           for (restart in restarts) {
[10:33:03.634]                             name <- restart$name
[10:33:03.634]                             if (is.null(name)) 
[10:33:03.634]                               next
[10:33:03.634]                             if (!grepl(pattern, name)) 
[10:33:03.634]                               next
[10:33:03.634]                             invokeRestart(restart)
[10:33:03.634]                             muffled <- TRUE
[10:33:03.634]                             break
[10:33:03.634]                           }
[10:33:03.634]                         }
[10:33:03.634]                       }
[10:33:03.634]                       invisible(muffled)
[10:33:03.634]                     }
[10:33:03.634]                     muffleCondition(cond, pattern = "^muffle")
[10:33:03.634]                   }
[10:33:03.634]                 }
[10:33:03.634]                 else {
[10:33:03.634]                   if (TRUE) {
[10:33:03.634]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:03.634]                     {
[10:33:03.634]                       inherits <- base::inherits
[10:33:03.634]                       invokeRestart <- base::invokeRestart
[10:33:03.634]                       is.null <- base::is.null
[10:33:03.634]                       muffled <- FALSE
[10:33:03.634]                       if (inherits(cond, "message")) {
[10:33:03.634]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:03.634]                         if (muffled) 
[10:33:03.634]                           invokeRestart("muffleMessage")
[10:33:03.634]                       }
[10:33:03.634]                       else if (inherits(cond, "warning")) {
[10:33:03.634]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:03.634]                         if (muffled) 
[10:33:03.634]                           invokeRestart("muffleWarning")
[10:33:03.634]                       }
[10:33:03.634]                       else if (inherits(cond, "condition")) {
[10:33:03.634]                         if (!is.null(pattern)) {
[10:33:03.634]                           computeRestarts <- base::computeRestarts
[10:33:03.634]                           grepl <- base::grepl
[10:33:03.634]                           restarts <- computeRestarts(cond)
[10:33:03.634]                           for (restart in restarts) {
[10:33:03.634]                             name <- restart$name
[10:33:03.634]                             if (is.null(name)) 
[10:33:03.634]                               next
[10:33:03.634]                             if (!grepl(pattern, name)) 
[10:33:03.634]                               next
[10:33:03.634]                             invokeRestart(restart)
[10:33:03.634]                             muffled <- TRUE
[10:33:03.634]                             break
[10:33:03.634]                           }
[10:33:03.634]                         }
[10:33:03.634]                       }
[10:33:03.634]                       invisible(muffled)
[10:33:03.634]                     }
[10:33:03.634]                     muffleCondition(cond, pattern = "^muffle")
[10:33:03.634]                   }
[10:33:03.634]                 }
[10:33:03.634]             }
[10:33:03.634]         }))
[10:33:03.634]     }, error = function(ex) {
[10:33:03.634]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:03.634]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:03.634]                 ...future.rng), started = ...future.startTime, 
[10:33:03.634]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:03.634]             version = "1.8"), class = "FutureResult")
[10:33:03.634]     }, finally = {
[10:33:03.634]         if (!identical(...future.workdir, getwd())) 
[10:33:03.634]             setwd(...future.workdir)
[10:33:03.634]         {
[10:33:03.634]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:03.634]                 ...future.oldOptions$nwarnings <- NULL
[10:33:03.634]             }
[10:33:03.634]             base::options(...future.oldOptions)
[10:33:03.634]             if (.Platform$OS.type == "windows") {
[10:33:03.634]                 old_names <- names(...future.oldEnvVars)
[10:33:03.634]                 envs <- base::Sys.getenv()
[10:33:03.634]                 names <- names(envs)
[10:33:03.634]                 common <- intersect(names, old_names)
[10:33:03.634]                 added <- setdiff(names, old_names)
[10:33:03.634]                 removed <- setdiff(old_names, names)
[10:33:03.634]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:03.634]                   envs[common]]
[10:33:03.634]                 NAMES <- toupper(changed)
[10:33:03.634]                 args <- list()
[10:33:03.634]                 for (kk in seq_along(NAMES)) {
[10:33:03.634]                   name <- changed[[kk]]
[10:33:03.634]                   NAME <- NAMES[[kk]]
[10:33:03.634]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:03.634]                     next
[10:33:03.634]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:03.634]                 }
[10:33:03.634]                 NAMES <- toupper(added)
[10:33:03.634]                 for (kk in seq_along(NAMES)) {
[10:33:03.634]                   name <- added[[kk]]
[10:33:03.634]                   NAME <- NAMES[[kk]]
[10:33:03.634]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:03.634]                     next
[10:33:03.634]                   args[[name]] <- ""
[10:33:03.634]                 }
[10:33:03.634]                 NAMES <- toupper(removed)
[10:33:03.634]                 for (kk in seq_along(NAMES)) {
[10:33:03.634]                   name <- removed[[kk]]
[10:33:03.634]                   NAME <- NAMES[[kk]]
[10:33:03.634]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:03.634]                     next
[10:33:03.634]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:03.634]                 }
[10:33:03.634]                 if (length(args) > 0) 
[10:33:03.634]                   base::do.call(base::Sys.setenv, args = args)
[10:33:03.634]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:03.634]             }
[10:33:03.634]             else {
[10:33:03.634]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:03.634]             }
[10:33:03.634]             {
[10:33:03.634]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:03.634]                   0L) {
[10:33:03.634]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:03.634]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:03.634]                   base::options(opts)
[10:33:03.634]                 }
[10:33:03.634]                 {
[10:33:03.634]                   {
[10:33:03.634]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:03.634]                     NULL
[10:33:03.634]                   }
[10:33:03.634]                   options(future.plan = NULL)
[10:33:03.634]                   if (is.na(NA_character_)) 
[10:33:03.634]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:03.634]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:03.634]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:03.634]                     .init = FALSE)
[10:33:03.634]                 }
[10:33:03.634]             }
[10:33:03.634]         }
[10:33:03.634]     })
[10:33:03.634]     if (TRUE) {
[10:33:03.634]         base::sink(type = "output", split = FALSE)
[10:33:03.634]         if (TRUE) {
[10:33:03.634]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:03.634]         }
[10:33:03.634]         else {
[10:33:03.634]             ...future.result["stdout"] <- base::list(NULL)
[10:33:03.634]         }
[10:33:03.634]         base::close(...future.stdout)
[10:33:03.634]         ...future.stdout <- NULL
[10:33:03.634]     }
[10:33:03.634]     ...future.result$conditions <- ...future.conditions
[10:33:03.634]     ...future.result$finished <- base::Sys.time()
[10:33:03.634]     ...future.result
[10:33:03.634] }
[10:33:03.636] requestCore(): workers = 2
[10:33:03.639] MulticoreFuture started
[10:33:03.639] - Launch lazy future ... done
[10:33:03.639] run() for ‘MulticoreFuture’ ... done
[10:33:03.639] plan(): Setting new future strategy stack:
[10:33:03.640] List of future strategies:
[10:33:03.640] 1. sequential:
[10:33:03.640]    - args: function (..., envir = parent.frame())
[10:33:03.640]    - tweaked: FALSE
[10:33:03.640]    - call: NULL
[10:33:03.640] plan(): nbrOfWorkers() = 1
[10:33:03.641] result() for MulticoreFuture ...
[10:33:03.642] plan(): Setting new future strategy stack:
[10:33:03.643] List of future strategies:
[10:33:03.643] 1. multicore:
[10:33:03.643]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:33:03.643]    - tweaked: FALSE
[10:33:03.643]    - call: plan(strategy)
[10:33:03.648] plan(): nbrOfWorkers() = 2
[10:33:03.652] result() for MulticoreFuture ...
[10:33:03.652] result() for MulticoreFuture ... done
[10:33:03.652] result() for MulticoreFuture ... done
[10:33:03.652] result() for MulticoreFuture ...
[10:33:03.653] result() for MulticoreFuture ... done
[10:33:03.653] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[10:33:03.653] Searching for globals...
[10:33:03.654] - globals found: [1] ‘getOption’
[10:33:03.654] Searching for globals ... DONE
[10:33:03.654] Resolving globals: FALSE
[10:33:03.655] 
[10:33:03.655] 
[10:33:03.655] getGlobalsAndPackages() ... DONE
[10:33:03.655] run() for ‘Future’ ...
[10:33:03.655] - state: ‘created’
[10:33:03.656] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:33:03.660] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:33:03.660] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:33:03.660]   - Field: ‘label’
[10:33:03.660]   - Field: ‘local’
[10:33:03.660]   - Field: ‘owner’
[10:33:03.660]   - Field: ‘envir’
[10:33:03.660]   - Field: ‘workers’
[10:33:03.661]   - Field: ‘packages’
[10:33:03.661]   - Field: ‘gc’
[10:33:03.661]   - Field: ‘job’
[10:33:03.661]   - Field: ‘conditions’
[10:33:03.661]   - Field: ‘expr’
[10:33:03.661]   - Field: ‘uuid’
[10:33:03.661]   - Field: ‘seed’
[10:33:03.661]   - Field: ‘version’
[10:33:03.662]   - Field: ‘result’
[10:33:03.662]   - Field: ‘asynchronous’
[10:33:03.662]   - Field: ‘calls’
[10:33:03.662]   - Field: ‘globals’
[10:33:03.662]   - Field: ‘stdout’
[10:33:03.662]   - Field: ‘earlySignal’
[10:33:03.662]   - Field: ‘lazy’
[10:33:03.662]   - Field: ‘state’
[10:33:03.662] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:33:03.663] - Launch lazy future ...
[10:33:03.663] Packages needed by the future expression (n = 0): <none>
[10:33:03.663] Packages needed by future strategies (n = 0): <none>
[10:33:03.664] {
[10:33:03.664]     {
[10:33:03.664]         {
[10:33:03.664]             ...future.startTime <- base::Sys.time()
[10:33:03.664]             {
[10:33:03.664]                 {
[10:33:03.664]                   {
[10:33:03.664]                     {
[10:33:03.664]                       base::local({
[10:33:03.664]                         has_future <- base::requireNamespace("future", 
[10:33:03.664]                           quietly = TRUE)
[10:33:03.664]                         if (has_future) {
[10:33:03.664]                           ns <- base::getNamespace("future")
[10:33:03.664]                           version <- ns[[".package"]][["version"]]
[10:33:03.664]                           if (is.null(version)) 
[10:33:03.664]                             version <- utils::packageVersion("future")
[10:33:03.664]                         }
[10:33:03.664]                         else {
[10:33:03.664]                           version <- NULL
[10:33:03.664]                         }
[10:33:03.664]                         if (!has_future || version < "1.8.0") {
[10:33:03.664]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:03.664]                             "", base::R.version$version.string), 
[10:33:03.664]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:03.664]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:03.664]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:03.664]                               "release", "version")], collapse = " "), 
[10:33:03.664]                             hostname = base::Sys.info()[["nodename"]])
[10:33:03.664]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:03.664]                             info)
[10:33:03.664]                           info <- base::paste(info, collapse = "; ")
[10:33:03.664]                           if (!has_future) {
[10:33:03.664]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:03.664]                               info)
[10:33:03.664]                           }
[10:33:03.664]                           else {
[10:33:03.664]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:03.664]                               info, version)
[10:33:03.664]                           }
[10:33:03.664]                           base::stop(msg)
[10:33:03.664]                         }
[10:33:03.664]                       })
[10:33:03.664]                     }
[10:33:03.664]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:03.664]                     base::options(mc.cores = 1L)
[10:33:03.664]                   }
[10:33:03.664]                   ...future.strategy.old <- future::plan("list")
[10:33:03.664]                   options(future.plan = NULL)
[10:33:03.664]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:03.664]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:03.664]                 }
[10:33:03.664]                 ...future.workdir <- getwd()
[10:33:03.664]             }
[10:33:03.664]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:03.664]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:03.664]         }
[10:33:03.664]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[10:33:03.664]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:03.664]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[10:33:03.664]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:03.664]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:03.664]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:03.664]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:03.664]             base::names(...future.oldOptions))
[10:33:03.664]     }
[10:33:03.664]     if (FALSE) {
[10:33:03.664]     }
[10:33:03.664]     else {
[10:33:03.664]         if (TRUE) {
[10:33:03.664]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:03.664]                 open = "w")
[10:33:03.664]         }
[10:33:03.664]         else {
[10:33:03.664]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:03.664]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:03.664]         }
[10:33:03.664]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:03.664]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:03.664]             base::sink(type = "output", split = FALSE)
[10:33:03.664]             base::close(...future.stdout)
[10:33:03.664]         }, add = TRUE)
[10:33:03.664]     }
[10:33:03.664]     ...future.frame <- base::sys.nframe()
[10:33:03.664]     ...future.conditions <- base::list()
[10:33:03.664]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:03.664]     if (FALSE) {
[10:33:03.664]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:03.664]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:03.664]     }
[10:33:03.664]     ...future.result <- base::tryCatch({
[10:33:03.664]         base::withCallingHandlers({
[10:33:03.664]             ...future.value <- base::withVisible(base::local({
[10:33:03.664]                 withCallingHandlers({
[10:33:03.664]                   getOption("future.globals.onMissing")
[10:33:03.664]                 }, immediateCondition = function(cond) {
[10:33:03.664]                   save_rds <- function (object, pathname, ...) 
[10:33:03.664]                   {
[10:33:03.664]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:33:03.664]                     if (file_test("-f", pathname_tmp)) {
[10:33:03.664]                       fi_tmp <- file.info(pathname_tmp)
[10:33:03.664]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:33:03.664]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:33:03.664]                         fi_tmp[["mtime"]])
[10:33:03.664]                     }
[10:33:03.664]                     tryCatch({
[10:33:03.664]                       saveRDS(object, file = pathname_tmp, ...)
[10:33:03.664]                     }, error = function(ex) {
[10:33:03.664]                       msg <- conditionMessage(ex)
[10:33:03.664]                       fi_tmp <- file.info(pathname_tmp)
[10:33:03.664]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:33:03.664]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:33:03.664]                         fi_tmp[["mtime"]], msg)
[10:33:03.664]                       ex$message <- msg
[10:33:03.664]                       stop(ex)
[10:33:03.664]                     })
[10:33:03.664]                     stopifnot(file_test("-f", pathname_tmp))
[10:33:03.664]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:33:03.664]                     if (!res || file_test("-f", pathname_tmp)) {
[10:33:03.664]                       fi_tmp <- file.info(pathname_tmp)
[10:33:03.664]                       fi <- file.info(pathname)
[10:33:03.664]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:33:03.664]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:33:03.664]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:33:03.664]                         fi[["size"]], fi[["mtime"]])
[10:33:03.664]                       stop(msg)
[10:33:03.664]                     }
[10:33:03.664]                     invisible(pathname)
[10:33:03.664]                   }
[10:33:03.664]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:33:03.664]                     rootPath = tempdir()) 
[10:33:03.664]                   {
[10:33:03.664]                     obj <- list(time = Sys.time(), condition = cond)
[10:33:03.664]                     file <- tempfile(pattern = class(cond)[1], 
[10:33:03.664]                       tmpdir = path, fileext = ".rds")
[10:33:03.664]                     save_rds(obj, file)
[10:33:03.664]                   }
[10:33:03.664]                   saveImmediateCondition(cond, path = "/tmp/RtmpX9hGRd/.future/immediateConditions")
[10:33:03.664]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:03.664]                   {
[10:33:03.664]                     inherits <- base::inherits
[10:33:03.664]                     invokeRestart <- base::invokeRestart
[10:33:03.664]                     is.null <- base::is.null
[10:33:03.664]                     muffled <- FALSE
[10:33:03.664]                     if (inherits(cond, "message")) {
[10:33:03.664]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:03.664]                       if (muffled) 
[10:33:03.664]                         invokeRestart("muffleMessage")
[10:33:03.664]                     }
[10:33:03.664]                     else if (inherits(cond, "warning")) {
[10:33:03.664]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:03.664]                       if (muffled) 
[10:33:03.664]                         invokeRestart("muffleWarning")
[10:33:03.664]                     }
[10:33:03.664]                     else if (inherits(cond, "condition")) {
[10:33:03.664]                       if (!is.null(pattern)) {
[10:33:03.664]                         computeRestarts <- base::computeRestarts
[10:33:03.664]                         grepl <- base::grepl
[10:33:03.664]                         restarts <- computeRestarts(cond)
[10:33:03.664]                         for (restart in restarts) {
[10:33:03.664]                           name <- restart$name
[10:33:03.664]                           if (is.null(name)) 
[10:33:03.664]                             next
[10:33:03.664]                           if (!grepl(pattern, name)) 
[10:33:03.664]                             next
[10:33:03.664]                           invokeRestart(restart)
[10:33:03.664]                           muffled <- TRUE
[10:33:03.664]                           break
[10:33:03.664]                         }
[10:33:03.664]                       }
[10:33:03.664]                     }
[10:33:03.664]                     invisible(muffled)
[10:33:03.664]                   }
[10:33:03.664]                   muffleCondition(cond)
[10:33:03.664]                 })
[10:33:03.664]             }))
[10:33:03.664]             future::FutureResult(value = ...future.value$value, 
[10:33:03.664]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:03.664]                   ...future.rng), globalenv = if (FALSE) 
[10:33:03.664]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:03.664]                     ...future.globalenv.names))
[10:33:03.664]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:03.664]         }, condition = base::local({
[10:33:03.664]             c <- base::c
[10:33:03.664]             inherits <- base::inherits
[10:33:03.664]             invokeRestart <- base::invokeRestart
[10:33:03.664]             length <- base::length
[10:33:03.664]             list <- base::list
[10:33:03.664]             seq.int <- base::seq.int
[10:33:03.664]             signalCondition <- base::signalCondition
[10:33:03.664]             sys.calls <- base::sys.calls
[10:33:03.664]             `[[` <- base::`[[`
[10:33:03.664]             `+` <- base::`+`
[10:33:03.664]             `<<-` <- base::`<<-`
[10:33:03.664]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:03.664]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:03.664]                   3L)]
[10:33:03.664]             }
[10:33:03.664]             function(cond) {
[10:33:03.664]                 is_error <- inherits(cond, "error")
[10:33:03.664]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:03.664]                   NULL)
[10:33:03.664]                 if (is_error) {
[10:33:03.664]                   sessionInformation <- function() {
[10:33:03.664]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:03.664]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:03.664]                       search = base::search(), system = base::Sys.info())
[10:33:03.664]                   }
[10:33:03.664]                   ...future.conditions[[length(...future.conditions) + 
[10:33:03.664]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:03.664]                     cond$call), session = sessionInformation(), 
[10:33:03.664]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:03.664]                   signalCondition(cond)
[10:33:03.664]                 }
[10:33:03.664]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:03.664]                 "immediateCondition"))) {
[10:33:03.664]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:03.664]                   ...future.conditions[[length(...future.conditions) + 
[10:33:03.664]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:03.664]                   if (TRUE && !signal) {
[10:33:03.664]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:03.664]                     {
[10:33:03.664]                       inherits <- base::inherits
[10:33:03.664]                       invokeRestart <- base::invokeRestart
[10:33:03.664]                       is.null <- base::is.null
[10:33:03.664]                       muffled <- FALSE
[10:33:03.664]                       if (inherits(cond, "message")) {
[10:33:03.664]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:03.664]                         if (muffled) 
[10:33:03.664]                           invokeRestart("muffleMessage")
[10:33:03.664]                       }
[10:33:03.664]                       else if (inherits(cond, "warning")) {
[10:33:03.664]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:03.664]                         if (muffled) 
[10:33:03.664]                           invokeRestart("muffleWarning")
[10:33:03.664]                       }
[10:33:03.664]                       else if (inherits(cond, "condition")) {
[10:33:03.664]                         if (!is.null(pattern)) {
[10:33:03.664]                           computeRestarts <- base::computeRestarts
[10:33:03.664]                           grepl <- base::grepl
[10:33:03.664]                           restarts <- computeRestarts(cond)
[10:33:03.664]                           for (restart in restarts) {
[10:33:03.664]                             name <- restart$name
[10:33:03.664]                             if (is.null(name)) 
[10:33:03.664]                               next
[10:33:03.664]                             if (!grepl(pattern, name)) 
[10:33:03.664]                               next
[10:33:03.664]                             invokeRestart(restart)
[10:33:03.664]                             muffled <- TRUE
[10:33:03.664]                             break
[10:33:03.664]                           }
[10:33:03.664]                         }
[10:33:03.664]                       }
[10:33:03.664]                       invisible(muffled)
[10:33:03.664]                     }
[10:33:03.664]                     muffleCondition(cond, pattern = "^muffle")
[10:33:03.664]                   }
[10:33:03.664]                 }
[10:33:03.664]                 else {
[10:33:03.664]                   if (TRUE) {
[10:33:03.664]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:03.664]                     {
[10:33:03.664]                       inherits <- base::inherits
[10:33:03.664]                       invokeRestart <- base::invokeRestart
[10:33:03.664]                       is.null <- base::is.null
[10:33:03.664]                       muffled <- FALSE
[10:33:03.664]                       if (inherits(cond, "message")) {
[10:33:03.664]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:03.664]                         if (muffled) 
[10:33:03.664]                           invokeRestart("muffleMessage")
[10:33:03.664]                       }
[10:33:03.664]                       else if (inherits(cond, "warning")) {
[10:33:03.664]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:03.664]                         if (muffled) 
[10:33:03.664]                           invokeRestart("muffleWarning")
[10:33:03.664]                       }
[10:33:03.664]                       else if (inherits(cond, "condition")) {
[10:33:03.664]                         if (!is.null(pattern)) {
[10:33:03.664]                           computeRestarts <- base::computeRestarts
[10:33:03.664]                           grepl <- base::grepl
[10:33:03.664]                           restarts <- computeRestarts(cond)
[10:33:03.664]                           for (restart in restarts) {
[10:33:03.664]                             name <- restart$name
[10:33:03.664]                             if (is.null(name)) 
[10:33:03.664]                               next
[10:33:03.664]                             if (!grepl(pattern, name)) 
[10:33:03.664]                               next
[10:33:03.664]                             invokeRestart(restart)
[10:33:03.664]                             muffled <- TRUE
[10:33:03.664]                             break
[10:33:03.664]                           }
[10:33:03.664]                         }
[10:33:03.664]                       }
[10:33:03.664]                       invisible(muffled)
[10:33:03.664]                     }
[10:33:03.664]                     muffleCondition(cond, pattern = "^muffle")
[10:33:03.664]                   }
[10:33:03.664]                 }
[10:33:03.664]             }
[10:33:03.664]         }))
[10:33:03.664]     }, error = function(ex) {
[10:33:03.664]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:03.664]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:03.664]                 ...future.rng), started = ...future.startTime, 
[10:33:03.664]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:03.664]             version = "1.8"), class = "FutureResult")
[10:33:03.664]     }, finally = {
[10:33:03.664]         if (!identical(...future.workdir, getwd())) 
[10:33:03.664]             setwd(...future.workdir)
[10:33:03.664]         {
[10:33:03.664]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:03.664]                 ...future.oldOptions$nwarnings <- NULL
[10:33:03.664]             }
[10:33:03.664]             base::options(...future.oldOptions)
[10:33:03.664]             if (.Platform$OS.type == "windows") {
[10:33:03.664]                 old_names <- names(...future.oldEnvVars)
[10:33:03.664]                 envs <- base::Sys.getenv()
[10:33:03.664]                 names <- names(envs)
[10:33:03.664]                 common <- intersect(names, old_names)
[10:33:03.664]                 added <- setdiff(names, old_names)
[10:33:03.664]                 removed <- setdiff(old_names, names)
[10:33:03.664]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:03.664]                   envs[common]]
[10:33:03.664]                 NAMES <- toupper(changed)
[10:33:03.664]                 args <- list()
[10:33:03.664]                 for (kk in seq_along(NAMES)) {
[10:33:03.664]                   name <- changed[[kk]]
[10:33:03.664]                   NAME <- NAMES[[kk]]
[10:33:03.664]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:03.664]                     next
[10:33:03.664]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:03.664]                 }
[10:33:03.664]                 NAMES <- toupper(added)
[10:33:03.664]                 for (kk in seq_along(NAMES)) {
[10:33:03.664]                   name <- added[[kk]]
[10:33:03.664]                   NAME <- NAMES[[kk]]
[10:33:03.664]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:03.664]                     next
[10:33:03.664]                   args[[name]] <- ""
[10:33:03.664]                 }
[10:33:03.664]                 NAMES <- toupper(removed)
[10:33:03.664]                 for (kk in seq_along(NAMES)) {
[10:33:03.664]                   name <- removed[[kk]]
[10:33:03.664]                   NAME <- NAMES[[kk]]
[10:33:03.664]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:03.664]                     next
[10:33:03.664]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:03.664]                 }
[10:33:03.664]                 if (length(args) > 0) 
[10:33:03.664]                   base::do.call(base::Sys.setenv, args = args)
[10:33:03.664]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:03.664]             }
[10:33:03.664]             else {
[10:33:03.664]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:03.664]             }
[10:33:03.664]             {
[10:33:03.664]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:03.664]                   0L) {
[10:33:03.664]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:03.664]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:03.664]                   base::options(opts)
[10:33:03.664]                 }
[10:33:03.664]                 {
[10:33:03.664]                   {
[10:33:03.664]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:03.664]                     NULL
[10:33:03.664]                   }
[10:33:03.664]                   options(future.plan = NULL)
[10:33:03.664]                   if (is.na(NA_character_)) 
[10:33:03.664]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:03.664]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:03.664]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:03.664]                     .init = FALSE)
[10:33:03.664]                 }
[10:33:03.664]             }
[10:33:03.664]         }
[10:33:03.664]     })
[10:33:03.664]     if (TRUE) {
[10:33:03.664]         base::sink(type = "output", split = FALSE)
[10:33:03.664]         if (TRUE) {
[10:33:03.664]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:03.664]         }
[10:33:03.664]         else {
[10:33:03.664]             ...future.result["stdout"] <- base::list(NULL)
[10:33:03.664]         }
[10:33:03.664]         base::close(...future.stdout)
[10:33:03.664]         ...future.stdout <- NULL
[10:33:03.664]     }
[10:33:03.664]     ...future.result$conditions <- ...future.conditions
[10:33:03.664]     ...future.result$finished <- base::Sys.time()
[10:33:03.664]     ...future.result
[10:33:03.664] }
[10:33:03.666] requestCore(): workers = 2
[10:33:03.668] MulticoreFuture started
[10:33:03.668] - Launch lazy future ... done
[10:33:03.669] run() for ‘MulticoreFuture’ ... done
[10:33:03.669] result() for MulticoreFuture ...
[10:33:03.669] plan(): Setting new future strategy stack:
[10:33:03.669] List of future strategies:
[10:33:03.669] 1. sequential:
[10:33:03.669]    - args: function (..., envir = parent.frame())
[10:33:03.669]    - tweaked: FALSE
[10:33:03.669]    - call: NULL
[10:33:03.670] plan(): nbrOfWorkers() = 1
[10:33:03.672] plan(): Setting new future strategy stack:
[10:33:03.672] List of future strategies:
[10:33:03.672] 1. multicore:
[10:33:03.672]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:33:03.672]    - tweaked: FALSE
[10:33:03.672]    - call: plan(strategy)
[10:33:03.677] plan(): nbrOfWorkers() = 2
[10:33:03.678] result() for MulticoreFuture ...
[10:33:03.678] result() for MulticoreFuture ... done
[10:33:03.679] result() for MulticoreFuture ... done
[10:33:03.679] result() for MulticoreFuture ...
[10:33:03.679] result() for MulticoreFuture ... done
[10:33:03.679] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:33:03.680] Searching for globals...
[10:33:03.681] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[10:33:03.682] Searching for globals...
[10:33:03.683] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[10:33:03.683] Searching for globals ... DONE
[10:33:03.683] Resolving globals: FALSE
[10:33:03.684] The total size of the 1 globals is 160 bytes (160 bytes)
[10:33:03.684] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[10:33:03.687] - globals: [1] ‘data’
[10:33:03.687] 
[10:33:03.687] getGlobalsAndPackages() ... DONE
[10:33:03.688] run() for ‘Future’ ...
[10:33:03.688] - state: ‘created’
[10:33:03.688] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:33:03.692] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:33:03.692] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:33:03.693]   - Field: ‘label’
[10:33:03.693]   - Field: ‘local’
[10:33:03.693]   - Field: ‘owner’
[10:33:03.693]   - Field: ‘envir’
[10:33:03.693]   - Field: ‘workers’
[10:33:03.693]   - Field: ‘packages’
[10:33:03.693]   - Field: ‘gc’
[10:33:03.694]   - Field: ‘job’
[10:33:03.694]   - Field: ‘conditions’
[10:33:03.694]   - Field: ‘expr’
[10:33:03.694]   - Field: ‘uuid’
[10:33:03.694]   - Field: ‘seed’
[10:33:03.694]   - Field: ‘version’
[10:33:03.694]   - Field: ‘result’
[10:33:03.694]   - Field: ‘asynchronous’
[10:33:03.695]   - Field: ‘calls’
[10:33:03.695]   - Field: ‘globals’
[10:33:03.695]   - Field: ‘stdout’
[10:33:03.695]   - Field: ‘earlySignal’
[10:33:03.695]   - Field: ‘lazy’
[10:33:03.695]   - Field: ‘state’
[10:33:03.695] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:33:03.695] - Launch lazy future ...
[10:33:03.696] Packages needed by the future expression (n = 0): <none>
[10:33:03.696] Packages needed by future strategies (n = 0): <none>
[10:33:03.696] {
[10:33:03.696]     {
[10:33:03.696]         {
[10:33:03.696]             ...future.startTime <- base::Sys.time()
[10:33:03.696]             {
[10:33:03.696]                 {
[10:33:03.696]                   {
[10:33:03.696]                     {
[10:33:03.696]                       base::local({
[10:33:03.696]                         has_future <- base::requireNamespace("future", 
[10:33:03.696]                           quietly = TRUE)
[10:33:03.696]                         if (has_future) {
[10:33:03.696]                           ns <- base::getNamespace("future")
[10:33:03.696]                           version <- ns[[".package"]][["version"]]
[10:33:03.696]                           if (is.null(version)) 
[10:33:03.696]                             version <- utils::packageVersion("future")
[10:33:03.696]                         }
[10:33:03.696]                         else {
[10:33:03.696]                           version <- NULL
[10:33:03.696]                         }
[10:33:03.696]                         if (!has_future || version < "1.8.0") {
[10:33:03.696]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:03.696]                             "", base::R.version$version.string), 
[10:33:03.696]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:03.696]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:03.696]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:03.696]                               "release", "version")], collapse = " "), 
[10:33:03.696]                             hostname = base::Sys.info()[["nodename"]])
[10:33:03.696]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:03.696]                             info)
[10:33:03.696]                           info <- base::paste(info, collapse = "; ")
[10:33:03.696]                           if (!has_future) {
[10:33:03.696]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:03.696]                               info)
[10:33:03.696]                           }
[10:33:03.696]                           else {
[10:33:03.696]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:03.696]                               info, version)
[10:33:03.696]                           }
[10:33:03.696]                           base::stop(msg)
[10:33:03.696]                         }
[10:33:03.696]                       })
[10:33:03.696]                     }
[10:33:03.696]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:03.696]                     base::options(mc.cores = 1L)
[10:33:03.696]                   }
[10:33:03.696]                   ...future.strategy.old <- future::plan("list")
[10:33:03.696]                   options(future.plan = NULL)
[10:33:03.696]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:03.696]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:03.696]                 }
[10:33:03.696]                 ...future.workdir <- getwd()
[10:33:03.696]             }
[10:33:03.696]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:03.696]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:03.696]         }
[10:33:03.696]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[10:33:03.696]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:03.696]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[10:33:03.696]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:03.696]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:03.696]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:03.696]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:03.696]             base::names(...future.oldOptions))
[10:33:03.696]     }
[10:33:03.696]     if (FALSE) {
[10:33:03.696]     }
[10:33:03.696]     else {
[10:33:03.696]         if (TRUE) {
[10:33:03.696]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:03.696]                 open = "w")
[10:33:03.696]         }
[10:33:03.696]         else {
[10:33:03.696]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:03.696]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:03.696]         }
[10:33:03.696]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:03.696]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:03.696]             base::sink(type = "output", split = FALSE)
[10:33:03.696]             base::close(...future.stdout)
[10:33:03.696]         }, add = TRUE)
[10:33:03.696]     }
[10:33:03.696]     ...future.frame <- base::sys.nframe()
[10:33:03.696]     ...future.conditions <- base::list()
[10:33:03.696]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:03.696]     if (FALSE) {
[10:33:03.696]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:03.696]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:03.696]     }
[10:33:03.696]     ...future.result <- base::tryCatch({
[10:33:03.696]         base::withCallingHandlers({
[10:33:03.696]             ...future.value <- base::withVisible(base::local({
[10:33:03.696]                 withCallingHandlers({
[10:33:03.696]                   subset(data, x < 3)$y
[10:33:03.696]                 }, immediateCondition = function(cond) {
[10:33:03.696]                   save_rds <- function (object, pathname, ...) 
[10:33:03.696]                   {
[10:33:03.696]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:33:03.696]                     if (file_test("-f", pathname_tmp)) {
[10:33:03.696]                       fi_tmp <- file.info(pathname_tmp)
[10:33:03.696]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:33:03.696]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:33:03.696]                         fi_tmp[["mtime"]])
[10:33:03.696]                     }
[10:33:03.696]                     tryCatch({
[10:33:03.696]                       saveRDS(object, file = pathname_tmp, ...)
[10:33:03.696]                     }, error = function(ex) {
[10:33:03.696]                       msg <- conditionMessage(ex)
[10:33:03.696]                       fi_tmp <- file.info(pathname_tmp)
[10:33:03.696]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:33:03.696]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:33:03.696]                         fi_tmp[["mtime"]], msg)
[10:33:03.696]                       ex$message <- msg
[10:33:03.696]                       stop(ex)
[10:33:03.696]                     })
[10:33:03.696]                     stopifnot(file_test("-f", pathname_tmp))
[10:33:03.696]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:33:03.696]                     if (!res || file_test("-f", pathname_tmp)) {
[10:33:03.696]                       fi_tmp <- file.info(pathname_tmp)
[10:33:03.696]                       fi <- file.info(pathname)
[10:33:03.696]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:33:03.696]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:33:03.696]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:33:03.696]                         fi[["size"]], fi[["mtime"]])
[10:33:03.696]                       stop(msg)
[10:33:03.696]                     }
[10:33:03.696]                     invisible(pathname)
[10:33:03.696]                   }
[10:33:03.696]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:33:03.696]                     rootPath = tempdir()) 
[10:33:03.696]                   {
[10:33:03.696]                     obj <- list(time = Sys.time(), condition = cond)
[10:33:03.696]                     file <- tempfile(pattern = class(cond)[1], 
[10:33:03.696]                       tmpdir = path, fileext = ".rds")
[10:33:03.696]                     save_rds(obj, file)
[10:33:03.696]                   }
[10:33:03.696]                   saveImmediateCondition(cond, path = "/tmp/RtmpX9hGRd/.future/immediateConditions")
[10:33:03.696]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:03.696]                   {
[10:33:03.696]                     inherits <- base::inherits
[10:33:03.696]                     invokeRestart <- base::invokeRestart
[10:33:03.696]                     is.null <- base::is.null
[10:33:03.696]                     muffled <- FALSE
[10:33:03.696]                     if (inherits(cond, "message")) {
[10:33:03.696]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:03.696]                       if (muffled) 
[10:33:03.696]                         invokeRestart("muffleMessage")
[10:33:03.696]                     }
[10:33:03.696]                     else if (inherits(cond, "warning")) {
[10:33:03.696]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:03.696]                       if (muffled) 
[10:33:03.696]                         invokeRestart("muffleWarning")
[10:33:03.696]                     }
[10:33:03.696]                     else if (inherits(cond, "condition")) {
[10:33:03.696]                       if (!is.null(pattern)) {
[10:33:03.696]                         computeRestarts <- base::computeRestarts
[10:33:03.696]                         grepl <- base::grepl
[10:33:03.696]                         restarts <- computeRestarts(cond)
[10:33:03.696]                         for (restart in restarts) {
[10:33:03.696]                           name <- restart$name
[10:33:03.696]                           if (is.null(name)) 
[10:33:03.696]                             next
[10:33:03.696]                           if (!grepl(pattern, name)) 
[10:33:03.696]                             next
[10:33:03.696]                           invokeRestart(restart)
[10:33:03.696]                           muffled <- TRUE
[10:33:03.696]                           break
[10:33:03.696]                         }
[10:33:03.696]                       }
[10:33:03.696]                     }
[10:33:03.696]                     invisible(muffled)
[10:33:03.696]                   }
[10:33:03.696]                   muffleCondition(cond)
[10:33:03.696]                 })
[10:33:03.696]             }))
[10:33:03.696]             future::FutureResult(value = ...future.value$value, 
[10:33:03.696]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:03.696]                   ...future.rng), globalenv = if (FALSE) 
[10:33:03.696]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:03.696]                     ...future.globalenv.names))
[10:33:03.696]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:03.696]         }, condition = base::local({
[10:33:03.696]             c <- base::c
[10:33:03.696]             inherits <- base::inherits
[10:33:03.696]             invokeRestart <- base::invokeRestart
[10:33:03.696]             length <- base::length
[10:33:03.696]             list <- base::list
[10:33:03.696]             seq.int <- base::seq.int
[10:33:03.696]             signalCondition <- base::signalCondition
[10:33:03.696]             sys.calls <- base::sys.calls
[10:33:03.696]             `[[` <- base::`[[`
[10:33:03.696]             `+` <- base::`+`
[10:33:03.696]             `<<-` <- base::`<<-`
[10:33:03.696]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:03.696]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:03.696]                   3L)]
[10:33:03.696]             }
[10:33:03.696]             function(cond) {
[10:33:03.696]                 is_error <- inherits(cond, "error")
[10:33:03.696]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:03.696]                   NULL)
[10:33:03.696]                 if (is_error) {
[10:33:03.696]                   sessionInformation <- function() {
[10:33:03.696]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:03.696]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:03.696]                       search = base::search(), system = base::Sys.info())
[10:33:03.696]                   }
[10:33:03.696]                   ...future.conditions[[length(...future.conditions) + 
[10:33:03.696]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:03.696]                     cond$call), session = sessionInformation(), 
[10:33:03.696]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:03.696]                   signalCondition(cond)
[10:33:03.696]                 }
[10:33:03.696]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:03.696]                 "immediateCondition"))) {
[10:33:03.696]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:03.696]                   ...future.conditions[[length(...future.conditions) + 
[10:33:03.696]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:03.696]                   if (TRUE && !signal) {
[10:33:03.696]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:03.696]                     {
[10:33:03.696]                       inherits <- base::inherits
[10:33:03.696]                       invokeRestart <- base::invokeRestart
[10:33:03.696]                       is.null <- base::is.null
[10:33:03.696]                       muffled <- FALSE
[10:33:03.696]                       if (inherits(cond, "message")) {
[10:33:03.696]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:03.696]                         if (muffled) 
[10:33:03.696]                           invokeRestart("muffleMessage")
[10:33:03.696]                       }
[10:33:03.696]                       else if (inherits(cond, "warning")) {
[10:33:03.696]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:03.696]                         if (muffled) 
[10:33:03.696]                           invokeRestart("muffleWarning")
[10:33:03.696]                       }
[10:33:03.696]                       else if (inherits(cond, "condition")) {
[10:33:03.696]                         if (!is.null(pattern)) {
[10:33:03.696]                           computeRestarts <- base::computeRestarts
[10:33:03.696]                           grepl <- base::grepl
[10:33:03.696]                           restarts <- computeRestarts(cond)
[10:33:03.696]                           for (restart in restarts) {
[10:33:03.696]                             name <- restart$name
[10:33:03.696]                             if (is.null(name)) 
[10:33:03.696]                               next
[10:33:03.696]                             if (!grepl(pattern, name)) 
[10:33:03.696]                               next
[10:33:03.696]                             invokeRestart(restart)
[10:33:03.696]                             muffled <- TRUE
[10:33:03.696]                             break
[10:33:03.696]                           }
[10:33:03.696]                         }
[10:33:03.696]                       }
[10:33:03.696]                       invisible(muffled)
[10:33:03.696]                     }
[10:33:03.696]                     muffleCondition(cond, pattern = "^muffle")
[10:33:03.696]                   }
[10:33:03.696]                 }
[10:33:03.696]                 else {
[10:33:03.696]                   if (TRUE) {
[10:33:03.696]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:03.696]                     {
[10:33:03.696]                       inherits <- base::inherits
[10:33:03.696]                       invokeRestart <- base::invokeRestart
[10:33:03.696]                       is.null <- base::is.null
[10:33:03.696]                       muffled <- FALSE
[10:33:03.696]                       if (inherits(cond, "message")) {
[10:33:03.696]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:03.696]                         if (muffled) 
[10:33:03.696]                           invokeRestart("muffleMessage")
[10:33:03.696]                       }
[10:33:03.696]                       else if (inherits(cond, "warning")) {
[10:33:03.696]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:03.696]                         if (muffled) 
[10:33:03.696]                           invokeRestart("muffleWarning")
[10:33:03.696]                       }
[10:33:03.696]                       else if (inherits(cond, "condition")) {
[10:33:03.696]                         if (!is.null(pattern)) {
[10:33:03.696]                           computeRestarts <- base::computeRestarts
[10:33:03.696]                           grepl <- base::grepl
[10:33:03.696]                           restarts <- computeRestarts(cond)
[10:33:03.696]                           for (restart in restarts) {
[10:33:03.696]                             name <- restart$name
[10:33:03.696]                             if (is.null(name)) 
[10:33:03.696]                               next
[10:33:03.696]                             if (!grepl(pattern, name)) 
[10:33:03.696]                               next
[10:33:03.696]                             invokeRestart(restart)
[10:33:03.696]                             muffled <- TRUE
[10:33:03.696]                             break
[10:33:03.696]                           }
[10:33:03.696]                         }
[10:33:03.696]                       }
[10:33:03.696]                       invisible(muffled)
[10:33:03.696]                     }
[10:33:03.696]                     muffleCondition(cond, pattern = "^muffle")
[10:33:03.696]                   }
[10:33:03.696]                 }
[10:33:03.696]             }
[10:33:03.696]         }))
[10:33:03.696]     }, error = function(ex) {
[10:33:03.696]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:03.696]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:03.696]                 ...future.rng), started = ...future.startTime, 
[10:33:03.696]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:03.696]             version = "1.8"), class = "FutureResult")
[10:33:03.696]     }, finally = {
[10:33:03.696]         if (!identical(...future.workdir, getwd())) 
[10:33:03.696]             setwd(...future.workdir)
[10:33:03.696]         {
[10:33:03.696]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:03.696]                 ...future.oldOptions$nwarnings <- NULL
[10:33:03.696]             }
[10:33:03.696]             base::options(...future.oldOptions)
[10:33:03.696]             if (.Platform$OS.type == "windows") {
[10:33:03.696]                 old_names <- names(...future.oldEnvVars)
[10:33:03.696]                 envs <- base::Sys.getenv()
[10:33:03.696]                 names <- names(envs)
[10:33:03.696]                 common <- intersect(names, old_names)
[10:33:03.696]                 added <- setdiff(names, old_names)
[10:33:03.696]                 removed <- setdiff(old_names, names)
[10:33:03.696]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:03.696]                   envs[common]]
[10:33:03.696]                 NAMES <- toupper(changed)
[10:33:03.696]                 args <- list()
[10:33:03.696]                 for (kk in seq_along(NAMES)) {
[10:33:03.696]                   name <- changed[[kk]]
[10:33:03.696]                   NAME <- NAMES[[kk]]
[10:33:03.696]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:03.696]                     next
[10:33:03.696]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:03.696]                 }
[10:33:03.696]                 NAMES <- toupper(added)
[10:33:03.696]                 for (kk in seq_along(NAMES)) {
[10:33:03.696]                   name <- added[[kk]]
[10:33:03.696]                   NAME <- NAMES[[kk]]
[10:33:03.696]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:03.696]                     next
[10:33:03.696]                   args[[name]] <- ""
[10:33:03.696]                 }
[10:33:03.696]                 NAMES <- toupper(removed)
[10:33:03.696]                 for (kk in seq_along(NAMES)) {
[10:33:03.696]                   name <- removed[[kk]]
[10:33:03.696]                   NAME <- NAMES[[kk]]
[10:33:03.696]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:03.696]                     next
[10:33:03.696]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:03.696]                 }
[10:33:03.696]                 if (length(args) > 0) 
[10:33:03.696]                   base::do.call(base::Sys.setenv, args = args)
[10:33:03.696]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:03.696]             }
[10:33:03.696]             else {
[10:33:03.696]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:03.696]             }
[10:33:03.696]             {
[10:33:03.696]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:03.696]                   0L) {
[10:33:03.696]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:03.696]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:03.696]                   base::options(opts)
[10:33:03.696]                 }
[10:33:03.696]                 {
[10:33:03.696]                   {
[10:33:03.696]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:03.696]                     NULL
[10:33:03.696]                   }
[10:33:03.696]                   options(future.plan = NULL)
[10:33:03.696]                   if (is.na(NA_character_)) 
[10:33:03.696]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:03.696]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:03.696]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:03.696]                     .init = FALSE)
[10:33:03.696]                 }
[10:33:03.696]             }
[10:33:03.696]         }
[10:33:03.696]     })
[10:33:03.696]     if (TRUE) {
[10:33:03.696]         base::sink(type = "output", split = FALSE)
[10:33:03.696]         if (TRUE) {
[10:33:03.696]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:03.696]         }
[10:33:03.696]         else {
[10:33:03.696]             ...future.result["stdout"] <- base::list(NULL)
[10:33:03.696]         }
[10:33:03.696]         base::close(...future.stdout)
[10:33:03.696]         ...future.stdout <- NULL
[10:33:03.696]     }
[10:33:03.696]     ...future.result$conditions <- ...future.conditions
[10:33:03.696]     ...future.result$finished <- base::Sys.time()
[10:33:03.696]     ...future.result
[10:33:03.696] }
[10:33:03.699] assign_globals() ...
[10:33:03.699] List of 1
[10:33:03.699]  $ data:'data.frame':	5 obs. of  2 variables:
[10:33:03.699]   ..$ x: int [1:5] 1 2 3 4 5
[10:33:03.699]   ..$ y: int [1:5] 1 2 3 4 5
[10:33:03.699]  - attr(*, "where")=List of 1
[10:33:03.699]   ..$ data:<environment: R_EmptyEnv> 
[10:33:03.699]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:33:03.699]  - attr(*, "resolved")= logi FALSE
[10:33:03.699]  - attr(*, "total_size")= num 160
[10:33:03.699]  - attr(*, "already-done")= logi TRUE
[10:33:03.703] - copied ‘data’ to environment
[10:33:03.703] assign_globals() ... done
[10:33:03.703] requestCore(): workers = 2
[10:33:03.705] MulticoreFuture started
[10:33:03.705] - Launch lazy future ... done
[10:33:03.706] run() for ‘MulticoreFuture’ ... done
[10:33:03.706] result() for MulticoreFuture ...
[10:33:03.706] plan(): Setting new future strategy stack:
[10:33:03.707] List of future strategies:
[10:33:03.707] 1. sequential:
[10:33:03.707]    - args: function (..., envir = parent.frame())
[10:33:03.707]    - tweaked: FALSE
[10:33:03.707]    - call: NULL
[10:33:03.707] plan(): nbrOfWorkers() = 1
[10:33:03.710] plan(): Setting new future strategy stack:
[10:33:03.710] List of future strategies:
[10:33:03.710] 1. multicore:
[10:33:03.710]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:33:03.710]    - tweaked: FALSE
[10:33:03.710]    - call: plan(strategy)
[10:33:03.715] plan(): nbrOfWorkers() = 2
[10:33:03.716] result() for MulticoreFuture ...
[10:33:03.716] result() for MulticoreFuture ... done
[10:33:03.716] result() for MulticoreFuture ... done
[10:33:03.716] result() for MulticoreFuture ...
[10:33:03.717] result() for MulticoreFuture ... done
[10:33:03.717] plan(): Setting new future strategy stack:
[10:33:03.717] List of future strategies:
[10:33:03.717] 1. sequential:
[10:33:03.717]    - args: function (..., envir = parent.frame())
[10:33:03.717]    - tweaked: FALSE
[10:33:03.717]    - call: plan(list(sequential, strategy))
[10:33:03.717] 2. multicore:
[10:33:03.717]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:33:03.717]    - tweaked: FALSE
[10:33:03.717]    - call: plan(list(sequential, strategy))
[10:33:03.718] plan(): nbrOfWorkers() = 1
[10:33:03.718] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[10:33:03.719] Searching for globals...
[10:33:03.722] - globals found: [8] ‘{’, ‘<-’, ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’, ‘%<-%’
[10:33:03.723] Searching for globals ... DONE
[10:33:03.723] Resolving globals: FALSE
[10:33:03.724] The total size of the 1 globals is 160 bytes (160 bytes)
[10:33:03.724] The total size of the 1 globals exported for future expression (‘{; a %<-% subset(data, x < 3)$y; a; }’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[10:33:03.724] - globals: [1] ‘data’
[10:33:03.724] - packages: [1] ‘future’
[10:33:03.724] getGlobalsAndPackages() ... DONE
[10:33:03.725] run() for ‘Future’ ...
[10:33:03.725] - state: ‘created’
[10:33:03.725] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:33:03.725] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:33:03.726] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:33:03.726]   - Field: ‘label’
[10:33:03.726]   - Field: ‘local’
[10:33:03.726]   - Field: ‘owner’
[10:33:03.726]   - Field: ‘envir’
[10:33:03.726]   - Field: ‘packages’
[10:33:03.726]   - Field: ‘gc’
[10:33:03.726]   - Field: ‘conditions’
[10:33:03.727]   - Field: ‘expr’
[10:33:03.727]   - Field: ‘uuid’
[10:33:03.727]   - Field: ‘seed’
[10:33:03.727]   - Field: ‘version’
[10:33:03.727]   - Field: ‘result’
[10:33:03.727]   - Field: ‘asynchronous’
[10:33:03.727]   - Field: ‘calls’
[10:33:03.727]   - Field: ‘globals’
[10:33:03.728]   - Field: ‘stdout’
[10:33:03.728]   - Field: ‘earlySignal’
[10:33:03.728]   - Field: ‘lazy’
[10:33:03.728]   - Field: ‘state’
[10:33:03.728] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:33:03.728] - Launch lazy future ...
[10:33:03.728] Packages needed by the future expression (n = 1): ‘future’
[10:33:03.728] Packages needed by future strategies (n = 1): ‘future’
[10:33:03.729] {
[10:33:03.729]     {
[10:33:03.729]         {
[10:33:03.729]             ...future.startTime <- base::Sys.time()
[10:33:03.729]             {
[10:33:03.729]                 {
[10:33:03.729]                   {
[10:33:03.729]                     {
[10:33:03.729]                       base::local({
[10:33:03.729]                         has_future <- base::requireNamespace("future", 
[10:33:03.729]                           quietly = TRUE)
[10:33:03.729]                         if (has_future) {
[10:33:03.729]                           ns <- base::getNamespace("future")
[10:33:03.729]                           version <- ns[[".package"]][["version"]]
[10:33:03.729]                           if (is.null(version)) 
[10:33:03.729]                             version <- utils::packageVersion("future")
[10:33:03.729]                         }
[10:33:03.729]                         else {
[10:33:03.729]                           version <- NULL
[10:33:03.729]                         }
[10:33:03.729]                         if (!has_future || version < "1.8.0") {
[10:33:03.729]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:03.729]                             "", base::R.version$version.string), 
[10:33:03.729]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:03.729]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:03.729]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:03.729]                               "release", "version")], collapse = " "), 
[10:33:03.729]                             hostname = base::Sys.info()[["nodename"]])
[10:33:03.729]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:03.729]                             info)
[10:33:03.729]                           info <- base::paste(info, collapse = "; ")
[10:33:03.729]                           if (!has_future) {
[10:33:03.729]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:03.729]                               info)
[10:33:03.729]                           }
[10:33:03.729]                           else {
[10:33:03.729]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:03.729]                               info, version)
[10:33:03.729]                           }
[10:33:03.729]                           base::stop(msg)
[10:33:03.729]                         }
[10:33:03.729]                       })
[10:33:03.729]                     }
[10:33:03.729]                     base::local({
[10:33:03.729]                       for (pkg in "future") {
[10:33:03.729]                         base::loadNamespace(pkg)
[10:33:03.729]                         base::library(pkg, character.only = TRUE)
[10:33:03.729]                       }
[10:33:03.729]                     })
[10:33:03.729]                   }
[10:33:03.729]                   ...future.strategy.old <- future::plan("list")
[10:33:03.729]                   options(future.plan = NULL)
[10:33:03.729]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:03.729]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:33:03.729]                     envir = parent.frame()) 
[10:33:03.729]                   {
[10:33:03.729]                     default_workers <- missing(workers)
[10:33:03.729]                     if (is.function(workers)) 
[10:33:03.729]                       workers <- workers()
[10:33:03.729]                     workers <- structure(as.integer(workers), 
[10:33:03.729]                       class = class(workers))
[10:33:03.729]                     stop_if_not(is.finite(workers), workers >= 
[10:33:03.729]                       1L)
[10:33:03.729]                     if ((workers == 1L && !inherits(workers, 
[10:33:03.729]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:33:03.729]                       if (default_workers) 
[10:33:03.729]                         supportsMulticore(warn = TRUE)
[10:33:03.729]                       return(sequential(..., envir = envir))
[10:33:03.729]                     }
[10:33:03.729]                     oopts <- options(mc.cores = workers)
[10:33:03.729]                     on.exit(options(oopts))
[10:33:03.729]                     future <- MulticoreFuture(..., workers = workers, 
[10:33:03.729]                       envir = envir)
[10:33:03.729]                     if (!future$lazy) 
[10:33:03.729]                       future <- run(future)
[10:33:03.729]                     invisible(future)
[10:33:03.729]                   }), .cleanup = FALSE, .init = FALSE)
[10:33:03.729]                 }
[10:33:03.729]                 ...future.workdir <- getwd()
[10:33:03.729]             }
[10:33:03.729]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:03.729]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:03.729]         }
[10:33:03.729]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[10:33:03.729]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:03.729]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[10:33:03.729]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:03.729]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:03.729]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:03.729]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:03.729]             base::names(...future.oldOptions))
[10:33:03.729]     }
[10:33:03.729]     if (FALSE) {
[10:33:03.729]     }
[10:33:03.729]     else {
[10:33:03.729]         if (TRUE) {
[10:33:03.729]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:03.729]                 open = "w")
[10:33:03.729]         }
[10:33:03.729]         else {
[10:33:03.729]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:03.729]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:03.729]         }
[10:33:03.729]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:03.729]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:03.729]             base::sink(type = "output", split = FALSE)
[10:33:03.729]             base::close(...future.stdout)
[10:33:03.729]         }, add = TRUE)
[10:33:03.729]     }
[10:33:03.729]     ...future.frame <- base::sys.nframe()
[10:33:03.729]     ...future.conditions <- base::list()
[10:33:03.729]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:03.729]     if (FALSE) {
[10:33:03.729]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:03.729]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:03.729]     }
[10:33:03.729]     ...future.result <- base::tryCatch({
[10:33:03.729]         base::withCallingHandlers({
[10:33:03.729]             ...future.value <- base::withVisible(base::local({
[10:33:03.729]                 a %<-% subset(data, x < 3)$y
[10:33:03.729]                 a
[10:33:03.729]             }))
[10:33:03.729]             future::FutureResult(value = ...future.value$value, 
[10:33:03.729]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:03.729]                   ...future.rng), globalenv = if (FALSE) 
[10:33:03.729]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:03.729]                     ...future.globalenv.names))
[10:33:03.729]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:03.729]         }, condition = base::local({
[10:33:03.729]             c <- base::c
[10:33:03.729]             inherits <- base::inherits
[10:33:03.729]             invokeRestart <- base::invokeRestart
[10:33:03.729]             length <- base::length
[10:33:03.729]             list <- base::list
[10:33:03.729]             seq.int <- base::seq.int
[10:33:03.729]             signalCondition <- base::signalCondition
[10:33:03.729]             sys.calls <- base::sys.calls
[10:33:03.729]             `[[` <- base::`[[`
[10:33:03.729]             `+` <- base::`+`
[10:33:03.729]             `<<-` <- base::`<<-`
[10:33:03.729]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:03.729]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:03.729]                   3L)]
[10:33:03.729]             }
[10:33:03.729]             function(cond) {
[10:33:03.729]                 is_error <- inherits(cond, "error")
[10:33:03.729]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:03.729]                   NULL)
[10:33:03.729]                 if (is_error) {
[10:33:03.729]                   sessionInformation <- function() {
[10:33:03.729]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:03.729]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:03.729]                       search = base::search(), system = base::Sys.info())
[10:33:03.729]                   }
[10:33:03.729]                   ...future.conditions[[length(...future.conditions) + 
[10:33:03.729]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:03.729]                     cond$call), session = sessionInformation(), 
[10:33:03.729]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:03.729]                   signalCondition(cond)
[10:33:03.729]                 }
[10:33:03.729]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:03.729]                 "immediateCondition"))) {
[10:33:03.729]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:03.729]                   ...future.conditions[[length(...future.conditions) + 
[10:33:03.729]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:03.729]                   if (TRUE && !signal) {
[10:33:03.729]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:03.729]                     {
[10:33:03.729]                       inherits <- base::inherits
[10:33:03.729]                       invokeRestart <- base::invokeRestart
[10:33:03.729]                       is.null <- base::is.null
[10:33:03.729]                       muffled <- FALSE
[10:33:03.729]                       if (inherits(cond, "message")) {
[10:33:03.729]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:03.729]                         if (muffled) 
[10:33:03.729]                           invokeRestart("muffleMessage")
[10:33:03.729]                       }
[10:33:03.729]                       else if (inherits(cond, "warning")) {
[10:33:03.729]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:03.729]                         if (muffled) 
[10:33:03.729]                           invokeRestart("muffleWarning")
[10:33:03.729]                       }
[10:33:03.729]                       else if (inherits(cond, "condition")) {
[10:33:03.729]                         if (!is.null(pattern)) {
[10:33:03.729]                           computeRestarts <- base::computeRestarts
[10:33:03.729]                           grepl <- base::grepl
[10:33:03.729]                           restarts <- computeRestarts(cond)
[10:33:03.729]                           for (restart in restarts) {
[10:33:03.729]                             name <- restart$name
[10:33:03.729]                             if (is.null(name)) 
[10:33:03.729]                               next
[10:33:03.729]                             if (!grepl(pattern, name)) 
[10:33:03.729]                               next
[10:33:03.729]                             invokeRestart(restart)
[10:33:03.729]                             muffled <- TRUE
[10:33:03.729]                             break
[10:33:03.729]                           }
[10:33:03.729]                         }
[10:33:03.729]                       }
[10:33:03.729]                       invisible(muffled)
[10:33:03.729]                     }
[10:33:03.729]                     muffleCondition(cond, pattern = "^muffle")
[10:33:03.729]                   }
[10:33:03.729]                 }
[10:33:03.729]                 else {
[10:33:03.729]                   if (TRUE) {
[10:33:03.729]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:03.729]                     {
[10:33:03.729]                       inherits <- base::inherits
[10:33:03.729]                       invokeRestart <- base::invokeRestart
[10:33:03.729]                       is.null <- base::is.null
[10:33:03.729]                       muffled <- FALSE
[10:33:03.729]                       if (inherits(cond, "message")) {
[10:33:03.729]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:03.729]                         if (muffled) 
[10:33:03.729]                           invokeRestart("muffleMessage")
[10:33:03.729]                       }
[10:33:03.729]                       else if (inherits(cond, "warning")) {
[10:33:03.729]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:03.729]                         if (muffled) 
[10:33:03.729]                           invokeRestart("muffleWarning")
[10:33:03.729]                       }
[10:33:03.729]                       else if (inherits(cond, "condition")) {
[10:33:03.729]                         if (!is.null(pattern)) {
[10:33:03.729]                           computeRestarts <- base::computeRestarts
[10:33:03.729]                           grepl <- base::grepl
[10:33:03.729]                           restarts <- computeRestarts(cond)
[10:33:03.729]                           for (restart in restarts) {
[10:33:03.729]                             name <- restart$name
[10:33:03.729]                             if (is.null(name)) 
[10:33:03.729]                               next
[10:33:03.729]                             if (!grepl(pattern, name)) 
[10:33:03.729]                               next
[10:33:03.729]                             invokeRestart(restart)
[10:33:03.729]                             muffled <- TRUE
[10:33:03.729]                             break
[10:33:03.729]                           }
[10:33:03.729]                         }
[10:33:03.729]                       }
[10:33:03.729]                       invisible(muffled)
[10:33:03.729]                     }
[10:33:03.729]                     muffleCondition(cond, pattern = "^muffle")
[10:33:03.729]                   }
[10:33:03.729]                 }
[10:33:03.729]             }
[10:33:03.729]         }))
[10:33:03.729]     }, error = function(ex) {
[10:33:03.729]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:03.729]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:03.729]                 ...future.rng), started = ...future.startTime, 
[10:33:03.729]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:03.729]             version = "1.8"), class = "FutureResult")
[10:33:03.729]     }, finally = {
[10:33:03.729]         if (!identical(...future.workdir, getwd())) 
[10:33:03.729]             setwd(...future.workdir)
[10:33:03.729]         {
[10:33:03.729]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:03.729]                 ...future.oldOptions$nwarnings <- NULL
[10:33:03.729]             }
[10:33:03.729]             base::options(...future.oldOptions)
[10:33:03.729]             if (.Platform$OS.type == "windows") {
[10:33:03.729]                 old_names <- names(...future.oldEnvVars)
[10:33:03.729]                 envs <- base::Sys.getenv()
[10:33:03.729]                 names <- names(envs)
[10:33:03.729]                 common <- intersect(names, old_names)
[10:33:03.729]                 added <- setdiff(names, old_names)
[10:33:03.729]                 removed <- setdiff(old_names, names)
[10:33:03.729]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:03.729]                   envs[common]]
[10:33:03.729]                 NAMES <- toupper(changed)
[10:33:03.729]                 args <- list()
[10:33:03.729]                 for (kk in seq_along(NAMES)) {
[10:33:03.729]                   name <- changed[[kk]]
[10:33:03.729]                   NAME <- NAMES[[kk]]
[10:33:03.729]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:03.729]                     next
[10:33:03.729]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:03.729]                 }
[10:33:03.729]                 NAMES <- toupper(added)
[10:33:03.729]                 for (kk in seq_along(NAMES)) {
[10:33:03.729]                   name <- added[[kk]]
[10:33:03.729]                   NAME <- NAMES[[kk]]
[10:33:03.729]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:03.729]                     next
[10:33:03.729]                   args[[name]] <- ""
[10:33:03.729]                 }
[10:33:03.729]                 NAMES <- toupper(removed)
[10:33:03.729]                 for (kk in seq_along(NAMES)) {
[10:33:03.729]                   name <- removed[[kk]]
[10:33:03.729]                   NAME <- NAMES[[kk]]
[10:33:03.729]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:03.729]                     next
[10:33:03.729]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:03.729]                 }
[10:33:03.729]                 if (length(args) > 0) 
[10:33:03.729]                   base::do.call(base::Sys.setenv, args = args)
[10:33:03.729]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:03.729]             }
[10:33:03.729]             else {
[10:33:03.729]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:03.729]             }
[10:33:03.729]             {
[10:33:03.729]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:03.729]                   0L) {
[10:33:03.729]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:03.729]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:03.729]                   base::options(opts)
[10:33:03.729]                 }
[10:33:03.729]                 {
[10:33:03.729]                   {
[10:33:03.729]                     NULL
[10:33:03.729]                     RNGkind("Mersenne-Twister")
[10:33:03.729]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:33:03.729]                       inherits = FALSE)
[10:33:03.729]                   }
[10:33:03.729]                   options(future.plan = NULL)
[10:33:03.729]                   if (is.na(NA_character_)) 
[10:33:03.729]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:03.729]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:03.729]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:03.729]                     .init = FALSE)
[10:33:03.729]                 }
[10:33:03.729]             }
[10:33:03.729]         }
[10:33:03.729]     })
[10:33:03.729]     if (TRUE) {
[10:33:03.729]         base::sink(type = "output", split = FALSE)
[10:33:03.729]         if (TRUE) {
[10:33:03.729]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:03.729]         }
[10:33:03.729]         else {
[10:33:03.729]             ...future.result["stdout"] <- base::list(NULL)
[10:33:03.729]         }
[10:33:03.729]         base::close(...future.stdout)
[10:33:03.729]         ...future.stdout <- NULL
[10:33:03.729]     }
[10:33:03.729]     ...future.result$conditions <- ...future.conditions
[10:33:03.729]     ...future.result$finished <- base::Sys.time()
[10:33:03.729]     ...future.result
[10:33:03.729] }
[10:33:03.731] assign_globals() ...
[10:33:03.731] List of 1
[10:33:03.731]  $ data:'data.frame':	5 obs. of  2 variables:
[10:33:03.731]   ..$ x: int [1:5] 1 2 3 4 5
[10:33:03.731]   ..$ y: int [1:5] 1 2 3 4 5
[10:33:03.731]  - attr(*, "where")=List of 1
[10:33:03.731]   ..$ data:<environment: R_EmptyEnv> 
[10:33:03.731]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:33:03.731]  - attr(*, "resolved")= logi FALSE
[10:33:03.731]  - attr(*, "total_size")= num 160
[10:33:03.731]  - attr(*, "already-done")= logi TRUE
[10:33:03.738] - copied ‘data’ to environment
[10:33:03.738] assign_globals() ... done
[10:33:03.739] plan(): Setting new future strategy stack:
[10:33:03.739] List of future strategies:
[10:33:03.739] 1. multicore:
[10:33:03.739]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:33:03.739]    - tweaked: FALSE
[10:33:03.739]    - call: plan(list(sequential, strategy))
[10:33:03.743] plan(): nbrOfWorkers() = 2
[10:33:03.790] plan(): Setting new future strategy stack:
[10:33:03.790] List of future strategies:
[10:33:03.790] 1. sequential:
[10:33:03.790]    - args: function (..., envir = parent.frame())
[10:33:03.790]    - tweaked: FALSE
[10:33:03.790]    - call: plan(list(sequential, strategy))
[10:33:03.790] 2. multicore:
[10:33:03.790]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:33:03.790]    - tweaked: FALSE
[10:33:03.790]    - call: plan(list(sequential, strategy))
[10:33:03.791] plan(): nbrOfWorkers() = 1
[10:33:03.791] SequentialFuture started (and completed)
[10:33:03.791] signalConditions() ...
[10:33:03.791]  - include = ‘immediateCondition’
[10:33:03.791]  - exclude = 
[10:33:03.791]  - resignal = FALSE
[10:33:03.792]  - Number of conditions: 56
[10:33:03.792] signalConditions() ... done
[10:33:03.792] - Launch lazy future ... done
[10:33:03.792] run() for ‘SequentialFuture’ ... done
[10:33:03.792] signalConditions() ...
[10:33:03.792]  - include = ‘immediateCondition’
[10:33:03.792]  - exclude = 
[10:33:03.792]  - resignal = FALSE
[10:33:03.793]  - Number of conditions: 56
[10:33:03.793] signalConditions() ... done
[10:33:03.793] Future state: ‘finished’
[10:33:03.793] signalConditions() ...
[10:33:03.793]  - include = ‘condition’
[10:33:03.793]  - exclude = ‘immediateCondition’
[10:33:03.793]  - resignal = TRUE
[10:33:03.793]  - Number of conditions: 56
[10:33:03.794]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.743] getGlobalsAndPackages() ...
[10:33:03.794]  - Condition #2: ‘deprecatedWarning’, ‘warning’, ‘condition’
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[10:33:03.794]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.758] Searching for globals...
[10:33:03.794]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.761] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[10:33:03.794]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.761] Searching for globals ... DONE
[10:33:03.794]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.761] Resolving globals: FALSE
[10:33:03.795]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.761] The total size of the 1 globals is 160 bytes (160 bytes)
[10:33:03.795]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.762] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[10:33:03.795]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.762] - globals: [1] ‘data’
[10:33:03.795]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.762] 
[10:33:03.795]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.762] getGlobalsAndPackages() ... DONE
[10:33:03.795]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.762] run() for ‘Future’ ...
[10:33:03.796]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.763] - state: ‘created’
[10:33:03.796]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.763] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:33:03.796]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.766] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:33:03.796]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.767] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:33:03.796]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.767]   - Field: ‘label’
[10:33:03.796]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.767]   - Field: ‘local’
[10:33:03.796]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.767]   - Field: ‘owner’
[10:33:03.797]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.767]   - Field: ‘envir’
[10:33:03.797]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.767]   - Field: ‘workers’
[10:33:03.797]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.767]   - Field: ‘packages’
[10:33:03.797]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.767]   - Field: ‘gc’
[10:33:03.797]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.768]   - Field: ‘job’
[10:33:03.797]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.768]   - Field: ‘conditions’
[10:33:03.798]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.768]   - Field: ‘expr’
[10:33:03.798]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.768]   - Field: ‘uuid’
[10:33:03.798]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.768]   - Field: ‘seed’
[10:33:03.798]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.768]   - Field: ‘version’
[10:33:03.798]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.768]   - Field: ‘result’
[10:33:03.798]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.768]   - Field: ‘asynchronous’
[10:33:03.799]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.768]   - Field: ‘calls’
[10:33:03.799]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.768]   - Field: ‘globals’
[10:33:03.799]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.769]   - Field: ‘stdout’
[10:33:03.799]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.769]   - Field: ‘earlySignal’
[10:33:03.799]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.769]   - Field: ‘lazy’
[10:33:03.799]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.769]   - Field: ‘state’
[10:33:03.800]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.769] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:33:03.800]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.769] - Launch lazy future ...
[10:33:03.800]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.769] Packages needed by the future expression (n = 0): <none>
[10:33:03.800]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.770] Packages needed by future strategies (n = 0): <none>
[10:33:03.803]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.770] {
[10:33:03.770]     {
[10:33:03.770]         {
[10:33:03.770]             ...future.startTime <- base::Sys.time()
[10:33:03.770]             {
[10:33:03.770]                 {
[10:33:03.770]                   {
[10:33:03.770]                     {
[10:33:03.770]                       base::local({
[10:33:03.770]                         has_future <- base::requireNamespace("future", 
[10:33:03.770]                           quietly = TRUE)
[10:33:03.770]                         if (has_future) {
[10:33:03.770]                           ns <- base::getNamespace("future")
[10:33:03.770]                           version <- ns[[".package"]][["version"]]
[10:33:03.770]                           if (is.null(version)) 
[10:33:03.770]                             version <- utils::packageVersion("future")
[10:33:03.770]                         }
[10:33:03.770]                         else {
[10:33:03.770]                           version <- NULL
[10:33:03.770]                         }
[10:33:03.770]                         if (!has_future || version < "1.8.0") {
[10:33:03.770]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:03.770]                             "", base::R.version$version.string), 
[10:33:03.770]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:03.770]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:03.770]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:03.770]                               "release", "version")], collapse = " "), 
[10:33:03.770]                             hostname = base::Sys.info()[["nodename"]])
[10:33:03.770]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:03.770]                             info)
[10:33:03.770]                           info <- base::paste(info, collapse = "; ")
[10:33:03.770]                           if (!has_future) {
[10:33:03.770]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:03.770]                               info)
[10:33:03.770]                           }
[10:33:03.770]                           else {
[10:33:03.770]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:03.770]                               info, version)
[10:33:03.770]                           }
[10:33:03.770]                           base::stop(msg)
[10:33:03.770]                         }
[10:33:03.770]                       })
[10:33:03.770]                     }
[10:33:03.770]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:03.770]                     base::options(mc.cores = 1L)
[10:33:03.770]                   }
[10:33:03.770]                   ...future.strategy.old <- future::plan("list")
[10:33:03.770]                   options(future.plan = NULL)
[10:33:03.770]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:03.770]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:03.770]                 }
[10:33:03.770]                 ...future.workdir <- getwd()
[10:33:03.770]             }
[10:33:03.770]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:03.770]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:03.770]         }
[10:33:03.770]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[10:33:03.770]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:03.770]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[10:33:03.770]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:03.770]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:03.770]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:03.770]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:03.770]             base::names(...future.oldOptions))
[10:33:03.770]     }
[10:33:03.770]     if (FALSE) {
[10:33:03.770]     }
[10:33:03.770]     else {
[10:33:03.770]         if (TRUE) {
[10:33:03.770]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:03.770]                 open = "w")
[10:33:03.770]         }
[10:33:03.770]         else {
[10:33:03.770]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:03.770]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:03.770]         }
[10:33:03.770]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:03.770]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:03.770]             base::sink(type = "output", split = FALSE)
[10:33:03.770]             base::close(...future.stdout)
[10:33:03.770]         }, add = TRUE)
[10:33:03.770]     }
[10:33:03.770]     ...future.frame <- base::sys.nframe()
[10:33:03.770]     ...future.conditions <- base::list()
[10:33:03.770]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:03.770]     if (FALSE) {
[10:33:03.770]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:03.770]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:03.770]     }
[10:33:03.770]     ...future.result <- base::tryCatch({
[10:33:03.770]         base::withCallingHandlers({
[10:33:03.770]             ...future.value <- base::withVisible(base::local({
[10:33:03.770]                 withCallingHandlers({
[10:33:03.770]                   subset(data, x < 3)$y
[10:33:03.770]                 }, immediateCondition = function(cond) {
[10:33:03.770]                   save_rds <- function (object, pathname, ...) 
[10:33:03.770]                   {
[10:33:03.770]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:33:03.770]                     if (file_test("-f", pathname_tmp)) {
[10:33:03.770]                       fi_tmp <- file.info(pathname_tmp)
[10:33:03.770]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:33:03.770]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:33:03.770]                         fi_tmp[["mtime"]])
[10:33:03.770]                     }
[10:33:03.770]                     tryCatch({
[10:33:03.770]                       saveRDS(object, file = pathname_tmp, ...)
[10:33:03.770]                     }, error = function(ex) {
[10:33:03.770]                       msg <- conditionMessage(ex)
[10:33:03.770]                       fi_tmp <- file.info(pathname_tmp)
[10:33:03.770]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:33:03.770]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:33:03.770]                         fi_tmp[["mtime"]], msg)
[10:33:03.770]                       ex$message <- msg
[10:33:03.770]                       stop(ex)
[10:33:03.770]                     })
[10:33:03.770]                     stopifnot(file_test("-f", pathname_tmp))
[10:33:03.770]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:33:03.770]                     if (!res || file_test("-f", pathname_tmp)) {
[10:33:03.770]                       fi_tmp <- file.info(pathname_tmp)
[10:33:03.770]                       fi <- file.info(pathname)
[10:33:03.770]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:33:03.770]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:33:03.770]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:33:03.770]                         fi[["size"]], fi[["mtime"]])
[10:33:03.770]                       stop(msg)
[10:33:03.770]                     }
[10:33:03.770]                     invisible(pathname)
[10:33:03.770]                   }
[10:33:03.770]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:33:03.770]                     rootPath = tempdir()) 
[10:33:03.770]                   {
[10:33:03.770]                     obj <- list(time = Sys.time(), condition = cond)
[10:33:03.770]                     file <- tempfile(pattern = class(cond)[1], 
[10:33:03.770]                       tmpdir = path, fileext = ".rds")
[10:33:03.770]                     save_rds(obj, file)
[10:33:03.770]                   }
[10:33:03.770]                   saveImmediateCondition(cond, path = "/tmp/RtmpX9hGRd/.future/immediateConditions")
[10:33:03.770]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:03.770]                   {
[10:33:03.770]                     inherits <- base::inherits
[10:33:03.770]                     invokeRestart <- base::invokeRestart
[10:33:03.770]                     is.null <- base::is.null
[10:33:03.770]                     muffled <- FALSE
[10:33:03.770]                     if (inherits(cond, "message")) {
[10:33:03.770]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:03.770]                       if (muffled) 
[10:33:03.770]                         invokeRestart("muffleMessage")
[10:33:03.770]                     }
[10:33:03.770]                     else if (inherits(cond, "warning")) {
[10:33:03.770]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:03.770]                       if (muffled) 
[10:33:03.770]                         invokeRestart("muffleWarning")
[10:33:03.770]                     }
[10:33:03.770]                     else if (inherits(cond, "condition")) {
[10:33:03.770]                       if (!is.null(pattern)) {
[10:33:03.770]                         computeRestarts <- base::computeRestarts
[10:33:03.770]                         grepl <- base::grepl
[10:33:03.770]                         restarts <- computeRestarts(cond)
[10:33:03.770]                         for (restart in restarts) {
[10:33:03.770]                           name <- restart$name
[10:33:03.770]                           if (is.null(name)) 
[10:33:03.770]                             next
[10:33:03.770]                           if (!grepl(pattern, name)) 
[10:33:03.770]                             next
[10:33:03.770]                           invokeRestart(restart)
[10:33:03.770]                           muffled <- TRUE
[10:33:03.770]                           break
[10:33:03.770]                         }
[10:33:03.770]                       }
[10:33:03.770]                     }
[10:33:03.770]                     invisible(muffled)
[10:33:03.770]                   }
[10:33:03.770]                   muffleCondition(cond)
[10:33:03.770]                 })
[10:33:03.770]             }))
[10:33:03.770]             future::FutureResult(value = ...future.value$value, 
[10:33:03.770]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:03.770]                   ...future.rng), globalenv = if (FALSE) 
[10:33:03.770]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:03.770]                     ...future.globalenv.names))
[10:33:03.770]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:03.770]         }, condition = base::local({
[10:33:03.770]             c <- base::c
[10:33:03.770]             inherits <- base::inherits
[10:33:03.770]             invokeRestart <- base::invokeRestart
[10:33:03.770]             length <- base::length
[10:33:03.770]             list <- base::list
[10:33:03.770]             seq.int <- base::seq.int
[10:33:03.770]             signalCondition <- base::signalCondition
[10:33:03.770]             sys.calls <- base::sys.calls
[10:33:03.770]             `[[` <- base::`[[`
[10:33:03.770]             `+` <- base::`+`
[10:33:03.770]             `<<-` <- base::`<<-`
[10:33:03.770]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:03.770]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:03.770]                   3L)]
[10:33:03.770]             }
[10:33:03.770]             function(cond) {
[10:33:03.770]                 is_error <- inherits(cond, "error")
[10:33:03.770]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:03.770]                   NULL)
[10:33:03.770]                 if (is_error) {
[10:33:03.770]                   sessionInformation <- function() {
[10:33:03.770]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:03.770]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:03.770]                       search = base::search(), system = base::Sys.info())
[10:33:03.770]                   }
[10:33:03.770]                   ...future.conditions[[length(...future.conditions) + 
[10:33:03.770]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:03.770]                     cond$call), session = sessionInformation(), 
[10:33:03.770]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:03.770]                   signalCondition(cond)
[10:33:03.770]                 }
[10:33:03.770]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:03.770]                 "immediateCondition"))) {
[10:33:03.770]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:03.770]                   ...future.conditions[[length(...future.conditions) + 
[10:33:03.770]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:03.770]                   if (TRUE && !signal) {
[10:33:03.770]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:03.770]                     {
[10:33:03.770]                       inherits <- base::inherits
[10:33:03.770]                       invokeRestart <- base::invokeRestart
[10:33:03.770]                       is.null <- base::is.null
[10:33:03.770]                       muffled <- FALSE
[10:33:03.770]                       if (inherits(cond, "message")) {
[10:33:03.770]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:03.770]                         if (muffled) 
[10:33:03.770]                           invokeRestart("muffleMessage")
[10:33:03.770]                       }
[10:33:03.770]                       else if (inherits(cond, "warning")) {
[10:33:03.770]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:03.770]                         if (muffled) 
[10:33:03.770]                           invokeRestart("muffleWarning")
[10:33:03.770]                       }
[10:33:03.770]                       else if (inherits(cond, "condition")) {
[10:33:03.770]                         if (!is.null(pattern)) {
[10:33:03.770]                           computeRestarts <- base::computeRestarts
[10:33:03.770]                           grepl <- base::grepl
[10:33:03.770]                           restarts <- computeRestarts(cond)
[10:33:03.770]                           for (restart in restarts) {
[10:33:03.770]                             name <- restart$name
[10:33:03.770]                             if (is.null(name)) 
[10:33:03.770]                               next
[10:33:03.770]                             if (!grepl(pattern, name)) 
[10:33:03.770]                               next
[10:33:03.770]                             invokeRestart(restart)
[10:33:03.770]                             muffled <- TRUE
[10:33:03.770]                             break
[10:33:03.770]                           }
[10:33:03.770]                         }
[10:33:03.770]                       }
[10:33:03.770]                       invisible(muffled)
[10:33:03.770]                     }
[10:33:03.770]                     muffleCondition(cond, pattern = "^muffle")
[10:33:03.770]                   }
[10:33:03.770]                 }
[10:33:03.770]                 else {
[10:33:03.770]                   if (TRUE) {
[10:33:03.770]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:03.770]                     {
[10:33:03.770]                       inherits <- base::inherits
[10:33:03.770]                       invokeRestart <- base::invokeRestart
[10:33:03.770]                       is.null <- base::is.null
[10:33:03.770]                       muffled <- FALSE
[10:33:03.770]                       if (inherits(cond, "message")) {
[10:33:03.770]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:03.770]                         if (muffled) 
[10:33:03.770]                           invokeRestart("muffleMessage")
[10:33:03.770]                       }
[10:33:03.770]                       else if (inherits(cond, "warning")) {
[10:33:03.770]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:03.770]                         if (muffled) 
[10:33:03.770]                           invokeRestart("muffleWarning")
[10:33:03.770]                       }
[10:33:03.770]                       else if (inherits(cond, "condition")) {
[10:33:03.770]                         if (!is.null(pattern)) {
[10:33:03.770]                           computeRestarts <- base::computeRestarts
[10:33:03.770]                           grepl <- base::grepl
[10:33:03.770]                           restarts <- computeRestarts(cond)
[10:33:03.770]                           for (restart in restarts) {
[10:33:03.770]                             name <- restart$name
[10:33:03.770]                             if (is.null(name)) 
[10:33:03.770]                               next
[10:33:03.770]                             if (!grepl(pattern, name)) 
[10:33:03.770]                               next
[10:33:03.770]                             invokeRestart(restart)
[10:33:03.770]                             muffled <- TRUE
[10:33:03.770]                             break
[10:33:03.770]                           }
[10:33:03.770]                         }
[10:33:03.770]                       }
[10:33:03.770]                       invisible(muffled)
[10:33:03.770]                     }
[10:33:03.770]                     muffleCondition(cond, pattern = "^muffle")
[10:33:03.770]                   }
[10:33:03.770]                 }
[10:33:03.770]             }
[10:33:03.770]         }))
[10:33:03.770]     }, error = function(ex) {
[10:33:03.770]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:03.770]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:03.770]                 ...future.rng), started = ...future.startTime, 
[10:33:03.770]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:03.770]             version = "1.8"), class = "FutureResult")
[10:33:03.770]     }, finally = {
[10:33:03.770]         if (!identical(...future.workdir, getwd())) 
[10:33:03.770]             setwd(...future.workdir)
[10:33:03.770]         {
[10:33:03.770]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:03.770]                 ...future.oldOptions$nwarnings <- NULL
[10:33:03.770]             }
[10:33:03.770]             base::options(...future.oldOptions)
[10:33:03.770]             if (.Platform$OS.type == "windows") {
[10:33:03.770]                 old_names <- names(...future.oldEnvVars)
[10:33:03.770]                 envs <- base::Sys.getenv()
[10:33:03.770]                 names <- names(envs)
[10:33:03.770]                 common <- intersect(names, old_names)
[10:33:03.770]                 added <- setdiff(names, old_names)
[10:33:03.770]                 removed <- setdiff(old_names, names)
[10:33:03.770]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:03.770]                   envs[common]]
[10:33:03.770]                 NAMES <- toupper(changed)
[10:33:03.770]                 args <- list()
[10:33:03.770]                 for (kk in seq_along(NAMES)) {
[10:33:03.770]                   name <- changed[[kk]]
[10:33:03.770]                   NAME <- NAMES[[kk]]
[10:33:03.770]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:03.770]                     next
[10:33:03.770]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:03.770]                 }
[10:33:03.770]                 NAMES <- toupper(added)
[10:33:03.770]                 for (kk in seq_along(NAMES)) {
[10:33:03.770]                   name <- added[[kk]]
[10:33:03.770]                   NAME <- NAMES[[kk]]
[10:33:03.770]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:03.770]                     next
[10:33:03.770]                   args[[name]] <- ""
[10:33:03.770]                 }
[10:33:03.770]                 NAMES <- toupper(removed)
[10:33:03.770]                 for (kk in seq_along(NAMES)) {
[10:33:03.770]                   name <- removed[[kk]]
[10:33:03.770]                   NAME <- NAMES[[kk]]
[10:33:03.770]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:03.770]                     next
[10:33:03.770]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:03.770]                 }
[10:33:03.770]                 if (length(args) > 0) 
[10:33:03.770]                   base::do.call(base::Sys.setenv, args = args)
[10:33:03.770]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:03.770]             }
[10:33:03.770]             else {
[10:33:03.770]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:03.770]             }
[10:33:03.770]             {
[10:33:03.770]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:03.770]                   0L) {
[10:33:03.770]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:03.770]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:03.770]                   base::options(opts)
[10:33:03.770]                 }
[10:33:03.770]                 {
[10:33:03.770]                   {
[10:33:03.770]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:03.770]                     NULL
[10:33:03.770]                   }
[10:33:03.770]                   options(future.plan = NULL)
[10:33:03.770]                   if (is.na(NA_character_)) 
[10:33:03.770]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:03.770]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:03.770]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:03.770]                     .init = FALSE)
[10:33:03.770]                 }
[10:33:03.770]             }
[10:33:03.770]         }
[10:33:03.770]     })
[10:33:03.770]     if (TRUE) {
[10:33:03.770]         base::sink(type = "output", split = FALSE)
[10:33:03.770]         if (TRUE) {
[10:33:03.770]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:03.770]         }
[10:33:03.770]         else {
[10:33:03.770]             ...future.result["stdout"] <- base::list(NULL)
[10:33:03.770]         }
[10:33:03.770]         base::close(...future.stdout)
[10:33:03.770]         ...future.stdout <- NULL
[10:33:03.770]     }
[10:33:03.770]     ...future.result$conditions <- ...future.conditions
[10:33:03.770]     ...future.result$finished <- base::Sys.time()
[10:33:03.770]     ...future.result
[10:33:03.770] }
[10:33:03.803]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.772] assign_globals() ...
[10:33:03.803]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.772] List of 1
[10:33:03.772]  $ data:'data.frame':	5 obs. of  2 variables:
[10:33:03.772]   ..$ x: int [1:5] 1 2 3 4 5
[10:33:03.772]   ..$ y: int [1:5] 1 2 3 4 5
[10:33:03.772]  - attr(*, "where")=List of 1
[10:33:03.772]   ..$ data:<environment: R_EmptyEnv> 
[10:33:03.772]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:33:03.772]  - attr(*, "resolved")= logi FALSE
[10:33:03.772]  - attr(*, "total_size")= num 160
[10:33:03.772]  - attr(*, "already-done")= logi TRUE
[10:33:03.803]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.775] - copied ‘data’ to environment
[10:33:03.803]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.776] assign_globals() ... done
[10:33:03.804]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.776] requestCore(): workers = 2
[10:33:03.804]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.778] MulticoreFuture started
[10:33:03.804]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.778] - Launch lazy future ... done
[10:33:03.804]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.779] run() for ‘MulticoreFuture’ ... done
[10:33:03.804]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.779] result() for MulticoreFuture ...
[10:33:03.805]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.788] result() for MulticoreFuture ...
[10:33:03.805]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.789] result() for MulticoreFuture ... done
[10:33:03.805]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.789] result() for MulticoreFuture ... done
[10:33:03.805]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.789] result() for MulticoreFuture ...
[10:33:03.805]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:03.789] result() for MulticoreFuture ... done
[10:33:03.805] signalConditions() ... done
- Strategy: multicore ... DONE
- Strategy: multisession ...
[10:33:03.806] plan(): Setting new future strategy stack:
[10:33:03.806] List of future strategies:
[10:33:03.806] 1. multisession:
[10:33:03.806]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:33:03.806]    - tweaked: FALSE
[10:33:03.806]    - call: plan(strategy)
[10:33:03.807] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:33:03.807] multisession:
[10:33:03.807] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:33:03.807] - tweaked: FALSE
[10:33:03.807] - call: plan(strategy)
[10:33:03.813] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[10:33:03.814] Not searching for globals
[10:33:03.814] - globals: [0] <none>
[10:33:03.814] getGlobalsAndPackages() ... DONE
[10:33:03.815] [local output] makeClusterPSOCK() ...
[10:33:03.857] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[10:33:03.858] [local output] Base port: 11012
[10:33:03.858] [local output] Getting setup options for 2 cluster nodes ...
[10:33:03.858] [local output]  - Node 1 of 2 ...
[10:33:03.859] [local output] localMachine=TRUE => revtunnel=FALSE

[10:33:03.859] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpX9hGRd/worker.rank=1.parallelly.parent=83258.1453a5b2cbf0b.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpX9hGRd/worker.rank=1.parallelly.parent=83258.1453a5b2cbf0b.pid")'’
[10:33:04.049] - Possible to infer worker's PID: TRUE
[10:33:04.049] [local output] Rscript port: 11012

[10:33:04.050] [local output]  - Node 2 of 2 ...
[10:33:04.050] [local output] localMachine=TRUE => revtunnel=FALSE

[10:33:04.051] [local output] Rscript port: 11012

[10:33:04.051] [local output] Getting setup options for 2 cluster nodes ... done
[10:33:04.051] [local output]  - Parallel setup requested for some PSOCK nodes
[10:33:04.052] [local output] Setting up PSOCK nodes in parallel
[10:33:04.052] List of 36
[10:33:04.052]  $ worker          : chr "localhost"
[10:33:04.052]   ..- attr(*, "localhost")= logi TRUE
[10:33:04.052]  $ master          : chr "localhost"
[10:33:04.052]  $ port            : int 11012
[10:33:04.052]  $ connectTimeout  : num 120
[10:33:04.052]  $ timeout         : num 2592000
[10:33:04.052]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:33:04.052]  $ homogeneous     : logi TRUE
[10:33:04.052]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:33:04.052]  $ rscript_envs    : NULL
[10:33:04.052]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:33:04.052]  $ rscript_startup : NULL
[10:33:04.052]  $ rscript_sh      : chr "sh"
[10:33:04.052]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:33:04.052]  $ methods         : logi TRUE
[10:33:04.052]  $ socketOptions   : chr "no-delay"
[10:33:04.052]  $ useXDR          : logi FALSE
[10:33:04.052]  $ outfile         : chr "/dev/null"
[10:33:04.052]  $ renice          : int NA
[10:33:04.052]  $ rshcmd          : NULL
[10:33:04.052]  $ user            : chr(0) 
[10:33:04.052]  $ revtunnel       : logi FALSE
[10:33:04.052]  $ rshlogfile      : NULL
[10:33:04.052]  $ rshopts         : chr(0) 
[10:33:04.052]  $ rank            : int 1
[10:33:04.052]  $ manual          : logi FALSE
[10:33:04.052]  $ dryrun          : logi FALSE
[10:33:04.052]  $ quiet           : logi FALSE
[10:33:04.052]  $ setup_strategy  : chr "parallel"
[10:33:04.052]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:33:04.052]  $ pidfile         : chr "/tmp/RtmpX9hGRd/worker.rank=1.parallelly.parent=83258.1453a5b2cbf0b.pid"
[10:33:04.052]  $ rshcmd_label    : NULL
[10:33:04.052]  $ rsh_call        : NULL
[10:33:04.052]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:33:04.052]  $ localMachine    : logi TRUE
[10:33:04.052]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:33:04.052]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:33:04.052]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:33:04.052]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:33:04.052]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:33:04.052]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:33:04.052]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:33:04.052]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:33:04.052]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:33:04.052]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:33:04.052]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:33:04.052]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:33:04.052]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:33:04.052]  $ arguments       :List of 28
[10:33:04.052]   ..$ worker          : chr "localhost"
[10:33:04.052]   ..$ master          : NULL
[10:33:04.052]   ..$ port            : int 11012
[10:33:04.052]   ..$ connectTimeout  : num 120
[10:33:04.052]   ..$ timeout         : num 2592000
[10:33:04.052]   ..$ rscript         : NULL
[10:33:04.052]   ..$ homogeneous     : NULL
[10:33:04.052]   ..$ rscript_args    : NULL
[10:33:04.052]   ..$ rscript_envs    : NULL
[10:33:04.052]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:33:04.052]   ..$ rscript_startup : NULL
[10:33:04.052]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:33:04.052]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:33:04.052]   ..$ methods         : logi TRUE
[10:33:04.052]   ..$ socketOptions   : chr "no-delay"
[10:33:04.052]   ..$ useXDR          : logi FALSE
[10:33:04.052]   ..$ outfile         : chr "/dev/null"
[10:33:04.052]   ..$ renice          : int NA
[10:33:04.052]   ..$ rshcmd          : NULL
[10:33:04.052]   ..$ user            : NULL
[10:33:04.052]   ..$ revtunnel       : logi NA
[10:33:04.052]   ..$ rshlogfile      : NULL
[10:33:04.052]   ..$ rshopts         : NULL
[10:33:04.052]   ..$ rank            : int 1
[10:33:04.052]   ..$ manual          : logi FALSE
[10:33:04.052]   ..$ dryrun          : logi FALSE
[10:33:04.052]   ..$ quiet           : logi FALSE
[10:33:04.052]   ..$ setup_strategy  : chr "parallel"
[10:33:04.052]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:33:04.068] [local output] System call to launch all workers:
[10:33:04.068] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpX9hGRd/worker.rank=1.parallelly.parent=83258.1453a5b2cbf0b.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11012 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:33:04.069] [local output] Starting PSOCK main server
[10:33:04.074] [local output] Workers launched
[10:33:04.074] [local output] Waiting for workers to connect back
[10:33:04.074]  - [local output] 0 workers out of 2 ready
[10:33:04.337]  - [local output] 0 workers out of 2 ready
[10:33:04.338]  - [local output] 1 workers out of 2 ready
[10:33:04.341]  - [local output] 1 workers out of 2 ready
[10:33:04.341]  - [local output] 2 workers out of 2 ready
[10:33:04.341] [local output] Launching of workers completed
[10:33:04.341] [local output] Collecting session information from workers
[10:33:04.342] [local output]  - Worker #1 of 2
[10:33:04.343] [local output]  - Worker #2 of 2
[10:33:04.343] [local output] makeClusterPSOCK() ... done
[10:33:04.354] Packages needed by the future expression (n = 0): <none>
[10:33:04.354] Packages needed by future strategies (n = 0): <none>
[10:33:04.354] {
[10:33:04.354]     {
[10:33:04.354]         {
[10:33:04.354]             ...future.startTime <- base::Sys.time()
[10:33:04.354]             {
[10:33:04.354]                 {
[10:33:04.354]                   {
[10:33:04.354]                     {
[10:33:04.354]                       base::local({
[10:33:04.354]                         has_future <- base::requireNamespace("future", 
[10:33:04.354]                           quietly = TRUE)
[10:33:04.354]                         if (has_future) {
[10:33:04.354]                           ns <- base::getNamespace("future")
[10:33:04.354]                           version <- ns[[".package"]][["version"]]
[10:33:04.354]                           if (is.null(version)) 
[10:33:04.354]                             version <- utils::packageVersion("future")
[10:33:04.354]                         }
[10:33:04.354]                         else {
[10:33:04.354]                           version <- NULL
[10:33:04.354]                         }
[10:33:04.354]                         if (!has_future || version < "1.8.0") {
[10:33:04.354]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:04.354]                             "", base::R.version$version.string), 
[10:33:04.354]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:04.354]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:04.354]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:04.354]                               "release", "version")], collapse = " "), 
[10:33:04.354]                             hostname = base::Sys.info()[["nodename"]])
[10:33:04.354]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:04.354]                             info)
[10:33:04.354]                           info <- base::paste(info, collapse = "; ")
[10:33:04.354]                           if (!has_future) {
[10:33:04.354]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:04.354]                               info)
[10:33:04.354]                           }
[10:33:04.354]                           else {
[10:33:04.354]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:04.354]                               info, version)
[10:33:04.354]                           }
[10:33:04.354]                           base::stop(msg)
[10:33:04.354]                         }
[10:33:04.354]                       })
[10:33:04.354]                     }
[10:33:04.354]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:04.354]                     base::options(mc.cores = 1L)
[10:33:04.354]                   }
[10:33:04.354]                   ...future.strategy.old <- future::plan("list")
[10:33:04.354]                   options(future.plan = NULL)
[10:33:04.354]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:04.354]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:04.354]                 }
[10:33:04.354]                 ...future.workdir <- getwd()
[10:33:04.354]             }
[10:33:04.354]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:04.354]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:04.354]         }
[10:33:04.354]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[10:33:04.354]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:04.354]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[10:33:04.354]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:04.354]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:04.354]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:04.354]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:04.354]             base::names(...future.oldOptions))
[10:33:04.354]     }
[10:33:04.354]     if (FALSE) {
[10:33:04.354]     }
[10:33:04.354]     else {
[10:33:04.354]         if (TRUE) {
[10:33:04.354]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:04.354]                 open = "w")
[10:33:04.354]         }
[10:33:04.354]         else {
[10:33:04.354]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:04.354]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:04.354]         }
[10:33:04.354]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:04.354]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:04.354]             base::sink(type = "output", split = FALSE)
[10:33:04.354]             base::close(...future.stdout)
[10:33:04.354]         }, add = TRUE)
[10:33:04.354]     }
[10:33:04.354]     ...future.frame <- base::sys.nframe()
[10:33:04.354]     ...future.conditions <- base::list()
[10:33:04.354]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:04.354]     if (FALSE) {
[10:33:04.354]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:04.354]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:04.354]     }
[10:33:04.354]     ...future.result <- base::tryCatch({
[10:33:04.354]         base::withCallingHandlers({
[10:33:04.354]             ...future.value <- base::withVisible(base::local({
[10:33:04.354]                 ...future.makeSendCondition <- base::local({
[10:33:04.354]                   sendCondition <- NULL
[10:33:04.354]                   function(frame = 1L) {
[10:33:04.354]                     if (is.function(sendCondition)) 
[10:33:04.354]                       return(sendCondition)
[10:33:04.354]                     ns <- getNamespace("parallel")
[10:33:04.354]                     if (exists("sendData", mode = "function", 
[10:33:04.354]                       envir = ns)) {
[10:33:04.354]                       parallel_sendData <- get("sendData", mode = "function", 
[10:33:04.354]                         envir = ns)
[10:33:04.354]                       envir <- sys.frame(frame)
[10:33:04.354]                       master <- NULL
[10:33:04.354]                       while (!identical(envir, .GlobalEnv) && 
[10:33:04.354]                         !identical(envir, emptyenv())) {
[10:33:04.354]                         if (exists("master", mode = "list", envir = envir, 
[10:33:04.354]                           inherits = FALSE)) {
[10:33:04.354]                           master <- get("master", mode = "list", 
[10:33:04.354]                             envir = envir, inherits = FALSE)
[10:33:04.354]                           if (inherits(master, c("SOCKnode", 
[10:33:04.354]                             "SOCK0node"))) {
[10:33:04.354]                             sendCondition <<- function(cond) {
[10:33:04.354]                               data <- list(type = "VALUE", value = cond, 
[10:33:04.354]                                 success = TRUE)
[10:33:04.354]                               parallel_sendData(master, data)
[10:33:04.354]                             }
[10:33:04.354]                             return(sendCondition)
[10:33:04.354]                           }
[10:33:04.354]                         }
[10:33:04.354]                         frame <- frame + 1L
[10:33:04.354]                         envir <- sys.frame(frame)
[10:33:04.354]                       }
[10:33:04.354]                     }
[10:33:04.354]                     sendCondition <<- function(cond) NULL
[10:33:04.354]                   }
[10:33:04.354]                 })
[10:33:04.354]                 withCallingHandlers({
[10:33:04.354]                   NA
[10:33:04.354]                 }, immediateCondition = function(cond) {
[10:33:04.354]                   sendCondition <- ...future.makeSendCondition()
[10:33:04.354]                   sendCondition(cond)
[10:33:04.354]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:04.354]                   {
[10:33:04.354]                     inherits <- base::inherits
[10:33:04.354]                     invokeRestart <- base::invokeRestart
[10:33:04.354]                     is.null <- base::is.null
[10:33:04.354]                     muffled <- FALSE
[10:33:04.354]                     if (inherits(cond, "message")) {
[10:33:04.354]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:04.354]                       if (muffled) 
[10:33:04.354]                         invokeRestart("muffleMessage")
[10:33:04.354]                     }
[10:33:04.354]                     else if (inherits(cond, "warning")) {
[10:33:04.354]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:04.354]                       if (muffled) 
[10:33:04.354]                         invokeRestart("muffleWarning")
[10:33:04.354]                     }
[10:33:04.354]                     else if (inherits(cond, "condition")) {
[10:33:04.354]                       if (!is.null(pattern)) {
[10:33:04.354]                         computeRestarts <- base::computeRestarts
[10:33:04.354]                         grepl <- base::grepl
[10:33:04.354]                         restarts <- computeRestarts(cond)
[10:33:04.354]                         for (restart in restarts) {
[10:33:04.354]                           name <- restart$name
[10:33:04.354]                           if (is.null(name)) 
[10:33:04.354]                             next
[10:33:04.354]                           if (!grepl(pattern, name)) 
[10:33:04.354]                             next
[10:33:04.354]                           invokeRestart(restart)
[10:33:04.354]                           muffled <- TRUE
[10:33:04.354]                           break
[10:33:04.354]                         }
[10:33:04.354]                       }
[10:33:04.354]                     }
[10:33:04.354]                     invisible(muffled)
[10:33:04.354]                   }
[10:33:04.354]                   muffleCondition(cond)
[10:33:04.354]                 })
[10:33:04.354]             }))
[10:33:04.354]             future::FutureResult(value = ...future.value$value, 
[10:33:04.354]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:04.354]                   ...future.rng), globalenv = if (FALSE) 
[10:33:04.354]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:04.354]                     ...future.globalenv.names))
[10:33:04.354]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:04.354]         }, condition = base::local({
[10:33:04.354]             c <- base::c
[10:33:04.354]             inherits <- base::inherits
[10:33:04.354]             invokeRestart <- base::invokeRestart
[10:33:04.354]             length <- base::length
[10:33:04.354]             list <- base::list
[10:33:04.354]             seq.int <- base::seq.int
[10:33:04.354]             signalCondition <- base::signalCondition
[10:33:04.354]             sys.calls <- base::sys.calls
[10:33:04.354]             `[[` <- base::`[[`
[10:33:04.354]             `+` <- base::`+`
[10:33:04.354]             `<<-` <- base::`<<-`
[10:33:04.354]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:04.354]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:04.354]                   3L)]
[10:33:04.354]             }
[10:33:04.354]             function(cond) {
[10:33:04.354]                 is_error <- inherits(cond, "error")
[10:33:04.354]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:04.354]                   NULL)
[10:33:04.354]                 if (is_error) {
[10:33:04.354]                   sessionInformation <- function() {
[10:33:04.354]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:04.354]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:04.354]                       search = base::search(), system = base::Sys.info())
[10:33:04.354]                   }
[10:33:04.354]                   ...future.conditions[[length(...future.conditions) + 
[10:33:04.354]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:04.354]                     cond$call), session = sessionInformation(), 
[10:33:04.354]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:04.354]                   signalCondition(cond)
[10:33:04.354]                 }
[10:33:04.354]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:04.354]                 "immediateCondition"))) {
[10:33:04.354]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:04.354]                   ...future.conditions[[length(...future.conditions) + 
[10:33:04.354]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:04.354]                   if (TRUE && !signal) {
[10:33:04.354]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:04.354]                     {
[10:33:04.354]                       inherits <- base::inherits
[10:33:04.354]                       invokeRestart <- base::invokeRestart
[10:33:04.354]                       is.null <- base::is.null
[10:33:04.354]                       muffled <- FALSE
[10:33:04.354]                       if (inherits(cond, "message")) {
[10:33:04.354]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:04.354]                         if (muffled) 
[10:33:04.354]                           invokeRestart("muffleMessage")
[10:33:04.354]                       }
[10:33:04.354]                       else if (inherits(cond, "warning")) {
[10:33:04.354]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:04.354]                         if (muffled) 
[10:33:04.354]                           invokeRestart("muffleWarning")
[10:33:04.354]                       }
[10:33:04.354]                       else if (inherits(cond, "condition")) {
[10:33:04.354]                         if (!is.null(pattern)) {
[10:33:04.354]                           computeRestarts <- base::computeRestarts
[10:33:04.354]                           grepl <- base::grepl
[10:33:04.354]                           restarts <- computeRestarts(cond)
[10:33:04.354]                           for (restart in restarts) {
[10:33:04.354]                             name <- restart$name
[10:33:04.354]                             if (is.null(name)) 
[10:33:04.354]                               next
[10:33:04.354]                             if (!grepl(pattern, name)) 
[10:33:04.354]                               next
[10:33:04.354]                             invokeRestart(restart)
[10:33:04.354]                             muffled <- TRUE
[10:33:04.354]                             break
[10:33:04.354]                           }
[10:33:04.354]                         }
[10:33:04.354]                       }
[10:33:04.354]                       invisible(muffled)
[10:33:04.354]                     }
[10:33:04.354]                     muffleCondition(cond, pattern = "^muffle")
[10:33:04.354]                   }
[10:33:04.354]                 }
[10:33:04.354]                 else {
[10:33:04.354]                   if (TRUE) {
[10:33:04.354]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:04.354]                     {
[10:33:04.354]                       inherits <- base::inherits
[10:33:04.354]                       invokeRestart <- base::invokeRestart
[10:33:04.354]                       is.null <- base::is.null
[10:33:04.354]                       muffled <- FALSE
[10:33:04.354]                       if (inherits(cond, "message")) {
[10:33:04.354]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:04.354]                         if (muffled) 
[10:33:04.354]                           invokeRestart("muffleMessage")
[10:33:04.354]                       }
[10:33:04.354]                       else if (inherits(cond, "warning")) {
[10:33:04.354]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:04.354]                         if (muffled) 
[10:33:04.354]                           invokeRestart("muffleWarning")
[10:33:04.354]                       }
[10:33:04.354]                       else if (inherits(cond, "condition")) {
[10:33:04.354]                         if (!is.null(pattern)) {
[10:33:04.354]                           computeRestarts <- base::computeRestarts
[10:33:04.354]                           grepl <- base::grepl
[10:33:04.354]                           restarts <- computeRestarts(cond)
[10:33:04.354]                           for (restart in restarts) {
[10:33:04.354]                             name <- restart$name
[10:33:04.354]                             if (is.null(name)) 
[10:33:04.354]                               next
[10:33:04.354]                             if (!grepl(pattern, name)) 
[10:33:04.354]                               next
[10:33:04.354]                             invokeRestart(restart)
[10:33:04.354]                             muffled <- TRUE
[10:33:04.354]                             break
[10:33:04.354]                           }
[10:33:04.354]                         }
[10:33:04.354]                       }
[10:33:04.354]                       invisible(muffled)
[10:33:04.354]                     }
[10:33:04.354]                     muffleCondition(cond, pattern = "^muffle")
[10:33:04.354]                   }
[10:33:04.354]                 }
[10:33:04.354]             }
[10:33:04.354]         }))
[10:33:04.354]     }, error = function(ex) {
[10:33:04.354]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:04.354]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:04.354]                 ...future.rng), started = ...future.startTime, 
[10:33:04.354]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:04.354]             version = "1.8"), class = "FutureResult")
[10:33:04.354]     }, finally = {
[10:33:04.354]         if (!identical(...future.workdir, getwd())) 
[10:33:04.354]             setwd(...future.workdir)
[10:33:04.354]         {
[10:33:04.354]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:04.354]                 ...future.oldOptions$nwarnings <- NULL
[10:33:04.354]             }
[10:33:04.354]             base::options(...future.oldOptions)
[10:33:04.354]             if (.Platform$OS.type == "windows") {
[10:33:04.354]                 old_names <- names(...future.oldEnvVars)
[10:33:04.354]                 envs <- base::Sys.getenv()
[10:33:04.354]                 names <- names(envs)
[10:33:04.354]                 common <- intersect(names, old_names)
[10:33:04.354]                 added <- setdiff(names, old_names)
[10:33:04.354]                 removed <- setdiff(old_names, names)
[10:33:04.354]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:04.354]                   envs[common]]
[10:33:04.354]                 NAMES <- toupper(changed)
[10:33:04.354]                 args <- list()
[10:33:04.354]                 for (kk in seq_along(NAMES)) {
[10:33:04.354]                   name <- changed[[kk]]
[10:33:04.354]                   NAME <- NAMES[[kk]]
[10:33:04.354]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:04.354]                     next
[10:33:04.354]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:04.354]                 }
[10:33:04.354]                 NAMES <- toupper(added)
[10:33:04.354]                 for (kk in seq_along(NAMES)) {
[10:33:04.354]                   name <- added[[kk]]
[10:33:04.354]                   NAME <- NAMES[[kk]]
[10:33:04.354]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:04.354]                     next
[10:33:04.354]                   args[[name]] <- ""
[10:33:04.354]                 }
[10:33:04.354]                 NAMES <- toupper(removed)
[10:33:04.354]                 for (kk in seq_along(NAMES)) {
[10:33:04.354]                   name <- removed[[kk]]
[10:33:04.354]                   NAME <- NAMES[[kk]]
[10:33:04.354]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:04.354]                     next
[10:33:04.354]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:04.354]                 }
[10:33:04.354]                 if (length(args) > 0) 
[10:33:04.354]                   base::do.call(base::Sys.setenv, args = args)
[10:33:04.354]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:04.354]             }
[10:33:04.354]             else {
[10:33:04.354]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:04.354]             }
[10:33:04.354]             {
[10:33:04.354]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:04.354]                   0L) {
[10:33:04.354]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:04.354]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:04.354]                   base::options(opts)
[10:33:04.354]                 }
[10:33:04.354]                 {
[10:33:04.354]                   {
[10:33:04.354]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:04.354]                     NULL
[10:33:04.354]                   }
[10:33:04.354]                   options(future.plan = NULL)
[10:33:04.354]                   if (is.na(NA_character_)) 
[10:33:04.354]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:04.354]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:04.354]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:04.354]                     .init = FALSE)
[10:33:04.354]                 }
[10:33:04.354]             }
[10:33:04.354]         }
[10:33:04.354]     })
[10:33:04.354]     if (TRUE) {
[10:33:04.354]         base::sink(type = "output", split = FALSE)
[10:33:04.354]         if (TRUE) {
[10:33:04.354]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:04.354]         }
[10:33:04.354]         else {
[10:33:04.354]             ...future.result["stdout"] <- base::list(NULL)
[10:33:04.354]         }
[10:33:04.354]         base::close(...future.stdout)
[10:33:04.354]         ...future.stdout <- NULL
[10:33:04.354]     }
[10:33:04.354]     ...future.result$conditions <- ...future.conditions
[10:33:04.354]     ...future.result$finished <- base::Sys.time()
[10:33:04.354]     ...future.result
[10:33:04.354] }
[10:33:04.408] MultisessionFuture started
[10:33:04.408] result() for ClusterFuture ...
[10:33:04.409] receiveMessageFromWorker() for ClusterFuture ...
[10:33:04.409] - Validating connection of MultisessionFuture
[10:33:04.442] - received message: FutureResult
[10:33:04.442] - Received FutureResult
[10:33:04.442] - Erased future from FutureRegistry
[10:33:04.442] result() for ClusterFuture ...
[10:33:04.442] - result already collected: FutureResult
[10:33:04.443] result() for ClusterFuture ... done
[10:33:04.443] receiveMessageFromWorker() for ClusterFuture ... done
[10:33:04.443] result() for ClusterFuture ... done
[10:33:04.443] result() for ClusterFuture ...
[10:33:04.443] - result already collected: FutureResult
[10:33:04.443] result() for ClusterFuture ... done
[10:33:04.443] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:33:04.447] plan(): nbrOfWorkers() = 2
[10:33:04.448] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:33:04.448] Searching for globals...
[10:33:04.449] - globals found: [1] ‘getOption’
[10:33:04.449] Searching for globals ... DONE
[10:33:04.449] Resolving globals: FALSE
[10:33:04.450] 
[10:33:04.450] 
[10:33:04.450] getGlobalsAndPackages() ... DONE
[10:33:04.450] run() for ‘Future’ ...
[10:33:04.450] - state: ‘created’
[10:33:04.451] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:33:04.465] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:33:04.465] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:33:04.465]   - Field: ‘node’
[10:33:04.465]   - Field: ‘label’
[10:33:04.465]   - Field: ‘local’
[10:33:04.465]   - Field: ‘owner’
[10:33:04.465]   - Field: ‘envir’
[10:33:04.465]   - Field: ‘workers’
[10:33:04.466]   - Field: ‘packages’
[10:33:04.466]   - Field: ‘gc’
[10:33:04.466]   - Field: ‘conditions’
[10:33:04.466]   - Field: ‘persistent’
[10:33:04.466]   - Field: ‘expr’
[10:33:04.466]   - Field: ‘uuid’
[10:33:04.466]   - Field: ‘seed’
[10:33:04.466]   - Field: ‘version’
[10:33:04.466]   - Field: ‘result’
[10:33:04.467]   - Field: ‘asynchronous’
[10:33:04.467]   - Field: ‘calls’
[10:33:04.467]   - Field: ‘globals’
[10:33:04.467]   - Field: ‘stdout’
[10:33:04.467]   - Field: ‘earlySignal’
[10:33:04.467]   - Field: ‘lazy’
[10:33:04.467]   - Field: ‘state’
[10:33:04.467] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:33:04.468] - Launch lazy future ...
[10:33:04.468] Packages needed by the future expression (n = 0): <none>
[10:33:04.468] Packages needed by future strategies (n = 0): <none>
[10:33:04.468] {
[10:33:04.468]     {
[10:33:04.468]         {
[10:33:04.468]             ...future.startTime <- base::Sys.time()
[10:33:04.468]             {
[10:33:04.468]                 {
[10:33:04.468]                   {
[10:33:04.468]                     {
[10:33:04.468]                       base::local({
[10:33:04.468]                         has_future <- base::requireNamespace("future", 
[10:33:04.468]                           quietly = TRUE)
[10:33:04.468]                         if (has_future) {
[10:33:04.468]                           ns <- base::getNamespace("future")
[10:33:04.468]                           version <- ns[[".package"]][["version"]]
[10:33:04.468]                           if (is.null(version)) 
[10:33:04.468]                             version <- utils::packageVersion("future")
[10:33:04.468]                         }
[10:33:04.468]                         else {
[10:33:04.468]                           version <- NULL
[10:33:04.468]                         }
[10:33:04.468]                         if (!has_future || version < "1.8.0") {
[10:33:04.468]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:04.468]                             "", base::R.version$version.string), 
[10:33:04.468]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:04.468]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:04.468]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:04.468]                               "release", "version")], collapse = " "), 
[10:33:04.468]                             hostname = base::Sys.info()[["nodename"]])
[10:33:04.468]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:04.468]                             info)
[10:33:04.468]                           info <- base::paste(info, collapse = "; ")
[10:33:04.468]                           if (!has_future) {
[10:33:04.468]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:04.468]                               info)
[10:33:04.468]                           }
[10:33:04.468]                           else {
[10:33:04.468]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:04.468]                               info, version)
[10:33:04.468]                           }
[10:33:04.468]                           base::stop(msg)
[10:33:04.468]                         }
[10:33:04.468]                       })
[10:33:04.468]                     }
[10:33:04.468]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:04.468]                     base::options(mc.cores = 1L)
[10:33:04.468]                   }
[10:33:04.468]                   ...future.strategy.old <- future::plan("list")
[10:33:04.468]                   options(future.plan = NULL)
[10:33:04.468]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:04.468]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:04.468]                 }
[10:33:04.468]                 ...future.workdir <- getwd()
[10:33:04.468]             }
[10:33:04.468]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:04.468]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:04.468]         }
[10:33:04.468]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[10:33:04.468]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:04.468]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[10:33:04.468]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:04.468]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:04.468]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:04.468]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:04.468]             base::names(...future.oldOptions))
[10:33:04.468]     }
[10:33:04.468]     if (FALSE) {
[10:33:04.468]     }
[10:33:04.468]     else {
[10:33:04.468]         if (TRUE) {
[10:33:04.468]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:04.468]                 open = "w")
[10:33:04.468]         }
[10:33:04.468]         else {
[10:33:04.468]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:04.468]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:04.468]         }
[10:33:04.468]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:04.468]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:04.468]             base::sink(type = "output", split = FALSE)
[10:33:04.468]             base::close(...future.stdout)
[10:33:04.468]         }, add = TRUE)
[10:33:04.468]     }
[10:33:04.468]     ...future.frame <- base::sys.nframe()
[10:33:04.468]     ...future.conditions <- base::list()
[10:33:04.468]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:04.468]     if (FALSE) {
[10:33:04.468]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:04.468]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:04.468]     }
[10:33:04.468]     ...future.result <- base::tryCatch({
[10:33:04.468]         base::withCallingHandlers({
[10:33:04.468]             ...future.value <- base::withVisible(base::local({
[10:33:04.468]                 ...future.makeSendCondition <- base::local({
[10:33:04.468]                   sendCondition <- NULL
[10:33:04.468]                   function(frame = 1L) {
[10:33:04.468]                     if (is.function(sendCondition)) 
[10:33:04.468]                       return(sendCondition)
[10:33:04.468]                     ns <- getNamespace("parallel")
[10:33:04.468]                     if (exists("sendData", mode = "function", 
[10:33:04.468]                       envir = ns)) {
[10:33:04.468]                       parallel_sendData <- get("sendData", mode = "function", 
[10:33:04.468]                         envir = ns)
[10:33:04.468]                       envir <- sys.frame(frame)
[10:33:04.468]                       master <- NULL
[10:33:04.468]                       while (!identical(envir, .GlobalEnv) && 
[10:33:04.468]                         !identical(envir, emptyenv())) {
[10:33:04.468]                         if (exists("master", mode = "list", envir = envir, 
[10:33:04.468]                           inherits = FALSE)) {
[10:33:04.468]                           master <- get("master", mode = "list", 
[10:33:04.468]                             envir = envir, inherits = FALSE)
[10:33:04.468]                           if (inherits(master, c("SOCKnode", 
[10:33:04.468]                             "SOCK0node"))) {
[10:33:04.468]                             sendCondition <<- function(cond) {
[10:33:04.468]                               data <- list(type = "VALUE", value = cond, 
[10:33:04.468]                                 success = TRUE)
[10:33:04.468]                               parallel_sendData(master, data)
[10:33:04.468]                             }
[10:33:04.468]                             return(sendCondition)
[10:33:04.468]                           }
[10:33:04.468]                         }
[10:33:04.468]                         frame <- frame + 1L
[10:33:04.468]                         envir <- sys.frame(frame)
[10:33:04.468]                       }
[10:33:04.468]                     }
[10:33:04.468]                     sendCondition <<- function(cond) NULL
[10:33:04.468]                   }
[10:33:04.468]                 })
[10:33:04.468]                 withCallingHandlers({
[10:33:04.468]                   getOption("future.globals.onMissing")
[10:33:04.468]                 }, immediateCondition = function(cond) {
[10:33:04.468]                   sendCondition <- ...future.makeSendCondition()
[10:33:04.468]                   sendCondition(cond)
[10:33:04.468]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:04.468]                   {
[10:33:04.468]                     inherits <- base::inherits
[10:33:04.468]                     invokeRestart <- base::invokeRestart
[10:33:04.468]                     is.null <- base::is.null
[10:33:04.468]                     muffled <- FALSE
[10:33:04.468]                     if (inherits(cond, "message")) {
[10:33:04.468]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:04.468]                       if (muffled) 
[10:33:04.468]                         invokeRestart("muffleMessage")
[10:33:04.468]                     }
[10:33:04.468]                     else if (inherits(cond, "warning")) {
[10:33:04.468]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:04.468]                       if (muffled) 
[10:33:04.468]                         invokeRestart("muffleWarning")
[10:33:04.468]                     }
[10:33:04.468]                     else if (inherits(cond, "condition")) {
[10:33:04.468]                       if (!is.null(pattern)) {
[10:33:04.468]                         computeRestarts <- base::computeRestarts
[10:33:04.468]                         grepl <- base::grepl
[10:33:04.468]                         restarts <- computeRestarts(cond)
[10:33:04.468]                         for (restart in restarts) {
[10:33:04.468]                           name <- restart$name
[10:33:04.468]                           if (is.null(name)) 
[10:33:04.468]                             next
[10:33:04.468]                           if (!grepl(pattern, name)) 
[10:33:04.468]                             next
[10:33:04.468]                           invokeRestart(restart)
[10:33:04.468]                           muffled <- TRUE
[10:33:04.468]                           break
[10:33:04.468]                         }
[10:33:04.468]                       }
[10:33:04.468]                     }
[10:33:04.468]                     invisible(muffled)
[10:33:04.468]                   }
[10:33:04.468]                   muffleCondition(cond)
[10:33:04.468]                 })
[10:33:04.468]             }))
[10:33:04.468]             future::FutureResult(value = ...future.value$value, 
[10:33:04.468]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:04.468]                   ...future.rng), globalenv = if (FALSE) 
[10:33:04.468]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:04.468]                     ...future.globalenv.names))
[10:33:04.468]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:04.468]         }, condition = base::local({
[10:33:04.468]             c <- base::c
[10:33:04.468]             inherits <- base::inherits
[10:33:04.468]             invokeRestart <- base::invokeRestart
[10:33:04.468]             length <- base::length
[10:33:04.468]             list <- base::list
[10:33:04.468]             seq.int <- base::seq.int
[10:33:04.468]             signalCondition <- base::signalCondition
[10:33:04.468]             sys.calls <- base::sys.calls
[10:33:04.468]             `[[` <- base::`[[`
[10:33:04.468]             `+` <- base::`+`
[10:33:04.468]             `<<-` <- base::`<<-`
[10:33:04.468]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:04.468]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:04.468]                   3L)]
[10:33:04.468]             }
[10:33:04.468]             function(cond) {
[10:33:04.468]                 is_error <- inherits(cond, "error")
[10:33:04.468]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:04.468]                   NULL)
[10:33:04.468]                 if (is_error) {
[10:33:04.468]                   sessionInformation <- function() {
[10:33:04.468]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:04.468]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:04.468]                       search = base::search(), system = base::Sys.info())
[10:33:04.468]                   }
[10:33:04.468]                   ...future.conditions[[length(...future.conditions) + 
[10:33:04.468]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:04.468]                     cond$call), session = sessionInformation(), 
[10:33:04.468]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:04.468]                   signalCondition(cond)
[10:33:04.468]                 }
[10:33:04.468]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:04.468]                 "immediateCondition"))) {
[10:33:04.468]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:04.468]                   ...future.conditions[[length(...future.conditions) + 
[10:33:04.468]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:04.468]                   if (TRUE && !signal) {
[10:33:04.468]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:04.468]                     {
[10:33:04.468]                       inherits <- base::inherits
[10:33:04.468]                       invokeRestart <- base::invokeRestart
[10:33:04.468]                       is.null <- base::is.null
[10:33:04.468]                       muffled <- FALSE
[10:33:04.468]                       if (inherits(cond, "message")) {
[10:33:04.468]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:04.468]                         if (muffled) 
[10:33:04.468]                           invokeRestart("muffleMessage")
[10:33:04.468]                       }
[10:33:04.468]                       else if (inherits(cond, "warning")) {
[10:33:04.468]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:04.468]                         if (muffled) 
[10:33:04.468]                           invokeRestart("muffleWarning")
[10:33:04.468]                       }
[10:33:04.468]                       else if (inherits(cond, "condition")) {
[10:33:04.468]                         if (!is.null(pattern)) {
[10:33:04.468]                           computeRestarts <- base::computeRestarts
[10:33:04.468]                           grepl <- base::grepl
[10:33:04.468]                           restarts <- computeRestarts(cond)
[10:33:04.468]                           for (restart in restarts) {
[10:33:04.468]                             name <- restart$name
[10:33:04.468]                             if (is.null(name)) 
[10:33:04.468]                               next
[10:33:04.468]                             if (!grepl(pattern, name)) 
[10:33:04.468]                               next
[10:33:04.468]                             invokeRestart(restart)
[10:33:04.468]                             muffled <- TRUE
[10:33:04.468]                             break
[10:33:04.468]                           }
[10:33:04.468]                         }
[10:33:04.468]                       }
[10:33:04.468]                       invisible(muffled)
[10:33:04.468]                     }
[10:33:04.468]                     muffleCondition(cond, pattern = "^muffle")
[10:33:04.468]                   }
[10:33:04.468]                 }
[10:33:04.468]                 else {
[10:33:04.468]                   if (TRUE) {
[10:33:04.468]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:04.468]                     {
[10:33:04.468]                       inherits <- base::inherits
[10:33:04.468]                       invokeRestart <- base::invokeRestart
[10:33:04.468]                       is.null <- base::is.null
[10:33:04.468]                       muffled <- FALSE
[10:33:04.468]                       if (inherits(cond, "message")) {
[10:33:04.468]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:04.468]                         if (muffled) 
[10:33:04.468]                           invokeRestart("muffleMessage")
[10:33:04.468]                       }
[10:33:04.468]                       else if (inherits(cond, "warning")) {
[10:33:04.468]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:04.468]                         if (muffled) 
[10:33:04.468]                           invokeRestart("muffleWarning")
[10:33:04.468]                       }
[10:33:04.468]                       else if (inherits(cond, "condition")) {
[10:33:04.468]                         if (!is.null(pattern)) {
[10:33:04.468]                           computeRestarts <- base::computeRestarts
[10:33:04.468]                           grepl <- base::grepl
[10:33:04.468]                           restarts <- computeRestarts(cond)
[10:33:04.468]                           for (restart in restarts) {
[10:33:04.468]                             name <- restart$name
[10:33:04.468]                             if (is.null(name)) 
[10:33:04.468]                               next
[10:33:04.468]                             if (!grepl(pattern, name)) 
[10:33:04.468]                               next
[10:33:04.468]                             invokeRestart(restart)
[10:33:04.468]                             muffled <- TRUE
[10:33:04.468]                             break
[10:33:04.468]                           }
[10:33:04.468]                         }
[10:33:04.468]                       }
[10:33:04.468]                       invisible(muffled)
[10:33:04.468]                     }
[10:33:04.468]                     muffleCondition(cond, pattern = "^muffle")
[10:33:04.468]                   }
[10:33:04.468]                 }
[10:33:04.468]             }
[10:33:04.468]         }))
[10:33:04.468]     }, error = function(ex) {
[10:33:04.468]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:04.468]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:04.468]                 ...future.rng), started = ...future.startTime, 
[10:33:04.468]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:04.468]             version = "1.8"), class = "FutureResult")
[10:33:04.468]     }, finally = {
[10:33:04.468]         if (!identical(...future.workdir, getwd())) 
[10:33:04.468]             setwd(...future.workdir)
[10:33:04.468]         {
[10:33:04.468]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:04.468]                 ...future.oldOptions$nwarnings <- NULL
[10:33:04.468]             }
[10:33:04.468]             base::options(...future.oldOptions)
[10:33:04.468]             if (.Platform$OS.type == "windows") {
[10:33:04.468]                 old_names <- names(...future.oldEnvVars)
[10:33:04.468]                 envs <- base::Sys.getenv()
[10:33:04.468]                 names <- names(envs)
[10:33:04.468]                 common <- intersect(names, old_names)
[10:33:04.468]                 added <- setdiff(names, old_names)
[10:33:04.468]                 removed <- setdiff(old_names, names)
[10:33:04.468]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:04.468]                   envs[common]]
[10:33:04.468]                 NAMES <- toupper(changed)
[10:33:04.468]                 args <- list()
[10:33:04.468]                 for (kk in seq_along(NAMES)) {
[10:33:04.468]                   name <- changed[[kk]]
[10:33:04.468]                   NAME <- NAMES[[kk]]
[10:33:04.468]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:04.468]                     next
[10:33:04.468]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:04.468]                 }
[10:33:04.468]                 NAMES <- toupper(added)
[10:33:04.468]                 for (kk in seq_along(NAMES)) {
[10:33:04.468]                   name <- added[[kk]]
[10:33:04.468]                   NAME <- NAMES[[kk]]
[10:33:04.468]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:04.468]                     next
[10:33:04.468]                   args[[name]] <- ""
[10:33:04.468]                 }
[10:33:04.468]                 NAMES <- toupper(removed)
[10:33:04.468]                 for (kk in seq_along(NAMES)) {
[10:33:04.468]                   name <- removed[[kk]]
[10:33:04.468]                   NAME <- NAMES[[kk]]
[10:33:04.468]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:04.468]                     next
[10:33:04.468]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:04.468]                 }
[10:33:04.468]                 if (length(args) > 0) 
[10:33:04.468]                   base::do.call(base::Sys.setenv, args = args)
[10:33:04.468]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:04.468]             }
[10:33:04.468]             else {
[10:33:04.468]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:04.468]             }
[10:33:04.468]             {
[10:33:04.468]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:04.468]                   0L) {
[10:33:04.468]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:04.468]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:04.468]                   base::options(opts)
[10:33:04.468]                 }
[10:33:04.468]                 {
[10:33:04.468]                   {
[10:33:04.468]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:04.468]                     NULL
[10:33:04.468]                   }
[10:33:04.468]                   options(future.plan = NULL)
[10:33:04.468]                   if (is.na(NA_character_)) 
[10:33:04.468]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:04.468]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:04.468]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:04.468]                     .init = FALSE)
[10:33:04.468]                 }
[10:33:04.468]             }
[10:33:04.468]         }
[10:33:04.468]     })
[10:33:04.468]     if (TRUE) {
[10:33:04.468]         base::sink(type = "output", split = FALSE)
[10:33:04.468]         if (TRUE) {
[10:33:04.468]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:04.468]         }
[10:33:04.468]         else {
[10:33:04.468]             ...future.result["stdout"] <- base::list(NULL)
[10:33:04.468]         }
[10:33:04.468]         base::close(...future.stdout)
[10:33:04.468]         ...future.stdout <- NULL
[10:33:04.468]     }
[10:33:04.468]     ...future.result$conditions <- ...future.conditions
[10:33:04.468]     ...future.result$finished <- base::Sys.time()
[10:33:04.468]     ...future.result
[10:33:04.468] }
[10:33:04.472] MultisessionFuture started
[10:33:04.472] - Launch lazy future ... done
[10:33:04.472] run() for ‘MultisessionFuture’ ... done
[10:33:04.472] result() for ClusterFuture ...
[10:33:04.473] receiveMessageFromWorker() for ClusterFuture ...
[10:33:04.473] - Validating connection of MultisessionFuture
[10:33:04.477] - received message: FutureResult
[10:33:04.477] - Received FutureResult
[10:33:04.477] - Erased future from FutureRegistry
[10:33:04.477] result() for ClusterFuture ...
[10:33:04.477] - result already collected: FutureResult
[10:33:04.477] result() for ClusterFuture ... done
[10:33:04.478] receiveMessageFromWorker() for ClusterFuture ... done
[10:33:04.478] result() for ClusterFuture ... done
[10:33:04.478] result() for ClusterFuture ...
[10:33:04.478] - result already collected: FutureResult
[10:33:04.478] result() for ClusterFuture ... done
[10:33:04.478] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[10:33:04.479] Searching for globals...
[10:33:04.479] - globals found: [1] ‘getOption’
[10:33:04.479] Searching for globals ... DONE
[10:33:04.479] Resolving globals: FALSE
[10:33:04.480] 
[10:33:04.480] 
[10:33:04.480] getGlobalsAndPackages() ... DONE
[10:33:04.480] run() for ‘Future’ ...
[10:33:04.480] - state: ‘created’
[10:33:04.481] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:33:04.495] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:33:04.495] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:33:04.495]   - Field: ‘node’
[10:33:04.495]   - Field: ‘label’
[10:33:04.495]   - Field: ‘local’
[10:33:04.495]   - Field: ‘owner’
[10:33:04.495]   - Field: ‘envir’
[10:33:04.496]   - Field: ‘workers’
[10:33:04.496]   - Field: ‘packages’
[10:33:04.496]   - Field: ‘gc’
[10:33:04.496]   - Field: ‘conditions’
[10:33:04.496]   - Field: ‘persistent’
[10:33:04.496]   - Field: ‘expr’
[10:33:04.496]   - Field: ‘uuid’
[10:33:04.496]   - Field: ‘seed’
[10:33:04.496]   - Field: ‘version’
[10:33:04.497]   - Field: ‘result’
[10:33:04.497]   - Field: ‘asynchronous’
[10:33:04.497]   - Field: ‘calls’
[10:33:04.497]   - Field: ‘globals’
[10:33:04.497]   - Field: ‘stdout’
[10:33:04.497]   - Field: ‘earlySignal’
[10:33:04.497]   - Field: ‘lazy’
[10:33:04.497]   - Field: ‘state’
[10:33:04.498] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:33:04.498] - Launch lazy future ...
[10:33:04.498] Packages needed by the future expression (n = 0): <none>
[10:33:04.498] Packages needed by future strategies (n = 0): <none>
[10:33:04.499] {
[10:33:04.499]     {
[10:33:04.499]         {
[10:33:04.499]             ...future.startTime <- base::Sys.time()
[10:33:04.499]             {
[10:33:04.499]                 {
[10:33:04.499]                   {
[10:33:04.499]                     {
[10:33:04.499]                       base::local({
[10:33:04.499]                         has_future <- base::requireNamespace("future", 
[10:33:04.499]                           quietly = TRUE)
[10:33:04.499]                         if (has_future) {
[10:33:04.499]                           ns <- base::getNamespace("future")
[10:33:04.499]                           version <- ns[[".package"]][["version"]]
[10:33:04.499]                           if (is.null(version)) 
[10:33:04.499]                             version <- utils::packageVersion("future")
[10:33:04.499]                         }
[10:33:04.499]                         else {
[10:33:04.499]                           version <- NULL
[10:33:04.499]                         }
[10:33:04.499]                         if (!has_future || version < "1.8.0") {
[10:33:04.499]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:04.499]                             "", base::R.version$version.string), 
[10:33:04.499]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:04.499]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:04.499]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:04.499]                               "release", "version")], collapse = " "), 
[10:33:04.499]                             hostname = base::Sys.info()[["nodename"]])
[10:33:04.499]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:04.499]                             info)
[10:33:04.499]                           info <- base::paste(info, collapse = "; ")
[10:33:04.499]                           if (!has_future) {
[10:33:04.499]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:04.499]                               info)
[10:33:04.499]                           }
[10:33:04.499]                           else {
[10:33:04.499]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:04.499]                               info, version)
[10:33:04.499]                           }
[10:33:04.499]                           base::stop(msg)
[10:33:04.499]                         }
[10:33:04.499]                       })
[10:33:04.499]                     }
[10:33:04.499]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:04.499]                     base::options(mc.cores = 1L)
[10:33:04.499]                   }
[10:33:04.499]                   ...future.strategy.old <- future::plan("list")
[10:33:04.499]                   options(future.plan = NULL)
[10:33:04.499]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:04.499]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:04.499]                 }
[10:33:04.499]                 ...future.workdir <- getwd()
[10:33:04.499]             }
[10:33:04.499]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:04.499]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:04.499]         }
[10:33:04.499]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[10:33:04.499]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:04.499]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[10:33:04.499]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:04.499]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:04.499]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:04.499]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:04.499]             base::names(...future.oldOptions))
[10:33:04.499]     }
[10:33:04.499]     if (FALSE) {
[10:33:04.499]     }
[10:33:04.499]     else {
[10:33:04.499]         if (TRUE) {
[10:33:04.499]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:04.499]                 open = "w")
[10:33:04.499]         }
[10:33:04.499]         else {
[10:33:04.499]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:04.499]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:04.499]         }
[10:33:04.499]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:04.499]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:04.499]             base::sink(type = "output", split = FALSE)
[10:33:04.499]             base::close(...future.stdout)
[10:33:04.499]         }, add = TRUE)
[10:33:04.499]     }
[10:33:04.499]     ...future.frame <- base::sys.nframe()
[10:33:04.499]     ...future.conditions <- base::list()
[10:33:04.499]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:04.499]     if (FALSE) {
[10:33:04.499]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:04.499]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:04.499]     }
[10:33:04.499]     ...future.result <- base::tryCatch({
[10:33:04.499]         base::withCallingHandlers({
[10:33:04.499]             ...future.value <- base::withVisible(base::local({
[10:33:04.499]                 ...future.makeSendCondition <- base::local({
[10:33:04.499]                   sendCondition <- NULL
[10:33:04.499]                   function(frame = 1L) {
[10:33:04.499]                     if (is.function(sendCondition)) 
[10:33:04.499]                       return(sendCondition)
[10:33:04.499]                     ns <- getNamespace("parallel")
[10:33:04.499]                     if (exists("sendData", mode = "function", 
[10:33:04.499]                       envir = ns)) {
[10:33:04.499]                       parallel_sendData <- get("sendData", mode = "function", 
[10:33:04.499]                         envir = ns)
[10:33:04.499]                       envir <- sys.frame(frame)
[10:33:04.499]                       master <- NULL
[10:33:04.499]                       while (!identical(envir, .GlobalEnv) && 
[10:33:04.499]                         !identical(envir, emptyenv())) {
[10:33:04.499]                         if (exists("master", mode = "list", envir = envir, 
[10:33:04.499]                           inherits = FALSE)) {
[10:33:04.499]                           master <- get("master", mode = "list", 
[10:33:04.499]                             envir = envir, inherits = FALSE)
[10:33:04.499]                           if (inherits(master, c("SOCKnode", 
[10:33:04.499]                             "SOCK0node"))) {
[10:33:04.499]                             sendCondition <<- function(cond) {
[10:33:04.499]                               data <- list(type = "VALUE", value = cond, 
[10:33:04.499]                                 success = TRUE)
[10:33:04.499]                               parallel_sendData(master, data)
[10:33:04.499]                             }
[10:33:04.499]                             return(sendCondition)
[10:33:04.499]                           }
[10:33:04.499]                         }
[10:33:04.499]                         frame <- frame + 1L
[10:33:04.499]                         envir <- sys.frame(frame)
[10:33:04.499]                       }
[10:33:04.499]                     }
[10:33:04.499]                     sendCondition <<- function(cond) NULL
[10:33:04.499]                   }
[10:33:04.499]                 })
[10:33:04.499]                 withCallingHandlers({
[10:33:04.499]                   getOption("future.globals.onMissing")
[10:33:04.499]                 }, immediateCondition = function(cond) {
[10:33:04.499]                   sendCondition <- ...future.makeSendCondition()
[10:33:04.499]                   sendCondition(cond)
[10:33:04.499]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:04.499]                   {
[10:33:04.499]                     inherits <- base::inherits
[10:33:04.499]                     invokeRestart <- base::invokeRestart
[10:33:04.499]                     is.null <- base::is.null
[10:33:04.499]                     muffled <- FALSE
[10:33:04.499]                     if (inherits(cond, "message")) {
[10:33:04.499]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:04.499]                       if (muffled) 
[10:33:04.499]                         invokeRestart("muffleMessage")
[10:33:04.499]                     }
[10:33:04.499]                     else if (inherits(cond, "warning")) {
[10:33:04.499]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:04.499]                       if (muffled) 
[10:33:04.499]                         invokeRestart("muffleWarning")
[10:33:04.499]                     }
[10:33:04.499]                     else if (inherits(cond, "condition")) {
[10:33:04.499]                       if (!is.null(pattern)) {
[10:33:04.499]                         computeRestarts <- base::computeRestarts
[10:33:04.499]                         grepl <- base::grepl
[10:33:04.499]                         restarts <- computeRestarts(cond)
[10:33:04.499]                         for (restart in restarts) {
[10:33:04.499]                           name <- restart$name
[10:33:04.499]                           if (is.null(name)) 
[10:33:04.499]                             next
[10:33:04.499]                           if (!grepl(pattern, name)) 
[10:33:04.499]                             next
[10:33:04.499]                           invokeRestart(restart)
[10:33:04.499]                           muffled <- TRUE
[10:33:04.499]                           break
[10:33:04.499]                         }
[10:33:04.499]                       }
[10:33:04.499]                     }
[10:33:04.499]                     invisible(muffled)
[10:33:04.499]                   }
[10:33:04.499]                   muffleCondition(cond)
[10:33:04.499]                 })
[10:33:04.499]             }))
[10:33:04.499]             future::FutureResult(value = ...future.value$value, 
[10:33:04.499]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:04.499]                   ...future.rng), globalenv = if (FALSE) 
[10:33:04.499]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:04.499]                     ...future.globalenv.names))
[10:33:04.499]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:04.499]         }, condition = base::local({
[10:33:04.499]             c <- base::c
[10:33:04.499]             inherits <- base::inherits
[10:33:04.499]             invokeRestart <- base::invokeRestart
[10:33:04.499]             length <- base::length
[10:33:04.499]             list <- base::list
[10:33:04.499]             seq.int <- base::seq.int
[10:33:04.499]             signalCondition <- base::signalCondition
[10:33:04.499]             sys.calls <- base::sys.calls
[10:33:04.499]             `[[` <- base::`[[`
[10:33:04.499]             `+` <- base::`+`
[10:33:04.499]             `<<-` <- base::`<<-`
[10:33:04.499]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:04.499]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:04.499]                   3L)]
[10:33:04.499]             }
[10:33:04.499]             function(cond) {
[10:33:04.499]                 is_error <- inherits(cond, "error")
[10:33:04.499]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:04.499]                   NULL)
[10:33:04.499]                 if (is_error) {
[10:33:04.499]                   sessionInformation <- function() {
[10:33:04.499]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:04.499]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:04.499]                       search = base::search(), system = base::Sys.info())
[10:33:04.499]                   }
[10:33:04.499]                   ...future.conditions[[length(...future.conditions) + 
[10:33:04.499]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:04.499]                     cond$call), session = sessionInformation(), 
[10:33:04.499]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:04.499]                   signalCondition(cond)
[10:33:04.499]                 }
[10:33:04.499]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:04.499]                 "immediateCondition"))) {
[10:33:04.499]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:04.499]                   ...future.conditions[[length(...future.conditions) + 
[10:33:04.499]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:04.499]                   if (TRUE && !signal) {
[10:33:04.499]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:04.499]                     {
[10:33:04.499]                       inherits <- base::inherits
[10:33:04.499]                       invokeRestart <- base::invokeRestart
[10:33:04.499]                       is.null <- base::is.null
[10:33:04.499]                       muffled <- FALSE
[10:33:04.499]                       if (inherits(cond, "message")) {
[10:33:04.499]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:04.499]                         if (muffled) 
[10:33:04.499]                           invokeRestart("muffleMessage")
[10:33:04.499]                       }
[10:33:04.499]                       else if (inherits(cond, "warning")) {
[10:33:04.499]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:04.499]                         if (muffled) 
[10:33:04.499]                           invokeRestart("muffleWarning")
[10:33:04.499]                       }
[10:33:04.499]                       else if (inherits(cond, "condition")) {
[10:33:04.499]                         if (!is.null(pattern)) {
[10:33:04.499]                           computeRestarts <- base::computeRestarts
[10:33:04.499]                           grepl <- base::grepl
[10:33:04.499]                           restarts <- computeRestarts(cond)
[10:33:04.499]                           for (restart in restarts) {
[10:33:04.499]                             name <- restart$name
[10:33:04.499]                             if (is.null(name)) 
[10:33:04.499]                               next
[10:33:04.499]                             if (!grepl(pattern, name)) 
[10:33:04.499]                               next
[10:33:04.499]                             invokeRestart(restart)
[10:33:04.499]                             muffled <- TRUE
[10:33:04.499]                             break
[10:33:04.499]                           }
[10:33:04.499]                         }
[10:33:04.499]                       }
[10:33:04.499]                       invisible(muffled)
[10:33:04.499]                     }
[10:33:04.499]                     muffleCondition(cond, pattern = "^muffle")
[10:33:04.499]                   }
[10:33:04.499]                 }
[10:33:04.499]                 else {
[10:33:04.499]                   if (TRUE) {
[10:33:04.499]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:04.499]                     {
[10:33:04.499]                       inherits <- base::inherits
[10:33:04.499]                       invokeRestart <- base::invokeRestart
[10:33:04.499]                       is.null <- base::is.null
[10:33:04.499]                       muffled <- FALSE
[10:33:04.499]                       if (inherits(cond, "message")) {
[10:33:04.499]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:04.499]                         if (muffled) 
[10:33:04.499]                           invokeRestart("muffleMessage")
[10:33:04.499]                       }
[10:33:04.499]                       else if (inherits(cond, "warning")) {
[10:33:04.499]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:04.499]                         if (muffled) 
[10:33:04.499]                           invokeRestart("muffleWarning")
[10:33:04.499]                       }
[10:33:04.499]                       else if (inherits(cond, "condition")) {
[10:33:04.499]                         if (!is.null(pattern)) {
[10:33:04.499]                           computeRestarts <- base::computeRestarts
[10:33:04.499]                           grepl <- base::grepl
[10:33:04.499]                           restarts <- computeRestarts(cond)
[10:33:04.499]                           for (restart in restarts) {
[10:33:04.499]                             name <- restart$name
[10:33:04.499]                             if (is.null(name)) 
[10:33:04.499]                               next
[10:33:04.499]                             if (!grepl(pattern, name)) 
[10:33:04.499]                               next
[10:33:04.499]                             invokeRestart(restart)
[10:33:04.499]                             muffled <- TRUE
[10:33:04.499]                             break
[10:33:04.499]                           }
[10:33:04.499]                         }
[10:33:04.499]                       }
[10:33:04.499]                       invisible(muffled)
[10:33:04.499]                     }
[10:33:04.499]                     muffleCondition(cond, pattern = "^muffle")
[10:33:04.499]                   }
[10:33:04.499]                 }
[10:33:04.499]             }
[10:33:04.499]         }))
[10:33:04.499]     }, error = function(ex) {
[10:33:04.499]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:04.499]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:04.499]                 ...future.rng), started = ...future.startTime, 
[10:33:04.499]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:04.499]             version = "1.8"), class = "FutureResult")
[10:33:04.499]     }, finally = {
[10:33:04.499]         if (!identical(...future.workdir, getwd())) 
[10:33:04.499]             setwd(...future.workdir)
[10:33:04.499]         {
[10:33:04.499]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:04.499]                 ...future.oldOptions$nwarnings <- NULL
[10:33:04.499]             }
[10:33:04.499]             base::options(...future.oldOptions)
[10:33:04.499]             if (.Platform$OS.type == "windows") {
[10:33:04.499]                 old_names <- names(...future.oldEnvVars)
[10:33:04.499]                 envs <- base::Sys.getenv()
[10:33:04.499]                 names <- names(envs)
[10:33:04.499]                 common <- intersect(names, old_names)
[10:33:04.499]                 added <- setdiff(names, old_names)
[10:33:04.499]                 removed <- setdiff(old_names, names)
[10:33:04.499]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:04.499]                   envs[common]]
[10:33:04.499]                 NAMES <- toupper(changed)
[10:33:04.499]                 args <- list()
[10:33:04.499]                 for (kk in seq_along(NAMES)) {
[10:33:04.499]                   name <- changed[[kk]]
[10:33:04.499]                   NAME <- NAMES[[kk]]
[10:33:04.499]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:04.499]                     next
[10:33:04.499]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:04.499]                 }
[10:33:04.499]                 NAMES <- toupper(added)
[10:33:04.499]                 for (kk in seq_along(NAMES)) {
[10:33:04.499]                   name <- added[[kk]]
[10:33:04.499]                   NAME <- NAMES[[kk]]
[10:33:04.499]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:04.499]                     next
[10:33:04.499]                   args[[name]] <- ""
[10:33:04.499]                 }
[10:33:04.499]                 NAMES <- toupper(removed)
[10:33:04.499]                 for (kk in seq_along(NAMES)) {
[10:33:04.499]                   name <- removed[[kk]]
[10:33:04.499]                   NAME <- NAMES[[kk]]
[10:33:04.499]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:04.499]                     next
[10:33:04.499]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:04.499]                 }
[10:33:04.499]                 if (length(args) > 0) 
[10:33:04.499]                   base::do.call(base::Sys.setenv, args = args)
[10:33:04.499]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:04.499]             }
[10:33:04.499]             else {
[10:33:04.499]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:04.499]             }
[10:33:04.499]             {
[10:33:04.499]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:04.499]                   0L) {
[10:33:04.499]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:04.499]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:04.499]                   base::options(opts)
[10:33:04.499]                 }
[10:33:04.499]                 {
[10:33:04.499]                   {
[10:33:04.499]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:04.499]                     NULL
[10:33:04.499]                   }
[10:33:04.499]                   options(future.plan = NULL)
[10:33:04.499]                   if (is.na(NA_character_)) 
[10:33:04.499]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:04.499]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:04.499]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:04.499]                     .init = FALSE)
[10:33:04.499]                 }
[10:33:04.499]             }
[10:33:04.499]         }
[10:33:04.499]     })
[10:33:04.499]     if (TRUE) {
[10:33:04.499]         base::sink(type = "output", split = FALSE)
[10:33:04.499]         if (TRUE) {
[10:33:04.499]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:04.499]         }
[10:33:04.499]         else {
[10:33:04.499]             ...future.result["stdout"] <- base::list(NULL)
[10:33:04.499]         }
[10:33:04.499]         base::close(...future.stdout)
[10:33:04.499]         ...future.stdout <- NULL
[10:33:04.499]     }
[10:33:04.499]     ...future.result$conditions <- ...future.conditions
[10:33:04.499]     ...future.result$finished <- base::Sys.time()
[10:33:04.499]     ...future.result
[10:33:04.499] }
[10:33:04.502] MultisessionFuture started
[10:33:04.502] - Launch lazy future ... done
[10:33:04.502] run() for ‘MultisessionFuture’ ... done
[10:33:04.503] result() for ClusterFuture ...
[10:33:04.503] receiveMessageFromWorker() for ClusterFuture ...
[10:33:04.503] - Validating connection of MultisessionFuture
[10:33:04.504] - received message: FutureResult
[10:33:04.504] - Received FutureResult
[10:33:04.504] - Erased future from FutureRegistry
[10:33:04.504] result() for ClusterFuture ...
[10:33:04.504] - result already collected: FutureResult
[10:33:04.504] result() for ClusterFuture ... done
[10:33:04.505] receiveMessageFromWorker() for ClusterFuture ... done
[10:33:04.505] result() for ClusterFuture ... done
[10:33:04.505] result() for ClusterFuture ...
[10:33:04.505] - result already collected: FutureResult
[10:33:04.505] result() for ClusterFuture ... done
[10:33:04.505] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[10:33:04.506] Searching for globals...
[10:33:04.507] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[10:33:04.507] Searching for globals...
[10:33:04.508] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[10:33:04.509] Searching for globals ... DONE
[10:33:04.509] Resolving globals: FALSE
[10:33:04.509] The total size of the 1 globals is 160 bytes (160 bytes)
[10:33:04.510] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[10:33:04.510] - globals: [1] ‘data’
[10:33:04.510] 
[10:33:04.510] getGlobalsAndPackages() ... DONE
[10:33:04.510] run() for ‘Future’ ...
[10:33:04.510] - state: ‘created’
[10:33:04.511] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:33:04.525] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:33:04.525] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:33:04.525]   - Field: ‘node’
[10:33:04.525]   - Field: ‘label’
[10:33:04.525]   - Field: ‘local’
[10:33:04.526]   - Field: ‘owner’
[10:33:04.526]   - Field: ‘envir’
[10:33:04.526]   - Field: ‘workers’
[10:33:04.526]   - Field: ‘packages’
[10:33:04.526]   - Field: ‘gc’
[10:33:04.526]   - Field: ‘conditions’
[10:33:04.526]   - Field: ‘persistent’
[10:33:04.526]   - Field: ‘expr’
[10:33:04.526]   - Field: ‘uuid’
[10:33:04.526]   - Field: ‘seed’
[10:33:04.527]   - Field: ‘version’
[10:33:04.527]   - Field: ‘result’
[10:33:04.527]   - Field: ‘asynchronous’
[10:33:04.527]   - Field: ‘calls’
[10:33:04.527]   - Field: ‘globals’
[10:33:04.527]   - Field: ‘stdout’
[10:33:04.527]   - Field: ‘earlySignal’
[10:33:04.527]   - Field: ‘lazy’
[10:33:04.527]   - Field: ‘state’
[10:33:04.528] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:33:04.528] - Launch lazy future ...
[10:33:04.528] Packages needed by the future expression (n = 0): <none>
[10:33:04.528] Packages needed by future strategies (n = 0): <none>
[10:33:04.529] {
[10:33:04.529]     {
[10:33:04.529]         {
[10:33:04.529]             ...future.startTime <- base::Sys.time()
[10:33:04.529]             {
[10:33:04.529]                 {
[10:33:04.529]                   {
[10:33:04.529]                     {
[10:33:04.529]                       base::local({
[10:33:04.529]                         has_future <- base::requireNamespace("future", 
[10:33:04.529]                           quietly = TRUE)
[10:33:04.529]                         if (has_future) {
[10:33:04.529]                           ns <- base::getNamespace("future")
[10:33:04.529]                           version <- ns[[".package"]][["version"]]
[10:33:04.529]                           if (is.null(version)) 
[10:33:04.529]                             version <- utils::packageVersion("future")
[10:33:04.529]                         }
[10:33:04.529]                         else {
[10:33:04.529]                           version <- NULL
[10:33:04.529]                         }
[10:33:04.529]                         if (!has_future || version < "1.8.0") {
[10:33:04.529]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:04.529]                             "", base::R.version$version.string), 
[10:33:04.529]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:04.529]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:04.529]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:04.529]                               "release", "version")], collapse = " "), 
[10:33:04.529]                             hostname = base::Sys.info()[["nodename"]])
[10:33:04.529]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:04.529]                             info)
[10:33:04.529]                           info <- base::paste(info, collapse = "; ")
[10:33:04.529]                           if (!has_future) {
[10:33:04.529]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:04.529]                               info)
[10:33:04.529]                           }
[10:33:04.529]                           else {
[10:33:04.529]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:04.529]                               info, version)
[10:33:04.529]                           }
[10:33:04.529]                           base::stop(msg)
[10:33:04.529]                         }
[10:33:04.529]                       })
[10:33:04.529]                     }
[10:33:04.529]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:04.529]                     base::options(mc.cores = 1L)
[10:33:04.529]                   }
[10:33:04.529]                   ...future.strategy.old <- future::plan("list")
[10:33:04.529]                   options(future.plan = NULL)
[10:33:04.529]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:04.529]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:04.529]                 }
[10:33:04.529]                 ...future.workdir <- getwd()
[10:33:04.529]             }
[10:33:04.529]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:04.529]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:04.529]         }
[10:33:04.529]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[10:33:04.529]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:04.529]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[10:33:04.529]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:04.529]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:04.529]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:04.529]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:04.529]             base::names(...future.oldOptions))
[10:33:04.529]     }
[10:33:04.529]     if (FALSE) {
[10:33:04.529]     }
[10:33:04.529]     else {
[10:33:04.529]         if (TRUE) {
[10:33:04.529]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:04.529]                 open = "w")
[10:33:04.529]         }
[10:33:04.529]         else {
[10:33:04.529]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:04.529]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:04.529]         }
[10:33:04.529]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:04.529]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:04.529]             base::sink(type = "output", split = FALSE)
[10:33:04.529]             base::close(...future.stdout)
[10:33:04.529]         }, add = TRUE)
[10:33:04.529]     }
[10:33:04.529]     ...future.frame <- base::sys.nframe()
[10:33:04.529]     ...future.conditions <- base::list()
[10:33:04.529]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:04.529]     if (FALSE) {
[10:33:04.529]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:04.529]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:04.529]     }
[10:33:04.529]     ...future.result <- base::tryCatch({
[10:33:04.529]         base::withCallingHandlers({
[10:33:04.529]             ...future.value <- base::withVisible(base::local({
[10:33:04.529]                 ...future.makeSendCondition <- base::local({
[10:33:04.529]                   sendCondition <- NULL
[10:33:04.529]                   function(frame = 1L) {
[10:33:04.529]                     if (is.function(sendCondition)) 
[10:33:04.529]                       return(sendCondition)
[10:33:04.529]                     ns <- getNamespace("parallel")
[10:33:04.529]                     if (exists("sendData", mode = "function", 
[10:33:04.529]                       envir = ns)) {
[10:33:04.529]                       parallel_sendData <- get("sendData", mode = "function", 
[10:33:04.529]                         envir = ns)
[10:33:04.529]                       envir <- sys.frame(frame)
[10:33:04.529]                       master <- NULL
[10:33:04.529]                       while (!identical(envir, .GlobalEnv) && 
[10:33:04.529]                         !identical(envir, emptyenv())) {
[10:33:04.529]                         if (exists("master", mode = "list", envir = envir, 
[10:33:04.529]                           inherits = FALSE)) {
[10:33:04.529]                           master <- get("master", mode = "list", 
[10:33:04.529]                             envir = envir, inherits = FALSE)
[10:33:04.529]                           if (inherits(master, c("SOCKnode", 
[10:33:04.529]                             "SOCK0node"))) {
[10:33:04.529]                             sendCondition <<- function(cond) {
[10:33:04.529]                               data <- list(type = "VALUE", value = cond, 
[10:33:04.529]                                 success = TRUE)
[10:33:04.529]                               parallel_sendData(master, data)
[10:33:04.529]                             }
[10:33:04.529]                             return(sendCondition)
[10:33:04.529]                           }
[10:33:04.529]                         }
[10:33:04.529]                         frame <- frame + 1L
[10:33:04.529]                         envir <- sys.frame(frame)
[10:33:04.529]                       }
[10:33:04.529]                     }
[10:33:04.529]                     sendCondition <<- function(cond) NULL
[10:33:04.529]                   }
[10:33:04.529]                 })
[10:33:04.529]                 withCallingHandlers({
[10:33:04.529]                   subset(data, x < 3)$y
[10:33:04.529]                 }, immediateCondition = function(cond) {
[10:33:04.529]                   sendCondition <- ...future.makeSendCondition()
[10:33:04.529]                   sendCondition(cond)
[10:33:04.529]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:04.529]                   {
[10:33:04.529]                     inherits <- base::inherits
[10:33:04.529]                     invokeRestart <- base::invokeRestart
[10:33:04.529]                     is.null <- base::is.null
[10:33:04.529]                     muffled <- FALSE
[10:33:04.529]                     if (inherits(cond, "message")) {
[10:33:04.529]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:04.529]                       if (muffled) 
[10:33:04.529]                         invokeRestart("muffleMessage")
[10:33:04.529]                     }
[10:33:04.529]                     else if (inherits(cond, "warning")) {
[10:33:04.529]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:04.529]                       if (muffled) 
[10:33:04.529]                         invokeRestart("muffleWarning")
[10:33:04.529]                     }
[10:33:04.529]                     else if (inherits(cond, "condition")) {
[10:33:04.529]                       if (!is.null(pattern)) {
[10:33:04.529]                         computeRestarts <- base::computeRestarts
[10:33:04.529]                         grepl <- base::grepl
[10:33:04.529]                         restarts <- computeRestarts(cond)
[10:33:04.529]                         for (restart in restarts) {
[10:33:04.529]                           name <- restart$name
[10:33:04.529]                           if (is.null(name)) 
[10:33:04.529]                             next
[10:33:04.529]                           if (!grepl(pattern, name)) 
[10:33:04.529]                             next
[10:33:04.529]                           invokeRestart(restart)
[10:33:04.529]                           muffled <- TRUE
[10:33:04.529]                           break
[10:33:04.529]                         }
[10:33:04.529]                       }
[10:33:04.529]                     }
[10:33:04.529]                     invisible(muffled)
[10:33:04.529]                   }
[10:33:04.529]                   muffleCondition(cond)
[10:33:04.529]                 })
[10:33:04.529]             }))
[10:33:04.529]             future::FutureResult(value = ...future.value$value, 
[10:33:04.529]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:04.529]                   ...future.rng), globalenv = if (FALSE) 
[10:33:04.529]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:04.529]                     ...future.globalenv.names))
[10:33:04.529]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:04.529]         }, condition = base::local({
[10:33:04.529]             c <- base::c
[10:33:04.529]             inherits <- base::inherits
[10:33:04.529]             invokeRestart <- base::invokeRestart
[10:33:04.529]             length <- base::length
[10:33:04.529]             list <- base::list
[10:33:04.529]             seq.int <- base::seq.int
[10:33:04.529]             signalCondition <- base::signalCondition
[10:33:04.529]             sys.calls <- base::sys.calls
[10:33:04.529]             `[[` <- base::`[[`
[10:33:04.529]             `+` <- base::`+`
[10:33:04.529]             `<<-` <- base::`<<-`
[10:33:04.529]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:04.529]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:04.529]                   3L)]
[10:33:04.529]             }
[10:33:04.529]             function(cond) {
[10:33:04.529]                 is_error <- inherits(cond, "error")
[10:33:04.529]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:04.529]                   NULL)
[10:33:04.529]                 if (is_error) {
[10:33:04.529]                   sessionInformation <- function() {
[10:33:04.529]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:04.529]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:04.529]                       search = base::search(), system = base::Sys.info())
[10:33:04.529]                   }
[10:33:04.529]                   ...future.conditions[[length(...future.conditions) + 
[10:33:04.529]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:04.529]                     cond$call), session = sessionInformation(), 
[10:33:04.529]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:04.529]                   signalCondition(cond)
[10:33:04.529]                 }
[10:33:04.529]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:04.529]                 "immediateCondition"))) {
[10:33:04.529]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:04.529]                   ...future.conditions[[length(...future.conditions) + 
[10:33:04.529]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:04.529]                   if (TRUE && !signal) {
[10:33:04.529]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:04.529]                     {
[10:33:04.529]                       inherits <- base::inherits
[10:33:04.529]                       invokeRestart <- base::invokeRestart
[10:33:04.529]                       is.null <- base::is.null
[10:33:04.529]                       muffled <- FALSE
[10:33:04.529]                       if (inherits(cond, "message")) {
[10:33:04.529]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:04.529]                         if (muffled) 
[10:33:04.529]                           invokeRestart("muffleMessage")
[10:33:04.529]                       }
[10:33:04.529]                       else if (inherits(cond, "warning")) {
[10:33:04.529]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:04.529]                         if (muffled) 
[10:33:04.529]                           invokeRestart("muffleWarning")
[10:33:04.529]                       }
[10:33:04.529]                       else if (inherits(cond, "condition")) {
[10:33:04.529]                         if (!is.null(pattern)) {
[10:33:04.529]                           computeRestarts <- base::computeRestarts
[10:33:04.529]                           grepl <- base::grepl
[10:33:04.529]                           restarts <- computeRestarts(cond)
[10:33:04.529]                           for (restart in restarts) {
[10:33:04.529]                             name <- restart$name
[10:33:04.529]                             if (is.null(name)) 
[10:33:04.529]                               next
[10:33:04.529]                             if (!grepl(pattern, name)) 
[10:33:04.529]                               next
[10:33:04.529]                             invokeRestart(restart)
[10:33:04.529]                             muffled <- TRUE
[10:33:04.529]                             break
[10:33:04.529]                           }
[10:33:04.529]                         }
[10:33:04.529]                       }
[10:33:04.529]                       invisible(muffled)
[10:33:04.529]                     }
[10:33:04.529]                     muffleCondition(cond, pattern = "^muffle")
[10:33:04.529]                   }
[10:33:04.529]                 }
[10:33:04.529]                 else {
[10:33:04.529]                   if (TRUE) {
[10:33:04.529]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:04.529]                     {
[10:33:04.529]                       inherits <- base::inherits
[10:33:04.529]                       invokeRestart <- base::invokeRestart
[10:33:04.529]                       is.null <- base::is.null
[10:33:04.529]                       muffled <- FALSE
[10:33:04.529]                       if (inherits(cond, "message")) {
[10:33:04.529]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:04.529]                         if (muffled) 
[10:33:04.529]                           invokeRestart("muffleMessage")
[10:33:04.529]                       }
[10:33:04.529]                       else if (inherits(cond, "warning")) {
[10:33:04.529]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:04.529]                         if (muffled) 
[10:33:04.529]                           invokeRestart("muffleWarning")
[10:33:04.529]                       }
[10:33:04.529]                       else if (inherits(cond, "condition")) {
[10:33:04.529]                         if (!is.null(pattern)) {
[10:33:04.529]                           computeRestarts <- base::computeRestarts
[10:33:04.529]                           grepl <- base::grepl
[10:33:04.529]                           restarts <- computeRestarts(cond)
[10:33:04.529]                           for (restart in restarts) {
[10:33:04.529]                             name <- restart$name
[10:33:04.529]                             if (is.null(name)) 
[10:33:04.529]                               next
[10:33:04.529]                             if (!grepl(pattern, name)) 
[10:33:04.529]                               next
[10:33:04.529]                             invokeRestart(restart)
[10:33:04.529]                             muffled <- TRUE
[10:33:04.529]                             break
[10:33:04.529]                           }
[10:33:04.529]                         }
[10:33:04.529]                       }
[10:33:04.529]                       invisible(muffled)
[10:33:04.529]                     }
[10:33:04.529]                     muffleCondition(cond, pattern = "^muffle")
[10:33:04.529]                   }
[10:33:04.529]                 }
[10:33:04.529]             }
[10:33:04.529]         }))
[10:33:04.529]     }, error = function(ex) {
[10:33:04.529]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:04.529]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:04.529]                 ...future.rng), started = ...future.startTime, 
[10:33:04.529]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:04.529]             version = "1.8"), class = "FutureResult")
[10:33:04.529]     }, finally = {
[10:33:04.529]         if (!identical(...future.workdir, getwd())) 
[10:33:04.529]             setwd(...future.workdir)
[10:33:04.529]         {
[10:33:04.529]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:04.529]                 ...future.oldOptions$nwarnings <- NULL
[10:33:04.529]             }
[10:33:04.529]             base::options(...future.oldOptions)
[10:33:04.529]             if (.Platform$OS.type == "windows") {
[10:33:04.529]                 old_names <- names(...future.oldEnvVars)
[10:33:04.529]                 envs <- base::Sys.getenv()
[10:33:04.529]                 names <- names(envs)
[10:33:04.529]                 common <- intersect(names, old_names)
[10:33:04.529]                 added <- setdiff(names, old_names)
[10:33:04.529]                 removed <- setdiff(old_names, names)
[10:33:04.529]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:04.529]                   envs[common]]
[10:33:04.529]                 NAMES <- toupper(changed)
[10:33:04.529]                 args <- list()
[10:33:04.529]                 for (kk in seq_along(NAMES)) {
[10:33:04.529]                   name <- changed[[kk]]
[10:33:04.529]                   NAME <- NAMES[[kk]]
[10:33:04.529]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:04.529]                     next
[10:33:04.529]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:04.529]                 }
[10:33:04.529]                 NAMES <- toupper(added)
[10:33:04.529]                 for (kk in seq_along(NAMES)) {
[10:33:04.529]                   name <- added[[kk]]
[10:33:04.529]                   NAME <- NAMES[[kk]]
[10:33:04.529]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:04.529]                     next
[10:33:04.529]                   args[[name]] <- ""
[10:33:04.529]                 }
[10:33:04.529]                 NAMES <- toupper(removed)
[10:33:04.529]                 for (kk in seq_along(NAMES)) {
[10:33:04.529]                   name <- removed[[kk]]
[10:33:04.529]                   NAME <- NAMES[[kk]]
[10:33:04.529]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:04.529]                     next
[10:33:04.529]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:04.529]                 }
[10:33:04.529]                 if (length(args) > 0) 
[10:33:04.529]                   base::do.call(base::Sys.setenv, args = args)
[10:33:04.529]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:04.529]             }
[10:33:04.529]             else {
[10:33:04.529]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:04.529]             }
[10:33:04.529]             {
[10:33:04.529]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:04.529]                   0L) {
[10:33:04.529]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:04.529]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:04.529]                   base::options(opts)
[10:33:04.529]                 }
[10:33:04.529]                 {
[10:33:04.529]                   {
[10:33:04.529]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:04.529]                     NULL
[10:33:04.529]                   }
[10:33:04.529]                   options(future.plan = NULL)
[10:33:04.529]                   if (is.na(NA_character_)) 
[10:33:04.529]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:04.529]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:04.529]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:04.529]                     .init = FALSE)
[10:33:04.529]                 }
[10:33:04.529]             }
[10:33:04.529]         }
[10:33:04.529]     })
[10:33:04.529]     if (TRUE) {
[10:33:04.529]         base::sink(type = "output", split = FALSE)
[10:33:04.529]         if (TRUE) {
[10:33:04.529]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:04.529]         }
[10:33:04.529]         else {
[10:33:04.529]             ...future.result["stdout"] <- base::list(NULL)
[10:33:04.529]         }
[10:33:04.529]         base::close(...future.stdout)
[10:33:04.529]         ...future.stdout <- NULL
[10:33:04.529]     }
[10:33:04.529]     ...future.result$conditions <- ...future.conditions
[10:33:04.529]     ...future.result$finished <- base::Sys.time()
[10:33:04.529]     ...future.result
[10:33:04.529] }
[10:33:04.531] Exporting 1 global objects (160 bytes) to cluster node #1 ...
[10:33:04.532] Exporting ‘data’ (160 bytes) to cluster node #1 ...
[10:33:04.532] Exporting ‘data’ (160 bytes) to cluster node #1 ... DONE
[10:33:04.532] Exporting 1 global objects (160 bytes) to cluster node #1 ... DONE
[10:33:04.533] MultisessionFuture started
[10:33:04.533] - Launch lazy future ... done
[10:33:04.533] run() for ‘MultisessionFuture’ ... done
[10:33:04.533] result() for ClusterFuture ...
[10:33:04.534] receiveMessageFromWorker() for ClusterFuture ...
[10:33:04.534] - Validating connection of MultisessionFuture
[10:33:04.535] - received message: FutureResult
[10:33:04.535] - Received FutureResult
[10:33:04.535] - Erased future from FutureRegistry
[10:33:04.535] result() for ClusterFuture ...
[10:33:04.535] - result already collected: FutureResult
[10:33:04.536] result() for ClusterFuture ... done
[10:33:04.536] receiveMessageFromWorker() for ClusterFuture ... done
[10:33:04.536] result() for ClusterFuture ... done
[10:33:04.536] result() for ClusterFuture ...
[10:33:04.536] - result already collected: FutureResult
[10:33:04.536] result() for ClusterFuture ... done
[10:33:04.536] plan(): Setting new future strategy stack:
[10:33:04.537] List of future strategies:
[10:33:04.537] 1. sequential:
[10:33:04.537]    - args: function (..., envir = parent.frame())
[10:33:04.537]    - tweaked: FALSE
[10:33:04.537]    - call: plan(list(sequential, strategy))
[10:33:04.537] 2. multisession:
[10:33:04.537]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:33:04.537]    - tweaked: FALSE
[10:33:04.537]    - call: plan(list(sequential, strategy))
[10:33:04.538] plan(): nbrOfWorkers() = 1
[10:33:04.538] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[10:33:04.538] Searching for globals...
[10:33:04.545] - globals found: [8] ‘{’, ‘<-’, ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’, ‘%<-%’
[10:33:04.546] Searching for globals ... DONE
[10:33:04.546] Resolving globals: FALSE
[10:33:04.547] The total size of the 1 globals is 160 bytes (160 bytes)
[10:33:04.547] The total size of the 1 globals exported for future expression (‘{; a %<-% subset(data, x < 3)$y; a; }’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[10:33:04.547] - globals: [1] ‘data’
[10:33:04.547] - packages: [1] ‘future’
[10:33:04.548] getGlobalsAndPackages() ... DONE
[10:33:04.548] run() for ‘Future’ ...
[10:33:04.548] - state: ‘created’
[10:33:04.548] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:33:04.548] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:33:04.548] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:33:04.549]   - Field: ‘label’
[10:33:04.549]   - Field: ‘local’
[10:33:04.549]   - Field: ‘owner’
[10:33:04.549]   - Field: ‘envir’
[10:33:04.549]   - Field: ‘packages’
[10:33:04.549]   - Field: ‘gc’
[10:33:04.549]   - Field: ‘conditions’
[10:33:04.549]   - Field: ‘expr’
[10:33:04.549]   - Field: ‘uuid’
[10:33:04.549]   - Field: ‘seed’
[10:33:04.549]   - Field: ‘version’
[10:33:04.550]   - Field: ‘result’
[10:33:04.550]   - Field: ‘asynchronous’
[10:33:04.550]   - Field: ‘calls’
[10:33:04.550]   - Field: ‘globals’
[10:33:04.550]   - Field: ‘stdout’
[10:33:04.550]   - Field: ‘earlySignal’
[10:33:04.550]   - Field: ‘lazy’
[10:33:04.550]   - Field: ‘state’
[10:33:04.550] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:33:04.550] - Launch lazy future ...
[10:33:04.550] Packages needed by the future expression (n = 1): ‘future’
[10:33:04.551] Packages needed by future strategies (n = 1): ‘future’
[10:33:04.551] {
[10:33:04.551]     {
[10:33:04.551]         {
[10:33:04.551]             ...future.startTime <- base::Sys.time()
[10:33:04.551]             {
[10:33:04.551]                 {
[10:33:04.551]                   {
[10:33:04.551]                     {
[10:33:04.551]                       base::local({
[10:33:04.551]                         has_future <- base::requireNamespace("future", 
[10:33:04.551]                           quietly = TRUE)
[10:33:04.551]                         if (has_future) {
[10:33:04.551]                           ns <- base::getNamespace("future")
[10:33:04.551]                           version <- ns[[".package"]][["version"]]
[10:33:04.551]                           if (is.null(version)) 
[10:33:04.551]                             version <- utils::packageVersion("future")
[10:33:04.551]                         }
[10:33:04.551]                         else {
[10:33:04.551]                           version <- NULL
[10:33:04.551]                         }
[10:33:04.551]                         if (!has_future || version < "1.8.0") {
[10:33:04.551]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:04.551]                             "", base::R.version$version.string), 
[10:33:04.551]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:04.551]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:04.551]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:04.551]                               "release", "version")], collapse = " "), 
[10:33:04.551]                             hostname = base::Sys.info()[["nodename"]])
[10:33:04.551]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:04.551]                             info)
[10:33:04.551]                           info <- base::paste(info, collapse = "; ")
[10:33:04.551]                           if (!has_future) {
[10:33:04.551]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:04.551]                               info)
[10:33:04.551]                           }
[10:33:04.551]                           else {
[10:33:04.551]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:04.551]                               info, version)
[10:33:04.551]                           }
[10:33:04.551]                           base::stop(msg)
[10:33:04.551]                         }
[10:33:04.551]                       })
[10:33:04.551]                     }
[10:33:04.551]                     base::local({
[10:33:04.551]                       for (pkg in "future") {
[10:33:04.551]                         base::loadNamespace(pkg)
[10:33:04.551]                         base::library(pkg, character.only = TRUE)
[10:33:04.551]                       }
[10:33:04.551]                     })
[10:33:04.551]                   }
[10:33:04.551]                   ...future.strategy.old <- future::plan("list")
[10:33:04.551]                   options(future.plan = NULL)
[10:33:04.551]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:04.551]                   future::plan(list(function (..., workers = availableCores(), 
[10:33:04.551]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:33:04.551]                     envir = parent.frame()) 
[10:33:04.551]                   {
[10:33:04.551]                     if (is.function(workers)) 
[10:33:04.551]                       workers <- workers()
[10:33:04.551]                     workers <- structure(as.integer(workers), 
[10:33:04.551]                       class = class(workers))
[10:33:04.551]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:33:04.551]                       workers >= 1)
[10:33:04.551]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:33:04.551]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:33:04.551]                     }
[10:33:04.551]                     future <- MultisessionFuture(..., workers = workers, 
[10:33:04.551]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:33:04.551]                       envir = envir)
[10:33:04.551]                     if (!future$lazy) 
[10:33:04.551]                       future <- run(future)
[10:33:04.551]                     invisible(future)
[10:33:04.551]                   }), .cleanup = FALSE, .init = FALSE)
[10:33:04.551]                 }
[10:33:04.551]                 ...future.workdir <- getwd()
[10:33:04.551]             }
[10:33:04.551]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:04.551]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:04.551]         }
[10:33:04.551]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[10:33:04.551]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:04.551]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[10:33:04.551]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:04.551]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:04.551]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:04.551]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:04.551]             base::names(...future.oldOptions))
[10:33:04.551]     }
[10:33:04.551]     if (FALSE) {
[10:33:04.551]     }
[10:33:04.551]     else {
[10:33:04.551]         if (TRUE) {
[10:33:04.551]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:04.551]                 open = "w")
[10:33:04.551]         }
[10:33:04.551]         else {
[10:33:04.551]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:04.551]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:04.551]         }
[10:33:04.551]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:04.551]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:04.551]             base::sink(type = "output", split = FALSE)
[10:33:04.551]             base::close(...future.stdout)
[10:33:04.551]         }, add = TRUE)
[10:33:04.551]     }
[10:33:04.551]     ...future.frame <- base::sys.nframe()
[10:33:04.551]     ...future.conditions <- base::list()
[10:33:04.551]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:04.551]     if (FALSE) {
[10:33:04.551]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:04.551]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:04.551]     }
[10:33:04.551]     ...future.result <- base::tryCatch({
[10:33:04.551]         base::withCallingHandlers({
[10:33:04.551]             ...future.value <- base::withVisible(base::local({
[10:33:04.551]                 a %<-% subset(data, x < 3)$y
[10:33:04.551]                 a
[10:33:04.551]             }))
[10:33:04.551]             future::FutureResult(value = ...future.value$value, 
[10:33:04.551]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:04.551]                   ...future.rng), globalenv = if (FALSE) 
[10:33:04.551]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:04.551]                     ...future.globalenv.names))
[10:33:04.551]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:04.551]         }, condition = base::local({
[10:33:04.551]             c <- base::c
[10:33:04.551]             inherits <- base::inherits
[10:33:04.551]             invokeRestart <- base::invokeRestart
[10:33:04.551]             length <- base::length
[10:33:04.551]             list <- base::list
[10:33:04.551]             seq.int <- base::seq.int
[10:33:04.551]             signalCondition <- base::signalCondition
[10:33:04.551]             sys.calls <- base::sys.calls
[10:33:04.551]             `[[` <- base::`[[`
[10:33:04.551]             `+` <- base::`+`
[10:33:04.551]             `<<-` <- base::`<<-`
[10:33:04.551]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:04.551]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:04.551]                   3L)]
[10:33:04.551]             }
[10:33:04.551]             function(cond) {
[10:33:04.551]                 is_error <- inherits(cond, "error")
[10:33:04.551]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:04.551]                   NULL)
[10:33:04.551]                 if (is_error) {
[10:33:04.551]                   sessionInformation <- function() {
[10:33:04.551]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:04.551]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:04.551]                       search = base::search(), system = base::Sys.info())
[10:33:04.551]                   }
[10:33:04.551]                   ...future.conditions[[length(...future.conditions) + 
[10:33:04.551]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:04.551]                     cond$call), session = sessionInformation(), 
[10:33:04.551]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:04.551]                   signalCondition(cond)
[10:33:04.551]                 }
[10:33:04.551]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:04.551]                 "immediateCondition"))) {
[10:33:04.551]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:04.551]                   ...future.conditions[[length(...future.conditions) + 
[10:33:04.551]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:04.551]                   if (TRUE && !signal) {
[10:33:04.551]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:04.551]                     {
[10:33:04.551]                       inherits <- base::inherits
[10:33:04.551]                       invokeRestart <- base::invokeRestart
[10:33:04.551]                       is.null <- base::is.null
[10:33:04.551]                       muffled <- FALSE
[10:33:04.551]                       if (inherits(cond, "message")) {
[10:33:04.551]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:04.551]                         if (muffled) 
[10:33:04.551]                           invokeRestart("muffleMessage")
[10:33:04.551]                       }
[10:33:04.551]                       else if (inherits(cond, "warning")) {
[10:33:04.551]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:04.551]                         if (muffled) 
[10:33:04.551]                           invokeRestart("muffleWarning")
[10:33:04.551]                       }
[10:33:04.551]                       else if (inherits(cond, "condition")) {
[10:33:04.551]                         if (!is.null(pattern)) {
[10:33:04.551]                           computeRestarts <- base::computeRestarts
[10:33:04.551]                           grepl <- base::grepl
[10:33:04.551]                           restarts <- computeRestarts(cond)
[10:33:04.551]                           for (restart in restarts) {
[10:33:04.551]                             name <- restart$name
[10:33:04.551]                             if (is.null(name)) 
[10:33:04.551]                               next
[10:33:04.551]                             if (!grepl(pattern, name)) 
[10:33:04.551]                               next
[10:33:04.551]                             invokeRestart(restart)
[10:33:04.551]                             muffled <- TRUE
[10:33:04.551]                             break
[10:33:04.551]                           }
[10:33:04.551]                         }
[10:33:04.551]                       }
[10:33:04.551]                       invisible(muffled)
[10:33:04.551]                     }
[10:33:04.551]                     muffleCondition(cond, pattern = "^muffle")
[10:33:04.551]                   }
[10:33:04.551]                 }
[10:33:04.551]                 else {
[10:33:04.551]                   if (TRUE) {
[10:33:04.551]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:04.551]                     {
[10:33:04.551]                       inherits <- base::inherits
[10:33:04.551]                       invokeRestart <- base::invokeRestart
[10:33:04.551]                       is.null <- base::is.null
[10:33:04.551]                       muffled <- FALSE
[10:33:04.551]                       if (inherits(cond, "message")) {
[10:33:04.551]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:04.551]                         if (muffled) 
[10:33:04.551]                           invokeRestart("muffleMessage")
[10:33:04.551]                       }
[10:33:04.551]                       else if (inherits(cond, "warning")) {
[10:33:04.551]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:04.551]                         if (muffled) 
[10:33:04.551]                           invokeRestart("muffleWarning")
[10:33:04.551]                       }
[10:33:04.551]                       else if (inherits(cond, "condition")) {
[10:33:04.551]                         if (!is.null(pattern)) {
[10:33:04.551]                           computeRestarts <- base::computeRestarts
[10:33:04.551]                           grepl <- base::grepl
[10:33:04.551]                           restarts <- computeRestarts(cond)
[10:33:04.551]                           for (restart in restarts) {
[10:33:04.551]                             name <- restart$name
[10:33:04.551]                             if (is.null(name)) 
[10:33:04.551]                               next
[10:33:04.551]                             if (!grepl(pattern, name)) 
[10:33:04.551]                               next
[10:33:04.551]                             invokeRestart(restart)
[10:33:04.551]                             muffled <- TRUE
[10:33:04.551]                             break
[10:33:04.551]                           }
[10:33:04.551]                         }
[10:33:04.551]                       }
[10:33:04.551]                       invisible(muffled)
[10:33:04.551]                     }
[10:33:04.551]                     muffleCondition(cond, pattern = "^muffle")
[10:33:04.551]                   }
[10:33:04.551]                 }
[10:33:04.551]             }
[10:33:04.551]         }))
[10:33:04.551]     }, error = function(ex) {
[10:33:04.551]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:04.551]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:04.551]                 ...future.rng), started = ...future.startTime, 
[10:33:04.551]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:04.551]             version = "1.8"), class = "FutureResult")
[10:33:04.551]     }, finally = {
[10:33:04.551]         if (!identical(...future.workdir, getwd())) 
[10:33:04.551]             setwd(...future.workdir)
[10:33:04.551]         {
[10:33:04.551]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:04.551]                 ...future.oldOptions$nwarnings <- NULL
[10:33:04.551]             }
[10:33:04.551]             base::options(...future.oldOptions)
[10:33:04.551]             if (.Platform$OS.type == "windows") {
[10:33:04.551]                 old_names <- names(...future.oldEnvVars)
[10:33:04.551]                 envs <- base::Sys.getenv()
[10:33:04.551]                 names <- names(envs)
[10:33:04.551]                 common <- intersect(names, old_names)
[10:33:04.551]                 added <- setdiff(names, old_names)
[10:33:04.551]                 removed <- setdiff(old_names, names)
[10:33:04.551]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:04.551]                   envs[common]]
[10:33:04.551]                 NAMES <- toupper(changed)
[10:33:04.551]                 args <- list()
[10:33:04.551]                 for (kk in seq_along(NAMES)) {
[10:33:04.551]                   name <- changed[[kk]]
[10:33:04.551]                   NAME <- NAMES[[kk]]
[10:33:04.551]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:04.551]                     next
[10:33:04.551]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:04.551]                 }
[10:33:04.551]                 NAMES <- toupper(added)
[10:33:04.551]                 for (kk in seq_along(NAMES)) {
[10:33:04.551]                   name <- added[[kk]]
[10:33:04.551]                   NAME <- NAMES[[kk]]
[10:33:04.551]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:04.551]                     next
[10:33:04.551]                   args[[name]] <- ""
[10:33:04.551]                 }
[10:33:04.551]                 NAMES <- toupper(removed)
[10:33:04.551]                 for (kk in seq_along(NAMES)) {
[10:33:04.551]                   name <- removed[[kk]]
[10:33:04.551]                   NAME <- NAMES[[kk]]
[10:33:04.551]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:04.551]                     next
[10:33:04.551]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:04.551]                 }
[10:33:04.551]                 if (length(args) > 0) 
[10:33:04.551]                   base::do.call(base::Sys.setenv, args = args)
[10:33:04.551]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:04.551]             }
[10:33:04.551]             else {
[10:33:04.551]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:04.551]             }
[10:33:04.551]             {
[10:33:04.551]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:04.551]                   0L) {
[10:33:04.551]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:04.551]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:04.551]                   base::options(opts)
[10:33:04.551]                 }
[10:33:04.551]                 {
[10:33:04.551]                   {
[10:33:04.551]                     NULL
[10:33:04.551]                     RNGkind("Mersenne-Twister")
[10:33:04.551]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:33:04.551]                       inherits = FALSE)
[10:33:04.551]                   }
[10:33:04.551]                   options(future.plan = NULL)
[10:33:04.551]                   if (is.na(NA_character_)) 
[10:33:04.551]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:04.551]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:04.551]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:04.551]                     .init = FALSE)
[10:33:04.551]                 }
[10:33:04.551]             }
[10:33:04.551]         }
[10:33:04.551]     })
[10:33:04.551]     if (TRUE) {
[10:33:04.551]         base::sink(type = "output", split = FALSE)
[10:33:04.551]         if (TRUE) {
[10:33:04.551]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:04.551]         }
[10:33:04.551]         else {
[10:33:04.551]             ...future.result["stdout"] <- base::list(NULL)
[10:33:04.551]         }
[10:33:04.551]         base::close(...future.stdout)
[10:33:04.551]         ...future.stdout <- NULL
[10:33:04.551]     }
[10:33:04.551]     ...future.result$conditions <- ...future.conditions
[10:33:04.551]     ...future.result$finished <- base::Sys.time()
[10:33:04.551]     ...future.result
[10:33:04.551] }
[10:33:04.554] assign_globals() ...
[10:33:04.554] List of 1
[10:33:04.554]  $ data:'data.frame':	5 obs. of  2 variables:
[10:33:04.554]   ..$ x: int [1:5] 1 2 3 4 5
[10:33:04.554]   ..$ y: int [1:5] 1 2 3 4 5
[10:33:04.554]  - attr(*, "where")=List of 1
[10:33:04.554]   ..$ data:<environment: R_EmptyEnv> 
[10:33:04.554]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:33:04.554]  - attr(*, "resolved")= logi FALSE
[10:33:04.554]  - attr(*, "total_size")= num 160
[10:33:04.554]  - attr(*, "already-done")= logi TRUE
[10:33:04.558] - copied ‘data’ to environment
[10:33:04.558] assign_globals() ... done
[10:33:04.559] plan(): Setting new future strategy stack:
[10:33:04.559] List of future strategies:
[10:33:04.559] 1. multisession:
[10:33:04.559]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:33:04.559]    - tweaked: FALSE
[10:33:04.559]    - call: plan(list(sequential, strategy))
[10:33:04.562] plan(): nbrOfWorkers() = 2
[10:33:04.958] plan(): Setting new future strategy stack:
[10:33:04.958] List of future strategies:
[10:33:04.958] 1. sequential:
[10:33:04.958]    - args: function (..., envir = parent.frame())
[10:33:04.958]    - tweaked: FALSE
[10:33:04.958]    - call: plan(list(sequential, strategy))
[10:33:04.958] 2. multisession:
[10:33:04.958]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:33:04.958]    - tweaked: FALSE
[10:33:04.958]    - call: plan(list(sequential, strategy))
[10:33:04.959] plan(): nbrOfWorkers() = 1
[10:33:04.959] SequentialFuture started (and completed)
[10:33:04.959] signalConditions() ...
[10:33:04.959]  - include = ‘immediateCondition’
[10:33:04.959]  - exclude = 
[10:33:04.959]  - resignal = FALSE
[10:33:04.960]  - Number of conditions: 93
[10:33:04.960] signalConditions() ... done
[10:33:04.960] - Launch lazy future ... done
[10:33:04.960] run() for ‘SequentialFuture’ ... done
[10:33:04.960] signalConditions() ...
[10:33:04.960]  - include = ‘immediateCondition’
[10:33:04.960]  - exclude = 
[10:33:04.960]  - resignal = FALSE
[10:33:04.960]  - Number of conditions: 93
[10:33:04.961] signalConditions() ... done
[10:33:04.961] Future state: ‘finished’
[10:33:04.961] signalConditions() ...
[10:33:04.961]  - include = ‘condition’
[10:33:04.961]  - exclude = ‘immediateCondition’
[10:33:04.961]  - resignal = TRUE
[10:33:04.961]  - Number of conditions: 93
[10:33:04.961]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.563] getGlobalsAndPackages() ...
[10:33:04.961]  - Condition #2: ‘deprecatedWarning’, ‘warning’, ‘condition’
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[10:33:04.962]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.576] Searching for globals...
[10:33:04.962]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.577] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[10:33:04.962]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.577] Searching for globals ... DONE
[10:33:04.962]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.577] Resolving globals: FALSE
[10:33:04.962]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.578] The total size of the 1 globals is 160 bytes (160 bytes)
[10:33:04.962]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.578] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[10:33:04.963]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.578] - globals: [1] ‘data’
[10:33:04.963]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.578] 
[10:33:04.963]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.579] getGlobalsAndPackages() ... DONE
[10:33:04.963]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.579] run() for ‘Future’ ...
[10:33:04.963]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.579] - state: ‘created’
[10:33:04.964]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.579] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:33:04.964]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.583] [local output] makeClusterPSOCK() ...
[10:33:04.964]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.586] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[10:33:04.964]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.587] [local output] Base port: 11477
[10:33:04.964]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.587] [local output] Getting setup options for 2 cluster nodes ...
[10:33:04.964]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.587] [local output]  - Node 1 of 2 ...
[10:33:04.965]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.587] [local output] localMachine=TRUE => revtunnel=FALSE

[10:33:04.965]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.588] [local output] Rscript port: 11477

[10:33:04.965]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.588] [local output]  - Node 2 of 2 ...
[10:33:04.965]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.589] [local output] localMachine=TRUE => revtunnel=FALSE

[10:33:04.966]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.589] [local output] Rscript port: 11477

[10:33:04.966]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.589] [local output] Getting setup options for 2 cluster nodes ... done
[10:33:04.966]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.590] [local output]  - Parallel setup requested for some PSOCK nodes
[10:33:04.966]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.590] [local output] Setting up PSOCK nodes in parallel
[10:33:04.966]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.590] List of 36
[10:33:04.590]  $ worker          : chr "localhost"
[10:33:04.590]   ..- attr(*, "localhost")= logi TRUE
[10:33:04.590]  $ master          : chr "localhost"
[10:33:04.590]  $ port            : int 11477
[10:33:04.590]  $ connectTimeout  : num 120
[10:33:04.590]  $ timeout         : num 2592000
[10:33:04.590]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:33:04.590]  $ homogeneous     : logi TRUE
[10:33:04.590]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:33:04.590]  $ rscript_envs    : NULL
[10:33:04.590]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:33:04.590]  $ rscript_startup : NULL
[10:33:04.590]  $ rscript_sh      : chr "sh"
[10:33:04.590]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:33:04.590]  $ methods         : logi TRUE
[10:33:04.590]  $ socketOptions   : chr "no-delay"
[10:33:04.590]  $ useXDR          : logi FALSE
[10:33:04.590]  $ outfile         : chr "/dev/null"
[10:33:04.590]  $ renice          : int NA
[10:33:04.590]  $ rshcmd          : NULL
[10:33:04.590]  $ user            : chr(0) 
[10:33:04.590]  $ revtunnel       : logi FALSE
[10:33:04.590]  $ rshlogfile      : NULL
[10:33:04.590]  $ rshopts         : chr(0) 
[10:33:04.590]  $ rank            : int 1
[10:33:04.590]  $ manual          : logi FALSE
[10:33:04.590]  $ dryrun          : logi FALSE
[10:33:04.590]  $ quiet           : logi FALSE
[10:33:04.590]  $ setup_strategy  : chr "parallel"
[10:33:04.590]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:33:04.590]  $ pidfile         : chr "/tmp/RtmpX9hGRd/worker.rank=1.parallelly.parent=83258.1453a2f038527.pid"
[10:33:04.590]  $ rshcmd_label    : NULL
[10:33:04.590]  $ rsh_call        : NULL
[10:33:04.590]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:33:04.590]  $ localMachine    : logi TRUE
[10:33:04.590]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:33:04.590]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:33:04.590]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:33:04.590]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:33:04.590]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:33:04.590]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:33:04.590]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:33:04.590]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:33:04.590]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:33:04.590]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:33:04.590]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:33:04.590]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:33:04.590]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:33:04.590]  $ arguments       :List of 28
[10:33:04.590]   ..$ worker          : chr "localhost"
[10:33:04.590]   ..$ master          : NULL
[10:33:04.590]   ..$ port            : int 11477
[10:33:04.590]   ..$ connectTimeout  : num 120
[10:33:04.590]   ..$ timeout         : num 2592000
[10:33:04.590]   ..$ rscript         : NULL
[10:33:04.590]   ..$ homogeneous     : NULL
[10:33:04.590]   ..$ rscript_args    : NULL
[10:33:04.590]   ..$ rscript_envs    : NULL
[10:33:04.590]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:33:04.590]   ..$ rscript_startup : NULL
[10:33:04.590]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:33:04.590]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:33:04.590]   ..$ methods         : logi TRUE
[10:33:04.590]   ..$ socketOptions   : chr "no-delay"
[10:33:04.590]   ..$ useXDR          : logi FALSE
[10:33:04.590]   ..$ outfile         : chr "/dev/null"
[10:33:04.590]   ..$ renice          : int NA
[10:33:04.590]   ..$ rshcmd          : NULL
[10:33:04.590]   ..$ user            : NULL
[10:33:04.590]   ..$ revtunnel       : logi NA
[10:33:04.590]   ..$ rshlogfile      : NULL
[10:33:04.590]   ..$ rshopts         : NULL
[10:33:04.590]   ..$ rank            : int 1
[10:33:04.590]   ..$ manual          : logi FALSE
[10:33:04.590]   ..$ dryrun          : logi FALSE
[10:33:04.590]   ..$ quiet           : logi FALSE
[10:33:04.590]   ..$ setup_strategy  : chr "parallel"
[10:33:04.590]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:33:04.966]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.606] [local output] System call to launch all workers:
[10:33:04.967]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.607] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpX9hGRd/worker.rank=1.parallelly.parent=83258.1453a2f038527.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11477 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:33:04.967]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.607] [local output] Starting PSOCK main server
[10:33:04.967]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.608] [local output] Workers launched
[10:33:04.967]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.608] [local output] Waiting for workers to connect back
[10:33:04.967]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.608]  - [local output] 0 workers out of 2 ready
[10:33:04.968]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.843]  - [local output] 0 workers out of 2 ready
[10:33:04.968]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.843]  - [local output] 1 workers out of 2 ready
[10:33:04.968]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.851]  - [local output] 1 workers out of 2 ready
[10:33:04.968]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.852]  - [local output] 2 workers out of 2 ready
[10:33:04.968]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.852] [local output] Launching of workers completed
[10:33:04.968]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.852] [local output] Collecting session information from workers
[10:33:04.969]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.853] [local output]  - Worker #1 of 2
[10:33:04.969]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.853] [local output]  - Worker #2 of 2
[10:33:04.969]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.854] [local output] makeClusterPSOCK() ... done
[10:33:04.969]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.864] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:33:04.969]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.864] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:33:04.969]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.864]   - Field: ‘node’
[10:33:04.969]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.864]   - Field: ‘label’
[10:33:04.970]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.864]   - Field: ‘local’
[10:33:04.970]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.864]   - Field: ‘owner’
[10:33:04.970]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.864]   - Field: ‘envir’
[10:33:04.970]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.865]   - Field: ‘workers’
[10:33:04.970]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.865]   - Field: ‘packages’
[10:33:04.970]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.865]   - Field: ‘gc’
[10:33:04.970]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.865]   - Field: ‘conditions’
[10:33:04.970]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.865]   - Field: ‘persistent’
[10:33:04.971]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.865]   - Field: ‘expr’
[10:33:04.971]  - Condition #57: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.865]   - Field: ‘uuid’
[10:33:04.971]  - Condition #58: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.865]   - Field: ‘seed’
[10:33:04.971]  - Condition #59: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.865]   - Field: ‘version’
[10:33:04.971]  - Condition #60: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.866]   - Field: ‘result’
[10:33:04.971]  - Condition #61: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.866]   - Field: ‘asynchronous’
[10:33:04.971]  - Condition #62: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.866]   - Field: ‘calls’
[10:33:04.971]  - Condition #63: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.866]   - Field: ‘globals’
[10:33:04.972]  - Condition #64: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.866]   - Field: ‘stdout’
[10:33:04.972]  - Condition #65: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.866]   - Field: ‘earlySignal’
[10:33:04.972]  - Condition #66: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.866]   - Field: ‘lazy’
[10:33:04.972]  - Condition #67: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.866]   - Field: ‘state’
[10:33:04.972]  - Condition #68: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.866] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:33:04.972]  - Condition #69: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.867] - Launch lazy future ...
[10:33:04.972]  - Condition #70: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.867] Packages needed by the future expression (n = 0): <none>
[10:33:04.972]  - Condition #71: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.867] Packages needed by future strategies (n = 0): <none>
[10:33:04.973]  - Condition #72: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.867] {
[10:33:04.867]     {
[10:33:04.867]         {
[10:33:04.867]             ...future.startTime <- base::Sys.time()
[10:33:04.867]             {
[10:33:04.867]                 {
[10:33:04.867]                   {
[10:33:04.867]                     {
[10:33:04.867]                       base::local({
[10:33:04.867]                         has_future <- base::requireNamespace("future", 
[10:33:04.867]                           quietly = TRUE)
[10:33:04.867]                         if (has_future) {
[10:33:04.867]                           ns <- base::getNamespace("future")
[10:33:04.867]                           version <- ns[[".package"]][["version"]]
[10:33:04.867]                           if (is.null(version)) 
[10:33:04.867]                             version <- utils::packageVersion("future")
[10:33:04.867]                         }
[10:33:04.867]                         else {
[10:33:04.867]                           version <- NULL
[10:33:04.867]                         }
[10:33:04.867]                         if (!has_future || version < "1.8.0") {
[10:33:04.867]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:04.867]                             "", base::R.version$version.string), 
[10:33:04.867]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:04.867]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:04.867]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:04.867]                               "release", "version")], collapse = " "), 
[10:33:04.867]                             hostname = base::Sys.info()[["nodename"]])
[10:33:04.867]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:04.867]                             info)
[10:33:04.867]                           info <- base::paste(info, collapse = "; ")
[10:33:04.867]                           if (!has_future) {
[10:33:04.867]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:04.867]                               info)
[10:33:04.867]                           }
[10:33:04.867]                           else {
[10:33:04.867]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:04.867]                               info, version)
[10:33:04.867]                           }
[10:33:04.867]                           base::stop(msg)
[10:33:04.867]                         }
[10:33:04.867]                       })
[10:33:04.867]                     }
[10:33:04.867]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:04.867]                     base::options(mc.cores = 1L)
[10:33:04.867]                   }
[10:33:04.867]                   ...future.strategy.old <- future::plan("list")
[10:33:04.867]                   options(future.plan = NULL)
[10:33:04.867]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:04.867]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:04.867]                 }
[10:33:04.867]                 ...future.workdir <- getwd()
[10:33:04.867]             }
[10:33:04.867]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:04.867]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:04.867]         }
[10:33:04.867]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[10:33:04.867]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:04.867]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[10:33:04.867]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:04.867]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:04.867]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:04.867]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:04.867]             base::names(...future.oldOptions))
[10:33:04.867]     }
[10:33:04.867]     if (FALSE) {
[10:33:04.867]     }
[10:33:04.867]     else {
[10:33:04.867]         if (TRUE) {
[10:33:04.867]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:04.867]                 open = "w")
[10:33:04.867]         }
[10:33:04.867]         else {
[10:33:04.867]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:04.867]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:04.867]         }
[10:33:04.867]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:04.867]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:04.867]             base::sink(type = "output", split = FALSE)
[10:33:04.867]             base::close(...future.stdout)
[10:33:04.867]         }, add = TRUE)
[10:33:04.867]     }
[10:33:04.867]     ...future.frame <- base::sys.nframe()
[10:33:04.867]     ...future.conditions <- base::list()
[10:33:04.867]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:04.867]     if (FALSE) {
[10:33:04.867]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:04.867]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:04.867]     }
[10:33:04.867]     ...future.result <- base::tryCatch({
[10:33:04.867]         base::withCallingHandlers({
[10:33:04.867]             ...future.value <- base::withVisible(base::local({
[10:33:04.867]                 ...future.makeSendCondition <- base::local({
[10:33:04.867]                   sendCondition <- NULL
[10:33:04.867]                   function(frame = 1L) {
[10:33:04.867]                     if (is.function(sendCondition)) 
[10:33:04.867]                       return(sendCondition)
[10:33:04.867]                     ns <- getNamespace("parallel")
[10:33:04.867]                     if (exists("sendData", mode = "function", 
[10:33:04.867]                       envir = ns)) {
[10:33:04.867]                       parallel_sendData <- get("sendData", mode = "function", 
[10:33:04.867]                         envir = ns)
[10:33:04.867]                       envir <- sys.frame(frame)
[10:33:04.867]                       master <- NULL
[10:33:04.867]                       while (!identical(envir, .GlobalEnv) && 
[10:33:04.867]                         !identical(envir, emptyenv())) {
[10:33:04.867]                         if (exists("master", mode = "list", envir = envir, 
[10:33:04.867]                           inherits = FALSE)) {
[10:33:04.867]                           master <- get("master", mode = "list", 
[10:33:04.867]                             envir = envir, inherits = FALSE)
[10:33:04.867]                           if (inherits(master, c("SOCKnode", 
[10:33:04.867]                             "SOCK0node"))) {
[10:33:04.867]                             sendCondition <<- function(cond) {
[10:33:04.867]                               data <- list(type = "VALUE", value = cond, 
[10:33:04.867]                                 success = TRUE)
[10:33:04.867]                               parallel_sendData(master, data)
[10:33:04.867]                             }
[10:33:04.867]                             return(sendCondition)
[10:33:04.867]                           }
[10:33:04.867]                         }
[10:33:04.867]                         frame <- frame + 1L
[10:33:04.867]                         envir <- sys.frame(frame)
[10:33:04.867]                       }
[10:33:04.867]                     }
[10:33:04.867]                     sendCondition <<- function(cond) NULL
[10:33:04.867]                   }
[10:33:04.867]                 })
[10:33:04.867]                 withCallingHandlers({
[10:33:04.867]                   subset(data, x < 3)$y
[10:33:04.867]                 }, immediateCondition = function(cond) {
[10:33:04.867]                   sendCondition <- ...future.makeSendCondition()
[10:33:04.867]                   sendCondition(cond)
[10:33:04.867]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:04.867]                   {
[10:33:04.867]                     inherits <- base::inherits
[10:33:04.867]                     invokeRestart <- base::invokeRestart
[10:33:04.867]                     is.null <- base::is.null
[10:33:04.867]                     muffled <- FALSE
[10:33:04.867]                     if (inherits(cond, "message")) {
[10:33:04.867]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:04.867]                       if (muffled) 
[10:33:04.867]                         invokeRestart("muffleMessage")
[10:33:04.867]                     }
[10:33:04.867]                     else if (inherits(cond, "warning")) {
[10:33:04.867]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:04.867]                       if (muffled) 
[10:33:04.867]                         invokeRestart("muffleWarning")
[10:33:04.867]                     }
[10:33:04.867]                     else if (inherits(cond, "condition")) {
[10:33:04.867]                       if (!is.null(pattern)) {
[10:33:04.867]                         computeRestarts <- base::computeRestarts
[10:33:04.867]                         grepl <- base::grepl
[10:33:04.867]                         restarts <- computeRestarts(cond)
[10:33:04.867]                         for (restart in restarts) {
[10:33:04.867]                           name <- restart$name
[10:33:04.867]                           if (is.null(name)) 
[10:33:04.867]                             next
[10:33:04.867]                           if (!grepl(pattern, name)) 
[10:33:04.867]                             next
[10:33:04.867]                           invokeRestart(restart)
[10:33:04.867]                           muffled <- TRUE
[10:33:04.867]                           break
[10:33:04.867]                         }
[10:33:04.867]                       }
[10:33:04.867]                     }
[10:33:04.867]                     invisible(muffled)
[10:33:04.867]                   }
[10:33:04.867]                   muffleCondition(cond)
[10:33:04.867]                 })
[10:33:04.867]             }))
[10:33:04.867]             future::FutureResult(value = ...future.value$value, 
[10:33:04.867]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:04.867]                   ...future.rng), globalenv = if (FALSE) 
[10:33:04.867]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:04.867]                     ...future.globalenv.names))
[10:33:04.867]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:04.867]         }, condition = base::local({
[10:33:04.867]             c <- base::c
[10:33:04.867]             inherits <- base::inherits
[10:33:04.867]             invokeRestart <- base::invokeRestart
[10:33:04.867]             length <- base::length
[10:33:04.867]             list <- base::list
[10:33:04.867]             seq.int <- base::seq.int
[10:33:04.867]             signalCondition <- base::signalCondition
[10:33:04.867]             sys.calls <- base::sys.calls
[10:33:04.867]             `[[` <- base::`[[`
[10:33:04.867]             `+` <- base::`+`
[10:33:04.867]             `<<-` <- base::`<<-`
[10:33:04.867]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:04.867]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:04.867]                   3L)]
[10:33:04.867]             }
[10:33:04.867]             function(cond) {
[10:33:04.867]                 is_error <- inherits(cond, "error")
[10:33:04.867]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:04.867]                   NULL)
[10:33:04.867]                 if (is_error) {
[10:33:04.867]                   sessionInformation <- function() {
[10:33:04.867]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:04.867]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:04.867]                       search = base::search(), system = base::Sys.info())
[10:33:04.867]                   }
[10:33:04.867]                   ...future.conditions[[length(...future.conditions) + 
[10:33:04.867]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:04.867]                     cond$call), session = sessionInformation(), 
[10:33:04.867]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:04.867]                   signalCondition(cond)
[10:33:04.867]                 }
[10:33:04.867]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:04.867]                 "immediateCondition"))) {
[10:33:04.867]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:04.867]                   ...future.conditions[[length(...future.conditions) + 
[10:33:04.867]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:04.867]                   if (TRUE && !signal) {
[10:33:04.867]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:04.867]                     {
[10:33:04.867]                       inherits <- base::inherits
[10:33:04.867]                       invokeRestart <- base::invokeRestart
[10:33:04.867]                       is.null <- base::is.null
[10:33:04.867]                       muffled <- FALSE
[10:33:04.867]                       if (inherits(cond, "message")) {
[10:33:04.867]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:04.867]                         if (muffled) 
[10:33:04.867]                           invokeRestart("muffleMessage")
[10:33:04.867]                       }
[10:33:04.867]                       else if (inherits(cond, "warning")) {
[10:33:04.867]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:04.867]                         if (muffled) 
[10:33:04.867]                           invokeRestart("muffleWarning")
[10:33:04.867]                       }
[10:33:04.867]                       else if (inherits(cond, "condition")) {
[10:33:04.867]                         if (!is.null(pattern)) {
[10:33:04.867]                           computeRestarts <- base::computeRestarts
[10:33:04.867]                           grepl <- base::grepl
[10:33:04.867]                           restarts <- computeRestarts(cond)
[10:33:04.867]                           for (restart in restarts) {
[10:33:04.867]                             name <- restart$name
[10:33:04.867]                             if (is.null(name)) 
[10:33:04.867]                               next
[10:33:04.867]                             if (!grepl(pattern, name)) 
[10:33:04.867]                               next
[10:33:04.867]                             invokeRestart(restart)
[10:33:04.867]                             muffled <- TRUE
[10:33:04.867]                             break
[10:33:04.867]                           }
[10:33:04.867]                         }
[10:33:04.867]                       }
[10:33:04.867]                       invisible(muffled)
[10:33:04.867]                     }
[10:33:04.867]                     muffleCondition(cond, pattern = "^muffle")
[10:33:04.867]                   }
[10:33:04.867]                 }
[10:33:04.867]                 else {
[10:33:04.867]                   if (TRUE) {
[10:33:04.867]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:04.867]                     {
[10:33:04.867]                       inherits <- base::inherits
[10:33:04.867]                       invokeRestart <- base::invokeRestart
[10:33:04.867]                       is.null <- base::is.null
[10:33:04.867]                       muffled <- FALSE
[10:33:04.867]                       if (inherits(cond, "message")) {
[10:33:04.867]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:04.867]                         if (muffled) 
[10:33:04.867]                           invokeRestart("muffleMessage")
[10:33:04.867]                       }
[10:33:04.867]                       else if (inherits(cond, "warning")) {
[10:33:04.867]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:04.867]                         if (muffled) 
[10:33:04.867]                           invokeRestart("muffleWarning")
[10:33:04.867]                       }
[10:33:04.867]                       else if (inherits(cond, "condition")) {
[10:33:04.867]                         if (!is.null(pattern)) {
[10:33:04.867]                           computeRestarts <- base::computeRestarts
[10:33:04.867]                           grepl <- base::grepl
[10:33:04.867]                           restarts <- computeRestarts(cond)
[10:33:04.867]                           for (restart in restarts) {
[10:33:04.867]                             name <- restart$name
[10:33:04.867]                             if (is.null(name)) 
[10:33:04.867]                               next
[10:33:04.867]                             if (!grepl(pattern, name)) 
[10:33:04.867]                               next
[10:33:04.867]                             invokeRestart(restart)
[10:33:04.867]                             muffled <- TRUE
[10:33:04.867]                             break
[10:33:04.867]                           }
[10:33:04.867]                         }
[10:33:04.867]                       }
[10:33:04.867]                       invisible(muffled)
[10:33:04.867]                     }
[10:33:04.867]                     muffleCondition(cond, pattern = "^muffle")
[10:33:04.867]                   }
[10:33:04.867]                 }
[10:33:04.867]             }
[10:33:04.867]         }))
[10:33:04.867]     }, error = function(ex) {
[10:33:04.867]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:04.867]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:04.867]                 ...future.rng), started = ...future.startTime, 
[10:33:04.867]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:04.867]             version = "1.8"), class = "FutureResult")
[10:33:04.867]     }, finally = {
[10:33:04.867]         if (!identical(...future.workdir, getwd())) 
[10:33:04.867]             setwd(...future.workdir)
[10:33:04.867]         {
[10:33:04.867]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:04.867]                 ...future.oldOptions$nwarnings <- NULL
[10:33:04.867]             }
[10:33:04.867]             base::options(...future.oldOptions)
[10:33:04.867]             if (.Platform$OS.type == "windows") {
[10:33:04.867]                 old_names <- names(...future.oldEnvVars)
[10:33:04.867]                 envs <- base::Sys.getenv()
[10:33:04.867]                 names <- names(envs)
[10:33:04.867]                 common <- intersect(names, old_names)
[10:33:04.867]                 added <- setdiff(names, old_names)
[10:33:04.867]                 removed <- setdiff(old_names, names)
[10:33:04.867]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:04.867]                   envs[common]]
[10:33:04.867]                 NAMES <- toupper(changed)
[10:33:04.867]                 args <- list()
[10:33:04.867]                 for (kk in seq_along(NAMES)) {
[10:33:04.867]                   name <- changed[[kk]]
[10:33:04.867]                   NAME <- NAMES[[kk]]
[10:33:04.867]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:04.867]                     next
[10:33:04.867]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:04.867]                 }
[10:33:04.867]                 NAMES <- toupper(added)
[10:33:04.867]                 for (kk in seq_along(NAMES)) {
[10:33:04.867]                   name <- added[[kk]]
[10:33:04.867]                   NAME <- NAMES[[kk]]
[10:33:04.867]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:04.867]                     next
[10:33:04.867]                   args[[name]] <- ""
[10:33:04.867]                 }
[10:33:04.867]                 NAMES <- toupper(removed)
[10:33:04.867]                 for (kk in seq_along(NAMES)) {
[10:33:04.867]                   name <- removed[[kk]]
[10:33:04.867]                   NAME <- NAMES[[kk]]
[10:33:04.867]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:04.867]                     next
[10:33:04.867]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:04.867]                 }
[10:33:04.867]                 if (length(args) > 0) 
[10:33:04.867]                   base::do.call(base::Sys.setenv, args = args)
[10:33:04.867]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:04.867]             }
[10:33:04.867]             else {
[10:33:04.867]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:04.867]             }
[10:33:04.867]             {
[10:33:04.867]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:04.867]                   0L) {
[10:33:04.867]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:04.867]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:04.867]                   base::options(opts)
[10:33:04.867]                 }
[10:33:04.867]                 {
[10:33:04.867]                   {
[10:33:04.867]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:04.867]                     NULL
[10:33:04.867]                   }
[10:33:04.867]                   options(future.plan = NULL)
[10:33:04.867]                   if (is.na(NA_character_)) 
[10:33:04.867]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:04.867]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:04.867]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:04.867]                     .init = FALSE)
[10:33:04.867]                 }
[10:33:04.867]             }
[10:33:04.867]         }
[10:33:04.867]     })
[10:33:04.867]     if (TRUE) {
[10:33:04.867]         base::sink(type = "output", split = FALSE)
[10:33:04.867]         if (TRUE) {
[10:33:04.867]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:04.867]         }
[10:33:04.867]         else {
[10:33:04.867]             ...future.result["stdout"] <- base::list(NULL)
[10:33:04.867]         }
[10:33:04.867]         base::close(...future.stdout)
[10:33:04.867]         ...future.stdout <- NULL
[10:33:04.867]     }
[10:33:04.867]     ...future.result$conditions <- ...future.conditions
[10:33:04.867]     ...future.result$finished <- base::Sys.time()
[10:33:04.867]     ...future.result
[10:33:04.867] }
[10:33:04.973]  - Condition #73: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.919] Exporting 1 global objects (160 bytes) to cluster node #1 ...
[10:33:04.973]  - Condition #74: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.919] Exporting ‘data’ (160 bytes) to cluster node #1 ...
[10:33:04.973]  - Condition #75: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.922] Exporting ‘data’ (160 bytes) to cluster node #1 ... DONE
[10:33:04.973]  - Condition #76: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.922] Exporting 1 global objects (160 bytes) to cluster node #1 ... DONE
[10:33:04.973]  - Condition #77: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.923] MultisessionFuture started
[10:33:04.973]  - Condition #78: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.923] - Launch lazy future ... done
[10:33:04.974]  - Condition #79: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.923] run() for ‘MultisessionFuture’ ... done
[10:33:04.974]  - Condition #80: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.923] result() for ClusterFuture ...
[10:33:04.974]  - Condition #81: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.923] receiveMessageFromWorker() for ClusterFuture ...
[10:33:04.974]  - Condition #82: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.923] - Validating connection of MultisessionFuture
[10:33:04.974]  - Condition #83: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.956] - received message: FutureResult
[10:33:04.974]  - Condition #84: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.957] - Received FutureResult
[10:33:04.974]  - Condition #85: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.957] - Erased future from FutureRegistry
[10:33:04.975]  - Condition #86: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.957] result() for ClusterFuture ...
[10:33:04.975]  - Condition #87: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.957] - result already collected: FutureResult
[10:33:04.975]  - Condition #88: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.957] result() for ClusterFuture ... done
[10:33:04.975]  - Condition #89: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.957] receiveMessageFromWorker() for ClusterFuture ... done
[10:33:04.975]  - Condition #90: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.957] result() for ClusterFuture ... done
[10:33:04.975]  - Condition #91: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.958] result() for ClusterFuture ...
[10:33:04.975]  - Condition #92: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.958] - result already collected: FutureResult
[10:33:04.975]  - Condition #93: ‘simpleMessage’, ‘message’, ‘condition’
[10:33:04.958] result() for ClusterFuture ... done
[10:33:04.976] signalConditions() ... done
- Strategy: multisession ... DONE
> 
> 
> message("*** Globals w/ non-standard evaluation (NSE) ... DONE")
*** Globals w/ non-standard evaluation (NSE) ... DONE
> 
> source("incl/end.R")
[10:33:04.976] plan(): Setting new future strategy stack:
[10:33:04.976] List of future strategies:
[10:33:04.976] 1. FutureStrategy:
[10:33:04.976]    - args: function (..., envir = parent.frame())
[10:33:04.976]    - tweaked: FALSE
[10:33:04.976]    - call: future::plan(oplan)
[10:33:04.977] plan(): nbrOfWorkers() = 1
> 
