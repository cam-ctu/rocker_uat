
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:36:47.275] plan(): Setting new future strategy stack:
[13:36:47.275] List of future strategies:
[13:36:47.275] 1. sequential:
[13:36:47.275]    - args: function (..., envir = parent.frame())
[13:36:47.275]    - tweaked: FALSE
[13:36:47.275]    - call: future::plan("sequential")
[13:36:47.289] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** Globals w/ non-standard evaluation (NSE) ...")
*** Globals w/ non-standard evaluation (NSE) ...
> 
> data <- data.frame(x = 1:5, y = 1:5)
> v0 <- subset(data, x < 3)$y
> 
> for (strategy in supportedStrategies()) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("- Strategy: %s ...", strategy))
+   
+   plan(strategy)
+ 
+   ## Assert option is passed on to future
+   options(future.globals.onMissing = "error")
+   opt1 %<-% getOption("future.globals.onMissing")
+   stopifnot(identical(opt1, "error"))
+ 
+   options(future.globals.onMissing = "ignore")
+   opt2 %<-% getOption("future.globals.onMissing")
+   stopifnot(identical(opt2, "ignore"))
+ 
+   options(future.globals.onMissing = "error")
+   res <- try({ v1 %<-% subset(data, x < 3)$y }, silent = TRUE)
+   stopifnot(inherits(res, "try-error"))
+ 
+   options(future.globals.onMissing = "ignore")
+   v2 %<-% subset(data, x < 3)$y
+   stopifnot(identical(v2, v0))
+ 
+   ## Nested futures (requires option is passed on to future)
+   plan(list(sequential, strategy))
+   options(future.globals.onMissing = "ignore")
+   v3 %<-% {
+     a %<-% subset(data, x < 3)$y
+     a
+   } %lazy% TRUE
+   stopifnot(identical(v3, v0))
+ 
+   message(sprintf("- Strategy: %s ... DONE", strategy))
+ }
- Strategy: sequential ...
[13:36:47.318] plan(): Setting new future strategy stack:
[13:36:47.318] List of future strategies:
[13:36:47.318] 1. sequential:
[13:36:47.318]    - args: function (..., envir = parent.frame())
[13:36:47.318]    - tweaked: FALSE
[13:36:47.318]    - call: plan(strategy)
[13:36:47.331] plan(): nbrOfWorkers() = 1
[13:36:47.332] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:47.333] Searching for globals...
[13:36:47.337] - globals found: [1] ‘getOption’
[13:36:47.337] Searching for globals ... DONE
[13:36:47.337] Resolving globals: FALSE
[13:36:47.338] 
[13:36:47.338] 
[13:36:47.338] getGlobalsAndPackages() ... DONE
[13:36:47.339] run() for ‘Future’ ...
[13:36:47.339] - state: ‘created’
[13:36:47.339] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:47.339] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:47.339] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:47.339]   - Field: ‘label’
[13:36:47.340]   - Field: ‘local’
[13:36:47.340]   - Field: ‘owner’
[13:36:47.340]   - Field: ‘envir’
[13:36:47.340]   - Field: ‘packages’
[13:36:47.340]   - Field: ‘gc’
[13:36:47.340]   - Field: ‘conditions’
[13:36:47.340]   - Field: ‘expr’
[13:36:47.340]   - Field: ‘uuid’
[13:36:47.340]   - Field: ‘seed’
[13:36:47.340]   - Field: ‘version’
[13:36:47.340]   - Field: ‘result’
[13:36:47.341]   - Field: ‘asynchronous’
[13:36:47.341]   - Field: ‘calls’
[13:36:47.341]   - Field: ‘globals’
[13:36:47.341]   - Field: ‘stdout’
[13:36:47.341]   - Field: ‘earlySignal’
[13:36:47.341]   - Field: ‘lazy’
[13:36:47.341]   - Field: ‘state’
[13:36:47.341] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:47.341] - Launch lazy future ...
[13:36:47.342] Packages needed by the future expression (n = 0): <none>
[13:36:47.342] Packages needed by future strategies (n = 0): <none>
[13:36:47.343] {
[13:36:47.343]     {
[13:36:47.343]         {
[13:36:47.343]             ...future.startTime <- base::Sys.time()
[13:36:47.343]             {
[13:36:47.343]                 {
[13:36:47.343]                   {
[13:36:47.343]                     base::local({
[13:36:47.343]                       has_future <- base::requireNamespace("future", 
[13:36:47.343]                         quietly = TRUE)
[13:36:47.343]                       if (has_future) {
[13:36:47.343]                         ns <- base::getNamespace("future")
[13:36:47.343]                         version <- ns[[".package"]][["version"]]
[13:36:47.343]                         if (is.null(version)) 
[13:36:47.343]                           version <- utils::packageVersion("future")
[13:36:47.343]                       }
[13:36:47.343]                       else {
[13:36:47.343]                         version <- NULL
[13:36:47.343]                       }
[13:36:47.343]                       if (!has_future || version < "1.8.0") {
[13:36:47.343]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:47.343]                           "", base::R.version$version.string), 
[13:36:47.343]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:47.343]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:47.343]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:47.343]                             "release", "version")], collapse = " "), 
[13:36:47.343]                           hostname = base::Sys.info()[["nodename"]])
[13:36:47.343]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:47.343]                           info)
[13:36:47.343]                         info <- base::paste(info, collapse = "; ")
[13:36:47.343]                         if (!has_future) {
[13:36:47.343]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:47.343]                             info)
[13:36:47.343]                         }
[13:36:47.343]                         else {
[13:36:47.343]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:47.343]                             info, version)
[13:36:47.343]                         }
[13:36:47.343]                         base::stop(msg)
[13:36:47.343]                       }
[13:36:47.343]                     })
[13:36:47.343]                   }
[13:36:47.343]                   ...future.strategy.old <- future::plan("list")
[13:36:47.343]                   options(future.plan = NULL)
[13:36:47.343]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:47.343]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:47.343]                 }
[13:36:47.343]                 ...future.workdir <- getwd()
[13:36:47.343]             }
[13:36:47.343]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:47.343]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:47.343]         }
[13:36:47.343]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:36:47.343]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:47.343]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:36:47.343]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:47.343]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:47.343]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:47.343]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:47.343]             base::names(...future.oldOptions))
[13:36:47.343]     }
[13:36:47.343]     if (FALSE) {
[13:36:47.343]     }
[13:36:47.343]     else {
[13:36:47.343]         if (TRUE) {
[13:36:47.343]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:47.343]                 open = "w")
[13:36:47.343]         }
[13:36:47.343]         else {
[13:36:47.343]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:47.343]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:47.343]         }
[13:36:47.343]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:47.343]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:47.343]             base::sink(type = "output", split = FALSE)
[13:36:47.343]             base::close(...future.stdout)
[13:36:47.343]         }, add = TRUE)
[13:36:47.343]     }
[13:36:47.343]     ...future.frame <- base::sys.nframe()
[13:36:47.343]     ...future.conditions <- base::list()
[13:36:47.343]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:47.343]     if (FALSE) {
[13:36:47.343]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:47.343]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:47.343]     }
[13:36:47.343]     ...future.result <- base::tryCatch({
[13:36:47.343]         base::withCallingHandlers({
[13:36:47.343]             ...future.value <- base::withVisible(base::local(getOption("future.globals.onMissing")))
[13:36:47.343]             future::FutureResult(value = ...future.value$value, 
[13:36:47.343]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:47.343]                   ...future.rng), globalenv = if (FALSE) 
[13:36:47.343]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:47.343]                     ...future.globalenv.names))
[13:36:47.343]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:47.343]         }, condition = base::local({
[13:36:47.343]             c <- base::c
[13:36:47.343]             inherits <- base::inherits
[13:36:47.343]             invokeRestart <- base::invokeRestart
[13:36:47.343]             length <- base::length
[13:36:47.343]             list <- base::list
[13:36:47.343]             seq.int <- base::seq.int
[13:36:47.343]             signalCondition <- base::signalCondition
[13:36:47.343]             sys.calls <- base::sys.calls
[13:36:47.343]             `[[` <- base::`[[`
[13:36:47.343]             `+` <- base::`+`
[13:36:47.343]             `<<-` <- base::`<<-`
[13:36:47.343]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:47.343]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:47.343]                   3L)]
[13:36:47.343]             }
[13:36:47.343]             function(cond) {
[13:36:47.343]                 is_error <- inherits(cond, "error")
[13:36:47.343]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:47.343]                   NULL)
[13:36:47.343]                 if (is_error) {
[13:36:47.343]                   sessionInformation <- function() {
[13:36:47.343]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:47.343]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:47.343]                       search = base::search(), system = base::Sys.info())
[13:36:47.343]                   }
[13:36:47.343]                   ...future.conditions[[length(...future.conditions) + 
[13:36:47.343]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:47.343]                     cond$call), session = sessionInformation(), 
[13:36:47.343]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:47.343]                   signalCondition(cond)
[13:36:47.343]                 }
[13:36:47.343]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:47.343]                 "immediateCondition"))) {
[13:36:47.343]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:47.343]                   ...future.conditions[[length(...future.conditions) + 
[13:36:47.343]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:47.343]                   if (TRUE && !signal) {
[13:36:47.343]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:47.343]                     {
[13:36:47.343]                       inherits <- base::inherits
[13:36:47.343]                       invokeRestart <- base::invokeRestart
[13:36:47.343]                       is.null <- base::is.null
[13:36:47.343]                       muffled <- FALSE
[13:36:47.343]                       if (inherits(cond, "message")) {
[13:36:47.343]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:47.343]                         if (muffled) 
[13:36:47.343]                           invokeRestart("muffleMessage")
[13:36:47.343]                       }
[13:36:47.343]                       else if (inherits(cond, "warning")) {
[13:36:47.343]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:47.343]                         if (muffled) 
[13:36:47.343]                           invokeRestart("muffleWarning")
[13:36:47.343]                       }
[13:36:47.343]                       else if (inherits(cond, "condition")) {
[13:36:47.343]                         if (!is.null(pattern)) {
[13:36:47.343]                           computeRestarts <- base::computeRestarts
[13:36:47.343]                           grepl <- base::grepl
[13:36:47.343]                           restarts <- computeRestarts(cond)
[13:36:47.343]                           for (restart in restarts) {
[13:36:47.343]                             name <- restart$name
[13:36:47.343]                             if (is.null(name)) 
[13:36:47.343]                               next
[13:36:47.343]                             if (!grepl(pattern, name)) 
[13:36:47.343]                               next
[13:36:47.343]                             invokeRestart(restart)
[13:36:47.343]                             muffled <- TRUE
[13:36:47.343]                             break
[13:36:47.343]                           }
[13:36:47.343]                         }
[13:36:47.343]                       }
[13:36:47.343]                       invisible(muffled)
[13:36:47.343]                     }
[13:36:47.343]                     muffleCondition(cond, pattern = "^muffle")
[13:36:47.343]                   }
[13:36:47.343]                 }
[13:36:47.343]                 else {
[13:36:47.343]                   if (TRUE) {
[13:36:47.343]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:47.343]                     {
[13:36:47.343]                       inherits <- base::inherits
[13:36:47.343]                       invokeRestart <- base::invokeRestart
[13:36:47.343]                       is.null <- base::is.null
[13:36:47.343]                       muffled <- FALSE
[13:36:47.343]                       if (inherits(cond, "message")) {
[13:36:47.343]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:47.343]                         if (muffled) 
[13:36:47.343]                           invokeRestart("muffleMessage")
[13:36:47.343]                       }
[13:36:47.343]                       else if (inherits(cond, "warning")) {
[13:36:47.343]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:47.343]                         if (muffled) 
[13:36:47.343]                           invokeRestart("muffleWarning")
[13:36:47.343]                       }
[13:36:47.343]                       else if (inherits(cond, "condition")) {
[13:36:47.343]                         if (!is.null(pattern)) {
[13:36:47.343]                           computeRestarts <- base::computeRestarts
[13:36:47.343]                           grepl <- base::grepl
[13:36:47.343]                           restarts <- computeRestarts(cond)
[13:36:47.343]                           for (restart in restarts) {
[13:36:47.343]                             name <- restart$name
[13:36:47.343]                             if (is.null(name)) 
[13:36:47.343]                               next
[13:36:47.343]                             if (!grepl(pattern, name)) 
[13:36:47.343]                               next
[13:36:47.343]                             invokeRestart(restart)
[13:36:47.343]                             muffled <- TRUE
[13:36:47.343]                             break
[13:36:47.343]                           }
[13:36:47.343]                         }
[13:36:47.343]                       }
[13:36:47.343]                       invisible(muffled)
[13:36:47.343]                     }
[13:36:47.343]                     muffleCondition(cond, pattern = "^muffle")
[13:36:47.343]                   }
[13:36:47.343]                 }
[13:36:47.343]             }
[13:36:47.343]         }))
[13:36:47.343]     }, error = function(ex) {
[13:36:47.343]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:47.343]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:47.343]                 ...future.rng), started = ...future.startTime, 
[13:36:47.343]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:47.343]             version = "1.8"), class = "FutureResult")
[13:36:47.343]     }, finally = {
[13:36:47.343]         if (!identical(...future.workdir, getwd())) 
[13:36:47.343]             setwd(...future.workdir)
[13:36:47.343]         {
[13:36:47.343]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:47.343]                 ...future.oldOptions$nwarnings <- NULL
[13:36:47.343]             }
[13:36:47.343]             base::options(...future.oldOptions)
[13:36:47.343]             if (.Platform$OS.type == "windows") {
[13:36:47.343]                 old_names <- names(...future.oldEnvVars)
[13:36:47.343]                 envs <- base::Sys.getenv()
[13:36:47.343]                 names <- names(envs)
[13:36:47.343]                 common <- intersect(names, old_names)
[13:36:47.343]                 added <- setdiff(names, old_names)
[13:36:47.343]                 removed <- setdiff(old_names, names)
[13:36:47.343]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:47.343]                   envs[common]]
[13:36:47.343]                 NAMES <- toupper(changed)
[13:36:47.343]                 args <- list()
[13:36:47.343]                 for (kk in seq_along(NAMES)) {
[13:36:47.343]                   name <- changed[[kk]]
[13:36:47.343]                   NAME <- NAMES[[kk]]
[13:36:47.343]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:47.343]                     next
[13:36:47.343]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:47.343]                 }
[13:36:47.343]                 NAMES <- toupper(added)
[13:36:47.343]                 for (kk in seq_along(NAMES)) {
[13:36:47.343]                   name <- added[[kk]]
[13:36:47.343]                   NAME <- NAMES[[kk]]
[13:36:47.343]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:47.343]                     next
[13:36:47.343]                   args[[name]] <- ""
[13:36:47.343]                 }
[13:36:47.343]                 NAMES <- toupper(removed)
[13:36:47.343]                 for (kk in seq_along(NAMES)) {
[13:36:47.343]                   name <- removed[[kk]]
[13:36:47.343]                   NAME <- NAMES[[kk]]
[13:36:47.343]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:47.343]                     next
[13:36:47.343]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:47.343]                 }
[13:36:47.343]                 if (length(args) > 0) 
[13:36:47.343]                   base::do.call(base::Sys.setenv, args = args)
[13:36:47.343]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:47.343]             }
[13:36:47.343]             else {
[13:36:47.343]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:47.343]             }
[13:36:47.343]             {
[13:36:47.343]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:47.343]                   0L) {
[13:36:47.343]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:47.343]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:47.343]                   base::options(opts)
[13:36:47.343]                 }
[13:36:47.343]                 {
[13:36:47.343]                   {
[13:36:47.343]                     NULL
[13:36:47.343]                     RNGkind("Mersenne-Twister")
[13:36:47.343]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:47.343]                       inherits = FALSE)
[13:36:47.343]                   }
[13:36:47.343]                   options(future.plan = NULL)
[13:36:47.343]                   if (is.na(NA_character_)) 
[13:36:47.343]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:47.343]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:47.343]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:47.343]                     .init = FALSE)
[13:36:47.343]                 }
[13:36:47.343]             }
[13:36:47.343]         }
[13:36:47.343]     })
[13:36:47.343]     if (TRUE) {
[13:36:47.343]         base::sink(type = "output", split = FALSE)
[13:36:47.343]         if (TRUE) {
[13:36:47.343]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:47.343]         }
[13:36:47.343]         else {
[13:36:47.343]             ...future.result["stdout"] <- base::list(NULL)
[13:36:47.343]         }
[13:36:47.343]         base::close(...future.stdout)
[13:36:47.343]         ...future.stdout <- NULL
[13:36:47.343]     }
[13:36:47.343]     ...future.result$conditions <- ...future.conditions
[13:36:47.343]     ...future.result$finished <- base::Sys.time()
[13:36:47.343]     ...future.result
[13:36:47.343] }
[13:36:47.345] plan(): Setting new future strategy stack:
[13:36:47.345] List of future strategies:
[13:36:47.345] 1. sequential:
[13:36:47.345]    - args: function (..., envir = parent.frame())
[13:36:47.345]    - tweaked: FALSE
[13:36:47.345]    - call: NULL
[13:36:47.345] plan(): nbrOfWorkers() = 1
[13:36:47.346] plan(): Setting new future strategy stack:
[13:36:47.347] List of future strategies:
[13:36:47.347] 1. sequential:
[13:36:47.347]    - args: function (..., envir = parent.frame())
[13:36:47.347]    - tweaked: FALSE
[13:36:47.347]    - call: plan(strategy)
[13:36:47.347] plan(): nbrOfWorkers() = 1
[13:36:47.347] SequentialFuture started (and completed)
[13:36:47.348] - Launch lazy future ... done
[13:36:47.348] run() for ‘SequentialFuture’ ... done
[13:36:47.348] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[13:36:47.349] Searching for globals...
[13:36:47.349] - globals found: [1] ‘getOption’
[13:36:47.349] Searching for globals ... DONE
[13:36:47.349] Resolving globals: FALSE
[13:36:47.349] 
[13:36:47.349] 
[13:36:47.350] getGlobalsAndPackages() ... DONE
[13:36:47.350] run() for ‘Future’ ...
[13:36:47.350] - state: ‘created’
[13:36:47.350] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:47.350] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:47.350] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:47.351]   - Field: ‘label’
[13:36:47.351]   - Field: ‘local’
[13:36:47.351]   - Field: ‘owner’
[13:36:47.351]   - Field: ‘envir’
[13:36:47.351]   - Field: ‘packages’
[13:36:47.351]   - Field: ‘gc’
[13:36:47.351]   - Field: ‘conditions’
[13:36:47.351]   - Field: ‘expr’
[13:36:47.351]   - Field: ‘uuid’
[13:36:47.351]   - Field: ‘seed’
[13:36:47.351]   - Field: ‘version’
[13:36:47.352]   - Field: ‘result’
[13:36:47.352]   - Field: ‘asynchronous’
[13:36:47.352]   - Field: ‘calls’
[13:36:47.352]   - Field: ‘globals’
[13:36:47.352]   - Field: ‘stdout’
[13:36:47.352]   - Field: ‘earlySignal’
[13:36:47.352]   - Field: ‘lazy’
[13:36:47.352]   - Field: ‘state’
[13:36:47.352] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:47.352] - Launch lazy future ...
[13:36:47.352] Packages needed by the future expression (n = 0): <none>
[13:36:47.353] Packages needed by future strategies (n = 0): <none>
[13:36:47.353] {
[13:36:47.353]     {
[13:36:47.353]         {
[13:36:47.353]             ...future.startTime <- base::Sys.time()
[13:36:47.353]             {
[13:36:47.353]                 {
[13:36:47.353]                   {
[13:36:47.353]                     base::local({
[13:36:47.353]                       has_future <- base::requireNamespace("future", 
[13:36:47.353]                         quietly = TRUE)
[13:36:47.353]                       if (has_future) {
[13:36:47.353]                         ns <- base::getNamespace("future")
[13:36:47.353]                         version <- ns[[".package"]][["version"]]
[13:36:47.353]                         if (is.null(version)) 
[13:36:47.353]                           version <- utils::packageVersion("future")
[13:36:47.353]                       }
[13:36:47.353]                       else {
[13:36:47.353]                         version <- NULL
[13:36:47.353]                       }
[13:36:47.353]                       if (!has_future || version < "1.8.0") {
[13:36:47.353]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:47.353]                           "", base::R.version$version.string), 
[13:36:47.353]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:47.353]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:47.353]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:47.353]                             "release", "version")], collapse = " "), 
[13:36:47.353]                           hostname = base::Sys.info()[["nodename"]])
[13:36:47.353]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:47.353]                           info)
[13:36:47.353]                         info <- base::paste(info, collapse = "; ")
[13:36:47.353]                         if (!has_future) {
[13:36:47.353]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:47.353]                             info)
[13:36:47.353]                         }
[13:36:47.353]                         else {
[13:36:47.353]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:47.353]                             info, version)
[13:36:47.353]                         }
[13:36:47.353]                         base::stop(msg)
[13:36:47.353]                       }
[13:36:47.353]                     })
[13:36:47.353]                   }
[13:36:47.353]                   ...future.strategy.old <- future::plan("list")
[13:36:47.353]                   options(future.plan = NULL)
[13:36:47.353]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:47.353]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:47.353]                 }
[13:36:47.353]                 ...future.workdir <- getwd()
[13:36:47.353]             }
[13:36:47.353]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:47.353]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:47.353]         }
[13:36:47.353]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[13:36:47.353]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:47.353]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[13:36:47.353]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:47.353]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:47.353]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:47.353]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:47.353]             base::names(...future.oldOptions))
[13:36:47.353]     }
[13:36:47.353]     if (FALSE) {
[13:36:47.353]     }
[13:36:47.353]     else {
[13:36:47.353]         if (TRUE) {
[13:36:47.353]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:47.353]                 open = "w")
[13:36:47.353]         }
[13:36:47.353]         else {
[13:36:47.353]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:47.353]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:47.353]         }
[13:36:47.353]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:47.353]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:47.353]             base::sink(type = "output", split = FALSE)
[13:36:47.353]             base::close(...future.stdout)
[13:36:47.353]         }, add = TRUE)
[13:36:47.353]     }
[13:36:47.353]     ...future.frame <- base::sys.nframe()
[13:36:47.353]     ...future.conditions <- base::list()
[13:36:47.353]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:47.353]     if (FALSE) {
[13:36:47.353]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:47.353]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:47.353]     }
[13:36:47.353]     ...future.result <- base::tryCatch({
[13:36:47.353]         base::withCallingHandlers({
[13:36:47.353]             ...future.value <- base::withVisible(base::local(getOption("future.globals.onMissing")))
[13:36:47.353]             future::FutureResult(value = ...future.value$value, 
[13:36:47.353]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:47.353]                   ...future.rng), globalenv = if (FALSE) 
[13:36:47.353]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:47.353]                     ...future.globalenv.names))
[13:36:47.353]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:47.353]         }, condition = base::local({
[13:36:47.353]             c <- base::c
[13:36:47.353]             inherits <- base::inherits
[13:36:47.353]             invokeRestart <- base::invokeRestart
[13:36:47.353]             length <- base::length
[13:36:47.353]             list <- base::list
[13:36:47.353]             seq.int <- base::seq.int
[13:36:47.353]             signalCondition <- base::signalCondition
[13:36:47.353]             sys.calls <- base::sys.calls
[13:36:47.353]             `[[` <- base::`[[`
[13:36:47.353]             `+` <- base::`+`
[13:36:47.353]             `<<-` <- base::`<<-`
[13:36:47.353]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:47.353]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:47.353]                   3L)]
[13:36:47.353]             }
[13:36:47.353]             function(cond) {
[13:36:47.353]                 is_error <- inherits(cond, "error")
[13:36:47.353]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:47.353]                   NULL)
[13:36:47.353]                 if (is_error) {
[13:36:47.353]                   sessionInformation <- function() {
[13:36:47.353]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:47.353]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:47.353]                       search = base::search(), system = base::Sys.info())
[13:36:47.353]                   }
[13:36:47.353]                   ...future.conditions[[length(...future.conditions) + 
[13:36:47.353]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:47.353]                     cond$call), session = sessionInformation(), 
[13:36:47.353]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:47.353]                   signalCondition(cond)
[13:36:47.353]                 }
[13:36:47.353]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:47.353]                 "immediateCondition"))) {
[13:36:47.353]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:47.353]                   ...future.conditions[[length(...future.conditions) + 
[13:36:47.353]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:47.353]                   if (TRUE && !signal) {
[13:36:47.353]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:47.353]                     {
[13:36:47.353]                       inherits <- base::inherits
[13:36:47.353]                       invokeRestart <- base::invokeRestart
[13:36:47.353]                       is.null <- base::is.null
[13:36:47.353]                       muffled <- FALSE
[13:36:47.353]                       if (inherits(cond, "message")) {
[13:36:47.353]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:47.353]                         if (muffled) 
[13:36:47.353]                           invokeRestart("muffleMessage")
[13:36:47.353]                       }
[13:36:47.353]                       else if (inherits(cond, "warning")) {
[13:36:47.353]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:47.353]                         if (muffled) 
[13:36:47.353]                           invokeRestart("muffleWarning")
[13:36:47.353]                       }
[13:36:47.353]                       else if (inherits(cond, "condition")) {
[13:36:47.353]                         if (!is.null(pattern)) {
[13:36:47.353]                           computeRestarts <- base::computeRestarts
[13:36:47.353]                           grepl <- base::grepl
[13:36:47.353]                           restarts <- computeRestarts(cond)
[13:36:47.353]                           for (restart in restarts) {
[13:36:47.353]                             name <- restart$name
[13:36:47.353]                             if (is.null(name)) 
[13:36:47.353]                               next
[13:36:47.353]                             if (!grepl(pattern, name)) 
[13:36:47.353]                               next
[13:36:47.353]                             invokeRestart(restart)
[13:36:47.353]                             muffled <- TRUE
[13:36:47.353]                             break
[13:36:47.353]                           }
[13:36:47.353]                         }
[13:36:47.353]                       }
[13:36:47.353]                       invisible(muffled)
[13:36:47.353]                     }
[13:36:47.353]                     muffleCondition(cond, pattern = "^muffle")
[13:36:47.353]                   }
[13:36:47.353]                 }
[13:36:47.353]                 else {
[13:36:47.353]                   if (TRUE) {
[13:36:47.353]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:47.353]                     {
[13:36:47.353]                       inherits <- base::inherits
[13:36:47.353]                       invokeRestart <- base::invokeRestart
[13:36:47.353]                       is.null <- base::is.null
[13:36:47.353]                       muffled <- FALSE
[13:36:47.353]                       if (inherits(cond, "message")) {
[13:36:47.353]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:47.353]                         if (muffled) 
[13:36:47.353]                           invokeRestart("muffleMessage")
[13:36:47.353]                       }
[13:36:47.353]                       else if (inherits(cond, "warning")) {
[13:36:47.353]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:47.353]                         if (muffled) 
[13:36:47.353]                           invokeRestart("muffleWarning")
[13:36:47.353]                       }
[13:36:47.353]                       else if (inherits(cond, "condition")) {
[13:36:47.353]                         if (!is.null(pattern)) {
[13:36:47.353]                           computeRestarts <- base::computeRestarts
[13:36:47.353]                           grepl <- base::grepl
[13:36:47.353]                           restarts <- computeRestarts(cond)
[13:36:47.353]                           for (restart in restarts) {
[13:36:47.353]                             name <- restart$name
[13:36:47.353]                             if (is.null(name)) 
[13:36:47.353]                               next
[13:36:47.353]                             if (!grepl(pattern, name)) 
[13:36:47.353]                               next
[13:36:47.353]                             invokeRestart(restart)
[13:36:47.353]                             muffled <- TRUE
[13:36:47.353]                             break
[13:36:47.353]                           }
[13:36:47.353]                         }
[13:36:47.353]                       }
[13:36:47.353]                       invisible(muffled)
[13:36:47.353]                     }
[13:36:47.353]                     muffleCondition(cond, pattern = "^muffle")
[13:36:47.353]                   }
[13:36:47.353]                 }
[13:36:47.353]             }
[13:36:47.353]         }))
[13:36:47.353]     }, error = function(ex) {
[13:36:47.353]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:47.353]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:47.353]                 ...future.rng), started = ...future.startTime, 
[13:36:47.353]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:47.353]             version = "1.8"), class = "FutureResult")
[13:36:47.353]     }, finally = {
[13:36:47.353]         if (!identical(...future.workdir, getwd())) 
[13:36:47.353]             setwd(...future.workdir)
[13:36:47.353]         {
[13:36:47.353]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:47.353]                 ...future.oldOptions$nwarnings <- NULL
[13:36:47.353]             }
[13:36:47.353]             base::options(...future.oldOptions)
[13:36:47.353]             if (.Platform$OS.type == "windows") {
[13:36:47.353]                 old_names <- names(...future.oldEnvVars)
[13:36:47.353]                 envs <- base::Sys.getenv()
[13:36:47.353]                 names <- names(envs)
[13:36:47.353]                 common <- intersect(names, old_names)
[13:36:47.353]                 added <- setdiff(names, old_names)
[13:36:47.353]                 removed <- setdiff(old_names, names)
[13:36:47.353]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:47.353]                   envs[common]]
[13:36:47.353]                 NAMES <- toupper(changed)
[13:36:47.353]                 args <- list()
[13:36:47.353]                 for (kk in seq_along(NAMES)) {
[13:36:47.353]                   name <- changed[[kk]]
[13:36:47.353]                   NAME <- NAMES[[kk]]
[13:36:47.353]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:47.353]                     next
[13:36:47.353]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:47.353]                 }
[13:36:47.353]                 NAMES <- toupper(added)
[13:36:47.353]                 for (kk in seq_along(NAMES)) {
[13:36:47.353]                   name <- added[[kk]]
[13:36:47.353]                   NAME <- NAMES[[kk]]
[13:36:47.353]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:47.353]                     next
[13:36:47.353]                   args[[name]] <- ""
[13:36:47.353]                 }
[13:36:47.353]                 NAMES <- toupper(removed)
[13:36:47.353]                 for (kk in seq_along(NAMES)) {
[13:36:47.353]                   name <- removed[[kk]]
[13:36:47.353]                   NAME <- NAMES[[kk]]
[13:36:47.353]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:47.353]                     next
[13:36:47.353]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:47.353]                 }
[13:36:47.353]                 if (length(args) > 0) 
[13:36:47.353]                   base::do.call(base::Sys.setenv, args = args)
[13:36:47.353]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:47.353]             }
[13:36:47.353]             else {
[13:36:47.353]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:47.353]             }
[13:36:47.353]             {
[13:36:47.353]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:47.353]                   0L) {
[13:36:47.353]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:47.353]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:47.353]                   base::options(opts)
[13:36:47.353]                 }
[13:36:47.353]                 {
[13:36:47.353]                   {
[13:36:47.353]                     NULL
[13:36:47.353]                     RNGkind("Mersenne-Twister")
[13:36:47.353]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:47.353]                       inherits = FALSE)
[13:36:47.353]                   }
[13:36:47.353]                   options(future.plan = NULL)
[13:36:47.353]                   if (is.na(NA_character_)) 
[13:36:47.353]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:47.353]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:47.353]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:47.353]                     .init = FALSE)
[13:36:47.353]                 }
[13:36:47.353]             }
[13:36:47.353]         }
[13:36:47.353]     })
[13:36:47.353]     if (TRUE) {
[13:36:47.353]         base::sink(type = "output", split = FALSE)
[13:36:47.353]         if (TRUE) {
[13:36:47.353]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:47.353]         }
[13:36:47.353]         else {
[13:36:47.353]             ...future.result["stdout"] <- base::list(NULL)
[13:36:47.353]         }
[13:36:47.353]         base::close(...future.stdout)
[13:36:47.353]         ...future.stdout <- NULL
[13:36:47.353]     }
[13:36:47.353]     ...future.result$conditions <- ...future.conditions
[13:36:47.353]     ...future.result$finished <- base::Sys.time()
[13:36:47.353]     ...future.result
[13:36:47.353] }
[13:36:47.355] plan(): Setting new future strategy stack:
[13:36:47.355] List of future strategies:
[13:36:47.355] 1. sequential:
[13:36:47.355]    - args: function (..., envir = parent.frame())
[13:36:47.355]    - tweaked: FALSE
[13:36:47.355]    - call: NULL
[13:36:47.355] plan(): nbrOfWorkers() = 1
[13:36:47.356] plan(): Setting new future strategy stack:
[13:36:47.356] List of future strategies:
[13:36:47.356] 1. sequential:
[13:36:47.356]    - args: function (..., envir = parent.frame())
[13:36:47.356]    - tweaked: FALSE
[13:36:47.356]    - call: plan(strategy)
[13:36:47.356] plan(): nbrOfWorkers() = 1
[13:36:47.356] SequentialFuture started (and completed)
[13:36:47.357] - Launch lazy future ... done
[13:36:47.357] run() for ‘SequentialFuture’ ... done
[13:36:47.357] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:47.357] Searching for globals...
[13:36:47.358] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[13:36:47.359] Searching for globals...
[13:36:47.359] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[13:36:47.360] Searching for globals ... DONE
[13:36:47.362] Resolving globals: FALSE
[13:36:47.363] The total size of the 1 globals is 160 bytes (160 bytes)
[13:36:47.363] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[13:36:47.363] - globals: [1] ‘data’
[13:36:47.363] 
[13:36:47.364] getGlobalsAndPackages() ... DONE
[13:36:47.364] run() for ‘Future’ ...
[13:36:47.364] - state: ‘created’
[13:36:47.364] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:47.364] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:47.364] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:47.364]   - Field: ‘label’
[13:36:47.365]   - Field: ‘local’
[13:36:47.365]   - Field: ‘owner’
[13:36:47.365]   - Field: ‘envir’
[13:36:47.365]   - Field: ‘packages’
[13:36:47.365]   - Field: ‘gc’
[13:36:47.365]   - Field: ‘conditions’
[13:36:47.365]   - Field: ‘expr’
[13:36:47.365]   - Field: ‘uuid’
[13:36:47.365]   - Field: ‘seed’
[13:36:47.365]   - Field: ‘version’
[13:36:47.365]   - Field: ‘result’
[13:36:47.366]   - Field: ‘asynchronous’
[13:36:47.366]   - Field: ‘calls’
[13:36:47.366]   - Field: ‘globals’
[13:36:47.366]   - Field: ‘stdout’
[13:36:47.366]   - Field: ‘earlySignal’
[13:36:47.366]   - Field: ‘lazy’
[13:36:47.366]   - Field: ‘state’
[13:36:47.366] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:47.366] - Launch lazy future ...
[13:36:47.366] Packages needed by the future expression (n = 0): <none>
[13:36:47.367] Packages needed by future strategies (n = 0): <none>
[13:36:47.367] {
[13:36:47.367]     {
[13:36:47.367]         {
[13:36:47.367]             ...future.startTime <- base::Sys.time()
[13:36:47.367]             {
[13:36:47.367]                 {
[13:36:47.367]                   {
[13:36:47.367]                     base::local({
[13:36:47.367]                       has_future <- base::requireNamespace("future", 
[13:36:47.367]                         quietly = TRUE)
[13:36:47.367]                       if (has_future) {
[13:36:47.367]                         ns <- base::getNamespace("future")
[13:36:47.367]                         version <- ns[[".package"]][["version"]]
[13:36:47.367]                         if (is.null(version)) 
[13:36:47.367]                           version <- utils::packageVersion("future")
[13:36:47.367]                       }
[13:36:47.367]                       else {
[13:36:47.367]                         version <- NULL
[13:36:47.367]                       }
[13:36:47.367]                       if (!has_future || version < "1.8.0") {
[13:36:47.367]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:47.367]                           "", base::R.version$version.string), 
[13:36:47.367]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:47.367]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:47.367]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:47.367]                             "release", "version")], collapse = " "), 
[13:36:47.367]                           hostname = base::Sys.info()[["nodename"]])
[13:36:47.367]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:47.367]                           info)
[13:36:47.367]                         info <- base::paste(info, collapse = "; ")
[13:36:47.367]                         if (!has_future) {
[13:36:47.367]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:47.367]                             info)
[13:36:47.367]                         }
[13:36:47.367]                         else {
[13:36:47.367]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:47.367]                             info, version)
[13:36:47.367]                         }
[13:36:47.367]                         base::stop(msg)
[13:36:47.367]                       }
[13:36:47.367]                     })
[13:36:47.367]                   }
[13:36:47.367]                   ...future.strategy.old <- future::plan("list")
[13:36:47.367]                   options(future.plan = NULL)
[13:36:47.367]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:47.367]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:47.367]                 }
[13:36:47.367]                 ...future.workdir <- getwd()
[13:36:47.367]             }
[13:36:47.367]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:47.367]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:47.367]         }
[13:36:47.367]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[13:36:47.367]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:47.367]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[13:36:47.367]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:47.367]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:47.367]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:47.367]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:47.367]             base::names(...future.oldOptions))
[13:36:47.367]     }
[13:36:47.367]     if (FALSE) {
[13:36:47.367]     }
[13:36:47.367]     else {
[13:36:47.367]         if (TRUE) {
[13:36:47.367]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:47.367]                 open = "w")
[13:36:47.367]         }
[13:36:47.367]         else {
[13:36:47.367]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:47.367]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:47.367]         }
[13:36:47.367]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:47.367]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:47.367]             base::sink(type = "output", split = FALSE)
[13:36:47.367]             base::close(...future.stdout)
[13:36:47.367]         }, add = TRUE)
[13:36:47.367]     }
[13:36:47.367]     ...future.frame <- base::sys.nframe()
[13:36:47.367]     ...future.conditions <- base::list()
[13:36:47.367]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:47.367]     if (FALSE) {
[13:36:47.367]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:47.367]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:47.367]     }
[13:36:47.367]     ...future.result <- base::tryCatch({
[13:36:47.367]         base::withCallingHandlers({
[13:36:47.367]             ...future.value <- base::withVisible(base::local(subset(data, 
[13:36:47.367]                 x < 3)$y))
[13:36:47.367]             future::FutureResult(value = ...future.value$value, 
[13:36:47.367]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:47.367]                   ...future.rng), globalenv = if (FALSE) 
[13:36:47.367]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:47.367]                     ...future.globalenv.names))
[13:36:47.367]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:47.367]         }, condition = base::local({
[13:36:47.367]             c <- base::c
[13:36:47.367]             inherits <- base::inherits
[13:36:47.367]             invokeRestart <- base::invokeRestart
[13:36:47.367]             length <- base::length
[13:36:47.367]             list <- base::list
[13:36:47.367]             seq.int <- base::seq.int
[13:36:47.367]             signalCondition <- base::signalCondition
[13:36:47.367]             sys.calls <- base::sys.calls
[13:36:47.367]             `[[` <- base::`[[`
[13:36:47.367]             `+` <- base::`+`
[13:36:47.367]             `<<-` <- base::`<<-`
[13:36:47.367]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:47.367]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:47.367]                   3L)]
[13:36:47.367]             }
[13:36:47.367]             function(cond) {
[13:36:47.367]                 is_error <- inherits(cond, "error")
[13:36:47.367]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:47.367]                   NULL)
[13:36:47.367]                 if (is_error) {
[13:36:47.367]                   sessionInformation <- function() {
[13:36:47.367]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:47.367]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:47.367]                       search = base::search(), system = base::Sys.info())
[13:36:47.367]                   }
[13:36:47.367]                   ...future.conditions[[length(...future.conditions) + 
[13:36:47.367]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:47.367]                     cond$call), session = sessionInformation(), 
[13:36:47.367]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:47.367]                   signalCondition(cond)
[13:36:47.367]                 }
[13:36:47.367]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:47.367]                 "immediateCondition"))) {
[13:36:47.367]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:47.367]                   ...future.conditions[[length(...future.conditions) + 
[13:36:47.367]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:47.367]                   if (TRUE && !signal) {
[13:36:47.367]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:47.367]                     {
[13:36:47.367]                       inherits <- base::inherits
[13:36:47.367]                       invokeRestart <- base::invokeRestart
[13:36:47.367]                       is.null <- base::is.null
[13:36:47.367]                       muffled <- FALSE
[13:36:47.367]                       if (inherits(cond, "message")) {
[13:36:47.367]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:47.367]                         if (muffled) 
[13:36:47.367]                           invokeRestart("muffleMessage")
[13:36:47.367]                       }
[13:36:47.367]                       else if (inherits(cond, "warning")) {
[13:36:47.367]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:47.367]                         if (muffled) 
[13:36:47.367]                           invokeRestart("muffleWarning")
[13:36:47.367]                       }
[13:36:47.367]                       else if (inherits(cond, "condition")) {
[13:36:47.367]                         if (!is.null(pattern)) {
[13:36:47.367]                           computeRestarts <- base::computeRestarts
[13:36:47.367]                           grepl <- base::grepl
[13:36:47.367]                           restarts <- computeRestarts(cond)
[13:36:47.367]                           for (restart in restarts) {
[13:36:47.367]                             name <- restart$name
[13:36:47.367]                             if (is.null(name)) 
[13:36:47.367]                               next
[13:36:47.367]                             if (!grepl(pattern, name)) 
[13:36:47.367]                               next
[13:36:47.367]                             invokeRestart(restart)
[13:36:47.367]                             muffled <- TRUE
[13:36:47.367]                             break
[13:36:47.367]                           }
[13:36:47.367]                         }
[13:36:47.367]                       }
[13:36:47.367]                       invisible(muffled)
[13:36:47.367]                     }
[13:36:47.367]                     muffleCondition(cond, pattern = "^muffle")
[13:36:47.367]                   }
[13:36:47.367]                 }
[13:36:47.367]                 else {
[13:36:47.367]                   if (TRUE) {
[13:36:47.367]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:47.367]                     {
[13:36:47.367]                       inherits <- base::inherits
[13:36:47.367]                       invokeRestart <- base::invokeRestart
[13:36:47.367]                       is.null <- base::is.null
[13:36:47.367]                       muffled <- FALSE
[13:36:47.367]                       if (inherits(cond, "message")) {
[13:36:47.367]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:47.367]                         if (muffled) 
[13:36:47.367]                           invokeRestart("muffleMessage")
[13:36:47.367]                       }
[13:36:47.367]                       else if (inherits(cond, "warning")) {
[13:36:47.367]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:47.367]                         if (muffled) 
[13:36:47.367]                           invokeRestart("muffleWarning")
[13:36:47.367]                       }
[13:36:47.367]                       else if (inherits(cond, "condition")) {
[13:36:47.367]                         if (!is.null(pattern)) {
[13:36:47.367]                           computeRestarts <- base::computeRestarts
[13:36:47.367]                           grepl <- base::grepl
[13:36:47.367]                           restarts <- computeRestarts(cond)
[13:36:47.367]                           for (restart in restarts) {
[13:36:47.367]                             name <- restart$name
[13:36:47.367]                             if (is.null(name)) 
[13:36:47.367]                               next
[13:36:47.367]                             if (!grepl(pattern, name)) 
[13:36:47.367]                               next
[13:36:47.367]                             invokeRestart(restart)
[13:36:47.367]                             muffled <- TRUE
[13:36:47.367]                             break
[13:36:47.367]                           }
[13:36:47.367]                         }
[13:36:47.367]                       }
[13:36:47.367]                       invisible(muffled)
[13:36:47.367]                     }
[13:36:47.367]                     muffleCondition(cond, pattern = "^muffle")
[13:36:47.367]                   }
[13:36:47.367]                 }
[13:36:47.367]             }
[13:36:47.367]         }))
[13:36:47.367]     }, error = function(ex) {
[13:36:47.367]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:47.367]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:47.367]                 ...future.rng), started = ...future.startTime, 
[13:36:47.367]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:47.367]             version = "1.8"), class = "FutureResult")
[13:36:47.367]     }, finally = {
[13:36:47.367]         if (!identical(...future.workdir, getwd())) 
[13:36:47.367]             setwd(...future.workdir)
[13:36:47.367]         {
[13:36:47.367]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:47.367]                 ...future.oldOptions$nwarnings <- NULL
[13:36:47.367]             }
[13:36:47.367]             base::options(...future.oldOptions)
[13:36:47.367]             if (.Platform$OS.type == "windows") {
[13:36:47.367]                 old_names <- names(...future.oldEnvVars)
[13:36:47.367]                 envs <- base::Sys.getenv()
[13:36:47.367]                 names <- names(envs)
[13:36:47.367]                 common <- intersect(names, old_names)
[13:36:47.367]                 added <- setdiff(names, old_names)
[13:36:47.367]                 removed <- setdiff(old_names, names)
[13:36:47.367]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:47.367]                   envs[common]]
[13:36:47.367]                 NAMES <- toupper(changed)
[13:36:47.367]                 args <- list()
[13:36:47.367]                 for (kk in seq_along(NAMES)) {
[13:36:47.367]                   name <- changed[[kk]]
[13:36:47.367]                   NAME <- NAMES[[kk]]
[13:36:47.367]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:47.367]                     next
[13:36:47.367]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:47.367]                 }
[13:36:47.367]                 NAMES <- toupper(added)
[13:36:47.367]                 for (kk in seq_along(NAMES)) {
[13:36:47.367]                   name <- added[[kk]]
[13:36:47.367]                   NAME <- NAMES[[kk]]
[13:36:47.367]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:47.367]                     next
[13:36:47.367]                   args[[name]] <- ""
[13:36:47.367]                 }
[13:36:47.367]                 NAMES <- toupper(removed)
[13:36:47.367]                 for (kk in seq_along(NAMES)) {
[13:36:47.367]                   name <- removed[[kk]]
[13:36:47.367]                   NAME <- NAMES[[kk]]
[13:36:47.367]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:47.367]                     next
[13:36:47.367]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:47.367]                 }
[13:36:47.367]                 if (length(args) > 0) 
[13:36:47.367]                   base::do.call(base::Sys.setenv, args = args)
[13:36:47.367]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:47.367]             }
[13:36:47.367]             else {
[13:36:47.367]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:47.367]             }
[13:36:47.367]             {
[13:36:47.367]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:47.367]                   0L) {
[13:36:47.367]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:47.367]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:47.367]                   base::options(opts)
[13:36:47.367]                 }
[13:36:47.367]                 {
[13:36:47.367]                   {
[13:36:47.367]                     NULL
[13:36:47.367]                     RNGkind("Mersenne-Twister")
[13:36:47.367]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:47.367]                       inherits = FALSE)
[13:36:47.367]                   }
[13:36:47.367]                   options(future.plan = NULL)
[13:36:47.367]                   if (is.na(NA_character_)) 
[13:36:47.367]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:47.367]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:47.367]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:47.367]                     .init = FALSE)
[13:36:47.367]                 }
[13:36:47.367]             }
[13:36:47.367]         }
[13:36:47.367]     })
[13:36:47.367]     if (TRUE) {
[13:36:47.367]         base::sink(type = "output", split = FALSE)
[13:36:47.367]         if (TRUE) {
[13:36:47.367]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:47.367]         }
[13:36:47.367]         else {
[13:36:47.367]             ...future.result["stdout"] <- base::list(NULL)
[13:36:47.367]         }
[13:36:47.367]         base::close(...future.stdout)
[13:36:47.367]         ...future.stdout <- NULL
[13:36:47.367]     }
[13:36:47.367]     ...future.result$conditions <- ...future.conditions
[13:36:47.367]     ...future.result$finished <- base::Sys.time()
[13:36:47.367]     ...future.result
[13:36:47.367] }
[13:36:47.369] assign_globals() ...
[13:36:47.369] List of 1
[13:36:47.369]  $ data:'data.frame':	5 obs. of  2 variables:
[13:36:47.369]   ..$ x: int [1:5] 1 2 3 4 5
[13:36:47.369]   ..$ y: int [1:5] 1 2 3 4 5
[13:36:47.369]  - attr(*, "where")=List of 1
[13:36:47.369]   ..$ data:<environment: R_EmptyEnv> 
[13:36:47.369]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:47.369]  - attr(*, "resolved")= logi FALSE
[13:36:47.369]  - attr(*, "total_size")= num 160
[13:36:47.369]  - attr(*, "already-done")= logi TRUE
[13:36:47.374] - copied ‘data’ to environment
[13:36:47.374] assign_globals() ... done
[13:36:47.375] plan(): Setting new future strategy stack:
[13:36:47.375] List of future strategies:
[13:36:47.375] 1. sequential:
[13:36:47.375]    - args: function (..., envir = parent.frame())
[13:36:47.375]    - tweaked: FALSE
[13:36:47.375]    - call: NULL
[13:36:47.375] plan(): nbrOfWorkers() = 1
[13:36:47.376] plan(): Setting new future strategy stack:
[13:36:47.376] List of future strategies:
[13:36:47.376] 1. sequential:
[13:36:47.376]    - args: function (..., envir = parent.frame())
[13:36:47.376]    - tweaked: FALSE
[13:36:47.376]    - call: plan(strategy)
[13:36:47.376] plan(): nbrOfWorkers() = 1
[13:36:47.376] SequentialFuture started (and completed)
[13:36:47.376] - Launch lazy future ... done
[13:36:47.376] run() for ‘SequentialFuture’ ... done
[13:36:47.377] plan(): Setting new future strategy stack:
[13:36:47.377] List of future strategies:
[13:36:47.377] 1. sequential:
[13:36:47.377]    - args: function (..., envir = parent.frame())
[13:36:47.377]    - tweaked: FALSE
[13:36:47.377]    - call: plan(list(sequential, strategy))
[13:36:47.377] 2. sequential:
[13:36:47.377]    - args: function (..., envir = parent.frame())
[13:36:47.377]    - tweaked: FALSE
[13:36:47.377]    - call: plan(list(sequential, strategy))
[13:36:47.377] plan(): nbrOfWorkers() = 1
[13:36:47.378] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[13:36:47.378] Searching for globals...
[13:36:47.382] - globals found: [8] ‘{’, ‘<-’, ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’, ‘%<-%’
[13:36:47.383] Searching for globals ... DONE
[13:36:47.383] Resolving globals: FALSE
[13:36:47.383] The total size of the 1 globals is 160 bytes (160 bytes)
[13:36:47.383] The total size of the 1 globals exported for future expression (‘{; a %<-% subset(data, x < 3)$y; a; }’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[13:36:47.384] - globals: [1] ‘data’
[13:36:47.384] - packages: [1] ‘future’
[13:36:47.384] getGlobalsAndPackages() ... DONE
[13:36:47.384] run() for ‘Future’ ...
[13:36:47.384] - state: ‘created’
[13:36:47.384] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:47.385] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:47.385] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:47.385]   - Field: ‘label’
[13:36:47.385]   - Field: ‘local’
[13:36:47.385]   - Field: ‘owner’
[13:36:47.385]   - Field: ‘envir’
[13:36:47.385]   - Field: ‘packages’
[13:36:47.385]   - Field: ‘gc’
[13:36:47.385]   - Field: ‘conditions’
[13:36:47.385]   - Field: ‘expr’
[13:36:47.386]   - Field: ‘uuid’
[13:36:47.386]   - Field: ‘seed’
[13:36:47.386]   - Field: ‘version’
[13:36:47.386]   - Field: ‘result’
[13:36:47.386]   - Field: ‘asynchronous’
[13:36:47.386]   - Field: ‘calls’
[13:36:47.386]   - Field: ‘globals’
[13:36:47.386]   - Field: ‘stdout’
[13:36:47.386]   - Field: ‘earlySignal’
[13:36:47.386]   - Field: ‘lazy’
[13:36:47.386]   - Field: ‘state’
[13:36:47.387] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:47.387] - Launch lazy future ...
[13:36:47.387] Packages needed by the future expression (n = 1): ‘future’
[13:36:47.387] Packages needed by future strategies (n = 1): ‘future’
[13:36:47.387] {
[13:36:47.387]     {
[13:36:47.387]         {
[13:36:47.387]             ...future.startTime <- base::Sys.time()
[13:36:47.387]             {
[13:36:47.387]                 {
[13:36:47.387]                   {
[13:36:47.387]                     {
[13:36:47.387]                       base::local({
[13:36:47.387]                         has_future <- base::requireNamespace("future", 
[13:36:47.387]                           quietly = TRUE)
[13:36:47.387]                         if (has_future) {
[13:36:47.387]                           ns <- base::getNamespace("future")
[13:36:47.387]                           version <- ns[[".package"]][["version"]]
[13:36:47.387]                           if (is.null(version)) 
[13:36:47.387]                             version <- utils::packageVersion("future")
[13:36:47.387]                         }
[13:36:47.387]                         else {
[13:36:47.387]                           version <- NULL
[13:36:47.387]                         }
[13:36:47.387]                         if (!has_future || version < "1.8.0") {
[13:36:47.387]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:47.387]                             "", base::R.version$version.string), 
[13:36:47.387]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:47.387]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:47.387]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:47.387]                               "release", "version")], collapse = " "), 
[13:36:47.387]                             hostname = base::Sys.info()[["nodename"]])
[13:36:47.387]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:47.387]                             info)
[13:36:47.387]                           info <- base::paste(info, collapse = "; ")
[13:36:47.387]                           if (!has_future) {
[13:36:47.387]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:47.387]                               info)
[13:36:47.387]                           }
[13:36:47.387]                           else {
[13:36:47.387]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:47.387]                               info, version)
[13:36:47.387]                           }
[13:36:47.387]                           base::stop(msg)
[13:36:47.387]                         }
[13:36:47.387]                       })
[13:36:47.387]                     }
[13:36:47.387]                     base::local({
[13:36:47.387]                       for (pkg in "future") {
[13:36:47.387]                         base::loadNamespace(pkg)
[13:36:47.387]                         base::library(pkg, character.only = TRUE)
[13:36:47.387]                       }
[13:36:47.387]                     })
[13:36:47.387]                   }
[13:36:47.387]                   ...future.strategy.old <- future::plan("list")
[13:36:47.387]                   options(future.plan = NULL)
[13:36:47.387]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:47.387]                   future::plan(list(function (..., envir = parent.frame()) 
[13:36:47.387]                   {
[13:36:47.387]                     future <- SequentialFuture(..., envir = envir)
[13:36:47.387]                     if (!future$lazy) 
[13:36:47.387]                       future <- run(future)
[13:36:47.387]                     invisible(future)
[13:36:47.387]                   }), .cleanup = FALSE, .init = FALSE)
[13:36:47.387]                 }
[13:36:47.387]                 ...future.workdir <- getwd()
[13:36:47.387]             }
[13:36:47.387]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:47.387]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:47.387]         }
[13:36:47.387]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[13:36:47.387]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:47.387]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[13:36:47.387]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:47.387]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:47.387]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:47.387]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:47.387]             base::names(...future.oldOptions))
[13:36:47.387]     }
[13:36:47.387]     if (FALSE) {
[13:36:47.387]     }
[13:36:47.387]     else {
[13:36:47.387]         if (TRUE) {
[13:36:47.387]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:47.387]                 open = "w")
[13:36:47.387]         }
[13:36:47.387]         else {
[13:36:47.387]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:47.387]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:47.387]         }
[13:36:47.387]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:47.387]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:47.387]             base::sink(type = "output", split = FALSE)
[13:36:47.387]             base::close(...future.stdout)
[13:36:47.387]         }, add = TRUE)
[13:36:47.387]     }
[13:36:47.387]     ...future.frame <- base::sys.nframe()
[13:36:47.387]     ...future.conditions <- base::list()
[13:36:47.387]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:47.387]     if (FALSE) {
[13:36:47.387]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:47.387]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:47.387]     }
[13:36:47.387]     ...future.result <- base::tryCatch({
[13:36:47.387]         base::withCallingHandlers({
[13:36:47.387]             ...future.value <- base::withVisible(base::local({
[13:36:47.387]                 a %<-% subset(data, x < 3)$y
[13:36:47.387]                 a
[13:36:47.387]             }))
[13:36:47.387]             future::FutureResult(value = ...future.value$value, 
[13:36:47.387]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:47.387]                   ...future.rng), globalenv = if (FALSE) 
[13:36:47.387]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:47.387]                     ...future.globalenv.names))
[13:36:47.387]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:47.387]         }, condition = base::local({
[13:36:47.387]             c <- base::c
[13:36:47.387]             inherits <- base::inherits
[13:36:47.387]             invokeRestart <- base::invokeRestart
[13:36:47.387]             length <- base::length
[13:36:47.387]             list <- base::list
[13:36:47.387]             seq.int <- base::seq.int
[13:36:47.387]             signalCondition <- base::signalCondition
[13:36:47.387]             sys.calls <- base::sys.calls
[13:36:47.387]             `[[` <- base::`[[`
[13:36:47.387]             `+` <- base::`+`
[13:36:47.387]             `<<-` <- base::`<<-`
[13:36:47.387]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:47.387]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:47.387]                   3L)]
[13:36:47.387]             }
[13:36:47.387]             function(cond) {
[13:36:47.387]                 is_error <- inherits(cond, "error")
[13:36:47.387]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:47.387]                   NULL)
[13:36:47.387]                 if (is_error) {
[13:36:47.387]                   sessionInformation <- function() {
[13:36:47.387]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:47.387]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:47.387]                       search = base::search(), system = base::Sys.info())
[13:36:47.387]                   }
[13:36:47.387]                   ...future.conditions[[length(...future.conditions) + 
[13:36:47.387]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:47.387]                     cond$call), session = sessionInformation(), 
[13:36:47.387]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:47.387]                   signalCondition(cond)
[13:36:47.387]                 }
[13:36:47.387]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:47.387]                 "immediateCondition"))) {
[13:36:47.387]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:47.387]                   ...future.conditions[[length(...future.conditions) + 
[13:36:47.387]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:47.387]                   if (TRUE && !signal) {
[13:36:47.387]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:47.387]                     {
[13:36:47.387]                       inherits <- base::inherits
[13:36:47.387]                       invokeRestart <- base::invokeRestart
[13:36:47.387]                       is.null <- base::is.null
[13:36:47.387]                       muffled <- FALSE
[13:36:47.387]                       if (inherits(cond, "message")) {
[13:36:47.387]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:47.387]                         if (muffled) 
[13:36:47.387]                           invokeRestart("muffleMessage")
[13:36:47.387]                       }
[13:36:47.387]                       else if (inherits(cond, "warning")) {
[13:36:47.387]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:47.387]                         if (muffled) 
[13:36:47.387]                           invokeRestart("muffleWarning")
[13:36:47.387]                       }
[13:36:47.387]                       else if (inherits(cond, "condition")) {
[13:36:47.387]                         if (!is.null(pattern)) {
[13:36:47.387]                           computeRestarts <- base::computeRestarts
[13:36:47.387]                           grepl <- base::grepl
[13:36:47.387]                           restarts <- computeRestarts(cond)
[13:36:47.387]                           for (restart in restarts) {
[13:36:47.387]                             name <- restart$name
[13:36:47.387]                             if (is.null(name)) 
[13:36:47.387]                               next
[13:36:47.387]                             if (!grepl(pattern, name)) 
[13:36:47.387]                               next
[13:36:47.387]                             invokeRestart(restart)
[13:36:47.387]                             muffled <- TRUE
[13:36:47.387]                             break
[13:36:47.387]                           }
[13:36:47.387]                         }
[13:36:47.387]                       }
[13:36:47.387]                       invisible(muffled)
[13:36:47.387]                     }
[13:36:47.387]                     muffleCondition(cond, pattern = "^muffle")
[13:36:47.387]                   }
[13:36:47.387]                 }
[13:36:47.387]                 else {
[13:36:47.387]                   if (TRUE) {
[13:36:47.387]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:47.387]                     {
[13:36:47.387]                       inherits <- base::inherits
[13:36:47.387]                       invokeRestart <- base::invokeRestart
[13:36:47.387]                       is.null <- base::is.null
[13:36:47.387]                       muffled <- FALSE
[13:36:47.387]                       if (inherits(cond, "message")) {
[13:36:47.387]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:47.387]                         if (muffled) 
[13:36:47.387]                           invokeRestart("muffleMessage")
[13:36:47.387]                       }
[13:36:47.387]                       else if (inherits(cond, "warning")) {
[13:36:47.387]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:47.387]                         if (muffled) 
[13:36:47.387]                           invokeRestart("muffleWarning")
[13:36:47.387]                       }
[13:36:47.387]                       else if (inherits(cond, "condition")) {
[13:36:47.387]                         if (!is.null(pattern)) {
[13:36:47.387]                           computeRestarts <- base::computeRestarts
[13:36:47.387]                           grepl <- base::grepl
[13:36:47.387]                           restarts <- computeRestarts(cond)
[13:36:47.387]                           for (restart in restarts) {
[13:36:47.387]                             name <- restart$name
[13:36:47.387]                             if (is.null(name)) 
[13:36:47.387]                               next
[13:36:47.387]                             if (!grepl(pattern, name)) 
[13:36:47.387]                               next
[13:36:47.387]                             invokeRestart(restart)
[13:36:47.387]                             muffled <- TRUE
[13:36:47.387]                             break
[13:36:47.387]                           }
[13:36:47.387]                         }
[13:36:47.387]                       }
[13:36:47.387]                       invisible(muffled)
[13:36:47.387]                     }
[13:36:47.387]                     muffleCondition(cond, pattern = "^muffle")
[13:36:47.387]                   }
[13:36:47.387]                 }
[13:36:47.387]             }
[13:36:47.387]         }))
[13:36:47.387]     }, error = function(ex) {
[13:36:47.387]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:47.387]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:47.387]                 ...future.rng), started = ...future.startTime, 
[13:36:47.387]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:47.387]             version = "1.8"), class = "FutureResult")
[13:36:47.387]     }, finally = {
[13:36:47.387]         if (!identical(...future.workdir, getwd())) 
[13:36:47.387]             setwd(...future.workdir)
[13:36:47.387]         {
[13:36:47.387]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:47.387]                 ...future.oldOptions$nwarnings <- NULL
[13:36:47.387]             }
[13:36:47.387]             base::options(...future.oldOptions)
[13:36:47.387]             if (.Platform$OS.type == "windows") {
[13:36:47.387]                 old_names <- names(...future.oldEnvVars)
[13:36:47.387]                 envs <- base::Sys.getenv()
[13:36:47.387]                 names <- names(envs)
[13:36:47.387]                 common <- intersect(names, old_names)
[13:36:47.387]                 added <- setdiff(names, old_names)
[13:36:47.387]                 removed <- setdiff(old_names, names)
[13:36:47.387]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:47.387]                   envs[common]]
[13:36:47.387]                 NAMES <- toupper(changed)
[13:36:47.387]                 args <- list()
[13:36:47.387]                 for (kk in seq_along(NAMES)) {
[13:36:47.387]                   name <- changed[[kk]]
[13:36:47.387]                   NAME <- NAMES[[kk]]
[13:36:47.387]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:47.387]                     next
[13:36:47.387]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:47.387]                 }
[13:36:47.387]                 NAMES <- toupper(added)
[13:36:47.387]                 for (kk in seq_along(NAMES)) {
[13:36:47.387]                   name <- added[[kk]]
[13:36:47.387]                   NAME <- NAMES[[kk]]
[13:36:47.387]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:47.387]                     next
[13:36:47.387]                   args[[name]] <- ""
[13:36:47.387]                 }
[13:36:47.387]                 NAMES <- toupper(removed)
[13:36:47.387]                 for (kk in seq_along(NAMES)) {
[13:36:47.387]                   name <- removed[[kk]]
[13:36:47.387]                   NAME <- NAMES[[kk]]
[13:36:47.387]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:47.387]                     next
[13:36:47.387]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:47.387]                 }
[13:36:47.387]                 if (length(args) > 0) 
[13:36:47.387]                   base::do.call(base::Sys.setenv, args = args)
[13:36:47.387]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:47.387]             }
[13:36:47.387]             else {
[13:36:47.387]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:47.387]             }
[13:36:47.387]             {
[13:36:47.387]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:47.387]                   0L) {
[13:36:47.387]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:47.387]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:47.387]                   base::options(opts)
[13:36:47.387]                 }
[13:36:47.387]                 {
[13:36:47.387]                   {
[13:36:47.387]                     NULL
[13:36:47.387]                     RNGkind("Mersenne-Twister")
[13:36:47.387]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:47.387]                       inherits = FALSE)
[13:36:47.387]                   }
[13:36:47.387]                   options(future.plan = NULL)
[13:36:47.387]                   if (is.na(NA_character_)) 
[13:36:47.387]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:47.387]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:47.387]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:47.387]                     .init = FALSE)
[13:36:47.387]                 }
[13:36:47.387]             }
[13:36:47.387]         }
[13:36:47.387]     })
[13:36:47.387]     if (TRUE) {
[13:36:47.387]         base::sink(type = "output", split = FALSE)
[13:36:47.387]         if (TRUE) {
[13:36:47.387]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:47.387]         }
[13:36:47.387]         else {
[13:36:47.387]             ...future.result["stdout"] <- base::list(NULL)
[13:36:47.387]         }
[13:36:47.387]         base::close(...future.stdout)
[13:36:47.387]         ...future.stdout <- NULL
[13:36:47.387]     }
[13:36:47.387]     ...future.result$conditions <- ...future.conditions
[13:36:47.387]     ...future.result$finished <- base::Sys.time()
[13:36:47.387]     ...future.result
[13:36:47.387] }
[13:36:47.389] assign_globals() ...
[13:36:47.389] List of 1
[13:36:47.389]  $ data:'data.frame':	5 obs. of  2 variables:
[13:36:47.389]   ..$ x: int [1:5] 1 2 3 4 5
[13:36:47.389]   ..$ y: int [1:5] 1 2 3 4 5
[13:36:47.389]  - attr(*, "where")=List of 1
[13:36:47.389]   ..$ data:<environment: R_EmptyEnv> 
[13:36:47.389]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:47.389]  - attr(*, "resolved")= logi FALSE
[13:36:47.389]  - attr(*, "total_size")= num 160
[13:36:47.389]  - attr(*, "already-done")= logi TRUE
[13:36:47.394] - copied ‘data’ to environment
[13:36:47.394] assign_globals() ... done
[13:36:47.394] plan(): Setting new future strategy stack:
[13:36:47.394] List of future strategies:
[13:36:47.394] 1. sequential:
[13:36:47.394]    - args: function (..., envir = parent.frame())
[13:36:47.394]    - tweaked: FALSE
[13:36:47.394]    - call: plan(list(sequential, strategy))
[13:36:47.395] plan(): nbrOfWorkers() = 1
[13:36:47.422] plan(): Setting new future strategy stack:
[13:36:47.422] List of future strategies:
[13:36:47.422] 1. sequential:
[13:36:47.422]    - args: function (..., envir = parent.frame())
[13:36:47.422]    - tweaked: FALSE
[13:36:47.422]    - call: plan(list(sequential, strategy))
[13:36:47.422] 2. sequential:
[13:36:47.422]    - args: function (..., envir = parent.frame())
[13:36:47.422]    - tweaked: FALSE
[13:36:47.422]    - call: plan(list(sequential, strategy))
[13:36:47.423] plan(): nbrOfWorkers() = 1
[13:36:47.423] SequentialFuture started (and completed)
[13:36:47.423] signalConditions() ...
[13:36:47.423]  - include = ‘immediateCondition’
[13:36:47.423]  - exclude = 
[13:36:47.423]  - resignal = FALSE
[13:36:47.424]  - Number of conditions: 53
[13:36:47.424] signalConditions() ... done
[13:36:47.424] - Launch lazy future ... done
[13:36:47.424] run() for ‘SequentialFuture’ ... done
[13:36:47.424] signalConditions() ...
[13:36:47.424]  - include = ‘immediateCondition’
[13:36:47.424]  - exclude = 
[13:36:47.424]  - resignal = FALSE
[13:36:47.424]  - Number of conditions: 53
[13:36:47.424] signalConditions() ... done
[13:36:47.425] Future state: ‘finished’
[13:36:47.425] signalConditions() ...
[13:36:47.425]  - include = ‘condition’
[13:36:47.425]  - exclude = ‘immediateCondition’
[13:36:47.425]  - resignal = TRUE
[13:36:47.425]  - Number of conditions: 53
[13:36:47.425]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.395] getGlobalsAndPackages() ...
[13:36:47.425]  - Condition #2: ‘deprecatedWarning’, ‘warning’, ‘condition’
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[13:36:47.425]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.408] Searching for globals...
[13:36:47.425]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.409] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[13:36:47.426]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.409] Searching for globals ... DONE
[13:36:47.426]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.409] Resolving globals: FALSE
[13:36:47.426]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.409] The total size of the 1 globals is 160 bytes (160 bytes)
[13:36:47.426]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.411] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[13:36:47.426]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.411] - globals: [1] ‘data’
[13:36:47.426]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.411] 
[13:36:47.426]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.411] getGlobalsAndPackages() ... DONE
[13:36:47.427]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.411] run() for ‘Future’ ...
[13:36:47.427]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.411] - state: ‘created’
[13:36:47.427]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.412] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:47.427]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.412] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:47.427]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.412] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:47.427]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.412]   - Field: ‘label’
[13:36:47.427]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.412]   - Field: ‘local’
[13:36:47.427]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.412]   - Field: ‘owner’
[13:36:47.428]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.412]   - Field: ‘envir’
[13:36:47.428]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.412]   - Field: ‘packages’
[13:36:47.428]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.413]   - Field: ‘gc’
[13:36:47.428]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.413]   - Field: ‘conditions’
[13:36:47.428]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.413]   - Field: ‘expr’
[13:36:47.428]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.413]   - Field: ‘uuid’
[13:36:47.428]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.413]   - Field: ‘seed’
[13:36:47.428]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.413]   - Field: ‘version’
[13:36:47.429]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.413]   - Field: ‘result’
[13:36:47.429]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.413]   - Field: ‘asynchronous’
[13:36:47.429]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.413]   - Field: ‘calls’
[13:36:47.429]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.413]   - Field: ‘globals’
[13:36:47.429]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.414]   - Field: ‘stdout’
[13:36:47.429]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.414]   - Field: ‘earlySignal’
[13:36:47.429]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.414]   - Field: ‘lazy’
[13:36:47.429]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.414]   - Field: ‘state’
[13:36:47.430]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.414] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:47.430]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.414] - Launch lazy future ...
[13:36:47.430]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.414] Packages needed by the future expression (n = 0): <none>
[13:36:47.430]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.414] Packages needed by future strategies (n = 0): <none>
[13:36:47.430]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.415] {
[13:36:47.415]     {
[13:36:47.415]         {
[13:36:47.415]             ...future.startTime <- base::Sys.time()
[13:36:47.415]             {
[13:36:47.415]                 {
[13:36:47.415]                   {
[13:36:47.415]                     base::local({
[13:36:47.415]                       has_future <- base::requireNamespace("future", 
[13:36:47.415]                         quietly = TRUE)
[13:36:47.415]                       if (has_future) {
[13:36:47.415]                         ns <- base::getNamespace("future")
[13:36:47.415]                         version <- ns[[".package"]][["version"]]
[13:36:47.415]                         if (is.null(version)) 
[13:36:47.415]                           version <- utils::packageVersion("future")
[13:36:47.415]                       }
[13:36:47.415]                       else {
[13:36:47.415]                         version <- NULL
[13:36:47.415]                       }
[13:36:47.415]                       if (!has_future || version < "1.8.0") {
[13:36:47.415]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:47.415]                           "", base::R.version$version.string), 
[13:36:47.415]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:47.415]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:47.415]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:47.415]                             "release", "version")], collapse = " "), 
[13:36:47.415]                           hostname = base::Sys.info()[["nodename"]])
[13:36:47.415]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:47.415]                           info)
[13:36:47.415]                         info <- base::paste(info, collapse = "; ")
[13:36:47.415]                         if (!has_future) {
[13:36:47.415]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:47.415]                             info)
[13:36:47.415]                         }
[13:36:47.415]                         else {
[13:36:47.415]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:47.415]                             info, version)
[13:36:47.415]                         }
[13:36:47.415]                         base::stop(msg)
[13:36:47.415]                       }
[13:36:47.415]                     })
[13:36:47.415]                   }
[13:36:47.415]                   ...future.strategy.old <- future::plan("list")
[13:36:47.415]                   options(future.plan = NULL)
[13:36:47.415]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:47.415]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:47.415]                 }
[13:36:47.415]                 ...future.workdir <- getwd()
[13:36:47.415]             }
[13:36:47.415]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:47.415]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:47.415]         }
[13:36:47.415]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[13:36:47.415]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:47.415]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[13:36:47.415]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:47.415]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:47.415]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:47.415]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:47.415]             base::names(...future.oldOptions))
[13:36:47.415]     }
[13:36:47.415]     if (FALSE) {
[13:36:47.415]     }
[13:36:47.415]     else {
[13:36:47.415]         if (TRUE) {
[13:36:47.415]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:47.415]                 open = "w")
[13:36:47.415]         }
[13:36:47.415]         else {
[13:36:47.415]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:47.415]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:47.415]         }
[13:36:47.415]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:47.415]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:47.415]             base::sink(type = "output", split = FALSE)
[13:36:47.415]             base::close(...future.stdout)
[13:36:47.415]         }, add = TRUE)
[13:36:47.415]     }
[13:36:47.415]     ...future.frame <- base::sys.nframe()
[13:36:47.415]     ...future.conditions <- base::list()
[13:36:47.415]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:47.415]     if (FALSE) {
[13:36:47.415]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:47.415]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:47.415]     }
[13:36:47.415]     ...future.result <- base::tryCatch({
[13:36:47.415]         base::withCallingHandlers({
[13:36:47.415]             ...future.value <- base::withVisible(base::local(subset(data, 
[13:36:47.415]                 x < 3)$y))
[13:36:47.415]             future::FutureResult(value = ...future.value$value, 
[13:36:47.415]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:47.415]                   ...future.rng), globalenv = if (FALSE) 
[13:36:47.415]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:47.415]                     ...future.globalenv.names))
[13:36:47.415]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:47.415]         }, condition = base::local({
[13:36:47.415]             c <- base::c
[13:36:47.415]             inherits <- base::inherits
[13:36:47.415]             invokeRestart <- base::invokeRestart
[13:36:47.415]             length <- base::length
[13:36:47.415]             list <- base::list
[13:36:47.415]             seq.int <- base::seq.int
[13:36:47.415]             signalCondition <- base::signalCondition
[13:36:47.415]             sys.calls <- base::sys.calls
[13:36:47.415]             `[[` <- base::`[[`
[13:36:47.415]             `+` <- base::`+`
[13:36:47.415]             `<<-` <- base::`<<-`
[13:36:47.415]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:47.415]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:47.415]                   3L)]
[13:36:47.415]             }
[13:36:47.415]             function(cond) {
[13:36:47.415]                 is_error <- inherits(cond, "error")
[13:36:47.415]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:47.415]                   NULL)
[13:36:47.415]                 if (is_error) {
[13:36:47.415]                   sessionInformation <- function() {
[13:36:47.415]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:47.415]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:47.415]                       search = base::search(), system = base::Sys.info())
[13:36:47.415]                   }
[13:36:47.415]                   ...future.conditions[[length(...future.conditions) + 
[13:36:47.415]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:47.415]                     cond$call), session = sessionInformation(), 
[13:36:47.415]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:47.415]                   signalCondition(cond)
[13:36:47.415]                 }
[13:36:47.415]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:47.415]                 "immediateCondition"))) {
[13:36:47.415]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:47.415]                   ...future.conditions[[length(...future.conditions) + 
[13:36:47.415]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:47.415]                   if (TRUE && !signal) {
[13:36:47.415]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:47.415]                     {
[13:36:47.415]                       inherits <- base::inherits
[13:36:47.415]                       invokeRestart <- base::invokeRestart
[13:36:47.415]                       is.null <- base::is.null
[13:36:47.415]                       muffled <- FALSE
[13:36:47.415]                       if (inherits(cond, "message")) {
[13:36:47.415]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:47.415]                         if (muffled) 
[13:36:47.415]                           invokeRestart("muffleMessage")
[13:36:47.415]                       }
[13:36:47.415]                       else if (inherits(cond, "warning")) {
[13:36:47.415]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:47.415]                         if (muffled) 
[13:36:47.415]                           invokeRestart("muffleWarning")
[13:36:47.415]                       }
[13:36:47.415]                       else if (inherits(cond, "condition")) {
[13:36:47.415]                         if (!is.null(pattern)) {
[13:36:47.415]                           computeRestarts <- base::computeRestarts
[13:36:47.415]                           grepl <- base::grepl
[13:36:47.415]                           restarts <- computeRestarts(cond)
[13:36:47.415]                           for (restart in restarts) {
[13:36:47.415]                             name <- restart$name
[13:36:47.415]                             if (is.null(name)) 
[13:36:47.415]                               next
[13:36:47.415]                             if (!grepl(pattern, name)) 
[13:36:47.415]                               next
[13:36:47.415]                             invokeRestart(restart)
[13:36:47.415]                             muffled <- TRUE
[13:36:47.415]                             break
[13:36:47.415]                           }
[13:36:47.415]                         }
[13:36:47.415]                       }
[13:36:47.415]                       invisible(muffled)
[13:36:47.415]                     }
[13:36:47.415]                     muffleCondition(cond, pattern = "^muffle")
[13:36:47.415]                   }
[13:36:47.415]                 }
[13:36:47.415]                 else {
[13:36:47.415]                   if (TRUE) {
[13:36:47.415]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:47.415]                     {
[13:36:47.415]                       inherits <- base::inherits
[13:36:47.415]                       invokeRestart <- base::invokeRestart
[13:36:47.415]                       is.null <- base::is.null
[13:36:47.415]                       muffled <- FALSE
[13:36:47.415]                       if (inherits(cond, "message")) {
[13:36:47.415]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:47.415]                         if (muffled) 
[13:36:47.415]                           invokeRestart("muffleMessage")
[13:36:47.415]                       }
[13:36:47.415]                       else if (inherits(cond, "warning")) {
[13:36:47.415]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:47.415]                         if (muffled) 
[13:36:47.415]                           invokeRestart("muffleWarning")
[13:36:47.415]                       }
[13:36:47.415]                       else if (inherits(cond, "condition")) {
[13:36:47.415]                         if (!is.null(pattern)) {
[13:36:47.415]                           computeRestarts <- base::computeRestarts
[13:36:47.415]                           grepl <- base::grepl
[13:36:47.415]                           restarts <- computeRestarts(cond)
[13:36:47.415]                           for (restart in restarts) {
[13:36:47.415]                             name <- restart$name
[13:36:47.415]                             if (is.null(name)) 
[13:36:47.415]                               next
[13:36:47.415]                             if (!grepl(pattern, name)) 
[13:36:47.415]                               next
[13:36:47.415]                             invokeRestart(restart)
[13:36:47.415]                             muffled <- TRUE
[13:36:47.415]                             break
[13:36:47.415]                           }
[13:36:47.415]                         }
[13:36:47.415]                       }
[13:36:47.415]                       invisible(muffled)
[13:36:47.415]                     }
[13:36:47.415]                     muffleCondition(cond, pattern = "^muffle")
[13:36:47.415]                   }
[13:36:47.415]                 }
[13:36:47.415]             }
[13:36:47.415]         }))
[13:36:47.415]     }, error = function(ex) {
[13:36:47.415]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:47.415]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:47.415]                 ...future.rng), started = ...future.startTime, 
[13:36:47.415]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:47.415]             version = "1.8"), class = "FutureResult")
[13:36:47.415]     }, finally = {
[13:36:47.415]         if (!identical(...future.workdir, getwd())) 
[13:36:47.415]             setwd(...future.workdir)
[13:36:47.415]         {
[13:36:47.415]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:47.415]                 ...future.oldOptions$nwarnings <- NULL
[13:36:47.415]             }
[13:36:47.415]             base::options(...future.oldOptions)
[13:36:47.415]             if (.Platform$OS.type == "windows") {
[13:36:47.415]                 old_names <- names(...future.oldEnvVars)
[13:36:47.415]                 envs <- base::Sys.getenv()
[13:36:47.415]                 names <- names(envs)
[13:36:47.415]                 common <- intersect(names, old_names)
[13:36:47.415]                 added <- setdiff(names, old_names)
[13:36:47.415]                 removed <- setdiff(old_names, names)
[13:36:47.415]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:47.415]                   envs[common]]
[13:36:47.415]                 NAMES <- toupper(changed)
[13:36:47.415]                 args <- list()
[13:36:47.415]                 for (kk in seq_along(NAMES)) {
[13:36:47.415]                   name <- changed[[kk]]
[13:36:47.415]                   NAME <- NAMES[[kk]]
[13:36:47.415]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:47.415]                     next
[13:36:47.415]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:47.415]                 }
[13:36:47.415]                 NAMES <- toupper(added)
[13:36:47.415]                 for (kk in seq_along(NAMES)) {
[13:36:47.415]                   name <- added[[kk]]
[13:36:47.415]                   NAME <- NAMES[[kk]]
[13:36:47.415]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:47.415]                     next
[13:36:47.415]                   args[[name]] <- ""
[13:36:47.415]                 }
[13:36:47.415]                 NAMES <- toupper(removed)
[13:36:47.415]                 for (kk in seq_along(NAMES)) {
[13:36:47.415]                   name <- removed[[kk]]
[13:36:47.415]                   NAME <- NAMES[[kk]]
[13:36:47.415]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:47.415]                     next
[13:36:47.415]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:47.415]                 }
[13:36:47.415]                 if (length(args) > 0) 
[13:36:47.415]                   base::do.call(base::Sys.setenv, args = args)
[13:36:47.415]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:47.415]             }
[13:36:47.415]             else {
[13:36:47.415]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:47.415]             }
[13:36:47.415]             {
[13:36:47.415]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:47.415]                   0L) {
[13:36:47.415]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:47.415]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:47.415]                   base::options(opts)
[13:36:47.415]                 }
[13:36:47.415]                 {
[13:36:47.415]                   {
[13:36:47.415]                     NULL
[13:36:47.415]                     RNGkind("Mersenne-Twister")
[13:36:47.415]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:47.415]                       inherits = FALSE)
[13:36:47.415]                   }
[13:36:47.415]                   options(future.plan = NULL)
[13:36:47.415]                   if (is.na(NA_character_)) 
[13:36:47.415]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:47.415]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:47.415]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:47.415]                     .init = FALSE)
[13:36:47.415]                 }
[13:36:47.415]             }
[13:36:47.415]         }
[13:36:47.415]     })
[13:36:47.415]     if (TRUE) {
[13:36:47.415]         base::sink(type = "output", split = FALSE)
[13:36:47.415]         if (TRUE) {
[13:36:47.415]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:47.415]         }
[13:36:47.415]         else {
[13:36:47.415]             ...future.result["stdout"] <- base::list(NULL)
[13:36:47.415]         }
[13:36:47.415]         base::close(...future.stdout)
[13:36:47.415]         ...future.stdout <- NULL
[13:36:47.415]     }
[13:36:47.415]     ...future.result$conditions <- ...future.conditions
[13:36:47.415]     ...future.result$finished <- base::Sys.time()
[13:36:47.415]     ...future.result
[13:36:47.415] }
[13:36:47.430]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.416] assign_globals() ...
[13:36:47.430]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.416] List of 1
[13:36:47.416]  $ data:'data.frame':	5 obs. of  2 variables:
[13:36:47.416]   ..$ x: int [1:5] 1 2 3 4 5
[13:36:47.416]   ..$ y: int [1:5] 1 2 3 4 5
[13:36:47.416]  - attr(*, "where")=List of 1
[13:36:47.416]   ..$ data:<environment: R_EmptyEnv> 
[13:36:47.416]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:47.416]  - attr(*, "resolved")= logi FALSE
[13:36:47.416]  - attr(*, "total_size")= num 160
[13:36:47.416]  - attr(*, "already-done")= logi TRUE
[13:36:47.430]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.419] - copied ‘data’ to environment
[13:36:47.431]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.419] assign_globals() ... done
[13:36:47.431]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.420] plan(): Setting new future strategy stack:
[13:36:47.431]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.420] List of future strategies:
[13:36:47.420] 1. sequential:
[13:36:47.420]    - args: function (..., envir = parent.frame())
[13:36:47.420]    - tweaked: FALSE
[13:36:47.420]    - call: NULL
[13:36:47.431]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.420] plan(): nbrOfWorkers() = 1
[13:36:47.431]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.421] plan(): Setting new future strategy stack:
[13:36:47.431]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.421] List of future strategies:
[13:36:47.421] 1. sequential:
[13:36:47.421]    - args: function (..., envir = parent.frame())
[13:36:47.421]    - tweaked: FALSE
[13:36:47.421]    - call: plan(list(sequential, strategy))
[13:36:47.431]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.421] plan(): nbrOfWorkers() = 1
[13:36:47.431]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.422] SequentialFuture started (and completed)
[13:36:47.432]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.422] - Launch lazy future ... done
[13:36:47.432]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.422] run() for ‘SequentialFuture’ ... done
[13:36:47.432] signalConditions() ... done
- Strategy: sequential ... DONE
- Strategy: multicore ...
[13:36:47.432] plan(): Setting new future strategy stack:
[13:36:47.432] List of future strategies:
[13:36:47.432] 1. multicore:
[13:36:47.432]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:47.432]    - tweaked: FALSE
[13:36:47.432]    - call: plan(strategy)
[13:36:47.436] plan(): nbrOfWorkers() = 2
[13:36:47.437] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:47.437] Searching for globals...
[13:36:47.438] - globals found: [1] ‘getOption’
[13:36:47.438] Searching for globals ... DONE
[13:36:47.438] Resolving globals: FALSE
[13:36:47.438] 
[13:36:47.438] 
[13:36:47.439] getGlobalsAndPackages() ... DONE
[13:36:47.439] run() for ‘Future’ ...
[13:36:47.439] - state: ‘created’
[13:36:47.439] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:36:47.442] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:47.442] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:36:47.443]   - Field: ‘label’
[13:36:47.443]   - Field: ‘local’
[13:36:47.443]   - Field: ‘owner’
[13:36:47.443]   - Field: ‘envir’
[13:36:47.443]   - Field: ‘workers’
[13:36:47.443]   - Field: ‘packages’
[13:36:47.443]   - Field: ‘gc’
[13:36:47.443]   - Field: ‘job’
[13:36:47.443]   - Field: ‘conditions’
[13:36:47.443]   - Field: ‘expr’
[13:36:47.444]   - Field: ‘uuid’
[13:36:47.444]   - Field: ‘seed’
[13:36:47.444]   - Field: ‘version’
[13:36:47.444]   - Field: ‘result’
[13:36:47.444]   - Field: ‘asynchronous’
[13:36:47.444]   - Field: ‘calls’
[13:36:47.444]   - Field: ‘globals’
[13:36:47.444]   - Field: ‘stdout’
[13:36:47.444]   - Field: ‘earlySignal’
[13:36:47.444]   - Field: ‘lazy’
[13:36:47.444]   - Field: ‘state’
[13:36:47.444] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:36:47.445] - Launch lazy future ...
[13:36:47.445] Packages needed by the future expression (n = 0): <none>
[13:36:47.446] Packages needed by future strategies (n = 0): <none>
[13:36:47.446] {
[13:36:47.446]     {
[13:36:47.446]         {
[13:36:47.446]             ...future.startTime <- base::Sys.time()
[13:36:47.446]             {
[13:36:47.446]                 {
[13:36:47.446]                   {
[13:36:47.446]                     {
[13:36:47.446]                       base::local({
[13:36:47.446]                         has_future <- base::requireNamespace("future", 
[13:36:47.446]                           quietly = TRUE)
[13:36:47.446]                         if (has_future) {
[13:36:47.446]                           ns <- base::getNamespace("future")
[13:36:47.446]                           version <- ns[[".package"]][["version"]]
[13:36:47.446]                           if (is.null(version)) 
[13:36:47.446]                             version <- utils::packageVersion("future")
[13:36:47.446]                         }
[13:36:47.446]                         else {
[13:36:47.446]                           version <- NULL
[13:36:47.446]                         }
[13:36:47.446]                         if (!has_future || version < "1.8.0") {
[13:36:47.446]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:47.446]                             "", base::R.version$version.string), 
[13:36:47.446]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:47.446]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:47.446]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:47.446]                               "release", "version")], collapse = " "), 
[13:36:47.446]                             hostname = base::Sys.info()[["nodename"]])
[13:36:47.446]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:47.446]                             info)
[13:36:47.446]                           info <- base::paste(info, collapse = "; ")
[13:36:47.446]                           if (!has_future) {
[13:36:47.446]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:47.446]                               info)
[13:36:47.446]                           }
[13:36:47.446]                           else {
[13:36:47.446]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:47.446]                               info, version)
[13:36:47.446]                           }
[13:36:47.446]                           base::stop(msg)
[13:36:47.446]                         }
[13:36:47.446]                       })
[13:36:47.446]                     }
[13:36:47.446]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:47.446]                     base::options(mc.cores = 1L)
[13:36:47.446]                   }
[13:36:47.446]                   ...future.strategy.old <- future::plan("list")
[13:36:47.446]                   options(future.plan = NULL)
[13:36:47.446]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:47.446]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:47.446]                 }
[13:36:47.446]                 ...future.workdir <- getwd()
[13:36:47.446]             }
[13:36:47.446]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:47.446]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:47.446]         }
[13:36:47.446]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:36:47.446]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:47.446]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:36:47.446]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:47.446]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:47.446]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:47.446]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:47.446]             base::names(...future.oldOptions))
[13:36:47.446]     }
[13:36:47.446]     if (FALSE) {
[13:36:47.446]     }
[13:36:47.446]     else {
[13:36:47.446]         if (TRUE) {
[13:36:47.446]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:47.446]                 open = "w")
[13:36:47.446]         }
[13:36:47.446]         else {
[13:36:47.446]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:47.446]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:47.446]         }
[13:36:47.446]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:47.446]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:47.446]             base::sink(type = "output", split = FALSE)
[13:36:47.446]             base::close(...future.stdout)
[13:36:47.446]         }, add = TRUE)
[13:36:47.446]     }
[13:36:47.446]     ...future.frame <- base::sys.nframe()
[13:36:47.446]     ...future.conditions <- base::list()
[13:36:47.446]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:47.446]     if (FALSE) {
[13:36:47.446]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:47.446]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:47.446]     }
[13:36:47.446]     ...future.result <- base::tryCatch({
[13:36:47.446]         base::withCallingHandlers({
[13:36:47.446]             ...future.value <- base::withVisible(base::local({
[13:36:47.446]                 withCallingHandlers({
[13:36:47.446]                   getOption("future.globals.onMissing")
[13:36:47.446]                 }, immediateCondition = function(cond) {
[13:36:47.446]                   save_rds <- function (object, pathname, ...) 
[13:36:47.446]                   {
[13:36:47.446]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:47.446]                     if (file_test("-f", pathname_tmp)) {
[13:36:47.446]                       fi_tmp <- file.info(pathname_tmp)
[13:36:47.446]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:47.446]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:47.446]                         fi_tmp[["mtime"]])
[13:36:47.446]                     }
[13:36:47.446]                     tryCatch({
[13:36:47.446]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:47.446]                     }, error = function(ex) {
[13:36:47.446]                       msg <- conditionMessage(ex)
[13:36:47.446]                       fi_tmp <- file.info(pathname_tmp)
[13:36:47.446]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:47.446]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:47.446]                         fi_tmp[["mtime"]], msg)
[13:36:47.446]                       ex$message <- msg
[13:36:47.446]                       stop(ex)
[13:36:47.446]                     })
[13:36:47.446]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:47.446]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:47.446]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:47.446]                       fi_tmp <- file.info(pathname_tmp)
[13:36:47.446]                       fi <- file.info(pathname)
[13:36:47.446]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:47.446]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:47.446]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:47.446]                         fi[["size"]], fi[["mtime"]])
[13:36:47.446]                       stop(msg)
[13:36:47.446]                     }
[13:36:47.446]                     invisible(pathname)
[13:36:47.446]                   }
[13:36:47.446]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:47.446]                     rootPath = tempdir()) 
[13:36:47.446]                   {
[13:36:47.446]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:47.446]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:47.446]                       tmpdir = path, fileext = ".rds")
[13:36:47.446]                     save_rds(obj, file)
[13:36:47.446]                   }
[13:36:47.446]                   saveImmediateCondition(cond, path = "/tmp/Rtmp52Mhxq/.future/immediateConditions")
[13:36:47.446]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:47.446]                   {
[13:36:47.446]                     inherits <- base::inherits
[13:36:47.446]                     invokeRestart <- base::invokeRestart
[13:36:47.446]                     is.null <- base::is.null
[13:36:47.446]                     muffled <- FALSE
[13:36:47.446]                     if (inherits(cond, "message")) {
[13:36:47.446]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:47.446]                       if (muffled) 
[13:36:47.446]                         invokeRestart("muffleMessage")
[13:36:47.446]                     }
[13:36:47.446]                     else if (inherits(cond, "warning")) {
[13:36:47.446]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:47.446]                       if (muffled) 
[13:36:47.446]                         invokeRestart("muffleWarning")
[13:36:47.446]                     }
[13:36:47.446]                     else if (inherits(cond, "condition")) {
[13:36:47.446]                       if (!is.null(pattern)) {
[13:36:47.446]                         computeRestarts <- base::computeRestarts
[13:36:47.446]                         grepl <- base::grepl
[13:36:47.446]                         restarts <- computeRestarts(cond)
[13:36:47.446]                         for (restart in restarts) {
[13:36:47.446]                           name <- restart$name
[13:36:47.446]                           if (is.null(name)) 
[13:36:47.446]                             next
[13:36:47.446]                           if (!grepl(pattern, name)) 
[13:36:47.446]                             next
[13:36:47.446]                           invokeRestart(restart)
[13:36:47.446]                           muffled <- TRUE
[13:36:47.446]                           break
[13:36:47.446]                         }
[13:36:47.446]                       }
[13:36:47.446]                     }
[13:36:47.446]                     invisible(muffled)
[13:36:47.446]                   }
[13:36:47.446]                   muffleCondition(cond)
[13:36:47.446]                 })
[13:36:47.446]             }))
[13:36:47.446]             future::FutureResult(value = ...future.value$value, 
[13:36:47.446]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:47.446]                   ...future.rng), globalenv = if (FALSE) 
[13:36:47.446]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:47.446]                     ...future.globalenv.names))
[13:36:47.446]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:47.446]         }, condition = base::local({
[13:36:47.446]             c <- base::c
[13:36:47.446]             inherits <- base::inherits
[13:36:47.446]             invokeRestart <- base::invokeRestart
[13:36:47.446]             length <- base::length
[13:36:47.446]             list <- base::list
[13:36:47.446]             seq.int <- base::seq.int
[13:36:47.446]             signalCondition <- base::signalCondition
[13:36:47.446]             sys.calls <- base::sys.calls
[13:36:47.446]             `[[` <- base::`[[`
[13:36:47.446]             `+` <- base::`+`
[13:36:47.446]             `<<-` <- base::`<<-`
[13:36:47.446]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:47.446]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:47.446]                   3L)]
[13:36:47.446]             }
[13:36:47.446]             function(cond) {
[13:36:47.446]                 is_error <- inherits(cond, "error")
[13:36:47.446]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:47.446]                   NULL)
[13:36:47.446]                 if (is_error) {
[13:36:47.446]                   sessionInformation <- function() {
[13:36:47.446]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:47.446]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:47.446]                       search = base::search(), system = base::Sys.info())
[13:36:47.446]                   }
[13:36:47.446]                   ...future.conditions[[length(...future.conditions) + 
[13:36:47.446]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:47.446]                     cond$call), session = sessionInformation(), 
[13:36:47.446]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:47.446]                   signalCondition(cond)
[13:36:47.446]                 }
[13:36:47.446]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:47.446]                 "immediateCondition"))) {
[13:36:47.446]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:47.446]                   ...future.conditions[[length(...future.conditions) + 
[13:36:47.446]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:47.446]                   if (TRUE && !signal) {
[13:36:47.446]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:47.446]                     {
[13:36:47.446]                       inherits <- base::inherits
[13:36:47.446]                       invokeRestart <- base::invokeRestart
[13:36:47.446]                       is.null <- base::is.null
[13:36:47.446]                       muffled <- FALSE
[13:36:47.446]                       if (inherits(cond, "message")) {
[13:36:47.446]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:47.446]                         if (muffled) 
[13:36:47.446]                           invokeRestart("muffleMessage")
[13:36:47.446]                       }
[13:36:47.446]                       else if (inherits(cond, "warning")) {
[13:36:47.446]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:47.446]                         if (muffled) 
[13:36:47.446]                           invokeRestart("muffleWarning")
[13:36:47.446]                       }
[13:36:47.446]                       else if (inherits(cond, "condition")) {
[13:36:47.446]                         if (!is.null(pattern)) {
[13:36:47.446]                           computeRestarts <- base::computeRestarts
[13:36:47.446]                           grepl <- base::grepl
[13:36:47.446]                           restarts <- computeRestarts(cond)
[13:36:47.446]                           for (restart in restarts) {
[13:36:47.446]                             name <- restart$name
[13:36:47.446]                             if (is.null(name)) 
[13:36:47.446]                               next
[13:36:47.446]                             if (!grepl(pattern, name)) 
[13:36:47.446]                               next
[13:36:47.446]                             invokeRestart(restart)
[13:36:47.446]                             muffled <- TRUE
[13:36:47.446]                             break
[13:36:47.446]                           }
[13:36:47.446]                         }
[13:36:47.446]                       }
[13:36:47.446]                       invisible(muffled)
[13:36:47.446]                     }
[13:36:47.446]                     muffleCondition(cond, pattern = "^muffle")
[13:36:47.446]                   }
[13:36:47.446]                 }
[13:36:47.446]                 else {
[13:36:47.446]                   if (TRUE) {
[13:36:47.446]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:47.446]                     {
[13:36:47.446]                       inherits <- base::inherits
[13:36:47.446]                       invokeRestart <- base::invokeRestart
[13:36:47.446]                       is.null <- base::is.null
[13:36:47.446]                       muffled <- FALSE
[13:36:47.446]                       if (inherits(cond, "message")) {
[13:36:47.446]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:47.446]                         if (muffled) 
[13:36:47.446]                           invokeRestart("muffleMessage")
[13:36:47.446]                       }
[13:36:47.446]                       else if (inherits(cond, "warning")) {
[13:36:47.446]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:47.446]                         if (muffled) 
[13:36:47.446]                           invokeRestart("muffleWarning")
[13:36:47.446]                       }
[13:36:47.446]                       else if (inherits(cond, "condition")) {
[13:36:47.446]                         if (!is.null(pattern)) {
[13:36:47.446]                           computeRestarts <- base::computeRestarts
[13:36:47.446]                           grepl <- base::grepl
[13:36:47.446]                           restarts <- computeRestarts(cond)
[13:36:47.446]                           for (restart in restarts) {
[13:36:47.446]                             name <- restart$name
[13:36:47.446]                             if (is.null(name)) 
[13:36:47.446]                               next
[13:36:47.446]                             if (!grepl(pattern, name)) 
[13:36:47.446]                               next
[13:36:47.446]                             invokeRestart(restart)
[13:36:47.446]                             muffled <- TRUE
[13:36:47.446]                             break
[13:36:47.446]                           }
[13:36:47.446]                         }
[13:36:47.446]                       }
[13:36:47.446]                       invisible(muffled)
[13:36:47.446]                     }
[13:36:47.446]                     muffleCondition(cond, pattern = "^muffle")
[13:36:47.446]                   }
[13:36:47.446]                 }
[13:36:47.446]             }
[13:36:47.446]         }))
[13:36:47.446]     }, error = function(ex) {
[13:36:47.446]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:47.446]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:47.446]                 ...future.rng), started = ...future.startTime, 
[13:36:47.446]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:47.446]             version = "1.8"), class = "FutureResult")
[13:36:47.446]     }, finally = {
[13:36:47.446]         if (!identical(...future.workdir, getwd())) 
[13:36:47.446]             setwd(...future.workdir)
[13:36:47.446]         {
[13:36:47.446]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:47.446]                 ...future.oldOptions$nwarnings <- NULL
[13:36:47.446]             }
[13:36:47.446]             base::options(...future.oldOptions)
[13:36:47.446]             if (.Platform$OS.type == "windows") {
[13:36:47.446]                 old_names <- names(...future.oldEnvVars)
[13:36:47.446]                 envs <- base::Sys.getenv()
[13:36:47.446]                 names <- names(envs)
[13:36:47.446]                 common <- intersect(names, old_names)
[13:36:47.446]                 added <- setdiff(names, old_names)
[13:36:47.446]                 removed <- setdiff(old_names, names)
[13:36:47.446]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:47.446]                   envs[common]]
[13:36:47.446]                 NAMES <- toupper(changed)
[13:36:47.446]                 args <- list()
[13:36:47.446]                 for (kk in seq_along(NAMES)) {
[13:36:47.446]                   name <- changed[[kk]]
[13:36:47.446]                   NAME <- NAMES[[kk]]
[13:36:47.446]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:47.446]                     next
[13:36:47.446]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:47.446]                 }
[13:36:47.446]                 NAMES <- toupper(added)
[13:36:47.446]                 for (kk in seq_along(NAMES)) {
[13:36:47.446]                   name <- added[[kk]]
[13:36:47.446]                   NAME <- NAMES[[kk]]
[13:36:47.446]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:47.446]                     next
[13:36:47.446]                   args[[name]] <- ""
[13:36:47.446]                 }
[13:36:47.446]                 NAMES <- toupper(removed)
[13:36:47.446]                 for (kk in seq_along(NAMES)) {
[13:36:47.446]                   name <- removed[[kk]]
[13:36:47.446]                   NAME <- NAMES[[kk]]
[13:36:47.446]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:47.446]                     next
[13:36:47.446]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:47.446]                 }
[13:36:47.446]                 if (length(args) > 0) 
[13:36:47.446]                   base::do.call(base::Sys.setenv, args = args)
[13:36:47.446]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:47.446]             }
[13:36:47.446]             else {
[13:36:47.446]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:47.446]             }
[13:36:47.446]             {
[13:36:47.446]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:47.446]                   0L) {
[13:36:47.446]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:47.446]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:47.446]                   base::options(opts)
[13:36:47.446]                 }
[13:36:47.446]                 {
[13:36:47.446]                   {
[13:36:47.446]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:47.446]                     NULL
[13:36:47.446]                   }
[13:36:47.446]                   options(future.plan = NULL)
[13:36:47.446]                   if (is.na(NA_character_)) 
[13:36:47.446]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:47.446]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:47.446]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:47.446]                     .init = FALSE)
[13:36:47.446]                 }
[13:36:47.446]             }
[13:36:47.446]         }
[13:36:47.446]     })
[13:36:47.446]     if (TRUE) {
[13:36:47.446]         base::sink(type = "output", split = FALSE)
[13:36:47.446]         if (TRUE) {
[13:36:47.446]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:47.446]         }
[13:36:47.446]         else {
[13:36:47.446]             ...future.result["stdout"] <- base::list(NULL)
[13:36:47.446]         }
[13:36:47.446]         base::close(...future.stdout)
[13:36:47.446]         ...future.stdout <- NULL
[13:36:47.446]     }
[13:36:47.446]     ...future.result$conditions <- ...future.conditions
[13:36:47.446]     ...future.result$finished <- base::Sys.time()
[13:36:47.446]     ...future.result
[13:36:47.446] }
[13:36:47.448] requestCore(): workers = 2
[13:36:47.451] MulticoreFuture started
[13:36:47.452] - Launch lazy future ... done
[13:36:47.452] run() for ‘MulticoreFuture’ ... done
[13:36:47.452] plan(): Setting new future strategy stack:
[13:36:47.452] List of future strategies:
[13:36:47.452] 1. sequential:
[13:36:47.452]    - args: function (..., envir = parent.frame())
[13:36:47.452]    - tweaked: FALSE
[13:36:47.452]    - call: NULL
[13:36:47.453] plan(): nbrOfWorkers() = 1
[13:36:47.453] result() for MulticoreFuture ...
[13:36:47.455] plan(): Setting new future strategy stack:
[13:36:47.455] List of future strategies:
[13:36:47.455] 1. multicore:
[13:36:47.455]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:47.455]    - tweaked: FALSE
[13:36:47.455]    - call: plan(strategy)
[13:36:47.460] plan(): nbrOfWorkers() = 2
[13:36:47.464] result() for MulticoreFuture ...
[13:36:47.464] result() for MulticoreFuture ... done
[13:36:47.465] result() for MulticoreFuture ... done
[13:36:47.465] result() for MulticoreFuture ...
[13:36:47.465] result() for MulticoreFuture ... done
[13:36:47.465] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[13:36:47.466] Searching for globals...
[13:36:47.466] - globals found: [1] ‘getOption’
[13:36:47.466] Searching for globals ... DONE
[13:36:47.467] Resolving globals: FALSE
[13:36:47.467] 
[13:36:47.467] 
[13:36:47.467] getGlobalsAndPackages() ... DONE
[13:36:47.467] run() for ‘Future’ ...
[13:36:47.468] - state: ‘created’
[13:36:47.468] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:36:47.472] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:47.472] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:36:47.472]   - Field: ‘label’
[13:36:47.472]   - Field: ‘local’
[13:36:47.472]   - Field: ‘owner’
[13:36:47.472]   - Field: ‘envir’
[13:36:47.472]   - Field: ‘workers’
[13:36:47.473]   - Field: ‘packages’
[13:36:47.473]   - Field: ‘gc’
[13:36:47.473]   - Field: ‘job’
[13:36:47.473]   - Field: ‘conditions’
[13:36:47.473]   - Field: ‘expr’
[13:36:47.473]   - Field: ‘uuid’
[13:36:47.473]   - Field: ‘seed’
[13:36:47.473]   - Field: ‘version’
[13:36:47.473]   - Field: ‘result’
[13:36:47.474]   - Field: ‘asynchronous’
[13:36:47.474]   - Field: ‘calls’
[13:36:47.474]   - Field: ‘globals’
[13:36:47.474]   - Field: ‘stdout’
[13:36:47.474]   - Field: ‘earlySignal’
[13:36:47.474]   - Field: ‘lazy’
[13:36:47.474]   - Field: ‘state’
[13:36:47.474] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:36:47.474] - Launch lazy future ...
[13:36:47.475] Packages needed by the future expression (n = 0): <none>
[13:36:47.475] Packages needed by future strategies (n = 0): <none>
[13:36:47.475] {
[13:36:47.475]     {
[13:36:47.475]         {
[13:36:47.475]             ...future.startTime <- base::Sys.time()
[13:36:47.475]             {
[13:36:47.475]                 {
[13:36:47.475]                   {
[13:36:47.475]                     {
[13:36:47.475]                       base::local({
[13:36:47.475]                         has_future <- base::requireNamespace("future", 
[13:36:47.475]                           quietly = TRUE)
[13:36:47.475]                         if (has_future) {
[13:36:47.475]                           ns <- base::getNamespace("future")
[13:36:47.475]                           version <- ns[[".package"]][["version"]]
[13:36:47.475]                           if (is.null(version)) 
[13:36:47.475]                             version <- utils::packageVersion("future")
[13:36:47.475]                         }
[13:36:47.475]                         else {
[13:36:47.475]                           version <- NULL
[13:36:47.475]                         }
[13:36:47.475]                         if (!has_future || version < "1.8.0") {
[13:36:47.475]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:47.475]                             "", base::R.version$version.string), 
[13:36:47.475]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:47.475]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:47.475]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:47.475]                               "release", "version")], collapse = " "), 
[13:36:47.475]                             hostname = base::Sys.info()[["nodename"]])
[13:36:47.475]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:47.475]                             info)
[13:36:47.475]                           info <- base::paste(info, collapse = "; ")
[13:36:47.475]                           if (!has_future) {
[13:36:47.475]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:47.475]                               info)
[13:36:47.475]                           }
[13:36:47.475]                           else {
[13:36:47.475]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:47.475]                               info, version)
[13:36:47.475]                           }
[13:36:47.475]                           base::stop(msg)
[13:36:47.475]                         }
[13:36:47.475]                       })
[13:36:47.475]                     }
[13:36:47.475]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:47.475]                     base::options(mc.cores = 1L)
[13:36:47.475]                   }
[13:36:47.475]                   ...future.strategy.old <- future::plan("list")
[13:36:47.475]                   options(future.plan = NULL)
[13:36:47.475]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:47.475]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:47.475]                 }
[13:36:47.475]                 ...future.workdir <- getwd()
[13:36:47.475]             }
[13:36:47.475]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:47.475]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:47.475]         }
[13:36:47.475]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[13:36:47.475]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:47.475]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[13:36:47.475]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:47.475]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:47.475]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:47.475]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:47.475]             base::names(...future.oldOptions))
[13:36:47.475]     }
[13:36:47.475]     if (FALSE) {
[13:36:47.475]     }
[13:36:47.475]     else {
[13:36:47.475]         if (TRUE) {
[13:36:47.475]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:47.475]                 open = "w")
[13:36:47.475]         }
[13:36:47.475]         else {
[13:36:47.475]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:47.475]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:47.475]         }
[13:36:47.475]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:47.475]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:47.475]             base::sink(type = "output", split = FALSE)
[13:36:47.475]             base::close(...future.stdout)
[13:36:47.475]         }, add = TRUE)
[13:36:47.475]     }
[13:36:47.475]     ...future.frame <- base::sys.nframe()
[13:36:47.475]     ...future.conditions <- base::list()
[13:36:47.475]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:47.475]     if (FALSE) {
[13:36:47.475]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:47.475]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:47.475]     }
[13:36:47.475]     ...future.result <- base::tryCatch({
[13:36:47.475]         base::withCallingHandlers({
[13:36:47.475]             ...future.value <- base::withVisible(base::local({
[13:36:47.475]                 withCallingHandlers({
[13:36:47.475]                   getOption("future.globals.onMissing")
[13:36:47.475]                 }, immediateCondition = function(cond) {
[13:36:47.475]                   save_rds <- function (object, pathname, ...) 
[13:36:47.475]                   {
[13:36:47.475]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:47.475]                     if (file_test("-f", pathname_tmp)) {
[13:36:47.475]                       fi_tmp <- file.info(pathname_tmp)
[13:36:47.475]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:47.475]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:47.475]                         fi_tmp[["mtime"]])
[13:36:47.475]                     }
[13:36:47.475]                     tryCatch({
[13:36:47.475]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:47.475]                     }, error = function(ex) {
[13:36:47.475]                       msg <- conditionMessage(ex)
[13:36:47.475]                       fi_tmp <- file.info(pathname_tmp)
[13:36:47.475]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:47.475]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:47.475]                         fi_tmp[["mtime"]], msg)
[13:36:47.475]                       ex$message <- msg
[13:36:47.475]                       stop(ex)
[13:36:47.475]                     })
[13:36:47.475]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:47.475]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:47.475]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:47.475]                       fi_tmp <- file.info(pathname_tmp)
[13:36:47.475]                       fi <- file.info(pathname)
[13:36:47.475]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:47.475]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:47.475]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:47.475]                         fi[["size"]], fi[["mtime"]])
[13:36:47.475]                       stop(msg)
[13:36:47.475]                     }
[13:36:47.475]                     invisible(pathname)
[13:36:47.475]                   }
[13:36:47.475]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:47.475]                     rootPath = tempdir()) 
[13:36:47.475]                   {
[13:36:47.475]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:47.475]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:47.475]                       tmpdir = path, fileext = ".rds")
[13:36:47.475]                     save_rds(obj, file)
[13:36:47.475]                   }
[13:36:47.475]                   saveImmediateCondition(cond, path = "/tmp/Rtmp52Mhxq/.future/immediateConditions")
[13:36:47.475]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:47.475]                   {
[13:36:47.475]                     inherits <- base::inherits
[13:36:47.475]                     invokeRestart <- base::invokeRestart
[13:36:47.475]                     is.null <- base::is.null
[13:36:47.475]                     muffled <- FALSE
[13:36:47.475]                     if (inherits(cond, "message")) {
[13:36:47.475]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:47.475]                       if (muffled) 
[13:36:47.475]                         invokeRestart("muffleMessage")
[13:36:47.475]                     }
[13:36:47.475]                     else if (inherits(cond, "warning")) {
[13:36:47.475]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:47.475]                       if (muffled) 
[13:36:47.475]                         invokeRestart("muffleWarning")
[13:36:47.475]                     }
[13:36:47.475]                     else if (inherits(cond, "condition")) {
[13:36:47.475]                       if (!is.null(pattern)) {
[13:36:47.475]                         computeRestarts <- base::computeRestarts
[13:36:47.475]                         grepl <- base::grepl
[13:36:47.475]                         restarts <- computeRestarts(cond)
[13:36:47.475]                         for (restart in restarts) {
[13:36:47.475]                           name <- restart$name
[13:36:47.475]                           if (is.null(name)) 
[13:36:47.475]                             next
[13:36:47.475]                           if (!grepl(pattern, name)) 
[13:36:47.475]                             next
[13:36:47.475]                           invokeRestart(restart)
[13:36:47.475]                           muffled <- TRUE
[13:36:47.475]                           break
[13:36:47.475]                         }
[13:36:47.475]                       }
[13:36:47.475]                     }
[13:36:47.475]                     invisible(muffled)
[13:36:47.475]                   }
[13:36:47.475]                   muffleCondition(cond)
[13:36:47.475]                 })
[13:36:47.475]             }))
[13:36:47.475]             future::FutureResult(value = ...future.value$value, 
[13:36:47.475]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:47.475]                   ...future.rng), globalenv = if (FALSE) 
[13:36:47.475]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:47.475]                     ...future.globalenv.names))
[13:36:47.475]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:47.475]         }, condition = base::local({
[13:36:47.475]             c <- base::c
[13:36:47.475]             inherits <- base::inherits
[13:36:47.475]             invokeRestart <- base::invokeRestart
[13:36:47.475]             length <- base::length
[13:36:47.475]             list <- base::list
[13:36:47.475]             seq.int <- base::seq.int
[13:36:47.475]             signalCondition <- base::signalCondition
[13:36:47.475]             sys.calls <- base::sys.calls
[13:36:47.475]             `[[` <- base::`[[`
[13:36:47.475]             `+` <- base::`+`
[13:36:47.475]             `<<-` <- base::`<<-`
[13:36:47.475]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:47.475]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:47.475]                   3L)]
[13:36:47.475]             }
[13:36:47.475]             function(cond) {
[13:36:47.475]                 is_error <- inherits(cond, "error")
[13:36:47.475]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:47.475]                   NULL)
[13:36:47.475]                 if (is_error) {
[13:36:47.475]                   sessionInformation <- function() {
[13:36:47.475]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:47.475]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:47.475]                       search = base::search(), system = base::Sys.info())
[13:36:47.475]                   }
[13:36:47.475]                   ...future.conditions[[length(...future.conditions) + 
[13:36:47.475]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:47.475]                     cond$call), session = sessionInformation(), 
[13:36:47.475]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:47.475]                   signalCondition(cond)
[13:36:47.475]                 }
[13:36:47.475]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:47.475]                 "immediateCondition"))) {
[13:36:47.475]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:47.475]                   ...future.conditions[[length(...future.conditions) + 
[13:36:47.475]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:47.475]                   if (TRUE && !signal) {
[13:36:47.475]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:47.475]                     {
[13:36:47.475]                       inherits <- base::inherits
[13:36:47.475]                       invokeRestart <- base::invokeRestart
[13:36:47.475]                       is.null <- base::is.null
[13:36:47.475]                       muffled <- FALSE
[13:36:47.475]                       if (inherits(cond, "message")) {
[13:36:47.475]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:47.475]                         if (muffled) 
[13:36:47.475]                           invokeRestart("muffleMessage")
[13:36:47.475]                       }
[13:36:47.475]                       else if (inherits(cond, "warning")) {
[13:36:47.475]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:47.475]                         if (muffled) 
[13:36:47.475]                           invokeRestart("muffleWarning")
[13:36:47.475]                       }
[13:36:47.475]                       else if (inherits(cond, "condition")) {
[13:36:47.475]                         if (!is.null(pattern)) {
[13:36:47.475]                           computeRestarts <- base::computeRestarts
[13:36:47.475]                           grepl <- base::grepl
[13:36:47.475]                           restarts <- computeRestarts(cond)
[13:36:47.475]                           for (restart in restarts) {
[13:36:47.475]                             name <- restart$name
[13:36:47.475]                             if (is.null(name)) 
[13:36:47.475]                               next
[13:36:47.475]                             if (!grepl(pattern, name)) 
[13:36:47.475]                               next
[13:36:47.475]                             invokeRestart(restart)
[13:36:47.475]                             muffled <- TRUE
[13:36:47.475]                             break
[13:36:47.475]                           }
[13:36:47.475]                         }
[13:36:47.475]                       }
[13:36:47.475]                       invisible(muffled)
[13:36:47.475]                     }
[13:36:47.475]                     muffleCondition(cond, pattern = "^muffle")
[13:36:47.475]                   }
[13:36:47.475]                 }
[13:36:47.475]                 else {
[13:36:47.475]                   if (TRUE) {
[13:36:47.475]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:47.475]                     {
[13:36:47.475]                       inherits <- base::inherits
[13:36:47.475]                       invokeRestart <- base::invokeRestart
[13:36:47.475]                       is.null <- base::is.null
[13:36:47.475]                       muffled <- FALSE
[13:36:47.475]                       if (inherits(cond, "message")) {
[13:36:47.475]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:47.475]                         if (muffled) 
[13:36:47.475]                           invokeRestart("muffleMessage")
[13:36:47.475]                       }
[13:36:47.475]                       else if (inherits(cond, "warning")) {
[13:36:47.475]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:47.475]                         if (muffled) 
[13:36:47.475]                           invokeRestart("muffleWarning")
[13:36:47.475]                       }
[13:36:47.475]                       else if (inherits(cond, "condition")) {
[13:36:47.475]                         if (!is.null(pattern)) {
[13:36:47.475]                           computeRestarts <- base::computeRestarts
[13:36:47.475]                           grepl <- base::grepl
[13:36:47.475]                           restarts <- computeRestarts(cond)
[13:36:47.475]                           for (restart in restarts) {
[13:36:47.475]                             name <- restart$name
[13:36:47.475]                             if (is.null(name)) 
[13:36:47.475]                               next
[13:36:47.475]                             if (!grepl(pattern, name)) 
[13:36:47.475]                               next
[13:36:47.475]                             invokeRestart(restart)
[13:36:47.475]                             muffled <- TRUE
[13:36:47.475]                             break
[13:36:47.475]                           }
[13:36:47.475]                         }
[13:36:47.475]                       }
[13:36:47.475]                       invisible(muffled)
[13:36:47.475]                     }
[13:36:47.475]                     muffleCondition(cond, pattern = "^muffle")
[13:36:47.475]                   }
[13:36:47.475]                 }
[13:36:47.475]             }
[13:36:47.475]         }))
[13:36:47.475]     }, error = function(ex) {
[13:36:47.475]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:47.475]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:47.475]                 ...future.rng), started = ...future.startTime, 
[13:36:47.475]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:47.475]             version = "1.8"), class = "FutureResult")
[13:36:47.475]     }, finally = {
[13:36:47.475]         if (!identical(...future.workdir, getwd())) 
[13:36:47.475]             setwd(...future.workdir)
[13:36:47.475]         {
[13:36:47.475]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:47.475]                 ...future.oldOptions$nwarnings <- NULL
[13:36:47.475]             }
[13:36:47.475]             base::options(...future.oldOptions)
[13:36:47.475]             if (.Platform$OS.type == "windows") {
[13:36:47.475]                 old_names <- names(...future.oldEnvVars)
[13:36:47.475]                 envs <- base::Sys.getenv()
[13:36:47.475]                 names <- names(envs)
[13:36:47.475]                 common <- intersect(names, old_names)
[13:36:47.475]                 added <- setdiff(names, old_names)
[13:36:47.475]                 removed <- setdiff(old_names, names)
[13:36:47.475]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:47.475]                   envs[common]]
[13:36:47.475]                 NAMES <- toupper(changed)
[13:36:47.475]                 args <- list()
[13:36:47.475]                 for (kk in seq_along(NAMES)) {
[13:36:47.475]                   name <- changed[[kk]]
[13:36:47.475]                   NAME <- NAMES[[kk]]
[13:36:47.475]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:47.475]                     next
[13:36:47.475]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:47.475]                 }
[13:36:47.475]                 NAMES <- toupper(added)
[13:36:47.475]                 for (kk in seq_along(NAMES)) {
[13:36:47.475]                   name <- added[[kk]]
[13:36:47.475]                   NAME <- NAMES[[kk]]
[13:36:47.475]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:47.475]                     next
[13:36:47.475]                   args[[name]] <- ""
[13:36:47.475]                 }
[13:36:47.475]                 NAMES <- toupper(removed)
[13:36:47.475]                 for (kk in seq_along(NAMES)) {
[13:36:47.475]                   name <- removed[[kk]]
[13:36:47.475]                   NAME <- NAMES[[kk]]
[13:36:47.475]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:47.475]                     next
[13:36:47.475]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:47.475]                 }
[13:36:47.475]                 if (length(args) > 0) 
[13:36:47.475]                   base::do.call(base::Sys.setenv, args = args)
[13:36:47.475]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:47.475]             }
[13:36:47.475]             else {
[13:36:47.475]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:47.475]             }
[13:36:47.475]             {
[13:36:47.475]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:47.475]                   0L) {
[13:36:47.475]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:47.475]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:47.475]                   base::options(opts)
[13:36:47.475]                 }
[13:36:47.475]                 {
[13:36:47.475]                   {
[13:36:47.475]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:47.475]                     NULL
[13:36:47.475]                   }
[13:36:47.475]                   options(future.plan = NULL)
[13:36:47.475]                   if (is.na(NA_character_)) 
[13:36:47.475]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:47.475]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:47.475]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:47.475]                     .init = FALSE)
[13:36:47.475]                 }
[13:36:47.475]             }
[13:36:47.475]         }
[13:36:47.475]     })
[13:36:47.475]     if (TRUE) {
[13:36:47.475]         base::sink(type = "output", split = FALSE)
[13:36:47.475]         if (TRUE) {
[13:36:47.475]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:47.475]         }
[13:36:47.475]         else {
[13:36:47.475]             ...future.result["stdout"] <- base::list(NULL)
[13:36:47.475]         }
[13:36:47.475]         base::close(...future.stdout)
[13:36:47.475]         ...future.stdout <- NULL
[13:36:47.475]     }
[13:36:47.475]     ...future.result$conditions <- ...future.conditions
[13:36:47.475]     ...future.result$finished <- base::Sys.time()
[13:36:47.475]     ...future.result
[13:36:47.475] }
[13:36:47.478] requestCore(): workers = 2
[13:36:47.479] MulticoreFuture started
[13:36:47.480] - Launch lazy future ... done
[13:36:47.480] run() for ‘MulticoreFuture’ ... done
[13:36:47.480] result() for MulticoreFuture ...
[13:36:47.481] plan(): Setting new future strategy stack:
[13:36:47.481] List of future strategies:
[13:36:47.481] 1. sequential:
[13:36:47.481]    - args: function (..., envir = parent.frame())
[13:36:47.481]    - tweaked: FALSE
[13:36:47.481]    - call: NULL
[13:36:47.482] plan(): nbrOfWorkers() = 1
[13:36:47.483] plan(): Setting new future strategy stack:
[13:36:47.484] List of future strategies:
[13:36:47.484] 1. multicore:
[13:36:47.484]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:47.484]    - tweaked: FALSE
[13:36:47.484]    - call: plan(strategy)
[13:36:47.489] plan(): nbrOfWorkers() = 2
[13:36:47.490] result() for MulticoreFuture ...
[13:36:47.490] result() for MulticoreFuture ... done
[13:36:47.490] result() for MulticoreFuture ... done
[13:36:47.490] result() for MulticoreFuture ...
[13:36:47.490] result() for MulticoreFuture ... done
[13:36:47.491] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:47.491] Searching for globals...
[13:36:47.492] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[13:36:47.493] Searching for globals...
[13:36:47.494] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[13:36:47.494] Searching for globals ... DONE
[13:36:47.494] Resolving globals: FALSE
[13:36:47.495] The total size of the 1 globals is 160 bytes (160 bytes)
[13:36:47.495] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[13:36:47.498] - globals: [1] ‘data’
[13:36:47.498] 
[13:36:47.498] getGlobalsAndPackages() ... DONE
[13:36:47.499] run() for ‘Future’ ...
[13:36:47.499] - state: ‘created’
[13:36:47.499] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:36:47.503] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:47.503] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:36:47.503]   - Field: ‘label’
[13:36:47.503]   - Field: ‘local’
[13:36:47.504]   - Field: ‘owner’
[13:36:47.504]   - Field: ‘envir’
[13:36:47.504]   - Field: ‘workers’
[13:36:47.504]   - Field: ‘packages’
[13:36:47.504]   - Field: ‘gc’
[13:36:47.504]   - Field: ‘job’
[13:36:47.504]   - Field: ‘conditions’
[13:36:47.504]   - Field: ‘expr’
[13:36:47.505]   - Field: ‘uuid’
[13:36:47.505]   - Field: ‘seed’
[13:36:47.505]   - Field: ‘version’
[13:36:47.505]   - Field: ‘result’
[13:36:47.505]   - Field: ‘asynchronous’
[13:36:47.505]   - Field: ‘calls’
[13:36:47.505]   - Field: ‘globals’
[13:36:47.505]   - Field: ‘stdout’
[13:36:47.506]   - Field: ‘earlySignal’
[13:36:47.506]   - Field: ‘lazy’
[13:36:47.506]   - Field: ‘state’
[13:36:47.506] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:36:47.506] - Launch lazy future ...
[13:36:47.506] Packages needed by the future expression (n = 0): <none>
[13:36:47.506] Packages needed by future strategies (n = 0): <none>
[13:36:47.507] {
[13:36:47.507]     {
[13:36:47.507]         {
[13:36:47.507]             ...future.startTime <- base::Sys.time()
[13:36:47.507]             {
[13:36:47.507]                 {
[13:36:47.507]                   {
[13:36:47.507]                     {
[13:36:47.507]                       base::local({
[13:36:47.507]                         has_future <- base::requireNamespace("future", 
[13:36:47.507]                           quietly = TRUE)
[13:36:47.507]                         if (has_future) {
[13:36:47.507]                           ns <- base::getNamespace("future")
[13:36:47.507]                           version <- ns[[".package"]][["version"]]
[13:36:47.507]                           if (is.null(version)) 
[13:36:47.507]                             version <- utils::packageVersion("future")
[13:36:47.507]                         }
[13:36:47.507]                         else {
[13:36:47.507]                           version <- NULL
[13:36:47.507]                         }
[13:36:47.507]                         if (!has_future || version < "1.8.0") {
[13:36:47.507]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:47.507]                             "", base::R.version$version.string), 
[13:36:47.507]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:47.507]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:47.507]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:47.507]                               "release", "version")], collapse = " "), 
[13:36:47.507]                             hostname = base::Sys.info()[["nodename"]])
[13:36:47.507]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:47.507]                             info)
[13:36:47.507]                           info <- base::paste(info, collapse = "; ")
[13:36:47.507]                           if (!has_future) {
[13:36:47.507]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:47.507]                               info)
[13:36:47.507]                           }
[13:36:47.507]                           else {
[13:36:47.507]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:47.507]                               info, version)
[13:36:47.507]                           }
[13:36:47.507]                           base::stop(msg)
[13:36:47.507]                         }
[13:36:47.507]                       })
[13:36:47.507]                     }
[13:36:47.507]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:47.507]                     base::options(mc.cores = 1L)
[13:36:47.507]                   }
[13:36:47.507]                   ...future.strategy.old <- future::plan("list")
[13:36:47.507]                   options(future.plan = NULL)
[13:36:47.507]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:47.507]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:47.507]                 }
[13:36:47.507]                 ...future.workdir <- getwd()
[13:36:47.507]             }
[13:36:47.507]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:47.507]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:47.507]         }
[13:36:47.507]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[13:36:47.507]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:47.507]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[13:36:47.507]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:47.507]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:47.507]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:47.507]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:47.507]             base::names(...future.oldOptions))
[13:36:47.507]     }
[13:36:47.507]     if (FALSE) {
[13:36:47.507]     }
[13:36:47.507]     else {
[13:36:47.507]         if (TRUE) {
[13:36:47.507]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:47.507]                 open = "w")
[13:36:47.507]         }
[13:36:47.507]         else {
[13:36:47.507]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:47.507]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:47.507]         }
[13:36:47.507]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:47.507]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:47.507]             base::sink(type = "output", split = FALSE)
[13:36:47.507]             base::close(...future.stdout)
[13:36:47.507]         }, add = TRUE)
[13:36:47.507]     }
[13:36:47.507]     ...future.frame <- base::sys.nframe()
[13:36:47.507]     ...future.conditions <- base::list()
[13:36:47.507]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:47.507]     if (FALSE) {
[13:36:47.507]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:47.507]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:47.507]     }
[13:36:47.507]     ...future.result <- base::tryCatch({
[13:36:47.507]         base::withCallingHandlers({
[13:36:47.507]             ...future.value <- base::withVisible(base::local({
[13:36:47.507]                 withCallingHandlers({
[13:36:47.507]                   subset(data, x < 3)$y
[13:36:47.507]                 }, immediateCondition = function(cond) {
[13:36:47.507]                   save_rds <- function (object, pathname, ...) 
[13:36:47.507]                   {
[13:36:47.507]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:47.507]                     if (file_test("-f", pathname_tmp)) {
[13:36:47.507]                       fi_tmp <- file.info(pathname_tmp)
[13:36:47.507]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:47.507]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:47.507]                         fi_tmp[["mtime"]])
[13:36:47.507]                     }
[13:36:47.507]                     tryCatch({
[13:36:47.507]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:47.507]                     }, error = function(ex) {
[13:36:47.507]                       msg <- conditionMessage(ex)
[13:36:47.507]                       fi_tmp <- file.info(pathname_tmp)
[13:36:47.507]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:47.507]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:47.507]                         fi_tmp[["mtime"]], msg)
[13:36:47.507]                       ex$message <- msg
[13:36:47.507]                       stop(ex)
[13:36:47.507]                     })
[13:36:47.507]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:47.507]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:47.507]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:47.507]                       fi_tmp <- file.info(pathname_tmp)
[13:36:47.507]                       fi <- file.info(pathname)
[13:36:47.507]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:47.507]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:47.507]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:47.507]                         fi[["size"]], fi[["mtime"]])
[13:36:47.507]                       stop(msg)
[13:36:47.507]                     }
[13:36:47.507]                     invisible(pathname)
[13:36:47.507]                   }
[13:36:47.507]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:47.507]                     rootPath = tempdir()) 
[13:36:47.507]                   {
[13:36:47.507]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:47.507]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:47.507]                       tmpdir = path, fileext = ".rds")
[13:36:47.507]                     save_rds(obj, file)
[13:36:47.507]                   }
[13:36:47.507]                   saveImmediateCondition(cond, path = "/tmp/Rtmp52Mhxq/.future/immediateConditions")
[13:36:47.507]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:47.507]                   {
[13:36:47.507]                     inherits <- base::inherits
[13:36:47.507]                     invokeRestart <- base::invokeRestart
[13:36:47.507]                     is.null <- base::is.null
[13:36:47.507]                     muffled <- FALSE
[13:36:47.507]                     if (inherits(cond, "message")) {
[13:36:47.507]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:47.507]                       if (muffled) 
[13:36:47.507]                         invokeRestart("muffleMessage")
[13:36:47.507]                     }
[13:36:47.507]                     else if (inherits(cond, "warning")) {
[13:36:47.507]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:47.507]                       if (muffled) 
[13:36:47.507]                         invokeRestart("muffleWarning")
[13:36:47.507]                     }
[13:36:47.507]                     else if (inherits(cond, "condition")) {
[13:36:47.507]                       if (!is.null(pattern)) {
[13:36:47.507]                         computeRestarts <- base::computeRestarts
[13:36:47.507]                         grepl <- base::grepl
[13:36:47.507]                         restarts <- computeRestarts(cond)
[13:36:47.507]                         for (restart in restarts) {
[13:36:47.507]                           name <- restart$name
[13:36:47.507]                           if (is.null(name)) 
[13:36:47.507]                             next
[13:36:47.507]                           if (!grepl(pattern, name)) 
[13:36:47.507]                             next
[13:36:47.507]                           invokeRestart(restart)
[13:36:47.507]                           muffled <- TRUE
[13:36:47.507]                           break
[13:36:47.507]                         }
[13:36:47.507]                       }
[13:36:47.507]                     }
[13:36:47.507]                     invisible(muffled)
[13:36:47.507]                   }
[13:36:47.507]                   muffleCondition(cond)
[13:36:47.507]                 })
[13:36:47.507]             }))
[13:36:47.507]             future::FutureResult(value = ...future.value$value, 
[13:36:47.507]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:47.507]                   ...future.rng), globalenv = if (FALSE) 
[13:36:47.507]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:47.507]                     ...future.globalenv.names))
[13:36:47.507]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:47.507]         }, condition = base::local({
[13:36:47.507]             c <- base::c
[13:36:47.507]             inherits <- base::inherits
[13:36:47.507]             invokeRestart <- base::invokeRestart
[13:36:47.507]             length <- base::length
[13:36:47.507]             list <- base::list
[13:36:47.507]             seq.int <- base::seq.int
[13:36:47.507]             signalCondition <- base::signalCondition
[13:36:47.507]             sys.calls <- base::sys.calls
[13:36:47.507]             `[[` <- base::`[[`
[13:36:47.507]             `+` <- base::`+`
[13:36:47.507]             `<<-` <- base::`<<-`
[13:36:47.507]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:47.507]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:47.507]                   3L)]
[13:36:47.507]             }
[13:36:47.507]             function(cond) {
[13:36:47.507]                 is_error <- inherits(cond, "error")
[13:36:47.507]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:47.507]                   NULL)
[13:36:47.507]                 if (is_error) {
[13:36:47.507]                   sessionInformation <- function() {
[13:36:47.507]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:47.507]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:47.507]                       search = base::search(), system = base::Sys.info())
[13:36:47.507]                   }
[13:36:47.507]                   ...future.conditions[[length(...future.conditions) + 
[13:36:47.507]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:47.507]                     cond$call), session = sessionInformation(), 
[13:36:47.507]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:47.507]                   signalCondition(cond)
[13:36:47.507]                 }
[13:36:47.507]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:47.507]                 "immediateCondition"))) {
[13:36:47.507]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:47.507]                   ...future.conditions[[length(...future.conditions) + 
[13:36:47.507]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:47.507]                   if (TRUE && !signal) {
[13:36:47.507]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:47.507]                     {
[13:36:47.507]                       inherits <- base::inherits
[13:36:47.507]                       invokeRestart <- base::invokeRestart
[13:36:47.507]                       is.null <- base::is.null
[13:36:47.507]                       muffled <- FALSE
[13:36:47.507]                       if (inherits(cond, "message")) {
[13:36:47.507]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:47.507]                         if (muffled) 
[13:36:47.507]                           invokeRestart("muffleMessage")
[13:36:47.507]                       }
[13:36:47.507]                       else if (inherits(cond, "warning")) {
[13:36:47.507]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:47.507]                         if (muffled) 
[13:36:47.507]                           invokeRestart("muffleWarning")
[13:36:47.507]                       }
[13:36:47.507]                       else if (inherits(cond, "condition")) {
[13:36:47.507]                         if (!is.null(pattern)) {
[13:36:47.507]                           computeRestarts <- base::computeRestarts
[13:36:47.507]                           grepl <- base::grepl
[13:36:47.507]                           restarts <- computeRestarts(cond)
[13:36:47.507]                           for (restart in restarts) {
[13:36:47.507]                             name <- restart$name
[13:36:47.507]                             if (is.null(name)) 
[13:36:47.507]                               next
[13:36:47.507]                             if (!grepl(pattern, name)) 
[13:36:47.507]                               next
[13:36:47.507]                             invokeRestart(restart)
[13:36:47.507]                             muffled <- TRUE
[13:36:47.507]                             break
[13:36:47.507]                           }
[13:36:47.507]                         }
[13:36:47.507]                       }
[13:36:47.507]                       invisible(muffled)
[13:36:47.507]                     }
[13:36:47.507]                     muffleCondition(cond, pattern = "^muffle")
[13:36:47.507]                   }
[13:36:47.507]                 }
[13:36:47.507]                 else {
[13:36:47.507]                   if (TRUE) {
[13:36:47.507]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:47.507]                     {
[13:36:47.507]                       inherits <- base::inherits
[13:36:47.507]                       invokeRestart <- base::invokeRestart
[13:36:47.507]                       is.null <- base::is.null
[13:36:47.507]                       muffled <- FALSE
[13:36:47.507]                       if (inherits(cond, "message")) {
[13:36:47.507]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:47.507]                         if (muffled) 
[13:36:47.507]                           invokeRestart("muffleMessage")
[13:36:47.507]                       }
[13:36:47.507]                       else if (inherits(cond, "warning")) {
[13:36:47.507]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:47.507]                         if (muffled) 
[13:36:47.507]                           invokeRestart("muffleWarning")
[13:36:47.507]                       }
[13:36:47.507]                       else if (inherits(cond, "condition")) {
[13:36:47.507]                         if (!is.null(pattern)) {
[13:36:47.507]                           computeRestarts <- base::computeRestarts
[13:36:47.507]                           grepl <- base::grepl
[13:36:47.507]                           restarts <- computeRestarts(cond)
[13:36:47.507]                           for (restart in restarts) {
[13:36:47.507]                             name <- restart$name
[13:36:47.507]                             if (is.null(name)) 
[13:36:47.507]                               next
[13:36:47.507]                             if (!grepl(pattern, name)) 
[13:36:47.507]                               next
[13:36:47.507]                             invokeRestart(restart)
[13:36:47.507]                             muffled <- TRUE
[13:36:47.507]                             break
[13:36:47.507]                           }
[13:36:47.507]                         }
[13:36:47.507]                       }
[13:36:47.507]                       invisible(muffled)
[13:36:47.507]                     }
[13:36:47.507]                     muffleCondition(cond, pattern = "^muffle")
[13:36:47.507]                   }
[13:36:47.507]                 }
[13:36:47.507]             }
[13:36:47.507]         }))
[13:36:47.507]     }, error = function(ex) {
[13:36:47.507]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:47.507]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:47.507]                 ...future.rng), started = ...future.startTime, 
[13:36:47.507]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:47.507]             version = "1.8"), class = "FutureResult")
[13:36:47.507]     }, finally = {
[13:36:47.507]         if (!identical(...future.workdir, getwd())) 
[13:36:47.507]             setwd(...future.workdir)
[13:36:47.507]         {
[13:36:47.507]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:47.507]                 ...future.oldOptions$nwarnings <- NULL
[13:36:47.507]             }
[13:36:47.507]             base::options(...future.oldOptions)
[13:36:47.507]             if (.Platform$OS.type == "windows") {
[13:36:47.507]                 old_names <- names(...future.oldEnvVars)
[13:36:47.507]                 envs <- base::Sys.getenv()
[13:36:47.507]                 names <- names(envs)
[13:36:47.507]                 common <- intersect(names, old_names)
[13:36:47.507]                 added <- setdiff(names, old_names)
[13:36:47.507]                 removed <- setdiff(old_names, names)
[13:36:47.507]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:47.507]                   envs[common]]
[13:36:47.507]                 NAMES <- toupper(changed)
[13:36:47.507]                 args <- list()
[13:36:47.507]                 for (kk in seq_along(NAMES)) {
[13:36:47.507]                   name <- changed[[kk]]
[13:36:47.507]                   NAME <- NAMES[[kk]]
[13:36:47.507]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:47.507]                     next
[13:36:47.507]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:47.507]                 }
[13:36:47.507]                 NAMES <- toupper(added)
[13:36:47.507]                 for (kk in seq_along(NAMES)) {
[13:36:47.507]                   name <- added[[kk]]
[13:36:47.507]                   NAME <- NAMES[[kk]]
[13:36:47.507]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:47.507]                     next
[13:36:47.507]                   args[[name]] <- ""
[13:36:47.507]                 }
[13:36:47.507]                 NAMES <- toupper(removed)
[13:36:47.507]                 for (kk in seq_along(NAMES)) {
[13:36:47.507]                   name <- removed[[kk]]
[13:36:47.507]                   NAME <- NAMES[[kk]]
[13:36:47.507]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:47.507]                     next
[13:36:47.507]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:47.507]                 }
[13:36:47.507]                 if (length(args) > 0) 
[13:36:47.507]                   base::do.call(base::Sys.setenv, args = args)
[13:36:47.507]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:47.507]             }
[13:36:47.507]             else {
[13:36:47.507]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:47.507]             }
[13:36:47.507]             {
[13:36:47.507]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:47.507]                   0L) {
[13:36:47.507]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:47.507]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:47.507]                   base::options(opts)
[13:36:47.507]                 }
[13:36:47.507]                 {
[13:36:47.507]                   {
[13:36:47.507]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:47.507]                     NULL
[13:36:47.507]                   }
[13:36:47.507]                   options(future.plan = NULL)
[13:36:47.507]                   if (is.na(NA_character_)) 
[13:36:47.507]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:47.507]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:47.507]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:47.507]                     .init = FALSE)
[13:36:47.507]                 }
[13:36:47.507]             }
[13:36:47.507]         }
[13:36:47.507]     })
[13:36:47.507]     if (TRUE) {
[13:36:47.507]         base::sink(type = "output", split = FALSE)
[13:36:47.507]         if (TRUE) {
[13:36:47.507]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:47.507]         }
[13:36:47.507]         else {
[13:36:47.507]             ...future.result["stdout"] <- base::list(NULL)
[13:36:47.507]         }
[13:36:47.507]         base::close(...future.stdout)
[13:36:47.507]         ...future.stdout <- NULL
[13:36:47.507]     }
[13:36:47.507]     ...future.result$conditions <- ...future.conditions
[13:36:47.507]     ...future.result$finished <- base::Sys.time()
[13:36:47.507]     ...future.result
[13:36:47.507] }
[13:36:47.509] assign_globals() ...
[13:36:47.509] List of 1
[13:36:47.509]  $ data:'data.frame':	5 obs. of  2 variables:
[13:36:47.509]   ..$ x: int [1:5] 1 2 3 4 5
[13:36:47.509]   ..$ y: int [1:5] 1 2 3 4 5
[13:36:47.509]  - attr(*, "where")=List of 1
[13:36:47.509]   ..$ data:<environment: R_EmptyEnv> 
[13:36:47.509]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:47.509]  - attr(*, "resolved")= logi FALSE
[13:36:47.509]  - attr(*, "total_size")= num 160
[13:36:47.509]  - attr(*, "already-done")= logi TRUE
[13:36:47.513] - copied ‘data’ to environment
[13:36:47.513] assign_globals() ... done
[13:36:47.513] requestCore(): workers = 2
[13:36:47.515] MulticoreFuture started
[13:36:47.515] - Launch lazy future ... done
[13:36:47.516] run() for ‘MulticoreFuture’ ... done
[13:36:47.516] result() for MulticoreFuture ...
[13:36:47.516] plan(): Setting new future strategy stack:
[13:36:47.516] List of future strategies:
[13:36:47.516] 1. sequential:
[13:36:47.516]    - args: function (..., envir = parent.frame())
[13:36:47.516]    - tweaked: FALSE
[13:36:47.516]    - call: NULL
[13:36:47.517] plan(): nbrOfWorkers() = 1
[13:36:47.519] plan(): Setting new future strategy stack:
[13:36:47.519] List of future strategies:
[13:36:47.519] 1. multicore:
[13:36:47.519]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:47.519]    - tweaked: FALSE
[13:36:47.519]    - call: plan(strategy)
[13:36:47.524] plan(): nbrOfWorkers() = 2
[13:36:47.525] result() for MulticoreFuture ...
[13:36:47.525] result() for MulticoreFuture ... done
[13:36:47.526] result() for MulticoreFuture ... done
[13:36:47.526] result() for MulticoreFuture ...
[13:36:47.526] result() for MulticoreFuture ... done
[13:36:47.526] plan(): Setting new future strategy stack:
[13:36:47.526] List of future strategies:
[13:36:47.526] 1. sequential:
[13:36:47.526]    - args: function (..., envir = parent.frame())
[13:36:47.526]    - tweaked: FALSE
[13:36:47.526]    - call: plan(list(sequential, strategy))
[13:36:47.526] 2. multicore:
[13:36:47.526]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:47.526]    - tweaked: FALSE
[13:36:47.526]    - call: plan(list(sequential, strategy))
[13:36:47.527] plan(): nbrOfWorkers() = 1
[13:36:47.527] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[13:36:47.528] Searching for globals...
[13:36:47.531] - globals found: [8] ‘{’, ‘<-’, ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’, ‘%<-%’
[13:36:47.531] Searching for globals ... DONE
[13:36:47.531] Resolving globals: FALSE
[13:36:47.532] The total size of the 1 globals is 160 bytes (160 bytes)
[13:36:47.533] The total size of the 1 globals exported for future expression (‘{; a %<-% subset(data, x < 3)$y; a; }’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[13:36:47.533] - globals: [1] ‘data’
[13:36:47.533] - packages: [1] ‘future’
[13:36:47.533] getGlobalsAndPackages() ... DONE
[13:36:47.533] run() for ‘Future’ ...
[13:36:47.534] - state: ‘created’
[13:36:47.534] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:47.534] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:47.534] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:47.534]   - Field: ‘label’
[13:36:47.534]   - Field: ‘local’
[13:36:47.535]   - Field: ‘owner’
[13:36:47.535]   - Field: ‘envir’
[13:36:47.535]   - Field: ‘packages’
[13:36:47.535]   - Field: ‘gc’
[13:36:47.535]   - Field: ‘conditions’
[13:36:47.535]   - Field: ‘expr’
[13:36:47.535]   - Field: ‘uuid’
[13:36:47.535]   - Field: ‘seed’
[13:36:47.535]   - Field: ‘version’
[13:36:47.536]   - Field: ‘result’
[13:36:47.536]   - Field: ‘asynchronous’
[13:36:47.536]   - Field: ‘calls’
[13:36:47.536]   - Field: ‘globals’
[13:36:47.536]   - Field: ‘stdout’
[13:36:47.536]   - Field: ‘earlySignal’
[13:36:47.536]   - Field: ‘lazy’
[13:36:47.536]   - Field: ‘state’
[13:36:47.536] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:47.537] - Launch lazy future ...
[13:36:47.537] Packages needed by the future expression (n = 1): ‘future’
[13:36:47.537] Packages needed by future strategies (n = 1): ‘future’
[13:36:47.537] {
[13:36:47.537]     {
[13:36:47.537]         {
[13:36:47.537]             ...future.startTime <- base::Sys.time()
[13:36:47.537]             {
[13:36:47.537]                 {
[13:36:47.537]                   {
[13:36:47.537]                     {
[13:36:47.537]                       base::local({
[13:36:47.537]                         has_future <- base::requireNamespace("future", 
[13:36:47.537]                           quietly = TRUE)
[13:36:47.537]                         if (has_future) {
[13:36:47.537]                           ns <- base::getNamespace("future")
[13:36:47.537]                           version <- ns[[".package"]][["version"]]
[13:36:47.537]                           if (is.null(version)) 
[13:36:47.537]                             version <- utils::packageVersion("future")
[13:36:47.537]                         }
[13:36:47.537]                         else {
[13:36:47.537]                           version <- NULL
[13:36:47.537]                         }
[13:36:47.537]                         if (!has_future || version < "1.8.0") {
[13:36:47.537]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:47.537]                             "", base::R.version$version.string), 
[13:36:47.537]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:47.537]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:47.537]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:47.537]                               "release", "version")], collapse = " "), 
[13:36:47.537]                             hostname = base::Sys.info()[["nodename"]])
[13:36:47.537]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:47.537]                             info)
[13:36:47.537]                           info <- base::paste(info, collapse = "; ")
[13:36:47.537]                           if (!has_future) {
[13:36:47.537]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:47.537]                               info)
[13:36:47.537]                           }
[13:36:47.537]                           else {
[13:36:47.537]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:47.537]                               info, version)
[13:36:47.537]                           }
[13:36:47.537]                           base::stop(msg)
[13:36:47.537]                         }
[13:36:47.537]                       })
[13:36:47.537]                     }
[13:36:47.537]                     base::local({
[13:36:47.537]                       for (pkg in "future") {
[13:36:47.537]                         base::loadNamespace(pkg)
[13:36:47.537]                         base::library(pkg, character.only = TRUE)
[13:36:47.537]                       }
[13:36:47.537]                     })
[13:36:47.537]                   }
[13:36:47.537]                   ...future.strategy.old <- future::plan("list")
[13:36:47.537]                   options(future.plan = NULL)
[13:36:47.537]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:47.537]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:36:47.537]                     envir = parent.frame()) 
[13:36:47.537]                   {
[13:36:47.537]                     default_workers <- missing(workers)
[13:36:47.537]                     if (is.function(workers)) 
[13:36:47.537]                       workers <- workers()
[13:36:47.537]                     workers <- structure(as.integer(workers), 
[13:36:47.537]                       class = class(workers))
[13:36:47.537]                     stop_if_not(is.finite(workers), workers >= 
[13:36:47.537]                       1L)
[13:36:47.537]                     if ((workers == 1L && !inherits(workers, 
[13:36:47.537]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:36:47.537]                       if (default_workers) 
[13:36:47.537]                         supportsMulticore(warn = TRUE)
[13:36:47.537]                       return(sequential(..., envir = envir))
[13:36:47.537]                     }
[13:36:47.537]                     oopts <- options(mc.cores = workers)
[13:36:47.537]                     on.exit(options(oopts))
[13:36:47.537]                     future <- MulticoreFuture(..., workers = workers, 
[13:36:47.537]                       envir = envir)
[13:36:47.537]                     if (!future$lazy) 
[13:36:47.537]                       future <- run(future)
[13:36:47.537]                     invisible(future)
[13:36:47.537]                   }), .cleanup = FALSE, .init = FALSE)
[13:36:47.537]                 }
[13:36:47.537]                 ...future.workdir <- getwd()
[13:36:47.537]             }
[13:36:47.537]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:47.537]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:47.537]         }
[13:36:47.537]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[13:36:47.537]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:47.537]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[13:36:47.537]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:47.537]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:47.537]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:47.537]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:47.537]             base::names(...future.oldOptions))
[13:36:47.537]     }
[13:36:47.537]     if (FALSE) {
[13:36:47.537]     }
[13:36:47.537]     else {
[13:36:47.537]         if (TRUE) {
[13:36:47.537]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:47.537]                 open = "w")
[13:36:47.537]         }
[13:36:47.537]         else {
[13:36:47.537]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:47.537]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:47.537]         }
[13:36:47.537]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:47.537]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:47.537]             base::sink(type = "output", split = FALSE)
[13:36:47.537]             base::close(...future.stdout)
[13:36:47.537]         }, add = TRUE)
[13:36:47.537]     }
[13:36:47.537]     ...future.frame <- base::sys.nframe()
[13:36:47.537]     ...future.conditions <- base::list()
[13:36:47.537]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:47.537]     if (FALSE) {
[13:36:47.537]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:47.537]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:47.537]     }
[13:36:47.537]     ...future.result <- base::tryCatch({
[13:36:47.537]         base::withCallingHandlers({
[13:36:47.537]             ...future.value <- base::withVisible(base::local({
[13:36:47.537]                 a %<-% subset(data, x < 3)$y
[13:36:47.537]                 a
[13:36:47.537]             }))
[13:36:47.537]             future::FutureResult(value = ...future.value$value, 
[13:36:47.537]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:47.537]                   ...future.rng), globalenv = if (FALSE) 
[13:36:47.537]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:47.537]                     ...future.globalenv.names))
[13:36:47.537]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:47.537]         }, condition = base::local({
[13:36:47.537]             c <- base::c
[13:36:47.537]             inherits <- base::inherits
[13:36:47.537]             invokeRestart <- base::invokeRestart
[13:36:47.537]             length <- base::length
[13:36:47.537]             list <- base::list
[13:36:47.537]             seq.int <- base::seq.int
[13:36:47.537]             signalCondition <- base::signalCondition
[13:36:47.537]             sys.calls <- base::sys.calls
[13:36:47.537]             `[[` <- base::`[[`
[13:36:47.537]             `+` <- base::`+`
[13:36:47.537]             `<<-` <- base::`<<-`
[13:36:47.537]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:47.537]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:47.537]                   3L)]
[13:36:47.537]             }
[13:36:47.537]             function(cond) {
[13:36:47.537]                 is_error <- inherits(cond, "error")
[13:36:47.537]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:47.537]                   NULL)
[13:36:47.537]                 if (is_error) {
[13:36:47.537]                   sessionInformation <- function() {
[13:36:47.537]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:47.537]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:47.537]                       search = base::search(), system = base::Sys.info())
[13:36:47.537]                   }
[13:36:47.537]                   ...future.conditions[[length(...future.conditions) + 
[13:36:47.537]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:47.537]                     cond$call), session = sessionInformation(), 
[13:36:47.537]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:47.537]                   signalCondition(cond)
[13:36:47.537]                 }
[13:36:47.537]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:47.537]                 "immediateCondition"))) {
[13:36:47.537]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:47.537]                   ...future.conditions[[length(...future.conditions) + 
[13:36:47.537]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:47.537]                   if (TRUE && !signal) {
[13:36:47.537]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:47.537]                     {
[13:36:47.537]                       inherits <- base::inherits
[13:36:47.537]                       invokeRestart <- base::invokeRestart
[13:36:47.537]                       is.null <- base::is.null
[13:36:47.537]                       muffled <- FALSE
[13:36:47.537]                       if (inherits(cond, "message")) {
[13:36:47.537]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:47.537]                         if (muffled) 
[13:36:47.537]                           invokeRestart("muffleMessage")
[13:36:47.537]                       }
[13:36:47.537]                       else if (inherits(cond, "warning")) {
[13:36:47.537]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:47.537]                         if (muffled) 
[13:36:47.537]                           invokeRestart("muffleWarning")
[13:36:47.537]                       }
[13:36:47.537]                       else if (inherits(cond, "condition")) {
[13:36:47.537]                         if (!is.null(pattern)) {
[13:36:47.537]                           computeRestarts <- base::computeRestarts
[13:36:47.537]                           grepl <- base::grepl
[13:36:47.537]                           restarts <- computeRestarts(cond)
[13:36:47.537]                           for (restart in restarts) {
[13:36:47.537]                             name <- restart$name
[13:36:47.537]                             if (is.null(name)) 
[13:36:47.537]                               next
[13:36:47.537]                             if (!grepl(pattern, name)) 
[13:36:47.537]                               next
[13:36:47.537]                             invokeRestart(restart)
[13:36:47.537]                             muffled <- TRUE
[13:36:47.537]                             break
[13:36:47.537]                           }
[13:36:47.537]                         }
[13:36:47.537]                       }
[13:36:47.537]                       invisible(muffled)
[13:36:47.537]                     }
[13:36:47.537]                     muffleCondition(cond, pattern = "^muffle")
[13:36:47.537]                   }
[13:36:47.537]                 }
[13:36:47.537]                 else {
[13:36:47.537]                   if (TRUE) {
[13:36:47.537]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:47.537]                     {
[13:36:47.537]                       inherits <- base::inherits
[13:36:47.537]                       invokeRestart <- base::invokeRestart
[13:36:47.537]                       is.null <- base::is.null
[13:36:47.537]                       muffled <- FALSE
[13:36:47.537]                       if (inherits(cond, "message")) {
[13:36:47.537]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:47.537]                         if (muffled) 
[13:36:47.537]                           invokeRestart("muffleMessage")
[13:36:47.537]                       }
[13:36:47.537]                       else if (inherits(cond, "warning")) {
[13:36:47.537]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:47.537]                         if (muffled) 
[13:36:47.537]                           invokeRestart("muffleWarning")
[13:36:47.537]                       }
[13:36:47.537]                       else if (inherits(cond, "condition")) {
[13:36:47.537]                         if (!is.null(pattern)) {
[13:36:47.537]                           computeRestarts <- base::computeRestarts
[13:36:47.537]                           grepl <- base::grepl
[13:36:47.537]                           restarts <- computeRestarts(cond)
[13:36:47.537]                           for (restart in restarts) {
[13:36:47.537]                             name <- restart$name
[13:36:47.537]                             if (is.null(name)) 
[13:36:47.537]                               next
[13:36:47.537]                             if (!grepl(pattern, name)) 
[13:36:47.537]                               next
[13:36:47.537]                             invokeRestart(restart)
[13:36:47.537]                             muffled <- TRUE
[13:36:47.537]                             break
[13:36:47.537]                           }
[13:36:47.537]                         }
[13:36:47.537]                       }
[13:36:47.537]                       invisible(muffled)
[13:36:47.537]                     }
[13:36:47.537]                     muffleCondition(cond, pattern = "^muffle")
[13:36:47.537]                   }
[13:36:47.537]                 }
[13:36:47.537]             }
[13:36:47.537]         }))
[13:36:47.537]     }, error = function(ex) {
[13:36:47.537]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:47.537]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:47.537]                 ...future.rng), started = ...future.startTime, 
[13:36:47.537]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:47.537]             version = "1.8"), class = "FutureResult")
[13:36:47.537]     }, finally = {
[13:36:47.537]         if (!identical(...future.workdir, getwd())) 
[13:36:47.537]             setwd(...future.workdir)
[13:36:47.537]         {
[13:36:47.537]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:47.537]                 ...future.oldOptions$nwarnings <- NULL
[13:36:47.537]             }
[13:36:47.537]             base::options(...future.oldOptions)
[13:36:47.537]             if (.Platform$OS.type == "windows") {
[13:36:47.537]                 old_names <- names(...future.oldEnvVars)
[13:36:47.537]                 envs <- base::Sys.getenv()
[13:36:47.537]                 names <- names(envs)
[13:36:47.537]                 common <- intersect(names, old_names)
[13:36:47.537]                 added <- setdiff(names, old_names)
[13:36:47.537]                 removed <- setdiff(old_names, names)
[13:36:47.537]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:47.537]                   envs[common]]
[13:36:47.537]                 NAMES <- toupper(changed)
[13:36:47.537]                 args <- list()
[13:36:47.537]                 for (kk in seq_along(NAMES)) {
[13:36:47.537]                   name <- changed[[kk]]
[13:36:47.537]                   NAME <- NAMES[[kk]]
[13:36:47.537]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:47.537]                     next
[13:36:47.537]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:47.537]                 }
[13:36:47.537]                 NAMES <- toupper(added)
[13:36:47.537]                 for (kk in seq_along(NAMES)) {
[13:36:47.537]                   name <- added[[kk]]
[13:36:47.537]                   NAME <- NAMES[[kk]]
[13:36:47.537]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:47.537]                     next
[13:36:47.537]                   args[[name]] <- ""
[13:36:47.537]                 }
[13:36:47.537]                 NAMES <- toupper(removed)
[13:36:47.537]                 for (kk in seq_along(NAMES)) {
[13:36:47.537]                   name <- removed[[kk]]
[13:36:47.537]                   NAME <- NAMES[[kk]]
[13:36:47.537]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:47.537]                     next
[13:36:47.537]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:47.537]                 }
[13:36:47.537]                 if (length(args) > 0) 
[13:36:47.537]                   base::do.call(base::Sys.setenv, args = args)
[13:36:47.537]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:47.537]             }
[13:36:47.537]             else {
[13:36:47.537]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:47.537]             }
[13:36:47.537]             {
[13:36:47.537]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:47.537]                   0L) {
[13:36:47.537]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:47.537]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:47.537]                   base::options(opts)
[13:36:47.537]                 }
[13:36:47.537]                 {
[13:36:47.537]                   {
[13:36:47.537]                     NULL
[13:36:47.537]                     RNGkind("Mersenne-Twister")
[13:36:47.537]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:47.537]                       inherits = FALSE)
[13:36:47.537]                   }
[13:36:47.537]                   options(future.plan = NULL)
[13:36:47.537]                   if (is.na(NA_character_)) 
[13:36:47.537]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:47.537]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:47.537]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:47.537]                     .init = FALSE)
[13:36:47.537]                 }
[13:36:47.537]             }
[13:36:47.537]         }
[13:36:47.537]     })
[13:36:47.537]     if (TRUE) {
[13:36:47.537]         base::sink(type = "output", split = FALSE)
[13:36:47.537]         if (TRUE) {
[13:36:47.537]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:47.537]         }
[13:36:47.537]         else {
[13:36:47.537]             ...future.result["stdout"] <- base::list(NULL)
[13:36:47.537]         }
[13:36:47.537]         base::close(...future.stdout)
[13:36:47.537]         ...future.stdout <- NULL
[13:36:47.537]     }
[13:36:47.537]     ...future.result$conditions <- ...future.conditions
[13:36:47.537]     ...future.result$finished <- base::Sys.time()
[13:36:47.537]     ...future.result
[13:36:47.537] }
[13:36:47.540] assign_globals() ...
[13:36:47.540] List of 1
[13:36:47.540]  $ data:'data.frame':	5 obs. of  2 variables:
[13:36:47.540]   ..$ x: int [1:5] 1 2 3 4 5
[13:36:47.540]   ..$ y: int [1:5] 1 2 3 4 5
[13:36:47.540]  - attr(*, "where")=List of 1
[13:36:47.540]   ..$ data:<environment: R_EmptyEnv> 
[13:36:47.540]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:47.540]  - attr(*, "resolved")= logi FALSE
[13:36:47.540]  - attr(*, "total_size")= num 160
[13:36:47.540]  - attr(*, "already-done")= logi TRUE
[13:36:47.546] - copied ‘data’ to environment
[13:36:47.546] assign_globals() ... done
[13:36:47.546] plan(): Setting new future strategy stack:
[13:36:47.547] List of future strategies:
[13:36:47.547] 1. multicore:
[13:36:47.547]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:47.547]    - tweaked: FALSE
[13:36:47.547]    - call: plan(list(sequential, strategy))
[13:36:47.550] plan(): nbrOfWorkers() = 2
[13:36:47.595] plan(): Setting new future strategy stack:
[13:36:47.596] List of future strategies:
[13:36:47.596] 1. sequential:
[13:36:47.596]    - args: function (..., envir = parent.frame())
[13:36:47.596]    - tweaked: FALSE
[13:36:47.596]    - call: plan(list(sequential, strategy))
[13:36:47.596] 2. multicore:
[13:36:47.596]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:47.596]    - tweaked: FALSE
[13:36:47.596]    - call: plan(list(sequential, strategy))
[13:36:47.596] plan(): nbrOfWorkers() = 1
[13:36:47.597] SequentialFuture started (and completed)
[13:36:47.597] signalConditions() ...
[13:36:47.597]  - include = ‘immediateCondition’
[13:36:47.597]  - exclude = 
[13:36:47.597]  - resignal = FALSE
[13:36:47.597]  - Number of conditions: 56
[13:36:47.597] signalConditions() ... done
[13:36:47.598] - Launch lazy future ... done
[13:36:47.598] run() for ‘SequentialFuture’ ... done
[13:36:47.598] signalConditions() ...
[13:36:47.598]  - include = ‘immediateCondition’
[13:36:47.598]  - exclude = 
[13:36:47.598]  - resignal = FALSE
[13:36:47.598]  - Number of conditions: 56
[13:36:47.598] signalConditions() ... done
[13:36:47.599] Future state: ‘finished’
[13:36:47.599] signalConditions() ...
[13:36:47.599]  - include = ‘condition’
[13:36:47.599]  - exclude = ‘immediateCondition’
[13:36:47.599]  - resignal = TRUE
[13:36:47.599]  - Number of conditions: 56
[13:36:47.599]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.551] getGlobalsAndPackages() ...
[13:36:47.599]  - Condition #2: ‘deprecatedWarning’, ‘warning’, ‘condition’
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[13:36:47.600]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.565] Searching for globals...
[13:36:47.600]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.567] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[13:36:47.600]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.567] Searching for globals ... DONE
[13:36:47.600]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.567] Resolving globals: FALSE
[13:36:47.600]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.568] The total size of the 1 globals is 160 bytes (160 bytes)
[13:36:47.600]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.568] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[13:36:47.601]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.568] - globals: [1] ‘data’
[13:36:47.601]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.568] 
[13:36:47.601]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.569] getGlobalsAndPackages() ... DONE
[13:36:47.601]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.569] run() for ‘Future’ ...
[13:36:47.601]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.569] - state: ‘created’
[13:36:47.601]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.569] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:36:47.601]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.573] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:47.602]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.573] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:36:47.602]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.573]   - Field: ‘label’
[13:36:47.602]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.573]   - Field: ‘local’
[13:36:47.602]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.573]   - Field: ‘owner’
[13:36:47.602]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.573]   - Field: ‘envir’
[13:36:47.602]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.573]   - Field: ‘workers’
[13:36:47.603]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.573]   - Field: ‘packages’
[13:36:47.603]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.573]   - Field: ‘gc’
[13:36:47.603]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.574]   - Field: ‘job’
[13:36:47.603]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.574]   - Field: ‘conditions’
[13:36:47.603]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.574]   - Field: ‘expr’
[13:36:47.603]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.574]   - Field: ‘uuid’
[13:36:47.604]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.574]   - Field: ‘seed’
[13:36:47.604]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.574]   - Field: ‘version’
[13:36:47.604]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.574]   - Field: ‘result’
[13:36:47.604]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.574]   - Field: ‘asynchronous’
[13:36:47.604]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.574]   - Field: ‘calls’
[13:36:47.604]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.574]   - Field: ‘globals’
[13:36:47.605]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.575]   - Field: ‘stdout’
[13:36:47.605]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.575]   - Field: ‘earlySignal’
[13:36:47.605]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.575]   - Field: ‘lazy’
[13:36:47.605]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.575]   - Field: ‘state’
[13:36:47.605]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.575] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:36:47.605]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.575] - Launch lazy future ...
[13:36:47.605]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.575] Packages needed by the future expression (n = 0): <none>
[13:36:47.606]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.575] Packages needed by future strategies (n = 0): <none>
[13:36:47.608]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.576] {
[13:36:47.576]     {
[13:36:47.576]         {
[13:36:47.576]             ...future.startTime <- base::Sys.time()
[13:36:47.576]             {
[13:36:47.576]                 {
[13:36:47.576]                   {
[13:36:47.576]                     {
[13:36:47.576]                       base::local({
[13:36:47.576]                         has_future <- base::requireNamespace("future", 
[13:36:47.576]                           quietly = TRUE)
[13:36:47.576]                         if (has_future) {
[13:36:47.576]                           ns <- base::getNamespace("future")
[13:36:47.576]                           version <- ns[[".package"]][["version"]]
[13:36:47.576]                           if (is.null(version)) 
[13:36:47.576]                             version <- utils::packageVersion("future")
[13:36:47.576]                         }
[13:36:47.576]                         else {
[13:36:47.576]                           version <- NULL
[13:36:47.576]                         }
[13:36:47.576]                         if (!has_future || version < "1.8.0") {
[13:36:47.576]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:47.576]                             "", base::R.version$version.string), 
[13:36:47.576]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:47.576]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:47.576]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:47.576]                               "release", "version")], collapse = " "), 
[13:36:47.576]                             hostname = base::Sys.info()[["nodename"]])
[13:36:47.576]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:47.576]                             info)
[13:36:47.576]                           info <- base::paste(info, collapse = "; ")
[13:36:47.576]                           if (!has_future) {
[13:36:47.576]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:47.576]                               info)
[13:36:47.576]                           }
[13:36:47.576]                           else {
[13:36:47.576]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:47.576]                               info, version)
[13:36:47.576]                           }
[13:36:47.576]                           base::stop(msg)
[13:36:47.576]                         }
[13:36:47.576]                       })
[13:36:47.576]                     }
[13:36:47.576]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:47.576]                     base::options(mc.cores = 1L)
[13:36:47.576]                   }
[13:36:47.576]                   ...future.strategy.old <- future::plan("list")
[13:36:47.576]                   options(future.plan = NULL)
[13:36:47.576]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:47.576]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:47.576]                 }
[13:36:47.576]                 ...future.workdir <- getwd()
[13:36:47.576]             }
[13:36:47.576]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:47.576]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:47.576]         }
[13:36:47.576]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[13:36:47.576]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:47.576]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[13:36:47.576]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:47.576]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:47.576]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:47.576]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:47.576]             base::names(...future.oldOptions))
[13:36:47.576]     }
[13:36:47.576]     if (FALSE) {
[13:36:47.576]     }
[13:36:47.576]     else {
[13:36:47.576]         if (TRUE) {
[13:36:47.576]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:47.576]                 open = "w")
[13:36:47.576]         }
[13:36:47.576]         else {
[13:36:47.576]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:47.576]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:47.576]         }
[13:36:47.576]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:47.576]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:47.576]             base::sink(type = "output", split = FALSE)
[13:36:47.576]             base::close(...future.stdout)
[13:36:47.576]         }, add = TRUE)
[13:36:47.576]     }
[13:36:47.576]     ...future.frame <- base::sys.nframe()
[13:36:47.576]     ...future.conditions <- base::list()
[13:36:47.576]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:47.576]     if (FALSE) {
[13:36:47.576]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:47.576]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:47.576]     }
[13:36:47.576]     ...future.result <- base::tryCatch({
[13:36:47.576]         base::withCallingHandlers({
[13:36:47.576]             ...future.value <- base::withVisible(base::local({
[13:36:47.576]                 withCallingHandlers({
[13:36:47.576]                   subset(data, x < 3)$y
[13:36:47.576]                 }, immediateCondition = function(cond) {
[13:36:47.576]                   save_rds <- function (object, pathname, ...) 
[13:36:47.576]                   {
[13:36:47.576]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:47.576]                     if (file_test("-f", pathname_tmp)) {
[13:36:47.576]                       fi_tmp <- file.info(pathname_tmp)
[13:36:47.576]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:47.576]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:47.576]                         fi_tmp[["mtime"]])
[13:36:47.576]                     }
[13:36:47.576]                     tryCatch({
[13:36:47.576]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:47.576]                     }, error = function(ex) {
[13:36:47.576]                       msg <- conditionMessage(ex)
[13:36:47.576]                       fi_tmp <- file.info(pathname_tmp)
[13:36:47.576]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:47.576]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:47.576]                         fi_tmp[["mtime"]], msg)
[13:36:47.576]                       ex$message <- msg
[13:36:47.576]                       stop(ex)
[13:36:47.576]                     })
[13:36:47.576]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:47.576]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:47.576]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:47.576]                       fi_tmp <- file.info(pathname_tmp)
[13:36:47.576]                       fi <- file.info(pathname)
[13:36:47.576]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:47.576]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:47.576]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:47.576]                         fi[["size"]], fi[["mtime"]])
[13:36:47.576]                       stop(msg)
[13:36:47.576]                     }
[13:36:47.576]                     invisible(pathname)
[13:36:47.576]                   }
[13:36:47.576]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:47.576]                     rootPath = tempdir()) 
[13:36:47.576]                   {
[13:36:47.576]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:47.576]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:47.576]                       tmpdir = path, fileext = ".rds")
[13:36:47.576]                     save_rds(obj, file)
[13:36:47.576]                   }
[13:36:47.576]                   saveImmediateCondition(cond, path = "/tmp/Rtmp52Mhxq/.future/immediateConditions")
[13:36:47.576]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:47.576]                   {
[13:36:47.576]                     inherits <- base::inherits
[13:36:47.576]                     invokeRestart <- base::invokeRestart
[13:36:47.576]                     is.null <- base::is.null
[13:36:47.576]                     muffled <- FALSE
[13:36:47.576]                     if (inherits(cond, "message")) {
[13:36:47.576]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:47.576]                       if (muffled) 
[13:36:47.576]                         invokeRestart("muffleMessage")
[13:36:47.576]                     }
[13:36:47.576]                     else if (inherits(cond, "warning")) {
[13:36:47.576]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:47.576]                       if (muffled) 
[13:36:47.576]                         invokeRestart("muffleWarning")
[13:36:47.576]                     }
[13:36:47.576]                     else if (inherits(cond, "condition")) {
[13:36:47.576]                       if (!is.null(pattern)) {
[13:36:47.576]                         computeRestarts <- base::computeRestarts
[13:36:47.576]                         grepl <- base::grepl
[13:36:47.576]                         restarts <- computeRestarts(cond)
[13:36:47.576]                         for (restart in restarts) {
[13:36:47.576]                           name <- restart$name
[13:36:47.576]                           if (is.null(name)) 
[13:36:47.576]                             next
[13:36:47.576]                           if (!grepl(pattern, name)) 
[13:36:47.576]                             next
[13:36:47.576]                           invokeRestart(restart)
[13:36:47.576]                           muffled <- TRUE
[13:36:47.576]                           break
[13:36:47.576]                         }
[13:36:47.576]                       }
[13:36:47.576]                     }
[13:36:47.576]                     invisible(muffled)
[13:36:47.576]                   }
[13:36:47.576]                   muffleCondition(cond)
[13:36:47.576]                 })
[13:36:47.576]             }))
[13:36:47.576]             future::FutureResult(value = ...future.value$value, 
[13:36:47.576]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:47.576]                   ...future.rng), globalenv = if (FALSE) 
[13:36:47.576]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:47.576]                     ...future.globalenv.names))
[13:36:47.576]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:47.576]         }, condition = base::local({
[13:36:47.576]             c <- base::c
[13:36:47.576]             inherits <- base::inherits
[13:36:47.576]             invokeRestart <- base::invokeRestart
[13:36:47.576]             length <- base::length
[13:36:47.576]             list <- base::list
[13:36:47.576]             seq.int <- base::seq.int
[13:36:47.576]             signalCondition <- base::signalCondition
[13:36:47.576]             sys.calls <- base::sys.calls
[13:36:47.576]             `[[` <- base::`[[`
[13:36:47.576]             `+` <- base::`+`
[13:36:47.576]             `<<-` <- base::`<<-`
[13:36:47.576]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:47.576]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:47.576]                   3L)]
[13:36:47.576]             }
[13:36:47.576]             function(cond) {
[13:36:47.576]                 is_error <- inherits(cond, "error")
[13:36:47.576]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:47.576]                   NULL)
[13:36:47.576]                 if (is_error) {
[13:36:47.576]                   sessionInformation <- function() {
[13:36:47.576]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:47.576]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:47.576]                       search = base::search(), system = base::Sys.info())
[13:36:47.576]                   }
[13:36:47.576]                   ...future.conditions[[length(...future.conditions) + 
[13:36:47.576]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:47.576]                     cond$call), session = sessionInformation(), 
[13:36:47.576]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:47.576]                   signalCondition(cond)
[13:36:47.576]                 }
[13:36:47.576]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:47.576]                 "immediateCondition"))) {
[13:36:47.576]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:47.576]                   ...future.conditions[[length(...future.conditions) + 
[13:36:47.576]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:47.576]                   if (TRUE && !signal) {
[13:36:47.576]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:47.576]                     {
[13:36:47.576]                       inherits <- base::inherits
[13:36:47.576]                       invokeRestart <- base::invokeRestart
[13:36:47.576]                       is.null <- base::is.null
[13:36:47.576]                       muffled <- FALSE
[13:36:47.576]                       if (inherits(cond, "message")) {
[13:36:47.576]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:47.576]                         if (muffled) 
[13:36:47.576]                           invokeRestart("muffleMessage")
[13:36:47.576]                       }
[13:36:47.576]                       else if (inherits(cond, "warning")) {
[13:36:47.576]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:47.576]                         if (muffled) 
[13:36:47.576]                           invokeRestart("muffleWarning")
[13:36:47.576]                       }
[13:36:47.576]                       else if (inherits(cond, "condition")) {
[13:36:47.576]                         if (!is.null(pattern)) {
[13:36:47.576]                           computeRestarts <- base::computeRestarts
[13:36:47.576]                           grepl <- base::grepl
[13:36:47.576]                           restarts <- computeRestarts(cond)
[13:36:47.576]                           for (restart in restarts) {
[13:36:47.576]                             name <- restart$name
[13:36:47.576]                             if (is.null(name)) 
[13:36:47.576]                               next
[13:36:47.576]                             if (!grepl(pattern, name)) 
[13:36:47.576]                               next
[13:36:47.576]                             invokeRestart(restart)
[13:36:47.576]                             muffled <- TRUE
[13:36:47.576]                             break
[13:36:47.576]                           }
[13:36:47.576]                         }
[13:36:47.576]                       }
[13:36:47.576]                       invisible(muffled)
[13:36:47.576]                     }
[13:36:47.576]                     muffleCondition(cond, pattern = "^muffle")
[13:36:47.576]                   }
[13:36:47.576]                 }
[13:36:47.576]                 else {
[13:36:47.576]                   if (TRUE) {
[13:36:47.576]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:47.576]                     {
[13:36:47.576]                       inherits <- base::inherits
[13:36:47.576]                       invokeRestart <- base::invokeRestart
[13:36:47.576]                       is.null <- base::is.null
[13:36:47.576]                       muffled <- FALSE
[13:36:47.576]                       if (inherits(cond, "message")) {
[13:36:47.576]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:47.576]                         if (muffled) 
[13:36:47.576]                           invokeRestart("muffleMessage")
[13:36:47.576]                       }
[13:36:47.576]                       else if (inherits(cond, "warning")) {
[13:36:47.576]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:47.576]                         if (muffled) 
[13:36:47.576]                           invokeRestart("muffleWarning")
[13:36:47.576]                       }
[13:36:47.576]                       else if (inherits(cond, "condition")) {
[13:36:47.576]                         if (!is.null(pattern)) {
[13:36:47.576]                           computeRestarts <- base::computeRestarts
[13:36:47.576]                           grepl <- base::grepl
[13:36:47.576]                           restarts <- computeRestarts(cond)
[13:36:47.576]                           for (restart in restarts) {
[13:36:47.576]                             name <- restart$name
[13:36:47.576]                             if (is.null(name)) 
[13:36:47.576]                               next
[13:36:47.576]                             if (!grepl(pattern, name)) 
[13:36:47.576]                               next
[13:36:47.576]                             invokeRestart(restart)
[13:36:47.576]                             muffled <- TRUE
[13:36:47.576]                             break
[13:36:47.576]                           }
[13:36:47.576]                         }
[13:36:47.576]                       }
[13:36:47.576]                       invisible(muffled)
[13:36:47.576]                     }
[13:36:47.576]                     muffleCondition(cond, pattern = "^muffle")
[13:36:47.576]                   }
[13:36:47.576]                 }
[13:36:47.576]             }
[13:36:47.576]         }))
[13:36:47.576]     }, error = function(ex) {
[13:36:47.576]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:47.576]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:47.576]                 ...future.rng), started = ...future.startTime, 
[13:36:47.576]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:47.576]             version = "1.8"), class = "FutureResult")
[13:36:47.576]     }, finally = {
[13:36:47.576]         if (!identical(...future.workdir, getwd())) 
[13:36:47.576]             setwd(...future.workdir)
[13:36:47.576]         {
[13:36:47.576]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:47.576]                 ...future.oldOptions$nwarnings <- NULL
[13:36:47.576]             }
[13:36:47.576]             base::options(...future.oldOptions)
[13:36:47.576]             if (.Platform$OS.type == "windows") {
[13:36:47.576]                 old_names <- names(...future.oldEnvVars)
[13:36:47.576]                 envs <- base::Sys.getenv()
[13:36:47.576]                 names <- names(envs)
[13:36:47.576]                 common <- intersect(names, old_names)
[13:36:47.576]                 added <- setdiff(names, old_names)
[13:36:47.576]                 removed <- setdiff(old_names, names)
[13:36:47.576]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:47.576]                   envs[common]]
[13:36:47.576]                 NAMES <- toupper(changed)
[13:36:47.576]                 args <- list()
[13:36:47.576]                 for (kk in seq_along(NAMES)) {
[13:36:47.576]                   name <- changed[[kk]]
[13:36:47.576]                   NAME <- NAMES[[kk]]
[13:36:47.576]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:47.576]                     next
[13:36:47.576]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:47.576]                 }
[13:36:47.576]                 NAMES <- toupper(added)
[13:36:47.576]                 for (kk in seq_along(NAMES)) {
[13:36:47.576]                   name <- added[[kk]]
[13:36:47.576]                   NAME <- NAMES[[kk]]
[13:36:47.576]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:47.576]                     next
[13:36:47.576]                   args[[name]] <- ""
[13:36:47.576]                 }
[13:36:47.576]                 NAMES <- toupper(removed)
[13:36:47.576]                 for (kk in seq_along(NAMES)) {
[13:36:47.576]                   name <- removed[[kk]]
[13:36:47.576]                   NAME <- NAMES[[kk]]
[13:36:47.576]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:47.576]                     next
[13:36:47.576]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:47.576]                 }
[13:36:47.576]                 if (length(args) > 0) 
[13:36:47.576]                   base::do.call(base::Sys.setenv, args = args)
[13:36:47.576]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:47.576]             }
[13:36:47.576]             else {
[13:36:47.576]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:47.576]             }
[13:36:47.576]             {
[13:36:47.576]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:47.576]                   0L) {
[13:36:47.576]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:47.576]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:47.576]                   base::options(opts)
[13:36:47.576]                 }
[13:36:47.576]                 {
[13:36:47.576]                   {
[13:36:47.576]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:47.576]                     NULL
[13:36:47.576]                   }
[13:36:47.576]                   options(future.plan = NULL)
[13:36:47.576]                   if (is.na(NA_character_)) 
[13:36:47.576]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:47.576]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:47.576]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:47.576]                     .init = FALSE)
[13:36:47.576]                 }
[13:36:47.576]             }
[13:36:47.576]         }
[13:36:47.576]     })
[13:36:47.576]     if (TRUE) {
[13:36:47.576]         base::sink(type = "output", split = FALSE)
[13:36:47.576]         if (TRUE) {
[13:36:47.576]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:47.576]         }
[13:36:47.576]         else {
[13:36:47.576]             ...future.result["stdout"] <- base::list(NULL)
[13:36:47.576]         }
[13:36:47.576]         base::close(...future.stdout)
[13:36:47.576]         ...future.stdout <- NULL
[13:36:47.576]     }
[13:36:47.576]     ...future.result$conditions <- ...future.conditions
[13:36:47.576]     ...future.result$finished <- base::Sys.time()
[13:36:47.576]     ...future.result
[13:36:47.576] }
[13:36:47.608]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.578] assign_globals() ...
[13:36:47.609]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.578] List of 1
[13:36:47.578]  $ data:'data.frame':	5 obs. of  2 variables:
[13:36:47.578]   ..$ x: int [1:5] 1 2 3 4 5
[13:36:47.578]   ..$ y: int [1:5] 1 2 3 4 5
[13:36:47.578]  - attr(*, "where")=List of 1
[13:36:47.578]   ..$ data:<environment: R_EmptyEnv> 
[13:36:47.578]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:47.578]  - attr(*, "resolved")= logi FALSE
[13:36:47.578]  - attr(*, "total_size")= num 160
[13:36:47.578]  - attr(*, "already-done")= logi TRUE
[13:36:47.609]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.581] - copied ‘data’ to environment
[13:36:47.609]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.581] assign_globals() ... done
[13:36:47.609]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.581] requestCore(): workers = 2
[13:36:47.609]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.583] MulticoreFuture started
[13:36:47.610]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.584] - Launch lazy future ... done
[13:36:47.610]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.584] run() for ‘MulticoreFuture’ ... done
[13:36:47.610]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.584] result() for MulticoreFuture ...
[13:36:47.610]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.594] result() for MulticoreFuture ...
[13:36:47.610]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.594] result() for MulticoreFuture ... done
[13:36:47.610]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.594] result() for MulticoreFuture ... done
[13:36:47.611]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.594] result() for MulticoreFuture ...
[13:36:47.611]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:47.594] result() for MulticoreFuture ... done
[13:36:47.611] signalConditions() ... done
- Strategy: multicore ... DONE
- Strategy: multisession ...
[13:36:47.612] plan(): Setting new future strategy stack:
[13:36:47.612] List of future strategies:
[13:36:47.612] 1. multisession:
[13:36:47.612]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:36:47.612]    - tweaked: FALSE
[13:36:47.612]    - call: plan(strategy)
[13:36:47.612] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:36:47.612] multisession:
[13:36:47.612] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:36:47.612] - tweaked: FALSE
[13:36:47.612] - call: plan(strategy)
[13:36:47.619] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[13:36:47.619] Not searching for globals
[13:36:47.619] - globals: [0] <none>
[13:36:47.619] getGlobalsAndPackages() ... DONE
[13:36:47.620] [local output] makeClusterPSOCK() ...
[13:36:47.660] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:36:47.662] [local output] Base port: 11273
[13:36:47.662] [local output] Getting setup options for 2 cluster nodes ...
[13:36:47.662] [local output]  - Node 1 of 2 ...
[13:36:47.662] [local output] localMachine=TRUE => revtunnel=FALSE

[13:36:47.663] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp52Mhxq/worker.rank=1.parallelly.parent=84096.148806b752f2b.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmp52Mhxq/worker.rank=1.parallelly.parent=84096.148806b752f2b.pid")'’
[13:36:47.853] - Possible to infer worker's PID: TRUE
[13:36:47.853] [local output] Rscript port: 11273

[13:36:47.853] [local output]  - Node 2 of 2 ...
[13:36:47.854] [local output] localMachine=TRUE => revtunnel=FALSE

[13:36:47.854] [local output] Rscript port: 11273

[13:36:47.855] [local output] Getting setup options for 2 cluster nodes ... done
[13:36:47.855] [local output]  - Parallel setup requested for some PSOCK nodes
[13:36:47.855] [local output] Setting up PSOCK nodes in parallel
[13:36:47.855] List of 36
[13:36:47.855]  $ worker          : chr "localhost"
[13:36:47.855]   ..- attr(*, "localhost")= logi TRUE
[13:36:47.855]  $ master          : chr "localhost"
[13:36:47.855]  $ port            : int 11273
[13:36:47.855]  $ connectTimeout  : num 120
[13:36:47.855]  $ timeout         : num 2592000
[13:36:47.855]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:36:47.855]  $ homogeneous     : logi TRUE
[13:36:47.855]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:36:47.855]  $ rscript_envs    : NULL
[13:36:47.855]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:36:47.855]  $ rscript_startup : NULL
[13:36:47.855]  $ rscript_sh      : chr "sh"
[13:36:47.855]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:36:47.855]  $ methods         : logi TRUE
[13:36:47.855]  $ socketOptions   : chr "no-delay"
[13:36:47.855]  $ useXDR          : logi FALSE
[13:36:47.855]  $ outfile         : chr "/dev/null"
[13:36:47.855]  $ renice          : int NA
[13:36:47.855]  $ rshcmd          : NULL
[13:36:47.855]  $ user            : chr(0) 
[13:36:47.855]  $ revtunnel       : logi FALSE
[13:36:47.855]  $ rshlogfile      : NULL
[13:36:47.855]  $ rshopts         : chr(0) 
[13:36:47.855]  $ rank            : int 1
[13:36:47.855]  $ manual          : logi FALSE
[13:36:47.855]  $ dryrun          : logi FALSE
[13:36:47.855]  $ quiet           : logi FALSE
[13:36:47.855]  $ setup_strategy  : chr "parallel"
[13:36:47.855]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:36:47.855]  $ pidfile         : chr "/tmp/Rtmp52Mhxq/worker.rank=1.parallelly.parent=84096.148806b752f2b.pid"
[13:36:47.855]  $ rshcmd_label    : NULL
[13:36:47.855]  $ rsh_call        : NULL
[13:36:47.855]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:36:47.855]  $ localMachine    : logi TRUE
[13:36:47.855]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:36:47.855]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:36:47.855]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:36:47.855]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:36:47.855]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:36:47.855]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:36:47.855]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:36:47.855]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:36:47.855]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:36:47.855]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:36:47.855]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:36:47.855]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:36:47.855]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:36:47.855]  $ arguments       :List of 28
[13:36:47.855]   ..$ worker          : chr "localhost"
[13:36:47.855]   ..$ master          : NULL
[13:36:47.855]   ..$ port            : int 11273
[13:36:47.855]   ..$ connectTimeout  : num 120
[13:36:47.855]   ..$ timeout         : num 2592000
[13:36:47.855]   ..$ rscript         : NULL
[13:36:47.855]   ..$ homogeneous     : NULL
[13:36:47.855]   ..$ rscript_args    : NULL
[13:36:47.855]   ..$ rscript_envs    : NULL
[13:36:47.855]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:36:47.855]   ..$ rscript_startup : NULL
[13:36:47.855]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:36:47.855]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:36:47.855]   ..$ methods         : logi TRUE
[13:36:47.855]   ..$ socketOptions   : chr "no-delay"
[13:36:47.855]   ..$ useXDR          : logi FALSE
[13:36:47.855]   ..$ outfile         : chr "/dev/null"
[13:36:47.855]   ..$ renice          : int NA
[13:36:47.855]   ..$ rshcmd          : NULL
[13:36:47.855]   ..$ user            : NULL
[13:36:47.855]   ..$ revtunnel       : logi NA
[13:36:47.855]   ..$ rshlogfile      : NULL
[13:36:47.855]   ..$ rshopts         : NULL
[13:36:47.855]   ..$ rank            : int 1
[13:36:47.855]   ..$ manual          : logi FALSE
[13:36:47.855]   ..$ dryrun          : logi FALSE
[13:36:47.855]   ..$ quiet           : logi FALSE
[13:36:47.855]   ..$ setup_strategy  : chr "parallel"
[13:36:47.855]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:36:47.872] [local output] System call to launch all workers:
[13:36:47.872] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp52Mhxq/worker.rank=1.parallelly.parent=84096.148806b752f2b.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11273 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:36:47.872] [local output] Starting PSOCK main server
[13:36:47.878] [local output] Workers launched
[13:36:47.878] [local output] Waiting for workers to connect back
[13:36:47.878]  - [local output] 0 workers out of 2 ready
[13:36:48.122]  - [local output] 0 workers out of 2 ready
[13:36:48.122]  - [local output] 1 workers out of 2 ready
[13:36:48.122]  - [local output] 2 workers out of 2 ready
[13:36:48.123] [local output] Launching of workers completed
[13:36:48.123] [local output] Collecting session information from workers
[13:36:48.124] [local output]  - Worker #1 of 2
[13:36:48.124] [local output]  - Worker #2 of 2
[13:36:48.124] [local output] makeClusterPSOCK() ... done
[13:36:48.136] Packages needed by the future expression (n = 0): <none>
[13:36:48.136] Packages needed by future strategies (n = 0): <none>
[13:36:48.136] {
[13:36:48.136]     {
[13:36:48.136]         {
[13:36:48.136]             ...future.startTime <- base::Sys.time()
[13:36:48.136]             {
[13:36:48.136]                 {
[13:36:48.136]                   {
[13:36:48.136]                     {
[13:36:48.136]                       base::local({
[13:36:48.136]                         has_future <- base::requireNamespace("future", 
[13:36:48.136]                           quietly = TRUE)
[13:36:48.136]                         if (has_future) {
[13:36:48.136]                           ns <- base::getNamespace("future")
[13:36:48.136]                           version <- ns[[".package"]][["version"]]
[13:36:48.136]                           if (is.null(version)) 
[13:36:48.136]                             version <- utils::packageVersion("future")
[13:36:48.136]                         }
[13:36:48.136]                         else {
[13:36:48.136]                           version <- NULL
[13:36:48.136]                         }
[13:36:48.136]                         if (!has_future || version < "1.8.0") {
[13:36:48.136]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:48.136]                             "", base::R.version$version.string), 
[13:36:48.136]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:48.136]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:48.136]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:48.136]                               "release", "version")], collapse = " "), 
[13:36:48.136]                             hostname = base::Sys.info()[["nodename"]])
[13:36:48.136]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:48.136]                             info)
[13:36:48.136]                           info <- base::paste(info, collapse = "; ")
[13:36:48.136]                           if (!has_future) {
[13:36:48.136]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:48.136]                               info)
[13:36:48.136]                           }
[13:36:48.136]                           else {
[13:36:48.136]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:48.136]                               info, version)
[13:36:48.136]                           }
[13:36:48.136]                           base::stop(msg)
[13:36:48.136]                         }
[13:36:48.136]                       })
[13:36:48.136]                     }
[13:36:48.136]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:48.136]                     base::options(mc.cores = 1L)
[13:36:48.136]                   }
[13:36:48.136]                   ...future.strategy.old <- future::plan("list")
[13:36:48.136]                   options(future.plan = NULL)
[13:36:48.136]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:48.136]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:48.136]                 }
[13:36:48.136]                 ...future.workdir <- getwd()
[13:36:48.136]             }
[13:36:48.136]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:48.136]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:48.136]         }
[13:36:48.136]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[13:36:48.136]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:48.136]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[13:36:48.136]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:48.136]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:48.136]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:48.136]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:48.136]             base::names(...future.oldOptions))
[13:36:48.136]     }
[13:36:48.136]     if (FALSE) {
[13:36:48.136]     }
[13:36:48.136]     else {
[13:36:48.136]         if (TRUE) {
[13:36:48.136]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:48.136]                 open = "w")
[13:36:48.136]         }
[13:36:48.136]         else {
[13:36:48.136]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:48.136]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:48.136]         }
[13:36:48.136]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:48.136]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:48.136]             base::sink(type = "output", split = FALSE)
[13:36:48.136]             base::close(...future.stdout)
[13:36:48.136]         }, add = TRUE)
[13:36:48.136]     }
[13:36:48.136]     ...future.frame <- base::sys.nframe()
[13:36:48.136]     ...future.conditions <- base::list()
[13:36:48.136]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:48.136]     if (FALSE) {
[13:36:48.136]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:48.136]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:48.136]     }
[13:36:48.136]     ...future.result <- base::tryCatch({
[13:36:48.136]         base::withCallingHandlers({
[13:36:48.136]             ...future.value <- base::withVisible(base::local({
[13:36:48.136]                 ...future.makeSendCondition <- base::local({
[13:36:48.136]                   sendCondition <- NULL
[13:36:48.136]                   function(frame = 1L) {
[13:36:48.136]                     if (is.function(sendCondition)) 
[13:36:48.136]                       return(sendCondition)
[13:36:48.136]                     ns <- getNamespace("parallel")
[13:36:48.136]                     if (exists("sendData", mode = "function", 
[13:36:48.136]                       envir = ns)) {
[13:36:48.136]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:48.136]                         envir = ns)
[13:36:48.136]                       envir <- sys.frame(frame)
[13:36:48.136]                       master <- NULL
[13:36:48.136]                       while (!identical(envir, .GlobalEnv) && 
[13:36:48.136]                         !identical(envir, emptyenv())) {
[13:36:48.136]                         if (exists("master", mode = "list", envir = envir, 
[13:36:48.136]                           inherits = FALSE)) {
[13:36:48.136]                           master <- get("master", mode = "list", 
[13:36:48.136]                             envir = envir, inherits = FALSE)
[13:36:48.136]                           if (inherits(master, c("SOCKnode", 
[13:36:48.136]                             "SOCK0node"))) {
[13:36:48.136]                             sendCondition <<- function(cond) {
[13:36:48.136]                               data <- list(type = "VALUE", value = cond, 
[13:36:48.136]                                 success = TRUE)
[13:36:48.136]                               parallel_sendData(master, data)
[13:36:48.136]                             }
[13:36:48.136]                             return(sendCondition)
[13:36:48.136]                           }
[13:36:48.136]                         }
[13:36:48.136]                         frame <- frame + 1L
[13:36:48.136]                         envir <- sys.frame(frame)
[13:36:48.136]                       }
[13:36:48.136]                     }
[13:36:48.136]                     sendCondition <<- function(cond) NULL
[13:36:48.136]                   }
[13:36:48.136]                 })
[13:36:48.136]                 withCallingHandlers({
[13:36:48.136]                   NA
[13:36:48.136]                 }, immediateCondition = function(cond) {
[13:36:48.136]                   sendCondition <- ...future.makeSendCondition()
[13:36:48.136]                   sendCondition(cond)
[13:36:48.136]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:48.136]                   {
[13:36:48.136]                     inherits <- base::inherits
[13:36:48.136]                     invokeRestart <- base::invokeRestart
[13:36:48.136]                     is.null <- base::is.null
[13:36:48.136]                     muffled <- FALSE
[13:36:48.136]                     if (inherits(cond, "message")) {
[13:36:48.136]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:48.136]                       if (muffled) 
[13:36:48.136]                         invokeRestart("muffleMessage")
[13:36:48.136]                     }
[13:36:48.136]                     else if (inherits(cond, "warning")) {
[13:36:48.136]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:48.136]                       if (muffled) 
[13:36:48.136]                         invokeRestart("muffleWarning")
[13:36:48.136]                     }
[13:36:48.136]                     else if (inherits(cond, "condition")) {
[13:36:48.136]                       if (!is.null(pattern)) {
[13:36:48.136]                         computeRestarts <- base::computeRestarts
[13:36:48.136]                         grepl <- base::grepl
[13:36:48.136]                         restarts <- computeRestarts(cond)
[13:36:48.136]                         for (restart in restarts) {
[13:36:48.136]                           name <- restart$name
[13:36:48.136]                           if (is.null(name)) 
[13:36:48.136]                             next
[13:36:48.136]                           if (!grepl(pattern, name)) 
[13:36:48.136]                             next
[13:36:48.136]                           invokeRestart(restart)
[13:36:48.136]                           muffled <- TRUE
[13:36:48.136]                           break
[13:36:48.136]                         }
[13:36:48.136]                       }
[13:36:48.136]                     }
[13:36:48.136]                     invisible(muffled)
[13:36:48.136]                   }
[13:36:48.136]                   muffleCondition(cond)
[13:36:48.136]                 })
[13:36:48.136]             }))
[13:36:48.136]             future::FutureResult(value = ...future.value$value, 
[13:36:48.136]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:48.136]                   ...future.rng), globalenv = if (FALSE) 
[13:36:48.136]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:48.136]                     ...future.globalenv.names))
[13:36:48.136]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:48.136]         }, condition = base::local({
[13:36:48.136]             c <- base::c
[13:36:48.136]             inherits <- base::inherits
[13:36:48.136]             invokeRestart <- base::invokeRestart
[13:36:48.136]             length <- base::length
[13:36:48.136]             list <- base::list
[13:36:48.136]             seq.int <- base::seq.int
[13:36:48.136]             signalCondition <- base::signalCondition
[13:36:48.136]             sys.calls <- base::sys.calls
[13:36:48.136]             `[[` <- base::`[[`
[13:36:48.136]             `+` <- base::`+`
[13:36:48.136]             `<<-` <- base::`<<-`
[13:36:48.136]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:48.136]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:48.136]                   3L)]
[13:36:48.136]             }
[13:36:48.136]             function(cond) {
[13:36:48.136]                 is_error <- inherits(cond, "error")
[13:36:48.136]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:48.136]                   NULL)
[13:36:48.136]                 if (is_error) {
[13:36:48.136]                   sessionInformation <- function() {
[13:36:48.136]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:48.136]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:48.136]                       search = base::search(), system = base::Sys.info())
[13:36:48.136]                   }
[13:36:48.136]                   ...future.conditions[[length(...future.conditions) + 
[13:36:48.136]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:48.136]                     cond$call), session = sessionInformation(), 
[13:36:48.136]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:48.136]                   signalCondition(cond)
[13:36:48.136]                 }
[13:36:48.136]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:48.136]                 "immediateCondition"))) {
[13:36:48.136]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:48.136]                   ...future.conditions[[length(...future.conditions) + 
[13:36:48.136]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:48.136]                   if (TRUE && !signal) {
[13:36:48.136]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:48.136]                     {
[13:36:48.136]                       inherits <- base::inherits
[13:36:48.136]                       invokeRestart <- base::invokeRestart
[13:36:48.136]                       is.null <- base::is.null
[13:36:48.136]                       muffled <- FALSE
[13:36:48.136]                       if (inherits(cond, "message")) {
[13:36:48.136]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:48.136]                         if (muffled) 
[13:36:48.136]                           invokeRestart("muffleMessage")
[13:36:48.136]                       }
[13:36:48.136]                       else if (inherits(cond, "warning")) {
[13:36:48.136]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:48.136]                         if (muffled) 
[13:36:48.136]                           invokeRestart("muffleWarning")
[13:36:48.136]                       }
[13:36:48.136]                       else if (inherits(cond, "condition")) {
[13:36:48.136]                         if (!is.null(pattern)) {
[13:36:48.136]                           computeRestarts <- base::computeRestarts
[13:36:48.136]                           grepl <- base::grepl
[13:36:48.136]                           restarts <- computeRestarts(cond)
[13:36:48.136]                           for (restart in restarts) {
[13:36:48.136]                             name <- restart$name
[13:36:48.136]                             if (is.null(name)) 
[13:36:48.136]                               next
[13:36:48.136]                             if (!grepl(pattern, name)) 
[13:36:48.136]                               next
[13:36:48.136]                             invokeRestart(restart)
[13:36:48.136]                             muffled <- TRUE
[13:36:48.136]                             break
[13:36:48.136]                           }
[13:36:48.136]                         }
[13:36:48.136]                       }
[13:36:48.136]                       invisible(muffled)
[13:36:48.136]                     }
[13:36:48.136]                     muffleCondition(cond, pattern = "^muffle")
[13:36:48.136]                   }
[13:36:48.136]                 }
[13:36:48.136]                 else {
[13:36:48.136]                   if (TRUE) {
[13:36:48.136]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:48.136]                     {
[13:36:48.136]                       inherits <- base::inherits
[13:36:48.136]                       invokeRestart <- base::invokeRestart
[13:36:48.136]                       is.null <- base::is.null
[13:36:48.136]                       muffled <- FALSE
[13:36:48.136]                       if (inherits(cond, "message")) {
[13:36:48.136]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:48.136]                         if (muffled) 
[13:36:48.136]                           invokeRestart("muffleMessage")
[13:36:48.136]                       }
[13:36:48.136]                       else if (inherits(cond, "warning")) {
[13:36:48.136]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:48.136]                         if (muffled) 
[13:36:48.136]                           invokeRestart("muffleWarning")
[13:36:48.136]                       }
[13:36:48.136]                       else if (inherits(cond, "condition")) {
[13:36:48.136]                         if (!is.null(pattern)) {
[13:36:48.136]                           computeRestarts <- base::computeRestarts
[13:36:48.136]                           grepl <- base::grepl
[13:36:48.136]                           restarts <- computeRestarts(cond)
[13:36:48.136]                           for (restart in restarts) {
[13:36:48.136]                             name <- restart$name
[13:36:48.136]                             if (is.null(name)) 
[13:36:48.136]                               next
[13:36:48.136]                             if (!grepl(pattern, name)) 
[13:36:48.136]                               next
[13:36:48.136]                             invokeRestart(restart)
[13:36:48.136]                             muffled <- TRUE
[13:36:48.136]                             break
[13:36:48.136]                           }
[13:36:48.136]                         }
[13:36:48.136]                       }
[13:36:48.136]                       invisible(muffled)
[13:36:48.136]                     }
[13:36:48.136]                     muffleCondition(cond, pattern = "^muffle")
[13:36:48.136]                   }
[13:36:48.136]                 }
[13:36:48.136]             }
[13:36:48.136]         }))
[13:36:48.136]     }, error = function(ex) {
[13:36:48.136]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:48.136]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:48.136]                 ...future.rng), started = ...future.startTime, 
[13:36:48.136]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:48.136]             version = "1.8"), class = "FutureResult")
[13:36:48.136]     }, finally = {
[13:36:48.136]         if (!identical(...future.workdir, getwd())) 
[13:36:48.136]             setwd(...future.workdir)
[13:36:48.136]         {
[13:36:48.136]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:48.136]                 ...future.oldOptions$nwarnings <- NULL
[13:36:48.136]             }
[13:36:48.136]             base::options(...future.oldOptions)
[13:36:48.136]             if (.Platform$OS.type == "windows") {
[13:36:48.136]                 old_names <- names(...future.oldEnvVars)
[13:36:48.136]                 envs <- base::Sys.getenv()
[13:36:48.136]                 names <- names(envs)
[13:36:48.136]                 common <- intersect(names, old_names)
[13:36:48.136]                 added <- setdiff(names, old_names)
[13:36:48.136]                 removed <- setdiff(old_names, names)
[13:36:48.136]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:48.136]                   envs[common]]
[13:36:48.136]                 NAMES <- toupper(changed)
[13:36:48.136]                 args <- list()
[13:36:48.136]                 for (kk in seq_along(NAMES)) {
[13:36:48.136]                   name <- changed[[kk]]
[13:36:48.136]                   NAME <- NAMES[[kk]]
[13:36:48.136]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:48.136]                     next
[13:36:48.136]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:48.136]                 }
[13:36:48.136]                 NAMES <- toupper(added)
[13:36:48.136]                 for (kk in seq_along(NAMES)) {
[13:36:48.136]                   name <- added[[kk]]
[13:36:48.136]                   NAME <- NAMES[[kk]]
[13:36:48.136]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:48.136]                     next
[13:36:48.136]                   args[[name]] <- ""
[13:36:48.136]                 }
[13:36:48.136]                 NAMES <- toupper(removed)
[13:36:48.136]                 for (kk in seq_along(NAMES)) {
[13:36:48.136]                   name <- removed[[kk]]
[13:36:48.136]                   NAME <- NAMES[[kk]]
[13:36:48.136]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:48.136]                     next
[13:36:48.136]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:48.136]                 }
[13:36:48.136]                 if (length(args) > 0) 
[13:36:48.136]                   base::do.call(base::Sys.setenv, args = args)
[13:36:48.136]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:48.136]             }
[13:36:48.136]             else {
[13:36:48.136]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:48.136]             }
[13:36:48.136]             {
[13:36:48.136]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:48.136]                   0L) {
[13:36:48.136]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:48.136]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:48.136]                   base::options(opts)
[13:36:48.136]                 }
[13:36:48.136]                 {
[13:36:48.136]                   {
[13:36:48.136]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:48.136]                     NULL
[13:36:48.136]                   }
[13:36:48.136]                   options(future.plan = NULL)
[13:36:48.136]                   if (is.na(NA_character_)) 
[13:36:48.136]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:48.136]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:48.136]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:48.136]                     .init = FALSE)
[13:36:48.136]                 }
[13:36:48.136]             }
[13:36:48.136]         }
[13:36:48.136]     })
[13:36:48.136]     if (TRUE) {
[13:36:48.136]         base::sink(type = "output", split = FALSE)
[13:36:48.136]         if (TRUE) {
[13:36:48.136]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:48.136]         }
[13:36:48.136]         else {
[13:36:48.136]             ...future.result["stdout"] <- base::list(NULL)
[13:36:48.136]         }
[13:36:48.136]         base::close(...future.stdout)
[13:36:48.136]         ...future.stdout <- NULL
[13:36:48.136]     }
[13:36:48.136]     ...future.result$conditions <- ...future.conditions
[13:36:48.136]     ...future.result$finished <- base::Sys.time()
[13:36:48.136]     ...future.result
[13:36:48.136] }
[13:36:48.189] MultisessionFuture started
[13:36:48.189] result() for ClusterFuture ...
[13:36:48.190] receiveMessageFromWorker() for ClusterFuture ...
[13:36:48.190] - Validating connection of MultisessionFuture
[13:36:48.223] - received message: FutureResult
[13:36:48.223] - Received FutureResult
[13:36:48.223] - Erased future from FutureRegistry
[13:36:48.223] result() for ClusterFuture ...
[13:36:48.223] - result already collected: FutureResult
[13:36:48.224] result() for ClusterFuture ... done
[13:36:48.224] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:48.224] result() for ClusterFuture ... done
[13:36:48.224] result() for ClusterFuture ...
[13:36:48.224] - result already collected: FutureResult
[13:36:48.224] result() for ClusterFuture ... done
[13:36:48.224] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:36:48.228] plan(): nbrOfWorkers() = 2
[13:36:48.229] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:48.229] Searching for globals...
[13:36:48.230] - globals found: [1] ‘getOption’
[13:36:48.230] Searching for globals ... DONE
[13:36:48.230] Resolving globals: FALSE
[13:36:48.230] 
[13:36:48.230] 
[13:36:48.231] getGlobalsAndPackages() ... DONE
[13:36:48.231] run() for ‘Future’ ...
[13:36:48.231] - state: ‘created’
[13:36:48.231] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:48.245] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:48.246] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:48.246]   - Field: ‘node’
[13:36:48.246]   - Field: ‘label’
[13:36:48.246]   - Field: ‘local’
[13:36:48.246]   - Field: ‘owner’
[13:36:48.246]   - Field: ‘envir’
[13:36:48.246]   - Field: ‘workers’
[13:36:48.246]   - Field: ‘packages’
[13:36:48.247]   - Field: ‘gc’
[13:36:48.247]   - Field: ‘conditions’
[13:36:48.247]   - Field: ‘persistent’
[13:36:48.247]   - Field: ‘expr’
[13:36:48.247]   - Field: ‘uuid’
[13:36:48.247]   - Field: ‘seed’
[13:36:48.247]   - Field: ‘version’
[13:36:48.247]   - Field: ‘result’
[13:36:48.247]   - Field: ‘asynchronous’
[13:36:48.248]   - Field: ‘calls’
[13:36:48.248]   - Field: ‘globals’
[13:36:48.248]   - Field: ‘stdout’
[13:36:48.248]   - Field: ‘earlySignal’
[13:36:48.248]   - Field: ‘lazy’
[13:36:48.248]   - Field: ‘state’
[13:36:48.248] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:48.248] - Launch lazy future ...
[13:36:48.249] Packages needed by the future expression (n = 0): <none>
[13:36:48.249] Packages needed by future strategies (n = 0): <none>
[13:36:48.249] {
[13:36:48.249]     {
[13:36:48.249]         {
[13:36:48.249]             ...future.startTime <- base::Sys.time()
[13:36:48.249]             {
[13:36:48.249]                 {
[13:36:48.249]                   {
[13:36:48.249]                     {
[13:36:48.249]                       base::local({
[13:36:48.249]                         has_future <- base::requireNamespace("future", 
[13:36:48.249]                           quietly = TRUE)
[13:36:48.249]                         if (has_future) {
[13:36:48.249]                           ns <- base::getNamespace("future")
[13:36:48.249]                           version <- ns[[".package"]][["version"]]
[13:36:48.249]                           if (is.null(version)) 
[13:36:48.249]                             version <- utils::packageVersion("future")
[13:36:48.249]                         }
[13:36:48.249]                         else {
[13:36:48.249]                           version <- NULL
[13:36:48.249]                         }
[13:36:48.249]                         if (!has_future || version < "1.8.0") {
[13:36:48.249]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:48.249]                             "", base::R.version$version.string), 
[13:36:48.249]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:48.249]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:48.249]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:48.249]                               "release", "version")], collapse = " "), 
[13:36:48.249]                             hostname = base::Sys.info()[["nodename"]])
[13:36:48.249]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:48.249]                             info)
[13:36:48.249]                           info <- base::paste(info, collapse = "; ")
[13:36:48.249]                           if (!has_future) {
[13:36:48.249]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:48.249]                               info)
[13:36:48.249]                           }
[13:36:48.249]                           else {
[13:36:48.249]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:48.249]                               info, version)
[13:36:48.249]                           }
[13:36:48.249]                           base::stop(msg)
[13:36:48.249]                         }
[13:36:48.249]                       })
[13:36:48.249]                     }
[13:36:48.249]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:48.249]                     base::options(mc.cores = 1L)
[13:36:48.249]                   }
[13:36:48.249]                   ...future.strategy.old <- future::plan("list")
[13:36:48.249]                   options(future.plan = NULL)
[13:36:48.249]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:48.249]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:48.249]                 }
[13:36:48.249]                 ...future.workdir <- getwd()
[13:36:48.249]             }
[13:36:48.249]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:48.249]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:48.249]         }
[13:36:48.249]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:36:48.249]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:48.249]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:36:48.249]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:48.249]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:48.249]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:48.249]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:48.249]             base::names(...future.oldOptions))
[13:36:48.249]     }
[13:36:48.249]     if (FALSE) {
[13:36:48.249]     }
[13:36:48.249]     else {
[13:36:48.249]         if (TRUE) {
[13:36:48.249]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:48.249]                 open = "w")
[13:36:48.249]         }
[13:36:48.249]         else {
[13:36:48.249]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:48.249]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:48.249]         }
[13:36:48.249]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:48.249]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:48.249]             base::sink(type = "output", split = FALSE)
[13:36:48.249]             base::close(...future.stdout)
[13:36:48.249]         }, add = TRUE)
[13:36:48.249]     }
[13:36:48.249]     ...future.frame <- base::sys.nframe()
[13:36:48.249]     ...future.conditions <- base::list()
[13:36:48.249]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:48.249]     if (FALSE) {
[13:36:48.249]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:48.249]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:48.249]     }
[13:36:48.249]     ...future.result <- base::tryCatch({
[13:36:48.249]         base::withCallingHandlers({
[13:36:48.249]             ...future.value <- base::withVisible(base::local({
[13:36:48.249]                 ...future.makeSendCondition <- base::local({
[13:36:48.249]                   sendCondition <- NULL
[13:36:48.249]                   function(frame = 1L) {
[13:36:48.249]                     if (is.function(sendCondition)) 
[13:36:48.249]                       return(sendCondition)
[13:36:48.249]                     ns <- getNamespace("parallel")
[13:36:48.249]                     if (exists("sendData", mode = "function", 
[13:36:48.249]                       envir = ns)) {
[13:36:48.249]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:48.249]                         envir = ns)
[13:36:48.249]                       envir <- sys.frame(frame)
[13:36:48.249]                       master <- NULL
[13:36:48.249]                       while (!identical(envir, .GlobalEnv) && 
[13:36:48.249]                         !identical(envir, emptyenv())) {
[13:36:48.249]                         if (exists("master", mode = "list", envir = envir, 
[13:36:48.249]                           inherits = FALSE)) {
[13:36:48.249]                           master <- get("master", mode = "list", 
[13:36:48.249]                             envir = envir, inherits = FALSE)
[13:36:48.249]                           if (inherits(master, c("SOCKnode", 
[13:36:48.249]                             "SOCK0node"))) {
[13:36:48.249]                             sendCondition <<- function(cond) {
[13:36:48.249]                               data <- list(type = "VALUE", value = cond, 
[13:36:48.249]                                 success = TRUE)
[13:36:48.249]                               parallel_sendData(master, data)
[13:36:48.249]                             }
[13:36:48.249]                             return(sendCondition)
[13:36:48.249]                           }
[13:36:48.249]                         }
[13:36:48.249]                         frame <- frame + 1L
[13:36:48.249]                         envir <- sys.frame(frame)
[13:36:48.249]                       }
[13:36:48.249]                     }
[13:36:48.249]                     sendCondition <<- function(cond) NULL
[13:36:48.249]                   }
[13:36:48.249]                 })
[13:36:48.249]                 withCallingHandlers({
[13:36:48.249]                   getOption("future.globals.onMissing")
[13:36:48.249]                 }, immediateCondition = function(cond) {
[13:36:48.249]                   sendCondition <- ...future.makeSendCondition()
[13:36:48.249]                   sendCondition(cond)
[13:36:48.249]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:48.249]                   {
[13:36:48.249]                     inherits <- base::inherits
[13:36:48.249]                     invokeRestart <- base::invokeRestart
[13:36:48.249]                     is.null <- base::is.null
[13:36:48.249]                     muffled <- FALSE
[13:36:48.249]                     if (inherits(cond, "message")) {
[13:36:48.249]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:48.249]                       if (muffled) 
[13:36:48.249]                         invokeRestart("muffleMessage")
[13:36:48.249]                     }
[13:36:48.249]                     else if (inherits(cond, "warning")) {
[13:36:48.249]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:48.249]                       if (muffled) 
[13:36:48.249]                         invokeRestart("muffleWarning")
[13:36:48.249]                     }
[13:36:48.249]                     else if (inherits(cond, "condition")) {
[13:36:48.249]                       if (!is.null(pattern)) {
[13:36:48.249]                         computeRestarts <- base::computeRestarts
[13:36:48.249]                         grepl <- base::grepl
[13:36:48.249]                         restarts <- computeRestarts(cond)
[13:36:48.249]                         for (restart in restarts) {
[13:36:48.249]                           name <- restart$name
[13:36:48.249]                           if (is.null(name)) 
[13:36:48.249]                             next
[13:36:48.249]                           if (!grepl(pattern, name)) 
[13:36:48.249]                             next
[13:36:48.249]                           invokeRestart(restart)
[13:36:48.249]                           muffled <- TRUE
[13:36:48.249]                           break
[13:36:48.249]                         }
[13:36:48.249]                       }
[13:36:48.249]                     }
[13:36:48.249]                     invisible(muffled)
[13:36:48.249]                   }
[13:36:48.249]                   muffleCondition(cond)
[13:36:48.249]                 })
[13:36:48.249]             }))
[13:36:48.249]             future::FutureResult(value = ...future.value$value, 
[13:36:48.249]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:48.249]                   ...future.rng), globalenv = if (FALSE) 
[13:36:48.249]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:48.249]                     ...future.globalenv.names))
[13:36:48.249]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:48.249]         }, condition = base::local({
[13:36:48.249]             c <- base::c
[13:36:48.249]             inherits <- base::inherits
[13:36:48.249]             invokeRestart <- base::invokeRestart
[13:36:48.249]             length <- base::length
[13:36:48.249]             list <- base::list
[13:36:48.249]             seq.int <- base::seq.int
[13:36:48.249]             signalCondition <- base::signalCondition
[13:36:48.249]             sys.calls <- base::sys.calls
[13:36:48.249]             `[[` <- base::`[[`
[13:36:48.249]             `+` <- base::`+`
[13:36:48.249]             `<<-` <- base::`<<-`
[13:36:48.249]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:48.249]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:48.249]                   3L)]
[13:36:48.249]             }
[13:36:48.249]             function(cond) {
[13:36:48.249]                 is_error <- inherits(cond, "error")
[13:36:48.249]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:48.249]                   NULL)
[13:36:48.249]                 if (is_error) {
[13:36:48.249]                   sessionInformation <- function() {
[13:36:48.249]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:48.249]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:48.249]                       search = base::search(), system = base::Sys.info())
[13:36:48.249]                   }
[13:36:48.249]                   ...future.conditions[[length(...future.conditions) + 
[13:36:48.249]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:48.249]                     cond$call), session = sessionInformation(), 
[13:36:48.249]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:48.249]                   signalCondition(cond)
[13:36:48.249]                 }
[13:36:48.249]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:48.249]                 "immediateCondition"))) {
[13:36:48.249]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:48.249]                   ...future.conditions[[length(...future.conditions) + 
[13:36:48.249]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:48.249]                   if (TRUE && !signal) {
[13:36:48.249]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:48.249]                     {
[13:36:48.249]                       inherits <- base::inherits
[13:36:48.249]                       invokeRestart <- base::invokeRestart
[13:36:48.249]                       is.null <- base::is.null
[13:36:48.249]                       muffled <- FALSE
[13:36:48.249]                       if (inherits(cond, "message")) {
[13:36:48.249]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:48.249]                         if (muffled) 
[13:36:48.249]                           invokeRestart("muffleMessage")
[13:36:48.249]                       }
[13:36:48.249]                       else if (inherits(cond, "warning")) {
[13:36:48.249]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:48.249]                         if (muffled) 
[13:36:48.249]                           invokeRestart("muffleWarning")
[13:36:48.249]                       }
[13:36:48.249]                       else if (inherits(cond, "condition")) {
[13:36:48.249]                         if (!is.null(pattern)) {
[13:36:48.249]                           computeRestarts <- base::computeRestarts
[13:36:48.249]                           grepl <- base::grepl
[13:36:48.249]                           restarts <- computeRestarts(cond)
[13:36:48.249]                           for (restart in restarts) {
[13:36:48.249]                             name <- restart$name
[13:36:48.249]                             if (is.null(name)) 
[13:36:48.249]                               next
[13:36:48.249]                             if (!grepl(pattern, name)) 
[13:36:48.249]                               next
[13:36:48.249]                             invokeRestart(restart)
[13:36:48.249]                             muffled <- TRUE
[13:36:48.249]                             break
[13:36:48.249]                           }
[13:36:48.249]                         }
[13:36:48.249]                       }
[13:36:48.249]                       invisible(muffled)
[13:36:48.249]                     }
[13:36:48.249]                     muffleCondition(cond, pattern = "^muffle")
[13:36:48.249]                   }
[13:36:48.249]                 }
[13:36:48.249]                 else {
[13:36:48.249]                   if (TRUE) {
[13:36:48.249]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:48.249]                     {
[13:36:48.249]                       inherits <- base::inherits
[13:36:48.249]                       invokeRestart <- base::invokeRestart
[13:36:48.249]                       is.null <- base::is.null
[13:36:48.249]                       muffled <- FALSE
[13:36:48.249]                       if (inherits(cond, "message")) {
[13:36:48.249]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:48.249]                         if (muffled) 
[13:36:48.249]                           invokeRestart("muffleMessage")
[13:36:48.249]                       }
[13:36:48.249]                       else if (inherits(cond, "warning")) {
[13:36:48.249]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:48.249]                         if (muffled) 
[13:36:48.249]                           invokeRestart("muffleWarning")
[13:36:48.249]                       }
[13:36:48.249]                       else if (inherits(cond, "condition")) {
[13:36:48.249]                         if (!is.null(pattern)) {
[13:36:48.249]                           computeRestarts <- base::computeRestarts
[13:36:48.249]                           grepl <- base::grepl
[13:36:48.249]                           restarts <- computeRestarts(cond)
[13:36:48.249]                           for (restart in restarts) {
[13:36:48.249]                             name <- restart$name
[13:36:48.249]                             if (is.null(name)) 
[13:36:48.249]                               next
[13:36:48.249]                             if (!grepl(pattern, name)) 
[13:36:48.249]                               next
[13:36:48.249]                             invokeRestart(restart)
[13:36:48.249]                             muffled <- TRUE
[13:36:48.249]                             break
[13:36:48.249]                           }
[13:36:48.249]                         }
[13:36:48.249]                       }
[13:36:48.249]                       invisible(muffled)
[13:36:48.249]                     }
[13:36:48.249]                     muffleCondition(cond, pattern = "^muffle")
[13:36:48.249]                   }
[13:36:48.249]                 }
[13:36:48.249]             }
[13:36:48.249]         }))
[13:36:48.249]     }, error = function(ex) {
[13:36:48.249]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:48.249]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:48.249]                 ...future.rng), started = ...future.startTime, 
[13:36:48.249]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:48.249]             version = "1.8"), class = "FutureResult")
[13:36:48.249]     }, finally = {
[13:36:48.249]         if (!identical(...future.workdir, getwd())) 
[13:36:48.249]             setwd(...future.workdir)
[13:36:48.249]         {
[13:36:48.249]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:48.249]                 ...future.oldOptions$nwarnings <- NULL
[13:36:48.249]             }
[13:36:48.249]             base::options(...future.oldOptions)
[13:36:48.249]             if (.Platform$OS.type == "windows") {
[13:36:48.249]                 old_names <- names(...future.oldEnvVars)
[13:36:48.249]                 envs <- base::Sys.getenv()
[13:36:48.249]                 names <- names(envs)
[13:36:48.249]                 common <- intersect(names, old_names)
[13:36:48.249]                 added <- setdiff(names, old_names)
[13:36:48.249]                 removed <- setdiff(old_names, names)
[13:36:48.249]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:48.249]                   envs[common]]
[13:36:48.249]                 NAMES <- toupper(changed)
[13:36:48.249]                 args <- list()
[13:36:48.249]                 for (kk in seq_along(NAMES)) {
[13:36:48.249]                   name <- changed[[kk]]
[13:36:48.249]                   NAME <- NAMES[[kk]]
[13:36:48.249]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:48.249]                     next
[13:36:48.249]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:48.249]                 }
[13:36:48.249]                 NAMES <- toupper(added)
[13:36:48.249]                 for (kk in seq_along(NAMES)) {
[13:36:48.249]                   name <- added[[kk]]
[13:36:48.249]                   NAME <- NAMES[[kk]]
[13:36:48.249]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:48.249]                     next
[13:36:48.249]                   args[[name]] <- ""
[13:36:48.249]                 }
[13:36:48.249]                 NAMES <- toupper(removed)
[13:36:48.249]                 for (kk in seq_along(NAMES)) {
[13:36:48.249]                   name <- removed[[kk]]
[13:36:48.249]                   NAME <- NAMES[[kk]]
[13:36:48.249]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:48.249]                     next
[13:36:48.249]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:48.249]                 }
[13:36:48.249]                 if (length(args) > 0) 
[13:36:48.249]                   base::do.call(base::Sys.setenv, args = args)
[13:36:48.249]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:48.249]             }
[13:36:48.249]             else {
[13:36:48.249]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:48.249]             }
[13:36:48.249]             {
[13:36:48.249]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:48.249]                   0L) {
[13:36:48.249]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:48.249]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:48.249]                   base::options(opts)
[13:36:48.249]                 }
[13:36:48.249]                 {
[13:36:48.249]                   {
[13:36:48.249]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:48.249]                     NULL
[13:36:48.249]                   }
[13:36:48.249]                   options(future.plan = NULL)
[13:36:48.249]                   if (is.na(NA_character_)) 
[13:36:48.249]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:48.249]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:48.249]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:48.249]                     .init = FALSE)
[13:36:48.249]                 }
[13:36:48.249]             }
[13:36:48.249]         }
[13:36:48.249]     })
[13:36:48.249]     if (TRUE) {
[13:36:48.249]         base::sink(type = "output", split = FALSE)
[13:36:48.249]         if (TRUE) {
[13:36:48.249]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:48.249]         }
[13:36:48.249]         else {
[13:36:48.249]             ...future.result["stdout"] <- base::list(NULL)
[13:36:48.249]         }
[13:36:48.249]         base::close(...future.stdout)
[13:36:48.249]         ...future.stdout <- NULL
[13:36:48.249]     }
[13:36:48.249]     ...future.result$conditions <- ...future.conditions
[13:36:48.249]     ...future.result$finished <- base::Sys.time()
[13:36:48.249]     ...future.result
[13:36:48.249] }
[13:36:48.253] MultisessionFuture started
[13:36:48.253] - Launch lazy future ... done
[13:36:48.253] run() for ‘MultisessionFuture’ ... done
[13:36:48.253] result() for ClusterFuture ...
[13:36:48.253] receiveMessageFromWorker() for ClusterFuture ...
[13:36:48.253] - Validating connection of MultisessionFuture
[13:36:48.258] - received message: FutureResult
[13:36:48.258] - Received FutureResult
[13:36:48.258] - Erased future from FutureRegistry
[13:36:48.258] result() for ClusterFuture ...
[13:36:48.258] - result already collected: FutureResult
[13:36:48.258] result() for ClusterFuture ... done
[13:36:48.259] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:48.259] result() for ClusterFuture ... done
[13:36:48.259] result() for ClusterFuture ...
[13:36:48.259] - result already collected: FutureResult
[13:36:48.259] result() for ClusterFuture ... done
[13:36:48.259] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[13:36:48.260] Searching for globals...
[13:36:48.260] - globals found: [1] ‘getOption’
[13:36:48.260] Searching for globals ... DONE
[13:36:48.261] Resolving globals: FALSE
[13:36:48.261] 
[13:36:48.261] 
[13:36:48.261] getGlobalsAndPackages() ... DONE
[13:36:48.261] run() for ‘Future’ ...
[13:36:48.261] - state: ‘created’
[13:36:48.262] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:48.276] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:48.276] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:48.276]   - Field: ‘node’
[13:36:48.276]   - Field: ‘label’
[13:36:48.276]   - Field: ‘local’
[13:36:48.276]   - Field: ‘owner’
[13:36:48.277]   - Field: ‘envir’
[13:36:48.277]   - Field: ‘workers’
[13:36:48.277]   - Field: ‘packages’
[13:36:48.277]   - Field: ‘gc’
[13:36:48.277]   - Field: ‘conditions’
[13:36:48.277]   - Field: ‘persistent’
[13:36:48.277]   - Field: ‘expr’
[13:36:48.277]   - Field: ‘uuid’
[13:36:48.277]   - Field: ‘seed’
[13:36:48.277]   - Field: ‘version’
[13:36:48.278]   - Field: ‘result’
[13:36:48.278]   - Field: ‘asynchronous’
[13:36:48.278]   - Field: ‘calls’
[13:36:48.278]   - Field: ‘globals’
[13:36:48.278]   - Field: ‘stdout’
[13:36:48.278]   - Field: ‘earlySignal’
[13:36:48.278]   - Field: ‘lazy’
[13:36:48.278]   - Field: ‘state’
[13:36:48.279] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:48.279] - Launch lazy future ...
[13:36:48.279] Packages needed by the future expression (n = 0): <none>
[13:36:48.279] Packages needed by future strategies (n = 0): <none>
[13:36:48.280] {
[13:36:48.280]     {
[13:36:48.280]         {
[13:36:48.280]             ...future.startTime <- base::Sys.time()
[13:36:48.280]             {
[13:36:48.280]                 {
[13:36:48.280]                   {
[13:36:48.280]                     {
[13:36:48.280]                       base::local({
[13:36:48.280]                         has_future <- base::requireNamespace("future", 
[13:36:48.280]                           quietly = TRUE)
[13:36:48.280]                         if (has_future) {
[13:36:48.280]                           ns <- base::getNamespace("future")
[13:36:48.280]                           version <- ns[[".package"]][["version"]]
[13:36:48.280]                           if (is.null(version)) 
[13:36:48.280]                             version <- utils::packageVersion("future")
[13:36:48.280]                         }
[13:36:48.280]                         else {
[13:36:48.280]                           version <- NULL
[13:36:48.280]                         }
[13:36:48.280]                         if (!has_future || version < "1.8.0") {
[13:36:48.280]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:48.280]                             "", base::R.version$version.string), 
[13:36:48.280]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:48.280]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:48.280]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:48.280]                               "release", "version")], collapse = " "), 
[13:36:48.280]                             hostname = base::Sys.info()[["nodename"]])
[13:36:48.280]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:48.280]                             info)
[13:36:48.280]                           info <- base::paste(info, collapse = "; ")
[13:36:48.280]                           if (!has_future) {
[13:36:48.280]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:48.280]                               info)
[13:36:48.280]                           }
[13:36:48.280]                           else {
[13:36:48.280]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:48.280]                               info, version)
[13:36:48.280]                           }
[13:36:48.280]                           base::stop(msg)
[13:36:48.280]                         }
[13:36:48.280]                       })
[13:36:48.280]                     }
[13:36:48.280]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:48.280]                     base::options(mc.cores = 1L)
[13:36:48.280]                   }
[13:36:48.280]                   ...future.strategy.old <- future::plan("list")
[13:36:48.280]                   options(future.plan = NULL)
[13:36:48.280]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:48.280]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:48.280]                 }
[13:36:48.280]                 ...future.workdir <- getwd()
[13:36:48.280]             }
[13:36:48.280]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:48.280]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:48.280]         }
[13:36:48.280]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[13:36:48.280]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:48.280]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[13:36:48.280]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:48.280]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:48.280]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:48.280]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:48.280]             base::names(...future.oldOptions))
[13:36:48.280]     }
[13:36:48.280]     if (FALSE) {
[13:36:48.280]     }
[13:36:48.280]     else {
[13:36:48.280]         if (TRUE) {
[13:36:48.280]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:48.280]                 open = "w")
[13:36:48.280]         }
[13:36:48.280]         else {
[13:36:48.280]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:48.280]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:48.280]         }
[13:36:48.280]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:48.280]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:48.280]             base::sink(type = "output", split = FALSE)
[13:36:48.280]             base::close(...future.stdout)
[13:36:48.280]         }, add = TRUE)
[13:36:48.280]     }
[13:36:48.280]     ...future.frame <- base::sys.nframe()
[13:36:48.280]     ...future.conditions <- base::list()
[13:36:48.280]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:48.280]     if (FALSE) {
[13:36:48.280]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:48.280]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:48.280]     }
[13:36:48.280]     ...future.result <- base::tryCatch({
[13:36:48.280]         base::withCallingHandlers({
[13:36:48.280]             ...future.value <- base::withVisible(base::local({
[13:36:48.280]                 ...future.makeSendCondition <- base::local({
[13:36:48.280]                   sendCondition <- NULL
[13:36:48.280]                   function(frame = 1L) {
[13:36:48.280]                     if (is.function(sendCondition)) 
[13:36:48.280]                       return(sendCondition)
[13:36:48.280]                     ns <- getNamespace("parallel")
[13:36:48.280]                     if (exists("sendData", mode = "function", 
[13:36:48.280]                       envir = ns)) {
[13:36:48.280]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:48.280]                         envir = ns)
[13:36:48.280]                       envir <- sys.frame(frame)
[13:36:48.280]                       master <- NULL
[13:36:48.280]                       while (!identical(envir, .GlobalEnv) && 
[13:36:48.280]                         !identical(envir, emptyenv())) {
[13:36:48.280]                         if (exists("master", mode = "list", envir = envir, 
[13:36:48.280]                           inherits = FALSE)) {
[13:36:48.280]                           master <- get("master", mode = "list", 
[13:36:48.280]                             envir = envir, inherits = FALSE)
[13:36:48.280]                           if (inherits(master, c("SOCKnode", 
[13:36:48.280]                             "SOCK0node"))) {
[13:36:48.280]                             sendCondition <<- function(cond) {
[13:36:48.280]                               data <- list(type = "VALUE", value = cond, 
[13:36:48.280]                                 success = TRUE)
[13:36:48.280]                               parallel_sendData(master, data)
[13:36:48.280]                             }
[13:36:48.280]                             return(sendCondition)
[13:36:48.280]                           }
[13:36:48.280]                         }
[13:36:48.280]                         frame <- frame + 1L
[13:36:48.280]                         envir <- sys.frame(frame)
[13:36:48.280]                       }
[13:36:48.280]                     }
[13:36:48.280]                     sendCondition <<- function(cond) NULL
[13:36:48.280]                   }
[13:36:48.280]                 })
[13:36:48.280]                 withCallingHandlers({
[13:36:48.280]                   getOption("future.globals.onMissing")
[13:36:48.280]                 }, immediateCondition = function(cond) {
[13:36:48.280]                   sendCondition <- ...future.makeSendCondition()
[13:36:48.280]                   sendCondition(cond)
[13:36:48.280]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:48.280]                   {
[13:36:48.280]                     inherits <- base::inherits
[13:36:48.280]                     invokeRestart <- base::invokeRestart
[13:36:48.280]                     is.null <- base::is.null
[13:36:48.280]                     muffled <- FALSE
[13:36:48.280]                     if (inherits(cond, "message")) {
[13:36:48.280]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:48.280]                       if (muffled) 
[13:36:48.280]                         invokeRestart("muffleMessage")
[13:36:48.280]                     }
[13:36:48.280]                     else if (inherits(cond, "warning")) {
[13:36:48.280]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:48.280]                       if (muffled) 
[13:36:48.280]                         invokeRestart("muffleWarning")
[13:36:48.280]                     }
[13:36:48.280]                     else if (inherits(cond, "condition")) {
[13:36:48.280]                       if (!is.null(pattern)) {
[13:36:48.280]                         computeRestarts <- base::computeRestarts
[13:36:48.280]                         grepl <- base::grepl
[13:36:48.280]                         restarts <- computeRestarts(cond)
[13:36:48.280]                         for (restart in restarts) {
[13:36:48.280]                           name <- restart$name
[13:36:48.280]                           if (is.null(name)) 
[13:36:48.280]                             next
[13:36:48.280]                           if (!grepl(pattern, name)) 
[13:36:48.280]                             next
[13:36:48.280]                           invokeRestart(restart)
[13:36:48.280]                           muffled <- TRUE
[13:36:48.280]                           break
[13:36:48.280]                         }
[13:36:48.280]                       }
[13:36:48.280]                     }
[13:36:48.280]                     invisible(muffled)
[13:36:48.280]                   }
[13:36:48.280]                   muffleCondition(cond)
[13:36:48.280]                 })
[13:36:48.280]             }))
[13:36:48.280]             future::FutureResult(value = ...future.value$value, 
[13:36:48.280]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:48.280]                   ...future.rng), globalenv = if (FALSE) 
[13:36:48.280]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:48.280]                     ...future.globalenv.names))
[13:36:48.280]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:48.280]         }, condition = base::local({
[13:36:48.280]             c <- base::c
[13:36:48.280]             inherits <- base::inherits
[13:36:48.280]             invokeRestart <- base::invokeRestart
[13:36:48.280]             length <- base::length
[13:36:48.280]             list <- base::list
[13:36:48.280]             seq.int <- base::seq.int
[13:36:48.280]             signalCondition <- base::signalCondition
[13:36:48.280]             sys.calls <- base::sys.calls
[13:36:48.280]             `[[` <- base::`[[`
[13:36:48.280]             `+` <- base::`+`
[13:36:48.280]             `<<-` <- base::`<<-`
[13:36:48.280]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:48.280]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:48.280]                   3L)]
[13:36:48.280]             }
[13:36:48.280]             function(cond) {
[13:36:48.280]                 is_error <- inherits(cond, "error")
[13:36:48.280]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:48.280]                   NULL)
[13:36:48.280]                 if (is_error) {
[13:36:48.280]                   sessionInformation <- function() {
[13:36:48.280]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:48.280]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:48.280]                       search = base::search(), system = base::Sys.info())
[13:36:48.280]                   }
[13:36:48.280]                   ...future.conditions[[length(...future.conditions) + 
[13:36:48.280]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:48.280]                     cond$call), session = sessionInformation(), 
[13:36:48.280]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:48.280]                   signalCondition(cond)
[13:36:48.280]                 }
[13:36:48.280]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:48.280]                 "immediateCondition"))) {
[13:36:48.280]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:48.280]                   ...future.conditions[[length(...future.conditions) + 
[13:36:48.280]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:48.280]                   if (TRUE && !signal) {
[13:36:48.280]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:48.280]                     {
[13:36:48.280]                       inherits <- base::inherits
[13:36:48.280]                       invokeRestart <- base::invokeRestart
[13:36:48.280]                       is.null <- base::is.null
[13:36:48.280]                       muffled <- FALSE
[13:36:48.280]                       if (inherits(cond, "message")) {
[13:36:48.280]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:48.280]                         if (muffled) 
[13:36:48.280]                           invokeRestart("muffleMessage")
[13:36:48.280]                       }
[13:36:48.280]                       else if (inherits(cond, "warning")) {
[13:36:48.280]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:48.280]                         if (muffled) 
[13:36:48.280]                           invokeRestart("muffleWarning")
[13:36:48.280]                       }
[13:36:48.280]                       else if (inherits(cond, "condition")) {
[13:36:48.280]                         if (!is.null(pattern)) {
[13:36:48.280]                           computeRestarts <- base::computeRestarts
[13:36:48.280]                           grepl <- base::grepl
[13:36:48.280]                           restarts <- computeRestarts(cond)
[13:36:48.280]                           for (restart in restarts) {
[13:36:48.280]                             name <- restart$name
[13:36:48.280]                             if (is.null(name)) 
[13:36:48.280]                               next
[13:36:48.280]                             if (!grepl(pattern, name)) 
[13:36:48.280]                               next
[13:36:48.280]                             invokeRestart(restart)
[13:36:48.280]                             muffled <- TRUE
[13:36:48.280]                             break
[13:36:48.280]                           }
[13:36:48.280]                         }
[13:36:48.280]                       }
[13:36:48.280]                       invisible(muffled)
[13:36:48.280]                     }
[13:36:48.280]                     muffleCondition(cond, pattern = "^muffle")
[13:36:48.280]                   }
[13:36:48.280]                 }
[13:36:48.280]                 else {
[13:36:48.280]                   if (TRUE) {
[13:36:48.280]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:48.280]                     {
[13:36:48.280]                       inherits <- base::inherits
[13:36:48.280]                       invokeRestart <- base::invokeRestart
[13:36:48.280]                       is.null <- base::is.null
[13:36:48.280]                       muffled <- FALSE
[13:36:48.280]                       if (inherits(cond, "message")) {
[13:36:48.280]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:48.280]                         if (muffled) 
[13:36:48.280]                           invokeRestart("muffleMessage")
[13:36:48.280]                       }
[13:36:48.280]                       else if (inherits(cond, "warning")) {
[13:36:48.280]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:48.280]                         if (muffled) 
[13:36:48.280]                           invokeRestart("muffleWarning")
[13:36:48.280]                       }
[13:36:48.280]                       else if (inherits(cond, "condition")) {
[13:36:48.280]                         if (!is.null(pattern)) {
[13:36:48.280]                           computeRestarts <- base::computeRestarts
[13:36:48.280]                           grepl <- base::grepl
[13:36:48.280]                           restarts <- computeRestarts(cond)
[13:36:48.280]                           for (restart in restarts) {
[13:36:48.280]                             name <- restart$name
[13:36:48.280]                             if (is.null(name)) 
[13:36:48.280]                               next
[13:36:48.280]                             if (!grepl(pattern, name)) 
[13:36:48.280]                               next
[13:36:48.280]                             invokeRestart(restart)
[13:36:48.280]                             muffled <- TRUE
[13:36:48.280]                             break
[13:36:48.280]                           }
[13:36:48.280]                         }
[13:36:48.280]                       }
[13:36:48.280]                       invisible(muffled)
[13:36:48.280]                     }
[13:36:48.280]                     muffleCondition(cond, pattern = "^muffle")
[13:36:48.280]                   }
[13:36:48.280]                 }
[13:36:48.280]             }
[13:36:48.280]         }))
[13:36:48.280]     }, error = function(ex) {
[13:36:48.280]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:48.280]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:48.280]                 ...future.rng), started = ...future.startTime, 
[13:36:48.280]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:48.280]             version = "1.8"), class = "FutureResult")
[13:36:48.280]     }, finally = {
[13:36:48.280]         if (!identical(...future.workdir, getwd())) 
[13:36:48.280]             setwd(...future.workdir)
[13:36:48.280]         {
[13:36:48.280]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:48.280]                 ...future.oldOptions$nwarnings <- NULL
[13:36:48.280]             }
[13:36:48.280]             base::options(...future.oldOptions)
[13:36:48.280]             if (.Platform$OS.type == "windows") {
[13:36:48.280]                 old_names <- names(...future.oldEnvVars)
[13:36:48.280]                 envs <- base::Sys.getenv()
[13:36:48.280]                 names <- names(envs)
[13:36:48.280]                 common <- intersect(names, old_names)
[13:36:48.280]                 added <- setdiff(names, old_names)
[13:36:48.280]                 removed <- setdiff(old_names, names)
[13:36:48.280]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:48.280]                   envs[common]]
[13:36:48.280]                 NAMES <- toupper(changed)
[13:36:48.280]                 args <- list()
[13:36:48.280]                 for (kk in seq_along(NAMES)) {
[13:36:48.280]                   name <- changed[[kk]]
[13:36:48.280]                   NAME <- NAMES[[kk]]
[13:36:48.280]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:48.280]                     next
[13:36:48.280]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:48.280]                 }
[13:36:48.280]                 NAMES <- toupper(added)
[13:36:48.280]                 for (kk in seq_along(NAMES)) {
[13:36:48.280]                   name <- added[[kk]]
[13:36:48.280]                   NAME <- NAMES[[kk]]
[13:36:48.280]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:48.280]                     next
[13:36:48.280]                   args[[name]] <- ""
[13:36:48.280]                 }
[13:36:48.280]                 NAMES <- toupper(removed)
[13:36:48.280]                 for (kk in seq_along(NAMES)) {
[13:36:48.280]                   name <- removed[[kk]]
[13:36:48.280]                   NAME <- NAMES[[kk]]
[13:36:48.280]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:48.280]                     next
[13:36:48.280]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:48.280]                 }
[13:36:48.280]                 if (length(args) > 0) 
[13:36:48.280]                   base::do.call(base::Sys.setenv, args = args)
[13:36:48.280]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:48.280]             }
[13:36:48.280]             else {
[13:36:48.280]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:48.280]             }
[13:36:48.280]             {
[13:36:48.280]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:48.280]                   0L) {
[13:36:48.280]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:48.280]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:48.280]                   base::options(opts)
[13:36:48.280]                 }
[13:36:48.280]                 {
[13:36:48.280]                   {
[13:36:48.280]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:48.280]                     NULL
[13:36:48.280]                   }
[13:36:48.280]                   options(future.plan = NULL)
[13:36:48.280]                   if (is.na(NA_character_)) 
[13:36:48.280]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:48.280]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:48.280]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:48.280]                     .init = FALSE)
[13:36:48.280]                 }
[13:36:48.280]             }
[13:36:48.280]         }
[13:36:48.280]     })
[13:36:48.280]     if (TRUE) {
[13:36:48.280]         base::sink(type = "output", split = FALSE)
[13:36:48.280]         if (TRUE) {
[13:36:48.280]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:48.280]         }
[13:36:48.280]         else {
[13:36:48.280]             ...future.result["stdout"] <- base::list(NULL)
[13:36:48.280]         }
[13:36:48.280]         base::close(...future.stdout)
[13:36:48.280]         ...future.stdout <- NULL
[13:36:48.280]     }
[13:36:48.280]     ...future.result$conditions <- ...future.conditions
[13:36:48.280]     ...future.result$finished <- base::Sys.time()
[13:36:48.280]     ...future.result
[13:36:48.280] }
[13:36:48.283] MultisessionFuture started
[13:36:48.283] - Launch lazy future ... done
[13:36:48.283] run() for ‘MultisessionFuture’ ... done
[13:36:48.283] result() for ClusterFuture ...
[13:36:48.283] receiveMessageFromWorker() for ClusterFuture ...
[13:36:48.284] - Validating connection of MultisessionFuture
[13:36:48.284] - received message: FutureResult
[13:36:48.285] - Received FutureResult
[13:36:48.285] - Erased future from FutureRegistry
[13:36:48.285] result() for ClusterFuture ...
[13:36:48.285] - result already collected: FutureResult
[13:36:48.285] result() for ClusterFuture ... done
[13:36:48.285] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:48.285] result() for ClusterFuture ... done
[13:36:48.285] result() for ClusterFuture ...
[13:36:48.285] - result already collected: FutureResult
[13:36:48.285] result() for ClusterFuture ... done
[13:36:48.286] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:48.286] Searching for globals...
[13:36:48.288] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[13:36:48.288] Searching for globals...
[13:36:48.289] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[13:36:48.289] Searching for globals ... DONE
[13:36:48.289] Resolving globals: FALSE
[13:36:48.290] The total size of the 1 globals is 160 bytes (160 bytes)
[13:36:48.290] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[13:36:48.290] - globals: [1] ‘data’
[13:36:48.291] 
[13:36:48.291] getGlobalsAndPackages() ... DONE
[13:36:48.291] run() for ‘Future’ ...
[13:36:48.291] - state: ‘created’
[13:36:48.291] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:48.305] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:48.306] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:48.306]   - Field: ‘node’
[13:36:48.306]   - Field: ‘label’
[13:36:48.306]   - Field: ‘local’
[13:36:48.306]   - Field: ‘owner’
[13:36:48.306]   - Field: ‘envir’
[13:36:48.306]   - Field: ‘workers’
[13:36:48.306]   - Field: ‘packages’
[13:36:48.306]   - Field: ‘gc’
[13:36:48.307]   - Field: ‘conditions’
[13:36:48.307]   - Field: ‘persistent’
[13:36:48.307]   - Field: ‘expr’
[13:36:48.307]   - Field: ‘uuid’
[13:36:48.307]   - Field: ‘seed’
[13:36:48.307]   - Field: ‘version’
[13:36:48.307]   - Field: ‘result’
[13:36:48.307]   - Field: ‘asynchronous’
[13:36:48.308]   - Field: ‘calls’
[13:36:48.308]   - Field: ‘globals’
[13:36:48.308]   - Field: ‘stdout’
[13:36:48.308]   - Field: ‘earlySignal’
[13:36:48.308]   - Field: ‘lazy’
[13:36:48.308]   - Field: ‘state’
[13:36:48.308] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:48.308] - Launch lazy future ...
[13:36:48.309] Packages needed by the future expression (n = 0): <none>
[13:36:48.309] Packages needed by future strategies (n = 0): <none>
[13:36:48.309] {
[13:36:48.309]     {
[13:36:48.309]         {
[13:36:48.309]             ...future.startTime <- base::Sys.time()
[13:36:48.309]             {
[13:36:48.309]                 {
[13:36:48.309]                   {
[13:36:48.309]                     {
[13:36:48.309]                       base::local({
[13:36:48.309]                         has_future <- base::requireNamespace("future", 
[13:36:48.309]                           quietly = TRUE)
[13:36:48.309]                         if (has_future) {
[13:36:48.309]                           ns <- base::getNamespace("future")
[13:36:48.309]                           version <- ns[[".package"]][["version"]]
[13:36:48.309]                           if (is.null(version)) 
[13:36:48.309]                             version <- utils::packageVersion("future")
[13:36:48.309]                         }
[13:36:48.309]                         else {
[13:36:48.309]                           version <- NULL
[13:36:48.309]                         }
[13:36:48.309]                         if (!has_future || version < "1.8.0") {
[13:36:48.309]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:48.309]                             "", base::R.version$version.string), 
[13:36:48.309]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:48.309]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:48.309]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:48.309]                               "release", "version")], collapse = " "), 
[13:36:48.309]                             hostname = base::Sys.info()[["nodename"]])
[13:36:48.309]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:48.309]                             info)
[13:36:48.309]                           info <- base::paste(info, collapse = "; ")
[13:36:48.309]                           if (!has_future) {
[13:36:48.309]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:48.309]                               info)
[13:36:48.309]                           }
[13:36:48.309]                           else {
[13:36:48.309]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:48.309]                               info, version)
[13:36:48.309]                           }
[13:36:48.309]                           base::stop(msg)
[13:36:48.309]                         }
[13:36:48.309]                       })
[13:36:48.309]                     }
[13:36:48.309]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:48.309]                     base::options(mc.cores = 1L)
[13:36:48.309]                   }
[13:36:48.309]                   ...future.strategy.old <- future::plan("list")
[13:36:48.309]                   options(future.plan = NULL)
[13:36:48.309]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:48.309]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:48.309]                 }
[13:36:48.309]                 ...future.workdir <- getwd()
[13:36:48.309]             }
[13:36:48.309]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:48.309]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:48.309]         }
[13:36:48.309]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[13:36:48.309]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:48.309]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[13:36:48.309]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:48.309]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:48.309]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:48.309]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:48.309]             base::names(...future.oldOptions))
[13:36:48.309]     }
[13:36:48.309]     if (FALSE) {
[13:36:48.309]     }
[13:36:48.309]     else {
[13:36:48.309]         if (TRUE) {
[13:36:48.309]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:48.309]                 open = "w")
[13:36:48.309]         }
[13:36:48.309]         else {
[13:36:48.309]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:48.309]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:48.309]         }
[13:36:48.309]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:48.309]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:48.309]             base::sink(type = "output", split = FALSE)
[13:36:48.309]             base::close(...future.stdout)
[13:36:48.309]         }, add = TRUE)
[13:36:48.309]     }
[13:36:48.309]     ...future.frame <- base::sys.nframe()
[13:36:48.309]     ...future.conditions <- base::list()
[13:36:48.309]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:48.309]     if (FALSE) {
[13:36:48.309]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:48.309]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:48.309]     }
[13:36:48.309]     ...future.result <- base::tryCatch({
[13:36:48.309]         base::withCallingHandlers({
[13:36:48.309]             ...future.value <- base::withVisible(base::local({
[13:36:48.309]                 ...future.makeSendCondition <- base::local({
[13:36:48.309]                   sendCondition <- NULL
[13:36:48.309]                   function(frame = 1L) {
[13:36:48.309]                     if (is.function(sendCondition)) 
[13:36:48.309]                       return(sendCondition)
[13:36:48.309]                     ns <- getNamespace("parallel")
[13:36:48.309]                     if (exists("sendData", mode = "function", 
[13:36:48.309]                       envir = ns)) {
[13:36:48.309]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:48.309]                         envir = ns)
[13:36:48.309]                       envir <- sys.frame(frame)
[13:36:48.309]                       master <- NULL
[13:36:48.309]                       while (!identical(envir, .GlobalEnv) && 
[13:36:48.309]                         !identical(envir, emptyenv())) {
[13:36:48.309]                         if (exists("master", mode = "list", envir = envir, 
[13:36:48.309]                           inherits = FALSE)) {
[13:36:48.309]                           master <- get("master", mode = "list", 
[13:36:48.309]                             envir = envir, inherits = FALSE)
[13:36:48.309]                           if (inherits(master, c("SOCKnode", 
[13:36:48.309]                             "SOCK0node"))) {
[13:36:48.309]                             sendCondition <<- function(cond) {
[13:36:48.309]                               data <- list(type = "VALUE", value = cond, 
[13:36:48.309]                                 success = TRUE)
[13:36:48.309]                               parallel_sendData(master, data)
[13:36:48.309]                             }
[13:36:48.309]                             return(sendCondition)
[13:36:48.309]                           }
[13:36:48.309]                         }
[13:36:48.309]                         frame <- frame + 1L
[13:36:48.309]                         envir <- sys.frame(frame)
[13:36:48.309]                       }
[13:36:48.309]                     }
[13:36:48.309]                     sendCondition <<- function(cond) NULL
[13:36:48.309]                   }
[13:36:48.309]                 })
[13:36:48.309]                 withCallingHandlers({
[13:36:48.309]                   subset(data, x < 3)$y
[13:36:48.309]                 }, immediateCondition = function(cond) {
[13:36:48.309]                   sendCondition <- ...future.makeSendCondition()
[13:36:48.309]                   sendCondition(cond)
[13:36:48.309]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:48.309]                   {
[13:36:48.309]                     inherits <- base::inherits
[13:36:48.309]                     invokeRestart <- base::invokeRestart
[13:36:48.309]                     is.null <- base::is.null
[13:36:48.309]                     muffled <- FALSE
[13:36:48.309]                     if (inherits(cond, "message")) {
[13:36:48.309]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:48.309]                       if (muffled) 
[13:36:48.309]                         invokeRestart("muffleMessage")
[13:36:48.309]                     }
[13:36:48.309]                     else if (inherits(cond, "warning")) {
[13:36:48.309]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:48.309]                       if (muffled) 
[13:36:48.309]                         invokeRestart("muffleWarning")
[13:36:48.309]                     }
[13:36:48.309]                     else if (inherits(cond, "condition")) {
[13:36:48.309]                       if (!is.null(pattern)) {
[13:36:48.309]                         computeRestarts <- base::computeRestarts
[13:36:48.309]                         grepl <- base::grepl
[13:36:48.309]                         restarts <- computeRestarts(cond)
[13:36:48.309]                         for (restart in restarts) {
[13:36:48.309]                           name <- restart$name
[13:36:48.309]                           if (is.null(name)) 
[13:36:48.309]                             next
[13:36:48.309]                           if (!grepl(pattern, name)) 
[13:36:48.309]                             next
[13:36:48.309]                           invokeRestart(restart)
[13:36:48.309]                           muffled <- TRUE
[13:36:48.309]                           break
[13:36:48.309]                         }
[13:36:48.309]                       }
[13:36:48.309]                     }
[13:36:48.309]                     invisible(muffled)
[13:36:48.309]                   }
[13:36:48.309]                   muffleCondition(cond)
[13:36:48.309]                 })
[13:36:48.309]             }))
[13:36:48.309]             future::FutureResult(value = ...future.value$value, 
[13:36:48.309]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:48.309]                   ...future.rng), globalenv = if (FALSE) 
[13:36:48.309]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:48.309]                     ...future.globalenv.names))
[13:36:48.309]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:48.309]         }, condition = base::local({
[13:36:48.309]             c <- base::c
[13:36:48.309]             inherits <- base::inherits
[13:36:48.309]             invokeRestart <- base::invokeRestart
[13:36:48.309]             length <- base::length
[13:36:48.309]             list <- base::list
[13:36:48.309]             seq.int <- base::seq.int
[13:36:48.309]             signalCondition <- base::signalCondition
[13:36:48.309]             sys.calls <- base::sys.calls
[13:36:48.309]             `[[` <- base::`[[`
[13:36:48.309]             `+` <- base::`+`
[13:36:48.309]             `<<-` <- base::`<<-`
[13:36:48.309]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:48.309]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:48.309]                   3L)]
[13:36:48.309]             }
[13:36:48.309]             function(cond) {
[13:36:48.309]                 is_error <- inherits(cond, "error")
[13:36:48.309]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:48.309]                   NULL)
[13:36:48.309]                 if (is_error) {
[13:36:48.309]                   sessionInformation <- function() {
[13:36:48.309]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:48.309]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:48.309]                       search = base::search(), system = base::Sys.info())
[13:36:48.309]                   }
[13:36:48.309]                   ...future.conditions[[length(...future.conditions) + 
[13:36:48.309]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:48.309]                     cond$call), session = sessionInformation(), 
[13:36:48.309]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:48.309]                   signalCondition(cond)
[13:36:48.309]                 }
[13:36:48.309]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:48.309]                 "immediateCondition"))) {
[13:36:48.309]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:48.309]                   ...future.conditions[[length(...future.conditions) + 
[13:36:48.309]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:48.309]                   if (TRUE && !signal) {
[13:36:48.309]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:48.309]                     {
[13:36:48.309]                       inherits <- base::inherits
[13:36:48.309]                       invokeRestart <- base::invokeRestart
[13:36:48.309]                       is.null <- base::is.null
[13:36:48.309]                       muffled <- FALSE
[13:36:48.309]                       if (inherits(cond, "message")) {
[13:36:48.309]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:48.309]                         if (muffled) 
[13:36:48.309]                           invokeRestart("muffleMessage")
[13:36:48.309]                       }
[13:36:48.309]                       else if (inherits(cond, "warning")) {
[13:36:48.309]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:48.309]                         if (muffled) 
[13:36:48.309]                           invokeRestart("muffleWarning")
[13:36:48.309]                       }
[13:36:48.309]                       else if (inherits(cond, "condition")) {
[13:36:48.309]                         if (!is.null(pattern)) {
[13:36:48.309]                           computeRestarts <- base::computeRestarts
[13:36:48.309]                           grepl <- base::grepl
[13:36:48.309]                           restarts <- computeRestarts(cond)
[13:36:48.309]                           for (restart in restarts) {
[13:36:48.309]                             name <- restart$name
[13:36:48.309]                             if (is.null(name)) 
[13:36:48.309]                               next
[13:36:48.309]                             if (!grepl(pattern, name)) 
[13:36:48.309]                               next
[13:36:48.309]                             invokeRestart(restart)
[13:36:48.309]                             muffled <- TRUE
[13:36:48.309]                             break
[13:36:48.309]                           }
[13:36:48.309]                         }
[13:36:48.309]                       }
[13:36:48.309]                       invisible(muffled)
[13:36:48.309]                     }
[13:36:48.309]                     muffleCondition(cond, pattern = "^muffle")
[13:36:48.309]                   }
[13:36:48.309]                 }
[13:36:48.309]                 else {
[13:36:48.309]                   if (TRUE) {
[13:36:48.309]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:48.309]                     {
[13:36:48.309]                       inherits <- base::inherits
[13:36:48.309]                       invokeRestart <- base::invokeRestart
[13:36:48.309]                       is.null <- base::is.null
[13:36:48.309]                       muffled <- FALSE
[13:36:48.309]                       if (inherits(cond, "message")) {
[13:36:48.309]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:48.309]                         if (muffled) 
[13:36:48.309]                           invokeRestart("muffleMessage")
[13:36:48.309]                       }
[13:36:48.309]                       else if (inherits(cond, "warning")) {
[13:36:48.309]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:48.309]                         if (muffled) 
[13:36:48.309]                           invokeRestart("muffleWarning")
[13:36:48.309]                       }
[13:36:48.309]                       else if (inherits(cond, "condition")) {
[13:36:48.309]                         if (!is.null(pattern)) {
[13:36:48.309]                           computeRestarts <- base::computeRestarts
[13:36:48.309]                           grepl <- base::grepl
[13:36:48.309]                           restarts <- computeRestarts(cond)
[13:36:48.309]                           for (restart in restarts) {
[13:36:48.309]                             name <- restart$name
[13:36:48.309]                             if (is.null(name)) 
[13:36:48.309]                               next
[13:36:48.309]                             if (!grepl(pattern, name)) 
[13:36:48.309]                               next
[13:36:48.309]                             invokeRestart(restart)
[13:36:48.309]                             muffled <- TRUE
[13:36:48.309]                             break
[13:36:48.309]                           }
[13:36:48.309]                         }
[13:36:48.309]                       }
[13:36:48.309]                       invisible(muffled)
[13:36:48.309]                     }
[13:36:48.309]                     muffleCondition(cond, pattern = "^muffle")
[13:36:48.309]                   }
[13:36:48.309]                 }
[13:36:48.309]             }
[13:36:48.309]         }))
[13:36:48.309]     }, error = function(ex) {
[13:36:48.309]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:48.309]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:48.309]                 ...future.rng), started = ...future.startTime, 
[13:36:48.309]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:48.309]             version = "1.8"), class = "FutureResult")
[13:36:48.309]     }, finally = {
[13:36:48.309]         if (!identical(...future.workdir, getwd())) 
[13:36:48.309]             setwd(...future.workdir)
[13:36:48.309]         {
[13:36:48.309]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:48.309]                 ...future.oldOptions$nwarnings <- NULL
[13:36:48.309]             }
[13:36:48.309]             base::options(...future.oldOptions)
[13:36:48.309]             if (.Platform$OS.type == "windows") {
[13:36:48.309]                 old_names <- names(...future.oldEnvVars)
[13:36:48.309]                 envs <- base::Sys.getenv()
[13:36:48.309]                 names <- names(envs)
[13:36:48.309]                 common <- intersect(names, old_names)
[13:36:48.309]                 added <- setdiff(names, old_names)
[13:36:48.309]                 removed <- setdiff(old_names, names)
[13:36:48.309]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:48.309]                   envs[common]]
[13:36:48.309]                 NAMES <- toupper(changed)
[13:36:48.309]                 args <- list()
[13:36:48.309]                 for (kk in seq_along(NAMES)) {
[13:36:48.309]                   name <- changed[[kk]]
[13:36:48.309]                   NAME <- NAMES[[kk]]
[13:36:48.309]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:48.309]                     next
[13:36:48.309]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:48.309]                 }
[13:36:48.309]                 NAMES <- toupper(added)
[13:36:48.309]                 for (kk in seq_along(NAMES)) {
[13:36:48.309]                   name <- added[[kk]]
[13:36:48.309]                   NAME <- NAMES[[kk]]
[13:36:48.309]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:48.309]                     next
[13:36:48.309]                   args[[name]] <- ""
[13:36:48.309]                 }
[13:36:48.309]                 NAMES <- toupper(removed)
[13:36:48.309]                 for (kk in seq_along(NAMES)) {
[13:36:48.309]                   name <- removed[[kk]]
[13:36:48.309]                   NAME <- NAMES[[kk]]
[13:36:48.309]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:48.309]                     next
[13:36:48.309]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:48.309]                 }
[13:36:48.309]                 if (length(args) > 0) 
[13:36:48.309]                   base::do.call(base::Sys.setenv, args = args)
[13:36:48.309]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:48.309]             }
[13:36:48.309]             else {
[13:36:48.309]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:48.309]             }
[13:36:48.309]             {
[13:36:48.309]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:48.309]                   0L) {
[13:36:48.309]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:48.309]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:48.309]                   base::options(opts)
[13:36:48.309]                 }
[13:36:48.309]                 {
[13:36:48.309]                   {
[13:36:48.309]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:48.309]                     NULL
[13:36:48.309]                   }
[13:36:48.309]                   options(future.plan = NULL)
[13:36:48.309]                   if (is.na(NA_character_)) 
[13:36:48.309]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:48.309]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:48.309]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:48.309]                     .init = FALSE)
[13:36:48.309]                 }
[13:36:48.309]             }
[13:36:48.309]         }
[13:36:48.309]     })
[13:36:48.309]     if (TRUE) {
[13:36:48.309]         base::sink(type = "output", split = FALSE)
[13:36:48.309]         if (TRUE) {
[13:36:48.309]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:48.309]         }
[13:36:48.309]         else {
[13:36:48.309]             ...future.result["stdout"] <- base::list(NULL)
[13:36:48.309]         }
[13:36:48.309]         base::close(...future.stdout)
[13:36:48.309]         ...future.stdout <- NULL
[13:36:48.309]     }
[13:36:48.309]     ...future.result$conditions <- ...future.conditions
[13:36:48.309]     ...future.result$finished <- base::Sys.time()
[13:36:48.309]     ...future.result
[13:36:48.309] }
[13:36:48.312] Exporting 1 global objects (160 bytes) to cluster node #1 ...
[13:36:48.312] Exporting ‘data’ (160 bytes) to cluster node #1 ...
[13:36:48.313] Exporting ‘data’ (160 bytes) to cluster node #1 ... DONE
[13:36:48.313] Exporting 1 global objects (160 bytes) to cluster node #1 ... DONE
[13:36:48.313] MultisessionFuture started
[13:36:48.314] - Launch lazy future ... done
[13:36:48.314] run() for ‘MultisessionFuture’ ... done
[13:36:48.314] result() for ClusterFuture ...
[13:36:48.314] receiveMessageFromWorker() for ClusterFuture ...
[13:36:48.314] - Validating connection of MultisessionFuture
[13:36:48.315] - received message: FutureResult
[13:36:48.315] - Received FutureResult
[13:36:48.316] - Erased future from FutureRegistry
[13:36:48.316] result() for ClusterFuture ...
[13:36:48.316] - result already collected: FutureResult
[13:36:48.316] result() for ClusterFuture ... done
[13:36:48.316] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:48.316] result() for ClusterFuture ... done
[13:36:48.316] result() for ClusterFuture ...
[13:36:48.316] - result already collected: FutureResult
[13:36:48.316] result() for ClusterFuture ... done
[13:36:48.317] plan(): Setting new future strategy stack:
[13:36:48.317] List of future strategies:
[13:36:48.317] 1. sequential:
[13:36:48.317]    - args: function (..., envir = parent.frame())
[13:36:48.317]    - tweaked: FALSE
[13:36:48.317]    - call: plan(list(sequential, strategy))
[13:36:48.317] 2. multisession:
[13:36:48.317]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:36:48.317]    - tweaked: FALSE
[13:36:48.317]    - call: plan(list(sequential, strategy))
[13:36:48.318] plan(): nbrOfWorkers() = 1
[13:36:48.318] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[13:36:48.319] Searching for globals...
[13:36:48.327] - globals found: [8] ‘{’, ‘<-’, ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’, ‘%<-%’
[13:36:48.328] Searching for globals ... DONE
[13:36:48.328] Resolving globals: FALSE
[13:36:48.329] The total size of the 1 globals is 160 bytes (160 bytes)
[13:36:48.329] The total size of the 1 globals exported for future expression (‘{; a %<-% subset(data, x < 3)$y; a; }’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[13:36:48.330] - globals: [1] ‘data’
[13:36:48.330] - packages: [1] ‘future’
[13:36:48.330] getGlobalsAndPackages() ... DONE
[13:36:48.330] run() for ‘Future’ ...
[13:36:48.331] - state: ‘created’
[13:36:48.331] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:48.331] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:48.331] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:48.332]   - Field: ‘label’
[13:36:48.332]   - Field: ‘local’
[13:36:48.332]   - Field: ‘owner’
[13:36:48.332]   - Field: ‘envir’
[13:36:48.332]   - Field: ‘packages’
[13:36:48.332]   - Field: ‘gc’
[13:36:48.333]   - Field: ‘conditions’
[13:36:48.333]   - Field: ‘expr’
[13:36:48.333]   - Field: ‘uuid’
[13:36:48.333]   - Field: ‘seed’
[13:36:48.333]   - Field: ‘version’
[13:36:48.333]   - Field: ‘result’
[13:36:48.333]   - Field: ‘asynchronous’
[13:36:48.334]   - Field: ‘calls’
[13:36:48.334]   - Field: ‘globals’
[13:36:48.334]   - Field: ‘stdout’
[13:36:48.334]   - Field: ‘earlySignal’
[13:36:48.334]   - Field: ‘lazy’
[13:36:48.334]   - Field: ‘state’
[13:36:48.334] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:48.334] - Launch lazy future ...
[13:36:48.335] Packages needed by the future expression (n = 1): ‘future’
[13:36:48.335] Packages needed by future strategies (n = 1): ‘future’
[13:36:48.336] {
[13:36:48.336]     {
[13:36:48.336]         {
[13:36:48.336]             ...future.startTime <- base::Sys.time()
[13:36:48.336]             {
[13:36:48.336]                 {
[13:36:48.336]                   {
[13:36:48.336]                     {
[13:36:48.336]                       base::local({
[13:36:48.336]                         has_future <- base::requireNamespace("future", 
[13:36:48.336]                           quietly = TRUE)
[13:36:48.336]                         if (has_future) {
[13:36:48.336]                           ns <- base::getNamespace("future")
[13:36:48.336]                           version <- ns[[".package"]][["version"]]
[13:36:48.336]                           if (is.null(version)) 
[13:36:48.336]                             version <- utils::packageVersion("future")
[13:36:48.336]                         }
[13:36:48.336]                         else {
[13:36:48.336]                           version <- NULL
[13:36:48.336]                         }
[13:36:48.336]                         if (!has_future || version < "1.8.0") {
[13:36:48.336]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:48.336]                             "", base::R.version$version.string), 
[13:36:48.336]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:48.336]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:48.336]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:48.336]                               "release", "version")], collapse = " "), 
[13:36:48.336]                             hostname = base::Sys.info()[["nodename"]])
[13:36:48.336]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:48.336]                             info)
[13:36:48.336]                           info <- base::paste(info, collapse = "; ")
[13:36:48.336]                           if (!has_future) {
[13:36:48.336]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:48.336]                               info)
[13:36:48.336]                           }
[13:36:48.336]                           else {
[13:36:48.336]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:48.336]                               info, version)
[13:36:48.336]                           }
[13:36:48.336]                           base::stop(msg)
[13:36:48.336]                         }
[13:36:48.336]                       })
[13:36:48.336]                     }
[13:36:48.336]                     base::local({
[13:36:48.336]                       for (pkg in "future") {
[13:36:48.336]                         base::loadNamespace(pkg)
[13:36:48.336]                         base::library(pkg, character.only = TRUE)
[13:36:48.336]                       }
[13:36:48.336]                     })
[13:36:48.336]                   }
[13:36:48.336]                   ...future.strategy.old <- future::plan("list")
[13:36:48.336]                   options(future.plan = NULL)
[13:36:48.336]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:48.336]                   future::plan(list(function (..., workers = availableCores(), 
[13:36:48.336]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:36:48.336]                     envir = parent.frame()) 
[13:36:48.336]                   {
[13:36:48.336]                     if (is.function(workers)) 
[13:36:48.336]                       workers <- workers()
[13:36:48.336]                     workers <- structure(as.integer(workers), 
[13:36:48.336]                       class = class(workers))
[13:36:48.336]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:36:48.336]                       workers >= 1)
[13:36:48.336]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:36:48.336]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:36:48.336]                     }
[13:36:48.336]                     future <- MultisessionFuture(..., workers = workers, 
[13:36:48.336]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:36:48.336]                       envir = envir)
[13:36:48.336]                     if (!future$lazy) 
[13:36:48.336]                       future <- run(future)
[13:36:48.336]                     invisible(future)
[13:36:48.336]                   }), .cleanup = FALSE, .init = FALSE)
[13:36:48.336]                 }
[13:36:48.336]                 ...future.workdir <- getwd()
[13:36:48.336]             }
[13:36:48.336]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:48.336]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:48.336]         }
[13:36:48.336]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[13:36:48.336]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:48.336]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[13:36:48.336]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:48.336]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:48.336]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:48.336]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:48.336]             base::names(...future.oldOptions))
[13:36:48.336]     }
[13:36:48.336]     if (FALSE) {
[13:36:48.336]     }
[13:36:48.336]     else {
[13:36:48.336]         if (TRUE) {
[13:36:48.336]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:48.336]                 open = "w")
[13:36:48.336]         }
[13:36:48.336]         else {
[13:36:48.336]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:48.336]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:48.336]         }
[13:36:48.336]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:48.336]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:48.336]             base::sink(type = "output", split = FALSE)
[13:36:48.336]             base::close(...future.stdout)
[13:36:48.336]         }, add = TRUE)
[13:36:48.336]     }
[13:36:48.336]     ...future.frame <- base::sys.nframe()
[13:36:48.336]     ...future.conditions <- base::list()
[13:36:48.336]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:48.336]     if (FALSE) {
[13:36:48.336]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:48.336]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:48.336]     }
[13:36:48.336]     ...future.result <- base::tryCatch({
[13:36:48.336]         base::withCallingHandlers({
[13:36:48.336]             ...future.value <- base::withVisible(base::local({
[13:36:48.336]                 a %<-% subset(data, x < 3)$y
[13:36:48.336]                 a
[13:36:48.336]             }))
[13:36:48.336]             future::FutureResult(value = ...future.value$value, 
[13:36:48.336]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:48.336]                   ...future.rng), globalenv = if (FALSE) 
[13:36:48.336]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:48.336]                     ...future.globalenv.names))
[13:36:48.336]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:48.336]         }, condition = base::local({
[13:36:48.336]             c <- base::c
[13:36:48.336]             inherits <- base::inherits
[13:36:48.336]             invokeRestart <- base::invokeRestart
[13:36:48.336]             length <- base::length
[13:36:48.336]             list <- base::list
[13:36:48.336]             seq.int <- base::seq.int
[13:36:48.336]             signalCondition <- base::signalCondition
[13:36:48.336]             sys.calls <- base::sys.calls
[13:36:48.336]             `[[` <- base::`[[`
[13:36:48.336]             `+` <- base::`+`
[13:36:48.336]             `<<-` <- base::`<<-`
[13:36:48.336]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:48.336]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:48.336]                   3L)]
[13:36:48.336]             }
[13:36:48.336]             function(cond) {
[13:36:48.336]                 is_error <- inherits(cond, "error")
[13:36:48.336]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:48.336]                   NULL)
[13:36:48.336]                 if (is_error) {
[13:36:48.336]                   sessionInformation <- function() {
[13:36:48.336]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:48.336]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:48.336]                       search = base::search(), system = base::Sys.info())
[13:36:48.336]                   }
[13:36:48.336]                   ...future.conditions[[length(...future.conditions) + 
[13:36:48.336]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:48.336]                     cond$call), session = sessionInformation(), 
[13:36:48.336]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:48.336]                   signalCondition(cond)
[13:36:48.336]                 }
[13:36:48.336]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:48.336]                 "immediateCondition"))) {
[13:36:48.336]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:48.336]                   ...future.conditions[[length(...future.conditions) + 
[13:36:48.336]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:48.336]                   if (TRUE && !signal) {
[13:36:48.336]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:48.336]                     {
[13:36:48.336]                       inherits <- base::inherits
[13:36:48.336]                       invokeRestart <- base::invokeRestart
[13:36:48.336]                       is.null <- base::is.null
[13:36:48.336]                       muffled <- FALSE
[13:36:48.336]                       if (inherits(cond, "message")) {
[13:36:48.336]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:48.336]                         if (muffled) 
[13:36:48.336]                           invokeRestart("muffleMessage")
[13:36:48.336]                       }
[13:36:48.336]                       else if (inherits(cond, "warning")) {
[13:36:48.336]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:48.336]                         if (muffled) 
[13:36:48.336]                           invokeRestart("muffleWarning")
[13:36:48.336]                       }
[13:36:48.336]                       else if (inherits(cond, "condition")) {
[13:36:48.336]                         if (!is.null(pattern)) {
[13:36:48.336]                           computeRestarts <- base::computeRestarts
[13:36:48.336]                           grepl <- base::grepl
[13:36:48.336]                           restarts <- computeRestarts(cond)
[13:36:48.336]                           for (restart in restarts) {
[13:36:48.336]                             name <- restart$name
[13:36:48.336]                             if (is.null(name)) 
[13:36:48.336]                               next
[13:36:48.336]                             if (!grepl(pattern, name)) 
[13:36:48.336]                               next
[13:36:48.336]                             invokeRestart(restart)
[13:36:48.336]                             muffled <- TRUE
[13:36:48.336]                             break
[13:36:48.336]                           }
[13:36:48.336]                         }
[13:36:48.336]                       }
[13:36:48.336]                       invisible(muffled)
[13:36:48.336]                     }
[13:36:48.336]                     muffleCondition(cond, pattern = "^muffle")
[13:36:48.336]                   }
[13:36:48.336]                 }
[13:36:48.336]                 else {
[13:36:48.336]                   if (TRUE) {
[13:36:48.336]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:48.336]                     {
[13:36:48.336]                       inherits <- base::inherits
[13:36:48.336]                       invokeRestart <- base::invokeRestart
[13:36:48.336]                       is.null <- base::is.null
[13:36:48.336]                       muffled <- FALSE
[13:36:48.336]                       if (inherits(cond, "message")) {
[13:36:48.336]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:48.336]                         if (muffled) 
[13:36:48.336]                           invokeRestart("muffleMessage")
[13:36:48.336]                       }
[13:36:48.336]                       else if (inherits(cond, "warning")) {
[13:36:48.336]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:48.336]                         if (muffled) 
[13:36:48.336]                           invokeRestart("muffleWarning")
[13:36:48.336]                       }
[13:36:48.336]                       else if (inherits(cond, "condition")) {
[13:36:48.336]                         if (!is.null(pattern)) {
[13:36:48.336]                           computeRestarts <- base::computeRestarts
[13:36:48.336]                           grepl <- base::grepl
[13:36:48.336]                           restarts <- computeRestarts(cond)
[13:36:48.336]                           for (restart in restarts) {
[13:36:48.336]                             name <- restart$name
[13:36:48.336]                             if (is.null(name)) 
[13:36:48.336]                               next
[13:36:48.336]                             if (!grepl(pattern, name)) 
[13:36:48.336]                               next
[13:36:48.336]                             invokeRestart(restart)
[13:36:48.336]                             muffled <- TRUE
[13:36:48.336]                             break
[13:36:48.336]                           }
[13:36:48.336]                         }
[13:36:48.336]                       }
[13:36:48.336]                       invisible(muffled)
[13:36:48.336]                     }
[13:36:48.336]                     muffleCondition(cond, pattern = "^muffle")
[13:36:48.336]                   }
[13:36:48.336]                 }
[13:36:48.336]             }
[13:36:48.336]         }))
[13:36:48.336]     }, error = function(ex) {
[13:36:48.336]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:48.336]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:48.336]                 ...future.rng), started = ...future.startTime, 
[13:36:48.336]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:48.336]             version = "1.8"), class = "FutureResult")
[13:36:48.336]     }, finally = {
[13:36:48.336]         if (!identical(...future.workdir, getwd())) 
[13:36:48.336]             setwd(...future.workdir)
[13:36:48.336]         {
[13:36:48.336]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:48.336]                 ...future.oldOptions$nwarnings <- NULL
[13:36:48.336]             }
[13:36:48.336]             base::options(...future.oldOptions)
[13:36:48.336]             if (.Platform$OS.type == "windows") {
[13:36:48.336]                 old_names <- names(...future.oldEnvVars)
[13:36:48.336]                 envs <- base::Sys.getenv()
[13:36:48.336]                 names <- names(envs)
[13:36:48.336]                 common <- intersect(names, old_names)
[13:36:48.336]                 added <- setdiff(names, old_names)
[13:36:48.336]                 removed <- setdiff(old_names, names)
[13:36:48.336]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:48.336]                   envs[common]]
[13:36:48.336]                 NAMES <- toupper(changed)
[13:36:48.336]                 args <- list()
[13:36:48.336]                 for (kk in seq_along(NAMES)) {
[13:36:48.336]                   name <- changed[[kk]]
[13:36:48.336]                   NAME <- NAMES[[kk]]
[13:36:48.336]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:48.336]                     next
[13:36:48.336]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:48.336]                 }
[13:36:48.336]                 NAMES <- toupper(added)
[13:36:48.336]                 for (kk in seq_along(NAMES)) {
[13:36:48.336]                   name <- added[[kk]]
[13:36:48.336]                   NAME <- NAMES[[kk]]
[13:36:48.336]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:48.336]                     next
[13:36:48.336]                   args[[name]] <- ""
[13:36:48.336]                 }
[13:36:48.336]                 NAMES <- toupper(removed)
[13:36:48.336]                 for (kk in seq_along(NAMES)) {
[13:36:48.336]                   name <- removed[[kk]]
[13:36:48.336]                   NAME <- NAMES[[kk]]
[13:36:48.336]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:48.336]                     next
[13:36:48.336]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:48.336]                 }
[13:36:48.336]                 if (length(args) > 0) 
[13:36:48.336]                   base::do.call(base::Sys.setenv, args = args)
[13:36:48.336]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:48.336]             }
[13:36:48.336]             else {
[13:36:48.336]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:48.336]             }
[13:36:48.336]             {
[13:36:48.336]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:48.336]                   0L) {
[13:36:48.336]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:48.336]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:48.336]                   base::options(opts)
[13:36:48.336]                 }
[13:36:48.336]                 {
[13:36:48.336]                   {
[13:36:48.336]                     NULL
[13:36:48.336]                     RNGkind("Mersenne-Twister")
[13:36:48.336]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:48.336]                       inherits = FALSE)
[13:36:48.336]                   }
[13:36:48.336]                   options(future.plan = NULL)
[13:36:48.336]                   if (is.na(NA_character_)) 
[13:36:48.336]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:48.336]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:48.336]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:48.336]                     .init = FALSE)
[13:36:48.336]                 }
[13:36:48.336]             }
[13:36:48.336]         }
[13:36:48.336]     })
[13:36:48.336]     if (TRUE) {
[13:36:48.336]         base::sink(type = "output", split = FALSE)
[13:36:48.336]         if (TRUE) {
[13:36:48.336]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:48.336]         }
[13:36:48.336]         else {
[13:36:48.336]             ...future.result["stdout"] <- base::list(NULL)
[13:36:48.336]         }
[13:36:48.336]         base::close(...future.stdout)
[13:36:48.336]         ...future.stdout <- NULL
[13:36:48.336]     }
[13:36:48.336]     ...future.result$conditions <- ...future.conditions
[13:36:48.336]     ...future.result$finished <- base::Sys.time()
[13:36:48.336]     ...future.result
[13:36:48.336] }
[13:36:48.338] assign_globals() ...
[13:36:48.338] List of 1
[13:36:48.338]  $ data:'data.frame':	5 obs. of  2 variables:
[13:36:48.338]   ..$ x: int [1:5] 1 2 3 4 5
[13:36:48.338]   ..$ y: int [1:5] 1 2 3 4 5
[13:36:48.338]  - attr(*, "where")=List of 1
[13:36:48.338]   ..$ data:<environment: R_EmptyEnv> 
[13:36:48.338]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:48.338]  - attr(*, "resolved")= logi FALSE
[13:36:48.338]  - attr(*, "total_size")= num 160
[13:36:48.338]  - attr(*, "already-done")= logi TRUE
[13:36:48.341] - copied ‘data’ to environment
[13:36:48.341] assign_globals() ... done
[13:36:48.342] plan(): Setting new future strategy stack:
[13:36:48.342] List of future strategies:
[13:36:48.342] 1. multisession:
[13:36:48.342]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:36:48.342]    - tweaked: FALSE
[13:36:48.342]    - call: plan(list(sequential, strategy))
[13:36:48.345] plan(): nbrOfWorkers() = 2
[13:36:48.792] plan(): Setting new future strategy stack:
[13:36:48.792] List of future strategies:
[13:36:48.792] 1. sequential:
[13:36:48.792]    - args: function (..., envir = parent.frame())
[13:36:48.792]    - tweaked: FALSE
[13:36:48.792]    - call: plan(list(sequential, strategy))
[13:36:48.792] 2. multisession:
[13:36:48.792]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:36:48.792]    - tweaked: FALSE
[13:36:48.792]    - call: plan(list(sequential, strategy))
[13:36:48.792] plan(): nbrOfWorkers() = 1
[13:36:48.793] SequentialFuture started (and completed)
[13:36:48.793] signalConditions() ...
[13:36:48.793]  - include = ‘immediateCondition’
[13:36:48.793]  - exclude = 
[13:36:48.793]  - resignal = FALSE
[13:36:48.793]  - Number of conditions: 92
[13:36:48.793] signalConditions() ... done
[13:36:48.793] - Launch lazy future ... done
[13:36:48.793] run() for ‘SequentialFuture’ ... done
[13:36:48.793] signalConditions() ...
[13:36:48.794]  - include = ‘immediateCondition’
[13:36:48.794]  - exclude = 
[13:36:48.794]  - resignal = FALSE
[13:36:48.794]  - Number of conditions: 92
[13:36:48.794] signalConditions() ... done
[13:36:48.794] Future state: ‘finished’
[13:36:48.794] signalConditions() ...
[13:36:48.794]  - include = ‘condition’
[13:36:48.794]  - exclude = ‘immediateCondition’
[13:36:48.794]  - resignal = TRUE
[13:36:48.795]  - Number of conditions: 92
[13:36:48.795]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.346] getGlobalsAndPackages() ...
[13:36:48.795]  - Condition #2: ‘deprecatedWarning’, ‘warning’, ‘condition’
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[13:36:48.795]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.359] Searching for globals...
[13:36:48.795]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.360] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[13:36:48.795]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.360] Searching for globals ... DONE
[13:36:48.795]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.360] Resolving globals: FALSE
[13:36:48.795]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.361] The total size of the 1 globals is 160 bytes (160 bytes)
[13:36:48.796]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.361] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[13:36:48.796]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.361] - globals: [1] ‘data’
[13:36:48.796]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.361] 
[13:36:48.796]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.361] getGlobalsAndPackages() ... DONE
[13:36:48.796]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.361] run() for ‘Future’ ...
[13:36:48.796]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.362] - state: ‘created’
[13:36:48.796]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.362] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:48.796]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.365] [local output] makeClusterPSOCK() ...
[13:36:48.797]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.368] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:36:48.797]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.369] [local output] Base port: 11251
[13:36:48.797]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.369] [local output] Getting setup options for 2 cluster nodes ...
[13:36:48.797]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.369] [local output]  - Node 1 of 2 ...
[13:36:48.797]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.369] [local output] localMachine=TRUE => revtunnel=FALSE

[13:36:48.797]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.370] [local output] Rscript port: 11251

[13:36:48.797]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.370] [local output]  - Node 2 of 2 ...
[13:36:48.797]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.371] [local output] localMachine=TRUE => revtunnel=FALSE

[13:36:48.798]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.371] [local output] Rscript port: 11251

[13:36:48.798]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.372] [local output] Getting setup options for 2 cluster nodes ... done
[13:36:48.798]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.372] [local output]  - Parallel setup requested for some PSOCK nodes
[13:36:48.798]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.372] [local output] Setting up PSOCK nodes in parallel
[13:36:48.798]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.372] List of 36
[13:36:48.372]  $ worker          : chr "localhost"
[13:36:48.372]   ..- attr(*, "localhost")= logi TRUE
[13:36:48.372]  $ master          : chr "localhost"
[13:36:48.372]  $ port            : int 11251
[13:36:48.372]  $ connectTimeout  : num 120
[13:36:48.372]  $ timeout         : num 2592000
[13:36:48.372]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:36:48.372]  $ homogeneous     : logi TRUE
[13:36:48.372]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:36:48.372]  $ rscript_envs    : NULL
[13:36:48.372]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:36:48.372]  $ rscript_startup : NULL
[13:36:48.372]  $ rscript_sh      : chr "sh"
[13:36:48.372]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:36:48.372]  $ methods         : logi TRUE
[13:36:48.372]  $ socketOptions   : chr "no-delay"
[13:36:48.372]  $ useXDR          : logi FALSE
[13:36:48.372]  $ outfile         : chr "/dev/null"
[13:36:48.372]  $ renice          : int NA
[13:36:48.372]  $ rshcmd          : NULL
[13:36:48.372]  $ user            : chr(0) 
[13:36:48.372]  $ revtunnel       : logi FALSE
[13:36:48.372]  $ rshlogfile      : NULL
[13:36:48.372]  $ rshopts         : chr(0) 
[13:36:48.372]  $ rank            : int 1
[13:36:48.372]  $ manual          : logi FALSE
[13:36:48.372]  $ dryrun          : logi FALSE
[13:36:48.372]  $ quiet           : logi FALSE
[13:36:48.372]  $ setup_strategy  : chr "parallel"
[13:36:48.372]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:36:48.372]  $ pidfile         : chr "/tmp/Rtmp52Mhxq/worker.rank=1.parallelly.parent=84096.148806d764fd5.pid"
[13:36:48.372]  $ rshcmd_label    : NULL
[13:36:48.372]  $ rsh_call        : NULL
[13:36:48.372]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:36:48.372]  $ localMachine    : logi TRUE
[13:36:48.372]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:36:48.372]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:36:48.372]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:36:48.372]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:36:48.372]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:36:48.372]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:36:48.372]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:36:48.372]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:36:48.372]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:36:48.372]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:36:48.372]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:36:48.372]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:36:48.372]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:36:48.372]  $ arguments       :List of 28
[13:36:48.372]   ..$ worker          : chr "localhost"
[13:36:48.372]   ..$ master          : NULL
[13:36:48.372]   ..$ port            : int 11251
[13:36:48.372]   ..$ connectTimeout  : num 120
[13:36:48.372]   ..$ timeout         : num 2592000
[13:36:48.372]   ..$ rscript         : NULL
[13:36:48.372]   ..$ homogeneous     : NULL
[13:36:48.372]   ..$ rscript_args    : NULL
[13:36:48.372]   ..$ rscript_envs    : NULL
[13:36:48.372]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:36:48.372]   ..$ rscript_startup : NULL
[13:36:48.372]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:36:48.372]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:36:48.372]   ..$ methods         : logi TRUE
[13:36:48.372]   ..$ socketOptions   : chr "no-delay"
[13:36:48.372]   ..$ useXDR          : logi FALSE
[13:36:48.372]   ..$ outfile         : chr "/dev/null"
[13:36:48.372]   ..$ renice          : int NA
[13:36:48.372]   ..$ rshcmd          : NULL
[13:36:48.372]   ..$ user            : NULL
[13:36:48.372]   ..$ revtunnel       : logi NA
[13:36:48.372]   ..$ rshlogfile      : NULL
[13:36:48.372]   ..$ rshopts         : NULL
[13:36:48.372]   ..$ rank            : int 1
[13:36:48.372]   ..$ manual          : logi FALSE
[13:36:48.372]   ..$ dryrun          : logi FALSE
[13:36:48.372]   ..$ quiet           : logi FALSE
[13:36:48.372]   ..$ setup_strategy  : chr "parallel"
[13:36:48.372]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:36:48.798]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.391] [local output] System call to launch all workers:
[13:36:48.798]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.391] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp52Mhxq/worker.rank=1.parallelly.parent=84096.148806d764fd5.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11251 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:36:48.799]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.391] [local output] Starting PSOCK main server
[13:36:48.799]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.393] [local output] Workers launched
[13:36:48.799]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.393] [local output] Waiting for workers to connect back
[13:36:48.799]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.393]  - [local output] 0 workers out of 2 ready
[13:36:48.799]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.683]  - [local output] 0 workers out of 2 ready
[13:36:48.799]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.683]  - [local output] 1 workers out of 2 ready
[13:36:48.799]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.684]  - [local output] 2 workers out of 2 ready
[13:36:48.799]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.684] [local output] Launching of workers completed
[13:36:48.800]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.684] [local output] Collecting session information from workers
[13:36:48.800]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.685] [local output]  - Worker #1 of 2
[13:36:48.800]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.685] [local output]  - Worker #2 of 2
[13:36:48.800]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.686] [local output] makeClusterPSOCK() ... done
[13:36:48.800]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.696] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:48.800]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.696] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:48.800]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.696]   - Field: ‘node’
[13:36:48.800]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.697]   - Field: ‘label’
[13:36:48.801]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.697]   - Field: ‘local’
[13:36:48.801]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.697]   - Field: ‘owner’
[13:36:48.801]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.697]   - Field: ‘envir’
[13:36:48.801]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.697]   - Field: ‘workers’
[13:36:48.801]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.697]   - Field: ‘packages’
[13:36:48.801]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.697]   - Field: ‘gc’
[13:36:48.801]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.697]   - Field: ‘conditions’
[13:36:48.801]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.697]   - Field: ‘persistent’
[13:36:48.802]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.698]   - Field: ‘expr’
[13:36:48.802]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.698]   - Field: ‘uuid’
[13:36:48.802]  - Condition #57: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.698]   - Field: ‘seed’
[13:36:48.802]  - Condition #58: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.698]   - Field: ‘version’
[13:36:48.802]  - Condition #59: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.698]   - Field: ‘result’
[13:36:48.802]  - Condition #60: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.698]   - Field: ‘asynchronous’
[13:36:48.802]  - Condition #61: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.698]   - Field: ‘calls’
[13:36:48.803]  - Condition #62: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.698]   - Field: ‘globals’
[13:36:48.803]  - Condition #63: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.698]   - Field: ‘stdout’
[13:36:48.803]  - Condition #64: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.699]   - Field: ‘earlySignal’
[13:36:48.803]  - Condition #65: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.699]   - Field: ‘lazy’
[13:36:48.803]  - Condition #66: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.699]   - Field: ‘state’
[13:36:48.803]  - Condition #67: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.699] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:48.803]  - Condition #68: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.699] - Launch lazy future ...
[13:36:48.803]  - Condition #69: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.699] Packages needed by the future expression (n = 0): <none>
[13:36:48.804]  - Condition #70: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.699] Packages needed by future strategies (n = 0): <none>
[13:36:48.804]  - Condition #71: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.700] {
[13:36:48.700]     {
[13:36:48.700]         {
[13:36:48.700]             ...future.startTime <- base::Sys.time()
[13:36:48.700]             {
[13:36:48.700]                 {
[13:36:48.700]                   {
[13:36:48.700]                     {
[13:36:48.700]                       base::local({
[13:36:48.700]                         has_future <- base::requireNamespace("future", 
[13:36:48.700]                           quietly = TRUE)
[13:36:48.700]                         if (has_future) {
[13:36:48.700]                           ns <- base::getNamespace("future")
[13:36:48.700]                           version <- ns[[".package"]][["version"]]
[13:36:48.700]                           if (is.null(version)) 
[13:36:48.700]                             version <- utils::packageVersion("future")
[13:36:48.700]                         }
[13:36:48.700]                         else {
[13:36:48.700]                           version <- NULL
[13:36:48.700]                         }
[13:36:48.700]                         if (!has_future || version < "1.8.0") {
[13:36:48.700]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:48.700]                             "", base::R.version$version.string), 
[13:36:48.700]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:48.700]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:48.700]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:48.700]                               "release", "version")], collapse = " "), 
[13:36:48.700]                             hostname = base::Sys.info()[["nodename"]])
[13:36:48.700]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:48.700]                             info)
[13:36:48.700]                           info <- base::paste(info, collapse = "; ")
[13:36:48.700]                           if (!has_future) {
[13:36:48.700]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:48.700]                               info)
[13:36:48.700]                           }
[13:36:48.700]                           else {
[13:36:48.700]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:48.700]                               info, version)
[13:36:48.700]                           }
[13:36:48.700]                           base::stop(msg)
[13:36:48.700]                         }
[13:36:48.700]                       })
[13:36:48.700]                     }
[13:36:48.700]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:48.700]                     base::options(mc.cores = 1L)
[13:36:48.700]                   }
[13:36:48.700]                   ...future.strategy.old <- future::plan("list")
[13:36:48.700]                   options(future.plan = NULL)
[13:36:48.700]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:48.700]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:48.700]                 }
[13:36:48.700]                 ...future.workdir <- getwd()
[13:36:48.700]             }
[13:36:48.700]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:48.700]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:48.700]         }
[13:36:48.700]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[13:36:48.700]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:48.700]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[13:36:48.700]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:48.700]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:48.700]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:48.700]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:48.700]             base::names(...future.oldOptions))
[13:36:48.700]     }
[13:36:48.700]     if (FALSE) {
[13:36:48.700]     }
[13:36:48.700]     else {
[13:36:48.700]         if (TRUE) {
[13:36:48.700]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:48.700]                 open = "w")
[13:36:48.700]         }
[13:36:48.700]         else {
[13:36:48.700]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:48.700]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:48.700]         }
[13:36:48.700]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:48.700]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:48.700]             base::sink(type = "output", split = FALSE)
[13:36:48.700]             base::close(...future.stdout)
[13:36:48.700]         }, add = TRUE)
[13:36:48.700]     }
[13:36:48.700]     ...future.frame <- base::sys.nframe()
[13:36:48.700]     ...future.conditions <- base::list()
[13:36:48.700]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:48.700]     if (FALSE) {
[13:36:48.700]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:48.700]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:48.700]     }
[13:36:48.700]     ...future.result <- base::tryCatch({
[13:36:48.700]         base::withCallingHandlers({
[13:36:48.700]             ...future.value <- base::withVisible(base::local({
[13:36:48.700]                 ...future.makeSendCondition <- base::local({
[13:36:48.700]                   sendCondition <- NULL
[13:36:48.700]                   function(frame = 1L) {
[13:36:48.700]                     if (is.function(sendCondition)) 
[13:36:48.700]                       return(sendCondition)
[13:36:48.700]                     ns <- getNamespace("parallel")
[13:36:48.700]                     if (exists("sendData", mode = "function", 
[13:36:48.700]                       envir = ns)) {
[13:36:48.700]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:48.700]                         envir = ns)
[13:36:48.700]                       envir <- sys.frame(frame)
[13:36:48.700]                       master <- NULL
[13:36:48.700]                       while (!identical(envir, .GlobalEnv) && 
[13:36:48.700]                         !identical(envir, emptyenv())) {
[13:36:48.700]                         if (exists("master", mode = "list", envir = envir, 
[13:36:48.700]                           inherits = FALSE)) {
[13:36:48.700]                           master <- get("master", mode = "list", 
[13:36:48.700]                             envir = envir, inherits = FALSE)
[13:36:48.700]                           if (inherits(master, c("SOCKnode", 
[13:36:48.700]                             "SOCK0node"))) {
[13:36:48.700]                             sendCondition <<- function(cond) {
[13:36:48.700]                               data <- list(type = "VALUE", value = cond, 
[13:36:48.700]                                 success = TRUE)
[13:36:48.700]                               parallel_sendData(master, data)
[13:36:48.700]                             }
[13:36:48.700]                             return(sendCondition)
[13:36:48.700]                           }
[13:36:48.700]                         }
[13:36:48.700]                         frame <- frame + 1L
[13:36:48.700]                         envir <- sys.frame(frame)
[13:36:48.700]                       }
[13:36:48.700]                     }
[13:36:48.700]                     sendCondition <<- function(cond) NULL
[13:36:48.700]                   }
[13:36:48.700]                 })
[13:36:48.700]                 withCallingHandlers({
[13:36:48.700]                   subset(data, x < 3)$y
[13:36:48.700]                 }, immediateCondition = function(cond) {
[13:36:48.700]                   sendCondition <- ...future.makeSendCondition()
[13:36:48.700]                   sendCondition(cond)
[13:36:48.700]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:48.700]                   {
[13:36:48.700]                     inherits <- base::inherits
[13:36:48.700]                     invokeRestart <- base::invokeRestart
[13:36:48.700]                     is.null <- base::is.null
[13:36:48.700]                     muffled <- FALSE
[13:36:48.700]                     if (inherits(cond, "message")) {
[13:36:48.700]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:48.700]                       if (muffled) 
[13:36:48.700]                         invokeRestart("muffleMessage")
[13:36:48.700]                     }
[13:36:48.700]                     else if (inherits(cond, "warning")) {
[13:36:48.700]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:48.700]                       if (muffled) 
[13:36:48.700]                         invokeRestart("muffleWarning")
[13:36:48.700]                     }
[13:36:48.700]                     else if (inherits(cond, "condition")) {
[13:36:48.700]                       if (!is.null(pattern)) {
[13:36:48.700]                         computeRestarts <- base::computeRestarts
[13:36:48.700]                         grepl <- base::grepl
[13:36:48.700]                         restarts <- computeRestarts(cond)
[13:36:48.700]                         for (restart in restarts) {
[13:36:48.700]                           name <- restart$name
[13:36:48.700]                           if (is.null(name)) 
[13:36:48.700]                             next
[13:36:48.700]                           if (!grepl(pattern, name)) 
[13:36:48.700]                             next
[13:36:48.700]                           invokeRestart(restart)
[13:36:48.700]                           muffled <- TRUE
[13:36:48.700]                           break
[13:36:48.700]                         }
[13:36:48.700]                       }
[13:36:48.700]                     }
[13:36:48.700]                     invisible(muffled)
[13:36:48.700]                   }
[13:36:48.700]                   muffleCondition(cond)
[13:36:48.700]                 })
[13:36:48.700]             }))
[13:36:48.700]             future::FutureResult(value = ...future.value$value, 
[13:36:48.700]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:48.700]                   ...future.rng), globalenv = if (FALSE) 
[13:36:48.700]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:48.700]                     ...future.globalenv.names))
[13:36:48.700]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:48.700]         }, condition = base::local({
[13:36:48.700]             c <- base::c
[13:36:48.700]             inherits <- base::inherits
[13:36:48.700]             invokeRestart <- base::invokeRestart
[13:36:48.700]             length <- base::length
[13:36:48.700]             list <- base::list
[13:36:48.700]             seq.int <- base::seq.int
[13:36:48.700]             signalCondition <- base::signalCondition
[13:36:48.700]             sys.calls <- base::sys.calls
[13:36:48.700]             `[[` <- base::`[[`
[13:36:48.700]             `+` <- base::`+`
[13:36:48.700]             `<<-` <- base::`<<-`
[13:36:48.700]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:48.700]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:48.700]                   3L)]
[13:36:48.700]             }
[13:36:48.700]             function(cond) {
[13:36:48.700]                 is_error <- inherits(cond, "error")
[13:36:48.700]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:48.700]                   NULL)
[13:36:48.700]                 if (is_error) {
[13:36:48.700]                   sessionInformation <- function() {
[13:36:48.700]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:48.700]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:48.700]                       search = base::search(), system = base::Sys.info())
[13:36:48.700]                   }
[13:36:48.700]                   ...future.conditions[[length(...future.conditions) + 
[13:36:48.700]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:48.700]                     cond$call), session = sessionInformation(), 
[13:36:48.700]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:48.700]                   signalCondition(cond)
[13:36:48.700]                 }
[13:36:48.700]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:48.700]                 "immediateCondition"))) {
[13:36:48.700]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:48.700]                   ...future.conditions[[length(...future.conditions) + 
[13:36:48.700]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:48.700]                   if (TRUE && !signal) {
[13:36:48.700]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:48.700]                     {
[13:36:48.700]                       inherits <- base::inherits
[13:36:48.700]                       invokeRestart <- base::invokeRestart
[13:36:48.700]                       is.null <- base::is.null
[13:36:48.700]                       muffled <- FALSE
[13:36:48.700]                       if (inherits(cond, "message")) {
[13:36:48.700]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:48.700]                         if (muffled) 
[13:36:48.700]                           invokeRestart("muffleMessage")
[13:36:48.700]                       }
[13:36:48.700]                       else if (inherits(cond, "warning")) {
[13:36:48.700]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:48.700]                         if (muffled) 
[13:36:48.700]                           invokeRestart("muffleWarning")
[13:36:48.700]                       }
[13:36:48.700]                       else if (inherits(cond, "condition")) {
[13:36:48.700]                         if (!is.null(pattern)) {
[13:36:48.700]                           computeRestarts <- base::computeRestarts
[13:36:48.700]                           grepl <- base::grepl
[13:36:48.700]                           restarts <- computeRestarts(cond)
[13:36:48.700]                           for (restart in restarts) {
[13:36:48.700]                             name <- restart$name
[13:36:48.700]                             if (is.null(name)) 
[13:36:48.700]                               next
[13:36:48.700]                             if (!grepl(pattern, name)) 
[13:36:48.700]                               next
[13:36:48.700]                             invokeRestart(restart)
[13:36:48.700]                             muffled <- TRUE
[13:36:48.700]                             break
[13:36:48.700]                           }
[13:36:48.700]                         }
[13:36:48.700]                       }
[13:36:48.700]                       invisible(muffled)
[13:36:48.700]                     }
[13:36:48.700]                     muffleCondition(cond, pattern = "^muffle")
[13:36:48.700]                   }
[13:36:48.700]                 }
[13:36:48.700]                 else {
[13:36:48.700]                   if (TRUE) {
[13:36:48.700]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:48.700]                     {
[13:36:48.700]                       inherits <- base::inherits
[13:36:48.700]                       invokeRestart <- base::invokeRestart
[13:36:48.700]                       is.null <- base::is.null
[13:36:48.700]                       muffled <- FALSE
[13:36:48.700]                       if (inherits(cond, "message")) {
[13:36:48.700]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:48.700]                         if (muffled) 
[13:36:48.700]                           invokeRestart("muffleMessage")
[13:36:48.700]                       }
[13:36:48.700]                       else if (inherits(cond, "warning")) {
[13:36:48.700]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:48.700]                         if (muffled) 
[13:36:48.700]                           invokeRestart("muffleWarning")
[13:36:48.700]                       }
[13:36:48.700]                       else if (inherits(cond, "condition")) {
[13:36:48.700]                         if (!is.null(pattern)) {
[13:36:48.700]                           computeRestarts <- base::computeRestarts
[13:36:48.700]                           grepl <- base::grepl
[13:36:48.700]                           restarts <- computeRestarts(cond)
[13:36:48.700]                           for (restart in restarts) {
[13:36:48.700]                             name <- restart$name
[13:36:48.700]                             if (is.null(name)) 
[13:36:48.700]                               next
[13:36:48.700]                             if (!grepl(pattern, name)) 
[13:36:48.700]                               next
[13:36:48.700]                             invokeRestart(restart)
[13:36:48.700]                             muffled <- TRUE
[13:36:48.700]                             break
[13:36:48.700]                           }
[13:36:48.700]                         }
[13:36:48.700]                       }
[13:36:48.700]                       invisible(muffled)
[13:36:48.700]                     }
[13:36:48.700]                     muffleCondition(cond, pattern = "^muffle")
[13:36:48.700]                   }
[13:36:48.700]                 }
[13:36:48.700]             }
[13:36:48.700]         }))
[13:36:48.700]     }, error = function(ex) {
[13:36:48.700]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:48.700]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:48.700]                 ...future.rng), started = ...future.startTime, 
[13:36:48.700]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:48.700]             version = "1.8"), class = "FutureResult")
[13:36:48.700]     }, finally = {
[13:36:48.700]         if (!identical(...future.workdir, getwd())) 
[13:36:48.700]             setwd(...future.workdir)
[13:36:48.700]         {
[13:36:48.700]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:48.700]                 ...future.oldOptions$nwarnings <- NULL
[13:36:48.700]             }
[13:36:48.700]             base::options(...future.oldOptions)
[13:36:48.700]             if (.Platform$OS.type == "windows") {
[13:36:48.700]                 old_names <- names(...future.oldEnvVars)
[13:36:48.700]                 envs <- base::Sys.getenv()
[13:36:48.700]                 names <- names(envs)
[13:36:48.700]                 common <- intersect(names, old_names)
[13:36:48.700]                 added <- setdiff(names, old_names)
[13:36:48.700]                 removed <- setdiff(old_names, names)
[13:36:48.700]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:48.700]                   envs[common]]
[13:36:48.700]                 NAMES <- toupper(changed)
[13:36:48.700]                 args <- list()
[13:36:48.700]                 for (kk in seq_along(NAMES)) {
[13:36:48.700]                   name <- changed[[kk]]
[13:36:48.700]                   NAME <- NAMES[[kk]]
[13:36:48.700]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:48.700]                     next
[13:36:48.700]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:48.700]                 }
[13:36:48.700]                 NAMES <- toupper(added)
[13:36:48.700]                 for (kk in seq_along(NAMES)) {
[13:36:48.700]                   name <- added[[kk]]
[13:36:48.700]                   NAME <- NAMES[[kk]]
[13:36:48.700]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:48.700]                     next
[13:36:48.700]                   args[[name]] <- ""
[13:36:48.700]                 }
[13:36:48.700]                 NAMES <- toupper(removed)
[13:36:48.700]                 for (kk in seq_along(NAMES)) {
[13:36:48.700]                   name <- removed[[kk]]
[13:36:48.700]                   NAME <- NAMES[[kk]]
[13:36:48.700]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:48.700]                     next
[13:36:48.700]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:48.700]                 }
[13:36:48.700]                 if (length(args) > 0) 
[13:36:48.700]                   base::do.call(base::Sys.setenv, args = args)
[13:36:48.700]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:48.700]             }
[13:36:48.700]             else {
[13:36:48.700]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:48.700]             }
[13:36:48.700]             {
[13:36:48.700]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:48.700]                   0L) {
[13:36:48.700]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:48.700]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:48.700]                   base::options(opts)
[13:36:48.700]                 }
[13:36:48.700]                 {
[13:36:48.700]                   {
[13:36:48.700]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:48.700]                     NULL
[13:36:48.700]                   }
[13:36:48.700]                   options(future.plan = NULL)
[13:36:48.700]                   if (is.na(NA_character_)) 
[13:36:48.700]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:48.700]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:48.700]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:48.700]                     .init = FALSE)
[13:36:48.700]                 }
[13:36:48.700]             }
[13:36:48.700]         }
[13:36:48.700]     })
[13:36:48.700]     if (TRUE) {
[13:36:48.700]         base::sink(type = "output", split = FALSE)
[13:36:48.700]         if (TRUE) {
[13:36:48.700]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:48.700]         }
[13:36:48.700]         else {
[13:36:48.700]             ...future.result["stdout"] <- base::list(NULL)
[13:36:48.700]         }
[13:36:48.700]         base::close(...future.stdout)
[13:36:48.700]         ...future.stdout <- NULL
[13:36:48.700]     }
[13:36:48.700]     ...future.result$conditions <- ...future.conditions
[13:36:48.700]     ...future.result$finished <- base::Sys.time()
[13:36:48.700]     ...future.result
[13:36:48.700] }
[13:36:48.804]  - Condition #72: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.752] Exporting 1 global objects (160 bytes) to cluster node #1 ...
[13:36:48.804]  - Condition #73: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.752] Exporting ‘data’ (160 bytes) to cluster node #1 ...
[13:36:48.804]  - Condition #74: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.753] Exporting ‘data’ (160 bytes) to cluster node #1 ... DONE
[13:36:48.804]  - Condition #75: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.753] Exporting 1 global objects (160 bytes) to cluster node #1 ... DONE
[13:36:48.804]  - Condition #76: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.756] MultisessionFuture started
[13:36:48.804]  - Condition #77: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.756] - Launch lazy future ... done
[13:36:48.805]  - Condition #78: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.756] run() for ‘MultisessionFuture’ ... done
[13:36:48.805]  - Condition #79: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.756] result() for ClusterFuture ...
[13:36:48.805]  - Condition #80: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.757] receiveMessageFromWorker() for ClusterFuture ...
[13:36:48.805]  - Condition #81: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.757] - Validating connection of MultisessionFuture
[13:36:48.805]  - Condition #82: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.790] - received message: FutureResult
[13:36:48.805]  - Condition #83: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.790] - Received FutureResult
[13:36:48.805]  - Condition #84: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.790] - Erased future from FutureRegistry
[13:36:48.806]  - Condition #85: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.790] result() for ClusterFuture ...
[13:36:48.806]  - Condition #86: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.790] - result already collected: FutureResult
[13:36:48.806]  - Condition #87: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.791] result() for ClusterFuture ... done
[13:36:48.806]  - Condition #88: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.791] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:48.806]  - Condition #89: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.791] result() for ClusterFuture ... done
[13:36:48.806]  - Condition #90: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.791] result() for ClusterFuture ...
[13:36:48.806]  - Condition #91: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.791] - result already collected: FutureResult
[13:36:48.806]  - Condition #92: ‘simpleMessage’, ‘message’, ‘condition’
[13:36:48.791] result() for ClusterFuture ... done
[13:36:48.807] signalConditions() ... done
- Strategy: multisession ... DONE
> 
> 
> message("*** Globals w/ non-standard evaluation (NSE) ... DONE")
*** Globals w/ non-standard evaluation (NSE) ... DONE
> 
> source("incl/end.R")
[13:36:48.807] plan(): Setting new future strategy stack:
[13:36:48.807] List of future strategies:
[13:36:48.807] 1. FutureStrategy:
[13:36:48.807]    - args: function (..., envir = parent.frame())
[13:36:48.807]    - tweaked: FALSE
[13:36:48.807]    - call: future::plan(oplan)
[13:36:48.808] plan(): nbrOfWorkers() = 1
> 
