
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start,load-only.R")
[13:37:25.451] plan(): Setting new future strategy stack:
[13:37:25.452] List of future strategies:
[13:37:25.452] 1. sequential:
[13:37:25.452]    - args: function (..., envir = parent.frame())
[13:37:25.452]    - tweaked: FALSE
[13:37:25.452]    - call: future::plan("sequential")
[13:37:25.463] plan(): nbrOfWorkers() = 1
> options(future.debug=FALSE)
> message("*** plan() ...")
*** plan() ...
> 
> cl <- future::makeClusterPSOCK(1L)
> print(cl)
Socket cluster with 1 nodes where 1 node is on host ‘localhost’ (R version 4.3.3 (2024-02-29), platform x86_64-pc-linux-gnu)
> 
> message("*** Set strategy via future::plan(future::sequential)")
*** Set strategy via future::plan(future::sequential)
> oplan <- future::plan(future::sequential)
> print(future::plan())
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: future::plan(future::sequential)
> future::plan(oplan)
> print(future::plan())
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: future::plan("sequential")
> 
> message("*** Set strategy via future::plan(future::cluster, workers = cl)")
*** Set strategy via future::plan(future::cluster, workers = cl)
> oplan <- future::plan(future::cluster, workers = cl)
> print(future::plan())
cluster:
- args: function (..., workers = "<Socket cluster with 1 nodes where 1 node is on host ‘localhost’ (R version 4.3.3 (2024-02-29), platform x86_64-pc-linux-gnu)>", envir = parent.frame())
- tweaked: TRUE
- call: future::plan(future::cluster, workers = cl)
> future::plan(oplan)
> print(future::plan())
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: future::plan("sequential")
> 
> message("*** Set strategy via future::plan(future::cluster(workers = cl)")
*** Set strategy via future::plan(future::cluster(workers = cl)
> oplan <- future::plan(future::cluster(workers = cl))
> print(future::plan())
cluster:
- args: function (..., workers = "<Socket cluster with 1 nodes where 1 node is on host ‘localhost’ (R version 4.3.3 (2024-02-29), platform x86_64-pc-linux-gnu)>", envir = parent.frame())
- tweaked: TRUE
- call: future::plan(future::cluster(workers = cl))
> future::plan(oplan)
> print(future::plan())
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: future::plan("sequential")
> 
> message("*** Set strategy via future::plan('sequential')")
*** Set strategy via future::plan('sequential')
> oplan <- future::plan("sequential")
> print(future::plan())
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: future::plan("sequential")
> future::plan(oplan)
> print(future::plan())
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: future::plan("sequential")
> 
> message("*** plan('default')")
*** plan('default')
> oplan <- future::plan("default")
> print(future::plan())
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> future::plan(oplan)
> print(future::plan())
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: future::plan("sequential")
> 
> 
> library("future")
> 
> message("*** plan('unknown strategy')")
*** plan('unknown strategy')
> res <- try(plan('unknown strategy'), silent = TRUE)
> print(res)
[1] "Error : No such strategy for futures: ‘unknown strategy’\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError: No such strategy for futures: ‘unknown strategy’>
> stopifnot(inherits(res, "try-error"))
> 
> 
> message("*** plan(sequential)")
*** plan(sequential)
> plan(sequential)
> a <- 0
> f <- future({
+   b <- 3
+   c <- 2
+   a * b * c
+ })
> a <- 7
> v <- value(f)
> print(v)
[1] 0
> stopifnot(v == 0)
> 
> message("*** plan('sequential')")
*** plan('sequential')
> ## Setting strategy by name
> plan("sequential")
> print(plan())
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: plan("sequential")
> 
> 
> message("*** plan() and overriding defaults")
*** plan() and overriding defaults
> message("*** plan(sequential)")
*** plan(sequential)
> plan(sequential)
> fcn <- plan("next")
> print(fcn)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: plan(sequential)
> x <- 0
> f <- future({ x <- 1 })
> print(value(f))
[1] 1
> stopifnot(x == 0)
> 
> message("*** plan(sequential, abc = 1)")
*** plan(sequential, abc = 1)
> plan(sequential, abc = 1, def = TRUE)
Warning: Detected 2 unknown future arguments: ‘abc’, ‘def’
> fcn <- plan("next")
> print(fcn)
sequential:
- args: function (..., abc = 1, def = TRUE, envir = parent.frame())
- tweaked: TRUE
- call: plan(sequential, abc = 1, def = TRUE)
> stopifnot(formals(fcn)$abc == 1)
> 
> message("*** plan(sequential(abc = 1))")
*** plan(sequential(abc = 1))
> plan(cluster, workers = cl)
> plan(sequential(abc = 1))
Warning: Detected 1 unknown future arguments: ‘abc’
> fcn <- plan("next")
> print(fcn)
sequential:
- args: function (..., abc = 1, envir = parent.frame())
- tweaked: TRUE
- call: plan(sequential(abc = 1))
> stopifnot(formals(fcn)$abc == 1)
> 
> message("*** plan(tweak(sequential, abc = 1))")
*** plan(tweak(sequential, abc = 1))
> plan(cluster, workers = cl)
> plan(tweak(sequential, abc = 1))
Warning: Detected 1 unknown future arguments: ‘abc’
Warning: Detected 1 unknown future arguments: ‘abc’
> fcn <- plan("next")
> print(fcn)
sequential:
- args: function (..., abc = 1, envir = parent.frame())
- tweaked: TRUE
- call: plan(tweak(sequential, abc = 1))
> stopifnot(formals(fcn)$abc == 1)
> 
> message("*** do.call(plan, args = list(sequential, abc = 1))")
*** do.call(plan, args = list(sequential, abc = 1))
> do.call(plan, args = list(sequential, abc = 1, def = TRUE))
Warning: Detected 2 unknown future arguments: ‘abc’, ‘def’
> fcn <- plan("next")
> print(fcn)
sequential:
- args: function (..., abc = 1, def = TRUE, envir = parent.frame())
- tweaked: TRUE
- call: NULL
> stopifnot(formals(fcn)$abc == 1)
> 
> message("*** plan(cluster, ..., rscript_startup = \"<code>\")")
*** plan(cluster, ..., rscript_startup = "<code>")
> plan(cluster, workers = 1L, rscript_startup = "options(abc = 42L)")
> f <- future(getOption("abc"))
> v <- value(f)
> stopifnot(identical(v, 42L))
> plan(sequential)
> 
> message("*** plan(cluster, ..., rscript_startup = <expr>)")
*** plan(cluster, ..., rscript_startup = <expr>)
> plan(cluster, workers = 1L, rscript_startup = quote(options(abc = 42L)))
> f <- future(getOption("abc"))
> v <- value(f)
> print(v)
[1] 42
> stopifnot(identical(v, 42L))
> plan(sequential)
> 
> 
> 
> message("*** old <- plan(new)")
*** old <- plan(new)
> truth <- plan("list")
> old <- plan(cluster, workers = cl)
> stopifnot(identical(unclass(old), unclass(truth)))
> 
> stack <- plan("list") ## stack == cluster(workers = cl)
> prev <- plan(old)     ## prev == sequential(abc = 1)
> stopifnot(identical(stack, prev))
> 
> stack <- plan("list") ## curr == old
> stopifnot(identical(stack, old))
> stopifnot(identical(stack, truth))
> 
> message("*** %plan% 'sequential'")
*** %plan% 'sequential'
> plan(cluster, workers = cl)
> x %<-% { a <- 1 } %plan% "sequential"
> stopifnot(inherits(plan("next"), "cluster"))
> 
> message("*** %plan% sequential")
*** %plan% sequential
> plan(cluster, workers = cl)
> 
> ## %plan% can operate on any expression, so it
> ## works just as an withPlan({ ... }, plan = ...)
> fun <- { plan("next") } %plan% sequential
> f <- fun(1)
> stopifnot(inherits(f, "SequentialFuture"), !f$lazy, inherits(f, "SequentialFuture"))
> 
> x %<-% { a <- 1 } %plan% sequential
> stopifnot(inherits(plan("next"), "cluster"))
> 
> 
> message("*** Nested futures with different plans")
*** Nested futures with different plans
> 
> c %<-% {
+   message("Resolving 'c'")
+   a %<-% {
+     message("Resolving 'a'")
+     2
+   } %plan% sequential
+   b %<-% {
+     message("Resolving 'b'")
+     -9 * a
+   }
+   message("Local variable 'x'")
+   x <- b / 3
+   abs(x)
+ } %lazy% TRUE
> d <- 42
> print(d)
[1] 42
> print(c)
Resolving 'c'
Resolving 'a'
Local variable 'x'
Resolving 'b'
[1] 6
> stopifnot(c == 6)
> 
> message("*** plan() by functions and character names ... ")
*** plan() by functions and character names ... 
> 
> plan(sequential)
> a %<-% 42
> stopifnot(a == 42)
> 
> plan("sequential")
> a %<-% 42
> stopifnot(a == 42)
> 
> plan(list(sequential))
> a %<-% 42
> stopifnot(a == 42)
> 
> plan(list("sequential"))
> a %<-% 42
> stopifnot(a == 42)
> 
> plan(list(sequential, sequential))
> a %<-% { b %<-% 42; b }
> stopifnot(a == 42)
> 
> plan(list("sequential", sequential))
> a %<-% { b %<-% 42; b }
> stopifnot(a == 42)
> 
> plan(list(sequential, "sequential"))
> a %<-% { b %<-% 42; b }
> stopifnot(a == 42)
> 
> plan(list("sequential", "sequential"))
> a %<-% { b %<-% 42; b }
> stopifnot(a == 42)
> 
> plan(list("future::sequential", "sequential"))
> a %<-% { b %<-% 42; b }
> stopifnot(a == 42)
> 
> message("*** plan() by functions and character names ... DONE")
*** plan() by functions and character names ... DONE
> 
> 
> message("*** plan() w/ commands ...")
*** plan() w/ commands ...
> 
> plan(list(sequential, sequential))
> res <- plan("list")
> print(res)
List of future strategies:
1. sequential:
   - args: function (..., envir = parent.frame())
   - tweaked: FALSE
   - call: plan(list(sequential, sequential))
2. sequential:
   - args: function (..., envir = parent.frame())
   - tweaked: FALSE
   - call: plan(list(sequential, sequential))
> stopifnot(length(res) == 2)
> 
> plan("pop")
List of future strategies:
1. sequential:
   - args: function (..., envir = parent.frame())
   - tweaked: FALSE
   - call: plan(list(sequential, sequential))
2. sequential:
   - args: function (..., envir = parent.frame())
   - tweaked: FALSE
   - call: plan(list(sequential, sequential))
> res <- plan("list")
> print(res)
[[1]]
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: plan(list(sequential, sequential))

> stopifnot(length(res) == 1)
> 
> plan("reset")
List of future strategies:
1. sequential:
   - args: function (..., envir = parent.frame())
   - tweaked: FALSE
   - call: plan(sequential)
> print(plan())
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: plan(sequential)
> 
> message("*** plan() w/ commands ... DONE")
*** plan() w/ commands ... DONE
> 
> 
> message("*** plan() - odds'n'ends ...")
*** plan() - odds'n'ends ...
> 
> plan(sequential, split = FALSE)
> f <- future(42L)
> v <- value(f)
> stopifnot(v == 42L)
> stopifnot(
+   inherits(f$envir, "environment"),
+   identical(f$envir, globalenv())
+ )
> 
> message("*** plan() - odds'n'ends ... DONE")
*** plan() - odds'n'ends ... DONE
> 
> 
> parallel::stopCluster(cl)
> 
> message("*** plan() ... DONE")
*** plan() ... DONE
> 
> source("incl/end.R")
> 
