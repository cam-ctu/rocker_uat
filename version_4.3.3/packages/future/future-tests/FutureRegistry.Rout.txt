
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[10:32:49.485] plan(): Setting new future strategy stack:
[10:32:49.486] List of future strategies:
[10:32:49.486] 1. sequential:
[10:32:49.486]    - args: function (..., envir = parent.frame())
[10:32:49.486]    - tweaked: FALSE
[10:32:49.486]    - call: future::plan("sequential")
[10:32:49.500] plan(): nbrOfWorkers() = 1
> 
> message("*** FutureRegistry() ...")
*** FutureRegistry() ...
> 
> for (where in c(sprintf("multicore-%s", future:::session_uuid()), "rscript")) {
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 1 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 1L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'remove') ...", where))
+   FutureRegistry(where, action = "remove", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 2 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 1L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'collect-first') ...", where))
+   FutureRegistry(where, action = "collect-first")
+ 
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) < 1L)
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 2 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'reset') ...", where))
+   FutureRegistry(where, action = "reset")
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ }
*** FutureRegistry('multicore-b5c79e2e-d417-96d6-5eee-2708373bb9f9', 'list') ...
list()
*** FutureRegistry('multicore-b5c79e2e-d417-96d6-5eee-2708373bb9f9', 'add') ...
[10:32:49.534] getGlobalsAndPackages() ...
[10:32:49.534] Searching for globals...
[10:32:49.537] - globals found: [1] ‘{’
[10:32:49.537] Searching for globals ... DONE
[10:32:49.537] Resolving globals: FALSE
[10:32:49.538] 
[10:32:49.538] 
[10:32:49.538] getGlobalsAndPackages() ... DONE
[10:32:49.539] run() for ‘Future’ ...
[10:32:49.539] - state: ‘created’
[10:32:49.539] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:49.539] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:49.539] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:49.539]   - Field: ‘label’
[10:32:49.540]   - Field: ‘local’
[10:32:49.540]   - Field: ‘owner’
[10:32:49.540]   - Field: ‘envir’
[10:32:49.540]   - Field: ‘packages’
[10:32:49.540]   - Field: ‘gc’
[10:32:49.540]   - Field: ‘conditions’
[10:32:49.540]   - Field: ‘expr’
[10:32:49.540]   - Field: ‘uuid’
[10:32:49.540]   - Field: ‘seed’
[10:32:49.540]   - Field: ‘version’
[10:32:49.540]   - Field: ‘result’
[10:32:49.541]   - Field: ‘asynchronous’
[10:32:49.541]   - Field: ‘calls’
[10:32:49.541]   - Field: ‘globals’
[10:32:49.541]   - Field: ‘stdout’
[10:32:49.541]   - Field: ‘earlySignal’
[10:32:49.541]   - Field: ‘lazy’
[10:32:49.541]   - Field: ‘state’
[10:32:49.541] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:49.541] - Launch lazy future ...
[10:32:49.542] Packages needed by the future expression (n = 0): <none>
[10:32:49.542] Packages needed by future strategies (n = 0): <none>
[10:32:49.543] {
[10:32:49.543]     {
[10:32:49.543]         {
[10:32:49.543]             ...future.startTime <- base::Sys.time()
[10:32:49.543]             {
[10:32:49.543]                 {
[10:32:49.543]                   {
[10:32:49.543]                     base::local({
[10:32:49.543]                       has_future <- base::requireNamespace("future", 
[10:32:49.543]                         quietly = TRUE)
[10:32:49.543]                       if (has_future) {
[10:32:49.543]                         ns <- base::getNamespace("future")
[10:32:49.543]                         version <- ns[[".package"]][["version"]]
[10:32:49.543]                         if (is.null(version)) 
[10:32:49.543]                           version <- utils::packageVersion("future")
[10:32:49.543]                       }
[10:32:49.543]                       else {
[10:32:49.543]                         version <- NULL
[10:32:49.543]                       }
[10:32:49.543]                       if (!has_future || version < "1.8.0") {
[10:32:49.543]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:49.543]                           "", base::R.version$version.string), 
[10:32:49.543]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:49.543]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:49.543]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:49.543]                             "release", "version")], collapse = " "), 
[10:32:49.543]                           hostname = base::Sys.info()[["nodename"]])
[10:32:49.543]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:49.543]                           info)
[10:32:49.543]                         info <- base::paste(info, collapse = "; ")
[10:32:49.543]                         if (!has_future) {
[10:32:49.543]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:49.543]                             info)
[10:32:49.543]                         }
[10:32:49.543]                         else {
[10:32:49.543]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:49.543]                             info, version)
[10:32:49.543]                         }
[10:32:49.543]                         base::stop(msg)
[10:32:49.543]                       }
[10:32:49.543]                     })
[10:32:49.543]                   }
[10:32:49.543]                   ...future.strategy.old <- future::plan("list")
[10:32:49.543]                   options(future.plan = NULL)
[10:32:49.543]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:49.543]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:49.543]                 }
[10:32:49.543]                 ...future.workdir <- getwd()
[10:32:49.543]             }
[10:32:49.543]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:49.543]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:49.543]         }
[10:32:49.543]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:49.543]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:49.543]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:49.543]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:49.543]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:49.543]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:49.543]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:49.543]             base::names(...future.oldOptions))
[10:32:49.543]     }
[10:32:49.543]     if (FALSE) {
[10:32:49.543]     }
[10:32:49.543]     else {
[10:32:49.543]         if (TRUE) {
[10:32:49.543]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:49.543]                 open = "w")
[10:32:49.543]         }
[10:32:49.543]         else {
[10:32:49.543]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:49.543]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:49.543]         }
[10:32:49.543]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:49.543]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:49.543]             base::sink(type = "output", split = FALSE)
[10:32:49.543]             base::close(...future.stdout)
[10:32:49.543]         }, add = TRUE)
[10:32:49.543]     }
[10:32:49.543]     ...future.frame <- base::sys.nframe()
[10:32:49.543]     ...future.conditions <- base::list()
[10:32:49.543]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:49.543]     if (FALSE) {
[10:32:49.543]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:49.543]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:49.543]     }
[10:32:49.543]     ...future.result <- base::tryCatch({
[10:32:49.543]         base::withCallingHandlers({
[10:32:49.543]             ...future.value <- base::withVisible(base::local({
[10:32:49.543]                 1
[10:32:49.543]             }))
[10:32:49.543]             future::FutureResult(value = ...future.value$value, 
[10:32:49.543]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:49.543]                   ...future.rng), globalenv = if (FALSE) 
[10:32:49.543]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:49.543]                     ...future.globalenv.names))
[10:32:49.543]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:49.543]         }, condition = base::local({
[10:32:49.543]             c <- base::c
[10:32:49.543]             inherits <- base::inherits
[10:32:49.543]             invokeRestart <- base::invokeRestart
[10:32:49.543]             length <- base::length
[10:32:49.543]             list <- base::list
[10:32:49.543]             seq.int <- base::seq.int
[10:32:49.543]             signalCondition <- base::signalCondition
[10:32:49.543]             sys.calls <- base::sys.calls
[10:32:49.543]             `[[` <- base::`[[`
[10:32:49.543]             `+` <- base::`+`
[10:32:49.543]             `<<-` <- base::`<<-`
[10:32:49.543]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:49.543]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:49.543]                   3L)]
[10:32:49.543]             }
[10:32:49.543]             function(cond) {
[10:32:49.543]                 is_error <- inherits(cond, "error")
[10:32:49.543]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:49.543]                   NULL)
[10:32:49.543]                 if (is_error) {
[10:32:49.543]                   sessionInformation <- function() {
[10:32:49.543]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:49.543]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:49.543]                       search = base::search(), system = base::Sys.info())
[10:32:49.543]                   }
[10:32:49.543]                   ...future.conditions[[length(...future.conditions) + 
[10:32:49.543]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:49.543]                     cond$call), session = sessionInformation(), 
[10:32:49.543]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:49.543]                   signalCondition(cond)
[10:32:49.543]                 }
[10:32:49.543]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:49.543]                 "immediateCondition"))) {
[10:32:49.543]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:49.543]                   ...future.conditions[[length(...future.conditions) + 
[10:32:49.543]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:49.543]                   if (TRUE && !signal) {
[10:32:49.543]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:49.543]                     {
[10:32:49.543]                       inherits <- base::inherits
[10:32:49.543]                       invokeRestart <- base::invokeRestart
[10:32:49.543]                       is.null <- base::is.null
[10:32:49.543]                       muffled <- FALSE
[10:32:49.543]                       if (inherits(cond, "message")) {
[10:32:49.543]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:49.543]                         if (muffled) 
[10:32:49.543]                           invokeRestart("muffleMessage")
[10:32:49.543]                       }
[10:32:49.543]                       else if (inherits(cond, "warning")) {
[10:32:49.543]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:49.543]                         if (muffled) 
[10:32:49.543]                           invokeRestart("muffleWarning")
[10:32:49.543]                       }
[10:32:49.543]                       else if (inherits(cond, "condition")) {
[10:32:49.543]                         if (!is.null(pattern)) {
[10:32:49.543]                           computeRestarts <- base::computeRestarts
[10:32:49.543]                           grepl <- base::grepl
[10:32:49.543]                           restarts <- computeRestarts(cond)
[10:32:49.543]                           for (restart in restarts) {
[10:32:49.543]                             name <- restart$name
[10:32:49.543]                             if (is.null(name)) 
[10:32:49.543]                               next
[10:32:49.543]                             if (!grepl(pattern, name)) 
[10:32:49.543]                               next
[10:32:49.543]                             invokeRestart(restart)
[10:32:49.543]                             muffled <- TRUE
[10:32:49.543]                             break
[10:32:49.543]                           }
[10:32:49.543]                         }
[10:32:49.543]                       }
[10:32:49.543]                       invisible(muffled)
[10:32:49.543]                     }
[10:32:49.543]                     muffleCondition(cond, pattern = "^muffle")
[10:32:49.543]                   }
[10:32:49.543]                 }
[10:32:49.543]                 else {
[10:32:49.543]                   if (TRUE) {
[10:32:49.543]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:49.543]                     {
[10:32:49.543]                       inherits <- base::inherits
[10:32:49.543]                       invokeRestart <- base::invokeRestart
[10:32:49.543]                       is.null <- base::is.null
[10:32:49.543]                       muffled <- FALSE
[10:32:49.543]                       if (inherits(cond, "message")) {
[10:32:49.543]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:49.543]                         if (muffled) 
[10:32:49.543]                           invokeRestart("muffleMessage")
[10:32:49.543]                       }
[10:32:49.543]                       else if (inherits(cond, "warning")) {
[10:32:49.543]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:49.543]                         if (muffled) 
[10:32:49.543]                           invokeRestart("muffleWarning")
[10:32:49.543]                       }
[10:32:49.543]                       else if (inherits(cond, "condition")) {
[10:32:49.543]                         if (!is.null(pattern)) {
[10:32:49.543]                           computeRestarts <- base::computeRestarts
[10:32:49.543]                           grepl <- base::grepl
[10:32:49.543]                           restarts <- computeRestarts(cond)
[10:32:49.543]                           for (restart in restarts) {
[10:32:49.543]                             name <- restart$name
[10:32:49.543]                             if (is.null(name)) 
[10:32:49.543]                               next
[10:32:49.543]                             if (!grepl(pattern, name)) 
[10:32:49.543]                               next
[10:32:49.543]                             invokeRestart(restart)
[10:32:49.543]                             muffled <- TRUE
[10:32:49.543]                             break
[10:32:49.543]                           }
[10:32:49.543]                         }
[10:32:49.543]                       }
[10:32:49.543]                       invisible(muffled)
[10:32:49.543]                     }
[10:32:49.543]                     muffleCondition(cond, pattern = "^muffle")
[10:32:49.543]                   }
[10:32:49.543]                 }
[10:32:49.543]             }
[10:32:49.543]         }))
[10:32:49.543]     }, error = function(ex) {
[10:32:49.543]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:49.543]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:49.543]                 ...future.rng), started = ...future.startTime, 
[10:32:49.543]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:49.543]             version = "1.8"), class = "FutureResult")
[10:32:49.543]     }, finally = {
[10:32:49.543]         if (!identical(...future.workdir, getwd())) 
[10:32:49.543]             setwd(...future.workdir)
[10:32:49.543]         {
[10:32:49.543]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:49.543]                 ...future.oldOptions$nwarnings <- NULL
[10:32:49.543]             }
[10:32:49.543]             base::options(...future.oldOptions)
[10:32:49.543]             if (.Platform$OS.type == "windows") {
[10:32:49.543]                 old_names <- names(...future.oldEnvVars)
[10:32:49.543]                 envs <- base::Sys.getenv()
[10:32:49.543]                 names <- names(envs)
[10:32:49.543]                 common <- intersect(names, old_names)
[10:32:49.543]                 added <- setdiff(names, old_names)
[10:32:49.543]                 removed <- setdiff(old_names, names)
[10:32:49.543]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:49.543]                   envs[common]]
[10:32:49.543]                 NAMES <- toupper(changed)
[10:32:49.543]                 args <- list()
[10:32:49.543]                 for (kk in seq_along(NAMES)) {
[10:32:49.543]                   name <- changed[[kk]]
[10:32:49.543]                   NAME <- NAMES[[kk]]
[10:32:49.543]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:49.543]                     next
[10:32:49.543]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:49.543]                 }
[10:32:49.543]                 NAMES <- toupper(added)
[10:32:49.543]                 for (kk in seq_along(NAMES)) {
[10:32:49.543]                   name <- added[[kk]]
[10:32:49.543]                   NAME <- NAMES[[kk]]
[10:32:49.543]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:49.543]                     next
[10:32:49.543]                   args[[name]] <- ""
[10:32:49.543]                 }
[10:32:49.543]                 NAMES <- toupper(removed)
[10:32:49.543]                 for (kk in seq_along(NAMES)) {
[10:32:49.543]                   name <- removed[[kk]]
[10:32:49.543]                   NAME <- NAMES[[kk]]
[10:32:49.543]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:49.543]                     next
[10:32:49.543]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:49.543]                 }
[10:32:49.543]                 if (length(args) > 0) 
[10:32:49.543]                   base::do.call(base::Sys.setenv, args = args)
[10:32:49.543]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:49.543]             }
[10:32:49.543]             else {
[10:32:49.543]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:49.543]             }
[10:32:49.543]             {
[10:32:49.543]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:49.543]                   0L) {
[10:32:49.543]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:49.543]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:49.543]                   base::options(opts)
[10:32:49.543]                 }
[10:32:49.543]                 {
[10:32:49.543]                   {
[10:32:49.543]                     NULL
[10:32:49.543]                     RNGkind("Mersenne-Twister")
[10:32:49.543]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:49.543]                       inherits = FALSE)
[10:32:49.543]                   }
[10:32:49.543]                   options(future.plan = NULL)
[10:32:49.543]                   if (is.na(NA_character_)) 
[10:32:49.543]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:49.543]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:49.543]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:49.543]                     .init = FALSE)
[10:32:49.543]                 }
[10:32:49.543]             }
[10:32:49.543]         }
[10:32:49.543]     })
[10:32:49.543]     if (TRUE) {
[10:32:49.543]         base::sink(type = "output", split = FALSE)
[10:32:49.543]         if (TRUE) {
[10:32:49.543]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:49.543]         }
[10:32:49.543]         else {
[10:32:49.543]             ...future.result["stdout"] <- base::list(NULL)
[10:32:49.543]         }
[10:32:49.543]         base::close(...future.stdout)
[10:32:49.543]         ...future.stdout <- NULL
[10:32:49.543]     }
[10:32:49.543]     ...future.result$conditions <- ...future.conditions
[10:32:49.543]     ...future.result$finished <- base::Sys.time()
[10:32:49.543]     ...future.result
[10:32:49.543] }
[10:32:49.545] plan(): Setting new future strategy stack:
[10:32:49.545] List of future strategies:
[10:32:49.545] 1. sequential:
[10:32:49.545]    - args: function (..., envir = parent.frame())
[10:32:49.545]    - tweaked: FALSE
[10:32:49.545]    - call: NULL
[10:32:49.545] plan(): nbrOfWorkers() = 1
[10:32:49.546] plan(): Setting new future strategy stack:
[10:32:49.547] List of future strategies:
[10:32:49.547] 1. sequential:
[10:32:49.547]    - args: function (..., envir = parent.frame())
[10:32:49.547]    - tweaked: FALSE
[10:32:49.547]    - call: future::plan("sequential")
[10:32:49.547] plan(): nbrOfWorkers() = 1
[10:32:49.547] SequentialFuture started (and completed)
[10:32:49.548] - Launch lazy future ... done
[10:32:49.548] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: b5c79e2e-d417-96d6-5eee-2708373bb9f9
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-b5c79e2e-d417-96d6-5eee-2708373bb9f9', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: b5c79e2e-d417-96d6-5eee-2708373bb9f9
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('multicore-b5c79e2e-d417-96d6-5eee-2708373bb9f9', 'remove') ...
*** FutureRegistry('multicore-b5c79e2e-d417-96d6-5eee-2708373bb9f9', 'list') ...
list()
*** FutureRegistry('multicore-b5c79e2e-d417-96d6-5eee-2708373bb9f9', 'add') ...
[10:32:49.551] getGlobalsAndPackages() ...
[10:32:49.551] Searching for globals...
[10:32:49.552] - globals found: [1] ‘{’
[10:32:49.552] Searching for globals ... DONE
[10:32:49.552] Resolving globals: FALSE
[10:32:49.552] 
[10:32:49.553] 
[10:32:49.553] getGlobalsAndPackages() ... DONE
[10:32:49.553] run() for ‘Future’ ...
[10:32:49.553] - state: ‘created’
[10:32:49.553] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:49.553] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:49.553] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:49.554]   - Field: ‘label’
[10:32:49.554]   - Field: ‘local’
[10:32:49.554]   - Field: ‘owner’
[10:32:49.554]   - Field: ‘envir’
[10:32:49.554]   - Field: ‘packages’
[10:32:49.554]   - Field: ‘gc’
[10:32:49.554]   - Field: ‘conditions’
[10:32:49.554]   - Field: ‘expr’
[10:32:49.554]   - Field: ‘uuid’
[10:32:49.554]   - Field: ‘seed’
[10:32:49.554]   - Field: ‘version’
[10:32:49.555]   - Field: ‘result’
[10:32:49.555]   - Field: ‘asynchronous’
[10:32:49.555]   - Field: ‘calls’
[10:32:49.555]   - Field: ‘globals’
[10:32:49.555]   - Field: ‘stdout’
[10:32:49.555]   - Field: ‘earlySignal’
[10:32:49.555]   - Field: ‘lazy’
[10:32:49.555]   - Field: ‘state’
[10:32:49.555] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:49.555] - Launch lazy future ...
[10:32:49.555] Packages needed by the future expression (n = 0): <none>
[10:32:49.556] Packages needed by future strategies (n = 0): <none>
[10:32:49.556] {
[10:32:49.556]     {
[10:32:49.556]         {
[10:32:49.556]             ...future.startTime <- base::Sys.time()
[10:32:49.556]             {
[10:32:49.556]                 {
[10:32:49.556]                   {
[10:32:49.556]                     base::local({
[10:32:49.556]                       has_future <- base::requireNamespace("future", 
[10:32:49.556]                         quietly = TRUE)
[10:32:49.556]                       if (has_future) {
[10:32:49.556]                         ns <- base::getNamespace("future")
[10:32:49.556]                         version <- ns[[".package"]][["version"]]
[10:32:49.556]                         if (is.null(version)) 
[10:32:49.556]                           version <- utils::packageVersion("future")
[10:32:49.556]                       }
[10:32:49.556]                       else {
[10:32:49.556]                         version <- NULL
[10:32:49.556]                       }
[10:32:49.556]                       if (!has_future || version < "1.8.0") {
[10:32:49.556]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:49.556]                           "", base::R.version$version.string), 
[10:32:49.556]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:49.556]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:49.556]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:49.556]                             "release", "version")], collapse = " "), 
[10:32:49.556]                           hostname = base::Sys.info()[["nodename"]])
[10:32:49.556]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:49.556]                           info)
[10:32:49.556]                         info <- base::paste(info, collapse = "; ")
[10:32:49.556]                         if (!has_future) {
[10:32:49.556]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:49.556]                             info)
[10:32:49.556]                         }
[10:32:49.556]                         else {
[10:32:49.556]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:49.556]                             info, version)
[10:32:49.556]                         }
[10:32:49.556]                         base::stop(msg)
[10:32:49.556]                       }
[10:32:49.556]                     })
[10:32:49.556]                   }
[10:32:49.556]                   ...future.strategy.old <- future::plan("list")
[10:32:49.556]                   options(future.plan = NULL)
[10:32:49.556]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:49.556]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:49.556]                 }
[10:32:49.556]                 ...future.workdir <- getwd()
[10:32:49.556]             }
[10:32:49.556]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:49.556]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:49.556]         }
[10:32:49.556]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:49.556]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:49.556]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:49.556]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:49.556]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:49.556]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:49.556]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:49.556]             base::names(...future.oldOptions))
[10:32:49.556]     }
[10:32:49.556]     if (FALSE) {
[10:32:49.556]     }
[10:32:49.556]     else {
[10:32:49.556]         if (TRUE) {
[10:32:49.556]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:49.556]                 open = "w")
[10:32:49.556]         }
[10:32:49.556]         else {
[10:32:49.556]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:49.556]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:49.556]         }
[10:32:49.556]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:49.556]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:49.556]             base::sink(type = "output", split = FALSE)
[10:32:49.556]             base::close(...future.stdout)
[10:32:49.556]         }, add = TRUE)
[10:32:49.556]     }
[10:32:49.556]     ...future.frame <- base::sys.nframe()
[10:32:49.556]     ...future.conditions <- base::list()
[10:32:49.556]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:49.556]     if (FALSE) {
[10:32:49.556]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:49.556]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:49.556]     }
[10:32:49.556]     ...future.result <- base::tryCatch({
[10:32:49.556]         base::withCallingHandlers({
[10:32:49.556]             ...future.value <- base::withVisible(base::local({
[10:32:49.556]                 2
[10:32:49.556]             }))
[10:32:49.556]             future::FutureResult(value = ...future.value$value, 
[10:32:49.556]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:49.556]                   ...future.rng), globalenv = if (FALSE) 
[10:32:49.556]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:49.556]                     ...future.globalenv.names))
[10:32:49.556]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:49.556]         }, condition = base::local({
[10:32:49.556]             c <- base::c
[10:32:49.556]             inherits <- base::inherits
[10:32:49.556]             invokeRestart <- base::invokeRestart
[10:32:49.556]             length <- base::length
[10:32:49.556]             list <- base::list
[10:32:49.556]             seq.int <- base::seq.int
[10:32:49.556]             signalCondition <- base::signalCondition
[10:32:49.556]             sys.calls <- base::sys.calls
[10:32:49.556]             `[[` <- base::`[[`
[10:32:49.556]             `+` <- base::`+`
[10:32:49.556]             `<<-` <- base::`<<-`
[10:32:49.556]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:49.556]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:49.556]                   3L)]
[10:32:49.556]             }
[10:32:49.556]             function(cond) {
[10:32:49.556]                 is_error <- inherits(cond, "error")
[10:32:49.556]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:49.556]                   NULL)
[10:32:49.556]                 if (is_error) {
[10:32:49.556]                   sessionInformation <- function() {
[10:32:49.556]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:49.556]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:49.556]                       search = base::search(), system = base::Sys.info())
[10:32:49.556]                   }
[10:32:49.556]                   ...future.conditions[[length(...future.conditions) + 
[10:32:49.556]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:49.556]                     cond$call), session = sessionInformation(), 
[10:32:49.556]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:49.556]                   signalCondition(cond)
[10:32:49.556]                 }
[10:32:49.556]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:49.556]                 "immediateCondition"))) {
[10:32:49.556]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:49.556]                   ...future.conditions[[length(...future.conditions) + 
[10:32:49.556]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:49.556]                   if (TRUE && !signal) {
[10:32:49.556]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:49.556]                     {
[10:32:49.556]                       inherits <- base::inherits
[10:32:49.556]                       invokeRestart <- base::invokeRestart
[10:32:49.556]                       is.null <- base::is.null
[10:32:49.556]                       muffled <- FALSE
[10:32:49.556]                       if (inherits(cond, "message")) {
[10:32:49.556]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:49.556]                         if (muffled) 
[10:32:49.556]                           invokeRestart("muffleMessage")
[10:32:49.556]                       }
[10:32:49.556]                       else if (inherits(cond, "warning")) {
[10:32:49.556]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:49.556]                         if (muffled) 
[10:32:49.556]                           invokeRestart("muffleWarning")
[10:32:49.556]                       }
[10:32:49.556]                       else if (inherits(cond, "condition")) {
[10:32:49.556]                         if (!is.null(pattern)) {
[10:32:49.556]                           computeRestarts <- base::computeRestarts
[10:32:49.556]                           grepl <- base::grepl
[10:32:49.556]                           restarts <- computeRestarts(cond)
[10:32:49.556]                           for (restart in restarts) {
[10:32:49.556]                             name <- restart$name
[10:32:49.556]                             if (is.null(name)) 
[10:32:49.556]                               next
[10:32:49.556]                             if (!grepl(pattern, name)) 
[10:32:49.556]                               next
[10:32:49.556]                             invokeRestart(restart)
[10:32:49.556]                             muffled <- TRUE
[10:32:49.556]                             break
[10:32:49.556]                           }
[10:32:49.556]                         }
[10:32:49.556]                       }
[10:32:49.556]                       invisible(muffled)
[10:32:49.556]                     }
[10:32:49.556]                     muffleCondition(cond, pattern = "^muffle")
[10:32:49.556]                   }
[10:32:49.556]                 }
[10:32:49.556]                 else {
[10:32:49.556]                   if (TRUE) {
[10:32:49.556]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:49.556]                     {
[10:32:49.556]                       inherits <- base::inherits
[10:32:49.556]                       invokeRestart <- base::invokeRestart
[10:32:49.556]                       is.null <- base::is.null
[10:32:49.556]                       muffled <- FALSE
[10:32:49.556]                       if (inherits(cond, "message")) {
[10:32:49.556]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:49.556]                         if (muffled) 
[10:32:49.556]                           invokeRestart("muffleMessage")
[10:32:49.556]                       }
[10:32:49.556]                       else if (inherits(cond, "warning")) {
[10:32:49.556]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:49.556]                         if (muffled) 
[10:32:49.556]                           invokeRestart("muffleWarning")
[10:32:49.556]                       }
[10:32:49.556]                       else if (inherits(cond, "condition")) {
[10:32:49.556]                         if (!is.null(pattern)) {
[10:32:49.556]                           computeRestarts <- base::computeRestarts
[10:32:49.556]                           grepl <- base::grepl
[10:32:49.556]                           restarts <- computeRestarts(cond)
[10:32:49.556]                           for (restart in restarts) {
[10:32:49.556]                             name <- restart$name
[10:32:49.556]                             if (is.null(name)) 
[10:32:49.556]                               next
[10:32:49.556]                             if (!grepl(pattern, name)) 
[10:32:49.556]                               next
[10:32:49.556]                             invokeRestart(restart)
[10:32:49.556]                             muffled <- TRUE
[10:32:49.556]                             break
[10:32:49.556]                           }
[10:32:49.556]                         }
[10:32:49.556]                       }
[10:32:49.556]                       invisible(muffled)
[10:32:49.556]                     }
[10:32:49.556]                     muffleCondition(cond, pattern = "^muffle")
[10:32:49.556]                   }
[10:32:49.556]                 }
[10:32:49.556]             }
[10:32:49.556]         }))
[10:32:49.556]     }, error = function(ex) {
[10:32:49.556]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:49.556]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:49.556]                 ...future.rng), started = ...future.startTime, 
[10:32:49.556]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:49.556]             version = "1.8"), class = "FutureResult")
[10:32:49.556]     }, finally = {
[10:32:49.556]         if (!identical(...future.workdir, getwd())) 
[10:32:49.556]             setwd(...future.workdir)
[10:32:49.556]         {
[10:32:49.556]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:49.556]                 ...future.oldOptions$nwarnings <- NULL
[10:32:49.556]             }
[10:32:49.556]             base::options(...future.oldOptions)
[10:32:49.556]             if (.Platform$OS.type == "windows") {
[10:32:49.556]                 old_names <- names(...future.oldEnvVars)
[10:32:49.556]                 envs <- base::Sys.getenv()
[10:32:49.556]                 names <- names(envs)
[10:32:49.556]                 common <- intersect(names, old_names)
[10:32:49.556]                 added <- setdiff(names, old_names)
[10:32:49.556]                 removed <- setdiff(old_names, names)
[10:32:49.556]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:49.556]                   envs[common]]
[10:32:49.556]                 NAMES <- toupper(changed)
[10:32:49.556]                 args <- list()
[10:32:49.556]                 for (kk in seq_along(NAMES)) {
[10:32:49.556]                   name <- changed[[kk]]
[10:32:49.556]                   NAME <- NAMES[[kk]]
[10:32:49.556]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:49.556]                     next
[10:32:49.556]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:49.556]                 }
[10:32:49.556]                 NAMES <- toupper(added)
[10:32:49.556]                 for (kk in seq_along(NAMES)) {
[10:32:49.556]                   name <- added[[kk]]
[10:32:49.556]                   NAME <- NAMES[[kk]]
[10:32:49.556]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:49.556]                     next
[10:32:49.556]                   args[[name]] <- ""
[10:32:49.556]                 }
[10:32:49.556]                 NAMES <- toupper(removed)
[10:32:49.556]                 for (kk in seq_along(NAMES)) {
[10:32:49.556]                   name <- removed[[kk]]
[10:32:49.556]                   NAME <- NAMES[[kk]]
[10:32:49.556]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:49.556]                     next
[10:32:49.556]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:49.556]                 }
[10:32:49.556]                 if (length(args) > 0) 
[10:32:49.556]                   base::do.call(base::Sys.setenv, args = args)
[10:32:49.556]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:49.556]             }
[10:32:49.556]             else {
[10:32:49.556]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:49.556]             }
[10:32:49.556]             {
[10:32:49.556]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:49.556]                   0L) {
[10:32:49.556]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:49.556]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:49.556]                   base::options(opts)
[10:32:49.556]                 }
[10:32:49.556]                 {
[10:32:49.556]                   {
[10:32:49.556]                     NULL
[10:32:49.556]                     RNGkind("Mersenne-Twister")
[10:32:49.556]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:49.556]                       inherits = FALSE)
[10:32:49.556]                   }
[10:32:49.556]                   options(future.plan = NULL)
[10:32:49.556]                   if (is.na(NA_character_)) 
[10:32:49.556]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:49.556]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:49.556]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:49.556]                     .init = FALSE)
[10:32:49.556]                 }
[10:32:49.556]             }
[10:32:49.556]         }
[10:32:49.556]     })
[10:32:49.556]     if (TRUE) {
[10:32:49.556]         base::sink(type = "output", split = FALSE)
[10:32:49.556]         if (TRUE) {
[10:32:49.556]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:49.556]         }
[10:32:49.556]         else {
[10:32:49.556]             ...future.result["stdout"] <- base::list(NULL)
[10:32:49.556]         }
[10:32:49.556]         base::close(...future.stdout)
[10:32:49.556]         ...future.stdout <- NULL
[10:32:49.556]     }
[10:32:49.556]     ...future.result$conditions <- ...future.conditions
[10:32:49.556]     ...future.result$finished <- base::Sys.time()
[10:32:49.556]     ...future.result
[10:32:49.556] }
[10:32:49.558] plan(): Setting new future strategy stack:
[10:32:49.558] List of future strategies:
[10:32:49.558] 1. sequential:
[10:32:49.558]    - args: function (..., envir = parent.frame())
[10:32:49.558]    - tweaked: FALSE
[10:32:49.558]    - call: NULL
[10:32:49.558] plan(): nbrOfWorkers() = 1
[10:32:49.559] plan(): Setting new future strategy stack:
[10:32:49.559] List of future strategies:
[10:32:49.559] 1. sequential:
[10:32:49.559]    - args: function (..., envir = parent.frame())
[10:32:49.559]    - tweaked: FALSE
[10:32:49.559]    - call: future::plan("sequential")
[10:32:49.559] plan(): nbrOfWorkers() = 1
[10:32:49.559] SequentialFuture started (and completed)
[10:32:49.559] - Launch lazy future ... done
[10:32:49.560] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: b5c79e2e-d417-96d6-5eee-2708373bb9f9
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-b5c79e2e-d417-96d6-5eee-2708373bb9f9', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: b5c79e2e-d417-96d6-5eee-2708373bb9f9
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('multicore-b5c79e2e-d417-96d6-5eee-2708373bb9f9', 'collect-first') ...
[10:32:49.561] resolved() for ‘SequentialFuture’ ...
[10:32:49.561] - state: ‘finished’
[10:32:49.561] - run: FALSE
[10:32:49.561] - result: ‘FutureResult’
[10:32:49.561] resolved() for ‘SequentialFuture’ ... done
list()
*** FutureRegistry('multicore-b5c79e2e-d417-96d6-5eee-2708373bb9f9', 'add') ...
[10:32:49.562] getGlobalsAndPackages() ...
[10:32:49.562] Searching for globals...
[10:32:49.562] - globals found: [1] ‘{’
[10:32:49.562] Searching for globals ... DONE
[10:32:49.562] Resolving globals: FALSE
[10:32:49.563] 
[10:32:49.563] 
[10:32:49.563] getGlobalsAndPackages() ... DONE
[10:32:49.563] run() for ‘Future’ ...
[10:32:49.563] - state: ‘created’
[10:32:49.563] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:49.564] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:49.564] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:49.564]   - Field: ‘label’
[10:32:49.564]   - Field: ‘local’
[10:32:49.564]   - Field: ‘owner’
[10:32:49.564]   - Field: ‘envir’
[10:32:49.564]   - Field: ‘packages’
[10:32:49.564]   - Field: ‘gc’
[10:32:49.564]   - Field: ‘conditions’
[10:32:49.564]   - Field: ‘expr’
[10:32:49.564]   - Field: ‘uuid’
[10:32:49.565]   - Field: ‘seed’
[10:32:49.565]   - Field: ‘version’
[10:32:49.565]   - Field: ‘result’
[10:32:49.565]   - Field: ‘asynchronous’
[10:32:49.565]   - Field: ‘calls’
[10:32:49.565]   - Field: ‘globals’
[10:32:49.565]   - Field: ‘stdout’
[10:32:49.565]   - Field: ‘earlySignal’
[10:32:49.565]   - Field: ‘lazy’
[10:32:49.565]   - Field: ‘state’
[10:32:49.565] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:49.566] - Launch lazy future ...
[10:32:49.566] Packages needed by the future expression (n = 0): <none>
[10:32:49.566] Packages needed by future strategies (n = 0): <none>
[10:32:49.566] {
[10:32:49.566]     {
[10:32:49.566]         {
[10:32:49.566]             ...future.startTime <- base::Sys.time()
[10:32:49.566]             {
[10:32:49.566]                 {
[10:32:49.566]                   {
[10:32:49.566]                     base::local({
[10:32:49.566]                       has_future <- base::requireNamespace("future", 
[10:32:49.566]                         quietly = TRUE)
[10:32:49.566]                       if (has_future) {
[10:32:49.566]                         ns <- base::getNamespace("future")
[10:32:49.566]                         version <- ns[[".package"]][["version"]]
[10:32:49.566]                         if (is.null(version)) 
[10:32:49.566]                           version <- utils::packageVersion("future")
[10:32:49.566]                       }
[10:32:49.566]                       else {
[10:32:49.566]                         version <- NULL
[10:32:49.566]                       }
[10:32:49.566]                       if (!has_future || version < "1.8.0") {
[10:32:49.566]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:49.566]                           "", base::R.version$version.string), 
[10:32:49.566]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:49.566]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:49.566]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:49.566]                             "release", "version")], collapse = " "), 
[10:32:49.566]                           hostname = base::Sys.info()[["nodename"]])
[10:32:49.566]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:49.566]                           info)
[10:32:49.566]                         info <- base::paste(info, collapse = "; ")
[10:32:49.566]                         if (!has_future) {
[10:32:49.566]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:49.566]                             info)
[10:32:49.566]                         }
[10:32:49.566]                         else {
[10:32:49.566]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:49.566]                             info, version)
[10:32:49.566]                         }
[10:32:49.566]                         base::stop(msg)
[10:32:49.566]                       }
[10:32:49.566]                     })
[10:32:49.566]                   }
[10:32:49.566]                   ...future.strategy.old <- future::plan("list")
[10:32:49.566]                   options(future.plan = NULL)
[10:32:49.566]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:49.566]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:49.566]                 }
[10:32:49.566]                 ...future.workdir <- getwd()
[10:32:49.566]             }
[10:32:49.566]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:49.566]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:49.566]         }
[10:32:49.566]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:49.566]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:49.566]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:49.566]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:49.566]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:49.566]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:49.566]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:49.566]             base::names(...future.oldOptions))
[10:32:49.566]     }
[10:32:49.566]     if (FALSE) {
[10:32:49.566]     }
[10:32:49.566]     else {
[10:32:49.566]         if (TRUE) {
[10:32:49.566]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:49.566]                 open = "w")
[10:32:49.566]         }
[10:32:49.566]         else {
[10:32:49.566]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:49.566]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:49.566]         }
[10:32:49.566]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:49.566]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:49.566]             base::sink(type = "output", split = FALSE)
[10:32:49.566]             base::close(...future.stdout)
[10:32:49.566]         }, add = TRUE)
[10:32:49.566]     }
[10:32:49.566]     ...future.frame <- base::sys.nframe()
[10:32:49.566]     ...future.conditions <- base::list()
[10:32:49.566]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:49.566]     if (FALSE) {
[10:32:49.566]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:49.566]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:49.566]     }
[10:32:49.566]     ...future.result <- base::tryCatch({
[10:32:49.566]         base::withCallingHandlers({
[10:32:49.566]             ...future.value <- base::withVisible(base::local({
[10:32:49.566]                 2
[10:32:49.566]             }))
[10:32:49.566]             future::FutureResult(value = ...future.value$value, 
[10:32:49.566]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:49.566]                   ...future.rng), globalenv = if (FALSE) 
[10:32:49.566]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:49.566]                     ...future.globalenv.names))
[10:32:49.566]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:49.566]         }, condition = base::local({
[10:32:49.566]             c <- base::c
[10:32:49.566]             inherits <- base::inherits
[10:32:49.566]             invokeRestart <- base::invokeRestart
[10:32:49.566]             length <- base::length
[10:32:49.566]             list <- base::list
[10:32:49.566]             seq.int <- base::seq.int
[10:32:49.566]             signalCondition <- base::signalCondition
[10:32:49.566]             sys.calls <- base::sys.calls
[10:32:49.566]             `[[` <- base::`[[`
[10:32:49.566]             `+` <- base::`+`
[10:32:49.566]             `<<-` <- base::`<<-`
[10:32:49.566]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:49.566]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:49.566]                   3L)]
[10:32:49.566]             }
[10:32:49.566]             function(cond) {
[10:32:49.566]                 is_error <- inherits(cond, "error")
[10:32:49.566]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:49.566]                   NULL)
[10:32:49.566]                 if (is_error) {
[10:32:49.566]                   sessionInformation <- function() {
[10:32:49.566]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:49.566]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:49.566]                       search = base::search(), system = base::Sys.info())
[10:32:49.566]                   }
[10:32:49.566]                   ...future.conditions[[length(...future.conditions) + 
[10:32:49.566]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:49.566]                     cond$call), session = sessionInformation(), 
[10:32:49.566]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:49.566]                   signalCondition(cond)
[10:32:49.566]                 }
[10:32:49.566]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:49.566]                 "immediateCondition"))) {
[10:32:49.566]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:49.566]                   ...future.conditions[[length(...future.conditions) + 
[10:32:49.566]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:49.566]                   if (TRUE && !signal) {
[10:32:49.566]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:49.566]                     {
[10:32:49.566]                       inherits <- base::inherits
[10:32:49.566]                       invokeRestart <- base::invokeRestart
[10:32:49.566]                       is.null <- base::is.null
[10:32:49.566]                       muffled <- FALSE
[10:32:49.566]                       if (inherits(cond, "message")) {
[10:32:49.566]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:49.566]                         if (muffled) 
[10:32:49.566]                           invokeRestart("muffleMessage")
[10:32:49.566]                       }
[10:32:49.566]                       else if (inherits(cond, "warning")) {
[10:32:49.566]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:49.566]                         if (muffled) 
[10:32:49.566]                           invokeRestart("muffleWarning")
[10:32:49.566]                       }
[10:32:49.566]                       else if (inherits(cond, "condition")) {
[10:32:49.566]                         if (!is.null(pattern)) {
[10:32:49.566]                           computeRestarts <- base::computeRestarts
[10:32:49.566]                           grepl <- base::grepl
[10:32:49.566]                           restarts <- computeRestarts(cond)
[10:32:49.566]                           for (restart in restarts) {
[10:32:49.566]                             name <- restart$name
[10:32:49.566]                             if (is.null(name)) 
[10:32:49.566]                               next
[10:32:49.566]                             if (!grepl(pattern, name)) 
[10:32:49.566]                               next
[10:32:49.566]                             invokeRestart(restart)
[10:32:49.566]                             muffled <- TRUE
[10:32:49.566]                             break
[10:32:49.566]                           }
[10:32:49.566]                         }
[10:32:49.566]                       }
[10:32:49.566]                       invisible(muffled)
[10:32:49.566]                     }
[10:32:49.566]                     muffleCondition(cond, pattern = "^muffle")
[10:32:49.566]                   }
[10:32:49.566]                 }
[10:32:49.566]                 else {
[10:32:49.566]                   if (TRUE) {
[10:32:49.566]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:49.566]                     {
[10:32:49.566]                       inherits <- base::inherits
[10:32:49.566]                       invokeRestart <- base::invokeRestart
[10:32:49.566]                       is.null <- base::is.null
[10:32:49.566]                       muffled <- FALSE
[10:32:49.566]                       if (inherits(cond, "message")) {
[10:32:49.566]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:49.566]                         if (muffled) 
[10:32:49.566]                           invokeRestart("muffleMessage")
[10:32:49.566]                       }
[10:32:49.566]                       else if (inherits(cond, "warning")) {
[10:32:49.566]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:49.566]                         if (muffled) 
[10:32:49.566]                           invokeRestart("muffleWarning")
[10:32:49.566]                       }
[10:32:49.566]                       else if (inherits(cond, "condition")) {
[10:32:49.566]                         if (!is.null(pattern)) {
[10:32:49.566]                           computeRestarts <- base::computeRestarts
[10:32:49.566]                           grepl <- base::grepl
[10:32:49.566]                           restarts <- computeRestarts(cond)
[10:32:49.566]                           for (restart in restarts) {
[10:32:49.566]                             name <- restart$name
[10:32:49.566]                             if (is.null(name)) 
[10:32:49.566]                               next
[10:32:49.566]                             if (!grepl(pattern, name)) 
[10:32:49.566]                               next
[10:32:49.566]                             invokeRestart(restart)
[10:32:49.566]                             muffled <- TRUE
[10:32:49.566]                             break
[10:32:49.566]                           }
[10:32:49.566]                         }
[10:32:49.566]                       }
[10:32:49.566]                       invisible(muffled)
[10:32:49.566]                     }
[10:32:49.566]                     muffleCondition(cond, pattern = "^muffle")
[10:32:49.566]                   }
[10:32:49.566]                 }
[10:32:49.566]             }
[10:32:49.566]         }))
[10:32:49.566]     }, error = function(ex) {
[10:32:49.566]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:49.566]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:49.566]                 ...future.rng), started = ...future.startTime, 
[10:32:49.566]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:49.566]             version = "1.8"), class = "FutureResult")
[10:32:49.566]     }, finally = {
[10:32:49.566]         if (!identical(...future.workdir, getwd())) 
[10:32:49.566]             setwd(...future.workdir)
[10:32:49.566]         {
[10:32:49.566]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:49.566]                 ...future.oldOptions$nwarnings <- NULL
[10:32:49.566]             }
[10:32:49.566]             base::options(...future.oldOptions)
[10:32:49.566]             if (.Platform$OS.type == "windows") {
[10:32:49.566]                 old_names <- names(...future.oldEnvVars)
[10:32:49.566]                 envs <- base::Sys.getenv()
[10:32:49.566]                 names <- names(envs)
[10:32:49.566]                 common <- intersect(names, old_names)
[10:32:49.566]                 added <- setdiff(names, old_names)
[10:32:49.566]                 removed <- setdiff(old_names, names)
[10:32:49.566]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:49.566]                   envs[common]]
[10:32:49.566]                 NAMES <- toupper(changed)
[10:32:49.566]                 args <- list()
[10:32:49.566]                 for (kk in seq_along(NAMES)) {
[10:32:49.566]                   name <- changed[[kk]]
[10:32:49.566]                   NAME <- NAMES[[kk]]
[10:32:49.566]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:49.566]                     next
[10:32:49.566]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:49.566]                 }
[10:32:49.566]                 NAMES <- toupper(added)
[10:32:49.566]                 for (kk in seq_along(NAMES)) {
[10:32:49.566]                   name <- added[[kk]]
[10:32:49.566]                   NAME <- NAMES[[kk]]
[10:32:49.566]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:49.566]                     next
[10:32:49.566]                   args[[name]] <- ""
[10:32:49.566]                 }
[10:32:49.566]                 NAMES <- toupper(removed)
[10:32:49.566]                 for (kk in seq_along(NAMES)) {
[10:32:49.566]                   name <- removed[[kk]]
[10:32:49.566]                   NAME <- NAMES[[kk]]
[10:32:49.566]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:49.566]                     next
[10:32:49.566]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:49.566]                 }
[10:32:49.566]                 if (length(args) > 0) 
[10:32:49.566]                   base::do.call(base::Sys.setenv, args = args)
[10:32:49.566]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:49.566]             }
[10:32:49.566]             else {
[10:32:49.566]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:49.566]             }
[10:32:49.566]             {
[10:32:49.566]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:49.566]                   0L) {
[10:32:49.566]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:49.566]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:49.566]                   base::options(opts)
[10:32:49.566]                 }
[10:32:49.566]                 {
[10:32:49.566]                   {
[10:32:49.566]                     NULL
[10:32:49.566]                     RNGkind("Mersenne-Twister")
[10:32:49.566]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:49.566]                       inherits = FALSE)
[10:32:49.566]                   }
[10:32:49.566]                   options(future.plan = NULL)
[10:32:49.566]                   if (is.na(NA_character_)) 
[10:32:49.566]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:49.566]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:49.566]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:49.566]                     .init = FALSE)
[10:32:49.566]                 }
[10:32:49.566]             }
[10:32:49.566]         }
[10:32:49.566]     })
[10:32:49.566]     if (TRUE) {
[10:32:49.566]         base::sink(type = "output", split = FALSE)
[10:32:49.566]         if (TRUE) {
[10:32:49.566]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:49.566]         }
[10:32:49.566]         else {
[10:32:49.566]             ...future.result["stdout"] <- base::list(NULL)
[10:32:49.566]         }
[10:32:49.566]         base::close(...future.stdout)
[10:32:49.566]         ...future.stdout <- NULL
[10:32:49.566]     }
[10:32:49.566]     ...future.result$conditions <- ...future.conditions
[10:32:49.566]     ...future.result$finished <- base::Sys.time()
[10:32:49.566]     ...future.result
[10:32:49.566] }
[10:32:49.568] plan(): Setting new future strategy stack:
[10:32:49.568] List of future strategies:
[10:32:49.568] 1. sequential:
[10:32:49.568]    - args: function (..., envir = parent.frame())
[10:32:49.568]    - tweaked: FALSE
[10:32:49.568]    - call: NULL
[10:32:49.568] plan(): nbrOfWorkers() = 1
[10:32:49.569] plan(): Setting new future strategy stack:
[10:32:49.569] List of future strategies:
[10:32:49.569] 1. sequential:
[10:32:49.569]    - args: function (..., envir = parent.frame())
[10:32:49.569]    - tweaked: FALSE
[10:32:49.569]    - call: future::plan("sequential")
[10:32:49.569] plan(): nbrOfWorkers() = 1
[10:32:49.570] SequentialFuture started (and completed)
[10:32:49.570] - Launch lazy future ... done
[10:32:49.570] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: b5c79e2e-d417-96d6-5eee-2708373bb9f9
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-b5c79e2e-d417-96d6-5eee-2708373bb9f9', 'reset') ...
*** FutureRegistry('multicore-b5c79e2e-d417-96d6-5eee-2708373bb9f9', 'list') ...
list()
*** FutureRegistry('rscript', 'list') ...
list()
*** FutureRegistry('rscript', 'add') ...
[10:32:49.572] getGlobalsAndPackages() ...
[10:32:49.572] Searching for globals...
[10:32:49.573] - globals found: [1] ‘{’
[10:32:49.573] Searching for globals ... DONE
[10:32:49.573] Resolving globals: FALSE
[10:32:49.573] 
[10:32:49.573] 
[10:32:49.574] getGlobalsAndPackages() ... DONE
[10:32:49.574] run() for ‘Future’ ...
[10:32:49.574] - state: ‘created’
[10:32:49.574] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:49.574] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:49.574] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:49.574]   - Field: ‘label’
[10:32:49.574]   - Field: ‘local’
[10:32:49.575]   - Field: ‘owner’
[10:32:49.575]   - Field: ‘envir’
[10:32:49.575]   - Field: ‘packages’
[10:32:49.575]   - Field: ‘gc’
[10:32:49.575]   - Field: ‘conditions’
[10:32:49.575]   - Field: ‘expr’
[10:32:49.575]   - Field: ‘uuid’
[10:32:49.575]   - Field: ‘seed’
[10:32:49.575]   - Field: ‘version’
[10:32:49.575]   - Field: ‘result’
[10:32:49.575]   - Field: ‘asynchronous’
[10:32:49.576]   - Field: ‘calls’
[10:32:49.576]   - Field: ‘globals’
[10:32:49.576]   - Field: ‘stdout’
[10:32:49.576]   - Field: ‘earlySignal’
[10:32:49.576]   - Field: ‘lazy’
[10:32:49.576]   - Field: ‘state’
[10:32:49.576] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:49.576] - Launch lazy future ...
[10:32:49.576] Packages needed by the future expression (n = 0): <none>
[10:32:49.576] Packages needed by future strategies (n = 0): <none>
[10:32:49.577] {
[10:32:49.577]     {
[10:32:49.577]         {
[10:32:49.577]             ...future.startTime <- base::Sys.time()
[10:32:49.577]             {
[10:32:49.577]                 {
[10:32:49.577]                   {
[10:32:49.577]                     base::local({
[10:32:49.577]                       has_future <- base::requireNamespace("future", 
[10:32:49.577]                         quietly = TRUE)
[10:32:49.577]                       if (has_future) {
[10:32:49.577]                         ns <- base::getNamespace("future")
[10:32:49.577]                         version <- ns[[".package"]][["version"]]
[10:32:49.577]                         if (is.null(version)) 
[10:32:49.577]                           version <- utils::packageVersion("future")
[10:32:49.577]                       }
[10:32:49.577]                       else {
[10:32:49.577]                         version <- NULL
[10:32:49.577]                       }
[10:32:49.577]                       if (!has_future || version < "1.8.0") {
[10:32:49.577]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:49.577]                           "", base::R.version$version.string), 
[10:32:49.577]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:49.577]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:49.577]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:49.577]                             "release", "version")], collapse = " "), 
[10:32:49.577]                           hostname = base::Sys.info()[["nodename"]])
[10:32:49.577]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:49.577]                           info)
[10:32:49.577]                         info <- base::paste(info, collapse = "; ")
[10:32:49.577]                         if (!has_future) {
[10:32:49.577]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:49.577]                             info)
[10:32:49.577]                         }
[10:32:49.577]                         else {
[10:32:49.577]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:49.577]                             info, version)
[10:32:49.577]                         }
[10:32:49.577]                         base::stop(msg)
[10:32:49.577]                       }
[10:32:49.577]                     })
[10:32:49.577]                   }
[10:32:49.577]                   ...future.strategy.old <- future::plan("list")
[10:32:49.577]                   options(future.plan = NULL)
[10:32:49.577]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:49.577]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:49.577]                 }
[10:32:49.577]                 ...future.workdir <- getwd()
[10:32:49.577]             }
[10:32:49.577]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:49.577]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:49.577]         }
[10:32:49.577]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:49.577]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:49.577]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:49.577]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:49.577]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:49.577]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:49.577]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:49.577]             base::names(...future.oldOptions))
[10:32:49.577]     }
[10:32:49.577]     if (FALSE) {
[10:32:49.577]     }
[10:32:49.577]     else {
[10:32:49.577]         if (TRUE) {
[10:32:49.577]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:49.577]                 open = "w")
[10:32:49.577]         }
[10:32:49.577]         else {
[10:32:49.577]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:49.577]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:49.577]         }
[10:32:49.577]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:49.577]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:49.577]             base::sink(type = "output", split = FALSE)
[10:32:49.577]             base::close(...future.stdout)
[10:32:49.577]         }, add = TRUE)
[10:32:49.577]     }
[10:32:49.577]     ...future.frame <- base::sys.nframe()
[10:32:49.577]     ...future.conditions <- base::list()
[10:32:49.577]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:49.577]     if (FALSE) {
[10:32:49.577]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:49.577]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:49.577]     }
[10:32:49.577]     ...future.result <- base::tryCatch({
[10:32:49.577]         base::withCallingHandlers({
[10:32:49.577]             ...future.value <- base::withVisible(base::local({
[10:32:49.577]                 1
[10:32:49.577]             }))
[10:32:49.577]             future::FutureResult(value = ...future.value$value, 
[10:32:49.577]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:49.577]                   ...future.rng), globalenv = if (FALSE) 
[10:32:49.577]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:49.577]                     ...future.globalenv.names))
[10:32:49.577]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:49.577]         }, condition = base::local({
[10:32:49.577]             c <- base::c
[10:32:49.577]             inherits <- base::inherits
[10:32:49.577]             invokeRestart <- base::invokeRestart
[10:32:49.577]             length <- base::length
[10:32:49.577]             list <- base::list
[10:32:49.577]             seq.int <- base::seq.int
[10:32:49.577]             signalCondition <- base::signalCondition
[10:32:49.577]             sys.calls <- base::sys.calls
[10:32:49.577]             `[[` <- base::`[[`
[10:32:49.577]             `+` <- base::`+`
[10:32:49.577]             `<<-` <- base::`<<-`
[10:32:49.577]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:49.577]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:49.577]                   3L)]
[10:32:49.577]             }
[10:32:49.577]             function(cond) {
[10:32:49.577]                 is_error <- inherits(cond, "error")
[10:32:49.577]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:49.577]                   NULL)
[10:32:49.577]                 if (is_error) {
[10:32:49.577]                   sessionInformation <- function() {
[10:32:49.577]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:49.577]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:49.577]                       search = base::search(), system = base::Sys.info())
[10:32:49.577]                   }
[10:32:49.577]                   ...future.conditions[[length(...future.conditions) + 
[10:32:49.577]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:49.577]                     cond$call), session = sessionInformation(), 
[10:32:49.577]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:49.577]                   signalCondition(cond)
[10:32:49.577]                 }
[10:32:49.577]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:49.577]                 "immediateCondition"))) {
[10:32:49.577]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:49.577]                   ...future.conditions[[length(...future.conditions) + 
[10:32:49.577]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:49.577]                   if (TRUE && !signal) {
[10:32:49.577]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:49.577]                     {
[10:32:49.577]                       inherits <- base::inherits
[10:32:49.577]                       invokeRestart <- base::invokeRestart
[10:32:49.577]                       is.null <- base::is.null
[10:32:49.577]                       muffled <- FALSE
[10:32:49.577]                       if (inherits(cond, "message")) {
[10:32:49.577]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:49.577]                         if (muffled) 
[10:32:49.577]                           invokeRestart("muffleMessage")
[10:32:49.577]                       }
[10:32:49.577]                       else if (inherits(cond, "warning")) {
[10:32:49.577]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:49.577]                         if (muffled) 
[10:32:49.577]                           invokeRestart("muffleWarning")
[10:32:49.577]                       }
[10:32:49.577]                       else if (inherits(cond, "condition")) {
[10:32:49.577]                         if (!is.null(pattern)) {
[10:32:49.577]                           computeRestarts <- base::computeRestarts
[10:32:49.577]                           grepl <- base::grepl
[10:32:49.577]                           restarts <- computeRestarts(cond)
[10:32:49.577]                           for (restart in restarts) {
[10:32:49.577]                             name <- restart$name
[10:32:49.577]                             if (is.null(name)) 
[10:32:49.577]                               next
[10:32:49.577]                             if (!grepl(pattern, name)) 
[10:32:49.577]                               next
[10:32:49.577]                             invokeRestart(restart)
[10:32:49.577]                             muffled <- TRUE
[10:32:49.577]                             break
[10:32:49.577]                           }
[10:32:49.577]                         }
[10:32:49.577]                       }
[10:32:49.577]                       invisible(muffled)
[10:32:49.577]                     }
[10:32:49.577]                     muffleCondition(cond, pattern = "^muffle")
[10:32:49.577]                   }
[10:32:49.577]                 }
[10:32:49.577]                 else {
[10:32:49.577]                   if (TRUE) {
[10:32:49.577]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:49.577]                     {
[10:32:49.577]                       inherits <- base::inherits
[10:32:49.577]                       invokeRestart <- base::invokeRestart
[10:32:49.577]                       is.null <- base::is.null
[10:32:49.577]                       muffled <- FALSE
[10:32:49.577]                       if (inherits(cond, "message")) {
[10:32:49.577]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:49.577]                         if (muffled) 
[10:32:49.577]                           invokeRestart("muffleMessage")
[10:32:49.577]                       }
[10:32:49.577]                       else if (inherits(cond, "warning")) {
[10:32:49.577]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:49.577]                         if (muffled) 
[10:32:49.577]                           invokeRestart("muffleWarning")
[10:32:49.577]                       }
[10:32:49.577]                       else if (inherits(cond, "condition")) {
[10:32:49.577]                         if (!is.null(pattern)) {
[10:32:49.577]                           computeRestarts <- base::computeRestarts
[10:32:49.577]                           grepl <- base::grepl
[10:32:49.577]                           restarts <- computeRestarts(cond)
[10:32:49.577]                           for (restart in restarts) {
[10:32:49.577]                             name <- restart$name
[10:32:49.577]                             if (is.null(name)) 
[10:32:49.577]                               next
[10:32:49.577]                             if (!grepl(pattern, name)) 
[10:32:49.577]                               next
[10:32:49.577]                             invokeRestart(restart)
[10:32:49.577]                             muffled <- TRUE
[10:32:49.577]                             break
[10:32:49.577]                           }
[10:32:49.577]                         }
[10:32:49.577]                       }
[10:32:49.577]                       invisible(muffled)
[10:32:49.577]                     }
[10:32:49.577]                     muffleCondition(cond, pattern = "^muffle")
[10:32:49.577]                   }
[10:32:49.577]                 }
[10:32:49.577]             }
[10:32:49.577]         }))
[10:32:49.577]     }, error = function(ex) {
[10:32:49.577]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:49.577]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:49.577]                 ...future.rng), started = ...future.startTime, 
[10:32:49.577]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:49.577]             version = "1.8"), class = "FutureResult")
[10:32:49.577]     }, finally = {
[10:32:49.577]         if (!identical(...future.workdir, getwd())) 
[10:32:49.577]             setwd(...future.workdir)
[10:32:49.577]         {
[10:32:49.577]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:49.577]                 ...future.oldOptions$nwarnings <- NULL
[10:32:49.577]             }
[10:32:49.577]             base::options(...future.oldOptions)
[10:32:49.577]             if (.Platform$OS.type == "windows") {
[10:32:49.577]                 old_names <- names(...future.oldEnvVars)
[10:32:49.577]                 envs <- base::Sys.getenv()
[10:32:49.577]                 names <- names(envs)
[10:32:49.577]                 common <- intersect(names, old_names)
[10:32:49.577]                 added <- setdiff(names, old_names)
[10:32:49.577]                 removed <- setdiff(old_names, names)
[10:32:49.577]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:49.577]                   envs[common]]
[10:32:49.577]                 NAMES <- toupper(changed)
[10:32:49.577]                 args <- list()
[10:32:49.577]                 for (kk in seq_along(NAMES)) {
[10:32:49.577]                   name <- changed[[kk]]
[10:32:49.577]                   NAME <- NAMES[[kk]]
[10:32:49.577]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:49.577]                     next
[10:32:49.577]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:49.577]                 }
[10:32:49.577]                 NAMES <- toupper(added)
[10:32:49.577]                 for (kk in seq_along(NAMES)) {
[10:32:49.577]                   name <- added[[kk]]
[10:32:49.577]                   NAME <- NAMES[[kk]]
[10:32:49.577]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:49.577]                     next
[10:32:49.577]                   args[[name]] <- ""
[10:32:49.577]                 }
[10:32:49.577]                 NAMES <- toupper(removed)
[10:32:49.577]                 for (kk in seq_along(NAMES)) {
[10:32:49.577]                   name <- removed[[kk]]
[10:32:49.577]                   NAME <- NAMES[[kk]]
[10:32:49.577]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:49.577]                     next
[10:32:49.577]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:49.577]                 }
[10:32:49.577]                 if (length(args) > 0) 
[10:32:49.577]                   base::do.call(base::Sys.setenv, args = args)
[10:32:49.577]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:49.577]             }
[10:32:49.577]             else {
[10:32:49.577]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:49.577]             }
[10:32:49.577]             {
[10:32:49.577]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:49.577]                   0L) {
[10:32:49.577]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:49.577]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:49.577]                   base::options(opts)
[10:32:49.577]                 }
[10:32:49.577]                 {
[10:32:49.577]                   {
[10:32:49.577]                     NULL
[10:32:49.577]                     RNGkind("Mersenne-Twister")
[10:32:49.577]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:49.577]                       inherits = FALSE)
[10:32:49.577]                   }
[10:32:49.577]                   options(future.plan = NULL)
[10:32:49.577]                   if (is.na(NA_character_)) 
[10:32:49.577]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:49.577]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:49.577]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:49.577]                     .init = FALSE)
[10:32:49.577]                 }
[10:32:49.577]             }
[10:32:49.577]         }
[10:32:49.577]     })
[10:32:49.577]     if (TRUE) {
[10:32:49.577]         base::sink(type = "output", split = FALSE)
[10:32:49.577]         if (TRUE) {
[10:32:49.577]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:49.577]         }
[10:32:49.577]         else {
[10:32:49.577]             ...future.result["stdout"] <- base::list(NULL)
[10:32:49.577]         }
[10:32:49.577]         base::close(...future.stdout)
[10:32:49.577]         ...future.stdout <- NULL
[10:32:49.577]     }
[10:32:49.577]     ...future.result$conditions <- ...future.conditions
[10:32:49.577]     ...future.result$finished <- base::Sys.time()
[10:32:49.577]     ...future.result
[10:32:49.577] }
[10:32:49.578] plan(): Setting new future strategy stack:
[10:32:49.579] List of future strategies:
[10:32:49.579] 1. sequential:
[10:32:49.579]    - args: function (..., envir = parent.frame())
[10:32:49.579]    - tweaked: FALSE
[10:32:49.579]    - call: NULL
[10:32:49.579] plan(): nbrOfWorkers() = 1
[10:32:49.580] plan(): Setting new future strategy stack:
[10:32:49.580] List of future strategies:
[10:32:49.580] 1. sequential:
[10:32:49.580]    - args: function (..., envir = parent.frame())
[10:32:49.580]    - tweaked: FALSE
[10:32:49.580]    - call: future::plan("sequential")
[10:32:49.580] plan(): nbrOfWorkers() = 1
[10:32:49.580] SequentialFuture started (and completed)
[10:32:49.580] - Launch lazy future ... done
[10:32:49.580] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: b5c79e2e-d417-96d6-5eee-2708373bb9f9
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: b5c79e2e-d417-96d6-5eee-2708373bb9f9
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('rscript', 'remove') ...
*** FutureRegistry('rscript', 'list') ...
list()
*** FutureRegistry('rscript', 'add') ...
[10:32:49.582] getGlobalsAndPackages() ...
[10:32:49.582] Searching for globals...
[10:32:49.582] - globals found: [1] ‘{’
[10:32:49.582] Searching for globals ... DONE
[10:32:49.582] Resolving globals: FALSE
[10:32:49.583] 
[10:32:49.583] 
[10:32:49.583] getGlobalsAndPackages() ... DONE
[10:32:49.583] run() for ‘Future’ ...
[10:32:49.583] - state: ‘created’
[10:32:49.583] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:49.583] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:49.584] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:49.584]   - Field: ‘label’
[10:32:49.584]   - Field: ‘local’
[10:32:49.584]   - Field: ‘owner’
[10:32:49.584]   - Field: ‘envir’
[10:32:49.584]   - Field: ‘packages’
[10:32:49.584]   - Field: ‘gc’
[10:32:49.584]   - Field: ‘conditions’
[10:32:49.584]   - Field: ‘expr’
[10:32:49.584]   - Field: ‘uuid’
[10:32:49.584]   - Field: ‘seed’
[10:32:49.584]   - Field: ‘version’
[10:32:49.585]   - Field: ‘result’
[10:32:49.585]   - Field: ‘asynchronous’
[10:32:49.585]   - Field: ‘calls’
[10:32:49.585]   - Field: ‘globals’
[10:32:49.585]   - Field: ‘stdout’
[10:32:49.585]   - Field: ‘earlySignal’
[10:32:49.585]   - Field: ‘lazy’
[10:32:49.585]   - Field: ‘state’
[10:32:49.585] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:49.585] - Launch lazy future ...
[10:32:49.586] Packages needed by the future expression (n = 0): <none>
[10:32:49.586] Packages needed by future strategies (n = 0): <none>
[10:32:49.586] {
[10:32:49.586]     {
[10:32:49.586]         {
[10:32:49.586]             ...future.startTime <- base::Sys.time()
[10:32:49.586]             {
[10:32:49.586]                 {
[10:32:49.586]                   {
[10:32:49.586]                     base::local({
[10:32:49.586]                       has_future <- base::requireNamespace("future", 
[10:32:49.586]                         quietly = TRUE)
[10:32:49.586]                       if (has_future) {
[10:32:49.586]                         ns <- base::getNamespace("future")
[10:32:49.586]                         version <- ns[[".package"]][["version"]]
[10:32:49.586]                         if (is.null(version)) 
[10:32:49.586]                           version <- utils::packageVersion("future")
[10:32:49.586]                       }
[10:32:49.586]                       else {
[10:32:49.586]                         version <- NULL
[10:32:49.586]                       }
[10:32:49.586]                       if (!has_future || version < "1.8.0") {
[10:32:49.586]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:49.586]                           "", base::R.version$version.string), 
[10:32:49.586]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:49.586]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:49.586]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:49.586]                             "release", "version")], collapse = " "), 
[10:32:49.586]                           hostname = base::Sys.info()[["nodename"]])
[10:32:49.586]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:49.586]                           info)
[10:32:49.586]                         info <- base::paste(info, collapse = "; ")
[10:32:49.586]                         if (!has_future) {
[10:32:49.586]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:49.586]                             info)
[10:32:49.586]                         }
[10:32:49.586]                         else {
[10:32:49.586]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:49.586]                             info, version)
[10:32:49.586]                         }
[10:32:49.586]                         base::stop(msg)
[10:32:49.586]                       }
[10:32:49.586]                     })
[10:32:49.586]                   }
[10:32:49.586]                   ...future.strategy.old <- future::plan("list")
[10:32:49.586]                   options(future.plan = NULL)
[10:32:49.586]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:49.586]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:49.586]                 }
[10:32:49.586]                 ...future.workdir <- getwd()
[10:32:49.586]             }
[10:32:49.586]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:49.586]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:49.586]         }
[10:32:49.586]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:49.586]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:49.586]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:49.586]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:49.586]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:49.586]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:49.586]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:49.586]             base::names(...future.oldOptions))
[10:32:49.586]     }
[10:32:49.586]     if (FALSE) {
[10:32:49.586]     }
[10:32:49.586]     else {
[10:32:49.586]         if (TRUE) {
[10:32:49.586]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:49.586]                 open = "w")
[10:32:49.586]         }
[10:32:49.586]         else {
[10:32:49.586]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:49.586]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:49.586]         }
[10:32:49.586]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:49.586]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:49.586]             base::sink(type = "output", split = FALSE)
[10:32:49.586]             base::close(...future.stdout)
[10:32:49.586]         }, add = TRUE)
[10:32:49.586]     }
[10:32:49.586]     ...future.frame <- base::sys.nframe()
[10:32:49.586]     ...future.conditions <- base::list()
[10:32:49.586]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:49.586]     if (FALSE) {
[10:32:49.586]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:49.586]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:49.586]     }
[10:32:49.586]     ...future.result <- base::tryCatch({
[10:32:49.586]         base::withCallingHandlers({
[10:32:49.586]             ...future.value <- base::withVisible(base::local({
[10:32:49.586]                 2
[10:32:49.586]             }))
[10:32:49.586]             future::FutureResult(value = ...future.value$value, 
[10:32:49.586]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:49.586]                   ...future.rng), globalenv = if (FALSE) 
[10:32:49.586]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:49.586]                     ...future.globalenv.names))
[10:32:49.586]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:49.586]         }, condition = base::local({
[10:32:49.586]             c <- base::c
[10:32:49.586]             inherits <- base::inherits
[10:32:49.586]             invokeRestart <- base::invokeRestart
[10:32:49.586]             length <- base::length
[10:32:49.586]             list <- base::list
[10:32:49.586]             seq.int <- base::seq.int
[10:32:49.586]             signalCondition <- base::signalCondition
[10:32:49.586]             sys.calls <- base::sys.calls
[10:32:49.586]             `[[` <- base::`[[`
[10:32:49.586]             `+` <- base::`+`
[10:32:49.586]             `<<-` <- base::`<<-`
[10:32:49.586]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:49.586]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:49.586]                   3L)]
[10:32:49.586]             }
[10:32:49.586]             function(cond) {
[10:32:49.586]                 is_error <- inherits(cond, "error")
[10:32:49.586]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:49.586]                   NULL)
[10:32:49.586]                 if (is_error) {
[10:32:49.586]                   sessionInformation <- function() {
[10:32:49.586]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:49.586]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:49.586]                       search = base::search(), system = base::Sys.info())
[10:32:49.586]                   }
[10:32:49.586]                   ...future.conditions[[length(...future.conditions) + 
[10:32:49.586]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:49.586]                     cond$call), session = sessionInformation(), 
[10:32:49.586]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:49.586]                   signalCondition(cond)
[10:32:49.586]                 }
[10:32:49.586]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:49.586]                 "immediateCondition"))) {
[10:32:49.586]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:49.586]                   ...future.conditions[[length(...future.conditions) + 
[10:32:49.586]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:49.586]                   if (TRUE && !signal) {
[10:32:49.586]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:49.586]                     {
[10:32:49.586]                       inherits <- base::inherits
[10:32:49.586]                       invokeRestart <- base::invokeRestart
[10:32:49.586]                       is.null <- base::is.null
[10:32:49.586]                       muffled <- FALSE
[10:32:49.586]                       if (inherits(cond, "message")) {
[10:32:49.586]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:49.586]                         if (muffled) 
[10:32:49.586]                           invokeRestart("muffleMessage")
[10:32:49.586]                       }
[10:32:49.586]                       else if (inherits(cond, "warning")) {
[10:32:49.586]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:49.586]                         if (muffled) 
[10:32:49.586]                           invokeRestart("muffleWarning")
[10:32:49.586]                       }
[10:32:49.586]                       else if (inherits(cond, "condition")) {
[10:32:49.586]                         if (!is.null(pattern)) {
[10:32:49.586]                           computeRestarts <- base::computeRestarts
[10:32:49.586]                           grepl <- base::grepl
[10:32:49.586]                           restarts <- computeRestarts(cond)
[10:32:49.586]                           for (restart in restarts) {
[10:32:49.586]                             name <- restart$name
[10:32:49.586]                             if (is.null(name)) 
[10:32:49.586]                               next
[10:32:49.586]                             if (!grepl(pattern, name)) 
[10:32:49.586]                               next
[10:32:49.586]                             invokeRestart(restart)
[10:32:49.586]                             muffled <- TRUE
[10:32:49.586]                             break
[10:32:49.586]                           }
[10:32:49.586]                         }
[10:32:49.586]                       }
[10:32:49.586]                       invisible(muffled)
[10:32:49.586]                     }
[10:32:49.586]                     muffleCondition(cond, pattern = "^muffle")
[10:32:49.586]                   }
[10:32:49.586]                 }
[10:32:49.586]                 else {
[10:32:49.586]                   if (TRUE) {
[10:32:49.586]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:49.586]                     {
[10:32:49.586]                       inherits <- base::inherits
[10:32:49.586]                       invokeRestart <- base::invokeRestart
[10:32:49.586]                       is.null <- base::is.null
[10:32:49.586]                       muffled <- FALSE
[10:32:49.586]                       if (inherits(cond, "message")) {
[10:32:49.586]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:49.586]                         if (muffled) 
[10:32:49.586]                           invokeRestart("muffleMessage")
[10:32:49.586]                       }
[10:32:49.586]                       else if (inherits(cond, "warning")) {
[10:32:49.586]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:49.586]                         if (muffled) 
[10:32:49.586]                           invokeRestart("muffleWarning")
[10:32:49.586]                       }
[10:32:49.586]                       else if (inherits(cond, "condition")) {
[10:32:49.586]                         if (!is.null(pattern)) {
[10:32:49.586]                           computeRestarts <- base::computeRestarts
[10:32:49.586]                           grepl <- base::grepl
[10:32:49.586]                           restarts <- computeRestarts(cond)
[10:32:49.586]                           for (restart in restarts) {
[10:32:49.586]                             name <- restart$name
[10:32:49.586]                             if (is.null(name)) 
[10:32:49.586]                               next
[10:32:49.586]                             if (!grepl(pattern, name)) 
[10:32:49.586]                               next
[10:32:49.586]                             invokeRestart(restart)
[10:32:49.586]                             muffled <- TRUE
[10:32:49.586]                             break
[10:32:49.586]                           }
[10:32:49.586]                         }
[10:32:49.586]                       }
[10:32:49.586]                       invisible(muffled)
[10:32:49.586]                     }
[10:32:49.586]                     muffleCondition(cond, pattern = "^muffle")
[10:32:49.586]                   }
[10:32:49.586]                 }
[10:32:49.586]             }
[10:32:49.586]         }))
[10:32:49.586]     }, error = function(ex) {
[10:32:49.586]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:49.586]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:49.586]                 ...future.rng), started = ...future.startTime, 
[10:32:49.586]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:49.586]             version = "1.8"), class = "FutureResult")
[10:32:49.586]     }, finally = {
[10:32:49.586]         if (!identical(...future.workdir, getwd())) 
[10:32:49.586]             setwd(...future.workdir)
[10:32:49.586]         {
[10:32:49.586]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:49.586]                 ...future.oldOptions$nwarnings <- NULL
[10:32:49.586]             }
[10:32:49.586]             base::options(...future.oldOptions)
[10:32:49.586]             if (.Platform$OS.type == "windows") {
[10:32:49.586]                 old_names <- names(...future.oldEnvVars)
[10:32:49.586]                 envs <- base::Sys.getenv()
[10:32:49.586]                 names <- names(envs)
[10:32:49.586]                 common <- intersect(names, old_names)
[10:32:49.586]                 added <- setdiff(names, old_names)
[10:32:49.586]                 removed <- setdiff(old_names, names)
[10:32:49.586]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:49.586]                   envs[common]]
[10:32:49.586]                 NAMES <- toupper(changed)
[10:32:49.586]                 args <- list()
[10:32:49.586]                 for (kk in seq_along(NAMES)) {
[10:32:49.586]                   name <- changed[[kk]]
[10:32:49.586]                   NAME <- NAMES[[kk]]
[10:32:49.586]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:49.586]                     next
[10:32:49.586]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:49.586]                 }
[10:32:49.586]                 NAMES <- toupper(added)
[10:32:49.586]                 for (kk in seq_along(NAMES)) {
[10:32:49.586]                   name <- added[[kk]]
[10:32:49.586]                   NAME <- NAMES[[kk]]
[10:32:49.586]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:49.586]                     next
[10:32:49.586]                   args[[name]] <- ""
[10:32:49.586]                 }
[10:32:49.586]                 NAMES <- toupper(removed)
[10:32:49.586]                 for (kk in seq_along(NAMES)) {
[10:32:49.586]                   name <- removed[[kk]]
[10:32:49.586]                   NAME <- NAMES[[kk]]
[10:32:49.586]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:49.586]                     next
[10:32:49.586]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:49.586]                 }
[10:32:49.586]                 if (length(args) > 0) 
[10:32:49.586]                   base::do.call(base::Sys.setenv, args = args)
[10:32:49.586]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:49.586]             }
[10:32:49.586]             else {
[10:32:49.586]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:49.586]             }
[10:32:49.586]             {
[10:32:49.586]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:49.586]                   0L) {
[10:32:49.586]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:49.586]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:49.586]                   base::options(opts)
[10:32:49.586]                 }
[10:32:49.586]                 {
[10:32:49.586]                   {
[10:32:49.586]                     NULL
[10:32:49.586]                     RNGkind("Mersenne-Twister")
[10:32:49.586]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:49.586]                       inherits = FALSE)
[10:32:49.586]                   }
[10:32:49.586]                   options(future.plan = NULL)
[10:32:49.586]                   if (is.na(NA_character_)) 
[10:32:49.586]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:49.586]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:49.586]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:49.586]                     .init = FALSE)
[10:32:49.586]                 }
[10:32:49.586]             }
[10:32:49.586]         }
[10:32:49.586]     })
[10:32:49.586]     if (TRUE) {
[10:32:49.586]         base::sink(type = "output", split = FALSE)
[10:32:49.586]         if (TRUE) {
[10:32:49.586]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:49.586]         }
[10:32:49.586]         else {
[10:32:49.586]             ...future.result["stdout"] <- base::list(NULL)
[10:32:49.586]         }
[10:32:49.586]         base::close(...future.stdout)
[10:32:49.586]         ...future.stdout <- NULL
[10:32:49.586]     }
[10:32:49.586]     ...future.result$conditions <- ...future.conditions
[10:32:49.586]     ...future.result$finished <- base::Sys.time()
[10:32:49.586]     ...future.result
[10:32:49.586] }
[10:32:49.588] plan(): Setting new future strategy stack:
[10:32:49.588] List of future strategies:
[10:32:49.588] 1. sequential:
[10:32:49.588]    - args: function (..., envir = parent.frame())
[10:32:49.588]    - tweaked: FALSE
[10:32:49.588]    - call: NULL
[10:32:49.588] plan(): nbrOfWorkers() = 1
[10:32:49.589] plan(): Setting new future strategy stack:
[10:32:49.589] List of future strategies:
[10:32:49.589] 1. sequential:
[10:32:49.589]    - args: function (..., envir = parent.frame())
[10:32:49.589]    - tweaked: FALSE
[10:32:49.589]    - call: future::plan("sequential")
[10:32:49.589] plan(): nbrOfWorkers() = 1
[10:32:49.589] SequentialFuture started (and completed)
[10:32:49.589] - Launch lazy future ... done
[10:32:49.590] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: b5c79e2e-d417-96d6-5eee-2708373bb9f9
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: b5c79e2e-d417-96d6-5eee-2708373bb9f9
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('rscript', 'collect-first') ...
[10:32:49.598] resolved() for ‘SequentialFuture’ ...
[10:32:49.598] - state: ‘finished’
[10:32:49.598] - run: FALSE
[10:32:49.598] - result: ‘FutureResult’
[10:32:49.598] resolved() for ‘SequentialFuture’ ... done
list()
*** FutureRegistry('rscript', 'add') ...
[10:32:49.598] getGlobalsAndPackages() ...
[10:32:49.599] Searching for globals...
[10:32:49.600] - globals found: [1] ‘{’
[10:32:49.600] Searching for globals ... DONE
[10:32:49.600] Resolving globals: FALSE
[10:32:49.601] 
[10:32:49.601] 
[10:32:49.601] getGlobalsAndPackages() ... DONE
[10:32:49.601] run() for ‘Future’ ...
[10:32:49.601] - state: ‘created’
[10:32:49.601] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:49.601] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:49.602] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:49.602]   - Field: ‘label’
[10:32:49.602]   - Field: ‘local’
[10:32:49.602]   - Field: ‘owner’
[10:32:49.602]   - Field: ‘envir’
[10:32:49.602]   - Field: ‘packages’
[10:32:49.602]   - Field: ‘gc’
[10:32:49.602]   - Field: ‘conditions’
[10:32:49.602]   - Field: ‘expr’
[10:32:49.602]   - Field: ‘uuid’
[10:32:49.602]   - Field: ‘seed’
[10:32:49.603]   - Field: ‘version’
[10:32:49.603]   - Field: ‘result’
[10:32:49.603]   - Field: ‘asynchronous’
[10:32:49.603]   - Field: ‘calls’
[10:32:49.603]   - Field: ‘globals’
[10:32:49.603]   - Field: ‘stdout’
[10:32:49.603]   - Field: ‘earlySignal’
[10:32:49.603]   - Field: ‘lazy’
[10:32:49.603]   - Field: ‘state’
[10:32:49.603] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:49.603] - Launch lazy future ...
[10:32:49.604] Packages needed by the future expression (n = 0): <none>
[10:32:49.604] Packages needed by future strategies (n = 0): <none>
[10:32:49.604] {
[10:32:49.604]     {
[10:32:49.604]         {
[10:32:49.604]             ...future.startTime <- base::Sys.time()
[10:32:49.604]             {
[10:32:49.604]                 {
[10:32:49.604]                   {
[10:32:49.604]                     base::local({
[10:32:49.604]                       has_future <- base::requireNamespace("future", 
[10:32:49.604]                         quietly = TRUE)
[10:32:49.604]                       if (has_future) {
[10:32:49.604]                         ns <- base::getNamespace("future")
[10:32:49.604]                         version <- ns[[".package"]][["version"]]
[10:32:49.604]                         if (is.null(version)) 
[10:32:49.604]                           version <- utils::packageVersion("future")
[10:32:49.604]                       }
[10:32:49.604]                       else {
[10:32:49.604]                         version <- NULL
[10:32:49.604]                       }
[10:32:49.604]                       if (!has_future || version < "1.8.0") {
[10:32:49.604]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:49.604]                           "", base::R.version$version.string), 
[10:32:49.604]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:49.604]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:49.604]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:49.604]                             "release", "version")], collapse = " "), 
[10:32:49.604]                           hostname = base::Sys.info()[["nodename"]])
[10:32:49.604]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:49.604]                           info)
[10:32:49.604]                         info <- base::paste(info, collapse = "; ")
[10:32:49.604]                         if (!has_future) {
[10:32:49.604]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:49.604]                             info)
[10:32:49.604]                         }
[10:32:49.604]                         else {
[10:32:49.604]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:49.604]                             info, version)
[10:32:49.604]                         }
[10:32:49.604]                         base::stop(msg)
[10:32:49.604]                       }
[10:32:49.604]                     })
[10:32:49.604]                   }
[10:32:49.604]                   ...future.strategy.old <- future::plan("list")
[10:32:49.604]                   options(future.plan = NULL)
[10:32:49.604]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:49.604]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:49.604]                 }
[10:32:49.604]                 ...future.workdir <- getwd()
[10:32:49.604]             }
[10:32:49.604]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:49.604]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:49.604]         }
[10:32:49.604]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:49.604]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:49.604]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:49.604]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:49.604]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:49.604]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:49.604]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:49.604]             base::names(...future.oldOptions))
[10:32:49.604]     }
[10:32:49.604]     if (FALSE) {
[10:32:49.604]     }
[10:32:49.604]     else {
[10:32:49.604]         if (TRUE) {
[10:32:49.604]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:49.604]                 open = "w")
[10:32:49.604]         }
[10:32:49.604]         else {
[10:32:49.604]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:49.604]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:49.604]         }
[10:32:49.604]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:49.604]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:49.604]             base::sink(type = "output", split = FALSE)
[10:32:49.604]             base::close(...future.stdout)
[10:32:49.604]         }, add = TRUE)
[10:32:49.604]     }
[10:32:49.604]     ...future.frame <- base::sys.nframe()
[10:32:49.604]     ...future.conditions <- base::list()
[10:32:49.604]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:49.604]     if (FALSE) {
[10:32:49.604]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:49.604]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:49.604]     }
[10:32:49.604]     ...future.result <- base::tryCatch({
[10:32:49.604]         base::withCallingHandlers({
[10:32:49.604]             ...future.value <- base::withVisible(base::local({
[10:32:49.604]                 2
[10:32:49.604]             }))
[10:32:49.604]             future::FutureResult(value = ...future.value$value, 
[10:32:49.604]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:49.604]                   ...future.rng), globalenv = if (FALSE) 
[10:32:49.604]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:49.604]                     ...future.globalenv.names))
[10:32:49.604]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:49.604]         }, condition = base::local({
[10:32:49.604]             c <- base::c
[10:32:49.604]             inherits <- base::inherits
[10:32:49.604]             invokeRestart <- base::invokeRestart
[10:32:49.604]             length <- base::length
[10:32:49.604]             list <- base::list
[10:32:49.604]             seq.int <- base::seq.int
[10:32:49.604]             signalCondition <- base::signalCondition
[10:32:49.604]             sys.calls <- base::sys.calls
[10:32:49.604]             `[[` <- base::`[[`
[10:32:49.604]             `+` <- base::`+`
[10:32:49.604]             `<<-` <- base::`<<-`
[10:32:49.604]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:49.604]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:49.604]                   3L)]
[10:32:49.604]             }
[10:32:49.604]             function(cond) {
[10:32:49.604]                 is_error <- inherits(cond, "error")
[10:32:49.604]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:49.604]                   NULL)
[10:32:49.604]                 if (is_error) {
[10:32:49.604]                   sessionInformation <- function() {
[10:32:49.604]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:49.604]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:49.604]                       search = base::search(), system = base::Sys.info())
[10:32:49.604]                   }
[10:32:49.604]                   ...future.conditions[[length(...future.conditions) + 
[10:32:49.604]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:49.604]                     cond$call), session = sessionInformation(), 
[10:32:49.604]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:49.604]                   signalCondition(cond)
[10:32:49.604]                 }
[10:32:49.604]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:49.604]                 "immediateCondition"))) {
[10:32:49.604]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:49.604]                   ...future.conditions[[length(...future.conditions) + 
[10:32:49.604]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:49.604]                   if (TRUE && !signal) {
[10:32:49.604]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:49.604]                     {
[10:32:49.604]                       inherits <- base::inherits
[10:32:49.604]                       invokeRestart <- base::invokeRestart
[10:32:49.604]                       is.null <- base::is.null
[10:32:49.604]                       muffled <- FALSE
[10:32:49.604]                       if (inherits(cond, "message")) {
[10:32:49.604]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:49.604]                         if (muffled) 
[10:32:49.604]                           invokeRestart("muffleMessage")
[10:32:49.604]                       }
[10:32:49.604]                       else if (inherits(cond, "warning")) {
[10:32:49.604]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:49.604]                         if (muffled) 
[10:32:49.604]                           invokeRestart("muffleWarning")
[10:32:49.604]                       }
[10:32:49.604]                       else if (inherits(cond, "condition")) {
[10:32:49.604]                         if (!is.null(pattern)) {
[10:32:49.604]                           computeRestarts <- base::computeRestarts
[10:32:49.604]                           grepl <- base::grepl
[10:32:49.604]                           restarts <- computeRestarts(cond)
[10:32:49.604]                           for (restart in restarts) {
[10:32:49.604]                             name <- restart$name
[10:32:49.604]                             if (is.null(name)) 
[10:32:49.604]                               next
[10:32:49.604]                             if (!grepl(pattern, name)) 
[10:32:49.604]                               next
[10:32:49.604]                             invokeRestart(restart)
[10:32:49.604]                             muffled <- TRUE
[10:32:49.604]                             break
[10:32:49.604]                           }
[10:32:49.604]                         }
[10:32:49.604]                       }
[10:32:49.604]                       invisible(muffled)
[10:32:49.604]                     }
[10:32:49.604]                     muffleCondition(cond, pattern = "^muffle")
[10:32:49.604]                   }
[10:32:49.604]                 }
[10:32:49.604]                 else {
[10:32:49.604]                   if (TRUE) {
[10:32:49.604]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:49.604]                     {
[10:32:49.604]                       inherits <- base::inherits
[10:32:49.604]                       invokeRestart <- base::invokeRestart
[10:32:49.604]                       is.null <- base::is.null
[10:32:49.604]                       muffled <- FALSE
[10:32:49.604]                       if (inherits(cond, "message")) {
[10:32:49.604]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:49.604]                         if (muffled) 
[10:32:49.604]                           invokeRestart("muffleMessage")
[10:32:49.604]                       }
[10:32:49.604]                       else if (inherits(cond, "warning")) {
[10:32:49.604]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:49.604]                         if (muffled) 
[10:32:49.604]                           invokeRestart("muffleWarning")
[10:32:49.604]                       }
[10:32:49.604]                       else if (inherits(cond, "condition")) {
[10:32:49.604]                         if (!is.null(pattern)) {
[10:32:49.604]                           computeRestarts <- base::computeRestarts
[10:32:49.604]                           grepl <- base::grepl
[10:32:49.604]                           restarts <- computeRestarts(cond)
[10:32:49.604]                           for (restart in restarts) {
[10:32:49.604]                             name <- restart$name
[10:32:49.604]                             if (is.null(name)) 
[10:32:49.604]                               next
[10:32:49.604]                             if (!grepl(pattern, name)) 
[10:32:49.604]                               next
[10:32:49.604]                             invokeRestart(restart)
[10:32:49.604]                             muffled <- TRUE
[10:32:49.604]                             break
[10:32:49.604]                           }
[10:32:49.604]                         }
[10:32:49.604]                       }
[10:32:49.604]                       invisible(muffled)
[10:32:49.604]                     }
[10:32:49.604]                     muffleCondition(cond, pattern = "^muffle")
[10:32:49.604]                   }
[10:32:49.604]                 }
[10:32:49.604]             }
[10:32:49.604]         }))
[10:32:49.604]     }, error = function(ex) {
[10:32:49.604]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:49.604]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:49.604]                 ...future.rng), started = ...future.startTime, 
[10:32:49.604]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:49.604]             version = "1.8"), class = "FutureResult")
[10:32:49.604]     }, finally = {
[10:32:49.604]         if (!identical(...future.workdir, getwd())) 
[10:32:49.604]             setwd(...future.workdir)
[10:32:49.604]         {
[10:32:49.604]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:49.604]                 ...future.oldOptions$nwarnings <- NULL
[10:32:49.604]             }
[10:32:49.604]             base::options(...future.oldOptions)
[10:32:49.604]             if (.Platform$OS.type == "windows") {
[10:32:49.604]                 old_names <- names(...future.oldEnvVars)
[10:32:49.604]                 envs <- base::Sys.getenv()
[10:32:49.604]                 names <- names(envs)
[10:32:49.604]                 common <- intersect(names, old_names)
[10:32:49.604]                 added <- setdiff(names, old_names)
[10:32:49.604]                 removed <- setdiff(old_names, names)
[10:32:49.604]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:49.604]                   envs[common]]
[10:32:49.604]                 NAMES <- toupper(changed)
[10:32:49.604]                 args <- list()
[10:32:49.604]                 for (kk in seq_along(NAMES)) {
[10:32:49.604]                   name <- changed[[kk]]
[10:32:49.604]                   NAME <- NAMES[[kk]]
[10:32:49.604]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:49.604]                     next
[10:32:49.604]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:49.604]                 }
[10:32:49.604]                 NAMES <- toupper(added)
[10:32:49.604]                 for (kk in seq_along(NAMES)) {
[10:32:49.604]                   name <- added[[kk]]
[10:32:49.604]                   NAME <- NAMES[[kk]]
[10:32:49.604]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:49.604]                     next
[10:32:49.604]                   args[[name]] <- ""
[10:32:49.604]                 }
[10:32:49.604]                 NAMES <- toupper(removed)
[10:32:49.604]                 for (kk in seq_along(NAMES)) {
[10:32:49.604]                   name <- removed[[kk]]
[10:32:49.604]                   NAME <- NAMES[[kk]]
[10:32:49.604]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:49.604]                     next
[10:32:49.604]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:49.604]                 }
[10:32:49.604]                 if (length(args) > 0) 
[10:32:49.604]                   base::do.call(base::Sys.setenv, args = args)
[10:32:49.604]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:49.604]             }
[10:32:49.604]             else {
[10:32:49.604]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:49.604]             }
[10:32:49.604]             {
[10:32:49.604]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:49.604]                   0L) {
[10:32:49.604]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:49.604]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:49.604]                   base::options(opts)
[10:32:49.604]                 }
[10:32:49.604]                 {
[10:32:49.604]                   {
[10:32:49.604]                     NULL
[10:32:49.604]                     RNGkind("Mersenne-Twister")
[10:32:49.604]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:49.604]                       inherits = FALSE)
[10:32:49.604]                   }
[10:32:49.604]                   options(future.plan = NULL)
[10:32:49.604]                   if (is.na(NA_character_)) 
[10:32:49.604]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:49.604]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:49.604]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:49.604]                     .init = FALSE)
[10:32:49.604]                 }
[10:32:49.604]             }
[10:32:49.604]         }
[10:32:49.604]     })
[10:32:49.604]     if (TRUE) {
[10:32:49.604]         base::sink(type = "output", split = FALSE)
[10:32:49.604]         if (TRUE) {
[10:32:49.604]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:49.604]         }
[10:32:49.604]         else {
[10:32:49.604]             ...future.result["stdout"] <- base::list(NULL)
[10:32:49.604]         }
[10:32:49.604]         base::close(...future.stdout)
[10:32:49.604]         ...future.stdout <- NULL
[10:32:49.604]     }
[10:32:49.604]     ...future.result$conditions <- ...future.conditions
[10:32:49.604]     ...future.result$finished <- base::Sys.time()
[10:32:49.604]     ...future.result
[10:32:49.604] }
[10:32:49.606] plan(): Setting new future strategy stack:
[10:32:49.606] List of future strategies:
[10:32:49.606] 1. sequential:
[10:32:49.606]    - args: function (..., envir = parent.frame())
[10:32:49.606]    - tweaked: FALSE
[10:32:49.606]    - call: NULL
[10:32:49.606] plan(): nbrOfWorkers() = 1
[10:32:49.607] plan(): Setting new future strategy stack:
[10:32:49.607] List of future strategies:
[10:32:49.607] 1. sequential:
[10:32:49.607]    - args: function (..., envir = parent.frame())
[10:32:49.607]    - tweaked: FALSE
[10:32:49.607]    - call: future::plan("sequential")
[10:32:49.607] plan(): nbrOfWorkers() = 1
[10:32:49.607] SequentialFuture started (and completed)
[10:32:49.608] - Launch lazy future ... done
[10:32:49.608] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: b5c79e2e-d417-96d6-5eee-2708373bb9f9
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'reset') ...
*** FutureRegistry('rscript', 'list') ...
list()
> 
> 
> message("*** FutureRegistry() - exceptions ...")
*** FutureRegistry() - exceptions ...
> 
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> f <- future(1)
[10:32:49.608] getGlobalsAndPackages() ...
[10:32:49.609] Searching for globals...
[10:32:49.609] 
[10:32:49.609] Searching for globals ... DONE
[10:32:49.609] - globals: [0] <none>
[10:32:49.609] getGlobalsAndPackages() ... DONE
[10:32:49.609] run() for ‘Future’ ...
[10:32:49.609] - state: ‘created’
[10:32:49.610] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:49.610] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:49.610] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:49.610]   - Field: ‘label’
[10:32:49.610]   - Field: ‘local’
[10:32:49.610]   - Field: ‘owner’
[10:32:49.610]   - Field: ‘envir’
[10:32:49.610]   - Field: ‘packages’
[10:32:49.610]   - Field: ‘gc’
[10:32:49.611]   - Field: ‘conditions’
[10:32:49.611]   - Field: ‘expr’
[10:32:49.611]   - Field: ‘uuid’
[10:32:49.611]   - Field: ‘seed’
[10:32:49.611]   - Field: ‘version’
[10:32:49.611]   - Field: ‘result’
[10:32:49.611]   - Field: ‘asynchronous’
[10:32:49.611]   - Field: ‘calls’
[10:32:49.611]   - Field: ‘globals’
[10:32:49.611]   - Field: ‘stdout’
[10:32:49.611]   - Field: ‘earlySignal’
[10:32:49.611]   - Field: ‘lazy’
[10:32:49.612]   - Field: ‘state’
[10:32:49.612] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:49.612] - Launch lazy future ...
[10:32:49.612] Packages needed by the future expression (n = 0): <none>
[10:32:49.612] Packages needed by future strategies (n = 0): <none>
[10:32:49.612] {
[10:32:49.612]     {
[10:32:49.612]         {
[10:32:49.612]             ...future.startTime <- base::Sys.time()
[10:32:49.612]             {
[10:32:49.612]                 {
[10:32:49.612]                   {
[10:32:49.612]                     base::local({
[10:32:49.612]                       has_future <- base::requireNamespace("future", 
[10:32:49.612]                         quietly = TRUE)
[10:32:49.612]                       if (has_future) {
[10:32:49.612]                         ns <- base::getNamespace("future")
[10:32:49.612]                         version <- ns[[".package"]][["version"]]
[10:32:49.612]                         if (is.null(version)) 
[10:32:49.612]                           version <- utils::packageVersion("future")
[10:32:49.612]                       }
[10:32:49.612]                       else {
[10:32:49.612]                         version <- NULL
[10:32:49.612]                       }
[10:32:49.612]                       if (!has_future || version < "1.8.0") {
[10:32:49.612]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:49.612]                           "", base::R.version$version.string), 
[10:32:49.612]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:49.612]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:49.612]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:49.612]                             "release", "version")], collapse = " "), 
[10:32:49.612]                           hostname = base::Sys.info()[["nodename"]])
[10:32:49.612]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:49.612]                           info)
[10:32:49.612]                         info <- base::paste(info, collapse = "; ")
[10:32:49.612]                         if (!has_future) {
[10:32:49.612]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:49.612]                             info)
[10:32:49.612]                         }
[10:32:49.612]                         else {
[10:32:49.612]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:49.612]                             info, version)
[10:32:49.612]                         }
[10:32:49.612]                         base::stop(msg)
[10:32:49.612]                       }
[10:32:49.612]                     })
[10:32:49.612]                   }
[10:32:49.612]                   ...future.strategy.old <- future::plan("list")
[10:32:49.612]                   options(future.plan = NULL)
[10:32:49.612]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:49.612]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:49.612]                 }
[10:32:49.612]                 ...future.workdir <- getwd()
[10:32:49.612]             }
[10:32:49.612]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:49.612]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:49.612]         }
[10:32:49.612]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:49.612]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:49.612]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:49.612]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:49.612]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:49.612]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:49.612]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:49.612]             base::names(...future.oldOptions))
[10:32:49.612]     }
[10:32:49.612]     if (FALSE) {
[10:32:49.612]     }
[10:32:49.612]     else {
[10:32:49.612]         if (TRUE) {
[10:32:49.612]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:49.612]                 open = "w")
[10:32:49.612]         }
[10:32:49.612]         else {
[10:32:49.612]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:49.612]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:49.612]         }
[10:32:49.612]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:49.612]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:49.612]             base::sink(type = "output", split = FALSE)
[10:32:49.612]             base::close(...future.stdout)
[10:32:49.612]         }, add = TRUE)
[10:32:49.612]     }
[10:32:49.612]     ...future.frame <- base::sys.nframe()
[10:32:49.612]     ...future.conditions <- base::list()
[10:32:49.612]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:49.612]     if (FALSE) {
[10:32:49.612]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:49.612]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:49.612]     }
[10:32:49.612]     ...future.result <- base::tryCatch({
[10:32:49.612]         base::withCallingHandlers({
[10:32:49.612]             ...future.value <- base::withVisible(base::local(1))
[10:32:49.612]             future::FutureResult(value = ...future.value$value, 
[10:32:49.612]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:49.612]                   ...future.rng), globalenv = if (FALSE) 
[10:32:49.612]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:49.612]                     ...future.globalenv.names))
[10:32:49.612]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:49.612]         }, condition = base::local({
[10:32:49.612]             c <- base::c
[10:32:49.612]             inherits <- base::inherits
[10:32:49.612]             invokeRestart <- base::invokeRestart
[10:32:49.612]             length <- base::length
[10:32:49.612]             list <- base::list
[10:32:49.612]             seq.int <- base::seq.int
[10:32:49.612]             signalCondition <- base::signalCondition
[10:32:49.612]             sys.calls <- base::sys.calls
[10:32:49.612]             `[[` <- base::`[[`
[10:32:49.612]             `+` <- base::`+`
[10:32:49.612]             `<<-` <- base::`<<-`
[10:32:49.612]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:49.612]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:49.612]                   3L)]
[10:32:49.612]             }
[10:32:49.612]             function(cond) {
[10:32:49.612]                 is_error <- inherits(cond, "error")
[10:32:49.612]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:49.612]                   NULL)
[10:32:49.612]                 if (is_error) {
[10:32:49.612]                   sessionInformation <- function() {
[10:32:49.612]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:49.612]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:49.612]                       search = base::search(), system = base::Sys.info())
[10:32:49.612]                   }
[10:32:49.612]                   ...future.conditions[[length(...future.conditions) + 
[10:32:49.612]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:49.612]                     cond$call), session = sessionInformation(), 
[10:32:49.612]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:49.612]                   signalCondition(cond)
[10:32:49.612]                 }
[10:32:49.612]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:49.612]                 "immediateCondition"))) {
[10:32:49.612]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:49.612]                   ...future.conditions[[length(...future.conditions) + 
[10:32:49.612]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:49.612]                   if (TRUE && !signal) {
[10:32:49.612]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:49.612]                     {
[10:32:49.612]                       inherits <- base::inherits
[10:32:49.612]                       invokeRestart <- base::invokeRestart
[10:32:49.612]                       is.null <- base::is.null
[10:32:49.612]                       muffled <- FALSE
[10:32:49.612]                       if (inherits(cond, "message")) {
[10:32:49.612]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:49.612]                         if (muffled) 
[10:32:49.612]                           invokeRestart("muffleMessage")
[10:32:49.612]                       }
[10:32:49.612]                       else if (inherits(cond, "warning")) {
[10:32:49.612]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:49.612]                         if (muffled) 
[10:32:49.612]                           invokeRestart("muffleWarning")
[10:32:49.612]                       }
[10:32:49.612]                       else if (inherits(cond, "condition")) {
[10:32:49.612]                         if (!is.null(pattern)) {
[10:32:49.612]                           computeRestarts <- base::computeRestarts
[10:32:49.612]                           grepl <- base::grepl
[10:32:49.612]                           restarts <- computeRestarts(cond)
[10:32:49.612]                           for (restart in restarts) {
[10:32:49.612]                             name <- restart$name
[10:32:49.612]                             if (is.null(name)) 
[10:32:49.612]                               next
[10:32:49.612]                             if (!grepl(pattern, name)) 
[10:32:49.612]                               next
[10:32:49.612]                             invokeRestart(restart)
[10:32:49.612]                             muffled <- TRUE
[10:32:49.612]                             break
[10:32:49.612]                           }
[10:32:49.612]                         }
[10:32:49.612]                       }
[10:32:49.612]                       invisible(muffled)
[10:32:49.612]                     }
[10:32:49.612]                     muffleCondition(cond, pattern = "^muffle")
[10:32:49.612]                   }
[10:32:49.612]                 }
[10:32:49.612]                 else {
[10:32:49.612]                   if (TRUE) {
[10:32:49.612]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:49.612]                     {
[10:32:49.612]                       inherits <- base::inherits
[10:32:49.612]                       invokeRestart <- base::invokeRestart
[10:32:49.612]                       is.null <- base::is.null
[10:32:49.612]                       muffled <- FALSE
[10:32:49.612]                       if (inherits(cond, "message")) {
[10:32:49.612]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:49.612]                         if (muffled) 
[10:32:49.612]                           invokeRestart("muffleMessage")
[10:32:49.612]                       }
[10:32:49.612]                       else if (inherits(cond, "warning")) {
[10:32:49.612]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:49.612]                         if (muffled) 
[10:32:49.612]                           invokeRestart("muffleWarning")
[10:32:49.612]                       }
[10:32:49.612]                       else if (inherits(cond, "condition")) {
[10:32:49.612]                         if (!is.null(pattern)) {
[10:32:49.612]                           computeRestarts <- base::computeRestarts
[10:32:49.612]                           grepl <- base::grepl
[10:32:49.612]                           restarts <- computeRestarts(cond)
[10:32:49.612]                           for (restart in restarts) {
[10:32:49.612]                             name <- restart$name
[10:32:49.612]                             if (is.null(name)) 
[10:32:49.612]                               next
[10:32:49.612]                             if (!grepl(pattern, name)) 
[10:32:49.612]                               next
[10:32:49.612]                             invokeRestart(restart)
[10:32:49.612]                             muffled <- TRUE
[10:32:49.612]                             break
[10:32:49.612]                           }
[10:32:49.612]                         }
[10:32:49.612]                       }
[10:32:49.612]                       invisible(muffled)
[10:32:49.612]                     }
[10:32:49.612]                     muffleCondition(cond, pattern = "^muffle")
[10:32:49.612]                   }
[10:32:49.612]                 }
[10:32:49.612]             }
[10:32:49.612]         }))
[10:32:49.612]     }, error = function(ex) {
[10:32:49.612]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:49.612]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:49.612]                 ...future.rng), started = ...future.startTime, 
[10:32:49.612]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:49.612]             version = "1.8"), class = "FutureResult")
[10:32:49.612]     }, finally = {
[10:32:49.612]         if (!identical(...future.workdir, getwd())) 
[10:32:49.612]             setwd(...future.workdir)
[10:32:49.612]         {
[10:32:49.612]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:49.612]                 ...future.oldOptions$nwarnings <- NULL
[10:32:49.612]             }
[10:32:49.612]             base::options(...future.oldOptions)
[10:32:49.612]             if (.Platform$OS.type == "windows") {
[10:32:49.612]                 old_names <- names(...future.oldEnvVars)
[10:32:49.612]                 envs <- base::Sys.getenv()
[10:32:49.612]                 names <- names(envs)
[10:32:49.612]                 common <- intersect(names, old_names)
[10:32:49.612]                 added <- setdiff(names, old_names)
[10:32:49.612]                 removed <- setdiff(old_names, names)
[10:32:49.612]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:49.612]                   envs[common]]
[10:32:49.612]                 NAMES <- toupper(changed)
[10:32:49.612]                 args <- list()
[10:32:49.612]                 for (kk in seq_along(NAMES)) {
[10:32:49.612]                   name <- changed[[kk]]
[10:32:49.612]                   NAME <- NAMES[[kk]]
[10:32:49.612]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:49.612]                     next
[10:32:49.612]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:49.612]                 }
[10:32:49.612]                 NAMES <- toupper(added)
[10:32:49.612]                 for (kk in seq_along(NAMES)) {
[10:32:49.612]                   name <- added[[kk]]
[10:32:49.612]                   NAME <- NAMES[[kk]]
[10:32:49.612]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:49.612]                     next
[10:32:49.612]                   args[[name]] <- ""
[10:32:49.612]                 }
[10:32:49.612]                 NAMES <- toupper(removed)
[10:32:49.612]                 for (kk in seq_along(NAMES)) {
[10:32:49.612]                   name <- removed[[kk]]
[10:32:49.612]                   NAME <- NAMES[[kk]]
[10:32:49.612]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:49.612]                     next
[10:32:49.612]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:49.612]                 }
[10:32:49.612]                 if (length(args) > 0) 
[10:32:49.612]                   base::do.call(base::Sys.setenv, args = args)
[10:32:49.612]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:49.612]             }
[10:32:49.612]             else {
[10:32:49.612]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:49.612]             }
[10:32:49.612]             {
[10:32:49.612]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:49.612]                   0L) {
[10:32:49.612]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:49.612]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:49.612]                   base::options(opts)
[10:32:49.612]                 }
[10:32:49.612]                 {
[10:32:49.612]                   {
[10:32:49.612]                     NULL
[10:32:49.612]                     RNGkind("Mersenne-Twister")
[10:32:49.612]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:49.612]                       inherits = FALSE)
[10:32:49.612]                   }
[10:32:49.612]                   options(future.plan = NULL)
[10:32:49.612]                   if (is.na(NA_character_)) 
[10:32:49.612]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:49.612]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:49.612]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:49.612]                     .init = FALSE)
[10:32:49.612]                 }
[10:32:49.612]             }
[10:32:49.612]         }
[10:32:49.612]     })
[10:32:49.612]     if (TRUE) {
[10:32:49.612]         base::sink(type = "output", split = FALSE)
[10:32:49.612]         if (TRUE) {
[10:32:49.612]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:49.612]         }
[10:32:49.612]         else {
[10:32:49.612]             ...future.result["stdout"] <- base::list(NULL)
[10:32:49.612]         }
[10:32:49.612]         base::close(...future.stdout)
[10:32:49.612]         ...future.stdout <- NULL
[10:32:49.612]     }
[10:32:49.612]     ...future.result$conditions <- ...future.conditions
[10:32:49.612]     ...future.result$finished <- base::Sys.time()
[10:32:49.612]     ...future.result
[10:32:49.612] }
[10:32:49.614] plan(): Setting new future strategy stack:
[10:32:49.614] List of future strategies:
[10:32:49.614] 1. sequential:
[10:32:49.614]    - args: function (..., envir = parent.frame())
[10:32:49.614]    - tweaked: FALSE
[10:32:49.614]    - call: NULL
[10:32:49.614] plan(): nbrOfWorkers() = 1
[10:32:49.615] plan(): Setting new future strategy stack:
[10:32:49.615] List of future strategies:
[10:32:49.615] 1. sequential:
[10:32:49.615]    - args: function (..., envir = parent.frame())
[10:32:49.615]    - tweaked: FALSE
[10:32:49.615]    - call: future::plan("sequential")
[10:32:49.616] plan(): nbrOfWorkers() = 1
[10:32:49.616] SequentialFuture started (and completed)
[10:32:49.616] - Launch lazy future ... done
[10:32:49.616] run() for ‘SequentialFuture’ ... done
> FutureRegistry(where = "test", action = "add", future = f)
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 1
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: b5c79e2e-d417-96d6-5eee-2708373bb9f9
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 1)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "add", future = f), error = identity)
[10:32:49.617] ERROR: Cannot add to ‘test’ registry. SequentialFuture is already registered.
> stopifnot(inherits(res, "error"))
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 1)
> 
> 
> FutureRegistry(where = "test", action = "remove", future = f)
list()
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "remove", future = f), error = identity)
[10:32:49.617] ERROR: Cannot remove from ‘test’ registry. SequentialFuture not registered.
> stopifnot(inherits(res, "error"))
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> FutureRegistry(where = "test", action = "reset")
list()
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "<unknown>"), error = identity)
[10:32:49.617] INTERNAL ERROR: Unknown action to ‘test’ registry: <unknown>
> stopifnot(inherits(res, "error"))
> 
> message("*** FutureRegistry() - exceptions ... DONE")
*** FutureRegistry() - exceptions ... DONE
> 
> 
> message("*** FutureRegistry() ... DONE")
*** FutureRegistry() ... DONE
> 
> source("incl/end.R")
[10:32:49.618] plan(): Setting new future strategy stack:
[10:32:49.618] List of future strategies:
[10:32:49.618] 1. FutureStrategy:
[10:32:49.618]    - args: function (..., envir = parent.frame())
[10:32:49.618]    - tweaked: FALSE
[10:32:49.618]    - call: future::plan(oplan)
[10:32:49.629] plan(): nbrOfWorkers() = 1
> 
