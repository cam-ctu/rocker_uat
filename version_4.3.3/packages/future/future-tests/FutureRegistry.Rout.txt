
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:36:33.253] plan(): Setting new future strategy stack:
[13:36:33.254] List of future strategies:
[13:36:33.254] 1. sequential:
[13:36:33.254]    - args: function (..., envir = parent.frame())
[13:36:33.254]    - tweaked: FALSE
[13:36:33.254]    - call: future::plan("sequential")
[13:36:33.267] plan(): nbrOfWorkers() = 1
> 
> message("*** FutureRegistry() ...")
*** FutureRegistry() ...
> 
> for (where in c(sprintf("multicore-%s", future:::session_uuid()), "rscript")) {
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 1 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 1L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'remove') ...", where))
+   FutureRegistry(where, action = "remove", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 2 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 1L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'collect-first') ...", where))
+   FutureRegistry(where, action = "collect-first")
+ 
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) < 1L)
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 2 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'reset') ...", where))
+   FutureRegistry(where, action = "reset")
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ }
*** FutureRegistry('multicore-2b7a43dc-9265-21fb-cf19-3a7befd66592', 'list') ...
list()
*** FutureRegistry('multicore-2b7a43dc-9265-21fb-cf19-3a7befd66592', 'add') ...
[13:36:33.301] getGlobalsAndPackages() ...
[13:36:33.301] Searching for globals...
[13:36:33.305] - globals found: [1] ‘{’
[13:36:33.305] Searching for globals ... DONE
[13:36:33.305] Resolving globals: FALSE
[13:36:33.305] 
[13:36:33.306] 
[13:36:33.306] getGlobalsAndPackages() ... DONE
[13:36:33.306] run() for ‘Future’ ...
[13:36:33.306] - state: ‘created’
[13:36:33.307] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:33.307] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:33.307] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:33.307]   - Field: ‘label’
[13:36:33.307]   - Field: ‘local’
[13:36:33.307]   - Field: ‘owner’
[13:36:33.308]   - Field: ‘envir’
[13:36:33.308]   - Field: ‘packages’
[13:36:33.308]   - Field: ‘gc’
[13:36:33.308]   - Field: ‘conditions’
[13:36:33.308]   - Field: ‘expr’
[13:36:33.308]   - Field: ‘uuid’
[13:36:33.308]   - Field: ‘seed’
[13:36:33.308]   - Field: ‘version’
[13:36:33.308]   - Field: ‘result’
[13:36:33.308]   - Field: ‘asynchronous’
[13:36:33.308]   - Field: ‘calls’
[13:36:33.309]   - Field: ‘globals’
[13:36:33.309]   - Field: ‘stdout’
[13:36:33.309]   - Field: ‘earlySignal’
[13:36:33.309]   - Field: ‘lazy’
[13:36:33.309]   - Field: ‘state’
[13:36:33.309] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:33.309] - Launch lazy future ...
[13:36:33.310] Packages needed by the future expression (n = 0): <none>
[13:36:33.310] Packages needed by future strategies (n = 0): <none>
[13:36:33.311] {
[13:36:33.311]     {
[13:36:33.311]         {
[13:36:33.311]             ...future.startTime <- base::Sys.time()
[13:36:33.311]             {
[13:36:33.311]                 {
[13:36:33.311]                   {
[13:36:33.311]                     base::local({
[13:36:33.311]                       has_future <- base::requireNamespace("future", 
[13:36:33.311]                         quietly = TRUE)
[13:36:33.311]                       if (has_future) {
[13:36:33.311]                         ns <- base::getNamespace("future")
[13:36:33.311]                         version <- ns[[".package"]][["version"]]
[13:36:33.311]                         if (is.null(version)) 
[13:36:33.311]                           version <- utils::packageVersion("future")
[13:36:33.311]                       }
[13:36:33.311]                       else {
[13:36:33.311]                         version <- NULL
[13:36:33.311]                       }
[13:36:33.311]                       if (!has_future || version < "1.8.0") {
[13:36:33.311]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:33.311]                           "", base::R.version$version.string), 
[13:36:33.311]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:33.311]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:33.311]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:33.311]                             "release", "version")], collapse = " "), 
[13:36:33.311]                           hostname = base::Sys.info()[["nodename"]])
[13:36:33.311]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:33.311]                           info)
[13:36:33.311]                         info <- base::paste(info, collapse = "; ")
[13:36:33.311]                         if (!has_future) {
[13:36:33.311]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:33.311]                             info)
[13:36:33.311]                         }
[13:36:33.311]                         else {
[13:36:33.311]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:33.311]                             info, version)
[13:36:33.311]                         }
[13:36:33.311]                         base::stop(msg)
[13:36:33.311]                       }
[13:36:33.311]                     })
[13:36:33.311]                   }
[13:36:33.311]                   ...future.strategy.old <- future::plan("list")
[13:36:33.311]                   options(future.plan = NULL)
[13:36:33.311]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:33.311]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:33.311]                 }
[13:36:33.311]                 ...future.workdir <- getwd()
[13:36:33.311]             }
[13:36:33.311]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:33.311]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:33.311]         }
[13:36:33.311]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:33.311]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:33.311]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:33.311]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:33.311]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:33.311]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:33.311]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:33.311]             base::names(...future.oldOptions))
[13:36:33.311]     }
[13:36:33.311]     if (FALSE) {
[13:36:33.311]     }
[13:36:33.311]     else {
[13:36:33.311]         if (TRUE) {
[13:36:33.311]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:33.311]                 open = "w")
[13:36:33.311]         }
[13:36:33.311]         else {
[13:36:33.311]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:33.311]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:33.311]         }
[13:36:33.311]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:33.311]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:33.311]             base::sink(type = "output", split = FALSE)
[13:36:33.311]             base::close(...future.stdout)
[13:36:33.311]         }, add = TRUE)
[13:36:33.311]     }
[13:36:33.311]     ...future.frame <- base::sys.nframe()
[13:36:33.311]     ...future.conditions <- base::list()
[13:36:33.311]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:33.311]     if (FALSE) {
[13:36:33.311]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:33.311]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:33.311]     }
[13:36:33.311]     ...future.result <- base::tryCatch({
[13:36:33.311]         base::withCallingHandlers({
[13:36:33.311]             ...future.value <- base::withVisible(base::local({
[13:36:33.311]                 1
[13:36:33.311]             }))
[13:36:33.311]             future::FutureResult(value = ...future.value$value, 
[13:36:33.311]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:33.311]                   ...future.rng), globalenv = if (FALSE) 
[13:36:33.311]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:33.311]                     ...future.globalenv.names))
[13:36:33.311]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:33.311]         }, condition = base::local({
[13:36:33.311]             c <- base::c
[13:36:33.311]             inherits <- base::inherits
[13:36:33.311]             invokeRestart <- base::invokeRestart
[13:36:33.311]             length <- base::length
[13:36:33.311]             list <- base::list
[13:36:33.311]             seq.int <- base::seq.int
[13:36:33.311]             signalCondition <- base::signalCondition
[13:36:33.311]             sys.calls <- base::sys.calls
[13:36:33.311]             `[[` <- base::`[[`
[13:36:33.311]             `+` <- base::`+`
[13:36:33.311]             `<<-` <- base::`<<-`
[13:36:33.311]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:33.311]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:33.311]                   3L)]
[13:36:33.311]             }
[13:36:33.311]             function(cond) {
[13:36:33.311]                 is_error <- inherits(cond, "error")
[13:36:33.311]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:33.311]                   NULL)
[13:36:33.311]                 if (is_error) {
[13:36:33.311]                   sessionInformation <- function() {
[13:36:33.311]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:33.311]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:33.311]                       search = base::search(), system = base::Sys.info())
[13:36:33.311]                   }
[13:36:33.311]                   ...future.conditions[[length(...future.conditions) + 
[13:36:33.311]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:33.311]                     cond$call), session = sessionInformation(), 
[13:36:33.311]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:33.311]                   signalCondition(cond)
[13:36:33.311]                 }
[13:36:33.311]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:33.311]                 "immediateCondition"))) {
[13:36:33.311]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:33.311]                   ...future.conditions[[length(...future.conditions) + 
[13:36:33.311]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:33.311]                   if (TRUE && !signal) {
[13:36:33.311]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:33.311]                     {
[13:36:33.311]                       inherits <- base::inherits
[13:36:33.311]                       invokeRestart <- base::invokeRestart
[13:36:33.311]                       is.null <- base::is.null
[13:36:33.311]                       muffled <- FALSE
[13:36:33.311]                       if (inherits(cond, "message")) {
[13:36:33.311]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:33.311]                         if (muffled) 
[13:36:33.311]                           invokeRestart("muffleMessage")
[13:36:33.311]                       }
[13:36:33.311]                       else if (inherits(cond, "warning")) {
[13:36:33.311]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:33.311]                         if (muffled) 
[13:36:33.311]                           invokeRestart("muffleWarning")
[13:36:33.311]                       }
[13:36:33.311]                       else if (inherits(cond, "condition")) {
[13:36:33.311]                         if (!is.null(pattern)) {
[13:36:33.311]                           computeRestarts <- base::computeRestarts
[13:36:33.311]                           grepl <- base::grepl
[13:36:33.311]                           restarts <- computeRestarts(cond)
[13:36:33.311]                           for (restart in restarts) {
[13:36:33.311]                             name <- restart$name
[13:36:33.311]                             if (is.null(name)) 
[13:36:33.311]                               next
[13:36:33.311]                             if (!grepl(pattern, name)) 
[13:36:33.311]                               next
[13:36:33.311]                             invokeRestart(restart)
[13:36:33.311]                             muffled <- TRUE
[13:36:33.311]                             break
[13:36:33.311]                           }
[13:36:33.311]                         }
[13:36:33.311]                       }
[13:36:33.311]                       invisible(muffled)
[13:36:33.311]                     }
[13:36:33.311]                     muffleCondition(cond, pattern = "^muffle")
[13:36:33.311]                   }
[13:36:33.311]                 }
[13:36:33.311]                 else {
[13:36:33.311]                   if (TRUE) {
[13:36:33.311]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:33.311]                     {
[13:36:33.311]                       inherits <- base::inherits
[13:36:33.311]                       invokeRestart <- base::invokeRestart
[13:36:33.311]                       is.null <- base::is.null
[13:36:33.311]                       muffled <- FALSE
[13:36:33.311]                       if (inherits(cond, "message")) {
[13:36:33.311]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:33.311]                         if (muffled) 
[13:36:33.311]                           invokeRestart("muffleMessage")
[13:36:33.311]                       }
[13:36:33.311]                       else if (inherits(cond, "warning")) {
[13:36:33.311]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:33.311]                         if (muffled) 
[13:36:33.311]                           invokeRestart("muffleWarning")
[13:36:33.311]                       }
[13:36:33.311]                       else if (inherits(cond, "condition")) {
[13:36:33.311]                         if (!is.null(pattern)) {
[13:36:33.311]                           computeRestarts <- base::computeRestarts
[13:36:33.311]                           grepl <- base::grepl
[13:36:33.311]                           restarts <- computeRestarts(cond)
[13:36:33.311]                           for (restart in restarts) {
[13:36:33.311]                             name <- restart$name
[13:36:33.311]                             if (is.null(name)) 
[13:36:33.311]                               next
[13:36:33.311]                             if (!grepl(pattern, name)) 
[13:36:33.311]                               next
[13:36:33.311]                             invokeRestart(restart)
[13:36:33.311]                             muffled <- TRUE
[13:36:33.311]                             break
[13:36:33.311]                           }
[13:36:33.311]                         }
[13:36:33.311]                       }
[13:36:33.311]                       invisible(muffled)
[13:36:33.311]                     }
[13:36:33.311]                     muffleCondition(cond, pattern = "^muffle")
[13:36:33.311]                   }
[13:36:33.311]                 }
[13:36:33.311]             }
[13:36:33.311]         }))
[13:36:33.311]     }, error = function(ex) {
[13:36:33.311]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:33.311]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:33.311]                 ...future.rng), started = ...future.startTime, 
[13:36:33.311]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:33.311]             version = "1.8"), class = "FutureResult")
[13:36:33.311]     }, finally = {
[13:36:33.311]         if (!identical(...future.workdir, getwd())) 
[13:36:33.311]             setwd(...future.workdir)
[13:36:33.311]         {
[13:36:33.311]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:33.311]                 ...future.oldOptions$nwarnings <- NULL
[13:36:33.311]             }
[13:36:33.311]             base::options(...future.oldOptions)
[13:36:33.311]             if (.Platform$OS.type == "windows") {
[13:36:33.311]                 old_names <- names(...future.oldEnvVars)
[13:36:33.311]                 envs <- base::Sys.getenv()
[13:36:33.311]                 names <- names(envs)
[13:36:33.311]                 common <- intersect(names, old_names)
[13:36:33.311]                 added <- setdiff(names, old_names)
[13:36:33.311]                 removed <- setdiff(old_names, names)
[13:36:33.311]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:33.311]                   envs[common]]
[13:36:33.311]                 NAMES <- toupper(changed)
[13:36:33.311]                 args <- list()
[13:36:33.311]                 for (kk in seq_along(NAMES)) {
[13:36:33.311]                   name <- changed[[kk]]
[13:36:33.311]                   NAME <- NAMES[[kk]]
[13:36:33.311]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:33.311]                     next
[13:36:33.311]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:33.311]                 }
[13:36:33.311]                 NAMES <- toupper(added)
[13:36:33.311]                 for (kk in seq_along(NAMES)) {
[13:36:33.311]                   name <- added[[kk]]
[13:36:33.311]                   NAME <- NAMES[[kk]]
[13:36:33.311]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:33.311]                     next
[13:36:33.311]                   args[[name]] <- ""
[13:36:33.311]                 }
[13:36:33.311]                 NAMES <- toupper(removed)
[13:36:33.311]                 for (kk in seq_along(NAMES)) {
[13:36:33.311]                   name <- removed[[kk]]
[13:36:33.311]                   NAME <- NAMES[[kk]]
[13:36:33.311]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:33.311]                     next
[13:36:33.311]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:33.311]                 }
[13:36:33.311]                 if (length(args) > 0) 
[13:36:33.311]                   base::do.call(base::Sys.setenv, args = args)
[13:36:33.311]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:33.311]             }
[13:36:33.311]             else {
[13:36:33.311]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:33.311]             }
[13:36:33.311]             {
[13:36:33.311]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:33.311]                   0L) {
[13:36:33.311]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:33.311]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:33.311]                   base::options(opts)
[13:36:33.311]                 }
[13:36:33.311]                 {
[13:36:33.311]                   {
[13:36:33.311]                     NULL
[13:36:33.311]                     RNGkind("Mersenne-Twister")
[13:36:33.311]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:33.311]                       inherits = FALSE)
[13:36:33.311]                   }
[13:36:33.311]                   options(future.plan = NULL)
[13:36:33.311]                   if (is.na(NA_character_)) 
[13:36:33.311]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:33.311]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:33.311]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:33.311]                     .init = FALSE)
[13:36:33.311]                 }
[13:36:33.311]             }
[13:36:33.311]         }
[13:36:33.311]     })
[13:36:33.311]     if (TRUE) {
[13:36:33.311]         base::sink(type = "output", split = FALSE)
[13:36:33.311]         if (TRUE) {
[13:36:33.311]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:33.311]         }
[13:36:33.311]         else {
[13:36:33.311]             ...future.result["stdout"] <- base::list(NULL)
[13:36:33.311]         }
[13:36:33.311]         base::close(...future.stdout)
[13:36:33.311]         ...future.stdout <- NULL
[13:36:33.311]     }
[13:36:33.311]     ...future.result$conditions <- ...future.conditions
[13:36:33.311]     ...future.result$finished <- base::Sys.time()
[13:36:33.311]     ...future.result
[13:36:33.311] }
[13:36:33.313] plan(): Setting new future strategy stack:
[13:36:33.313] List of future strategies:
[13:36:33.313] 1. sequential:
[13:36:33.313]    - args: function (..., envir = parent.frame())
[13:36:33.313]    - tweaked: FALSE
[13:36:33.313]    - call: NULL
[13:36:33.313] plan(): nbrOfWorkers() = 1
[13:36:33.314] plan(): Setting new future strategy stack:
[13:36:33.314] List of future strategies:
[13:36:33.314] 1. sequential:
[13:36:33.314]    - args: function (..., envir = parent.frame())
[13:36:33.314]    - tweaked: FALSE
[13:36:33.314]    - call: future::plan("sequential")
[13:36:33.315] plan(): nbrOfWorkers() = 1
[13:36:33.315] SequentialFuture started (and completed)
[13:36:33.315] - Launch lazy future ... done
[13:36:33.315] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 2b7a43dc-9265-21fb-cf19-3a7befd66592
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-2b7a43dc-9265-21fb-cf19-3a7befd66592', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 2b7a43dc-9265-21fb-cf19-3a7befd66592
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('multicore-2b7a43dc-9265-21fb-cf19-3a7befd66592', 'remove') ...
*** FutureRegistry('multicore-2b7a43dc-9265-21fb-cf19-3a7befd66592', 'list') ...
list()
*** FutureRegistry('multicore-2b7a43dc-9265-21fb-cf19-3a7befd66592', 'add') ...
[13:36:33.319] getGlobalsAndPackages() ...
[13:36:33.319] Searching for globals...
[13:36:33.320] - globals found: [1] ‘{’
[13:36:33.320] Searching for globals ... DONE
[13:36:33.320] Resolving globals: FALSE
[13:36:33.320] 
[13:36:33.320] 
[13:36:33.320] getGlobalsAndPackages() ... DONE
[13:36:33.321] run() for ‘Future’ ...
[13:36:33.321] - state: ‘created’
[13:36:33.321] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:33.321] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:33.321] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:33.321]   - Field: ‘label’
[13:36:33.321]   - Field: ‘local’
[13:36:33.322]   - Field: ‘owner’
[13:36:33.322]   - Field: ‘envir’
[13:36:33.322]   - Field: ‘packages’
[13:36:33.322]   - Field: ‘gc’
[13:36:33.322]   - Field: ‘conditions’
[13:36:33.322]   - Field: ‘expr’
[13:36:33.322]   - Field: ‘uuid’
[13:36:33.322]   - Field: ‘seed’
[13:36:33.322]   - Field: ‘version’
[13:36:33.322]   - Field: ‘result’
[13:36:33.322]   - Field: ‘asynchronous’
[13:36:33.323]   - Field: ‘calls’
[13:36:33.323]   - Field: ‘globals’
[13:36:33.323]   - Field: ‘stdout’
[13:36:33.323]   - Field: ‘earlySignal’
[13:36:33.323]   - Field: ‘lazy’
[13:36:33.323]   - Field: ‘state’
[13:36:33.323] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:33.323] - Launch lazy future ...
[13:36:33.323] Packages needed by the future expression (n = 0): <none>
[13:36:33.323] Packages needed by future strategies (n = 0): <none>
[13:36:33.324] {
[13:36:33.324]     {
[13:36:33.324]         {
[13:36:33.324]             ...future.startTime <- base::Sys.time()
[13:36:33.324]             {
[13:36:33.324]                 {
[13:36:33.324]                   {
[13:36:33.324]                     base::local({
[13:36:33.324]                       has_future <- base::requireNamespace("future", 
[13:36:33.324]                         quietly = TRUE)
[13:36:33.324]                       if (has_future) {
[13:36:33.324]                         ns <- base::getNamespace("future")
[13:36:33.324]                         version <- ns[[".package"]][["version"]]
[13:36:33.324]                         if (is.null(version)) 
[13:36:33.324]                           version <- utils::packageVersion("future")
[13:36:33.324]                       }
[13:36:33.324]                       else {
[13:36:33.324]                         version <- NULL
[13:36:33.324]                       }
[13:36:33.324]                       if (!has_future || version < "1.8.0") {
[13:36:33.324]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:33.324]                           "", base::R.version$version.string), 
[13:36:33.324]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:33.324]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:33.324]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:33.324]                             "release", "version")], collapse = " "), 
[13:36:33.324]                           hostname = base::Sys.info()[["nodename"]])
[13:36:33.324]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:33.324]                           info)
[13:36:33.324]                         info <- base::paste(info, collapse = "; ")
[13:36:33.324]                         if (!has_future) {
[13:36:33.324]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:33.324]                             info)
[13:36:33.324]                         }
[13:36:33.324]                         else {
[13:36:33.324]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:33.324]                             info, version)
[13:36:33.324]                         }
[13:36:33.324]                         base::stop(msg)
[13:36:33.324]                       }
[13:36:33.324]                     })
[13:36:33.324]                   }
[13:36:33.324]                   ...future.strategy.old <- future::plan("list")
[13:36:33.324]                   options(future.plan = NULL)
[13:36:33.324]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:33.324]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:33.324]                 }
[13:36:33.324]                 ...future.workdir <- getwd()
[13:36:33.324]             }
[13:36:33.324]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:33.324]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:33.324]         }
[13:36:33.324]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:33.324]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:33.324]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:33.324]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:33.324]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:33.324]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:33.324]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:33.324]             base::names(...future.oldOptions))
[13:36:33.324]     }
[13:36:33.324]     if (FALSE) {
[13:36:33.324]     }
[13:36:33.324]     else {
[13:36:33.324]         if (TRUE) {
[13:36:33.324]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:33.324]                 open = "w")
[13:36:33.324]         }
[13:36:33.324]         else {
[13:36:33.324]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:33.324]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:33.324]         }
[13:36:33.324]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:33.324]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:33.324]             base::sink(type = "output", split = FALSE)
[13:36:33.324]             base::close(...future.stdout)
[13:36:33.324]         }, add = TRUE)
[13:36:33.324]     }
[13:36:33.324]     ...future.frame <- base::sys.nframe()
[13:36:33.324]     ...future.conditions <- base::list()
[13:36:33.324]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:33.324]     if (FALSE) {
[13:36:33.324]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:33.324]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:33.324]     }
[13:36:33.324]     ...future.result <- base::tryCatch({
[13:36:33.324]         base::withCallingHandlers({
[13:36:33.324]             ...future.value <- base::withVisible(base::local({
[13:36:33.324]                 2
[13:36:33.324]             }))
[13:36:33.324]             future::FutureResult(value = ...future.value$value, 
[13:36:33.324]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:33.324]                   ...future.rng), globalenv = if (FALSE) 
[13:36:33.324]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:33.324]                     ...future.globalenv.names))
[13:36:33.324]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:33.324]         }, condition = base::local({
[13:36:33.324]             c <- base::c
[13:36:33.324]             inherits <- base::inherits
[13:36:33.324]             invokeRestart <- base::invokeRestart
[13:36:33.324]             length <- base::length
[13:36:33.324]             list <- base::list
[13:36:33.324]             seq.int <- base::seq.int
[13:36:33.324]             signalCondition <- base::signalCondition
[13:36:33.324]             sys.calls <- base::sys.calls
[13:36:33.324]             `[[` <- base::`[[`
[13:36:33.324]             `+` <- base::`+`
[13:36:33.324]             `<<-` <- base::`<<-`
[13:36:33.324]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:33.324]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:33.324]                   3L)]
[13:36:33.324]             }
[13:36:33.324]             function(cond) {
[13:36:33.324]                 is_error <- inherits(cond, "error")
[13:36:33.324]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:33.324]                   NULL)
[13:36:33.324]                 if (is_error) {
[13:36:33.324]                   sessionInformation <- function() {
[13:36:33.324]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:33.324]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:33.324]                       search = base::search(), system = base::Sys.info())
[13:36:33.324]                   }
[13:36:33.324]                   ...future.conditions[[length(...future.conditions) + 
[13:36:33.324]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:33.324]                     cond$call), session = sessionInformation(), 
[13:36:33.324]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:33.324]                   signalCondition(cond)
[13:36:33.324]                 }
[13:36:33.324]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:33.324]                 "immediateCondition"))) {
[13:36:33.324]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:33.324]                   ...future.conditions[[length(...future.conditions) + 
[13:36:33.324]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:33.324]                   if (TRUE && !signal) {
[13:36:33.324]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:33.324]                     {
[13:36:33.324]                       inherits <- base::inherits
[13:36:33.324]                       invokeRestart <- base::invokeRestart
[13:36:33.324]                       is.null <- base::is.null
[13:36:33.324]                       muffled <- FALSE
[13:36:33.324]                       if (inherits(cond, "message")) {
[13:36:33.324]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:33.324]                         if (muffled) 
[13:36:33.324]                           invokeRestart("muffleMessage")
[13:36:33.324]                       }
[13:36:33.324]                       else if (inherits(cond, "warning")) {
[13:36:33.324]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:33.324]                         if (muffled) 
[13:36:33.324]                           invokeRestart("muffleWarning")
[13:36:33.324]                       }
[13:36:33.324]                       else if (inherits(cond, "condition")) {
[13:36:33.324]                         if (!is.null(pattern)) {
[13:36:33.324]                           computeRestarts <- base::computeRestarts
[13:36:33.324]                           grepl <- base::grepl
[13:36:33.324]                           restarts <- computeRestarts(cond)
[13:36:33.324]                           for (restart in restarts) {
[13:36:33.324]                             name <- restart$name
[13:36:33.324]                             if (is.null(name)) 
[13:36:33.324]                               next
[13:36:33.324]                             if (!grepl(pattern, name)) 
[13:36:33.324]                               next
[13:36:33.324]                             invokeRestart(restart)
[13:36:33.324]                             muffled <- TRUE
[13:36:33.324]                             break
[13:36:33.324]                           }
[13:36:33.324]                         }
[13:36:33.324]                       }
[13:36:33.324]                       invisible(muffled)
[13:36:33.324]                     }
[13:36:33.324]                     muffleCondition(cond, pattern = "^muffle")
[13:36:33.324]                   }
[13:36:33.324]                 }
[13:36:33.324]                 else {
[13:36:33.324]                   if (TRUE) {
[13:36:33.324]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:33.324]                     {
[13:36:33.324]                       inherits <- base::inherits
[13:36:33.324]                       invokeRestart <- base::invokeRestart
[13:36:33.324]                       is.null <- base::is.null
[13:36:33.324]                       muffled <- FALSE
[13:36:33.324]                       if (inherits(cond, "message")) {
[13:36:33.324]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:33.324]                         if (muffled) 
[13:36:33.324]                           invokeRestart("muffleMessage")
[13:36:33.324]                       }
[13:36:33.324]                       else if (inherits(cond, "warning")) {
[13:36:33.324]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:33.324]                         if (muffled) 
[13:36:33.324]                           invokeRestart("muffleWarning")
[13:36:33.324]                       }
[13:36:33.324]                       else if (inherits(cond, "condition")) {
[13:36:33.324]                         if (!is.null(pattern)) {
[13:36:33.324]                           computeRestarts <- base::computeRestarts
[13:36:33.324]                           grepl <- base::grepl
[13:36:33.324]                           restarts <- computeRestarts(cond)
[13:36:33.324]                           for (restart in restarts) {
[13:36:33.324]                             name <- restart$name
[13:36:33.324]                             if (is.null(name)) 
[13:36:33.324]                               next
[13:36:33.324]                             if (!grepl(pattern, name)) 
[13:36:33.324]                               next
[13:36:33.324]                             invokeRestart(restart)
[13:36:33.324]                             muffled <- TRUE
[13:36:33.324]                             break
[13:36:33.324]                           }
[13:36:33.324]                         }
[13:36:33.324]                       }
[13:36:33.324]                       invisible(muffled)
[13:36:33.324]                     }
[13:36:33.324]                     muffleCondition(cond, pattern = "^muffle")
[13:36:33.324]                   }
[13:36:33.324]                 }
[13:36:33.324]             }
[13:36:33.324]         }))
[13:36:33.324]     }, error = function(ex) {
[13:36:33.324]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:33.324]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:33.324]                 ...future.rng), started = ...future.startTime, 
[13:36:33.324]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:33.324]             version = "1.8"), class = "FutureResult")
[13:36:33.324]     }, finally = {
[13:36:33.324]         if (!identical(...future.workdir, getwd())) 
[13:36:33.324]             setwd(...future.workdir)
[13:36:33.324]         {
[13:36:33.324]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:33.324]                 ...future.oldOptions$nwarnings <- NULL
[13:36:33.324]             }
[13:36:33.324]             base::options(...future.oldOptions)
[13:36:33.324]             if (.Platform$OS.type == "windows") {
[13:36:33.324]                 old_names <- names(...future.oldEnvVars)
[13:36:33.324]                 envs <- base::Sys.getenv()
[13:36:33.324]                 names <- names(envs)
[13:36:33.324]                 common <- intersect(names, old_names)
[13:36:33.324]                 added <- setdiff(names, old_names)
[13:36:33.324]                 removed <- setdiff(old_names, names)
[13:36:33.324]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:33.324]                   envs[common]]
[13:36:33.324]                 NAMES <- toupper(changed)
[13:36:33.324]                 args <- list()
[13:36:33.324]                 for (kk in seq_along(NAMES)) {
[13:36:33.324]                   name <- changed[[kk]]
[13:36:33.324]                   NAME <- NAMES[[kk]]
[13:36:33.324]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:33.324]                     next
[13:36:33.324]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:33.324]                 }
[13:36:33.324]                 NAMES <- toupper(added)
[13:36:33.324]                 for (kk in seq_along(NAMES)) {
[13:36:33.324]                   name <- added[[kk]]
[13:36:33.324]                   NAME <- NAMES[[kk]]
[13:36:33.324]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:33.324]                     next
[13:36:33.324]                   args[[name]] <- ""
[13:36:33.324]                 }
[13:36:33.324]                 NAMES <- toupper(removed)
[13:36:33.324]                 for (kk in seq_along(NAMES)) {
[13:36:33.324]                   name <- removed[[kk]]
[13:36:33.324]                   NAME <- NAMES[[kk]]
[13:36:33.324]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:33.324]                     next
[13:36:33.324]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:33.324]                 }
[13:36:33.324]                 if (length(args) > 0) 
[13:36:33.324]                   base::do.call(base::Sys.setenv, args = args)
[13:36:33.324]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:33.324]             }
[13:36:33.324]             else {
[13:36:33.324]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:33.324]             }
[13:36:33.324]             {
[13:36:33.324]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:33.324]                   0L) {
[13:36:33.324]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:33.324]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:33.324]                   base::options(opts)
[13:36:33.324]                 }
[13:36:33.324]                 {
[13:36:33.324]                   {
[13:36:33.324]                     NULL
[13:36:33.324]                     RNGkind("Mersenne-Twister")
[13:36:33.324]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:33.324]                       inherits = FALSE)
[13:36:33.324]                   }
[13:36:33.324]                   options(future.plan = NULL)
[13:36:33.324]                   if (is.na(NA_character_)) 
[13:36:33.324]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:33.324]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:33.324]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:33.324]                     .init = FALSE)
[13:36:33.324]                 }
[13:36:33.324]             }
[13:36:33.324]         }
[13:36:33.324]     })
[13:36:33.324]     if (TRUE) {
[13:36:33.324]         base::sink(type = "output", split = FALSE)
[13:36:33.324]         if (TRUE) {
[13:36:33.324]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:33.324]         }
[13:36:33.324]         else {
[13:36:33.324]             ...future.result["stdout"] <- base::list(NULL)
[13:36:33.324]         }
[13:36:33.324]         base::close(...future.stdout)
[13:36:33.324]         ...future.stdout <- NULL
[13:36:33.324]     }
[13:36:33.324]     ...future.result$conditions <- ...future.conditions
[13:36:33.324]     ...future.result$finished <- base::Sys.time()
[13:36:33.324]     ...future.result
[13:36:33.324] }
[13:36:33.325] plan(): Setting new future strategy stack:
[13:36:33.326] List of future strategies:
[13:36:33.326] 1. sequential:
[13:36:33.326]    - args: function (..., envir = parent.frame())
[13:36:33.326]    - tweaked: FALSE
[13:36:33.326]    - call: NULL
[13:36:33.326] plan(): nbrOfWorkers() = 1
[13:36:33.327] plan(): Setting new future strategy stack:
[13:36:33.327] List of future strategies:
[13:36:33.327] 1. sequential:
[13:36:33.327]    - args: function (..., envir = parent.frame())
[13:36:33.327]    - tweaked: FALSE
[13:36:33.327]    - call: future::plan("sequential")
[13:36:33.327] plan(): nbrOfWorkers() = 1
[13:36:33.327] SequentialFuture started (and completed)
[13:36:33.327] - Launch lazy future ... done
[13:36:33.327] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 2b7a43dc-9265-21fb-cf19-3a7befd66592
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-2b7a43dc-9265-21fb-cf19-3a7befd66592', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 2b7a43dc-9265-21fb-cf19-3a7befd66592
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('multicore-2b7a43dc-9265-21fb-cf19-3a7befd66592', 'collect-first') ...
[13:36:33.329] resolved() for ‘SequentialFuture’ ...
[13:36:33.329] - state: ‘finished’
[13:36:33.329] - run: FALSE
[13:36:33.329] - result: ‘FutureResult’
[13:36:33.329] resolved() for ‘SequentialFuture’ ... done
list()
*** FutureRegistry('multicore-2b7a43dc-9265-21fb-cf19-3a7befd66592', 'add') ...
[13:36:33.329] getGlobalsAndPackages() ...
[13:36:33.330] Searching for globals...
[13:36:33.330] - globals found: [1] ‘{’
[13:36:33.330] Searching for globals ... DONE
[13:36:33.330] Resolving globals: FALSE
[13:36:33.331] 
[13:36:33.331] 
[13:36:33.331] getGlobalsAndPackages() ... DONE
[13:36:33.331] run() for ‘Future’ ...
[13:36:33.331] - state: ‘created’
[13:36:33.331] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:33.331] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:33.332] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:33.332]   - Field: ‘label’
[13:36:33.332]   - Field: ‘local’
[13:36:33.332]   - Field: ‘owner’
[13:36:33.332]   - Field: ‘envir’
[13:36:33.332]   - Field: ‘packages’
[13:36:33.332]   - Field: ‘gc’
[13:36:33.332]   - Field: ‘conditions’
[13:36:33.332]   - Field: ‘expr’
[13:36:33.332]   - Field: ‘uuid’
[13:36:33.332]   - Field: ‘seed’
[13:36:33.333]   - Field: ‘version’
[13:36:33.333]   - Field: ‘result’
[13:36:33.333]   - Field: ‘asynchronous’
[13:36:33.333]   - Field: ‘calls’
[13:36:33.333]   - Field: ‘globals’
[13:36:33.333]   - Field: ‘stdout’
[13:36:33.333]   - Field: ‘earlySignal’
[13:36:33.333]   - Field: ‘lazy’
[13:36:33.333]   - Field: ‘state’
[13:36:33.333] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:33.333] - Launch lazy future ...
[13:36:33.334] Packages needed by the future expression (n = 0): <none>
[13:36:33.334] Packages needed by future strategies (n = 0): <none>
[13:36:33.334] {
[13:36:33.334]     {
[13:36:33.334]         {
[13:36:33.334]             ...future.startTime <- base::Sys.time()
[13:36:33.334]             {
[13:36:33.334]                 {
[13:36:33.334]                   {
[13:36:33.334]                     base::local({
[13:36:33.334]                       has_future <- base::requireNamespace("future", 
[13:36:33.334]                         quietly = TRUE)
[13:36:33.334]                       if (has_future) {
[13:36:33.334]                         ns <- base::getNamespace("future")
[13:36:33.334]                         version <- ns[[".package"]][["version"]]
[13:36:33.334]                         if (is.null(version)) 
[13:36:33.334]                           version <- utils::packageVersion("future")
[13:36:33.334]                       }
[13:36:33.334]                       else {
[13:36:33.334]                         version <- NULL
[13:36:33.334]                       }
[13:36:33.334]                       if (!has_future || version < "1.8.0") {
[13:36:33.334]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:33.334]                           "", base::R.version$version.string), 
[13:36:33.334]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:33.334]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:33.334]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:33.334]                             "release", "version")], collapse = " "), 
[13:36:33.334]                           hostname = base::Sys.info()[["nodename"]])
[13:36:33.334]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:33.334]                           info)
[13:36:33.334]                         info <- base::paste(info, collapse = "; ")
[13:36:33.334]                         if (!has_future) {
[13:36:33.334]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:33.334]                             info)
[13:36:33.334]                         }
[13:36:33.334]                         else {
[13:36:33.334]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:33.334]                             info, version)
[13:36:33.334]                         }
[13:36:33.334]                         base::stop(msg)
[13:36:33.334]                       }
[13:36:33.334]                     })
[13:36:33.334]                   }
[13:36:33.334]                   ...future.strategy.old <- future::plan("list")
[13:36:33.334]                   options(future.plan = NULL)
[13:36:33.334]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:33.334]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:33.334]                 }
[13:36:33.334]                 ...future.workdir <- getwd()
[13:36:33.334]             }
[13:36:33.334]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:33.334]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:33.334]         }
[13:36:33.334]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:33.334]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:33.334]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:33.334]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:33.334]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:33.334]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:33.334]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:33.334]             base::names(...future.oldOptions))
[13:36:33.334]     }
[13:36:33.334]     if (FALSE) {
[13:36:33.334]     }
[13:36:33.334]     else {
[13:36:33.334]         if (TRUE) {
[13:36:33.334]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:33.334]                 open = "w")
[13:36:33.334]         }
[13:36:33.334]         else {
[13:36:33.334]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:33.334]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:33.334]         }
[13:36:33.334]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:33.334]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:33.334]             base::sink(type = "output", split = FALSE)
[13:36:33.334]             base::close(...future.stdout)
[13:36:33.334]         }, add = TRUE)
[13:36:33.334]     }
[13:36:33.334]     ...future.frame <- base::sys.nframe()
[13:36:33.334]     ...future.conditions <- base::list()
[13:36:33.334]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:33.334]     if (FALSE) {
[13:36:33.334]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:33.334]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:33.334]     }
[13:36:33.334]     ...future.result <- base::tryCatch({
[13:36:33.334]         base::withCallingHandlers({
[13:36:33.334]             ...future.value <- base::withVisible(base::local({
[13:36:33.334]                 2
[13:36:33.334]             }))
[13:36:33.334]             future::FutureResult(value = ...future.value$value, 
[13:36:33.334]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:33.334]                   ...future.rng), globalenv = if (FALSE) 
[13:36:33.334]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:33.334]                     ...future.globalenv.names))
[13:36:33.334]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:33.334]         }, condition = base::local({
[13:36:33.334]             c <- base::c
[13:36:33.334]             inherits <- base::inherits
[13:36:33.334]             invokeRestart <- base::invokeRestart
[13:36:33.334]             length <- base::length
[13:36:33.334]             list <- base::list
[13:36:33.334]             seq.int <- base::seq.int
[13:36:33.334]             signalCondition <- base::signalCondition
[13:36:33.334]             sys.calls <- base::sys.calls
[13:36:33.334]             `[[` <- base::`[[`
[13:36:33.334]             `+` <- base::`+`
[13:36:33.334]             `<<-` <- base::`<<-`
[13:36:33.334]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:33.334]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:33.334]                   3L)]
[13:36:33.334]             }
[13:36:33.334]             function(cond) {
[13:36:33.334]                 is_error <- inherits(cond, "error")
[13:36:33.334]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:33.334]                   NULL)
[13:36:33.334]                 if (is_error) {
[13:36:33.334]                   sessionInformation <- function() {
[13:36:33.334]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:33.334]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:33.334]                       search = base::search(), system = base::Sys.info())
[13:36:33.334]                   }
[13:36:33.334]                   ...future.conditions[[length(...future.conditions) + 
[13:36:33.334]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:33.334]                     cond$call), session = sessionInformation(), 
[13:36:33.334]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:33.334]                   signalCondition(cond)
[13:36:33.334]                 }
[13:36:33.334]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:33.334]                 "immediateCondition"))) {
[13:36:33.334]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:33.334]                   ...future.conditions[[length(...future.conditions) + 
[13:36:33.334]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:33.334]                   if (TRUE && !signal) {
[13:36:33.334]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:33.334]                     {
[13:36:33.334]                       inherits <- base::inherits
[13:36:33.334]                       invokeRestart <- base::invokeRestart
[13:36:33.334]                       is.null <- base::is.null
[13:36:33.334]                       muffled <- FALSE
[13:36:33.334]                       if (inherits(cond, "message")) {
[13:36:33.334]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:33.334]                         if (muffled) 
[13:36:33.334]                           invokeRestart("muffleMessage")
[13:36:33.334]                       }
[13:36:33.334]                       else if (inherits(cond, "warning")) {
[13:36:33.334]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:33.334]                         if (muffled) 
[13:36:33.334]                           invokeRestart("muffleWarning")
[13:36:33.334]                       }
[13:36:33.334]                       else if (inherits(cond, "condition")) {
[13:36:33.334]                         if (!is.null(pattern)) {
[13:36:33.334]                           computeRestarts <- base::computeRestarts
[13:36:33.334]                           grepl <- base::grepl
[13:36:33.334]                           restarts <- computeRestarts(cond)
[13:36:33.334]                           for (restart in restarts) {
[13:36:33.334]                             name <- restart$name
[13:36:33.334]                             if (is.null(name)) 
[13:36:33.334]                               next
[13:36:33.334]                             if (!grepl(pattern, name)) 
[13:36:33.334]                               next
[13:36:33.334]                             invokeRestart(restart)
[13:36:33.334]                             muffled <- TRUE
[13:36:33.334]                             break
[13:36:33.334]                           }
[13:36:33.334]                         }
[13:36:33.334]                       }
[13:36:33.334]                       invisible(muffled)
[13:36:33.334]                     }
[13:36:33.334]                     muffleCondition(cond, pattern = "^muffle")
[13:36:33.334]                   }
[13:36:33.334]                 }
[13:36:33.334]                 else {
[13:36:33.334]                   if (TRUE) {
[13:36:33.334]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:33.334]                     {
[13:36:33.334]                       inherits <- base::inherits
[13:36:33.334]                       invokeRestart <- base::invokeRestart
[13:36:33.334]                       is.null <- base::is.null
[13:36:33.334]                       muffled <- FALSE
[13:36:33.334]                       if (inherits(cond, "message")) {
[13:36:33.334]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:33.334]                         if (muffled) 
[13:36:33.334]                           invokeRestart("muffleMessage")
[13:36:33.334]                       }
[13:36:33.334]                       else if (inherits(cond, "warning")) {
[13:36:33.334]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:33.334]                         if (muffled) 
[13:36:33.334]                           invokeRestart("muffleWarning")
[13:36:33.334]                       }
[13:36:33.334]                       else if (inherits(cond, "condition")) {
[13:36:33.334]                         if (!is.null(pattern)) {
[13:36:33.334]                           computeRestarts <- base::computeRestarts
[13:36:33.334]                           grepl <- base::grepl
[13:36:33.334]                           restarts <- computeRestarts(cond)
[13:36:33.334]                           for (restart in restarts) {
[13:36:33.334]                             name <- restart$name
[13:36:33.334]                             if (is.null(name)) 
[13:36:33.334]                               next
[13:36:33.334]                             if (!grepl(pattern, name)) 
[13:36:33.334]                               next
[13:36:33.334]                             invokeRestart(restart)
[13:36:33.334]                             muffled <- TRUE
[13:36:33.334]                             break
[13:36:33.334]                           }
[13:36:33.334]                         }
[13:36:33.334]                       }
[13:36:33.334]                       invisible(muffled)
[13:36:33.334]                     }
[13:36:33.334]                     muffleCondition(cond, pattern = "^muffle")
[13:36:33.334]                   }
[13:36:33.334]                 }
[13:36:33.334]             }
[13:36:33.334]         }))
[13:36:33.334]     }, error = function(ex) {
[13:36:33.334]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:33.334]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:33.334]                 ...future.rng), started = ...future.startTime, 
[13:36:33.334]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:33.334]             version = "1.8"), class = "FutureResult")
[13:36:33.334]     }, finally = {
[13:36:33.334]         if (!identical(...future.workdir, getwd())) 
[13:36:33.334]             setwd(...future.workdir)
[13:36:33.334]         {
[13:36:33.334]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:33.334]                 ...future.oldOptions$nwarnings <- NULL
[13:36:33.334]             }
[13:36:33.334]             base::options(...future.oldOptions)
[13:36:33.334]             if (.Platform$OS.type == "windows") {
[13:36:33.334]                 old_names <- names(...future.oldEnvVars)
[13:36:33.334]                 envs <- base::Sys.getenv()
[13:36:33.334]                 names <- names(envs)
[13:36:33.334]                 common <- intersect(names, old_names)
[13:36:33.334]                 added <- setdiff(names, old_names)
[13:36:33.334]                 removed <- setdiff(old_names, names)
[13:36:33.334]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:33.334]                   envs[common]]
[13:36:33.334]                 NAMES <- toupper(changed)
[13:36:33.334]                 args <- list()
[13:36:33.334]                 for (kk in seq_along(NAMES)) {
[13:36:33.334]                   name <- changed[[kk]]
[13:36:33.334]                   NAME <- NAMES[[kk]]
[13:36:33.334]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:33.334]                     next
[13:36:33.334]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:33.334]                 }
[13:36:33.334]                 NAMES <- toupper(added)
[13:36:33.334]                 for (kk in seq_along(NAMES)) {
[13:36:33.334]                   name <- added[[kk]]
[13:36:33.334]                   NAME <- NAMES[[kk]]
[13:36:33.334]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:33.334]                     next
[13:36:33.334]                   args[[name]] <- ""
[13:36:33.334]                 }
[13:36:33.334]                 NAMES <- toupper(removed)
[13:36:33.334]                 for (kk in seq_along(NAMES)) {
[13:36:33.334]                   name <- removed[[kk]]
[13:36:33.334]                   NAME <- NAMES[[kk]]
[13:36:33.334]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:33.334]                     next
[13:36:33.334]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:33.334]                 }
[13:36:33.334]                 if (length(args) > 0) 
[13:36:33.334]                   base::do.call(base::Sys.setenv, args = args)
[13:36:33.334]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:33.334]             }
[13:36:33.334]             else {
[13:36:33.334]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:33.334]             }
[13:36:33.334]             {
[13:36:33.334]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:33.334]                   0L) {
[13:36:33.334]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:33.334]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:33.334]                   base::options(opts)
[13:36:33.334]                 }
[13:36:33.334]                 {
[13:36:33.334]                   {
[13:36:33.334]                     NULL
[13:36:33.334]                     RNGkind("Mersenne-Twister")
[13:36:33.334]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:33.334]                       inherits = FALSE)
[13:36:33.334]                   }
[13:36:33.334]                   options(future.plan = NULL)
[13:36:33.334]                   if (is.na(NA_character_)) 
[13:36:33.334]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:33.334]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:33.334]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:33.334]                     .init = FALSE)
[13:36:33.334]                 }
[13:36:33.334]             }
[13:36:33.334]         }
[13:36:33.334]     })
[13:36:33.334]     if (TRUE) {
[13:36:33.334]         base::sink(type = "output", split = FALSE)
[13:36:33.334]         if (TRUE) {
[13:36:33.334]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:33.334]         }
[13:36:33.334]         else {
[13:36:33.334]             ...future.result["stdout"] <- base::list(NULL)
[13:36:33.334]         }
[13:36:33.334]         base::close(...future.stdout)
[13:36:33.334]         ...future.stdout <- NULL
[13:36:33.334]     }
[13:36:33.334]     ...future.result$conditions <- ...future.conditions
[13:36:33.334]     ...future.result$finished <- base::Sys.time()
[13:36:33.334]     ...future.result
[13:36:33.334] }
[13:36:33.336] plan(): Setting new future strategy stack:
[13:36:33.336] List of future strategies:
[13:36:33.336] 1. sequential:
[13:36:33.336]    - args: function (..., envir = parent.frame())
[13:36:33.336]    - tweaked: FALSE
[13:36:33.336]    - call: NULL
[13:36:33.336] plan(): nbrOfWorkers() = 1
[13:36:33.337] plan(): Setting new future strategy stack:
[13:36:33.337] List of future strategies:
[13:36:33.337] 1. sequential:
[13:36:33.337]    - args: function (..., envir = parent.frame())
[13:36:33.337]    - tweaked: FALSE
[13:36:33.337]    - call: future::plan("sequential")
[13:36:33.337] plan(): nbrOfWorkers() = 1
[13:36:33.338] SequentialFuture started (and completed)
[13:36:33.338] - Launch lazy future ... done
[13:36:33.338] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 2b7a43dc-9265-21fb-cf19-3a7befd66592
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-2b7a43dc-9265-21fb-cf19-3a7befd66592', 'reset') ...
*** FutureRegistry('multicore-2b7a43dc-9265-21fb-cf19-3a7befd66592', 'list') ...
list()
*** FutureRegistry('rscript', 'list') ...
list()
*** FutureRegistry('rscript', 'add') ...
[13:36:33.340] getGlobalsAndPackages() ...
[13:36:33.340] Searching for globals...
[13:36:33.341] - globals found: [1] ‘{’
[13:36:33.341] Searching for globals ... DONE
[13:36:33.341] Resolving globals: FALSE
[13:36:33.341] 
[13:36:33.341] 
[13:36:33.341] getGlobalsAndPackages() ... DONE
[13:36:33.342] run() for ‘Future’ ...
[13:36:33.342] - state: ‘created’
[13:36:33.342] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:33.342] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:33.342] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:33.342]   - Field: ‘label’
[13:36:33.342]   - Field: ‘local’
[13:36:33.342]   - Field: ‘owner’
[13:36:33.343]   - Field: ‘envir’
[13:36:33.343]   - Field: ‘packages’
[13:36:33.343]   - Field: ‘gc’
[13:36:33.343]   - Field: ‘conditions’
[13:36:33.343]   - Field: ‘expr’
[13:36:33.343]   - Field: ‘uuid’
[13:36:33.343]   - Field: ‘seed’
[13:36:33.343]   - Field: ‘version’
[13:36:33.343]   - Field: ‘result’
[13:36:33.343]   - Field: ‘asynchronous’
[13:36:33.343]   - Field: ‘calls’
[13:36:33.344]   - Field: ‘globals’
[13:36:33.344]   - Field: ‘stdout’
[13:36:33.344]   - Field: ‘earlySignal’
[13:36:33.344]   - Field: ‘lazy’
[13:36:33.344]   - Field: ‘state’
[13:36:33.344] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:33.344] - Launch lazy future ...
[13:36:33.344] Packages needed by the future expression (n = 0): <none>
[13:36:33.344] Packages needed by future strategies (n = 0): <none>
[13:36:33.345] {
[13:36:33.345]     {
[13:36:33.345]         {
[13:36:33.345]             ...future.startTime <- base::Sys.time()
[13:36:33.345]             {
[13:36:33.345]                 {
[13:36:33.345]                   {
[13:36:33.345]                     base::local({
[13:36:33.345]                       has_future <- base::requireNamespace("future", 
[13:36:33.345]                         quietly = TRUE)
[13:36:33.345]                       if (has_future) {
[13:36:33.345]                         ns <- base::getNamespace("future")
[13:36:33.345]                         version <- ns[[".package"]][["version"]]
[13:36:33.345]                         if (is.null(version)) 
[13:36:33.345]                           version <- utils::packageVersion("future")
[13:36:33.345]                       }
[13:36:33.345]                       else {
[13:36:33.345]                         version <- NULL
[13:36:33.345]                       }
[13:36:33.345]                       if (!has_future || version < "1.8.0") {
[13:36:33.345]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:33.345]                           "", base::R.version$version.string), 
[13:36:33.345]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:33.345]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:33.345]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:33.345]                             "release", "version")], collapse = " "), 
[13:36:33.345]                           hostname = base::Sys.info()[["nodename"]])
[13:36:33.345]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:33.345]                           info)
[13:36:33.345]                         info <- base::paste(info, collapse = "; ")
[13:36:33.345]                         if (!has_future) {
[13:36:33.345]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:33.345]                             info)
[13:36:33.345]                         }
[13:36:33.345]                         else {
[13:36:33.345]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:33.345]                             info, version)
[13:36:33.345]                         }
[13:36:33.345]                         base::stop(msg)
[13:36:33.345]                       }
[13:36:33.345]                     })
[13:36:33.345]                   }
[13:36:33.345]                   ...future.strategy.old <- future::plan("list")
[13:36:33.345]                   options(future.plan = NULL)
[13:36:33.345]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:33.345]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:33.345]                 }
[13:36:33.345]                 ...future.workdir <- getwd()
[13:36:33.345]             }
[13:36:33.345]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:33.345]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:33.345]         }
[13:36:33.345]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:33.345]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:33.345]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:33.345]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:33.345]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:33.345]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:33.345]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:33.345]             base::names(...future.oldOptions))
[13:36:33.345]     }
[13:36:33.345]     if (FALSE) {
[13:36:33.345]     }
[13:36:33.345]     else {
[13:36:33.345]         if (TRUE) {
[13:36:33.345]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:33.345]                 open = "w")
[13:36:33.345]         }
[13:36:33.345]         else {
[13:36:33.345]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:33.345]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:33.345]         }
[13:36:33.345]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:33.345]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:33.345]             base::sink(type = "output", split = FALSE)
[13:36:33.345]             base::close(...future.stdout)
[13:36:33.345]         }, add = TRUE)
[13:36:33.345]     }
[13:36:33.345]     ...future.frame <- base::sys.nframe()
[13:36:33.345]     ...future.conditions <- base::list()
[13:36:33.345]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:33.345]     if (FALSE) {
[13:36:33.345]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:33.345]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:33.345]     }
[13:36:33.345]     ...future.result <- base::tryCatch({
[13:36:33.345]         base::withCallingHandlers({
[13:36:33.345]             ...future.value <- base::withVisible(base::local({
[13:36:33.345]                 1
[13:36:33.345]             }))
[13:36:33.345]             future::FutureResult(value = ...future.value$value, 
[13:36:33.345]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:33.345]                   ...future.rng), globalenv = if (FALSE) 
[13:36:33.345]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:33.345]                     ...future.globalenv.names))
[13:36:33.345]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:33.345]         }, condition = base::local({
[13:36:33.345]             c <- base::c
[13:36:33.345]             inherits <- base::inherits
[13:36:33.345]             invokeRestart <- base::invokeRestart
[13:36:33.345]             length <- base::length
[13:36:33.345]             list <- base::list
[13:36:33.345]             seq.int <- base::seq.int
[13:36:33.345]             signalCondition <- base::signalCondition
[13:36:33.345]             sys.calls <- base::sys.calls
[13:36:33.345]             `[[` <- base::`[[`
[13:36:33.345]             `+` <- base::`+`
[13:36:33.345]             `<<-` <- base::`<<-`
[13:36:33.345]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:33.345]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:33.345]                   3L)]
[13:36:33.345]             }
[13:36:33.345]             function(cond) {
[13:36:33.345]                 is_error <- inherits(cond, "error")
[13:36:33.345]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:33.345]                   NULL)
[13:36:33.345]                 if (is_error) {
[13:36:33.345]                   sessionInformation <- function() {
[13:36:33.345]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:33.345]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:33.345]                       search = base::search(), system = base::Sys.info())
[13:36:33.345]                   }
[13:36:33.345]                   ...future.conditions[[length(...future.conditions) + 
[13:36:33.345]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:33.345]                     cond$call), session = sessionInformation(), 
[13:36:33.345]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:33.345]                   signalCondition(cond)
[13:36:33.345]                 }
[13:36:33.345]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:33.345]                 "immediateCondition"))) {
[13:36:33.345]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:33.345]                   ...future.conditions[[length(...future.conditions) + 
[13:36:33.345]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:33.345]                   if (TRUE && !signal) {
[13:36:33.345]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:33.345]                     {
[13:36:33.345]                       inherits <- base::inherits
[13:36:33.345]                       invokeRestart <- base::invokeRestart
[13:36:33.345]                       is.null <- base::is.null
[13:36:33.345]                       muffled <- FALSE
[13:36:33.345]                       if (inherits(cond, "message")) {
[13:36:33.345]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:33.345]                         if (muffled) 
[13:36:33.345]                           invokeRestart("muffleMessage")
[13:36:33.345]                       }
[13:36:33.345]                       else if (inherits(cond, "warning")) {
[13:36:33.345]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:33.345]                         if (muffled) 
[13:36:33.345]                           invokeRestart("muffleWarning")
[13:36:33.345]                       }
[13:36:33.345]                       else if (inherits(cond, "condition")) {
[13:36:33.345]                         if (!is.null(pattern)) {
[13:36:33.345]                           computeRestarts <- base::computeRestarts
[13:36:33.345]                           grepl <- base::grepl
[13:36:33.345]                           restarts <- computeRestarts(cond)
[13:36:33.345]                           for (restart in restarts) {
[13:36:33.345]                             name <- restart$name
[13:36:33.345]                             if (is.null(name)) 
[13:36:33.345]                               next
[13:36:33.345]                             if (!grepl(pattern, name)) 
[13:36:33.345]                               next
[13:36:33.345]                             invokeRestart(restart)
[13:36:33.345]                             muffled <- TRUE
[13:36:33.345]                             break
[13:36:33.345]                           }
[13:36:33.345]                         }
[13:36:33.345]                       }
[13:36:33.345]                       invisible(muffled)
[13:36:33.345]                     }
[13:36:33.345]                     muffleCondition(cond, pattern = "^muffle")
[13:36:33.345]                   }
[13:36:33.345]                 }
[13:36:33.345]                 else {
[13:36:33.345]                   if (TRUE) {
[13:36:33.345]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:33.345]                     {
[13:36:33.345]                       inherits <- base::inherits
[13:36:33.345]                       invokeRestart <- base::invokeRestart
[13:36:33.345]                       is.null <- base::is.null
[13:36:33.345]                       muffled <- FALSE
[13:36:33.345]                       if (inherits(cond, "message")) {
[13:36:33.345]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:33.345]                         if (muffled) 
[13:36:33.345]                           invokeRestart("muffleMessage")
[13:36:33.345]                       }
[13:36:33.345]                       else if (inherits(cond, "warning")) {
[13:36:33.345]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:33.345]                         if (muffled) 
[13:36:33.345]                           invokeRestart("muffleWarning")
[13:36:33.345]                       }
[13:36:33.345]                       else if (inherits(cond, "condition")) {
[13:36:33.345]                         if (!is.null(pattern)) {
[13:36:33.345]                           computeRestarts <- base::computeRestarts
[13:36:33.345]                           grepl <- base::grepl
[13:36:33.345]                           restarts <- computeRestarts(cond)
[13:36:33.345]                           for (restart in restarts) {
[13:36:33.345]                             name <- restart$name
[13:36:33.345]                             if (is.null(name)) 
[13:36:33.345]                               next
[13:36:33.345]                             if (!grepl(pattern, name)) 
[13:36:33.345]                               next
[13:36:33.345]                             invokeRestart(restart)
[13:36:33.345]                             muffled <- TRUE
[13:36:33.345]                             break
[13:36:33.345]                           }
[13:36:33.345]                         }
[13:36:33.345]                       }
[13:36:33.345]                       invisible(muffled)
[13:36:33.345]                     }
[13:36:33.345]                     muffleCondition(cond, pattern = "^muffle")
[13:36:33.345]                   }
[13:36:33.345]                 }
[13:36:33.345]             }
[13:36:33.345]         }))
[13:36:33.345]     }, error = function(ex) {
[13:36:33.345]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:33.345]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:33.345]                 ...future.rng), started = ...future.startTime, 
[13:36:33.345]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:33.345]             version = "1.8"), class = "FutureResult")
[13:36:33.345]     }, finally = {
[13:36:33.345]         if (!identical(...future.workdir, getwd())) 
[13:36:33.345]             setwd(...future.workdir)
[13:36:33.345]         {
[13:36:33.345]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:33.345]                 ...future.oldOptions$nwarnings <- NULL
[13:36:33.345]             }
[13:36:33.345]             base::options(...future.oldOptions)
[13:36:33.345]             if (.Platform$OS.type == "windows") {
[13:36:33.345]                 old_names <- names(...future.oldEnvVars)
[13:36:33.345]                 envs <- base::Sys.getenv()
[13:36:33.345]                 names <- names(envs)
[13:36:33.345]                 common <- intersect(names, old_names)
[13:36:33.345]                 added <- setdiff(names, old_names)
[13:36:33.345]                 removed <- setdiff(old_names, names)
[13:36:33.345]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:33.345]                   envs[common]]
[13:36:33.345]                 NAMES <- toupper(changed)
[13:36:33.345]                 args <- list()
[13:36:33.345]                 for (kk in seq_along(NAMES)) {
[13:36:33.345]                   name <- changed[[kk]]
[13:36:33.345]                   NAME <- NAMES[[kk]]
[13:36:33.345]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:33.345]                     next
[13:36:33.345]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:33.345]                 }
[13:36:33.345]                 NAMES <- toupper(added)
[13:36:33.345]                 for (kk in seq_along(NAMES)) {
[13:36:33.345]                   name <- added[[kk]]
[13:36:33.345]                   NAME <- NAMES[[kk]]
[13:36:33.345]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:33.345]                     next
[13:36:33.345]                   args[[name]] <- ""
[13:36:33.345]                 }
[13:36:33.345]                 NAMES <- toupper(removed)
[13:36:33.345]                 for (kk in seq_along(NAMES)) {
[13:36:33.345]                   name <- removed[[kk]]
[13:36:33.345]                   NAME <- NAMES[[kk]]
[13:36:33.345]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:33.345]                     next
[13:36:33.345]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:33.345]                 }
[13:36:33.345]                 if (length(args) > 0) 
[13:36:33.345]                   base::do.call(base::Sys.setenv, args = args)
[13:36:33.345]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:33.345]             }
[13:36:33.345]             else {
[13:36:33.345]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:33.345]             }
[13:36:33.345]             {
[13:36:33.345]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:33.345]                   0L) {
[13:36:33.345]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:33.345]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:33.345]                   base::options(opts)
[13:36:33.345]                 }
[13:36:33.345]                 {
[13:36:33.345]                   {
[13:36:33.345]                     NULL
[13:36:33.345]                     RNGkind("Mersenne-Twister")
[13:36:33.345]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:33.345]                       inherits = FALSE)
[13:36:33.345]                   }
[13:36:33.345]                   options(future.plan = NULL)
[13:36:33.345]                   if (is.na(NA_character_)) 
[13:36:33.345]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:33.345]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:33.345]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:33.345]                     .init = FALSE)
[13:36:33.345]                 }
[13:36:33.345]             }
[13:36:33.345]         }
[13:36:33.345]     })
[13:36:33.345]     if (TRUE) {
[13:36:33.345]         base::sink(type = "output", split = FALSE)
[13:36:33.345]         if (TRUE) {
[13:36:33.345]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:33.345]         }
[13:36:33.345]         else {
[13:36:33.345]             ...future.result["stdout"] <- base::list(NULL)
[13:36:33.345]         }
[13:36:33.345]         base::close(...future.stdout)
[13:36:33.345]         ...future.stdout <- NULL
[13:36:33.345]     }
[13:36:33.345]     ...future.result$conditions <- ...future.conditions
[13:36:33.345]     ...future.result$finished <- base::Sys.time()
[13:36:33.345]     ...future.result
[13:36:33.345] }
[13:36:33.346] plan(): Setting new future strategy stack:
[13:36:33.347] List of future strategies:
[13:36:33.347] 1. sequential:
[13:36:33.347]    - args: function (..., envir = parent.frame())
[13:36:33.347]    - tweaked: FALSE
[13:36:33.347]    - call: NULL
[13:36:33.347] plan(): nbrOfWorkers() = 1
[13:36:33.348] plan(): Setting new future strategy stack:
[13:36:33.348] List of future strategies:
[13:36:33.348] 1. sequential:
[13:36:33.348]    - args: function (..., envir = parent.frame())
[13:36:33.348]    - tweaked: FALSE
[13:36:33.348]    - call: future::plan("sequential")
[13:36:33.348] plan(): nbrOfWorkers() = 1
[13:36:33.348] SequentialFuture started (and completed)
[13:36:33.348] - Launch lazy future ... done
[13:36:33.348] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 2b7a43dc-9265-21fb-cf19-3a7befd66592
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 2b7a43dc-9265-21fb-cf19-3a7befd66592
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('rscript', 'remove') ...
*** FutureRegistry('rscript', 'list') ...
list()
*** FutureRegistry('rscript', 'add') ...
[13:36:33.349] getGlobalsAndPackages() ...
[13:36:33.350] Searching for globals...
[13:36:33.350] - globals found: [1] ‘{’
[13:36:33.350] Searching for globals ... DONE
[13:36:33.350] Resolving globals: FALSE
[13:36:33.351] 
[13:36:33.351] 
[13:36:33.351] getGlobalsAndPackages() ... DONE
[13:36:33.351] run() for ‘Future’ ...
[13:36:33.351] - state: ‘created’
[13:36:33.351] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:33.351] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:33.351] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:33.352]   - Field: ‘label’
[13:36:33.352]   - Field: ‘local’
[13:36:33.352]   - Field: ‘owner’
[13:36:33.352]   - Field: ‘envir’
[13:36:33.352]   - Field: ‘packages’
[13:36:33.352]   - Field: ‘gc’
[13:36:33.352]   - Field: ‘conditions’
[13:36:33.352]   - Field: ‘expr’
[13:36:33.352]   - Field: ‘uuid’
[13:36:33.352]   - Field: ‘seed’
[13:36:33.352]   - Field: ‘version’
[13:36:33.353]   - Field: ‘result’
[13:36:33.353]   - Field: ‘asynchronous’
[13:36:33.353]   - Field: ‘calls’
[13:36:33.353]   - Field: ‘globals’
[13:36:33.353]   - Field: ‘stdout’
[13:36:33.353]   - Field: ‘earlySignal’
[13:36:33.353]   - Field: ‘lazy’
[13:36:33.353]   - Field: ‘state’
[13:36:33.353] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:33.353] - Launch lazy future ...
[13:36:33.353] Packages needed by the future expression (n = 0): <none>
[13:36:33.354] Packages needed by future strategies (n = 0): <none>
[13:36:33.354] {
[13:36:33.354]     {
[13:36:33.354]         {
[13:36:33.354]             ...future.startTime <- base::Sys.time()
[13:36:33.354]             {
[13:36:33.354]                 {
[13:36:33.354]                   {
[13:36:33.354]                     base::local({
[13:36:33.354]                       has_future <- base::requireNamespace("future", 
[13:36:33.354]                         quietly = TRUE)
[13:36:33.354]                       if (has_future) {
[13:36:33.354]                         ns <- base::getNamespace("future")
[13:36:33.354]                         version <- ns[[".package"]][["version"]]
[13:36:33.354]                         if (is.null(version)) 
[13:36:33.354]                           version <- utils::packageVersion("future")
[13:36:33.354]                       }
[13:36:33.354]                       else {
[13:36:33.354]                         version <- NULL
[13:36:33.354]                       }
[13:36:33.354]                       if (!has_future || version < "1.8.0") {
[13:36:33.354]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:33.354]                           "", base::R.version$version.string), 
[13:36:33.354]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:33.354]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:33.354]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:33.354]                             "release", "version")], collapse = " "), 
[13:36:33.354]                           hostname = base::Sys.info()[["nodename"]])
[13:36:33.354]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:33.354]                           info)
[13:36:33.354]                         info <- base::paste(info, collapse = "; ")
[13:36:33.354]                         if (!has_future) {
[13:36:33.354]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:33.354]                             info)
[13:36:33.354]                         }
[13:36:33.354]                         else {
[13:36:33.354]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:33.354]                             info, version)
[13:36:33.354]                         }
[13:36:33.354]                         base::stop(msg)
[13:36:33.354]                       }
[13:36:33.354]                     })
[13:36:33.354]                   }
[13:36:33.354]                   ...future.strategy.old <- future::plan("list")
[13:36:33.354]                   options(future.plan = NULL)
[13:36:33.354]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:33.354]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:33.354]                 }
[13:36:33.354]                 ...future.workdir <- getwd()
[13:36:33.354]             }
[13:36:33.354]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:33.354]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:33.354]         }
[13:36:33.354]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:33.354]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:33.354]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:33.354]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:33.354]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:33.354]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:33.354]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:33.354]             base::names(...future.oldOptions))
[13:36:33.354]     }
[13:36:33.354]     if (FALSE) {
[13:36:33.354]     }
[13:36:33.354]     else {
[13:36:33.354]         if (TRUE) {
[13:36:33.354]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:33.354]                 open = "w")
[13:36:33.354]         }
[13:36:33.354]         else {
[13:36:33.354]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:33.354]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:33.354]         }
[13:36:33.354]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:33.354]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:33.354]             base::sink(type = "output", split = FALSE)
[13:36:33.354]             base::close(...future.stdout)
[13:36:33.354]         }, add = TRUE)
[13:36:33.354]     }
[13:36:33.354]     ...future.frame <- base::sys.nframe()
[13:36:33.354]     ...future.conditions <- base::list()
[13:36:33.354]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:33.354]     if (FALSE) {
[13:36:33.354]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:33.354]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:33.354]     }
[13:36:33.354]     ...future.result <- base::tryCatch({
[13:36:33.354]         base::withCallingHandlers({
[13:36:33.354]             ...future.value <- base::withVisible(base::local({
[13:36:33.354]                 2
[13:36:33.354]             }))
[13:36:33.354]             future::FutureResult(value = ...future.value$value, 
[13:36:33.354]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:33.354]                   ...future.rng), globalenv = if (FALSE) 
[13:36:33.354]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:33.354]                     ...future.globalenv.names))
[13:36:33.354]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:33.354]         }, condition = base::local({
[13:36:33.354]             c <- base::c
[13:36:33.354]             inherits <- base::inherits
[13:36:33.354]             invokeRestart <- base::invokeRestart
[13:36:33.354]             length <- base::length
[13:36:33.354]             list <- base::list
[13:36:33.354]             seq.int <- base::seq.int
[13:36:33.354]             signalCondition <- base::signalCondition
[13:36:33.354]             sys.calls <- base::sys.calls
[13:36:33.354]             `[[` <- base::`[[`
[13:36:33.354]             `+` <- base::`+`
[13:36:33.354]             `<<-` <- base::`<<-`
[13:36:33.354]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:33.354]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:33.354]                   3L)]
[13:36:33.354]             }
[13:36:33.354]             function(cond) {
[13:36:33.354]                 is_error <- inherits(cond, "error")
[13:36:33.354]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:33.354]                   NULL)
[13:36:33.354]                 if (is_error) {
[13:36:33.354]                   sessionInformation <- function() {
[13:36:33.354]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:33.354]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:33.354]                       search = base::search(), system = base::Sys.info())
[13:36:33.354]                   }
[13:36:33.354]                   ...future.conditions[[length(...future.conditions) + 
[13:36:33.354]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:33.354]                     cond$call), session = sessionInformation(), 
[13:36:33.354]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:33.354]                   signalCondition(cond)
[13:36:33.354]                 }
[13:36:33.354]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:33.354]                 "immediateCondition"))) {
[13:36:33.354]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:33.354]                   ...future.conditions[[length(...future.conditions) + 
[13:36:33.354]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:33.354]                   if (TRUE && !signal) {
[13:36:33.354]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:33.354]                     {
[13:36:33.354]                       inherits <- base::inherits
[13:36:33.354]                       invokeRestart <- base::invokeRestart
[13:36:33.354]                       is.null <- base::is.null
[13:36:33.354]                       muffled <- FALSE
[13:36:33.354]                       if (inherits(cond, "message")) {
[13:36:33.354]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:33.354]                         if (muffled) 
[13:36:33.354]                           invokeRestart("muffleMessage")
[13:36:33.354]                       }
[13:36:33.354]                       else if (inherits(cond, "warning")) {
[13:36:33.354]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:33.354]                         if (muffled) 
[13:36:33.354]                           invokeRestart("muffleWarning")
[13:36:33.354]                       }
[13:36:33.354]                       else if (inherits(cond, "condition")) {
[13:36:33.354]                         if (!is.null(pattern)) {
[13:36:33.354]                           computeRestarts <- base::computeRestarts
[13:36:33.354]                           grepl <- base::grepl
[13:36:33.354]                           restarts <- computeRestarts(cond)
[13:36:33.354]                           for (restart in restarts) {
[13:36:33.354]                             name <- restart$name
[13:36:33.354]                             if (is.null(name)) 
[13:36:33.354]                               next
[13:36:33.354]                             if (!grepl(pattern, name)) 
[13:36:33.354]                               next
[13:36:33.354]                             invokeRestart(restart)
[13:36:33.354]                             muffled <- TRUE
[13:36:33.354]                             break
[13:36:33.354]                           }
[13:36:33.354]                         }
[13:36:33.354]                       }
[13:36:33.354]                       invisible(muffled)
[13:36:33.354]                     }
[13:36:33.354]                     muffleCondition(cond, pattern = "^muffle")
[13:36:33.354]                   }
[13:36:33.354]                 }
[13:36:33.354]                 else {
[13:36:33.354]                   if (TRUE) {
[13:36:33.354]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:33.354]                     {
[13:36:33.354]                       inherits <- base::inherits
[13:36:33.354]                       invokeRestart <- base::invokeRestart
[13:36:33.354]                       is.null <- base::is.null
[13:36:33.354]                       muffled <- FALSE
[13:36:33.354]                       if (inherits(cond, "message")) {
[13:36:33.354]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:33.354]                         if (muffled) 
[13:36:33.354]                           invokeRestart("muffleMessage")
[13:36:33.354]                       }
[13:36:33.354]                       else if (inherits(cond, "warning")) {
[13:36:33.354]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:33.354]                         if (muffled) 
[13:36:33.354]                           invokeRestart("muffleWarning")
[13:36:33.354]                       }
[13:36:33.354]                       else if (inherits(cond, "condition")) {
[13:36:33.354]                         if (!is.null(pattern)) {
[13:36:33.354]                           computeRestarts <- base::computeRestarts
[13:36:33.354]                           grepl <- base::grepl
[13:36:33.354]                           restarts <- computeRestarts(cond)
[13:36:33.354]                           for (restart in restarts) {
[13:36:33.354]                             name <- restart$name
[13:36:33.354]                             if (is.null(name)) 
[13:36:33.354]                               next
[13:36:33.354]                             if (!grepl(pattern, name)) 
[13:36:33.354]                               next
[13:36:33.354]                             invokeRestart(restart)
[13:36:33.354]                             muffled <- TRUE
[13:36:33.354]                             break
[13:36:33.354]                           }
[13:36:33.354]                         }
[13:36:33.354]                       }
[13:36:33.354]                       invisible(muffled)
[13:36:33.354]                     }
[13:36:33.354]                     muffleCondition(cond, pattern = "^muffle")
[13:36:33.354]                   }
[13:36:33.354]                 }
[13:36:33.354]             }
[13:36:33.354]         }))
[13:36:33.354]     }, error = function(ex) {
[13:36:33.354]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:33.354]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:33.354]                 ...future.rng), started = ...future.startTime, 
[13:36:33.354]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:33.354]             version = "1.8"), class = "FutureResult")
[13:36:33.354]     }, finally = {
[13:36:33.354]         if (!identical(...future.workdir, getwd())) 
[13:36:33.354]             setwd(...future.workdir)
[13:36:33.354]         {
[13:36:33.354]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:33.354]                 ...future.oldOptions$nwarnings <- NULL
[13:36:33.354]             }
[13:36:33.354]             base::options(...future.oldOptions)
[13:36:33.354]             if (.Platform$OS.type == "windows") {
[13:36:33.354]                 old_names <- names(...future.oldEnvVars)
[13:36:33.354]                 envs <- base::Sys.getenv()
[13:36:33.354]                 names <- names(envs)
[13:36:33.354]                 common <- intersect(names, old_names)
[13:36:33.354]                 added <- setdiff(names, old_names)
[13:36:33.354]                 removed <- setdiff(old_names, names)
[13:36:33.354]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:33.354]                   envs[common]]
[13:36:33.354]                 NAMES <- toupper(changed)
[13:36:33.354]                 args <- list()
[13:36:33.354]                 for (kk in seq_along(NAMES)) {
[13:36:33.354]                   name <- changed[[kk]]
[13:36:33.354]                   NAME <- NAMES[[kk]]
[13:36:33.354]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:33.354]                     next
[13:36:33.354]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:33.354]                 }
[13:36:33.354]                 NAMES <- toupper(added)
[13:36:33.354]                 for (kk in seq_along(NAMES)) {
[13:36:33.354]                   name <- added[[kk]]
[13:36:33.354]                   NAME <- NAMES[[kk]]
[13:36:33.354]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:33.354]                     next
[13:36:33.354]                   args[[name]] <- ""
[13:36:33.354]                 }
[13:36:33.354]                 NAMES <- toupper(removed)
[13:36:33.354]                 for (kk in seq_along(NAMES)) {
[13:36:33.354]                   name <- removed[[kk]]
[13:36:33.354]                   NAME <- NAMES[[kk]]
[13:36:33.354]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:33.354]                     next
[13:36:33.354]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:33.354]                 }
[13:36:33.354]                 if (length(args) > 0) 
[13:36:33.354]                   base::do.call(base::Sys.setenv, args = args)
[13:36:33.354]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:33.354]             }
[13:36:33.354]             else {
[13:36:33.354]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:33.354]             }
[13:36:33.354]             {
[13:36:33.354]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:33.354]                   0L) {
[13:36:33.354]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:33.354]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:33.354]                   base::options(opts)
[13:36:33.354]                 }
[13:36:33.354]                 {
[13:36:33.354]                   {
[13:36:33.354]                     NULL
[13:36:33.354]                     RNGkind("Mersenne-Twister")
[13:36:33.354]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:33.354]                       inherits = FALSE)
[13:36:33.354]                   }
[13:36:33.354]                   options(future.plan = NULL)
[13:36:33.354]                   if (is.na(NA_character_)) 
[13:36:33.354]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:33.354]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:33.354]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:33.354]                     .init = FALSE)
[13:36:33.354]                 }
[13:36:33.354]             }
[13:36:33.354]         }
[13:36:33.354]     })
[13:36:33.354]     if (TRUE) {
[13:36:33.354]         base::sink(type = "output", split = FALSE)
[13:36:33.354]         if (TRUE) {
[13:36:33.354]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:33.354]         }
[13:36:33.354]         else {
[13:36:33.354]             ...future.result["stdout"] <- base::list(NULL)
[13:36:33.354]         }
[13:36:33.354]         base::close(...future.stdout)
[13:36:33.354]         ...future.stdout <- NULL
[13:36:33.354]     }
[13:36:33.354]     ...future.result$conditions <- ...future.conditions
[13:36:33.354]     ...future.result$finished <- base::Sys.time()
[13:36:33.354]     ...future.result
[13:36:33.354] }
[13:36:33.356] plan(): Setting new future strategy stack:
[13:36:33.356] List of future strategies:
[13:36:33.356] 1. sequential:
[13:36:33.356]    - args: function (..., envir = parent.frame())
[13:36:33.356]    - tweaked: FALSE
[13:36:33.356]    - call: NULL
[13:36:33.356] plan(): nbrOfWorkers() = 1
[13:36:33.357] plan(): Setting new future strategy stack:
[13:36:33.357] List of future strategies:
[13:36:33.357] 1. sequential:
[13:36:33.357]    - args: function (..., envir = parent.frame())
[13:36:33.357]    - tweaked: FALSE
[13:36:33.357]    - call: future::plan("sequential")
[13:36:33.357] plan(): nbrOfWorkers() = 1
[13:36:33.357] SequentialFuture started (and completed)
[13:36:33.357] - Launch lazy future ... done
[13:36:33.357] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 2b7a43dc-9265-21fb-cf19-3a7befd66592
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 2b7a43dc-9265-21fb-cf19-3a7befd66592
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('rscript', 'collect-first') ...
[13:36:33.366] resolved() for ‘SequentialFuture’ ...
[13:36:33.366] - state: ‘finished’
[13:36:33.366] - run: FALSE
[13:36:33.366] - result: ‘FutureResult’
[13:36:33.366] resolved() for ‘SequentialFuture’ ... done
list()
*** FutureRegistry('rscript', 'add') ...
[13:36:33.367] getGlobalsAndPackages() ...
[13:36:33.367] Searching for globals...
[13:36:33.368] - globals found: [1] ‘{’
[13:36:33.368] Searching for globals ... DONE
[13:36:33.368] Resolving globals: FALSE
[13:36:33.369] 
[13:36:33.369] 
[13:36:33.369] getGlobalsAndPackages() ... DONE
[13:36:33.369] run() for ‘Future’ ...
[13:36:33.369] - state: ‘created’
[13:36:33.369] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:33.370] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:33.370] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:33.370]   - Field: ‘label’
[13:36:33.370]   - Field: ‘local’
[13:36:33.370]   - Field: ‘owner’
[13:36:33.370]   - Field: ‘envir’
[13:36:33.370]   - Field: ‘packages’
[13:36:33.370]   - Field: ‘gc’
[13:36:33.370]   - Field: ‘conditions’
[13:36:33.370]   - Field: ‘expr’
[13:36:33.371]   - Field: ‘uuid’
[13:36:33.371]   - Field: ‘seed’
[13:36:33.371]   - Field: ‘version’
[13:36:33.371]   - Field: ‘result’
[13:36:33.371]   - Field: ‘asynchronous’
[13:36:33.371]   - Field: ‘calls’
[13:36:33.371]   - Field: ‘globals’
[13:36:33.371]   - Field: ‘stdout’
[13:36:33.371]   - Field: ‘earlySignal’
[13:36:33.371]   - Field: ‘lazy’
[13:36:33.371]   - Field: ‘state’
[13:36:33.371] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:33.372] - Launch lazy future ...
[13:36:33.372] Packages needed by the future expression (n = 0): <none>
[13:36:33.372] Packages needed by future strategies (n = 0): <none>
[13:36:33.372] {
[13:36:33.372]     {
[13:36:33.372]         {
[13:36:33.372]             ...future.startTime <- base::Sys.time()
[13:36:33.372]             {
[13:36:33.372]                 {
[13:36:33.372]                   {
[13:36:33.372]                     base::local({
[13:36:33.372]                       has_future <- base::requireNamespace("future", 
[13:36:33.372]                         quietly = TRUE)
[13:36:33.372]                       if (has_future) {
[13:36:33.372]                         ns <- base::getNamespace("future")
[13:36:33.372]                         version <- ns[[".package"]][["version"]]
[13:36:33.372]                         if (is.null(version)) 
[13:36:33.372]                           version <- utils::packageVersion("future")
[13:36:33.372]                       }
[13:36:33.372]                       else {
[13:36:33.372]                         version <- NULL
[13:36:33.372]                       }
[13:36:33.372]                       if (!has_future || version < "1.8.0") {
[13:36:33.372]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:33.372]                           "", base::R.version$version.string), 
[13:36:33.372]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:33.372]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:33.372]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:33.372]                             "release", "version")], collapse = " "), 
[13:36:33.372]                           hostname = base::Sys.info()[["nodename"]])
[13:36:33.372]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:33.372]                           info)
[13:36:33.372]                         info <- base::paste(info, collapse = "; ")
[13:36:33.372]                         if (!has_future) {
[13:36:33.372]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:33.372]                             info)
[13:36:33.372]                         }
[13:36:33.372]                         else {
[13:36:33.372]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:33.372]                             info, version)
[13:36:33.372]                         }
[13:36:33.372]                         base::stop(msg)
[13:36:33.372]                       }
[13:36:33.372]                     })
[13:36:33.372]                   }
[13:36:33.372]                   ...future.strategy.old <- future::plan("list")
[13:36:33.372]                   options(future.plan = NULL)
[13:36:33.372]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:33.372]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:33.372]                 }
[13:36:33.372]                 ...future.workdir <- getwd()
[13:36:33.372]             }
[13:36:33.372]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:33.372]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:33.372]         }
[13:36:33.372]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:33.372]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:33.372]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:33.372]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:33.372]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:33.372]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:33.372]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:33.372]             base::names(...future.oldOptions))
[13:36:33.372]     }
[13:36:33.372]     if (FALSE) {
[13:36:33.372]     }
[13:36:33.372]     else {
[13:36:33.372]         if (TRUE) {
[13:36:33.372]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:33.372]                 open = "w")
[13:36:33.372]         }
[13:36:33.372]         else {
[13:36:33.372]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:33.372]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:33.372]         }
[13:36:33.372]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:33.372]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:33.372]             base::sink(type = "output", split = FALSE)
[13:36:33.372]             base::close(...future.stdout)
[13:36:33.372]         }, add = TRUE)
[13:36:33.372]     }
[13:36:33.372]     ...future.frame <- base::sys.nframe()
[13:36:33.372]     ...future.conditions <- base::list()
[13:36:33.372]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:33.372]     if (FALSE) {
[13:36:33.372]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:33.372]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:33.372]     }
[13:36:33.372]     ...future.result <- base::tryCatch({
[13:36:33.372]         base::withCallingHandlers({
[13:36:33.372]             ...future.value <- base::withVisible(base::local({
[13:36:33.372]                 2
[13:36:33.372]             }))
[13:36:33.372]             future::FutureResult(value = ...future.value$value, 
[13:36:33.372]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:33.372]                   ...future.rng), globalenv = if (FALSE) 
[13:36:33.372]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:33.372]                     ...future.globalenv.names))
[13:36:33.372]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:33.372]         }, condition = base::local({
[13:36:33.372]             c <- base::c
[13:36:33.372]             inherits <- base::inherits
[13:36:33.372]             invokeRestart <- base::invokeRestart
[13:36:33.372]             length <- base::length
[13:36:33.372]             list <- base::list
[13:36:33.372]             seq.int <- base::seq.int
[13:36:33.372]             signalCondition <- base::signalCondition
[13:36:33.372]             sys.calls <- base::sys.calls
[13:36:33.372]             `[[` <- base::`[[`
[13:36:33.372]             `+` <- base::`+`
[13:36:33.372]             `<<-` <- base::`<<-`
[13:36:33.372]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:33.372]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:33.372]                   3L)]
[13:36:33.372]             }
[13:36:33.372]             function(cond) {
[13:36:33.372]                 is_error <- inherits(cond, "error")
[13:36:33.372]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:33.372]                   NULL)
[13:36:33.372]                 if (is_error) {
[13:36:33.372]                   sessionInformation <- function() {
[13:36:33.372]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:33.372]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:33.372]                       search = base::search(), system = base::Sys.info())
[13:36:33.372]                   }
[13:36:33.372]                   ...future.conditions[[length(...future.conditions) + 
[13:36:33.372]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:33.372]                     cond$call), session = sessionInformation(), 
[13:36:33.372]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:33.372]                   signalCondition(cond)
[13:36:33.372]                 }
[13:36:33.372]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:33.372]                 "immediateCondition"))) {
[13:36:33.372]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:33.372]                   ...future.conditions[[length(...future.conditions) + 
[13:36:33.372]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:33.372]                   if (TRUE && !signal) {
[13:36:33.372]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:33.372]                     {
[13:36:33.372]                       inherits <- base::inherits
[13:36:33.372]                       invokeRestart <- base::invokeRestart
[13:36:33.372]                       is.null <- base::is.null
[13:36:33.372]                       muffled <- FALSE
[13:36:33.372]                       if (inherits(cond, "message")) {
[13:36:33.372]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:33.372]                         if (muffled) 
[13:36:33.372]                           invokeRestart("muffleMessage")
[13:36:33.372]                       }
[13:36:33.372]                       else if (inherits(cond, "warning")) {
[13:36:33.372]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:33.372]                         if (muffled) 
[13:36:33.372]                           invokeRestart("muffleWarning")
[13:36:33.372]                       }
[13:36:33.372]                       else if (inherits(cond, "condition")) {
[13:36:33.372]                         if (!is.null(pattern)) {
[13:36:33.372]                           computeRestarts <- base::computeRestarts
[13:36:33.372]                           grepl <- base::grepl
[13:36:33.372]                           restarts <- computeRestarts(cond)
[13:36:33.372]                           for (restart in restarts) {
[13:36:33.372]                             name <- restart$name
[13:36:33.372]                             if (is.null(name)) 
[13:36:33.372]                               next
[13:36:33.372]                             if (!grepl(pattern, name)) 
[13:36:33.372]                               next
[13:36:33.372]                             invokeRestart(restart)
[13:36:33.372]                             muffled <- TRUE
[13:36:33.372]                             break
[13:36:33.372]                           }
[13:36:33.372]                         }
[13:36:33.372]                       }
[13:36:33.372]                       invisible(muffled)
[13:36:33.372]                     }
[13:36:33.372]                     muffleCondition(cond, pattern = "^muffle")
[13:36:33.372]                   }
[13:36:33.372]                 }
[13:36:33.372]                 else {
[13:36:33.372]                   if (TRUE) {
[13:36:33.372]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:33.372]                     {
[13:36:33.372]                       inherits <- base::inherits
[13:36:33.372]                       invokeRestart <- base::invokeRestart
[13:36:33.372]                       is.null <- base::is.null
[13:36:33.372]                       muffled <- FALSE
[13:36:33.372]                       if (inherits(cond, "message")) {
[13:36:33.372]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:33.372]                         if (muffled) 
[13:36:33.372]                           invokeRestart("muffleMessage")
[13:36:33.372]                       }
[13:36:33.372]                       else if (inherits(cond, "warning")) {
[13:36:33.372]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:33.372]                         if (muffled) 
[13:36:33.372]                           invokeRestart("muffleWarning")
[13:36:33.372]                       }
[13:36:33.372]                       else if (inherits(cond, "condition")) {
[13:36:33.372]                         if (!is.null(pattern)) {
[13:36:33.372]                           computeRestarts <- base::computeRestarts
[13:36:33.372]                           grepl <- base::grepl
[13:36:33.372]                           restarts <- computeRestarts(cond)
[13:36:33.372]                           for (restart in restarts) {
[13:36:33.372]                             name <- restart$name
[13:36:33.372]                             if (is.null(name)) 
[13:36:33.372]                               next
[13:36:33.372]                             if (!grepl(pattern, name)) 
[13:36:33.372]                               next
[13:36:33.372]                             invokeRestart(restart)
[13:36:33.372]                             muffled <- TRUE
[13:36:33.372]                             break
[13:36:33.372]                           }
[13:36:33.372]                         }
[13:36:33.372]                       }
[13:36:33.372]                       invisible(muffled)
[13:36:33.372]                     }
[13:36:33.372]                     muffleCondition(cond, pattern = "^muffle")
[13:36:33.372]                   }
[13:36:33.372]                 }
[13:36:33.372]             }
[13:36:33.372]         }))
[13:36:33.372]     }, error = function(ex) {
[13:36:33.372]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:33.372]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:33.372]                 ...future.rng), started = ...future.startTime, 
[13:36:33.372]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:33.372]             version = "1.8"), class = "FutureResult")
[13:36:33.372]     }, finally = {
[13:36:33.372]         if (!identical(...future.workdir, getwd())) 
[13:36:33.372]             setwd(...future.workdir)
[13:36:33.372]         {
[13:36:33.372]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:33.372]                 ...future.oldOptions$nwarnings <- NULL
[13:36:33.372]             }
[13:36:33.372]             base::options(...future.oldOptions)
[13:36:33.372]             if (.Platform$OS.type == "windows") {
[13:36:33.372]                 old_names <- names(...future.oldEnvVars)
[13:36:33.372]                 envs <- base::Sys.getenv()
[13:36:33.372]                 names <- names(envs)
[13:36:33.372]                 common <- intersect(names, old_names)
[13:36:33.372]                 added <- setdiff(names, old_names)
[13:36:33.372]                 removed <- setdiff(old_names, names)
[13:36:33.372]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:33.372]                   envs[common]]
[13:36:33.372]                 NAMES <- toupper(changed)
[13:36:33.372]                 args <- list()
[13:36:33.372]                 for (kk in seq_along(NAMES)) {
[13:36:33.372]                   name <- changed[[kk]]
[13:36:33.372]                   NAME <- NAMES[[kk]]
[13:36:33.372]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:33.372]                     next
[13:36:33.372]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:33.372]                 }
[13:36:33.372]                 NAMES <- toupper(added)
[13:36:33.372]                 for (kk in seq_along(NAMES)) {
[13:36:33.372]                   name <- added[[kk]]
[13:36:33.372]                   NAME <- NAMES[[kk]]
[13:36:33.372]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:33.372]                     next
[13:36:33.372]                   args[[name]] <- ""
[13:36:33.372]                 }
[13:36:33.372]                 NAMES <- toupper(removed)
[13:36:33.372]                 for (kk in seq_along(NAMES)) {
[13:36:33.372]                   name <- removed[[kk]]
[13:36:33.372]                   NAME <- NAMES[[kk]]
[13:36:33.372]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:33.372]                     next
[13:36:33.372]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:33.372]                 }
[13:36:33.372]                 if (length(args) > 0) 
[13:36:33.372]                   base::do.call(base::Sys.setenv, args = args)
[13:36:33.372]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:33.372]             }
[13:36:33.372]             else {
[13:36:33.372]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:33.372]             }
[13:36:33.372]             {
[13:36:33.372]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:33.372]                   0L) {
[13:36:33.372]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:33.372]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:33.372]                   base::options(opts)
[13:36:33.372]                 }
[13:36:33.372]                 {
[13:36:33.372]                   {
[13:36:33.372]                     NULL
[13:36:33.372]                     RNGkind("Mersenne-Twister")
[13:36:33.372]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:33.372]                       inherits = FALSE)
[13:36:33.372]                   }
[13:36:33.372]                   options(future.plan = NULL)
[13:36:33.372]                   if (is.na(NA_character_)) 
[13:36:33.372]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:33.372]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:33.372]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:33.372]                     .init = FALSE)
[13:36:33.372]                 }
[13:36:33.372]             }
[13:36:33.372]         }
[13:36:33.372]     })
[13:36:33.372]     if (TRUE) {
[13:36:33.372]         base::sink(type = "output", split = FALSE)
[13:36:33.372]         if (TRUE) {
[13:36:33.372]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:33.372]         }
[13:36:33.372]         else {
[13:36:33.372]             ...future.result["stdout"] <- base::list(NULL)
[13:36:33.372]         }
[13:36:33.372]         base::close(...future.stdout)
[13:36:33.372]         ...future.stdout <- NULL
[13:36:33.372]     }
[13:36:33.372]     ...future.result$conditions <- ...future.conditions
[13:36:33.372]     ...future.result$finished <- base::Sys.time()
[13:36:33.372]     ...future.result
[13:36:33.372] }
[13:36:33.374] plan(): Setting new future strategy stack:
[13:36:33.374] List of future strategies:
[13:36:33.374] 1. sequential:
[13:36:33.374]    - args: function (..., envir = parent.frame())
[13:36:33.374]    - tweaked: FALSE
[13:36:33.374]    - call: NULL
[13:36:33.374] plan(): nbrOfWorkers() = 1
[13:36:33.375] plan(): Setting new future strategy stack:
[13:36:33.375] List of future strategies:
[13:36:33.375] 1. sequential:
[13:36:33.375]    - args: function (..., envir = parent.frame())
[13:36:33.375]    - tweaked: FALSE
[13:36:33.375]    - call: future::plan("sequential")
[13:36:33.375] plan(): nbrOfWorkers() = 1
[13:36:33.376] SequentialFuture started (and completed)
[13:36:33.376] - Launch lazy future ... done
[13:36:33.376] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 2b7a43dc-9265-21fb-cf19-3a7befd66592
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'reset') ...
*** FutureRegistry('rscript', 'list') ...
list()
> 
> 
> message("*** FutureRegistry() - exceptions ...")
*** FutureRegistry() - exceptions ...
> 
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> f <- future(1)
[13:36:33.377] getGlobalsAndPackages() ...
[13:36:33.377] Searching for globals...
[13:36:33.377] 
[13:36:33.377] Searching for globals ... DONE
[13:36:33.377] - globals: [0] <none>
[13:36:33.377] getGlobalsAndPackages() ... DONE
[13:36:33.377] run() for ‘Future’ ...
[13:36:33.378] - state: ‘created’
[13:36:33.378] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:33.378] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:33.378] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:33.378]   - Field: ‘label’
[13:36:33.378]   - Field: ‘local’
[13:36:33.378]   - Field: ‘owner’
[13:36:33.378]   - Field: ‘envir’
[13:36:33.379]   - Field: ‘packages’
[13:36:33.379]   - Field: ‘gc’
[13:36:33.379]   - Field: ‘conditions’
[13:36:33.379]   - Field: ‘expr’
[13:36:33.379]   - Field: ‘uuid’
[13:36:33.379]   - Field: ‘seed’
[13:36:33.379]   - Field: ‘version’
[13:36:33.379]   - Field: ‘result’
[13:36:33.379]   - Field: ‘asynchronous’
[13:36:33.379]   - Field: ‘calls’
[13:36:33.379]   - Field: ‘globals’
[13:36:33.380]   - Field: ‘stdout’
[13:36:33.380]   - Field: ‘earlySignal’
[13:36:33.380]   - Field: ‘lazy’
[13:36:33.380]   - Field: ‘state’
[13:36:33.380] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:33.380] - Launch lazy future ...
[13:36:33.380] Packages needed by the future expression (n = 0): <none>
[13:36:33.380] Packages needed by future strategies (n = 0): <none>
[13:36:33.381] {
[13:36:33.381]     {
[13:36:33.381]         {
[13:36:33.381]             ...future.startTime <- base::Sys.time()
[13:36:33.381]             {
[13:36:33.381]                 {
[13:36:33.381]                   {
[13:36:33.381]                     base::local({
[13:36:33.381]                       has_future <- base::requireNamespace("future", 
[13:36:33.381]                         quietly = TRUE)
[13:36:33.381]                       if (has_future) {
[13:36:33.381]                         ns <- base::getNamespace("future")
[13:36:33.381]                         version <- ns[[".package"]][["version"]]
[13:36:33.381]                         if (is.null(version)) 
[13:36:33.381]                           version <- utils::packageVersion("future")
[13:36:33.381]                       }
[13:36:33.381]                       else {
[13:36:33.381]                         version <- NULL
[13:36:33.381]                       }
[13:36:33.381]                       if (!has_future || version < "1.8.0") {
[13:36:33.381]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:33.381]                           "", base::R.version$version.string), 
[13:36:33.381]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:33.381]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:33.381]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:33.381]                             "release", "version")], collapse = " "), 
[13:36:33.381]                           hostname = base::Sys.info()[["nodename"]])
[13:36:33.381]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:33.381]                           info)
[13:36:33.381]                         info <- base::paste(info, collapse = "; ")
[13:36:33.381]                         if (!has_future) {
[13:36:33.381]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:33.381]                             info)
[13:36:33.381]                         }
[13:36:33.381]                         else {
[13:36:33.381]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:33.381]                             info, version)
[13:36:33.381]                         }
[13:36:33.381]                         base::stop(msg)
[13:36:33.381]                       }
[13:36:33.381]                     })
[13:36:33.381]                   }
[13:36:33.381]                   ...future.strategy.old <- future::plan("list")
[13:36:33.381]                   options(future.plan = NULL)
[13:36:33.381]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:33.381]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:33.381]                 }
[13:36:33.381]                 ...future.workdir <- getwd()
[13:36:33.381]             }
[13:36:33.381]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:33.381]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:33.381]         }
[13:36:33.381]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:33.381]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:33.381]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:33.381]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:33.381]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:33.381]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:33.381]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:33.381]             base::names(...future.oldOptions))
[13:36:33.381]     }
[13:36:33.381]     if (FALSE) {
[13:36:33.381]     }
[13:36:33.381]     else {
[13:36:33.381]         if (TRUE) {
[13:36:33.381]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:33.381]                 open = "w")
[13:36:33.381]         }
[13:36:33.381]         else {
[13:36:33.381]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:33.381]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:33.381]         }
[13:36:33.381]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:33.381]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:33.381]             base::sink(type = "output", split = FALSE)
[13:36:33.381]             base::close(...future.stdout)
[13:36:33.381]         }, add = TRUE)
[13:36:33.381]     }
[13:36:33.381]     ...future.frame <- base::sys.nframe()
[13:36:33.381]     ...future.conditions <- base::list()
[13:36:33.381]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:33.381]     if (FALSE) {
[13:36:33.381]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:33.381]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:33.381]     }
[13:36:33.381]     ...future.result <- base::tryCatch({
[13:36:33.381]         base::withCallingHandlers({
[13:36:33.381]             ...future.value <- base::withVisible(base::local(1))
[13:36:33.381]             future::FutureResult(value = ...future.value$value, 
[13:36:33.381]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:33.381]                   ...future.rng), globalenv = if (FALSE) 
[13:36:33.381]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:33.381]                     ...future.globalenv.names))
[13:36:33.381]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:33.381]         }, condition = base::local({
[13:36:33.381]             c <- base::c
[13:36:33.381]             inherits <- base::inherits
[13:36:33.381]             invokeRestart <- base::invokeRestart
[13:36:33.381]             length <- base::length
[13:36:33.381]             list <- base::list
[13:36:33.381]             seq.int <- base::seq.int
[13:36:33.381]             signalCondition <- base::signalCondition
[13:36:33.381]             sys.calls <- base::sys.calls
[13:36:33.381]             `[[` <- base::`[[`
[13:36:33.381]             `+` <- base::`+`
[13:36:33.381]             `<<-` <- base::`<<-`
[13:36:33.381]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:33.381]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:33.381]                   3L)]
[13:36:33.381]             }
[13:36:33.381]             function(cond) {
[13:36:33.381]                 is_error <- inherits(cond, "error")
[13:36:33.381]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:33.381]                   NULL)
[13:36:33.381]                 if (is_error) {
[13:36:33.381]                   sessionInformation <- function() {
[13:36:33.381]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:33.381]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:33.381]                       search = base::search(), system = base::Sys.info())
[13:36:33.381]                   }
[13:36:33.381]                   ...future.conditions[[length(...future.conditions) + 
[13:36:33.381]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:33.381]                     cond$call), session = sessionInformation(), 
[13:36:33.381]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:33.381]                   signalCondition(cond)
[13:36:33.381]                 }
[13:36:33.381]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:33.381]                 "immediateCondition"))) {
[13:36:33.381]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:33.381]                   ...future.conditions[[length(...future.conditions) + 
[13:36:33.381]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:33.381]                   if (TRUE && !signal) {
[13:36:33.381]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:33.381]                     {
[13:36:33.381]                       inherits <- base::inherits
[13:36:33.381]                       invokeRestart <- base::invokeRestart
[13:36:33.381]                       is.null <- base::is.null
[13:36:33.381]                       muffled <- FALSE
[13:36:33.381]                       if (inherits(cond, "message")) {
[13:36:33.381]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:33.381]                         if (muffled) 
[13:36:33.381]                           invokeRestart("muffleMessage")
[13:36:33.381]                       }
[13:36:33.381]                       else if (inherits(cond, "warning")) {
[13:36:33.381]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:33.381]                         if (muffled) 
[13:36:33.381]                           invokeRestart("muffleWarning")
[13:36:33.381]                       }
[13:36:33.381]                       else if (inherits(cond, "condition")) {
[13:36:33.381]                         if (!is.null(pattern)) {
[13:36:33.381]                           computeRestarts <- base::computeRestarts
[13:36:33.381]                           grepl <- base::grepl
[13:36:33.381]                           restarts <- computeRestarts(cond)
[13:36:33.381]                           for (restart in restarts) {
[13:36:33.381]                             name <- restart$name
[13:36:33.381]                             if (is.null(name)) 
[13:36:33.381]                               next
[13:36:33.381]                             if (!grepl(pattern, name)) 
[13:36:33.381]                               next
[13:36:33.381]                             invokeRestart(restart)
[13:36:33.381]                             muffled <- TRUE
[13:36:33.381]                             break
[13:36:33.381]                           }
[13:36:33.381]                         }
[13:36:33.381]                       }
[13:36:33.381]                       invisible(muffled)
[13:36:33.381]                     }
[13:36:33.381]                     muffleCondition(cond, pattern = "^muffle")
[13:36:33.381]                   }
[13:36:33.381]                 }
[13:36:33.381]                 else {
[13:36:33.381]                   if (TRUE) {
[13:36:33.381]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:33.381]                     {
[13:36:33.381]                       inherits <- base::inherits
[13:36:33.381]                       invokeRestart <- base::invokeRestart
[13:36:33.381]                       is.null <- base::is.null
[13:36:33.381]                       muffled <- FALSE
[13:36:33.381]                       if (inherits(cond, "message")) {
[13:36:33.381]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:33.381]                         if (muffled) 
[13:36:33.381]                           invokeRestart("muffleMessage")
[13:36:33.381]                       }
[13:36:33.381]                       else if (inherits(cond, "warning")) {
[13:36:33.381]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:33.381]                         if (muffled) 
[13:36:33.381]                           invokeRestart("muffleWarning")
[13:36:33.381]                       }
[13:36:33.381]                       else if (inherits(cond, "condition")) {
[13:36:33.381]                         if (!is.null(pattern)) {
[13:36:33.381]                           computeRestarts <- base::computeRestarts
[13:36:33.381]                           grepl <- base::grepl
[13:36:33.381]                           restarts <- computeRestarts(cond)
[13:36:33.381]                           for (restart in restarts) {
[13:36:33.381]                             name <- restart$name
[13:36:33.381]                             if (is.null(name)) 
[13:36:33.381]                               next
[13:36:33.381]                             if (!grepl(pattern, name)) 
[13:36:33.381]                               next
[13:36:33.381]                             invokeRestart(restart)
[13:36:33.381]                             muffled <- TRUE
[13:36:33.381]                             break
[13:36:33.381]                           }
[13:36:33.381]                         }
[13:36:33.381]                       }
[13:36:33.381]                       invisible(muffled)
[13:36:33.381]                     }
[13:36:33.381]                     muffleCondition(cond, pattern = "^muffle")
[13:36:33.381]                   }
[13:36:33.381]                 }
[13:36:33.381]             }
[13:36:33.381]         }))
[13:36:33.381]     }, error = function(ex) {
[13:36:33.381]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:33.381]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:33.381]                 ...future.rng), started = ...future.startTime, 
[13:36:33.381]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:33.381]             version = "1.8"), class = "FutureResult")
[13:36:33.381]     }, finally = {
[13:36:33.381]         if (!identical(...future.workdir, getwd())) 
[13:36:33.381]             setwd(...future.workdir)
[13:36:33.381]         {
[13:36:33.381]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:33.381]                 ...future.oldOptions$nwarnings <- NULL
[13:36:33.381]             }
[13:36:33.381]             base::options(...future.oldOptions)
[13:36:33.381]             if (.Platform$OS.type == "windows") {
[13:36:33.381]                 old_names <- names(...future.oldEnvVars)
[13:36:33.381]                 envs <- base::Sys.getenv()
[13:36:33.381]                 names <- names(envs)
[13:36:33.381]                 common <- intersect(names, old_names)
[13:36:33.381]                 added <- setdiff(names, old_names)
[13:36:33.381]                 removed <- setdiff(old_names, names)
[13:36:33.381]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:33.381]                   envs[common]]
[13:36:33.381]                 NAMES <- toupper(changed)
[13:36:33.381]                 args <- list()
[13:36:33.381]                 for (kk in seq_along(NAMES)) {
[13:36:33.381]                   name <- changed[[kk]]
[13:36:33.381]                   NAME <- NAMES[[kk]]
[13:36:33.381]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:33.381]                     next
[13:36:33.381]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:33.381]                 }
[13:36:33.381]                 NAMES <- toupper(added)
[13:36:33.381]                 for (kk in seq_along(NAMES)) {
[13:36:33.381]                   name <- added[[kk]]
[13:36:33.381]                   NAME <- NAMES[[kk]]
[13:36:33.381]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:33.381]                     next
[13:36:33.381]                   args[[name]] <- ""
[13:36:33.381]                 }
[13:36:33.381]                 NAMES <- toupper(removed)
[13:36:33.381]                 for (kk in seq_along(NAMES)) {
[13:36:33.381]                   name <- removed[[kk]]
[13:36:33.381]                   NAME <- NAMES[[kk]]
[13:36:33.381]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:33.381]                     next
[13:36:33.381]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:33.381]                 }
[13:36:33.381]                 if (length(args) > 0) 
[13:36:33.381]                   base::do.call(base::Sys.setenv, args = args)
[13:36:33.381]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:33.381]             }
[13:36:33.381]             else {
[13:36:33.381]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:33.381]             }
[13:36:33.381]             {
[13:36:33.381]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:33.381]                   0L) {
[13:36:33.381]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:33.381]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:33.381]                   base::options(opts)
[13:36:33.381]                 }
[13:36:33.381]                 {
[13:36:33.381]                   {
[13:36:33.381]                     NULL
[13:36:33.381]                     RNGkind("Mersenne-Twister")
[13:36:33.381]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:33.381]                       inherits = FALSE)
[13:36:33.381]                   }
[13:36:33.381]                   options(future.plan = NULL)
[13:36:33.381]                   if (is.na(NA_character_)) 
[13:36:33.381]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:33.381]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:33.381]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:33.381]                     .init = FALSE)
[13:36:33.381]                 }
[13:36:33.381]             }
[13:36:33.381]         }
[13:36:33.381]     })
[13:36:33.381]     if (TRUE) {
[13:36:33.381]         base::sink(type = "output", split = FALSE)
[13:36:33.381]         if (TRUE) {
[13:36:33.381]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:33.381]         }
[13:36:33.381]         else {
[13:36:33.381]             ...future.result["stdout"] <- base::list(NULL)
[13:36:33.381]         }
[13:36:33.381]         base::close(...future.stdout)
[13:36:33.381]         ...future.stdout <- NULL
[13:36:33.381]     }
[13:36:33.381]     ...future.result$conditions <- ...future.conditions
[13:36:33.381]     ...future.result$finished <- base::Sys.time()
[13:36:33.381]     ...future.result
[13:36:33.381] }
[13:36:33.382] plan(): Setting new future strategy stack:
[13:36:33.382] List of future strategies:
[13:36:33.382] 1. sequential:
[13:36:33.382]    - args: function (..., envir = parent.frame())
[13:36:33.382]    - tweaked: FALSE
[13:36:33.382]    - call: NULL
[13:36:33.383] plan(): nbrOfWorkers() = 1
[13:36:33.383] plan(): Setting new future strategy stack:
[13:36:33.383] List of future strategies:
[13:36:33.383] 1. sequential:
[13:36:33.383]    - args: function (..., envir = parent.frame())
[13:36:33.383]    - tweaked: FALSE
[13:36:33.383]    - call: future::plan("sequential")
[13:36:33.384] plan(): nbrOfWorkers() = 1
[13:36:33.384] SequentialFuture started (and completed)
[13:36:33.384] - Launch lazy future ... done
[13:36:33.384] run() for ‘SequentialFuture’ ... done
> FutureRegistry(where = "test", action = "add", future = f)
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 1
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 2b7a43dc-9265-21fb-cf19-3a7befd66592
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 1)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "add", future = f), error = identity)
[13:36:33.385] ERROR: Cannot add to ‘test’ registry. SequentialFuture is already registered.
> stopifnot(inherits(res, "error"))
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 1)
> 
> 
> FutureRegistry(where = "test", action = "remove", future = f)
list()
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "remove", future = f), error = identity)
[13:36:33.385] ERROR: Cannot remove from ‘test’ registry. SequentialFuture not registered.
> stopifnot(inherits(res, "error"))
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> FutureRegistry(where = "test", action = "reset")
list()
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "<unknown>"), error = identity)
[13:36:33.386] INTERNAL ERROR: Unknown action to ‘test’ registry: <unknown>
> stopifnot(inherits(res, "error"))
> 
> message("*** FutureRegistry() - exceptions ... DONE")
*** FutureRegistry() - exceptions ... DONE
> 
> 
> message("*** FutureRegistry() ... DONE")
*** FutureRegistry() ... DONE
> 
> source("incl/end.R")
[13:36:33.386] plan(): Setting new future strategy stack:
[13:36:33.386] List of future strategies:
[13:36:33.386] 1. FutureStrategy:
[13:36:33.386]    - args: function (..., envir = parent.frame())
[13:36:33.386]    - tweaked: FALSE
[13:36:33.386]    - call: future::plan(oplan)
[13:36:33.398] plan(): nbrOfWorkers() = 1
> 
