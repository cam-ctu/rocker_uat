
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:20:40.581] plan(): Setting new future strategy stack:
[16:20:40.582] List of future strategies:
[16:20:40.582] 1. sequential:
[16:20:40.582]    - args: function (..., envir = parent.frame())
[16:20:40.582]    - tweaked: FALSE
[16:20:40.582]    - call: future::plan("sequential")
[16:20:40.595] plan(): nbrOfWorkers() = 1
> 
> message("*** FutureRegistry() ...")
*** FutureRegistry() ...
> 
> for (where in c(sprintf("multicore-%s", future:::session_uuid()), "rscript")) {
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 1 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 1L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'remove') ...", where))
+   FutureRegistry(where, action = "remove", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 2 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 1L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'collect-first') ...", where))
+   FutureRegistry(where, action = "collect-first")
+ 
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) < 1L)
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 2 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'reset') ...", where))
+   FutureRegistry(where, action = "reset")
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ }
*** FutureRegistry('multicore-89cec9c6-46d7-1c37-eaa1-ceb066cdbb90', 'list') ...
list()
*** FutureRegistry('multicore-89cec9c6-46d7-1c37-eaa1-ceb066cdbb90', 'add') ...
[16:20:40.629] getGlobalsAndPackages() ...
[16:20:40.629] Searching for globals...
[16:20:40.632] - globals found: [1] ‘{’
[16:20:40.632] Searching for globals ... DONE
[16:20:40.633] Resolving globals: FALSE
[16:20:40.633] 
[16:20:40.633] 
[16:20:40.633] getGlobalsAndPackages() ... DONE
[16:20:40.634] run() for ‘Future’ ...
[16:20:40.634] - state: ‘created’
[16:20:40.634] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:40.635] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:40.635] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:40.635]   - Field: ‘label’
[16:20:40.635]   - Field: ‘local’
[16:20:40.635]   - Field: ‘owner’
[16:20:40.635]   - Field: ‘envir’
[16:20:40.635]   - Field: ‘packages’
[16:20:40.635]   - Field: ‘gc’
[16:20:40.635]   - Field: ‘conditions’
[16:20:40.635]   - Field: ‘expr’
[16:20:40.636]   - Field: ‘uuid’
[16:20:40.636]   - Field: ‘seed’
[16:20:40.636]   - Field: ‘version’
[16:20:40.636]   - Field: ‘result’
[16:20:40.636]   - Field: ‘asynchronous’
[16:20:40.636]   - Field: ‘calls’
[16:20:40.636]   - Field: ‘globals’
[16:20:40.636]   - Field: ‘stdout’
[16:20:40.636]   - Field: ‘earlySignal’
[16:20:40.636]   - Field: ‘lazy’
[16:20:40.636]   - Field: ‘state’
[16:20:40.637] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:40.637] - Launch lazy future ...
[16:20:40.637] Packages needed by the future expression (n = 0): <none>
[16:20:40.638] Packages needed by future strategies (n = 0): <none>
[16:20:40.638] {
[16:20:40.638]     {
[16:20:40.638]         {
[16:20:40.638]             ...future.startTime <- base::Sys.time()
[16:20:40.638]             {
[16:20:40.638]                 {
[16:20:40.638]                   {
[16:20:40.638]                     base::local({
[16:20:40.638]                       has_future <- base::requireNamespace("future", 
[16:20:40.638]                         quietly = TRUE)
[16:20:40.638]                       if (has_future) {
[16:20:40.638]                         ns <- base::getNamespace("future")
[16:20:40.638]                         version <- ns[[".package"]][["version"]]
[16:20:40.638]                         if (is.null(version)) 
[16:20:40.638]                           version <- utils::packageVersion("future")
[16:20:40.638]                       }
[16:20:40.638]                       else {
[16:20:40.638]                         version <- NULL
[16:20:40.638]                       }
[16:20:40.638]                       if (!has_future || version < "1.8.0") {
[16:20:40.638]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:40.638]                           "", base::R.version$version.string), 
[16:20:40.638]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:40.638]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:40.638]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:40.638]                             "release", "version")], collapse = " "), 
[16:20:40.638]                           hostname = base::Sys.info()[["nodename"]])
[16:20:40.638]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:40.638]                           info)
[16:20:40.638]                         info <- base::paste(info, collapse = "; ")
[16:20:40.638]                         if (!has_future) {
[16:20:40.638]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:40.638]                             info)
[16:20:40.638]                         }
[16:20:40.638]                         else {
[16:20:40.638]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:40.638]                             info, version)
[16:20:40.638]                         }
[16:20:40.638]                         base::stop(msg)
[16:20:40.638]                       }
[16:20:40.638]                     })
[16:20:40.638]                   }
[16:20:40.638]                   ...future.strategy.old <- future::plan("list")
[16:20:40.638]                   options(future.plan = NULL)
[16:20:40.638]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:40.638]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:40.638]                 }
[16:20:40.638]                 ...future.workdir <- getwd()
[16:20:40.638]             }
[16:20:40.638]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:40.638]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:40.638]         }
[16:20:40.638]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:40.638]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:40.638]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:40.638]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:40.638]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:40.638]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:40.638]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:40.638]             base::names(...future.oldOptions))
[16:20:40.638]     }
[16:20:40.638]     if (FALSE) {
[16:20:40.638]     }
[16:20:40.638]     else {
[16:20:40.638]         if (TRUE) {
[16:20:40.638]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:40.638]                 open = "w")
[16:20:40.638]         }
[16:20:40.638]         else {
[16:20:40.638]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:40.638]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:40.638]         }
[16:20:40.638]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:40.638]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:40.638]             base::sink(type = "output", split = FALSE)
[16:20:40.638]             base::close(...future.stdout)
[16:20:40.638]         }, add = TRUE)
[16:20:40.638]     }
[16:20:40.638]     ...future.frame <- base::sys.nframe()
[16:20:40.638]     ...future.conditions <- base::list()
[16:20:40.638]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:40.638]     if (FALSE) {
[16:20:40.638]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:40.638]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:40.638]     }
[16:20:40.638]     ...future.result <- base::tryCatch({
[16:20:40.638]         base::withCallingHandlers({
[16:20:40.638]             ...future.value <- base::withVisible(base::local({
[16:20:40.638]                 1
[16:20:40.638]             }))
[16:20:40.638]             future::FutureResult(value = ...future.value$value, 
[16:20:40.638]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:40.638]                   ...future.rng), globalenv = if (FALSE) 
[16:20:40.638]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:40.638]                     ...future.globalenv.names))
[16:20:40.638]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:40.638]         }, condition = base::local({
[16:20:40.638]             c <- base::c
[16:20:40.638]             inherits <- base::inherits
[16:20:40.638]             invokeRestart <- base::invokeRestart
[16:20:40.638]             length <- base::length
[16:20:40.638]             list <- base::list
[16:20:40.638]             seq.int <- base::seq.int
[16:20:40.638]             signalCondition <- base::signalCondition
[16:20:40.638]             sys.calls <- base::sys.calls
[16:20:40.638]             `[[` <- base::`[[`
[16:20:40.638]             `+` <- base::`+`
[16:20:40.638]             `<<-` <- base::`<<-`
[16:20:40.638]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:40.638]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:40.638]                   3L)]
[16:20:40.638]             }
[16:20:40.638]             function(cond) {
[16:20:40.638]                 is_error <- inherits(cond, "error")
[16:20:40.638]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:40.638]                   NULL)
[16:20:40.638]                 if (is_error) {
[16:20:40.638]                   sessionInformation <- function() {
[16:20:40.638]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:40.638]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:40.638]                       search = base::search(), system = base::Sys.info())
[16:20:40.638]                   }
[16:20:40.638]                   ...future.conditions[[length(...future.conditions) + 
[16:20:40.638]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:40.638]                     cond$call), session = sessionInformation(), 
[16:20:40.638]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:40.638]                   signalCondition(cond)
[16:20:40.638]                 }
[16:20:40.638]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:40.638]                 "immediateCondition"))) {
[16:20:40.638]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:40.638]                   ...future.conditions[[length(...future.conditions) + 
[16:20:40.638]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:40.638]                   if (TRUE && !signal) {
[16:20:40.638]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:40.638]                     {
[16:20:40.638]                       inherits <- base::inherits
[16:20:40.638]                       invokeRestart <- base::invokeRestart
[16:20:40.638]                       is.null <- base::is.null
[16:20:40.638]                       muffled <- FALSE
[16:20:40.638]                       if (inherits(cond, "message")) {
[16:20:40.638]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:40.638]                         if (muffled) 
[16:20:40.638]                           invokeRestart("muffleMessage")
[16:20:40.638]                       }
[16:20:40.638]                       else if (inherits(cond, "warning")) {
[16:20:40.638]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:40.638]                         if (muffled) 
[16:20:40.638]                           invokeRestart("muffleWarning")
[16:20:40.638]                       }
[16:20:40.638]                       else if (inherits(cond, "condition")) {
[16:20:40.638]                         if (!is.null(pattern)) {
[16:20:40.638]                           computeRestarts <- base::computeRestarts
[16:20:40.638]                           grepl <- base::grepl
[16:20:40.638]                           restarts <- computeRestarts(cond)
[16:20:40.638]                           for (restart in restarts) {
[16:20:40.638]                             name <- restart$name
[16:20:40.638]                             if (is.null(name)) 
[16:20:40.638]                               next
[16:20:40.638]                             if (!grepl(pattern, name)) 
[16:20:40.638]                               next
[16:20:40.638]                             invokeRestart(restart)
[16:20:40.638]                             muffled <- TRUE
[16:20:40.638]                             break
[16:20:40.638]                           }
[16:20:40.638]                         }
[16:20:40.638]                       }
[16:20:40.638]                       invisible(muffled)
[16:20:40.638]                     }
[16:20:40.638]                     muffleCondition(cond, pattern = "^muffle")
[16:20:40.638]                   }
[16:20:40.638]                 }
[16:20:40.638]                 else {
[16:20:40.638]                   if (TRUE) {
[16:20:40.638]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:40.638]                     {
[16:20:40.638]                       inherits <- base::inherits
[16:20:40.638]                       invokeRestart <- base::invokeRestart
[16:20:40.638]                       is.null <- base::is.null
[16:20:40.638]                       muffled <- FALSE
[16:20:40.638]                       if (inherits(cond, "message")) {
[16:20:40.638]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:40.638]                         if (muffled) 
[16:20:40.638]                           invokeRestart("muffleMessage")
[16:20:40.638]                       }
[16:20:40.638]                       else if (inherits(cond, "warning")) {
[16:20:40.638]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:40.638]                         if (muffled) 
[16:20:40.638]                           invokeRestart("muffleWarning")
[16:20:40.638]                       }
[16:20:40.638]                       else if (inherits(cond, "condition")) {
[16:20:40.638]                         if (!is.null(pattern)) {
[16:20:40.638]                           computeRestarts <- base::computeRestarts
[16:20:40.638]                           grepl <- base::grepl
[16:20:40.638]                           restarts <- computeRestarts(cond)
[16:20:40.638]                           for (restart in restarts) {
[16:20:40.638]                             name <- restart$name
[16:20:40.638]                             if (is.null(name)) 
[16:20:40.638]                               next
[16:20:40.638]                             if (!grepl(pattern, name)) 
[16:20:40.638]                               next
[16:20:40.638]                             invokeRestart(restart)
[16:20:40.638]                             muffled <- TRUE
[16:20:40.638]                             break
[16:20:40.638]                           }
[16:20:40.638]                         }
[16:20:40.638]                       }
[16:20:40.638]                       invisible(muffled)
[16:20:40.638]                     }
[16:20:40.638]                     muffleCondition(cond, pattern = "^muffle")
[16:20:40.638]                   }
[16:20:40.638]                 }
[16:20:40.638]             }
[16:20:40.638]         }))
[16:20:40.638]     }, error = function(ex) {
[16:20:40.638]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:40.638]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:40.638]                 ...future.rng), started = ...future.startTime, 
[16:20:40.638]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:40.638]             version = "1.8"), class = "FutureResult")
[16:20:40.638]     }, finally = {
[16:20:40.638]         if (!identical(...future.workdir, getwd())) 
[16:20:40.638]             setwd(...future.workdir)
[16:20:40.638]         {
[16:20:40.638]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:40.638]                 ...future.oldOptions$nwarnings <- NULL
[16:20:40.638]             }
[16:20:40.638]             base::options(...future.oldOptions)
[16:20:40.638]             if (.Platform$OS.type == "windows") {
[16:20:40.638]                 old_names <- names(...future.oldEnvVars)
[16:20:40.638]                 envs <- base::Sys.getenv()
[16:20:40.638]                 names <- names(envs)
[16:20:40.638]                 common <- intersect(names, old_names)
[16:20:40.638]                 added <- setdiff(names, old_names)
[16:20:40.638]                 removed <- setdiff(old_names, names)
[16:20:40.638]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:40.638]                   envs[common]]
[16:20:40.638]                 NAMES <- toupper(changed)
[16:20:40.638]                 args <- list()
[16:20:40.638]                 for (kk in seq_along(NAMES)) {
[16:20:40.638]                   name <- changed[[kk]]
[16:20:40.638]                   NAME <- NAMES[[kk]]
[16:20:40.638]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:40.638]                     next
[16:20:40.638]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:40.638]                 }
[16:20:40.638]                 NAMES <- toupper(added)
[16:20:40.638]                 for (kk in seq_along(NAMES)) {
[16:20:40.638]                   name <- added[[kk]]
[16:20:40.638]                   NAME <- NAMES[[kk]]
[16:20:40.638]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:40.638]                     next
[16:20:40.638]                   args[[name]] <- ""
[16:20:40.638]                 }
[16:20:40.638]                 NAMES <- toupper(removed)
[16:20:40.638]                 for (kk in seq_along(NAMES)) {
[16:20:40.638]                   name <- removed[[kk]]
[16:20:40.638]                   NAME <- NAMES[[kk]]
[16:20:40.638]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:40.638]                     next
[16:20:40.638]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:40.638]                 }
[16:20:40.638]                 if (length(args) > 0) 
[16:20:40.638]                   base::do.call(base::Sys.setenv, args = args)
[16:20:40.638]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:40.638]             }
[16:20:40.638]             else {
[16:20:40.638]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:40.638]             }
[16:20:40.638]             {
[16:20:40.638]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:40.638]                   0L) {
[16:20:40.638]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:40.638]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:40.638]                   base::options(opts)
[16:20:40.638]                 }
[16:20:40.638]                 {
[16:20:40.638]                   {
[16:20:40.638]                     NULL
[16:20:40.638]                     RNGkind("Mersenne-Twister")
[16:20:40.638]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:40.638]                       inherits = FALSE)
[16:20:40.638]                   }
[16:20:40.638]                   options(future.plan = NULL)
[16:20:40.638]                   if (is.na(NA_character_)) 
[16:20:40.638]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:40.638]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:40.638]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:40.638]                     .init = FALSE)
[16:20:40.638]                 }
[16:20:40.638]             }
[16:20:40.638]         }
[16:20:40.638]     })
[16:20:40.638]     if (TRUE) {
[16:20:40.638]         base::sink(type = "output", split = FALSE)
[16:20:40.638]         if (TRUE) {
[16:20:40.638]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:40.638]         }
[16:20:40.638]         else {
[16:20:40.638]             ...future.result["stdout"] <- base::list(NULL)
[16:20:40.638]         }
[16:20:40.638]         base::close(...future.stdout)
[16:20:40.638]         ...future.stdout <- NULL
[16:20:40.638]     }
[16:20:40.638]     ...future.result$conditions <- ...future.conditions
[16:20:40.638]     ...future.result$finished <- base::Sys.time()
[16:20:40.638]     ...future.result
[16:20:40.638] }
[16:20:40.640] plan(): Setting new future strategy stack:
[16:20:40.640] List of future strategies:
[16:20:40.640] 1. sequential:
[16:20:40.640]    - args: function (..., envir = parent.frame())
[16:20:40.640]    - tweaked: FALSE
[16:20:40.640]    - call: NULL
[16:20:40.641] plan(): nbrOfWorkers() = 1
[16:20:40.642] plan(): Setting new future strategy stack:
[16:20:40.642] List of future strategies:
[16:20:40.642] 1. sequential:
[16:20:40.642]    - args: function (..., envir = parent.frame())
[16:20:40.642]    - tweaked: FALSE
[16:20:40.642]    - call: future::plan("sequential")
[16:20:40.642] plan(): nbrOfWorkers() = 1
[16:20:40.642] SequentialFuture started (and completed)
[16:20:40.643] - Launch lazy future ... done
[16:20:40.643] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 89cec9c6-46d7-1c37-eaa1-ceb066cdbb90
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-89cec9c6-46d7-1c37-eaa1-ceb066cdbb90', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 89cec9c6-46d7-1c37-eaa1-ceb066cdbb90
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('multicore-89cec9c6-46d7-1c37-eaa1-ceb066cdbb90', 'remove') ...
*** FutureRegistry('multicore-89cec9c6-46d7-1c37-eaa1-ceb066cdbb90', 'list') ...
list()
*** FutureRegistry('multicore-89cec9c6-46d7-1c37-eaa1-ceb066cdbb90', 'add') ...
[16:20:40.647] getGlobalsAndPackages() ...
[16:20:40.647] Searching for globals...
[16:20:40.647] - globals found: [1] ‘{’
[16:20:40.647] Searching for globals ... DONE
[16:20:40.648] Resolving globals: FALSE
[16:20:40.648] 
[16:20:40.648] 
[16:20:40.648] getGlobalsAndPackages() ... DONE
[16:20:40.648] run() for ‘Future’ ...
[16:20:40.648] - state: ‘created’
[16:20:40.648] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:40.649] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:40.649] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:40.649]   - Field: ‘label’
[16:20:40.649]   - Field: ‘local’
[16:20:40.649]   - Field: ‘owner’
[16:20:40.649]   - Field: ‘envir’
[16:20:40.649]   - Field: ‘packages’
[16:20:40.649]   - Field: ‘gc’
[16:20:40.649]   - Field: ‘conditions’
[16:20:40.650]   - Field: ‘expr’
[16:20:40.650]   - Field: ‘uuid’
[16:20:40.650]   - Field: ‘seed’
[16:20:40.650]   - Field: ‘version’
[16:20:40.650]   - Field: ‘result’
[16:20:40.650]   - Field: ‘asynchronous’
[16:20:40.650]   - Field: ‘calls’
[16:20:40.650]   - Field: ‘globals’
[16:20:40.650]   - Field: ‘stdout’
[16:20:40.650]   - Field: ‘earlySignal’
[16:20:40.650]   - Field: ‘lazy’
[16:20:40.651]   - Field: ‘state’
[16:20:40.651] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:40.651] - Launch lazy future ...
[16:20:40.651] Packages needed by the future expression (n = 0): <none>
[16:20:40.651] Packages needed by future strategies (n = 0): <none>
[16:20:40.651] {
[16:20:40.651]     {
[16:20:40.651]         {
[16:20:40.651]             ...future.startTime <- base::Sys.time()
[16:20:40.651]             {
[16:20:40.651]                 {
[16:20:40.651]                   {
[16:20:40.651]                     base::local({
[16:20:40.651]                       has_future <- base::requireNamespace("future", 
[16:20:40.651]                         quietly = TRUE)
[16:20:40.651]                       if (has_future) {
[16:20:40.651]                         ns <- base::getNamespace("future")
[16:20:40.651]                         version <- ns[[".package"]][["version"]]
[16:20:40.651]                         if (is.null(version)) 
[16:20:40.651]                           version <- utils::packageVersion("future")
[16:20:40.651]                       }
[16:20:40.651]                       else {
[16:20:40.651]                         version <- NULL
[16:20:40.651]                       }
[16:20:40.651]                       if (!has_future || version < "1.8.0") {
[16:20:40.651]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:40.651]                           "", base::R.version$version.string), 
[16:20:40.651]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:40.651]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:40.651]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:40.651]                             "release", "version")], collapse = " "), 
[16:20:40.651]                           hostname = base::Sys.info()[["nodename"]])
[16:20:40.651]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:40.651]                           info)
[16:20:40.651]                         info <- base::paste(info, collapse = "; ")
[16:20:40.651]                         if (!has_future) {
[16:20:40.651]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:40.651]                             info)
[16:20:40.651]                         }
[16:20:40.651]                         else {
[16:20:40.651]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:40.651]                             info, version)
[16:20:40.651]                         }
[16:20:40.651]                         base::stop(msg)
[16:20:40.651]                       }
[16:20:40.651]                     })
[16:20:40.651]                   }
[16:20:40.651]                   ...future.strategy.old <- future::plan("list")
[16:20:40.651]                   options(future.plan = NULL)
[16:20:40.651]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:40.651]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:40.651]                 }
[16:20:40.651]                 ...future.workdir <- getwd()
[16:20:40.651]             }
[16:20:40.651]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:40.651]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:40.651]         }
[16:20:40.651]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:40.651]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:40.651]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:40.651]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:40.651]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:40.651]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:40.651]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:40.651]             base::names(...future.oldOptions))
[16:20:40.651]     }
[16:20:40.651]     if (FALSE) {
[16:20:40.651]     }
[16:20:40.651]     else {
[16:20:40.651]         if (TRUE) {
[16:20:40.651]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:40.651]                 open = "w")
[16:20:40.651]         }
[16:20:40.651]         else {
[16:20:40.651]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:40.651]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:40.651]         }
[16:20:40.651]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:40.651]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:40.651]             base::sink(type = "output", split = FALSE)
[16:20:40.651]             base::close(...future.stdout)
[16:20:40.651]         }, add = TRUE)
[16:20:40.651]     }
[16:20:40.651]     ...future.frame <- base::sys.nframe()
[16:20:40.651]     ...future.conditions <- base::list()
[16:20:40.651]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:40.651]     if (FALSE) {
[16:20:40.651]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:40.651]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:40.651]     }
[16:20:40.651]     ...future.result <- base::tryCatch({
[16:20:40.651]         base::withCallingHandlers({
[16:20:40.651]             ...future.value <- base::withVisible(base::local({
[16:20:40.651]                 2
[16:20:40.651]             }))
[16:20:40.651]             future::FutureResult(value = ...future.value$value, 
[16:20:40.651]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:40.651]                   ...future.rng), globalenv = if (FALSE) 
[16:20:40.651]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:40.651]                     ...future.globalenv.names))
[16:20:40.651]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:40.651]         }, condition = base::local({
[16:20:40.651]             c <- base::c
[16:20:40.651]             inherits <- base::inherits
[16:20:40.651]             invokeRestart <- base::invokeRestart
[16:20:40.651]             length <- base::length
[16:20:40.651]             list <- base::list
[16:20:40.651]             seq.int <- base::seq.int
[16:20:40.651]             signalCondition <- base::signalCondition
[16:20:40.651]             sys.calls <- base::sys.calls
[16:20:40.651]             `[[` <- base::`[[`
[16:20:40.651]             `+` <- base::`+`
[16:20:40.651]             `<<-` <- base::`<<-`
[16:20:40.651]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:40.651]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:40.651]                   3L)]
[16:20:40.651]             }
[16:20:40.651]             function(cond) {
[16:20:40.651]                 is_error <- inherits(cond, "error")
[16:20:40.651]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:40.651]                   NULL)
[16:20:40.651]                 if (is_error) {
[16:20:40.651]                   sessionInformation <- function() {
[16:20:40.651]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:40.651]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:40.651]                       search = base::search(), system = base::Sys.info())
[16:20:40.651]                   }
[16:20:40.651]                   ...future.conditions[[length(...future.conditions) + 
[16:20:40.651]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:40.651]                     cond$call), session = sessionInformation(), 
[16:20:40.651]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:40.651]                   signalCondition(cond)
[16:20:40.651]                 }
[16:20:40.651]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:40.651]                 "immediateCondition"))) {
[16:20:40.651]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:40.651]                   ...future.conditions[[length(...future.conditions) + 
[16:20:40.651]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:40.651]                   if (TRUE && !signal) {
[16:20:40.651]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:40.651]                     {
[16:20:40.651]                       inherits <- base::inherits
[16:20:40.651]                       invokeRestart <- base::invokeRestart
[16:20:40.651]                       is.null <- base::is.null
[16:20:40.651]                       muffled <- FALSE
[16:20:40.651]                       if (inherits(cond, "message")) {
[16:20:40.651]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:40.651]                         if (muffled) 
[16:20:40.651]                           invokeRestart("muffleMessage")
[16:20:40.651]                       }
[16:20:40.651]                       else if (inherits(cond, "warning")) {
[16:20:40.651]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:40.651]                         if (muffled) 
[16:20:40.651]                           invokeRestart("muffleWarning")
[16:20:40.651]                       }
[16:20:40.651]                       else if (inherits(cond, "condition")) {
[16:20:40.651]                         if (!is.null(pattern)) {
[16:20:40.651]                           computeRestarts <- base::computeRestarts
[16:20:40.651]                           grepl <- base::grepl
[16:20:40.651]                           restarts <- computeRestarts(cond)
[16:20:40.651]                           for (restart in restarts) {
[16:20:40.651]                             name <- restart$name
[16:20:40.651]                             if (is.null(name)) 
[16:20:40.651]                               next
[16:20:40.651]                             if (!grepl(pattern, name)) 
[16:20:40.651]                               next
[16:20:40.651]                             invokeRestart(restart)
[16:20:40.651]                             muffled <- TRUE
[16:20:40.651]                             break
[16:20:40.651]                           }
[16:20:40.651]                         }
[16:20:40.651]                       }
[16:20:40.651]                       invisible(muffled)
[16:20:40.651]                     }
[16:20:40.651]                     muffleCondition(cond, pattern = "^muffle")
[16:20:40.651]                   }
[16:20:40.651]                 }
[16:20:40.651]                 else {
[16:20:40.651]                   if (TRUE) {
[16:20:40.651]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:40.651]                     {
[16:20:40.651]                       inherits <- base::inherits
[16:20:40.651]                       invokeRestart <- base::invokeRestart
[16:20:40.651]                       is.null <- base::is.null
[16:20:40.651]                       muffled <- FALSE
[16:20:40.651]                       if (inherits(cond, "message")) {
[16:20:40.651]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:40.651]                         if (muffled) 
[16:20:40.651]                           invokeRestart("muffleMessage")
[16:20:40.651]                       }
[16:20:40.651]                       else if (inherits(cond, "warning")) {
[16:20:40.651]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:40.651]                         if (muffled) 
[16:20:40.651]                           invokeRestart("muffleWarning")
[16:20:40.651]                       }
[16:20:40.651]                       else if (inherits(cond, "condition")) {
[16:20:40.651]                         if (!is.null(pattern)) {
[16:20:40.651]                           computeRestarts <- base::computeRestarts
[16:20:40.651]                           grepl <- base::grepl
[16:20:40.651]                           restarts <- computeRestarts(cond)
[16:20:40.651]                           for (restart in restarts) {
[16:20:40.651]                             name <- restart$name
[16:20:40.651]                             if (is.null(name)) 
[16:20:40.651]                               next
[16:20:40.651]                             if (!grepl(pattern, name)) 
[16:20:40.651]                               next
[16:20:40.651]                             invokeRestart(restart)
[16:20:40.651]                             muffled <- TRUE
[16:20:40.651]                             break
[16:20:40.651]                           }
[16:20:40.651]                         }
[16:20:40.651]                       }
[16:20:40.651]                       invisible(muffled)
[16:20:40.651]                     }
[16:20:40.651]                     muffleCondition(cond, pattern = "^muffle")
[16:20:40.651]                   }
[16:20:40.651]                 }
[16:20:40.651]             }
[16:20:40.651]         }))
[16:20:40.651]     }, error = function(ex) {
[16:20:40.651]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:40.651]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:40.651]                 ...future.rng), started = ...future.startTime, 
[16:20:40.651]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:40.651]             version = "1.8"), class = "FutureResult")
[16:20:40.651]     }, finally = {
[16:20:40.651]         if (!identical(...future.workdir, getwd())) 
[16:20:40.651]             setwd(...future.workdir)
[16:20:40.651]         {
[16:20:40.651]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:40.651]                 ...future.oldOptions$nwarnings <- NULL
[16:20:40.651]             }
[16:20:40.651]             base::options(...future.oldOptions)
[16:20:40.651]             if (.Platform$OS.type == "windows") {
[16:20:40.651]                 old_names <- names(...future.oldEnvVars)
[16:20:40.651]                 envs <- base::Sys.getenv()
[16:20:40.651]                 names <- names(envs)
[16:20:40.651]                 common <- intersect(names, old_names)
[16:20:40.651]                 added <- setdiff(names, old_names)
[16:20:40.651]                 removed <- setdiff(old_names, names)
[16:20:40.651]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:40.651]                   envs[common]]
[16:20:40.651]                 NAMES <- toupper(changed)
[16:20:40.651]                 args <- list()
[16:20:40.651]                 for (kk in seq_along(NAMES)) {
[16:20:40.651]                   name <- changed[[kk]]
[16:20:40.651]                   NAME <- NAMES[[kk]]
[16:20:40.651]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:40.651]                     next
[16:20:40.651]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:40.651]                 }
[16:20:40.651]                 NAMES <- toupper(added)
[16:20:40.651]                 for (kk in seq_along(NAMES)) {
[16:20:40.651]                   name <- added[[kk]]
[16:20:40.651]                   NAME <- NAMES[[kk]]
[16:20:40.651]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:40.651]                     next
[16:20:40.651]                   args[[name]] <- ""
[16:20:40.651]                 }
[16:20:40.651]                 NAMES <- toupper(removed)
[16:20:40.651]                 for (kk in seq_along(NAMES)) {
[16:20:40.651]                   name <- removed[[kk]]
[16:20:40.651]                   NAME <- NAMES[[kk]]
[16:20:40.651]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:40.651]                     next
[16:20:40.651]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:40.651]                 }
[16:20:40.651]                 if (length(args) > 0) 
[16:20:40.651]                   base::do.call(base::Sys.setenv, args = args)
[16:20:40.651]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:40.651]             }
[16:20:40.651]             else {
[16:20:40.651]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:40.651]             }
[16:20:40.651]             {
[16:20:40.651]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:40.651]                   0L) {
[16:20:40.651]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:40.651]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:40.651]                   base::options(opts)
[16:20:40.651]                 }
[16:20:40.651]                 {
[16:20:40.651]                   {
[16:20:40.651]                     NULL
[16:20:40.651]                     RNGkind("Mersenne-Twister")
[16:20:40.651]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:40.651]                       inherits = FALSE)
[16:20:40.651]                   }
[16:20:40.651]                   options(future.plan = NULL)
[16:20:40.651]                   if (is.na(NA_character_)) 
[16:20:40.651]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:40.651]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:40.651]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:40.651]                     .init = FALSE)
[16:20:40.651]                 }
[16:20:40.651]             }
[16:20:40.651]         }
[16:20:40.651]     })
[16:20:40.651]     if (TRUE) {
[16:20:40.651]         base::sink(type = "output", split = FALSE)
[16:20:40.651]         if (TRUE) {
[16:20:40.651]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:40.651]         }
[16:20:40.651]         else {
[16:20:40.651]             ...future.result["stdout"] <- base::list(NULL)
[16:20:40.651]         }
[16:20:40.651]         base::close(...future.stdout)
[16:20:40.651]         ...future.stdout <- NULL
[16:20:40.651]     }
[16:20:40.651]     ...future.result$conditions <- ...future.conditions
[16:20:40.651]     ...future.result$finished <- base::Sys.time()
[16:20:40.651]     ...future.result
[16:20:40.651] }
[16:20:40.653] plan(): Setting new future strategy stack:
[16:20:40.653] List of future strategies:
[16:20:40.653] 1. sequential:
[16:20:40.653]    - args: function (..., envir = parent.frame())
[16:20:40.653]    - tweaked: FALSE
[16:20:40.653]    - call: NULL
[16:20:40.654] plan(): nbrOfWorkers() = 1
[16:20:40.654] plan(): Setting new future strategy stack:
[16:20:40.654] List of future strategies:
[16:20:40.654] 1. sequential:
[16:20:40.654]    - args: function (..., envir = parent.frame())
[16:20:40.654]    - tweaked: FALSE
[16:20:40.654]    - call: future::plan("sequential")
[16:20:40.655] plan(): nbrOfWorkers() = 1
[16:20:40.655] SequentialFuture started (and completed)
[16:20:40.655] - Launch lazy future ... done
[16:20:40.655] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 89cec9c6-46d7-1c37-eaa1-ceb066cdbb90
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-89cec9c6-46d7-1c37-eaa1-ceb066cdbb90', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 89cec9c6-46d7-1c37-eaa1-ceb066cdbb90
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('multicore-89cec9c6-46d7-1c37-eaa1-ceb066cdbb90', 'collect-first') ...
[16:20:40.656] resolved() for ‘SequentialFuture’ ...
[16:20:40.656] - state: ‘finished’
[16:20:40.657] - run: FALSE
[16:20:40.657] - result: ‘FutureResult’
[16:20:40.657] resolved() for ‘SequentialFuture’ ... done
list()
*** FutureRegistry('multicore-89cec9c6-46d7-1c37-eaa1-ceb066cdbb90', 'add') ...
[16:20:40.657] getGlobalsAndPackages() ...
[16:20:40.657] Searching for globals...
[16:20:40.658] - globals found: [1] ‘{’
[16:20:40.658] Searching for globals ... DONE
[16:20:40.658] Resolving globals: FALSE
[16:20:40.658] 
[16:20:40.658] 
[16:20:40.659] getGlobalsAndPackages() ... DONE
[16:20:40.659] run() for ‘Future’ ...
[16:20:40.659] - state: ‘created’
[16:20:40.659] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:40.659] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:40.659] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:40.659]   - Field: ‘label’
[16:20:40.660]   - Field: ‘local’
[16:20:40.660]   - Field: ‘owner’
[16:20:40.660]   - Field: ‘envir’
[16:20:40.660]   - Field: ‘packages’
[16:20:40.660]   - Field: ‘gc’
[16:20:40.660]   - Field: ‘conditions’
[16:20:40.660]   - Field: ‘expr’
[16:20:40.660]   - Field: ‘uuid’
[16:20:40.660]   - Field: ‘seed’
[16:20:40.660]   - Field: ‘version’
[16:20:40.660]   - Field: ‘result’
[16:20:40.661]   - Field: ‘asynchronous’
[16:20:40.661]   - Field: ‘calls’
[16:20:40.661]   - Field: ‘globals’
[16:20:40.661]   - Field: ‘stdout’
[16:20:40.661]   - Field: ‘earlySignal’
[16:20:40.661]   - Field: ‘lazy’
[16:20:40.661]   - Field: ‘state’
[16:20:40.661] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:40.661] - Launch lazy future ...
[16:20:40.661] Packages needed by the future expression (n = 0): <none>
[16:20:40.662] Packages needed by future strategies (n = 0): <none>
[16:20:40.662] {
[16:20:40.662]     {
[16:20:40.662]         {
[16:20:40.662]             ...future.startTime <- base::Sys.time()
[16:20:40.662]             {
[16:20:40.662]                 {
[16:20:40.662]                   {
[16:20:40.662]                     base::local({
[16:20:40.662]                       has_future <- base::requireNamespace("future", 
[16:20:40.662]                         quietly = TRUE)
[16:20:40.662]                       if (has_future) {
[16:20:40.662]                         ns <- base::getNamespace("future")
[16:20:40.662]                         version <- ns[[".package"]][["version"]]
[16:20:40.662]                         if (is.null(version)) 
[16:20:40.662]                           version <- utils::packageVersion("future")
[16:20:40.662]                       }
[16:20:40.662]                       else {
[16:20:40.662]                         version <- NULL
[16:20:40.662]                       }
[16:20:40.662]                       if (!has_future || version < "1.8.0") {
[16:20:40.662]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:40.662]                           "", base::R.version$version.string), 
[16:20:40.662]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:40.662]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:40.662]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:40.662]                             "release", "version")], collapse = " "), 
[16:20:40.662]                           hostname = base::Sys.info()[["nodename"]])
[16:20:40.662]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:40.662]                           info)
[16:20:40.662]                         info <- base::paste(info, collapse = "; ")
[16:20:40.662]                         if (!has_future) {
[16:20:40.662]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:40.662]                             info)
[16:20:40.662]                         }
[16:20:40.662]                         else {
[16:20:40.662]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:40.662]                             info, version)
[16:20:40.662]                         }
[16:20:40.662]                         base::stop(msg)
[16:20:40.662]                       }
[16:20:40.662]                     })
[16:20:40.662]                   }
[16:20:40.662]                   ...future.strategy.old <- future::plan("list")
[16:20:40.662]                   options(future.plan = NULL)
[16:20:40.662]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:40.662]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:40.662]                 }
[16:20:40.662]                 ...future.workdir <- getwd()
[16:20:40.662]             }
[16:20:40.662]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:40.662]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:40.662]         }
[16:20:40.662]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:40.662]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:40.662]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:40.662]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:40.662]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:40.662]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:40.662]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:40.662]             base::names(...future.oldOptions))
[16:20:40.662]     }
[16:20:40.662]     if (FALSE) {
[16:20:40.662]     }
[16:20:40.662]     else {
[16:20:40.662]         if (TRUE) {
[16:20:40.662]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:40.662]                 open = "w")
[16:20:40.662]         }
[16:20:40.662]         else {
[16:20:40.662]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:40.662]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:40.662]         }
[16:20:40.662]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:40.662]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:40.662]             base::sink(type = "output", split = FALSE)
[16:20:40.662]             base::close(...future.stdout)
[16:20:40.662]         }, add = TRUE)
[16:20:40.662]     }
[16:20:40.662]     ...future.frame <- base::sys.nframe()
[16:20:40.662]     ...future.conditions <- base::list()
[16:20:40.662]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:40.662]     if (FALSE) {
[16:20:40.662]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:40.662]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:40.662]     }
[16:20:40.662]     ...future.result <- base::tryCatch({
[16:20:40.662]         base::withCallingHandlers({
[16:20:40.662]             ...future.value <- base::withVisible(base::local({
[16:20:40.662]                 2
[16:20:40.662]             }))
[16:20:40.662]             future::FutureResult(value = ...future.value$value, 
[16:20:40.662]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:40.662]                   ...future.rng), globalenv = if (FALSE) 
[16:20:40.662]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:40.662]                     ...future.globalenv.names))
[16:20:40.662]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:40.662]         }, condition = base::local({
[16:20:40.662]             c <- base::c
[16:20:40.662]             inherits <- base::inherits
[16:20:40.662]             invokeRestart <- base::invokeRestart
[16:20:40.662]             length <- base::length
[16:20:40.662]             list <- base::list
[16:20:40.662]             seq.int <- base::seq.int
[16:20:40.662]             signalCondition <- base::signalCondition
[16:20:40.662]             sys.calls <- base::sys.calls
[16:20:40.662]             `[[` <- base::`[[`
[16:20:40.662]             `+` <- base::`+`
[16:20:40.662]             `<<-` <- base::`<<-`
[16:20:40.662]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:40.662]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:40.662]                   3L)]
[16:20:40.662]             }
[16:20:40.662]             function(cond) {
[16:20:40.662]                 is_error <- inherits(cond, "error")
[16:20:40.662]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:40.662]                   NULL)
[16:20:40.662]                 if (is_error) {
[16:20:40.662]                   sessionInformation <- function() {
[16:20:40.662]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:40.662]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:40.662]                       search = base::search(), system = base::Sys.info())
[16:20:40.662]                   }
[16:20:40.662]                   ...future.conditions[[length(...future.conditions) + 
[16:20:40.662]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:40.662]                     cond$call), session = sessionInformation(), 
[16:20:40.662]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:40.662]                   signalCondition(cond)
[16:20:40.662]                 }
[16:20:40.662]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:40.662]                 "immediateCondition"))) {
[16:20:40.662]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:40.662]                   ...future.conditions[[length(...future.conditions) + 
[16:20:40.662]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:40.662]                   if (TRUE && !signal) {
[16:20:40.662]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:40.662]                     {
[16:20:40.662]                       inherits <- base::inherits
[16:20:40.662]                       invokeRestart <- base::invokeRestart
[16:20:40.662]                       is.null <- base::is.null
[16:20:40.662]                       muffled <- FALSE
[16:20:40.662]                       if (inherits(cond, "message")) {
[16:20:40.662]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:40.662]                         if (muffled) 
[16:20:40.662]                           invokeRestart("muffleMessage")
[16:20:40.662]                       }
[16:20:40.662]                       else if (inherits(cond, "warning")) {
[16:20:40.662]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:40.662]                         if (muffled) 
[16:20:40.662]                           invokeRestart("muffleWarning")
[16:20:40.662]                       }
[16:20:40.662]                       else if (inherits(cond, "condition")) {
[16:20:40.662]                         if (!is.null(pattern)) {
[16:20:40.662]                           computeRestarts <- base::computeRestarts
[16:20:40.662]                           grepl <- base::grepl
[16:20:40.662]                           restarts <- computeRestarts(cond)
[16:20:40.662]                           for (restart in restarts) {
[16:20:40.662]                             name <- restart$name
[16:20:40.662]                             if (is.null(name)) 
[16:20:40.662]                               next
[16:20:40.662]                             if (!grepl(pattern, name)) 
[16:20:40.662]                               next
[16:20:40.662]                             invokeRestart(restart)
[16:20:40.662]                             muffled <- TRUE
[16:20:40.662]                             break
[16:20:40.662]                           }
[16:20:40.662]                         }
[16:20:40.662]                       }
[16:20:40.662]                       invisible(muffled)
[16:20:40.662]                     }
[16:20:40.662]                     muffleCondition(cond, pattern = "^muffle")
[16:20:40.662]                   }
[16:20:40.662]                 }
[16:20:40.662]                 else {
[16:20:40.662]                   if (TRUE) {
[16:20:40.662]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:40.662]                     {
[16:20:40.662]                       inherits <- base::inherits
[16:20:40.662]                       invokeRestart <- base::invokeRestart
[16:20:40.662]                       is.null <- base::is.null
[16:20:40.662]                       muffled <- FALSE
[16:20:40.662]                       if (inherits(cond, "message")) {
[16:20:40.662]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:40.662]                         if (muffled) 
[16:20:40.662]                           invokeRestart("muffleMessage")
[16:20:40.662]                       }
[16:20:40.662]                       else if (inherits(cond, "warning")) {
[16:20:40.662]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:40.662]                         if (muffled) 
[16:20:40.662]                           invokeRestart("muffleWarning")
[16:20:40.662]                       }
[16:20:40.662]                       else if (inherits(cond, "condition")) {
[16:20:40.662]                         if (!is.null(pattern)) {
[16:20:40.662]                           computeRestarts <- base::computeRestarts
[16:20:40.662]                           grepl <- base::grepl
[16:20:40.662]                           restarts <- computeRestarts(cond)
[16:20:40.662]                           for (restart in restarts) {
[16:20:40.662]                             name <- restart$name
[16:20:40.662]                             if (is.null(name)) 
[16:20:40.662]                               next
[16:20:40.662]                             if (!grepl(pattern, name)) 
[16:20:40.662]                               next
[16:20:40.662]                             invokeRestart(restart)
[16:20:40.662]                             muffled <- TRUE
[16:20:40.662]                             break
[16:20:40.662]                           }
[16:20:40.662]                         }
[16:20:40.662]                       }
[16:20:40.662]                       invisible(muffled)
[16:20:40.662]                     }
[16:20:40.662]                     muffleCondition(cond, pattern = "^muffle")
[16:20:40.662]                   }
[16:20:40.662]                 }
[16:20:40.662]             }
[16:20:40.662]         }))
[16:20:40.662]     }, error = function(ex) {
[16:20:40.662]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:40.662]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:40.662]                 ...future.rng), started = ...future.startTime, 
[16:20:40.662]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:40.662]             version = "1.8"), class = "FutureResult")
[16:20:40.662]     }, finally = {
[16:20:40.662]         if (!identical(...future.workdir, getwd())) 
[16:20:40.662]             setwd(...future.workdir)
[16:20:40.662]         {
[16:20:40.662]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:40.662]                 ...future.oldOptions$nwarnings <- NULL
[16:20:40.662]             }
[16:20:40.662]             base::options(...future.oldOptions)
[16:20:40.662]             if (.Platform$OS.type == "windows") {
[16:20:40.662]                 old_names <- names(...future.oldEnvVars)
[16:20:40.662]                 envs <- base::Sys.getenv()
[16:20:40.662]                 names <- names(envs)
[16:20:40.662]                 common <- intersect(names, old_names)
[16:20:40.662]                 added <- setdiff(names, old_names)
[16:20:40.662]                 removed <- setdiff(old_names, names)
[16:20:40.662]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:40.662]                   envs[common]]
[16:20:40.662]                 NAMES <- toupper(changed)
[16:20:40.662]                 args <- list()
[16:20:40.662]                 for (kk in seq_along(NAMES)) {
[16:20:40.662]                   name <- changed[[kk]]
[16:20:40.662]                   NAME <- NAMES[[kk]]
[16:20:40.662]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:40.662]                     next
[16:20:40.662]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:40.662]                 }
[16:20:40.662]                 NAMES <- toupper(added)
[16:20:40.662]                 for (kk in seq_along(NAMES)) {
[16:20:40.662]                   name <- added[[kk]]
[16:20:40.662]                   NAME <- NAMES[[kk]]
[16:20:40.662]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:40.662]                     next
[16:20:40.662]                   args[[name]] <- ""
[16:20:40.662]                 }
[16:20:40.662]                 NAMES <- toupper(removed)
[16:20:40.662]                 for (kk in seq_along(NAMES)) {
[16:20:40.662]                   name <- removed[[kk]]
[16:20:40.662]                   NAME <- NAMES[[kk]]
[16:20:40.662]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:40.662]                     next
[16:20:40.662]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:40.662]                 }
[16:20:40.662]                 if (length(args) > 0) 
[16:20:40.662]                   base::do.call(base::Sys.setenv, args = args)
[16:20:40.662]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:40.662]             }
[16:20:40.662]             else {
[16:20:40.662]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:40.662]             }
[16:20:40.662]             {
[16:20:40.662]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:40.662]                   0L) {
[16:20:40.662]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:40.662]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:40.662]                   base::options(opts)
[16:20:40.662]                 }
[16:20:40.662]                 {
[16:20:40.662]                   {
[16:20:40.662]                     NULL
[16:20:40.662]                     RNGkind("Mersenne-Twister")
[16:20:40.662]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:40.662]                       inherits = FALSE)
[16:20:40.662]                   }
[16:20:40.662]                   options(future.plan = NULL)
[16:20:40.662]                   if (is.na(NA_character_)) 
[16:20:40.662]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:40.662]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:40.662]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:40.662]                     .init = FALSE)
[16:20:40.662]                 }
[16:20:40.662]             }
[16:20:40.662]         }
[16:20:40.662]     })
[16:20:40.662]     if (TRUE) {
[16:20:40.662]         base::sink(type = "output", split = FALSE)
[16:20:40.662]         if (TRUE) {
[16:20:40.662]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:40.662]         }
[16:20:40.662]         else {
[16:20:40.662]             ...future.result["stdout"] <- base::list(NULL)
[16:20:40.662]         }
[16:20:40.662]         base::close(...future.stdout)
[16:20:40.662]         ...future.stdout <- NULL
[16:20:40.662]     }
[16:20:40.662]     ...future.result$conditions <- ...future.conditions
[16:20:40.662]     ...future.result$finished <- base::Sys.time()
[16:20:40.662]     ...future.result
[16:20:40.662] }
[16:20:40.664] plan(): Setting new future strategy stack:
[16:20:40.664] List of future strategies:
[16:20:40.664] 1. sequential:
[16:20:40.664]    - args: function (..., envir = parent.frame())
[16:20:40.664]    - tweaked: FALSE
[16:20:40.664]    - call: NULL
[16:20:40.664] plan(): nbrOfWorkers() = 1
[16:20:40.665] plan(): Setting new future strategy stack:
[16:20:40.665] List of future strategies:
[16:20:40.665] 1. sequential:
[16:20:40.665]    - args: function (..., envir = parent.frame())
[16:20:40.665]    - tweaked: FALSE
[16:20:40.665]    - call: future::plan("sequential")
[16:20:40.665] plan(): nbrOfWorkers() = 1
[16:20:40.665] SequentialFuture started (and completed)
[16:20:40.666] - Launch lazy future ... done
[16:20:40.666] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 89cec9c6-46d7-1c37-eaa1-ceb066cdbb90
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-89cec9c6-46d7-1c37-eaa1-ceb066cdbb90', 'reset') ...
*** FutureRegistry('multicore-89cec9c6-46d7-1c37-eaa1-ceb066cdbb90', 'list') ...
list()
*** FutureRegistry('rscript', 'list') ...
list()
*** FutureRegistry('rscript', 'add') ...
[16:20:40.668] getGlobalsAndPackages() ...
[16:20:40.669] Searching for globals...
[16:20:40.669] - globals found: [1] ‘{’
[16:20:40.669] Searching for globals ... DONE
[16:20:40.669] Resolving globals: FALSE
[16:20:40.670] 
[16:20:40.670] 
[16:20:40.670] getGlobalsAndPackages() ... DONE
[16:20:40.670] run() for ‘Future’ ...
[16:20:40.670] - state: ‘created’
[16:20:40.670] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:40.670] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:40.671] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:40.671]   - Field: ‘label’
[16:20:40.671]   - Field: ‘local’
[16:20:40.671]   - Field: ‘owner’
[16:20:40.671]   - Field: ‘envir’
[16:20:40.671]   - Field: ‘packages’
[16:20:40.671]   - Field: ‘gc’
[16:20:40.671]   - Field: ‘conditions’
[16:20:40.671]   - Field: ‘expr’
[16:20:40.671]   - Field: ‘uuid’
[16:20:40.671]   - Field: ‘seed’
[16:20:40.672]   - Field: ‘version’
[16:20:40.672]   - Field: ‘result’
[16:20:40.672]   - Field: ‘asynchronous’
[16:20:40.672]   - Field: ‘calls’
[16:20:40.672]   - Field: ‘globals’
[16:20:40.672]   - Field: ‘stdout’
[16:20:40.672]   - Field: ‘earlySignal’
[16:20:40.672]   - Field: ‘lazy’
[16:20:40.672]   - Field: ‘state’
[16:20:40.672] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:40.672] - Launch lazy future ...
[16:20:40.673] Packages needed by the future expression (n = 0): <none>
[16:20:40.673] Packages needed by future strategies (n = 0): <none>
[16:20:40.673] {
[16:20:40.673]     {
[16:20:40.673]         {
[16:20:40.673]             ...future.startTime <- base::Sys.time()
[16:20:40.673]             {
[16:20:40.673]                 {
[16:20:40.673]                   {
[16:20:40.673]                     base::local({
[16:20:40.673]                       has_future <- base::requireNamespace("future", 
[16:20:40.673]                         quietly = TRUE)
[16:20:40.673]                       if (has_future) {
[16:20:40.673]                         ns <- base::getNamespace("future")
[16:20:40.673]                         version <- ns[[".package"]][["version"]]
[16:20:40.673]                         if (is.null(version)) 
[16:20:40.673]                           version <- utils::packageVersion("future")
[16:20:40.673]                       }
[16:20:40.673]                       else {
[16:20:40.673]                         version <- NULL
[16:20:40.673]                       }
[16:20:40.673]                       if (!has_future || version < "1.8.0") {
[16:20:40.673]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:40.673]                           "", base::R.version$version.string), 
[16:20:40.673]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:40.673]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:40.673]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:40.673]                             "release", "version")], collapse = " "), 
[16:20:40.673]                           hostname = base::Sys.info()[["nodename"]])
[16:20:40.673]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:40.673]                           info)
[16:20:40.673]                         info <- base::paste(info, collapse = "; ")
[16:20:40.673]                         if (!has_future) {
[16:20:40.673]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:40.673]                             info)
[16:20:40.673]                         }
[16:20:40.673]                         else {
[16:20:40.673]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:40.673]                             info, version)
[16:20:40.673]                         }
[16:20:40.673]                         base::stop(msg)
[16:20:40.673]                       }
[16:20:40.673]                     })
[16:20:40.673]                   }
[16:20:40.673]                   ...future.strategy.old <- future::plan("list")
[16:20:40.673]                   options(future.plan = NULL)
[16:20:40.673]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:40.673]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:40.673]                 }
[16:20:40.673]                 ...future.workdir <- getwd()
[16:20:40.673]             }
[16:20:40.673]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:40.673]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:40.673]         }
[16:20:40.673]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:40.673]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:40.673]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:40.673]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:40.673]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:40.673]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:40.673]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:40.673]             base::names(...future.oldOptions))
[16:20:40.673]     }
[16:20:40.673]     if (FALSE) {
[16:20:40.673]     }
[16:20:40.673]     else {
[16:20:40.673]         if (TRUE) {
[16:20:40.673]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:40.673]                 open = "w")
[16:20:40.673]         }
[16:20:40.673]         else {
[16:20:40.673]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:40.673]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:40.673]         }
[16:20:40.673]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:40.673]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:40.673]             base::sink(type = "output", split = FALSE)
[16:20:40.673]             base::close(...future.stdout)
[16:20:40.673]         }, add = TRUE)
[16:20:40.673]     }
[16:20:40.673]     ...future.frame <- base::sys.nframe()
[16:20:40.673]     ...future.conditions <- base::list()
[16:20:40.673]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:40.673]     if (FALSE) {
[16:20:40.673]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:40.673]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:40.673]     }
[16:20:40.673]     ...future.result <- base::tryCatch({
[16:20:40.673]         base::withCallingHandlers({
[16:20:40.673]             ...future.value <- base::withVisible(base::local({
[16:20:40.673]                 1
[16:20:40.673]             }))
[16:20:40.673]             future::FutureResult(value = ...future.value$value, 
[16:20:40.673]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:40.673]                   ...future.rng), globalenv = if (FALSE) 
[16:20:40.673]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:40.673]                     ...future.globalenv.names))
[16:20:40.673]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:40.673]         }, condition = base::local({
[16:20:40.673]             c <- base::c
[16:20:40.673]             inherits <- base::inherits
[16:20:40.673]             invokeRestart <- base::invokeRestart
[16:20:40.673]             length <- base::length
[16:20:40.673]             list <- base::list
[16:20:40.673]             seq.int <- base::seq.int
[16:20:40.673]             signalCondition <- base::signalCondition
[16:20:40.673]             sys.calls <- base::sys.calls
[16:20:40.673]             `[[` <- base::`[[`
[16:20:40.673]             `+` <- base::`+`
[16:20:40.673]             `<<-` <- base::`<<-`
[16:20:40.673]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:40.673]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:40.673]                   3L)]
[16:20:40.673]             }
[16:20:40.673]             function(cond) {
[16:20:40.673]                 is_error <- inherits(cond, "error")
[16:20:40.673]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:40.673]                   NULL)
[16:20:40.673]                 if (is_error) {
[16:20:40.673]                   sessionInformation <- function() {
[16:20:40.673]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:40.673]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:40.673]                       search = base::search(), system = base::Sys.info())
[16:20:40.673]                   }
[16:20:40.673]                   ...future.conditions[[length(...future.conditions) + 
[16:20:40.673]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:40.673]                     cond$call), session = sessionInformation(), 
[16:20:40.673]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:40.673]                   signalCondition(cond)
[16:20:40.673]                 }
[16:20:40.673]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:40.673]                 "immediateCondition"))) {
[16:20:40.673]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:40.673]                   ...future.conditions[[length(...future.conditions) + 
[16:20:40.673]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:40.673]                   if (TRUE && !signal) {
[16:20:40.673]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:40.673]                     {
[16:20:40.673]                       inherits <- base::inherits
[16:20:40.673]                       invokeRestart <- base::invokeRestart
[16:20:40.673]                       is.null <- base::is.null
[16:20:40.673]                       muffled <- FALSE
[16:20:40.673]                       if (inherits(cond, "message")) {
[16:20:40.673]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:40.673]                         if (muffled) 
[16:20:40.673]                           invokeRestart("muffleMessage")
[16:20:40.673]                       }
[16:20:40.673]                       else if (inherits(cond, "warning")) {
[16:20:40.673]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:40.673]                         if (muffled) 
[16:20:40.673]                           invokeRestart("muffleWarning")
[16:20:40.673]                       }
[16:20:40.673]                       else if (inherits(cond, "condition")) {
[16:20:40.673]                         if (!is.null(pattern)) {
[16:20:40.673]                           computeRestarts <- base::computeRestarts
[16:20:40.673]                           grepl <- base::grepl
[16:20:40.673]                           restarts <- computeRestarts(cond)
[16:20:40.673]                           for (restart in restarts) {
[16:20:40.673]                             name <- restart$name
[16:20:40.673]                             if (is.null(name)) 
[16:20:40.673]                               next
[16:20:40.673]                             if (!grepl(pattern, name)) 
[16:20:40.673]                               next
[16:20:40.673]                             invokeRestart(restart)
[16:20:40.673]                             muffled <- TRUE
[16:20:40.673]                             break
[16:20:40.673]                           }
[16:20:40.673]                         }
[16:20:40.673]                       }
[16:20:40.673]                       invisible(muffled)
[16:20:40.673]                     }
[16:20:40.673]                     muffleCondition(cond, pattern = "^muffle")
[16:20:40.673]                   }
[16:20:40.673]                 }
[16:20:40.673]                 else {
[16:20:40.673]                   if (TRUE) {
[16:20:40.673]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:40.673]                     {
[16:20:40.673]                       inherits <- base::inherits
[16:20:40.673]                       invokeRestart <- base::invokeRestart
[16:20:40.673]                       is.null <- base::is.null
[16:20:40.673]                       muffled <- FALSE
[16:20:40.673]                       if (inherits(cond, "message")) {
[16:20:40.673]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:40.673]                         if (muffled) 
[16:20:40.673]                           invokeRestart("muffleMessage")
[16:20:40.673]                       }
[16:20:40.673]                       else if (inherits(cond, "warning")) {
[16:20:40.673]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:40.673]                         if (muffled) 
[16:20:40.673]                           invokeRestart("muffleWarning")
[16:20:40.673]                       }
[16:20:40.673]                       else if (inherits(cond, "condition")) {
[16:20:40.673]                         if (!is.null(pattern)) {
[16:20:40.673]                           computeRestarts <- base::computeRestarts
[16:20:40.673]                           grepl <- base::grepl
[16:20:40.673]                           restarts <- computeRestarts(cond)
[16:20:40.673]                           for (restart in restarts) {
[16:20:40.673]                             name <- restart$name
[16:20:40.673]                             if (is.null(name)) 
[16:20:40.673]                               next
[16:20:40.673]                             if (!grepl(pattern, name)) 
[16:20:40.673]                               next
[16:20:40.673]                             invokeRestart(restart)
[16:20:40.673]                             muffled <- TRUE
[16:20:40.673]                             break
[16:20:40.673]                           }
[16:20:40.673]                         }
[16:20:40.673]                       }
[16:20:40.673]                       invisible(muffled)
[16:20:40.673]                     }
[16:20:40.673]                     muffleCondition(cond, pattern = "^muffle")
[16:20:40.673]                   }
[16:20:40.673]                 }
[16:20:40.673]             }
[16:20:40.673]         }))
[16:20:40.673]     }, error = function(ex) {
[16:20:40.673]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:40.673]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:40.673]                 ...future.rng), started = ...future.startTime, 
[16:20:40.673]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:40.673]             version = "1.8"), class = "FutureResult")
[16:20:40.673]     }, finally = {
[16:20:40.673]         if (!identical(...future.workdir, getwd())) 
[16:20:40.673]             setwd(...future.workdir)
[16:20:40.673]         {
[16:20:40.673]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:40.673]                 ...future.oldOptions$nwarnings <- NULL
[16:20:40.673]             }
[16:20:40.673]             base::options(...future.oldOptions)
[16:20:40.673]             if (.Platform$OS.type == "windows") {
[16:20:40.673]                 old_names <- names(...future.oldEnvVars)
[16:20:40.673]                 envs <- base::Sys.getenv()
[16:20:40.673]                 names <- names(envs)
[16:20:40.673]                 common <- intersect(names, old_names)
[16:20:40.673]                 added <- setdiff(names, old_names)
[16:20:40.673]                 removed <- setdiff(old_names, names)
[16:20:40.673]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:40.673]                   envs[common]]
[16:20:40.673]                 NAMES <- toupper(changed)
[16:20:40.673]                 args <- list()
[16:20:40.673]                 for (kk in seq_along(NAMES)) {
[16:20:40.673]                   name <- changed[[kk]]
[16:20:40.673]                   NAME <- NAMES[[kk]]
[16:20:40.673]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:40.673]                     next
[16:20:40.673]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:40.673]                 }
[16:20:40.673]                 NAMES <- toupper(added)
[16:20:40.673]                 for (kk in seq_along(NAMES)) {
[16:20:40.673]                   name <- added[[kk]]
[16:20:40.673]                   NAME <- NAMES[[kk]]
[16:20:40.673]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:40.673]                     next
[16:20:40.673]                   args[[name]] <- ""
[16:20:40.673]                 }
[16:20:40.673]                 NAMES <- toupper(removed)
[16:20:40.673]                 for (kk in seq_along(NAMES)) {
[16:20:40.673]                   name <- removed[[kk]]
[16:20:40.673]                   NAME <- NAMES[[kk]]
[16:20:40.673]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:40.673]                     next
[16:20:40.673]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:40.673]                 }
[16:20:40.673]                 if (length(args) > 0) 
[16:20:40.673]                   base::do.call(base::Sys.setenv, args = args)
[16:20:40.673]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:40.673]             }
[16:20:40.673]             else {
[16:20:40.673]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:40.673]             }
[16:20:40.673]             {
[16:20:40.673]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:40.673]                   0L) {
[16:20:40.673]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:40.673]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:40.673]                   base::options(opts)
[16:20:40.673]                 }
[16:20:40.673]                 {
[16:20:40.673]                   {
[16:20:40.673]                     NULL
[16:20:40.673]                     RNGkind("Mersenne-Twister")
[16:20:40.673]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:40.673]                       inherits = FALSE)
[16:20:40.673]                   }
[16:20:40.673]                   options(future.plan = NULL)
[16:20:40.673]                   if (is.na(NA_character_)) 
[16:20:40.673]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:40.673]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:40.673]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:40.673]                     .init = FALSE)
[16:20:40.673]                 }
[16:20:40.673]             }
[16:20:40.673]         }
[16:20:40.673]     })
[16:20:40.673]     if (TRUE) {
[16:20:40.673]         base::sink(type = "output", split = FALSE)
[16:20:40.673]         if (TRUE) {
[16:20:40.673]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:40.673]         }
[16:20:40.673]         else {
[16:20:40.673]             ...future.result["stdout"] <- base::list(NULL)
[16:20:40.673]         }
[16:20:40.673]         base::close(...future.stdout)
[16:20:40.673]         ...future.stdout <- NULL
[16:20:40.673]     }
[16:20:40.673]     ...future.result$conditions <- ...future.conditions
[16:20:40.673]     ...future.result$finished <- base::Sys.time()
[16:20:40.673]     ...future.result
[16:20:40.673] }
[16:20:40.675] plan(): Setting new future strategy stack:
[16:20:40.675] List of future strategies:
[16:20:40.675] 1. sequential:
[16:20:40.675]    - args: function (..., envir = parent.frame())
[16:20:40.675]    - tweaked: FALSE
[16:20:40.675]    - call: NULL
[16:20:40.675] plan(): nbrOfWorkers() = 1
[16:20:40.676] plan(): Setting new future strategy stack:
[16:20:40.676] List of future strategies:
[16:20:40.676] 1. sequential:
[16:20:40.676]    - args: function (..., envir = parent.frame())
[16:20:40.676]    - tweaked: FALSE
[16:20:40.676]    - call: future::plan("sequential")
[16:20:40.676] plan(): nbrOfWorkers() = 1
[16:20:40.677] SequentialFuture started (and completed)
[16:20:40.677] - Launch lazy future ... done
[16:20:40.677] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 89cec9c6-46d7-1c37-eaa1-ceb066cdbb90
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 89cec9c6-46d7-1c37-eaa1-ceb066cdbb90
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('rscript', 'remove') ...
*** FutureRegistry('rscript', 'list') ...
list()
*** FutureRegistry('rscript', 'add') ...
[16:20:40.678] getGlobalsAndPackages() ...
[16:20:40.678] Searching for globals...
[16:20:40.679] - globals found: [1] ‘{’
[16:20:40.679] Searching for globals ... DONE
[16:20:40.679] Resolving globals: FALSE
[16:20:40.679] 
[16:20:40.679] 
[16:20:40.679] getGlobalsAndPackages() ... DONE
[16:20:40.679] run() for ‘Future’ ...
[16:20:40.679] - state: ‘created’
[16:20:40.680] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:40.680] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:40.680] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:40.680]   - Field: ‘label’
[16:20:40.680]   - Field: ‘local’
[16:20:40.680]   - Field: ‘owner’
[16:20:40.680]   - Field: ‘envir’
[16:20:40.680]   - Field: ‘packages’
[16:20:40.681]   - Field: ‘gc’
[16:20:40.681]   - Field: ‘conditions’
[16:20:40.681]   - Field: ‘expr’
[16:20:40.681]   - Field: ‘uuid’
[16:20:40.681]   - Field: ‘seed’
[16:20:40.681]   - Field: ‘version’
[16:20:40.681]   - Field: ‘result’
[16:20:40.681]   - Field: ‘asynchronous’
[16:20:40.681]   - Field: ‘calls’
[16:20:40.681]   - Field: ‘globals’
[16:20:40.681]   - Field: ‘stdout’
[16:20:40.682]   - Field: ‘earlySignal’
[16:20:40.682]   - Field: ‘lazy’
[16:20:40.682]   - Field: ‘state’
[16:20:40.682] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:40.682] - Launch lazy future ...
[16:20:40.682] Packages needed by the future expression (n = 0): <none>
[16:20:40.682] Packages needed by future strategies (n = 0): <none>
[16:20:40.683] {
[16:20:40.683]     {
[16:20:40.683]         {
[16:20:40.683]             ...future.startTime <- base::Sys.time()
[16:20:40.683]             {
[16:20:40.683]                 {
[16:20:40.683]                   {
[16:20:40.683]                     base::local({
[16:20:40.683]                       has_future <- base::requireNamespace("future", 
[16:20:40.683]                         quietly = TRUE)
[16:20:40.683]                       if (has_future) {
[16:20:40.683]                         ns <- base::getNamespace("future")
[16:20:40.683]                         version <- ns[[".package"]][["version"]]
[16:20:40.683]                         if (is.null(version)) 
[16:20:40.683]                           version <- utils::packageVersion("future")
[16:20:40.683]                       }
[16:20:40.683]                       else {
[16:20:40.683]                         version <- NULL
[16:20:40.683]                       }
[16:20:40.683]                       if (!has_future || version < "1.8.0") {
[16:20:40.683]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:40.683]                           "", base::R.version$version.string), 
[16:20:40.683]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:40.683]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:40.683]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:40.683]                             "release", "version")], collapse = " "), 
[16:20:40.683]                           hostname = base::Sys.info()[["nodename"]])
[16:20:40.683]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:40.683]                           info)
[16:20:40.683]                         info <- base::paste(info, collapse = "; ")
[16:20:40.683]                         if (!has_future) {
[16:20:40.683]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:40.683]                             info)
[16:20:40.683]                         }
[16:20:40.683]                         else {
[16:20:40.683]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:40.683]                             info, version)
[16:20:40.683]                         }
[16:20:40.683]                         base::stop(msg)
[16:20:40.683]                       }
[16:20:40.683]                     })
[16:20:40.683]                   }
[16:20:40.683]                   ...future.strategy.old <- future::plan("list")
[16:20:40.683]                   options(future.plan = NULL)
[16:20:40.683]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:40.683]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:40.683]                 }
[16:20:40.683]                 ...future.workdir <- getwd()
[16:20:40.683]             }
[16:20:40.683]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:40.683]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:40.683]         }
[16:20:40.683]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:40.683]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:40.683]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:40.683]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:40.683]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:40.683]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:40.683]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:40.683]             base::names(...future.oldOptions))
[16:20:40.683]     }
[16:20:40.683]     if (FALSE) {
[16:20:40.683]     }
[16:20:40.683]     else {
[16:20:40.683]         if (TRUE) {
[16:20:40.683]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:40.683]                 open = "w")
[16:20:40.683]         }
[16:20:40.683]         else {
[16:20:40.683]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:40.683]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:40.683]         }
[16:20:40.683]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:40.683]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:40.683]             base::sink(type = "output", split = FALSE)
[16:20:40.683]             base::close(...future.stdout)
[16:20:40.683]         }, add = TRUE)
[16:20:40.683]     }
[16:20:40.683]     ...future.frame <- base::sys.nframe()
[16:20:40.683]     ...future.conditions <- base::list()
[16:20:40.683]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:40.683]     if (FALSE) {
[16:20:40.683]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:40.683]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:40.683]     }
[16:20:40.683]     ...future.result <- base::tryCatch({
[16:20:40.683]         base::withCallingHandlers({
[16:20:40.683]             ...future.value <- base::withVisible(base::local({
[16:20:40.683]                 2
[16:20:40.683]             }))
[16:20:40.683]             future::FutureResult(value = ...future.value$value, 
[16:20:40.683]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:40.683]                   ...future.rng), globalenv = if (FALSE) 
[16:20:40.683]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:40.683]                     ...future.globalenv.names))
[16:20:40.683]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:40.683]         }, condition = base::local({
[16:20:40.683]             c <- base::c
[16:20:40.683]             inherits <- base::inherits
[16:20:40.683]             invokeRestart <- base::invokeRestart
[16:20:40.683]             length <- base::length
[16:20:40.683]             list <- base::list
[16:20:40.683]             seq.int <- base::seq.int
[16:20:40.683]             signalCondition <- base::signalCondition
[16:20:40.683]             sys.calls <- base::sys.calls
[16:20:40.683]             `[[` <- base::`[[`
[16:20:40.683]             `+` <- base::`+`
[16:20:40.683]             `<<-` <- base::`<<-`
[16:20:40.683]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:40.683]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:40.683]                   3L)]
[16:20:40.683]             }
[16:20:40.683]             function(cond) {
[16:20:40.683]                 is_error <- inherits(cond, "error")
[16:20:40.683]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:40.683]                   NULL)
[16:20:40.683]                 if (is_error) {
[16:20:40.683]                   sessionInformation <- function() {
[16:20:40.683]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:40.683]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:40.683]                       search = base::search(), system = base::Sys.info())
[16:20:40.683]                   }
[16:20:40.683]                   ...future.conditions[[length(...future.conditions) + 
[16:20:40.683]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:40.683]                     cond$call), session = sessionInformation(), 
[16:20:40.683]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:40.683]                   signalCondition(cond)
[16:20:40.683]                 }
[16:20:40.683]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:40.683]                 "immediateCondition"))) {
[16:20:40.683]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:40.683]                   ...future.conditions[[length(...future.conditions) + 
[16:20:40.683]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:40.683]                   if (TRUE && !signal) {
[16:20:40.683]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:40.683]                     {
[16:20:40.683]                       inherits <- base::inherits
[16:20:40.683]                       invokeRestart <- base::invokeRestart
[16:20:40.683]                       is.null <- base::is.null
[16:20:40.683]                       muffled <- FALSE
[16:20:40.683]                       if (inherits(cond, "message")) {
[16:20:40.683]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:40.683]                         if (muffled) 
[16:20:40.683]                           invokeRestart("muffleMessage")
[16:20:40.683]                       }
[16:20:40.683]                       else if (inherits(cond, "warning")) {
[16:20:40.683]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:40.683]                         if (muffled) 
[16:20:40.683]                           invokeRestart("muffleWarning")
[16:20:40.683]                       }
[16:20:40.683]                       else if (inherits(cond, "condition")) {
[16:20:40.683]                         if (!is.null(pattern)) {
[16:20:40.683]                           computeRestarts <- base::computeRestarts
[16:20:40.683]                           grepl <- base::grepl
[16:20:40.683]                           restarts <- computeRestarts(cond)
[16:20:40.683]                           for (restart in restarts) {
[16:20:40.683]                             name <- restart$name
[16:20:40.683]                             if (is.null(name)) 
[16:20:40.683]                               next
[16:20:40.683]                             if (!grepl(pattern, name)) 
[16:20:40.683]                               next
[16:20:40.683]                             invokeRestart(restart)
[16:20:40.683]                             muffled <- TRUE
[16:20:40.683]                             break
[16:20:40.683]                           }
[16:20:40.683]                         }
[16:20:40.683]                       }
[16:20:40.683]                       invisible(muffled)
[16:20:40.683]                     }
[16:20:40.683]                     muffleCondition(cond, pattern = "^muffle")
[16:20:40.683]                   }
[16:20:40.683]                 }
[16:20:40.683]                 else {
[16:20:40.683]                   if (TRUE) {
[16:20:40.683]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:40.683]                     {
[16:20:40.683]                       inherits <- base::inherits
[16:20:40.683]                       invokeRestart <- base::invokeRestart
[16:20:40.683]                       is.null <- base::is.null
[16:20:40.683]                       muffled <- FALSE
[16:20:40.683]                       if (inherits(cond, "message")) {
[16:20:40.683]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:40.683]                         if (muffled) 
[16:20:40.683]                           invokeRestart("muffleMessage")
[16:20:40.683]                       }
[16:20:40.683]                       else if (inherits(cond, "warning")) {
[16:20:40.683]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:40.683]                         if (muffled) 
[16:20:40.683]                           invokeRestart("muffleWarning")
[16:20:40.683]                       }
[16:20:40.683]                       else if (inherits(cond, "condition")) {
[16:20:40.683]                         if (!is.null(pattern)) {
[16:20:40.683]                           computeRestarts <- base::computeRestarts
[16:20:40.683]                           grepl <- base::grepl
[16:20:40.683]                           restarts <- computeRestarts(cond)
[16:20:40.683]                           for (restart in restarts) {
[16:20:40.683]                             name <- restart$name
[16:20:40.683]                             if (is.null(name)) 
[16:20:40.683]                               next
[16:20:40.683]                             if (!grepl(pattern, name)) 
[16:20:40.683]                               next
[16:20:40.683]                             invokeRestart(restart)
[16:20:40.683]                             muffled <- TRUE
[16:20:40.683]                             break
[16:20:40.683]                           }
[16:20:40.683]                         }
[16:20:40.683]                       }
[16:20:40.683]                       invisible(muffled)
[16:20:40.683]                     }
[16:20:40.683]                     muffleCondition(cond, pattern = "^muffle")
[16:20:40.683]                   }
[16:20:40.683]                 }
[16:20:40.683]             }
[16:20:40.683]         }))
[16:20:40.683]     }, error = function(ex) {
[16:20:40.683]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:40.683]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:40.683]                 ...future.rng), started = ...future.startTime, 
[16:20:40.683]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:40.683]             version = "1.8"), class = "FutureResult")
[16:20:40.683]     }, finally = {
[16:20:40.683]         if (!identical(...future.workdir, getwd())) 
[16:20:40.683]             setwd(...future.workdir)
[16:20:40.683]         {
[16:20:40.683]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:40.683]                 ...future.oldOptions$nwarnings <- NULL
[16:20:40.683]             }
[16:20:40.683]             base::options(...future.oldOptions)
[16:20:40.683]             if (.Platform$OS.type == "windows") {
[16:20:40.683]                 old_names <- names(...future.oldEnvVars)
[16:20:40.683]                 envs <- base::Sys.getenv()
[16:20:40.683]                 names <- names(envs)
[16:20:40.683]                 common <- intersect(names, old_names)
[16:20:40.683]                 added <- setdiff(names, old_names)
[16:20:40.683]                 removed <- setdiff(old_names, names)
[16:20:40.683]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:40.683]                   envs[common]]
[16:20:40.683]                 NAMES <- toupper(changed)
[16:20:40.683]                 args <- list()
[16:20:40.683]                 for (kk in seq_along(NAMES)) {
[16:20:40.683]                   name <- changed[[kk]]
[16:20:40.683]                   NAME <- NAMES[[kk]]
[16:20:40.683]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:40.683]                     next
[16:20:40.683]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:40.683]                 }
[16:20:40.683]                 NAMES <- toupper(added)
[16:20:40.683]                 for (kk in seq_along(NAMES)) {
[16:20:40.683]                   name <- added[[kk]]
[16:20:40.683]                   NAME <- NAMES[[kk]]
[16:20:40.683]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:40.683]                     next
[16:20:40.683]                   args[[name]] <- ""
[16:20:40.683]                 }
[16:20:40.683]                 NAMES <- toupper(removed)
[16:20:40.683]                 for (kk in seq_along(NAMES)) {
[16:20:40.683]                   name <- removed[[kk]]
[16:20:40.683]                   NAME <- NAMES[[kk]]
[16:20:40.683]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:40.683]                     next
[16:20:40.683]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:40.683]                 }
[16:20:40.683]                 if (length(args) > 0) 
[16:20:40.683]                   base::do.call(base::Sys.setenv, args = args)
[16:20:40.683]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:40.683]             }
[16:20:40.683]             else {
[16:20:40.683]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:40.683]             }
[16:20:40.683]             {
[16:20:40.683]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:40.683]                   0L) {
[16:20:40.683]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:40.683]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:40.683]                   base::options(opts)
[16:20:40.683]                 }
[16:20:40.683]                 {
[16:20:40.683]                   {
[16:20:40.683]                     NULL
[16:20:40.683]                     RNGkind("Mersenne-Twister")
[16:20:40.683]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:40.683]                       inherits = FALSE)
[16:20:40.683]                   }
[16:20:40.683]                   options(future.plan = NULL)
[16:20:40.683]                   if (is.na(NA_character_)) 
[16:20:40.683]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:40.683]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:40.683]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:40.683]                     .init = FALSE)
[16:20:40.683]                 }
[16:20:40.683]             }
[16:20:40.683]         }
[16:20:40.683]     })
[16:20:40.683]     if (TRUE) {
[16:20:40.683]         base::sink(type = "output", split = FALSE)
[16:20:40.683]         if (TRUE) {
[16:20:40.683]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:40.683]         }
[16:20:40.683]         else {
[16:20:40.683]             ...future.result["stdout"] <- base::list(NULL)
[16:20:40.683]         }
[16:20:40.683]         base::close(...future.stdout)
[16:20:40.683]         ...future.stdout <- NULL
[16:20:40.683]     }
[16:20:40.683]     ...future.result$conditions <- ...future.conditions
[16:20:40.683]     ...future.result$finished <- base::Sys.time()
[16:20:40.683]     ...future.result
[16:20:40.683] }
[16:20:40.684] plan(): Setting new future strategy stack:
[16:20:40.684] List of future strategies:
[16:20:40.684] 1. sequential:
[16:20:40.684]    - args: function (..., envir = parent.frame())
[16:20:40.684]    - tweaked: FALSE
[16:20:40.684]    - call: NULL
[16:20:40.685] plan(): nbrOfWorkers() = 1
[16:20:40.685] plan(): Setting new future strategy stack:
[16:20:40.685] List of future strategies:
[16:20:40.685] 1. sequential:
[16:20:40.685]    - args: function (..., envir = parent.frame())
[16:20:40.685]    - tweaked: FALSE
[16:20:40.685]    - call: future::plan("sequential")
[16:20:40.686] plan(): nbrOfWorkers() = 1
[16:20:40.686] SequentialFuture started (and completed)
[16:20:40.686] - Launch lazy future ... done
[16:20:40.686] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 89cec9c6-46d7-1c37-eaa1-ceb066cdbb90
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 89cec9c6-46d7-1c37-eaa1-ceb066cdbb90
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('rscript', 'collect-first') ...
[16:20:40.695] resolved() for ‘SequentialFuture’ ...
[16:20:40.695] - state: ‘finished’
[16:20:40.695] - run: FALSE
[16:20:40.695] - result: ‘FutureResult’
[16:20:40.695] resolved() for ‘SequentialFuture’ ... done
list()
*** FutureRegistry('rscript', 'add') ...
[16:20:40.696] getGlobalsAndPackages() ...
[16:20:40.696] Searching for globals...
[16:20:40.697] - globals found: [1] ‘{’
[16:20:40.698] Searching for globals ... DONE
[16:20:40.698] Resolving globals: FALSE
[16:20:40.698] 
[16:20:40.698] 
[16:20:40.698] getGlobalsAndPackages() ... DONE
[16:20:40.698] run() for ‘Future’ ...
[16:20:40.698] - state: ‘created’
[16:20:40.699] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:40.699] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:40.699] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:40.699]   - Field: ‘label’
[16:20:40.699]   - Field: ‘local’
[16:20:40.699]   - Field: ‘owner’
[16:20:40.699]   - Field: ‘envir’
[16:20:40.699]   - Field: ‘packages’
[16:20:40.699]   - Field: ‘gc’
[16:20:40.700]   - Field: ‘conditions’
[16:20:40.700]   - Field: ‘expr’
[16:20:40.700]   - Field: ‘uuid’
[16:20:40.700]   - Field: ‘seed’
[16:20:40.700]   - Field: ‘version’
[16:20:40.700]   - Field: ‘result’
[16:20:40.700]   - Field: ‘asynchronous’
[16:20:40.700]   - Field: ‘calls’
[16:20:40.700]   - Field: ‘globals’
[16:20:40.700]   - Field: ‘stdout’
[16:20:40.701]   - Field: ‘earlySignal’
[16:20:40.701]   - Field: ‘lazy’
[16:20:40.701]   - Field: ‘state’
[16:20:40.701] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:40.701] - Launch lazy future ...
[16:20:40.701] Packages needed by the future expression (n = 0): <none>
[16:20:40.701] Packages needed by future strategies (n = 0): <none>
[16:20:40.702] {
[16:20:40.702]     {
[16:20:40.702]         {
[16:20:40.702]             ...future.startTime <- base::Sys.time()
[16:20:40.702]             {
[16:20:40.702]                 {
[16:20:40.702]                   {
[16:20:40.702]                     base::local({
[16:20:40.702]                       has_future <- base::requireNamespace("future", 
[16:20:40.702]                         quietly = TRUE)
[16:20:40.702]                       if (has_future) {
[16:20:40.702]                         ns <- base::getNamespace("future")
[16:20:40.702]                         version <- ns[[".package"]][["version"]]
[16:20:40.702]                         if (is.null(version)) 
[16:20:40.702]                           version <- utils::packageVersion("future")
[16:20:40.702]                       }
[16:20:40.702]                       else {
[16:20:40.702]                         version <- NULL
[16:20:40.702]                       }
[16:20:40.702]                       if (!has_future || version < "1.8.0") {
[16:20:40.702]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:40.702]                           "", base::R.version$version.string), 
[16:20:40.702]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:40.702]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:40.702]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:40.702]                             "release", "version")], collapse = " "), 
[16:20:40.702]                           hostname = base::Sys.info()[["nodename"]])
[16:20:40.702]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:40.702]                           info)
[16:20:40.702]                         info <- base::paste(info, collapse = "; ")
[16:20:40.702]                         if (!has_future) {
[16:20:40.702]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:40.702]                             info)
[16:20:40.702]                         }
[16:20:40.702]                         else {
[16:20:40.702]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:40.702]                             info, version)
[16:20:40.702]                         }
[16:20:40.702]                         base::stop(msg)
[16:20:40.702]                       }
[16:20:40.702]                     })
[16:20:40.702]                   }
[16:20:40.702]                   ...future.strategy.old <- future::plan("list")
[16:20:40.702]                   options(future.plan = NULL)
[16:20:40.702]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:40.702]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:40.702]                 }
[16:20:40.702]                 ...future.workdir <- getwd()
[16:20:40.702]             }
[16:20:40.702]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:40.702]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:40.702]         }
[16:20:40.702]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:40.702]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:40.702]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:40.702]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:40.702]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:40.702]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:40.702]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:40.702]             base::names(...future.oldOptions))
[16:20:40.702]     }
[16:20:40.702]     if (FALSE) {
[16:20:40.702]     }
[16:20:40.702]     else {
[16:20:40.702]         if (TRUE) {
[16:20:40.702]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:40.702]                 open = "w")
[16:20:40.702]         }
[16:20:40.702]         else {
[16:20:40.702]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:40.702]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:40.702]         }
[16:20:40.702]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:40.702]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:40.702]             base::sink(type = "output", split = FALSE)
[16:20:40.702]             base::close(...future.stdout)
[16:20:40.702]         }, add = TRUE)
[16:20:40.702]     }
[16:20:40.702]     ...future.frame <- base::sys.nframe()
[16:20:40.702]     ...future.conditions <- base::list()
[16:20:40.702]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:40.702]     if (FALSE) {
[16:20:40.702]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:40.702]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:40.702]     }
[16:20:40.702]     ...future.result <- base::tryCatch({
[16:20:40.702]         base::withCallingHandlers({
[16:20:40.702]             ...future.value <- base::withVisible(base::local({
[16:20:40.702]                 2
[16:20:40.702]             }))
[16:20:40.702]             future::FutureResult(value = ...future.value$value, 
[16:20:40.702]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:40.702]                   ...future.rng), globalenv = if (FALSE) 
[16:20:40.702]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:40.702]                     ...future.globalenv.names))
[16:20:40.702]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:40.702]         }, condition = base::local({
[16:20:40.702]             c <- base::c
[16:20:40.702]             inherits <- base::inherits
[16:20:40.702]             invokeRestart <- base::invokeRestart
[16:20:40.702]             length <- base::length
[16:20:40.702]             list <- base::list
[16:20:40.702]             seq.int <- base::seq.int
[16:20:40.702]             signalCondition <- base::signalCondition
[16:20:40.702]             sys.calls <- base::sys.calls
[16:20:40.702]             `[[` <- base::`[[`
[16:20:40.702]             `+` <- base::`+`
[16:20:40.702]             `<<-` <- base::`<<-`
[16:20:40.702]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:40.702]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:40.702]                   3L)]
[16:20:40.702]             }
[16:20:40.702]             function(cond) {
[16:20:40.702]                 is_error <- inherits(cond, "error")
[16:20:40.702]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:40.702]                   NULL)
[16:20:40.702]                 if (is_error) {
[16:20:40.702]                   sessionInformation <- function() {
[16:20:40.702]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:40.702]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:40.702]                       search = base::search(), system = base::Sys.info())
[16:20:40.702]                   }
[16:20:40.702]                   ...future.conditions[[length(...future.conditions) + 
[16:20:40.702]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:40.702]                     cond$call), session = sessionInformation(), 
[16:20:40.702]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:40.702]                   signalCondition(cond)
[16:20:40.702]                 }
[16:20:40.702]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:40.702]                 "immediateCondition"))) {
[16:20:40.702]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:40.702]                   ...future.conditions[[length(...future.conditions) + 
[16:20:40.702]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:40.702]                   if (TRUE && !signal) {
[16:20:40.702]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:40.702]                     {
[16:20:40.702]                       inherits <- base::inherits
[16:20:40.702]                       invokeRestart <- base::invokeRestart
[16:20:40.702]                       is.null <- base::is.null
[16:20:40.702]                       muffled <- FALSE
[16:20:40.702]                       if (inherits(cond, "message")) {
[16:20:40.702]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:40.702]                         if (muffled) 
[16:20:40.702]                           invokeRestart("muffleMessage")
[16:20:40.702]                       }
[16:20:40.702]                       else if (inherits(cond, "warning")) {
[16:20:40.702]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:40.702]                         if (muffled) 
[16:20:40.702]                           invokeRestart("muffleWarning")
[16:20:40.702]                       }
[16:20:40.702]                       else if (inherits(cond, "condition")) {
[16:20:40.702]                         if (!is.null(pattern)) {
[16:20:40.702]                           computeRestarts <- base::computeRestarts
[16:20:40.702]                           grepl <- base::grepl
[16:20:40.702]                           restarts <- computeRestarts(cond)
[16:20:40.702]                           for (restart in restarts) {
[16:20:40.702]                             name <- restart$name
[16:20:40.702]                             if (is.null(name)) 
[16:20:40.702]                               next
[16:20:40.702]                             if (!grepl(pattern, name)) 
[16:20:40.702]                               next
[16:20:40.702]                             invokeRestart(restart)
[16:20:40.702]                             muffled <- TRUE
[16:20:40.702]                             break
[16:20:40.702]                           }
[16:20:40.702]                         }
[16:20:40.702]                       }
[16:20:40.702]                       invisible(muffled)
[16:20:40.702]                     }
[16:20:40.702]                     muffleCondition(cond, pattern = "^muffle")
[16:20:40.702]                   }
[16:20:40.702]                 }
[16:20:40.702]                 else {
[16:20:40.702]                   if (TRUE) {
[16:20:40.702]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:40.702]                     {
[16:20:40.702]                       inherits <- base::inherits
[16:20:40.702]                       invokeRestart <- base::invokeRestart
[16:20:40.702]                       is.null <- base::is.null
[16:20:40.702]                       muffled <- FALSE
[16:20:40.702]                       if (inherits(cond, "message")) {
[16:20:40.702]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:40.702]                         if (muffled) 
[16:20:40.702]                           invokeRestart("muffleMessage")
[16:20:40.702]                       }
[16:20:40.702]                       else if (inherits(cond, "warning")) {
[16:20:40.702]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:40.702]                         if (muffled) 
[16:20:40.702]                           invokeRestart("muffleWarning")
[16:20:40.702]                       }
[16:20:40.702]                       else if (inherits(cond, "condition")) {
[16:20:40.702]                         if (!is.null(pattern)) {
[16:20:40.702]                           computeRestarts <- base::computeRestarts
[16:20:40.702]                           grepl <- base::grepl
[16:20:40.702]                           restarts <- computeRestarts(cond)
[16:20:40.702]                           for (restart in restarts) {
[16:20:40.702]                             name <- restart$name
[16:20:40.702]                             if (is.null(name)) 
[16:20:40.702]                               next
[16:20:40.702]                             if (!grepl(pattern, name)) 
[16:20:40.702]                               next
[16:20:40.702]                             invokeRestart(restart)
[16:20:40.702]                             muffled <- TRUE
[16:20:40.702]                             break
[16:20:40.702]                           }
[16:20:40.702]                         }
[16:20:40.702]                       }
[16:20:40.702]                       invisible(muffled)
[16:20:40.702]                     }
[16:20:40.702]                     muffleCondition(cond, pattern = "^muffle")
[16:20:40.702]                   }
[16:20:40.702]                 }
[16:20:40.702]             }
[16:20:40.702]         }))
[16:20:40.702]     }, error = function(ex) {
[16:20:40.702]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:40.702]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:40.702]                 ...future.rng), started = ...future.startTime, 
[16:20:40.702]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:40.702]             version = "1.8"), class = "FutureResult")
[16:20:40.702]     }, finally = {
[16:20:40.702]         if (!identical(...future.workdir, getwd())) 
[16:20:40.702]             setwd(...future.workdir)
[16:20:40.702]         {
[16:20:40.702]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:40.702]                 ...future.oldOptions$nwarnings <- NULL
[16:20:40.702]             }
[16:20:40.702]             base::options(...future.oldOptions)
[16:20:40.702]             if (.Platform$OS.type == "windows") {
[16:20:40.702]                 old_names <- names(...future.oldEnvVars)
[16:20:40.702]                 envs <- base::Sys.getenv()
[16:20:40.702]                 names <- names(envs)
[16:20:40.702]                 common <- intersect(names, old_names)
[16:20:40.702]                 added <- setdiff(names, old_names)
[16:20:40.702]                 removed <- setdiff(old_names, names)
[16:20:40.702]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:40.702]                   envs[common]]
[16:20:40.702]                 NAMES <- toupper(changed)
[16:20:40.702]                 args <- list()
[16:20:40.702]                 for (kk in seq_along(NAMES)) {
[16:20:40.702]                   name <- changed[[kk]]
[16:20:40.702]                   NAME <- NAMES[[kk]]
[16:20:40.702]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:40.702]                     next
[16:20:40.702]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:40.702]                 }
[16:20:40.702]                 NAMES <- toupper(added)
[16:20:40.702]                 for (kk in seq_along(NAMES)) {
[16:20:40.702]                   name <- added[[kk]]
[16:20:40.702]                   NAME <- NAMES[[kk]]
[16:20:40.702]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:40.702]                     next
[16:20:40.702]                   args[[name]] <- ""
[16:20:40.702]                 }
[16:20:40.702]                 NAMES <- toupper(removed)
[16:20:40.702]                 for (kk in seq_along(NAMES)) {
[16:20:40.702]                   name <- removed[[kk]]
[16:20:40.702]                   NAME <- NAMES[[kk]]
[16:20:40.702]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:40.702]                     next
[16:20:40.702]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:40.702]                 }
[16:20:40.702]                 if (length(args) > 0) 
[16:20:40.702]                   base::do.call(base::Sys.setenv, args = args)
[16:20:40.702]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:40.702]             }
[16:20:40.702]             else {
[16:20:40.702]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:40.702]             }
[16:20:40.702]             {
[16:20:40.702]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:40.702]                   0L) {
[16:20:40.702]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:40.702]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:40.702]                   base::options(opts)
[16:20:40.702]                 }
[16:20:40.702]                 {
[16:20:40.702]                   {
[16:20:40.702]                     NULL
[16:20:40.702]                     RNGkind("Mersenne-Twister")
[16:20:40.702]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:40.702]                       inherits = FALSE)
[16:20:40.702]                   }
[16:20:40.702]                   options(future.plan = NULL)
[16:20:40.702]                   if (is.na(NA_character_)) 
[16:20:40.702]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:40.702]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:40.702]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:40.702]                     .init = FALSE)
[16:20:40.702]                 }
[16:20:40.702]             }
[16:20:40.702]         }
[16:20:40.702]     })
[16:20:40.702]     if (TRUE) {
[16:20:40.702]         base::sink(type = "output", split = FALSE)
[16:20:40.702]         if (TRUE) {
[16:20:40.702]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:40.702]         }
[16:20:40.702]         else {
[16:20:40.702]             ...future.result["stdout"] <- base::list(NULL)
[16:20:40.702]         }
[16:20:40.702]         base::close(...future.stdout)
[16:20:40.702]         ...future.stdout <- NULL
[16:20:40.702]     }
[16:20:40.702]     ...future.result$conditions <- ...future.conditions
[16:20:40.702]     ...future.result$finished <- base::Sys.time()
[16:20:40.702]     ...future.result
[16:20:40.702] }
[16:20:40.703] plan(): Setting new future strategy stack:
[16:20:40.703] List of future strategies:
[16:20:40.703] 1. sequential:
[16:20:40.703]    - args: function (..., envir = parent.frame())
[16:20:40.703]    - tweaked: FALSE
[16:20:40.703]    - call: NULL
[16:20:40.704] plan(): nbrOfWorkers() = 1
[16:20:40.705] plan(): Setting new future strategy stack:
[16:20:40.705] List of future strategies:
[16:20:40.705] 1. sequential:
[16:20:40.705]    - args: function (..., envir = parent.frame())
[16:20:40.705]    - tweaked: FALSE
[16:20:40.705]    - call: future::plan("sequential")
[16:20:40.705] plan(): nbrOfWorkers() = 1
[16:20:40.705] SequentialFuture started (and completed)
[16:20:40.705] - Launch lazy future ... done
[16:20:40.705] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 89cec9c6-46d7-1c37-eaa1-ceb066cdbb90
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'reset') ...
*** FutureRegistry('rscript', 'list') ...
list()
> 
> 
> message("*** FutureRegistry() - exceptions ...")
*** FutureRegistry() - exceptions ...
> 
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> f <- future(1)
[16:20:40.706] getGlobalsAndPackages() ...
[16:20:40.706] Searching for globals...
[16:20:40.707] 
[16:20:40.707] Searching for globals ... DONE
[16:20:40.707] - globals: [0] <none>
[16:20:40.707] getGlobalsAndPackages() ... DONE
[16:20:40.707] run() for ‘Future’ ...
[16:20:40.707] - state: ‘created’
[16:20:40.707] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:40.708] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:40.708] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:40.708]   - Field: ‘label’
[16:20:40.708]   - Field: ‘local’
[16:20:40.708]   - Field: ‘owner’
[16:20:40.708]   - Field: ‘envir’
[16:20:40.708]   - Field: ‘packages’
[16:20:40.708]   - Field: ‘gc’
[16:20:40.708]   - Field: ‘conditions’
[16:20:40.708]   - Field: ‘expr’
[16:20:40.708]   - Field: ‘uuid’
[16:20:40.709]   - Field: ‘seed’
[16:20:40.709]   - Field: ‘version’
[16:20:40.709]   - Field: ‘result’
[16:20:40.709]   - Field: ‘asynchronous’
[16:20:40.709]   - Field: ‘calls’
[16:20:40.709]   - Field: ‘globals’
[16:20:40.709]   - Field: ‘stdout’
[16:20:40.709]   - Field: ‘earlySignal’
[16:20:40.709]   - Field: ‘lazy’
[16:20:40.709]   - Field: ‘state’
[16:20:40.709] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:40.710] - Launch lazy future ...
[16:20:40.710] Packages needed by the future expression (n = 0): <none>
[16:20:40.710] Packages needed by future strategies (n = 0): <none>
[16:20:40.710] {
[16:20:40.710]     {
[16:20:40.710]         {
[16:20:40.710]             ...future.startTime <- base::Sys.time()
[16:20:40.710]             {
[16:20:40.710]                 {
[16:20:40.710]                   {
[16:20:40.710]                     base::local({
[16:20:40.710]                       has_future <- base::requireNamespace("future", 
[16:20:40.710]                         quietly = TRUE)
[16:20:40.710]                       if (has_future) {
[16:20:40.710]                         ns <- base::getNamespace("future")
[16:20:40.710]                         version <- ns[[".package"]][["version"]]
[16:20:40.710]                         if (is.null(version)) 
[16:20:40.710]                           version <- utils::packageVersion("future")
[16:20:40.710]                       }
[16:20:40.710]                       else {
[16:20:40.710]                         version <- NULL
[16:20:40.710]                       }
[16:20:40.710]                       if (!has_future || version < "1.8.0") {
[16:20:40.710]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:40.710]                           "", base::R.version$version.string), 
[16:20:40.710]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:40.710]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:40.710]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:40.710]                             "release", "version")], collapse = " "), 
[16:20:40.710]                           hostname = base::Sys.info()[["nodename"]])
[16:20:40.710]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:40.710]                           info)
[16:20:40.710]                         info <- base::paste(info, collapse = "; ")
[16:20:40.710]                         if (!has_future) {
[16:20:40.710]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:40.710]                             info)
[16:20:40.710]                         }
[16:20:40.710]                         else {
[16:20:40.710]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:40.710]                             info, version)
[16:20:40.710]                         }
[16:20:40.710]                         base::stop(msg)
[16:20:40.710]                       }
[16:20:40.710]                     })
[16:20:40.710]                   }
[16:20:40.710]                   ...future.strategy.old <- future::plan("list")
[16:20:40.710]                   options(future.plan = NULL)
[16:20:40.710]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:40.710]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:40.710]                 }
[16:20:40.710]                 ...future.workdir <- getwd()
[16:20:40.710]             }
[16:20:40.710]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:40.710]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:40.710]         }
[16:20:40.710]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:40.710]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:40.710]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:40.710]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:40.710]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:40.710]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:40.710]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:40.710]             base::names(...future.oldOptions))
[16:20:40.710]     }
[16:20:40.710]     if (FALSE) {
[16:20:40.710]     }
[16:20:40.710]     else {
[16:20:40.710]         if (TRUE) {
[16:20:40.710]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:40.710]                 open = "w")
[16:20:40.710]         }
[16:20:40.710]         else {
[16:20:40.710]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:40.710]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:40.710]         }
[16:20:40.710]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:40.710]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:40.710]             base::sink(type = "output", split = FALSE)
[16:20:40.710]             base::close(...future.stdout)
[16:20:40.710]         }, add = TRUE)
[16:20:40.710]     }
[16:20:40.710]     ...future.frame <- base::sys.nframe()
[16:20:40.710]     ...future.conditions <- base::list()
[16:20:40.710]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:40.710]     if (FALSE) {
[16:20:40.710]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:40.710]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:40.710]     }
[16:20:40.710]     ...future.result <- base::tryCatch({
[16:20:40.710]         base::withCallingHandlers({
[16:20:40.710]             ...future.value <- base::withVisible(base::local(1))
[16:20:40.710]             future::FutureResult(value = ...future.value$value, 
[16:20:40.710]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:40.710]                   ...future.rng), globalenv = if (FALSE) 
[16:20:40.710]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:40.710]                     ...future.globalenv.names))
[16:20:40.710]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:40.710]         }, condition = base::local({
[16:20:40.710]             c <- base::c
[16:20:40.710]             inherits <- base::inherits
[16:20:40.710]             invokeRestart <- base::invokeRestart
[16:20:40.710]             length <- base::length
[16:20:40.710]             list <- base::list
[16:20:40.710]             seq.int <- base::seq.int
[16:20:40.710]             signalCondition <- base::signalCondition
[16:20:40.710]             sys.calls <- base::sys.calls
[16:20:40.710]             `[[` <- base::`[[`
[16:20:40.710]             `+` <- base::`+`
[16:20:40.710]             `<<-` <- base::`<<-`
[16:20:40.710]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:40.710]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:40.710]                   3L)]
[16:20:40.710]             }
[16:20:40.710]             function(cond) {
[16:20:40.710]                 is_error <- inherits(cond, "error")
[16:20:40.710]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:40.710]                   NULL)
[16:20:40.710]                 if (is_error) {
[16:20:40.710]                   sessionInformation <- function() {
[16:20:40.710]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:40.710]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:40.710]                       search = base::search(), system = base::Sys.info())
[16:20:40.710]                   }
[16:20:40.710]                   ...future.conditions[[length(...future.conditions) + 
[16:20:40.710]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:40.710]                     cond$call), session = sessionInformation(), 
[16:20:40.710]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:40.710]                   signalCondition(cond)
[16:20:40.710]                 }
[16:20:40.710]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:40.710]                 "immediateCondition"))) {
[16:20:40.710]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:40.710]                   ...future.conditions[[length(...future.conditions) + 
[16:20:40.710]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:40.710]                   if (TRUE && !signal) {
[16:20:40.710]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:40.710]                     {
[16:20:40.710]                       inherits <- base::inherits
[16:20:40.710]                       invokeRestart <- base::invokeRestart
[16:20:40.710]                       is.null <- base::is.null
[16:20:40.710]                       muffled <- FALSE
[16:20:40.710]                       if (inherits(cond, "message")) {
[16:20:40.710]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:40.710]                         if (muffled) 
[16:20:40.710]                           invokeRestart("muffleMessage")
[16:20:40.710]                       }
[16:20:40.710]                       else if (inherits(cond, "warning")) {
[16:20:40.710]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:40.710]                         if (muffled) 
[16:20:40.710]                           invokeRestart("muffleWarning")
[16:20:40.710]                       }
[16:20:40.710]                       else if (inherits(cond, "condition")) {
[16:20:40.710]                         if (!is.null(pattern)) {
[16:20:40.710]                           computeRestarts <- base::computeRestarts
[16:20:40.710]                           grepl <- base::grepl
[16:20:40.710]                           restarts <- computeRestarts(cond)
[16:20:40.710]                           for (restart in restarts) {
[16:20:40.710]                             name <- restart$name
[16:20:40.710]                             if (is.null(name)) 
[16:20:40.710]                               next
[16:20:40.710]                             if (!grepl(pattern, name)) 
[16:20:40.710]                               next
[16:20:40.710]                             invokeRestart(restart)
[16:20:40.710]                             muffled <- TRUE
[16:20:40.710]                             break
[16:20:40.710]                           }
[16:20:40.710]                         }
[16:20:40.710]                       }
[16:20:40.710]                       invisible(muffled)
[16:20:40.710]                     }
[16:20:40.710]                     muffleCondition(cond, pattern = "^muffle")
[16:20:40.710]                   }
[16:20:40.710]                 }
[16:20:40.710]                 else {
[16:20:40.710]                   if (TRUE) {
[16:20:40.710]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:40.710]                     {
[16:20:40.710]                       inherits <- base::inherits
[16:20:40.710]                       invokeRestart <- base::invokeRestart
[16:20:40.710]                       is.null <- base::is.null
[16:20:40.710]                       muffled <- FALSE
[16:20:40.710]                       if (inherits(cond, "message")) {
[16:20:40.710]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:40.710]                         if (muffled) 
[16:20:40.710]                           invokeRestart("muffleMessage")
[16:20:40.710]                       }
[16:20:40.710]                       else if (inherits(cond, "warning")) {
[16:20:40.710]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:40.710]                         if (muffled) 
[16:20:40.710]                           invokeRestart("muffleWarning")
[16:20:40.710]                       }
[16:20:40.710]                       else if (inherits(cond, "condition")) {
[16:20:40.710]                         if (!is.null(pattern)) {
[16:20:40.710]                           computeRestarts <- base::computeRestarts
[16:20:40.710]                           grepl <- base::grepl
[16:20:40.710]                           restarts <- computeRestarts(cond)
[16:20:40.710]                           for (restart in restarts) {
[16:20:40.710]                             name <- restart$name
[16:20:40.710]                             if (is.null(name)) 
[16:20:40.710]                               next
[16:20:40.710]                             if (!grepl(pattern, name)) 
[16:20:40.710]                               next
[16:20:40.710]                             invokeRestart(restart)
[16:20:40.710]                             muffled <- TRUE
[16:20:40.710]                             break
[16:20:40.710]                           }
[16:20:40.710]                         }
[16:20:40.710]                       }
[16:20:40.710]                       invisible(muffled)
[16:20:40.710]                     }
[16:20:40.710]                     muffleCondition(cond, pattern = "^muffle")
[16:20:40.710]                   }
[16:20:40.710]                 }
[16:20:40.710]             }
[16:20:40.710]         }))
[16:20:40.710]     }, error = function(ex) {
[16:20:40.710]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:40.710]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:40.710]                 ...future.rng), started = ...future.startTime, 
[16:20:40.710]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:40.710]             version = "1.8"), class = "FutureResult")
[16:20:40.710]     }, finally = {
[16:20:40.710]         if (!identical(...future.workdir, getwd())) 
[16:20:40.710]             setwd(...future.workdir)
[16:20:40.710]         {
[16:20:40.710]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:40.710]                 ...future.oldOptions$nwarnings <- NULL
[16:20:40.710]             }
[16:20:40.710]             base::options(...future.oldOptions)
[16:20:40.710]             if (.Platform$OS.type == "windows") {
[16:20:40.710]                 old_names <- names(...future.oldEnvVars)
[16:20:40.710]                 envs <- base::Sys.getenv()
[16:20:40.710]                 names <- names(envs)
[16:20:40.710]                 common <- intersect(names, old_names)
[16:20:40.710]                 added <- setdiff(names, old_names)
[16:20:40.710]                 removed <- setdiff(old_names, names)
[16:20:40.710]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:40.710]                   envs[common]]
[16:20:40.710]                 NAMES <- toupper(changed)
[16:20:40.710]                 args <- list()
[16:20:40.710]                 for (kk in seq_along(NAMES)) {
[16:20:40.710]                   name <- changed[[kk]]
[16:20:40.710]                   NAME <- NAMES[[kk]]
[16:20:40.710]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:40.710]                     next
[16:20:40.710]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:40.710]                 }
[16:20:40.710]                 NAMES <- toupper(added)
[16:20:40.710]                 for (kk in seq_along(NAMES)) {
[16:20:40.710]                   name <- added[[kk]]
[16:20:40.710]                   NAME <- NAMES[[kk]]
[16:20:40.710]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:40.710]                     next
[16:20:40.710]                   args[[name]] <- ""
[16:20:40.710]                 }
[16:20:40.710]                 NAMES <- toupper(removed)
[16:20:40.710]                 for (kk in seq_along(NAMES)) {
[16:20:40.710]                   name <- removed[[kk]]
[16:20:40.710]                   NAME <- NAMES[[kk]]
[16:20:40.710]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:40.710]                     next
[16:20:40.710]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:40.710]                 }
[16:20:40.710]                 if (length(args) > 0) 
[16:20:40.710]                   base::do.call(base::Sys.setenv, args = args)
[16:20:40.710]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:40.710]             }
[16:20:40.710]             else {
[16:20:40.710]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:40.710]             }
[16:20:40.710]             {
[16:20:40.710]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:40.710]                   0L) {
[16:20:40.710]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:40.710]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:40.710]                   base::options(opts)
[16:20:40.710]                 }
[16:20:40.710]                 {
[16:20:40.710]                   {
[16:20:40.710]                     NULL
[16:20:40.710]                     RNGkind("Mersenne-Twister")
[16:20:40.710]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:40.710]                       inherits = FALSE)
[16:20:40.710]                   }
[16:20:40.710]                   options(future.plan = NULL)
[16:20:40.710]                   if (is.na(NA_character_)) 
[16:20:40.710]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:40.710]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:40.710]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:40.710]                     .init = FALSE)
[16:20:40.710]                 }
[16:20:40.710]             }
[16:20:40.710]         }
[16:20:40.710]     })
[16:20:40.710]     if (TRUE) {
[16:20:40.710]         base::sink(type = "output", split = FALSE)
[16:20:40.710]         if (TRUE) {
[16:20:40.710]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:40.710]         }
[16:20:40.710]         else {
[16:20:40.710]             ...future.result["stdout"] <- base::list(NULL)
[16:20:40.710]         }
[16:20:40.710]         base::close(...future.stdout)
[16:20:40.710]         ...future.stdout <- NULL
[16:20:40.710]     }
[16:20:40.710]     ...future.result$conditions <- ...future.conditions
[16:20:40.710]     ...future.result$finished <- base::Sys.time()
[16:20:40.710]     ...future.result
[16:20:40.710] }
[16:20:40.712] plan(): Setting new future strategy stack:
[16:20:40.712] List of future strategies:
[16:20:40.712] 1. sequential:
[16:20:40.712]    - args: function (..., envir = parent.frame())
[16:20:40.712]    - tweaked: FALSE
[16:20:40.712]    - call: NULL
[16:20:40.712] plan(): nbrOfWorkers() = 1
[16:20:40.713] plan(): Setting new future strategy stack:
[16:20:40.713] List of future strategies:
[16:20:40.713] 1. sequential:
[16:20:40.713]    - args: function (..., envir = parent.frame())
[16:20:40.713]    - tweaked: FALSE
[16:20:40.713]    - call: future::plan("sequential")
[16:20:40.714] plan(): nbrOfWorkers() = 1
[16:20:40.714] SequentialFuture started (and completed)
[16:20:40.714] - Launch lazy future ... done
[16:20:40.714] run() for ‘SequentialFuture’ ... done
> FutureRegistry(where = "test", action = "add", future = f)
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 1
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 89cec9c6-46d7-1c37-eaa1-ceb066cdbb90
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 1)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "add", future = f), error = identity)
[16:20:40.715] ERROR: Cannot add to ‘test’ registry. SequentialFuture is already registered.
> stopifnot(inherits(res, "error"))
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 1)
> 
> 
> FutureRegistry(where = "test", action = "remove", future = f)
list()
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "remove", future = f), error = identity)
[16:20:40.715] ERROR: Cannot remove from ‘test’ registry. SequentialFuture not registered.
> stopifnot(inherits(res, "error"))
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> FutureRegistry(where = "test", action = "reset")
list()
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "<unknown>"), error = identity)
[16:20:40.715] INTERNAL ERROR: Unknown action to ‘test’ registry: <unknown>
> stopifnot(inherits(res, "error"))
> 
> message("*** FutureRegistry() - exceptions ... DONE")
*** FutureRegistry() - exceptions ... DONE
> 
> 
> message("*** FutureRegistry() ... DONE")
*** FutureRegistry() ... DONE
> 
> source("incl/end.R")
[16:20:40.716] plan(): Setting new future strategy stack:
[16:20:40.716] List of future strategies:
[16:20:40.716] 1. FutureStrategy:
[16:20:40.716]    - args: function (..., envir = parent.frame())
[16:20:40.716]    - tweaked: FALSE
[16:20:40.716]    - call: future::plan(oplan)
[16:20:40.728] plan(): nbrOfWorkers() = 1
> 
