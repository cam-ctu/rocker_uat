
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:20:12.319] plan(): Setting new future strategy stack:
[16:20:12.319] List of future strategies:
[16:20:12.319] 1. sequential:
[16:20:12.319]    - args: function (..., envir = parent.frame())
[16:20:12.319]    - tweaked: FALSE
[16:20:12.319]    - call: future::plan("sequential")
[16:20:12.334] plan(): nbrOfWorkers() = 1
> 
> message("*** Demos ...")
*** Demos ...
> 
> message("*** Fibonacci demo of the 'future' package ...")
*** Fibonacci demo of the 'future' package ...
> demo("fibonacci", package = "future", ask = FALSE)


	demo(fibonacci)
	---- ~~~~~~~~~

> library("future")

> library("listenv")

> ## IMPORTANT:
> ## 1. The below usage of lazy futures will only work when they are
> ##    all evaluated in the same process.
> ## 2. We disable the capturing of standard output (stdout=NA) to avoid
> ##    'sink stack is full' errors
> ## 3. We disable the capturing of most conditions (condition="error") to
> ##    avoid stacking up too many conditions
> oplan <- plan(sequential)
[16:20:12.349] plan(): Setting new future strategy stack:
[16:20:12.349] List of future strategies:
[16:20:12.349] 1. sequential:
[16:20:12.349]    - args: function (..., envir = parent.frame())
[16:20:12.349]    - tweaked: FALSE
[16:20:12.349]    - call: plan(sequential)
[16:20:12.359] plan(): nbrOfWorkers() = 1

> ## Defines the first 100 Fibonacci numbers
> ## (0, 1, 1, 2, 3, 5, 8, ...)
> ## but calculate only the ones need when
> ## a number is actually requested.
> 
> x <- listenv()

> x[[1]] <- 0

> x[[2]] <- 1

> for (i in 3:100) {
+   x[[i]] %<-% { x[[i - 2]] + x[[i - 1]] } %lazy% TRUE %stdout% NA %conditions% "error"
+ }
[16:20:12.366] getGlobalsAndPackages() ...
[16:20:12.366] Searching for globals...
[16:20:12.376] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.376] Searching for globals ... DONE
[16:20:12.376] Resolving globals: FALSE
[16:20:12.377] The total size of the 2 globals is 224 bytes (224 bytes)
[16:20:12.378] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 224 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (168 bytes of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.378] - globals: [2] ‘x’, ‘i’
[16:20:12.378] 
[16:20:12.378] getGlobalsAndPackages() ... DONE
[16:20:12.379] getGlobalsAndPackages() ...
[16:20:12.379] Searching for globals...
[16:20:12.380] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.381] Searching for globals ... DONE
[16:20:12.381] Resolving globals: FALSE
[16:20:12.381] The total size of the 2 globals is 8.41 KiB (8608 bytes)
[16:20:12.382] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 8.41 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (8.35 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.382] - globals: [2] ‘x’, ‘i’
[16:20:12.382] 
[16:20:12.382] getGlobalsAndPackages() ... DONE
[16:20:12.383] getGlobalsAndPackages() ...
[16:20:12.383] Searching for globals...
[16:20:12.384] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.384] Searching for globals ... DONE
[16:20:12.384] Resolving globals: FALSE
[16:20:12.385] The total size of the 2 globals is 16.76 KiB (17160 bytes)
[16:20:12.386] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 16.76 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (16.70 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.386] - globals: [2] ‘x’, ‘i’
[16:20:12.386] 
[16:20:12.386] getGlobalsAndPackages() ... DONE
[16:20:12.387] getGlobalsAndPackages() ...
[16:20:12.387] Searching for globals...
[16:20:12.388] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.388] Searching for globals ... DONE
[16:20:12.388] Resolving globals: FALSE
[16:20:12.390] The total size of the 2 globals is 25.11 KiB (25712 bytes)
[16:20:12.390] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 25.11 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (25.05 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.390] - globals: [2] ‘x’, ‘i’
[16:20:12.390] 
[16:20:12.390] getGlobalsAndPackages() ... DONE
[16:20:12.391] getGlobalsAndPackages() ...
[16:20:12.391] Searching for globals...
[16:20:12.392] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.392] Searching for globals ... DONE
[16:20:12.392] Resolving globals: FALSE
[16:20:12.394] The total size of the 2 globals is 33.46 KiB (34264 bytes)
[16:20:12.394] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 33.46 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (33.41 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.394] - globals: [2] ‘x’, ‘i’
[16:20:12.395] 
[16:20:12.395] getGlobalsAndPackages() ... DONE
[16:20:12.395] getGlobalsAndPackages() ...
[16:20:12.395] Searching for globals...
[16:20:12.397] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.397] Searching for globals ... DONE
[16:20:12.397] Resolving globals: FALSE
[16:20:12.400] The total size of the 2 globals is 41.81 KiB (42816 bytes)
[16:20:12.400] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 41.81 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (41.76 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.400] - globals: [2] ‘x’, ‘i’
[16:20:12.400] 
[16:20:12.401] getGlobalsAndPackages() ... DONE
[16:20:12.401] getGlobalsAndPackages() ...
[16:20:12.401] Searching for globals...
[16:20:12.403] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.403] Searching for globals ... DONE
[16:20:12.403] Resolving globals: FALSE
[16:20:12.405] The total size of the 2 globals is 50.16 KiB (51368 bytes)
[16:20:12.405] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 50.16 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (50.11 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.405] - globals: [2] ‘x’, ‘i’
[16:20:12.405] 
[16:20:12.405] getGlobalsAndPackages() ... DONE
[16:20:12.406] getGlobalsAndPackages() ...
[16:20:12.406] Searching for globals...
[16:20:12.407] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.408] Searching for globals ... DONE
[16:20:12.408] Resolving globals: FALSE
[16:20:12.410] The total size of the 2 globals is 58.52 KiB (59920 bytes)
[16:20:12.410] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 58.52 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (58.46 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.410] - globals: [2] ‘x’, ‘i’
[16:20:12.410] 
[16:20:12.411] getGlobalsAndPackages() ... DONE
[16:20:12.411] getGlobalsAndPackages() ...
[16:20:12.411] Searching for globals...
[16:20:12.413] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.413] Searching for globals ... DONE
[16:20:12.413] Resolving globals: FALSE
[16:20:12.415] The total size of the 2 globals is 66.87 KiB (68472 bytes)
[16:20:12.416] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 66.87 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (66.81 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.416] - globals: [2] ‘x’, ‘i’
[16:20:12.416] 
[16:20:12.416] getGlobalsAndPackages() ... DONE
[16:20:12.416] getGlobalsAndPackages() ...
[16:20:12.417] Searching for globals...
[16:20:12.418] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.418] Searching for globals ... DONE
[16:20:12.418] Resolving globals: FALSE
[16:20:12.422] The total size of the 2 globals is 75.22 KiB (77024 bytes)
[16:20:12.423] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 75.22 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (75.16 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.423] - globals: [2] ‘x’, ‘i’
[16:20:12.423] 
[16:20:12.423] getGlobalsAndPackages() ... DONE
[16:20:12.424] getGlobalsAndPackages() ...
[16:20:12.424] Searching for globals...
[16:20:12.425] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.426] Searching for globals ... DONE
[16:20:12.426] Resolving globals: FALSE
[16:20:12.429] The total size of the 2 globals is 83.57 KiB (85576 bytes)
[16:20:12.429] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 83.57 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (83.52 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.429] - globals: [2] ‘x’, ‘i’
[16:20:12.429] 
[16:20:12.429] getGlobalsAndPackages() ... DONE
[16:20:12.430] getGlobalsAndPackages() ...
[16:20:12.430] Searching for globals...
[16:20:12.431] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.432] Searching for globals ... DONE
[16:20:12.432] Resolving globals: FALSE
[16:20:12.435] The total size of the 2 globals is 91.92 KiB (94128 bytes)
[16:20:12.435] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 91.92 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (91.87 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.435] - globals: [2] ‘x’, ‘i’
[16:20:12.435] 
[16:20:12.436] getGlobalsAndPackages() ... DONE
[16:20:12.436] getGlobalsAndPackages() ...
[16:20:12.436] Searching for globals...
[16:20:12.438] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.438] Searching for globals ... DONE
[16:20:12.438] Resolving globals: FALSE
[16:20:12.443] The total size of the 2 globals is 100.27 KiB (102680 bytes)
[16:20:12.444] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 100.27 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (100.22 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.444] - globals: [2] ‘x’, ‘i’
[16:20:12.444] 
[16:20:12.444] getGlobalsAndPackages() ... DONE
[16:20:12.445] getGlobalsAndPackages() ...
[16:20:12.445] Searching for globals...
[16:20:12.447] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.447] Searching for globals ... DONE
[16:20:12.447] Resolving globals: FALSE
[16:20:12.451] The total size of the 2 globals is 108.62 KiB (111232 bytes)
[16:20:12.452] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 108.62 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (108.57 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.452] - globals: [2] ‘x’, ‘i’
[16:20:12.452] 
[16:20:12.452] getGlobalsAndPackages() ... DONE
[16:20:12.453] getGlobalsAndPackages() ...
[16:20:12.453] Searching for globals...
[16:20:12.454] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.454] Searching for globals ... DONE
[16:20:12.454] Resolving globals: FALSE
[16:20:12.458] The total size of the 2 globals is 116.98 KiB (119784 bytes)
[16:20:12.459] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 116.98 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (116.92 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.459] - globals: [2] ‘x’, ‘i’
[16:20:12.459] 
[16:20:12.459] getGlobalsAndPackages() ... DONE
[16:20:12.460] getGlobalsAndPackages() ...
[16:20:12.460] Searching for globals...
[16:20:12.461] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.462] Searching for globals ... DONE
[16:20:12.463] Resolving globals: FALSE
[16:20:12.468] The total size of the 2 globals is 125.33 KiB (128336 bytes)
[16:20:12.469] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 125.33 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (125.27 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.469] - globals: [2] ‘x’, ‘i’
[16:20:12.469] 
[16:20:12.469] getGlobalsAndPackages() ... DONE
[16:20:12.470] getGlobalsAndPackages() ...
[16:20:12.470] Searching for globals...
[16:20:12.472] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.472] Searching for globals ... DONE
[16:20:12.472] Resolving globals: FALSE
[16:20:12.477] The total size of the 2 globals is 133.68 KiB (136888 bytes)
[16:20:12.478] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 133.68 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (133.62 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.478] - globals: [2] ‘x’, ‘i’
[16:20:12.478] 
[16:20:12.478] getGlobalsAndPackages() ... DONE
[16:20:12.479] getGlobalsAndPackages() ...
[16:20:12.479] Searching for globals...
[16:20:12.480] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.480] Searching for globals ... DONE
[16:20:12.480] Resolving globals: FALSE
[16:20:12.487] The total size of the 2 globals is 142.03 KiB (145440 bytes)
[16:20:12.487] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 142.03 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (141.98 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.487] - globals: [2] ‘x’, ‘i’
[16:20:12.487] 
[16:20:12.487] getGlobalsAndPackages() ... DONE
[16:20:12.488] getGlobalsAndPackages() ...
[16:20:12.488] Searching for globals...
[16:20:12.489] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.489] Searching for globals ... DONE
[16:20:12.490] Resolving globals: FALSE
[16:20:12.494] The total size of the 2 globals is 150.38 KiB (153992 bytes)
[16:20:12.495] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 150.38 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (150.33 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.495] - globals: [2] ‘x’, ‘i’
[16:20:12.495] 
[16:20:12.495] getGlobalsAndPackages() ... DONE
[16:20:12.496] getGlobalsAndPackages() ...
[16:20:12.496] Searching for globals...
[16:20:12.497] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.497] Searching for globals ... DONE
[16:20:12.498] Resolving globals: FALSE
[16:20:12.504] The total size of the 2 globals is 158.73 KiB (162544 bytes)
[16:20:12.504] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 158.73 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (158.68 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.505] - globals: [2] ‘x’, ‘i’
[16:20:12.505] 
[16:20:12.505] getGlobalsAndPackages() ... DONE
[16:20:12.505] getGlobalsAndPackages() ...
[16:20:12.505] Searching for globals...
[16:20:12.507] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.507] Searching for globals ... DONE
[16:20:12.507] Resolving globals: FALSE
[16:20:12.513] The total size of the 2 globals is 167.09 KiB (171096 bytes)
[16:20:12.513] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 167.09 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (167.03 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.513] - globals: [2] ‘x’, ‘i’
[16:20:12.513] 
[16:20:12.513] getGlobalsAndPackages() ... DONE
[16:20:12.514] getGlobalsAndPackages() ...
[16:20:12.514] Searching for globals...
[16:20:12.515] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.516] Searching for globals ... DONE
[16:20:12.516] Resolving globals: FALSE
[16:20:12.523] The total size of the 2 globals is 175.44 KiB (179648 bytes)
[16:20:12.523] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 175.44 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (175.38 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.523] - globals: [2] ‘x’, ‘i’
[16:20:12.523] 
[16:20:12.523] getGlobalsAndPackages() ... DONE
[16:20:12.524] getGlobalsAndPackages() ...
[16:20:12.524] Searching for globals...
[16:20:12.525] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.526] Searching for globals ... DONE
[16:20:12.526] Resolving globals: FALSE
[16:20:12.532] The total size of the 2 globals is 183.79 KiB (188200 bytes)
[16:20:12.532] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 183.79 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (183.73 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.532] - globals: [2] ‘x’, ‘i’
[16:20:12.532] 
[16:20:12.532] getGlobalsAndPackages() ... DONE
[16:20:12.533] getGlobalsAndPackages() ...
[16:20:12.533] Searching for globals...
[16:20:12.534] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.534] Searching for globals ... DONE
[16:20:12.534] Resolving globals: FALSE
[16:20:12.542] The total size of the 2 globals is 192.14 KiB (196752 bytes)
[16:20:12.542] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 192.14 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (192.09 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.542] - globals: [2] ‘x’, ‘i’
[16:20:12.542] 
[16:20:12.543] getGlobalsAndPackages() ... DONE
[16:20:12.543] getGlobalsAndPackages() ...
[16:20:12.543] Searching for globals...
[16:20:12.545] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.545] Searching for globals ... DONE
[16:20:12.545] Resolving globals: FALSE
[16:20:12.551] The total size of the 2 globals is 200.49 KiB (205304 bytes)
[16:20:12.552] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 200.49 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (200.44 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.552] - globals: [2] ‘x’, ‘i’
[16:20:12.552] 
[16:20:12.552] getGlobalsAndPackages() ... DONE
[16:20:12.552] getGlobalsAndPackages() ...
[16:20:12.552] Searching for globals...
[16:20:12.554] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.554] Searching for globals ... DONE
[16:20:12.554] Resolving globals: FALSE
[16:20:12.562] The total size of the 2 globals is 208.84 KiB (213856 bytes)
[16:20:12.562] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 208.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (208.79 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.562] - globals: [2] ‘x’, ‘i’
[16:20:12.563] 
[16:20:12.563] getGlobalsAndPackages() ... DONE
[16:20:12.563] getGlobalsAndPackages() ...
[16:20:12.563] Searching for globals...
[16:20:12.565] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.565] Searching for globals ... DONE
[16:20:12.565] Resolving globals: FALSE
[16:20:12.572] The total size of the 2 globals is 217.20 KiB (222408 bytes)
[16:20:12.573] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 217.20 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (217.14 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.573] - globals: [2] ‘x’, ‘i’
[16:20:12.573] 
[16:20:12.573] getGlobalsAndPackages() ... DONE
[16:20:12.574] getGlobalsAndPackages() ...
[16:20:12.574] Searching for globals...
[16:20:12.575] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.576] Searching for globals ... DONE
[16:20:12.576] Resolving globals: FALSE
[16:20:12.583] The total size of the 2 globals is 225.55 KiB (230960 bytes)
[16:20:12.583] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 225.55 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (225.49 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.583] - globals: [2] ‘x’, ‘i’
[16:20:12.583] 
[16:20:12.583] getGlobalsAndPackages() ... DONE
[16:20:12.584] getGlobalsAndPackages() ...
[16:20:12.584] Searching for globals...
[16:20:12.585] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.586] Searching for globals ... DONE
[16:20:12.586] Resolving globals: FALSE
[16:20:12.594] The total size of the 2 globals is 233.90 KiB (239512 bytes)
[16:20:12.594] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 233.90 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (233.84 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.594] - globals: [2] ‘x’, ‘i’
[16:20:12.594] 
[16:20:12.594] getGlobalsAndPackages() ... DONE
[16:20:12.595] getGlobalsAndPackages() ...
[16:20:12.595] Searching for globals...
[16:20:12.596] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.597] Searching for globals ... DONE
[16:20:12.597] Resolving globals: FALSE
[16:20:12.604] The total size of the 2 globals is 242.25 KiB (248064 bytes)
[16:20:12.605] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 242.25 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (242.20 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.605] - globals: [2] ‘x’, ‘i’
[16:20:12.606] 
[16:20:12.606] getGlobalsAndPackages() ... DONE
[16:20:12.606] getGlobalsAndPackages() ...
[16:20:12.606] Searching for globals...
[16:20:12.608] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.608] Searching for globals ... DONE
[16:20:12.608] Resolving globals: FALSE
[16:20:12.616] The total size of the 2 globals is 250.60 KiB (256616 bytes)
[16:20:12.616] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 250.60 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (250.55 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.616] - globals: [2] ‘x’, ‘i’
[16:20:12.616] 
[16:20:12.616] getGlobalsAndPackages() ... DONE
[16:20:12.617] getGlobalsAndPackages() ...
[16:20:12.617] Searching for globals...
[16:20:12.618] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.618] Searching for globals ... DONE
[16:20:12.618] Resolving globals: FALSE
[16:20:12.627] The total size of the 2 globals is 258.95 KiB (265168 bytes)
[16:20:12.628] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 258.95 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (258.90 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.628] - globals: [2] ‘x’, ‘i’
[16:20:12.628] 
[16:20:12.628] getGlobalsAndPackages() ... DONE
[16:20:12.629] getGlobalsAndPackages() ...
[16:20:12.629] Searching for globals...
[16:20:12.630] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.630] Searching for globals ... DONE
[16:20:12.630] Resolving globals: FALSE
[16:20:12.640] The total size of the 2 globals is 267.30 KiB (273720 bytes)
[16:20:12.640] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 267.30 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (267.25 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.640] - globals: [2] ‘x’, ‘i’
[16:20:12.640] 
[16:20:12.640] getGlobalsAndPackages() ... DONE
[16:20:12.641] getGlobalsAndPackages() ...
[16:20:12.641] Searching for globals...
[16:20:12.642] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.643] Searching for globals ... DONE
[16:20:12.643] Resolving globals: FALSE
[16:20:12.651] The total size of the 2 globals is 275.66 KiB (282272 bytes)
[16:20:12.652] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 275.66 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (275.60 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.652] - globals: [2] ‘x’, ‘i’
[16:20:12.652] 
[16:20:12.652] getGlobalsAndPackages() ... DONE
[16:20:12.653] getGlobalsAndPackages() ...
[16:20:12.653] Searching for globals...
[16:20:12.656] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.656] Searching for globals ... DONE
[16:20:12.656] Resolving globals: FALSE
[16:20:12.666] The total size of the 2 globals is 284.01 KiB (290824 bytes)
[16:20:12.666] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 284.01 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (283.95 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.666] - globals: [2] ‘x’, ‘i’
[16:20:12.666] 
[16:20:12.666] getGlobalsAndPackages() ... DONE
[16:20:12.667] getGlobalsAndPackages() ...
[16:20:12.667] Searching for globals...
[16:20:12.669] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.669] Searching for globals ... DONE
[16:20:12.669] Resolving globals: FALSE
[16:20:12.680] The total size of the 2 globals is 292.36 KiB (299376 bytes)
[16:20:12.680] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 292.36 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (292.30 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.681] - globals: [2] ‘x’, ‘i’
[16:20:12.681] 
[16:20:12.681] getGlobalsAndPackages() ... DONE
[16:20:12.681] getGlobalsAndPackages() ...
[16:20:12.681] Searching for globals...
[16:20:12.683] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.683] Searching for globals ... DONE
[16:20:12.683] Resolving globals: FALSE
[16:20:12.695] The total size of the 2 globals is 300.71 KiB (307928 bytes)
[16:20:12.695] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 300.71 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (300.66 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.695] - globals: [2] ‘x’, ‘i’
[16:20:12.695] 
[16:20:12.695] getGlobalsAndPackages() ... DONE
[16:20:12.696] getGlobalsAndPackages() ...
[16:20:12.696] Searching for globals...
[16:20:12.698] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.698] Searching for globals ... DONE
[16:20:12.698] Resolving globals: FALSE
[16:20:12.734] The total size of the 2 globals is 309.06 KiB (316480 bytes)
[16:20:12.734] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 309.06 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (309.01 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.734] - globals: [2] ‘x’, ‘i’
[16:20:12.735] 
[16:20:12.735] getGlobalsAndPackages() ... DONE
[16:20:12.735] getGlobalsAndPackages() ...
[16:20:12.735] Searching for globals...
[16:20:12.737] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.737] Searching for globals ... DONE
[16:20:12.737] Resolving globals: FALSE
[16:20:12.749] The total size of the 2 globals is 317.41 KiB (325032 bytes)
[16:20:12.749] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 317.41 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (317.36 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.749] - globals: [2] ‘x’, ‘i’
[16:20:12.749] 
[16:20:12.749] getGlobalsAndPackages() ... DONE
[16:20:12.750] getGlobalsAndPackages() ...
[16:20:12.750] Searching for globals...
[16:20:12.751] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.752] Searching for globals ... DONE
[16:20:12.752] Resolving globals: FALSE
[16:20:12.762] The total size of the 2 globals is 325.77 KiB (333584 bytes)
[16:20:12.763] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 325.77 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (325.71 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.763] - globals: [2] ‘x’, ‘i’
[16:20:12.763] 
[16:20:12.763] getGlobalsAndPackages() ... DONE
[16:20:12.764] getGlobalsAndPackages() ...
[16:20:12.764] Searching for globals...
[16:20:12.766] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.766] Searching for globals ... DONE
[16:20:12.766] Resolving globals: FALSE
[16:20:12.777] The total size of the 2 globals is 334.12 KiB (342136 bytes)
[16:20:12.777] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 334.12 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (334.06 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.778] - globals: [2] ‘x’, ‘i’
[16:20:12.778] 
[16:20:12.778] getGlobalsAndPackages() ... DONE
[16:20:12.778] getGlobalsAndPackages() ...
[16:20:12.778] Searching for globals...
[16:20:12.780] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.780] Searching for globals ... DONE
[16:20:12.780] Resolving globals: FALSE
[16:20:12.792] The total size of the 2 globals is 342.47 KiB (350688 bytes)
[16:20:12.792] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 342.47 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (342.41 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.792] - globals: [2] ‘x’, ‘i’
[16:20:12.792] 
[16:20:12.792] getGlobalsAndPackages() ... DONE
[16:20:12.793] getGlobalsAndPackages() ...
[16:20:12.793] Searching for globals...
[16:20:12.794] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.795] Searching for globals ... DONE
[16:20:12.795] Resolving globals: FALSE
[16:20:12.807] The total size of the 2 globals is 350.82 KiB (359240 bytes)
[16:20:12.807] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 350.82 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (350.77 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.807] - globals: [2] ‘x’, ‘i’
[16:20:12.807] 
[16:20:12.807] getGlobalsAndPackages() ... DONE
[16:20:12.808] getGlobalsAndPackages() ...
[16:20:12.808] Searching for globals...
[16:20:12.809] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.809] Searching for globals ... DONE
[16:20:12.809] Resolving globals: FALSE
[16:20:12.822] The total size of the 2 globals is 359.17 KiB (367792 bytes)
[16:20:12.822] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 359.17 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (359.12 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.822] - globals: [2] ‘x’, ‘i’
[16:20:12.822] 
[16:20:12.822] getGlobalsAndPackages() ... DONE
[16:20:12.823] getGlobalsAndPackages() ...
[16:20:12.823] Searching for globals...
[16:20:12.824] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.825] Searching for globals ... DONE
[16:20:12.825] Resolving globals: FALSE
[16:20:12.837] The total size of the 2 globals is 367.52 KiB (376344 bytes)
[16:20:12.838] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 367.52 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (367.47 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.838] - globals: [2] ‘x’, ‘i’
[16:20:12.838] 
[16:20:12.838] getGlobalsAndPackages() ... DONE
[16:20:12.839] getGlobalsAndPackages() ...
[16:20:12.839] Searching for globals...
[16:20:12.840] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.840] Searching for globals ... DONE
[16:20:12.840] Resolving globals: FALSE
[16:20:12.853] The total size of the 2 globals is 375.88 KiB (384896 bytes)
[16:20:12.853] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 375.88 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (375.82 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.854] - globals: [2] ‘x’, ‘i’
[16:20:12.854] 
[16:20:12.854] getGlobalsAndPackages() ... DONE
[16:20:12.854] getGlobalsAndPackages() ...
[16:20:12.854] Searching for globals...
[16:20:12.856] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.856] Searching for globals ... DONE
[16:20:12.856] Resolving globals: FALSE
[16:20:12.869] The total size of the 2 globals is 384.23 KiB (393448 bytes)
[16:20:12.869] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 384.23 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (384.17 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.869] - globals: [2] ‘x’, ‘i’
[16:20:12.869] 
[16:20:12.869] getGlobalsAndPackages() ... DONE
[16:20:12.870] getGlobalsAndPackages() ...
[16:20:12.870] Searching for globals...
[16:20:12.871] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.871] Searching for globals ... DONE
[16:20:12.872] Resolving globals: FALSE
[16:20:12.885] The total size of the 2 globals is 392.58 KiB (402000 bytes)
[16:20:12.886] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 392.58 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (392.52 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.886] - globals: [2] ‘x’, ‘i’
[16:20:12.886] 
[16:20:12.886] getGlobalsAndPackages() ... DONE
[16:20:12.887] getGlobalsAndPackages() ...
[16:20:12.887] Searching for globals...
[16:20:12.889] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.889] Searching for globals ... DONE
[16:20:12.889] Resolving globals: FALSE
[16:20:12.904] The total size of the 2 globals is 400.93 KiB (410552 bytes)
[16:20:12.905] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 400.93 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (400.88 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.905] - globals: [2] ‘x’, ‘i’
[16:20:12.905] 
[16:20:12.905] getGlobalsAndPackages() ... DONE
[16:20:12.906] getGlobalsAndPackages() ...
[16:20:12.906] Searching for globals...
[16:20:12.907] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.908] Searching for globals ... DONE
[16:20:12.908] Resolving globals: FALSE
[16:20:12.923] The total size of the 2 globals is 409.28 KiB (419104 bytes)
[16:20:12.924] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 409.28 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (409.23 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.924] - globals: [2] ‘x’, ‘i’
[16:20:12.924] 
[16:20:12.924] getGlobalsAndPackages() ... DONE
[16:20:12.925] getGlobalsAndPackages() ...
[16:20:12.925] Searching for globals...
[16:20:12.926] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.926] Searching for globals ... DONE
[16:20:12.927] Resolving globals: FALSE
[16:20:12.942] The total size of the 2 globals is 417.63 KiB (427656 bytes)
[16:20:12.942] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 417.63 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (417.58 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.942] - globals: [2] ‘x’, ‘i’
[16:20:12.942] 
[16:20:12.943] getGlobalsAndPackages() ... DONE
[16:20:12.943] getGlobalsAndPackages() ...
[16:20:12.943] Searching for globals...
[16:20:12.946] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.946] Searching for globals ... DONE
[16:20:12.946] Resolving globals: FALSE
[16:20:12.961] The total size of the 2 globals is 425.98 KiB (436208 bytes)
[16:20:12.962] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 425.98 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (425.93 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.962] - globals: [2] ‘x’, ‘i’
[16:20:12.962] 
[16:20:12.962] getGlobalsAndPackages() ... DONE
[16:20:12.962] getGlobalsAndPackages() ...
[16:20:12.963] Searching for globals...
[16:20:12.964] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.964] Searching for globals ... DONE
[16:20:12.964] Resolving globals: FALSE
[16:20:12.980] The total size of the 2 globals is 434.34 KiB (444760 bytes)
[16:20:12.980] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 434.34 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (434.28 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.980] - globals: [2] ‘x’, ‘i’
[16:20:12.980] 
[16:20:12.980] getGlobalsAndPackages() ... DONE
[16:20:12.981] getGlobalsAndPackages() ...
[16:20:12.981] Searching for globals...
[16:20:12.982] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:12.983] Searching for globals ... DONE
[16:20:12.983] Resolving globals: FALSE
[16:20:12.998] The total size of the 2 globals is 442.69 KiB (453312 bytes)
[16:20:12.999] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 442.69 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (442.63 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:12.999] - globals: [2] ‘x’, ‘i’
[16:20:12.999] 
[16:20:12.999] getGlobalsAndPackages() ... DONE
[16:20:13.000] getGlobalsAndPackages() ...
[16:20:13.000] Searching for globals...
[16:20:13.001] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:13.001] Searching for globals ... DONE
[16:20:13.001] Resolving globals: FALSE
[16:20:13.017] The total size of the 2 globals is 451.04 KiB (461864 bytes)
[16:20:13.018] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 451.04 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (450.98 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:13.018] - globals: [2] ‘x’, ‘i’
[16:20:13.018] 
[16:20:13.018] getGlobalsAndPackages() ... DONE
[16:20:13.019] getGlobalsAndPackages() ...
[16:20:13.019] Searching for globals...
[16:20:13.020] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:13.020] Searching for globals ... DONE
[16:20:13.020] Resolving globals: FALSE
[16:20:13.037] The total size of the 2 globals is 459.39 KiB (470416 bytes)
[16:20:13.037] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 459.39 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (459.34 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:13.037] - globals: [2] ‘x’, ‘i’
[16:20:13.037] 
[16:20:13.037] getGlobalsAndPackages() ... DONE
[16:20:13.039] getGlobalsAndPackages() ...
[16:20:13.039] Searching for globals...
[16:20:13.041] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:13.041] Searching for globals ... DONE
[16:20:13.041] Resolving globals: FALSE
[16:20:13.058] The total size of the 2 globals is 467.74 KiB (478968 bytes)
[16:20:13.059] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 467.74 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (467.69 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:13.059] - globals: [2] ‘x’, ‘i’
[16:20:13.059] 
[16:20:13.059] getGlobalsAndPackages() ... DONE
[16:20:13.060] getGlobalsAndPackages() ...
[16:20:13.060] Searching for globals...
[16:20:13.061] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:13.061] Searching for globals ... DONE
[16:20:13.061] Resolving globals: FALSE
[16:20:13.079] The total size of the 2 globals is 476.09 KiB (487520 bytes)
[16:20:13.080] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 476.09 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (476.04 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:13.080] - globals: [2] ‘x’, ‘i’
[16:20:13.080] 
[16:20:13.080] getGlobalsAndPackages() ... DONE
[16:20:13.081] getGlobalsAndPackages() ...
[16:20:13.081] Searching for globals...
[16:20:13.082] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:13.082] Searching for globals ... DONE
[16:20:13.083] Resolving globals: FALSE
[16:20:13.100] The total size of the 2 globals is 484.45 KiB (496072 bytes)
[16:20:13.100] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 484.45 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (484.39 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:13.100] - globals: [2] ‘x’, ‘i’
[16:20:13.100] 
[16:20:13.100] getGlobalsAndPackages() ... DONE
[16:20:13.101] getGlobalsAndPackages() ...
[16:20:13.101] Searching for globals...
[16:20:13.102] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:13.103] Searching for globals ... DONE
[16:20:13.103] Resolving globals: FALSE
[16:20:13.122] The total size of the 2 globals is 492.80 KiB (504624 bytes)
[16:20:13.123] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 492.80 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (492.74 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:13.123] - globals: [2] ‘x’, ‘i’
[16:20:13.123] 
[16:20:13.123] getGlobalsAndPackages() ... DONE
[16:20:13.124] getGlobalsAndPackages() ...
[16:20:13.124] Searching for globals...
[16:20:13.126] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:13.126] Searching for globals ... DONE
[16:20:13.126] Resolving globals: FALSE
[16:20:13.144] The total size of the 2 globals is 501.15 KiB (513176 bytes)
[16:20:13.145] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 501.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (501.09 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:13.145] - globals: [2] ‘x’, ‘i’
[16:20:13.145] 
[16:20:13.145] getGlobalsAndPackages() ... DONE
[16:20:13.146] getGlobalsAndPackages() ...
[16:20:13.146] Searching for globals...
[16:20:13.147] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:13.147] Searching for globals ... DONE
[16:20:13.147] Resolving globals: FALSE
[16:20:13.166] The total size of the 2 globals is 509.50 KiB (521728 bytes)
[16:20:13.166] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 509.50 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (509.45 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:13.166] - globals: [2] ‘x’, ‘i’
[16:20:13.166] 
[16:20:13.166] getGlobalsAndPackages() ... DONE
[16:20:13.167] getGlobalsAndPackages() ...
[16:20:13.167] Searching for globals...
[16:20:13.169] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:13.169] Searching for globals ... DONE
[16:20:13.169] Resolving globals: FALSE
[16:20:13.188] The total size of the 2 globals is 517.85 KiB (530280 bytes)
[16:20:13.189] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 517.85 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (517.80 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:13.189] - globals: [2] ‘x’, ‘i’
[16:20:13.189] 
[16:20:13.189] getGlobalsAndPackages() ... DONE
[16:20:13.190] getGlobalsAndPackages() ...
[16:20:13.190] Searching for globals...
[16:20:13.192] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:13.192] Searching for globals ... DONE
[16:20:13.192] Resolving globals: FALSE
[16:20:13.211] The total size of the 2 globals is 526.20 KiB (538832 bytes)
[16:20:13.212] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 526.20 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (526.15 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:13.212] - globals: [2] ‘x’, ‘i’
[16:20:13.212] 
[16:20:13.212] getGlobalsAndPackages() ... DONE
[16:20:13.213] getGlobalsAndPackages() ...
[16:20:13.213] Searching for globals...
[16:20:13.215] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:13.215] Searching for globals ... DONE
[16:20:13.215] Resolving globals: FALSE
[16:20:13.235] The total size of the 2 globals is 534.55 KiB (547384 bytes)
[16:20:13.236] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 534.55 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (534.50 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:13.236] - globals: [2] ‘x’, ‘i’
[16:20:13.236] 
[16:20:13.236] getGlobalsAndPackages() ... DONE
[16:20:13.237] getGlobalsAndPackages() ...
[16:20:13.237] Searching for globals...
[16:20:13.238] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:13.238] Searching for globals ... DONE
[16:20:13.239] Resolving globals: FALSE
[16:20:13.258] The total size of the 2 globals is 542.91 KiB (555936 bytes)
[16:20:13.259] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 542.91 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (542.85 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:13.259] - globals: [2] ‘x’, ‘i’
[16:20:13.259] 
[16:20:13.259] getGlobalsAndPackages() ... DONE
[16:20:13.260] getGlobalsAndPackages() ...
[16:20:13.260] Searching for globals...
[16:20:13.261] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:13.261] Searching for globals ... DONE
[16:20:13.262] Resolving globals: FALSE
[16:20:13.282] The total size of the 2 globals is 551.26 KiB (564488 bytes)
[16:20:13.282] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 551.26 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (551.20 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:13.282] - globals: [2] ‘x’, ‘i’
[16:20:13.282] 
[16:20:13.283] getGlobalsAndPackages() ... DONE
[16:20:13.283] getGlobalsAndPackages() ...
[16:20:13.283] Searching for globals...
[16:20:13.285] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:13.285] Searching for globals ... DONE
[16:20:13.285] Resolving globals: FALSE
[16:20:13.304] The total size of the 2 globals is 559.61 KiB (573040 bytes)
[16:20:13.305] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 559.61 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (559.55 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:13.305] - globals: [2] ‘x’, ‘i’
[16:20:13.305] 
[16:20:13.305] getGlobalsAndPackages() ... DONE
[16:20:13.305] getGlobalsAndPackages() ...
[16:20:13.306] Searching for globals...
[16:20:13.307] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:13.307] Searching for globals ... DONE
[16:20:13.307] Resolving globals: FALSE
[16:20:13.329] The total size of the 2 globals is 567.96 KiB (581592 bytes)
[16:20:13.330] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 567.96 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (567.91 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:13.330] - globals: [2] ‘x’, ‘i’
[16:20:13.330] 
[16:20:13.330] getGlobalsAndPackages() ... DONE
[16:20:13.331] getGlobalsAndPackages() ...
[16:20:13.331] Searching for globals...
[16:20:13.332] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:13.333] Searching for globals ... DONE
[16:20:13.333] Resolving globals: FALSE
[16:20:13.353] The total size of the 2 globals is 576.31 KiB (590144 bytes)
[16:20:13.354] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 576.31 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (576.26 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:13.354] - globals: [2] ‘x’, ‘i’
[16:20:13.354] 
[16:20:13.354] getGlobalsAndPackages() ... DONE
[16:20:13.355] getGlobalsAndPackages() ...
[16:20:13.355] Searching for globals...
[16:20:13.356] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:13.356] Searching for globals ... DONE
[16:20:13.356] Resolving globals: FALSE
[16:20:13.378] The total size of the 2 globals is 584.66 KiB (598696 bytes)
[16:20:13.378] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 584.66 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (584.61 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:13.378] - globals: [2] ‘x’, ‘i’
[16:20:13.379] 
[16:20:13.379] getGlobalsAndPackages() ... DONE
[16:20:13.379] getGlobalsAndPackages() ...
[16:20:13.379] Searching for globals...
[16:20:13.381] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:13.381] Searching for globals ... DONE
[16:20:13.381] Resolving globals: FALSE
[16:20:13.403] The total size of the 2 globals is 593.02 KiB (607248 bytes)
[16:20:13.403] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 593.02 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (592.96 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:13.403] - globals: [2] ‘x’, ‘i’
[16:20:13.404] 
[16:20:13.404] getGlobalsAndPackages() ... DONE
[16:20:13.404] getGlobalsAndPackages() ...
[16:20:13.404] Searching for globals...
[16:20:13.406] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:13.406] Searching for globals ... DONE
[16:20:13.406] Resolving globals: FALSE
[16:20:13.427] The total size of the 2 globals is 601.37 KiB (615800 bytes)
[16:20:13.427] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 601.37 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (601.31 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:13.428] - globals: [2] ‘x’, ‘i’
[16:20:13.428] 
[16:20:13.428] getGlobalsAndPackages() ... DONE
[16:20:13.428] getGlobalsAndPackages() ...
[16:20:13.428] Searching for globals...
[16:20:13.430] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:13.430] Searching for globals ... DONE
[16:20:13.430] Resolving globals: FALSE
[16:20:13.453] The total size of the 2 globals is 609.72 KiB (624352 bytes)
[16:20:13.453] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 609.72 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (609.66 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:13.453] - globals: [2] ‘x’, ‘i’
[16:20:13.454] 
[16:20:13.454] getGlobalsAndPackages() ... DONE
[16:20:13.454] getGlobalsAndPackages() ...
[16:20:13.454] Searching for globals...
[16:20:13.456] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:13.456] Searching for globals ... DONE
[16:20:13.456] Resolving globals: FALSE
[16:20:13.479] The total size of the 2 globals is 618.07 KiB (632904 bytes)
[16:20:13.479] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 618.07 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (618.02 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:13.480] - globals: [2] ‘x’, ‘i’
[16:20:13.480] 
[16:20:13.480] getGlobalsAndPackages() ... DONE
[16:20:13.480] getGlobalsAndPackages() ...
[16:20:13.480] Searching for globals...
[16:20:13.482] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:13.482] Searching for globals ... DONE
[16:20:13.482] Resolving globals: FALSE
[16:20:13.504] The total size of the 2 globals is 626.42 KiB (641456 bytes)
[16:20:13.504] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 626.42 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (626.37 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:13.504] - globals: [2] ‘x’, ‘i’
[16:20:13.504] 
[16:20:13.505] getGlobalsAndPackages() ... DONE
[16:20:13.505] getGlobalsAndPackages() ...
[16:20:13.505] Searching for globals...
[16:20:13.508] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:13.508] Searching for globals ... DONE
[16:20:13.508] Resolving globals: FALSE
[16:20:13.530] The total size of the 2 globals is 634.77 KiB (650008 bytes)
[16:20:13.531] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 634.77 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (634.72 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:13.531] - globals: [2] ‘x’, ‘i’
[16:20:13.531] 
[16:20:13.531] getGlobalsAndPackages() ... DONE
[16:20:13.532] getGlobalsAndPackages() ...
[16:20:13.532] Searching for globals...
[16:20:13.533] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:13.533] Searching for globals ... DONE
[16:20:13.533] Resolving globals: FALSE
[16:20:13.556] The total size of the 2 globals is 643.12 KiB (658560 bytes)
[16:20:13.557] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 643.12 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (643.07 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:13.557] - globals: [2] ‘x’, ‘i’
[16:20:13.557] 
[16:20:13.557] getGlobalsAndPackages() ... DONE
[16:20:13.557] getGlobalsAndPackages() ...
[16:20:13.558] Searching for globals...
[16:20:13.559] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:13.559] Searching for globals ... DONE
[16:20:13.559] Resolving globals: FALSE
[16:20:13.583] The total size of the 2 globals is 651.48 KiB (667112 bytes)
[16:20:13.584] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 651.48 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (651.42 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:13.584] - globals: [2] ‘x’, ‘i’
[16:20:13.584] 
[16:20:13.584] getGlobalsAndPackages() ... DONE
[16:20:13.585] getGlobalsAndPackages() ...
[16:20:13.585] Searching for globals...
[16:20:13.586] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:13.586] Searching for globals ... DONE
[16:20:13.586] Resolving globals: FALSE
[16:20:13.611] The total size of the 2 globals is 659.83 KiB (675664 bytes)
[16:20:13.612] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 659.83 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (659.77 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:13.612] - globals: [2] ‘x’, ‘i’
[16:20:13.612] 
[16:20:13.612] getGlobalsAndPackages() ... DONE
[16:20:13.613] getGlobalsAndPackages() ...
[16:20:13.613] Searching for globals...
[16:20:13.614] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:13.614] Searching for globals ... DONE
[16:20:13.615] Resolving globals: FALSE
[16:20:13.638] The total size of the 2 globals is 668.18 KiB (684216 bytes)
[16:20:13.639] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 668.18 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (668.12 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:13.639] - globals: [2] ‘x’, ‘i’
[16:20:13.639] 
[16:20:13.639] getGlobalsAndPackages() ... DONE
[16:20:13.640] getGlobalsAndPackages() ...
[16:20:13.640] Searching for globals...
[16:20:13.641] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:13.641] Searching for globals ... DONE
[16:20:13.642] Resolving globals: FALSE
[16:20:13.665] The total size of the 2 globals is 676.53 KiB (692768 bytes)
[16:20:13.666] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 676.53 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (676.48 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:13.666] - globals: [2] ‘x’, ‘i’
[16:20:13.666] 
[16:20:13.667] getGlobalsAndPackages() ... DONE
[16:20:13.667] getGlobalsAndPackages() ...
[16:20:13.667] Searching for globals...
[16:20:13.669] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:13.669] Searching for globals ... DONE
[16:20:13.669] Resolving globals: FALSE
[16:20:13.693] The total size of the 2 globals is 684.88 KiB (701320 bytes)
[16:20:13.694] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 684.88 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (684.83 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:13.694] - globals: [2] ‘x’, ‘i’
[16:20:13.694] 
[16:20:13.694] getGlobalsAndPackages() ... DONE
[16:20:13.694] getGlobalsAndPackages() ...
[16:20:13.695] Searching for globals...
[16:20:13.697] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:13.697] Searching for globals ... DONE
[16:20:13.697] Resolving globals: FALSE
[16:20:13.722] The total size of the 2 globals is 693.23 KiB (709872 bytes)
[16:20:13.722] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 693.23 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (693.18 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:13.722] - globals: [2] ‘x’, ‘i’
[16:20:13.723] 
[16:20:13.723] getGlobalsAndPackages() ... DONE
[16:20:13.723] getGlobalsAndPackages() ...
[16:20:13.723] Searching for globals...
[16:20:13.726] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:13.726] Searching for globals ... DONE
[16:20:13.726] Resolving globals: FALSE
[16:20:13.751] The total size of the 2 globals is 701.59 KiB (718424 bytes)
[16:20:13.752] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 701.59 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (701.53 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:13.752] - globals: [2] ‘x’, ‘i’
[16:20:13.752] 
[16:20:13.752] getGlobalsAndPackages() ... DONE
[16:20:13.753] getGlobalsAndPackages() ...
[16:20:13.753] Searching for globals...
[16:20:13.755] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:13.755] Searching for globals ... DONE
[16:20:13.756] Resolving globals: FALSE
[16:20:13.781] The total size of the 2 globals is 709.94 KiB (726976 bytes)
[16:20:13.781] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 709.94 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (709.88 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:13.781] - globals: [2] ‘x’, ‘i’
[16:20:13.781] 
[16:20:13.782] getGlobalsAndPackages() ... DONE
[16:20:13.782] getGlobalsAndPackages() ...
[16:20:13.782] Searching for globals...
[16:20:13.785] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:13.785] Searching for globals ... DONE
[16:20:13.785] Resolving globals: FALSE
[16:20:13.811] The total size of the 2 globals is 718.29 KiB (735528 bytes)
[16:20:13.811] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 718.29 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (718.23 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:13.812] - globals: [2] ‘x’, ‘i’
[16:20:13.812] 
[16:20:13.812] getGlobalsAndPackages() ... DONE
[16:20:13.813] getGlobalsAndPackages() ...
[16:20:13.814] Searching for globals...
[16:20:13.815] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:13.815] Searching for globals ... DONE
[16:20:13.816] Resolving globals: FALSE
[16:20:13.842] The total size of the 2 globals is 726.64 KiB (744080 bytes)
[16:20:13.842] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 726.64 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (726.59 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:13.843] - globals: [2] ‘x’, ‘i’
[16:20:13.843] 
[16:20:13.843] getGlobalsAndPackages() ... DONE
[16:20:13.843] getGlobalsAndPackages() ...
[16:20:13.843] Searching for globals...
[16:20:13.845] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:13.845] Searching for globals ... DONE
[16:20:13.845] Resolving globals: FALSE
[16:20:13.872] The total size of the 2 globals is 734.99 KiB (752632 bytes)
[16:20:13.873] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 734.99 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (734.94 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:13.873] - globals: [2] ‘x’, ‘i’
[16:20:13.873] 
[16:20:13.873] getGlobalsAndPackages() ... DONE
[16:20:13.874] getGlobalsAndPackages() ...
[16:20:13.874] Searching for globals...
[16:20:13.875] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:13.875] Searching for globals ... DONE
[16:20:13.876] Resolving globals: FALSE
[16:20:13.903] The total size of the 2 globals is 743.34 KiB (761184 bytes)
[16:20:13.903] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 743.34 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (743.29 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:13.904] - globals: [2] ‘x’, ‘i’
[16:20:13.904] 
[16:20:13.904] getGlobalsAndPackages() ... DONE
[16:20:13.904] getGlobalsAndPackages() ...
[16:20:13.904] Searching for globals...
[16:20:13.906] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:13.906] Searching for globals ... DONE
[16:20:13.906] Resolving globals: FALSE
[16:20:13.935] The total size of the 2 globals is 751.70 KiB (769736 bytes)
[16:20:13.935] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 751.70 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (751.64 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:13.935] - globals: [2] ‘x’, ‘i’
[16:20:13.935] 
[16:20:13.935] getGlobalsAndPackages() ... DONE
[16:20:13.936] getGlobalsAndPackages() ...
[16:20:13.936] Searching for globals...
[16:20:13.938] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:13.938] Searching for globals ... DONE
[16:20:13.938] Resolving globals: FALSE
[16:20:13.966] The total size of the 2 globals is 760.05 KiB (778288 bytes)
[16:20:13.966] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 760.05 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (759.99 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:13.966] - globals: [2] ‘x’, ‘i’
[16:20:13.966] 
[16:20:13.966] getGlobalsAndPackages() ... DONE
[16:20:13.967] getGlobalsAndPackages() ...
[16:20:13.967] Searching for globals...
[16:20:13.969] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:13.969] Searching for globals ... DONE
[16:20:13.969] Resolving globals: FALSE
[16:20:13.998] The total size of the 2 globals is 768.40 KiB (786840 bytes)
[16:20:13.999] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 768.40 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (768.34 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:13.999] - globals: [2] ‘x’, ‘i’
[16:20:13.999] 
[16:20:13.999] getGlobalsAndPackages() ... DONE
[16:20:14.000] getGlobalsAndPackages() ...
[16:20:14.000] Searching for globals...
[16:20:14.001] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:14.001] Searching for globals ... DONE
[16:20:14.001] Resolving globals: FALSE
[16:20:14.030] The total size of the 2 globals is 776.75 KiB (795392 bytes)
[16:20:14.031] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 776.75 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (776.70 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:14.031] - globals: [2] ‘x’, ‘i’
[16:20:14.031] 
[16:20:14.031] getGlobalsAndPackages() ... DONE
[16:20:14.032] getGlobalsAndPackages() ...
[16:20:14.032] Searching for globals...
[16:20:14.033] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:14.033] Searching for globals ... DONE
[16:20:14.033] Resolving globals: FALSE
[16:20:14.062] The total size of the 2 globals is 785.10 KiB (803944 bytes)
[16:20:14.062] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 785.10 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (785.05 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:14.062] - globals: [2] ‘x’, ‘i’
[16:20:14.062] 
[16:20:14.062] getGlobalsAndPackages() ... DONE
[16:20:14.063] getGlobalsAndPackages() ...
[16:20:14.063] Searching for globals...
[16:20:14.064] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:14.065] Searching for globals ... DONE
[16:20:14.065] Resolving globals: FALSE
[16:20:14.093] The total size of the 2 globals is 793.45 KiB (812496 bytes)
[16:20:14.093] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 793.45 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (793.40 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:14.093] - globals: [2] ‘x’, ‘i’
[16:20:14.093] 
[16:20:14.093] getGlobalsAndPackages() ... DONE
[16:20:14.094] getGlobalsAndPackages() ...
[16:20:14.094] Searching for globals...
[16:20:14.096] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:14.096] Searching for globals ... DONE
[16:20:14.096] Resolving globals: FALSE
[16:20:14.125] The total size of the 2 globals is 801.80 KiB (821048 bytes)
[16:20:14.125] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 801.80 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (801.75 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:14.126] - globals: [2] ‘x’, ‘i’
[16:20:14.126] 
[16:20:14.126] getGlobalsAndPackages() ... DONE
[16:20:14.126] getGlobalsAndPackages() ...
[16:20:14.126] Searching for globals...
[16:20:14.128] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[16:20:14.128] Searching for globals ... DONE
[16:20:14.128] Resolving globals: FALSE
[16:20:14.157] The total size of the 2 globals is 810.16 KiB (829600 bytes)
[16:20:14.158] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 810.16 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (810.10 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[16:20:14.158] - globals: [2] ‘x’, ‘i’
[16:20:14.158] 
[16:20:14.158] getGlobalsAndPackages() ... DONE

> ## At this point nothing has been calculated,
> ## because lazy evaluation is in place.
> 
> ## Get the 7:th Fibonnaci numbers (should be 8)
> print(x[[7]])
[16:20:14.159] run() for ‘Future’ ...
[16:20:14.159] - state: ‘created’
[16:20:14.160] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:14.160] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:14.160] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:14.160]   - Field: ‘label’
[16:20:14.160]   - Field: ‘local’
[16:20:14.160]   - Field: ‘owner’
[16:20:14.160]   - Field: ‘envir’
[16:20:14.160]   - Field: ‘packages’
[16:20:14.161]   - Field: ‘gc’
[16:20:14.161]   - Field: ‘conditions’
[16:20:14.161]   - Field: ‘expr’
[16:20:14.161]   - Field: ‘uuid’
[16:20:14.161]   - Field: ‘seed’
[16:20:14.161]   - Field: ‘version’
[16:20:14.161]   - Field: ‘result’
[16:20:14.161]   - Field: ‘asynchronous’
[16:20:14.161]   - Field: ‘calls’
[16:20:14.161]   - Field: ‘globals’
[16:20:14.161]   - Field: ‘stdout’
[16:20:14.162]   - Field: ‘earlySignal’
[16:20:14.162]   - Field: ‘lazy’
[16:20:14.162]   - Field: ‘state’
[16:20:14.162] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:14.162] - Launch lazy future ...
[16:20:14.163] Packages needed by the future expression (n = 0): <none>
[16:20:14.163] Packages needed by future strategies (n = 0): <none>
[16:20:14.164] {
[16:20:14.164]     {
[16:20:14.164]         {
[16:20:14.164]             ...future.startTime <- base::Sys.time()
[16:20:14.164]             {
[16:20:14.164]                 {
[16:20:14.164]                   {
[16:20:14.164]                     base::local({
[16:20:14.164]                       has_future <- base::requireNamespace("future", 
[16:20:14.164]                         quietly = TRUE)
[16:20:14.164]                       if (has_future) {
[16:20:14.164]                         ns <- base::getNamespace("future")
[16:20:14.164]                         version <- ns[[".package"]][["version"]]
[16:20:14.164]                         if (is.null(version)) 
[16:20:14.164]                           version <- utils::packageVersion("future")
[16:20:14.164]                       }
[16:20:14.164]                       else {
[16:20:14.164]                         version <- NULL
[16:20:14.164]                       }
[16:20:14.164]                       if (!has_future || version < "1.8.0") {
[16:20:14.164]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:14.164]                           "", base::R.version$version.string), 
[16:20:14.164]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:14.164]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:14.164]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:14.164]                             "release", "version")], collapse = " "), 
[16:20:14.164]                           hostname = base::Sys.info()[["nodename"]])
[16:20:14.164]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:14.164]                           info)
[16:20:14.164]                         info <- base::paste(info, collapse = "; ")
[16:20:14.164]                         if (!has_future) {
[16:20:14.164]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:14.164]                             info)
[16:20:14.164]                         }
[16:20:14.164]                         else {
[16:20:14.164]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:14.164]                             info, version)
[16:20:14.164]                         }
[16:20:14.164]                         base::stop(msg)
[16:20:14.164]                       }
[16:20:14.164]                     })
[16:20:14.164]                   }
[16:20:14.164]                   ...future.strategy.old <- future::plan("list")
[16:20:14.164]                   options(future.plan = NULL)
[16:20:14.164]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:14.164]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:14.164]                 }
[16:20:14.164]                 ...future.workdir <- getwd()
[16:20:14.164]             }
[16:20:14.164]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:14.164]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:14.164]         }
[16:20:14.164]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:14.164]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:14.164]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:14.164]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:14.164]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:14.164]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:14.164]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:14.164]             base::names(...future.oldOptions))
[16:20:14.164]     }
[16:20:14.164]     if (TRUE) {
[16:20:14.164]     }
[16:20:14.164]     else {
[16:20:14.164]         if (NA) {
[16:20:14.164]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:14.164]                 open = "w")
[16:20:14.164]         }
[16:20:14.164]         else {
[16:20:14.164]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:14.164]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:14.164]         }
[16:20:14.164]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:14.164]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:14.164]             base::sink(type = "output", split = FALSE)
[16:20:14.164]             base::close(...future.stdout)
[16:20:14.164]         }, add = TRUE)
[16:20:14.164]     }
[16:20:14.164]     ...future.frame <- base::sys.nframe()
[16:20:14.164]     ...future.conditions <- base::list()
[16:20:14.164]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:14.164]     if (FALSE) {
[16:20:14.164]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:14.164]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:14.164]     }
[16:20:14.164]     ...future.result <- base::tryCatch({
[16:20:14.164]         base::withCallingHandlers({
[16:20:14.164]             ...future.value <- base::withVisible(base::local({
[16:20:14.164]                 x[[i - 2]] + x[[i - 1]]
[16:20:14.164]             }))
[16:20:14.164]             future::FutureResult(value = ...future.value$value, 
[16:20:14.164]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:14.164]                   ...future.rng), globalenv = if (FALSE) 
[16:20:14.164]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:14.164]                     ...future.globalenv.names))
[16:20:14.164]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:14.164]         }, condition = base::local({
[16:20:14.164]             c <- base::c
[16:20:14.164]             inherits <- base::inherits
[16:20:14.164]             invokeRestart <- base::invokeRestart
[16:20:14.164]             length <- base::length
[16:20:14.164]             list <- base::list
[16:20:14.164]             seq.int <- base::seq.int
[16:20:14.164]             signalCondition <- base::signalCondition
[16:20:14.164]             sys.calls <- base::sys.calls
[16:20:14.164]             `[[` <- base::`[[`
[16:20:14.164]             `+` <- base::`+`
[16:20:14.164]             `<<-` <- base::`<<-`
[16:20:14.164]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:14.164]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:14.164]                   3L)]
[16:20:14.164]             }
[16:20:14.164]             function(cond) {
[16:20:14.164]                 is_error <- inherits(cond, "error")
[16:20:14.164]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:14.164]                   NULL)
[16:20:14.164]                 if (is_error) {
[16:20:14.164]                   sessionInformation <- function() {
[16:20:14.164]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:14.164]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:14.164]                       search = base::search(), system = base::Sys.info())
[16:20:14.164]                   }
[16:20:14.164]                   ...future.conditions[[length(...future.conditions) + 
[16:20:14.164]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:14.164]                     cond$call), session = sessionInformation(), 
[16:20:14.164]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:14.164]                   signalCondition(cond)
[16:20:14.164]                 }
[16:20:14.164]                 else if (!ignore && TRUE && inherits(cond, c("error", 
[16:20:14.164]                 "immediateCondition"))) {
[16:20:14.164]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:14.164]                   ...future.conditions[[length(...future.conditions) + 
[16:20:14.164]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:14.164]                   if (TRUE && !signal) {
[16:20:14.164]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:14.164]                     {
[16:20:14.164]                       inherits <- base::inherits
[16:20:14.164]                       invokeRestart <- base::invokeRestart
[16:20:14.164]                       is.null <- base::is.null
[16:20:14.164]                       muffled <- FALSE
[16:20:14.164]                       if (inherits(cond, "message")) {
[16:20:14.164]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:14.164]                         if (muffled) 
[16:20:14.164]                           invokeRestart("muffleMessage")
[16:20:14.164]                       }
[16:20:14.164]                       else if (inherits(cond, "warning")) {
[16:20:14.164]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:14.164]                         if (muffled) 
[16:20:14.164]                           invokeRestart("muffleWarning")
[16:20:14.164]                       }
[16:20:14.164]                       else if (inherits(cond, "condition")) {
[16:20:14.164]                         if (!is.null(pattern)) {
[16:20:14.164]                           computeRestarts <- base::computeRestarts
[16:20:14.164]                           grepl <- base::grepl
[16:20:14.164]                           restarts <- computeRestarts(cond)
[16:20:14.164]                           for (restart in restarts) {
[16:20:14.164]                             name <- restart$name
[16:20:14.164]                             if (is.null(name)) 
[16:20:14.164]                               next
[16:20:14.164]                             if (!grepl(pattern, name)) 
[16:20:14.164]                               next
[16:20:14.164]                             invokeRestart(restart)
[16:20:14.164]                             muffled <- TRUE
[16:20:14.164]                             break
[16:20:14.164]                           }
[16:20:14.164]                         }
[16:20:14.164]                       }
[16:20:14.164]                       invisible(muffled)
[16:20:14.164]                     }
[16:20:14.164]                     muffleCondition(cond, pattern = "^muffle")
[16:20:14.164]                   }
[16:20:14.164]                 }
[16:20:14.164]                 else {
[16:20:14.164]                   if (TRUE) {
[16:20:14.164]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:14.164]                     {
[16:20:14.164]                       inherits <- base::inherits
[16:20:14.164]                       invokeRestart <- base::invokeRestart
[16:20:14.164]                       is.null <- base::is.null
[16:20:14.164]                       muffled <- FALSE
[16:20:14.164]                       if (inherits(cond, "message")) {
[16:20:14.164]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:14.164]                         if (muffled) 
[16:20:14.164]                           invokeRestart("muffleMessage")
[16:20:14.164]                       }
[16:20:14.164]                       else if (inherits(cond, "warning")) {
[16:20:14.164]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:14.164]                         if (muffled) 
[16:20:14.164]                           invokeRestart("muffleWarning")
[16:20:14.164]                       }
[16:20:14.164]                       else if (inherits(cond, "condition")) {
[16:20:14.164]                         if (!is.null(pattern)) {
[16:20:14.164]                           computeRestarts <- base::computeRestarts
[16:20:14.164]                           grepl <- base::grepl
[16:20:14.164]                           restarts <- computeRestarts(cond)
[16:20:14.164]                           for (restart in restarts) {
[16:20:14.164]                             name <- restart$name
[16:20:14.164]                             if (is.null(name)) 
[16:20:14.164]                               next
[16:20:14.164]                             if (!grepl(pattern, name)) 
[16:20:14.164]                               next
[16:20:14.164]                             invokeRestart(restart)
[16:20:14.164]                             muffled <- TRUE
[16:20:14.164]                             break
[16:20:14.164]                           }
[16:20:14.164]                         }
[16:20:14.164]                       }
[16:20:14.164]                       invisible(muffled)
[16:20:14.164]                     }
[16:20:14.164]                     muffleCondition(cond, pattern = "^muffle")
[16:20:14.164]                   }
[16:20:14.164]                 }
[16:20:14.164]             }
[16:20:14.164]         }))
[16:20:14.164]     }, error = function(ex) {
[16:20:14.164]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:14.164]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:14.164]                 ...future.rng), started = ...future.startTime, 
[16:20:14.164]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:14.164]             version = "1.8"), class = "FutureResult")
[16:20:14.164]     }, finally = {
[16:20:14.164]         if (!identical(...future.workdir, getwd())) 
[16:20:14.164]             setwd(...future.workdir)
[16:20:14.164]         {
[16:20:14.164]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:14.164]                 ...future.oldOptions$nwarnings <- NULL
[16:20:14.164]             }
[16:20:14.164]             base::options(...future.oldOptions)
[16:20:14.164]             if (.Platform$OS.type == "windows") {
[16:20:14.164]                 old_names <- names(...future.oldEnvVars)
[16:20:14.164]                 envs <- base::Sys.getenv()
[16:20:14.164]                 names <- names(envs)
[16:20:14.164]                 common <- intersect(names, old_names)
[16:20:14.164]                 added <- setdiff(names, old_names)
[16:20:14.164]                 removed <- setdiff(old_names, names)
[16:20:14.164]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:14.164]                   envs[common]]
[16:20:14.164]                 NAMES <- toupper(changed)
[16:20:14.164]                 args <- list()
[16:20:14.164]                 for (kk in seq_along(NAMES)) {
[16:20:14.164]                   name <- changed[[kk]]
[16:20:14.164]                   NAME <- NAMES[[kk]]
[16:20:14.164]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:14.164]                     next
[16:20:14.164]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:14.164]                 }
[16:20:14.164]                 NAMES <- toupper(added)
[16:20:14.164]                 for (kk in seq_along(NAMES)) {
[16:20:14.164]                   name <- added[[kk]]
[16:20:14.164]                   NAME <- NAMES[[kk]]
[16:20:14.164]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:14.164]                     next
[16:20:14.164]                   args[[name]] <- ""
[16:20:14.164]                 }
[16:20:14.164]                 NAMES <- toupper(removed)
[16:20:14.164]                 for (kk in seq_along(NAMES)) {
[16:20:14.164]                   name <- removed[[kk]]
[16:20:14.164]                   NAME <- NAMES[[kk]]
[16:20:14.164]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:14.164]                     next
[16:20:14.164]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:14.164]                 }
[16:20:14.164]                 if (length(args) > 0) 
[16:20:14.164]                   base::do.call(base::Sys.setenv, args = args)
[16:20:14.164]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:14.164]             }
[16:20:14.164]             else {
[16:20:14.164]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:14.164]             }
[16:20:14.164]             {
[16:20:14.164]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:14.164]                   0L) {
[16:20:14.164]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:14.164]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:14.164]                   base::options(opts)
[16:20:14.164]                 }
[16:20:14.164]                 {
[16:20:14.164]                   {
[16:20:14.164]                     NULL
[16:20:14.164]                     RNGkind("Mersenne-Twister")
[16:20:14.164]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:14.164]                       inherits = FALSE)
[16:20:14.164]                   }
[16:20:14.164]                   options(future.plan = NULL)
[16:20:14.164]                   if (is.na(NA_character_)) 
[16:20:14.164]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:14.164]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:14.164]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:14.164]                     .init = FALSE)
[16:20:14.164]                 }
[16:20:14.164]             }
[16:20:14.164]         }
[16:20:14.164]     })
[16:20:14.164]     if (FALSE) {
[16:20:14.164]         base::sink(type = "output", split = FALSE)
[16:20:14.164]         if (NA) {
[16:20:14.164]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:14.164]         }
[16:20:14.164]         else {
[16:20:14.164]             ...future.result["stdout"] <- base::list(NULL)
[16:20:14.164]         }
[16:20:14.164]         base::close(...future.stdout)
[16:20:14.164]         ...future.stdout <- NULL
[16:20:14.164]     }
[16:20:14.164]     ...future.result$conditions <- ...future.conditions
[16:20:14.164]     ...future.result$finished <- base::Sys.time()
[16:20:14.164]     ...future.result
[16:20:14.164] }
[16:20:14.165] assign_globals() ...
[16:20:14.166] List of 2
[16:20:14.166]  $ x:Classes 'listenv', 'environment' <environment: 0x562a9734bb98> 
[16:20:14.166]  $ i: int 7
[16:20:14.166]  - attr(*, "where")=List of 2
[16:20:14.166]   ..$ x:<environment: R_EmptyEnv> 
[16:20:14.166]   ..$ i:<environment: R_EmptyEnv> 
[16:20:14.166]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:14.166]  - attr(*, "resolved")= logi FALSE
[16:20:14.166]  - attr(*, "total_size")= num 34264
[16:20:14.166]  - attr(*, "already-done")= logi TRUE
[16:20:14.172] - copied ‘x’ to environment
[16:20:14.172] - copied ‘i’ to environment
[16:20:14.172] assign_globals() ... done
[16:20:14.173] plan(): Setting new future strategy stack:
[16:20:14.173] List of future strategies:
[16:20:14.173] 1. sequential:
[16:20:14.173]    - args: function (..., envir = parent.frame())
[16:20:14.173]    - tweaked: FALSE
[16:20:14.173]    - call: NULL
[16:20:14.173] plan(): nbrOfWorkers() = 1
[16:20:14.247] plan(): Setting new future strategy stack:
[16:20:14.247] List of future strategies:
[16:20:14.247] 1. sequential:
[16:20:14.247]    - args: function (..., envir = parent.frame())
[16:20:14.247]    - tweaked: FALSE
[16:20:14.247]    - call: plan(sequential)
[16:20:14.248] plan(): nbrOfWorkers() = 1
[16:20:14.248] SequentialFuture started (and completed)
[16:20:14.248] - Launch lazy future ... done
[16:20:14.248] run() for ‘SequentialFuture’ ... done
[1] 8

> ## At this point x[1:7] have been calculated,
> ## but nothing beyond.
> 
> ## Let's get the 50:th number.
> print(x[[50]])
[16:20:14.249] run() for ‘Future’ ...
[16:20:14.249] - state: ‘created’
[16:20:14.249] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:14.249] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:14.249] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:14.249]   - Field: ‘label’
[16:20:14.249]   - Field: ‘local’
[16:20:14.249]   - Field: ‘owner’
[16:20:14.250]   - Field: ‘envir’
[16:20:14.250]   - Field: ‘packages’
[16:20:14.250]   - Field: ‘gc’
[16:20:14.250]   - Field: ‘conditions’
[16:20:14.250]   - Field: ‘expr’
[16:20:14.250]   - Field: ‘uuid’
[16:20:14.250]   - Field: ‘seed’
[16:20:14.250]   - Field: ‘version’
[16:20:14.250]   - Field: ‘result’
[16:20:14.250]   - Field: ‘asynchronous’
[16:20:14.250]   - Field: ‘calls’
[16:20:14.251]   - Field: ‘globals’
[16:20:14.251]   - Field: ‘stdout’
[16:20:14.251]   - Field: ‘earlySignal’
[16:20:14.251]   - Field: ‘lazy’
[16:20:14.251]   - Field: ‘state’
[16:20:14.251] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:14.251] - Launch lazy future ...
[16:20:14.251] Packages needed by the future expression (n = 0): <none>
[16:20:14.251] Packages needed by future strategies (n = 0): <none>
[16:20:14.252] {
[16:20:14.252]     {
[16:20:14.252]         {
[16:20:14.252]             ...future.startTime <- base::Sys.time()
[16:20:14.252]             {
[16:20:14.252]                 {
[16:20:14.252]                   {
[16:20:14.252]                     base::local({
[16:20:14.252]                       has_future <- base::requireNamespace("future", 
[16:20:14.252]                         quietly = TRUE)
[16:20:14.252]                       if (has_future) {
[16:20:14.252]                         ns <- base::getNamespace("future")
[16:20:14.252]                         version <- ns[[".package"]][["version"]]
[16:20:14.252]                         if (is.null(version)) 
[16:20:14.252]                           version <- utils::packageVersion("future")
[16:20:14.252]                       }
[16:20:14.252]                       else {
[16:20:14.252]                         version <- NULL
[16:20:14.252]                       }
[16:20:14.252]                       if (!has_future || version < "1.8.0") {
[16:20:14.252]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:14.252]                           "", base::R.version$version.string), 
[16:20:14.252]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:14.252]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:14.252]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:14.252]                             "release", "version")], collapse = " "), 
[16:20:14.252]                           hostname = base::Sys.info()[["nodename"]])
[16:20:14.252]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:14.252]                           info)
[16:20:14.252]                         info <- base::paste(info, collapse = "; ")
[16:20:14.252]                         if (!has_future) {
[16:20:14.252]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:14.252]                             info)
[16:20:14.252]                         }
[16:20:14.252]                         else {
[16:20:14.252]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:14.252]                             info, version)
[16:20:14.252]                         }
[16:20:14.252]                         base::stop(msg)
[16:20:14.252]                       }
[16:20:14.252]                     })
[16:20:14.252]                   }
[16:20:14.252]                   ...future.strategy.old <- future::plan("list")
[16:20:14.252]                   options(future.plan = NULL)
[16:20:14.252]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:14.252]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:14.252]                 }
[16:20:14.252]                 ...future.workdir <- getwd()
[16:20:14.252]             }
[16:20:14.252]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:14.252]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:14.252]         }
[16:20:14.252]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:14.252]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:14.252]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:14.252]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:14.252]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:14.252]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:14.252]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:14.252]             base::names(...future.oldOptions))
[16:20:14.252]     }
[16:20:14.252]     if (TRUE) {
[16:20:14.252]     }
[16:20:14.252]     else {
[16:20:14.252]         if (NA) {
[16:20:14.252]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:14.252]                 open = "w")
[16:20:14.252]         }
[16:20:14.252]         else {
[16:20:14.252]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:14.252]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:14.252]         }
[16:20:14.252]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:14.252]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:14.252]             base::sink(type = "output", split = FALSE)
[16:20:14.252]             base::close(...future.stdout)
[16:20:14.252]         }, add = TRUE)
[16:20:14.252]     }
[16:20:14.252]     ...future.frame <- base::sys.nframe()
[16:20:14.252]     ...future.conditions <- base::list()
[16:20:14.252]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:14.252]     if (FALSE) {
[16:20:14.252]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:14.252]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:14.252]     }
[16:20:14.252]     ...future.result <- base::tryCatch({
[16:20:14.252]         base::withCallingHandlers({
[16:20:14.252]             ...future.value <- base::withVisible(base::local({
[16:20:14.252]                 x[[i - 2]] + x[[i - 1]]
[16:20:14.252]             }))
[16:20:14.252]             future::FutureResult(value = ...future.value$value, 
[16:20:14.252]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:14.252]                   ...future.rng), globalenv = if (FALSE) 
[16:20:14.252]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:14.252]                     ...future.globalenv.names))
[16:20:14.252]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:14.252]         }, condition = base::local({
[16:20:14.252]             c <- base::c
[16:20:14.252]             inherits <- base::inherits
[16:20:14.252]             invokeRestart <- base::invokeRestart
[16:20:14.252]             length <- base::length
[16:20:14.252]             list <- base::list
[16:20:14.252]             seq.int <- base::seq.int
[16:20:14.252]             signalCondition <- base::signalCondition
[16:20:14.252]             sys.calls <- base::sys.calls
[16:20:14.252]             `[[` <- base::`[[`
[16:20:14.252]             `+` <- base::`+`
[16:20:14.252]             `<<-` <- base::`<<-`
[16:20:14.252]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:14.252]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:14.252]                   3L)]
[16:20:14.252]             }
[16:20:14.252]             function(cond) {
[16:20:14.252]                 is_error <- inherits(cond, "error")
[16:20:14.252]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:14.252]                   NULL)
[16:20:14.252]                 if (is_error) {
[16:20:14.252]                   sessionInformation <- function() {
[16:20:14.252]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:14.252]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:14.252]                       search = base::search(), system = base::Sys.info())
[16:20:14.252]                   }
[16:20:14.252]                   ...future.conditions[[length(...future.conditions) + 
[16:20:14.252]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:14.252]                     cond$call), session = sessionInformation(), 
[16:20:14.252]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:14.252]                   signalCondition(cond)
[16:20:14.252]                 }
[16:20:14.252]                 else if (!ignore && TRUE && inherits(cond, c("error", 
[16:20:14.252]                 "immediateCondition"))) {
[16:20:14.252]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:14.252]                   ...future.conditions[[length(...future.conditions) + 
[16:20:14.252]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:14.252]                   if (TRUE && !signal) {
[16:20:14.252]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:14.252]                     {
[16:20:14.252]                       inherits <- base::inherits
[16:20:14.252]                       invokeRestart <- base::invokeRestart
[16:20:14.252]                       is.null <- base::is.null
[16:20:14.252]                       muffled <- FALSE
[16:20:14.252]                       if (inherits(cond, "message")) {
[16:20:14.252]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:14.252]                         if (muffled) 
[16:20:14.252]                           invokeRestart("muffleMessage")
[16:20:14.252]                       }
[16:20:14.252]                       else if (inherits(cond, "warning")) {
[16:20:14.252]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:14.252]                         if (muffled) 
[16:20:14.252]                           invokeRestart("muffleWarning")
[16:20:14.252]                       }
[16:20:14.252]                       else if (inherits(cond, "condition")) {
[16:20:14.252]                         if (!is.null(pattern)) {
[16:20:14.252]                           computeRestarts <- base::computeRestarts
[16:20:14.252]                           grepl <- base::grepl
[16:20:14.252]                           restarts <- computeRestarts(cond)
[16:20:14.252]                           for (restart in restarts) {
[16:20:14.252]                             name <- restart$name
[16:20:14.252]                             if (is.null(name)) 
[16:20:14.252]                               next
[16:20:14.252]                             if (!grepl(pattern, name)) 
[16:20:14.252]                               next
[16:20:14.252]                             invokeRestart(restart)
[16:20:14.252]                             muffled <- TRUE
[16:20:14.252]                             break
[16:20:14.252]                           }
[16:20:14.252]                         }
[16:20:14.252]                       }
[16:20:14.252]                       invisible(muffled)
[16:20:14.252]                     }
[16:20:14.252]                     muffleCondition(cond, pattern = "^muffle")
[16:20:14.252]                   }
[16:20:14.252]                 }
[16:20:14.252]                 else {
[16:20:14.252]                   if (TRUE) {
[16:20:14.252]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:14.252]                     {
[16:20:14.252]                       inherits <- base::inherits
[16:20:14.252]                       invokeRestart <- base::invokeRestart
[16:20:14.252]                       is.null <- base::is.null
[16:20:14.252]                       muffled <- FALSE
[16:20:14.252]                       if (inherits(cond, "message")) {
[16:20:14.252]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:14.252]                         if (muffled) 
[16:20:14.252]                           invokeRestart("muffleMessage")
[16:20:14.252]                       }
[16:20:14.252]                       else if (inherits(cond, "warning")) {
[16:20:14.252]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:14.252]                         if (muffled) 
[16:20:14.252]                           invokeRestart("muffleWarning")
[16:20:14.252]                       }
[16:20:14.252]                       else if (inherits(cond, "condition")) {
[16:20:14.252]                         if (!is.null(pattern)) {
[16:20:14.252]                           computeRestarts <- base::computeRestarts
[16:20:14.252]                           grepl <- base::grepl
[16:20:14.252]                           restarts <- computeRestarts(cond)
[16:20:14.252]                           for (restart in restarts) {
[16:20:14.252]                             name <- restart$name
[16:20:14.252]                             if (is.null(name)) 
[16:20:14.252]                               next
[16:20:14.252]                             if (!grepl(pattern, name)) 
[16:20:14.252]                               next
[16:20:14.252]                             invokeRestart(restart)
[16:20:14.252]                             muffled <- TRUE
[16:20:14.252]                             break
[16:20:14.252]                           }
[16:20:14.252]                         }
[16:20:14.252]                       }
[16:20:14.252]                       invisible(muffled)
[16:20:14.252]                     }
[16:20:14.252]                     muffleCondition(cond, pattern = "^muffle")
[16:20:14.252]                   }
[16:20:14.252]                 }
[16:20:14.252]             }
[16:20:14.252]         }))
[16:20:14.252]     }, error = function(ex) {
[16:20:14.252]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:14.252]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:14.252]                 ...future.rng), started = ...future.startTime, 
[16:20:14.252]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:14.252]             version = "1.8"), class = "FutureResult")
[16:20:14.252]     }, finally = {
[16:20:14.252]         if (!identical(...future.workdir, getwd())) 
[16:20:14.252]             setwd(...future.workdir)
[16:20:14.252]         {
[16:20:14.252]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:14.252]                 ...future.oldOptions$nwarnings <- NULL
[16:20:14.252]             }
[16:20:14.252]             base::options(...future.oldOptions)
[16:20:14.252]             if (.Platform$OS.type == "windows") {
[16:20:14.252]                 old_names <- names(...future.oldEnvVars)
[16:20:14.252]                 envs <- base::Sys.getenv()
[16:20:14.252]                 names <- names(envs)
[16:20:14.252]                 common <- intersect(names, old_names)
[16:20:14.252]                 added <- setdiff(names, old_names)
[16:20:14.252]                 removed <- setdiff(old_names, names)
[16:20:14.252]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:14.252]                   envs[common]]
[16:20:14.252]                 NAMES <- toupper(changed)
[16:20:14.252]                 args <- list()
[16:20:14.252]                 for (kk in seq_along(NAMES)) {
[16:20:14.252]                   name <- changed[[kk]]
[16:20:14.252]                   NAME <- NAMES[[kk]]
[16:20:14.252]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:14.252]                     next
[16:20:14.252]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:14.252]                 }
[16:20:14.252]                 NAMES <- toupper(added)
[16:20:14.252]                 for (kk in seq_along(NAMES)) {
[16:20:14.252]                   name <- added[[kk]]
[16:20:14.252]                   NAME <- NAMES[[kk]]
[16:20:14.252]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:14.252]                     next
[16:20:14.252]                   args[[name]] <- ""
[16:20:14.252]                 }
[16:20:14.252]                 NAMES <- toupper(removed)
[16:20:14.252]                 for (kk in seq_along(NAMES)) {
[16:20:14.252]                   name <- removed[[kk]]
[16:20:14.252]                   NAME <- NAMES[[kk]]
[16:20:14.252]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:14.252]                     next
[16:20:14.252]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:14.252]                 }
[16:20:14.252]                 if (length(args) > 0) 
[16:20:14.252]                   base::do.call(base::Sys.setenv, args = args)
[16:20:14.252]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:14.252]             }
[16:20:14.252]             else {
[16:20:14.252]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:14.252]             }
[16:20:14.252]             {
[16:20:14.252]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:14.252]                   0L) {
[16:20:14.252]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:14.252]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:14.252]                   base::options(opts)
[16:20:14.252]                 }
[16:20:14.252]                 {
[16:20:14.252]                   {
[16:20:14.252]                     NULL
[16:20:14.252]                     RNGkind("Mersenne-Twister")
[16:20:14.252]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:14.252]                       inherits = FALSE)
[16:20:14.252]                   }
[16:20:14.252]                   options(future.plan = NULL)
[16:20:14.252]                   if (is.na(NA_character_)) 
[16:20:14.252]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:14.252]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:14.252]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:14.252]                     .init = FALSE)
[16:20:14.252]                 }
[16:20:14.252]             }
[16:20:14.252]         }
[16:20:14.252]     })
[16:20:14.252]     if (FALSE) {
[16:20:14.252]         base::sink(type = "output", split = FALSE)
[16:20:14.252]         if (NA) {
[16:20:14.252]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:14.252]         }
[16:20:14.252]         else {
[16:20:14.252]             ...future.result["stdout"] <- base::list(NULL)
[16:20:14.252]         }
[16:20:14.252]         base::close(...future.stdout)
[16:20:14.252]         ...future.stdout <- NULL
[16:20:14.252]     }
[16:20:14.252]     ...future.result$conditions <- ...future.conditions
[16:20:14.252]     ...future.result$finished <- base::Sys.time()
[16:20:14.252]     ...future.result
[16:20:14.252] }
[16:20:14.253] assign_globals() ...
[16:20:14.254] List of 2
[16:20:14.254]  $ x:Classes 'listenv', 'environment' <environment: 0x562a9734bb98> 
[16:20:14.254]  $ i: int 50
[16:20:14.254]  - attr(*, "where")=List of 2
[16:20:14.254]   ..$ x:<environment: R_EmptyEnv> 
[16:20:14.254]   ..$ i:<environment: R_EmptyEnv> 
[16:20:14.254]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:14.254]  - attr(*, "resolved")= logi FALSE
[16:20:14.254]  - attr(*, "total_size")= num 402000
[16:20:14.254]  - attr(*, "already-done")= logi TRUE
[16:20:14.258] - copied ‘x’ to environment
[16:20:14.258] - copied ‘i’ to environment
[16:20:14.258] assign_globals() ... done
[16:20:14.259] plan(): Setting new future strategy stack:
[16:20:14.259] List of future strategies:
[16:20:14.259] 1. sequential:
[16:20:14.259]    - args: function (..., envir = parent.frame())
[16:20:14.259]    - tweaked: FALSE
[16:20:14.259]    - call: NULL
[16:20:14.259] plan(): nbrOfWorkers() = 1
[16:20:15.136] plan(): Setting new future strategy stack:
[16:20:15.136] List of future strategies:
[16:20:15.136] 1. sequential:
[16:20:15.136]    - args: function (..., envir = parent.frame())
[16:20:15.136]    - tweaked: FALSE
[16:20:15.136]    - call: plan(sequential)
[16:20:15.136] plan(): nbrOfWorkers() = 1
[16:20:15.136] SequentialFuture started (and completed)
[16:20:15.137] - Launch lazy future ... done
[16:20:15.137] run() for ‘SequentialFuture’ ... done
[1] 7778742049

> ## Reset plan
> plan(oplan)
[16:20:15.137] plan(): Setting new future strategy stack:
[16:20:15.137] List of future strategies:
[16:20:15.137] 1. sequential:
[16:20:15.137]    - args: function (..., envir = parent.frame())
[16:20:15.137]    - tweaked: FALSE
[16:20:15.137]    - call: future::plan("sequential")
[16:20:15.138] plan(): nbrOfWorkers() = 1
> message("*** Fibonacci demo of the 'future' package ... DONE")
*** Fibonacci demo of the 'future' package ... DONE
> 
> 
> message("*** Mandelbrot demo of the 'future' package ...")
*** Mandelbrot demo of the 'future' package ...
> if (getRversion() >= "3.2.0" && !isWin32) {
+   options(future.demo.mandelbrot.nrow = 2L)
+   options(future.demo.mandelbrot.resolution = 50L)
+   options(future.demo.mandelbrot.delay = FALSE)
+   
+   for (cores in 1:availCores) {
+     message(sprintf("Testing with %d cores ...", cores))
+     options(mc.cores = cores)
+   
+     for (strategy in supportedStrategies(cores)) {
+       message(sprintf("- plan('%s') ...", strategy))
+       plan(strategy)
+       demo("mandelbrot", package = "future", ask = FALSE)
+       message(sprintf("- plan('%s') ... DONE", strategy))
+     }
+   
+     message(sprintf("Testing with %d cores ... DONE", cores))
+   } ## for (cores ...)
+ } else {
+   message(" - This demo requires R (>= 3.2.0). Skipping test. (Skipping also on Win32 i386 for speed)")
+ }
Testing with 1 cores ...
- plan('sequential') ...
[16:20:15.144] plan(): Setting new future strategy stack:
[16:20:15.144] List of future strategies:
[16:20:15.144] 1. sequential:
[16:20:15.144]    - args: function (..., envir = parent.frame())
[16:20:15.144]    - tweaked: FALSE
[16:20:15.144]    - call: plan(strategy)
[16:20:15.144] plan(): nbrOfWorkers() = 1


	demo(mandelbrot)
	---- ~~~~~~~~~~

> library("future")

> library("graphics")

> plot_what_is_done <- function(counts) {
+   for (kk in seq_along(counts)) {
+     f <- counts[[kk]]
+ 
+     ## Already plotted?
+     if (!inherits(f, "Future")) next
+ 
+     ## Not resolved?
+     if (!resolved(f)) next
+ 
+     message(sprintf("Plotting tile #%d of %d ...", kk, n))
+     counts[[kk]] <- value(f)
+     screen(kk)
+     plot(counts[[kk]])
+   }
+ 
+   counts
+ }

> ## Options
> region <- getOption("future.demo.mandelbrot.region", 1L)

> if (!is.list(region)) {
+   if (region == 1L) {
+     region <- list(xmid = -0.75, ymid = 0.0, side = 3.0)
+   } else if (region == 2L) {
+     region <- list(xmid = 0.283, ymid = -0.0095, side = 0.00026)
+   } else if (region == 3L) {
+     region <- list(xmid = 0.282989, ymid = -0.01, side = 3e-8)
+   }
+ }

> nrow <- getOption("future.demo.mandelbrot.nrow", 3L)

> resolution <- getOption("future.demo.mandelbrot.resolution", 400L)

> delay <- getOption("future.demo.mandelbrot.delay", interactive())

> if (isTRUE(delay)) {
+   delay <- function(counts) Sys.sleep(1.0)
+ } else if (!is.function(delay)) {
+   delay <- function(counts) {}
+ }

> ## Generate Mandelbrot tiles to be computed
> Cs <- mandelbrot_tiles(xmid = region$xmid, ymid = region$ymid,
+                        side = region$side, nrow = nrow,
+                        resolution = resolution)

> if (interactive()) {
+   dev.new()
+   plot.new()
+   split.screen(dim(Cs))
+   for (ii in seq_along(Cs)) {
+     screen(ii)
+     par(mar = c(0, 0, 0, 0))
+     text(x = 1 / 2, y = 1 / 2, sprintf("Future #%d\nunresolved", ii), cex = 2)
+   }
+ } else {
+   split.screen(dim(Cs))
+ }
[1] 1 2 3 4

> ## Create all Mandelbrot tiles via lazy futures
> n <- length(Cs)

> message(sprintf("Creating %d Mandelbrot tiles:", n), appendLF = FALSE)
Creating 4 Mandelbrot tiles:
> counts <- lapply(seq_along(Cs), FUN=function(ii) {
+   message(" ", ii, appendLF = FALSE)
+   C <- Cs[[ii]]
+   future({
+     message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
+     fit <- mandelbrot(C)
+ 
+     ## Emulate slowness
+     delay(fit)
+ 
+     message(" done")
+     fit
+   }, lazy = TRUE)
+ })
 1[16:20:15.174] getGlobalsAndPackages() ...
[16:20:15.174] Searching for globals...
[16:20:15.181] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[16:20:15.181] Searching for globals ... DONE
[16:20:15.182] Resolving globals: FALSE
[16:20:15.182] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[16:20:15.183] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[16:20:15.183] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[16:20:15.183] - packages: [1] ‘future’
[16:20:15.183] getGlobalsAndPackages() ... DONE
 2[16:20:15.187] getGlobalsAndPackages() ...
[16:20:15.187] Searching for globals...
[16:20:15.190] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[16:20:15.190] Searching for globals ... DONE
[16:20:15.190] Resolving globals: FALSE
[16:20:15.191] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[16:20:15.191] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[16:20:15.192] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[16:20:15.192] - packages: [1] ‘future’
[16:20:15.192] getGlobalsAndPackages() ... DONE
 3[16:20:15.192] getGlobalsAndPackages() ...
[16:20:15.192] Searching for globals...
[16:20:15.195] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[16:20:15.196] Searching for globals ... DONE
[16:20:15.196] Resolving globals: FALSE
[16:20:15.196] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[16:20:15.197] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[16:20:15.197] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[16:20:15.197] - packages: [1] ‘future’
[16:20:15.197] getGlobalsAndPackages() ... DONE
 4[16:20:15.197] getGlobalsAndPackages() ...
[16:20:15.197] Searching for globals...
[16:20:15.201] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[16:20:15.201] Searching for globals ... DONE
[16:20:15.201] Resolving globals: FALSE
[16:20:15.202] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[16:20:15.202] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[16:20:15.202] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[16:20:15.202] - packages: [1] ‘future’
[16:20:15.202] getGlobalsAndPackages() ... DONE

> message(".")
.

> ## Calculate and plot tiles
> repeat {
+   counts <- plot_what_is_done(counts)
+   if (!any(sapply(counts, FUN = inherits, "Future"))) break
+ }
[16:20:15.212] resolved() for ‘Future’ ...
[16:20:15.212] - state: ‘created’
[16:20:15.212] - run: TRUE
[16:20:15.212] - run() ...
[16:20:15.212] run() for ‘Future’ ...
[16:20:15.212] - state: ‘created’
[16:20:15.212] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:15.213] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:15.213] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:15.213]   - Field: ‘label’
[16:20:15.213]   - Field: ‘local’
[16:20:15.213]   - Field: ‘owner’
[16:20:15.213]   - Field: ‘envir’
[16:20:15.213]   - Field: ‘packages’
[16:20:15.213]   - Field: ‘gc’
[16:20:15.213]   - Field: ‘conditions’
[16:20:15.213]   - Field: ‘expr’
[16:20:15.214]   - Field: ‘uuid’
[16:20:15.214]   - Field: ‘seed’
[16:20:15.214]   - Field: ‘version’
[16:20:15.214]   - Field: ‘result’
[16:20:15.214]   - Field: ‘asynchronous’
[16:20:15.214]   - Field: ‘calls’
[16:20:15.214]   - Field: ‘globals’
[16:20:15.214]   - Field: ‘stdout’
[16:20:15.214]   - Field: ‘earlySignal’
[16:20:15.214]   - Field: ‘lazy’
[16:20:15.215]   - Field: ‘state’
[16:20:15.215] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:15.215] - Launch lazy future ...
[16:20:15.215] Packages needed by the future expression (n = 1): ‘future’
[16:20:15.215] Packages needed by future strategies (n = 0): <none>
[16:20:15.216] {
[16:20:15.216]     {
[16:20:15.216]         {
[16:20:15.216]             ...future.startTime <- base::Sys.time()
[16:20:15.216]             {
[16:20:15.216]                 {
[16:20:15.216]                   {
[16:20:15.216]                     {
[16:20:15.216]                       base::local({
[16:20:15.216]                         has_future <- base::requireNamespace("future", 
[16:20:15.216]                           quietly = TRUE)
[16:20:15.216]                         if (has_future) {
[16:20:15.216]                           ns <- base::getNamespace("future")
[16:20:15.216]                           version <- ns[[".package"]][["version"]]
[16:20:15.216]                           if (is.null(version)) 
[16:20:15.216]                             version <- utils::packageVersion("future")
[16:20:15.216]                         }
[16:20:15.216]                         else {
[16:20:15.216]                           version <- NULL
[16:20:15.216]                         }
[16:20:15.216]                         if (!has_future || version < "1.8.0") {
[16:20:15.216]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:15.216]                             "", base::R.version$version.string), 
[16:20:15.216]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:15.216]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:15.216]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:15.216]                               "release", "version")], collapse = " "), 
[16:20:15.216]                             hostname = base::Sys.info()[["nodename"]])
[16:20:15.216]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:15.216]                             info)
[16:20:15.216]                           info <- base::paste(info, collapse = "; ")
[16:20:15.216]                           if (!has_future) {
[16:20:15.216]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:15.216]                               info)
[16:20:15.216]                           }
[16:20:15.216]                           else {
[16:20:15.216]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:15.216]                               info, version)
[16:20:15.216]                           }
[16:20:15.216]                           base::stop(msg)
[16:20:15.216]                         }
[16:20:15.216]                       })
[16:20:15.216]                     }
[16:20:15.216]                     base::local({
[16:20:15.216]                       for (pkg in "future") {
[16:20:15.216]                         base::loadNamespace(pkg)
[16:20:15.216]                         base::library(pkg, character.only = TRUE)
[16:20:15.216]                       }
[16:20:15.216]                     })
[16:20:15.216]                   }
[16:20:15.216]                   ...future.strategy.old <- future::plan("list")
[16:20:15.216]                   options(future.plan = NULL)
[16:20:15.216]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:15.216]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:15.216]                 }
[16:20:15.216]                 ...future.workdir <- getwd()
[16:20:15.216]             }
[16:20:15.216]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:15.216]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:15.216]         }
[16:20:15.216]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:15.216]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:15.216]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:15.216]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:15.216]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:15.216]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:15.216]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:15.216]             base::names(...future.oldOptions))
[16:20:15.216]     }
[16:20:15.216]     if (FALSE) {
[16:20:15.216]     }
[16:20:15.216]     else {
[16:20:15.216]         if (TRUE) {
[16:20:15.216]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:15.216]                 open = "w")
[16:20:15.216]         }
[16:20:15.216]         else {
[16:20:15.216]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:15.216]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:15.216]         }
[16:20:15.216]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:15.216]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:15.216]             base::sink(type = "output", split = FALSE)
[16:20:15.216]             base::close(...future.stdout)
[16:20:15.216]         }, add = TRUE)
[16:20:15.216]     }
[16:20:15.216]     ...future.frame <- base::sys.nframe()
[16:20:15.216]     ...future.conditions <- base::list()
[16:20:15.216]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:15.216]     if (FALSE) {
[16:20:15.216]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:15.216]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:15.216]     }
[16:20:15.216]     ...future.result <- base::tryCatch({
[16:20:15.216]         base::withCallingHandlers({
[16:20:15.216]             ...future.value <- base::withVisible(base::local({
[16:20:15.216]                 message(sprintf("Calculating tile #%d of %d ...", 
[16:20:15.216]                   ii, n), appendLF = FALSE)
[16:20:15.216]                 fit <- mandelbrot(C)
[16:20:15.216]                 delay(fit)
[16:20:15.216]                 message(" done")
[16:20:15.216]                 fit
[16:20:15.216]             }))
[16:20:15.216]             future::FutureResult(value = ...future.value$value, 
[16:20:15.216]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:15.216]                   ...future.rng), globalenv = if (FALSE) 
[16:20:15.216]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:15.216]                     ...future.globalenv.names))
[16:20:15.216]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:15.216]         }, condition = base::local({
[16:20:15.216]             c <- base::c
[16:20:15.216]             inherits <- base::inherits
[16:20:15.216]             invokeRestart <- base::invokeRestart
[16:20:15.216]             length <- base::length
[16:20:15.216]             list <- base::list
[16:20:15.216]             seq.int <- base::seq.int
[16:20:15.216]             signalCondition <- base::signalCondition
[16:20:15.216]             sys.calls <- base::sys.calls
[16:20:15.216]             `[[` <- base::`[[`
[16:20:15.216]             `+` <- base::`+`
[16:20:15.216]             `<<-` <- base::`<<-`
[16:20:15.216]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:15.216]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:15.216]                   3L)]
[16:20:15.216]             }
[16:20:15.216]             function(cond) {
[16:20:15.216]                 is_error <- inherits(cond, "error")
[16:20:15.216]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:15.216]                   NULL)
[16:20:15.216]                 if (is_error) {
[16:20:15.216]                   sessionInformation <- function() {
[16:20:15.216]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:15.216]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:15.216]                       search = base::search(), system = base::Sys.info())
[16:20:15.216]                   }
[16:20:15.216]                   ...future.conditions[[length(...future.conditions) + 
[16:20:15.216]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:15.216]                     cond$call), session = sessionInformation(), 
[16:20:15.216]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:15.216]                   signalCondition(cond)
[16:20:15.216]                 }
[16:20:15.216]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:15.216]                 "immediateCondition"))) {
[16:20:15.216]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:15.216]                   ...future.conditions[[length(...future.conditions) + 
[16:20:15.216]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:15.216]                   if (TRUE && !signal) {
[16:20:15.216]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:15.216]                     {
[16:20:15.216]                       inherits <- base::inherits
[16:20:15.216]                       invokeRestart <- base::invokeRestart
[16:20:15.216]                       is.null <- base::is.null
[16:20:15.216]                       muffled <- FALSE
[16:20:15.216]                       if (inherits(cond, "message")) {
[16:20:15.216]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:15.216]                         if (muffled) 
[16:20:15.216]                           invokeRestart("muffleMessage")
[16:20:15.216]                       }
[16:20:15.216]                       else if (inherits(cond, "warning")) {
[16:20:15.216]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:15.216]                         if (muffled) 
[16:20:15.216]                           invokeRestart("muffleWarning")
[16:20:15.216]                       }
[16:20:15.216]                       else if (inherits(cond, "condition")) {
[16:20:15.216]                         if (!is.null(pattern)) {
[16:20:15.216]                           computeRestarts <- base::computeRestarts
[16:20:15.216]                           grepl <- base::grepl
[16:20:15.216]                           restarts <- computeRestarts(cond)
[16:20:15.216]                           for (restart in restarts) {
[16:20:15.216]                             name <- restart$name
[16:20:15.216]                             if (is.null(name)) 
[16:20:15.216]                               next
[16:20:15.216]                             if (!grepl(pattern, name)) 
[16:20:15.216]                               next
[16:20:15.216]                             invokeRestart(restart)
[16:20:15.216]                             muffled <- TRUE
[16:20:15.216]                             break
[16:20:15.216]                           }
[16:20:15.216]                         }
[16:20:15.216]                       }
[16:20:15.216]                       invisible(muffled)
[16:20:15.216]                     }
[16:20:15.216]                     muffleCondition(cond, pattern = "^muffle")
[16:20:15.216]                   }
[16:20:15.216]                 }
[16:20:15.216]                 else {
[16:20:15.216]                   if (TRUE) {
[16:20:15.216]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:15.216]                     {
[16:20:15.216]                       inherits <- base::inherits
[16:20:15.216]                       invokeRestart <- base::invokeRestart
[16:20:15.216]                       is.null <- base::is.null
[16:20:15.216]                       muffled <- FALSE
[16:20:15.216]                       if (inherits(cond, "message")) {
[16:20:15.216]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:15.216]                         if (muffled) 
[16:20:15.216]                           invokeRestart("muffleMessage")
[16:20:15.216]                       }
[16:20:15.216]                       else if (inherits(cond, "warning")) {
[16:20:15.216]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:15.216]                         if (muffled) 
[16:20:15.216]                           invokeRestart("muffleWarning")
[16:20:15.216]                       }
[16:20:15.216]                       else if (inherits(cond, "condition")) {
[16:20:15.216]                         if (!is.null(pattern)) {
[16:20:15.216]                           computeRestarts <- base::computeRestarts
[16:20:15.216]                           grepl <- base::grepl
[16:20:15.216]                           restarts <- computeRestarts(cond)
[16:20:15.216]                           for (restart in restarts) {
[16:20:15.216]                             name <- restart$name
[16:20:15.216]                             if (is.null(name)) 
[16:20:15.216]                               next
[16:20:15.216]                             if (!grepl(pattern, name)) 
[16:20:15.216]                               next
[16:20:15.216]                             invokeRestart(restart)
[16:20:15.216]                             muffled <- TRUE
[16:20:15.216]                             break
[16:20:15.216]                           }
[16:20:15.216]                         }
[16:20:15.216]                       }
[16:20:15.216]                       invisible(muffled)
[16:20:15.216]                     }
[16:20:15.216]                     muffleCondition(cond, pattern = "^muffle")
[16:20:15.216]                   }
[16:20:15.216]                 }
[16:20:15.216]             }
[16:20:15.216]         }))
[16:20:15.216]     }, error = function(ex) {
[16:20:15.216]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:15.216]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:15.216]                 ...future.rng), started = ...future.startTime, 
[16:20:15.216]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:15.216]             version = "1.8"), class = "FutureResult")
[16:20:15.216]     }, finally = {
[16:20:15.216]         if (!identical(...future.workdir, getwd())) 
[16:20:15.216]             setwd(...future.workdir)
[16:20:15.216]         {
[16:20:15.216]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:15.216]                 ...future.oldOptions$nwarnings <- NULL
[16:20:15.216]             }
[16:20:15.216]             base::options(...future.oldOptions)
[16:20:15.216]             if (.Platform$OS.type == "windows") {
[16:20:15.216]                 old_names <- names(...future.oldEnvVars)
[16:20:15.216]                 envs <- base::Sys.getenv()
[16:20:15.216]                 names <- names(envs)
[16:20:15.216]                 common <- intersect(names, old_names)
[16:20:15.216]                 added <- setdiff(names, old_names)
[16:20:15.216]                 removed <- setdiff(old_names, names)
[16:20:15.216]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:15.216]                   envs[common]]
[16:20:15.216]                 NAMES <- toupper(changed)
[16:20:15.216]                 args <- list()
[16:20:15.216]                 for (kk in seq_along(NAMES)) {
[16:20:15.216]                   name <- changed[[kk]]
[16:20:15.216]                   NAME <- NAMES[[kk]]
[16:20:15.216]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:15.216]                     next
[16:20:15.216]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:15.216]                 }
[16:20:15.216]                 NAMES <- toupper(added)
[16:20:15.216]                 for (kk in seq_along(NAMES)) {
[16:20:15.216]                   name <- added[[kk]]
[16:20:15.216]                   NAME <- NAMES[[kk]]
[16:20:15.216]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:15.216]                     next
[16:20:15.216]                   args[[name]] <- ""
[16:20:15.216]                 }
[16:20:15.216]                 NAMES <- toupper(removed)
[16:20:15.216]                 for (kk in seq_along(NAMES)) {
[16:20:15.216]                   name <- removed[[kk]]
[16:20:15.216]                   NAME <- NAMES[[kk]]
[16:20:15.216]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:15.216]                     next
[16:20:15.216]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:15.216]                 }
[16:20:15.216]                 if (length(args) > 0) 
[16:20:15.216]                   base::do.call(base::Sys.setenv, args = args)
[16:20:15.216]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:15.216]             }
[16:20:15.216]             else {
[16:20:15.216]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:15.216]             }
[16:20:15.216]             {
[16:20:15.216]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:15.216]                   0L) {
[16:20:15.216]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:15.216]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:15.216]                   base::options(opts)
[16:20:15.216]                 }
[16:20:15.216]                 {
[16:20:15.216]                   {
[16:20:15.216]                     NULL
[16:20:15.216]                     RNGkind("Mersenne-Twister")
[16:20:15.216]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:15.216]                       inherits = FALSE)
[16:20:15.216]                   }
[16:20:15.216]                   options(future.plan = NULL)
[16:20:15.216]                   if (is.na(NA_character_)) 
[16:20:15.216]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:15.216]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:15.216]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:15.216]                     .init = FALSE)
[16:20:15.216]                 }
[16:20:15.216]             }
[16:20:15.216]         }
[16:20:15.216]     })
[16:20:15.216]     if (TRUE) {
[16:20:15.216]         base::sink(type = "output", split = FALSE)
[16:20:15.216]         if (TRUE) {
[16:20:15.216]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:15.216]         }
[16:20:15.216]         else {
[16:20:15.216]             ...future.result["stdout"] <- base::list(NULL)
[16:20:15.216]         }
[16:20:15.216]         base::close(...future.stdout)
[16:20:15.216]         ...future.stdout <- NULL
[16:20:15.216]     }
[16:20:15.216]     ...future.result$conditions <- ...future.conditions
[16:20:15.216]     ...future.result$finished <- base::Sys.time()
[16:20:15.216]     ...future.result
[16:20:15.216] }
[16:20:15.217] assign_globals() ...
[16:20:15.218] List of 4
[16:20:15.218]  $ ii   : int 1
[16:20:15.218]  $ n    : int 4
[16:20:15.218]  $ C    : cplx [1:25, 1:25] -2.25-1.5i -2.25-1.44i -2.25-1.38i ...
[16:20:15.218]   ..- attr(*, "region")=List of 2
[16:20:15.218]   .. ..$ xrange: num [1:2] -2.25 -0.781
[16:20:15.218]   .. ..$ yrange: num [1:2] -1.5 -0.0306
[16:20:15.218]   ..- attr(*, "tile")= int [1:2] 1 1
[16:20:15.218]  $ delay:function (counts)  
[16:20:15.218]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[16:20:15.218]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x562a98fd3f00> 
[16:20:15.218]  - attr(*, "where")=List of 4
[16:20:15.218]   ..$ ii   :<environment: R_EmptyEnv> 
[16:20:15.218]   ..$ n    :<environment: R_EmptyEnv> 
[16:20:15.218]   ..$ C    :<environment: R_EmptyEnv> 
[16:20:15.218]   ..$ delay:<environment: R_EmptyEnv> 
[16:20:15.218]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:15.218]  - attr(*, "resolved")= logi FALSE
[16:20:15.218]  - attr(*, "total_size")= num 14584
[16:20:15.218]  - attr(*, "already-done")= logi TRUE
[16:20:15.224] - copied ‘ii’ to environment
[16:20:15.224] - copied ‘n’ to environment
[16:20:15.224] - copied ‘C’ to environment
[16:20:15.224] - reassign environment for ‘delay’
[16:20:15.224] - copied ‘delay’ to environment
[16:20:15.224] assign_globals() ... done
[16:20:15.225] plan(): Setting new future strategy stack:
[16:20:15.225] List of future strategies:
[16:20:15.225] 1. sequential:
[16:20:15.225]    - args: function (..., envir = parent.frame())
[16:20:15.225]    - tweaked: FALSE
[16:20:15.225]    - call: NULL
[16:20:15.225] plan(): nbrOfWorkers() = 1
[16:20:15.242] plan(): Setting new future strategy stack:
[16:20:15.242] List of future strategies:
[16:20:15.242] 1. sequential:
[16:20:15.242]    - args: function (..., envir = parent.frame())
[16:20:15.242]    - tweaked: FALSE
[16:20:15.242]    - call: plan(strategy)
[16:20:15.243] plan(): nbrOfWorkers() = 1
[16:20:15.243] SequentialFuture started (and completed)
[16:20:15.243] signalConditions() ...
[16:20:15.243]  - include = ‘immediateCondition’
[16:20:15.243]  - exclude = 
[16:20:15.244]  - resignal = FALSE
[16:20:15.244]  - Number of conditions: 2
[16:20:15.244] signalConditions() ... done
[16:20:15.244] - Launch lazy future ... done
[16:20:15.244] run() for ‘SequentialFuture’ ... done
[16:20:15.244] - run() ... done
[16:20:15.244] - resolved() ...
[16:20:15.244] resolved() for ‘SequentialFuture’ ...
[16:20:15.244] - state: ‘finished’
[16:20:15.244] - run: TRUE
[16:20:15.245] - result: ‘FutureResult’
[16:20:15.245] resolved() for ‘SequentialFuture’ ... done
[16:20:15.245] - resolved: TRUE
[16:20:15.245] - resolved() ... done
[16:20:15.245] resolved() for ‘SequentialFuture’ ... done
Plotting tile #1 of 4 ...
[16:20:15.245] signalConditions() ...
[16:20:15.245]  - include = ‘immediateCondition’
[16:20:15.245]  - exclude = 
[16:20:15.245]  - resignal = FALSE
[16:20:15.245]  - Number of conditions: 2
[16:20:15.246] signalConditions() ... done
[16:20:15.246] Future state: ‘finished’
[16:20:15.246] signalConditions() ...
[16:20:15.246]  - include = ‘condition’
[16:20:15.246]  - exclude = ‘immediateCondition’
[16:20:15.246]  - resignal = TRUE
[16:20:15.246]  - Number of conditions: 2
[16:20:15.246]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #1 of 4 ...[16:20:15.246]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[16:20:15.247] signalConditions() ... done
[16:20:15.248] resolved() for ‘Future’ ...
[16:20:15.248] - state: ‘created’
[16:20:15.248] - run: TRUE
[16:20:15.249] - run() ...
[16:20:15.249] run() for ‘Future’ ...
[16:20:15.249] - state: ‘created’
[16:20:15.249] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:15.249] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:15.249] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:15.249]   - Field: ‘label’
[16:20:15.250]   - Field: ‘local’
[16:20:15.250]   - Field: ‘owner’
[16:20:15.250]   - Field: ‘envir’
[16:20:15.250]   - Field: ‘packages’
[16:20:15.250]   - Field: ‘gc’
[16:20:15.250]   - Field: ‘conditions’
[16:20:15.250]   - Field: ‘expr’
[16:20:15.250]   - Field: ‘uuid’
[16:20:15.250]   - Field: ‘seed’
[16:20:15.250]   - Field: ‘version’
[16:20:15.250]   - Field: ‘result’
[16:20:15.251]   - Field: ‘asynchronous’
[16:20:15.251]   - Field: ‘calls’
[16:20:15.251]   - Field: ‘globals’
[16:20:15.251]   - Field: ‘stdout’
[16:20:15.251]   - Field: ‘earlySignal’
[16:20:15.251]   - Field: ‘lazy’
[16:20:15.251]   - Field: ‘state’
[16:20:15.251] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:15.251] - Launch lazy future ...
[16:20:15.251] Packages needed by the future expression (n = 1): ‘future’
[16:20:15.252] Packages needed by future strategies (n = 0): <none>
[16:20:15.252] {
[16:20:15.252]     {
[16:20:15.252]         {
[16:20:15.252]             ...future.startTime <- base::Sys.time()
[16:20:15.252]             {
[16:20:15.252]                 {
[16:20:15.252]                   {
[16:20:15.252]                     {
[16:20:15.252]                       base::local({
[16:20:15.252]                         has_future <- base::requireNamespace("future", 
[16:20:15.252]                           quietly = TRUE)
[16:20:15.252]                         if (has_future) {
[16:20:15.252]                           ns <- base::getNamespace("future")
[16:20:15.252]                           version <- ns[[".package"]][["version"]]
[16:20:15.252]                           if (is.null(version)) 
[16:20:15.252]                             version <- utils::packageVersion("future")
[16:20:15.252]                         }
[16:20:15.252]                         else {
[16:20:15.252]                           version <- NULL
[16:20:15.252]                         }
[16:20:15.252]                         if (!has_future || version < "1.8.0") {
[16:20:15.252]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:15.252]                             "", base::R.version$version.string), 
[16:20:15.252]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:15.252]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:15.252]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:15.252]                               "release", "version")], collapse = " "), 
[16:20:15.252]                             hostname = base::Sys.info()[["nodename"]])
[16:20:15.252]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:15.252]                             info)
[16:20:15.252]                           info <- base::paste(info, collapse = "; ")
[16:20:15.252]                           if (!has_future) {
[16:20:15.252]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:15.252]                               info)
[16:20:15.252]                           }
[16:20:15.252]                           else {
[16:20:15.252]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:15.252]                               info, version)
[16:20:15.252]                           }
[16:20:15.252]                           base::stop(msg)
[16:20:15.252]                         }
[16:20:15.252]                       })
[16:20:15.252]                     }
[16:20:15.252]                     base::local({
[16:20:15.252]                       for (pkg in "future") {
[16:20:15.252]                         base::loadNamespace(pkg)
[16:20:15.252]                         base::library(pkg, character.only = TRUE)
[16:20:15.252]                       }
[16:20:15.252]                     })
[16:20:15.252]                   }
[16:20:15.252]                   ...future.strategy.old <- future::plan("list")
[16:20:15.252]                   options(future.plan = NULL)
[16:20:15.252]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:15.252]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:15.252]                 }
[16:20:15.252]                 ...future.workdir <- getwd()
[16:20:15.252]             }
[16:20:15.252]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:15.252]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:15.252]         }
[16:20:15.252]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:15.252]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:15.252]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:15.252]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:15.252]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:15.252]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:15.252]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:15.252]             base::names(...future.oldOptions))
[16:20:15.252]     }
[16:20:15.252]     if (FALSE) {
[16:20:15.252]     }
[16:20:15.252]     else {
[16:20:15.252]         if (TRUE) {
[16:20:15.252]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:15.252]                 open = "w")
[16:20:15.252]         }
[16:20:15.252]         else {
[16:20:15.252]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:15.252]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:15.252]         }
[16:20:15.252]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:15.252]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:15.252]             base::sink(type = "output", split = FALSE)
[16:20:15.252]             base::close(...future.stdout)
[16:20:15.252]         }, add = TRUE)
[16:20:15.252]     }
[16:20:15.252]     ...future.frame <- base::sys.nframe()
[16:20:15.252]     ...future.conditions <- base::list()
[16:20:15.252]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:15.252]     if (FALSE) {
[16:20:15.252]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:15.252]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:15.252]     }
[16:20:15.252]     ...future.result <- base::tryCatch({
[16:20:15.252]         base::withCallingHandlers({
[16:20:15.252]             ...future.value <- base::withVisible(base::local({
[16:20:15.252]                 message(sprintf("Calculating tile #%d of %d ...", 
[16:20:15.252]                   ii, n), appendLF = FALSE)
[16:20:15.252]                 fit <- mandelbrot(C)
[16:20:15.252]                 delay(fit)
[16:20:15.252]                 message(" done")
[16:20:15.252]                 fit
[16:20:15.252]             }))
[16:20:15.252]             future::FutureResult(value = ...future.value$value, 
[16:20:15.252]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:15.252]                   ...future.rng), globalenv = if (FALSE) 
[16:20:15.252]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:15.252]                     ...future.globalenv.names))
[16:20:15.252]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:15.252]         }, condition = base::local({
[16:20:15.252]             c <- base::c
[16:20:15.252]             inherits <- base::inherits
[16:20:15.252]             invokeRestart <- base::invokeRestart
[16:20:15.252]             length <- base::length
[16:20:15.252]             list <- base::list
[16:20:15.252]             seq.int <- base::seq.int
[16:20:15.252]             signalCondition <- base::signalCondition
[16:20:15.252]             sys.calls <- base::sys.calls
[16:20:15.252]             `[[` <- base::`[[`
[16:20:15.252]             `+` <- base::`+`
[16:20:15.252]             `<<-` <- base::`<<-`
[16:20:15.252]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:15.252]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:15.252]                   3L)]
[16:20:15.252]             }
[16:20:15.252]             function(cond) {
[16:20:15.252]                 is_error <- inherits(cond, "error")
[16:20:15.252]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:15.252]                   NULL)
[16:20:15.252]                 if (is_error) {
[16:20:15.252]                   sessionInformation <- function() {
[16:20:15.252]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:15.252]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:15.252]                       search = base::search(), system = base::Sys.info())
[16:20:15.252]                   }
[16:20:15.252]                   ...future.conditions[[length(...future.conditions) + 
[16:20:15.252]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:15.252]                     cond$call), session = sessionInformation(), 
[16:20:15.252]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:15.252]                   signalCondition(cond)
[16:20:15.252]                 }
[16:20:15.252]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:15.252]                 "immediateCondition"))) {
[16:20:15.252]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:15.252]                   ...future.conditions[[length(...future.conditions) + 
[16:20:15.252]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:15.252]                   if (TRUE && !signal) {
[16:20:15.252]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:15.252]                     {
[16:20:15.252]                       inherits <- base::inherits
[16:20:15.252]                       invokeRestart <- base::invokeRestart
[16:20:15.252]                       is.null <- base::is.null
[16:20:15.252]                       muffled <- FALSE
[16:20:15.252]                       if (inherits(cond, "message")) {
[16:20:15.252]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:15.252]                         if (muffled) 
[16:20:15.252]                           invokeRestart("muffleMessage")
[16:20:15.252]                       }
[16:20:15.252]                       else if (inherits(cond, "warning")) {
[16:20:15.252]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:15.252]                         if (muffled) 
[16:20:15.252]                           invokeRestart("muffleWarning")
[16:20:15.252]                       }
[16:20:15.252]                       else if (inherits(cond, "condition")) {
[16:20:15.252]                         if (!is.null(pattern)) {
[16:20:15.252]                           computeRestarts <- base::computeRestarts
[16:20:15.252]                           grepl <- base::grepl
[16:20:15.252]                           restarts <- computeRestarts(cond)
[16:20:15.252]                           for (restart in restarts) {
[16:20:15.252]                             name <- restart$name
[16:20:15.252]                             if (is.null(name)) 
[16:20:15.252]                               next
[16:20:15.252]                             if (!grepl(pattern, name)) 
[16:20:15.252]                               next
[16:20:15.252]                             invokeRestart(restart)
[16:20:15.252]                             muffled <- TRUE
[16:20:15.252]                             break
[16:20:15.252]                           }
[16:20:15.252]                         }
[16:20:15.252]                       }
[16:20:15.252]                       invisible(muffled)
[16:20:15.252]                     }
[16:20:15.252]                     muffleCondition(cond, pattern = "^muffle")
[16:20:15.252]                   }
[16:20:15.252]                 }
[16:20:15.252]                 else {
[16:20:15.252]                   if (TRUE) {
[16:20:15.252]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:15.252]                     {
[16:20:15.252]                       inherits <- base::inherits
[16:20:15.252]                       invokeRestart <- base::invokeRestart
[16:20:15.252]                       is.null <- base::is.null
[16:20:15.252]                       muffled <- FALSE
[16:20:15.252]                       if (inherits(cond, "message")) {
[16:20:15.252]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:15.252]                         if (muffled) 
[16:20:15.252]                           invokeRestart("muffleMessage")
[16:20:15.252]                       }
[16:20:15.252]                       else if (inherits(cond, "warning")) {
[16:20:15.252]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:15.252]                         if (muffled) 
[16:20:15.252]                           invokeRestart("muffleWarning")
[16:20:15.252]                       }
[16:20:15.252]                       else if (inherits(cond, "condition")) {
[16:20:15.252]                         if (!is.null(pattern)) {
[16:20:15.252]                           computeRestarts <- base::computeRestarts
[16:20:15.252]                           grepl <- base::grepl
[16:20:15.252]                           restarts <- computeRestarts(cond)
[16:20:15.252]                           for (restart in restarts) {
[16:20:15.252]                             name <- restart$name
[16:20:15.252]                             if (is.null(name)) 
[16:20:15.252]                               next
[16:20:15.252]                             if (!grepl(pattern, name)) 
[16:20:15.252]                               next
[16:20:15.252]                             invokeRestart(restart)
[16:20:15.252]                             muffled <- TRUE
[16:20:15.252]                             break
[16:20:15.252]                           }
[16:20:15.252]                         }
[16:20:15.252]                       }
[16:20:15.252]                       invisible(muffled)
[16:20:15.252]                     }
[16:20:15.252]                     muffleCondition(cond, pattern = "^muffle")
[16:20:15.252]                   }
[16:20:15.252]                 }
[16:20:15.252]             }
[16:20:15.252]         }))
[16:20:15.252]     }, error = function(ex) {
[16:20:15.252]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:15.252]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:15.252]                 ...future.rng), started = ...future.startTime, 
[16:20:15.252]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:15.252]             version = "1.8"), class = "FutureResult")
[16:20:15.252]     }, finally = {
[16:20:15.252]         if (!identical(...future.workdir, getwd())) 
[16:20:15.252]             setwd(...future.workdir)
[16:20:15.252]         {
[16:20:15.252]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:15.252]                 ...future.oldOptions$nwarnings <- NULL
[16:20:15.252]             }
[16:20:15.252]             base::options(...future.oldOptions)
[16:20:15.252]             if (.Platform$OS.type == "windows") {
[16:20:15.252]                 old_names <- names(...future.oldEnvVars)
[16:20:15.252]                 envs <- base::Sys.getenv()
[16:20:15.252]                 names <- names(envs)
[16:20:15.252]                 common <- intersect(names, old_names)
[16:20:15.252]                 added <- setdiff(names, old_names)
[16:20:15.252]                 removed <- setdiff(old_names, names)
[16:20:15.252]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:15.252]                   envs[common]]
[16:20:15.252]                 NAMES <- toupper(changed)
[16:20:15.252]                 args <- list()
[16:20:15.252]                 for (kk in seq_along(NAMES)) {
[16:20:15.252]                   name <- changed[[kk]]
[16:20:15.252]                   NAME <- NAMES[[kk]]
[16:20:15.252]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:15.252]                     next
[16:20:15.252]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:15.252]                 }
[16:20:15.252]                 NAMES <- toupper(added)
[16:20:15.252]                 for (kk in seq_along(NAMES)) {
[16:20:15.252]                   name <- added[[kk]]
[16:20:15.252]                   NAME <- NAMES[[kk]]
[16:20:15.252]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:15.252]                     next
[16:20:15.252]                   args[[name]] <- ""
[16:20:15.252]                 }
[16:20:15.252]                 NAMES <- toupper(removed)
[16:20:15.252]                 for (kk in seq_along(NAMES)) {
[16:20:15.252]                   name <- removed[[kk]]
[16:20:15.252]                   NAME <- NAMES[[kk]]
[16:20:15.252]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:15.252]                     next
[16:20:15.252]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:15.252]                 }
[16:20:15.252]                 if (length(args) > 0) 
[16:20:15.252]                   base::do.call(base::Sys.setenv, args = args)
[16:20:15.252]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:15.252]             }
[16:20:15.252]             else {
[16:20:15.252]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:15.252]             }
[16:20:15.252]             {
[16:20:15.252]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:15.252]                   0L) {
[16:20:15.252]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:15.252]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:15.252]                   base::options(opts)
[16:20:15.252]                 }
[16:20:15.252]                 {
[16:20:15.252]                   {
[16:20:15.252]                     NULL
[16:20:15.252]                     RNGkind("Mersenne-Twister")
[16:20:15.252]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:15.252]                       inherits = FALSE)
[16:20:15.252]                   }
[16:20:15.252]                   options(future.plan = NULL)
[16:20:15.252]                   if (is.na(NA_character_)) 
[16:20:15.252]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:15.252]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:15.252]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:15.252]                     .init = FALSE)
[16:20:15.252]                 }
[16:20:15.252]             }
[16:20:15.252]         }
[16:20:15.252]     })
[16:20:15.252]     if (TRUE) {
[16:20:15.252]         base::sink(type = "output", split = FALSE)
[16:20:15.252]         if (TRUE) {
[16:20:15.252]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:15.252]         }
[16:20:15.252]         else {
[16:20:15.252]             ...future.result["stdout"] <- base::list(NULL)
[16:20:15.252]         }
[16:20:15.252]         base::close(...future.stdout)
[16:20:15.252]         ...future.stdout <- NULL
[16:20:15.252]     }
[16:20:15.252]     ...future.result$conditions <- ...future.conditions
[16:20:15.252]     ...future.result$finished <- base::Sys.time()
[16:20:15.252]     ...future.result
[16:20:15.252] }
[16:20:15.254] assign_globals() ...
[16:20:15.254] List of 4
[16:20:15.254]  $ ii   : int 2
[16:20:15.254]  $ n    : int 4
[16:20:15.254]  $ C    : cplx [1:25, 1:25] -0.72-1.5i -0.72-1.44i -0.72-1.38i ...
[16:20:15.254]   ..- attr(*, "region")=List of 2
[16:20:15.254]   .. ..$ xrange: num [1:2] -0.719 0.75
[16:20:15.254]   .. ..$ yrange: num [1:2] -1.5 -0.0306
[16:20:15.254]   ..- attr(*, "tile")= int [1:2] 1 2
[16:20:15.254]  $ delay:function (counts)  
[16:20:15.254]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[16:20:15.254]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x562a98fd3f00> 
[16:20:15.254]  - attr(*, "where")=List of 4
[16:20:15.254]   ..$ ii   :<environment: R_EmptyEnv> 
[16:20:15.254]   ..$ n    :<environment: R_EmptyEnv> 
[16:20:15.254]   ..$ C    :<environment: R_EmptyEnv> 
[16:20:15.254]   ..$ delay:<environment: R_EmptyEnv> 
[16:20:15.254]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:15.254]  - attr(*, "resolved")= logi FALSE
[16:20:15.254]  - attr(*, "total_size")= num 14584
[16:20:15.254]  - attr(*, "already-done")= logi TRUE
[16:20:15.260] - copied ‘ii’ to environment
[16:20:15.260] - copied ‘n’ to environment
[16:20:15.260] - copied ‘C’ to environment
[16:20:15.260] - reassign environment for ‘delay’
[16:20:15.261] - copied ‘delay’ to environment
[16:20:15.261] assign_globals() ... done
[16:20:15.261] plan(): Setting new future strategy stack:
[16:20:15.261] List of future strategies:
[16:20:15.261] 1. sequential:
[16:20:15.261]    - args: function (..., envir = parent.frame())
[16:20:15.261]    - tweaked: FALSE
[16:20:15.261]    - call: NULL
[16:20:15.262] plan(): nbrOfWorkers() = 1
[16:20:15.276] plan(): Setting new future strategy stack:
[16:20:15.276] List of future strategies:
[16:20:15.276] 1. sequential:
[16:20:15.276]    - args: function (..., envir = parent.frame())
[16:20:15.276]    - tweaked: FALSE
[16:20:15.276]    - call: plan(strategy)
[16:20:15.277] plan(): nbrOfWorkers() = 1
[16:20:15.277] SequentialFuture started (and completed)
[16:20:15.277] signalConditions() ...
[16:20:15.277]  - include = ‘immediateCondition’
[16:20:15.277]  - exclude = 
[16:20:15.277]  - resignal = FALSE
[16:20:15.277]  - Number of conditions: 2
[16:20:15.277] signalConditions() ... done
[16:20:15.277] - Launch lazy future ... done
[16:20:15.278] run() for ‘SequentialFuture’ ... done
[16:20:15.278] - run() ... done
[16:20:15.278] - resolved() ...
[16:20:15.278] resolved() for ‘SequentialFuture’ ...
[16:20:15.278] - state: ‘finished’
[16:20:15.278] - run: TRUE
[16:20:15.278] - result: ‘FutureResult’
[16:20:15.278] resolved() for ‘SequentialFuture’ ... done
[16:20:15.278] - resolved: TRUE
[16:20:15.278] - resolved() ... done
[16:20:15.278] resolved() for ‘SequentialFuture’ ... done
Plotting tile #2 of 4 ...
[16:20:15.279] signalConditions() ...
[16:20:15.279]  - include = ‘immediateCondition’
[16:20:15.279]  - exclude = 
[16:20:15.279]  - resignal = FALSE
[16:20:15.279]  - Number of conditions: 2
[16:20:15.279] signalConditions() ... done
[16:20:15.279] Future state: ‘finished’
[16:20:15.279] signalConditions() ...
[16:20:15.279]  - include = ‘condition’
[16:20:15.279]  - exclude = ‘immediateCondition’
[16:20:15.280]  - resignal = TRUE
[16:20:15.280]  - Number of conditions: 2
[16:20:15.280]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #2 of 4 ...[16:20:15.280]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[16:20:15.280] signalConditions() ... done
[16:20:15.281] resolved() for ‘Future’ ...
[16:20:15.281] - state: ‘created’
[16:20:15.281] - run: TRUE
[16:20:15.281] - run() ...
[16:20:15.281] run() for ‘Future’ ...
[16:20:15.281] - state: ‘created’
[16:20:15.281] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:15.282] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:15.282] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:15.282]   - Field: ‘label’
[16:20:15.282]   - Field: ‘local’
[16:20:15.282]   - Field: ‘owner’
[16:20:15.282]   - Field: ‘envir’
[16:20:15.282]   - Field: ‘packages’
[16:20:15.282]   - Field: ‘gc’
[16:20:15.282]   - Field: ‘conditions’
[16:20:15.282]   - Field: ‘expr’
[16:20:15.283]   - Field: ‘uuid’
[16:20:15.283]   - Field: ‘seed’
[16:20:15.283]   - Field: ‘version’
[16:20:15.283]   - Field: ‘result’
[16:20:15.283]   - Field: ‘asynchronous’
[16:20:15.283]   - Field: ‘calls’
[16:20:15.283]   - Field: ‘globals’
[16:20:15.283]   - Field: ‘stdout’
[16:20:15.283]   - Field: ‘earlySignal’
[16:20:15.283]   - Field: ‘lazy’
[16:20:15.284]   - Field: ‘state’
[16:20:15.284] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:15.284] - Launch lazy future ...
[16:20:15.284] Packages needed by the future expression (n = 1): ‘future’
[16:20:15.284] Packages needed by future strategies (n = 0): <none>
[16:20:15.285] {
[16:20:15.285]     {
[16:20:15.285]         {
[16:20:15.285]             ...future.startTime <- base::Sys.time()
[16:20:15.285]             {
[16:20:15.285]                 {
[16:20:15.285]                   {
[16:20:15.285]                     {
[16:20:15.285]                       base::local({
[16:20:15.285]                         has_future <- base::requireNamespace("future", 
[16:20:15.285]                           quietly = TRUE)
[16:20:15.285]                         if (has_future) {
[16:20:15.285]                           ns <- base::getNamespace("future")
[16:20:15.285]                           version <- ns[[".package"]][["version"]]
[16:20:15.285]                           if (is.null(version)) 
[16:20:15.285]                             version <- utils::packageVersion("future")
[16:20:15.285]                         }
[16:20:15.285]                         else {
[16:20:15.285]                           version <- NULL
[16:20:15.285]                         }
[16:20:15.285]                         if (!has_future || version < "1.8.0") {
[16:20:15.285]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:15.285]                             "", base::R.version$version.string), 
[16:20:15.285]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:15.285]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:15.285]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:15.285]                               "release", "version")], collapse = " "), 
[16:20:15.285]                             hostname = base::Sys.info()[["nodename"]])
[16:20:15.285]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:15.285]                             info)
[16:20:15.285]                           info <- base::paste(info, collapse = "; ")
[16:20:15.285]                           if (!has_future) {
[16:20:15.285]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:15.285]                               info)
[16:20:15.285]                           }
[16:20:15.285]                           else {
[16:20:15.285]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:15.285]                               info, version)
[16:20:15.285]                           }
[16:20:15.285]                           base::stop(msg)
[16:20:15.285]                         }
[16:20:15.285]                       })
[16:20:15.285]                     }
[16:20:15.285]                     base::local({
[16:20:15.285]                       for (pkg in "future") {
[16:20:15.285]                         base::loadNamespace(pkg)
[16:20:15.285]                         base::library(pkg, character.only = TRUE)
[16:20:15.285]                       }
[16:20:15.285]                     })
[16:20:15.285]                   }
[16:20:15.285]                   ...future.strategy.old <- future::plan("list")
[16:20:15.285]                   options(future.plan = NULL)
[16:20:15.285]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:15.285]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:15.285]                 }
[16:20:15.285]                 ...future.workdir <- getwd()
[16:20:15.285]             }
[16:20:15.285]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:15.285]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:15.285]         }
[16:20:15.285]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:15.285]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:15.285]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:15.285]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:15.285]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:15.285]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:15.285]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:15.285]             base::names(...future.oldOptions))
[16:20:15.285]     }
[16:20:15.285]     if (FALSE) {
[16:20:15.285]     }
[16:20:15.285]     else {
[16:20:15.285]         if (TRUE) {
[16:20:15.285]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:15.285]                 open = "w")
[16:20:15.285]         }
[16:20:15.285]         else {
[16:20:15.285]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:15.285]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:15.285]         }
[16:20:15.285]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:15.285]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:15.285]             base::sink(type = "output", split = FALSE)
[16:20:15.285]             base::close(...future.stdout)
[16:20:15.285]         }, add = TRUE)
[16:20:15.285]     }
[16:20:15.285]     ...future.frame <- base::sys.nframe()
[16:20:15.285]     ...future.conditions <- base::list()
[16:20:15.285]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:15.285]     if (FALSE) {
[16:20:15.285]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:15.285]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:15.285]     }
[16:20:15.285]     ...future.result <- base::tryCatch({
[16:20:15.285]         base::withCallingHandlers({
[16:20:15.285]             ...future.value <- base::withVisible(base::local({
[16:20:15.285]                 message(sprintf("Calculating tile #%d of %d ...", 
[16:20:15.285]                   ii, n), appendLF = FALSE)
[16:20:15.285]                 fit <- mandelbrot(C)
[16:20:15.285]                 delay(fit)
[16:20:15.285]                 message(" done")
[16:20:15.285]                 fit
[16:20:15.285]             }))
[16:20:15.285]             future::FutureResult(value = ...future.value$value, 
[16:20:15.285]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:15.285]                   ...future.rng), globalenv = if (FALSE) 
[16:20:15.285]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:15.285]                     ...future.globalenv.names))
[16:20:15.285]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:15.285]         }, condition = base::local({
[16:20:15.285]             c <- base::c
[16:20:15.285]             inherits <- base::inherits
[16:20:15.285]             invokeRestart <- base::invokeRestart
[16:20:15.285]             length <- base::length
[16:20:15.285]             list <- base::list
[16:20:15.285]             seq.int <- base::seq.int
[16:20:15.285]             signalCondition <- base::signalCondition
[16:20:15.285]             sys.calls <- base::sys.calls
[16:20:15.285]             `[[` <- base::`[[`
[16:20:15.285]             `+` <- base::`+`
[16:20:15.285]             `<<-` <- base::`<<-`
[16:20:15.285]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:15.285]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:15.285]                   3L)]
[16:20:15.285]             }
[16:20:15.285]             function(cond) {
[16:20:15.285]                 is_error <- inherits(cond, "error")
[16:20:15.285]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:15.285]                   NULL)
[16:20:15.285]                 if (is_error) {
[16:20:15.285]                   sessionInformation <- function() {
[16:20:15.285]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:15.285]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:15.285]                       search = base::search(), system = base::Sys.info())
[16:20:15.285]                   }
[16:20:15.285]                   ...future.conditions[[length(...future.conditions) + 
[16:20:15.285]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:15.285]                     cond$call), session = sessionInformation(), 
[16:20:15.285]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:15.285]                   signalCondition(cond)
[16:20:15.285]                 }
[16:20:15.285]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:15.285]                 "immediateCondition"))) {
[16:20:15.285]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:15.285]                   ...future.conditions[[length(...future.conditions) + 
[16:20:15.285]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:15.285]                   if (TRUE && !signal) {
[16:20:15.285]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:15.285]                     {
[16:20:15.285]                       inherits <- base::inherits
[16:20:15.285]                       invokeRestart <- base::invokeRestart
[16:20:15.285]                       is.null <- base::is.null
[16:20:15.285]                       muffled <- FALSE
[16:20:15.285]                       if (inherits(cond, "message")) {
[16:20:15.285]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:15.285]                         if (muffled) 
[16:20:15.285]                           invokeRestart("muffleMessage")
[16:20:15.285]                       }
[16:20:15.285]                       else if (inherits(cond, "warning")) {
[16:20:15.285]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:15.285]                         if (muffled) 
[16:20:15.285]                           invokeRestart("muffleWarning")
[16:20:15.285]                       }
[16:20:15.285]                       else if (inherits(cond, "condition")) {
[16:20:15.285]                         if (!is.null(pattern)) {
[16:20:15.285]                           computeRestarts <- base::computeRestarts
[16:20:15.285]                           grepl <- base::grepl
[16:20:15.285]                           restarts <- computeRestarts(cond)
[16:20:15.285]                           for (restart in restarts) {
[16:20:15.285]                             name <- restart$name
[16:20:15.285]                             if (is.null(name)) 
[16:20:15.285]                               next
[16:20:15.285]                             if (!grepl(pattern, name)) 
[16:20:15.285]                               next
[16:20:15.285]                             invokeRestart(restart)
[16:20:15.285]                             muffled <- TRUE
[16:20:15.285]                             break
[16:20:15.285]                           }
[16:20:15.285]                         }
[16:20:15.285]                       }
[16:20:15.285]                       invisible(muffled)
[16:20:15.285]                     }
[16:20:15.285]                     muffleCondition(cond, pattern = "^muffle")
[16:20:15.285]                   }
[16:20:15.285]                 }
[16:20:15.285]                 else {
[16:20:15.285]                   if (TRUE) {
[16:20:15.285]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:15.285]                     {
[16:20:15.285]                       inherits <- base::inherits
[16:20:15.285]                       invokeRestart <- base::invokeRestart
[16:20:15.285]                       is.null <- base::is.null
[16:20:15.285]                       muffled <- FALSE
[16:20:15.285]                       if (inherits(cond, "message")) {
[16:20:15.285]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:15.285]                         if (muffled) 
[16:20:15.285]                           invokeRestart("muffleMessage")
[16:20:15.285]                       }
[16:20:15.285]                       else if (inherits(cond, "warning")) {
[16:20:15.285]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:15.285]                         if (muffled) 
[16:20:15.285]                           invokeRestart("muffleWarning")
[16:20:15.285]                       }
[16:20:15.285]                       else if (inherits(cond, "condition")) {
[16:20:15.285]                         if (!is.null(pattern)) {
[16:20:15.285]                           computeRestarts <- base::computeRestarts
[16:20:15.285]                           grepl <- base::grepl
[16:20:15.285]                           restarts <- computeRestarts(cond)
[16:20:15.285]                           for (restart in restarts) {
[16:20:15.285]                             name <- restart$name
[16:20:15.285]                             if (is.null(name)) 
[16:20:15.285]                               next
[16:20:15.285]                             if (!grepl(pattern, name)) 
[16:20:15.285]                               next
[16:20:15.285]                             invokeRestart(restart)
[16:20:15.285]                             muffled <- TRUE
[16:20:15.285]                             break
[16:20:15.285]                           }
[16:20:15.285]                         }
[16:20:15.285]                       }
[16:20:15.285]                       invisible(muffled)
[16:20:15.285]                     }
[16:20:15.285]                     muffleCondition(cond, pattern = "^muffle")
[16:20:15.285]                   }
[16:20:15.285]                 }
[16:20:15.285]             }
[16:20:15.285]         }))
[16:20:15.285]     }, error = function(ex) {
[16:20:15.285]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:15.285]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:15.285]                 ...future.rng), started = ...future.startTime, 
[16:20:15.285]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:15.285]             version = "1.8"), class = "FutureResult")
[16:20:15.285]     }, finally = {
[16:20:15.285]         if (!identical(...future.workdir, getwd())) 
[16:20:15.285]             setwd(...future.workdir)
[16:20:15.285]         {
[16:20:15.285]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:15.285]                 ...future.oldOptions$nwarnings <- NULL
[16:20:15.285]             }
[16:20:15.285]             base::options(...future.oldOptions)
[16:20:15.285]             if (.Platform$OS.type == "windows") {
[16:20:15.285]                 old_names <- names(...future.oldEnvVars)
[16:20:15.285]                 envs <- base::Sys.getenv()
[16:20:15.285]                 names <- names(envs)
[16:20:15.285]                 common <- intersect(names, old_names)
[16:20:15.285]                 added <- setdiff(names, old_names)
[16:20:15.285]                 removed <- setdiff(old_names, names)
[16:20:15.285]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:15.285]                   envs[common]]
[16:20:15.285]                 NAMES <- toupper(changed)
[16:20:15.285]                 args <- list()
[16:20:15.285]                 for (kk in seq_along(NAMES)) {
[16:20:15.285]                   name <- changed[[kk]]
[16:20:15.285]                   NAME <- NAMES[[kk]]
[16:20:15.285]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:15.285]                     next
[16:20:15.285]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:15.285]                 }
[16:20:15.285]                 NAMES <- toupper(added)
[16:20:15.285]                 for (kk in seq_along(NAMES)) {
[16:20:15.285]                   name <- added[[kk]]
[16:20:15.285]                   NAME <- NAMES[[kk]]
[16:20:15.285]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:15.285]                     next
[16:20:15.285]                   args[[name]] <- ""
[16:20:15.285]                 }
[16:20:15.285]                 NAMES <- toupper(removed)
[16:20:15.285]                 for (kk in seq_along(NAMES)) {
[16:20:15.285]                   name <- removed[[kk]]
[16:20:15.285]                   NAME <- NAMES[[kk]]
[16:20:15.285]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:15.285]                     next
[16:20:15.285]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:15.285]                 }
[16:20:15.285]                 if (length(args) > 0) 
[16:20:15.285]                   base::do.call(base::Sys.setenv, args = args)
[16:20:15.285]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:15.285]             }
[16:20:15.285]             else {
[16:20:15.285]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:15.285]             }
[16:20:15.285]             {
[16:20:15.285]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:15.285]                   0L) {
[16:20:15.285]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:15.285]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:15.285]                   base::options(opts)
[16:20:15.285]                 }
[16:20:15.285]                 {
[16:20:15.285]                   {
[16:20:15.285]                     NULL
[16:20:15.285]                     RNGkind("Mersenne-Twister")
[16:20:15.285]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:15.285]                       inherits = FALSE)
[16:20:15.285]                   }
[16:20:15.285]                   options(future.plan = NULL)
[16:20:15.285]                   if (is.na(NA_character_)) 
[16:20:15.285]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:15.285]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:15.285]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:15.285]                     .init = FALSE)
[16:20:15.285]                 }
[16:20:15.285]             }
[16:20:15.285]         }
[16:20:15.285]     })
[16:20:15.285]     if (TRUE) {
[16:20:15.285]         base::sink(type = "output", split = FALSE)
[16:20:15.285]         if (TRUE) {
[16:20:15.285]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:15.285]         }
[16:20:15.285]         else {
[16:20:15.285]             ...future.result["stdout"] <- base::list(NULL)
[16:20:15.285]         }
[16:20:15.285]         base::close(...future.stdout)
[16:20:15.285]         ...future.stdout <- NULL
[16:20:15.285]     }
[16:20:15.285]     ...future.result$conditions <- ...future.conditions
[16:20:15.285]     ...future.result$finished <- base::Sys.time()
[16:20:15.285]     ...future.result
[16:20:15.285] }
[16:20:15.286] assign_globals() ...
[16:20:15.287] List of 4
[16:20:15.287]  $ ii   : int 3
[16:20:15.287]  $ n    : int 4
[16:20:15.287]  $ C    : cplx [1:25, 1:25] -2.25+0.03i -2.25+0.09i -2.25+0.15i ...
[16:20:15.287]   ..- attr(*, "region")=List of 2
[16:20:15.287]   .. ..$ xrange: num [1:2] -2.25 -0.781
[16:20:15.287]   .. ..$ yrange: num [1:2] 0.0306 1.5
[16:20:15.287]   ..- attr(*, "tile")= int [1:2] 2 1
[16:20:15.287]  $ delay:function (counts)  
[16:20:15.287]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[16:20:15.287]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x562a98fd3f00> 
[16:20:15.287]  - attr(*, "where")=List of 4
[16:20:15.287]   ..$ ii   :<environment: R_EmptyEnv> 
[16:20:15.287]   ..$ n    :<environment: R_EmptyEnv> 
[16:20:15.287]   ..$ C    :<environment: R_EmptyEnv> 
[16:20:15.287]   ..$ delay:<environment: R_EmptyEnv> 
[16:20:15.287]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:15.287]  - attr(*, "resolved")= logi FALSE
[16:20:15.287]  - attr(*, "total_size")= num 14584
[16:20:15.287]  - attr(*, "already-done")= logi TRUE
[16:20:15.293] - copied ‘ii’ to environment
[16:20:15.293] - copied ‘n’ to environment
[16:20:15.293] - copied ‘C’ to environment
[16:20:15.293] - reassign environment for ‘delay’
[16:20:15.293] - copied ‘delay’ to environment
[16:20:15.293] assign_globals() ... done
[16:20:15.294] plan(): Setting new future strategy stack:
[16:20:15.294] List of future strategies:
[16:20:15.294] 1. sequential:
[16:20:15.294]    - args: function (..., envir = parent.frame())
[16:20:15.294]    - tweaked: FALSE
[16:20:15.294]    - call: NULL
[16:20:15.294] plan(): nbrOfWorkers() = 1
[16:20:15.311] plan(): Setting new future strategy stack:
[16:20:15.311] List of future strategies:
[16:20:15.311] 1. sequential:
[16:20:15.311]    - args: function (..., envir = parent.frame())
[16:20:15.311]    - tweaked: FALSE
[16:20:15.311]    - call: plan(strategy)
[16:20:15.312] plan(): nbrOfWorkers() = 1
[16:20:15.312] SequentialFuture started (and completed)
[16:20:15.312] signalConditions() ...
[16:20:15.312]  - include = ‘immediateCondition’
[16:20:15.312]  - exclude = 
[16:20:15.312]  - resignal = FALSE
[16:20:15.312]  - Number of conditions: 2
[16:20:15.312] signalConditions() ... done
[16:20:15.313] - Launch lazy future ... done
[16:20:15.313] run() for ‘SequentialFuture’ ... done
[16:20:15.313] - run() ... done
[16:20:15.313] - resolved() ...
[16:20:15.313] resolved() for ‘SequentialFuture’ ...
[16:20:15.313] - state: ‘finished’
[16:20:15.313] - run: TRUE
[16:20:15.313] - result: ‘FutureResult’
[16:20:15.313] resolved() for ‘SequentialFuture’ ... done
[16:20:15.313] - resolved: TRUE
[16:20:15.313] - resolved() ... done
[16:20:15.314] resolved() for ‘SequentialFuture’ ... done
Plotting tile #3 of 4 ...
[16:20:15.314] signalConditions() ...
[16:20:15.314]  - include = ‘immediateCondition’
[16:20:15.314]  - exclude = 
[16:20:15.314]  - resignal = FALSE
[16:20:15.314]  - Number of conditions: 2
[16:20:15.314] signalConditions() ... done
[16:20:15.314] Future state: ‘finished’
[16:20:15.314] signalConditions() ...
[16:20:15.314]  - include = ‘condition’
[16:20:15.315]  - exclude = ‘immediateCondition’
[16:20:15.315]  - resignal = TRUE
[16:20:15.315]  - Number of conditions: 2
[16:20:15.315]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #3 of 4 ...[16:20:15.315]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[16:20:15.315] signalConditions() ... done
[16:20:15.316] resolved() for ‘Future’ ...
[16:20:15.316] - state: ‘created’
[16:20:15.316] - run: TRUE
[16:20:15.316] - run() ...
[16:20:15.316] run() for ‘Future’ ...
[16:20:15.316] - state: ‘created’
[16:20:15.316] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:15.317] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:15.317] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:15.317]   - Field: ‘label’
[16:20:15.317]   - Field: ‘local’
[16:20:15.317]   - Field: ‘owner’
[16:20:15.317]   - Field: ‘envir’
[16:20:15.317]   - Field: ‘packages’
[16:20:15.317]   - Field: ‘gc’
[16:20:15.317]   - Field: ‘conditions’
[16:20:15.318]   - Field: ‘expr’
[16:20:15.318]   - Field: ‘uuid’
[16:20:15.318]   - Field: ‘seed’
[16:20:15.318]   - Field: ‘version’
[16:20:15.318]   - Field: ‘result’
[16:20:15.318]   - Field: ‘asynchronous’
[16:20:15.318]   - Field: ‘calls’
[16:20:15.318]   - Field: ‘globals’
[16:20:15.318]   - Field: ‘stdout’
[16:20:15.318]   - Field: ‘earlySignal’
[16:20:15.319]   - Field: ‘lazy’
[16:20:15.319]   - Field: ‘state’
[16:20:15.319] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:15.319] - Launch lazy future ...
[16:20:15.319] Packages needed by the future expression (n = 1): ‘future’
[16:20:15.319] Packages needed by future strategies (n = 0): <none>
[16:20:15.320] {
[16:20:15.320]     {
[16:20:15.320]         {
[16:20:15.320]             ...future.startTime <- base::Sys.time()
[16:20:15.320]             {
[16:20:15.320]                 {
[16:20:15.320]                   {
[16:20:15.320]                     {
[16:20:15.320]                       base::local({
[16:20:15.320]                         has_future <- base::requireNamespace("future", 
[16:20:15.320]                           quietly = TRUE)
[16:20:15.320]                         if (has_future) {
[16:20:15.320]                           ns <- base::getNamespace("future")
[16:20:15.320]                           version <- ns[[".package"]][["version"]]
[16:20:15.320]                           if (is.null(version)) 
[16:20:15.320]                             version <- utils::packageVersion("future")
[16:20:15.320]                         }
[16:20:15.320]                         else {
[16:20:15.320]                           version <- NULL
[16:20:15.320]                         }
[16:20:15.320]                         if (!has_future || version < "1.8.0") {
[16:20:15.320]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:15.320]                             "", base::R.version$version.string), 
[16:20:15.320]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:15.320]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:15.320]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:15.320]                               "release", "version")], collapse = " "), 
[16:20:15.320]                             hostname = base::Sys.info()[["nodename"]])
[16:20:15.320]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:15.320]                             info)
[16:20:15.320]                           info <- base::paste(info, collapse = "; ")
[16:20:15.320]                           if (!has_future) {
[16:20:15.320]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:15.320]                               info)
[16:20:15.320]                           }
[16:20:15.320]                           else {
[16:20:15.320]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:15.320]                               info, version)
[16:20:15.320]                           }
[16:20:15.320]                           base::stop(msg)
[16:20:15.320]                         }
[16:20:15.320]                       })
[16:20:15.320]                     }
[16:20:15.320]                     base::local({
[16:20:15.320]                       for (pkg in "future") {
[16:20:15.320]                         base::loadNamespace(pkg)
[16:20:15.320]                         base::library(pkg, character.only = TRUE)
[16:20:15.320]                       }
[16:20:15.320]                     })
[16:20:15.320]                   }
[16:20:15.320]                   ...future.strategy.old <- future::plan("list")
[16:20:15.320]                   options(future.plan = NULL)
[16:20:15.320]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:15.320]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:15.320]                 }
[16:20:15.320]                 ...future.workdir <- getwd()
[16:20:15.320]             }
[16:20:15.320]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:15.320]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:15.320]         }
[16:20:15.320]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:15.320]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:15.320]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:15.320]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:15.320]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:15.320]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:15.320]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:15.320]             base::names(...future.oldOptions))
[16:20:15.320]     }
[16:20:15.320]     if (FALSE) {
[16:20:15.320]     }
[16:20:15.320]     else {
[16:20:15.320]         if (TRUE) {
[16:20:15.320]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:15.320]                 open = "w")
[16:20:15.320]         }
[16:20:15.320]         else {
[16:20:15.320]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:15.320]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:15.320]         }
[16:20:15.320]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:15.320]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:15.320]             base::sink(type = "output", split = FALSE)
[16:20:15.320]             base::close(...future.stdout)
[16:20:15.320]         }, add = TRUE)
[16:20:15.320]     }
[16:20:15.320]     ...future.frame <- base::sys.nframe()
[16:20:15.320]     ...future.conditions <- base::list()
[16:20:15.320]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:15.320]     if (FALSE) {
[16:20:15.320]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:15.320]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:15.320]     }
[16:20:15.320]     ...future.result <- base::tryCatch({
[16:20:15.320]         base::withCallingHandlers({
[16:20:15.320]             ...future.value <- base::withVisible(base::local({
[16:20:15.320]                 message(sprintf("Calculating tile #%d of %d ...", 
[16:20:15.320]                   ii, n), appendLF = FALSE)
[16:20:15.320]                 fit <- mandelbrot(C)
[16:20:15.320]                 delay(fit)
[16:20:15.320]                 message(" done")
[16:20:15.320]                 fit
[16:20:15.320]             }))
[16:20:15.320]             future::FutureResult(value = ...future.value$value, 
[16:20:15.320]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:15.320]                   ...future.rng), globalenv = if (FALSE) 
[16:20:15.320]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:15.320]                     ...future.globalenv.names))
[16:20:15.320]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:15.320]         }, condition = base::local({
[16:20:15.320]             c <- base::c
[16:20:15.320]             inherits <- base::inherits
[16:20:15.320]             invokeRestart <- base::invokeRestart
[16:20:15.320]             length <- base::length
[16:20:15.320]             list <- base::list
[16:20:15.320]             seq.int <- base::seq.int
[16:20:15.320]             signalCondition <- base::signalCondition
[16:20:15.320]             sys.calls <- base::sys.calls
[16:20:15.320]             `[[` <- base::`[[`
[16:20:15.320]             `+` <- base::`+`
[16:20:15.320]             `<<-` <- base::`<<-`
[16:20:15.320]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:15.320]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:15.320]                   3L)]
[16:20:15.320]             }
[16:20:15.320]             function(cond) {
[16:20:15.320]                 is_error <- inherits(cond, "error")
[16:20:15.320]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:15.320]                   NULL)
[16:20:15.320]                 if (is_error) {
[16:20:15.320]                   sessionInformation <- function() {
[16:20:15.320]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:15.320]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:15.320]                       search = base::search(), system = base::Sys.info())
[16:20:15.320]                   }
[16:20:15.320]                   ...future.conditions[[length(...future.conditions) + 
[16:20:15.320]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:15.320]                     cond$call), session = sessionInformation(), 
[16:20:15.320]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:15.320]                   signalCondition(cond)
[16:20:15.320]                 }
[16:20:15.320]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:15.320]                 "immediateCondition"))) {
[16:20:15.320]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:15.320]                   ...future.conditions[[length(...future.conditions) + 
[16:20:15.320]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:15.320]                   if (TRUE && !signal) {
[16:20:15.320]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:15.320]                     {
[16:20:15.320]                       inherits <- base::inherits
[16:20:15.320]                       invokeRestart <- base::invokeRestart
[16:20:15.320]                       is.null <- base::is.null
[16:20:15.320]                       muffled <- FALSE
[16:20:15.320]                       if (inherits(cond, "message")) {
[16:20:15.320]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:15.320]                         if (muffled) 
[16:20:15.320]                           invokeRestart("muffleMessage")
[16:20:15.320]                       }
[16:20:15.320]                       else if (inherits(cond, "warning")) {
[16:20:15.320]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:15.320]                         if (muffled) 
[16:20:15.320]                           invokeRestart("muffleWarning")
[16:20:15.320]                       }
[16:20:15.320]                       else if (inherits(cond, "condition")) {
[16:20:15.320]                         if (!is.null(pattern)) {
[16:20:15.320]                           computeRestarts <- base::computeRestarts
[16:20:15.320]                           grepl <- base::grepl
[16:20:15.320]                           restarts <- computeRestarts(cond)
[16:20:15.320]                           for (restart in restarts) {
[16:20:15.320]                             name <- restart$name
[16:20:15.320]                             if (is.null(name)) 
[16:20:15.320]                               next
[16:20:15.320]                             if (!grepl(pattern, name)) 
[16:20:15.320]                               next
[16:20:15.320]                             invokeRestart(restart)
[16:20:15.320]                             muffled <- TRUE
[16:20:15.320]                             break
[16:20:15.320]                           }
[16:20:15.320]                         }
[16:20:15.320]                       }
[16:20:15.320]                       invisible(muffled)
[16:20:15.320]                     }
[16:20:15.320]                     muffleCondition(cond, pattern = "^muffle")
[16:20:15.320]                   }
[16:20:15.320]                 }
[16:20:15.320]                 else {
[16:20:15.320]                   if (TRUE) {
[16:20:15.320]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:15.320]                     {
[16:20:15.320]                       inherits <- base::inherits
[16:20:15.320]                       invokeRestart <- base::invokeRestart
[16:20:15.320]                       is.null <- base::is.null
[16:20:15.320]                       muffled <- FALSE
[16:20:15.320]                       if (inherits(cond, "message")) {
[16:20:15.320]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:15.320]                         if (muffled) 
[16:20:15.320]                           invokeRestart("muffleMessage")
[16:20:15.320]                       }
[16:20:15.320]                       else if (inherits(cond, "warning")) {
[16:20:15.320]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:15.320]                         if (muffled) 
[16:20:15.320]                           invokeRestart("muffleWarning")
[16:20:15.320]                       }
[16:20:15.320]                       else if (inherits(cond, "condition")) {
[16:20:15.320]                         if (!is.null(pattern)) {
[16:20:15.320]                           computeRestarts <- base::computeRestarts
[16:20:15.320]                           grepl <- base::grepl
[16:20:15.320]                           restarts <- computeRestarts(cond)
[16:20:15.320]                           for (restart in restarts) {
[16:20:15.320]                             name <- restart$name
[16:20:15.320]                             if (is.null(name)) 
[16:20:15.320]                               next
[16:20:15.320]                             if (!grepl(pattern, name)) 
[16:20:15.320]                               next
[16:20:15.320]                             invokeRestart(restart)
[16:20:15.320]                             muffled <- TRUE
[16:20:15.320]                             break
[16:20:15.320]                           }
[16:20:15.320]                         }
[16:20:15.320]                       }
[16:20:15.320]                       invisible(muffled)
[16:20:15.320]                     }
[16:20:15.320]                     muffleCondition(cond, pattern = "^muffle")
[16:20:15.320]                   }
[16:20:15.320]                 }
[16:20:15.320]             }
[16:20:15.320]         }))
[16:20:15.320]     }, error = function(ex) {
[16:20:15.320]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:15.320]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:15.320]                 ...future.rng), started = ...future.startTime, 
[16:20:15.320]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:15.320]             version = "1.8"), class = "FutureResult")
[16:20:15.320]     }, finally = {
[16:20:15.320]         if (!identical(...future.workdir, getwd())) 
[16:20:15.320]             setwd(...future.workdir)
[16:20:15.320]         {
[16:20:15.320]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:15.320]                 ...future.oldOptions$nwarnings <- NULL
[16:20:15.320]             }
[16:20:15.320]             base::options(...future.oldOptions)
[16:20:15.320]             if (.Platform$OS.type == "windows") {
[16:20:15.320]                 old_names <- names(...future.oldEnvVars)
[16:20:15.320]                 envs <- base::Sys.getenv()
[16:20:15.320]                 names <- names(envs)
[16:20:15.320]                 common <- intersect(names, old_names)
[16:20:15.320]                 added <- setdiff(names, old_names)
[16:20:15.320]                 removed <- setdiff(old_names, names)
[16:20:15.320]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:15.320]                   envs[common]]
[16:20:15.320]                 NAMES <- toupper(changed)
[16:20:15.320]                 args <- list()
[16:20:15.320]                 for (kk in seq_along(NAMES)) {
[16:20:15.320]                   name <- changed[[kk]]
[16:20:15.320]                   NAME <- NAMES[[kk]]
[16:20:15.320]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:15.320]                     next
[16:20:15.320]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:15.320]                 }
[16:20:15.320]                 NAMES <- toupper(added)
[16:20:15.320]                 for (kk in seq_along(NAMES)) {
[16:20:15.320]                   name <- added[[kk]]
[16:20:15.320]                   NAME <- NAMES[[kk]]
[16:20:15.320]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:15.320]                     next
[16:20:15.320]                   args[[name]] <- ""
[16:20:15.320]                 }
[16:20:15.320]                 NAMES <- toupper(removed)
[16:20:15.320]                 for (kk in seq_along(NAMES)) {
[16:20:15.320]                   name <- removed[[kk]]
[16:20:15.320]                   NAME <- NAMES[[kk]]
[16:20:15.320]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:15.320]                     next
[16:20:15.320]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:15.320]                 }
[16:20:15.320]                 if (length(args) > 0) 
[16:20:15.320]                   base::do.call(base::Sys.setenv, args = args)
[16:20:15.320]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:15.320]             }
[16:20:15.320]             else {
[16:20:15.320]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:15.320]             }
[16:20:15.320]             {
[16:20:15.320]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:15.320]                   0L) {
[16:20:15.320]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:15.320]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:15.320]                   base::options(opts)
[16:20:15.320]                 }
[16:20:15.320]                 {
[16:20:15.320]                   {
[16:20:15.320]                     NULL
[16:20:15.320]                     RNGkind("Mersenne-Twister")
[16:20:15.320]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:15.320]                       inherits = FALSE)
[16:20:15.320]                   }
[16:20:15.320]                   options(future.plan = NULL)
[16:20:15.320]                   if (is.na(NA_character_)) 
[16:20:15.320]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:15.320]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:15.320]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:15.320]                     .init = FALSE)
[16:20:15.320]                 }
[16:20:15.320]             }
[16:20:15.320]         }
[16:20:15.320]     })
[16:20:15.320]     if (TRUE) {
[16:20:15.320]         base::sink(type = "output", split = FALSE)
[16:20:15.320]         if (TRUE) {
[16:20:15.320]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:15.320]         }
[16:20:15.320]         else {
[16:20:15.320]             ...future.result["stdout"] <- base::list(NULL)
[16:20:15.320]         }
[16:20:15.320]         base::close(...future.stdout)
[16:20:15.320]         ...future.stdout <- NULL
[16:20:15.320]     }
[16:20:15.320]     ...future.result$conditions <- ...future.conditions
[16:20:15.320]     ...future.result$finished <- base::Sys.time()
[16:20:15.320]     ...future.result
[16:20:15.320] }
[16:20:15.321] assign_globals() ...
[16:20:15.322] List of 4
[16:20:15.322]  $ ii   : int 4
[16:20:15.322]  $ n    : int 4
[16:20:15.322]  $ C    : cplx [1:25, 1:25] -0.719+0.031i -0.719+0.092i -0.719+0.153i ...
[16:20:15.322]   ..- attr(*, "region")=List of 2
[16:20:15.322]   .. ..$ xrange: num [1:2] -0.719 0.75
[16:20:15.322]   .. ..$ yrange: num [1:2] 0.0306 1.5
[16:20:15.322]   ..- attr(*, "tile")= int [1:2] 2 2
[16:20:15.322]  $ delay:function (counts)  
[16:20:15.322]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[16:20:15.322]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x562a98fd3f00> 
[16:20:15.322]  - attr(*, "where")=List of 4
[16:20:15.322]   ..$ ii   :<environment: R_EmptyEnv> 
[16:20:15.322]   ..$ n    :<environment: R_EmptyEnv> 
[16:20:15.322]   ..$ C    :<environment: R_EmptyEnv> 
[16:20:15.322]   ..$ delay:<environment: R_EmptyEnv> 
[16:20:15.322]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:15.322]  - attr(*, "resolved")= logi FALSE
[16:20:15.322]  - attr(*, "total_size")= num 14584
[16:20:15.322]  - attr(*, "already-done")= logi TRUE
[16:20:15.328] - copied ‘ii’ to environment
[16:20:15.328] - copied ‘n’ to environment
[16:20:15.328] - copied ‘C’ to environment
[16:20:15.328] - reassign environment for ‘delay’
[16:20:15.328] - copied ‘delay’ to environment
[16:20:15.328] assign_globals() ... done
[16:20:15.328] plan(): Setting new future strategy stack:
[16:20:15.329] List of future strategies:
[16:20:15.329] 1. sequential:
[16:20:15.329]    - args: function (..., envir = parent.frame())
[16:20:15.329]    - tweaked: FALSE
[16:20:15.329]    - call: NULL
[16:20:15.329] plan(): nbrOfWorkers() = 1
[16:20:15.343] plan(): Setting new future strategy stack:
[16:20:15.344] List of future strategies:
[16:20:15.344] 1. sequential:
[16:20:15.344]    - args: function (..., envir = parent.frame())
[16:20:15.344]    - tweaked: FALSE
[16:20:15.344]    - call: plan(strategy)
[16:20:15.344] plan(): nbrOfWorkers() = 1
[16:20:15.344] SequentialFuture started (and completed)
[16:20:15.344] signalConditions() ...
[16:20:15.344]  - include = ‘immediateCondition’
[16:20:15.344]  - exclude = 
[16:20:15.345]  - resignal = FALSE
[16:20:15.345]  - Number of conditions: 2
[16:20:15.345] signalConditions() ... done
[16:20:15.345] - Launch lazy future ... done
[16:20:15.345] run() for ‘SequentialFuture’ ... done
[16:20:15.345] - run() ... done
[16:20:15.345] - resolved() ...
[16:20:15.345] resolved() for ‘SequentialFuture’ ...
[16:20:15.345] - state: ‘finished’
[16:20:15.345] - run: TRUE
[16:20:15.346] - result: ‘FutureResult’
[16:20:15.346] resolved() for ‘SequentialFuture’ ... done
[16:20:15.346] - resolved: TRUE
[16:20:15.346] - resolved() ... done
[16:20:15.346] resolved() for ‘SequentialFuture’ ... done
Plotting tile #4 of 4 ...
[16:20:15.346] signalConditions() ...
[16:20:15.346]  - include = ‘immediateCondition’
[16:20:15.346]  - exclude = 
[16:20:15.346]  - resignal = FALSE
[16:20:15.346]  - Number of conditions: 2
[16:20:15.347] signalConditions() ... done
[16:20:15.347] Future state: ‘finished’
[16:20:15.347] signalConditions() ...
[16:20:15.347]  - include = ‘condition’
[16:20:15.347]  - exclude = ‘immediateCondition’
[16:20:15.347]  - resignal = TRUE
[16:20:15.347]  - Number of conditions: 2
[16:20:15.347]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #4 of 4 ...[16:20:15.347]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[16:20:15.347] signalConditions() ... done

> close.screen()
[1] 1 2 3 4

> message("SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).\n")
SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).

- plan('sequential') ... DONE
Testing with 1 cores ... DONE
Testing with 2 cores ...
- plan('multicore') ...
[16:20:15.354] plan(): Setting new future strategy stack:
[16:20:15.354] List of future strategies:
[16:20:15.354] 1. multicore:
[16:20:15.354]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:20:15.354]    - tweaked: FALSE
[16:20:15.354]    - call: plan(strategy)
[16:20:15.358] plan(): nbrOfWorkers() = 2


	demo(mandelbrot)
	---- ~~~~~~~~~~

> library("future")

> library("graphics")

> plot_what_is_done <- function(counts) {
+   for (kk in seq_along(counts)) {
+     f <- counts[[kk]]
+ 
+     ## Already plotted?
+     if (!inherits(f, "Future")) next
+ 
+     ## Not resolved?
+     if (!resolved(f)) next
+ 
+     message(sprintf("Plotting tile #%d of %d ...", kk, n))
+     counts[[kk]] <- value(f)
+     screen(kk)
+     plot(counts[[kk]])
+   }
+ 
+   counts
+ }

> ## Options
> region <- getOption("future.demo.mandelbrot.region", 1L)

> if (!is.list(region)) {
+   if (region == 1L) {
+     region <- list(xmid = -0.75, ymid = 0.0, side = 3.0)
+   } else if (region == 2L) {
+     region <- list(xmid = 0.283, ymid = -0.0095, side = 0.00026)
+   } else if (region == 3L) {
+     region <- list(xmid = 0.282989, ymid = -0.01, side = 3e-8)
+   }
+ }

> nrow <- getOption("future.demo.mandelbrot.nrow", 3L)

> resolution <- getOption("future.demo.mandelbrot.resolution", 400L)

> delay <- getOption("future.demo.mandelbrot.delay", interactive())

> if (isTRUE(delay)) {
+   delay <- function(counts) Sys.sleep(1.0)
+ } else if (!is.function(delay)) {
+   delay <- function(counts) {}
+ }

> ## Generate Mandelbrot tiles to be computed
> Cs <- mandelbrot_tiles(xmid = region$xmid, ymid = region$ymid,
+                        side = region$side, nrow = nrow,
+                        resolution = resolution)

> if (interactive()) {
+   dev.new()
+   plot.new()
+   split.screen(dim(Cs))
+   for (ii in seq_along(Cs)) {
+     screen(ii)
+     par(mar = c(0, 0, 0, 0))
+     text(x = 1 / 2, y = 1 / 2, sprintf("Future #%d\nunresolved", ii), cex = 2)
+   }
+ } else {
+   split.screen(dim(Cs))
+ }
[1] 5 6 7 8

> ## Create all Mandelbrot tiles via lazy futures
> n <- length(Cs)

> message(sprintf("Creating %d Mandelbrot tiles:", n), appendLF = FALSE)
Creating 4 Mandelbrot tiles:
> counts <- lapply(seq_along(Cs), FUN=function(ii) {
+   message(" ", ii, appendLF = FALSE)
+   C <- Cs[[ii]]
+   future({
+     message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
+     fit <- mandelbrot(C)
+ 
+     ## Emulate slowness
+     delay(fit)
+ 
+     message(" done")
+     fit
+   }, lazy = TRUE)
+ })
 1[16:20:15.362] getGlobalsAndPackages() ...
[16:20:15.362] Searching for globals...
[16:20:15.368] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[16:20:15.368] Searching for globals ... DONE
[16:20:15.368] Resolving globals: FALSE
[16:20:15.369] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[16:20:15.369] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[16:20:15.370] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[16:20:15.370] - packages: [1] ‘future’
[16:20:15.370] getGlobalsAndPackages() ... DONE
 2[16:20:15.374] getGlobalsAndPackages() ...
[16:20:15.374] Searching for globals...
[16:20:15.377] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[16:20:15.377] Searching for globals ... DONE
[16:20:15.377] Resolving globals: FALSE
[16:20:15.378] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[16:20:15.378] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[16:20:15.378] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[16:20:15.379] - packages: [1] ‘future’
[16:20:15.379] getGlobalsAndPackages() ... DONE
 3[16:20:15.379] getGlobalsAndPackages() ...
[16:20:15.379] Searching for globals...
[16:20:15.382] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[16:20:15.383] Searching for globals ... DONE
[16:20:15.383] Resolving globals: FALSE
[16:20:15.383] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[16:20:15.384] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[16:20:15.384] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[16:20:15.384] - packages: [1] ‘future’
[16:20:15.384] getGlobalsAndPackages() ... DONE
 4[16:20:15.384] getGlobalsAndPackages() ...
[16:20:15.385] Searching for globals...
[16:20:15.388] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[16:20:15.388] Searching for globals ... DONE
[16:20:15.388] Resolving globals: FALSE
[16:20:15.389] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[16:20:15.389] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[16:20:15.389] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[16:20:15.389] - packages: [1] ‘future’
[16:20:15.389] getGlobalsAndPackages() ... DONE

> message(".")
.

> ## Calculate and plot tiles
> repeat {
+   counts <- plot_what_is_done(counts)
+   if (!any(sapply(counts, FUN = inherits, "Future"))) break
+ }
[16:20:15.398] resolved() for ‘Future’ ...
[16:20:15.399] - state: ‘created’
[16:20:15.399] - run: TRUE
[16:20:15.399] - run() ...
[16:20:15.399] run() for ‘Future’ ...
[16:20:15.399] - state: ‘created’
[16:20:15.399] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:20:15.403] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:15.403] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:20:15.403]   - Field: ‘label’
[16:20:15.403]   - Field: ‘local’
[16:20:15.404]   - Field: ‘owner’
[16:20:15.404]   - Field: ‘envir’
[16:20:15.404]   - Field: ‘workers’
[16:20:15.404]   - Field: ‘packages’
[16:20:15.404]   - Field: ‘gc’
[16:20:15.404]   - Field: ‘job’
[16:20:15.404]   - Field: ‘conditions’
[16:20:15.404]   - Field: ‘expr’
[16:20:15.404]   - Field: ‘uuid’
[16:20:15.404]   - Field: ‘seed’
[16:20:15.405]   - Field: ‘version’
[16:20:15.405]   - Field: ‘result’
[16:20:15.405]   - Field: ‘asynchronous’
[16:20:15.405]   - Field: ‘calls’
[16:20:15.405]   - Field: ‘globals’
[16:20:15.405]   - Field: ‘stdout’
[16:20:15.405]   - Field: ‘earlySignal’
[16:20:15.405]   - Field: ‘lazy’
[16:20:15.405]   - Field: ‘state’
[16:20:15.405] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:20:15.406] - Launch lazy future ...
[16:20:15.407] Packages needed by the future expression (n = 1): ‘future’
[16:20:15.407] Packages needed by future strategies (n = 0): <none>
[16:20:15.407] {
[16:20:15.407]     {
[16:20:15.407]         {
[16:20:15.407]             ...future.startTime <- base::Sys.time()
[16:20:15.407]             {
[16:20:15.407]                 {
[16:20:15.407]                   {
[16:20:15.407]                     {
[16:20:15.407]                       {
[16:20:15.407]                         base::local({
[16:20:15.407]                           has_future <- base::requireNamespace("future", 
[16:20:15.407]                             quietly = TRUE)
[16:20:15.407]                           if (has_future) {
[16:20:15.407]                             ns <- base::getNamespace("future")
[16:20:15.407]                             version <- ns[[".package"]][["version"]]
[16:20:15.407]                             if (is.null(version)) 
[16:20:15.407]                               version <- utils::packageVersion("future")
[16:20:15.407]                           }
[16:20:15.407]                           else {
[16:20:15.407]                             version <- NULL
[16:20:15.407]                           }
[16:20:15.407]                           if (!has_future || version < "1.8.0") {
[16:20:15.407]                             info <- base::c(r_version = base::gsub("R version ", 
[16:20:15.407]                               "", base::R.version$version.string), 
[16:20:15.407]                               platform = base::sprintf("%s (%s-bit)", 
[16:20:15.407]                                 base::R.version$platform, 8 * 
[16:20:15.407]                                   base::.Machine$sizeof.pointer), 
[16:20:15.407]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:15.407]                                 "release", "version")], collapse = " "), 
[16:20:15.407]                               hostname = base::Sys.info()[["nodename"]])
[16:20:15.407]                             info <- base::sprintf("%s: %s", base::names(info), 
[16:20:15.407]                               info)
[16:20:15.407]                             info <- base::paste(info, collapse = "; ")
[16:20:15.407]                             if (!has_future) {
[16:20:15.407]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:15.407]                                 info)
[16:20:15.407]                             }
[16:20:15.407]                             else {
[16:20:15.407]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:15.407]                                 info, version)
[16:20:15.407]                             }
[16:20:15.407]                             base::stop(msg)
[16:20:15.407]                           }
[16:20:15.407]                         })
[16:20:15.407]                       }
[16:20:15.407]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:15.407]                       base::options(mc.cores = 1L)
[16:20:15.407]                     }
[16:20:15.407]                     base::local({
[16:20:15.407]                       for (pkg in "future") {
[16:20:15.407]                         base::loadNamespace(pkg)
[16:20:15.407]                         base::library(pkg, character.only = TRUE)
[16:20:15.407]                       }
[16:20:15.407]                     })
[16:20:15.407]                   }
[16:20:15.407]                   ...future.strategy.old <- future::plan("list")
[16:20:15.407]                   options(future.plan = NULL)
[16:20:15.407]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:15.407]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:15.407]                 }
[16:20:15.407]                 ...future.workdir <- getwd()
[16:20:15.407]             }
[16:20:15.407]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:15.407]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:15.407]         }
[16:20:15.407]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:15.407]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:15.407]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:15.407]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:15.407]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:15.407]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:15.407]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:15.407]             base::names(...future.oldOptions))
[16:20:15.407]     }
[16:20:15.407]     if (FALSE) {
[16:20:15.407]     }
[16:20:15.407]     else {
[16:20:15.407]         if (TRUE) {
[16:20:15.407]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:15.407]                 open = "w")
[16:20:15.407]         }
[16:20:15.407]         else {
[16:20:15.407]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:15.407]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:15.407]         }
[16:20:15.407]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:15.407]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:15.407]             base::sink(type = "output", split = FALSE)
[16:20:15.407]             base::close(...future.stdout)
[16:20:15.407]         }, add = TRUE)
[16:20:15.407]     }
[16:20:15.407]     ...future.frame <- base::sys.nframe()
[16:20:15.407]     ...future.conditions <- base::list()
[16:20:15.407]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:15.407]     if (FALSE) {
[16:20:15.407]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:15.407]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:15.407]     }
[16:20:15.407]     ...future.result <- base::tryCatch({
[16:20:15.407]         base::withCallingHandlers({
[16:20:15.407]             ...future.value <- base::withVisible(base::local({
[16:20:15.407]                 withCallingHandlers({
[16:20:15.407]                   {
[16:20:15.407]                     message(sprintf("Calculating tile #%d of %d ...", 
[16:20:15.407]                       ii, n), appendLF = FALSE)
[16:20:15.407]                     fit <- mandelbrot(C)
[16:20:15.407]                     delay(fit)
[16:20:15.407]                     message(" done")
[16:20:15.407]                     fit
[16:20:15.407]                   }
[16:20:15.407]                 }, immediateCondition = function(cond) {
[16:20:15.407]                   save_rds <- function (object, pathname, ...) 
[16:20:15.407]                   {
[16:20:15.407]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:20:15.407]                     if (file_test("-f", pathname_tmp)) {
[16:20:15.407]                       fi_tmp <- file.info(pathname_tmp)
[16:20:15.407]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:20:15.407]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:15.407]                         fi_tmp[["mtime"]])
[16:20:15.407]                     }
[16:20:15.407]                     tryCatch({
[16:20:15.407]                       saveRDS(object, file = pathname_tmp, ...)
[16:20:15.407]                     }, error = function(ex) {
[16:20:15.407]                       msg <- conditionMessage(ex)
[16:20:15.407]                       fi_tmp <- file.info(pathname_tmp)
[16:20:15.407]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:20:15.407]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:15.407]                         fi_tmp[["mtime"]], msg)
[16:20:15.407]                       ex$message <- msg
[16:20:15.407]                       stop(ex)
[16:20:15.407]                     })
[16:20:15.407]                     stopifnot(file_test("-f", pathname_tmp))
[16:20:15.407]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:20:15.407]                     if (!res || file_test("-f", pathname_tmp)) {
[16:20:15.407]                       fi_tmp <- file.info(pathname_tmp)
[16:20:15.407]                       fi <- file.info(pathname)
[16:20:15.407]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:20:15.407]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:15.407]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:20:15.407]                         fi[["size"]], fi[["mtime"]])
[16:20:15.407]                       stop(msg)
[16:20:15.407]                     }
[16:20:15.407]                     invisible(pathname)
[16:20:15.407]                   }
[16:20:15.407]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:20:15.407]                     rootPath = tempdir()) 
[16:20:15.407]                   {
[16:20:15.407]                     obj <- list(time = Sys.time(), condition = cond)
[16:20:15.407]                     file <- tempfile(pattern = class(cond)[1], 
[16:20:15.407]                       tmpdir = path, fileext = ".rds")
[16:20:15.407]                     save_rds(obj, file)
[16:20:15.407]                   }
[16:20:15.407]                   saveImmediateCondition(cond, path = "/tmp/RtmpgmRZud/.future/immediateConditions")
[16:20:15.407]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:15.407]                   {
[16:20:15.407]                     inherits <- base::inherits
[16:20:15.407]                     invokeRestart <- base::invokeRestart
[16:20:15.407]                     is.null <- base::is.null
[16:20:15.407]                     muffled <- FALSE
[16:20:15.407]                     if (inherits(cond, "message")) {
[16:20:15.407]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:15.407]                       if (muffled) 
[16:20:15.407]                         invokeRestart("muffleMessage")
[16:20:15.407]                     }
[16:20:15.407]                     else if (inherits(cond, "warning")) {
[16:20:15.407]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:15.407]                       if (muffled) 
[16:20:15.407]                         invokeRestart("muffleWarning")
[16:20:15.407]                     }
[16:20:15.407]                     else if (inherits(cond, "condition")) {
[16:20:15.407]                       if (!is.null(pattern)) {
[16:20:15.407]                         computeRestarts <- base::computeRestarts
[16:20:15.407]                         grepl <- base::grepl
[16:20:15.407]                         restarts <- computeRestarts(cond)
[16:20:15.407]                         for (restart in restarts) {
[16:20:15.407]                           name <- restart$name
[16:20:15.407]                           if (is.null(name)) 
[16:20:15.407]                             next
[16:20:15.407]                           if (!grepl(pattern, name)) 
[16:20:15.407]                             next
[16:20:15.407]                           invokeRestart(restart)
[16:20:15.407]                           muffled <- TRUE
[16:20:15.407]                           break
[16:20:15.407]                         }
[16:20:15.407]                       }
[16:20:15.407]                     }
[16:20:15.407]                     invisible(muffled)
[16:20:15.407]                   }
[16:20:15.407]                   muffleCondition(cond)
[16:20:15.407]                 })
[16:20:15.407]             }))
[16:20:15.407]             future::FutureResult(value = ...future.value$value, 
[16:20:15.407]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:15.407]                   ...future.rng), globalenv = if (FALSE) 
[16:20:15.407]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:15.407]                     ...future.globalenv.names))
[16:20:15.407]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:15.407]         }, condition = base::local({
[16:20:15.407]             c <- base::c
[16:20:15.407]             inherits <- base::inherits
[16:20:15.407]             invokeRestart <- base::invokeRestart
[16:20:15.407]             length <- base::length
[16:20:15.407]             list <- base::list
[16:20:15.407]             seq.int <- base::seq.int
[16:20:15.407]             signalCondition <- base::signalCondition
[16:20:15.407]             sys.calls <- base::sys.calls
[16:20:15.407]             `[[` <- base::`[[`
[16:20:15.407]             `+` <- base::`+`
[16:20:15.407]             `<<-` <- base::`<<-`
[16:20:15.407]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:15.407]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:15.407]                   3L)]
[16:20:15.407]             }
[16:20:15.407]             function(cond) {
[16:20:15.407]                 is_error <- inherits(cond, "error")
[16:20:15.407]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:15.407]                   NULL)
[16:20:15.407]                 if (is_error) {
[16:20:15.407]                   sessionInformation <- function() {
[16:20:15.407]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:15.407]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:15.407]                       search = base::search(), system = base::Sys.info())
[16:20:15.407]                   }
[16:20:15.407]                   ...future.conditions[[length(...future.conditions) + 
[16:20:15.407]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:15.407]                     cond$call), session = sessionInformation(), 
[16:20:15.407]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:15.407]                   signalCondition(cond)
[16:20:15.407]                 }
[16:20:15.407]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:15.407]                 "immediateCondition"))) {
[16:20:15.407]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:15.407]                   ...future.conditions[[length(...future.conditions) + 
[16:20:15.407]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:15.407]                   if (TRUE && !signal) {
[16:20:15.407]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:15.407]                     {
[16:20:15.407]                       inherits <- base::inherits
[16:20:15.407]                       invokeRestart <- base::invokeRestart
[16:20:15.407]                       is.null <- base::is.null
[16:20:15.407]                       muffled <- FALSE
[16:20:15.407]                       if (inherits(cond, "message")) {
[16:20:15.407]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:15.407]                         if (muffled) 
[16:20:15.407]                           invokeRestart("muffleMessage")
[16:20:15.407]                       }
[16:20:15.407]                       else if (inherits(cond, "warning")) {
[16:20:15.407]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:15.407]                         if (muffled) 
[16:20:15.407]                           invokeRestart("muffleWarning")
[16:20:15.407]                       }
[16:20:15.407]                       else if (inherits(cond, "condition")) {
[16:20:15.407]                         if (!is.null(pattern)) {
[16:20:15.407]                           computeRestarts <- base::computeRestarts
[16:20:15.407]                           grepl <- base::grepl
[16:20:15.407]                           restarts <- computeRestarts(cond)
[16:20:15.407]                           for (restart in restarts) {
[16:20:15.407]                             name <- restart$name
[16:20:15.407]                             if (is.null(name)) 
[16:20:15.407]                               next
[16:20:15.407]                             if (!grepl(pattern, name)) 
[16:20:15.407]                               next
[16:20:15.407]                             invokeRestart(restart)
[16:20:15.407]                             muffled <- TRUE
[16:20:15.407]                             break
[16:20:15.407]                           }
[16:20:15.407]                         }
[16:20:15.407]                       }
[16:20:15.407]                       invisible(muffled)
[16:20:15.407]                     }
[16:20:15.407]                     muffleCondition(cond, pattern = "^muffle")
[16:20:15.407]                   }
[16:20:15.407]                 }
[16:20:15.407]                 else {
[16:20:15.407]                   if (TRUE) {
[16:20:15.407]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:15.407]                     {
[16:20:15.407]                       inherits <- base::inherits
[16:20:15.407]                       invokeRestart <- base::invokeRestart
[16:20:15.407]                       is.null <- base::is.null
[16:20:15.407]                       muffled <- FALSE
[16:20:15.407]                       if (inherits(cond, "message")) {
[16:20:15.407]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:15.407]                         if (muffled) 
[16:20:15.407]                           invokeRestart("muffleMessage")
[16:20:15.407]                       }
[16:20:15.407]                       else if (inherits(cond, "warning")) {
[16:20:15.407]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:15.407]                         if (muffled) 
[16:20:15.407]                           invokeRestart("muffleWarning")
[16:20:15.407]                       }
[16:20:15.407]                       else if (inherits(cond, "condition")) {
[16:20:15.407]                         if (!is.null(pattern)) {
[16:20:15.407]                           computeRestarts <- base::computeRestarts
[16:20:15.407]                           grepl <- base::grepl
[16:20:15.407]                           restarts <- computeRestarts(cond)
[16:20:15.407]                           for (restart in restarts) {
[16:20:15.407]                             name <- restart$name
[16:20:15.407]                             if (is.null(name)) 
[16:20:15.407]                               next
[16:20:15.407]                             if (!grepl(pattern, name)) 
[16:20:15.407]                               next
[16:20:15.407]                             invokeRestart(restart)
[16:20:15.407]                             muffled <- TRUE
[16:20:15.407]                             break
[16:20:15.407]                           }
[16:20:15.407]                         }
[16:20:15.407]                       }
[16:20:15.407]                       invisible(muffled)
[16:20:15.407]                     }
[16:20:15.407]                     muffleCondition(cond, pattern = "^muffle")
[16:20:15.407]                   }
[16:20:15.407]                 }
[16:20:15.407]             }
[16:20:15.407]         }))
[16:20:15.407]     }, error = function(ex) {
[16:20:15.407]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:15.407]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:15.407]                 ...future.rng), started = ...future.startTime, 
[16:20:15.407]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:15.407]             version = "1.8"), class = "FutureResult")
[16:20:15.407]     }, finally = {
[16:20:15.407]         if (!identical(...future.workdir, getwd())) 
[16:20:15.407]             setwd(...future.workdir)
[16:20:15.407]         {
[16:20:15.407]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:15.407]                 ...future.oldOptions$nwarnings <- NULL
[16:20:15.407]             }
[16:20:15.407]             base::options(...future.oldOptions)
[16:20:15.407]             if (.Platform$OS.type == "windows") {
[16:20:15.407]                 old_names <- names(...future.oldEnvVars)
[16:20:15.407]                 envs <- base::Sys.getenv()
[16:20:15.407]                 names <- names(envs)
[16:20:15.407]                 common <- intersect(names, old_names)
[16:20:15.407]                 added <- setdiff(names, old_names)
[16:20:15.407]                 removed <- setdiff(old_names, names)
[16:20:15.407]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:15.407]                   envs[common]]
[16:20:15.407]                 NAMES <- toupper(changed)
[16:20:15.407]                 args <- list()
[16:20:15.407]                 for (kk in seq_along(NAMES)) {
[16:20:15.407]                   name <- changed[[kk]]
[16:20:15.407]                   NAME <- NAMES[[kk]]
[16:20:15.407]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:15.407]                     next
[16:20:15.407]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:15.407]                 }
[16:20:15.407]                 NAMES <- toupper(added)
[16:20:15.407]                 for (kk in seq_along(NAMES)) {
[16:20:15.407]                   name <- added[[kk]]
[16:20:15.407]                   NAME <- NAMES[[kk]]
[16:20:15.407]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:15.407]                     next
[16:20:15.407]                   args[[name]] <- ""
[16:20:15.407]                 }
[16:20:15.407]                 NAMES <- toupper(removed)
[16:20:15.407]                 for (kk in seq_along(NAMES)) {
[16:20:15.407]                   name <- removed[[kk]]
[16:20:15.407]                   NAME <- NAMES[[kk]]
[16:20:15.407]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:15.407]                     next
[16:20:15.407]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:15.407]                 }
[16:20:15.407]                 if (length(args) > 0) 
[16:20:15.407]                   base::do.call(base::Sys.setenv, args = args)
[16:20:15.407]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:15.407]             }
[16:20:15.407]             else {
[16:20:15.407]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:15.407]             }
[16:20:15.407]             {
[16:20:15.407]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:15.407]                   0L) {
[16:20:15.407]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:15.407]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:15.407]                   base::options(opts)
[16:20:15.407]                 }
[16:20:15.407]                 {
[16:20:15.407]                   {
[16:20:15.407]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:15.407]                     NULL
[16:20:15.407]                   }
[16:20:15.407]                   options(future.plan = NULL)
[16:20:15.407]                   if (is.na(NA_character_)) 
[16:20:15.407]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:15.407]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:15.407]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:15.407]                     .init = FALSE)
[16:20:15.407]                 }
[16:20:15.407]             }
[16:20:15.407]         }
[16:20:15.407]     })
[16:20:15.407]     if (TRUE) {
[16:20:15.407]         base::sink(type = "output", split = FALSE)
[16:20:15.407]         if (TRUE) {
[16:20:15.407]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:15.407]         }
[16:20:15.407]         else {
[16:20:15.407]             ...future.result["stdout"] <- base::list(NULL)
[16:20:15.407]         }
[16:20:15.407]         base::close(...future.stdout)
[16:20:15.407]         ...future.stdout <- NULL
[16:20:15.407]     }
[16:20:15.407]     ...future.result$conditions <- ...future.conditions
[16:20:15.407]     ...future.result$finished <- base::Sys.time()
[16:20:15.407]     ...future.result
[16:20:15.407] }
[16:20:15.410] assign_globals() ...
[16:20:15.410] List of 4
[16:20:15.410]  $ ii   : int 1
[16:20:15.410]  $ n    : int 4
[16:20:15.410]  $ C    : cplx [1:25, 1:25] -2.25-1.5i -2.25-1.44i -2.25-1.38i ...
[16:20:15.410]   ..- attr(*, "region")=List of 2
[16:20:15.410]   .. ..$ xrange: num [1:2] -2.25 -0.781
[16:20:15.410]   .. ..$ yrange: num [1:2] -1.5 -0.0306
[16:20:15.410]   ..- attr(*, "tile")= int [1:2] 1 1
[16:20:15.410]  $ delay:function (counts)  
[16:20:15.410]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[16:20:15.410]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x562a990cc090> 
[16:20:15.410]  - attr(*, "where")=List of 4
[16:20:15.410]   ..$ ii   :<environment: R_EmptyEnv> 
[16:20:15.410]   ..$ n    :<environment: R_EmptyEnv> 
[16:20:15.410]   ..$ C    :<environment: R_EmptyEnv> 
[16:20:15.410]   ..$ delay:<environment: R_EmptyEnv> 
[16:20:15.410]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:15.410]  - attr(*, "resolved")= logi FALSE
[16:20:15.410]  - attr(*, "total_size")= num 14584
[16:20:15.410]  - attr(*, "already-done")= logi TRUE
[16:20:15.416] - copied ‘ii’ to environment
[16:20:15.416] - copied ‘n’ to environment
[16:20:15.416] - copied ‘C’ to environment
[16:20:15.417] - reassign environment for ‘delay’
[16:20:15.417] - copied ‘delay’ to environment
[16:20:15.417] assign_globals() ... done
[16:20:15.417] requestCore(): workers = 2
[16:20:15.420] MulticoreFuture started
[16:20:15.421] - Launch lazy future ... done
[16:20:15.421] run() for ‘MulticoreFuture’ ... done
[16:20:15.421] - run() ... done
[16:20:15.421] - resolved() ...
[16:20:15.421] plan(): Setting new future strategy stack:
[16:20:15.422] List of future strategies:
[16:20:15.422] 1. sequential:
[16:20:15.422]    - args: function (..., envir = parent.frame())
[16:20:15.422]    - tweaked: FALSE
[16:20:15.422]    - call: NULL
[16:20:15.423] plan(): nbrOfWorkers() = 1
[16:20:15.426] plan(): Setting new future strategy stack:
[16:20:15.426] List of future strategies:
[16:20:15.426] 1. multicore:
[16:20:15.426]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:20:15.426]    - tweaked: FALSE
[16:20:15.426]    - call: plan(strategy)
[16:20:15.432] plan(): nbrOfWorkers() = 2
[16:20:15.434] - resolved: TRUE
[16:20:15.434] - resolved() ... done
[16:20:15.434] resolved() for ‘MulticoreFuture’ ... done
Plotting tile #1 of 4 ...
[16:20:15.435] result() for MulticoreFuture ...
[16:20:15.440] result() for MulticoreFuture ...
[16:20:15.440] result() for MulticoreFuture ... done
[16:20:15.441] signalConditions() ...
[16:20:15.441]  - include = ‘immediateCondition’
[16:20:15.441]  - exclude = 
[16:20:15.441]  - resignal = FALSE
[16:20:15.441]  - Number of conditions: 2
[16:20:15.441] signalConditions() ... done
[16:20:15.441] result() for MulticoreFuture ... done
[16:20:15.441] result() for MulticoreFuture ...
[16:20:15.441] result() for MulticoreFuture ... done
[16:20:15.442] signalConditions() ...
[16:20:15.442]  - include = ‘immediateCondition’
[16:20:15.442]  - exclude = 
[16:20:15.442]  - resignal = FALSE
[16:20:15.442]  - Number of conditions: 2
[16:20:15.442] signalConditions() ... done
[16:20:15.442] Future state: ‘finished’
[16:20:15.442] result() for MulticoreFuture ...
[16:20:15.442] result() for MulticoreFuture ... done
[16:20:15.443] signalConditions() ...
[16:20:15.443]  - include = ‘condition’
[16:20:15.443]  - exclude = ‘immediateCondition’
[16:20:15.443]  - resignal = TRUE
[16:20:15.443]  - Number of conditions: 2
[16:20:15.443]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #1 of 4 ...[16:20:15.443]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[16:20:15.443] signalConditions() ... done
[16:20:15.444] resolved() for ‘Future’ ...
[16:20:15.445] - state: ‘created’
[16:20:15.445] - run: TRUE
[16:20:15.445] - run() ...
[16:20:15.445] run() for ‘Future’ ...
[16:20:15.445] - state: ‘created’
[16:20:15.445] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:20:15.450] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:15.450] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:20:15.450]   - Field: ‘label’
[16:20:15.450]   - Field: ‘local’
[16:20:15.450]   - Field: ‘owner’
[16:20:15.450]   - Field: ‘envir’
[16:20:15.451]   - Field: ‘workers’
[16:20:15.451]   - Field: ‘packages’
[16:20:15.455]   - Field: ‘gc’
[16:20:15.455]   - Field: ‘job’
[16:20:15.455]   - Field: ‘conditions’
[16:20:15.455]   - Field: ‘expr’
[16:20:15.455]   - Field: ‘uuid’
[16:20:15.455]   - Field: ‘seed’
[16:20:15.455]   - Field: ‘version’
[16:20:15.455]   - Field: ‘result’
[16:20:15.455]   - Field: ‘asynchronous’
[16:20:15.456]   - Field: ‘calls’
[16:20:15.456]   - Field: ‘globals’
[16:20:15.456]   - Field: ‘stdout’
[16:20:15.456]   - Field: ‘earlySignal’
[16:20:15.456]   - Field: ‘lazy’
[16:20:15.456]   - Field: ‘state’
[16:20:15.456] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:20:15.456] - Launch lazy future ...
[16:20:15.457] Packages needed by the future expression (n = 1): ‘future’
[16:20:15.457] Packages needed by future strategies (n = 0): <none>
[16:20:15.458] {
[16:20:15.458]     {
[16:20:15.458]         {
[16:20:15.458]             ...future.startTime <- base::Sys.time()
[16:20:15.458]             {
[16:20:15.458]                 {
[16:20:15.458]                   {
[16:20:15.458]                     {
[16:20:15.458]                       {
[16:20:15.458]                         base::local({
[16:20:15.458]                           has_future <- base::requireNamespace("future", 
[16:20:15.458]                             quietly = TRUE)
[16:20:15.458]                           if (has_future) {
[16:20:15.458]                             ns <- base::getNamespace("future")
[16:20:15.458]                             version <- ns[[".package"]][["version"]]
[16:20:15.458]                             if (is.null(version)) 
[16:20:15.458]                               version <- utils::packageVersion("future")
[16:20:15.458]                           }
[16:20:15.458]                           else {
[16:20:15.458]                             version <- NULL
[16:20:15.458]                           }
[16:20:15.458]                           if (!has_future || version < "1.8.0") {
[16:20:15.458]                             info <- base::c(r_version = base::gsub("R version ", 
[16:20:15.458]                               "", base::R.version$version.string), 
[16:20:15.458]                               platform = base::sprintf("%s (%s-bit)", 
[16:20:15.458]                                 base::R.version$platform, 8 * 
[16:20:15.458]                                   base::.Machine$sizeof.pointer), 
[16:20:15.458]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:15.458]                                 "release", "version")], collapse = " "), 
[16:20:15.458]                               hostname = base::Sys.info()[["nodename"]])
[16:20:15.458]                             info <- base::sprintf("%s: %s", base::names(info), 
[16:20:15.458]                               info)
[16:20:15.458]                             info <- base::paste(info, collapse = "; ")
[16:20:15.458]                             if (!has_future) {
[16:20:15.458]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:15.458]                                 info)
[16:20:15.458]                             }
[16:20:15.458]                             else {
[16:20:15.458]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:15.458]                                 info, version)
[16:20:15.458]                             }
[16:20:15.458]                             base::stop(msg)
[16:20:15.458]                           }
[16:20:15.458]                         })
[16:20:15.458]                       }
[16:20:15.458]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:15.458]                       base::options(mc.cores = 1L)
[16:20:15.458]                     }
[16:20:15.458]                     base::local({
[16:20:15.458]                       for (pkg in "future") {
[16:20:15.458]                         base::loadNamespace(pkg)
[16:20:15.458]                         base::library(pkg, character.only = TRUE)
[16:20:15.458]                       }
[16:20:15.458]                     })
[16:20:15.458]                   }
[16:20:15.458]                   ...future.strategy.old <- future::plan("list")
[16:20:15.458]                   options(future.plan = NULL)
[16:20:15.458]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:15.458]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:15.458]                 }
[16:20:15.458]                 ...future.workdir <- getwd()
[16:20:15.458]             }
[16:20:15.458]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:15.458]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:15.458]         }
[16:20:15.458]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:15.458]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:15.458]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:15.458]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:15.458]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:15.458]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:15.458]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:15.458]             base::names(...future.oldOptions))
[16:20:15.458]     }
[16:20:15.458]     if (FALSE) {
[16:20:15.458]     }
[16:20:15.458]     else {
[16:20:15.458]         if (TRUE) {
[16:20:15.458]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:15.458]                 open = "w")
[16:20:15.458]         }
[16:20:15.458]         else {
[16:20:15.458]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:15.458]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:15.458]         }
[16:20:15.458]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:15.458]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:15.458]             base::sink(type = "output", split = FALSE)
[16:20:15.458]             base::close(...future.stdout)
[16:20:15.458]         }, add = TRUE)
[16:20:15.458]     }
[16:20:15.458]     ...future.frame <- base::sys.nframe()
[16:20:15.458]     ...future.conditions <- base::list()
[16:20:15.458]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:15.458]     if (FALSE) {
[16:20:15.458]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:15.458]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:15.458]     }
[16:20:15.458]     ...future.result <- base::tryCatch({
[16:20:15.458]         base::withCallingHandlers({
[16:20:15.458]             ...future.value <- base::withVisible(base::local({
[16:20:15.458]                 withCallingHandlers({
[16:20:15.458]                   {
[16:20:15.458]                     message(sprintf("Calculating tile #%d of %d ...", 
[16:20:15.458]                       ii, n), appendLF = FALSE)
[16:20:15.458]                     fit <- mandelbrot(C)
[16:20:15.458]                     delay(fit)
[16:20:15.458]                     message(" done")
[16:20:15.458]                     fit
[16:20:15.458]                   }
[16:20:15.458]                 }, immediateCondition = function(cond) {
[16:20:15.458]                   save_rds <- function (object, pathname, ...) 
[16:20:15.458]                   {
[16:20:15.458]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:20:15.458]                     if (file_test("-f", pathname_tmp)) {
[16:20:15.458]                       fi_tmp <- file.info(pathname_tmp)
[16:20:15.458]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:20:15.458]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:15.458]                         fi_tmp[["mtime"]])
[16:20:15.458]                     }
[16:20:15.458]                     tryCatch({
[16:20:15.458]                       saveRDS(object, file = pathname_tmp, ...)
[16:20:15.458]                     }, error = function(ex) {
[16:20:15.458]                       msg <- conditionMessage(ex)
[16:20:15.458]                       fi_tmp <- file.info(pathname_tmp)
[16:20:15.458]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:20:15.458]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:15.458]                         fi_tmp[["mtime"]], msg)
[16:20:15.458]                       ex$message <- msg
[16:20:15.458]                       stop(ex)
[16:20:15.458]                     })
[16:20:15.458]                     stopifnot(file_test("-f", pathname_tmp))
[16:20:15.458]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:20:15.458]                     if (!res || file_test("-f", pathname_tmp)) {
[16:20:15.458]                       fi_tmp <- file.info(pathname_tmp)
[16:20:15.458]                       fi <- file.info(pathname)
[16:20:15.458]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:20:15.458]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:15.458]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:20:15.458]                         fi[["size"]], fi[["mtime"]])
[16:20:15.458]                       stop(msg)
[16:20:15.458]                     }
[16:20:15.458]                     invisible(pathname)
[16:20:15.458]                   }
[16:20:15.458]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:20:15.458]                     rootPath = tempdir()) 
[16:20:15.458]                   {
[16:20:15.458]                     obj <- list(time = Sys.time(), condition = cond)
[16:20:15.458]                     file <- tempfile(pattern = class(cond)[1], 
[16:20:15.458]                       tmpdir = path, fileext = ".rds")
[16:20:15.458]                     save_rds(obj, file)
[16:20:15.458]                   }
[16:20:15.458]                   saveImmediateCondition(cond, path = "/tmp/RtmpgmRZud/.future/immediateConditions")
[16:20:15.458]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:15.458]                   {
[16:20:15.458]                     inherits <- base::inherits
[16:20:15.458]                     invokeRestart <- base::invokeRestart
[16:20:15.458]                     is.null <- base::is.null
[16:20:15.458]                     muffled <- FALSE
[16:20:15.458]                     if (inherits(cond, "message")) {
[16:20:15.458]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:15.458]                       if (muffled) 
[16:20:15.458]                         invokeRestart("muffleMessage")
[16:20:15.458]                     }
[16:20:15.458]                     else if (inherits(cond, "warning")) {
[16:20:15.458]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:15.458]                       if (muffled) 
[16:20:15.458]                         invokeRestart("muffleWarning")
[16:20:15.458]                     }
[16:20:15.458]                     else if (inherits(cond, "condition")) {
[16:20:15.458]                       if (!is.null(pattern)) {
[16:20:15.458]                         computeRestarts <- base::computeRestarts
[16:20:15.458]                         grepl <- base::grepl
[16:20:15.458]                         restarts <- computeRestarts(cond)
[16:20:15.458]                         for (restart in restarts) {
[16:20:15.458]                           name <- restart$name
[16:20:15.458]                           if (is.null(name)) 
[16:20:15.458]                             next
[16:20:15.458]                           if (!grepl(pattern, name)) 
[16:20:15.458]                             next
[16:20:15.458]                           invokeRestart(restart)
[16:20:15.458]                           muffled <- TRUE
[16:20:15.458]                           break
[16:20:15.458]                         }
[16:20:15.458]                       }
[16:20:15.458]                     }
[16:20:15.458]                     invisible(muffled)
[16:20:15.458]                   }
[16:20:15.458]                   muffleCondition(cond)
[16:20:15.458]                 })
[16:20:15.458]             }))
[16:20:15.458]             future::FutureResult(value = ...future.value$value, 
[16:20:15.458]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:15.458]                   ...future.rng), globalenv = if (FALSE) 
[16:20:15.458]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:15.458]                     ...future.globalenv.names))
[16:20:15.458]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:15.458]         }, condition = base::local({
[16:20:15.458]             c <- base::c
[16:20:15.458]             inherits <- base::inherits
[16:20:15.458]             invokeRestart <- base::invokeRestart
[16:20:15.458]             length <- base::length
[16:20:15.458]             list <- base::list
[16:20:15.458]             seq.int <- base::seq.int
[16:20:15.458]             signalCondition <- base::signalCondition
[16:20:15.458]             sys.calls <- base::sys.calls
[16:20:15.458]             `[[` <- base::`[[`
[16:20:15.458]             `+` <- base::`+`
[16:20:15.458]             `<<-` <- base::`<<-`
[16:20:15.458]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:15.458]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:15.458]                   3L)]
[16:20:15.458]             }
[16:20:15.458]             function(cond) {
[16:20:15.458]                 is_error <- inherits(cond, "error")
[16:20:15.458]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:15.458]                   NULL)
[16:20:15.458]                 if (is_error) {
[16:20:15.458]                   sessionInformation <- function() {
[16:20:15.458]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:15.458]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:15.458]                       search = base::search(), system = base::Sys.info())
[16:20:15.458]                   }
[16:20:15.458]                   ...future.conditions[[length(...future.conditions) + 
[16:20:15.458]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:15.458]                     cond$call), session = sessionInformation(), 
[16:20:15.458]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:15.458]                   signalCondition(cond)
[16:20:15.458]                 }
[16:20:15.458]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:15.458]                 "immediateCondition"))) {
[16:20:15.458]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:15.458]                   ...future.conditions[[length(...future.conditions) + 
[16:20:15.458]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:15.458]                   if (TRUE && !signal) {
[16:20:15.458]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:15.458]                     {
[16:20:15.458]                       inherits <- base::inherits
[16:20:15.458]                       invokeRestart <- base::invokeRestart
[16:20:15.458]                       is.null <- base::is.null
[16:20:15.458]                       muffled <- FALSE
[16:20:15.458]                       if (inherits(cond, "message")) {
[16:20:15.458]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:15.458]                         if (muffled) 
[16:20:15.458]                           invokeRestart("muffleMessage")
[16:20:15.458]                       }
[16:20:15.458]                       else if (inherits(cond, "warning")) {
[16:20:15.458]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:15.458]                         if (muffled) 
[16:20:15.458]                           invokeRestart("muffleWarning")
[16:20:15.458]                       }
[16:20:15.458]                       else if (inherits(cond, "condition")) {
[16:20:15.458]                         if (!is.null(pattern)) {
[16:20:15.458]                           computeRestarts <- base::computeRestarts
[16:20:15.458]                           grepl <- base::grepl
[16:20:15.458]                           restarts <- computeRestarts(cond)
[16:20:15.458]                           for (restart in restarts) {
[16:20:15.458]                             name <- restart$name
[16:20:15.458]                             if (is.null(name)) 
[16:20:15.458]                               next
[16:20:15.458]                             if (!grepl(pattern, name)) 
[16:20:15.458]                               next
[16:20:15.458]                             invokeRestart(restart)
[16:20:15.458]                             muffled <- TRUE
[16:20:15.458]                             break
[16:20:15.458]                           }
[16:20:15.458]                         }
[16:20:15.458]                       }
[16:20:15.458]                       invisible(muffled)
[16:20:15.458]                     }
[16:20:15.458]                     muffleCondition(cond, pattern = "^muffle")
[16:20:15.458]                   }
[16:20:15.458]                 }
[16:20:15.458]                 else {
[16:20:15.458]                   if (TRUE) {
[16:20:15.458]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:15.458]                     {
[16:20:15.458]                       inherits <- base::inherits
[16:20:15.458]                       invokeRestart <- base::invokeRestart
[16:20:15.458]                       is.null <- base::is.null
[16:20:15.458]                       muffled <- FALSE
[16:20:15.458]                       if (inherits(cond, "message")) {
[16:20:15.458]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:15.458]                         if (muffled) 
[16:20:15.458]                           invokeRestart("muffleMessage")
[16:20:15.458]                       }
[16:20:15.458]                       else if (inherits(cond, "warning")) {
[16:20:15.458]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:15.458]                         if (muffled) 
[16:20:15.458]                           invokeRestart("muffleWarning")
[16:20:15.458]                       }
[16:20:15.458]                       else if (inherits(cond, "condition")) {
[16:20:15.458]                         if (!is.null(pattern)) {
[16:20:15.458]                           computeRestarts <- base::computeRestarts
[16:20:15.458]                           grepl <- base::grepl
[16:20:15.458]                           restarts <- computeRestarts(cond)
[16:20:15.458]                           for (restart in restarts) {
[16:20:15.458]                             name <- restart$name
[16:20:15.458]                             if (is.null(name)) 
[16:20:15.458]                               next
[16:20:15.458]                             if (!grepl(pattern, name)) 
[16:20:15.458]                               next
[16:20:15.458]                             invokeRestart(restart)
[16:20:15.458]                             muffled <- TRUE
[16:20:15.458]                             break
[16:20:15.458]                           }
[16:20:15.458]                         }
[16:20:15.458]                       }
[16:20:15.458]                       invisible(muffled)
[16:20:15.458]                     }
[16:20:15.458]                     muffleCondition(cond, pattern = "^muffle")
[16:20:15.458]                   }
[16:20:15.458]                 }
[16:20:15.458]             }
[16:20:15.458]         }))
[16:20:15.458]     }, error = function(ex) {
[16:20:15.458]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:15.458]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:15.458]                 ...future.rng), started = ...future.startTime, 
[16:20:15.458]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:15.458]             version = "1.8"), class = "FutureResult")
[16:20:15.458]     }, finally = {
[16:20:15.458]         if (!identical(...future.workdir, getwd())) 
[16:20:15.458]             setwd(...future.workdir)
[16:20:15.458]         {
[16:20:15.458]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:15.458]                 ...future.oldOptions$nwarnings <- NULL
[16:20:15.458]             }
[16:20:15.458]             base::options(...future.oldOptions)
[16:20:15.458]             if (.Platform$OS.type == "windows") {
[16:20:15.458]                 old_names <- names(...future.oldEnvVars)
[16:20:15.458]                 envs <- base::Sys.getenv()
[16:20:15.458]                 names <- names(envs)
[16:20:15.458]                 common <- intersect(names, old_names)
[16:20:15.458]                 added <- setdiff(names, old_names)
[16:20:15.458]                 removed <- setdiff(old_names, names)
[16:20:15.458]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:15.458]                   envs[common]]
[16:20:15.458]                 NAMES <- toupper(changed)
[16:20:15.458]                 args <- list()
[16:20:15.458]                 for (kk in seq_along(NAMES)) {
[16:20:15.458]                   name <- changed[[kk]]
[16:20:15.458]                   NAME <- NAMES[[kk]]
[16:20:15.458]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:15.458]                     next
[16:20:15.458]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:15.458]                 }
[16:20:15.458]                 NAMES <- toupper(added)
[16:20:15.458]                 for (kk in seq_along(NAMES)) {
[16:20:15.458]                   name <- added[[kk]]
[16:20:15.458]                   NAME <- NAMES[[kk]]
[16:20:15.458]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:15.458]                     next
[16:20:15.458]                   args[[name]] <- ""
[16:20:15.458]                 }
[16:20:15.458]                 NAMES <- toupper(removed)
[16:20:15.458]                 for (kk in seq_along(NAMES)) {
[16:20:15.458]                   name <- removed[[kk]]
[16:20:15.458]                   NAME <- NAMES[[kk]]
[16:20:15.458]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:15.458]                     next
[16:20:15.458]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:15.458]                 }
[16:20:15.458]                 if (length(args) > 0) 
[16:20:15.458]                   base::do.call(base::Sys.setenv, args = args)
[16:20:15.458]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:15.458]             }
[16:20:15.458]             else {
[16:20:15.458]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:15.458]             }
[16:20:15.458]             {
[16:20:15.458]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:15.458]                   0L) {
[16:20:15.458]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:15.458]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:15.458]                   base::options(opts)
[16:20:15.458]                 }
[16:20:15.458]                 {
[16:20:15.458]                   {
[16:20:15.458]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:15.458]                     NULL
[16:20:15.458]                   }
[16:20:15.458]                   options(future.plan = NULL)
[16:20:15.458]                   if (is.na(NA_character_)) 
[16:20:15.458]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:15.458]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:15.458]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:15.458]                     .init = FALSE)
[16:20:15.458]                 }
[16:20:15.458]             }
[16:20:15.458]         }
[16:20:15.458]     })
[16:20:15.458]     if (TRUE) {
[16:20:15.458]         base::sink(type = "output", split = FALSE)
[16:20:15.458]         if (TRUE) {
[16:20:15.458]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:15.458]         }
[16:20:15.458]         else {
[16:20:15.458]             ...future.result["stdout"] <- base::list(NULL)
[16:20:15.458]         }
[16:20:15.458]         base::close(...future.stdout)
[16:20:15.458]         ...future.stdout <- NULL
[16:20:15.458]     }
[16:20:15.458]     ...future.result$conditions <- ...future.conditions
[16:20:15.458]     ...future.result$finished <- base::Sys.time()
[16:20:15.458]     ...future.result
[16:20:15.458] }
[16:20:15.460] assign_globals() ...
[16:20:15.461] List of 4
[16:20:15.461]  $ ii   : int 2
[16:20:15.461]  $ n    : int 4
[16:20:15.461]  $ C    : cplx [1:25, 1:25] -0.72-1.5i -0.72-1.44i -0.72-1.38i ...
[16:20:15.461]   ..- attr(*, "region")=List of 2
[16:20:15.461]   .. ..$ xrange: num [1:2] -0.719 0.75
[16:20:15.461]   .. ..$ yrange: num [1:2] -1.5 -0.0306
[16:20:15.461]   ..- attr(*, "tile")= int [1:2] 1 2
[16:20:15.461]  $ delay:function (counts)  
[16:20:15.461]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[16:20:15.461]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x562a990cc090> 
[16:20:15.461]  - attr(*, "where")=List of 4
[16:20:15.461]   ..$ ii   :<environment: R_EmptyEnv> 
[16:20:15.461]   ..$ n    :<environment: R_EmptyEnv> 
[16:20:15.461]   ..$ C    :<environment: R_EmptyEnv> 
[16:20:15.461]   ..$ delay:<environment: R_EmptyEnv> 
[16:20:15.461]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:15.461]  - attr(*, "resolved")= logi FALSE
[16:20:15.461]  - attr(*, "total_size")= num 14584
[16:20:15.461]  - attr(*, "already-done")= logi TRUE
[16:20:15.468] - copied ‘ii’ to environment
[16:20:15.468] - copied ‘n’ to environment
[16:20:15.468] - copied ‘C’ to environment
[16:20:15.469] - reassign environment for ‘delay’
[16:20:15.469] - copied ‘delay’ to environment
[16:20:15.469] assign_globals() ... done
[16:20:15.469] requestCore(): workers = 2
[16:20:15.471] MulticoreFuture started
[16:20:15.472] - Launch lazy future ... done
[16:20:15.472] run() for ‘MulticoreFuture’ ... done
[16:20:15.472] - run() ... done
[16:20:15.473] - resolved() ...
[16:20:15.474] plan(): Setting new future strategy stack:
[16:20:15.474] List of future strategies:
[16:20:15.474] 1. sequential:
[16:20:15.474]    - args: function (..., envir = parent.frame())
[16:20:15.474]    - tweaked: FALSE
[16:20:15.474]    - call: NULL
[16:20:15.475] plan(): nbrOfWorkers() = 1
[16:20:15.480] plan(): Setting new future strategy stack:
[16:20:15.480] List of future strategies:
[16:20:15.480] 1. multicore:
[16:20:15.480]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:20:15.480]    - tweaked: FALSE
[16:20:15.480]    - call: plan(strategy)
[16:20:15.483] - resolved: FALSE
[16:20:15.484] - resolved() ... done
[16:20:15.484] resolved() for ‘MulticoreFuture’ ... done
[16:20:15.484] resolved() for ‘Future’ ...
[16:20:15.484] - state: ‘created’
[16:20:15.484] - run: TRUE
[16:20:15.485] - run() ...
[16:20:15.485] run() for ‘Future’ ...
[16:20:15.485] - state: ‘created’
[16:20:15.485] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:20:15.486] plan(): nbrOfWorkers() = 2
[16:20:15.490] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:15.490] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:20:15.490]   - Field: ‘label’
[16:20:15.490]   - Field: ‘local’
[16:20:15.490]   - Field: ‘owner’
[16:20:15.491]   - Field: ‘envir’
[16:20:15.491]   - Field: ‘workers’
[16:20:15.491]   - Field: ‘packages’
[16:20:15.491]   - Field: ‘gc’
[16:20:15.491]   - Field: ‘job’
[16:20:15.491]   - Field: ‘conditions’
[16:20:15.491]   - Field: ‘expr’
[16:20:15.492]   - Field: ‘uuid’
[16:20:15.492]   - Field: ‘seed’
[16:20:15.492]   - Field: ‘version’
[16:20:15.492]   - Field: ‘result’
[16:20:15.492]   - Field: ‘asynchronous’
[16:20:15.492]   - Field: ‘calls’
[16:20:15.493]   - Field: ‘globals’
[16:20:15.493]   - Field: ‘stdout’
[16:20:15.493]   - Field: ‘earlySignal’
[16:20:15.493]   - Field: ‘lazy’
[16:20:15.493]   - Field: ‘state’
[16:20:15.493] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:20:15.494] - Launch lazy future ...
[16:20:15.494] Packages needed by the future expression (n = 1): ‘future’
[16:20:15.494] Packages needed by future strategies (n = 0): <none>
[16:20:15.495] {
[16:20:15.495]     {
[16:20:15.495]         {
[16:20:15.495]             ...future.startTime <- base::Sys.time()
[16:20:15.495]             {
[16:20:15.495]                 {
[16:20:15.495]                   {
[16:20:15.495]                     {
[16:20:15.495]                       {
[16:20:15.495]                         base::local({
[16:20:15.495]                           has_future <- base::requireNamespace("future", 
[16:20:15.495]                             quietly = TRUE)
[16:20:15.495]                           if (has_future) {
[16:20:15.495]                             ns <- base::getNamespace("future")
[16:20:15.495]                             version <- ns[[".package"]][["version"]]
[16:20:15.495]                             if (is.null(version)) 
[16:20:15.495]                               version <- utils::packageVersion("future")
[16:20:15.495]                           }
[16:20:15.495]                           else {
[16:20:15.495]                             version <- NULL
[16:20:15.495]                           }
[16:20:15.495]                           if (!has_future || version < "1.8.0") {
[16:20:15.495]                             info <- base::c(r_version = base::gsub("R version ", 
[16:20:15.495]                               "", base::R.version$version.string), 
[16:20:15.495]                               platform = base::sprintf("%s (%s-bit)", 
[16:20:15.495]                                 base::R.version$platform, 8 * 
[16:20:15.495]                                   base::.Machine$sizeof.pointer), 
[16:20:15.495]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:15.495]                                 "release", "version")], collapse = " "), 
[16:20:15.495]                               hostname = base::Sys.info()[["nodename"]])
[16:20:15.495]                             info <- base::sprintf("%s: %s", base::names(info), 
[16:20:15.495]                               info)
[16:20:15.495]                             info <- base::paste(info, collapse = "; ")
[16:20:15.495]                             if (!has_future) {
[16:20:15.495]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:15.495]                                 info)
[16:20:15.495]                             }
[16:20:15.495]                             else {
[16:20:15.495]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:15.495]                                 info, version)
[16:20:15.495]                             }
[16:20:15.495]                             base::stop(msg)
[16:20:15.495]                           }
[16:20:15.495]                         })
[16:20:15.495]                       }
[16:20:15.495]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:15.495]                       base::options(mc.cores = 1L)
[16:20:15.495]                     }
[16:20:15.495]                     base::local({
[16:20:15.495]                       for (pkg in "future") {
[16:20:15.495]                         base::loadNamespace(pkg)
[16:20:15.495]                         base::library(pkg, character.only = TRUE)
[16:20:15.495]                       }
[16:20:15.495]                     })
[16:20:15.495]                   }
[16:20:15.495]                   ...future.strategy.old <- future::plan("list")
[16:20:15.495]                   options(future.plan = NULL)
[16:20:15.495]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:15.495]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:15.495]                 }
[16:20:15.495]                 ...future.workdir <- getwd()
[16:20:15.495]             }
[16:20:15.495]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:15.495]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:15.495]         }
[16:20:15.495]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:15.495]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:15.495]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:15.495]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:15.495]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:15.495]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:15.495]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:15.495]             base::names(...future.oldOptions))
[16:20:15.495]     }
[16:20:15.495]     if (FALSE) {
[16:20:15.495]     }
[16:20:15.495]     else {
[16:20:15.495]         if (TRUE) {
[16:20:15.495]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:15.495]                 open = "w")
[16:20:15.495]         }
[16:20:15.495]         else {
[16:20:15.495]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:15.495]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:15.495]         }
[16:20:15.495]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:15.495]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:15.495]             base::sink(type = "output", split = FALSE)
[16:20:15.495]             base::close(...future.stdout)
[16:20:15.495]         }, add = TRUE)
[16:20:15.495]     }
[16:20:15.495]     ...future.frame <- base::sys.nframe()
[16:20:15.495]     ...future.conditions <- base::list()
[16:20:15.495]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:15.495]     if (FALSE) {
[16:20:15.495]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:15.495]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:15.495]     }
[16:20:15.495]     ...future.result <- base::tryCatch({
[16:20:15.495]         base::withCallingHandlers({
[16:20:15.495]             ...future.value <- base::withVisible(base::local({
[16:20:15.495]                 withCallingHandlers({
[16:20:15.495]                   {
[16:20:15.495]                     message(sprintf("Calculating tile #%d of %d ...", 
[16:20:15.495]                       ii, n), appendLF = FALSE)
[16:20:15.495]                     fit <- mandelbrot(C)
[16:20:15.495]                     delay(fit)
[16:20:15.495]                     message(" done")
[16:20:15.495]                     fit
[16:20:15.495]                   }
[16:20:15.495]                 }, immediateCondition = function(cond) {
[16:20:15.495]                   save_rds <- function (object, pathname, ...) 
[16:20:15.495]                   {
[16:20:15.495]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:20:15.495]                     if (file_test("-f", pathname_tmp)) {
[16:20:15.495]                       fi_tmp <- file.info(pathname_tmp)
[16:20:15.495]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:20:15.495]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:15.495]                         fi_tmp[["mtime"]])
[16:20:15.495]                     }
[16:20:15.495]                     tryCatch({
[16:20:15.495]                       saveRDS(object, file = pathname_tmp, ...)
[16:20:15.495]                     }, error = function(ex) {
[16:20:15.495]                       msg <- conditionMessage(ex)
[16:20:15.495]                       fi_tmp <- file.info(pathname_tmp)
[16:20:15.495]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:20:15.495]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:15.495]                         fi_tmp[["mtime"]], msg)
[16:20:15.495]                       ex$message <- msg
[16:20:15.495]                       stop(ex)
[16:20:15.495]                     })
[16:20:15.495]                     stopifnot(file_test("-f", pathname_tmp))
[16:20:15.495]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:20:15.495]                     if (!res || file_test("-f", pathname_tmp)) {
[16:20:15.495]                       fi_tmp <- file.info(pathname_tmp)
[16:20:15.495]                       fi <- file.info(pathname)
[16:20:15.495]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:20:15.495]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:15.495]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:20:15.495]                         fi[["size"]], fi[["mtime"]])
[16:20:15.495]                       stop(msg)
[16:20:15.495]                     }
[16:20:15.495]                     invisible(pathname)
[16:20:15.495]                   }
[16:20:15.495]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:20:15.495]                     rootPath = tempdir()) 
[16:20:15.495]                   {
[16:20:15.495]                     obj <- list(time = Sys.time(), condition = cond)
[16:20:15.495]                     file <- tempfile(pattern = class(cond)[1], 
[16:20:15.495]                       tmpdir = path, fileext = ".rds")
[16:20:15.495]                     save_rds(obj, file)
[16:20:15.495]                   }
[16:20:15.495]                   saveImmediateCondition(cond, path = "/tmp/RtmpgmRZud/.future/immediateConditions")
[16:20:15.495]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:15.495]                   {
[16:20:15.495]                     inherits <- base::inherits
[16:20:15.495]                     invokeRestart <- base::invokeRestart
[16:20:15.495]                     is.null <- base::is.null
[16:20:15.495]                     muffled <- FALSE
[16:20:15.495]                     if (inherits(cond, "message")) {
[16:20:15.495]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:15.495]                       if (muffled) 
[16:20:15.495]                         invokeRestart("muffleMessage")
[16:20:15.495]                     }
[16:20:15.495]                     else if (inherits(cond, "warning")) {
[16:20:15.495]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:15.495]                       if (muffled) 
[16:20:15.495]                         invokeRestart("muffleWarning")
[16:20:15.495]                     }
[16:20:15.495]                     else if (inherits(cond, "condition")) {
[16:20:15.495]                       if (!is.null(pattern)) {
[16:20:15.495]                         computeRestarts <- base::computeRestarts
[16:20:15.495]                         grepl <- base::grepl
[16:20:15.495]                         restarts <- computeRestarts(cond)
[16:20:15.495]                         for (restart in restarts) {
[16:20:15.495]                           name <- restart$name
[16:20:15.495]                           if (is.null(name)) 
[16:20:15.495]                             next
[16:20:15.495]                           if (!grepl(pattern, name)) 
[16:20:15.495]                             next
[16:20:15.495]                           invokeRestart(restart)
[16:20:15.495]                           muffled <- TRUE
[16:20:15.495]                           break
[16:20:15.495]                         }
[16:20:15.495]                       }
[16:20:15.495]                     }
[16:20:15.495]                     invisible(muffled)
[16:20:15.495]                   }
[16:20:15.495]                   muffleCondition(cond)
[16:20:15.495]                 })
[16:20:15.495]             }))
[16:20:15.495]             future::FutureResult(value = ...future.value$value, 
[16:20:15.495]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:15.495]                   ...future.rng), globalenv = if (FALSE) 
[16:20:15.495]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:15.495]                     ...future.globalenv.names))
[16:20:15.495]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:15.495]         }, condition = base::local({
[16:20:15.495]             c <- base::c
[16:20:15.495]             inherits <- base::inherits
[16:20:15.495]             invokeRestart <- base::invokeRestart
[16:20:15.495]             length <- base::length
[16:20:15.495]             list <- base::list
[16:20:15.495]             seq.int <- base::seq.int
[16:20:15.495]             signalCondition <- base::signalCondition
[16:20:15.495]             sys.calls <- base::sys.calls
[16:20:15.495]             `[[` <- base::`[[`
[16:20:15.495]             `+` <- base::`+`
[16:20:15.495]             `<<-` <- base::`<<-`
[16:20:15.495]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:15.495]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:15.495]                   3L)]
[16:20:15.495]             }
[16:20:15.495]             function(cond) {
[16:20:15.495]                 is_error <- inherits(cond, "error")
[16:20:15.495]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:15.495]                   NULL)
[16:20:15.495]                 if (is_error) {
[16:20:15.495]                   sessionInformation <- function() {
[16:20:15.495]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:15.495]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:15.495]                       search = base::search(), system = base::Sys.info())
[16:20:15.495]                   }
[16:20:15.495]                   ...future.conditions[[length(...future.conditions) + 
[16:20:15.495]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:15.495]                     cond$call), session = sessionInformation(), 
[16:20:15.495]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:15.495]                   signalCondition(cond)
[16:20:15.495]                 }
[16:20:15.495]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:15.495]                 "immediateCondition"))) {
[16:20:15.495]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:15.495]                   ...future.conditions[[length(...future.conditions) + 
[16:20:15.495]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:15.495]                   if (TRUE && !signal) {
[16:20:15.495]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:15.495]                     {
[16:20:15.495]                       inherits <- base::inherits
[16:20:15.495]                       invokeRestart <- base::invokeRestart
[16:20:15.495]                       is.null <- base::is.null
[16:20:15.495]                       muffled <- FALSE
[16:20:15.495]                       if (inherits(cond, "message")) {
[16:20:15.495]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:15.495]                         if (muffled) 
[16:20:15.495]                           invokeRestart("muffleMessage")
[16:20:15.495]                       }
[16:20:15.495]                       else if (inherits(cond, "warning")) {
[16:20:15.495]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:15.495]                         if (muffled) 
[16:20:15.495]                           invokeRestart("muffleWarning")
[16:20:15.495]                       }
[16:20:15.495]                       else if (inherits(cond, "condition")) {
[16:20:15.495]                         if (!is.null(pattern)) {
[16:20:15.495]                           computeRestarts <- base::computeRestarts
[16:20:15.495]                           grepl <- base::grepl
[16:20:15.495]                           restarts <- computeRestarts(cond)
[16:20:15.495]                           for (restart in restarts) {
[16:20:15.495]                             name <- restart$name
[16:20:15.495]                             if (is.null(name)) 
[16:20:15.495]                               next
[16:20:15.495]                             if (!grepl(pattern, name)) 
[16:20:15.495]                               next
[16:20:15.495]                             invokeRestart(restart)
[16:20:15.495]                             muffled <- TRUE
[16:20:15.495]                             break
[16:20:15.495]                           }
[16:20:15.495]                         }
[16:20:15.495]                       }
[16:20:15.495]                       invisible(muffled)
[16:20:15.495]                     }
[16:20:15.495]                     muffleCondition(cond, pattern = "^muffle")
[16:20:15.495]                   }
[16:20:15.495]                 }
[16:20:15.495]                 else {
[16:20:15.495]                   if (TRUE) {
[16:20:15.495]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:15.495]                     {
[16:20:15.495]                       inherits <- base::inherits
[16:20:15.495]                       invokeRestart <- base::invokeRestart
[16:20:15.495]                       is.null <- base::is.null
[16:20:15.495]                       muffled <- FALSE
[16:20:15.495]                       if (inherits(cond, "message")) {
[16:20:15.495]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:15.495]                         if (muffled) 
[16:20:15.495]                           invokeRestart("muffleMessage")
[16:20:15.495]                       }
[16:20:15.495]                       else if (inherits(cond, "warning")) {
[16:20:15.495]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:15.495]                         if (muffled) 
[16:20:15.495]                           invokeRestart("muffleWarning")
[16:20:15.495]                       }
[16:20:15.495]                       else if (inherits(cond, "condition")) {
[16:20:15.495]                         if (!is.null(pattern)) {
[16:20:15.495]                           computeRestarts <- base::computeRestarts
[16:20:15.495]                           grepl <- base::grepl
[16:20:15.495]                           restarts <- computeRestarts(cond)
[16:20:15.495]                           for (restart in restarts) {
[16:20:15.495]                             name <- restart$name
[16:20:15.495]                             if (is.null(name)) 
[16:20:15.495]                               next
[16:20:15.495]                             if (!grepl(pattern, name)) 
[16:20:15.495]                               next
[16:20:15.495]                             invokeRestart(restart)
[16:20:15.495]                             muffled <- TRUE
[16:20:15.495]                             break
[16:20:15.495]                           }
[16:20:15.495]                         }
[16:20:15.495]                       }
[16:20:15.495]                       invisible(muffled)
[16:20:15.495]                     }
[16:20:15.495]                     muffleCondition(cond, pattern = "^muffle")
[16:20:15.495]                   }
[16:20:15.495]                 }
[16:20:15.495]             }
[16:20:15.495]         }))
[16:20:15.495]     }, error = function(ex) {
[16:20:15.495]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:15.495]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:15.495]                 ...future.rng), started = ...future.startTime, 
[16:20:15.495]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:15.495]             version = "1.8"), class = "FutureResult")
[16:20:15.495]     }, finally = {
[16:20:15.495]         if (!identical(...future.workdir, getwd())) 
[16:20:15.495]             setwd(...future.workdir)
[16:20:15.495]         {
[16:20:15.495]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:15.495]                 ...future.oldOptions$nwarnings <- NULL
[16:20:15.495]             }
[16:20:15.495]             base::options(...future.oldOptions)
[16:20:15.495]             if (.Platform$OS.type == "windows") {
[16:20:15.495]                 old_names <- names(...future.oldEnvVars)
[16:20:15.495]                 envs <- base::Sys.getenv()
[16:20:15.495]                 names <- names(envs)
[16:20:15.495]                 common <- intersect(names, old_names)
[16:20:15.495]                 added <- setdiff(names, old_names)
[16:20:15.495]                 removed <- setdiff(old_names, names)
[16:20:15.495]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:15.495]                   envs[common]]
[16:20:15.495]                 NAMES <- toupper(changed)
[16:20:15.495]                 args <- list()
[16:20:15.495]                 for (kk in seq_along(NAMES)) {
[16:20:15.495]                   name <- changed[[kk]]
[16:20:15.495]                   NAME <- NAMES[[kk]]
[16:20:15.495]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:15.495]                     next
[16:20:15.495]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:15.495]                 }
[16:20:15.495]                 NAMES <- toupper(added)
[16:20:15.495]                 for (kk in seq_along(NAMES)) {
[16:20:15.495]                   name <- added[[kk]]
[16:20:15.495]                   NAME <- NAMES[[kk]]
[16:20:15.495]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:15.495]                     next
[16:20:15.495]                   args[[name]] <- ""
[16:20:15.495]                 }
[16:20:15.495]                 NAMES <- toupper(removed)
[16:20:15.495]                 for (kk in seq_along(NAMES)) {
[16:20:15.495]                   name <- removed[[kk]]
[16:20:15.495]                   NAME <- NAMES[[kk]]
[16:20:15.495]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:15.495]                     next
[16:20:15.495]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:15.495]                 }
[16:20:15.495]                 if (length(args) > 0) 
[16:20:15.495]                   base::do.call(base::Sys.setenv, args = args)
[16:20:15.495]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:15.495]             }
[16:20:15.495]             else {
[16:20:15.495]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:15.495]             }
[16:20:15.495]             {
[16:20:15.495]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:15.495]                   0L) {
[16:20:15.495]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:15.495]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:15.495]                   base::options(opts)
[16:20:15.495]                 }
[16:20:15.495]                 {
[16:20:15.495]                   {
[16:20:15.495]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:15.495]                     NULL
[16:20:15.495]                   }
[16:20:15.495]                   options(future.plan = NULL)
[16:20:15.495]                   if (is.na(NA_character_)) 
[16:20:15.495]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:15.495]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:15.495]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:15.495]                     .init = FALSE)
[16:20:15.495]                 }
[16:20:15.495]             }
[16:20:15.495]         }
[16:20:15.495]     })
[16:20:15.495]     if (TRUE) {
[16:20:15.495]         base::sink(type = "output", split = FALSE)
[16:20:15.495]         if (TRUE) {
[16:20:15.495]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:15.495]         }
[16:20:15.495]         else {
[16:20:15.495]             ...future.result["stdout"] <- base::list(NULL)
[16:20:15.495]         }
[16:20:15.495]         base::close(...future.stdout)
[16:20:15.495]         ...future.stdout <- NULL
[16:20:15.495]     }
[16:20:15.495]     ...future.result$conditions <- ...future.conditions
[16:20:15.495]     ...future.result$finished <- base::Sys.time()
[16:20:15.495]     ...future.result
[16:20:15.495] }
[16:20:15.499] assign_globals() ...
[16:20:15.499] List of 4
[16:20:15.499]  $ ii   : int 3
[16:20:15.499]  $ n    : int 4
[16:20:15.499]  $ C    : cplx [1:25, 1:25] -2.25+0.03i -2.25+0.09i -2.25+0.15i ...
[16:20:15.499]   ..- attr(*, "region")=List of 2
[16:20:15.499]   .. ..$ xrange: num [1:2] -2.25 -0.781
[16:20:15.499]   .. ..$ yrange: num [1:2] 0.0306 1.5
[16:20:15.499]   ..- attr(*, "tile")= int [1:2] 2 1
[16:20:15.499]  $ delay:function (counts)  
[16:20:15.499]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[16:20:15.499]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x562a990cc090> 
[16:20:15.499]  - attr(*, "where")=List of 4
[16:20:15.499]   ..$ ii   :<environment: R_EmptyEnv> 
[16:20:15.499]   ..$ n    :<environment: R_EmptyEnv> 
[16:20:15.499]   ..$ C    :<environment: R_EmptyEnv> 
[16:20:15.499]   ..$ delay:<environment: R_EmptyEnv> 
[16:20:15.499]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:15.499]  - attr(*, "resolved")= logi FALSE
[16:20:15.499]  - attr(*, "total_size")= num 14584
[16:20:15.499]  - attr(*, "already-done")= logi TRUE
[16:20:15.510] - copied ‘ii’ to environment
[16:20:15.510] - copied ‘n’ to environment
[16:20:15.510] - copied ‘C’ to environment
[16:20:15.510] - reassign environment for ‘delay’
[16:20:15.510] - copied ‘delay’ to environment
[16:20:15.510] assign_globals() ... done
[16:20:15.511] requestCore(): workers = 2
[16:20:15.513] MulticoreFuture started
[16:20:15.514] - Launch lazy future ... done
[16:20:15.514] run() for ‘MulticoreFuture’ ... done
[16:20:15.514] - run() ... done
[16:20:15.514] - resolved() ...
[16:20:15.515] plan(): Setting new future strategy stack:
[16:20:15.515] List of future strategies:
[16:20:15.515] 1. sequential:
[16:20:15.515]    - args: function (..., envir = parent.frame())
[16:20:15.515]    - tweaked: FALSE
[16:20:15.515]    - call: NULL
[16:20:15.516] plan(): nbrOfWorkers() = 1
[16:20:15.520] plan(): Setting new future strategy stack:
[16:20:15.520] List of future strategies:
[16:20:15.520] 1. multicore:
[16:20:15.520]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:20:15.520]    - tweaked: FALSE
[16:20:15.520]    - call: plan(strategy)
[16:20:15.525] - resolved: FALSE
[16:20:15.525] - resolved() ... done
[16:20:15.525] resolved() for ‘MulticoreFuture’ ... done
[16:20:15.525] resolved() for ‘Future’ ...
[16:20:15.526] - state: ‘created’
[16:20:15.526] - run: TRUE
[16:20:15.526] - run() ...
[16:20:15.526] plan(): nbrOfWorkers() = 2
[16:20:15.526] run() for ‘Future’ ...
[16:20:15.526] - state: ‘created’
[16:20:15.526] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:20:15.532] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:15.532] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:20:15.532]   - Field: ‘label’
[16:20:15.532]   - Field: ‘local’
[16:20:15.532]   - Field: ‘owner’
[16:20:15.533]   - Field: ‘envir’
[16:20:15.533]   - Field: ‘workers’
[16:20:15.533]   - Field: ‘packages’
[16:20:15.533]   - Field: ‘gc’
[16:20:15.533]   - Field: ‘job’
[16:20:15.533]   - Field: ‘conditions’
[16:20:15.533]   - Field: ‘expr’
[16:20:15.534]   - Field: ‘uuid’
[16:20:15.534]   - Field: ‘seed’
[16:20:15.534]   - Field: ‘version’
[16:20:15.534]   - Field: ‘result’
[16:20:15.534]   - Field: ‘asynchronous’
[16:20:15.534]   - Field: ‘calls’
[16:20:15.534]   - Field: ‘globals’
[16:20:15.535]   - Field: ‘stdout’
[16:20:15.535]   - Field: ‘earlySignal’
[16:20:15.535]   - Field: ‘lazy’
[16:20:15.535]   - Field: ‘state’
[16:20:15.535] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:20:15.535] - Launch lazy future ...
[16:20:15.536] Packages needed by the future expression (n = 1): ‘future’
[16:20:15.536] Packages needed by future strategies (n = 0): <none>
[16:20:15.537] {
[16:20:15.537]     {
[16:20:15.537]         {
[16:20:15.537]             ...future.startTime <- base::Sys.time()
[16:20:15.537]             {
[16:20:15.537]                 {
[16:20:15.537]                   {
[16:20:15.537]                     {
[16:20:15.537]                       {
[16:20:15.537]                         base::local({
[16:20:15.537]                           has_future <- base::requireNamespace("future", 
[16:20:15.537]                             quietly = TRUE)
[16:20:15.537]                           if (has_future) {
[16:20:15.537]                             ns <- base::getNamespace("future")
[16:20:15.537]                             version <- ns[[".package"]][["version"]]
[16:20:15.537]                             if (is.null(version)) 
[16:20:15.537]                               version <- utils::packageVersion("future")
[16:20:15.537]                           }
[16:20:15.537]                           else {
[16:20:15.537]                             version <- NULL
[16:20:15.537]                           }
[16:20:15.537]                           if (!has_future || version < "1.8.0") {
[16:20:15.537]                             info <- base::c(r_version = base::gsub("R version ", 
[16:20:15.537]                               "", base::R.version$version.string), 
[16:20:15.537]                               platform = base::sprintf("%s (%s-bit)", 
[16:20:15.537]                                 base::R.version$platform, 8 * 
[16:20:15.537]                                   base::.Machine$sizeof.pointer), 
[16:20:15.537]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:15.537]                                 "release", "version")], collapse = " "), 
[16:20:15.537]                               hostname = base::Sys.info()[["nodename"]])
[16:20:15.537]                             info <- base::sprintf("%s: %s", base::names(info), 
[16:20:15.537]                               info)
[16:20:15.537]                             info <- base::paste(info, collapse = "; ")
[16:20:15.537]                             if (!has_future) {
[16:20:15.537]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:15.537]                                 info)
[16:20:15.537]                             }
[16:20:15.537]                             else {
[16:20:15.537]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:15.537]                                 info, version)
[16:20:15.537]                             }
[16:20:15.537]                             base::stop(msg)
[16:20:15.537]                           }
[16:20:15.537]                         })
[16:20:15.537]                       }
[16:20:15.537]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:15.537]                       base::options(mc.cores = 1L)
[16:20:15.537]                     }
[16:20:15.537]                     base::local({
[16:20:15.537]                       for (pkg in "future") {
[16:20:15.537]                         base::loadNamespace(pkg)
[16:20:15.537]                         base::library(pkg, character.only = TRUE)
[16:20:15.537]                       }
[16:20:15.537]                     })
[16:20:15.537]                   }
[16:20:15.537]                   ...future.strategy.old <- future::plan("list")
[16:20:15.537]                   options(future.plan = NULL)
[16:20:15.537]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:15.537]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:15.537]                 }
[16:20:15.537]                 ...future.workdir <- getwd()
[16:20:15.537]             }
[16:20:15.537]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:15.537]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:15.537]         }
[16:20:15.537]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:15.537]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:15.537]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:15.537]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:15.537]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:15.537]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:15.537]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:15.537]             base::names(...future.oldOptions))
[16:20:15.537]     }
[16:20:15.537]     if (FALSE) {
[16:20:15.537]     }
[16:20:15.537]     else {
[16:20:15.537]         if (TRUE) {
[16:20:15.537]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:15.537]                 open = "w")
[16:20:15.537]         }
[16:20:15.537]         else {
[16:20:15.537]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:15.537]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:15.537]         }
[16:20:15.537]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:15.537]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:15.537]             base::sink(type = "output", split = FALSE)
[16:20:15.537]             base::close(...future.stdout)
[16:20:15.537]         }, add = TRUE)
[16:20:15.537]     }
[16:20:15.537]     ...future.frame <- base::sys.nframe()
[16:20:15.537]     ...future.conditions <- base::list()
[16:20:15.537]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:15.537]     if (FALSE) {
[16:20:15.537]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:15.537]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:15.537]     }
[16:20:15.537]     ...future.result <- base::tryCatch({
[16:20:15.537]         base::withCallingHandlers({
[16:20:15.537]             ...future.value <- base::withVisible(base::local({
[16:20:15.537]                 withCallingHandlers({
[16:20:15.537]                   {
[16:20:15.537]                     message(sprintf("Calculating tile #%d of %d ...", 
[16:20:15.537]                       ii, n), appendLF = FALSE)
[16:20:15.537]                     fit <- mandelbrot(C)
[16:20:15.537]                     delay(fit)
[16:20:15.537]                     message(" done")
[16:20:15.537]                     fit
[16:20:15.537]                   }
[16:20:15.537]                 }, immediateCondition = function(cond) {
[16:20:15.537]                   save_rds <- function (object, pathname, ...) 
[16:20:15.537]                   {
[16:20:15.537]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:20:15.537]                     if (file_test("-f", pathname_tmp)) {
[16:20:15.537]                       fi_tmp <- file.info(pathname_tmp)
[16:20:15.537]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:20:15.537]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:15.537]                         fi_tmp[["mtime"]])
[16:20:15.537]                     }
[16:20:15.537]                     tryCatch({
[16:20:15.537]                       saveRDS(object, file = pathname_tmp, ...)
[16:20:15.537]                     }, error = function(ex) {
[16:20:15.537]                       msg <- conditionMessage(ex)
[16:20:15.537]                       fi_tmp <- file.info(pathname_tmp)
[16:20:15.537]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:20:15.537]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:15.537]                         fi_tmp[["mtime"]], msg)
[16:20:15.537]                       ex$message <- msg
[16:20:15.537]                       stop(ex)
[16:20:15.537]                     })
[16:20:15.537]                     stopifnot(file_test("-f", pathname_tmp))
[16:20:15.537]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:20:15.537]                     if (!res || file_test("-f", pathname_tmp)) {
[16:20:15.537]                       fi_tmp <- file.info(pathname_tmp)
[16:20:15.537]                       fi <- file.info(pathname)
[16:20:15.537]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:20:15.537]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:15.537]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:20:15.537]                         fi[["size"]], fi[["mtime"]])
[16:20:15.537]                       stop(msg)
[16:20:15.537]                     }
[16:20:15.537]                     invisible(pathname)
[16:20:15.537]                   }
[16:20:15.537]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:20:15.537]                     rootPath = tempdir()) 
[16:20:15.537]                   {
[16:20:15.537]                     obj <- list(time = Sys.time(), condition = cond)
[16:20:15.537]                     file <- tempfile(pattern = class(cond)[1], 
[16:20:15.537]                       tmpdir = path, fileext = ".rds")
[16:20:15.537]                     save_rds(obj, file)
[16:20:15.537]                   }
[16:20:15.537]                   saveImmediateCondition(cond, path = "/tmp/RtmpgmRZud/.future/immediateConditions")
[16:20:15.537]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:15.537]                   {
[16:20:15.537]                     inherits <- base::inherits
[16:20:15.537]                     invokeRestart <- base::invokeRestart
[16:20:15.537]                     is.null <- base::is.null
[16:20:15.537]                     muffled <- FALSE
[16:20:15.537]                     if (inherits(cond, "message")) {
[16:20:15.537]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:15.537]                       if (muffled) 
[16:20:15.537]                         invokeRestart("muffleMessage")
[16:20:15.537]                     }
[16:20:15.537]                     else if (inherits(cond, "warning")) {
[16:20:15.537]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:15.537]                       if (muffled) 
[16:20:15.537]                         invokeRestart("muffleWarning")
[16:20:15.537]                     }
[16:20:15.537]                     else if (inherits(cond, "condition")) {
[16:20:15.537]                       if (!is.null(pattern)) {
[16:20:15.537]                         computeRestarts <- base::computeRestarts
[16:20:15.537]                         grepl <- base::grepl
[16:20:15.537]                         restarts <- computeRestarts(cond)
[16:20:15.537]                         for (restart in restarts) {
[16:20:15.537]                           name <- restart$name
[16:20:15.537]                           if (is.null(name)) 
[16:20:15.537]                             next
[16:20:15.537]                           if (!grepl(pattern, name)) 
[16:20:15.537]                             next
[16:20:15.537]                           invokeRestart(restart)
[16:20:15.537]                           muffled <- TRUE
[16:20:15.537]                           break
[16:20:15.537]                         }
[16:20:15.537]                       }
[16:20:15.537]                     }
[16:20:15.537]                     invisible(muffled)
[16:20:15.537]                   }
[16:20:15.537]                   muffleCondition(cond)
[16:20:15.537]                 })
[16:20:15.537]             }))
[16:20:15.537]             future::FutureResult(value = ...future.value$value, 
[16:20:15.537]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:15.537]                   ...future.rng), globalenv = if (FALSE) 
[16:20:15.537]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:15.537]                     ...future.globalenv.names))
[16:20:15.537]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:15.537]         }, condition = base::local({
[16:20:15.537]             c <- base::c
[16:20:15.537]             inherits <- base::inherits
[16:20:15.537]             invokeRestart <- base::invokeRestart
[16:20:15.537]             length <- base::length
[16:20:15.537]             list <- base::list
[16:20:15.537]             seq.int <- base::seq.int
[16:20:15.537]             signalCondition <- base::signalCondition
[16:20:15.537]             sys.calls <- base::sys.calls
[16:20:15.537]             `[[` <- base::`[[`
[16:20:15.537]             `+` <- base::`+`
[16:20:15.537]             `<<-` <- base::`<<-`
[16:20:15.537]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:15.537]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:15.537]                   3L)]
[16:20:15.537]             }
[16:20:15.537]             function(cond) {
[16:20:15.537]                 is_error <- inherits(cond, "error")
[16:20:15.537]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:15.537]                   NULL)
[16:20:15.537]                 if (is_error) {
[16:20:15.537]                   sessionInformation <- function() {
[16:20:15.537]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:15.537]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:15.537]                       search = base::search(), system = base::Sys.info())
[16:20:15.537]                   }
[16:20:15.537]                   ...future.conditions[[length(...future.conditions) + 
[16:20:15.537]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:15.537]                     cond$call), session = sessionInformation(), 
[16:20:15.537]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:15.537]                   signalCondition(cond)
[16:20:15.537]                 }
[16:20:15.537]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:15.537]                 "immediateCondition"))) {
[16:20:15.537]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:15.537]                   ...future.conditions[[length(...future.conditions) + 
[16:20:15.537]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:15.537]                   if (TRUE && !signal) {
[16:20:15.537]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:15.537]                     {
[16:20:15.537]                       inherits <- base::inherits
[16:20:15.537]                       invokeRestart <- base::invokeRestart
[16:20:15.537]                       is.null <- base::is.null
[16:20:15.537]                       muffled <- FALSE
[16:20:15.537]                       if (inherits(cond, "message")) {
[16:20:15.537]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:15.537]                         if (muffled) 
[16:20:15.537]                           invokeRestart("muffleMessage")
[16:20:15.537]                       }
[16:20:15.537]                       else if (inherits(cond, "warning")) {
[16:20:15.537]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:15.537]                         if (muffled) 
[16:20:15.537]                           invokeRestart("muffleWarning")
[16:20:15.537]                       }
[16:20:15.537]                       else if (inherits(cond, "condition")) {
[16:20:15.537]                         if (!is.null(pattern)) {
[16:20:15.537]                           computeRestarts <- base::computeRestarts
[16:20:15.537]                           grepl <- base::grepl
[16:20:15.537]                           restarts <- computeRestarts(cond)
[16:20:15.537]                           for (restart in restarts) {
[16:20:15.537]                             name <- restart$name
[16:20:15.537]                             if (is.null(name)) 
[16:20:15.537]                               next
[16:20:15.537]                             if (!grepl(pattern, name)) 
[16:20:15.537]                               next
[16:20:15.537]                             invokeRestart(restart)
[16:20:15.537]                             muffled <- TRUE
[16:20:15.537]                             break
[16:20:15.537]                           }
[16:20:15.537]                         }
[16:20:15.537]                       }
[16:20:15.537]                       invisible(muffled)
[16:20:15.537]                     }
[16:20:15.537]                     muffleCondition(cond, pattern = "^muffle")
[16:20:15.537]                   }
[16:20:15.537]                 }
[16:20:15.537]                 else {
[16:20:15.537]                   if (TRUE) {
[16:20:15.537]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:15.537]                     {
[16:20:15.537]                       inherits <- base::inherits
[16:20:15.537]                       invokeRestart <- base::invokeRestart
[16:20:15.537]                       is.null <- base::is.null
[16:20:15.537]                       muffled <- FALSE
[16:20:15.537]                       if (inherits(cond, "message")) {
[16:20:15.537]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:15.537]                         if (muffled) 
[16:20:15.537]                           invokeRestart("muffleMessage")
[16:20:15.537]                       }
[16:20:15.537]                       else if (inherits(cond, "warning")) {
[16:20:15.537]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:15.537]                         if (muffled) 
[16:20:15.537]                           invokeRestart("muffleWarning")
[16:20:15.537]                       }
[16:20:15.537]                       else if (inherits(cond, "condition")) {
[16:20:15.537]                         if (!is.null(pattern)) {
[16:20:15.537]                           computeRestarts <- base::computeRestarts
[16:20:15.537]                           grepl <- base::grepl
[16:20:15.537]                           restarts <- computeRestarts(cond)
[16:20:15.537]                           for (restart in restarts) {
[16:20:15.537]                             name <- restart$name
[16:20:15.537]                             if (is.null(name)) 
[16:20:15.537]                               next
[16:20:15.537]                             if (!grepl(pattern, name)) 
[16:20:15.537]                               next
[16:20:15.537]                             invokeRestart(restart)
[16:20:15.537]                             muffled <- TRUE
[16:20:15.537]                             break
[16:20:15.537]                           }
[16:20:15.537]                         }
[16:20:15.537]                       }
[16:20:15.537]                       invisible(muffled)
[16:20:15.537]                     }
[16:20:15.537]                     muffleCondition(cond, pattern = "^muffle")
[16:20:15.537]                   }
[16:20:15.537]                 }
[16:20:15.537]             }
[16:20:15.537]         }))
[16:20:15.537]     }, error = function(ex) {
[16:20:15.537]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:15.537]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:15.537]                 ...future.rng), started = ...future.startTime, 
[16:20:15.537]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:15.537]             version = "1.8"), class = "FutureResult")
[16:20:15.537]     }, finally = {
[16:20:15.537]         if (!identical(...future.workdir, getwd())) 
[16:20:15.537]             setwd(...future.workdir)
[16:20:15.537]         {
[16:20:15.537]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:15.537]                 ...future.oldOptions$nwarnings <- NULL
[16:20:15.537]             }
[16:20:15.537]             base::options(...future.oldOptions)
[16:20:15.537]             if (.Platform$OS.type == "windows") {
[16:20:15.537]                 old_names <- names(...future.oldEnvVars)
[16:20:15.537]                 envs <- base::Sys.getenv()
[16:20:15.537]                 names <- names(envs)
[16:20:15.537]                 common <- intersect(names, old_names)
[16:20:15.537]                 added <- setdiff(names, old_names)
[16:20:15.537]                 removed <- setdiff(old_names, names)
[16:20:15.537]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:15.537]                   envs[common]]
[16:20:15.537]                 NAMES <- toupper(changed)
[16:20:15.537]                 args <- list()
[16:20:15.537]                 for (kk in seq_along(NAMES)) {
[16:20:15.537]                   name <- changed[[kk]]
[16:20:15.537]                   NAME <- NAMES[[kk]]
[16:20:15.537]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:15.537]                     next
[16:20:15.537]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:15.537]                 }
[16:20:15.537]                 NAMES <- toupper(added)
[16:20:15.537]                 for (kk in seq_along(NAMES)) {
[16:20:15.537]                   name <- added[[kk]]
[16:20:15.537]                   NAME <- NAMES[[kk]]
[16:20:15.537]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:15.537]                     next
[16:20:15.537]                   args[[name]] <- ""
[16:20:15.537]                 }
[16:20:15.537]                 NAMES <- toupper(removed)
[16:20:15.537]                 for (kk in seq_along(NAMES)) {
[16:20:15.537]                   name <- removed[[kk]]
[16:20:15.537]                   NAME <- NAMES[[kk]]
[16:20:15.537]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:15.537]                     next
[16:20:15.537]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:15.537]                 }
[16:20:15.537]                 if (length(args) > 0) 
[16:20:15.537]                   base::do.call(base::Sys.setenv, args = args)
[16:20:15.537]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:15.537]             }
[16:20:15.537]             else {
[16:20:15.537]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:15.537]             }
[16:20:15.537]             {
[16:20:15.537]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:15.537]                   0L) {
[16:20:15.537]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:15.537]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:15.537]                   base::options(opts)
[16:20:15.537]                 }
[16:20:15.537]                 {
[16:20:15.537]                   {
[16:20:15.537]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:15.537]                     NULL
[16:20:15.537]                   }
[16:20:15.537]                   options(future.plan = NULL)
[16:20:15.537]                   if (is.na(NA_character_)) 
[16:20:15.537]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:15.537]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:15.537]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:15.537]                     .init = FALSE)
[16:20:15.537]                 }
[16:20:15.537]             }
[16:20:15.537]         }
[16:20:15.537]     })
[16:20:15.537]     if (TRUE) {
[16:20:15.537]         base::sink(type = "output", split = FALSE)
[16:20:15.537]         if (TRUE) {
[16:20:15.537]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:15.537]         }
[16:20:15.537]         else {
[16:20:15.537]             ...future.result["stdout"] <- base::list(NULL)
[16:20:15.537]         }
[16:20:15.537]         base::close(...future.stdout)
[16:20:15.537]         ...future.stdout <- NULL
[16:20:15.537]     }
[16:20:15.537]     ...future.result$conditions <- ...future.conditions
[16:20:15.537]     ...future.result$finished <- base::Sys.time()
[16:20:15.537]     ...future.result
[16:20:15.537] }
[16:20:15.540] assign_globals() ...
[16:20:15.541] List of 4
[16:20:15.541]  $ ii   : int 4
[16:20:15.541]  $ n    : int 4
[16:20:15.541]  $ C    : cplx [1:25, 1:25] -0.719+0.031i -0.719+0.092i -0.719+0.153i ...
[16:20:15.541]   ..- attr(*, "region")=List of 2
[16:20:15.541]   .. ..$ xrange: num [1:2] -0.719 0.75
[16:20:15.541]   .. ..$ yrange: num [1:2] 0.0306 1.5
[16:20:15.541]   ..- attr(*, "tile")= int [1:2] 2 2
[16:20:15.541]  $ delay:function (counts)  
[16:20:15.541]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[16:20:15.541]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x562a990cc090> 
[16:20:15.541]  - attr(*, "where")=List of 4
[16:20:15.541]   ..$ ii   :<environment: R_EmptyEnv> 
[16:20:15.541]   ..$ n    :<environment: R_EmptyEnv> 
[16:20:15.541]   ..$ C    :<environment: R_EmptyEnv> 
[16:20:15.541]   ..$ delay:<environment: R_EmptyEnv> 
[16:20:15.541]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:15.541]  - attr(*, "resolved")= logi FALSE
[16:20:15.541]  - attr(*, "total_size")= num 14584
[16:20:15.541]  - attr(*, "already-done")= logi TRUE
[16:20:15.550] - copied ‘ii’ to environment
[16:20:15.550] - copied ‘n’ to environment
[16:20:15.550] - copied ‘C’ to environment
[16:20:15.550] - reassign environment for ‘delay’
[16:20:15.550] - copied ‘delay’ to environment
[16:20:15.550] assign_globals() ... done
[16:20:15.551] requestCore(): workers = 2
[16:20:15.551] Poll #1 (0): usedCores() = 2, workers = 2
[16:20:15.562] result() for MulticoreFuture ...
[16:20:15.563] result() for MulticoreFuture ...
[16:20:15.563] result() for MulticoreFuture ... done
[16:20:15.563] signalConditions() ...
[16:20:15.563]  - include = ‘immediateCondition’
[16:20:15.564]  - exclude = 
[16:20:15.564]  - resignal = FALSE
[16:20:15.564]  - Number of conditions: 2
[16:20:15.564] signalConditions() ... done
[16:20:15.564] result() for MulticoreFuture ... done
[16:20:15.564] result() for MulticoreFuture ...
[16:20:15.565] result() for MulticoreFuture ... done
[16:20:15.565] signalConditions() ...
[16:20:15.565]  - include = ‘immediateCondition’
[16:20:15.565]  - exclude = 
[16:20:15.565]  - resignal = FALSE
[16:20:15.565]  - Number of conditions: 2
[16:20:15.566] signalConditions() ... done
[16:20:15.569] MulticoreFuture started
[16:20:15.569] - Launch lazy future ... done
[16:20:15.570] run() for ‘MulticoreFuture’ ... done
[16:20:15.570] - run() ... done
[16:20:15.570] - resolved() ...
[16:20:15.571] plan(): Setting new future strategy stack:
[16:20:15.571] List of future strategies:
[16:20:15.571] 1. sequential:
[16:20:15.571]    - args: function (..., envir = parent.frame())
[16:20:15.571]    - tweaked: FALSE
[16:20:15.571]    - call: NULL
[16:20:15.572] plan(): nbrOfWorkers() = 1
[16:20:15.576] plan(): Setting new future strategy stack:
[16:20:15.577] List of future strategies:
[16:20:15.577] 1. multicore:
[16:20:15.577]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:20:15.577]    - tweaked: FALSE
[16:20:15.577]    - call: plan(strategy)
[16:20:15.581] - resolved: FALSE
[16:20:15.581] - resolved() ... done
[16:20:15.581] resolved() for ‘MulticoreFuture’ ... done
Plotting tile #2 of 4 ...
[16:20:15.582] result() for MulticoreFuture ...
[16:20:15.582] result() for MulticoreFuture ... done
[16:20:15.582] result() for MulticoreFuture ...
[16:20:15.582] result() for MulticoreFuture ... done
[16:20:15.583] signalConditions() ...
[16:20:15.583] plan(): nbrOfWorkers() = 2
[16:20:15.583]  - include = ‘immediateCondition’
[16:20:15.583]  - exclude = 
[16:20:15.583]  - resignal = FALSE
[16:20:15.583]  - Number of conditions: 2
[16:20:15.584] signalConditions() ... done
[16:20:15.584] Future state: ‘finished’
[16:20:15.584] result() for MulticoreFuture ...
[16:20:15.584] result() for MulticoreFuture ... done
[16:20:15.584] signalConditions() ...
[16:20:15.584]  - include = ‘condition’
[16:20:15.585]  - exclude = ‘immediateCondition’
[16:20:15.585]  - resignal = TRUE
[16:20:15.585]  - Number of conditions: 2
[16:20:15.585]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #2 of 4 ...[16:20:15.585]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[16:20:15.585] signalConditions() ... done
Plotting tile #3 of 4 ...
[16:20:15.587] result() for MulticoreFuture ...
[16:20:15.588] result() for MulticoreFuture ...
[16:20:15.588] result() for MulticoreFuture ... done
[16:20:15.588] signalConditions() ...
[16:20:15.589]  - include = ‘immediateCondition’
[16:20:15.589]  - exclude = 
[16:20:15.589]  - resignal = FALSE
[16:20:15.589]  - Number of conditions: 2
[16:20:15.589] signalConditions() ... done
[16:20:15.589] result() for MulticoreFuture ... done
[16:20:15.589] result() for MulticoreFuture ...
[16:20:15.589] result() for MulticoreFuture ... done
[16:20:15.590] signalConditions() ...
[16:20:15.590]  - include = ‘immediateCondition’
[16:20:15.590]  - exclude = 
[16:20:15.590]  - resignal = FALSE
[16:20:15.590]  - Number of conditions: 2
[16:20:15.590] signalConditions() ... done
[16:20:15.590] Future state: ‘finished’
[16:20:15.591] result() for MulticoreFuture ...
[16:20:15.591] result() for MulticoreFuture ... done
[16:20:15.591] signalConditions() ...
[16:20:15.591]  - include = ‘condition’
[16:20:15.591]  - exclude = ‘immediateCondition’
[16:20:15.591]  - resignal = TRUE
[16:20:15.591]  - Number of conditions: 2
[16:20:15.591]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #3 of 4 ...[16:20:15.592]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[16:20:15.592] signalConditions() ... done
Plotting tile #4 of 4 ...
[16:20:15.593] result() for MulticoreFuture ...
[16:20:15.594] result() for MulticoreFuture ...
[16:20:15.594] result() for MulticoreFuture ... done
[16:20:15.594] signalConditions() ...
[16:20:15.594]  - include = ‘immediateCondition’
[16:20:15.595]  - exclude = 
[16:20:15.595]  - resignal = FALSE
[16:20:15.595]  - Number of conditions: 2
[16:20:15.595] signalConditions() ... done
[16:20:15.595] result() for MulticoreFuture ... done
[16:20:15.595] result() for MulticoreFuture ...
[16:20:15.596] result() for MulticoreFuture ... done
[16:20:15.596] signalConditions() ...
[16:20:15.596]  - include = ‘immediateCondition’
[16:20:15.596]  - exclude = 
[16:20:15.596]  - resignal = FALSE
[16:20:15.596]  - Number of conditions: 2
[16:20:15.597] signalConditions() ... done
[16:20:15.597] Future state: ‘finished’
[16:20:15.597] result() for MulticoreFuture ...
[16:20:15.597] result() for MulticoreFuture ... done
[16:20:15.597] signalConditions() ...
[16:20:15.597]  - include = ‘condition’
[16:20:15.598]  - exclude = ‘immediateCondition’
[16:20:15.598]  - resignal = TRUE
[16:20:15.598]  - Number of conditions: 2
[16:20:15.598]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #4 of 4 ...[16:20:15.598]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[16:20:15.598] signalConditions() ... done

> close.screen()
[1] 1 2 3 4 5 6 7 8

> message("SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).\n")
SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).

- plan('multicore') ... DONE
- plan('multisession') ...
[16:20:15.600] plan(): Setting new future strategy stack:
[16:20:15.600] List of future strategies:
[16:20:15.600] 1. multisession:
[16:20:15.600]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:20:15.600]    - tweaked: FALSE
[16:20:15.600]    - call: plan(strategy)
[16:20:15.601] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:20:15.601] multisession:
[16:20:15.601] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:20:15.601] - tweaked: FALSE
[16:20:15.601] - call: plan(strategy)
[16:20:15.608] getGlobalsAndPackages() ...
[16:20:15.608] Not searching for globals
[16:20:15.608] - globals: [0] <none>
[16:20:15.609] getGlobalsAndPackages() ... DONE
[16:20:15.609] [local output] makeClusterPSOCK() ...
[16:20:15.674] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:20:15.675] [local output] Base port: 11513
[16:20:15.676] [local output] Getting setup options for 2 cluster nodes ...
[16:20:15.676] [local output]  - Node 1 of 2 ...
[16:20:15.676] [local output] localMachine=TRUE => revtunnel=FALSE

[16:20:15.677] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpgmRZud/worker.rank=1.parallelly.parent=79385.1361921630db0.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpgmRZud/worker.rank=1.parallelly.parent=79385.1361921630db0.pid")'’
[16:20:15.868] - Possible to infer worker's PID: TRUE
[16:20:15.868] [local output] Rscript port: 11513

[16:20:15.869] [local output]  - Node 2 of 2 ...
[16:20:15.869] [local output] localMachine=TRUE => revtunnel=FALSE

[16:20:15.870] [local output] Rscript port: 11513

[16:20:15.870] [local output] Getting setup options for 2 cluster nodes ... done
[16:20:15.870] [local output]  - Parallel setup requested for some PSOCK nodes
[16:20:15.871] [local output] Setting up PSOCK nodes in parallel
[16:20:15.871] List of 36
[16:20:15.871]  $ worker          : chr "localhost"
[16:20:15.871]   ..- attr(*, "localhost")= logi TRUE
[16:20:15.871]  $ master          : chr "localhost"
[16:20:15.871]  $ port            : int 11513
[16:20:15.871]  $ connectTimeout  : num 120
[16:20:15.871]  $ timeout         : num 2592000
[16:20:15.871]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:20:15.871]  $ homogeneous     : logi TRUE
[16:20:15.871]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:20:15.871]  $ rscript_envs    : NULL
[16:20:15.871]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:20:15.871]  $ rscript_startup : NULL
[16:20:15.871]  $ rscript_sh      : chr "sh"
[16:20:15.871]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:20:15.871]  $ methods         : logi TRUE
[16:20:15.871]  $ socketOptions   : chr "no-delay"
[16:20:15.871]  $ useXDR          : logi FALSE
[16:20:15.871]  $ outfile         : chr "/dev/null"
[16:20:15.871]  $ renice          : int NA
[16:20:15.871]  $ rshcmd          : NULL
[16:20:15.871]  $ user            : chr(0) 
[16:20:15.871]  $ revtunnel       : logi FALSE
[16:20:15.871]  $ rshlogfile      : NULL
[16:20:15.871]  $ rshopts         : chr(0) 
[16:20:15.871]  $ rank            : int 1
[16:20:15.871]  $ manual          : logi FALSE
[16:20:15.871]  $ dryrun          : logi FALSE
[16:20:15.871]  $ quiet           : logi FALSE
[16:20:15.871]  $ setup_strategy  : chr "parallel"
[16:20:15.871]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:20:15.871]  $ pidfile         : chr "/tmp/RtmpgmRZud/worker.rank=1.parallelly.parent=79385.1361921630db0.pid"
[16:20:15.871]  $ rshcmd_label    : NULL
[16:20:15.871]  $ rsh_call        : NULL
[16:20:15.871]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:20:15.871]  $ localMachine    : logi TRUE
[16:20:15.871]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:20:15.871]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:20:15.871]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:20:15.871]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:20:15.871]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:20:15.871]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:20:15.871]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:20:15.871]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:20:15.871]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:20:15.871]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:20:15.871]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:20:15.871]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:20:15.871]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:20:15.871]  $ arguments       :List of 28
[16:20:15.871]   ..$ worker          : chr "localhost"
[16:20:15.871]   ..$ master          : NULL
[16:20:15.871]   ..$ port            : int 11513
[16:20:15.871]   ..$ connectTimeout  : num 120
[16:20:15.871]   ..$ timeout         : num 2592000
[16:20:15.871]   ..$ rscript         : NULL
[16:20:15.871]   ..$ homogeneous     : NULL
[16:20:15.871]   ..$ rscript_args    : NULL
[16:20:15.871]   ..$ rscript_envs    : NULL
[16:20:15.871]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:20:15.871]   ..$ rscript_startup : NULL
[16:20:15.871]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:20:15.871]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:20:15.871]   ..$ methods         : logi TRUE
[16:20:15.871]   ..$ socketOptions   : chr "no-delay"
[16:20:15.871]   ..$ useXDR          : logi FALSE
[16:20:15.871]   ..$ outfile         : chr "/dev/null"
[16:20:15.871]   ..$ renice          : int NA
[16:20:15.871]   ..$ rshcmd          : NULL
[16:20:15.871]   ..$ user            : NULL
[16:20:15.871]   ..$ revtunnel       : logi NA
[16:20:15.871]   ..$ rshlogfile      : NULL
[16:20:15.871]   ..$ rshopts         : NULL
[16:20:15.871]   ..$ rank            : int 1
[16:20:15.871]   ..$ manual          : logi FALSE
[16:20:15.871]   ..$ dryrun          : logi FALSE
[16:20:15.871]   ..$ quiet           : logi FALSE
[16:20:15.871]   ..$ setup_strategy  : chr "parallel"
[16:20:15.871]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:20:15.888] [local output] System call to launch all workers:
[16:20:15.888] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpgmRZud/worker.rank=1.parallelly.parent=79385.1361921630db0.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11513 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:20:15.888] [local output] Starting PSOCK main server
[16:20:15.894] [local output] Workers launched
[16:20:15.894] [local output] Waiting for workers to connect back
[16:20:15.894]  - [local output] 0 workers out of 2 ready
[16:20:16.148]  - [local output] 0 workers out of 2 ready
[16:20:16.149]  - [local output] 1 workers out of 2 ready
[16:20:16.153]  - [local output] 1 workers out of 2 ready
[16:20:16.154]  - [local output] 2 workers out of 2 ready
[16:20:16.154] [local output] Launching of workers completed
[16:20:16.154] [local output] Collecting session information from workers
[16:20:16.155] [local output]  - Worker #1 of 2
[16:20:16.155] [local output]  - Worker #2 of 2
[16:20:16.156] [local output] makeClusterPSOCK() ... done
[16:20:16.167] Packages needed by the future expression (n = 0): <none>
[16:20:16.167] Packages needed by future strategies (n = 0): <none>
[16:20:16.167] {
[16:20:16.167]     {
[16:20:16.167]         {
[16:20:16.167]             ...future.startTime <- base::Sys.time()
[16:20:16.167]             {
[16:20:16.167]                 {
[16:20:16.167]                   {
[16:20:16.167]                     {
[16:20:16.167]                       base::local({
[16:20:16.167]                         has_future <- base::requireNamespace("future", 
[16:20:16.167]                           quietly = TRUE)
[16:20:16.167]                         if (has_future) {
[16:20:16.167]                           ns <- base::getNamespace("future")
[16:20:16.167]                           version <- ns[[".package"]][["version"]]
[16:20:16.167]                           if (is.null(version)) 
[16:20:16.167]                             version <- utils::packageVersion("future")
[16:20:16.167]                         }
[16:20:16.167]                         else {
[16:20:16.167]                           version <- NULL
[16:20:16.167]                         }
[16:20:16.167]                         if (!has_future || version < "1.8.0") {
[16:20:16.167]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:16.167]                             "", base::R.version$version.string), 
[16:20:16.167]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:16.167]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:16.167]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:16.167]                               "release", "version")], collapse = " "), 
[16:20:16.167]                             hostname = base::Sys.info()[["nodename"]])
[16:20:16.167]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:16.167]                             info)
[16:20:16.167]                           info <- base::paste(info, collapse = "; ")
[16:20:16.167]                           if (!has_future) {
[16:20:16.167]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:16.167]                               info)
[16:20:16.167]                           }
[16:20:16.167]                           else {
[16:20:16.167]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:16.167]                               info, version)
[16:20:16.167]                           }
[16:20:16.167]                           base::stop(msg)
[16:20:16.167]                         }
[16:20:16.167]                       })
[16:20:16.167]                     }
[16:20:16.167]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:16.167]                     base::options(mc.cores = 1L)
[16:20:16.167]                   }
[16:20:16.167]                   ...future.strategy.old <- future::plan("list")
[16:20:16.167]                   options(future.plan = NULL)
[16:20:16.167]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:16.167]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:16.167]                 }
[16:20:16.167]                 ...future.workdir <- getwd()
[16:20:16.167]             }
[16:20:16.167]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:16.167]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:16.167]         }
[16:20:16.167]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:16.167]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:16.167]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:16.167]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:16.167]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:16.167]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:16.167]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:16.167]             base::names(...future.oldOptions))
[16:20:16.167]     }
[16:20:16.167]     if (FALSE) {
[16:20:16.167]     }
[16:20:16.167]     else {
[16:20:16.167]         if (TRUE) {
[16:20:16.167]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:16.167]                 open = "w")
[16:20:16.167]         }
[16:20:16.167]         else {
[16:20:16.167]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:16.167]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:16.167]         }
[16:20:16.167]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:16.167]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:16.167]             base::sink(type = "output", split = FALSE)
[16:20:16.167]             base::close(...future.stdout)
[16:20:16.167]         }, add = TRUE)
[16:20:16.167]     }
[16:20:16.167]     ...future.frame <- base::sys.nframe()
[16:20:16.167]     ...future.conditions <- base::list()
[16:20:16.167]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:16.167]     if (FALSE) {
[16:20:16.167]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:16.167]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:16.167]     }
[16:20:16.167]     ...future.result <- base::tryCatch({
[16:20:16.167]         base::withCallingHandlers({
[16:20:16.167]             ...future.value <- base::withVisible(base::local({
[16:20:16.167]                 ...future.makeSendCondition <- base::local({
[16:20:16.167]                   sendCondition <- NULL
[16:20:16.167]                   function(frame = 1L) {
[16:20:16.167]                     if (is.function(sendCondition)) 
[16:20:16.167]                       return(sendCondition)
[16:20:16.167]                     ns <- getNamespace("parallel")
[16:20:16.167]                     if (exists("sendData", mode = "function", 
[16:20:16.167]                       envir = ns)) {
[16:20:16.167]                       parallel_sendData <- get("sendData", mode = "function", 
[16:20:16.167]                         envir = ns)
[16:20:16.167]                       envir <- sys.frame(frame)
[16:20:16.167]                       master <- NULL
[16:20:16.167]                       while (!identical(envir, .GlobalEnv) && 
[16:20:16.167]                         !identical(envir, emptyenv())) {
[16:20:16.167]                         if (exists("master", mode = "list", envir = envir, 
[16:20:16.167]                           inherits = FALSE)) {
[16:20:16.167]                           master <- get("master", mode = "list", 
[16:20:16.167]                             envir = envir, inherits = FALSE)
[16:20:16.167]                           if (inherits(master, c("SOCKnode", 
[16:20:16.167]                             "SOCK0node"))) {
[16:20:16.167]                             sendCondition <<- function(cond) {
[16:20:16.167]                               data <- list(type = "VALUE", value = cond, 
[16:20:16.167]                                 success = TRUE)
[16:20:16.167]                               parallel_sendData(master, data)
[16:20:16.167]                             }
[16:20:16.167]                             return(sendCondition)
[16:20:16.167]                           }
[16:20:16.167]                         }
[16:20:16.167]                         frame <- frame + 1L
[16:20:16.167]                         envir <- sys.frame(frame)
[16:20:16.167]                       }
[16:20:16.167]                     }
[16:20:16.167]                     sendCondition <<- function(cond) NULL
[16:20:16.167]                   }
[16:20:16.167]                 })
[16:20:16.167]                 withCallingHandlers({
[16:20:16.167]                   NA
[16:20:16.167]                 }, immediateCondition = function(cond) {
[16:20:16.167]                   sendCondition <- ...future.makeSendCondition()
[16:20:16.167]                   sendCondition(cond)
[16:20:16.167]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:16.167]                   {
[16:20:16.167]                     inherits <- base::inherits
[16:20:16.167]                     invokeRestart <- base::invokeRestart
[16:20:16.167]                     is.null <- base::is.null
[16:20:16.167]                     muffled <- FALSE
[16:20:16.167]                     if (inherits(cond, "message")) {
[16:20:16.167]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:16.167]                       if (muffled) 
[16:20:16.167]                         invokeRestart("muffleMessage")
[16:20:16.167]                     }
[16:20:16.167]                     else if (inherits(cond, "warning")) {
[16:20:16.167]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:16.167]                       if (muffled) 
[16:20:16.167]                         invokeRestart("muffleWarning")
[16:20:16.167]                     }
[16:20:16.167]                     else if (inherits(cond, "condition")) {
[16:20:16.167]                       if (!is.null(pattern)) {
[16:20:16.167]                         computeRestarts <- base::computeRestarts
[16:20:16.167]                         grepl <- base::grepl
[16:20:16.167]                         restarts <- computeRestarts(cond)
[16:20:16.167]                         for (restart in restarts) {
[16:20:16.167]                           name <- restart$name
[16:20:16.167]                           if (is.null(name)) 
[16:20:16.167]                             next
[16:20:16.167]                           if (!grepl(pattern, name)) 
[16:20:16.167]                             next
[16:20:16.167]                           invokeRestart(restart)
[16:20:16.167]                           muffled <- TRUE
[16:20:16.167]                           break
[16:20:16.167]                         }
[16:20:16.167]                       }
[16:20:16.167]                     }
[16:20:16.167]                     invisible(muffled)
[16:20:16.167]                   }
[16:20:16.167]                   muffleCondition(cond)
[16:20:16.167]                 })
[16:20:16.167]             }))
[16:20:16.167]             future::FutureResult(value = ...future.value$value, 
[16:20:16.167]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:16.167]                   ...future.rng), globalenv = if (FALSE) 
[16:20:16.167]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:16.167]                     ...future.globalenv.names))
[16:20:16.167]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:16.167]         }, condition = base::local({
[16:20:16.167]             c <- base::c
[16:20:16.167]             inherits <- base::inherits
[16:20:16.167]             invokeRestart <- base::invokeRestart
[16:20:16.167]             length <- base::length
[16:20:16.167]             list <- base::list
[16:20:16.167]             seq.int <- base::seq.int
[16:20:16.167]             signalCondition <- base::signalCondition
[16:20:16.167]             sys.calls <- base::sys.calls
[16:20:16.167]             `[[` <- base::`[[`
[16:20:16.167]             `+` <- base::`+`
[16:20:16.167]             `<<-` <- base::`<<-`
[16:20:16.167]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:16.167]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:16.167]                   3L)]
[16:20:16.167]             }
[16:20:16.167]             function(cond) {
[16:20:16.167]                 is_error <- inherits(cond, "error")
[16:20:16.167]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:16.167]                   NULL)
[16:20:16.167]                 if (is_error) {
[16:20:16.167]                   sessionInformation <- function() {
[16:20:16.167]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:16.167]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:16.167]                       search = base::search(), system = base::Sys.info())
[16:20:16.167]                   }
[16:20:16.167]                   ...future.conditions[[length(...future.conditions) + 
[16:20:16.167]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:16.167]                     cond$call), session = sessionInformation(), 
[16:20:16.167]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:16.167]                   signalCondition(cond)
[16:20:16.167]                 }
[16:20:16.167]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:16.167]                 "immediateCondition"))) {
[16:20:16.167]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:16.167]                   ...future.conditions[[length(...future.conditions) + 
[16:20:16.167]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:16.167]                   if (TRUE && !signal) {
[16:20:16.167]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:16.167]                     {
[16:20:16.167]                       inherits <- base::inherits
[16:20:16.167]                       invokeRestart <- base::invokeRestart
[16:20:16.167]                       is.null <- base::is.null
[16:20:16.167]                       muffled <- FALSE
[16:20:16.167]                       if (inherits(cond, "message")) {
[16:20:16.167]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:16.167]                         if (muffled) 
[16:20:16.167]                           invokeRestart("muffleMessage")
[16:20:16.167]                       }
[16:20:16.167]                       else if (inherits(cond, "warning")) {
[16:20:16.167]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:16.167]                         if (muffled) 
[16:20:16.167]                           invokeRestart("muffleWarning")
[16:20:16.167]                       }
[16:20:16.167]                       else if (inherits(cond, "condition")) {
[16:20:16.167]                         if (!is.null(pattern)) {
[16:20:16.167]                           computeRestarts <- base::computeRestarts
[16:20:16.167]                           grepl <- base::grepl
[16:20:16.167]                           restarts <- computeRestarts(cond)
[16:20:16.167]                           for (restart in restarts) {
[16:20:16.167]                             name <- restart$name
[16:20:16.167]                             if (is.null(name)) 
[16:20:16.167]                               next
[16:20:16.167]                             if (!grepl(pattern, name)) 
[16:20:16.167]                               next
[16:20:16.167]                             invokeRestart(restart)
[16:20:16.167]                             muffled <- TRUE
[16:20:16.167]                             break
[16:20:16.167]                           }
[16:20:16.167]                         }
[16:20:16.167]                       }
[16:20:16.167]                       invisible(muffled)
[16:20:16.167]                     }
[16:20:16.167]                     muffleCondition(cond, pattern = "^muffle")
[16:20:16.167]                   }
[16:20:16.167]                 }
[16:20:16.167]                 else {
[16:20:16.167]                   if (TRUE) {
[16:20:16.167]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:16.167]                     {
[16:20:16.167]                       inherits <- base::inherits
[16:20:16.167]                       invokeRestart <- base::invokeRestart
[16:20:16.167]                       is.null <- base::is.null
[16:20:16.167]                       muffled <- FALSE
[16:20:16.167]                       if (inherits(cond, "message")) {
[16:20:16.167]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:16.167]                         if (muffled) 
[16:20:16.167]                           invokeRestart("muffleMessage")
[16:20:16.167]                       }
[16:20:16.167]                       else if (inherits(cond, "warning")) {
[16:20:16.167]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:16.167]                         if (muffled) 
[16:20:16.167]                           invokeRestart("muffleWarning")
[16:20:16.167]                       }
[16:20:16.167]                       else if (inherits(cond, "condition")) {
[16:20:16.167]                         if (!is.null(pattern)) {
[16:20:16.167]                           computeRestarts <- base::computeRestarts
[16:20:16.167]                           grepl <- base::grepl
[16:20:16.167]                           restarts <- computeRestarts(cond)
[16:20:16.167]                           for (restart in restarts) {
[16:20:16.167]                             name <- restart$name
[16:20:16.167]                             if (is.null(name)) 
[16:20:16.167]                               next
[16:20:16.167]                             if (!grepl(pattern, name)) 
[16:20:16.167]                               next
[16:20:16.167]                             invokeRestart(restart)
[16:20:16.167]                             muffled <- TRUE
[16:20:16.167]                             break
[16:20:16.167]                           }
[16:20:16.167]                         }
[16:20:16.167]                       }
[16:20:16.167]                       invisible(muffled)
[16:20:16.167]                     }
[16:20:16.167]                     muffleCondition(cond, pattern = "^muffle")
[16:20:16.167]                   }
[16:20:16.167]                 }
[16:20:16.167]             }
[16:20:16.167]         }))
[16:20:16.167]     }, error = function(ex) {
[16:20:16.167]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:16.167]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:16.167]                 ...future.rng), started = ...future.startTime, 
[16:20:16.167]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:16.167]             version = "1.8"), class = "FutureResult")
[16:20:16.167]     }, finally = {
[16:20:16.167]         if (!identical(...future.workdir, getwd())) 
[16:20:16.167]             setwd(...future.workdir)
[16:20:16.167]         {
[16:20:16.167]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:16.167]                 ...future.oldOptions$nwarnings <- NULL
[16:20:16.167]             }
[16:20:16.167]             base::options(...future.oldOptions)
[16:20:16.167]             if (.Platform$OS.type == "windows") {
[16:20:16.167]                 old_names <- names(...future.oldEnvVars)
[16:20:16.167]                 envs <- base::Sys.getenv()
[16:20:16.167]                 names <- names(envs)
[16:20:16.167]                 common <- intersect(names, old_names)
[16:20:16.167]                 added <- setdiff(names, old_names)
[16:20:16.167]                 removed <- setdiff(old_names, names)
[16:20:16.167]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:16.167]                   envs[common]]
[16:20:16.167]                 NAMES <- toupper(changed)
[16:20:16.167]                 args <- list()
[16:20:16.167]                 for (kk in seq_along(NAMES)) {
[16:20:16.167]                   name <- changed[[kk]]
[16:20:16.167]                   NAME <- NAMES[[kk]]
[16:20:16.167]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:16.167]                     next
[16:20:16.167]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:16.167]                 }
[16:20:16.167]                 NAMES <- toupper(added)
[16:20:16.167]                 for (kk in seq_along(NAMES)) {
[16:20:16.167]                   name <- added[[kk]]
[16:20:16.167]                   NAME <- NAMES[[kk]]
[16:20:16.167]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:16.167]                     next
[16:20:16.167]                   args[[name]] <- ""
[16:20:16.167]                 }
[16:20:16.167]                 NAMES <- toupper(removed)
[16:20:16.167]                 for (kk in seq_along(NAMES)) {
[16:20:16.167]                   name <- removed[[kk]]
[16:20:16.167]                   NAME <- NAMES[[kk]]
[16:20:16.167]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:16.167]                     next
[16:20:16.167]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:16.167]                 }
[16:20:16.167]                 if (length(args) > 0) 
[16:20:16.167]                   base::do.call(base::Sys.setenv, args = args)
[16:20:16.167]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:16.167]             }
[16:20:16.167]             else {
[16:20:16.167]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:16.167]             }
[16:20:16.167]             {
[16:20:16.167]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:16.167]                   0L) {
[16:20:16.167]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:16.167]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:16.167]                   base::options(opts)
[16:20:16.167]                 }
[16:20:16.167]                 {
[16:20:16.167]                   {
[16:20:16.167]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:16.167]                     NULL
[16:20:16.167]                   }
[16:20:16.167]                   options(future.plan = NULL)
[16:20:16.167]                   if (is.na(NA_character_)) 
[16:20:16.167]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:16.167]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:16.167]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:16.167]                     .init = FALSE)
[16:20:16.167]                 }
[16:20:16.167]             }
[16:20:16.167]         }
[16:20:16.167]     })
[16:20:16.167]     if (TRUE) {
[16:20:16.167]         base::sink(type = "output", split = FALSE)
[16:20:16.167]         if (TRUE) {
[16:20:16.167]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:16.167]         }
[16:20:16.167]         else {
[16:20:16.167]             ...future.result["stdout"] <- base::list(NULL)
[16:20:16.167]         }
[16:20:16.167]         base::close(...future.stdout)
[16:20:16.167]         ...future.stdout <- NULL
[16:20:16.167]     }
[16:20:16.167]     ...future.result$conditions <- ...future.conditions
[16:20:16.167]     ...future.result$finished <- base::Sys.time()
[16:20:16.167]     ...future.result
[16:20:16.167] }
[16:20:16.221] MultisessionFuture started
[16:20:16.221] result() for ClusterFuture ...
[16:20:16.221] receiveMessageFromWorker() for ClusterFuture ...
[16:20:16.221] - Validating connection of MultisessionFuture
[16:20:16.254] - received message: FutureResult
[16:20:16.254] - Received FutureResult
[16:20:16.254] - Erased future from FutureRegistry
[16:20:16.254] result() for ClusterFuture ...
[16:20:16.255] - result already collected: FutureResult
[16:20:16.255] result() for ClusterFuture ... done
[16:20:16.255] receiveMessageFromWorker() for ClusterFuture ... done
[16:20:16.255] result() for ClusterFuture ... done
[16:20:16.255] result() for ClusterFuture ...
[16:20:16.255] - result already collected: FutureResult
[16:20:16.255] result() for ClusterFuture ... done
[16:20:16.255] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:20:16.259] plan(): nbrOfWorkers() = 2


	demo(mandelbrot)
	---- ~~~~~~~~~~

> library("future")

> library("graphics")

> plot_what_is_done <- function(counts) {
+   for (kk in seq_along(counts)) {
+     f <- counts[[kk]]
+ 
+     ## Already plotted?
+     if (!inherits(f, "Future")) next
+ 
+     ## Not resolved?
+     if (!resolved(f)) next
+ 
+     message(sprintf("Plotting tile #%d of %d ...", kk, n))
+     counts[[kk]] <- value(f)
+     screen(kk)
+     plot(counts[[kk]])
+   }
+ 
+   counts
+ }

> ## Options
> region <- getOption("future.demo.mandelbrot.region", 1L)

> if (!is.list(region)) {
+   if (region == 1L) {
+     region <- list(xmid = -0.75, ymid = 0.0, side = 3.0)
+   } else if (region == 2L) {
+     region <- list(xmid = 0.283, ymid = -0.0095, side = 0.00026)
+   } else if (region == 3L) {
+     region <- list(xmid = 0.282989, ymid = -0.01, side = 3e-8)
+   }
+ }

> nrow <- getOption("future.demo.mandelbrot.nrow", 3L)

> resolution <- getOption("future.demo.mandelbrot.resolution", 400L)

> delay <- getOption("future.demo.mandelbrot.delay", interactive())

> if (isTRUE(delay)) {
+   delay <- function(counts) Sys.sleep(1.0)
+ } else if (!is.function(delay)) {
+   delay <- function(counts) {}
+ }

> ## Generate Mandelbrot tiles to be computed
> Cs <- mandelbrot_tiles(xmid = region$xmid, ymid = region$ymid,
+                        side = region$side, nrow = nrow,
+                        resolution = resolution)

> if (interactive()) {
+   dev.new()
+   plot.new()
+   split.screen(dim(Cs))
+   for (ii in seq_along(Cs)) {
+     screen(ii)
+     par(mar = c(0, 0, 0, 0))
+     text(x = 1 / 2, y = 1 / 2, sprintf("Future #%d\nunresolved", ii), cex = 2)
+   }
+ } else {
+   split.screen(dim(Cs))
+ }
[1]  9 10 11 12

> ## Create all Mandelbrot tiles via lazy futures
> n <- length(Cs)

> message(sprintf("Creating %d Mandelbrot tiles:", n), appendLF = FALSE)
Creating 4 Mandelbrot tiles:
> counts <- lapply(seq_along(Cs), FUN=function(ii) {
+   message(" ", ii, appendLF = FALSE)
+   C <- Cs[[ii]]
+   future({
+     message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
+     fit <- mandelbrot(C)
+ 
+     ## Emulate slowness
+     delay(fit)
+ 
+     message(" done")
+     fit
+   }, lazy = TRUE)
+ })
 1[16:20:16.263] getGlobalsAndPackages() ...
[16:20:16.263] Searching for globals...
[16:20:16.266] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[16:20:16.267] Searching for globals ... DONE
[16:20:16.267] Resolving globals: FALSE
[16:20:16.267] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[16:20:16.268] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[16:20:16.268] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[16:20:16.268] - packages: [1] ‘future’
[16:20:16.268] getGlobalsAndPackages() ... DONE
 2[16:20:16.272] getGlobalsAndPackages() ...
[16:20:16.272] Searching for globals...
[16:20:16.275] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[16:20:16.275] Searching for globals ... DONE
[16:20:16.275] Resolving globals: FALSE
[16:20:16.276] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[16:20:16.276] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[16:20:16.277] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[16:20:16.277] - packages: [1] ‘future’
[16:20:16.277] getGlobalsAndPackages() ... DONE
 3[16:20:16.277] getGlobalsAndPackages() ...
[16:20:16.277] Searching for globals...
[16:20:16.280] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[16:20:16.281] Searching for globals ... DONE
[16:20:16.281] Resolving globals: FALSE
[16:20:16.281] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[16:20:16.282] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[16:20:16.282] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[16:20:16.282] - packages: [1] ‘future’
[16:20:16.282] getGlobalsAndPackages() ... DONE
 4[16:20:16.282] getGlobalsAndPackages() ...
[16:20:16.282] Searching for globals...
[16:20:16.285] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[16:20:16.286] Searching for globals ... DONE
[16:20:16.286] Resolving globals: FALSE
[16:20:16.286] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[16:20:16.287] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[16:20:16.287] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[16:20:16.287] - packages: [1] ‘future’
[16:20:16.287] getGlobalsAndPackages() ... DONE

> message(".")
.

> ## Calculate and plot tiles
> repeat {
+   counts <- plot_what_is_done(counts)
+   if (!any(sapply(counts, FUN = inherits, "Future"))) break
+ }
[16:20:16.298] resolved() for ‘Future’ ...
[16:20:16.298] - state: ‘created’
[16:20:16.298] - run: TRUE
[16:20:16.298] - run() ...
[16:20:16.298] run() for ‘Future’ ...
[16:20:16.298] - state: ‘created’
[16:20:16.299] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:20:16.312] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:16.312] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:20:16.313]   - Field: ‘node’
[16:20:16.313]   - Field: ‘label’
[16:20:16.313]   - Field: ‘local’
[16:20:16.313]   - Field: ‘owner’
[16:20:16.313]   - Field: ‘envir’
[16:20:16.313]   - Field: ‘workers’
[16:20:16.313]   - Field: ‘packages’
[16:20:16.313]   - Field: ‘gc’
[16:20:16.313]   - Field: ‘conditions’
[16:20:16.313]   - Field: ‘persistent’
[16:20:16.314]   - Field: ‘expr’
[16:20:16.314]   - Field: ‘uuid’
[16:20:16.314]   - Field: ‘seed’
[16:20:16.314]   - Field: ‘version’
[16:20:16.314]   - Field: ‘result’
[16:20:16.314]   - Field: ‘asynchronous’
[16:20:16.314]   - Field: ‘calls’
[16:20:16.314]   - Field: ‘globals’
[16:20:16.314]   - Field: ‘stdout’
[16:20:16.314]   - Field: ‘earlySignal’
[16:20:16.314]   - Field: ‘lazy’
[16:20:16.315]   - Field: ‘state’
[16:20:16.315] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:20:16.315] - Launch lazy future ...
[16:20:16.315] Packages needed by the future expression (n = 1): ‘future’
[16:20:16.315] Packages needed by future strategies (n = 0): <none>
[16:20:16.316] {
[16:20:16.316]     {
[16:20:16.316]         {
[16:20:16.316]             ...future.startTime <- base::Sys.time()
[16:20:16.316]             {
[16:20:16.316]                 {
[16:20:16.316]                   {
[16:20:16.316]                     {
[16:20:16.316]                       {
[16:20:16.316]                         base::local({
[16:20:16.316]                           has_future <- base::requireNamespace("future", 
[16:20:16.316]                             quietly = TRUE)
[16:20:16.316]                           if (has_future) {
[16:20:16.316]                             ns <- base::getNamespace("future")
[16:20:16.316]                             version <- ns[[".package"]][["version"]]
[16:20:16.316]                             if (is.null(version)) 
[16:20:16.316]                               version <- utils::packageVersion("future")
[16:20:16.316]                           }
[16:20:16.316]                           else {
[16:20:16.316]                             version <- NULL
[16:20:16.316]                           }
[16:20:16.316]                           if (!has_future || version < "1.8.0") {
[16:20:16.316]                             info <- base::c(r_version = base::gsub("R version ", 
[16:20:16.316]                               "", base::R.version$version.string), 
[16:20:16.316]                               platform = base::sprintf("%s (%s-bit)", 
[16:20:16.316]                                 base::R.version$platform, 8 * 
[16:20:16.316]                                   base::.Machine$sizeof.pointer), 
[16:20:16.316]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:16.316]                                 "release", "version")], collapse = " "), 
[16:20:16.316]                               hostname = base::Sys.info()[["nodename"]])
[16:20:16.316]                             info <- base::sprintf("%s: %s", base::names(info), 
[16:20:16.316]                               info)
[16:20:16.316]                             info <- base::paste(info, collapse = "; ")
[16:20:16.316]                             if (!has_future) {
[16:20:16.316]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:16.316]                                 info)
[16:20:16.316]                             }
[16:20:16.316]                             else {
[16:20:16.316]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:16.316]                                 info, version)
[16:20:16.316]                             }
[16:20:16.316]                             base::stop(msg)
[16:20:16.316]                           }
[16:20:16.316]                         })
[16:20:16.316]                       }
[16:20:16.316]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:16.316]                       base::options(mc.cores = 1L)
[16:20:16.316]                     }
[16:20:16.316]                     base::local({
[16:20:16.316]                       for (pkg in "future") {
[16:20:16.316]                         base::loadNamespace(pkg)
[16:20:16.316]                         base::library(pkg, character.only = TRUE)
[16:20:16.316]                       }
[16:20:16.316]                     })
[16:20:16.316]                   }
[16:20:16.316]                   ...future.strategy.old <- future::plan("list")
[16:20:16.316]                   options(future.plan = NULL)
[16:20:16.316]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:16.316]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:16.316]                 }
[16:20:16.316]                 ...future.workdir <- getwd()
[16:20:16.316]             }
[16:20:16.316]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:16.316]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:16.316]         }
[16:20:16.316]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:16.316]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:16.316]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:16.316]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:16.316]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:16.316]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:16.316]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:16.316]             base::names(...future.oldOptions))
[16:20:16.316]     }
[16:20:16.316]     if (FALSE) {
[16:20:16.316]     }
[16:20:16.316]     else {
[16:20:16.316]         if (TRUE) {
[16:20:16.316]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:16.316]                 open = "w")
[16:20:16.316]         }
[16:20:16.316]         else {
[16:20:16.316]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:16.316]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:16.316]         }
[16:20:16.316]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:16.316]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:16.316]             base::sink(type = "output", split = FALSE)
[16:20:16.316]             base::close(...future.stdout)
[16:20:16.316]         }, add = TRUE)
[16:20:16.316]     }
[16:20:16.316]     ...future.frame <- base::sys.nframe()
[16:20:16.316]     ...future.conditions <- base::list()
[16:20:16.316]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:16.316]     if (FALSE) {
[16:20:16.316]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:16.316]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:16.316]     }
[16:20:16.316]     ...future.result <- base::tryCatch({
[16:20:16.316]         base::withCallingHandlers({
[16:20:16.316]             ...future.value <- base::withVisible(base::local({
[16:20:16.316]                 ...future.makeSendCondition <- base::local({
[16:20:16.316]                   sendCondition <- NULL
[16:20:16.316]                   function(frame = 1L) {
[16:20:16.316]                     if (is.function(sendCondition)) 
[16:20:16.316]                       return(sendCondition)
[16:20:16.316]                     ns <- getNamespace("parallel")
[16:20:16.316]                     if (exists("sendData", mode = "function", 
[16:20:16.316]                       envir = ns)) {
[16:20:16.316]                       parallel_sendData <- get("sendData", mode = "function", 
[16:20:16.316]                         envir = ns)
[16:20:16.316]                       envir <- sys.frame(frame)
[16:20:16.316]                       master <- NULL
[16:20:16.316]                       while (!identical(envir, .GlobalEnv) && 
[16:20:16.316]                         !identical(envir, emptyenv())) {
[16:20:16.316]                         if (exists("master", mode = "list", envir = envir, 
[16:20:16.316]                           inherits = FALSE)) {
[16:20:16.316]                           master <- get("master", mode = "list", 
[16:20:16.316]                             envir = envir, inherits = FALSE)
[16:20:16.316]                           if (inherits(master, c("SOCKnode", 
[16:20:16.316]                             "SOCK0node"))) {
[16:20:16.316]                             sendCondition <<- function(cond) {
[16:20:16.316]                               data <- list(type = "VALUE", value = cond, 
[16:20:16.316]                                 success = TRUE)
[16:20:16.316]                               parallel_sendData(master, data)
[16:20:16.316]                             }
[16:20:16.316]                             return(sendCondition)
[16:20:16.316]                           }
[16:20:16.316]                         }
[16:20:16.316]                         frame <- frame + 1L
[16:20:16.316]                         envir <- sys.frame(frame)
[16:20:16.316]                       }
[16:20:16.316]                     }
[16:20:16.316]                     sendCondition <<- function(cond) NULL
[16:20:16.316]                   }
[16:20:16.316]                 })
[16:20:16.316]                 withCallingHandlers({
[16:20:16.316]                   {
[16:20:16.316]                     message(sprintf("Calculating tile #%d of %d ...", 
[16:20:16.316]                       ii, n), appendLF = FALSE)
[16:20:16.316]                     fit <- mandelbrot(C)
[16:20:16.316]                     delay(fit)
[16:20:16.316]                     message(" done")
[16:20:16.316]                     fit
[16:20:16.316]                   }
[16:20:16.316]                 }, immediateCondition = function(cond) {
[16:20:16.316]                   sendCondition <- ...future.makeSendCondition()
[16:20:16.316]                   sendCondition(cond)
[16:20:16.316]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:16.316]                   {
[16:20:16.316]                     inherits <- base::inherits
[16:20:16.316]                     invokeRestart <- base::invokeRestart
[16:20:16.316]                     is.null <- base::is.null
[16:20:16.316]                     muffled <- FALSE
[16:20:16.316]                     if (inherits(cond, "message")) {
[16:20:16.316]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:16.316]                       if (muffled) 
[16:20:16.316]                         invokeRestart("muffleMessage")
[16:20:16.316]                     }
[16:20:16.316]                     else if (inherits(cond, "warning")) {
[16:20:16.316]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:16.316]                       if (muffled) 
[16:20:16.316]                         invokeRestart("muffleWarning")
[16:20:16.316]                     }
[16:20:16.316]                     else if (inherits(cond, "condition")) {
[16:20:16.316]                       if (!is.null(pattern)) {
[16:20:16.316]                         computeRestarts <- base::computeRestarts
[16:20:16.316]                         grepl <- base::grepl
[16:20:16.316]                         restarts <- computeRestarts(cond)
[16:20:16.316]                         for (restart in restarts) {
[16:20:16.316]                           name <- restart$name
[16:20:16.316]                           if (is.null(name)) 
[16:20:16.316]                             next
[16:20:16.316]                           if (!grepl(pattern, name)) 
[16:20:16.316]                             next
[16:20:16.316]                           invokeRestart(restart)
[16:20:16.316]                           muffled <- TRUE
[16:20:16.316]                           break
[16:20:16.316]                         }
[16:20:16.316]                       }
[16:20:16.316]                     }
[16:20:16.316]                     invisible(muffled)
[16:20:16.316]                   }
[16:20:16.316]                   muffleCondition(cond)
[16:20:16.316]                 })
[16:20:16.316]             }))
[16:20:16.316]             future::FutureResult(value = ...future.value$value, 
[16:20:16.316]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:16.316]                   ...future.rng), globalenv = if (FALSE) 
[16:20:16.316]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:16.316]                     ...future.globalenv.names))
[16:20:16.316]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:16.316]         }, condition = base::local({
[16:20:16.316]             c <- base::c
[16:20:16.316]             inherits <- base::inherits
[16:20:16.316]             invokeRestart <- base::invokeRestart
[16:20:16.316]             length <- base::length
[16:20:16.316]             list <- base::list
[16:20:16.316]             seq.int <- base::seq.int
[16:20:16.316]             signalCondition <- base::signalCondition
[16:20:16.316]             sys.calls <- base::sys.calls
[16:20:16.316]             `[[` <- base::`[[`
[16:20:16.316]             `+` <- base::`+`
[16:20:16.316]             `<<-` <- base::`<<-`
[16:20:16.316]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:16.316]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:16.316]                   3L)]
[16:20:16.316]             }
[16:20:16.316]             function(cond) {
[16:20:16.316]                 is_error <- inherits(cond, "error")
[16:20:16.316]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:16.316]                   NULL)
[16:20:16.316]                 if (is_error) {
[16:20:16.316]                   sessionInformation <- function() {
[16:20:16.316]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:16.316]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:16.316]                       search = base::search(), system = base::Sys.info())
[16:20:16.316]                   }
[16:20:16.316]                   ...future.conditions[[length(...future.conditions) + 
[16:20:16.316]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:16.316]                     cond$call), session = sessionInformation(), 
[16:20:16.316]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:16.316]                   signalCondition(cond)
[16:20:16.316]                 }
[16:20:16.316]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:16.316]                 "immediateCondition"))) {
[16:20:16.316]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:16.316]                   ...future.conditions[[length(...future.conditions) + 
[16:20:16.316]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:16.316]                   if (TRUE && !signal) {
[16:20:16.316]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:16.316]                     {
[16:20:16.316]                       inherits <- base::inherits
[16:20:16.316]                       invokeRestart <- base::invokeRestart
[16:20:16.316]                       is.null <- base::is.null
[16:20:16.316]                       muffled <- FALSE
[16:20:16.316]                       if (inherits(cond, "message")) {
[16:20:16.316]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:16.316]                         if (muffled) 
[16:20:16.316]                           invokeRestart("muffleMessage")
[16:20:16.316]                       }
[16:20:16.316]                       else if (inherits(cond, "warning")) {
[16:20:16.316]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:16.316]                         if (muffled) 
[16:20:16.316]                           invokeRestart("muffleWarning")
[16:20:16.316]                       }
[16:20:16.316]                       else if (inherits(cond, "condition")) {
[16:20:16.316]                         if (!is.null(pattern)) {
[16:20:16.316]                           computeRestarts <- base::computeRestarts
[16:20:16.316]                           grepl <- base::grepl
[16:20:16.316]                           restarts <- computeRestarts(cond)
[16:20:16.316]                           for (restart in restarts) {
[16:20:16.316]                             name <- restart$name
[16:20:16.316]                             if (is.null(name)) 
[16:20:16.316]                               next
[16:20:16.316]                             if (!grepl(pattern, name)) 
[16:20:16.316]                               next
[16:20:16.316]                             invokeRestart(restart)
[16:20:16.316]                             muffled <- TRUE
[16:20:16.316]                             break
[16:20:16.316]                           }
[16:20:16.316]                         }
[16:20:16.316]                       }
[16:20:16.316]                       invisible(muffled)
[16:20:16.316]                     }
[16:20:16.316]                     muffleCondition(cond, pattern = "^muffle")
[16:20:16.316]                   }
[16:20:16.316]                 }
[16:20:16.316]                 else {
[16:20:16.316]                   if (TRUE) {
[16:20:16.316]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:16.316]                     {
[16:20:16.316]                       inherits <- base::inherits
[16:20:16.316]                       invokeRestart <- base::invokeRestart
[16:20:16.316]                       is.null <- base::is.null
[16:20:16.316]                       muffled <- FALSE
[16:20:16.316]                       if (inherits(cond, "message")) {
[16:20:16.316]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:16.316]                         if (muffled) 
[16:20:16.316]                           invokeRestart("muffleMessage")
[16:20:16.316]                       }
[16:20:16.316]                       else if (inherits(cond, "warning")) {
[16:20:16.316]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:16.316]                         if (muffled) 
[16:20:16.316]                           invokeRestart("muffleWarning")
[16:20:16.316]                       }
[16:20:16.316]                       else if (inherits(cond, "condition")) {
[16:20:16.316]                         if (!is.null(pattern)) {
[16:20:16.316]                           computeRestarts <- base::computeRestarts
[16:20:16.316]                           grepl <- base::grepl
[16:20:16.316]                           restarts <- computeRestarts(cond)
[16:20:16.316]                           for (restart in restarts) {
[16:20:16.316]                             name <- restart$name
[16:20:16.316]                             if (is.null(name)) 
[16:20:16.316]                               next
[16:20:16.316]                             if (!grepl(pattern, name)) 
[16:20:16.316]                               next
[16:20:16.316]                             invokeRestart(restart)
[16:20:16.316]                             muffled <- TRUE
[16:20:16.316]                             break
[16:20:16.316]                           }
[16:20:16.316]                         }
[16:20:16.316]                       }
[16:20:16.316]                       invisible(muffled)
[16:20:16.316]                     }
[16:20:16.316]                     muffleCondition(cond, pattern = "^muffle")
[16:20:16.316]                   }
[16:20:16.316]                 }
[16:20:16.316]             }
[16:20:16.316]         }))
[16:20:16.316]     }, error = function(ex) {
[16:20:16.316]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:16.316]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:16.316]                 ...future.rng), started = ...future.startTime, 
[16:20:16.316]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:16.316]             version = "1.8"), class = "FutureResult")
[16:20:16.316]     }, finally = {
[16:20:16.316]         if (!identical(...future.workdir, getwd())) 
[16:20:16.316]             setwd(...future.workdir)
[16:20:16.316]         {
[16:20:16.316]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:16.316]                 ...future.oldOptions$nwarnings <- NULL
[16:20:16.316]             }
[16:20:16.316]             base::options(...future.oldOptions)
[16:20:16.316]             if (.Platform$OS.type == "windows") {
[16:20:16.316]                 old_names <- names(...future.oldEnvVars)
[16:20:16.316]                 envs <- base::Sys.getenv()
[16:20:16.316]                 names <- names(envs)
[16:20:16.316]                 common <- intersect(names, old_names)
[16:20:16.316]                 added <- setdiff(names, old_names)
[16:20:16.316]                 removed <- setdiff(old_names, names)
[16:20:16.316]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:16.316]                   envs[common]]
[16:20:16.316]                 NAMES <- toupper(changed)
[16:20:16.316]                 args <- list()
[16:20:16.316]                 for (kk in seq_along(NAMES)) {
[16:20:16.316]                   name <- changed[[kk]]
[16:20:16.316]                   NAME <- NAMES[[kk]]
[16:20:16.316]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:16.316]                     next
[16:20:16.316]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:16.316]                 }
[16:20:16.316]                 NAMES <- toupper(added)
[16:20:16.316]                 for (kk in seq_along(NAMES)) {
[16:20:16.316]                   name <- added[[kk]]
[16:20:16.316]                   NAME <- NAMES[[kk]]
[16:20:16.316]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:16.316]                     next
[16:20:16.316]                   args[[name]] <- ""
[16:20:16.316]                 }
[16:20:16.316]                 NAMES <- toupper(removed)
[16:20:16.316]                 for (kk in seq_along(NAMES)) {
[16:20:16.316]                   name <- removed[[kk]]
[16:20:16.316]                   NAME <- NAMES[[kk]]
[16:20:16.316]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:16.316]                     next
[16:20:16.316]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:16.316]                 }
[16:20:16.316]                 if (length(args) > 0) 
[16:20:16.316]                   base::do.call(base::Sys.setenv, args = args)
[16:20:16.316]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:16.316]             }
[16:20:16.316]             else {
[16:20:16.316]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:16.316]             }
[16:20:16.316]             {
[16:20:16.316]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:16.316]                   0L) {
[16:20:16.316]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:16.316]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:16.316]                   base::options(opts)
[16:20:16.316]                 }
[16:20:16.316]                 {
[16:20:16.316]                   {
[16:20:16.316]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:16.316]                     NULL
[16:20:16.316]                   }
[16:20:16.316]                   options(future.plan = NULL)
[16:20:16.316]                   if (is.na(NA_character_)) 
[16:20:16.316]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:16.316]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:16.316]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:16.316]                     .init = FALSE)
[16:20:16.316]                 }
[16:20:16.316]             }
[16:20:16.316]         }
[16:20:16.316]     })
[16:20:16.316]     if (TRUE) {
[16:20:16.316]         base::sink(type = "output", split = FALSE)
[16:20:16.316]         if (TRUE) {
[16:20:16.316]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:16.316]         }
[16:20:16.316]         else {
[16:20:16.316]             ...future.result["stdout"] <- base::list(NULL)
[16:20:16.316]         }
[16:20:16.316]         base::close(...future.stdout)
[16:20:16.316]         ...future.stdout <- NULL
[16:20:16.316]     }
[16:20:16.316]     ...future.result$conditions <- ...future.conditions
[16:20:16.316]     ...future.result$finished <- base::Sys.time()
[16:20:16.316]     ...future.result
[16:20:16.316] }
[16:20:16.318] Exporting 4 global objects (14.24 KiB) to cluster node #1 ...
[16:20:16.318] Exporting ‘ii’ (56 bytes) to cluster node #1 ...
[16:20:16.319] Exporting ‘ii’ (56 bytes) to cluster node #1 ... DONE
[16:20:16.319] Exporting ‘n’ (56 bytes) to cluster node #1 ...
[16:20:16.319] Exporting ‘n’ (56 bytes) to cluster node #1 ... DONE
[16:20:16.319] Exporting ‘C’ (10.72 KiB) to cluster node #1 ...
[16:20:16.360] Exporting ‘C’ (10.72 KiB) to cluster node #1 ... DONE
[16:20:16.361] Exporting ‘delay’ (3.41 KiB) to cluster node #1 ...
[16:20:16.405] Exporting ‘delay’ (3.41 KiB) to cluster node #1 ... DONE
[16:20:16.405] Exporting 4 global objects (14.24 KiB) to cluster node #1 ... DONE
[16:20:16.405] MultisessionFuture started
[16:20:16.405] - Launch lazy future ... done
[16:20:16.405] run() for ‘MultisessionFuture’ ... done
[16:20:16.406] - run() ... done
[16:20:16.406] - resolved() ...
[16:20:16.417] - resolved: FALSE
[16:20:16.417] - resolved() ... done
[16:20:16.417] resolved() for ‘MultisessionFuture’ ... done
[16:20:16.417] resolved() for ‘Future’ ...
[16:20:16.417] - state: ‘created’
[16:20:16.417] - run: TRUE
[16:20:16.417] - run() ...
[16:20:16.417] run() for ‘Future’ ...
[16:20:16.417] - state: ‘created’
[16:20:16.417] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:20:16.431] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:16.431] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:20:16.431]   - Field: ‘node’
[16:20:16.431]   - Field: ‘label’
[16:20:16.431]   - Field: ‘local’
[16:20:16.432]   - Field: ‘owner’
[16:20:16.432]   - Field: ‘envir’
[16:20:16.432]   - Field: ‘workers’
[16:20:16.432]   - Field: ‘packages’
[16:20:16.432]   - Field: ‘gc’
[16:20:16.432]   - Field: ‘conditions’
[16:20:16.432]   - Field: ‘persistent’
[16:20:16.432]   - Field: ‘expr’
[16:20:16.432]   - Field: ‘uuid’
[16:20:16.432]   - Field: ‘seed’
[16:20:16.432]   - Field: ‘version’
[16:20:16.433]   - Field: ‘result’
[16:20:16.433]   - Field: ‘asynchronous’
[16:20:16.433]   - Field: ‘calls’
[16:20:16.433]   - Field: ‘globals’
[16:20:16.433]   - Field: ‘stdout’
[16:20:16.433]   - Field: ‘earlySignal’
[16:20:16.433]   - Field: ‘lazy’
[16:20:16.433]   - Field: ‘state’
[16:20:16.433] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:20:16.433] - Launch lazy future ...
[16:20:16.434] Packages needed by the future expression (n = 1): ‘future’
[16:20:16.434] Packages needed by future strategies (n = 0): <none>
[16:20:16.434] {
[16:20:16.434]     {
[16:20:16.434]         {
[16:20:16.434]             ...future.startTime <- base::Sys.time()
[16:20:16.434]             {
[16:20:16.434]                 {
[16:20:16.434]                   {
[16:20:16.434]                     {
[16:20:16.434]                       {
[16:20:16.434]                         base::local({
[16:20:16.434]                           has_future <- base::requireNamespace("future", 
[16:20:16.434]                             quietly = TRUE)
[16:20:16.434]                           if (has_future) {
[16:20:16.434]                             ns <- base::getNamespace("future")
[16:20:16.434]                             version <- ns[[".package"]][["version"]]
[16:20:16.434]                             if (is.null(version)) 
[16:20:16.434]                               version <- utils::packageVersion("future")
[16:20:16.434]                           }
[16:20:16.434]                           else {
[16:20:16.434]                             version <- NULL
[16:20:16.434]                           }
[16:20:16.434]                           if (!has_future || version < "1.8.0") {
[16:20:16.434]                             info <- base::c(r_version = base::gsub("R version ", 
[16:20:16.434]                               "", base::R.version$version.string), 
[16:20:16.434]                               platform = base::sprintf("%s (%s-bit)", 
[16:20:16.434]                                 base::R.version$platform, 8 * 
[16:20:16.434]                                   base::.Machine$sizeof.pointer), 
[16:20:16.434]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:16.434]                                 "release", "version")], collapse = " "), 
[16:20:16.434]                               hostname = base::Sys.info()[["nodename"]])
[16:20:16.434]                             info <- base::sprintf("%s: %s", base::names(info), 
[16:20:16.434]                               info)
[16:20:16.434]                             info <- base::paste(info, collapse = "; ")
[16:20:16.434]                             if (!has_future) {
[16:20:16.434]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:16.434]                                 info)
[16:20:16.434]                             }
[16:20:16.434]                             else {
[16:20:16.434]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:16.434]                                 info, version)
[16:20:16.434]                             }
[16:20:16.434]                             base::stop(msg)
[16:20:16.434]                           }
[16:20:16.434]                         })
[16:20:16.434]                       }
[16:20:16.434]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:16.434]                       base::options(mc.cores = 1L)
[16:20:16.434]                     }
[16:20:16.434]                     base::local({
[16:20:16.434]                       for (pkg in "future") {
[16:20:16.434]                         base::loadNamespace(pkg)
[16:20:16.434]                         base::library(pkg, character.only = TRUE)
[16:20:16.434]                       }
[16:20:16.434]                     })
[16:20:16.434]                   }
[16:20:16.434]                   ...future.strategy.old <- future::plan("list")
[16:20:16.434]                   options(future.plan = NULL)
[16:20:16.434]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:16.434]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:16.434]                 }
[16:20:16.434]                 ...future.workdir <- getwd()
[16:20:16.434]             }
[16:20:16.434]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:16.434]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:16.434]         }
[16:20:16.434]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:16.434]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:16.434]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:16.434]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:16.434]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:16.434]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:16.434]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:16.434]             base::names(...future.oldOptions))
[16:20:16.434]     }
[16:20:16.434]     if (FALSE) {
[16:20:16.434]     }
[16:20:16.434]     else {
[16:20:16.434]         if (TRUE) {
[16:20:16.434]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:16.434]                 open = "w")
[16:20:16.434]         }
[16:20:16.434]         else {
[16:20:16.434]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:16.434]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:16.434]         }
[16:20:16.434]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:16.434]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:16.434]             base::sink(type = "output", split = FALSE)
[16:20:16.434]             base::close(...future.stdout)
[16:20:16.434]         }, add = TRUE)
[16:20:16.434]     }
[16:20:16.434]     ...future.frame <- base::sys.nframe()
[16:20:16.434]     ...future.conditions <- base::list()
[16:20:16.434]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:16.434]     if (FALSE) {
[16:20:16.434]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:16.434]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:16.434]     }
[16:20:16.434]     ...future.result <- base::tryCatch({
[16:20:16.434]         base::withCallingHandlers({
[16:20:16.434]             ...future.value <- base::withVisible(base::local({
[16:20:16.434]                 ...future.makeSendCondition <- base::local({
[16:20:16.434]                   sendCondition <- NULL
[16:20:16.434]                   function(frame = 1L) {
[16:20:16.434]                     if (is.function(sendCondition)) 
[16:20:16.434]                       return(sendCondition)
[16:20:16.434]                     ns <- getNamespace("parallel")
[16:20:16.434]                     if (exists("sendData", mode = "function", 
[16:20:16.434]                       envir = ns)) {
[16:20:16.434]                       parallel_sendData <- get("sendData", mode = "function", 
[16:20:16.434]                         envir = ns)
[16:20:16.434]                       envir <- sys.frame(frame)
[16:20:16.434]                       master <- NULL
[16:20:16.434]                       while (!identical(envir, .GlobalEnv) && 
[16:20:16.434]                         !identical(envir, emptyenv())) {
[16:20:16.434]                         if (exists("master", mode = "list", envir = envir, 
[16:20:16.434]                           inherits = FALSE)) {
[16:20:16.434]                           master <- get("master", mode = "list", 
[16:20:16.434]                             envir = envir, inherits = FALSE)
[16:20:16.434]                           if (inherits(master, c("SOCKnode", 
[16:20:16.434]                             "SOCK0node"))) {
[16:20:16.434]                             sendCondition <<- function(cond) {
[16:20:16.434]                               data <- list(type = "VALUE", value = cond, 
[16:20:16.434]                                 success = TRUE)
[16:20:16.434]                               parallel_sendData(master, data)
[16:20:16.434]                             }
[16:20:16.434]                             return(sendCondition)
[16:20:16.434]                           }
[16:20:16.434]                         }
[16:20:16.434]                         frame <- frame + 1L
[16:20:16.434]                         envir <- sys.frame(frame)
[16:20:16.434]                       }
[16:20:16.434]                     }
[16:20:16.434]                     sendCondition <<- function(cond) NULL
[16:20:16.434]                   }
[16:20:16.434]                 })
[16:20:16.434]                 withCallingHandlers({
[16:20:16.434]                   {
[16:20:16.434]                     message(sprintf("Calculating tile #%d of %d ...", 
[16:20:16.434]                       ii, n), appendLF = FALSE)
[16:20:16.434]                     fit <- mandelbrot(C)
[16:20:16.434]                     delay(fit)
[16:20:16.434]                     message(" done")
[16:20:16.434]                     fit
[16:20:16.434]                   }
[16:20:16.434]                 }, immediateCondition = function(cond) {
[16:20:16.434]                   sendCondition <- ...future.makeSendCondition()
[16:20:16.434]                   sendCondition(cond)
[16:20:16.434]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:16.434]                   {
[16:20:16.434]                     inherits <- base::inherits
[16:20:16.434]                     invokeRestart <- base::invokeRestart
[16:20:16.434]                     is.null <- base::is.null
[16:20:16.434]                     muffled <- FALSE
[16:20:16.434]                     if (inherits(cond, "message")) {
[16:20:16.434]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:16.434]                       if (muffled) 
[16:20:16.434]                         invokeRestart("muffleMessage")
[16:20:16.434]                     }
[16:20:16.434]                     else if (inherits(cond, "warning")) {
[16:20:16.434]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:16.434]                       if (muffled) 
[16:20:16.434]                         invokeRestart("muffleWarning")
[16:20:16.434]                     }
[16:20:16.434]                     else if (inherits(cond, "condition")) {
[16:20:16.434]                       if (!is.null(pattern)) {
[16:20:16.434]                         computeRestarts <- base::computeRestarts
[16:20:16.434]                         grepl <- base::grepl
[16:20:16.434]                         restarts <- computeRestarts(cond)
[16:20:16.434]                         for (restart in restarts) {
[16:20:16.434]                           name <- restart$name
[16:20:16.434]                           if (is.null(name)) 
[16:20:16.434]                             next
[16:20:16.434]                           if (!grepl(pattern, name)) 
[16:20:16.434]                             next
[16:20:16.434]                           invokeRestart(restart)
[16:20:16.434]                           muffled <- TRUE
[16:20:16.434]                           break
[16:20:16.434]                         }
[16:20:16.434]                       }
[16:20:16.434]                     }
[16:20:16.434]                     invisible(muffled)
[16:20:16.434]                   }
[16:20:16.434]                   muffleCondition(cond)
[16:20:16.434]                 })
[16:20:16.434]             }))
[16:20:16.434]             future::FutureResult(value = ...future.value$value, 
[16:20:16.434]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:16.434]                   ...future.rng), globalenv = if (FALSE) 
[16:20:16.434]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:16.434]                     ...future.globalenv.names))
[16:20:16.434]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:16.434]         }, condition = base::local({
[16:20:16.434]             c <- base::c
[16:20:16.434]             inherits <- base::inherits
[16:20:16.434]             invokeRestart <- base::invokeRestart
[16:20:16.434]             length <- base::length
[16:20:16.434]             list <- base::list
[16:20:16.434]             seq.int <- base::seq.int
[16:20:16.434]             signalCondition <- base::signalCondition
[16:20:16.434]             sys.calls <- base::sys.calls
[16:20:16.434]             `[[` <- base::`[[`
[16:20:16.434]             `+` <- base::`+`
[16:20:16.434]             `<<-` <- base::`<<-`
[16:20:16.434]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:16.434]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:16.434]                   3L)]
[16:20:16.434]             }
[16:20:16.434]             function(cond) {
[16:20:16.434]                 is_error <- inherits(cond, "error")
[16:20:16.434]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:16.434]                   NULL)
[16:20:16.434]                 if (is_error) {
[16:20:16.434]                   sessionInformation <- function() {
[16:20:16.434]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:16.434]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:16.434]                       search = base::search(), system = base::Sys.info())
[16:20:16.434]                   }
[16:20:16.434]                   ...future.conditions[[length(...future.conditions) + 
[16:20:16.434]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:16.434]                     cond$call), session = sessionInformation(), 
[16:20:16.434]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:16.434]                   signalCondition(cond)
[16:20:16.434]                 }
[16:20:16.434]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:16.434]                 "immediateCondition"))) {
[16:20:16.434]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:16.434]                   ...future.conditions[[length(...future.conditions) + 
[16:20:16.434]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:16.434]                   if (TRUE && !signal) {
[16:20:16.434]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:16.434]                     {
[16:20:16.434]                       inherits <- base::inherits
[16:20:16.434]                       invokeRestart <- base::invokeRestart
[16:20:16.434]                       is.null <- base::is.null
[16:20:16.434]                       muffled <- FALSE
[16:20:16.434]                       if (inherits(cond, "message")) {
[16:20:16.434]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:16.434]                         if (muffled) 
[16:20:16.434]                           invokeRestart("muffleMessage")
[16:20:16.434]                       }
[16:20:16.434]                       else if (inherits(cond, "warning")) {
[16:20:16.434]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:16.434]                         if (muffled) 
[16:20:16.434]                           invokeRestart("muffleWarning")
[16:20:16.434]                       }
[16:20:16.434]                       else if (inherits(cond, "condition")) {
[16:20:16.434]                         if (!is.null(pattern)) {
[16:20:16.434]                           computeRestarts <- base::computeRestarts
[16:20:16.434]                           grepl <- base::grepl
[16:20:16.434]                           restarts <- computeRestarts(cond)
[16:20:16.434]                           for (restart in restarts) {
[16:20:16.434]                             name <- restart$name
[16:20:16.434]                             if (is.null(name)) 
[16:20:16.434]                               next
[16:20:16.434]                             if (!grepl(pattern, name)) 
[16:20:16.434]                               next
[16:20:16.434]                             invokeRestart(restart)
[16:20:16.434]                             muffled <- TRUE
[16:20:16.434]                             break
[16:20:16.434]                           }
[16:20:16.434]                         }
[16:20:16.434]                       }
[16:20:16.434]                       invisible(muffled)
[16:20:16.434]                     }
[16:20:16.434]                     muffleCondition(cond, pattern = "^muffle")
[16:20:16.434]                   }
[16:20:16.434]                 }
[16:20:16.434]                 else {
[16:20:16.434]                   if (TRUE) {
[16:20:16.434]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:16.434]                     {
[16:20:16.434]                       inherits <- base::inherits
[16:20:16.434]                       invokeRestart <- base::invokeRestart
[16:20:16.434]                       is.null <- base::is.null
[16:20:16.434]                       muffled <- FALSE
[16:20:16.434]                       if (inherits(cond, "message")) {
[16:20:16.434]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:16.434]                         if (muffled) 
[16:20:16.434]                           invokeRestart("muffleMessage")
[16:20:16.434]                       }
[16:20:16.434]                       else if (inherits(cond, "warning")) {
[16:20:16.434]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:16.434]                         if (muffled) 
[16:20:16.434]                           invokeRestart("muffleWarning")
[16:20:16.434]                       }
[16:20:16.434]                       else if (inherits(cond, "condition")) {
[16:20:16.434]                         if (!is.null(pattern)) {
[16:20:16.434]                           computeRestarts <- base::computeRestarts
[16:20:16.434]                           grepl <- base::grepl
[16:20:16.434]                           restarts <- computeRestarts(cond)
[16:20:16.434]                           for (restart in restarts) {
[16:20:16.434]                             name <- restart$name
[16:20:16.434]                             if (is.null(name)) 
[16:20:16.434]                               next
[16:20:16.434]                             if (!grepl(pattern, name)) 
[16:20:16.434]                               next
[16:20:16.434]                             invokeRestart(restart)
[16:20:16.434]                             muffled <- TRUE
[16:20:16.434]                             break
[16:20:16.434]                           }
[16:20:16.434]                         }
[16:20:16.434]                       }
[16:20:16.434]                       invisible(muffled)
[16:20:16.434]                     }
[16:20:16.434]                     muffleCondition(cond, pattern = "^muffle")
[16:20:16.434]                   }
[16:20:16.434]                 }
[16:20:16.434]             }
[16:20:16.434]         }))
[16:20:16.434]     }, error = function(ex) {
[16:20:16.434]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:16.434]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:16.434]                 ...future.rng), started = ...future.startTime, 
[16:20:16.434]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:16.434]             version = "1.8"), class = "FutureResult")
[16:20:16.434]     }, finally = {
[16:20:16.434]         if (!identical(...future.workdir, getwd())) 
[16:20:16.434]             setwd(...future.workdir)
[16:20:16.434]         {
[16:20:16.434]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:16.434]                 ...future.oldOptions$nwarnings <- NULL
[16:20:16.434]             }
[16:20:16.434]             base::options(...future.oldOptions)
[16:20:16.434]             if (.Platform$OS.type == "windows") {
[16:20:16.434]                 old_names <- names(...future.oldEnvVars)
[16:20:16.434]                 envs <- base::Sys.getenv()
[16:20:16.434]                 names <- names(envs)
[16:20:16.434]                 common <- intersect(names, old_names)
[16:20:16.434]                 added <- setdiff(names, old_names)
[16:20:16.434]                 removed <- setdiff(old_names, names)
[16:20:16.434]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:16.434]                   envs[common]]
[16:20:16.434]                 NAMES <- toupper(changed)
[16:20:16.434]                 args <- list()
[16:20:16.434]                 for (kk in seq_along(NAMES)) {
[16:20:16.434]                   name <- changed[[kk]]
[16:20:16.434]                   NAME <- NAMES[[kk]]
[16:20:16.434]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:16.434]                     next
[16:20:16.434]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:16.434]                 }
[16:20:16.434]                 NAMES <- toupper(added)
[16:20:16.434]                 for (kk in seq_along(NAMES)) {
[16:20:16.434]                   name <- added[[kk]]
[16:20:16.434]                   NAME <- NAMES[[kk]]
[16:20:16.434]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:16.434]                     next
[16:20:16.434]                   args[[name]] <- ""
[16:20:16.434]                 }
[16:20:16.434]                 NAMES <- toupper(removed)
[16:20:16.434]                 for (kk in seq_along(NAMES)) {
[16:20:16.434]                   name <- removed[[kk]]
[16:20:16.434]                   NAME <- NAMES[[kk]]
[16:20:16.434]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:16.434]                     next
[16:20:16.434]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:16.434]                 }
[16:20:16.434]                 if (length(args) > 0) 
[16:20:16.434]                   base::do.call(base::Sys.setenv, args = args)
[16:20:16.434]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:16.434]             }
[16:20:16.434]             else {
[16:20:16.434]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:16.434]             }
[16:20:16.434]             {
[16:20:16.434]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:16.434]                   0L) {
[16:20:16.434]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:16.434]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:16.434]                   base::options(opts)
[16:20:16.434]                 }
[16:20:16.434]                 {
[16:20:16.434]                   {
[16:20:16.434]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:16.434]                     NULL
[16:20:16.434]                   }
[16:20:16.434]                   options(future.plan = NULL)
[16:20:16.434]                   if (is.na(NA_character_)) 
[16:20:16.434]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:16.434]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:16.434]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:16.434]                     .init = FALSE)
[16:20:16.434]                 }
[16:20:16.434]             }
[16:20:16.434]         }
[16:20:16.434]     })
[16:20:16.434]     if (TRUE) {
[16:20:16.434]         base::sink(type = "output", split = FALSE)
[16:20:16.434]         if (TRUE) {
[16:20:16.434]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:16.434]         }
[16:20:16.434]         else {
[16:20:16.434]             ...future.result["stdout"] <- base::list(NULL)
[16:20:16.434]         }
[16:20:16.434]         base::close(...future.stdout)
[16:20:16.434]         ...future.stdout <- NULL
[16:20:16.434]     }
[16:20:16.434]     ...future.result$conditions <- ...future.conditions
[16:20:16.434]     ...future.result$finished <- base::Sys.time()
[16:20:16.434]     ...future.result
[16:20:16.434] }
[16:20:16.494] Exporting 4 global objects (14.24 KiB) to cluster node #2 ...
[16:20:16.494] Exporting ‘ii’ (56 bytes) to cluster node #2 ...
[16:20:16.494] Exporting ‘ii’ (56 bytes) to cluster node #2 ... DONE
[16:20:16.495] Exporting ‘n’ (56 bytes) to cluster node #2 ...
[16:20:16.495] Exporting ‘n’ (56 bytes) to cluster node #2 ... DONE
[16:20:16.495] Exporting ‘C’ (10.72 KiB) to cluster node #2 ...
[16:20:16.536] Exporting ‘C’ (10.72 KiB) to cluster node #2 ... DONE
[16:20:16.537] Exporting ‘delay’ (3.41 KiB) to cluster node #2 ...
[16:20:16.581] Exporting ‘delay’ (3.41 KiB) to cluster node #2 ... DONE
[16:20:16.581] Exporting 4 global objects (14.24 KiB) to cluster node #2 ... DONE
[16:20:16.582] MultisessionFuture started
[16:20:16.582] - Launch lazy future ... done
[16:20:16.582] run() for ‘MultisessionFuture’ ... done
[16:20:16.582] - run() ... done
[16:20:16.582] - resolved() ...
[16:20:16.593] - resolved: FALSE
[16:20:16.593] - resolved() ... done
[16:20:16.593] resolved() for ‘MultisessionFuture’ ... done
[16:20:16.593] resolved() for ‘Future’ ...
[16:20:16.593] - state: ‘created’
[16:20:16.593] - run: TRUE
[16:20:16.593] - run() ...
[16:20:16.593] run() for ‘Future’ ...
[16:20:16.593] - state: ‘created’
[16:20:16.594] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:20:16.608] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:16.608] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:20:16.608]   - Field: ‘node’
[16:20:16.608]   - Field: ‘label’
[16:20:16.608]   - Field: ‘local’
[16:20:16.608]   - Field: ‘owner’
[16:20:16.608]   - Field: ‘envir’
[16:20:16.609]   - Field: ‘workers’
[16:20:16.609]   - Field: ‘packages’
[16:20:16.609]   - Field: ‘gc’
[16:20:16.609]   - Field: ‘conditions’
[16:20:16.609]   - Field: ‘persistent’
[16:20:16.609]   - Field: ‘expr’
[16:20:16.609]   - Field: ‘uuid’
[16:20:16.609]   - Field: ‘seed’
[16:20:16.609]   - Field: ‘version’
[16:20:16.609]   - Field: ‘result’
[16:20:16.610]   - Field: ‘asynchronous’
[16:20:16.610]   - Field: ‘calls’
[16:20:16.610]   - Field: ‘globals’
[16:20:16.610]   - Field: ‘stdout’
[16:20:16.610]   - Field: ‘earlySignal’
[16:20:16.610]   - Field: ‘lazy’
[16:20:16.610]   - Field: ‘state’
[16:20:16.610] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:20:16.610] - Launch lazy future ...
[16:20:16.611] Packages needed by the future expression (n = 1): ‘future’
[16:20:16.611] Packages needed by future strategies (n = 0): <none>
[16:20:16.611] {
[16:20:16.611]     {
[16:20:16.611]         {
[16:20:16.611]             ...future.startTime <- base::Sys.time()
[16:20:16.611]             {
[16:20:16.611]                 {
[16:20:16.611]                   {
[16:20:16.611]                     {
[16:20:16.611]                       {
[16:20:16.611]                         base::local({
[16:20:16.611]                           has_future <- base::requireNamespace("future", 
[16:20:16.611]                             quietly = TRUE)
[16:20:16.611]                           if (has_future) {
[16:20:16.611]                             ns <- base::getNamespace("future")
[16:20:16.611]                             version <- ns[[".package"]][["version"]]
[16:20:16.611]                             if (is.null(version)) 
[16:20:16.611]                               version <- utils::packageVersion("future")
[16:20:16.611]                           }
[16:20:16.611]                           else {
[16:20:16.611]                             version <- NULL
[16:20:16.611]                           }
[16:20:16.611]                           if (!has_future || version < "1.8.0") {
[16:20:16.611]                             info <- base::c(r_version = base::gsub("R version ", 
[16:20:16.611]                               "", base::R.version$version.string), 
[16:20:16.611]                               platform = base::sprintf("%s (%s-bit)", 
[16:20:16.611]                                 base::R.version$platform, 8 * 
[16:20:16.611]                                   base::.Machine$sizeof.pointer), 
[16:20:16.611]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:16.611]                                 "release", "version")], collapse = " "), 
[16:20:16.611]                               hostname = base::Sys.info()[["nodename"]])
[16:20:16.611]                             info <- base::sprintf("%s: %s", base::names(info), 
[16:20:16.611]                               info)
[16:20:16.611]                             info <- base::paste(info, collapse = "; ")
[16:20:16.611]                             if (!has_future) {
[16:20:16.611]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:16.611]                                 info)
[16:20:16.611]                             }
[16:20:16.611]                             else {
[16:20:16.611]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:16.611]                                 info, version)
[16:20:16.611]                             }
[16:20:16.611]                             base::stop(msg)
[16:20:16.611]                           }
[16:20:16.611]                         })
[16:20:16.611]                       }
[16:20:16.611]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:16.611]                       base::options(mc.cores = 1L)
[16:20:16.611]                     }
[16:20:16.611]                     base::local({
[16:20:16.611]                       for (pkg in "future") {
[16:20:16.611]                         base::loadNamespace(pkg)
[16:20:16.611]                         base::library(pkg, character.only = TRUE)
[16:20:16.611]                       }
[16:20:16.611]                     })
[16:20:16.611]                   }
[16:20:16.611]                   ...future.strategy.old <- future::plan("list")
[16:20:16.611]                   options(future.plan = NULL)
[16:20:16.611]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:16.611]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:16.611]                 }
[16:20:16.611]                 ...future.workdir <- getwd()
[16:20:16.611]             }
[16:20:16.611]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:16.611]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:16.611]         }
[16:20:16.611]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:16.611]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:16.611]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:16.611]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:16.611]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:16.611]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:16.611]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:16.611]             base::names(...future.oldOptions))
[16:20:16.611]     }
[16:20:16.611]     if (FALSE) {
[16:20:16.611]     }
[16:20:16.611]     else {
[16:20:16.611]         if (TRUE) {
[16:20:16.611]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:16.611]                 open = "w")
[16:20:16.611]         }
[16:20:16.611]         else {
[16:20:16.611]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:16.611]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:16.611]         }
[16:20:16.611]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:16.611]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:16.611]             base::sink(type = "output", split = FALSE)
[16:20:16.611]             base::close(...future.stdout)
[16:20:16.611]         }, add = TRUE)
[16:20:16.611]     }
[16:20:16.611]     ...future.frame <- base::sys.nframe()
[16:20:16.611]     ...future.conditions <- base::list()
[16:20:16.611]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:16.611]     if (FALSE) {
[16:20:16.611]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:16.611]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:16.611]     }
[16:20:16.611]     ...future.result <- base::tryCatch({
[16:20:16.611]         base::withCallingHandlers({
[16:20:16.611]             ...future.value <- base::withVisible(base::local({
[16:20:16.611]                 ...future.makeSendCondition <- base::local({
[16:20:16.611]                   sendCondition <- NULL
[16:20:16.611]                   function(frame = 1L) {
[16:20:16.611]                     if (is.function(sendCondition)) 
[16:20:16.611]                       return(sendCondition)
[16:20:16.611]                     ns <- getNamespace("parallel")
[16:20:16.611]                     if (exists("sendData", mode = "function", 
[16:20:16.611]                       envir = ns)) {
[16:20:16.611]                       parallel_sendData <- get("sendData", mode = "function", 
[16:20:16.611]                         envir = ns)
[16:20:16.611]                       envir <- sys.frame(frame)
[16:20:16.611]                       master <- NULL
[16:20:16.611]                       while (!identical(envir, .GlobalEnv) && 
[16:20:16.611]                         !identical(envir, emptyenv())) {
[16:20:16.611]                         if (exists("master", mode = "list", envir = envir, 
[16:20:16.611]                           inherits = FALSE)) {
[16:20:16.611]                           master <- get("master", mode = "list", 
[16:20:16.611]                             envir = envir, inherits = FALSE)
[16:20:16.611]                           if (inherits(master, c("SOCKnode", 
[16:20:16.611]                             "SOCK0node"))) {
[16:20:16.611]                             sendCondition <<- function(cond) {
[16:20:16.611]                               data <- list(type = "VALUE", value = cond, 
[16:20:16.611]                                 success = TRUE)
[16:20:16.611]                               parallel_sendData(master, data)
[16:20:16.611]                             }
[16:20:16.611]                             return(sendCondition)
[16:20:16.611]                           }
[16:20:16.611]                         }
[16:20:16.611]                         frame <- frame + 1L
[16:20:16.611]                         envir <- sys.frame(frame)
[16:20:16.611]                       }
[16:20:16.611]                     }
[16:20:16.611]                     sendCondition <<- function(cond) NULL
[16:20:16.611]                   }
[16:20:16.611]                 })
[16:20:16.611]                 withCallingHandlers({
[16:20:16.611]                   {
[16:20:16.611]                     message(sprintf("Calculating tile #%d of %d ...", 
[16:20:16.611]                       ii, n), appendLF = FALSE)
[16:20:16.611]                     fit <- mandelbrot(C)
[16:20:16.611]                     delay(fit)
[16:20:16.611]                     message(" done")
[16:20:16.611]                     fit
[16:20:16.611]                   }
[16:20:16.611]                 }, immediateCondition = function(cond) {
[16:20:16.611]                   sendCondition <- ...future.makeSendCondition()
[16:20:16.611]                   sendCondition(cond)
[16:20:16.611]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:16.611]                   {
[16:20:16.611]                     inherits <- base::inherits
[16:20:16.611]                     invokeRestart <- base::invokeRestart
[16:20:16.611]                     is.null <- base::is.null
[16:20:16.611]                     muffled <- FALSE
[16:20:16.611]                     if (inherits(cond, "message")) {
[16:20:16.611]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:16.611]                       if (muffled) 
[16:20:16.611]                         invokeRestart("muffleMessage")
[16:20:16.611]                     }
[16:20:16.611]                     else if (inherits(cond, "warning")) {
[16:20:16.611]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:16.611]                       if (muffled) 
[16:20:16.611]                         invokeRestart("muffleWarning")
[16:20:16.611]                     }
[16:20:16.611]                     else if (inherits(cond, "condition")) {
[16:20:16.611]                       if (!is.null(pattern)) {
[16:20:16.611]                         computeRestarts <- base::computeRestarts
[16:20:16.611]                         grepl <- base::grepl
[16:20:16.611]                         restarts <- computeRestarts(cond)
[16:20:16.611]                         for (restart in restarts) {
[16:20:16.611]                           name <- restart$name
[16:20:16.611]                           if (is.null(name)) 
[16:20:16.611]                             next
[16:20:16.611]                           if (!grepl(pattern, name)) 
[16:20:16.611]                             next
[16:20:16.611]                           invokeRestart(restart)
[16:20:16.611]                           muffled <- TRUE
[16:20:16.611]                           break
[16:20:16.611]                         }
[16:20:16.611]                       }
[16:20:16.611]                     }
[16:20:16.611]                     invisible(muffled)
[16:20:16.611]                   }
[16:20:16.611]                   muffleCondition(cond)
[16:20:16.611]                 })
[16:20:16.611]             }))
[16:20:16.611]             future::FutureResult(value = ...future.value$value, 
[16:20:16.611]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:16.611]                   ...future.rng), globalenv = if (FALSE) 
[16:20:16.611]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:16.611]                     ...future.globalenv.names))
[16:20:16.611]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:16.611]         }, condition = base::local({
[16:20:16.611]             c <- base::c
[16:20:16.611]             inherits <- base::inherits
[16:20:16.611]             invokeRestart <- base::invokeRestart
[16:20:16.611]             length <- base::length
[16:20:16.611]             list <- base::list
[16:20:16.611]             seq.int <- base::seq.int
[16:20:16.611]             signalCondition <- base::signalCondition
[16:20:16.611]             sys.calls <- base::sys.calls
[16:20:16.611]             `[[` <- base::`[[`
[16:20:16.611]             `+` <- base::`+`
[16:20:16.611]             `<<-` <- base::`<<-`
[16:20:16.611]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:16.611]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:16.611]                   3L)]
[16:20:16.611]             }
[16:20:16.611]             function(cond) {
[16:20:16.611]                 is_error <- inherits(cond, "error")
[16:20:16.611]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:16.611]                   NULL)
[16:20:16.611]                 if (is_error) {
[16:20:16.611]                   sessionInformation <- function() {
[16:20:16.611]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:16.611]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:16.611]                       search = base::search(), system = base::Sys.info())
[16:20:16.611]                   }
[16:20:16.611]                   ...future.conditions[[length(...future.conditions) + 
[16:20:16.611]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:16.611]                     cond$call), session = sessionInformation(), 
[16:20:16.611]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:16.611]                   signalCondition(cond)
[16:20:16.611]                 }
[16:20:16.611]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:16.611]                 "immediateCondition"))) {
[16:20:16.611]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:16.611]                   ...future.conditions[[length(...future.conditions) + 
[16:20:16.611]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:16.611]                   if (TRUE && !signal) {
[16:20:16.611]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:16.611]                     {
[16:20:16.611]                       inherits <- base::inherits
[16:20:16.611]                       invokeRestart <- base::invokeRestart
[16:20:16.611]                       is.null <- base::is.null
[16:20:16.611]                       muffled <- FALSE
[16:20:16.611]                       if (inherits(cond, "message")) {
[16:20:16.611]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:16.611]                         if (muffled) 
[16:20:16.611]                           invokeRestart("muffleMessage")
[16:20:16.611]                       }
[16:20:16.611]                       else if (inherits(cond, "warning")) {
[16:20:16.611]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:16.611]                         if (muffled) 
[16:20:16.611]                           invokeRestart("muffleWarning")
[16:20:16.611]                       }
[16:20:16.611]                       else if (inherits(cond, "condition")) {
[16:20:16.611]                         if (!is.null(pattern)) {
[16:20:16.611]                           computeRestarts <- base::computeRestarts
[16:20:16.611]                           grepl <- base::grepl
[16:20:16.611]                           restarts <- computeRestarts(cond)
[16:20:16.611]                           for (restart in restarts) {
[16:20:16.611]                             name <- restart$name
[16:20:16.611]                             if (is.null(name)) 
[16:20:16.611]                               next
[16:20:16.611]                             if (!grepl(pattern, name)) 
[16:20:16.611]                               next
[16:20:16.611]                             invokeRestart(restart)
[16:20:16.611]                             muffled <- TRUE
[16:20:16.611]                             break
[16:20:16.611]                           }
[16:20:16.611]                         }
[16:20:16.611]                       }
[16:20:16.611]                       invisible(muffled)
[16:20:16.611]                     }
[16:20:16.611]                     muffleCondition(cond, pattern = "^muffle")
[16:20:16.611]                   }
[16:20:16.611]                 }
[16:20:16.611]                 else {
[16:20:16.611]                   if (TRUE) {
[16:20:16.611]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:16.611]                     {
[16:20:16.611]                       inherits <- base::inherits
[16:20:16.611]                       invokeRestart <- base::invokeRestart
[16:20:16.611]                       is.null <- base::is.null
[16:20:16.611]                       muffled <- FALSE
[16:20:16.611]                       if (inherits(cond, "message")) {
[16:20:16.611]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:16.611]                         if (muffled) 
[16:20:16.611]                           invokeRestart("muffleMessage")
[16:20:16.611]                       }
[16:20:16.611]                       else if (inherits(cond, "warning")) {
[16:20:16.611]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:16.611]                         if (muffled) 
[16:20:16.611]                           invokeRestart("muffleWarning")
[16:20:16.611]                       }
[16:20:16.611]                       else if (inherits(cond, "condition")) {
[16:20:16.611]                         if (!is.null(pattern)) {
[16:20:16.611]                           computeRestarts <- base::computeRestarts
[16:20:16.611]                           grepl <- base::grepl
[16:20:16.611]                           restarts <- computeRestarts(cond)
[16:20:16.611]                           for (restart in restarts) {
[16:20:16.611]                             name <- restart$name
[16:20:16.611]                             if (is.null(name)) 
[16:20:16.611]                               next
[16:20:16.611]                             if (!grepl(pattern, name)) 
[16:20:16.611]                               next
[16:20:16.611]                             invokeRestart(restart)
[16:20:16.611]                             muffled <- TRUE
[16:20:16.611]                             break
[16:20:16.611]                           }
[16:20:16.611]                         }
[16:20:16.611]                       }
[16:20:16.611]                       invisible(muffled)
[16:20:16.611]                     }
[16:20:16.611]                     muffleCondition(cond, pattern = "^muffle")
[16:20:16.611]                   }
[16:20:16.611]                 }
[16:20:16.611]             }
[16:20:16.611]         }))
[16:20:16.611]     }, error = function(ex) {
[16:20:16.611]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:16.611]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:16.611]                 ...future.rng), started = ...future.startTime, 
[16:20:16.611]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:16.611]             version = "1.8"), class = "FutureResult")
[16:20:16.611]     }, finally = {
[16:20:16.611]         if (!identical(...future.workdir, getwd())) 
[16:20:16.611]             setwd(...future.workdir)
[16:20:16.611]         {
[16:20:16.611]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:16.611]                 ...future.oldOptions$nwarnings <- NULL
[16:20:16.611]             }
[16:20:16.611]             base::options(...future.oldOptions)
[16:20:16.611]             if (.Platform$OS.type == "windows") {
[16:20:16.611]                 old_names <- names(...future.oldEnvVars)
[16:20:16.611]                 envs <- base::Sys.getenv()
[16:20:16.611]                 names <- names(envs)
[16:20:16.611]                 common <- intersect(names, old_names)
[16:20:16.611]                 added <- setdiff(names, old_names)
[16:20:16.611]                 removed <- setdiff(old_names, names)
[16:20:16.611]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:16.611]                   envs[common]]
[16:20:16.611]                 NAMES <- toupper(changed)
[16:20:16.611]                 args <- list()
[16:20:16.611]                 for (kk in seq_along(NAMES)) {
[16:20:16.611]                   name <- changed[[kk]]
[16:20:16.611]                   NAME <- NAMES[[kk]]
[16:20:16.611]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:16.611]                     next
[16:20:16.611]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:16.611]                 }
[16:20:16.611]                 NAMES <- toupper(added)
[16:20:16.611]                 for (kk in seq_along(NAMES)) {
[16:20:16.611]                   name <- added[[kk]]
[16:20:16.611]                   NAME <- NAMES[[kk]]
[16:20:16.611]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:16.611]                     next
[16:20:16.611]                   args[[name]] <- ""
[16:20:16.611]                 }
[16:20:16.611]                 NAMES <- toupper(removed)
[16:20:16.611]                 for (kk in seq_along(NAMES)) {
[16:20:16.611]                   name <- removed[[kk]]
[16:20:16.611]                   NAME <- NAMES[[kk]]
[16:20:16.611]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:16.611]                     next
[16:20:16.611]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:16.611]                 }
[16:20:16.611]                 if (length(args) > 0) 
[16:20:16.611]                   base::do.call(base::Sys.setenv, args = args)
[16:20:16.611]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:16.611]             }
[16:20:16.611]             else {
[16:20:16.611]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:16.611]             }
[16:20:16.611]             {
[16:20:16.611]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:16.611]                   0L) {
[16:20:16.611]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:16.611]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:16.611]                   base::options(opts)
[16:20:16.611]                 }
[16:20:16.611]                 {
[16:20:16.611]                   {
[16:20:16.611]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:16.611]                     NULL
[16:20:16.611]                   }
[16:20:16.611]                   options(future.plan = NULL)
[16:20:16.611]                   if (is.na(NA_character_)) 
[16:20:16.611]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:16.611]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:16.611]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:16.611]                     .init = FALSE)
[16:20:16.611]                 }
[16:20:16.611]             }
[16:20:16.611]         }
[16:20:16.611]     })
[16:20:16.611]     if (TRUE) {
[16:20:16.611]         base::sink(type = "output", split = FALSE)
[16:20:16.611]         if (TRUE) {
[16:20:16.611]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:16.611]         }
[16:20:16.611]         else {
[16:20:16.611]             ...future.result["stdout"] <- base::list(NULL)
[16:20:16.611]         }
[16:20:16.611]         base::close(...future.stdout)
[16:20:16.611]         ...future.stdout <- NULL
[16:20:16.611]     }
[16:20:16.611]     ...future.result$conditions <- ...future.conditions
[16:20:16.611]     ...future.result$finished <- base::Sys.time()
[16:20:16.611]     ...future.result
[16:20:16.611] }
[16:20:16.613] Poll #1 (0): usedNodes() = 2, workers = 2
[16:20:16.632] receiveMessageFromWorker() for ClusterFuture ...
[16:20:16.632] - Validating connection of MultisessionFuture
[16:20:16.633] - received message: FutureResult
[16:20:16.633] - Received FutureResult
[16:20:16.633] - Erased future from FutureRegistry
[16:20:16.633] result() for ClusterFuture ...
[16:20:16.633] - result already collected: FutureResult
[16:20:16.633] result() for ClusterFuture ... done
[16:20:16.633] signalConditions() ...
[16:20:16.633]  - include = ‘immediateCondition’
[16:20:16.633]  - exclude = 
[16:20:16.634]  - resignal = FALSE
[16:20:16.634]  - Number of conditions: 2
[16:20:16.634] signalConditions() ... done
[16:20:16.634] receiveMessageFromWorker() for ClusterFuture ... done
[16:20:16.634] result() for ClusterFuture ...
[16:20:16.634] - result already collected: FutureResult
[16:20:16.634] result() for ClusterFuture ... done
[16:20:16.634] result() for ClusterFuture ...
[16:20:16.634] - result already collected: FutureResult
[16:20:16.634] result() for ClusterFuture ... done
[16:20:16.634] signalConditions() ...
[16:20:16.635]  - include = ‘immediateCondition’
[16:20:16.635]  - exclude = 
[16:20:16.635]  - resignal = FALSE
[16:20:16.635]  - Number of conditions: 2
[16:20:16.635] signalConditions() ... done
[16:20:16.636] Exporting 4 global objects (14.24 KiB) to cluster node #1 ...
[16:20:16.636] Exporting ‘ii’ (56 bytes) to cluster node #1 ...
[16:20:16.636] Exporting ‘ii’ (56 bytes) to cluster node #1 ... DONE
[16:20:16.636] Exporting ‘n’ (56 bytes) to cluster node #1 ...
[16:20:16.637] Exporting ‘n’ (56 bytes) to cluster node #1 ... DONE
[16:20:16.637] Exporting ‘C’ (10.72 KiB) to cluster node #1 ...
[16:20:16.681] Exporting ‘C’ (10.72 KiB) to cluster node #1 ... DONE
[16:20:16.681] Exporting ‘delay’ (3.41 KiB) to cluster node #1 ...
[16:20:16.725] Exporting ‘delay’ (3.41 KiB) to cluster node #1 ... DONE
[16:20:16.725] Exporting 4 global objects (14.24 KiB) to cluster node #1 ... DONE
[16:20:16.726] MultisessionFuture started
[16:20:16.726] - Launch lazy future ... done
[16:20:16.726] run() for ‘MultisessionFuture’ ... done
[16:20:16.726] - run() ... done
[16:20:16.727] - resolved() ...
[16:20:16.737] - resolved: FALSE
[16:20:16.737] - resolved() ... done
[16:20:16.737] resolved() for ‘MultisessionFuture’ ... done
[16:20:16.738] resolved() for ‘Future’ ...
[16:20:16.738] - state: ‘created’
[16:20:16.738] - run: TRUE
[16:20:16.738] - run() ...
[16:20:16.738] run() for ‘Future’ ...
[16:20:16.738] - state: ‘created’
[16:20:16.738] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:20:16.753] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:16.753] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:20:16.753]   - Field: ‘node’
[16:20:16.753]   - Field: ‘label’
[16:20:16.753]   - Field: ‘local’
[16:20:16.753]   - Field: ‘owner’
[16:20:16.753]   - Field: ‘envir’
[16:20:16.754]   - Field: ‘workers’
[16:20:16.754]   - Field: ‘packages’
[16:20:16.754]   - Field: ‘gc’
[16:20:16.754]   - Field: ‘conditions’
[16:20:16.754]   - Field: ‘persistent’
[16:20:16.754]   - Field: ‘expr’
[16:20:16.754]   - Field: ‘uuid’
[16:20:16.754]   - Field: ‘seed’
[16:20:16.754]   - Field: ‘version’
[16:20:16.754]   - Field: ‘result’
[16:20:16.754]   - Field: ‘asynchronous’
[16:20:16.755]   - Field: ‘calls’
[16:20:16.755]   - Field: ‘globals’
[16:20:16.755]   - Field: ‘stdout’
[16:20:16.755]   - Field: ‘earlySignal’
[16:20:16.755]   - Field: ‘lazy’
[16:20:16.755]   - Field: ‘state’
[16:20:16.755] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:20:16.755] - Launch lazy future ...
[16:20:16.756] Packages needed by the future expression (n = 1): ‘future’
[16:20:16.756] Packages needed by future strategies (n = 0): <none>
[16:20:16.756] {
[16:20:16.756]     {
[16:20:16.756]         {
[16:20:16.756]             ...future.startTime <- base::Sys.time()
[16:20:16.756]             {
[16:20:16.756]                 {
[16:20:16.756]                   {
[16:20:16.756]                     {
[16:20:16.756]                       {
[16:20:16.756]                         base::local({
[16:20:16.756]                           has_future <- base::requireNamespace("future", 
[16:20:16.756]                             quietly = TRUE)
[16:20:16.756]                           if (has_future) {
[16:20:16.756]                             ns <- base::getNamespace("future")
[16:20:16.756]                             version <- ns[[".package"]][["version"]]
[16:20:16.756]                             if (is.null(version)) 
[16:20:16.756]                               version <- utils::packageVersion("future")
[16:20:16.756]                           }
[16:20:16.756]                           else {
[16:20:16.756]                             version <- NULL
[16:20:16.756]                           }
[16:20:16.756]                           if (!has_future || version < "1.8.0") {
[16:20:16.756]                             info <- base::c(r_version = base::gsub("R version ", 
[16:20:16.756]                               "", base::R.version$version.string), 
[16:20:16.756]                               platform = base::sprintf("%s (%s-bit)", 
[16:20:16.756]                                 base::R.version$platform, 8 * 
[16:20:16.756]                                   base::.Machine$sizeof.pointer), 
[16:20:16.756]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:16.756]                                 "release", "version")], collapse = " "), 
[16:20:16.756]                               hostname = base::Sys.info()[["nodename"]])
[16:20:16.756]                             info <- base::sprintf("%s: %s", base::names(info), 
[16:20:16.756]                               info)
[16:20:16.756]                             info <- base::paste(info, collapse = "; ")
[16:20:16.756]                             if (!has_future) {
[16:20:16.756]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:16.756]                                 info)
[16:20:16.756]                             }
[16:20:16.756]                             else {
[16:20:16.756]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:16.756]                                 info, version)
[16:20:16.756]                             }
[16:20:16.756]                             base::stop(msg)
[16:20:16.756]                           }
[16:20:16.756]                         })
[16:20:16.756]                       }
[16:20:16.756]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:16.756]                       base::options(mc.cores = 1L)
[16:20:16.756]                     }
[16:20:16.756]                     base::local({
[16:20:16.756]                       for (pkg in "future") {
[16:20:16.756]                         base::loadNamespace(pkg)
[16:20:16.756]                         base::library(pkg, character.only = TRUE)
[16:20:16.756]                       }
[16:20:16.756]                     })
[16:20:16.756]                   }
[16:20:16.756]                   ...future.strategy.old <- future::plan("list")
[16:20:16.756]                   options(future.plan = NULL)
[16:20:16.756]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:16.756]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:16.756]                 }
[16:20:16.756]                 ...future.workdir <- getwd()
[16:20:16.756]             }
[16:20:16.756]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:16.756]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:16.756]         }
[16:20:16.756]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:16.756]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:16.756]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:16.756]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:16.756]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:16.756]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:16.756]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:16.756]             base::names(...future.oldOptions))
[16:20:16.756]     }
[16:20:16.756]     if (FALSE) {
[16:20:16.756]     }
[16:20:16.756]     else {
[16:20:16.756]         if (TRUE) {
[16:20:16.756]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:16.756]                 open = "w")
[16:20:16.756]         }
[16:20:16.756]         else {
[16:20:16.756]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:16.756]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:16.756]         }
[16:20:16.756]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:16.756]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:16.756]             base::sink(type = "output", split = FALSE)
[16:20:16.756]             base::close(...future.stdout)
[16:20:16.756]         }, add = TRUE)
[16:20:16.756]     }
[16:20:16.756]     ...future.frame <- base::sys.nframe()
[16:20:16.756]     ...future.conditions <- base::list()
[16:20:16.756]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:16.756]     if (FALSE) {
[16:20:16.756]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:16.756]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:16.756]     }
[16:20:16.756]     ...future.result <- base::tryCatch({
[16:20:16.756]         base::withCallingHandlers({
[16:20:16.756]             ...future.value <- base::withVisible(base::local({
[16:20:16.756]                 ...future.makeSendCondition <- base::local({
[16:20:16.756]                   sendCondition <- NULL
[16:20:16.756]                   function(frame = 1L) {
[16:20:16.756]                     if (is.function(sendCondition)) 
[16:20:16.756]                       return(sendCondition)
[16:20:16.756]                     ns <- getNamespace("parallel")
[16:20:16.756]                     if (exists("sendData", mode = "function", 
[16:20:16.756]                       envir = ns)) {
[16:20:16.756]                       parallel_sendData <- get("sendData", mode = "function", 
[16:20:16.756]                         envir = ns)
[16:20:16.756]                       envir <- sys.frame(frame)
[16:20:16.756]                       master <- NULL
[16:20:16.756]                       while (!identical(envir, .GlobalEnv) && 
[16:20:16.756]                         !identical(envir, emptyenv())) {
[16:20:16.756]                         if (exists("master", mode = "list", envir = envir, 
[16:20:16.756]                           inherits = FALSE)) {
[16:20:16.756]                           master <- get("master", mode = "list", 
[16:20:16.756]                             envir = envir, inherits = FALSE)
[16:20:16.756]                           if (inherits(master, c("SOCKnode", 
[16:20:16.756]                             "SOCK0node"))) {
[16:20:16.756]                             sendCondition <<- function(cond) {
[16:20:16.756]                               data <- list(type = "VALUE", value = cond, 
[16:20:16.756]                                 success = TRUE)
[16:20:16.756]                               parallel_sendData(master, data)
[16:20:16.756]                             }
[16:20:16.756]                             return(sendCondition)
[16:20:16.756]                           }
[16:20:16.756]                         }
[16:20:16.756]                         frame <- frame + 1L
[16:20:16.756]                         envir <- sys.frame(frame)
[16:20:16.756]                       }
[16:20:16.756]                     }
[16:20:16.756]                     sendCondition <<- function(cond) NULL
[16:20:16.756]                   }
[16:20:16.756]                 })
[16:20:16.756]                 withCallingHandlers({
[16:20:16.756]                   {
[16:20:16.756]                     message(sprintf("Calculating tile #%d of %d ...", 
[16:20:16.756]                       ii, n), appendLF = FALSE)
[16:20:16.756]                     fit <- mandelbrot(C)
[16:20:16.756]                     delay(fit)
[16:20:16.756]                     message(" done")
[16:20:16.756]                     fit
[16:20:16.756]                   }
[16:20:16.756]                 }, immediateCondition = function(cond) {
[16:20:16.756]                   sendCondition <- ...future.makeSendCondition()
[16:20:16.756]                   sendCondition(cond)
[16:20:16.756]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:16.756]                   {
[16:20:16.756]                     inherits <- base::inherits
[16:20:16.756]                     invokeRestart <- base::invokeRestart
[16:20:16.756]                     is.null <- base::is.null
[16:20:16.756]                     muffled <- FALSE
[16:20:16.756]                     if (inherits(cond, "message")) {
[16:20:16.756]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:16.756]                       if (muffled) 
[16:20:16.756]                         invokeRestart("muffleMessage")
[16:20:16.756]                     }
[16:20:16.756]                     else if (inherits(cond, "warning")) {
[16:20:16.756]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:16.756]                       if (muffled) 
[16:20:16.756]                         invokeRestart("muffleWarning")
[16:20:16.756]                     }
[16:20:16.756]                     else if (inherits(cond, "condition")) {
[16:20:16.756]                       if (!is.null(pattern)) {
[16:20:16.756]                         computeRestarts <- base::computeRestarts
[16:20:16.756]                         grepl <- base::grepl
[16:20:16.756]                         restarts <- computeRestarts(cond)
[16:20:16.756]                         for (restart in restarts) {
[16:20:16.756]                           name <- restart$name
[16:20:16.756]                           if (is.null(name)) 
[16:20:16.756]                             next
[16:20:16.756]                           if (!grepl(pattern, name)) 
[16:20:16.756]                             next
[16:20:16.756]                           invokeRestart(restart)
[16:20:16.756]                           muffled <- TRUE
[16:20:16.756]                           break
[16:20:16.756]                         }
[16:20:16.756]                       }
[16:20:16.756]                     }
[16:20:16.756]                     invisible(muffled)
[16:20:16.756]                   }
[16:20:16.756]                   muffleCondition(cond)
[16:20:16.756]                 })
[16:20:16.756]             }))
[16:20:16.756]             future::FutureResult(value = ...future.value$value, 
[16:20:16.756]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:16.756]                   ...future.rng), globalenv = if (FALSE) 
[16:20:16.756]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:16.756]                     ...future.globalenv.names))
[16:20:16.756]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:16.756]         }, condition = base::local({
[16:20:16.756]             c <- base::c
[16:20:16.756]             inherits <- base::inherits
[16:20:16.756]             invokeRestart <- base::invokeRestart
[16:20:16.756]             length <- base::length
[16:20:16.756]             list <- base::list
[16:20:16.756]             seq.int <- base::seq.int
[16:20:16.756]             signalCondition <- base::signalCondition
[16:20:16.756]             sys.calls <- base::sys.calls
[16:20:16.756]             `[[` <- base::`[[`
[16:20:16.756]             `+` <- base::`+`
[16:20:16.756]             `<<-` <- base::`<<-`
[16:20:16.756]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:16.756]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:16.756]                   3L)]
[16:20:16.756]             }
[16:20:16.756]             function(cond) {
[16:20:16.756]                 is_error <- inherits(cond, "error")
[16:20:16.756]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:16.756]                   NULL)
[16:20:16.756]                 if (is_error) {
[16:20:16.756]                   sessionInformation <- function() {
[16:20:16.756]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:16.756]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:16.756]                       search = base::search(), system = base::Sys.info())
[16:20:16.756]                   }
[16:20:16.756]                   ...future.conditions[[length(...future.conditions) + 
[16:20:16.756]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:16.756]                     cond$call), session = sessionInformation(), 
[16:20:16.756]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:16.756]                   signalCondition(cond)
[16:20:16.756]                 }
[16:20:16.756]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:16.756]                 "immediateCondition"))) {
[16:20:16.756]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:16.756]                   ...future.conditions[[length(...future.conditions) + 
[16:20:16.756]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:16.756]                   if (TRUE && !signal) {
[16:20:16.756]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:16.756]                     {
[16:20:16.756]                       inherits <- base::inherits
[16:20:16.756]                       invokeRestart <- base::invokeRestart
[16:20:16.756]                       is.null <- base::is.null
[16:20:16.756]                       muffled <- FALSE
[16:20:16.756]                       if (inherits(cond, "message")) {
[16:20:16.756]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:16.756]                         if (muffled) 
[16:20:16.756]                           invokeRestart("muffleMessage")
[16:20:16.756]                       }
[16:20:16.756]                       else if (inherits(cond, "warning")) {
[16:20:16.756]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:16.756]                         if (muffled) 
[16:20:16.756]                           invokeRestart("muffleWarning")
[16:20:16.756]                       }
[16:20:16.756]                       else if (inherits(cond, "condition")) {
[16:20:16.756]                         if (!is.null(pattern)) {
[16:20:16.756]                           computeRestarts <- base::computeRestarts
[16:20:16.756]                           grepl <- base::grepl
[16:20:16.756]                           restarts <- computeRestarts(cond)
[16:20:16.756]                           for (restart in restarts) {
[16:20:16.756]                             name <- restart$name
[16:20:16.756]                             if (is.null(name)) 
[16:20:16.756]                               next
[16:20:16.756]                             if (!grepl(pattern, name)) 
[16:20:16.756]                               next
[16:20:16.756]                             invokeRestart(restart)
[16:20:16.756]                             muffled <- TRUE
[16:20:16.756]                             break
[16:20:16.756]                           }
[16:20:16.756]                         }
[16:20:16.756]                       }
[16:20:16.756]                       invisible(muffled)
[16:20:16.756]                     }
[16:20:16.756]                     muffleCondition(cond, pattern = "^muffle")
[16:20:16.756]                   }
[16:20:16.756]                 }
[16:20:16.756]                 else {
[16:20:16.756]                   if (TRUE) {
[16:20:16.756]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:16.756]                     {
[16:20:16.756]                       inherits <- base::inherits
[16:20:16.756]                       invokeRestart <- base::invokeRestart
[16:20:16.756]                       is.null <- base::is.null
[16:20:16.756]                       muffled <- FALSE
[16:20:16.756]                       if (inherits(cond, "message")) {
[16:20:16.756]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:16.756]                         if (muffled) 
[16:20:16.756]                           invokeRestart("muffleMessage")
[16:20:16.756]                       }
[16:20:16.756]                       else if (inherits(cond, "warning")) {
[16:20:16.756]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:16.756]                         if (muffled) 
[16:20:16.756]                           invokeRestart("muffleWarning")
[16:20:16.756]                       }
[16:20:16.756]                       else if (inherits(cond, "condition")) {
[16:20:16.756]                         if (!is.null(pattern)) {
[16:20:16.756]                           computeRestarts <- base::computeRestarts
[16:20:16.756]                           grepl <- base::grepl
[16:20:16.756]                           restarts <- computeRestarts(cond)
[16:20:16.756]                           for (restart in restarts) {
[16:20:16.756]                             name <- restart$name
[16:20:16.756]                             if (is.null(name)) 
[16:20:16.756]                               next
[16:20:16.756]                             if (!grepl(pattern, name)) 
[16:20:16.756]                               next
[16:20:16.756]                             invokeRestart(restart)
[16:20:16.756]                             muffled <- TRUE
[16:20:16.756]                             break
[16:20:16.756]                           }
[16:20:16.756]                         }
[16:20:16.756]                       }
[16:20:16.756]                       invisible(muffled)
[16:20:16.756]                     }
[16:20:16.756]                     muffleCondition(cond, pattern = "^muffle")
[16:20:16.756]                   }
[16:20:16.756]                 }
[16:20:16.756]             }
[16:20:16.756]         }))
[16:20:16.756]     }, error = function(ex) {
[16:20:16.756]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:16.756]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:16.756]                 ...future.rng), started = ...future.startTime, 
[16:20:16.756]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:16.756]             version = "1.8"), class = "FutureResult")
[16:20:16.756]     }, finally = {
[16:20:16.756]         if (!identical(...future.workdir, getwd())) 
[16:20:16.756]             setwd(...future.workdir)
[16:20:16.756]         {
[16:20:16.756]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:16.756]                 ...future.oldOptions$nwarnings <- NULL
[16:20:16.756]             }
[16:20:16.756]             base::options(...future.oldOptions)
[16:20:16.756]             if (.Platform$OS.type == "windows") {
[16:20:16.756]                 old_names <- names(...future.oldEnvVars)
[16:20:16.756]                 envs <- base::Sys.getenv()
[16:20:16.756]                 names <- names(envs)
[16:20:16.756]                 common <- intersect(names, old_names)
[16:20:16.756]                 added <- setdiff(names, old_names)
[16:20:16.756]                 removed <- setdiff(old_names, names)
[16:20:16.756]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:16.756]                   envs[common]]
[16:20:16.756]                 NAMES <- toupper(changed)
[16:20:16.756]                 args <- list()
[16:20:16.756]                 for (kk in seq_along(NAMES)) {
[16:20:16.756]                   name <- changed[[kk]]
[16:20:16.756]                   NAME <- NAMES[[kk]]
[16:20:16.756]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:16.756]                     next
[16:20:16.756]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:16.756]                 }
[16:20:16.756]                 NAMES <- toupper(added)
[16:20:16.756]                 for (kk in seq_along(NAMES)) {
[16:20:16.756]                   name <- added[[kk]]
[16:20:16.756]                   NAME <- NAMES[[kk]]
[16:20:16.756]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:16.756]                     next
[16:20:16.756]                   args[[name]] <- ""
[16:20:16.756]                 }
[16:20:16.756]                 NAMES <- toupper(removed)
[16:20:16.756]                 for (kk in seq_along(NAMES)) {
[16:20:16.756]                   name <- removed[[kk]]
[16:20:16.756]                   NAME <- NAMES[[kk]]
[16:20:16.756]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:16.756]                     next
[16:20:16.756]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:16.756]                 }
[16:20:16.756]                 if (length(args) > 0) 
[16:20:16.756]                   base::do.call(base::Sys.setenv, args = args)
[16:20:16.756]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:16.756]             }
[16:20:16.756]             else {
[16:20:16.756]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:16.756]             }
[16:20:16.756]             {
[16:20:16.756]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:16.756]                   0L) {
[16:20:16.756]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:16.756]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:16.756]                   base::options(opts)
[16:20:16.756]                 }
[16:20:16.756]                 {
[16:20:16.756]                   {
[16:20:16.756]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:16.756]                     NULL
[16:20:16.756]                   }
[16:20:16.756]                   options(future.plan = NULL)
[16:20:16.756]                   if (is.na(NA_character_)) 
[16:20:16.756]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:16.756]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:16.756]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:16.756]                     .init = FALSE)
[16:20:16.756]                 }
[16:20:16.756]             }
[16:20:16.756]         }
[16:20:16.756]     })
[16:20:16.756]     if (TRUE) {
[16:20:16.756]         base::sink(type = "output", split = FALSE)
[16:20:16.756]         if (TRUE) {
[16:20:16.756]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:16.756]         }
[16:20:16.756]         else {
[16:20:16.756]             ...future.result["stdout"] <- base::list(NULL)
[16:20:16.756]         }
[16:20:16.756]         base::close(...future.stdout)
[16:20:16.756]         ...future.stdout <- NULL
[16:20:16.756]     }
[16:20:16.756]     ...future.result$conditions <- ...future.conditions
[16:20:16.756]     ...future.result$finished <- base::Sys.time()
[16:20:16.756]     ...future.result
[16:20:16.756] }
[16:20:16.759] Poll #1 (0): usedNodes() = 2, workers = 2
[16:20:16.769] receiveMessageFromWorker() for ClusterFuture ...
[16:20:16.770] - Validating connection of MultisessionFuture
[16:20:16.770] - received message: FutureResult
[16:20:16.771] - Received FutureResult
[16:20:16.771] - Erased future from FutureRegistry
[16:20:16.771] result() for ClusterFuture ...
[16:20:16.771] - result already collected: FutureResult
[16:20:16.771] result() for ClusterFuture ... done
[16:20:16.771] signalConditions() ...
[16:20:16.771]  - include = ‘immediateCondition’
[16:20:16.772]  - exclude = 
[16:20:16.772]  - resignal = FALSE
[16:20:16.772]  - Number of conditions: 2
[16:20:16.772] signalConditions() ... done
[16:20:16.772] receiveMessageFromWorker() for ClusterFuture ... done
[16:20:16.772] result() for ClusterFuture ...
[16:20:16.773] - result already collected: FutureResult
[16:20:16.773] result() for ClusterFuture ... done
[16:20:16.773] result() for ClusterFuture ...
[16:20:16.773] - result already collected: FutureResult
[16:20:16.773] result() for ClusterFuture ... done
[16:20:16.773] signalConditions() ...
[16:20:16.774]  - include = ‘immediateCondition’
[16:20:16.774]  - exclude = 
[16:20:16.774]  - resignal = FALSE
[16:20:16.774]  - Number of conditions: 2
[16:20:16.774] signalConditions() ... done
[16:20:16.775] Exporting 4 global objects (14.24 KiB) to cluster node #2 ...
[16:20:16.775] Exporting ‘ii’ (56 bytes) to cluster node #2 ...
[16:20:16.776] Exporting ‘ii’ (56 bytes) to cluster node #2 ... DONE
[16:20:16.776] Exporting ‘n’ (56 bytes) to cluster node #2 ...
[16:20:16.776] Exporting ‘n’ (56 bytes) to cluster node #2 ... DONE
[16:20:16.777] Exporting ‘C’ (10.72 KiB) to cluster node #2 ...
[16:20:16.821] Exporting ‘C’ (10.72 KiB) to cluster node #2 ... DONE
[16:20:16.821] Exporting ‘delay’ (3.41 KiB) to cluster node #2 ...
[16:20:16.865] Exporting ‘delay’ (3.41 KiB) to cluster node #2 ... DONE
[16:20:16.865] Exporting 4 global objects (14.24 KiB) to cluster node #2 ... DONE
[16:20:16.866] MultisessionFuture started
[16:20:16.866] - Launch lazy future ... done
[16:20:16.866] run() for ‘MultisessionFuture’ ... done
[16:20:16.866] - run() ... done
[16:20:16.866] - resolved() ...
[16:20:16.877] - resolved: FALSE
[16:20:16.877] - resolved() ... done
[16:20:16.877] resolved() for ‘MultisessionFuture’ ... done
Plotting tile #1 of 4 ...
[16:20:16.877] result() for ClusterFuture ...
[16:20:16.877] - result already collected: FutureResult
[16:20:16.878] result() for ClusterFuture ... done
[16:20:16.878] result() for ClusterFuture ...
[16:20:16.878] - result already collected: FutureResult
[16:20:16.878] result() for ClusterFuture ... done
[16:20:16.878] signalConditions() ...
[16:20:16.878]  - include = ‘immediateCondition’
[16:20:16.878]  - exclude = 
[16:20:16.878]  - resignal = FALSE
[16:20:16.878]  - Number of conditions: 2
[16:20:16.878] signalConditions() ... done
[16:20:16.879] Future state: ‘finished’
[16:20:16.879] result() for ClusterFuture ...
[16:20:16.879] - result already collected: FutureResult
[16:20:16.879] result() for ClusterFuture ... done
[16:20:16.879] signalConditions() ...
[16:20:16.879]  - include = ‘condition’
[16:20:16.879]  - exclude = ‘immediateCondition’
[16:20:16.879]  - resignal = TRUE
[16:20:16.879]  - Number of conditions: 2
[16:20:16.879]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #1 of 4 ...[16:20:16.879]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[16:20:16.882] signalConditions() ... done
Plotting tile #2 of 4 ...
[16:20:16.883] result() for ClusterFuture ...
[16:20:16.883] - result already collected: FutureResult
[16:20:16.883] result() for ClusterFuture ... done
[16:20:16.883] result() for ClusterFuture ...
[16:20:16.883] - result already collected: FutureResult
[16:20:16.883] result() for ClusterFuture ... done
[16:20:16.883] signalConditions() ...
[16:20:16.884]  - include = ‘immediateCondition’
[16:20:16.884]  - exclude = 
[16:20:16.884]  - resignal = FALSE
[16:20:16.884]  - Number of conditions: 2
[16:20:16.884] signalConditions() ... done
[16:20:16.884] Future state: ‘finished’
[16:20:16.884] result() for ClusterFuture ...
[16:20:16.884] - result already collected: FutureResult
[16:20:16.884] result() for ClusterFuture ... done
[16:20:16.884] signalConditions() ...
[16:20:16.884]  - include = ‘condition’
[16:20:16.885]  - exclude = ‘immediateCondition’
[16:20:16.885]  - resignal = TRUE
[16:20:16.885]  - Number of conditions: 2
[16:20:16.885]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #2 of 4 ...[16:20:16.885]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[16:20:16.885] signalConditions() ... done
[16:20:16.886] receiveMessageFromWorker() for ClusterFuture ...
[16:20:16.886] - Validating connection of MultisessionFuture
[16:20:16.887] - received message: FutureResult
[16:20:16.887] - Received FutureResult
[16:20:16.887] - Erased future from FutureRegistry
[16:20:16.887] result() for ClusterFuture ...
[16:20:16.887] - result already collected: FutureResult
[16:20:16.887] result() for ClusterFuture ... done
[16:20:16.887] signalConditions() ...
[16:20:16.887]  - include = ‘immediateCondition’
[16:20:16.887]  - exclude = 
[16:20:16.887]  - resignal = FALSE
[16:20:16.888]  - Number of conditions: 2
[16:20:16.888] signalConditions() ... done
[16:20:16.888] receiveMessageFromWorker() for ClusterFuture ... done
Plotting tile #3 of 4 ...
[16:20:16.888] result() for ClusterFuture ...
[16:20:16.888] - result already collected: FutureResult
[16:20:16.888] result() for ClusterFuture ... done
[16:20:16.888] result() for ClusterFuture ...
[16:20:16.888] - result already collected: FutureResult
[16:20:16.888] result() for ClusterFuture ... done
[16:20:16.888] signalConditions() ...
[16:20:16.888]  - include = ‘immediateCondition’
[16:20:16.889]  - exclude = 
[16:20:16.889]  - resignal = FALSE
[16:20:16.889]  - Number of conditions: 2
[16:20:16.889] signalConditions() ... done
[16:20:16.889] Future state: ‘finished’
[16:20:16.889] result() for ClusterFuture ...
[16:20:16.889] - result already collected: FutureResult
[16:20:16.889] result() for ClusterFuture ... done
[16:20:16.889] signalConditions() ...
[16:20:16.889]  - include = ‘condition’
[16:20:16.889]  - exclude = ‘immediateCondition’
[16:20:16.890]  - resignal = TRUE
[16:20:16.890]  - Number of conditions: 2
[16:20:16.890]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #3 of 4 ...[16:20:16.890]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[16:20:16.890] signalConditions() ... done
[16:20:16.926] receiveMessageFromWorker() for ClusterFuture ...
[16:20:16.926] - Validating connection of MultisessionFuture
[16:20:16.927] - received message: FutureResult
[16:20:16.927] - Received FutureResult
[16:20:16.927] - Erased future from FutureRegistry
[16:20:16.927] result() for ClusterFuture ...
[16:20:16.927] - result already collected: FutureResult
[16:20:16.927] result() for ClusterFuture ... done
[16:20:16.927] signalConditions() ...
[16:20:16.927]  - include = ‘immediateCondition’
[16:20:16.928]  - exclude = 
[16:20:16.928]  - resignal = FALSE
[16:20:16.928]  - Number of conditions: 2
[16:20:16.928] signalConditions() ... done
[16:20:16.928] receiveMessageFromWorker() for ClusterFuture ... done
Plotting tile #4 of 4 ...
[16:20:16.928] result() for ClusterFuture ...
[16:20:16.928] - result already collected: FutureResult
[16:20:16.928] result() for ClusterFuture ... done
[16:20:16.928] result() for ClusterFuture ...
[16:20:16.928] - result already collected: FutureResult
[16:20:16.929] result() for ClusterFuture ... done
[16:20:16.929] signalConditions() ...
[16:20:16.929]  - include = ‘immediateCondition’
[16:20:16.929]  - exclude = 
[16:20:16.929]  - resignal = FALSE
[16:20:16.929]  - Number of conditions: 2
[16:20:16.929] signalConditions() ... done
[16:20:16.929] Future state: ‘finished’
[16:20:16.929] result() for ClusterFuture ...
[16:20:16.929] - result already collected: FutureResult
[16:20:16.929] result() for ClusterFuture ... done
[16:20:16.930] signalConditions() ...
[16:20:16.930]  - include = ‘condition’
[16:20:16.930]  - exclude = ‘immediateCondition’
[16:20:16.930]  - resignal = TRUE
[16:20:16.930]  - Number of conditions: 2
[16:20:16.930]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #4 of 4 ...[16:20:16.930]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[16:20:16.930] signalConditions() ... done

> close.screen()
 [1]  1  2  3  4  5  6  7  8  9 10 11 12

> message("SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).\n")
SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).

- plan('multisession') ... DONE
Testing with 2 cores ... DONE
> message("*** Mandelbrot demo of the 'future' package ... DONE")
*** Mandelbrot demo of the 'future' package ... DONE
> 
> message("*** Demos ... DONE")
*** Demos ... DONE
> 
> source("incl/end.R")
[16:20:16.932] plan(): Setting new future strategy stack:
[16:20:16.932] List of future strategies:
[16:20:16.932] 1. sequential:
[16:20:16.932]    - args: function (..., envir = parent.frame())
[16:20:16.932]    - tweaked: FALSE
[16:20:16.932]    - call: future::plan("sequential")
[16:20:16.933] plan(): nbrOfWorkers() = 1
> 
